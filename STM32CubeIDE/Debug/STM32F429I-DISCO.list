
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ff0  08013980  08013980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0004289a  08015970  08015970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000002e8  0805820c  0805820c  0005920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000096  080584f4  080584f4  000594f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 00097838  0805858c  0805858c  0005958c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080efdc4  080efdc4  000f10f0  2**0
                  CONTENTS
  8 .ARM          00000008  080efdc4  080efdc4  000f0dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080efdcc  080efdcc  000f10f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080efdcc  080efdcc  000f0dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080efde0  080efde0  000f0de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080efde8  000f1000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000156b4  200000f0  080efed8  000f10f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  200157a4  080efed8  000f17a4  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000f10f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000f2000  2**2
                  ALLOC
 17 .debug_line   000533e7  00000000  00000000  000f1120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000063  00000000  00000000  00144507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000b85a0  00000000  00000000  0014456a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00014d4d  00000000  00000000  001fcb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003168  00000000  00000000  00211858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001132c2  00000000  00000000  002149c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 000038ba  00000000  00000000  00327c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0001d72a  00000000  00000000  0032b53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00010ce8  00000000  00000000  00348c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0035994e  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00008c98  00000000  00000000  00359a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013968 	.word	0x08013968

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	08013968 	.word	0x08013968

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c2:	e003      	b.n	80005cc <LoopCopyDataInit>

080005c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ca:	3104      	adds	r1, #4

080005cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d4:	d3f6      	bcc.n	80005c4 <CopyDataInit>
  ldr  r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d8:	e002      	b.n	80005e0 <LoopFillZerobss>

080005da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005dc:	f842 3b04 	str.w	r3, [r2], #4

080005e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e4:	d3f9      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e6:	f004 f8a5 	bl	8004734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f012 fc4f 	bl	8012e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f000 fb2f 	bl	8000c50 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005f8:	080efde8 	.word	0x080efde8
  ldr  r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000600:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8000604:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8000608:	200157a4 	.word	0x200157a4

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <_ZN12TetrisEngine17generateNextBlockEv>:

    //random khối mới
    spawnBlock();
}

void TetrisEngine::generateNextBlock() {
 8000610:	b510      	push	{r4, lr}
 8000612:	4604      	mov	r4, r0
    nextBlockId = osKernelGetTickCount() % 7;
 8000614:	f006 fc0a 	bl	8006e2c <osKernelGetTickCount>
 8000618:	2307      	movs	r3, #7
 800061a:	fbb0 f3f3 	udiv	r3, r0, r3
 800061e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000622:	1ac0      	subs	r0, r0, r3
 8000624:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
    nextBlockSize = (nextBlockId == 0) ? 4 : 3;
 8000628:	b1e8      	cbz	r0, 8000666 <_ZN12TetrisEngine17generateNextBlockEv+0x56>
    nextBlockSize = (nextBlockId == 1) ? 2 : nextBlockSize;
 800062a:	2801      	cmp	r0, #1
 800062c:	bf14      	ite	ne
 800062e:	2303      	movne	r3, #3
 8000630:	2302      	moveq	r3, #2
 8000632:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
    for (int i = 0; i < 4; ++i)
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <_ZN12TetrisEngine17generateNextBlockEv+0x5c>)
 8000638:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800063c:	eb03 1380 	add.w	r3, r3, r0, lsl #6
 8000640:	4620      	mov	r0, r4
        for (int j = 0; j < 4; ++j)
            nextBlock[i][j] = Tetrominoes[nextBlockId][i][j];
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	f8c0 1380 	str.w	r1, [r0, #896]	@ 0x380
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	f8c0 1384 	str.w	r1, [r0, #900]	@ 0x384
 800064e:	6899      	ldr	r1, [r3, #8]
 8000650:	f8c0 1388 	str.w	r1, [r0, #904]	@ 0x388
 8000654:	68d9      	ldr	r1, [r3, #12]
 8000656:	f8c0 138c 	str.w	r1, [r0, #908]	@ 0x38c
    for (int i = 0; i < 4; ++i)
 800065a:	3010      	adds	r0, #16
 800065c:	4290      	cmp	r0, r2
 800065e:	f103 0310 	add.w	r3, r3, #16
 8000662:	d1ee      	bne.n	8000642 <_ZN12TetrisEngine17generateNextBlockEv+0x32>
}
 8000664:	bd10      	pop	{r4, pc}
    nextBlockSize = (nextBlockId == 0) ? 4 : 3;
 8000666:	2304      	movs	r3, #4
 8000668:	e7e3      	b.n	8000632 <_ZN12TetrisEngine17generateNextBlockEv+0x22>
 800066a:	bf00      	nop
 800066c:	080139c0 	.word	0x080139c0

08000670 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERi>:

void TetrisEngine::getNextBlock(BlockMatrix& block, int& size) const {
 8000670:	b5f0      	push	{r4, r5, r6, r7, lr}
	block = nextBlock;
 8000672:	f500 7560 	add.w	r5, r0, #896	@ 0x380
void TetrisEngine::getNextBlock(BlockMatrix& block, int& size) const {
 8000676:	4606      	mov	r6, r0
 8000678:	4617      	mov	r7, r2
	block = nextBlock;
 800067a:	460c      	mov	r4, r1
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800068c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	size = nextBlockSize;
 8000690:	f8d6 3378 	ldr.w	r3, [r6, #888]	@ 0x378
 8000694:	603b      	str	r3, [r7, #0]
}
 8000696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000698 <_ZN12TetrisEngine10spawnBlockEv>:

void TetrisEngine::spawnBlock() {
    if (nextBlockId == -1) generateNextBlock(); // Spawn đầu
 8000698:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 800069c:	3301      	adds	r3, #1
void TetrisEngine::spawnBlock() {
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
    if (nextBlockId == -1) generateNextBlock(); // Spawn đầu
 80006a2:	d101      	bne.n	80006a8 <_ZN12TetrisEngine10spawnBlockEv+0x10>
 80006a4:	f7ff ffb4 	bl	8000610 <_ZN12TetrisEngine17generateNextBlockEv>
    for (int i = 0; i < 4; ++i)
 80006a8:	4623      	mov	r3, r4
 80006aa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
        for (int j = 0; j < 4; ++j)
            currBlock[i][j] = nextBlock[i][j];
 80006ae:	f8d3 1380 	ldr.w	r1, [r3, #896]	@ 0x380
 80006b2:	f8c3 1320 	str.w	r1, [r3, #800]	@ 0x320
 80006b6:	f8d3 1384 	ldr.w	r1, [r3, #900]	@ 0x384
 80006ba:	f8c3 1324 	str.w	r1, [r3, #804]	@ 0x324
 80006be:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80006c2:	f8c3 1328 	str.w	r1, [r3, #808]	@ 0x328
 80006c6:	f8d3 138c 	ldr.w	r1, [r3, #908]	@ 0x38c
 80006ca:	f8c3 132c 	str.w	r1, [r3, #812]	@ 0x32c
    for (int i = 0; i < 4; ++i)
 80006ce:	3310      	adds	r3, #16
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d1ec      	bne.n	80006ae <_ZN12TetrisEngine10spawnBlockEv+0x16>
    blockSize = nextBlockSize;
 80006d4:	f8d4 3378 	ldr.w	r3, [r4, #888]	@ 0x378
 80006d8:	f8c4 3368 	str.w	r3, [r4, #872]	@ 0x368
    currX = (GRID_WIDTH - blockSize) / 2;
 80006dc:	f1c3 030a 	rsb	r3, r3, #10
 80006e0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80006e4:	105b      	asrs	r3, r3, #1
 80006e6:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    currY = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c4 3364 	str.w	r3, [r4, #868]	@ 0x364
    generateNextBlock(); // Tạo khối tiếp theo
 80006f0:	4620      	mov	r0, r4
}
 80006f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    generateNextBlock(); // Tạo khối tiếp theo
 80006f6:	f7ff bf8b 	b.w	8000610 <_ZN12TetrisEngine17generateNextBlockEv>

080006fa <_ZN12TetrisEngine4initEv>:
void TetrisEngine::init() {
 80006fa:	b510      	push	{r4, lr}
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 80006fc:	4603      	mov	r3, r0
 80006fe:	4604      	mov	r4, r0
      { return iterator(data() + _Nm); }
 8000700:	f500 7148 	add.w	r1, r0, #800	@ 0x320
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
 8000704:	2000      	movs	r0, #0
    for (auto& row : grid) row.fill(0);
 8000706:	428b      	cmp	r3, r1
 8000708:	d110      	bne.n	800072c <_ZN12TetrisEngine4initEv+0x32>
    gameOver = false;
 800070a:	2300      	movs	r3, #0
 800070c:	f884 336c 	strb.w	r3, [r4, #876]	@ 0x36c
    score = 0;
 8000710:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
	nextBlockId = -1;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
	generateNextBlock();
 8000718:	4620      	mov	r0, r4
	nextBlockId = -1;
 800071a:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
	generateNextBlock();
 800071e:	f7ff ff77 	bl	8000610 <_ZN12TetrisEngine17generateNextBlockEv>
    spawnBlock();
 8000722:	4620      	mov	r0, r4
}
 8000724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spawnBlock();
 8000728:	f7ff bfb6 	b.w	8000698 <_ZN12TetrisEngine10spawnBlockEv>
      { return static_cast<pointer>(_M_elems); }
 800072c:	461a      	mov	r2, r3
      if (__n <= 0)
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 800072e:	3328      	adds	r3, #40	@ 0x28
      for (; __first != __last; ++__first)
 8000730:	4293      	cmp	r3, r2
 8000732:	d0e8      	beq.n	8000706 <_ZN12TetrisEngine4initEv+0xc>
	*__first = __tmp;
 8000734:	f842 0b04 	str.w	r0, [r2], #4
 8000738:	e7fa      	b.n	8000730 <_ZN12TetrisEngine4initEv+0x36>

0800073a <_ZN12TetrisEngineC1Ev>:
TetrisEngine::TetrisEngine() {
 800073a:	b510      	push	{r4, lr}
 800073c:	4604      	mov	r4, r0
	init();
 800073e:	f7ff ffdc 	bl	80006fa <_ZN12TetrisEngine4initEv>
}
 8000742:	4620      	mov	r0, r4
 8000744:	bd10      	pop	{r4, pc}

08000746 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE>:


//xoay block
void TetrisEngine::rotateMatrix(BlockMatrix& mat) {
 8000746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000748:	4605      	mov	r5, r0
 800074a:	b091      	sub	sp, #68	@ 0x44
 800074c:	460c      	mov	r4, r1
    BlockMatrix temp = {};
 800074e:	2240      	movs	r2, #64	@ 0x40
 8000750:	2100      	movs	r1, #0
 8000752:	4668      	mov	r0, sp
 8000754:	f012 faf1 	bl	8012d3a <memset>
    for (int i = 0; i < blockSize; ++i)
 8000758:	f8d5 2368 	ldr.w	r2, [r5, #872]	@ 0x368
 800075c:	2300      	movs	r3, #0
 800075e:	eb0d 0182 	add.w	r1, sp, r2, lsl #2
 8000762:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8000766:	429a      	cmp	r2, r3
 8000768:	dc0c      	bgt.n	8000784 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x3e>
        for (int j = 0; j < blockSize; ++j)
            temp[j][blockSize - 1 - i] = mat[i][j];
    mat = temp;
 800076a:	466d      	mov	r5, sp
 800076c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800077c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000780:	b011      	add	sp, #68	@ 0x44
 8000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000784:	eb04 1503 	add.w	r5, r4, r3, lsl #4
    for (int i = 0; i < blockSize; ++i)
 8000788:	460e      	mov	r6, r1
            temp[j][blockSize - 1 - i] = mat[i][j];
 800078a:	f855 7b04 	ldr.w	r7, [r5], #4
 800078e:	f846 7c04 	str.w	r7, [r6, #-4]
        for (int j = 0; j < blockSize; ++j)
 8000792:	4285      	cmp	r5, r0
 8000794:	f106 0610 	add.w	r6, r6, #16
 8000798:	d1f7      	bne.n	800078a <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x44>
    for (int i = 0; i < blockSize; ++i)
 800079a:	3301      	adds	r3, #1
 800079c:	3904      	subs	r1, #4
 800079e:	3010      	adds	r0, #16
 80007a0:	e7e1      	b.n	8000766 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x20>

080007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>:

//lấy đường biên của block
void TetrisEngine::getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY) {
 80007a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    minX = blockSize; maxX = 0; minY = blockSize; maxY = 0;
 80007a4:	f8d0 4368 	ldr.w	r4, [r0, #872]	@ 0x368
 80007a8:	6014      	str	r4, [r2, #0]
void TetrisEngine::getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY) {
 80007aa:	e9dd 6c05 	ldrd	r6, ip, [sp, #20]
    minX = blockSize; maxX = 0; minY = blockSize; maxY = 0;
 80007ae:	2400      	movs	r4, #0
 80007b0:	601c      	str	r4, [r3, #0]
 80007b2:	f8d0 5368 	ldr.w	r5, [r0, #872]	@ 0x368
 80007b6:	6035      	str	r5, [r6, #0]
 80007b8:	f8cc 4000 	str.w	r4, [ip]
    for (int i = 0; i < blockSize; ++i)
 80007bc:	f8d0 5368 	ldr.w	r5, [r0, #872]	@ 0x368
 80007c0:	42a5      	cmp	r5, r4
 80007c2:	dd1f      	ble.n	8000804 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x62>
 80007c4:	eb01 1e04 	add.w	lr, r1, r4, lsl #4
        for (int j = 0; j < blockSize; ++j)
 80007c8:	2500      	movs	r5, #0
 80007ca:	e015      	b.n	80007f8 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x56>
            if (block[i][j]) {
 80007cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80007d0:	b18f      	cbz	r7, 80007f6 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x54>
                if (j < minX) minX = j;
 80007d2:	6817      	ldr	r7, [r2, #0]
 80007d4:	42af      	cmp	r7, r5
 80007d6:	bfc8      	it	gt
 80007d8:	6015      	strgt	r5, [r2, #0]
                if (j > maxX) maxX = j;
 80007da:	681f      	ldr	r7, [r3, #0]
 80007dc:	42af      	cmp	r7, r5
 80007de:	bfb8      	it	lt
 80007e0:	601d      	strlt	r5, [r3, #0]
                if (i < minY) minY = i;
 80007e2:	6837      	ldr	r7, [r6, #0]
 80007e4:	42a7      	cmp	r7, r4
 80007e6:	bfc8      	it	gt
 80007e8:	6034      	strgt	r4, [r6, #0]
                if (i > maxY) maxY = i;
 80007ea:	f8dc 7000 	ldr.w	r7, [ip]
 80007ee:	42a7      	cmp	r7, r4
 80007f0:	bfb8      	it	lt
 80007f2:	f8cc 4000 	strlt.w	r4, [ip]
        for (int j = 0; j < blockSize; ++j)
 80007f6:	3501      	adds	r5, #1
 80007f8:	f8d0 7368 	ldr.w	r7, [r0, #872]	@ 0x368
 80007fc:	42af      	cmp	r7, r5
 80007fe:	dce5      	bgt.n	80007cc <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x2a>
    for (int i = 0; i < blockSize; ++i)
 8000800:	3401      	adds	r4, #1
 8000802:	e7db      	b.n	80007bc <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x1a>
            }
}
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>:

//kiểm tra va trạm
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800080a:	b087      	sub	sp, #28
 800080c:	460e      	mov	r6, r1
 800080e:	4619      	mov	r1, r3
    int minX, maxX, minY, maxY;
    getBlockBounds(block, minX, maxX, minY, maxY);
 8000810:	ab05      	add	r3, sp, #20
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	ab04      	add	r3, sp, #16
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000816:	4614      	mov	r4, r2
    getBlockBounds(block, minX, maxX, minY, maxY);
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	aa02      	add	r2, sp, #8
 800081c:	ab03      	add	r3, sp, #12
 800081e:	f7ff ffc0 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000822:	4605      	mov	r5, r0
    for (int i = minY; i <= maxY; ++i)
 8000824:	e9dd 0e04 	ldrd	r0, lr, [sp, #16]
        for (int j = minX; j <= maxX; ++j)
 8000828:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800082c:	1902      	adds	r2, r0, r4
 800082e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8000832:	f04f 0828 	mov.w	r8, #40	@ 0x28
    for (int i = minY; i <= maxY; ++i)
 8000836:	4586      	cmp	lr, r0
 8000838:	db1c      	blt.n	8000874 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x6e>
 800083a:	eb01 1900 	add.w	r9, r1, r0, lsl #4
 800083e:	fb08 5702 	mla	r7, r8, r2, r5
        for (int j = minX; j <= maxX; ++j)
 8000842:	465c      	mov	r4, fp
 8000844:	e00d      	b.n	8000862 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x5c>
            if (block[i][j]) {
 8000846:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 800084a:	b14b      	cbz	r3, 8000860 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x5a>
                int gx = newX + j;
                int gy = newY + i;

                //ra ngoài hoặc ô đã được đặt -> va chạm -> return true
                if (gx < 0 || gx >= GRID_WIDTH || gy < 0 || gy >= GRID_HEIGHT) return true;
 800084c:	eb04 0a06 	add.w	sl, r4, r6
 8000850:	f1ba 0f09 	cmp.w	sl, #9
 8000854:	d80a      	bhi.n	800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
 8000856:	2a13      	cmp	r2, #19
 8000858:	d808      	bhi.n	800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
                if (grid[gy][gx]) return true;
 800085a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800085e:	b92b      	cbnz	r3, 800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
        for (int j = minX; j <= maxX; ++j)
 8000860:	3401      	adds	r4, #1
 8000862:	45a4      	cmp	ip, r4
 8000864:	daef      	bge.n	8000846 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x40>
    for (int i = minY; i <= maxY; ++i)
 8000866:	3001      	adds	r0, #1
 8000868:	3201      	adds	r2, #1
 800086a:	e7e4      	b.n	8000836 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x30>
                if (gx < 0 || gx >= GRID_WIDTH || gy < 0 || gy >= GRID_HEIGHT) return true;
 800086c:	2001      	movs	r0, #1
            }
    return false;
}
 800086e:	b007      	add	sp, #28
 8000870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
 8000874:	2000      	movs	r0, #0
 8000876:	e7fa      	b.n	800086e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x68>

08000878 <_ZN12TetrisEngine10clearLinesEv>:
    clearLines();
    spawnBlock();
}

//xóa line nếu full
void TetrisEngine::clearLines() {
 8000878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800087c:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 8000880:	4606      	mov	r6, r0
    for (int y = GRID_HEIGHT - 1; y >= 0; --y) {
 8000882:	2713      	movs	r7, #19
        bool full = true;
        for (int x = 0; x < GRID_WIDTH; ++x)
            if (!grid[y][x]) full = false;

        if (full) {
        	takeScore = true;
 8000884:	f04f 0901 	mov.w	r9, #1
 8000888:	eb00 080e 	add.w	r8, r0, lr
 800088c:	f04f 0a00 	mov.w	sl, #0
        for (int x = 0; x < GRID_WIDTH; ++x)
 8000890:	fb0e 6107 	mla	r1, lr, r7, r6
 8000894:	2200      	movs	r2, #0
        bool full = true;
 8000896:	2301      	movs	r3, #1
            if (!grid[y][x]) full = false;
 8000898:	f851 0b04 	ldr.w	r0, [r1], #4
        for (int x = 0; x < GRID_WIDTH; ++x)
 800089c:	3201      	adds	r2, #1
            if (!grid[y][x]) full = false;
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf08      	it	eq
 80008a2:	2300      	moveq	r3, #0
        for (int x = 0; x < GRID_WIDTH; ++x)
 80008a4:	2a0a      	cmp	r2, #10
 80008a6:	d1f7      	bne.n	8000898 <_ZN12TetrisEngine10clearLinesEv+0x20>
        if (full) {
 80008a8:	b303      	cbz	r3, 80008ec <_ZN12TetrisEngine10clearLinesEv+0x74>
        	score++; //tăng điểm
 80008aa:	f8d6 3370 	ldr.w	r3, [r6, #880]	@ 0x370
        	takeScore = true;
 80008ae:	f886 9374 	strb.w	r9, [r6, #884]	@ 0x374
        	score++; //tăng điểm
 80008b2:	3301      	adds	r3, #1
 80008b4:	f8c6 3370 	str.w	r3, [r6, #880]	@ 0x370
            for (int row = y; row > 0; --row)
 80008b8:	46bc      	mov	ip, r7
 80008ba:	f1bc 0f00 	cmp.w	ip, #0
 80008be:	d105      	bne.n	80008cc <_ZN12TetrisEngine10clearLinesEv+0x54>
 80008c0:	4633      	mov	r3, r6
      for (; __first != __last; ++__first)
 80008c2:	4598      	cmp	r8, r3
 80008c4:	d0e4      	beq.n	8000890 <_ZN12TetrisEngine10clearLinesEv+0x18>
	*__first = __tmp;
 80008c6:	f843 ab04 	str.w	sl, [r3], #4
 80008ca:	e7fa      	b.n	80008c2 <_ZN12TetrisEngine10clearLinesEv+0x4a>
                grid[row] = grid[row - 1];
 80008cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80008d0:	fb0e f40c 	mul.w	r4, lr, ip
 80008d4:	eb08 0504 	add.w	r5, r8, r4
 80008d8:	4434      	add	r4, r6
 80008da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008e6:	e885 0003 	stmia.w	r5, {r0, r1}
            for (int row = y; row > 0; --row)
 80008ea:	e7e6      	b.n	80008ba <_ZN12TetrisEngine10clearLinesEv+0x42>
    for (int y = GRID_HEIGHT - 1; y >= 0; --y) {
 80008ec:	3f01      	subs	r7, #1
 80008ee:	d2cf      	bcs.n	8000890 <_ZN12TetrisEngine10clearLinesEv+0x18>
            grid[0].fill(0);
            ++y; // re-check this row
        }
    }
}
 80008f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080008f4 <_ZN12TetrisEngine9lockBlockEv>:
void TetrisEngine::lockBlock() {
 80008f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < blockSize; ++i)
 80008f6:	f8d0 6368 	ldr.w	r6, [r0, #872]	@ 0x368
void TetrisEngine::lockBlock() {
 80008fa:	4604      	mov	r4, r0
 80008fc:	f500 7547 	add.w	r5, r0, #796	@ 0x31c
    for (int i = 0; i < blockSize; ++i)
 8000900:	2200      	movs	r2, #0
                    grid[gy][gx] = 1;
 8000902:	f04f 0c0a 	mov.w	ip, #10
 8000906:	f04f 0e01 	mov.w	lr, #1
    for (int i = 0; i < blockSize; ++i)
 800090a:	4296      	cmp	r6, r2
 800090c:	dc07      	bgt.n	800091e <_ZN12TetrisEngine9lockBlockEv+0x2a>
    clearLines();
 800090e:	4620      	mov	r0, r4
 8000910:	f7ff ffb2 	bl	8000878 <_ZN12TetrisEngine10clearLinesEv>
    spawnBlock();
 8000914:	4620      	mov	r0, r4
}
 8000916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    spawnBlock();
 800091a:	f7ff bebd 	b.w	8000698 <_ZN12TetrisEngine10spawnBlockEv>
 800091e:	462f      	mov	r7, r5
        for (int j = 0; j < blockSize; ++j)
 8000920:	2100      	movs	r1, #0
            if (currBlock[i][j]) {
 8000922:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8000926:	b16b      	cbz	r3, 8000944 <_ZN12TetrisEngine9lockBlockEv+0x50>
                int gy = currY + i;
 8000928:	f8d4 0364 	ldr.w	r0, [r4, #868]	@ 0x364
 800092c:	4410      	add	r0, r2
                if (gy >= 0 && gy < GRID_HEIGHT && gx >= 0 && gx < GRID_WIDTH)
 800092e:	2813      	cmp	r0, #19
 8000930:	d808      	bhi.n	8000944 <_ZN12TetrisEngine9lockBlockEv+0x50>
                int gx = currX + j;
 8000932:	f8d4 3360 	ldr.w	r3, [r4, #864]	@ 0x360
 8000936:	440b      	add	r3, r1
                if (gy >= 0 && gy < GRID_HEIGHT && gx >= 0 && gx < GRID_WIDTH)
 8000938:	2b09      	cmp	r3, #9
                    grid[gy][gx] = 1;
 800093a:	bf9c      	itt	ls
 800093c:	fb0c 3300 	mlals	r3, ip, r0, r3
 8000940:	f844 e023 	strls.w	lr, [r4, r3, lsl #2]
        for (int j = 0; j < blockSize; ++j)
 8000944:	3101      	adds	r1, #1
 8000946:	428e      	cmp	r6, r1
 8000948:	d1eb      	bne.n	8000922 <_ZN12TetrisEngine9lockBlockEv+0x2e>
    for (int i = 0; i < blockSize; ++i)
 800094a:	3201      	adds	r2, #1
 800094c:	3510      	adds	r5, #16
 800094e:	e7dc      	b.n	800090a <_ZN12TetrisEngine9lockBlockEv+0x16>

08000950 <_ZN12TetrisEngine6updateEv>:

//check va chạm + khóa khối nếu được
void TetrisEngine::update() {
 8000950:	b538      	push	{r3, r4, r5, lr}
	if(!gameOver){
 8000952:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::update() {
 8000956:	4604      	mov	r4, r0
	if(!gameOver){
 8000958:	b963      	cbnz	r3, 8000974 <_ZN12TetrisEngine6updateEv+0x24>
		if (!checkCollision(currX, currY + 1, currBlock))
 800095a:	f8d0 5364 	ldr.w	r5, [r0, #868]	@ 0x364
 800095e:	f8d0 1360 	ldr.w	r1, [r0, #864]	@ 0x360
 8000962:	3501      	adds	r5, #1
 8000964:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 8000968:	462a      	mov	r2, r5
 800096a:	f7ff ff4c 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 800096e:	b910      	cbnz	r0, 8000976 <_ZN12TetrisEngine6updateEv+0x26>
			currY++;
 8000970:	f8c4 5364 	str.w	r5, [r4, #868]	@ 0x364
			for(int i = 0; i < GRID_WIDTH; i++)
				if(grid[0][i]) gameOver = true;
		}
	}

}
 8000974:	bd38      	pop	{r3, r4, r5, pc}
			lockBlock();
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff ffbc 	bl	80008f4 <_ZN12TetrisEngine9lockBlockEv>
			for(int i = 0; i < GRID_WIDTH; i++)
 800097c:	1f23      	subs	r3, r4, #4
 800097e:	f104 0224 	add.w	r2, r4, #36	@ 0x24
				if(grid[0][i]) gameOver = true;
 8000982:	2101      	movs	r1, #1
 8000984:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8000988:	b108      	cbz	r0, 800098e <_ZN12TetrisEngine6updateEv+0x3e>
 800098a:	f884 136c 	strb.w	r1, [r4, #876]	@ 0x36c
			for(int i = 0; i < GRID_WIDTH; i++)
 800098e:	4293      	cmp	r3, r2
 8000990:	d1f8      	bne.n	8000984 <_ZN12TetrisEngine6updateEv+0x34>
 8000992:	e7ef      	b.n	8000974 <_ZN12TetrisEngine6updateEv+0x24>

08000994 <_ZN12TetrisEngine10isGameOverEv>:

//check gameover
bool TetrisEngine::isGameOver() {
 8000994:	b570      	push	{r4, r5, r6, lr}
	BlockMatrix newBlock = nextBlock;
 8000996:	f500 7560 	add.w	r5, r0, #896	@ 0x380
bool TetrisEngine::isGameOver() {
 800099a:	4606      	mov	r6, r0
	BlockMatrix newBlock = nextBlock;
 800099c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
bool TetrisEngine::isGameOver() {
 800099e:	b090      	sub	sp, #64	@ 0x40
	BlockMatrix newBlock = nextBlock;
 80009a0:	466c      	mov	r4, sp
 80009a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int newX = GRID_WIDTH / 2;
	int newY = 0;
	return checkCollision(newX, newY, newBlock); // Nếu có va chạm, game over
 80009b4:	466b      	mov	r3, sp
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	4630      	mov	r0, r6
 80009bc:	f7ff ff23 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
}
 80009c0:	b010      	add	sp, #64	@ 0x40
 80009c2:	bd70      	pop	{r4, r5, r6, pc}

080009c4 <_ZN12TetrisEngine8moveLeftEv>:

//di chuyển trái
void TetrisEngine::moveLeft() {
 80009c4:	b538      	push	{r3, r4, r5, lr}
	if(gameOver) return;
 80009c6:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::moveLeft() {
 80009ca:	4604      	mov	r4, r0
	if(gameOver) return;
 80009cc:	b963      	cbnz	r3, 80009e8 <_ZN12TetrisEngine8moveLeftEv+0x24>
    if (!checkCollision(currX - 1, currY, currBlock)) currX--;
 80009ce:	f8d0 5360 	ldr.w	r5, [r0, #864]	@ 0x360
 80009d2:	f8d0 2364 	ldr.w	r2, [r0, #868]	@ 0x364
 80009d6:	3d01      	subs	r5, #1
 80009d8:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 80009dc:	4629      	mov	r1, r5
 80009de:	f7ff ff12 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 80009e2:	b908      	cbnz	r0, 80009e8 <_ZN12TetrisEngine8moveLeftEv+0x24>
 80009e4:	f8c4 5360 	str.w	r5, [r4, #864]	@ 0x360
}
 80009e8:	bd38      	pop	{r3, r4, r5, pc}

080009ea <_ZN12TetrisEngine9moveRightEv>:

//di chuyển phải
void TetrisEngine::moveRight() {
 80009ea:	b538      	push	{r3, r4, r5, lr}
	if(gameOver) return;
 80009ec:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::moveRight() {
 80009f0:	4604      	mov	r4, r0
	if(gameOver) return;
 80009f2:	b963      	cbnz	r3, 8000a0e <_ZN12TetrisEngine9moveRightEv+0x24>
    if (!checkCollision(currX + 1, currY, currBlock)) currX++;
 80009f4:	f8d0 5360 	ldr.w	r5, [r0, #864]	@ 0x360
 80009f8:	f8d0 2364 	ldr.w	r2, [r0, #868]	@ 0x364
 80009fc:	3501      	adds	r5, #1
 80009fe:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 8000a02:	4629      	mov	r1, r5
 8000a04:	f7ff feff 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a08:	b908      	cbnz	r0, 8000a0e <_ZN12TetrisEngine9moveRightEv+0x24>
 8000a0a:	f8c4 5360 	str.w	r5, [r4, #864]	@ 0x360
}
 8000a0e:	bd38      	pop	{r3, r4, r5, pc}

08000a10 <_ZN12TetrisEngine4dropEv>:

//thả block
void TetrisEngine::drop() {
 8000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(gameOver) return;
 8000a12:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::drop() {
 8000a16:	4604      	mov	r4, r0
	if(gameOver) return;
 8000a18:	b9ab      	cbnz	r3, 8000a46 <_ZN12TetrisEngine4dropEv+0x36>
    while (!checkCollision(currX, currY + 1, currBlock)) currY++;
 8000a1a:	f8d0 6360 	ldr.w	r6, [r0, #864]	@ 0x360
 8000a1e:	f500 7748 	add.w	r7, r0, #800	@ 0x320
 8000a22:	f8d4 5364 	ldr.w	r5, [r4, #868]	@ 0x364
 8000a26:	3501      	adds	r5, #1
 8000a28:	463b      	mov	r3, r7
 8000a2a:	462a      	mov	r2, r5
 8000a2c:	4631      	mov	r1, r6
 8000a2e:	4620      	mov	r0, r4
 8000a30:	f7ff fee9 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a34:	b120      	cbz	r0, 8000a40 <_ZN12TetrisEngine4dropEv+0x30>
    lockBlock();
 8000a36:	4620      	mov	r0, r4
}
 8000a38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lockBlock();
 8000a3c:	f7ff bf5a 	b.w	80008f4 <_ZN12TetrisEngine9lockBlockEv>
    while (!checkCollision(currX, currY + 1, currBlock)) currY++;
 8000a40:	f8c4 5364 	str.w	r5, [r4, #868]	@ 0x364
 8000a44:	e7ed      	b.n	8000a22 <_ZN12TetrisEngine4dropEv+0x12>
}
 8000a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a48 <_ZN12TetrisEngine6rotateEv>:

//xoay block
void TetrisEngine::rotate() {
 8000a48:	b570      	push	{r4, r5, r6, lr}
	if(gameOver) return;
 8000a4a:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::rotate() {
 8000a4e:	b090      	sub	sp, #64	@ 0x40
 8000a50:	4604      	mov	r4, r0
	if(gameOver) return;
 8000a52:	bb23      	cbnz	r3, 8000a9e <_ZN12TetrisEngine6rotateEv+0x56>
    BlockMatrix temp = currBlock;
 8000a54:	f500 7648 	add.w	r6, r0, #800	@ 0x320
 8000a58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a5a:	466d      	mov	r5, sp
 8000a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a6a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    rotateMatrix(temp);
 8000a6e:	4620      	mov	r0, r4
 8000a70:	4669      	mov	r1, sp
 8000a72:	f7ff fe68 	bl	8000746 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE>
    if (!checkCollision(currX, currY, temp))
 8000a76:	e9d4 12d8 	ldrd	r1, r2, [r4, #864]	@ 0x360
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	466b      	mov	r3, sp
 8000a7e:	f7ff fec2 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a82:	f504 7448 	add.w	r4, r4, #800	@ 0x320
 8000a86:	b950      	cbnz	r0, 8000a9e <_ZN12TetrisEngine6rotateEv+0x56>
        currBlock = temp;
 8000a88:	466d      	mov	r5, sp
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000a9e:	b010      	add	sp, #64	@ 0x40
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000aa4 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 8000aa4:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <SPI5_Write+0x1c>)
{
 8000aa8:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <SPI5_Write+0x20>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f10d 0106 	add.w	r1, sp, #6
 8000ab6:	f005 fc13 	bl	80062e0 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8000aba:	b003      	add	sp, #12
 8000abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ac0:	20000004 	.word	0x20000004
 8000ac4:	200001a0 	.word	0x200001a0

08000ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(osMessageQueueGetCount(speedQueueHandle) < 1){
 8000aca:	4c0c      	ldr	r4, [pc, #48]	@ (8000afc <StartDefaultTask+0x34>)
		char res;
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET){
 8000acc:	4d0c      	ldr	r5, [pc, #48]	@ (8000b00 <StartDefaultTask+0x38>)
	if(osMessageQueueGetCount(speedQueueHandle) < 1){
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	f006 fb4c 	bl	800716c <osMessageQueueGetCount>
 8000ad4:	b970      	cbnz	r0, 8000af4 <StartDefaultTask+0x2c>
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET){
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f004 f8b9 	bl	8004c50 <HAL_GPIO_ReadPin>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	b940      	cbnz	r0, 8000af4 <StartDefaultTask+0x2c>
			res = 'D';
 8000ae2:	2344      	movs	r3, #68	@ 0x44
 8000ae4:	f88d 3007 	strb.w	r3, [sp, #7]
			osMessageQueuePut(speedQueueHandle, &res, 0, 10);
 8000ae8:	6820      	ldr	r0, [r4, #0]
 8000aea:	230a      	movs	r3, #10
 8000aec:	f10d 0107 	add.w	r1, sp, #7
 8000af0:	f006 fadb 	bl	80070aa <osMessageQueuePut>
		}
	}
	osDelay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f006 f9e9 	bl	8006ecc <osDelay>
	if(osMessageQueueGetCount(speedQueueHandle) < 1){
 8000afa:	e7e8      	b.n	8000ace <StartDefaultTask+0x6>
 8000afc:	20000110 	.word	0x20000110
 8000b00:	40021800 	.word	0x40021800

08000b04 <MovingTask>:
  }
  /* USER CODE END 5 */
}


void MovingTask(void *argument){
 8000b04:	b507      	push	{r0, r1, r2, lr}
	for(;;){
		if(osMessageQueueGetCount(movingQueueHandle) < 1){
 8000b06:	4c1d      	ldr	r4, [pc, #116]	@ (8000b7c <MovingTask+0x78>)
			char res;
			osThreadNew(SingleBeepTask, NULL, &singleBeep_attributes);
 8000b08:	4d1d      	ldr	r5, [pc, #116]	@ (8000b80 <MovingTask+0x7c>)
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8000b0a:	4e1e      	ldr	r6, [pc, #120]	@ (8000b84 <MovingTask+0x80>)
		if(osMessageQueueGetCount(movingQueueHandle) < 1){
 8000b0c:	6820      	ldr	r0, [r4, #0]
 8000b0e:	f006 fb2d 	bl	800716c <osMessageQueueGetCount>
 8000b12:	4601      	mov	r1, r0
 8000b14:	b998      	cbnz	r0, 8000b3e <MovingTask+0x3a>
			osThreadNew(SingleBeepTask, NULL, &singleBeep_attributes);
 8000b16:	462a      	mov	r2, r5
 8000b18:	481b      	ldr	r0, [pc, #108]	@ (8000b88 <MovingTask+0x84>)
 8000b1a:	f006 f98e 	bl	8006e3a <osThreadNew>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <MovingTask+0x80>)
 8000b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b24:	f004 f894 	bl	8004c50 <HAL_GPIO_ReadPin>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	b960      	cbnz	r0, 8000b46 <MovingTask+0x42>
				res = 'L';
 8000b2c:	234c      	movs	r3, #76	@ 0x4c
				osMessageQueuePut(movingQueueHandle, &res, 0, 10);
			}else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET){
				res = 'T';
				osMessageQueuePut(movingQueueHandle, &res, 0, 10);
			}else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET){
				res = 'D';
 8000b2e:	f88d 3007 	strb.w	r3, [sp, #7]
				osMessageQueuePut(movingQueueHandle, &res, 0, 10);
 8000b32:	6820      	ldr	r0, [r4, #0]
 8000b34:	230a      	movs	r3, #10
 8000b36:	f10d 0107 	add.w	r1, sp, #7
 8000b3a:	f006 fab6 	bl	80070aa <osMessageQueuePut>
			}
		}
		osDelay(10);
 8000b3e:	200a      	movs	r0, #10
 8000b40:	f006 f9c4 	bl	8006ecc <osDelay>
		if(osMessageQueueGetCount(movingQueueHandle) < 1){
 8000b44:	e7e2      	b.n	8000b0c <MovingTask+0x8>
			}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8000b46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	f004 f880 	bl	8004c50 <HAL_GPIO_ReadPin>
 8000b50:	4602      	mov	r2, r0
 8000b52:	b908      	cbnz	r0, 8000b58 <MovingTask+0x54>
				res = 'R';
 8000b54:	2352      	movs	r3, #82	@ 0x52
 8000b56:	e7ea      	b.n	8000b2e <MovingTask+0x2a>
			}else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <MovingTask+0x88>)
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	f004 f878 	bl	8004c50 <HAL_GPIO_ReadPin>
 8000b60:	4602      	mov	r2, r0
 8000b62:	b908      	cbnz	r0, 8000b68 <MovingTask+0x64>
				res = 'T';
 8000b64:	2354      	movs	r3, #84	@ 0x54
 8000b66:	e7e2      	b.n	8000b2e <MovingTask+0x2a>
			}else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET){
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <MovingTask+0x88>)
 8000b6a:	2108      	movs	r1, #8
 8000b6c:	f004 f870 	bl	8004c50 <HAL_GPIO_ReadPin>
 8000b70:	4602      	mov	r2, r0
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d1e3      	bne.n	8000b3e <MovingTask+0x3a>
				res = 'D';
 8000b76:	2344      	movs	r3, #68	@ 0x44
 8000b78:	e7d9      	b.n	8000b2e <MovingTask+0x2a>
 8000b7a:	bf00      	nop
 8000b7c:	20000114 	.word	0x20000114
 8000b80:	08014864 	.word	0x08014864
 8000b84:	40020400 	.word	0x40020400
 8000b88:	08000b91 	.word	0x08000b91
 8000b8c:	40021800 	.word	0x40021800

08000b90 <SingleBeepTask>:
	}
}

void SingleBeepTask(void *param){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000b90:	4c08      	ldr	r4, [pc, #32]	@ (8000bb4 <SingleBeepTask+0x24>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	4611      	mov	r1, r2
void SingleBeepTask(void *param){
 8000b96:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f004 f85f 	bl	8004c5c <HAL_GPIO_WritePin>
	osDelay(100);
 8000b9e:	2064      	movs	r0, #100	@ 0x64
 8000ba0:	f006 f994 	bl	8006ecc <osDelay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f004 f857 	bl	8004c5c <HAL_GPIO_WritePin>
	osThreadExit();
 8000bae:	f006 f988 	bl	8006ec2 <osThreadExit>
 8000bb2:	bf00      	nop
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <SystemClock_Config>:
{
 8000bb8:	b530      	push	{r4, r5, lr}
 8000bba:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbc:	2210      	movs	r2, #16
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	a80a      	add	r0, sp, #40	@ 0x28
 8000bc2:	f012 f8ba 	bl	8012d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc6:	2214      	movs	r2, #20
 8000bc8:	2100      	movs	r1, #0
 8000bca:	a803      	add	r0, sp, #12
 8000bcc:	f012 f8b5 	bl	8012d3a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2400      	movs	r4, #0
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <SystemClock_Config+0x90>)
 8000bd4:	9401      	str	r4, [sp, #4]
 8000bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bd8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000bdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <SystemClock_Config+0x94>)
 8000bea:	9402      	str	r4, [sp, #8]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bfa:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfe:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c04:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c08:	2502      	movs	r5, #2
 8000c0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c0e:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c12:	2108      	movs	r1, #8
 8000c14:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c18:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c22:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f004 fe1c 	bl	8005860 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c36:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c40:	f004 ffea 	bl	8005c18 <HAL_RCC_ClockConfig>
}
 8000c44:	b015      	add	sp, #84	@ 0x54
 8000c46:	bd30      	pop	{r4, r5, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <main>:
{
 8000c50:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000c54:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8000c56:	f003 fd7b 	bl	8004750 <HAL_Init>
  SystemClock_Config();
 8000c5a:	f7ff ffad 	bl	8000bb8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	2214      	movs	r2, #20
 8000c60:	2100      	movs	r1, #0
 8000c62:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c64:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f012 f868 	bl	8012d3a <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	4bc5      	ldr	r3, [pc, #788]	@ (8000f80 <main+0x330>)
 8000c6c:	9400      	str	r4, [sp, #0]
 8000c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000c70:	48c4      	ldr	r0, [pc, #784]	@ (8000f84 <main+0x334>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c72:	f8df b368 	ldr.w	fp, [pc, #872]	@ 8000fdc <main+0x38c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c76:	f042 0210 	orr.w	r2, r2, #16
 8000c7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c7e:	f002 0210 	and.w	r2, r2, #16
 8000c82:	9200      	str	r2, [sp, #0]
 8000c84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c86:	9401      	str	r4, [sp, #4]
 8000c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c8a:	f042 0220 	orr.w	r2, r2, #32
 8000c8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c92:	f002 0220 	and.w	r2, r2, #32
 8000c96:	9201      	str	r2, [sp, #4]
 8000c98:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	9402      	str	r4, [sp, #8]
 8000c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ca6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000caa:	9202      	str	r2, [sp, #8]
 8000cac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	9403      	str	r4, [sp, #12]
 8000cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cb2:	f042 0204 	orr.w	r2, r2, #4
 8000cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cba:	f002 0204 	and.w	r2, r2, #4
 8000cbe:	9203      	str	r2, [sp, #12]
 8000cc0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	9404      	str	r4, [sp, #16]
 8000cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
 8000cca:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cce:	f002 0201 	and.w	r2, r2, #1
 8000cd2:	9204      	str	r2, [sp, #16]
 8000cd4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	9405      	str	r4, [sp, #20]
 8000cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cda:	f042 0202 	orr.w	r2, r2, #2
 8000cde:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ce2:	f002 0202 	and.w	r2, r2, #2
 8000ce6:	9205      	str	r2, [sp, #20]
 8000ce8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cea:	9406      	str	r4, [sp, #24]
 8000cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cf2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cf6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000cfa:	9206      	str	r2, [sp, #24]
 8000cfc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	9407      	str	r4, [sp, #28]
 8000d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d02:	f042 0208 	orr.w	r2, r2, #8
 8000d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000d0e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d10:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000d12:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d14:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000d16:	f003 ffa1 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	489a      	ldr	r0, [pc, #616]	@ (8000f88 <main+0x338>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	f003 ff9c 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000d24:	4622      	mov	r2, r4
 8000d26:	4899      	ldr	r0, [pc, #612]	@ (8000f8c <main+0x33c>)
 8000d28:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000d2c:	f003 ff96 	bl	8004c5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2501      	movs	r5, #1
 8000d32:	233c      	movs	r3, #60	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d38:	4892      	ldr	r0, [pc, #584]	@ (8000f84 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d40:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	f003 fe9c 	bl	8004a88 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	488d      	ldr	r0, [pc, #564]	@ (8000f88 <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d56:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	e9cd 850d 	strd	r8, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5e:	9710      	str	r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f003 fe92 	bl	8004a88 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d64:	4889      	ldr	r0, [pc, #548]	@ (8000f8c <main+0x33c>)
 8000d66:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	e9cd 650d 	strd	r6, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6c:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d70:	f003 fe8a 	bl	8004a88 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	4886      	ldr	r0, [pc, #536]	@ (8000f90 <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	e9cd 550d 	strd	r5, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f003 fe83 	bl	8004a88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000d82:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d84:	4883      	ldr	r0, [pc, #524]	@ (8000f94 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d86:	950f      	str	r5, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d88:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8e:	f003 fe7b 	bl	8004a88 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	a90d      	add	r1, sp, #52	@ 0x34
 8000d94:	4880      	ldr	r0, [pc, #512]	@ (8000f98 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d96:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f003 fe74 	bl	8004a88 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000da0:	487e      	ldr	r0, [pc, #504]	@ (8000f9c <main+0x34c>)
 8000da2:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa0 <main+0x350>)
  hi2c3.Instance = I2C3;
 8000da4:	4e7f      	ldr	r6, [pc, #508]	@ (8000fa4 <main+0x354>)
  hcrc.Instance = CRC;
 8000da6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000da8:	f003 fd64 	bl	8004874 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8000dac:	4a7e      	ldr	r2, [pc, #504]	@ (8000fa8 <main+0x358>)
 8000dae:	4b7f      	ldr	r3, [pc, #508]	@ (8000fac <main+0x35c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db0:	6234      	str	r4, [r6, #32]
  hi2c3.Init.ClockSpeed = 100000;
 8000db2:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000db6:	4630      	mov	r0, r6
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8000dc0:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000dc8:	f004 f93a 	bl	8005040 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f004 fb76 	bl	80054c0 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f004 fb91 	bl	80054fe <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 8000ddc:	4874      	ldr	r0, [pc, #464]	@ (8000fb0 <main+0x360>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4975      	ldr	r1, [pc, #468]	@ (8000fb4 <main+0x364>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de0:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000de2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000de6:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dea:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8000dee:	2318      	movs	r3, #24
 8000df0:	e9c0 6306 	strd	r6, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8000df4:	230a      	movs	r3, #10
 8000df6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfc:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e00:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e04:	f005 fa10 	bl	8006228 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e08:	4a6b      	ldr	r2, [pc, #428]	@ (8000fb8 <main+0x368>)
  SdramTiming.LoadToActiveDelay = 2;
 8000e0a:	970d      	str	r7, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e0c:	f04f 0c10 	mov.w	ip, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e10:	e9cb 2500 	strd	r2, r5, [fp]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e14:	2240      	movs	r2, #64	@ 0x40
 8000e16:	e9cb c204 	strd	ip, r2, [fp, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e1a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e1e:	e9cb 2406 	strd	r2, r4, [fp, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e26:	e9cb 2408 	strd	r2, r4, [fp, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e2a:	f04f 0a07 	mov.w	sl, #7
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000e2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e32:	a90d      	add	r1, sp, #52	@ 0x34
 8000e34:	4658      	mov	r0, fp
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e36:	2608      	movs	r6, #8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e38:	e9cb 4802 	strd	r4, r8, [fp, #8]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000e3c:	f8cb 2028 	str.w	r2, [fp, #40]	@ 0x28
  SdramTiming.WriteRecoveryTime = 3;
 8000e40:	e9cd a910 	strd	sl, r9, [sp, #64]	@ 0x40
  SdramTiming.SelfRefreshTime = 4;
 8000e44:	e9cd a80e 	strd	sl, r8, [sp, #56]	@ 0x38
  SdramTiming.RCDDelay = 2;
 8000e48:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e4c:	f005 f8e8 	bl	8006020 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e54:	a909      	add	r1, sp, #36	@ 0x24
 8000e56:	4658      	mov	r0, fp
  Command->AutoRefreshNumber       = 1;
 8000e58:	e9cd 650a 	strd	r6, r5, [sp, #40]	@ 0x28
 __IO uint32_t tmpmrd =0;
 8000e5c:	9408      	str	r4, [sp, #32]
  Command->ModeRegisterDefinition  = 0;
 8000e5e:	940c      	str	r4, [sp, #48]	@ 0x30
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000e60:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e62:	f005 f8fd 	bl	8006060 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8000e66:	4628      	mov	r0, r5
 8000e68:	f003 fc9e 	bl	80047a8 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e70:	a909      	add	r1, sp, #36	@ 0x24
 8000e72:	4658      	mov	r0, fp
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e74:	e9cd 7609 	strd	r7, r6, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8000e78:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e7c:	f005 f8f0 	bl	8006060 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e84:	a909      	add	r1, sp, #36	@ 0x24
 8000e86:	4658      	mov	r0, fp
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e88:	e9cd 9609 	strd	r9, r6, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8000e8c:	e9cd 840b 	strd	r8, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e90:	f005 f8e6 	bl	8006060 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000e94:	f44f 720c 	mov.w	r2, #560	@ 0x230
 8000e98:	9208      	str	r2, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 8000e9a:	9a08      	ldr	r2, [sp, #32]
 8000e9c:	920c      	str	r2, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e9e:	a909      	add	r1, sp, #36	@ 0x24
 8000ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ea4:	4658      	mov	r0, fp
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ea6:	e9cd 8609 	strd	r8, r6, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 8000eaa:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000eac:	f005 f8d8 	bl	8006060 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8000eb0:	f240 516a 	movw	r1, #1386	@ 0x56a
 8000eb4:	4658      	mov	r0, fp
 8000eb6:	f005 f8f1 	bl	800609c <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000eba:	2234      	movs	r2, #52	@ 0x34
 8000ebc:	4621      	mov	r1, r4
 8000ebe:	eb0d 0002 	add.w	r0, sp, r2
 8000ec2:	f011 ff3a 	bl	8012d3a <memset>
  hltdc.Instance = LTDC;
 8000ec6:	4e3d      	ldr	r6, [pc, #244]	@ (8000fbc <main+0x36c>)
 8000ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc0 <main+0x370>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000eca:	6134      	str	r4, [r6, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ecc:	e9c6 3400 	strd	r3, r4, [r6]
  hltdc.Init.HorizontalSync = 9;
 8000ed0:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 8000ed2:	e9c6 3505 	strd	r3, r5, [r6, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8000ed6:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8000ed8:	f240 1e0d 	movw	lr, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 8000edc:	e9c6 3907 	strd	r3, r9, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 8000ee0:	f240 1343 	movw	r3, #323	@ 0x143
 8000ee4:	e9c6 e309 	strd	lr, r3, [r6, #36]	@ 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ee8:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 327;
 8000eea:	f240 1347 	movw	r3, #327	@ 0x147
 8000eee:	f240 1917 	movw	r9, #279	@ 0x117
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ef2:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.TotalHeigh = 327;
 8000ef6:	e9c6 930b 	strd	r9, r3, [r6, #44]	@ 0x2c
  hltdc.Init.Backcolor.Blue = 0;
 8000efa:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000efc:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f00:	f004 fb98 	bl	8005634 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000f04:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.Alpha0 = 0;
 8000f06:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.WindowX1 = 240;
 8000f0a:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	f44f 6b80 	mov.w	fp, #1024	@ 0x400
  pLayerCfg.WindowY1 = 320;
 8000f12:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 8000f16:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.ImageWidth = 240;
 8000f1a:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f1e:	e9cd b114 	strd	fp, r1, [sp, #80]	@ 0x50
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f22:	4622      	mov	r2, r4
 8000f24:	a90d      	add	r1, sp, #52	@ 0x34
 8000f26:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f28:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 8000f2c:	4e25      	ldr	r6, [pc, #148]	@ (8000fc4 <main+0x374>)
  pLayerCfg.WindowX0 = 0;
 8000f2e:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.ImageHeight = 320;
 8000f30:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000f32:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 8000f36:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f3a:	f004 fc46 	bl	80057ca <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <main+0x378>)
 8000f40:	6033      	str	r3, [r6, #0]
  LcdDrv->Init();
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4798      	blx	r3
  LcdDrv->DisplayOff();
 8000f46:	6833      	ldr	r3, [r6, #0]
  hdma2d.Instance = DMA2D;
 8000f48:	4e20      	ldr	r6, [pc, #128]	@ (8000fcc <main+0x37c>)
  LcdDrv->DisplayOff();
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <main+0x380>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f50:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f52:	e9c6 3400 	strd	r3, r4, [r6]
  hdma2d.Init.OutputOffset = 0;
 8000f56:	e9c6 7402 	strd	r7, r4, [r6, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000f5a:	e9c6 470a 	strd	r4, r7, [r6, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f5e:	e9c6 440c 	strd	r4, r4, [r6, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f62:	f003 fc97 	bl	8004894 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f66:	4629      	mov	r1, r5
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f003 fd49 	bl	8004a00 <HAL_DMA2D_ConfigLayer>
	  huart1.Instance = USART1;
 8000f6e:	4e19      	ldr	r6, [pc, #100]	@ (8000fd4 <main+0x384>)
  MX_TouchGFX_Init();
 8000f70:	f000 fca2 	bl	80018b8 <MX_TouchGFX_Init>
	  huart1.Init.BaudRate = 115200;
 8000f74:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <main+0x388>)
	  huart1.Init.Parity = UART_PARITY_NONE;
 8000f76:	6134      	str	r4, [r6, #16]
	  huart1.Init.BaudRate = 115200;
 8000f78:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f7c:	e030      	b.n	8000fe0 <main+0x390>
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	20000334 	.word	0x20000334
 8000fa0:	40023000 	.word	0x40023000
 8000fa4:	200002a0 	.word	0x200002a0
 8000fa8:	40005c00 	.word	0x40005c00
 8000fac:	000186a0 	.word	0x000186a0
 8000fb0:	200001a0 	.word	0x200001a0
 8000fb4:	40015000 	.word	0x40015000
 8000fb8:	a0000140 	.word	0xa0000140
 8000fbc:	200001f8 	.word	0x200001f8
 8000fc0:	40016800 	.word	0x40016800
 8000fc4:	2000010c 	.word	0x2000010c
 8000fc8:	20000014 	.word	0x20000014
 8000fcc:	200002f4 	.word	0x200002f4
 8000fd0:	4002b000 	.word	0x4002b000
 8000fd4:	20000124 	.word	0x20000124
 8000fd8:	40011000 	.word	0x40011000
 8000fdc:	2000016c 	.word	0x2000016c
 8000fe0:	e9c6 2300 	strd	r2, r3, [r6]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe4:	4630      	mov	r0, r6
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe6:	230c      	movs	r3, #12
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe8:	e9c6 3405 	strd	r3, r4, [r6, #20]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	e9c6 4402 	strd	r4, r4, [r6, #8]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	61f4      	str	r4, [r6, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff2:	f005 fdcd 	bl	8006b90 <HAL_UART_Init>
  osKernelInitialize();
 8000ff6:	f005 feed 	bl	8006dd4 <osKernelInitialize>
  movingQueueHandle = osMessageQueueNew(4, sizeof(char), &movingQueue_attributes);
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8001068 <main+0x418>)
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	4640      	mov	r0, r8
 8001000:	f006 f818 	bl	8007034 <osMessageQueueNew>
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <main+0x41c>)
  speedQueueHandle = osMessageQueueNew(4, sizeof(char), &speedQueue_attributes);
 8001006:	4a1a      	ldr	r2, [pc, #104]	@ (8001070 <main+0x420>)
  movingQueueHandle = osMessageQueueNew(4, sizeof(char), &movingQueue_attributes);
 8001008:	6018      	str	r0, [r3, #0]
  speedQueueHandle = osMessageQueueNew(4, sizeof(char), &speedQueue_attributes);
 800100a:	4629      	mov	r1, r5
 800100c:	4640      	mov	r0, r8
 800100e:	f006 f811 	bl	8007034 <osMessageQueueNew>
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <main+0x424>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001014:	4a18      	ldr	r2, [pc, #96]	@ (8001078 <main+0x428>)
  speedQueueHandle = osMessageQueueNew(4, sizeof(char), &speedQueue_attributes);
 8001016:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001018:	4621      	mov	r1, r4
 800101a:	4818      	ldr	r0, [pc, #96]	@ (800107c <main+0x42c>)
 800101c:	f005 ff0d 	bl	8006e3a <osThreadNew>
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <main+0x430>)
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001022:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <main+0x434>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001024:	6018      	str	r0, [r3, #0]
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001026:	4621      	mov	r1, r4
 8001028:	4817      	ldr	r0, [pc, #92]	@ (8001088 <main+0x438>)
 800102a:	f005 ff06 	bl	8006e3a <osThreadNew>
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <main+0x43c>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001030:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <main+0x440>)
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001032:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001034:	4621      	mov	r1, r4
 8001036:	4817      	ldr	r0, [pc, #92]	@ (8001094 <main+0x444>)
	  HAL_UART_Transmit(&huart1, (const uint8_t*)"Hello\n", 7, 100);
 8001038:	4c17      	ldr	r4, [pc, #92]	@ (8001098 <main+0x448>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800103a:	f005 fefe 	bl	8006e3a <osThreadNew>
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <main+0x44c>)
  HAL_UART_Transmit(&huart1, (const uint8_t*)"Hello\n", 7, 100);
 8001040:	4915      	ldr	r1, [pc, #84]	@ (8001098 <main+0x448>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001042:	6018      	str	r0, [r3, #0]
  HAL_UART_Transmit(&huart1, (const uint8_t*)"Hello\n", 7, 100);
 8001044:	4652      	mov	r2, sl
 8001046:	2364      	movs	r3, #100	@ 0x64
 8001048:	4630      	mov	r0, r6
 800104a:	f005 fdd0 	bl	8006bee <HAL_UART_Transmit>
  osKernelStart();
 800104e:	f005 fed3 	bl	8006df8 <osKernelStart>
	  HAL_UART_Transmit(&huart1, (const uint8_t*)"Hello\n", 7, 100);
 8001052:	2364      	movs	r3, #100	@ 0x64
 8001054:	2207      	movs	r2, #7
 8001056:	4621      	mov	r1, r4
 8001058:	4630      	mov	r0, r6
 800105a:	f005 fdc8 	bl	8006bee <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800105e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001062:	f003 fba1 	bl	80047a8 <HAL_Delay>
  while (1)
 8001066:	e7f4      	b.n	8001052 <main+0x402>
 8001068:	08014828 	.word	0x08014828
 800106c:	20000114 	.word	0x20000114
 8001070:	08014810 	.word	0x08014810
 8001074:	20000110 	.word	0x20000110
 8001078:	080148ac 	.word	0x080148ac
 800107c:	08000ac9 	.word	0x08000ac9
 8001080:	20000120 	.word	0x20000120
 8001084:	08014888 	.word	0x08014888
 8001088:	08000b05 	.word	0x08000b05
 800108c:	2000011c 	.word	0x2000011c
 8001090:	08014840 	.word	0x08014840
 8001094:	080018bd 	.word	0x080018bd
 8001098:	08013b80 	.word	0x08013b80
 800109c:	20000118 	.word	0x20000118

080010a0 <IOE_Init>:
void IOE_Init(void)
 80010a0:	4770      	bx	lr

080010a2 <IOE_ITConfig>:
void IOE_ITConfig(void)
 80010a2:	4770      	bx	lr

080010a4 <IOE_Write>:
{
 80010a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <IOE_Write+0x28>)
 80010a8:	f88d 2017 	strb.w	r2, [sp, #23]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	f10d 0217 	add.w	r2, sp, #23
 80010b4:	2301      	movs	r3, #1
 80010b6:	9200      	str	r2, [sp, #0]
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	460a      	mov	r2, r1
 80010bc:	4601      	mov	r1, r0
 80010be:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <IOE_Write+0x2c>)
 80010c0:	f004 f866 	bl	8005190 <HAL_I2C_Mem_Write>
}
 80010c4:	b007      	add	sp, #28
 80010c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	200002a0 	.word	0x200002a0

080010d4 <IOE_Read>:
{
 80010d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <IOE_Read+0x2c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	9302      	str	r3, [sp, #8]
{
 80010e2:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 80010e4:	2301      	movs	r3, #1
 80010e6:	f10d 0117 	add.w	r1, sp, #23
 80010ea:	9100      	str	r1, [sp, #0]
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	4601      	mov	r1, r0
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <IOE_Read+0x30>)
 80010f2:	f004 f8dd 	bl	80052b0 <HAL_I2C_Mem_Read>
}
 80010f6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80010fa:	b007      	add	sp, #28
 80010fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001100:	20000008 	.word	0x20000008
 8001104:	200002a0 	.word	0x200002a0

08001108 <IOE_ReadMultiple>:
{
 8001108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 800110a:	4c08      	ldr	r4, [pc, #32]	@ (800112c <IOE_ReadMultiple+0x24>)
 800110c:	6824      	ldr	r4, [r4, #0]
 800110e:	9200      	str	r2, [sp, #0]
 8001110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001114:	460a      	mov	r2, r1
 8001116:	2301      	movs	r3, #1
 8001118:	4601      	mov	r1, r0
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <IOE_ReadMultiple+0x28>)
 800111c:	f004 f8c8 	bl	80052b0 <HAL_I2C_Mem_Read>
}
 8001120:	3800      	subs	r0, #0
 8001122:	bf18      	it	ne
 8001124:	2001      	movne	r0, #1
 8001126:	b004      	add	sp, #16
 8001128:	bd10      	pop	{r4, pc}
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	200002a0 	.word	0x200002a0

08001134 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 8001134:	f003 bb38 	b.w	80047a8 <HAL_Delay>

08001138 <LCD_IO_Init>:
{
 8001138:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800113a:	4c06      	ldr	r4, [pc, #24]	@ (8001154 <LCD_IO_Init+0x1c>)
 800113c:	2200      	movs	r2, #0
 800113e:	4620      	mov	r0, r4
 8001140:	2104      	movs	r1, #4
 8001142:	f003 fd8b 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001146:	4620      	mov	r0, r4
 8001148:	2201      	movs	r2, #1
}
 800114a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800114e:	2104      	movs	r1, #4
 8001150:	f003 bd84 	b.w	8004c5c <HAL_GPIO_WritePin>
 8001154:	40020800 	.word	0x40020800

08001158 <LCD_IO_WriteData>:
{
 8001158:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800115a:	4d0b      	ldr	r5, [pc, #44]	@ (8001188 <LCD_IO_WriteData+0x30>)
{
 800115c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	480a      	ldr	r0, [pc, #40]	@ (800118c <LCD_IO_WriteData+0x34>)
 8001162:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001166:	f003 fd79 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2104      	movs	r1, #4
 800116e:	4628      	mov	r0, r5
 8001170:	f003 fd74 	bl	8004c5c <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff fc95 	bl	8000aa4 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800117a:	4628      	mov	r0, r5
 800117c:	2201      	movs	r2, #1
}
 800117e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001182:	2104      	movs	r1, #4
 8001184:	f003 bd6a 	b.w	8004c5c <HAL_GPIO_WritePin>
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00

08001190 <LCD_IO_WriteReg>:
{
 8001190:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001192:	4d0b      	ldr	r5, [pc, #44]	@ (80011c0 <LCD_IO_WriteReg+0x30>)
{
 8001194:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	480a      	ldr	r0, [pc, #40]	@ (80011c4 <LCD_IO_WriteReg+0x34>)
 800119a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800119e:	f003 fd5d 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2104      	movs	r1, #4
 80011a6:	4628      	mov	r0, r5
 80011a8:	f003 fd58 	bl	8004c5c <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fc79 	bl	8000aa4 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80011b2:	4628      	mov	r0, r5
 80011b4:	2201      	movs	r2, #1
}
 80011b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80011ba:	2104      	movs	r1, #4
 80011bc:	f003 bd4e 	b.w	8004c5c <HAL_GPIO_WritePin>
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <LCD_IO_ReadData>:
{
 80011c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80011ca:	4e14      	ldr	r6, [pc, #80]	@ (800121c <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80011cc:	4f14      	ldr	r7, [pc, #80]	@ (8001220 <LCD_IO_ReadData+0x58>)
{
 80011ce:	4605      	mov	r5, r0
 80011d0:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80011d2:	4630      	mov	r0, r6
 80011d4:	2200      	movs	r2, #0
 80011d6:	2104      	movs	r1, #4
 80011d8:	f003 fd40 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e2:	4638      	mov	r0, r7
 80011e4:	f003 fd3a 	bl	8004c5c <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 80011e8:	4628      	mov	r0, r5
 80011ea:	f7ff fc5b 	bl	8000aa4 <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <LCD_IO_ReadData+0x5c>)
 80011f0:	480d      	ldr	r0, [pc, #52]	@ (8001228 <LCD_IO_ReadData+0x60>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4622      	mov	r2, r4
 80011f6:	a901      	add	r1, sp, #4
 80011f8:	f005 fa0f 	bl	800661a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80011fc:	4638      	mov	r0, r7
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8001204:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001206:	f003 fd29 	bl	8004c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800120a:	4630      	mov	r0, r6
 800120c:	2201      	movs	r2, #1
 800120e:	2104      	movs	r1, #4
 8001210:	f003 fd24 	bl	8004c5c <HAL_GPIO_WritePin>
}
 8001214:	4620      	mov	r0, r4
 8001216:	b003      	add	sp, #12
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	20000004 	.word	0x20000004
 8001228:	200001a0 	.word	0x200001a0

0800122c <LCD_Delay>:
  HAL_Delay(Delay);
 800122c:	f003 babc 	b.w	80047a8 <HAL_Delay>

08001230 <DoubleBeepTask>:
}

void DoubleBeepTask(void *param){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001230:	4c10      	ldr	r4, [pc, #64]	@ (8001274 <DoubleBeepTask+0x44>)
void DoubleBeepTask(void *param){
 8001232:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	4620      	mov	r0, r4
 800123a:	f003 fd0f 	bl	8004c5c <HAL_GPIO_WritePin>
	osDelay(100);
 800123e:	2064      	movs	r0, #100	@ 0x64
 8001240:	f005 fe44 	bl	8006ecc <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2108      	movs	r1, #8
 8001248:	4620      	mov	r0, r4
 800124a:	f003 fd07 	bl	8004c5c <HAL_GPIO_WritePin>
	osDelay(100);
 800124e:	2064      	movs	r0, #100	@ 0x64
 8001250:	f005 fe3c 	bl	8006ecc <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2108      	movs	r1, #8
 8001258:	4620      	mov	r0, r4
 800125a:	f003 fcff 	bl	8004c5c <HAL_GPIO_WritePin>
	osDelay(100);
 800125e:	2064      	movs	r0, #100	@ 0x64
 8001260:	f005 fe34 	bl	8006ecc <osDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2108      	movs	r1, #8
 8001268:	4620      	mov	r0, r4
 800126a:	f003 fcf7 	bl	8004c5c <HAL_GPIO_WritePin>
	osThreadExit();
 800126e:	f005 fe28 	bl	8006ec2 <osThreadExit>
 8001272:	bf00      	nop
 8001274:	40020400 	.word	0x40020400

08001278 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001278:	6802      	ldr	r2, [r0, #0]
 800127a:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800127c:	429a      	cmp	r2, r3
 800127e:	d101      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001280:	f003 ba80 	b.w	8004784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40001000 	.word	0x40001000

0800128c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800128c:	4770      	bx	lr
	...

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_MspInit+0x3c>)
 8001294:	2200      	movs	r2, #0
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800129a:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800129e:	6459      	str	r1, [r3, #68]	@ 0x44
 80012a0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80012a2:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80012a6:	9100      	str	r1, [sp, #0]
 80012a8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	9201      	str	r2, [sp, #4]
 80012ac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80012ae:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80012b2:	6419      	str	r1, [r3, #64]	@ 0x40
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012be:	210f      	movs	r1, #15
 80012c0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c6:	f003 ba95 	b.w	80047f4 <HAL_NVIC_SetPriority>
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80012d0:	6802      	ldr	r2, [r0, #0]
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_CRC_MspInit+0x28>)
 80012d4:	429a      	cmp	r2, r3
{
 80012d6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80012d8:	d10b      	bne.n	80012f2 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <HAL_CRC_MspInit+0x2c>)
 80012e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012f2:	b002      	add	sp, #8
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023000 	.word	0x40023000
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001300:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_DMA2D_MspInit+0x40>)
 8001304:	6802      	ldr	r2, [r0, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d116      	bne.n	8001338 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800130a:	2200      	movs	r2, #0
 800130c:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001310:	9201      	str	r2, [sp, #4]
 8001312:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001314:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001318:	6319      	str	r1, [r3, #48]	@ 0x30
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001320:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001322:	2105      	movs	r1, #5
 8001324:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001326:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001328:	f003 fa64 	bl	80047f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800132c:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800132e:	b003      	add	sp, #12
 8001330:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001334:	f003 ba90 	b.w	8004858 <HAL_NVIC_EnableIRQ>
}
 8001338:	b003      	add	sp, #12
 800133a:	f85d fb04 	ldr.w	pc, [sp], #4
 800133e:	bf00      	nop
 8001340:	4002b000 	.word	0x4002b000

08001344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001348:	4604      	mov	r4, r0
 800134a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	2214      	movs	r2, #20
 800134e:	2100      	movs	r1, #0
 8001350:	a803      	add	r0, sp, #12
 8001352:	f011 fcf2 	bl	8012d3a <memset>
  if(hi2c->Instance==I2C3)
 8001356:	6822      	ldr	r2, [r4, #0]
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <HAL_I2C_MspInit+0xa8>)
 800135a:	429a      	cmp	r2, r3
 800135c:	d143      	bne.n	80013e6 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4c24      	ldr	r4, [pc, #144]	@ (80013f0 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	4824      	ldr	r0, [pc, #144]	@ (80013f4 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2500      	movs	r5, #0
 8001364:	9500      	str	r5, [sp, #0]
 8001366:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6323      	str	r3, [r4, #48]	@ 0x30
 800136e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	9501      	str	r5, [sp, #4]
 800137a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6323      	str	r3, [r4, #48]	@ 0x30
 8001382:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138c:	f04f 0912 	mov.w	r9, #18
 8001390:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	f04f 0801 	mov.w	r8, #1
 8001398:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800139a:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013a6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a8:	f003 fb6e 	bl	8004a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013b2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b6:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f003 fb63 	bl	8004a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013c2:	9502      	str	r5, [sp, #8]
 80013c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80013c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013ca:	6423      	str	r3, [r4, #64]	@ 0x40
 80013cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80013ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 80013d6:	6a23      	ldr	r3, [r4, #32]
 80013d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013dc:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 80013de:	6a23      	ldr	r3, [r4, #32]
 80013e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80013e4:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013e6:	b009      	add	sp, #36	@ 0x24
 80013e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ec:	40005c00 	.word	0x40005c00
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	b099      	sub	sp, #100	@ 0x64
 8001400:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	2214      	movs	r2, #20
 8001404:	2100      	movs	r1, #0
 8001406:	a807      	add	r0, sp, #28
 8001408:	f011 fc97 	bl	8012d3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800140c:	2230      	movs	r2, #48	@ 0x30
 800140e:	eb0d 0002 	add.w	r0, sp, r2
 8001412:	2100      	movs	r1, #0
 8001414:	f011 fc91 	bl	8012d3a <memset>
  if(hltdc->Instance==LTDC)
 8001418:	6822      	ldr	r2, [r4, #0]
 800141a:	4b5e      	ldr	r3, [pc, #376]	@ (8001594 <HAL_LTDC_MspInit+0x198>)
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 80b7 	bne.w	8001590 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001422:	2308      	movs	r3, #8
 8001424:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001426:	23c0      	movs	r3, #192	@ 0xc0
 8001428:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800142a:	2304      	movs	r3, #4
 800142c:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142e:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001434:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001436:	f004 fcc7 	bl	8005dc8 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	b108      	cbz	r0, 8001440 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 800143c:	f7ff ff26 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001440:	4b55      	ldr	r3, [pc, #340]	@ (8001598 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001442:	4856      	ldr	r0, [pc, #344]	@ (800159c <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001444:	2400      	movs	r4, #0
 8001446:	9400      	str	r4, [sp, #0]
 8001448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800144a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800144e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001452:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001456:	9200      	str	r2, [sp, #0]
 8001458:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800145a:	9401      	str	r4, [sp, #4]
 800145c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800145e:	f042 0220 	orr.w	r2, r2, #32
 8001462:	631a      	str	r2, [r3, #48]	@ 0x30
 8001464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001466:	f002 0220 	and.w	r2, r2, #32
 800146a:	9201      	str	r2, [sp, #4]
 800146c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	9402      	str	r4, [sp, #8]
 8001470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	631a      	str	r2, [r3, #48]	@ 0x30
 8001478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800147a:	f002 0201 	and.w	r2, r2, #1
 800147e:	9202      	str	r2, [sp, #8]
 8001480:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	9403      	str	r4, [sp, #12]
 8001484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001486:	f042 0202 	orr.w	r2, r2, #2
 800148a:	631a      	str	r2, [r3, #48]	@ 0x30
 800148c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800148e:	f002 0202 	and.w	r2, r2, #2
 8001492:	9203      	str	r2, [sp, #12]
 8001494:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001496:	9404      	str	r4, [sp, #16]
 8001498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800149a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800149e:	631a      	str	r2, [r3, #48]	@ 0x30
 80014a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014a2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80014a6:	9204      	str	r2, [sp, #16]
 80014a8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	9405      	str	r4, [sp, #20]
 80014ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ae:	f042 0204 	orr.w	r2, r2, #4
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014b6:	f002 0204 	and.w	r2, r2, #4
 80014ba:	9205      	str	r2, [sp, #20]
 80014bc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	9406      	str	r4, [sp, #24]
 80014c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014c2:	f042 0208 	orr.w	r2, r2, #8
 80014c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d2:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014dc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e2:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e6:	f003 facf 	bl	8004a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 80014ea:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	482c      	ldr	r0, [pc, #176]	@ (80015a0 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014f0:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014f8:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fa:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f003 fac3 	bl	8004a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001502:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	4827      	ldr	r0, [pc, #156]	@ (80015a4 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001506:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f003 fab9 	bl	8004a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001516:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	4822      	ldr	r0, [pc, #136]	@ (80015a4 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800151c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001524:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f003 faae 	bl	8004a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800152c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001530:	481d      	ldr	r0, [pc, #116]	@ (80015a8 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001532:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001534:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153e:	f003 faa3 	bl	8004a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001542:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	4819      	ldr	r0, [pc, #100]	@ (80015ac <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001546:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001552:	f003 fa99 	bl	8004a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001556:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001558:	4815      	ldr	r0, [pc, #84]	@ (80015b0 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800155a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001566:	f003 fa8f 	bl	8004a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800156a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800156e:	480e      	ldr	r0, [pc, #56]	@ (80015a8 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001570:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001572:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001578:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800157c:	f003 fa84 	bl	8004a88 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001580:	2058      	movs	r0, #88	@ 0x58
 8001582:	4622      	mov	r2, r4
 8001584:	2105      	movs	r1, #5
 8001586:	f003 f935 	bl	80047f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800158a:	2058      	movs	r0, #88	@ 0x58
 800158c:	f003 f964 	bl	8004858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001590:	b019      	add	sp, #100	@ 0x64
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001594:	40016800 	.word	0x40016800
 8001598:	40023800 	.word	0x40023800
 800159c:	40021400 	.word	0x40021400
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40021800 	.word	0x40021800
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020c00 	.word	0x40020c00

080015b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b4:	b510      	push	{r4, lr}
 80015b6:	4604      	mov	r4, r0
 80015b8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	2214      	movs	r2, #20
 80015bc:	2100      	movs	r1, #0
 80015be:	a803      	add	r0, sp, #12
 80015c0:	f011 fbbb 	bl	8012d3a <memset>
  if(hspi->Instance==SPI5)
 80015c4:	6822      	ldr	r2, [r4, #0]
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_SPI_MspInit+0x64>)
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d123      	bne.n	8001614 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80015cc:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 80015d0:	2100      	movs	r1, #0
 80015d2:	9101      	str	r1, [sp, #4]
 80015d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d6:	4811      	ldr	r0, [pc, #68]	@ (800161c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80015d8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80015dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80015de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015e0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80015e4:	9201      	str	r2, [sp, #4]
 80015e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e8:	9102      	str	r1, [sp, #8]
 80015ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015ec:	f042 0220 	orr.w	r2, r2, #32
 80015f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80015f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001600:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001602:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001608:	2305      	movs	r3, #5
 800160a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800160e:	a903      	add	r1, sp, #12
 8001610:	f003 fa3a 	bl	8004a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001614:	b008      	add	sp, #32
 8001616:	bd10      	pop	{r4, pc}
 8001618:	40015000 	.word	0x40015000
 800161c:	40021400 	.word	0x40021400

08001620 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001624:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001626:	2300      	movs	r3, #0
 8001628:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800162a:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <HAL_SDRAM_MspInit+0xb8>)
 800162c:	681c      	ldr	r4, [r3, #0]
 800162e:	2c00      	cmp	r4, #0
 8001630:	d14f      	bne.n	80016d2 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001632:	f04f 0801 	mov.w	r8, #1
 8001636:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 800163a:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <HAL_SDRAM_MspInit+0xbc>)
 800163c:	9400      	str	r4, [sp, #0]
 800163e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001640:	4827      	ldr	r0, [pc, #156]	@ (80016e0 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001642:	ea42 0208 	orr.w	r2, r2, r8
 8001646:	639a      	str	r2, [r3, #56]	@ 0x38
 8001648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164a:	ea03 0308 	and.w	r3, r3, r8
 800164e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001652:	2603      	movs	r6, #3
 8001654:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001656:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001658:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800165e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001662:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001666:	f003 fa0f 	bl	8004a88 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	481e      	ldr	r0, [pc, #120]	@ (80016e4 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800166c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f003 fa06 	bl	8004a88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800167c:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001680:	4819      	ldr	r0, [pc, #100]	@ (80016e8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001682:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001684:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800168e:	f003 f9fb 	bl	8004a88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001692:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001696:	4815      	ldr	r0, [pc, #84]	@ (80016ec <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001698:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	f003 f9f0 	bl	8004a88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80016a8:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	4810      	ldr	r0, [pc, #64]	@ (80016f0 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ae:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ba:	f003 f9e5 	bl	8004a88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016be:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f003 f9db 	bl	8004a88 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016d2:	b006      	add	sp, #24
 80016d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016d8:	2000033c 	.word	0x2000033c
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40021400 	.word	0x40021400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40021800 	.word	0x40021800
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40020400 	.word	0x40020400

080016f8 <HAL_UART_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b510      	push	{r4, lr}
 80016fa:	4604      	mov	r4, r0
 80016fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	2214      	movs	r2, #20
 8001700:	2100      	movs	r1, #0
 8001702:	a803      	add	r0, sp, #12
 8001704:	f011 fb19 	bl	8012d3a <memset>
  if(huart->Instance==USART1)
 8001708:	6822      	ldr	r2, [r4, #0]
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_UART_MspInit+0x64>)
 800170c:	429a      	cmp	r2, r3
 800170e:	d123      	bne.n	8001758 <HAL_UART_MspInit+0x60>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001710:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001714:	2100      	movs	r1, #0
 8001716:	9101      	str	r1, [sp, #4]
 8001718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	4811      	ldr	r0, [pc, #68]	@ (8001760 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800171c:	f042 0210 	orr.w	r2, r2, #16
 8001720:	645a      	str	r2, [r3, #68]	@ 0x44
 8001722:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001724:	f002 0210 	and.w	r2, r2, #16
 8001728:	9201      	str	r2, [sp, #4]
 800172a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	9102      	str	r1, [sp, #8]
 800172e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001730:	f042 0201 	orr.w	r2, r2, #1
 8001734:	631a      	str	r2, [r3, #48]	@ 0x30
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001744:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001746:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800174c:	2307      	movs	r3, #7
 800174e:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	a903      	add	r1, sp, #12
 8001754:	f003 f998 	bl	8004a88 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001758:	b008      	add	sp, #32
 800175a:	bd10      	pop	{r4, pc}
 800175c:	40011000 	.word	0x40011000
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b530      	push	{r4, r5, lr}
 8001766:	4601      	mov	r1, r0
 8001768:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800176a:	2200      	movs	r2, #0
 800176c:	2036      	movs	r0, #54	@ 0x36
 800176e:	f003 f841 	bl	80047f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001772:	2036      	movs	r0, #54	@ 0x36
 8001774:	f003 f870 	bl	8004858 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001778:	2500      	movs	r5, #0
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_InitTick+0x6c>)
 800177c:	9502      	str	r5, [sp, #8]
 800177e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001780:	4c14      	ldr	r4, [pc, #80]	@ (80017d4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001782:	f042 0210 	orr.w	r2, r2, #16
 8001786:	641a      	str	r2, [r3, #64]	@ 0x40
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001790:	a901      	add	r1, sp, #4
 8001792:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001794:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001796:	f004 faf9 	bl	8005d8c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800179a:	f004 fad7 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <HAL_InitTick+0x74>)
 80017a0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017a2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80017a6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017a8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_InitTick+0x78>)
 80017ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80017b0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80017b2:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017b4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80017b6:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017ba:	f005 f8fd 	bl	80069b8 <HAL_TIM_Base_Init>
 80017be:	b920      	cbnz	r0, 80017ca <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017c0:	4620      	mov	r0, r4
 80017c2:	f004 ffc9 	bl	8006758 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80017c6:	b009      	add	sp, #36	@ 0x24
 80017c8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
 80017cc:	e7fb      	b.n	80017c6 <HAL_InitTick+0x62>
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	20000340 	.word	0x20000340
 80017d8:	40001000 	.word	0x40001000
 80017dc:	000f4240 	.word	0x000f4240

080017e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017e0:	4770      	bx	lr

080017e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler>

080017e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler>

080017e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler>

080017e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler>

080017ea <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80017ea:	4770      	bx	lr

080017ec <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017ec:	4801      	ldr	r0, [pc, #4]	@ (80017f4 <TIM6_DAC_IRQHandler+0x8>)
 80017ee:	f004 bff1 	b.w	80067d4 <HAL_TIM_IRQHandler>
 80017f2:	bf00      	nop
 80017f4:	20000340 	.word	0x20000340

080017f8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017f8:	4801      	ldr	r0, [pc, #4]	@ (8001800 <LTDC_IRQHandler+0x8>)
 80017fa:	f003 bf89 	b.w	8005710 <HAL_LTDC_IRQHandler>
 80017fe:	bf00      	nop
 8001800:	200001f8 	.word	0x200001f8

08001804 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001804:	4801      	ldr	r0, [pc, #4]	@ (800180c <DMA2D_IRQHandler+0x8>)
 8001806:	f003 b871 	b.w	80048ec <HAL_DMA2D_IRQHandler>
 800180a:	bf00      	nop
 800180c:	200002f4 	.word	0x200002f4

08001810 <EXTI0_IRQHandler>:

  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
 8001810:	4770      	bx	lr

08001812 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001812:	2001      	movs	r0, #1
 8001814:	4770      	bx	lr

08001816 <_kill>:

int _kill(int pid, int sig)
{
 8001816:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001818:	f011 fb32 	bl	8012e80 <__errno>
 800181c:	2316      	movs	r3, #22
 800181e:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	bd08      	pop	{r3, pc}

08001826 <_exit>:

void _exit (int status)
{
 8001826:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001828:	f011 fb2a 	bl	8012e80 <__errno>
 800182c:	2316      	movs	r3, #22
 800182e:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001830:	e7fe      	b.n	8001830 <_exit+0xa>

08001832 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001832:	b570      	push	{r4, r5, r6, lr}
 8001834:	460d      	mov	r5, r1
 8001836:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	460e      	mov	r6, r1
 800183a:	1b73      	subs	r3, r6, r5
 800183c:	429c      	cmp	r4, r3
 800183e:	dc01      	bgt.n	8001844 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001840:	4620      	mov	r0, r4
 8001842:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001844:	f3af 8000 	nop.w
 8001848:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	e7f5      	b.n	800183a <_read+0x8>

0800184e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184e:	b570      	push	{r4, r5, r6, lr}
 8001850:	460d      	mov	r5, r1
 8001852:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	460e      	mov	r6, r1
 8001856:	1b73      	subs	r3, r6, r5
 8001858:	429c      	cmp	r4, r3
 800185a:	dc01      	bgt.n	8001860 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800185c:	4620      	mov	r0, r4
 800185e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001860:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001864:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	e7f5      	b.n	8001856 <_write+0x8>

0800186a <_close>:

int _close(int file)
{
	return -1;
}
 800186a:	f04f 30ff 	mov.w	r0, #4294967295
 800186e:	4770      	bx	lr

08001870 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001870:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001874:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001876:	2000      	movs	r0, #0
 8001878:	4770      	bx	lr

0800187a <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800187a:	2001      	movs	r0, #1
 800187c:	4770      	bx	lr

0800187e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800187e:	2000      	movs	r0, #0
 8001880:	4770      	bx	lr
	...

08001884 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001884:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <_sbrk+0x2c>)
 8001886:	6811      	ldr	r1, [r2, #0]
{
 8001888:	b508      	push	{r3, lr}
 800188a:	4603      	mov	r3, r0
	if (heap_end == 0)
 800188c:	b909      	cbnz	r1, 8001892 <_sbrk+0xe>
		heap_end = &end;
 800188e:	4909      	ldr	r1, [pc, #36]	@ (80018b4 <_sbrk+0x30>)
 8001890:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001892:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001894:	4669      	mov	r1, sp
 8001896:	4403      	add	r3, r0
 8001898:	428b      	cmp	r3, r1
 800189a:	d906      	bls.n	80018aa <_sbrk+0x26>
	{
		errno = ENOMEM;
 800189c:	f011 faf0 	bl	8012e80 <__errno>
 80018a0:	230c      	movs	r3, #12
 80018a2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80018a8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80018aa:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80018ac:	e7fc      	b.n	80018a8 <_sbrk+0x24>
 80018ae:	bf00      	nop
 80018b0:	20000388 	.word	0x20000388
 80018b4:	200157a8 	.word	0x200157a8

080018b8 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80018b8:	f000 bcbc 	b.w	8002234 <touchgfx_init>

080018bc <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80018bc:	f000 bd2c 	b.w	8002318 <touchgfx_taskEntry>

080018c0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80018c0:	4770      	bx	lr

080018c2 <_ZN20STM32TouchControllerD0Ev>:
 80018c2:	b510      	push	{r4, lr}
 80018c4:	2104      	movs	r1, #4
 80018c6:	4604      	mov	r4, r0
 80018c8:	f011 f802 	bl	80128d0 <_ZdlPvj>
 80018cc:	4620      	mov	r0, r4
 80018ce:	bd10      	pop	{r4, pc}

080018d0 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80018d0:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80018d4:	4c0c      	ldr	r4, [pc, #48]	@ (8001908 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 80018d6:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80018da:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 80018dc:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80018de:	6863      	ldr	r3, [r4, #4]
 80018e0:	4798      	blx	r3
 80018e2:	f640 0311 	movw	r3, #2065	@ 0x811
 80018e6:	4298      	cmp	r0, r3
 80018e8:	d10a      	bne.n	8001900 <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 80018ea:	4d09      	ldr	r5, [pc, #36]	@ (8001910 <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 80018ec:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 80018ee:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 80018f0:	2082      	movs	r0, #130	@ 0x82
 80018f2:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 80018f4:	682b      	ldr	r3, [r5, #0]
 80018f6:	2082      	movs	r0, #130	@ 0x82
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4798      	blx	r3
 80018fc:	2000      	movs	r0, #0
    }

    return ret;
}
 80018fe:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 8001900:	2001      	movs	r0, #1
 8001902:	e7fc      	b.n	80018fe <_Z11BSP_TS_Inittt+0x2e>
 8001904:	20000396 	.word	0x20000396
 8001908:	2000004c 	.word	0x2000004c
 800190c:	20000394 	.word	0x20000394
 8001910:	20000398 	.word	0x20000398

08001914 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 8001914:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001918:	20f0      	movs	r0, #240	@ 0xf0
 800191a:	f7ff bfd9 	b.w	80018d0 <_Z11BSP_TS_Inittt>
	...

08001920 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8001920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8001922:	4d35      	ldr	r5, [pc, #212]	@ (80019f8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 8001924:	682b      	ldr	r3, [r5, #0]
{
 8001926:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2082      	movs	r0, #130	@ 0x82
 800192c:	4798      	blx	r3
 800192e:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 8001930:	2800      	cmp	r0, #0
 8001932:	d04b      	beq.n	80019cc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xac>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	f10d 0206 	add.w	r2, sp, #6
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	a901      	add	r1, sp, #4
 800193e:	2082      	movs	r0, #130	@ 0x82
 8001940:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 8001942:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001946:	f640 6274 	movw	r2, #3700	@ 0xe74
 800194a:	4293      	cmp	r3, r2
 800194c:	d940      	bls.n	80019d0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb0>
        {
            y = 3700;
 800194e:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 8001952:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001956:	1ad2      	subs	r2, r2, r3
 8001958:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 800195a:	2a0a      	cmp	r2, #10
 800195c:	d93e      	bls.n	80019dc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        yr = y / 11;
 800195e:	230b      	movs	r3, #11
 8001960:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d901      	bls.n	8001970 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 8001970:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001974:	4822      	ldr	r0, [pc, #136]	@ (8001a00 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
 8001976:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800197a:	428b      	cmp	r3, r1
 800197c:	d830      	bhi.n	80019e0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc0>
        {
            x = 3870 - x;
 800197e:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8001982:	330e      	adds	r3, #14
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001984:	6801      	ldr	r1, [r0, #0]
            x = 3870 - x;
 8001986:	b29b      	uxth	r3, r3
        xr = x / 15;
 8001988:	250f      	movs	r5, #15
 800198a:	fbb3 f3f5 	udiv	r3, r3, r5
        else if (xr > TsXBoundary)
 800198e:	4d1d      	ldr	r5, [pc, #116]	@ (8001a04 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe4>)
 8001990:	882d      	ldrh	r5, [r5, #0]
 8001992:	42ab      	cmp	r3, r5
            xr = TsXBoundary - 1;
 8001994:	bf84      	itt	hi
 8001996:	f105 35ff 	addhi.w	r5, r5, #4294967295
 800199a:	b2ab      	uxthhi	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 800199c:	428b      	cmp	r3, r1
 800199e:	461d      	mov	r5, r3
 80019a0:	b28e      	uxth	r6, r1
 80019a2:	d926      	bls.n	80019f2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd2>
 80019a4:	1b9b      	subs	r3, r3, r6
 80019a6:	b299      	uxth	r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 80019a8:	4e17      	ldr	r6, [pc, #92]	@ (8001a08 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe8>)
 80019aa:	6837      	ldr	r7, [r6, #0]
 80019ac:	b2bb      	uxth	r3, r7
 80019ae:	42ba      	cmp	r2, r7
 80019b0:	bf8c      	ite	hi
 80019b2:	1ad3      	subhi	r3, r2, r3
 80019b4:	1a9b      	subls	r3, r3, r2
 80019b6:	b29b      	uxth	r3, r3

        if (xDiff + yDiff > 5)
 80019b8:	4419      	add	r1, r3
 80019ba:	2905      	cmp	r1, #5
        {
            _x = x;
 80019bc:	bfc8      	it	gt
 80019be:	6005      	strgt	r5, [r0, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 80019c0:	6803      	ldr	r3, [r0, #0]
            _y = y;
 80019c2:	bfc8      	it	gt
 80019c4:	6032      	strgt	r2, [r6, #0]
        TsState->X = _x;
 80019c6:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 80019c8:	6833      	ldr	r3, [r6, #0]
 80019ca:	80a3      	strh	r3, [r4, #4]
    }
}
 80019cc:	b003      	add	sp, #12
 80019ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 80019d0:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 80019d2:	bf9c      	itt	ls
 80019d4:	23b4      	movls	r3, #180	@ 0xb4
 80019d6:	f8ad 3006 	strhls.w	r3, [sp, #6]
 80019da:	e7ba      	b.n	8001952 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 80019dc:	2200      	movs	r2, #0
 80019de:	e7c7      	b.n	8001970 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 80019e0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80019e4:	3308      	adds	r3, #8
 80019e6:	b29b      	uxth	r3, r3
        if (xr <= 0)
 80019e8:	2b0e      	cmp	r3, #14
        xDiff = x > _x ? (x - _x) : (_x - x);
 80019ea:	6801      	ldr	r1, [r0, #0]
        if (xr <= 0)
 80019ec:	d8cc      	bhi.n	8001988 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x68>
        xDiff = x > _x ? (x - _x) : (_x - x);
 80019ee:	2500      	movs	r5, #0
            xr = 0;
 80019f0:	462b      	mov	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 80019f2:	1ac9      	subs	r1, r1, r3
 80019f4:	b289      	uxth	r1, r1
 80019f6:	e7d7      	b.n	80019a8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x88>
 80019f8:	20000398 	.word	0x20000398
 80019fc:	20000394 	.word	0x20000394
 8001a00:	20000390 	.word	0x20000390
 8001a04:	20000396 	.word	0x20000396
 8001a08:	2000038c 	.word	0x2000038c

08001a0c <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8001a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8001a0e:	4668      	mov	r0, sp
{
 8001a10:	460d      	mov	r5, r1
 8001a12:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8001a14:	f7ff ff84 	bl	8001920 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 8001a18:	f8bd 0000 	ldrh.w	r0, [sp]
 8001a1c:	b130      	cbz	r0, 8001a2c <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8001a1e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001a22:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8001a24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001a28:	6023      	str	r3, [r4, #0]
        return true;
 8001a2a:	2001      	movs	r0, #1
}
 8001a2c:	b003      	add	sp, #12
 8001a2e:	bd30      	pop	{r4, r5, pc}

08001a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001a30:	2803      	cmp	r0, #3
 8001a32:	d821      	bhi.n	8001a78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8001a34:	e8df f000 	tbb	[pc, r0]
 8001a38:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	fab2 f282 	clz	r2, r2
 8001a44:	0952      	lsrs	r2, r2, #5
 8001a46:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001a48:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001a4a:	f003 b907 	b.w	8004c5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	fab2 f282 	clz	r2, r2
 8001a56:	0952      	lsrs	r2, r2, #5
 8001a58:	2108      	movs	r1, #8
 8001a5a:	e7f5      	b.n	8001a48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	0952      	lsrs	r2, r2, #5
 8001a66:	2110      	movs	r1, #16
 8001a68:	e7ee      	b.n	8001a48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001a6a:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	fab2 f282 	clz	r2, r2
 8001a72:	0952      	lsrs	r2, r2, #5
 8001a74:	2120      	movs	r1, #32
 8001a76:	e7e7      	b.n	8001a48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000039c 	.word	0x2000039c
 8001a80:	40021000 	.word	0x40021000

08001a84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001a84:	2803      	cmp	r0, #3
 8001a86:	d821      	bhi.n	8001acc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 8001a88:	e8df f000 	tbb	[pc, r0]
 8001a8c:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	3a00      	subs	r2, #0
 8001a96:	bf18      	it	ne
 8001a98:	2201      	movne	r2, #1
 8001a9a:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001a9c:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001a9e:	f003 b8dd 	b.w	8004c5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	3a00      	subs	r2, #0
 8001aa8:	bf18      	it	ne
 8001aaa:	2201      	movne	r2, #1
 8001aac:	2108      	movs	r1, #8
 8001aae:	e7f5      	b.n	8001a9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	3a00      	subs	r2, #0
 8001ab6:	bf18      	it	ne
 8001ab8:	2201      	movne	r2, #1
 8001aba:	2110      	movs	r1, #16
 8001abc:	e7ee      	b.n	8001a9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001abe:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	3a00      	subs	r2, #0
 8001ac4:	bf18      	it	ne
 8001ac6:	2201      	movne	r2, #1
 8001ac8:	2120      	movs	r1, #32
 8001aca:	e7e7      	b.n	8001a9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000039c 	.word	0x2000039c
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001ad8:	2803      	cmp	r0, #3
 8001ada:	d80d      	bhi.n	8001af8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8001adc:	e8df f000 	tbb	[pc, r0]
 8001ae0:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ae4:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8001ae8:	f003 b8bd 	b.w	8004c66 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001aec:	2108      	movs	r1, #8
 8001aee:	e7fa      	b.n	8001ae6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001af0:	2110      	movs	r1, #16
 8001af2:	e7f8      	b.n	8001ae6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001af4:	2120      	movs	r1, #32
 8001af6:	e7f6      	b.n	8001ae6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001b00:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001b02:	2803      	cmp	r0, #3
 8001b04:	d811      	bhi.n	8001b2a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 8001b06:	e8df f000 	tbb	[pc, r0]
 8001b0a:	0a02      	.short	0x0a02
 8001b0c:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001b0e:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001b10:	4807      	ldr	r0, [pc, #28]	@ (8001b30 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8001b12:	f003 f89d 	bl	8004c50 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001b16:	1e43      	subs	r3, r0, #1
 8001b18:	4258      	negs	r0, r3
 8001b1a:	4158      	adcs	r0, r3
 8001b1c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001b1e:	2108      	movs	r1, #8
 8001b20:	e7f6      	b.n	8001b10 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001b22:	2110      	movs	r1, #16
 8001b24:	e7f4      	b.n	8001b10 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001b26:	2120      	movs	r1, #32
 8001b28:	e7f2      	b.n	8001b10 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	e7f3      	b.n	8001b16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <_ZN8touchgfx4GPIO4initEv>:
{
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	4d08      	ldr	r5, [pc, #32]	@ (8001b58 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001b38:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001b3a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001b3c:	b2e0      	uxtb	r0, r4
 8001b3e:	f7ff ffdf 	bl	8001b00 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001b42:	b118      	cbz	r0, 8001b4c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001b48:	bf18      	it	ne
 8001b4a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001b4c:	3401      	adds	r4, #1
 8001b4e:	2c05      	cmp	r4, #5
 8001b50:	f105 0504 	add.w	r5, r5, #4
 8001b54:	d1f2      	bne.n	8001b3c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	2000039c 	.word	0x2000039c

08001b5c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001b5c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001b5e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001b62:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001b66:	4770      	bx	lr

08001b68 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001b68:	2000      	movs	r0, #0
 8001b6a:	4770      	bx	lr

08001b6c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001b6e:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b70:	3900      	subs	r1, #0
 8001b72:	bf18      	it	ne
 8001b74:	2101      	movne	r1, #1
 8001b76:	7019      	strb	r1, [r3, #0]
    }
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	2001542f 	.word	0x2001542f

08001b80 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001b80:	2000      	movs	r0, #0
 8001b82:	4770      	bx	lr

08001b84 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001b84:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001b86:	b10b      	cbz	r3, 8001b8c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4718      	bx	r3
        }
    }
 8001b8c:	4770      	bx	lr

08001b8e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001b8e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b92:	4770      	bx	lr

08001b94 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001b94:	6840      	ldr	r0, [r0, #4]
 8001b96:	6803      	ldr	r3, [r0, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4718      	bx	r3

08001b9c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8001b9c:	4770      	bx	lr

08001b9e <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8001b9e:	4770      	bx	lr

08001ba0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ba0:	4770      	bx	lr
	...

08001ba4 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ba8:	f000 fc56 	bl	8002458 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001bb2:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 8001bb4:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8001bb8:	4620      	mov	r0, r4
 8001bba:	46ac      	mov	ip, r5
}
 8001bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8001bc0:	4760      	bx	ip
 8001bc2:	bf00      	nop
 8001bc4:	d0000000 	.word	0xd0000000

08001bc8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001bc8:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001bca:	6803      	ldr	r3, [r0, #0]
{
 8001bcc:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bd2:	4798      	blx	r3
    enableInterrupts();
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001bda:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001bdc:	f000 f8ec 	bl	8001db8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	4620      	mov	r0, r4
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8001be8:	2029      	movs	r0, #41	@ 0x29
 8001bea:	f7ff fad1 	bl	8001190 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001bee:	f000 f8e3 	bl	8001db8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001bf2:	6823      	ldr	r3, [r4, #0]
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf8:	4798      	blx	r3
    for (;;)
 8001bfa:	e7f8      	b.n	8001bee <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08001bfc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001c00:	f008 faa2 	bl	800a148 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	4620      	mov	r0, r4
 8001c08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001c10:	4718      	bx	r3

08001c12 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001c12:	f000 bc13 	b.w	800243c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001c16 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001c16:	f000 bc17 	b.w	8002448 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001c1a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001c1a:	f000 bc43 	b.w	80024a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001c1e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001c1e:	f000 bbe9 	b.w	80023f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001c22 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001c22:	f000 bc43 	b.w	80024ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001c26 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001c26:	f000 bc4b 	b.w	80024c0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001c2a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001c2a:	f000 bbed 	b.w	8002408 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001c2e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001c2e:	f007 bceb 	b.w	8009608 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001c32 <_ZN11TouchGFXHALD0Ev>:
 8001c32:	b510      	push	{r4, lr}
 8001c34:	217c      	movs	r1, #124	@ 0x7c
 8001c36:	4604      	mov	r4, r0
 8001c38:	f010 fe4a 	bl	80128d0 <_ZdlPvj>
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	bd10      	pop	{r4, pc}

08001c40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8001c40:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001c42:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001c46:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8001c4c:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8001c4e:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001c50:	d009      	beq.n	8001c66 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001c52:	b93a      	cbnz	r2, 8001c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c54:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c56:	490b      	ldr	r1, [pc, #44]	@ (8001c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c58:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c5a:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8001c5c:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c5e:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8001c60:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8001c62:	701a      	strb	r2, [r3, #0]
    }
 8001c64:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d0fc      	beq.n	8001c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c6a:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c6c:	4905      	ldr	r1, [pc, #20]	@ (8001c84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c6e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c70:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001c72:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c74:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001c76:	2200      	movs	r2, #0
 8001c78:	e7f3      	b.n	8001c62 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001c7a:	bf00      	nop
 8001c7c:	20015428 	.word	0x20015428
 8001c80:	20015424 	.word	0x20015424
 8001c84:	20015426 	.word	0x20015426

08001c88 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	460d      	mov	r5, r1
 8001c8c:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c8e:	b935      	cbnz	r5, 8001c9e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001c94:	480a      	ldr	r0, [pc, #40]	@ (8001cc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001c96:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c9a:	f010 fe47 	bl	801292c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c9e:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001ca4:	3a00      	subs	r2, #0
 8001ca6:	bf18      	it	ne
 8001ca8:	2201      	movne	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001cac:	6803      	ldr	r3, [r0, #0]
    }
 8001cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb6:	4718      	bx	r3
 8001cb8:	08013be3 	.word	0x08013be3
 8001cbc:	08013c1b 	.word	0x08013c1b
 8001cc0:	08013c69 	.word	0x08013c69
 8001cc4:	2001542e 	.word	0x2001542e

08001cc8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001cc8:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	428b      	cmp	r3, r1
 8001cd0:	d803      	bhi.n	8001cda <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d905      	bls.n	8001ce6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001cda:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001cdc:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001cde:	4808      	ldr	r0, [pc, #32]	@ (8001d00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001ce0:	219e      	movs	r1, #158	@ 0x9e
 8001ce2:	f010 fe23 	bl	801292c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001ce8:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001cec:	801a      	strh	r2, [r3, #0]
    }
 8001cee:	bd08      	pop	{r3, pc}
 8001cf0:	20015424 	.word	0x20015424
 8001cf4:	20015426 	.word	0x20015426
 8001cf8:	08013cae 	.word	0x08013cae
 8001cfc:	08013d11 	.word	0x08013d11
 8001d00:	08013c69 	.word	0x08013c69
 8001d04:	2001542a 	.word	0x2001542a
 8001d08:	2001542c 	.word	0x2001542c

08001d0c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001d0c:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001d0e:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001d12:	b118      	cbz	r0, 8001d1c <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001d14:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001d16:	6803      	ldr	r3, [r0, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4718      	bx	r3
    }
 8001d1c:	4770      	bx	lr
	...

08001d20 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d20:	2101      	movs	r1, #1
{
 8001d22:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001d24:	2200      	movs	r2, #0
 8001d26:	4608      	mov	r0, r1
 8001d28:	f005 f8dc 	bl	8006ee4 <osSemaphoreNew>
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001d2e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001d30:	b928      	cbnz	r0, 8001d3e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001d34:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001d36:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d38:	480a      	ldr	r0, [pc, #40]	@ (8001d64 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001d3a:	f010 fdf7 	bl	801292c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2104      	movs	r1, #4
 8001d42:	2001      	movs	r0, #1
 8001d44:	f005 f976 	bl	8007034 <osMessageQueueNew>
 8001d48:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001d4a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d4c:	b918      	cbnz	r0, 8001d56 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001d50:	4a03      	ldr	r2, [pc, #12]	@ (8001d60 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001d52:	212c      	movs	r1, #44	@ 0x2c
 8001d54:	e7f0      	b.n	8001d38 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001d56:	bd08      	pop	{r3, pc}
 8001d58:	200003b0 	.word	0x200003b0
 8001d5c:	08013d54 	.word	0x08013d54
 8001d60:	08013d9d 	.word	0x08013d9d
 8001d64:	08013dcc 	.word	0x08013dcc
 8001d68:	200003ac 	.word	0x200003ac
 8001d6c:	08013e16 	.word	0x08013e16

08001d70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001d70:	4b02      	ldr	r3, [pc, #8]	@ (8001d7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001d72:	f04f 31ff 	mov.w	r1, #4294967295
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f005 b8fe 	b.w	8006f78 <osSemaphoreAcquire>
 8001d7c:	200003b0 	.word	0x200003b0

08001d80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001d80:	4b01      	ldr	r3, [pc, #4]	@ (8001d88 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	f005 b924 	b.w	8006fd0 <osSemaphoreRelease>
 8001d88:	200003b0 	.word	0x200003b0

08001d8c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	f005 b8f1 	b.w	8006f78 <osSemaphoreAcquire>
 8001d96:	bf00      	nop
 8001d98:	200003b0 	.word	0x200003b0

08001d9c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001d9c:	f7ff bff0 	b.w	8001d80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001da0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001da0:	4803      	ldr	r0, [pc, #12]	@ (8001db0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001da2:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001da4:	6800      	ldr	r0, [r0, #0]
 8001da6:	2300      	movs	r3, #0
 8001da8:	461a      	mov	r2, r3
 8001daa:	f005 b97e 	b.w	80070aa <osMessageQueuePut>
 8001dae:	bf00      	nop
 8001db0:	200003ac 	.word	0x200003ac
 8001db4:	2000000c 	.word	0x2000000c

08001db8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001db8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001dba:	4c08      	ldr	r4, [pc, #32]	@ (8001ddc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	a901      	add	r1, sp, #4
 8001dc2:	6820      	ldr	r0, [r4, #0]
 8001dc4:	f005 f9a2 	bl	800710c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001dc8:	6820      	ldr	r0, [r4, #0]
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	2200      	movs	r2, #0
 8001dd0:	a901      	add	r1, sp, #4
 8001dd2:	f005 f99b 	bl	800710c <osMessageQueueGet>
}
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd10      	pop	{r4, pc}
 8001dda:	bf00      	nop
 8001ddc:	200003ac 	.word	0x200003ac

08001de0 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001de0:	6803      	ldr	r3, [r0, #0]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de4:	4718      	bx	r3

08001de6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001de6:	2001      	movs	r0, #1
 8001de8:	4770      	bx	lr

08001dea <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001dea:	6803      	ldr	r3, [r0, #0]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	4718      	bx	r3

08001df0 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8001df0:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <_ZN8STM32DMA10initializeEv+0x3c>)
 8001df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dfa:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e02:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e10:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001e18:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <_ZN8STM32DMA10initializeEv+0x40>)
 8001e1c:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <_ZN8STM32DMA10initializeEv+0x44>)
 8001e1e:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <_ZN8STM32DMA10initializeEv+0x48>)
 8001e22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e26:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001e28:	b002      	add	sp, #8
 8001e2a:	4770      	bx	lr
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	200002f4 	.word	0x200002f4
 8001e34:	080020c9 	.word	0x080020c9
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001e3c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001e40:	4770      	bx	lr
	...

08001e44 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <_ZN8STM32DMAD1Ev+0x18>)
 8001e46:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <_ZN8STM32DMAD1Ev+0x1c>)
 8001e4a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e56:	f3bf 8f6f 	isb	sy
}
 8001e5a:	4770      	bx	lr
 8001e5c:	080149c8 	.word	0x080149c8
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001e64:	b510      	push	{r4, lr}
 8001e66:	4604      	mov	r4, r0
}
 8001e68:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001e6c:	f7ff ffea 	bl	8001e44 <_ZN8STM32DMAD1Ev>
 8001e70:	4620      	mov	r0, r4
 8001e72:	f010 fd2d 	bl	80128d0 <_ZdlPvj>
 8001e76:	4620      	mov	r0, r4
 8001e78:	bd10      	pop	{r4, pc}
	...

08001e7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001e7c:	b508      	push	{r3, lr}
    switch (format)
 8001e7e:	280a      	cmp	r0, #10
 8001e80:	d809      	bhi.n	8001e96 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001e82:	e8df f000 	tbb	[pc, r0]
 8001e86:	1006      	.short	0x1006
 8001e88:	0808080e 	.word	0x0808080e
 8001e8c:	10101008 	.word	0x10101008
 8001e90:	10          	.byte	0x10
 8001e91:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001e92:	2002      	movs	r0, #2
}
 8001e94:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001e96:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001e98:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001e9a:	4806      	ldr	r0, [pc, #24]	@ (8001eb4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001e9c:	2187      	movs	r1, #135	@ 0x87
 8001e9e:	f010 fd45 	bl	801292c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	e7f6      	b.n	8001e94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001ea6:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001ea8:	e7f4      	b.n	8001e94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001eaa:	bf00      	nop
 8001eac:	08013e58 	.word	0x08013e58
 8001eb0:	08013e73 	.word	0x08013e73
 8001eb4:	08013ebe 	.word	0x08013ebe

08001eb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ebc:	7f88      	ldrb	r0, [r1, #30]
 8001ebe:	f7ff ffdd 	bl	8001e7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ec2:	8aa5      	ldrh	r5, [r4, #20]
 8001ec4:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ec8:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001eca:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ecc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ed2:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ed4:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ed6:	1b52      	subs	r2, r2, r5
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001eda:	6825      	ldr	r5, [r4, #0]
 8001edc:	2d08      	cmp	r5, #8
 8001ede:	d10e      	bne.n	8001efe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ee0:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ee2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ee4:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001ee6:	7f20      	ldrb	r0, [r4, #28]
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001eea:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001eee:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8001ef0:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001ef2:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ef6:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ef8:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001efa:	601a      	str	r2, [r3, #0]
    }
}
 8001efc:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001efe:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001f00:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001f06:	0a0a      	lsrs	r2, r1, #8
 8001f08:	0948      	lsrs	r0, r1, #5
 8001f0a:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8001f0e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8001f12:	4302      	orrs	r2, r0
 8001f14:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001f1c:	4a03      	ldr	r2, [pc, #12]	@ (8001f2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001f1e:	e7ec      	b.n	8001efa <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001f20:	4002b000 	.word	0x4002b000
 8001f24:	00010009 	.word	0x00010009
 8001f28:	00020201 	.word	0x00020201
 8001f2c:	00030201 	.word	0x00030201

08001f30 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001f30:	b508      	push	{r3, lr}
    switch (format)
 8001f32:	280b      	cmp	r0, #11
 8001f34:	d80b      	bhi.n	8001f4e <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001f36:	e8df f000 	tbb	[pc, r0]
 8001f3a:	1206      	.short	0x1206
 8001f3c:	0a0a0a10 	.word	0x0a0a0a10
 8001f40:	0808080a 	.word	0x0808080a
 8001f44:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001f46:	2002      	movs	r0, #2
}
 8001f48:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001f4a:	2005      	movs	r0, #5
        break;
 8001f4c:	e7fc      	b.n	8001f48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001f4e:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001f50:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001f54:	2166      	movs	r1, #102	@ 0x66
 8001f56:	f010 fce9 	bl	801292c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	e7f4      	b.n	8001f48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001f5e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001f60:	e7f2      	b.n	8001f48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001f62:	bf00      	nop
 8001f64:	08013e58 	.word	0x08013e58
 8001f68:	08013f06 	.word	0x08013f06
 8001f6c:	08013ebe 	.word	0x08013ebe

08001f70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8001f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001f74:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001f78:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001f7a:	4640      	mov	r0, r8
 8001f7c:	f7ff ffd8 	bl	8001f30 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001f80:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001f82:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001f84:	4638      	mov	r0, r7
 8001f86:	f7ff ffd3 	bl	8001f30 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001f8a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001f8c:	4638      	mov	r0, r7
 8001f8e:	f7ff ff75 	bl	8001e7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001f92:	8aa1      	ldrh	r1, [r4, #20]
 8001f94:	8b62      	ldrh	r2, [r4, #26]
 8001f96:	4b44      	ldr	r3, [pc, #272]	@ (80020a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001f98:	1a52      	subs	r2, r2, r1
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001f9c:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001f9e:	8b22      	ldrh	r2, [r4, #24]
 8001fa0:	1a52      	subs	r2, r2, r1
 8001fa2:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001fa4:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001fa6:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fac:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001fae:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001fb0:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001fb2:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001fb4:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8001fb6:	6820      	ldr	r0, [r4, #0]
 8001fb8:	2880      	cmp	r0, #128	@ 0x80
 8001fba:	d028      	beq.n	800200e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8001fbc:	7f22      	ldrb	r2, [r4, #28]
 8001fbe:	d80f      	bhi.n	8001fe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8001fc0:	2820      	cmp	r0, #32
 8001fc2:	d067      	beq.n	8002094 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8001fc4:	2840      	cmp	r0, #64	@ 0x40
 8001fc6:	d065      	beq.n	8002094 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8001fc8:	2804      	cmp	r0, #4
 8001fca:	d01a      	beq.n	8002002 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001fcc:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001fce:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8001fd2:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001fd6:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001fd8:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001fda:	d061      	beq.n	80020a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001fdc:	4a33      	ldr	r2, [pc, #204]	@ (80020ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001fde:	e044      	b.n	800206a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8001fe0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8001fe4:	d004      	beq.n	8001ff0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8001fe6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001fea:	d1ef      	bne.n	8001fcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001fec:	4830      	ldr	r0, [pc, #192]	@ (80020b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001fee:	e000      	b.n	8001ff2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ff0:	4830      	ldr	r0, [pc, #192]	@ (80020b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ff2:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8001ff6:	61da      	str	r2, [r3, #28]
 8001ff8:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001ffa:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ffc:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ffe:	6159      	str	r1, [r3, #20]
 8002000:	e032      	b.n	8002068 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002002:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002006:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800200a:	61da      	str	r2, [r3, #28]
 800200c:	e7f6      	b.n	8001ffc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800200e:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002010:	1d02      	adds	r2, r0, #4
 8002012:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002014:	7f22      	ldrb	r2, [r4, #28]
 8002016:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800201a:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 800201e:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002020:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002022:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002024:	7801      	ldrb	r1, [r0, #0]
 8002026:	b141      	cbz	r1, 800203a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8002028:	2901      	cmp	r1, #1
 800202a:	d021      	beq.n	8002070 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800202e:	4a23      	ldr	r2, [pc, #140]	@ (80020bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002030:	4823      	ldr	r0, [pc, #140]	@ (80020c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8002032:	f240 1111 	movw	r1, #273	@ 0x111
 8002036:	f010 fc79 	bl	801292c <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	8841      	ldrh	r1, [r0, #2]
 800203e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002042:	3901      	subs	r1, #1
 8002044:	f022 0210 	bic.w	r2, r2, #16
 8002048:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800204c:	61da      	str	r2, [r3, #28]
            bool blend = true;
 800204e:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002050:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800205a:	69da      	ldr	r2, [r3, #28]
 800205c:	0692      	lsls	r2, r2, #26
 800205e:	d4fc      	bmi.n	800205a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002060:	2210      	movs	r2, #16
 8002062:	609a      	str	r2, [r3, #8]
            if (blend)
 8002064:	2900      	cmp	r1, #0
 8002066:	d0b9      	beq.n	8001fdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002068:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8002070:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	8840      	ldrh	r0, [r0, #2]
 8002078:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800207c:	f100 30ff 	add.w	r0, r0, #4294967295
 8002080:	f022 0210 	bic.w	r2, r2, #16
 8002084:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002088:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 800208c:	bf18      	it	ne
 800208e:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002090:	61da      	str	r2, [r3, #28]
                break;
 8002092:	e7dd      	b.n	8002050 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002094:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800209a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800209e:	e7b4      	b.n	800200a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80020a0:	f240 2201 	movw	r2, #513	@ 0x201
 80020a4:	e7e1      	b.n	800206a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 80020a6:	bf00      	nop
 80020a8:	4002b000 	.word	0x4002b000
 80020ac:	00010201 	.word	0x00010201
 80020b0:	00020009 	.word	0x00020009
 80020b4:	0002000a 	.word	0x0002000a
 80020b8:	08013f50 	.word	0x08013f50
 80020bc:	08013f6a 	.word	0x08013f6a
 80020c0:	08013ebe 	.word	0x08013ebe
 80020c4:	00020201 	.word	0x00020201

080020c8 <DMA2D_XferCpltCallback>:
        return instance;
 80020c8:	4b02      	ldr	r3, [pc, #8]	@ (80020d4 <DMA2D_XferCpltCallback+0xc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80020ce:	6803      	ldr	r3, [r0, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	4718      	bx	r3
 80020d4:	20015430 	.word	0x20015430

080020d8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80020dc:	4625      	mov	r5, r4
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <_ZN8STM32DMAC1Ev+0x30>)
 80020e0:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80020e2:	2600      	movs	r6, #0
 80020e4:	6060      	str	r0, [r4, #4]
 80020e6:	7226      	strb	r6, [r4, #8]
 80020e8:	7266      	strb	r6, [r4, #9]
 80020ea:	f845 3b20 	str.w	r3, [r5], #32
 80020ee:	2260      	movs	r2, #96	@ 0x60
 80020f0:	4629      	mov	r1, r5
 80020f2:	f008 f967 	bl	800a3c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80020f6:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80020fa:	60ee      	str	r6, [r5, #12]
 80020fc:	3524      	adds	r5, #36	@ 0x24
 80020fe:	429d      	cmp	r5, r3
 8002100:	d1fb      	bne.n	80020fa <_ZN8STM32DMAC1Ev+0x22>
}
 8002102:	4620      	mov	r0, r4
 8002104:	bd70      	pop	{r4, r5, r6, pc}
 8002106:	bf00      	nop
 8002108:	080149c8 	.word	0x080149c8

0800210c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800210c:	2001      	movs	r0, #1
 800210e:	4770      	bx	lr

08002110 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002110:	2038      	movs	r0, #56	@ 0x38
 8002112:	4770      	bx	lr

08002114 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002114:	2338      	movs	r3, #56	@ 0x38
 8002116:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800211a:	3008      	adds	r0, #8
 800211c:	4770      	bx	lr

0800211e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800211e:	2338      	movs	r3, #56	@ 0x38
 8002120:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002124:	3008      	adds	r0, #8
 8002126:	4770      	bx	lr

08002128 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002128:	2001      	movs	r0, #1
 800212a:	4770      	bx	lr

0800212c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800212c:	f243 10cc 	movw	r0, #12748	@ 0x31cc
 8002130:	4770      	bx	lr

08002132 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002132:	f243 13cc 	movw	r3, #12748	@ 0x31cc
 8002136:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800213a:	3008      	adds	r0, #8
 800213c:	4770      	bx	lr

0800213e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800213e:	f243 13cc 	movw	r3, #12748	@ 0x31cc
 8002142:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002146:	3008      	adds	r0, #8
 8002148:	4770      	bx	lr

0800214a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800214a:	2001      	movs	r0, #1
 800214c:	4770      	bx	lr

0800214e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800214e:	2010      	movs	r0, #16
 8002150:	4770      	bx	lr

08002152 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002152:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002156:	3008      	adds	r0, #8
 8002158:	4770      	bx	lr

0800215a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800215a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800215e:	3008      	adds	r0, #8
 8002160:	4770      	bx	lr

08002162 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002162:	4608      	mov	r0, r1
 8002164:	f000 be70 	b.w	8002e48 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002168 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002168:	b510      	push	{r4, lr}
 800216a:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 800216c:	6003      	str	r3, [r0, #0]
 800216e:	4604      	mov	r4, r0
 8002170:	f006 ffa1 	bl	80090b6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002174:	4620      	mov	r0, r4
 8002176:	bd10      	pop	{r4, pc}
 8002178:	08014a80 	.word	0x08014a80

0800217c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800217c:	b510      	push	{r4, lr}
 800217e:	4604      	mov	r4, r0
 8002180:	f7ff fff2 	bl	8002168 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002184:	4620      	mov	r0, r4
 8002186:	2140      	movs	r1, #64	@ 0x40
 8002188:	f010 fba2 	bl	80128d0 <_ZdlPvj>
 800218c:	4620      	mov	r0, r4
 800218e:	bd10      	pop	{r4, pc}

08002190 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002190:	b510      	push	{r4, lr}
 8002192:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002194:	6003      	str	r3, [r0, #0]
 8002196:	4604      	mov	r4, r0
 8002198:	f006 ff8d 	bl	80090b6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800219c:	4620      	mov	r0, r4
 800219e:	bd10      	pop	{r4, pc}
 80021a0:	08014a4c 	.word	0x08014a4c

080021a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80021a4:	b510      	push	{r4, lr}
 80021a6:	4604      	mov	r4, r0
 80021a8:	f7ff fff2 	bl	8002190 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80021ac:	4620      	mov	r0, r4
 80021ae:	f243 11d4 	movw	r1, #12756	@ 0x31d4
 80021b2:	f010 fb8d 	bl	80128d0 <_ZdlPvj>
 80021b6:	4620      	mov	r0, r4
 80021b8:	bd10      	pop	{r4, pc}
	...

080021bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80021bc:	b510      	push	{r4, lr}
 80021be:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80021c0:	6003      	str	r3, [r0, #0]
 80021c2:	4604      	mov	r4, r0
 80021c4:	f006 ff77 	bl	80090b6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80021c8:	4620      	mov	r0, r4
 80021ca:	bd10      	pop	{r4, pc}
 80021cc:	08014a18 	.word	0x08014a18

080021d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	4604      	mov	r4, r0
 80021d4:	f7ff fff2 	bl	80021bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80021d8:	4620      	mov	r0, r4
 80021da:	2118      	movs	r1, #24
 80021dc:	f010 fb78 	bl	80128d0 <_ZdlPvj>
 80021e0:	4620      	mov	r0, r4
 80021e2:	bd10      	pop	{r4, pc}

080021e4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80021e4:	b510      	push	{r4, lr}
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <_ZN12FrontendHeapD1Ev+0x24>)
 80021e8:	6003      	str	r3, [r0, #0]
 80021ea:	4604      	mov	r4, r0
 80021ec:	f500 5048 	add.w	r0, r0, #12800	@ 0x3200
 80021f0:	f7ff ffba 	bl	8002168 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80021f4:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80021f8:	f7ff ffca 	bl	8002190 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80021fc:	f104 0014 	add.w	r0, r4, #20
 8002200:	f7ff ffdc 	bl	80021bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002204:	4620      	mov	r0, r4
 8002206:	bd10      	pop	{r4, pc}
 8002208:	08014ab4 	.word	0x08014ab4

0800220c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800220c:	b508      	push	{r3, lr}
 800220e:	4802      	ldr	r0, [pc, #8]	@ (8002218 <__tcf_0+0xc>)
 8002210:	f7ff ffe8 	bl	80021e4 <_ZN12FrontendHeapD1Ev>
 8002214:	bd08      	pop	{r3, pc}
 8002216:	bf00      	nop
 8002218:	20001268 	.word	0x20001268

0800221c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800221c:	b510      	push	{r4, lr}
 800221e:	4604      	mov	r4, r0
 8002220:	f7ff ffe0 	bl	80021e4 <_ZN12FrontendHeapD1Ev>
 8002224:	4620      	mov	r0, r4
 8002226:	f243 31ac 	movw	r1, #13228	@ 0x33ac
 800222a:	f010 fb51 	bl	80128d0 <_ZdlPvj>
 800222e:	4620      	mov	r0, r4
 8002230:	bd10      	pop	{r4, pc}
	...

08002234 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8002234:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002238:	f000 f9a4 	bl	8002584 <_ZN14BitmapDatabase11getInstanceEv>
 800223c:	4605      	mov	r5, r0
 800223e:	f000 f9a5 	bl	800258c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002242:	2400      	movs	r4, #0
 8002244:	4601      	mov	r1, r0
 8002246:	4623      	mov	r3, r4
 8002248:	4628      	mov	r0, r5
 800224a:	4622      	mov	r2, r4
 800224c:	9400      	str	r4, [sp, #0]
 800224e:	f00d fcad 	bl	800fbac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002252:	4b26      	ldr	r3, [pc, #152]	@ (80022ec <touchgfx_init+0xb8>)
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <touchgfx_init+0xbc>)
        static FrontendHeap instance;
 8002256:	4d27      	ldr	r5, [pc, #156]	@ (80022f4 <touchgfx_init+0xc0>)
 8002258:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800225a:	4620      	mov	r0, r4
 800225c:	f001 fc3c 	bl	8003ad8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002260:	4825      	ldr	r0, [pc, #148]	@ (80022f8 <touchgfx_init+0xc4>)
 8002262:	f00d fc0b 	bl	800fa7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002266:	682b      	ldr	r3, [r5, #0]
 8002268:	f3bf 8f5b 	dmb	ish
 800226c:	07db      	lsls	r3, r3, #31
 800226e:	d437      	bmi.n	80022e0 <touchgfx_init+0xac>
 8002270:	4628      	mov	r0, r5
 8002272:	f010 fb2f 	bl	80128d4 <__cxa_guard_acquire>
 8002276:	b398      	cbz	r0, 80022e0 <touchgfx_init+0xac>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8002278:	4c20      	ldr	r4, [pc, #128]	@ (80022fc <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <touchgfx_init+0xcc>)
 800227c:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
 800227e:	f504 5748 	add.w	r7, r4, #12800	@ 0x3200
          frontendApplication(app)
 8002282:	f107 0650 	add.w	r6, r7, #80	@ 0x50
        : presenterStorage(pres),
 8002286:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800228a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
        : presenterStorage(pres),
 800228e:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002290:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8002294:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002296:	6126      	str	r6, [r4, #16]
 8002298:	f006 ff0e 	bl	80090b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800229c:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <touchgfx_init+0xd0>)
 800229e:	6163      	str	r3, [r4, #20]
 80022a0:	4640      	mov	r0, r8
 80022a2:	f006 ff09 	bl	80090b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022a6:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <touchgfx_init+0xd4>)
 80022a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80022aa:	4638      	mov	r0, r7
 80022ac:	f006 ff04 	bl	80090b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80022b0:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 80022b4:	4a15      	ldr	r2, [pc, #84]	@ (800230c <touchgfx_init+0xd8>)
 80022b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 80022ba:	f504 5049 	add.w	r0, r4, #12864	@ 0x3240
 80022be:	f001 fc87 	bl	8003bd0 <_ZN5ModelC1Ev>
 80022c2:	4622      	mov	r2, r4
 80022c4:	f504 5149 	add.w	r1, r4, #12864	@ 0x3240
 80022c8:	4630      	mov	r0, r6
 80022ca:	f001 fc77 	bl	8003bbc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80022ce:	4630      	mov	r0, r6
 80022d0:	f000 fdba 	bl	8002e48 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80022d4:	480e      	ldr	r0, [pc, #56]	@ (8002310 <touchgfx_init+0xdc>)
 80022d6:	f010 fb47 	bl	8012968 <atexit>
 80022da:	4628      	mov	r0, r5
 80022dc:	f010 fb06 	bl	80128ec <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <touchgfx_init+0xe0>)
}
 80022e2:	b002      	add	sp, #8
 80022e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80022e8:	f7ff bc5c 	b.w	8001ba4 <_ZN11TouchGFXHAL10initializeEv>
 80022ec:	2001548c 	.word	0x2001548c
 80022f0:	20000430 	.word	0x20000430
 80022f4:	20001264 	.word	0x20001264
 80022f8:	20000010 	.word	0x20000010
 80022fc:	20001268 	.word	0x20001268
 8002300:	08014ab4 	.word	0x08014ab4
 8002304:	08014a18 	.word	0x08014a18
 8002308:	08014a4c 	.word	0x08014a4c
 800230c:	08014a80 	.word	0x08014a80
 8002310:	0800220d 	.word	0x0800220d
 8002314:	200003b4 	.word	0x200003b4

08002318 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002318:	4801      	ldr	r0, [pc, #4]	@ (8002320 <touchgfx_taskEntry+0x8>)
 800231a:	f7ff bc55 	b.w	8001bc8 <_ZN11TouchGFXHAL9taskEntryEv>
 800231e:	bf00      	nop
 8002320:	200003b4 	.word	0x200003b4

08002324 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002324:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002326:	4e22      	ldr	r6, [pc, #136]	@ (80023b0 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8002328:	4c22      	ldr	r4, [pc, #136]	@ (80023b4 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 800232a:	4d23      	ldr	r5, [pc, #140]	@ (80023b8 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 800232c:	4b23      	ldr	r3, [pc, #140]	@ (80023bc <_GLOBAL__sub_I_touchgfx_init+0x98>)
 800232e:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002330:	4630      	mov	r0, r6
 8002332:	f7ff fed1 	bl	80020d8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002336:	4628      	mov	r0, r5
 8002338:	f00e fa98 	bl	801086c <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 800233c:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800233e:	4821      	ldr	r0, [pc, #132]	@ (80023c4 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8002340:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8002342:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002344:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 8002348:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 800234c:	491e      	ldr	r1, [pc, #120]	@ (80023c8 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800234e:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8002350:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002354:	491d      	ldr	r1, [pc, #116]	@ (80023cc <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002356:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 8002358:	491d      	ldr	r1, [pc, #116]	@ (80023d0 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 800235a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 800235e:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002360:	21f0      	movs	r1, #240	@ 0xf0
 8002362:	8001      	strh	r1, [r0, #0]
 8002364:	481b      	ldr	r0, [pc, #108]	@ (80023d4 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 8002366:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002368:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800236a:	481b      	ldr	r0, [pc, #108]	@ (80023d8 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 800236c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002370:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 8002374:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002378:	e9c3 2206 	strd	r2, r2, [r3, #24]
 800237c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002380:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8002384:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8002388:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800238c:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 8002390:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 8002394:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 8002396:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800239a:	8001      	strh	r1, [r0, #0]
 800239c:	480f      	ldr	r0, [pc, #60]	@ (80023dc <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 800239e:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80023a0:	490f      	ldr	r1, [pc, #60]	@ (80023e0 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80023a2:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80023aa:	4a0e      	ldr	r2, [pc, #56]	@ (80023e4 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bd70      	pop	{r4, r5, r6, pc}
 80023b0:	200004c0 	.word	0x200004c0
 80023b4:	20001260 	.word	0x20001260
 80023b8:	20000434 	.word	0x20000434
 80023bc:	080148d8 	.word	0x080148d8
 80023c0:	200003b4 	.word	0x200003b4
 80023c4:	20015424 	.word	0x20015424
 80023c8:	01000001 	.word	0x01000001
 80023cc:	01010000 	.word	0x01010000
 80023d0:	20015430 	.word	0x20015430
 80023d4:	2001542a 	.word	0x2001542a
 80023d8:	20015426 	.word	0x20015426
 80023dc:	2001542c 	.word	0x2001542c
 80023e0:	20015428 	.word	0x20015428
 80023e4:	080148f0 	.word	0x080148f0

080023e8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80023e8:	4801      	ldr	r0, [pc, #4]	@ (80023f0 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80023ea:	f7ff bd2b 	b.w	8001e44 <_ZN8STM32DMAD1Ev>
 80023ee:	bf00      	nop
 80023f0:	200004c0 	.word	0x200004c0

080023f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80023f6:	2290      	movs	r2, #144	@ 0x90
 80023f8:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 80023fc:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002408:	4a09      	ldr	r2, [pc, #36]	@ (8002430 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800240a:	490a      	ldr	r1, [pc, #40]	@ (8002434 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800240c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800240e:	480a      	ldr	r0, [pc, #40]	@ (8002438 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002414:	3b01      	subs	r3, #1
 8002416:	b29b      	uxth	r3, r3
 8002418:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800241a:	6911      	ldr	r1, [r2, #16]
 800241c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002420:	3901      	subs	r1, #1
 8002422:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002426:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800242e:	4770      	bx	lr
 8002430:	40016800 	.word	0x40016800
 8002434:	20004616 	.word	0x20004616
 8002438:	20004614 	.word	0x20004614

0800243c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800243c:	4b01      	ldr	r3, [pc, #4]	@ (8002444 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800243e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8002442:	4770      	bx	lr
 8002444:	40016800 	.word	0x40016800

08002448 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002448:	4b02      	ldr	r3, [pc, #8]	@ (8002454 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800244a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800244c:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002452:	4770      	bx	lr
 8002454:	40016800 	.word	0x40016800

08002458 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	4604      	mov	r4, r0
    HAL::initialize();
 800245c:	f007 f929 	bl	80096b2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8002464:	f00a fad6 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
 8002468:	4601      	mov	r1, r0
 800246a:	4620      	mov	r0, r4
 800246c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8002472:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8002476:	4620      	mov	r0, r4
 8002478:	46ac      	mov	ip, r5
 800247a:	2300      	movs	r3, #0
}
 800247c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002480:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 8002484:	4760      	bx	ip
 8002486:	bf00      	nop
 8002488:	d004b000 	.word	0xd004b000

0800248c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 800248c:	f007 b8f8 	b.w	8009680 <_ZN8touchgfx3HAL10beginFrameEv>

08002490 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002490:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 8002494:	b113      	cbz	r3, 800249c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002496:	4b02      	ldr	r3, [pc, #8]	@ (80024a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 800249c:	f007 b8fc 	b.w	8009698 <_ZN8touchgfx3HAL8endFrameEv>
 80024a0:	20004618 	.word	0x20004618

080024a4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80024a4:	f007 b8b6 	b.w	8009614 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080024a8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80024a8:	f007 ba17 	b.w	80098da <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080024ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80024ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024b8:	609a      	str	r2, [r3, #8]
}
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80024c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80024ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024ce:	f3bf 8f6f 	isb	sy
 80024d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80024da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024de:	f3bf 8f6f 	isb	sy
}
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100

080024e8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80024e8:	b510      	push	{r4, lr}
        return instance;
 80024ea:	4c14      	ldr	r4, [pc, #80]	@ (800253c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	b323      	cbz	r3, 800253a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <HAL_LTDC_LineEventCallback+0x58>)
 80024f2:	4a14      	ldr	r2, [pc, #80]	@ (8002544 <HAL_LTDC_LineEventCallback+0x5c>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	8811      	ldrh	r1, [r2, #0]
 80024f8:	428b      	cmp	r3, r1
 80024fa:	d113      	bne.n	8002524 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <HAL_LTDC_LineEventCallback+0x60>)
 80024fe:	8819      	ldrh	r1, [r3, #0]
 8002500:	f003 f990 	bl	8005824 <HAL_LTDC_ProgramLineEvent>
 8002504:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002506:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800250a:	3301      	adds	r3, #1
 800250c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002510:	f7ff fc46 	bl	8001da0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002514:	6820      	ldr	r0, [r4, #0]
 8002516:	f007 fe17 	bl	800a148 <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800251a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 800251e:	2000      	movs	r0, #0
 8002520:	f7ff ba86 	b.w	8001a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002524:	f003 f97e 	bl	8005824 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002528:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800252a:	6803      	ldr	r3, [r0, #0]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4798      	blx	r3
    }
 8002530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002534:	2000      	movs	r0, #0
 8002536:	f7ff baa5 	b.w	8001a84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800253a:	bd10      	pop	{r4, pc}
 800253c:	20015430 	.word	0x20015430
 8002540:	40016800 	.word	0x40016800
 8002544:	20004616 	.word	0x20004616
 8002548:	20004614 	.word	0x20004614

0800254c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // arialbd_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // arialbd_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800254c:	4770      	bx	lr

0800254e <_ZN23ApplicationFontProviderD0Ev>:
 800254e:	b510      	push	{r4, lr}
 8002550:	2104      	movs	r1, #4
 8002552:	4604      	mov	r4, r0
 8002554:	f010 f9bc 	bl	80128d0 <_ZdlPvj>
 8002558:	4620      	mov	r0, r4
 800255a:	bd10      	pop	{r4, pc}

0800255c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 800255c:	2901      	cmp	r1, #1
{
 800255e:	b508      	push	{r3, lr}
    switch (typography)
 8002560:	d006      	beq.n	8002570 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8002562:	2902      	cmp	r1, #2
 8002564:	d008      	beq.n	8002578 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8002566:	b959      	cbnz	r1, 8002580 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // arialbd_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002568:	f001 fb02 	bl	8003b70 <_ZN17TypedTextDatabase8getFontsEv>
 800256c:	6800      	ldr	r0, [r0, #0]
        // arialbd_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800256e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002570:	f001 fafe 	bl	8003b70 <_ZN17TypedTextDatabase8getFontsEv>
 8002574:	6840      	ldr	r0, [r0, #4]
 8002576:	e7fa      	b.n	800256e <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002578:	f001 fafa 	bl	8003b70 <_ZN17TypedTextDatabase8getFontsEv>
 800257c:	6880      	ldr	r0, [r0, #8]
 800257e:	e7f6      	b.n	800256e <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8002580:	2000      	movs	r0, #0
 8002582:	e7f4      	b.n	800256e <_ZN23ApplicationFontProvider7getFontEt+0x12>

08002584 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002584:	4800      	ldr	r0, [pc, #0]	@ (8002588 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002586:	4770      	bx	lr
 8002588:	08014ad4 	.word	0x08014ad4

0800258c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800258c:	2004      	movs	r0, #4
 800258e:	4770      	bx	lr

08002590 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002590:	b513      	push	{r0, r1, r4, lr}
 8002592:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002594:	b151      	cbz	r1, 80025ac <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002596:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8002598:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800259a:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800259e:	aa01      	add	r2, sp, #4
 80025a0:	689c      	ldr	r4, [r3, #8]
 80025a2:	f10d 0303 	add.w	r3, sp, #3
 80025a6:	47a0      	blx	r4
        return glyph;
    }
 80025a8:	b002      	add	sp, #8
 80025aa:	bd10      	pop	{r4, pc}
            return 0;
 80025ac:	4608      	mov	r0, r1
 80025ae:	e7fb      	b.n	80025a8 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080025b0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80025b0:	89c0      	ldrh	r0, [r0, #14]
 80025b2:	4770      	bx	lr

080025b4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80025b4:	8a00      	ldrh	r0, [r0, #16]
 80025b6:	4770      	bx	lr

080025b8 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80025b8:	88c0      	ldrh	r0, [r0, #6]
 80025ba:	4770      	bx	lr

080025bc <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80025bc:	8880      	ldrh	r0, [r0, #4]
 80025be:	4770      	bx	lr

080025c0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80025c0:	7a80      	ldrb	r0, [r0, #10]
    }
 80025c2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80025c6:	4770      	bx	lr

080025c8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80025c8:	7a80      	ldrb	r0, [r0, #10]
    }
 80025ca:	09c0      	lsrs	r0, r0, #7
 80025cc:	4770      	bx	lr

080025ce <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80025ce:	2000      	movs	r0, #0
 80025d0:	4770      	bx	lr
	...

080025d4 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80025d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80025dc <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	00000000 	.word	0x00000000

080025e0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80025e0:	4770      	bx	lr

080025e2 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80025e2:	b510      	push	{r4, lr}
    }
 80025e4:	2108      	movs	r1, #8
    virtual ~TypedText()
 80025e6:	4604      	mov	r4, r0
    }
 80025e8:	f010 f972 	bl	80128d0 <_ZdlPvj>
 80025ec:	4620      	mov	r0, r4
 80025ee:	bd10      	pop	{r4, pc}

080025f0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80025f0:	2000      	movs	r0, #0
 80025f2:	4770      	bx	lr

080025f4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80025f4:	8081      	strh	r1, [r0, #4]
    }
 80025f6:	4770      	bx	lr

080025f8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80025f8:	80c1      	strh	r1, [r0, #6]
    }
 80025fa:	4770      	bx	lr

080025fc <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80025fc:	8101      	strh	r1, [r0, #8]
    }
 80025fe:	4770      	bx	lr

08002600 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002600:	8141      	strh	r1, [r0, #10]
    }
 8002602:	4770      	bx	lr

08002604 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002604:	4770      	bx	lr

08002606 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002606:	4770      	bx	lr

08002608 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002608:	4770      	bx	lr

0800260a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800260a:	4770      	bx	lr

0800260c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800260c:	4770      	bx	lr

0800260e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800260e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002610:	88c4      	ldrh	r4, [r0, #6]
 8002612:	6803      	ldr	r3, [r0, #0]
 8002614:	1b12      	subs	r2, r2, r4
 8002616:	8884      	ldrh	r4, [r0, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261a:	1b09      	subs	r1, r1, r4
 800261c:	b212      	sxth	r2, r2
    }
 800261e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002622:	b209      	sxth	r1, r1
 8002624:	4718      	bx	r3

08002626 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002626:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800262a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002632:	6813      	ldr	r3, [r2, #0]
 8002634:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002636:	6010      	str	r0, [r2, #0]
    }
 8002638:	4770      	bx	lr

0800263a <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800263a:	4770      	bx	lr

0800263c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800263c:	4770      	bx	lr

0800263e <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800263e:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8002642:	6808      	ldr	r0, [r1, #0]
 8002644:	6849      	ldr	r1, [r1, #4]
 8002646:	c303      	stmia	r3!, {r0, r1}
    }
 8002648:	4770      	bx	lr

0800264a <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800264a:	4770      	bx	lr

0800264c <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800264c:	4770      	bx	lr

0800264e <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800264e:	6041      	str	r1, [r0, #4]
    }
 8002650:	4770      	bx	lr

08002652 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 8002652:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002654:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 8002656:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 800265a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800265e:	8002      	strh	r2, [r0, #0]
 8002660:	8042      	strh	r2, [r0, #2]
 8002662:	8084      	strh	r4, [r0, #4]
 8002664:	80c1      	strh	r1, [r0, #6]
        }
 8002666:	bd10      	pop	{r4, pc}

08002668 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 8002668:	4770      	bx	lr

0800266a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800266a:	4770      	bx	lr

0800266c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800266c:	4770      	bx	lr
	...

08002670 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002672:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002676:	2300      	movs	r3, #0
 8002678:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800267c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002680:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002684:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	08002931 	.word	0x08002931

08002690 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002690:	2301      	movs	r3, #1
 8002692:	7203      	strb	r3, [r0, #8]
    }
 8002694:	4770      	bx	lr

08002696 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 8002696:	4770      	bx	lr

08002698 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 8002698:	4770      	bx	lr

0800269a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 800269a:	4770      	bx	lr

0800269c <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800269c:	4770      	bx	lr

0800269e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 800269e:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80026a0:	6840      	ldr	r0, [r0, #4]
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	3110      	adds	r1, #16
 80026a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026a8:	4718      	bx	r3

080026aa <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 80026aa:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80026ac:	6840      	ldr	r0, [r0, #4]
 80026ae:	6803      	ldr	r3, [r0, #0]
 80026b0:	3110      	adds	r1, #16
 80026b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b4:	4718      	bx	r3

080026b6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 80026b6:	4770      	bx	lr

080026b8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 80026b8:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80026ba:	6840      	ldr	r0, [r0, #4]
 80026bc:	6803      	ldr	r3, [r0, #0]
 80026be:	3110      	adds	r1, #16
 80026c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026c2:	4718      	bx	r3

080026c4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 80026c8:	6840      	ldr	r0, [r0, #4]
 80026ca:	6803      	ldr	r3, [r0, #0]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4798      	blx	r3
 80026d0:	4604      	mov	r4, r0
        while (d)
 80026d2:	b93c      	cbnz	r4, 80026e4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 80026d4:	6868      	ldr	r0, [r5, #4]
 80026d6:	6803      	ldr	r3, [r0, #0]
 80026d8:	f105 0110 	add.w	r1, r5, #16
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    }
 80026de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 80026e2:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 80026e4:	88a1      	ldrh	r1, [r4, #4]
 80026e6:	89ab      	ldrh	r3, [r5, #12]
 80026e8:	1ac9      	subs	r1, r1, r3
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	4620      	mov	r0, r4
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	b209      	sxth	r1, r1
 80026f2:	4798      	blx	r3
        return nextSibling;
 80026f4:	69a4      	ldr	r4, [r4, #24]
 80026f6:	e7ec      	b.n	80026d2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

080026f8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Cover transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 80026f8:	4770      	bx	lr

080026fa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80026fa:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80026fc:	68c2      	ldr	r2, [r0, #12]
 80026fe:	6841      	ldr	r1, [r0, #4]
 8002700:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8002702:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8002704:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002708:	07d2      	lsls	r2, r2, #31
 800270a:	bf48      	it	mi
 800270c:	590a      	ldrmi	r2, [r1, r4]
 800270e:	689b      	ldr	r3, [r3, #8]
    }
 8002710:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002714:	bf48      	it	mi
 8002716:	58d3      	ldrmi	r3, [r2, r3]
 8002718:	4718      	bx	r3

0800271a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800271a:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 800271c:	6840      	ldr	r0, [r0, #4]
 800271e:	b130      	cbz	r0, 800272e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	b91a      	cbnz	r2, 800272c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8002724:	68d8      	ldr	r0, [r3, #12]
 8002726:	f000 0001 	and.w	r0, r0, #1
 800272a:	4770      	bx	lr
 800272c:	2001      	movs	r0, #1
    }
 800272e:	4770      	bx	lr

08002730 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002730:	b510      	push	{r4, lr}
 8002732:	210c      	movs	r1, #12
 8002734:	4604      	mov	r4, r0
 8002736:	f010 f8cb 	bl	80128d0 <_ZdlPvj>
 800273a:	4620      	mov	r0, r4
 800273c:	bd10      	pop	{r4, pc}

0800273e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800273e:	b510      	push	{r4, lr}
 8002740:	2110      	movs	r1, #16
 8002742:	4604      	mov	r4, r0
 8002744:	f010 f8c4 	bl	80128d0 <_ZdlPvj>
 8002748:	4620      	mov	r0, r4
 800274a:	bd10      	pop	{r4, pc}

0800274c <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800274c:	b510      	push	{r4, lr}
 800274e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8002752:	4604      	mov	r4, r0
 8002754:	f010 f8bc 	bl	80128d0 <_ZdlPvj>
 8002758:	4620      	mov	r0, r4
 800275a:	bd10      	pop	{r4, pc}

0800275c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 800275c:	b510      	push	{r4, lr}
 800275e:	2138      	movs	r1, #56	@ 0x38
 8002760:	4604      	mov	r4, r0
 8002762:	f010 f8b5 	bl	80128d0 <_ZdlPvj>
 8002766:	4620      	mov	r0, r4
 8002768:	bd10      	pop	{r4, pc}

0800276a <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 800276a:	b510      	push	{r4, lr}
 800276c:	2128      	movs	r1, #40	@ 0x28
 800276e:	4604      	mov	r4, r0
 8002770:	f010 f8ae 	bl	80128d0 <_ZdlPvj>
 8002774:	4620      	mov	r0, r4
 8002776:	bd10      	pop	{r4, pc}

08002778 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
class CoverTransition : public Transition
 8002778:	b510      	push	{r4, lr}
 800277a:	2138      	movs	r1, #56	@ 0x38
 800277c:	4604      	mov	r4, r0
 800277e:	f010 f8a7 	bl	80128d0 <_ZdlPvj>
 8002782:	4620      	mov	r0, r4
 8002784:	bd10      	pop	{r4, pc}

08002786 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002786:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8002788:	f00a f944 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
 800278c:	6803      	ldr	r3, [r0, #0]
    }
 800278e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8002792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002794:	4718      	bx	r3
	...

08002798 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800279a:	4605      	mov	r5, r0
        animationCounter++;
 800279c:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 800279e:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 80027a0:	3001      	adds	r0, #1
 80027a2:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80027a4:	4298      	cmp	r0, r3
        animationCounter++;
 80027a6:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 80027a8:	d905      	bls.n	80027b6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80027aa:	2301      	movs	r3, #1
 80027ac:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	72ab      	strb	r3, [r5, #10]
    }
 80027b2:	b003      	add	sp, #12
 80027b4:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80027b6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
        const int16_t oldValue = calculatedValue;
 80027ba:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80027be:	2100      	movs	r1, #0
 80027c0:	f00b fe20 	bl	800e404 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80027c4:	07c3      	lsls	r3, r0, #31
 80027c6:	d507      	bpl.n	80027d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80027c8:	2800      	cmp	r0, #0
 80027ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027ce:	bfc8      	it	gt
 80027d0:	2301      	movgt	r3, #1
 80027d2:	fa13 f080 	uxtah	r0, r3, r0
 80027d6:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80027d8:	7aab      	ldrb	r3, [r5, #10]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80027da:	81e8      	strh	r0, [r5, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 80027dc:	1b04      	subs	r4, r0, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80027de:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80027e0:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80027e2:	d106      	bne.n	80027f2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
 80027e4:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b11b      	cbz	r3, 80027f2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80027ea:	f00a f913 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
 80027ee:	f00a f917 	bl	800ca20 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 80027f2:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
        : x(0), y(0), width(0), height(0)
 80027f4:	2300      	movs	r3, #0
 80027f6:	8812      	ldrh	r2, [r2, #0]
 80027f8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80027fc:	89eb      	ldrh	r3, [r5, #14]
 80027fe:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 8002800:	425b      	negs	r3, r3
 8002802:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8002808:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8002812:	f00a f8ff 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
 8002816:	6803      	ldr	r3, [r0, #0]
 8002818:	aa02      	add	r2, sp, #8
 800281a:	e912 0006 	ldmdb	r2, {r1, r2}
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 8002822:	6868      	ldr	r0, [r5, #4]
 8002824:	6803      	ldr	r3, [r0, #0]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	4798      	blx	r3
 800282a:	4605      	mov	r5, r0
        while (d)
 800282c:	2d00      	cmp	r5, #0
 800282e:	d0c0      	beq.n	80027b2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8002830:	88a9      	ldrh	r1, [r5, #4]
 8002832:	682b      	ldr	r3, [r5, #0]
 8002834:	4421      	add	r1, r4
 8002836:	4628      	mov	r0, r5
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	b209      	sxth	r1, r1
 800283c:	4798      	blx	r3
 800283e:	69ad      	ldr	r5, [r5, #24]
 8002840:	e7f4      	b.n	800282c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8002842:	bf00      	nop
 8002844:	2001542e 	.word	0x2001542e
 8002848:	20015424 	.word	0x20015424
 800284c:	20015426 	.word	0x20015426

08002850 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002850:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002854:	b112      	cbz	r2, 800285c <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002856:	6803      	ldr	r3, [r0, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4718      	bx	r3
    }
 800285c:	4770      	bx	lr
	...

08002860 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002862:	4604      	mov	r4, r0
        animationCounter++;
 8002864:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 8002866:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8002868:	3001      	adds	r0, #1
 800286a:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 800286c:	4298      	cmp	r0, r3
        animationCounter++;
 800286e:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8002870:	d905      	bls.n	800287e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8002872:	2301      	movs	r3, #1
 8002874:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	72a3      	strb	r3, [r4, #10]
    }
 800287a:	b003      	add	sp, #12
 800287c:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800287e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002882:	2100      	movs	r1, #0
 8002884:	f00b fdbe 	bl	800e404 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8002888:	07c3      	lsls	r3, r0, #31
 800288a:	d507      	bpl.n	800289c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800288c:	2800      	cmp	r0, #0
 800288e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002892:	bfc8      	it	gt
 8002894:	2301      	movgt	r3, #1
 8002896:	fa13 f080 	uxtah	r0, r3, r0
 800289a:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800289c:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800289e:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80028a0:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 80028a2:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80028a4:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 80028a6:	4813      	ldr	r0, [pc, #76]	@ (80028f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 80028a8:	f9b0 0000 	ldrsh.w	r0, [r0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80028ac:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80028b0:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 80028b2:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 80028b4:	442b      	add	r3, r5
 80028b6:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80028b8:	b212      	sxth	r2, r2
 80028ba:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 80028be:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 80028c0:	8322      	strh	r2, [r4, #24]
 80028c2:	f8ad 2000 	strh.w	r2, [sp]
 80028c6:	2200      	movs	r2, #0
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f8ad 2002 	strh.w	r2, [sp, #2]
 80028ce:	4669      	mov	r1, sp
 80028d0:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80028d2:	7aa3      	ldrb	r3, [r4, #10]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d1d0      	bne.n	800287a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 80028d8:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0cc      	beq.n	800287a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80028e0:	f00a f898 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80028e4:	b003      	add	sp, #12
 80028e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80028ea:	f00a b899 	b.w	800ca20 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80028ee:	bf00      	nop
 80028f0:	20015424 	.word	0x20015424
 80028f4:	20015426 	.word	0x20015426
 80028f8:	2001542e 	.word	0x2001542e

080028fc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80028fc:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002900:	b11a      	cbz	r2, 800290a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002902:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002906:	b102      	cbz	r2, 800290a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002908:	6018      	str	r0, [r3, #0]
        }
    }
 800290a:	4770      	bx	lr

0800290c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800290c:	b510      	push	{r4, lr}
 800290e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002910:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8002914:	b158      	cbz	r0, 800292e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002916:	6803      	ldr	r3, [r0, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	4798      	blx	r3
 800291c:	b138      	cbz	r0, 800292e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800291e:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8002922:	6803      	ldr	r3, [r0, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800292e:	bd10      	pop	{r4, pc}

08002930 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002930:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002934:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002938:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800293a:	68b0      	ldr	r0, [r6, #8]
 800293c:	6803      	ldr	r3, [r0, #0]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4798      	blx	r3
 8002942:	f5b0 7fd2 	cmp.w	r0, #420	@ 0x1a4
 8002946:	d205      	bcs.n	8002954 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8002948:	4b44      	ldr	r3, [pc, #272]	@ (8002a5c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800294a:	4a45      	ldr	r2, [pc, #276]	@ (8002a60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800294c:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800294e:	4845      	ldr	r0, [pc, #276]	@ (8002a64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002950:	f00f ffec 	bl	801292c <__assert_func>
 8002954:	6870      	ldr	r0, [r6, #4]
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4798      	blx	r3
 800295c:	280f      	cmp	r0, #15
 800295e:	d803      	bhi.n	8002968 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8002960:	4b41      	ldr	r3, [pc, #260]	@ (8002a68 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002962:	4a3f      	ldr	r2, [pc, #252]	@ (8002a60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002964:	21a4      	movs	r1, #164	@ 0xa4
 8002966:	e7f2      	b.n	800294e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002968:	68f0      	ldr	r0, [r6, #12]
 800296a:	6803      	ldr	r3, [r0, #0]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4798      	blx	r3
 8002970:	280b      	cmp	r0, #11
 8002972:	d803      	bhi.n	800297c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8002974:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002976:	4a3a      	ldr	r2, [pc, #232]	@ (8002a60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002978:	21a5      	movs	r1, #165	@ 0xa5
 800297a:	e7e8      	b.n	800294e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 800297c:	f00a f84a 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002980:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002a74 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002984:	3004      	adds	r0, #4
 8002986:	f00a f892 	bl	800caae <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800298a:	f8d9 0000 	ldr.w	r0, [r9]
 800298e:	b110      	cbz	r0, 8002996 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8002990:	6803      	ldr	r3, [r0, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4798      	blx	r3
    if (*currentTrans)
 8002996:	f8d9 0000 	ldr.w	r0, [r9]
 800299a:	b110      	cbz	r0, 80029a2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 800299c:	6803      	ldr	r3, [r0, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4798      	blx	r3
    if (*currentScreen)
 80029a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a78 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 80029a6:	f8d8 0000 	ldr.w	r0, [r8]
 80029aa:	b110      	cbz	r0, 80029b2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80029ac:	6803      	ldr	r3, [r0, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	4798      	blx	r3
    if (*currentPresenter)
 80029b2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80029b6:	b110      	cbz	r0, 80029be <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80029b8:	6803      	ldr	r3, [r0, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4798      	blx	r3
    if (*currentScreen)
 80029be:	f8d8 0000 	ldr.w	r0, [r8]
 80029c2:	b110      	cbz	r0, 80029ca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80029c4:	6803      	ldr	r3, [r0, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4798      	blx	r3
    if (*currentPresenter)
 80029ca:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80029ce:	b110      	cbz	r0, 80029d6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80029d0:	6803      	ldr	r3, [r0, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80029d6:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80029d8:	6803      	ldr	r3, [r0, #0]
 80029da:	2100      	movs	r1, #0
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	4798      	blx	r3
        : screenContainer(0), done(false)
 80029e0:	f04f 0b00 	mov.w	fp, #0
 80029e4:	4b22      	ldr	r3, [pc, #136]	@ (8002a70 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80029e6:	f8c0 b004 	str.w	fp, [r0, #4]
 80029ea:	4604      	mov	r4, r0
 80029ec:	f880 b008 	strb.w	fp, [r0, #8]
 80029f0:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80029f2:	68b0      	ldr	r0, [r6, #8]
 80029f4:	6803      	ldr	r3, [r0, #0]
 80029f6:	4659      	mov	r1, fp
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	4798      	blx	r3
 80029fc:	4605      	mov	r5, r0
 80029fe:	f001 f92b 	bl	8003c58 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002a02:	6870      	ldr	r0, [r6, #4]
 8002a04:	6803      	ldr	r3, [r0, #0]
 8002a06:	4659      	mov	r1, fp
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	4798      	blx	r3
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	4606      	mov	r6, r0
 8002a10:	f001 f8fe 	bl	8003c10 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8002a14:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002a16:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002a1a:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002a1e:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002a20:	f8c6 a008 	str.w	sl, [r6, #8]
 8002a24:	4628      	mov	r0, r5
 8002a26:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002a28:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002a2c:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002a30:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002a32:	4798      	blx	r3
    newPresenter->activate();
 8002a34:	6833      	ldr	r3, [r6, #0]
 8002a36:	4630      	mov	r0, r6
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f00b fcda 	bl	800e3f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	4620      	mov	r0, r4
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	4798      	blx	r3
    newTransition->invalidate();
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	4620      	mov	r0, r4
}
 8002a52:	b001      	add	sp, #4
 8002a54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a58:	4718      	bx	r3
 8002a5a:	bf00      	nop
 8002a5c:	08013fa8 	.word	0x08013fa8
 8002a60:	08014036 	.word	0x08014036
 8002a64:	08014108 	.word	0x08014108
 8002a68:	0801414f 	.word	0x0801414f
 8002a6c:	080141f2 	.word	0x080141f2
 8002a70:	08014c10 	.word	0x08014c10
 8002a74:	20015470 	.word	0x20015470
 8002a78:	2001546c 	.word	0x2001546c

08002a7c <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a80:	461d      	mov	r5, r3
        setX(x);
 8002a82:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002a84:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4616      	mov	r6, r2
        setX(x);
 8002a8e:	4798      	blx	r3
        setY(y);
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	4631      	mov	r1, r6
 8002a94:	4620      	mov	r0, r4
 8002a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a98:	4798      	blx	r3
        setWidth(width);
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa2:	4798      	blx	r3
        setHeight(height);
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	4639      	mov	r1, r7
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8002aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8002ab0:	4718      	bx	r3
	...

08002ab4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl()
{
 8002ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002ab8:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002abc:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002abe:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002ac2:	6803      	ldr	r3, [r0, #0]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4798      	blx	r3
 8002ac8:	f5b0 7fd2 	cmp.w	r0, #420	@ 0x1a4
 8002acc:	d205      	bcs.n	8002ada <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x26>
 8002ace:	4b54      	ldr	r3, [pc, #336]	@ (8002c20 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x16c>)
 8002ad0:	4a54      	ldr	r2, [pc, #336]	@ (8002c24 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002ad2:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002ad4:	4854      	ldr	r0, [pc, #336]	@ (8002c28 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 8002ad6:	f00f ff29 	bl	801292c <__assert_func>
 8002ada:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002ade:	6803      	ldr	r3, [r0, #0]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4798      	blx	r3
 8002ae4:	280f      	cmp	r0, #15
 8002ae6:	d803      	bhi.n	8002af0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3c>
 8002ae8:	4b50      	ldr	r3, [pc, #320]	@ (8002c2c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 8002aea:	4a4e      	ldr	r2, [pc, #312]	@ (8002c24 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002aec:	21a4      	movs	r1, #164	@ 0xa4
 8002aee:	e7f1      	b.n	8002ad4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002af0:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002af4:	6803      	ldr	r3, [r0, #0]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4798      	blx	r3
 8002afa:	2837      	cmp	r0, #55	@ 0x37
 8002afc:	d803      	bhi.n	8002b06 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x52>
 8002afe:	4b4c      	ldr	r3, [pc, #304]	@ (8002c30 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 8002b00:	4a48      	ldr	r2, [pc, #288]	@ (8002c24 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002b02:	21a5      	movs	r1, #165	@ 0xa5
 8002b04:	e7e6      	b.n	8002ad4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8002b06:	f009 ff85 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002b0a:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002c44 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>
 8002b0e:	3004      	adds	r0, #4
 8002b10:	f009 ffcd 	bl	800caae <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002b14:	f8d9 0000 	ldr.w	r0, [r9]
 8002b18:	b110      	cbz	r0, 8002b20 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 8002b1a:	6803      	ldr	r3, [r0, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4798      	blx	r3
    if (*currentTrans)
 8002b20:	f8d9 0000 	ldr.w	r0, [r9]
 8002b24:	b110      	cbz	r0, 8002b2c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8002b26:	6803      	ldr	r3, [r0, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4798      	blx	r3
    if (*currentScreen)
 8002b2c:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 8002c48 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 8002b30:	f8d8 0000 	ldr.w	r0, [r8]
 8002b34:	b110      	cbz	r0, 8002b3c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8002b36:	6803      	ldr	r3, [r0, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4798      	blx	r3
    if (*currentPresenter)
 8002b3c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002b40:	b110      	cbz	r0, 8002b48 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8002b42:	6803      	ldr	r3, [r0, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4798      	blx	r3
    if (*currentScreen)
 8002b48:	f8d8 0000 	ldr.w	r0, [r8]
 8002b4c:	b110      	cbz	r0, 8002b54 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8002b4e:	6803      	ldr	r3, [r0, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4798      	blx	r3
    if (*currentPresenter)
 8002b54:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002b58:	b110      	cbz	r0, 8002b60 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002b60:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002b64:	6803      	ldr	r3, [r0, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	4798      	blx	r3
          solid()
 8002b6c:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 8002b6e:	6003      	str	r3, [r0, #0]
 8002b70:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b74:	8103      	strh	r3, [r0, #8]
 8002b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b7a:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 8002b7e:	6103      	str	r3, [r0, #16]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002b80:	4a2e      	ldr	r2, [pc, #184]	@ (8002c3c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
            targetValue = HAL::DISPLAY_WIDTH;
 8002b82:	4b2f      	ldr	r3, [pc, #188]	@ (8002c40 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002b84:	f9b2 2000 	ldrsh.w	r2, [r2]
            targetValue = HAL::DISPLAY_WIDTH;
 8002b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8c:	8183      	strh	r3, [r0, #12]
        : screenContainer(0), done(false)
 8002b8e:	2500      	movs	r5, #0
 8002b90:	4604      	mov	r4, r0
 8002b92:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 8002b94:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002b96:	81c5      	strh	r5, [r0, #14]
          solid()
 8002b98:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002b9c:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002ba0:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002ba4:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002ba8:	4629      	mov	r1, r5
 8002baa:	9200      	str	r2, [sp, #0]
 8002bac:	3010      	adds	r0, #16
 8002bae:	462a      	mov	r2, r5
 8002bb0:	f7ff ff64 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002bb4:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002bb8:	6803      	ldr	r3, [r0, #0]
 8002bba:	4629      	mov	r1, r5
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	4798      	blx	r3
 8002bc0:	4606      	mov	r6, r0
 8002bc2:	f001 f849 	bl	8003c58 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002bc6:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002bca:	6803      	ldr	r3, [r0, #0]
 8002bcc:	4629      	mov	r1, r5
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	4798      	blx	r3
 8002bd2:	4631      	mov	r1, r6
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	f001 f81b 	bl	8003c10 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8002bda:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002bdc:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002be0:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002be4:	6833      	ldr	r3, [r6, #0]
 8002be6:	f8c5 a008 	str.w	sl, [r5, #8]
 8002bea:	4630      	mov	r0, r6
 8002bec:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002bee:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002bf2:	f8c8 6000 	str.w	r6, [r8]
 8002bf6:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8002bf8:	4798      	blx	r3
    newPresenter->activate();
 8002bfa:	682b      	ldr	r3, [r5, #0]
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002c02:	4621      	mov	r1, r4
 8002c04:	4630      	mov	r0, r6
 8002c06:	f00b fbf7 	bl	800e3f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4798      	blx	r3
    newTransition->invalidate();
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4620      	mov	r0, r4
}
 8002c18:	b003      	add	sp, #12
 8002c1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c1e:	4718      	bx	r3
 8002c20:	08013fa8 	.word	0x08013fa8
 8002c24:	08014295 	.word	0x08014295
 8002c28:	08014108 	.word	0x08014108
 8002c2c:	0801414f 	.word	0x0801414f
 8002c30:	080141f2 	.word	0x080141f2
 8002c34:	08014c58 	.word	0x08014c58
 8002c38:	08014b3c 	.word	0x08014b3c
 8002c3c:	20015426 	.word	0x20015426
 8002c40:	20015424 	.word	0x20015424
 8002c44:	20015470 	.word	0x20015470
 8002c48:	2001546c 	.word	0x2001546c

08002c4c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8002c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002c50:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002c54:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002c56:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002c5a:	6803      	ldr	r3, [r0, #0]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4798      	blx	r3
 8002c60:	f243 13cb 	movw	r3, #12747	@ 0x31cb
 8002c64:	4298      	cmp	r0, r3
 8002c66:	d805      	bhi.n	8002c74 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x28>
 8002c68:	4b54      	ldr	r3, [pc, #336]	@ (8002dbc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 8002c6a:	4a55      	ldr	r2, [pc, #340]	@ (8002dc0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002c6c:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002c6e:	4855      	ldr	r0, [pc, #340]	@ (8002dc4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 8002c70:	f00f fe5c 	bl	801292c <__assert_func>
 8002c74:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002c78:	6803      	ldr	r3, [r0, #0]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4798      	blx	r3
 8002c7e:	280f      	cmp	r0, #15
 8002c80:	d803      	bhi.n	8002c8a <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3e>
 8002c82:	4b51      	ldr	r3, [pc, #324]	@ (8002dc8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 8002c84:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002c86:	21a4      	movs	r1, #164	@ 0xa4
 8002c88:	e7f1      	b.n	8002c6e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002c8a:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4798      	blx	r3
 8002c94:	2837      	cmp	r0, #55	@ 0x37
 8002c96:	d803      	bhi.n	8002ca0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x54>
 8002c98:	4b4c      	ldr	r3, [pc, #304]	@ (8002dcc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 8002c9a:	4a49      	ldr	r2, [pc, #292]	@ (8002dc0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002c9c:	21a5      	movs	r1, #165	@ 0xa5
 8002c9e:	e7e6      	b.n	8002c6e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x22>
    Application::getInstance()->clearAllTimerWidgets();
 8002ca0:	f009 feb8 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002ca4:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002de0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
 8002ca8:	3004      	adds	r0, #4
 8002caa:	f009 ff00 	bl	800caae <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002cae:	f8d9 0000 	ldr.w	r0, [r9]
 8002cb2:	b110      	cbz	r0, 8002cba <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6e>
        (*currentTrans)->tearDown();
 8002cb4:	6803      	ldr	r3, [r0, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4798      	blx	r3
    if (*currentTrans)
 8002cba:	f8d9 0000 	ldr.w	r0, [r9]
 8002cbe:	b110      	cbz	r0, 8002cc6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x7a>
        (*currentTrans)->~Transition();
 8002cc0:	6803      	ldr	r3, [r0, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4798      	blx	r3
    if (*currentScreen)
 8002cc6:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8002de4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 8002cca:	f8d8 0000 	ldr.w	r0, [r8]
 8002cce:	b110      	cbz	r0, 8002cd6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 8002cd0:	6803      	ldr	r3, [r0, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4798      	blx	r3
    if (*currentPresenter)
 8002cd6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002cda:	b110      	cbz	r0, 8002ce2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x96>
        (*currentPresenter)->deactivate();
 8002cdc:	6803      	ldr	r3, [r0, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4798      	blx	r3
    if (*currentScreen)
 8002ce2:	f8d8 0000 	ldr.w	r0, [r8]
 8002ce6:	b110      	cbz	r0, 8002cee <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa2>
        (*currentScreen)->~Screen();
 8002ce8:	6803      	ldr	r3, [r0, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4798      	blx	r3
    if (*currentPresenter)
 8002cee:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002cf2:	b110      	cbz	r0, 8002cfa <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xae>
        (*currentPresenter)->~Presenter();
 8002cf4:	6803      	ldr	r3, [r0, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002cfa:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002cfe:	6803      	ldr	r3, [r0, #0]
 8002d00:	2100      	movs	r1, #0
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	4798      	blx	r3
          solid()
 8002d06:	4b32      	ldr	r3, [pc, #200]	@ (8002dd0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 8002d08:	6003      	str	r3, [r0, #0]
 8002d0a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d0e:	8103      	strh	r3, [r0, #8]
 8002d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d14:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002d16:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 8002d18:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002dd8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	425a      	negs	r2, r3
 8002d20:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002d22:	4a2e      	ldr	r2, [pc, #184]	@ (8002ddc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
        : screenContainer(0), done(false)
 8002d24:	2500      	movs	r5, #0
 8002d26:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d2a:	6045      	str	r5, [r0, #4]
 8002d2c:	4604      	mov	r4, r0
          animationCounter(0),
 8002d2e:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002d30:	81c5      	strh	r5, [r0, #14]
          solid()
 8002d32:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002d36:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002d3a:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002d3e:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002d42:	4629      	mov	r1, r5
 8002d44:	9200      	str	r2, [sp, #0]
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	462a      	mov	r2, r5
 8002d4a:	3010      	adds	r0, #16
 8002d4c:	f7ff fe96 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002d50:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002d54:	6803      	ldr	r3, [r0, #0]
 8002d56:	4629      	mov	r1, r5
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	4798      	blx	r3
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	f001 f9ab 	bl	80040b8 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002d62:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002d66:	6803      	ldr	r3, [r0, #0]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	4798      	blx	r3
 8002d6e:	4631      	mov	r1, r6
 8002d70:	4605      	mov	r5, r0
 8002d72:	f000 ffa9 	bl	8003cc8 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 8002d76:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002d78:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002d7c:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002d80:	6833      	ldr	r3, [r6, #0]
 8002d82:	f8c5 a008 	str.w	sl, [r5, #8]
 8002d86:	4630      	mov	r0, r6
 8002d88:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002d8a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002d8e:	f8c8 6000 	str.w	r6, [r8]
 8002d92:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8002d94:	4798      	blx	r3
    newPresenter->activate();
 8002d96:	682b      	ldr	r3, [r5, #0]
 8002d98:	4628      	mov	r0, r5
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002d9e:	4621      	mov	r1, r4
 8002da0:	4630      	mov	r0, r6
 8002da2:	f00b fb29 	bl	800e3f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	4620      	mov	r0, r4
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	4798      	blx	r3
    newTransition->invalidate();
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4620      	mov	r0, r4
}
 8002db4:	b003      	add	sp, #12
 8002db6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dba:	4718      	bx	r3
 8002dbc:	08013fa8 	.word	0x08013fa8
 8002dc0:	08014379 	.word	0x08014379
 8002dc4:	08014108 	.word	0x08014108
 8002dc8:	0801414f 	.word	0x0801414f
 8002dcc:	080141f2 	.word	0x080141f2
 8002dd0:	08014c34 	.word	0x08014c34
 8002dd4:	08014b3c 	.word	0x08014b3c
 8002dd8:	20015424 	.word	0x20015424
 8002ddc:	20015426 	.word	0x20015426
 8002de0:	20015470 	.word	0x20015470
 8002de4:	2001546c 	.word	0x2001546c

08002de8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	4604      	mov	r4, r0
 8002dec:	4617      	mov	r7, r2
 8002dee:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002df0:	f009 fefa 	bl	800cbe8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002df4:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8002df6:	2500      	movs	r5, #0
      model(m)
 8002df8:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 8002dfc:	4e0f      	ldr	r6, [pc, #60]	@ (8002e3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 8002dfe:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 8002e00:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 8002e04:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002e06:	6830      	ldr	r0, [r6, #0]
 8002e08:	6023      	str	r3, [r4, #0]
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002e0c:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8002e10:	6803      	ldr	r3, [r0, #0]
 8002e12:	2101      	movs	r1, #1
 8002e14:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 8002e16:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8002e1a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 fe5b 	bl	8003ad8 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002e22:	6833      	ldr	r3, [r6, #0]
 8002e24:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002e28:	b10a      	cbz	r2, 8002e2e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002e2a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002e2c:	b900      	cbnz	r0, 8002e30 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002e2e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 8002e30:	f00f f802 	bl	8011e38 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 8002e34:	4620      	mov	r0, r4
 8002e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e38:	2001547c 	.word	0x2001547c
 8002e3c:	20015430 	.word	0x20015430
 8002e40:	08014bbc 	.word	0x08014bbc
 8002e44:	08014ba4 	.word	0x08014ba4

08002e48 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002e4a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002e54:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002e58:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002e5c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	08002931 	.word	0x08002931

08002e68 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 8002e6a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002e74:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002e78:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002e7c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	08002ab5 	.word	0x08002ab5

08002e88 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 8002e8a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002e94:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002e98:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002e9c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	08002c4d 	.word	0x08002c4d

08002ea8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002ea8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002eaa:	4770      	bx	lr

08002eac <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002eac:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002eae:	4770      	bx	lr

08002eb0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002eb0:	4770      	bx	lr

08002eb2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002eb2:	888b      	ldrh	r3, [r1, #4]
 8002eb4:	69c0      	ldr	r0, [r0, #28]
 8002eb6:	680a      	ldr	r2, [r1, #0]
 8002eb8:	0adb      	lsrs	r3, r3, #11
 8002eba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002ebe:	4410      	add	r0, r2
 8002ec0:	4770      	bx	lr

08002ec2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002ec2:	b510      	push	{r4, lr}
 8002ec4:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8002ec6:	b1ba      	cbz	r2, 8002ef8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002ec8:	7b10      	ldrb	r0, [r2, #12]
 8002eca:	b168      	cbz	r0, 8002ee8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002ecc:	7b53      	ldrb	r3, [r2, #13]
 8002ece:	7ad2      	ldrb	r2, [r2, #11]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	6a23      	ldr	r3, [r4, #32]
 8002eda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002ede:	881a      	ldrh	r2, [r3, #0]
 8002ee0:	428a      	cmp	r2, r1
 8002ee2:	d102      	bne.n	8002eea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002ee4:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8002ee8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002eea:	d805      	bhi.n	8002ef8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002eec:	3801      	subs	r0, #1
 8002eee:	b280      	uxth	r0, r0
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d1f3      	bne.n	8002ede <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002ef6:	e7f7      	b.n	8002ee8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e7f5      	b.n	8002ee8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002efc <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	212c      	movs	r1, #44	@ 0x2c
 8002f00:	4604      	mov	r4, r0
 8002f02:	f00f fce5 	bl	80128d0 <_ZdlPvj>
 8002f06:	4620      	mov	r0, r4
 8002f08:	bd10      	pop	{r4, pc}
	...

08002f0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002f0c:	b530      	push	{r4, r5, lr}
 8002f0e:	b08b      	sub	sp, #44	@ 0x2c
 8002f10:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002f12:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8002f16:	9508      	str	r5, [sp, #32]
 8002f18:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8002f1c:	9507      	str	r5, [sp, #28]
 8002f1e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8002f22:	9506      	str	r5, [sp, #24]
 8002f24:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8002f28:	9505      	str	r5, [sp, #20]
 8002f2a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8002f2e:	9504      	str	r5, [sp, #16]
 8002f30:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8002f34:	9503      	str	r5, [sp, #12]
 8002f36:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8002f3a:	9502      	str	r5, [sp, #8]
 8002f3c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8002f40:	9501      	str	r5, [sp, #4]
 8002f42:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8002f46:	9500      	str	r5, [sp, #0]
 8002f48:	f00a feb0 	bl	800dcac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002f4c:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8002f4e:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8002f50:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002f52:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8002f54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002f56:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8002f58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002f5a:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8002f5c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8002f5e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002f60:	4620      	mov	r0, r4
 8002f62:	b00b      	add	sp, #44	@ 0x2c
 8002f64:	bd30      	pop	{r4, r5, pc}
 8002f66:	bf00      	nop
 8002f68:	08014c7c 	.word	0x08014c7c

08002f6c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002f6c:	4770      	bx	lr

08002f6e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002f6e:	4770      	bx	lr

08002f70 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002f70:	4770      	bx	lr

08002f72 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002f72:	4770      	bx	lr

08002f74 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002f74:	4770      	bx	lr

08002f76 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8002f76:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8002f78:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8002f7a:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8002f7c:	466d      	mov	r5, sp
        rect.width = width;
 8002f7e:	8101      	strh	r1, [r0, #8]
 8002f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f84:	4601      	mov	r1, r0
    virtual void setWidth(int16_t width)
 8002f86:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8002f88:	4628      	mov	r0, r5
 8002f8a:	4798      	blx	r3
 8002f8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f90:	343c      	adds	r4, #60	@ 0x3c
 8002f92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8002f96:	b005      	add	sp, #20
 8002f98:	bd30      	pop	{r4, r5, pc}

08002f9a <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8002f9a:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8002f9c:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8002f9e:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8002fa0:	466d      	mov	r5, sp
        rect.height = height;
 8002fa2:	8141      	strh	r1, [r0, #10]
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa8:	4601      	mov	r1, r0
    virtual void setHeight(int16_t height)
 8002faa:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8002fac:	4628      	mov	r0, r5
 8002fae:	4798      	blx	r3
 8002fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fb4:	343c      	adds	r4, #60	@ 0x3c
 8002fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8002fba:	b005      	add	sp, #20
 8002fbc:	bd30      	pop	{r4, r5, pc}

08002fbe <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	8002      	strh	r2, [r0, #0]
 8002fc2:	8042      	strh	r2, [r0, #2]
 8002fc4:	8082      	strh	r2, [r0, #4]
 8002fc6:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002fc8:	4770      	bx	lr

08002fca <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002fca:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8002fce:	4770      	bx	lr

08002fd0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002fd0:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 8002fd2:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002fd4:	4604      	mov	r4, r0
        setX(x);
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002fd8:	4615      	mov	r5, r2
        setX(x);
 8002fda:	4798      	blx	r3
        setBaselineY(baselineY);
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8002fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8002fe8:	4718      	bx	r3

08002fea <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8002fea:	2000      	movs	r0, #0
 8002fec:	4770      	bx	lr

08002fee <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8002fee:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8002ff0:	4770      	bx	lr

08002ff2 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8002ff2:	4770      	bx	lr

08002ff4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002ff4:	4770      	bx	lr

08002ff6 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8002ff6:	4770      	bx	lr

08002ff8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8002ff8:	4770      	bx	lr

08002ffa <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002ffa:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002ffc:	68c2      	ldr	r2, [r0, #12]
 8002ffe:	6844      	ldr	r4, [r0, #4]
 8003000:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8003002:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003004:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003008:	07d2      	lsls	r2, r2, #31
 800300a:	bf48      	it	mi
 800300c:	5962      	ldrmi	r2, [r4, r5]
 800300e:	689b      	ldr	r3, [r3, #8]
    }
 8003010:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003012:	bf48      	it	mi
 8003014:	58d3      	ldrmi	r3, [r2, r3]
 8003016:	4718      	bx	r3

08003018 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8003018:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800301a:	6840      	ldr	r0, [r0, #4]
 800301c:	b130      	cbz	r0, 800302c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	b91a      	cbnz	r2, 800302a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8003022:	68d8      	ldr	r0, [r3, #12]
 8003024:	f000 0001 	and.w	r0, r0, #1
 8003028:	4770      	bx	lr
 800302a:	2001      	movs	r0, #1
    }
 800302c:	4770      	bx	lr

0800302e <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800302e:	b510      	push	{r4, lr}
 8003030:	214c      	movs	r1, #76	@ 0x4c
 8003032:	4604      	mov	r4, r0
 8003034:	f00f fc4c 	bl	80128d0 <_ZdlPvj>
 8003038:	4620      	mov	r0, r4
 800303a:	bd10      	pop	{r4, pc}

0800303c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800303c:	b510      	push	{r4, lr}
 800303e:	2110      	movs	r1, #16
 8003040:	4604      	mov	r4, r0
 8003042:	f00f fc45 	bl	80128d0 <_ZdlPvj>
 8003046:	4620      	mov	r0, r4
 8003048:	bd10      	pop	{r4, pc}

0800304a <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800304a:	b510      	push	{r4, lr}
}
 800304c:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
Screen1ViewBase::~Screen1ViewBase()
 8003050:	4604      	mov	r4, r0
}
 8003052:	f00f fc3d 	bl	80128d0 <_ZdlPvj>
 8003056:	4620      	mov	r0, r4
 8003058:	bd10      	pop	{r4, pc}

0800305a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 800305a:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 800305c:	f7ff fbf8 	bl	8002850 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003060:	bd08      	pop	{r3, pc}
	...

08003064 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003064:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003066:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003068:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800306a:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800306c:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 800306e:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003070:	b28d      	uxth	r5, r1
 8003072:	b92b      	cbnz	r3, 8003080 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003074:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003076:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003078:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800307a:	4811      	ldr	r0, [pc, #68]	@ (80030c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800307c:	f00f fc56 	bl	801292c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003080:	4910      	ldr	r1, [pc, #64]	@ (80030c4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8003082:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003084:	8809      	ldrh	r1, [r1, #0]
 8003086:	4291      	cmp	r1, r2
 8003088:	d803      	bhi.n	8003092 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800308a:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800308c:	4a0b      	ldr	r2, [pc, #44]	@ (80030bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800308e:	216d      	movs	r1, #109	@ 0x6d
 8003090:	e7f3      	b.n	800307a <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003092:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800309e:	6803      	ldr	r3, [r0, #0]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4798      	blx	r3
 80030a4:	1a29      	subs	r1, r5, r0
 80030a6:	4633      	mov	r3, r6
 80030a8:	4620      	mov	r0, r4
 80030aa:	b209      	sxth	r1, r1
    }
 80030ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80030b0:	4718      	bx	r3
 80030b2:	bf00      	nop
 80030b4:	20015480 	.word	0x20015480
 80030b8:	0801445e 	.word	0x0801445e
 80030bc:	080144a0 	.word	0x080144a0
 80030c0:	080144db 	.word	0x080144db
 80030c4:	20015484 	.word	0x20015484
 80030c8:	08014522 	.word	0x08014522
 80030cc:	20015488 	.word	0x20015488

080030d0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 80030d0:	306c      	adds	r0, #108	@ 0x6c
 80030d2:	4288      	cmp	r0, r1
{
 80030d4:	b508      	push	{r3, lr}
    if (&src == &button1)
 80030d6:	d105      	bne.n	80030e4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80030d8:	f009 fc9c 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 80030dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 80030e0:	f7ff bed2 	b.w	8002e88 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 80030e4:	bd08      	pop	{r3, pc}

080030e6 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80030e6:	2200      	movs	r2, #0
 80030e8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ec:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 80030f0:	6082      	str	r2, [r0, #8]
    }
 80030f2:	4770      	bx	lr

080030f4 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 80030f4:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 80030f6:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80030f8:	4604      	mov	r4, r0
        setX(x);
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80030fc:	4615      	mov	r5, r2
        setX(x);
 80030fe:	4798      	blx	r3
        setY(y);
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	4629      	mov	r1, r5
 8003104:	4620      	mov	r0, r4
 8003106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800310c:	4718      	bx	r3
	...

08003110 <_ZN8touchgfx6WidgetC1Ev>:
 8003110:	2200      	movs	r2, #0
 8003112:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003116:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800311a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 800311e:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8003122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003126:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8003128:	4a01      	ldr	r2, [pc, #4]	@ (8003130 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800312a:	6002      	str	r2, [r0, #0]
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	08014ce4 	.word	0x08014ce4

08003134 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8003134:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003136:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 8003138:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800313a:	2100      	movs	r1, #0
 800313c:	f00f fdfd 	bl	8012d3a <memset>
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ffe5 	bl	8003110 <_ZN8touchgfx6WidgetC1Ev>
 8003146:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003148:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 800314c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800314e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003152:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8003154:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8003158:	2300      	movs	r3, #0
 800315a:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 800315e:	8723      	strh	r3, [r4, #56]	@ 0x38
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 8003164:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8003168:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 800316a:	4620      	mov	r0, r4
 800316c:	bd10      	pop	{r4, pc}
 800316e:	bf00      	nop
 8003170:	08015594 	.word	0x08015594
 8003174:	08014b2c 	.word	0x08014b2c

08003178 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8003178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317c:	4604      	mov	r4, r0
 800317e:	b08b      	sub	sp, #44	@ 0x2c
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003180:	46a3      	mov	fp, r4
        : presenter(0)
 8003182:	2500      	movs	r5, #0
 8003184:	f00a ff8c 	bl	800e0a0 <_ZN8touchgfx6ScreenC1Ev>
 8003188:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <_ZN15Screen1ViewBaseC1Ev+0x210>)
 800318a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800318c:	f84b 3b40 	str.w	r3, [fp], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003190:	2226      	movs	r2, #38	@ 0x26
 8003192:	4629      	mov	r1, r5
 8003194:	4658      	mov	r0, fp
 8003196:	f00f fdd0 	bl	8012d3a <memset>
 800319a:	4658      	mov	r0, fp
 800319c:	f7ff ffb8 	bl	8003110 <_ZN8touchgfx6WidgetC1Ev>
 80031a0:	4b7a      	ldr	r3, [pc, #488]	@ (800338c <_ZN15Screen1ViewBaseC1Ev+0x214>)
 80031a2:	6423      	str	r3, [r4, #64]	@ 0x40
 80031a4:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 80031a8:	23ff      	movs	r3, #255	@ 0xff
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80031aa:	2226      	movs	r2, #38	@ 0x26
 80031ac:	4629      	mov	r1, r5
 80031ae:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 80031b2:	4630      	mov	r0, r6
        : color(col)
 80031b4:	66a5      	str	r5, [r4, #104]	@ 0x68
 80031b6:	f00f fdc0 	bl	8012d3a <memset>
 80031ba:	4630      	mov	r0, r6
 80031bc:	f7ff ffa8 	bl	8003110 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 80031c6:	4b72      	ldr	r3, [pc, #456]	@ (8003390 <_ZN15Screen1ViewBaseC1Ev+0x218>)
 80031c8:	66e3      	str	r3, [r4, #108]	@ 0x6c
 80031ca:	f104 0aa0 	add.w	sl, r4, #160	@ 0xa0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80031ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031d2:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 80031d6:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 80031da:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
        : TextArea()
 80031de:	f104 09e8 	add.w	r9, r4, #232	@ 0xe8
 80031e2:	4650      	mov	r0, sl
 80031e4:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 80031e8:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80031ec:	f7ff ffa2 	bl	8003134 <_ZN8touchgfx8TextAreaC1Ev>
 80031f0:	4648      	mov	r0, r9
 80031f2:	f7ff ff9f 	bl	8003134 <_ZN8touchgfx8TextAreaC1Ev>
 80031f6:	f504 789a 	add.w	r8, r4, #308	@ 0x134
        : TextAreaWithWildcardBase(), wc1(0)
 80031fa:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <_ZN15Screen1ViewBaseC1Ev+0x21c>)
 80031fc:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8003200:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8003204:	4640      	mov	r0, r8
 8003206:	f7ff ff95 	bl	8003134 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 800320a:	4b63      	ldr	r3, [pc, #396]	@ (8003398 <_ZN15Screen1ViewBaseC1Ev+0x220>)
 800320c:	e9c4 3464 	strd	r3, r4, [r4, #400]	@ 0x190
 8003210:	4b62      	ldr	r3, [pc, #392]	@ (800339c <_ZN15Screen1ViewBaseC1Ev+0x224>)
 8003212:	e9c4 3566 	strd	r3, r5, [r4, #408]	@ 0x198
    __background.setPosition(0, 0, 240, 320);
 8003216:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800321a:	462a      	mov	r2, r5
 800321c:	4658      	mov	r0, fp
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4629      	mov	r1, r5
 8003222:	23f0      	movs	r3, #240	@ 0xf0
 8003224:	f7ff fc2a 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003228:	1d27      	adds	r7, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800322a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800322e:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003230:	4659      	mov	r1, fp
 8003232:	4638      	mov	r0, r7
 8003234:	f005 ff52 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 199);
 8003238:	4630      	mov	r0, r6
 800323a:	22c7      	movs	r2, #199	@ 0xc7
 800323c:	2114      	movs	r1, #20
 800323e:	f7ff ff59 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
 8003242:	f04f 0b03 	mov.w	fp, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 8003246:	aa08      	add	r2, sp, #32
 8003248:	4630      	mov	r0, r6
 800324a:	a907      	add	r1, sp, #28
 800324c:	f8ad b01c 	strh.w	fp, [sp, #28]
 8003250:	f8ad b020 	strh.w	fp, [sp, #32]
 8003254:	f007 fcae 	bl	800abb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8003258:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800325c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8003260:	4631      	mov	r1, r6
 8003262:	4638      	mov	r0, r7
 8003264:	f005 ff3a 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(53, 103);
 8003268:	2267      	movs	r2, #103	@ 0x67
 800326a:	4650      	mov	r0, sl
 800326c:	2135      	movs	r1, #53	@ 0x35
 800326e:	f7ff ff41 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8003272:	ae02      	add	r6, sp, #8
        color = newColor;
 8003274:	4b4a      	ldr	r3, [pc, #296]	@ (80033a0 <_ZN15Screen1ViewBaseC1Ev+0x228>)
 8003276:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
        boundingArea = calculateBoundingArea();
 800327a:	4651      	mov	r1, sl
 800327c:	4630      	mov	r0, r6
        linespace = space;
 800327e:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
        boundingArea = calculateBoundingArea();
 8003282:	f007 f991 	bl	800a5a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003286:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800328a:	f104 03dc 	add.w	r3, r4, #220	@ 0xdc
 800328e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003292:	4b44      	ldr	r3, [pc, #272]	@ (80033a4 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8003294:	9308      	str	r3, [sp, #32]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3G8C));
 8003296:	4650      	mov	r0, sl
 8003298:	f04f 030a 	mov.w	r3, #10
 800329c:	a908      	add	r1, sp, #32
 800329e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80032a2:	f007 fc29 	bl	800aaf8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80032a6:	4651      	mov	r1, sl
 80032a8:	4638      	mov	r0, r7
 80032aa:	f005 ff17 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    highestScore.setPosition(0, 139, 240, 42);
 80032ae:	232a      	movs	r3, #42	@ 0x2a
 80032b0:	228b      	movs	r2, #139	@ 0x8b
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4629      	mov	r1, r5
 80032b6:	23f0      	movs	r3, #240	@ 0xf0
 80032b8:	4648      	mov	r0, r9
 80032ba:	f7ff fbdf 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80032be:	4b3a      	ldr	r3, [pc, #232]	@ (80033a8 <_ZN15Screen1ViewBaseC1Ev+0x230>)
 80032c0:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
        boundingArea = calculateBoundingArea();
 80032c4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
        linespace = space;
 80032c8:	f8a4 511c 	strh.w	r5, [r4, #284]	@ 0x11c
        boundingArea = calculateBoundingArea();
 80032cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032d0:	4649      	mov	r1, r9
 80032d2:	4630      	mov	r0, r6
 80032d4:	4798      	blx	r3
 80032d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80032da:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 80032de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80032e2:	4b32      	ldr	r3, [pc, #200]	@ (80033ac <_ZN15Screen1ViewBaseC1Ev+0x234>)
 80032e4:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(highestScoreBuffer, HIGHESTSCORE_SIZE, "%s", touchgfx::TypedText(T_HSCORET).getText());
 80032e6:	f504 7abe 	add.w	sl, r4, #380	@ 0x17c
 80032ea:	b92b      	cbnz	r3, 80032f8 <_ZN15Screen1ViewBaseC1Ev+0x180>
 80032ec:	4b30      	ldr	r3, [pc, #192]	@ (80033b0 <_ZN15Screen1ViewBaseC1Ev+0x238>)
 80032ee:	4a31      	ldr	r2, [pc, #196]	@ (80033b4 <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 80032f0:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80032f2:	4831      	ldr	r0, [pc, #196]	@ (80033b8 <_ZN15Screen1ViewBaseC1Ev+0x240>)
 80032f4:	f00f fb1a 	bl	801292c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80032f8:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <_ZN15Screen1ViewBaseC1Ev+0x244>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d803      	bhi.n	8003308 <_ZN15Screen1ViewBaseC1Ev+0x190>
 8003300:	4b2f      	ldr	r3, [pc, #188]	@ (80033c0 <_ZN15Screen1ViewBaseC1Ev+0x248>)
 8003302:	4a2c      	ldr	r2, [pc, #176]	@ (80033b4 <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8003304:	2161      	movs	r1, #97	@ 0x61
 8003306:	e7f4      	b.n	80032f2 <_ZN15Screen1ViewBaseC1Ev+0x17a>
        return texts->getText(typedTextId);
 8003308:	4b2e      	ldr	r3, [pc, #184]	@ (80033c4 <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 800330a:	4659      	mov	r1, fp
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	f000 fc1f 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 8003312:	4a2d      	ldr	r2, [pc, #180]	@ (80033c8 <_ZN15Screen1ViewBaseC1Ev+0x250>)
 8003314:	4603      	mov	r3, r0
 8003316:	210a      	movs	r1, #10
 8003318:	4650      	mov	r0, sl
 800331a:	f00c fba1 	bl	800fa60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 800331e:	4b21      	ldr	r3, [pc, #132]	@ (80033a4 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8003320:	9308      	str	r3, [sp, #32]
    highestScore.setTypedText(touchgfx::TypedText(T_HSCORE));
 8003322:	a908      	add	r1, sp, #32
 8003324:	2309      	movs	r3, #9
 8003326:	4648      	mov	r0, r9
        wc1 = value;
 8003328:	f8c4 a130 	str.w	sl, [r4, #304]	@ 0x130
 800332c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8003330:	f007 fbe2 	bl	800aaf8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003334:	4649      	mov	r1, r9
 8003336:	4638      	mov	r0, r7
 8003338:	f005 fed0 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(7, 14);
 800333c:	220e      	movs	r2, #14
 800333e:	4640      	mov	r0, r8
 8003340:	2107      	movs	r1, #7
 8003342:	f7ff fed7 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003346:	4b21      	ldr	r3, [pc, #132]	@ (80033cc <_ZN15Screen1ViewBaseC1Ev+0x254>)
 8003348:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
 800334c:	4641      	mov	r1, r8
 800334e:	4630      	mov	r0, r6
        linespace = space;
 8003350:	f8a4 5168 	strh.w	r5, [r4, #360]	@ 0x168
        boundingArea = calculateBoundingArea();
 8003354:	f007 f928 	bl	800a5a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003358:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800335c:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 8003360:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003364:	4b0f      	ldr	r3, [pc, #60]	@ (80033a4 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8003366:	9308      	str	r3, [sp, #32]
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MXSW));
 8003368:	a908      	add	r1, sp, #32
 800336a:	2302      	movs	r3, #2
 800336c:	4640      	mov	r0, r8
 800336e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8003372:	f007 fbc1 	bl	800aaf8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003376:	4638      	mov	r0, r7
 8003378:	4641      	mov	r1, r8
 800337a:	f005 feaf 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800337e:	4620      	mov	r0, r4
 8003380:	b00b      	add	sp, #44	@ 0x2c
 8003382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	08014df4 	.word	0x08014df4
 800338c:	08015624 	.word	0x08015624
 8003390:	0801568c 	.word	0x0801568c
 8003394:	08014d4c 	.word	0x08014d4c
 8003398:	08014ddc 	.word	0x08014ddc
 800339c:	080030d1 	.word	0x080030d1
 80033a0:	fff00a0a 	.word	0xfff00a0a
 80033a4:	08014b2c 	.word	0x08014b2c
 80033a8:	fffc1414 	.word	0xfffc1414
 80033ac:	20015480 	.word	0x20015480
 80033b0:	0801445e 	.word	0x0801445e
 80033b4:	08014560 	.word	0x08014560
 80033b8:	080144db 	.word	0x080144db
 80033bc:	20015484 	.word	0x20015484
 80033c0:	08014522 	.word	0x08014522
 80033c4:	2001548c 	.word	0x2001548c
 80033c8:	080145ab 	.word	0x080145ab
 80033cc:	fffce90f 	.word	0xfffce90f

080033d0 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80033d0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80033d2:	4770      	bx	lr

080033d4 <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 80033d4:	4770      	bx	lr

080033d6 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 80033d6:	4770      	bx	lr

080033d8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80033d8:	4770      	bx	lr

080033da <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 80033da:	4770      	bx	lr

080033dc <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 80033dc:	4770      	bx	lr

080033de <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80033de:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80033e0:	68c2      	ldr	r2, [r0, #12]
 80033e2:	6844      	ldr	r4, [r0, #4]
 80033e4:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 80033e6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80033e8:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80033ec:	07d2      	lsls	r2, r2, #31
 80033ee:	bf48      	it	mi
 80033f0:	5962      	ldrmi	r2, [r4, r5]
 80033f2:	689b      	ldr	r3, [r3, #8]
    }
 80033f4:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80033f6:	bf48      	it	mi
 80033f8:	58d3      	ldrmi	r3, [r2, r3]
 80033fa:	4718      	bx	r3

080033fc <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 80033fc:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80033fe:	6840      	ldr	r0, [r0, #4]
 8003400:	b130      	cbz	r0, 8003410 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	b91a      	cbnz	r2, 800340e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8003406:	68d8      	ldr	r0, [r3, #12]
 8003408:	f000 0001 	and.w	r0, r0, #1
 800340c:	4770      	bx	lr
 800340e:	2001      	movs	r0, #1
    }
 8003410:	4770      	bx	lr

08003412 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003412:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8003416:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 800341a:	4770      	bx	lr

0800341c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 800341c:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 800341e:	3038      	adds	r0, #56	@ 0x38
 8003420:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8003424:	b113      	cbz	r3, 800342c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8003426:	3136      	adds	r1, #54	@ 0x36
 8003428:	f007 bd92 	b.w	800af50 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800342c:	3134      	adds	r1, #52	@ 0x34
 800342e:	e7fb      	b.n	8003428 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08003430 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8003430:	b510      	push	{r4, lr}
 8003432:	2164      	movs	r1, #100	@ 0x64
 8003434:	4604      	mov	r4, r0
 8003436:	f00f fa4b 	bl	80128d0 <_ZdlPvj>
 800343a:	4620      	mov	r0, r4
 800343c:	bd10      	pop	{r4, pc}

0800343e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800343e:	b510      	push	{r4, lr}
 8003440:	2110      	movs	r1, #16
 8003442:	4604      	mov	r4, r0
 8003444:	f00f fa44 	bl	80128d0 <_ZdlPvj>
 8003448:	4620      	mov	r0, r4
 800344a:	bd10      	pop	{r4, pc}

0800344c <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 800344c:	b510      	push	{r4, lr}
}
 800344e:	f44f 710a 	mov.w	r1, #552	@ 0x228
Screen2ViewBase::~Screen2ViewBase()
 8003452:	4604      	mov	r4, r0
}
 8003454:	f00f fa3c 	bl	80128d0 <_ZdlPvj>
 8003458:	4620      	mov	r0, r4
 800345a:	bd10      	pop	{r4, pc}

0800345c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800345c:	b510      	push	{r4, lr}
 800345e:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8003460:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003462:	b150      	cbz	r0, 800347a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8003464:	6803      	ldr	r3, [r0, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4798      	blx	r3
 800346a:	b130      	cbz	r0, 800347a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 800346c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800346e:	6803      	ldr	r3, [r0, #0]
 8003470:	4621      	mov	r1, r4
 8003472:	689b      	ldr	r3, [r3, #8]
        }
    }
 8003474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8003478:	4718      	bx	r3
    }
 800347a:	bd10      	pop	{r4, pc}

0800347c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 800347c:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800347e:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8003480:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8003484:	4604      	mov	r4, r0
 8003486:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8003488:	b90b      	cbnz	r3, 800348e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 800348a:	b116      	cbz	r6, 8003492 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 800348c:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800348e:	2e00      	cmp	r6, #0
 8003490:	d0fc      	beq.n	800348c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	4620      	mov	r0, r4
 80034a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a4:	4798      	blx	r3
            invalidate();
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	4620      	mov	r0, r4
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 80034ae:	2e00      	cmp	r6, #0
 80034b0:	d0ec      	beq.n	800348c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 80034b2:	792b      	ldrb	r3, [r5, #4]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d1e9      	bne.n	800348c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	4620      	mov	r0, r4
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 80034c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 80034c4:	4718      	bx	r3

080034c6 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 80034c6:	f100 03c4 	add.w	r3, r0, #196	@ 0xc4
 80034ca:	428b      	cmp	r3, r1
{
 80034cc:	b510      	push	{r4, lr}
 80034ce:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 80034d0:	d109      	bne.n	80034e6 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80034d2:	f009 fa9f 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 80034d6:	f7ff fcc7 	bl	8002e68 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	4620      	mov	r0, r4
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 80034e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 80034e4:	4718      	bx	r3
}
 80034e6:	bd10      	pop	{r4, pc}

080034e8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 80034e8:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80034ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 80034ee:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 80034f0:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80034f2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 80034f6:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80034f8:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80034fa:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80034fc:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80034fe:	f00c fb69 	bl	800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8003502:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8003506:	4607      	mov	r7, r0
 8003508:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800350c:	4640      	mov	r0, r8
 800350e:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8003512:	f00c fb93 	bl	800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8003516:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800351a:	f3c5 054f 	ubfx	r5, r5, #1, #16
 800351e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003522:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8003526:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 800352a:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 800352e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8003532:	b212      	sxth	r2, r2
 8003534:	b209      	sxth	r1, r1
 8003536:	f7ff fddd 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	4620      	mov	r0, r4
 800353e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8003542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8003546:	4718      	bx	r3

08003548 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8003548:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 800354a:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 800354c:	4604      	mov	r4, r0
 800354e:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003550:	2100      	movs	r1, #0
 8003552:	f00f fbf2 	bl	8012d3a <memset>
 8003556:	4620      	mov	r0, r4
 8003558:	f7ff fdda 	bl	8003110 <_ZN8touchgfx6WidgetC1Ev>
 800355c:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	882b      	ldrh	r3, [r5, #0]
 8003562:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8003564:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 8003566:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8003568:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 800356c:	4629      	mov	r1, r5
 800356e:	f007 fcef 	bl	800af50 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003572:	4620      	mov	r0, r4
 8003574:	bd38      	pop	{r3, r4, r5, pc}
 8003576:	bf00      	nop
 8003578:	08015768 	.word	0x08015768

0800357c <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 800357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003580:	4604      	mov	r4, r0
 8003582:	b08d      	sub	sp, #52	@ 0x34
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8003584:	4627      	mov	r7, r4
 8003586:	2500      	movs	r5, #0
 8003588:	f00a fd8a 	bl	800e0a0 <_ZN8touchgfx6ScreenC1Ev>
 800358c:	4ba2      	ldr	r3, [pc, #648]	@ (8003818 <_ZN15Screen2ViewBaseC1Ev+0x29c>)
 800358e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003590:	f847 3b40 	str.w	r3, [r7], #64
        : Widget(), alpha(255), color(0)
 8003594:	2226      	movs	r2, #38	@ 0x26
 8003596:	4629      	mov	r1, r5
 8003598:	4638      	mov	r0, r7
 800359a:	f00f fbce 	bl	8012d3a <memset>
 800359e:	4638      	mov	r0, r7
 80035a0:	f7ff fdb6 	bl	8003110 <_ZN8touchgfx6WidgetC1Ev>
 80035a4:	4b9d      	ldr	r3, [pc, #628]	@ (800381c <_ZN15Screen2ViewBaseC1Ev+0x2a0>)
 80035a6:	6423      	str	r3, [r4, #64]	@ 0x40
 80035a8:	23ff      	movs	r3, #255	@ 0xff
 80035aa:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 80035ae:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 80035b2:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 80035b6:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80035ba:	4618      	mov	r0, r3
 80035bc:	a90a      	add	r1, sp, #40	@ 0x28
 80035be:	66a5      	str	r5, [r4, #104]	@ 0x68
 80035c0:	9303      	str	r3, [sp, #12]
 80035c2:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 80035c6:	f7ff ffbf 	bl	8003548 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80035ca:	a90a      	add	r1, sp, #40	@ 0x28
 80035cc:	4650      	mov	r0, sl
 80035ce:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 80035d2:	f7ff ffb9 	bl	8003548 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pressed(false), alpha(255), action(0)
 80035d6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80035da:	f8a4 30f0 	strh.w	r3, [r4, #240]	@ 0xf0
 80035de:	f240 1301 	movw	r3, #257	@ 0x101
 80035e2:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
        : T()
 80035e6:	4b8e      	ldr	r3, [pc, #568]	@ (8003820 <_ZN15Screen2ViewBaseC1Ev+0x2a4>)
 80035e8:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80035ec:	f104 06fc 	add.w	r6, r4, #252	@ 0xfc
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 80035f8:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 80035fc:	a90a      	add	r1, sp, #40	@ 0x28
 80035fe:	4630      	mov	r0, r6
        : x(0), y(0), width(0), height(0)
 8003600:	e9c4 5532 	strd	r5, r5, [r4, #200]	@ 0xc8
 8003604:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
          nextSibling(0),
 8003608:	e9c4 5536 	strd	r5, r5, [r4, #216]	@ 0xd8
          cachedAbsX(0),
 800360c:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
          firstChild(0)
 8003610:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
 8003614:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 8003618:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
        : TextArea()
 800361c:	f504 7894 	add.w	r8, r4, #296	@ 0x128
 8003620:	f7ff ff92 	bl	8003548 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8003624:	4631      	mov	r1, r6
 8003626:	4648      	mov	r0, r9
 8003628:	f005 fd58 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800362c:	4640      	mov	r0, r8
 800362e:	f7ff fd81 	bl	8003134 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8003632:	4b7c      	ldr	r3, [pc, #496]	@ (8003824 <_ZN15Screen2ViewBaseC1Ev+0x2a8>)
 8003634:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003638:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 800363c:	4618      	mov	r0, r3
 800363e:	f8c4 5170 	str.w	r5, [r4, #368]	@ 0x170
 8003642:	f504 7bde 	add.w	fp, r4, #444	@ 0x1bc
 8003646:	9302      	str	r3, [sp, #8]
 8003648:	f7ff fd74 	bl	8003134 <_ZN8touchgfx8TextAreaC1Ev>
 800364c:	4658      	mov	r0, fp
 800364e:	f7ff fd71 	bl	8003134 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8003652:	4b75      	ldr	r3, [pc, #468]	@ (8003828 <_ZN15Screen2ViewBaseC1Ev+0x2ac>)
 8003654:	e9c4 3486 	strd	r3, r4, [r4, #536]	@ 0x218
 8003658:	4b74      	ldr	r3, [pc, #464]	@ (800382c <_ZN15Screen2ViewBaseC1Ev+0x2b0>)
 800365a:	e9c4 3588 	strd	r3, r5, [r4, #544]	@ 0x220
    __background.setPosition(0, 0, 240, 320);
 800365e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003662:	462a      	mov	r2, r5
 8003664:	4638      	mov	r0, r7
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4629      	mov	r1, r5
 800366a:	23f0      	movs	r3, #240	@ 0xf0
 800366c:	f7ff fa06 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
 8003670:	1d26      	adds	r6, r4, #4
        color = newColor;
 8003672:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003676:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003678:	4639      	mov	r1, r7
 800367a:	4630      	mov	r0, r6
 800367c:	f005 fd2e 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 8003680:	462a      	mov	r2, r5
 8003682:	9803      	ldr	r0, [sp, #12]
 8003684:	4629      	mov	r1, r5
 8003686:	f7ff fd35 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
    track0.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 800368a:	9803      	ldr	r0, [sp, #12]
 800368c:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8003690:	a90a      	add	r1, sp, #40	@ 0x28
 8003692:	f007 fc5d 	bl	800af50 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003696:	9903      	ldr	r1, [sp, #12]
 8003698:	4630      	mov	r0, r6
 800369a:	f005 fd1f 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 52);
 800369e:	2234      	movs	r2, #52	@ 0x34
 80036a0:	4650      	mov	r0, sl
 80036a2:	4629      	mov	r1, r5
 80036a4:	f7ff fd26 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
 80036a8:	2302      	movs	r3, #2
    track1.setBitmap(touchgfx::Bitmap(BITMAP_GAMEOVER_ID));
 80036aa:	4650      	mov	r0, sl
 80036ac:	a90a      	add	r1, sp, #40	@ 0x28
 80036ae:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80036b2:	f007 fc4d 	bl	800af50 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80036b6:	4651      	mov	r1, sl
 80036b8:	4630      	mov	r0, r6
        visible = vis;
 80036ba:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 80036be:	f005 fd0d 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80036c2:	2701      	movs	r7, #1
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 80036c4:	4648      	mov	r0, r9
 80036c6:	aa0a      	add	r2, sp, #40	@ 0x28
 80036c8:	a909      	add	r1, sp, #36	@ 0x24
 80036ca:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 80036ce:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80036d2:	f7ff ff09 	bl	80034e8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 80036d6:	f504 7306 	add.w	r3, r4, #536	@ 0x218
        action = &callback;
 80036da:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
    flexButton1.setPosition(204, 282, 32, 32);
 80036de:	2320      	movs	r3, #32
 80036e0:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80036e4:	4648      	mov	r0, r9
        rect.x = x;
 80036e6:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 80036ea:	21cc      	movs	r1, #204	@ 0xcc
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	f7ff f9c5 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
 80036f2:	4649      	mov	r1, r9
 80036f4:	4630      	mov	r0, r6
 80036f6:	f005 fcf1 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    score.setPosition(100, 166, 136, 49);
 80036fa:	2331      	movs	r3, #49	@ 0x31
 80036fc:	22a6      	movs	r2, #166	@ 0xa6
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2164      	movs	r1, #100	@ 0x64
 8003702:	2388      	movs	r3, #136	@ 0x88
 8003704:	4640      	mov	r0, r8
 8003706:	f7ff f9b9 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800370a:	4b49      	ldr	r3, [pc, #292]	@ (8003830 <_ZN15Screen2ViewBaseC1Ev+0x2b4>)
 800370c:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 8003710:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
        linespace = space;
 8003714:	f8a4 515c 	strh.w	r5, [r4, #348]	@ 0x15c
        boundingArea = calculateBoundingArea();
 8003718:	f10d 0910 	add.w	r9, sp, #16
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003720:	4641      	mov	r1, r8
 8003722:	4648      	mov	r0, r9
 8003724:	4798      	blx	r3
 8003726:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800372a:	f504 73b2 	add.w	r3, r4, #356	@ 0x164
 800372e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003732:	4b40      	ldr	r3, [pc, #256]	@ (8003834 <_ZN15Screen2ViewBaseC1Ev+0x2b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SCORE_T).getText());
 8003736:	f504 7a01 	add.w	sl, r4, #516	@ 0x204
 800373a:	b92b      	cbnz	r3, 8003748 <_ZN15Screen2ViewBaseC1Ev+0x1cc>
 800373c:	4b3e      	ldr	r3, [pc, #248]	@ (8003838 <_ZN15Screen2ViewBaseC1Ev+0x2bc>)
 800373e:	4a3f      	ldr	r2, [pc, #252]	@ (800383c <_ZN15Screen2ViewBaseC1Ev+0x2c0>)
 8003740:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003742:	483f      	ldr	r0, [pc, #252]	@ (8003840 <_ZN15Screen2ViewBaseC1Ev+0x2c4>)
 8003744:	f00f f8f2 	bl	801292c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003748:	4b3e      	ldr	r3, [pc, #248]	@ (8003844 <_ZN15Screen2ViewBaseC1Ev+0x2c8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	2b05      	cmp	r3, #5
 800374e:	d803      	bhi.n	8003758 <_ZN15Screen2ViewBaseC1Ev+0x1dc>
 8003750:	4b3d      	ldr	r3, [pc, #244]	@ (8003848 <_ZN15Screen2ViewBaseC1Ev+0x2cc>)
 8003752:	4a3a      	ldr	r2, [pc, #232]	@ (800383c <_ZN15Screen2ViewBaseC1Ev+0x2c0>)
 8003754:	2161      	movs	r1, #97	@ 0x61
 8003756:	e7f4      	b.n	8003742 <_ZN15Screen2ViewBaseC1Ev+0x1c6>
        return texts->getText(typedTextId);
 8003758:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <_ZN15Screen2ViewBaseC1Ev+0x2d0>)
 800375a:	2105      	movs	r1, #5
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f000 f9f7 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 8003762:	4a3b      	ldr	r2, [pc, #236]	@ (8003850 <_ZN15Screen2ViewBaseC1Ev+0x2d4>)
 8003764:	4603      	mov	r3, r0
 8003766:	210a      	movs	r1, #10
 8003768:	4650      	mov	r0, sl
 800376a:	f00c f979 	bl	800fa60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 800376e:	2304      	movs	r3, #4
        wc1 = value;
 8003770:	f8c4 a170 	str.w	sl, [r4, #368]	@ 0x170
    score.setTypedText(touchgfx::TypedText(T_SCORE));
 8003774:	a90a      	add	r1, sp, #40	@ 0x28
 8003776:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 800385c <_ZN15Screen2ViewBaseC1Ev+0x2e0>
 800377a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800377e:	4640      	mov	r0, r8
 8003780:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8003784:	f007 f9b8 	bl	800aaf8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003788:	4641      	mov	r1, r8
 800378a:	4630      	mov	r0, r6
 800378c:	f005 fca6 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(185, 136);
 8003790:	9802      	ldr	r0, [sp, #8]
 8003792:	2288      	movs	r2, #136	@ 0x88
 8003794:	21b9      	movs	r1, #185	@ 0xb9
 8003796:	f7ff fcad 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800379a:	4b2e      	ldr	r3, [pc, #184]	@ (8003854 <_ZN15Screen2ViewBaseC1Ev+0x2d8>)
        boundingArea = calculateBoundingArea();
 800379c:	9902      	ldr	r1, [sp, #8]
        color = newColor;
 800379e:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
        boundingArea = calculateBoundingArea();
 80037a2:	4648      	mov	r0, r9
        linespace = space;
 80037a4:	f8a4 51a8 	strh.w	r5, [r4, #424]	@ 0x1a8
        boundingArea = calculateBoundingArea();
 80037a8:	f006 fefe 	bl	800a5a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80037ac:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80037b0:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 80037b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1D7L));
 80037b8:	9802      	ldr	r0, [sp, #8]
 80037ba:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80037be:	a90a      	add	r1, sp, #40	@ 0x28
 80037c0:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
 80037c4:	f007 f998 	bl	800aaf8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80037c8:	9902      	ldr	r1, [sp, #8]
 80037ca:	4630      	mov	r0, r6
 80037cc:	f005 fc86 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(191, 54);
 80037d0:	2236      	movs	r2, #54	@ 0x36
 80037d2:	4658      	mov	r0, fp
 80037d4:	21bf      	movs	r1, #191	@ 0xbf
 80037d6:	f7ff fc8d 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80037da:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <_ZN15Screen2ViewBaseC1Ev+0x2dc>)
 80037dc:	f8c4 31ec 	str.w	r3, [r4, #492]	@ 0x1ec
        boundingArea = calculateBoundingArea();
 80037e0:	4659      	mov	r1, fp
 80037e2:	4648      	mov	r0, r9
        linespace = space;
 80037e4:	f8a4 51f0 	strh.w	r5, [r4, #496]	@ 0x1f0
        boundingArea = calculateBoundingArea();
 80037e8:	f006 fede 	bl	800a5a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80037ec:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80037f0:	f504 73fc 	add.w	r3, r4, #504	@ 0x1f8
 80037f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JK4A));
 80037f8:	a90a      	add	r1, sp, #40	@ 0x28
 80037fa:	4658      	mov	r0, fp
 80037fc:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8003800:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 8003804:	f007 f978 	bl	800aaf8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003808:	4630      	mov	r0, r6
 800380a:	4659      	mov	r1, fp
 800380c:	f005 fc66 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003810:	4620      	mov	r0, r4
 8003812:	b00d      	add	sp, #52	@ 0x34
 8003814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003818:	08014ee0 	.word	0x08014ee0
 800381c:	08015624 	.word	0x08015624
 8003820:	08014e28 	.word	0x08014e28
 8003824:	08014d4c 	.word	0x08014d4c
 8003828:	08014ec8 	.word	0x08014ec8
 800382c:	080034c7 	.word	0x080034c7
 8003830:	fff50c0c 	.word	0xfff50c0c
 8003834:	20015480 	.word	0x20015480
 8003838:	0801445e 	.word	0x0801445e
 800383c:	08014560 	.word	0x08014560
 8003840:	080144db 	.word	0x080144db
 8003844:	20015484 	.word	0x20015484
 8003848:	08014522 	.word	0x08014522
 800384c:	2001548c 	.word	0x2001548c
 8003850:	080145ab 	.word	0x080145ab
 8003854:	ffb411f5 	.word	0xffb411f5
 8003858:	ff9e0ff7 	.word	0xff9e0ff7
 800385c:	08014b2c 	.word	0x08014b2c

08003860 <__tcf_0>:

touchgfx::GeneratedFont& getFont_arialbd_10_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_10_4bpp()
{
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003860:	4770      	bx	lr
	...

08003864 <_Z23getFont_arialbd_10_4bppv>:
{
 8003864:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003866:	4d18      	ldr	r5, [pc, #96]	@ (80038c8 <_Z23getFont_arialbd_10_4bppv+0x64>)
 8003868:	682c      	ldr	r4, [r5, #0]
 800386a:	f014 0401 	ands.w	r4, r4, #1
{
 800386e:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003870:	f3bf 8f5b 	dmb	ish
 8003874:	d124      	bne.n	80038c0 <_Z23getFont_arialbd_10_4bppv+0x5c>
 8003876:	4628      	mov	r0, r5
 8003878:	f00f f82c 	bl	80128d4 <__cxa_guard_acquire>
 800387c:	b300      	cbz	r0, 80038c0 <_Z23getFont_arialbd_10_4bppv+0x5c>
 800387e:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <_Z23getFont_arialbd_10_4bppv+0x68>)
 8003880:	4913      	ldr	r1, [pc, #76]	@ (80038d0 <_Z23getFont_arialbd_10_4bppv+0x6c>)
 8003882:	4814      	ldr	r0, [pc, #80]	@ (80038d4 <_Z23getFont_arialbd_10_4bppv+0x70>)
 8003884:	940a      	str	r4, [sp, #40]	@ 0x28
 8003886:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 800388a:	233f      	movs	r3, #63	@ 0x3f
 800388c:	9309      	str	r3, [sp, #36]	@ 0x24
 800388e:	4b12      	ldr	r3, [pc, #72]	@ (80038d8 <_Z23getFont_arialbd_10_4bppv+0x74>)
 8003890:	9308      	str	r3, [sp, #32]
 8003892:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <_Z23getFont_arialbd_10_4bppv+0x78>)
 8003894:	9307      	str	r3, [sp, #28]
 8003896:	2301      	movs	r3, #1
 8003898:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800389c:	9304      	str	r3, [sp, #16]
 800389e:	2304      	movs	r3, #4
 80038a0:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80038a4:	230a      	movs	r3, #10
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f240 2215 	movw	r2, #533	@ 0x215
 80038ac:	230d      	movs	r3, #13
 80038ae:	9401      	str	r4, [sp, #4]
 80038b0:	f7ff fb2c 	bl	8002f0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80038b4:	480a      	ldr	r0, [pc, #40]	@ (80038e0 <_Z23getFont_arialbd_10_4bppv+0x7c>)
 80038b6:	f00f f857 	bl	8012968 <atexit>
 80038ba:	4628      	mov	r0, r5
 80038bc:	f00f f816 	bl	80128ec <__cxa_guard_release>
    return arialbd_10_4bpp;
}
 80038c0:	4804      	ldr	r0, [pc, #16]	@ (80038d4 <_Z23getFont_arialbd_10_4bppv+0x70>)
 80038c2:	b00f      	add	sp, #60	@ 0x3c
 80038c4:	bd30      	pop	{r4, r5, pc}
 80038c6:	bf00      	nop
 80038c8:	2000461c 	.word	0x2000461c
 80038cc:	08014f10 	.word	0x08014f10
 80038d0:	08052a94 	.word	0x08052a94
 80038d4:	20004620 	.word	0x20004620
 80038d8:	0805820c 	.word	0x0805820c
 80038dc:	080584e8 	.word	0x080584e8
 80038e0:	08003861 	.word	0x08003861

080038e4 <__tcf_0>:
extern const touchgfx::FontContextualFormsTable arialbd_contextualFormsTable;
touchgfx::GeneratedFont& getFont_arialbd_20_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_20_4bpp()
{
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80038e4:	4770      	bx	lr
	...

080038e8 <_Z23getFont_arialbd_20_4bppv>:
{
 80038e8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80038ea:	4d18      	ldr	r5, [pc, #96]	@ (800394c <_Z23getFont_arialbd_20_4bppv+0x64>)
 80038ec:	682c      	ldr	r4, [r5, #0]
 80038ee:	f014 0401 	ands.w	r4, r4, #1
{
 80038f2:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80038f4:	f3bf 8f5b 	dmb	ish
 80038f8:	d125      	bne.n	8003946 <_Z23getFont_arialbd_20_4bppv+0x5e>
 80038fa:	4628      	mov	r0, r5
 80038fc:	f00e ffea 	bl	80128d4 <__cxa_guard_acquire>
 8003900:	b308      	cbz	r0, 8003946 <_Z23getFont_arialbd_20_4bppv+0x5e>
 8003902:	4b13      	ldr	r3, [pc, #76]	@ (8003950 <_Z23getFont_arialbd_20_4bppv+0x68>)
 8003904:	4913      	ldr	r1, [pc, #76]	@ (8003954 <_Z23getFont_arialbd_20_4bppv+0x6c>)
 8003906:	4814      	ldr	r0, [pc, #80]	@ (8003958 <_Z23getFont_arialbd_20_4bppv+0x70>)
 8003908:	940a      	str	r4, [sp, #40]	@ 0x28
 800390a:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 800390e:	233f      	movs	r3, #63	@ 0x3f
 8003910:	9309      	str	r3, [sp, #36]	@ 0x24
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <_Z23getFont_arialbd_20_4bppv+0x74>)
 8003914:	9308      	str	r3, [sp, #32]
 8003916:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <_Z23getFont_arialbd_20_4bppv+0x78>)
 8003918:	9307      	str	r3, [sp, #28]
 800391a:	2204      	movs	r2, #4
 800391c:	2302      	movs	r3, #2
 800391e:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8003922:	2301      	movs	r3, #1
 8003924:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8003928:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800392c:	2314      	movs	r3, #20
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f240 2215 	movw	r2, #533	@ 0x215
 8003934:	231a      	movs	r3, #26
 8003936:	f7ff fae9 	bl	8002f0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800393a:	480a      	ldr	r0, [pc, #40]	@ (8003964 <_Z23getFont_arialbd_20_4bppv+0x7c>)
 800393c:	f00f f814 	bl	8012968 <atexit>
 8003940:	4628      	mov	r0, r5
 8003942:	f00e ffd3 	bl	80128ec <__cxa_guard_release>
    return arialbd_20_4bpp;
}
 8003946:	4804      	ldr	r0, [pc, #16]	@ (8003958 <_Z23getFont_arialbd_20_4bppv+0x70>)
 8003948:	b00f      	add	sp, #60	@ 0x3c
 800394a:	bd30      	pop	{r4, r5, pc}
 800394c:	2000464c 	.word	0x2000464c
 8003950:	08014f10 	.word	0x08014f10
 8003954:	080547bc 	.word	0x080547bc
 8003958:	20004650 	.word	0x20004650
 800395c:	08058214 	.word	0x08058214
 8003960:	080584ec 	.word	0x080584ec
 8003964:	080038e5 	.word	0x080038e5

08003968 <__tcf_0>:
extern const touchgfx::FontContextualFormsTable arialbd_contextualFormsTable;
touchgfx::GeneratedFont& getFont_arialbd_40_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_40_4bpp()
{
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003968:	4770      	bx	lr
	...

0800396c <_Z23getFont_arialbd_40_4bppv>:
{
 800396c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 800396e:	4d18      	ldr	r5, [pc, #96]	@ (80039d0 <_Z23getFont_arialbd_40_4bppv+0x64>)
 8003970:	682c      	ldr	r4, [r5, #0]
 8003972:	f014 0401 	ands.w	r4, r4, #1
{
 8003976:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003978:	f3bf 8f5b 	dmb	ish
 800397c:	d125      	bne.n	80039ca <_Z23getFont_arialbd_40_4bppv+0x5e>
 800397e:	4628      	mov	r0, r5
 8003980:	f00e ffa8 	bl	80128d4 <__cxa_guard_acquire>
 8003984:	b308      	cbz	r0, 80039ca <_Z23getFont_arialbd_40_4bppv+0x5e>
 8003986:	4b13      	ldr	r3, [pc, #76]	@ (80039d4 <_Z23getFont_arialbd_40_4bppv+0x68>)
 8003988:	4913      	ldr	r1, [pc, #76]	@ (80039d8 <_Z23getFont_arialbd_40_4bppv+0x6c>)
 800398a:	4814      	ldr	r0, [pc, #80]	@ (80039dc <_Z23getFont_arialbd_40_4bppv+0x70>)
 800398c:	940a      	str	r4, [sp, #40]	@ 0x28
 800398e:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8003992:	233f      	movs	r3, #63	@ 0x3f
 8003994:	9309      	str	r3, [sp, #36]	@ 0x24
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <_Z23getFont_arialbd_40_4bppv+0x74>)
 8003998:	9308      	str	r3, [sp, #32]
 800399a:	4b12      	ldr	r3, [pc, #72]	@ (80039e4 <_Z23getFont_arialbd_40_4bppv+0x78>)
 800399c:	9307      	str	r3, [sp, #28]
 800399e:	2207      	movs	r2, #7
 80039a0:	2304      	movs	r3, #4
 80039a2:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80039a6:	2201      	movs	r2, #1
 80039a8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80039ac:	2328      	movs	r3, #40	@ 0x28
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	f240 2215 	movw	r2, #533	@ 0x215
 80039b4:	2333      	movs	r3, #51	@ 0x33
 80039b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80039ba:	f7ff faa7 	bl	8002f0c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80039be:	480a      	ldr	r0, [pc, #40]	@ (80039e8 <_Z23getFont_arialbd_40_4bppv+0x7c>)
 80039c0:	f00e ffd2 	bl	8012968 <atexit>
 80039c4:	4628      	mov	r0, r5
 80039c6:	f00e ff91 	bl	80128ec <__cxa_guard_release>
    return arialbd_40_4bpp;
}
 80039ca:	4804      	ldr	r0, [pc, #16]	@ (80039dc <_Z23getFont_arialbd_40_4bppv+0x70>)
 80039cc:	b00f      	add	sp, #60	@ 0x3c
 80039ce:	bd30      	pop	{r4, r5, pc}
 80039d0:	2000467c 	.word	0x2000467c
 80039d4:	08014f10 	.word	0x08014f10
 80039d8:	080564e4 	.word	0x080564e4
 80039dc:	20004680 	.word	0x20004680
 80039e0:	08058350 	.word	0x08058350
 80039e4:	080584f0 	.word	0x080584f0
 80039e8:	08003969 	.word	0x08003969

080039ec <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80039ec:	2000      	movs	r0, #0
 80039ee:	4770      	bx	lr

080039f0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80039f0:	2000      	movs	r0, #0
 80039f2:	4770      	bx	lr

080039f4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80039f4:	b40e      	push	{r1, r2, r3}
 80039f6:	b503      	push	{r0, r1, lr}
 80039f8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80039fa:	2100      	movs	r1, #0
{
 80039fc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003a00:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003a02:	f009 ff7b 	bl	800d8fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003a06:	b002      	add	sp, #8
 8003a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a0c:	b003      	add	sp, #12
 8003a0e:	4770      	bx	lr

08003a10 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003a10:	b40c      	push	{r2, r3}
 8003a12:	b507      	push	{r0, r1, r2, lr}
 8003a14:	ab04      	add	r3, sp, #16
 8003a16:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003a1a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003a1c:	f009 ff6e 	bl	800d8fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003a20:	b003      	add	sp, #12
 8003a22:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a26:	b002      	add	sp, #8
 8003a28:	4770      	bx	lr
	...

08003a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003a2c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003a32:	b373      	cbz	r3, 8003a92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003a34:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003a36:	b92b      	cbnz	r3, 8003a44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003a38:	4b18      	ldr	r3, [pc, #96]	@ (8003a9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003a3a:	4a19      	ldr	r2, [pc, #100]	@ (8003aa0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 8003a3c:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003a3e:	4819      	ldr	r0, [pc, #100]	@ (8003aa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003a40:	f00e ff74 	bl	801292c <__assert_func>
            return buffer[pos];
 8003a44:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003a46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003a4a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003a4c:	b30b      	cbz	r3, 8003a92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003a4e:	f00b fa5e 	bl	800ef0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003a52:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d803      	bhi.n	8003a60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003a58:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003a5a:	4a14      	ldr	r2, [pc, #80]	@ (8003aac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003a5c:	21cb      	movs	r1, #203	@ 0xcb
 8003a5e:	e7ee      	b.n	8003a3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003a60:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003a62:	1c53      	adds	r3, r2, #1
 8003a64:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003a66:	2b09      	cmp	r3, #9
 8003a68:	4619      	mov	r1, r3
 8003a6a:	bf88      	it	hi
 8003a6c:	f1a3 010a 	subhi.w	r1, r3, #10
 8003a70:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003a74:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003a78:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003a7a:	4281      	cmp	r1, r0
 8003a7c:	d109      	bne.n	8003a92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003a7e:	2b0a      	cmp	r3, #10
 8003a80:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003a84:	bf28      	it	cs
 8003a86:	2300      	movcs	r3, #0
 8003a88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003a8c:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8003a8e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003a90:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003a92:	4620      	mov	r0, r4
}
 8003a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003a98:	f00b b93c 	b.w	800ed14 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003a9c:	080145ae 	.word	0x080145ae
 8003aa0:	080145b7 	.word	0x080145b7
 8003aa4:	08014662 	.word	0x08014662
 8003aa8:	080146ac 	.word	0x080146ac
 8003aac:	080146ba 	.word	0x080146ba

08003ab0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003ab0:	f00b b8f7 	b.w	800eca2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003ab4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	ac02      	add	r4, sp, #8
 8003aba:	e884 0006 	stmia.w	r4, {r1, r2}
 8003abe:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003ac0:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ac2:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	4621      	mov	r1, r4
 8003acc:	9b08      	ldr	r3, [sp, #32]
 8003ace:	f008 fb3f 	bl	800c150 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003ad2:	b006      	add	sp, #24
 8003ad4:	bd10      	pop	{r4, pc}
	...

08003ad8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003ad8:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003ada:	bb18      	cbnz	r0, 8003b24 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003adc:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003ade:	4813      	ldr	r0, [pc, #76]	@ (8003b2c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003ae0:	681c      	ldr	r4, [r3, #0]
 8003ae2:	4913      	ldr	r1, [pc, #76]	@ (8003b30 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003ae4:	b1b4      	cbz	r4, 8003b14 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	4422      	add	r2, r4
 8003aea:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003aec:	6862      	ldr	r2, [r4, #4]
 8003aee:	4422      	add	r2, r4
 8003af0:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003af2:	68a2      	ldr	r2, [r4, #8]
 8003af4:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003afc:	f000 f838 	bl	8003b70 <_ZN17TypedTextDatabase8getFontsEv>
 8003b00:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003b02:	f000 f833 	bl	8003b6c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003b06:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003b08:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003b0c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003b10:	8018      	strh	r0, [r3, #0]
    }
}
 8003b12:	e007      	b.n	8003b24 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003b14:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003b16:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003b1a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003b1e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003b20:	2c00      	cmp	r4, #0
 8003b22:	d1e8      	bne.n	8003af6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003b24:	bd38      	pop	{r3, r4, r5, pc}
 8003b26:	bf00      	nop
 8003b28:	200046b8 	.word	0x200046b8
 8003b2c:	200046b0 	.word	0x200046b0
 8003b30:	200046ac 	.word	0x200046ac
 8003b34:	200046b4 	.word	0x200046b4
 8003b38:	20015480 	.word	0x20015480
 8003b3c:	20015488 	.word	0x20015488
 8003b40:	20015484 	.word	0x20015484
 8003b44:	08058520 	.word	0x08058520
 8003b48:	080584f4 	.word	0x080584f4
 8003b4c:	08058570 	.word	0x08058570

08003b50 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003b50:	4b04      	ldr	r3, [pc, #16]	@ (8003b64 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003b58:	4b03      	ldr	r3, [pc, #12]	@ (8003b68 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	200046ac 	.word	0x200046ac
 8003b68:	200046b0 	.word	0x200046b0

08003b6c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003b6c:	200b      	movs	r0, #11
 8003b6e:	4770      	bx	lr

08003b70 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003b70:	4800      	ldr	r0, [pc, #0]	@ (8003b74 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003b72:	4770      	bx	lr
 8003b74:	200046bc 	.word	0x200046bc

08003b78 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_arialbd_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003b78:	b510      	push	{r4, lr}
    &(getFont_arialbd_20_4bpp()),
 8003b7a:	f7ff feb5 	bl	80038e8 <_Z23getFont_arialbd_20_4bppv>
};
 8003b7e:	4c04      	ldr	r4, [pc, #16]	@ (8003b90 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003b80:	6020      	str	r0, [r4, #0]
    &(getFont_arialbd_40_4bpp()),
 8003b82:	f7ff fef3 	bl	800396c <_Z23getFont_arialbd_40_4bppv>
};
 8003b86:	6060      	str	r0, [r4, #4]
    &(getFont_arialbd_10_4bpp())
 8003b88:	f7ff fe6c 	bl	8003864 <_Z23getFont_arialbd_10_4bppv>
};
 8003b8c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003b8e:	bd10      	pop	{r4, pc}
 8003b90:	200046bc 	.word	0x200046bc

08003b94 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003b94:	4770      	bx	lr

08003b96 <_ZN19FrontendApplicationD0Ev>:
 8003b96:	b510      	push	{r4, lr}
 8003b98:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	f00e fe97 	bl	80128d0 <_ZdlPvj>
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	bd10      	pop	{r4, pc}

08003ba6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003ba6:	b510      	push	{r4, lr}
 8003ba8:	4604      	mov	r4, r0
    {
        model.tick();
 8003baa:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8003bae:	f000 f816 	bl	8003bde <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003bb2:	4620      	mov	r0, r4
    }
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003bb8:	f008 bfd6 	b.w	800cb68 <_ZN8touchgfx11Application15handleTickEventEv>

08003bbc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003bc0:	f7ff f912 	bl	8002de8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003bc4:	4b01      	ldr	r3, [pc, #4]	@ (8003bcc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8003bc6:	6023      	str	r3, [r4, #0]
{

}
 8003bc8:	4620      	mov	r0, r4
 8003bca:	bd10      	pop	{r4, pc}
 8003bcc:	08015370 	.word	0x08015370

08003bd0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95), modelListener(0)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	215f      	movs	r1, #95	@ 0x5f
 8003bd4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8003bd8:	6002      	str	r2, [r0, #0]
 8003bda:	8081      	strh	r1, [r0, #4]
{
	modelTickCount = 0;
	highestScore = 0;
}
 8003bdc:	4770      	bx	lr

08003bde <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8003bde:	6803      	ldr	r3, [r0, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	6003      	str	r3, [r0, #0]
}
 8003be4:	4770      	bx	lr

08003be6 <_ZNK5Model15getHighestScoreEv>:
	return ImageX;
}

int Model::getHighestScore() const {
	return this->highestScore;
}
 8003be6:	68c0      	ldr	r0, [r0, #12]
 8003be8:	4770      	bx	lr

08003bea <_ZN5Model15setHighestScoreEi>:
void Model::setHighestScore(int score){
	if(score > highestScore) highestScore = score;
 8003bea:	68c3      	ldr	r3, [r0, #12]
 8003bec:	428b      	cmp	r3, r1
 8003bee:	bfb8      	it	lt
 8003bf0:	60c1      	strlt	r1, [r0, #12]
}
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003bf4:	4770      	bx	lr

08003bf6 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003bf6:	3804      	subs	r0, #4
 8003bf8:	4770      	bx	lr

08003bfa <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003bfa:	4770      	bx	lr

08003bfc <_ZN16Screen1PresenterD0Ev>:
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	2110      	movs	r1, #16
 8003c00:	4604      	mov	r4, r0
 8003c02:	f00e fe65 	bl	80128d0 <_ZdlPvj>
 8003c06:	4620      	mov	r0, r4
 8003c08:	bd10      	pop	{r4, pc}

08003c0a <_ZThn4_N16Screen1PresenterD0Ev>:
 8003c0a:	f1a0 0004 	sub.w	r0, r0, #4
 8003c0e:	e7f5      	b.n	8003bfc <_ZN16Screen1PresenterD0Ev>

08003c10 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003c10:	2200      	movs	r2, #0
 8003c12:	6082      	str	r2, [r0, #8]
    : view(v)
 8003c14:	4a02      	ldr	r2, [pc, #8]	@ (8003c20 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8003c16:	6002      	str	r2, [r0, #0]
 8003c18:	3218      	adds	r2, #24
 8003c1a:	6042      	str	r2, [r0, #4]
 8003c1c:	60c1      	str	r1, [r0, #12]
}
 8003c1e:	4770      	bx	lr
 8003c20:	080153c4 	.word	0x080153c4

08003c24 <_ZNK16Screen1Presenter15getHighestScoreEv>:
{

}

int Screen1Presenter::getHighestScore() const{
	return model->getHighestScore();
 8003c24:	6880      	ldr	r0, [r0, #8]
 8003c26:	f7ff bfde 	b.w	8003be6 <_ZNK5Model15getHighestScoreEv>

08003c2a <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003c2a:	4770      	bx	lr

08003c2c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	4b03      	ldr	r3, [pc, #12]	@ (8003c3c <_ZN11Screen1ViewD1Ev+0x10>)
 8003c30:	6003      	str	r3, [r0, #0]
 8003c32:	4604      	mov	r4, r0
 8003c34:	f7ff f9df 	bl	8002ff6 <_ZN15Screen1ViewBaseD1Ev>
 8003c38:	4620      	mov	r0, r4
 8003c3a:	bd10      	pop	{r4, pc}
 8003c3c:	080153ec 	.word	0x080153ec

08003c40 <_ZN11Screen1ViewD0Ev>:
 8003c40:	b510      	push	{r4, lr}
 8003c42:	4604      	mov	r4, r0
 8003c44:	f7ff fff2 	bl	8003c2c <_ZN11Screen1ViewD1Ev>
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8003c4e:	f00e fe3f 	bl	80128d0 <_ZdlPvj>
 8003c52:	4620      	mov	r0, r4
 8003c54:	bd10      	pop	{r4, pc}
	...

08003c58 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	f7ff fa8c 	bl	8003178 <_ZN15Screen1ViewBaseC1Ev>
 8003c60:	4b03      	ldr	r3, [pc, #12]	@ (8003c70 <_ZN11Screen1ViewC1Ev+0x18>)
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
}
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	bf00      	nop
 8003c70:	080153ec 	.word	0x080153ec

08003c74 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003c74:	f7ff b9c0 	b.w	8002ff8 <_ZN15Screen1ViewBase11setupScreenEv>

08003c78 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 8003c78:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
 8003c7c:	3301      	adds	r3, #1
{
 8003c7e:	b510      	push	{r4, lr}
 8003c80:	4604      	mov	r4, r0
	tickCounter += 1;
 8003c82:	f8c0 31a0 	str.w	r3, [r0, #416]	@ 0x1a0
	Unicode::snprintf(highestScoreBuffer, HIGHESTSCORE_SIZE, "%d", presenter->getHighestScore());
 8003c86:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003c88:	f7ff ffcc 	bl	8003c24 <_ZNK16Screen1Presenter15getHighestScoreEv>
 8003c8c:	4a06      	ldr	r2, [pc, #24]	@ (8003ca8 <_ZN11Screen1View15handleTickEventEv+0x30>)
 8003c8e:	4603      	mov	r3, r0
 8003c90:	210a      	movs	r1, #10
 8003c92:	f504 70be 	add.w	r0, r4, #380	@ 0x17c
 8003c96:	f00b fee3 	bl	800fa60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	highestScore.invalidate();
 8003c9a:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
}
 8003c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	highestScore.invalidate();
 8003ca2:	f009 bf55 	b.w	800db50 <_ZNK8touchgfx8Drawable10invalidateEv>
 8003ca6:	bf00      	nop
 8003ca8:	0801478c 	.word	0x0801478c

08003cac <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8003cac:	4770      	bx	lr

08003cae <_ZThn4_N16Screen2PresenterD1Ev>:
 8003cae:	3804      	subs	r0, #4
 8003cb0:	4770      	bx	lr

08003cb2 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003cb2:	4770      	bx	lr

08003cb4 <_ZN16Screen2PresenterD0Ev>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	2110      	movs	r1, #16
 8003cb8:	4604      	mov	r4, r0
 8003cba:	f00e fe09 	bl	80128d0 <_ZdlPvj>
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	bd10      	pop	{r4, pc}

08003cc2 <_ZThn4_N16Screen2PresenterD0Ev>:
 8003cc2:	f1a0 0004 	sub.w	r0, r0, #4
 8003cc6:	e7f5      	b.n	8003cb4 <_ZN16Screen2PresenterD0Ev>

08003cc8 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003cc8:	2200      	movs	r2, #0
 8003cca:	6082      	str	r2, [r0, #8]
    : view(v)
 8003ccc:	4a02      	ldr	r2, [pc, #8]	@ (8003cd8 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003cce:	6002      	str	r2, [r0, #0]
 8003cd0:	3218      	adds	r2, #24
 8003cd2:	6042      	str	r2, [r0, #4]
 8003cd4:	60c1      	str	r1, [r0, #12]
}
 8003cd6:	4770      	bx	lr
 8003cd8:	08015420 	.word	0x08015420

08003cdc <_ZN16Screen2Presenter15setHighestScoreEi>:

int Screen2Presenter::getHighestScore() const{
	return model->getHighestScore();
}
void Screen2Presenter::setHighestScore(int score){
	model->setHighestScore(score);
 8003cdc:	6880      	ldr	r0, [r0, #8]
 8003cde:	f7ff bf84 	b.w	8003bea <_ZN5Model15setHighestScoreEi>

08003ce2 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 8003ce2:	4770      	bx	lr

08003ce4 <_ZN11Screen2View11setupScreenEv>:
{
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4604      	mov	r4, r0
	engine.init();
 8003ce8:	f500 700a 	add.w	r0, r0, #552	@ 0x228
 8003cec:	f7fc fd05 	bl	80006fa <_ZN12TetrisEngine4initEv>
	tickCount = 0;
 8003cf0:	f504 5240 	add.w	r2, r4, #12288	@ 0x3000
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
	track1.invalidate();
 8003cfa:	f104 0098 	add.w	r0, r4, #152	@ 0x98
        visible = vis;
 8003cfe:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
}
 8003d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	track1.invalidate();
 8003d06:	f009 bf23 	b.w	800db50 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08003d0c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <_ZN11Screen2ViewD1Ev+0x3c>)
 8003d0e:	b570      	push	{r4, r5, r6, lr}
 8003d10:	4605      	mov	r5, r0
 8003d12:	6003      	str	r3, [r0, #0]
 8003d14:	f243 1494 	movw	r4, #12692	@ 0x3194
 8003d18:	f642 6654 	movw	r6, #11860	@ 0x2e54
 8003d1c:	42b4      	cmp	r4, r6
 8003d1e:	d10d      	bne.n	8003d3c <_ZN11Screen2ViewD1Ev+0x30>
 8003d20:	f240 56b4 	movw	r6, #1460	@ 0x5b4
 8003d24:	592b      	ldr	r3, [r5, r4]
 8003d26:	1928      	adds	r0, r5, r4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3c34      	subs	r4, #52	@ 0x34
 8003d2c:	4798      	blx	r3
 8003d2e:	42b4      	cmp	r4, r6
 8003d30:	d1f8      	bne.n	8003d24 <_ZN11Screen2ViewD1Ev+0x18>
 8003d32:	4628      	mov	r0, r5
 8003d34:	f7ff fb51 	bl	80033da <_ZN15Screen2ViewBaseD1Ev>
 8003d38:	4628      	mov	r0, r5
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	592b      	ldr	r3, [r5, r4]
 8003d3e:	1928      	adds	r0, r5, r4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4798      	blx	r3
 8003d44:	3c34      	subs	r4, #52	@ 0x34
 8003d46:	e7e9      	b.n	8003d1c <_ZN11Screen2ViewD1Ev+0x10>
 8003d48:	08015448 	.word	0x08015448

08003d4c <_ZN11Screen2ViewD0Ev>:
 8003d4c:	b510      	push	{r4, lr}
 8003d4e:	4604      	mov	r4, r0
 8003d50:	f7ff ffdc 	bl	8003d0c <_ZN11Screen2ViewD1Ev>
 8003d54:	4620      	mov	r0, r4
 8003d56:	f243 11cc 	movw	r1, #12748	@ 0x31cc
 8003d5a:	f00e fdb9 	bl	80128d0 <_ZdlPvj>
 8003d5e:	4620      	mov	r0, r4
 8003d60:	bd10      	pop	{r4, pc}
	...

08003d64 <_ZN8touchgfx3BoxC1Ev>:
        : Widget(), alpha(255), color(0)
 8003d64:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <_ZN8touchgfx3BoxC1Ev+0x28>)
 8003d66:	6002      	str	r2, [r0, #0]
          touchable(false),
 8003d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	8481      	strh	r1, [r0, #36]	@ 0x24
 8003d70:	21ff      	movs	r1, #255	@ 0xff
 8003d72:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003d76:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003d7a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003d7e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003d82:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : color(col)
 8003d86:	6282      	str	r2, [r0, #40]	@ 0x28
    }
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	08015624 	.word	0x08015624

08003d90 <_ZN11Screen2View8drawGridEv>:
        drawGrid();
        drawPreview();
    }
}

void Screen2View::drawGrid(){
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	void getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY);
    const Grid& getGrid() const { return grid; }
    const BlockMatrix& getCurrentBlock() const { return currBlock; }
    int getBlockSize() const { return blockSize; }
    int getCurrX() const { return currX; }
 8003d94:	f8d0 8588 	ldr.w	r8, [r0, #1416]	@ 0x588
    int getCurrY() const { return currY; }
 8003d98:	f8d0 758c 	ldr.w	r7, [r0, #1420]	@ 0x58c
 8003d9c:	b089      	sub	sp, #36	@ 0x24
 8003d9e:	4604      	mov	r4, r0
    const BlockMatrix& getCurrentBlock() const { return currBlock; }
 8003da0:	f500 61a9 	add.w	r1, r0, #1352	@ 0x548
    const auto& block = engine.getCurrentBlock();
    int currX = engine.getCurrX();
    int currY = engine.getCurrY();

    //Vẽ lưới
    for (int y = 0; y < GRID_HEIGHT; ++y) {
 8003da4:	f500 7a09 	add.w	sl, r0, #548	@ 0x224
    int getCurrY() const { return currY; }
 8003da8:	2600      	movs	r6, #0
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003daa:	19a5      	adds	r5, r4, r6
void Screen2View::drawGrid(){
 8003dac:	46d3      	mov	fp, sl
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003dae:	f04f 0900 	mov.w	r9, #0
            colBoxes[y][x].setColor(grid[y][x] ? Color::getColorFromRGB(255, 0, 255)
 8003db2:	f85b 2f04 	ldr.w	r2, [fp, #4]!
 8003db6:	9103      	str	r1, [sp, #12]
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	f04f 427f 	moveq.w	r2, #4278190080	@ 0xff000000
 8003dc0:	f46f 427f 	mvnne.w	r2, #65280	@ 0xff00
        color = newColor;
 8003dc4:	f8c5 2610 	str.w	r2, [r5, #1552]	@ 0x610
                                               : Color::getColorFromRGB(0, 0, 0));
            colBoxes[y][x].invalidate();
 8003dc8:	f8d5 25e8 	ldr.w	r2, [r5, #1512]	@ 0x5e8
 8003dcc:	f505 60bd 	add.w	r0, r5, #1512	@ 0x5e8
 8003dd0:	6952      	ldr	r2, [r2, #20]
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003dd2:	f109 0901 	add.w	r9, r9, #1
            colBoxes[y][x].invalidate();
 8003dd6:	4790      	blx	r2
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003dd8:	f1b9 0f0a 	cmp.w	r9, #10
 8003ddc:	9903      	ldr	r1, [sp, #12]
 8003dde:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8003de2:	f642 03a0 	movw	r3, #10400	@ 0x28a0
 8003de6:	d1e4      	bne.n	8003db2 <_ZN11Screen2View8drawGridEv+0x22>
    for (int y = 0; y < GRID_HEIGHT; ++y) {
 8003de8:	f506 7602 	add.w	r6, r6, #520	@ 0x208
 8003dec:	429e      	cmp	r6, r3
 8003dee:	f10a 0a28 	add.w	sl, sl, #40	@ 0x28
 8003df2:	d1da      	bne.n	8003daa <_ZN11Screen2View8drawGridEv+0x1a>
        }
    }

    // Vẽ block rơi
    int minX, maxX, minY, maxY;
    engine.getBlockBounds(block, minX, maxX, minY, maxY);
 8003df4:	ab07      	add	r3, sp, #28
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	ab06      	add	r3, sp, #24
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	aa04      	add	r2, sp, #16
 8003dfe:	ab05      	add	r3, sp, #20
 8003e00:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8003e04:	f7fc fccd 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
    for (int i = minY; i <= maxY; ++i)
 8003e08:	9e06      	ldr	r6, [sp, #24]
 8003e0a:	eb06 0907 	add.w	r9, r6, r7
 8003e0e:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 8003e12:	f506 66a9 	add.w	r6, r6, #1352	@ 0x548
 8003e16:	f04f 0a34 	mov.w	sl, #52	@ 0x34
 8003e1a:	f44f 7b02 	mov.w	fp, #520	@ 0x208
 8003e1e:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8003e22:	9a07      	ldr	r2, [sp, #28]
 8003e24:	eba9 0307 	sub.w	r3, r9, r7
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	da02      	bge.n	8003e32 <_ZN11Screen2View8drawGridEv+0xa2>
                if (gx >= 0 && gx < GRID_WIDTH && gy >= 0 && gy < GRID_HEIGHT) {
                    colBoxes[gy][gx].setColor(Color::getColorFromRGB(255, 255, 0));
                    colBoxes[gy][gx].invalidate();
                }
            }
}
 8003e2c:	b009      	add	sp, #36	@ 0x24
 8003e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int j = minX; j <= maxX; ++j)
 8003e32:	9b04      	ldr	r3, [sp, #16]
 8003e34:	fb0b f509 	mul.w	r5, fp, r9
 8003e38:	eb03 0208 	add.w	r2, r3, r8
 8003e3c:	fb0a 5502 	mla	r5, sl, r2, r5
 8003e40:	4425      	add	r5, r4
 8003e42:	9a05      	ldr	r2, [sp, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	da03      	bge.n	8003e50 <_ZN11Screen2View8drawGridEv+0xc0>
    for (int i = minY; i <= maxY; ++i)
 8003e48:	f109 0901 	add.w	r9, r9, #1
 8003e4c:	3610      	adds	r6, #16
 8003e4e:	e7e8      	b.n	8003e22 <_ZN11Screen2View8drawGridEv+0x92>
            if (block[i][j]) {
 8003e50:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8003e54:	b192      	cbz	r2, 8003e7c <_ZN11Screen2View8drawGridEv+0xec>
                if (gx >= 0 && gx < GRID_WIDTH && gy >= 0 && gy < GRID_HEIGHT) {
 8003e56:	eb08 0203 	add.w	r2, r8, r3
 8003e5a:	2a09      	cmp	r2, #9
 8003e5c:	d80e      	bhi.n	8003e7c <_ZN11Screen2View8drawGridEv+0xec>
 8003e5e:	f1b9 0f13 	cmp.w	r9, #19
 8003e62:	d80b      	bhi.n	8003e7c <_ZN11Screen2View8drawGridEv+0xec>
                    colBoxes[gy][gx].invalidate();
 8003e64:	f8d5 25e8 	ldr.w	r2, [r5, #1512]	@ 0x5e8
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	f8c5 1610 	str.w	r1, [r5, #1552]	@ 0x610
 8003e6e:	6952      	ldr	r2, [r2, #20]
 8003e70:	f505 60bd 	add.w	r0, r5, #1512	@ 0x5e8
 8003e74:	4790      	blx	r2
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
        for (int j = minX; j <= maxX; ++j)
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	3534      	adds	r5, #52	@ 0x34
 8003e80:	e7df      	b.n	8003e42 <_ZN11Screen2View8drawGridEv+0xb2>

08003e82 <_ZN11Screen2View11drawPreviewEv>:

void Screen2View::drawPreview() {
 8003e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Lấy khối tiếp theo
    TetrisEngine::BlockMatrix nextBlock;
    int nextBlockSize;
    engine.getNextBlock(nextBlock, nextBlockSize);
 8003e86:	f500 790a 	add.w	r9, r0, #552	@ 0x228
void Screen2View::drawPreview() {
 8003e8a:	b099      	sub	sp, #100	@ 0x64
 8003e8c:	4606      	mov	r6, r0
    engine.getNextBlock(nextBlock, nextBlockSize);
 8003e8e:	aa03      	add	r2, sp, #12
 8003e90:	a908      	add	r1, sp, #32
 8003e92:	4648      	mov	r0, r9
 8003e94:	f7fc fbec 	bl	8000670 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERi>
 8003e98:	2700      	movs	r7, #0
 8003e9a:	f506 583a 	add.w	r8, r6, #11904	@ 0x2e80
 8003e9e:	f108 0808 	add.w	r8, r8, #8
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003ea2:	46ba      	mov	sl, r7

    // Reset all previewBoxes to transparent state
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
 8003ea4:	eb08 0507 	add.w	r5, r8, r7
void Screen2View::drawPreview() {
 8003ea8:	2404      	movs	r4, #4
			previewBoxes[i][j].setAlpha(0);
			previewBoxes[i][j].invalidate();
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	f885 a026 	strb.w	sl, [r5, #38]	@ 0x26
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	4798      	blx	r3
		for (int j = 0; j < 4; ++j) {
 8003eb6:	3c01      	subs	r4, #1
 8003eb8:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8003ebc:	d1f5      	bne.n	8003eaa <_ZN11Screen2View11drawPreviewEv+0x28>
	for (int i = 0; i < 4; ++i) {
 8003ebe:	37d0      	adds	r7, #208	@ 0xd0
 8003ec0:	f5b7 7f50 	cmp.w	r7, #832	@ 0x340
 8003ec4:	d1ee      	bne.n	8003ea4 <_ZN11Screen2View11drawPreviewEv+0x22>
		}
	}

    // Vẽ preview block
	int minX, maxX, minY, maxY;
	engine.getBlockBounds(nextBlock, minX, maxX, minY, maxY);
 8003ec6:	ab07      	add	r3, sp, #28
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	ab06      	add	r3, sp, #24
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	4648      	mov	r0, r9
 8003ed0:	ab05      	add	r3, sp, #20
 8003ed2:	aa04      	add	r2, sp, #16
 8003ed4:	a908      	add	r1, sp, #32
 8003ed6:	f7fc fc64 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>

	for (int i = 0; i < 4; i++) {
 8003eda:	ad08      	add	r5, sp, #32
        color = newColor;
 8003edc:	f04f 0934 	mov.w	r9, #52	@ 0x34
 8003ee0:	f04f 0ad0 	mov.w	sl, #208	@ 0xd0
 8003ee4:	f642 6bb0 	movw	fp, #11952	@ 0x2eb0
    engine.getNextBlock(nextBlock, nextBlockSize);
 8003ee8:	46a8      	mov	r8, r5
		for (int j = 0; j < 4; j++) {
 8003eea:	2700      	movs	r7, #0
			if (nextBlock[i][j]) {
 8003eec:	f858 3b04 	ldr.w	r3, [r8], #4
 8003ef0:	b1fb      	cbz	r3, 8003f32 <_ZN11Screen2View11drawPreviewEv+0xb0>
				int px = j - minX;
 8003ef2:	9a04      	ldr	r2, [sp, #16]
 8003ef4:	1aba      	subs	r2, r7, r2
				int py = i - minY;
				if (px < 4 && py < 4) {
 8003ef6:	2a03      	cmp	r2, #3
 8003ef8:	dc1b      	bgt.n	8003f32 <_ZN11Screen2View11drawPreviewEv+0xb0>
				int py = i - minY;
 8003efa:	9b06      	ldr	r3, [sp, #24]
 8003efc:	1ae3      	subs	r3, r4, r3
				if (px < 4 && py < 4) {
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	dc17      	bgt.n	8003f32 <_ZN11Screen2View11drawPreviewEv+0xb0>
 8003f02:	fb09 f202 	mul.w	r2, r9, r2
 8003f06:	fb0a f303 	mul.w	r3, sl, r3
 8003f0a:	18d1      	adds	r1, r2, r3
 8003f0c:	4431      	add	r1, r6
 8003f0e:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003f12:	f841 000b 	str.w	r0, [r1, fp]
        alpha = newAlpha;
 8003f16:	f642 60ae 	movw	r0, #11950	@ 0x2eae
 8003f1a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8003f1e:	f801 c000 	strb.w	ip, [r1, r0]
					previewBoxes[py][px].setColor(Color::getColorFromRGB(0, 255, 0));
					previewBoxes[py][px].setAlpha(255);
					previewBoxes[py][px].invalidate();
 8003f22:	f642 6088 	movw	r0, #11912	@ 0x2e88
 8003f26:	4403      	add	r3, r0
 8003f28:	4413      	add	r3, r2
 8003f2a:	580a      	ldr	r2, [r1, r0]
 8003f2c:	18f0      	adds	r0, r6, r3
 8003f2e:	6952      	ldr	r2, [r2, #20]
 8003f30:	4790      	blx	r2
		for (int j = 0; j < 4; j++) {
 8003f32:	3701      	adds	r7, #1
 8003f34:	2f04      	cmp	r7, #4
 8003f36:	d1d9      	bne.n	8003eec <_ZN11Screen2View11drawPreviewEv+0x6a>
	for (int i = 0; i < 4; i++) {
 8003f38:	3401      	adds	r4, #1
 8003f3a:	2c04      	cmp	r4, #4
 8003f3c:	f105 0510 	add.w	r5, r5, #16
 8003f40:	d1d2      	bne.n	8003ee8 <_ZN11Screen2View11drawPreviewEv+0x66>
				}
			}
		}
	}
}
 8003f42:	b019      	add	sp, #100	@ 0x64
 8003f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f48 <_ZN11Screen2View15handleTickEventEv>:
    if (++tickCount % 20 == 0) {
 8003f48:	f500 5340 	add.w	r3, r0, #12288	@ 0x3000
{
 8003f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (++tickCount % 20 == 0) {
 8003f50:	f8d3 51c8 	ldr.w	r5, [r3, #456]	@ 0x1c8
 8003f54:	3501      	adds	r5, #1
 8003f56:	f8c3 51c8 	str.w	r5, [r3, #456]	@ 0x1c8
 8003f5a:	2314      	movs	r3, #20
 8003f5c:	fb95 f2f3 	sdiv	r2, r5, r3
 8003f60:	fb03 5512 	mls	r5, r3, r2, r5
{
 8003f64:	4604      	mov	r4, r0
    if (++tickCount % 20 == 0) {
 8003f66:	2d00      	cmp	r5, #0
 8003f68:	f040 809d 	bne.w	80040a6 <_ZN11Screen2View15handleTickEventEv+0x15e>
    	if(engine.isGameOver()) {
 8003f6c:	f500 760a 	add.w	r6, r0, #552	@ 0x228
 8003f70:	4630      	mov	r0, r6
 8003f72:	f7fc fd0f 	bl	8000994 <_ZN12TetrisEngine10isGameOverEv>
 8003f76:	4607      	mov	r7, r0
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d13c      	bne.n	8003ff6 <_ZN11Screen2View15handleTickEventEv+0xae>
    	if(osMessageQueueGetCount(movingQueueHandle) > 0){
 8003f7c:	4d4b      	ldr	r5, [pc, #300]	@ (80040ac <_ZN11Screen2View15handleTickEventEv+0x164>)
 8003f7e:	6828      	ldr	r0, [r5, #0]
 8003f80:	f003 f8f4 	bl	800716c <osMessageQueueGetCount>
 8003f84:	b178      	cbz	r0, 8003fa6 <_ZN11Screen2View15handleTickEventEv+0x5e>
    		osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 8003f86:	230a      	movs	r3, #10
 8003f88:	6828      	ldr	r0, [r5, #0]
 8003f8a:	463a      	mov	r2, r7
 8003f8c:	f10d 0107 	add.w	r1, sp, #7
 8003f90:	f003 f8bc 	bl	800710c <osMessageQueueGet>
    		if(res == 'L') engine.moveLeft();
 8003f94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f98:	2b52      	cmp	r3, #82	@ 0x52
 8003f9a:	d07c      	beq.n	8004096 <_ZN11Screen2View15handleTickEventEv+0x14e>
 8003f9c:	d871      	bhi.n	8004082 <_ZN11Screen2View15handleTickEventEv+0x13a>
 8003f9e:	2b44      	cmp	r3, #68	@ 0x44
 8003fa0:	d07d      	beq.n	800409e <_ZN11Screen2View15handleTickEventEv+0x156>
 8003fa2:	2b4c      	cmp	r3, #76	@ 0x4c
 8003fa4:	d073      	beq.n	800408e <_ZN11Screen2View15handleTickEventEv+0x146>
        engine.update();
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7fc fcd2 	bl	8000950 <_ZN12TetrisEngine6updateEv>
        Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", engine.getScore());
 8003fac:	f8d4 3598 	ldr.w	r3, [r4, #1432]	@ 0x598
 8003fb0:	4a3f      	ldr	r2, [pc, #252]	@ (80040b0 <_ZN11Screen2View15handleTickEventEv+0x168>)
 8003fb2:	210a      	movs	r1, #10
 8003fb4:	f504 7001 	add.w	r0, r4, #516	@ 0x204
 8003fb8:	f00b fd52 	bl	800fa60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        score.invalidate();
 8003fbc:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 8003fc0:	f009 fdc6 	bl	800db50 <_ZNK8touchgfx8Drawable10invalidateEv>
        presenter->setHighestScore(engine.getScore());
 8003fc4:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
 8003fc8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003fca:	f7ff fe87 	bl	8003cdc <_ZN16Screen2Presenter15setHighestScoreEi>
        if(engine.getTakeScore()){
 8003fce:	f894 359c 	ldrb.w	r3, [r4, #1436]	@ 0x59c
 8003fd2:	b13b      	cbz	r3, 8003fe4 <_ZN11Screen2View15handleTickEventEv+0x9c>
        	osThreadNew(DoubleBeepTask, NULL, NULL);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4837      	ldr	r0, [pc, #220]	@ (80040b4 <_ZN11Screen2View15handleTickEventEv+0x16c>)
 8003fd8:	4611      	mov	r1, r2
 8003fda:	f002 ff2e 	bl	8006e3a <osThreadNew>
    int getScore() const { return score; } 
    void setTakeScore(bool param) { takeScore = param; }
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f884 359c 	strb.w	r3, [r4, #1436]	@ 0x59c
        drawGrid();
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7ff fed3 	bl	8003d90 <_ZN11Screen2View8drawGridEv>
        drawPreview();
 8003fea:	4620      	mov	r0, r4
}
 8003fec:	b003      	add	sp, #12
 8003fee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawPreview();
 8003ff2:	f7ff bf46 	b.w	8003e82 <_ZN11Screen2View11drawPreviewEv>
        visible = vis;
 8003ff6:	46a8      	mov	r8, r5
    		for(int y = 0; y < GRID_HEIGHT; y++) {
 8003ff8:	f642 09a0 	movw	r9, #10400	@ 0x28a0
    			for(int x = 0; x < GRID_WIDTH; x++) {
 8003ffc:	192e      	adds	r6, r5, r4
 8003ffe:	2700      	movs	r7, #0
    				colBoxes[y][x].invalidate();
 8004000:	f8d6 35e8 	ldr.w	r3, [r6, #1512]	@ 0x5e8
 8004004:	f886 860d 	strb.w	r8, [r6, #1549]	@ 0x60d
 8004008:	f506 60bd 	add.w	r0, r6, #1512	@ 0x5e8
 800400c:	695b      	ldr	r3, [r3, #20]
    			for(int x = 0; x < GRID_WIDTH; x++) {
 800400e:	3701      	adds	r7, #1
    				colBoxes[y][x].invalidate();
 8004010:	4798      	blx	r3
    			for(int x = 0; x < GRID_WIDTH; x++) {
 8004012:	2f0a      	cmp	r7, #10
 8004014:	f106 0634 	add.w	r6, r6, #52	@ 0x34
 8004018:	d1f2      	bne.n	8004000 <_ZN11Screen2View15handleTickEventEv+0xb8>
    		for(int y = 0; y < GRID_HEIGHT; y++) {
 800401a:	f505 7502 	add.w	r5, r5, #520	@ 0x208
 800401e:	454d      	cmp	r5, r9
 8004020:	d1ec      	bne.n	8003ffc <_ZN11Screen2View15handleTickEventEv+0xb4>
 8004022:	2600      	movs	r6, #0
 8004024:	f504 593a 	add.w	r9, r4, #11904	@ 0x2e80
 8004028:	f109 0908 	add.w	r9, r9, #8
 800402c:	4637      	mov	r7, r6
				for (int x = 0; x < 4; x++) {
 800402e:	eb09 0506 	add.w	r5, r9, r6
 8004032:	f04f 0800 	mov.w	r8, #0
					previewBoxes[y][x].invalidate();
 8004036:	682b      	ldr	r3, [r5, #0]
 8004038:	f885 7025 	strb.w	r7, [r5, #37]	@ 0x25
 800403c:	4628      	mov	r0, r5
 800403e:	695b      	ldr	r3, [r3, #20]
				for (int x = 0; x < 4; x++) {
 8004040:	f108 0801 	add.w	r8, r8, #1
					previewBoxes[y][x].invalidate();
 8004044:	4798      	blx	r3
				for (int x = 0; x < 4; x++) {
 8004046:	f1b8 0f04 	cmp.w	r8, #4
 800404a:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 800404e:	d1f2      	bne.n	8004036 <_ZN11Screen2View15handleTickEventEv+0xee>
    		for (int y = 0; y < 4; y++) {
 8004050:	36d0      	adds	r6, #208	@ 0xd0
 8004052:	f5b6 7f50 	cmp.w	r6, #832	@ 0x340
 8004056:	d1ea      	bne.n	800402e <_ZN11Screen2View15handleTickEventEv+0xe6>
 8004058:	2301      	movs	r3, #1
    		track1.invalidate();
 800405a:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 800405e:	f884 7199 	strb.w	r7, [r4, #409]	@ 0x199
 8004062:	f884 71e1 	strb.w	r7, [r4, #481]	@ 0x1e1
 8004066:	f884 714d 	strb.w	r7, [r4, #333]	@ 0x14d
 800406a:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
 800406e:	f009 fd6f 	bl	800db50 <_ZNK8touchgfx8Drawable10invalidateEv>
    		presenter->setHighestScore(engine.getScore());
 8004072:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
 8004076:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
}
 8004078:	b003      	add	sp, #12
 800407a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    		presenter->setHighestScore(engine.getScore());
 800407e:	f7ff be2d 	b.w	8003cdc <_ZN16Screen2Presenter15setHighestScoreEi>
 8004082:	2b54      	cmp	r3, #84	@ 0x54
 8004084:	d18f      	bne.n	8003fa6 <_ZN11Screen2View15handleTickEventEv+0x5e>
    		else if(res == 'T') engine.rotate();
 8004086:	4630      	mov	r0, r6
 8004088:	f7fc fcde 	bl	8000a48 <_ZN12TetrisEngine6rotateEv>
 800408c:	e78b      	b.n	8003fa6 <_ZN11Screen2View15handleTickEventEv+0x5e>
    		if(res == 'L') engine.moveLeft();
 800408e:	4630      	mov	r0, r6
 8004090:	f7fc fc98 	bl	80009c4 <_ZN12TetrisEngine8moveLeftEv>
 8004094:	e787      	b.n	8003fa6 <_ZN11Screen2View15handleTickEventEv+0x5e>
    		else if(res == 'R') engine.moveRight();
 8004096:	4630      	mov	r0, r6
 8004098:	f7fc fca7 	bl	80009ea <_ZN12TetrisEngine9moveRightEv>
 800409c:	e783      	b.n	8003fa6 <_ZN11Screen2View15handleTickEventEv+0x5e>
    		else if(res == 'D') engine.drop();
 800409e:	4630      	mov	r0, r6
 80040a0:	f7fc fcb6 	bl	8000a10 <_ZN12TetrisEngine4dropEv>
 80040a4:	e77f      	b.n	8003fa6 <_ZN11Screen2View15handleTickEventEv+0x5e>
}
 80040a6:	b003      	add	sp, #12
 80040a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040ac:	20000114 	.word	0x20000114
 80040b0:	0801478c 	.word	0x0801478c
 80040b4:	08001231 	.word	0x08001231

080040b8 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	4604      	mov	r4, r0
 80040be:	b087      	sub	sp, #28
 80040c0:	f7ff fa5c 	bl	800357c <_ZN15Screen2ViewBaseC1Ev>
 80040c4:	f504 553a 	add.w	r5, r4, #11904	@ 0x2e80
 80040c8:	4b48      	ldr	r3, [pc, #288]	@ (80041ec <_ZN11Screen2ViewC1Ev+0x134>)
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 80040d0:	3508      	adds	r5, #8
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 80040d2:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 80041f0 <_ZN11Screen2ViewC1Ev+0x138>
 80040d6:	f7fc fb30 	bl	800073a <_ZN12TetrisEngineC1Ev>
 80040da:	f504 67bd 	add.w	r7, r4, #1512	@ 0x5e8
 80040de:	9503      	str	r5, [sp, #12]
 80040e0:	f04f 0900 	mov.w	r9, #0
 80040e4:	463e      	mov	r6, r7
 80040e6:	4630      	mov	r0, r6
 80040e8:	f7ff fe3c 	bl	8003d64 <_ZN8touchgfx3BoxC1Ev>
 80040ec:	3634      	adds	r6, #52	@ 0x34
 80040ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040f2:	f846 8c34 	str.w	r8, [r6, #-52]
 80040f6:	f846 9c08 	str.w	r9, [r6, #-8]
 80040fa:	f826 9c04 	strh.w	r9, [r6, #-4]
 80040fe:	429e      	cmp	r6, r3
 8004100:	d1f1      	bne.n	80040e6 <_ZN11Screen2ViewC1Ev+0x2e>
 8004102:	42ae      	cmp	r6, r5
 8004104:	4637      	mov	r7, r6
 8004106:	d1ed      	bne.n	80040e4 <_ZN11Screen2ViewC1Ev+0x2c>
 8004108:	f504 5647 	add.w	r6, r4, #12736	@ 0x31c0
 800410c:	3608      	adds	r6, #8
 800410e:	2700      	movs	r7, #0
 8004110:	f105 09d0 	add.w	r9, r5, #208	@ 0xd0
 8004114:	4628      	mov	r0, r5
 8004116:	f7ff fe25 	bl	8003d64 <_ZN8touchgfx3BoxC1Ev>
 800411a:	3534      	adds	r5, #52	@ 0x34
 800411c:	f845 8c34 	str.w	r8, [r5, #-52]
 8004120:	f845 7c08 	str.w	r7, [r5, #-8]
 8004124:	f825 7c04 	strh.w	r7, [r5, #-4]
 8004128:	454d      	cmp	r5, r9
 800412a:	d1f3      	bne.n	8004114 <_ZN11Screen2ViewC1Ev+0x5c>
 800412c:	42b5      	cmp	r5, r6
 800412e:	d1ef      	bne.n	8004110 <_ZN11Screen2ViewC1Ev+0x58>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 8004130:	2700      	movs	r7, #0
 8004132:	f44f 7a02 	mov.w	sl, #520	@ 0x208
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8004136:	f04f 4b7f 	mov.w	fp, #4278190080	@ 0xff000000
            colBoxes[y][x].setPosition(px, py, 16, 16);
 800413a:	013a      	lsls	r2, r7, #4
 800413c:	b212      	sxth	r2, r2
 800413e:	fb0a 4607 	mla	r6, sl, r7, r4
 8004142:	2500      	movs	r5, #0
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8004144:	f04f 0901 	mov.w	r9, #1
 8004148:	2310      	movs	r3, #16
 800414a:	f506 60bd 	add.w	r0, r6, #1512	@ 0x5e8
        borderColor = colorBorder;
 800414e:	f8c6 b614 	str.w	fp, [r6, #1556]	@ 0x614
        borderSize = size;
 8004152:	f8a6 9618 	strh.w	r9, [r6, #1560]	@ 0x618
 8004156:	b229      	sxth	r1, r5
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	9205      	str	r2, [sp, #20]
 800415c:	9004      	str	r0, [sp, #16]
 800415e:	f7fe fc8d 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
 8004162:	9804      	ldr	r0, [sp, #16]
 8004164:	f886 960d 	strb.w	r9, [r6, #1549]	@ 0x60d
 8004168:	f104 0804 	add.w	r8, r4, #4
        for (int x = 0; x < GRID_WIDTH; x++) {
 800416c:	3510      	adds	r5, #16
 800416e:	4601      	mov	r1, r0
 8004170:	b2ad      	uxth	r5, r5
 8004172:	4640      	mov	r0, r8
 8004174:	f004 ffb2 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004178:	2da0      	cmp	r5, #160	@ 0xa0
 800417a:	9a05      	ldr	r2, [sp, #20]
 800417c:	f106 0634 	add.w	r6, r6, #52	@ 0x34
 8004180:	d1e2      	bne.n	8004148 <_ZN11Screen2ViewC1Ev+0x90>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 8004182:	3701      	adds	r7, #1
 8004184:	2f14      	cmp	r7, #20
 8004186:	d1d8      	bne.n	800413a <_ZN11Screen2ViewC1Ev+0x82>
 8004188:	2700      	movs	r7, #0
 800418a:	f04f 095a 	mov.w	r9, #90	@ 0x5a
 800418e:	46ba      	mov	sl, r7
 8004190:	f04f 0b01 	mov.w	fp, #1
		for (int x = 0; x < 4; x++) {
 8004194:	9b03      	ldr	r3, [sp, #12]
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 8004196:	fa0f f289 	sxth.w	r2, r9
 800419a:	19dd      	adds	r5, r3, r7
 800419c:	26c3      	movs	r6, #195	@ 0xc3
 800419e:	2308      	movs	r3, #8
 80041a0:	f885 a026 	strb.w	sl, [r5, #38]	@ 0x26
 80041a4:	f8a5 b030 	strh.w	fp, [r5, #48]	@ 0x30
 80041a8:	b231      	sxth	r1, r6
 80041aa:	4628      	mov	r0, r5
 80041ac:	9300      	str	r3, [sp, #0]
		for (int x = 0; x < 4; x++) {
 80041ae:	3608      	adds	r6, #8
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 80041b0:	9204      	str	r2, [sp, #16]
		for (int x = 0; x < 4; x++) {
 80041b2:	b2b6      	uxth	r6, r6
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 80041b4:	f7fe fc62 	bl	8002a7c <_ZN8touchgfx8Drawable11setPositionEssss>
 80041b8:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80041bc:	4629      	mov	r1, r5
 80041be:	4640      	mov	r0, r8
 80041c0:	f004 ff8c 	bl	80090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
		for (int x = 0; x < 4; x++) {
 80041c4:	2ee3      	cmp	r6, #227	@ 0xe3
 80041c6:	9a04      	ldr	r2, [sp, #16]
 80041c8:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 80041cc:	d1e7      	bne.n	800419e <_ZN11Screen2ViewC1Ev+0xe6>
	for (int y = 0; y < 4; y++) {
 80041ce:	37d0      	adds	r7, #208	@ 0xd0
 80041d0:	f109 0908 	add.w	r9, r9, #8
 80041d4:	f5b7 7f50 	cmp.w	r7, #832	@ 0x340
 80041d8:	fa1f f989 	uxth.w	r9, r9
 80041dc:	d1da      	bne.n	8004194 <_ZN11Screen2ViewC1Ev+0xdc>
}
 80041de:	4620      	mov	r0, r4
 80041e0:	f884 a0bd 	strb.w	sl, [r4, #189]	@ 0xbd
 80041e4:	b007      	add	sp, #28
 80041e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	08015448 	.word	0x08015448
 80041f0:	08015700 	.word	0x08015700

080041f4 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80041f4:	20f0      	movs	r0, #240	@ 0xf0
 80041f6:	4770      	bx	lr

080041f8 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 80041f8:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80041fc:	4770      	bx	lr

080041fe <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 80041fe:	2029      	movs	r0, #41	@ 0x29
 8004200:	f7fc bfc6 	b.w	8001190 <LCD_IO_WriteReg>

08004204 <ili9341_DisplayOff>:
 8004204:	2028      	movs	r0, #40	@ 0x28
 8004206:	f7fc bfc3 	b.w	8001190 <LCD_IO_WriteReg>

0800420a <ili9341_Init>:
{
 800420a:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800420c:	f7fc ff94 	bl	8001138 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8004210:	20ca      	movs	r0, #202	@ 0xca
 8004212:	f7fc ffbd 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004216:	20c3      	movs	r0, #195	@ 0xc3
 8004218:	f7fc ff9e 	bl	8001158 <LCD_IO_WriteData>
 800421c:	2008      	movs	r0, #8
 800421e:	f7fc ff9b 	bl	8001158 <LCD_IO_WriteData>
 8004222:	2050      	movs	r0, #80	@ 0x50
 8004224:	f7fc ff98 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004228:	20cf      	movs	r0, #207	@ 0xcf
 800422a:	f7fc ffb1 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800422e:	2000      	movs	r0, #0
 8004230:	f7fc ff92 	bl	8001158 <LCD_IO_WriteData>
 8004234:	20c1      	movs	r0, #193	@ 0xc1
 8004236:	f7fc ff8f 	bl	8001158 <LCD_IO_WriteData>
 800423a:	2030      	movs	r0, #48	@ 0x30
 800423c:	f7fc ff8c 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004240:	20ed      	movs	r0, #237	@ 0xed
 8004242:	f7fc ffa5 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004246:	2064      	movs	r0, #100	@ 0x64
 8004248:	f7fc ff86 	bl	8001158 <LCD_IO_WriteData>
 800424c:	2003      	movs	r0, #3
 800424e:	f7fc ff83 	bl	8001158 <LCD_IO_WriteData>
 8004252:	2012      	movs	r0, #18
 8004254:	f7fc ff80 	bl	8001158 <LCD_IO_WriteData>
 8004258:	2081      	movs	r0, #129	@ 0x81
 800425a:	f7fc ff7d 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800425e:	20e8      	movs	r0, #232	@ 0xe8
 8004260:	f7fc ff96 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004264:	2085      	movs	r0, #133	@ 0x85
 8004266:	f7fc ff77 	bl	8001158 <LCD_IO_WriteData>
 800426a:	2000      	movs	r0, #0
 800426c:	f7fc ff74 	bl	8001158 <LCD_IO_WriteData>
 8004270:	2078      	movs	r0, #120	@ 0x78
 8004272:	f7fc ff71 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004276:	20cb      	movs	r0, #203	@ 0xcb
 8004278:	f7fc ff8a 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800427c:	2039      	movs	r0, #57	@ 0x39
 800427e:	f7fc ff6b 	bl	8001158 <LCD_IO_WriteData>
 8004282:	202c      	movs	r0, #44	@ 0x2c
 8004284:	f7fc ff68 	bl	8001158 <LCD_IO_WriteData>
 8004288:	2000      	movs	r0, #0
 800428a:	f7fc ff65 	bl	8001158 <LCD_IO_WriteData>
 800428e:	2034      	movs	r0, #52	@ 0x34
 8004290:	f7fc ff62 	bl	8001158 <LCD_IO_WriteData>
 8004294:	2002      	movs	r0, #2
 8004296:	f7fc ff5f 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800429a:	20f7      	movs	r0, #247	@ 0xf7
 800429c:	f7fc ff78 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80042a0:	2020      	movs	r0, #32
 80042a2:	f7fc ff59 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80042a6:	20ea      	movs	r0, #234	@ 0xea
 80042a8:	f7fc ff72 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7fc ff53 	bl	8001158 <LCD_IO_WriteData>
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7fc ff50 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80042b8:	20b1      	movs	r0, #177	@ 0xb1
 80042ba:	f7fc ff69 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80042be:	2000      	movs	r0, #0
 80042c0:	f7fc ff4a 	bl	8001158 <LCD_IO_WriteData>
 80042c4:	201b      	movs	r0, #27
 80042c6:	f7fc ff47 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80042ca:	20b6      	movs	r0, #182	@ 0xb6
 80042cc:	f7fc ff60 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80042d0:	200a      	movs	r0, #10
 80042d2:	f7fc ff41 	bl	8001158 <LCD_IO_WriteData>
 80042d6:	20a2      	movs	r0, #162	@ 0xa2
 80042d8:	f7fc ff3e 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80042dc:	20c0      	movs	r0, #192	@ 0xc0
 80042de:	f7fc ff57 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80042e2:	2010      	movs	r0, #16
 80042e4:	f7fc ff38 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80042e8:	20c1      	movs	r0, #193	@ 0xc1
 80042ea:	f7fc ff51 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80042ee:	2010      	movs	r0, #16
 80042f0:	f7fc ff32 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80042f4:	20c5      	movs	r0, #197	@ 0xc5
 80042f6:	f7fc ff4b 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80042fa:	2045      	movs	r0, #69	@ 0x45
 80042fc:	f7fc ff2c 	bl	8001158 <LCD_IO_WriteData>
 8004300:	2015      	movs	r0, #21
 8004302:	f7fc ff29 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004306:	20c7      	movs	r0, #199	@ 0xc7
 8004308:	f7fc ff42 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800430c:	2090      	movs	r0, #144	@ 0x90
 800430e:	f7fc ff23 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004312:	2036      	movs	r0, #54	@ 0x36
 8004314:	f7fc ff3c 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004318:	20c8      	movs	r0, #200	@ 0xc8
 800431a:	f7fc ff1d 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800431e:	20f2      	movs	r0, #242	@ 0xf2
 8004320:	f7fc ff36 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004324:	2000      	movs	r0, #0
 8004326:	f7fc ff17 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800432a:	20b0      	movs	r0, #176	@ 0xb0
 800432c:	f7fc ff30 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004330:	20c2      	movs	r0, #194	@ 0xc2
 8004332:	f7fc ff11 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004336:	20b6      	movs	r0, #182	@ 0xb6
 8004338:	f7fc ff2a 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800433c:	200a      	movs	r0, #10
 800433e:	f7fc ff0b 	bl	8001158 <LCD_IO_WriteData>
 8004342:	20a7      	movs	r0, #167	@ 0xa7
 8004344:	f7fc ff08 	bl	8001158 <LCD_IO_WriteData>
 8004348:	2027      	movs	r0, #39	@ 0x27
 800434a:	f7fc ff05 	bl	8001158 <LCD_IO_WriteData>
 800434e:	2004      	movs	r0, #4
 8004350:	f7fc ff02 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004354:	202a      	movs	r0, #42	@ 0x2a
 8004356:	f7fc ff1b 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800435a:	2000      	movs	r0, #0
 800435c:	f7fc fefc 	bl	8001158 <LCD_IO_WriteData>
 8004360:	2000      	movs	r0, #0
 8004362:	f7fc fef9 	bl	8001158 <LCD_IO_WriteData>
 8004366:	2000      	movs	r0, #0
 8004368:	f7fc fef6 	bl	8001158 <LCD_IO_WriteData>
 800436c:	20ef      	movs	r0, #239	@ 0xef
 800436e:	f7fc fef3 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004372:	202b      	movs	r0, #43	@ 0x2b
 8004374:	f7fc ff0c 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004378:	2000      	movs	r0, #0
 800437a:	f7fc feed 	bl	8001158 <LCD_IO_WriteData>
 800437e:	2000      	movs	r0, #0
 8004380:	f7fc feea 	bl	8001158 <LCD_IO_WriteData>
 8004384:	2001      	movs	r0, #1
 8004386:	f7fc fee7 	bl	8001158 <LCD_IO_WriteData>
 800438a:	203f      	movs	r0, #63	@ 0x3f
 800438c:	f7fc fee4 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004390:	20f6      	movs	r0, #246	@ 0xf6
 8004392:	f7fc fefd 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004396:	2001      	movs	r0, #1
 8004398:	f7fc fede 	bl	8001158 <LCD_IO_WriteData>
 800439c:	2000      	movs	r0, #0
 800439e:	f7fc fedb 	bl	8001158 <LCD_IO_WriteData>
 80043a2:	2006      	movs	r0, #6
 80043a4:	f7fc fed8 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80043a8:	202c      	movs	r0, #44	@ 0x2c
 80043aa:	f7fc fef1 	bl	8001190 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80043ae:	20c8      	movs	r0, #200	@ 0xc8
 80043b0:	f7fc ff3c 	bl	800122c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80043b4:	2026      	movs	r0, #38	@ 0x26
 80043b6:	f7fc feeb 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043ba:	2001      	movs	r0, #1
 80043bc:	f7fc fecc 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80043c0:	20e0      	movs	r0, #224	@ 0xe0
 80043c2:	f7fc fee5 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043c6:	200f      	movs	r0, #15
 80043c8:	f7fc fec6 	bl	8001158 <LCD_IO_WriteData>
 80043cc:	2029      	movs	r0, #41	@ 0x29
 80043ce:	f7fc fec3 	bl	8001158 <LCD_IO_WriteData>
 80043d2:	2024      	movs	r0, #36	@ 0x24
 80043d4:	f7fc fec0 	bl	8001158 <LCD_IO_WriteData>
 80043d8:	200c      	movs	r0, #12
 80043da:	f7fc febd 	bl	8001158 <LCD_IO_WriteData>
 80043de:	200e      	movs	r0, #14
 80043e0:	f7fc feba 	bl	8001158 <LCD_IO_WriteData>
 80043e4:	2009      	movs	r0, #9
 80043e6:	f7fc feb7 	bl	8001158 <LCD_IO_WriteData>
 80043ea:	204e      	movs	r0, #78	@ 0x4e
 80043ec:	f7fc feb4 	bl	8001158 <LCD_IO_WriteData>
 80043f0:	2078      	movs	r0, #120	@ 0x78
 80043f2:	f7fc feb1 	bl	8001158 <LCD_IO_WriteData>
 80043f6:	203c      	movs	r0, #60	@ 0x3c
 80043f8:	f7fc feae 	bl	8001158 <LCD_IO_WriteData>
 80043fc:	2009      	movs	r0, #9
 80043fe:	f7fc feab 	bl	8001158 <LCD_IO_WriteData>
 8004402:	2013      	movs	r0, #19
 8004404:	f7fc fea8 	bl	8001158 <LCD_IO_WriteData>
 8004408:	2005      	movs	r0, #5
 800440a:	f7fc fea5 	bl	8001158 <LCD_IO_WriteData>
 800440e:	2017      	movs	r0, #23
 8004410:	f7fc fea2 	bl	8001158 <LCD_IO_WriteData>
 8004414:	2011      	movs	r0, #17
 8004416:	f7fc fe9f 	bl	8001158 <LCD_IO_WriteData>
 800441a:	2000      	movs	r0, #0
 800441c:	f7fc fe9c 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004420:	20e1      	movs	r0, #225	@ 0xe1
 8004422:	f7fc feb5 	bl	8001190 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004426:	2000      	movs	r0, #0
 8004428:	f7fc fe96 	bl	8001158 <LCD_IO_WriteData>
 800442c:	2016      	movs	r0, #22
 800442e:	f7fc fe93 	bl	8001158 <LCD_IO_WriteData>
 8004432:	201b      	movs	r0, #27
 8004434:	f7fc fe90 	bl	8001158 <LCD_IO_WriteData>
 8004438:	2004      	movs	r0, #4
 800443a:	f7fc fe8d 	bl	8001158 <LCD_IO_WriteData>
 800443e:	2011      	movs	r0, #17
 8004440:	f7fc fe8a 	bl	8001158 <LCD_IO_WriteData>
 8004444:	2007      	movs	r0, #7
 8004446:	f7fc fe87 	bl	8001158 <LCD_IO_WriteData>
 800444a:	2031      	movs	r0, #49	@ 0x31
 800444c:	f7fc fe84 	bl	8001158 <LCD_IO_WriteData>
 8004450:	2033      	movs	r0, #51	@ 0x33
 8004452:	f7fc fe81 	bl	8001158 <LCD_IO_WriteData>
 8004456:	2042      	movs	r0, #66	@ 0x42
 8004458:	f7fc fe7e 	bl	8001158 <LCD_IO_WriteData>
 800445c:	2005      	movs	r0, #5
 800445e:	f7fc fe7b 	bl	8001158 <LCD_IO_WriteData>
 8004462:	200c      	movs	r0, #12
 8004464:	f7fc fe78 	bl	8001158 <LCD_IO_WriteData>
 8004468:	200a      	movs	r0, #10
 800446a:	f7fc fe75 	bl	8001158 <LCD_IO_WriteData>
 800446e:	2028      	movs	r0, #40	@ 0x28
 8004470:	f7fc fe72 	bl	8001158 <LCD_IO_WriteData>
 8004474:	202f      	movs	r0, #47	@ 0x2f
 8004476:	f7fc fe6f 	bl	8001158 <LCD_IO_WriteData>
 800447a:	200f      	movs	r0, #15
 800447c:	f7fc fe6c 	bl	8001158 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004480:	2011      	movs	r0, #17
 8004482:	f7fc fe85 	bl	8001190 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8004486:	20c8      	movs	r0, #200	@ 0xc8
 8004488:	f7fc fed0 	bl	800122c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800448c:	2029      	movs	r0, #41	@ 0x29
 800448e:	f7fc fe7f 	bl	8001190 <LCD_IO_WriteReg>
}
 8004492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8004496:	202c      	movs	r0, #44	@ 0x2c
 8004498:	f7fc be7a 	b.w	8001190 <LCD_IO_WriteReg>

0800449c <ili9341_ReadID>:
{
 800449c:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800449e:	f7fc fe4b 	bl	8001138 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80044a2:	2103      	movs	r1, #3
 80044a4:	20d3      	movs	r0, #211	@ 0xd3
 80044a6:	f7fc fe8f 	bl	80011c8 <LCD_IO_ReadData>
}
 80044aa:	b280      	uxth	r0, r0
 80044ac:	bd08      	pop	{r3, pc}

080044ae <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80044ae:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80044b0:	b2c4      	uxtb	r4, r0
 80044b2:	2202      	movs	r2, #2
 80044b4:	2103      	movs	r1, #3
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7fc fdf4 	bl	80010a4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80044bc:	200a      	movs	r0, #10
 80044be:	f7fc fe39 	bl	8001134 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80044c2:	4620      	mov	r0, r4
 80044c4:	2200      	movs	r2, #0
 80044c6:	2103      	movs	r1, #3
 80044c8:	f7fc fdec 	bl	80010a4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 80044cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 80044d0:	2002      	movs	r0, #2
 80044d2:	f7fc be2f 	b.w	8001134 <IOE_Delay>

080044d6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80044d6:	b538      	push	{r3, r4, r5, lr}
 80044d8:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80044da:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 80044dc:	f7fc fde0 	bl	80010a0 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80044e0:	2100      	movs	r1, #0
 80044e2:	4620      	mov	r0, r4
 80044e4:	f7fc fdf6 	bl	80010d4 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80044e8:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80044ea:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fc fdf1 	bl	80010d4 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80044f2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 80044f6:	b280      	uxth	r0, r0
 80044f8:	bd38      	pop	{r3, r4, r5, pc}

080044fa <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80044fa:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80044fc:	b2c4      	uxtb	r4, r0
 80044fe:	2140      	movs	r1, #64	@ 0x40
 8004500:	4620      	mov	r0, r4
 8004502:	f7fc fde7 	bl	80010d4 <IOE_Read>
  
  if(state > 0)
 8004506:	0603      	lsls	r3, r0, #24
 8004508:	d507      	bpl.n	800451a <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800450a:	214c      	movs	r1, #76	@ 0x4c
 800450c:	4620      	mov	r0, r4
 800450e:	f7fc fde1 	bl	80010d4 <IOE_Read>
 8004512:	3800      	subs	r0, #0
 8004514:	bf18      	it	ne
 8004516:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8004518:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800451a:	2201      	movs	r2, #1
 800451c:	214b      	movs	r1, #75	@ 0x4b
 800451e:	4620      	mov	r0, r4
 8004520:	f7fc fdc0 	bl	80010a4 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004524:	4620      	mov	r0, r4
 8004526:	2200      	movs	r2, #0
 8004528:	214b      	movs	r1, #75	@ 0x4b
 800452a:	f7fc fdbb 	bl	80010a4 <IOE_Write>
  uint8_t ret = 0;
 800452e:	2000      	movs	r0, #0
 8004530:	e7f2      	b.n	8004518 <stmpe811_TS_DetectTouch+0x1e>

08004532 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004532:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8004534:	2304      	movs	r3, #4
 8004536:	b2c4      	uxtb	r4, r0
{
 8004538:	460e      	mov	r6, r1
 800453a:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800453c:	21d7      	movs	r1, #215	@ 0xd7
 800453e:	eb0d 0203 	add.w	r2, sp, r3
 8004542:	4620      	mov	r0, r4
 8004544:	f7fc fde0 	bl	8001108 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8004548:	9b01      	ldr	r3, [sp, #4]
 800454a:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800454c:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800454e:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8004552:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004554:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8004556:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004558:	2201      	movs	r2, #1
 800455a:	214b      	movs	r1, #75	@ 0x4b
 800455c:	f7fc fda2 	bl	80010a4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004560:	2200      	movs	r2, #0
 8004562:	214b      	movs	r1, #75	@ 0x4b
 8004564:	4620      	mov	r0, r4
 8004566:	f7fc fd9d 	bl	80010a4 <IOE_Write>
}
 800456a:	b002      	add	sp, #8
 800456c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004570 <stmpe811_Init>:
{
 8004570:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8004572:	4a0a      	ldr	r2, [pc, #40]	@ (800459c <stmpe811_Init+0x2c>)
 8004574:	7813      	ldrb	r3, [r2, #0]
 8004576:	4298      	cmp	r0, r3
{
 8004578:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 800457a:	d00d      	beq.n	8004598 <stmpe811_Init+0x28>
 800457c:	7851      	ldrb	r1, [r2, #1]
 800457e:	4288      	cmp	r0, r1
 8004580:	d00a      	beq.n	8004598 <stmpe811_Init+0x28>
 8004582:	b10b      	cbz	r3, 8004588 <stmpe811_Init+0x18>
 8004584:	b941      	cbnz	r1, 8004598 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8004586:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 8004588:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 800458a:	f7fc fd89 	bl	80010a0 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 800458e:	4620      	mov	r0, r4
}
 8004590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8004594:	f7ff bf8b 	b.w	80044ae <stmpe811_Reset>
}
 8004598:	bd10      	pop	{r4, pc}
 800459a:	bf00      	nop
 800459c:	200046c8 	.word	0x200046c8

080045a0 <stmpe811_EnableGlobalIT>:
{
 80045a0:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80045a2:	b2c4      	uxtb	r4, r0
 80045a4:	2109      	movs	r1, #9
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7fc fd94 	bl	80010d4 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80045ac:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	4620      	mov	r0, r4
 80045b4:	2109      	movs	r1, #9
}
 80045b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80045ba:	f7fc bd73 	b.w	80010a4 <IOE_Write>

080045be <stmpe811_DisableGlobalIT>:
{
 80045be:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80045c0:	b2c4      	uxtb	r4, r0
 80045c2:	2109      	movs	r1, #9
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7fc fd85 	bl	80010d4 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80045ca:	2109      	movs	r1, #9
 80045cc:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 80045d0:	4620      	mov	r0, r4
}
 80045d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80045d6:	f7fc bd65 	b.w	80010a4 <IOE_Write>

080045da <stmpe811_EnableITSource>:
{
 80045da:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80045dc:	b2c4      	uxtb	r4, r0
{
 80045de:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80045e0:	4620      	mov	r0, r4
 80045e2:	210a      	movs	r1, #10
 80045e4:	f7fc fd76 	bl	80010d4 <IOE_Read>
  tmp |= Source; 
 80045e8:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	4620      	mov	r0, r4
 80045f0:	210a      	movs	r1, #10
}
 80045f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80045f6:	f7fc bd55 	b.w	80010a4 <IOE_Write>

080045fa <stmpe811_TS_EnableIT>:
{
 80045fa:	b510      	push	{r4, lr}
 80045fc:	4604      	mov	r4, r0
  IOE_ITConfig();
 80045fe:	f7fc fd50 	bl	80010a2 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004602:	4620      	mov	r0, r4
 8004604:	211f      	movs	r1, #31
 8004606:	f7ff ffe8 	bl	80045da <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 800460a:	4620      	mov	r0, r4
}
 800460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004610:	f7ff bfc6 	b.w	80045a0 <stmpe811_EnableGlobalIT>

08004614 <stmpe811_DisableITSource>:
{
 8004614:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004616:	b2c4      	uxtb	r4, r0
{
 8004618:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800461a:	4620      	mov	r0, r4
 800461c:	210a      	movs	r1, #10
 800461e:	f7fc fd59 	bl	80010d4 <IOE_Read>
  tmp &= ~Source; 
 8004622:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	4620      	mov	r0, r4
 800462a:	210a      	movs	r1, #10
}
 800462c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004630:	f7fc bd38 	b.w	80010a4 <IOE_Write>

08004634 <stmpe811_TS_DisableIT>:
{
 8004634:	b510      	push	{r4, lr}
 8004636:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004638:	f7ff ffc1 	bl	80045be <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800463c:	4620      	mov	r0, r4
 800463e:	211f      	movs	r1, #31
}
 8004640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004644:	f7ff bfe6 	b.w	8004614 <stmpe811_DisableITSource>

08004648 <stmpe811_ReadGITStatus>:
{
 8004648:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800464a:	b2c0      	uxtb	r0, r0
{
 800464c:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800464e:	210b      	movs	r1, #11
 8004650:	f7fc fd40 	bl	80010d4 <IOE_Read>
}
 8004654:	4020      	ands	r0, r4
 8004656:	bd10      	pop	{r4, pc}

08004658 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8004658:	211f      	movs	r1, #31
 800465a:	f7ff bff5 	b.w	8004648 <stmpe811_ReadGITStatus>

0800465e <stmpe811_ClearGlobalIT>:
{
 800465e:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8004660:	b2c0      	uxtb	r0, r0
 8004662:	210b      	movs	r1, #11
 8004664:	f7fc bd1e 	b.w	80010a4 <IOE_Write>

08004668 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8004668:	211f      	movs	r1, #31
 800466a:	f7ff bff8 	b.w	800465e <stmpe811_ClearGlobalIT>

0800466e <stmpe811_IO_EnableAF>:
{
 800466e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004670:	b2c4      	uxtb	r4, r0
{
 8004672:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004674:	4620      	mov	r0, r4
 8004676:	2117      	movs	r1, #23
 8004678:	f7fc fd2c 	bl	80010d4 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 800467c:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4620      	mov	r0, r4
 8004684:	2117      	movs	r1, #23
}
 8004686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800468a:	f7fc bd0b 	b.w	80010a4 <IOE_Write>

0800468e <stmpe811_TS_Start>:
{
 800468e:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004690:	b2c4      	uxtb	r4, r0
{
 8004692:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004694:	2104      	movs	r1, #4
 8004696:	4620      	mov	r0, r4
 8004698:	f7fc fd1c 	bl	80010d4 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800469c:	2104      	movs	r1, #4
 800469e:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80046a2:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7fc fcfd 	bl	80010a4 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80046aa:	4630      	mov	r0, r6
 80046ac:	21f0      	movs	r1, #240	@ 0xf0
 80046ae:	f7ff ffde 	bl	800466e <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80046b2:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 80046b6:	4620      	mov	r0, r4
 80046b8:	2104      	movs	r1, #4
 80046ba:	f7fc fcf3 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80046be:	2249      	movs	r2, #73	@ 0x49
 80046c0:	2120      	movs	r1, #32
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7fc fcee 	bl	80010a4 <IOE_Write>
  IOE_Delay(2); 
 80046c8:	2002      	movs	r0, #2
 80046ca:	f7fc fd33 	bl	8001134 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80046ce:	4620      	mov	r0, r4
 80046d0:	2201      	movs	r2, #1
 80046d2:	2121      	movs	r1, #33	@ 0x21
 80046d4:	f7fc fce6 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80046d8:	4620      	mov	r0, r4
 80046da:	229a      	movs	r2, #154	@ 0x9a
 80046dc:	2141      	movs	r1, #65	@ 0x41
 80046de:	f7fc fce1 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80046e2:	4620      	mov	r0, r4
 80046e4:	2201      	movs	r2, #1
 80046e6:	214a      	movs	r1, #74	@ 0x4a
 80046e8:	f7fc fcdc 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80046ec:	4620      	mov	r0, r4
 80046ee:	2201      	movs	r2, #1
 80046f0:	214b      	movs	r1, #75	@ 0x4b
 80046f2:	f7fc fcd7 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80046f6:	4620      	mov	r0, r4
 80046f8:	2200      	movs	r2, #0
 80046fa:	214b      	movs	r1, #75	@ 0x4b
 80046fc:	f7fc fcd2 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8004700:	4620      	mov	r0, r4
 8004702:	2201      	movs	r2, #1
 8004704:	2156      	movs	r1, #86	@ 0x56
 8004706:	f7fc fccd 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800470a:	4620      	mov	r0, r4
 800470c:	2201      	movs	r2, #1
 800470e:	2158      	movs	r1, #88	@ 0x58
 8004710:	f7fc fcc8 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8004714:	4620      	mov	r0, r4
 8004716:	2201      	movs	r2, #1
 8004718:	2140      	movs	r1, #64	@ 0x40
 800471a:	f7fc fcc3 	bl	80010a4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800471e:	4620      	mov	r0, r4
 8004720:	22ff      	movs	r2, #255	@ 0xff
 8004722:	210b      	movs	r1, #11
 8004724:	f7fc fcbe 	bl	80010a4 <IOE_Write>
}
 8004728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 800472c:	2002      	movs	r0, #2
 800472e:	f7fc bd01 	b.w	8001134 <IOE_Delay>
	...

08004734 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004734:	4b05      	ldr	r3, [pc, #20]	@ (800474c <SystemInit+0x18>)
 8004736:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800473a:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800473e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004742:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004746:	609a      	str	r2, [r3, #8]
#endif
}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004750:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004752:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <HAL_Init+0x30>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004762:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800476a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800476c:	2003      	movs	r0, #3
 800476e:	f000 f82f 	bl	80047d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004772:	2000      	movs	r0, #0
 8004774:	f7fc fff6 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004778:	f7fc fd8a 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800477c:	2000      	movs	r0, #0
 800477e:	bd08      	pop	{r3, pc}
 8004780:	40023c00 	.word	0x40023c00

08004784 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004784:	4a03      	ldr	r2, [pc, #12]	@ (8004794 <HAL_IncTick+0x10>)
 8004786:	4b04      	ldr	r3, [pc, #16]	@ (8004798 <HAL_IncTick+0x14>)
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	440b      	add	r3, r1
 800478e:	6013      	str	r3, [r2, #0]
}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	200046cc 	.word	0x200046cc
 8004798:	20000078 	.word	0x20000078

0800479c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800479c:	4b01      	ldr	r3, [pc, #4]	@ (80047a4 <HAL_GetTick+0x8>)
 800479e:	6818      	ldr	r0, [r3, #0]
}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	200046cc 	.word	0x200046cc

080047a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80047ac:	f7ff fff6 	bl	800479c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80047b2:	bf1c      	itt	ne
 80047b4:	4b05      	ldrne	r3, [pc, #20]	@ (80047cc <HAL_Delay+0x24>)
 80047b6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80047b8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80047ba:	bf18      	it	ne
 80047bc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047be:	f7ff ffed 	bl	800479c <HAL_GetTick>
 80047c2:	1b43      	subs	r3, r0, r5
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	d3fa      	bcc.n	80047be <HAL_Delay+0x16>
  {
  }
}
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	bf00      	nop
 80047cc:	20000078 	.word	0x20000078

080047d0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047d0:	4907      	ldr	r1, [pc, #28]	@ (80047f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80047d2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047da:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047e0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80047ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80047ee:	4770      	bx	lr
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047f4:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047f6:	b530      	push	{r4, r5, lr}
 80047f8:	68dc      	ldr	r4, [r3, #12]
 80047fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004802:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004804:	2b04      	cmp	r3, #4
 8004806:	bf28      	it	cs
 8004808:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800480a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800480c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004810:	bf8c      	ite	hi
 8004812:	3c03      	subhi	r4, #3
 8004814:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004816:	fa05 f303 	lsl.w	r3, r5, r3
 800481a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800481e:	40a5      	lsls	r5, r4
 8004820:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004824:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8004826:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004828:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482c:	bfac      	ite	ge
 800482e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004832:	4a08      	ldrlt	r2, [pc, #32]	@ (8004854 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004838:	bfb8      	it	lt
 800483a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483e:	b2db      	uxtb	r3, r3
 8004840:	bfaa      	itet	ge
 8004842:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004846:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004848:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800484c:	bd30      	pop	{r4, r5, pc}
 800484e:	bf00      	nop
 8004850:	e000ed00 	.word	0xe000ed00
 8004854:	e000ed14 	.word	0xe000ed14

08004858 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004858:	2800      	cmp	r0, #0
 800485a:	db07      	blt.n	800486c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485c:	0941      	lsrs	r1, r0, #5
 800485e:	4a04      	ldr	r2, [pc, #16]	@ (8004870 <HAL_NVIC_EnableIRQ+0x18>)
 8004860:	f000 001f 	and.w	r0, r0, #31
 8004864:	2301      	movs	r3, #1
 8004866:	4083      	lsls	r3, r0
 8004868:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e100 	.word	0xe000e100

08004874 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004874:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004876:	4604      	mov	r4, r0
 8004878:	b150      	cbz	r0, 8004890 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800487a:	7943      	ldrb	r3, [r0, #5]
 800487c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004880:	b913      	cbnz	r3, 8004888 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004882:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004884:	f7fc fd24 	bl	80012d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004888:	2301      	movs	r3, #1
 800488a:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800488c:	2000      	movs	r0, #0
}
 800488e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004890:	2001      	movs	r0, #1
 8004892:	e7fc      	b.n	800488e <HAL_CRC_Init+0x1a>

08004894 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004894:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004896:	4604      	mov	r4, r0
 8004898:	b320      	cbz	r0, 80048e4 <HAL_DMA2D_Init+0x50>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800489a:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800489e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80048a2:	b91b      	cbnz	r3, 80048ac <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80048a4:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80048a8:	f7fc fd2a 	bl	8001300 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048ac:	2302      	movs	r3, #2
 80048ae:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	6861      	ldr	r1, [r4, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80048c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048c2:	68a1      	ldr	r1, [r4, #8]
 80048c4:	f022 0207 	bic.w	r2, r2, #7
 80048c8:	430a      	orrs	r2, r1
 80048ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80048cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ce:	68e1      	ldr	r1, [r4, #12]
 80048d0:	f36f 020d 	bfc	r2, #0, #14
 80048d4:	430a      	orrs	r2, r1
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80048d8:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80048da:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80048dc:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80048de:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 80048e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80048e4:	2001      	movs	r0, #1
 80048e6:	e7fc      	b.n	80048e2 <HAL_DMA2D_Init+0x4e>

080048e8 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80048e8:	4770      	bx	lr

080048ea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80048ea:	4770      	bx	lr

080048ec <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80048ec:	6803      	ldr	r3, [r0, #0]
{
 80048ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80048f0:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80048f2:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048f4:	07f2      	lsls	r2, r6, #31
{
 80048f6:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048f8:	d514      	bpl.n	8004924 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80048fa:	05e9      	lsls	r1, r5, #23
 80048fc:	d512      	bpl.n	8004924 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004904:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004906:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800490e:	2201      	movs	r2, #1
 8004910:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004912:	2304      	movs	r3, #4
 8004914:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004918:	2300      	movs	r3, #0
 800491a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800491e:	6943      	ldr	r3, [r0, #20]
 8004920:	b103      	cbz	r3, 8004924 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004922:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004924:	06b2      	lsls	r2, r6, #26
 8004926:	d516      	bpl.n	8004956 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004928:	04ab      	lsls	r3, r5, #18
 800492a:	d514      	bpl.n	8004956 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004934:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004936:	2220      	movs	r2, #32
 8004938:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800493a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004942:	2304      	movs	r3, #4
 8004944:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004948:	2300      	movs	r3, #0
 800494a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800494e:	6963      	ldr	r3, [r4, #20]
 8004950:	b10b      	cbz	r3, 8004956 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004952:	4620      	mov	r0, r4
 8004954:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004956:	0730      	lsls	r0, r6, #28
 8004958:	d516      	bpl.n	8004988 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800495a:	0529      	lsls	r1, r5, #20
 800495c:	d514      	bpl.n	8004988 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004966:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004968:	2208      	movs	r2, #8
 800496a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800496c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800496e:	f043 0304 	orr.w	r3, r3, #4
 8004972:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004974:	2304      	movs	r3, #4
 8004976:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800497a:	2300      	movs	r3, #0
 800497c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004980:	6963      	ldr	r3, [r4, #20]
 8004982:	b10b      	cbz	r3, 8004988 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8004984:	4620      	mov	r0, r4
 8004986:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004988:	0772      	lsls	r2, r6, #29
 800498a:	d50b      	bpl.n	80049a4 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800498c:	056b      	lsls	r3, r5, #21
 800498e:	d509      	bpl.n	80049a4 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004998:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800499a:	2204      	movs	r2, #4
 800499c:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800499e:	4620      	mov	r0, r4
 80049a0:	f7ff ffa2 	bl	80048e8 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80049a4:	07b0      	lsls	r0, r6, #30
 80049a6:	d514      	bpl.n	80049d2 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80049a8:	05a9      	lsls	r1, r5, #22
 80049aa:	d512      	bpl.n	80049d2 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80049b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80049b6:	2202      	movs	r2, #2
 80049b8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80049ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80049bc:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80049be:	2301      	movs	r3, #1
 80049c0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80049c4:	2300      	movs	r3, #0
 80049c6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80049ca:	6923      	ldr	r3, [r4, #16]
 80049cc:	b10b      	cbz	r3, 80049d2 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80049ce:	4620      	mov	r0, r4
 80049d0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80049d2:	06f2      	lsls	r2, r6, #27
 80049d4:	d513      	bpl.n	80049fe <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80049d6:	04eb      	lsls	r3, r5, #19
 80049d8:	d511      	bpl.n	80049fe <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80049e4:	2210      	movs	r2, #16
 80049e6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80049e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80049ea:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80049f2:	2300      	movs	r3, #0
 80049f4:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7ff ff76 	bl	80048ea <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80049fe:	bd70      	pop	{r4, r5, r6, pc}

08004a00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004a00:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004a02:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8004a06:	2a01      	cmp	r2, #1
{
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8004a0e:	d02b      	beq.n	8004a68 <HAL_DMA2D_ConfigLayer+0x68>
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a16:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004a1a:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8004a1e:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8004a22:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8004a24:	4f17      	ldr	r7, [pc, #92]	@ (8004a84 <HAL_DMA2D_ConfigLayer+0x84>)
 8004a26:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a2a:	3c09      	subs	r4, #9
 8004a2c:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004a2e:	bf9c      	itt	ls
 8004a30:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8004a34:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004a36:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004a3a:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004a3c:	bf88      	it	hi
 8004a3e:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004a42:	b991      	cbnz	r1, 8004a6a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004a44:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8004a46:	4039      	ands	r1, r7
 8004a48:	4301      	orrs	r1, r0
 8004a4a:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a4c:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004a4e:	6999      	ldr	r1, [r3, #24]
 8004a50:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a52:	d803      	bhi.n	8004a5c <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004a54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a56:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004a5a:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a5c:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a5e:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8004a64:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8004a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004a6a:	69d1      	ldr	r1, [r2, #28]
 8004a6c:	4039      	ands	r1, r7
 8004a6e:	4301      	orrs	r1, r0
 8004a70:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004a72:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a74:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004a76:	6989      	ldr	r1, [r1, #24]
 8004a78:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004a7a:	bf9c      	itt	ls
 8004a7c:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 8004a80:	6215      	strls	r5, [r2, #32]
 8004a82:	e7eb      	b.n	8004a5c <HAL_DMA2D_ConfigLayer+0x5c>
 8004a84:	00fcfff0 	.word	0x00fcfff0

08004a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a8c:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004c4c <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a90:	4a6c      	ldr	r2, [pc, #432]	@ (8004c44 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a92:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a94:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8004a96:	2401      	movs	r4, #1
 8004a98:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a9a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8004a9e:	43ac      	bics	r4, r5
 8004aa0:	f040 80b7 	bne.w	8004c12 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aa4:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004aa6:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aa8:	f005 0403 	and.w	r4, r5, #3
 8004aac:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ab0:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab4:	1e67      	subs	r7, r4, #1
 8004ab6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ab8:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004abc:	d834      	bhi.n	8004b28 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8004abe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ac0:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ac4:	68cf      	ldr	r7, [r1, #12]
 8004ac6:	fa07 f708 	lsl.w	r7, r7, r8
 8004aca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004ace:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004ad0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ad2:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004ada:	409f      	lsls	r7, r3
 8004adc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004ae0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004ae2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ae4:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ae8:	688f      	ldr	r7, [r1, #8]
 8004aea:	fa07 f708 	lsl.w	r7, r7, r8
 8004aee:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8004af4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af6:	d119      	bne.n	8004b2c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8004af8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8004afc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b00:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004b04:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b08:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004b0c:	f04f 0e0f 	mov.w	lr, #15
 8004b10:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004b14:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b18:	690f      	ldr	r7, [r1, #16]
 8004b1a:	fa07 f70b 	lsl.w	r7, r7, fp
 8004b1e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004b22:	f8ca 7020 	str.w	r7, [sl, #32]
 8004b26:	e001      	b.n	8004b2c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b28:	2c03      	cmp	r4, #3
 8004b2a:	d1da      	bne.n	8004ae2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004b2c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b2e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b32:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b36:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b38:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004b3c:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b3e:	d068      	beq.n	8004c12 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b40:	2400      	movs	r4, #0
 8004b42:	9401      	str	r4, [sp, #4]
 8004b44:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004b48:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004b4c:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8004b50:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004b54:	f023 0703 	bic.w	r7, r3, #3
 8004b58:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004b5c:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8004b60:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8004b64:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b66:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b6a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004b6c:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b70:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004b74:	240f      	movs	r4, #15
 8004b76:	fa04 f40c 	lsl.w	r4, r4, ip
 8004b7a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b7e:	4c32      	ldr	r4, [pc, #200]	@ (8004c48 <HAL_GPIO_Init+0x1c0>)
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d04d      	beq.n	8004c20 <HAL_GPIO_Init+0x198>
 8004b84:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d04b      	beq.n	8004c24 <HAL_GPIO_Init+0x19c>
 8004b8c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	d049      	beq.n	8004c28 <HAL_GPIO_Init+0x1a0>
 8004b94:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d047      	beq.n	8004c2c <HAL_GPIO_Init+0x1a4>
 8004b9c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004ba0:	42a0      	cmp	r0, r4
 8004ba2:	d045      	beq.n	8004c30 <HAL_GPIO_Init+0x1a8>
 8004ba4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004ba8:	42a0      	cmp	r0, r4
 8004baa:	d043      	beq.n	8004c34 <HAL_GPIO_Init+0x1ac>
 8004bac:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004bb0:	42a0      	cmp	r0, r4
 8004bb2:	d041      	beq.n	8004c38 <HAL_GPIO_Init+0x1b0>
 8004bb4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004bb8:	42a0      	cmp	r0, r4
 8004bba:	d03f      	beq.n	8004c3c <HAL_GPIO_Init+0x1b4>
 8004bbc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004bc0:	42a0      	cmp	r0, r4
 8004bc2:	d03d      	beq.n	8004c40 <HAL_GPIO_Init+0x1b8>
 8004bc4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004bc8:	42a0      	cmp	r0, r4
 8004bca:	bf14      	ite	ne
 8004bcc:	240a      	movne	r4, #10
 8004bce:	2409      	moveq	r4, #9
 8004bd0:	fa04 f40c 	lsl.w	r4, r4, ip
 8004bd4:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bd8:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8004bda:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004bdc:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bde:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004be2:	bf0c      	ite	eq
 8004be4:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004be6:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8004be8:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004bea:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bec:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004bf0:	bf0c      	ite	eq
 8004bf2:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004bf4:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8004bf6:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8004bf8:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bfa:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004bfe:	bf0c      	ite	eq
 8004c00:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004c02:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8004c04:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c06:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c08:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8004c0a:	bf54      	ite	pl
 8004c0c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004c0e:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004c10:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c12:	3301      	adds	r3, #1
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	f47f af3d 	bne.w	8004a94 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004c1a:	b003      	add	sp, #12
 8004c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c20:	2400      	movs	r4, #0
 8004c22:	e7d5      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c24:	2401      	movs	r4, #1
 8004c26:	e7d3      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c28:	2402      	movs	r4, #2
 8004c2a:	e7d1      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c2c:	2403      	movs	r4, #3
 8004c2e:	e7cf      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c30:	2404      	movs	r4, #4
 8004c32:	e7cd      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c34:	2405      	movs	r4, #5
 8004c36:	e7cb      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c38:	2406      	movs	r4, #6
 8004c3a:	e7c9      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c3c:	2407      	movs	r4, #7
 8004c3e:	e7c7      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c40:	2408      	movs	r4, #8
 8004c42:	e7c5      	b.n	8004bd0 <HAL_GPIO_Init+0x148>
 8004c44:	40013c00 	.word	0x40013c00
 8004c48:	40020000 	.word	0x40020000
 8004c4c:	40023800 	.word	0x40023800

08004c50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c50:	6903      	ldr	r3, [r0, #16]
 8004c52:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004c54:	bf14      	ite	ne
 8004c56:	2001      	movne	r0, #1
 8004c58:	2000      	moveq	r0, #0
 8004c5a:	4770      	bx	lr

08004c5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c5c:	b10a      	cbz	r2, 8004c62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c5e:	6181      	str	r1, [r0, #24]
  }
}
 8004c60:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c62:	0409      	lsls	r1, r1, #16
 8004c64:	e7fb      	b.n	8004c5e <HAL_GPIO_WritePin+0x2>

08004c66 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c66:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c68:	ea01 0203 	and.w	r2, r1, r3
 8004c6c:	ea21 0103 	bic.w	r1, r1, r3
 8004c70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c74:	6181      	str	r1, [r0, #24]
}
 8004c76:	4770      	bx	lr

08004c78 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c78:	6801      	ldr	r1, [r0, #0]
 8004c7a:	694b      	ldr	r3, [r1, #20]
 8004c7c:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	d010      	beq.n	8004ca8 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c86:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004c8a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8e:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c90:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c98:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c9e:	f043 0304 	orr.w	r3, r3, #4
 8004ca2:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	4770      	bx	lr
  }
  return HAL_OK;
 8004ca8:	4618      	mov	r0, r3
}
 8004caa:	4770      	bx	lr

08004cac <I2C_WaitOnFlagUntilTimeout>:
{
 8004cac:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	460f      	mov	r7, r1
 8004cb4:	4691      	mov	r9, r2
 8004cb6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004cbc:	6833      	ldr	r3, [r6, #0]
 8004cbe:	f1ba 0f01 	cmp.w	sl, #1
 8004cc2:	bf0c      	ite	eq
 8004cc4:	695c      	ldreq	r4, [r3, #20]
 8004cc6:	699c      	ldrne	r4, [r3, #24]
 8004cc8:	ea27 0404 	bic.w	r4, r7, r4
 8004ccc:	b2a4      	uxth	r4, r4
 8004cce:	fab4 f484 	clz	r4, r4
 8004cd2:	0964      	lsrs	r4, r4, #5
 8004cd4:	45a1      	cmp	r9, r4
 8004cd6:	d001      	beq.n	8004cdc <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e017      	b.n	8004d0c <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	1c6a      	adds	r2, r5, #1
 8004cde:	d0ee      	beq.n	8004cbe <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce0:	f7ff fd5c 	bl	800479c <HAL_GetTick>
 8004ce4:	9b08      	ldr	r3, [sp, #32]
 8004ce6:	1ac0      	subs	r0, r0, r3
 8004ce8:	42a8      	cmp	r0, r5
 8004cea:	d801      	bhi.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	d1e5      	bne.n	8004cbc <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cf2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf4:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cf6:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cfa:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cfe:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004d00:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d04:	f042 0220 	orr.w	r2, r2, #32
 8004d08:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8004d0a:	2001      	movs	r0, #1
}
 8004d0c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d14:	4604      	mov	r4, r0
 8004d16:	460f      	mov	r7, r1
 8004d18:	4616      	mov	r6, r2
 8004d1a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d1c:	6825      	ldr	r5, [r4, #0]
 8004d1e:	6968      	ldr	r0, [r5, #20]
 8004d20:	ea27 0000 	bic.w	r0, r7, r0
 8004d24:	b280      	uxth	r0, r0
 8004d26:	b1c0      	cbz	r0, 8004d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d28:	696b      	ldr	r3, [r5, #20]
 8004d2a:	055a      	lsls	r2, r3, #21
 8004d2c:	d517      	bpl.n	8004d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2e:	682b      	ldr	r3, [r5, #0]
 8004d30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d34:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d36:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004d3a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d3c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d42:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004d52:	2300      	movs	r3, #0
 8004d54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004d58:	2001      	movs	r0, #1
}
 8004d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004d5e:	1c73      	adds	r3, r6, #1
 8004d60:	d0dd      	beq.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7ff fd1b 	bl	800479c <HAL_GetTick>
 8004d66:	eba0 0008 	sub.w	r0, r0, r8
 8004d6a:	42b0      	cmp	r0, r6
 8004d6c:	d909      	bls.n	8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d70:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d72:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d78:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	e7e6      	b.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	d1ca      	bne.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 8004d86:	e7f2      	b.n	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08004d88 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	460d      	mov	r5, r1
 8004d8e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	d501      	bpl.n	8004d9c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e018      	b.n	8004dce <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7ff ff6b 	bl	8004c78 <I2C_IsAcknowledgeFailed>
 8004da2:	b998      	cbnz	r0, 8004dcc <I2C_WaitOnTXEFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8004da4:	1c6a      	adds	r2, r5, #1
 8004da6:	d0f3      	beq.n	8004d90 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da8:	f7ff fcf8 	bl	800479c <HAL_GetTick>
 8004dac:	1b80      	subs	r0, r0, r6
 8004dae:	42a8      	cmp	r0, r5
 8004db0:	d90e      	bls.n	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004db4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db6:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004db8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004dc2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc6:	f042 0220 	orr.w	r2, r2, #32
 8004dca:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004dcc:	2001      	movs	r0, #1
}
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd0:	2d00      	cmp	r5, #0
 8004dd2:	d1dd      	bne.n	8004d90 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8004dd4:	e7ed      	b.n	8004db2 <I2C_WaitOnTXEFlagUntilTimeout+0x2a>
	...

08004dd8 <I2C_RequestMemoryWrite>:
{
 8004dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ddc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dde:	6802      	ldr	r2, [r0, #0]
{
 8004de0:	b085      	sub	sp, #20
 8004de2:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8004de6:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de8:	6813      	ldr	r3, [r2, #0]
 8004dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dee:	6013      	str	r3, [r2, #0]
{
 8004df0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df2:	463b      	mov	r3, r7
 8004df4:	f8cd 8000 	str.w	r8, [sp]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004dfe:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e00:	f7ff ff54 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	b138      	cbz	r0, 8004e18 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	05db      	lsls	r3, r3, #23
 8004e0c:	d502      	bpl.n	8004e14 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e12:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004e14:	2603      	movs	r6, #3
 8004e16:	e020      	b.n	8004e5a <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e18:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004e1c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e1e:	491a      	ldr	r1, [pc, #104]	@ (8004e88 <I2C_RequestMemoryWrite+0xb0>)
 8004e20:	4643      	mov	r3, r8
 8004e22:	463a      	mov	r2, r7
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff ff73 	bl	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e2a:	b9a8      	cbnz	r0, 8004e58 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	9003      	str	r0, [sp, #12]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	9203      	str	r2, [sp, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e38:	4642      	mov	r2, r8
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e40:	f7ff ffa2 	bl	8004d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e44:	4606      	mov	r6, r0
 8004e46:	b160      	cbz	r0, 8004e62 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e4a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4c:	bf01      	itttt	eq
 8004e4e:	6822      	ldreq	r2, [r4, #0]
 8004e50:	6813      	ldreq	r3, [r2, #0]
 8004e52:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004e56:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004e58:	2601      	movs	r6, #1
}
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	b005      	add	sp, #20
 8004e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e62:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e66:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e68:	d102      	bne.n	8004e70 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e6a:	b2ed      	uxtb	r5, r5
 8004e6c:	611d      	str	r5, [r3, #16]
 8004e6e:	e7f4      	b.n	8004e5a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e70:	0a2a      	lsrs	r2, r5, #8
 8004e72:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e74:	4639      	mov	r1, r7
 8004e76:	4642      	mov	r2, r8
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7ff ff85 	bl	8004d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d1e2      	bne.n	8004e48 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	e7f1      	b.n	8004e6a <I2C_RequestMemoryWrite+0x92>
 8004e86:	bf00      	nop
 8004e88:	00010002 	.word	0x00010002

08004e8c <I2C_RequestMemoryRead>:
{
 8004e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e92:	6803      	ldr	r3, [r0, #0]
{
 8004e94:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e9c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9e:	681a      	ldr	r2, [r3, #0]
{
 8004ea0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ea8:	601a      	str	r2, [r3, #0]
{
 8004eaa:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eac:	463b      	mov	r3, r7
 8004eae:	f8cd 8000 	str.w	r8, [sp]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004eb8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eba:	f7ff fef7 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	b138      	cbz	r0, 8004ed2 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ec2:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ec4:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec6:	bf44      	itt	mi
 8004ec8:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8004ecc:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004ece:	2003      	movs	r0, #3
 8004ed0:	e021      	b.n	8004f16 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ed2:	fa5f f986 	uxtb.w	r9, r6
 8004ed6:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004eda:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004edc:	492b      	ldr	r1, [pc, #172]	@ (8004f8c <I2C_RequestMemoryRead+0x100>)
 8004ede:	4643      	mov	r3, r8
 8004ee0:	463a      	mov	r2, r7
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff ff14 	bl	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ee8:	b9a0      	cbnz	r0, 8004f14 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	9003      	str	r0, [sp, #12]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	9203      	str	r2, [sp, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	4639      	mov	r1, r7
 8004efa:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004efc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efe:	f7ff ff43 	bl	8004d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f02:	b158      	cbz	r0, 8004f1c <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f06:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	bf01      	itttt	eq
 8004f0a:	6822      	ldreq	r2, [r4, #0]
 8004f0c:	6813      	ldreq	r3, [r2, #0]
 8004f0e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004f12:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004f14:	2001      	movs	r0, #1
}
 8004f16:	b004      	add	sp, #16
 8004f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f1c:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f22:	d11a      	bne.n	8004f5a <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f24:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f26:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f28:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7ff ff2b 	bl	8004d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f32:	4602      	mov	r2, r0
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d1e5      	bne.n	8004f04 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f38:	6821      	ldr	r1, [r4, #0]
 8004f3a:	680b      	ldr	r3, [r1, #0]
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f40:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f42:	4620      	mov	r0, r4
 8004f44:	f8cd 8000 	str.w	r8, [sp]
 8004f48:	463b      	mov	r3, r7
 8004f4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f4e:	f7ff fead 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8004f52:	6822      	ldr	r2, [r4, #0]
 8004f54:	b160      	cbz	r0, 8004f70 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	e7b4      	b.n	8004ec4 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f5a:	0a2a      	lsrs	r2, r5, #8
 8004f5c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	4639      	mov	r1, r7
 8004f60:	4642      	mov	r2, r8
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7ff ff10 	bl	8004d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d1cb      	bne.n	8004f04 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	e7d9      	b.n	8004f24 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f70:	f049 0301 	orr.w	r3, r9, #1
 8004f74:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f76:	4905      	ldr	r1, [pc, #20]	@ (8004f8c <I2C_RequestMemoryRead+0x100>)
 8004f78:	4643      	mov	r3, r8
 8004f7a:	463a      	mov	r2, r7
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f7ff fec7 	bl	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f82:	3800      	subs	r0, #0
 8004f84:	bf18      	it	ne
 8004f86:	2001      	movne	r0, #1
 8004f88:	e7c5      	b.n	8004f16 <I2C_RequestMemoryRead+0x8a>
 8004f8a:	bf00      	nop
 8004f8c:	00010002 	.word	0x00010002

08004f90 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	4604      	mov	r4, r0
 8004f94:	460d      	mov	r5, r1
 8004f96:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	075b      	lsls	r3, r3, #29
 8004f9e:	d501      	bpl.n	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e018      	b.n	8004fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff fe67 	bl	8004c78 <I2C_IsAcknowledgeFailed>
 8004faa:	b998      	cbnz	r0, 8004fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8004fac:	1c6a      	adds	r2, r5, #1
 8004fae:	d0f3      	beq.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb0:	f7ff fbf4 	bl	800479c <HAL_GetTick>
 8004fb4:	1b80      	subs	r0, r0, r6
 8004fb6:	42a8      	cmp	r0, r5
 8004fb8:	d90e      	bls.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fba:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fbc:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fbe:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004fca:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fce:	f042 0220 	orr.w	r2, r2, #32
 8004fd2:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004fd4:	2001      	movs	r0, #1
}
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd8:	2d00      	cmp	r5, #0
 8004fda:	d1dd      	bne.n	8004f98 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8004fdc:	e7ed      	b.n	8004fba <I2C_WaitOnBTFFlagUntilTimeout+0x2a>

08004fde <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004fde:	b570      	push	{r4, r5, r6, lr}
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe6:	6821      	ldr	r1, [r4, #0]
 8004fe8:	694b      	ldr	r3, [r1, #20]
 8004fea:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8004fee:	d001      	beq.n	8004ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e011      	b.n	8005018 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ff4:	694a      	ldr	r2, [r1, #20]
 8004ff6:	06d2      	lsls	r2, r2, #27
 8004ff8:	d50f      	bpl.n	800501a <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ffa:	f06f 0210 	mvn.w	r2, #16
 8004ffe:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005000:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005002:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005004:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005008:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800500c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800500e:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8005010:	2300      	movs	r3, #0
 8005012:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8005016:	2001      	movs	r0, #1
}
 8005018:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501a:	f7ff fbbf 	bl	800479c <HAL_GetTick>
 800501e:	1b80      	subs	r0, r0, r6
 8005020:	42a8      	cmp	r0, r5
 8005022:	d909      	bls.n	8005038 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005024:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005026:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800502a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005032:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005034:	4313      	orrs	r3, r2
 8005036:	e7ea      	b.n	800500e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005038:	2d00      	cmp	r5, #0
 800503a:	d1d4      	bne.n	8004fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800503c:	e7f2      	b.n	8005024 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
	...

08005040 <HAL_I2C_Init>:
{
 8005040:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005042:	4604      	mov	r4, r0
 8005044:	b908      	cbnz	r0, 800504a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8005046:	2001      	movs	r0, #1
}
 8005048:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800504a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800504e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005052:	b91b      	cbnz	r3, 800505c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005054:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8005058:	f7fc f974 	bl	8001344 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800505c:	2324      	movs	r3, #36	@ 0x24
 800505e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800507a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800507c:	f000 fe66 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005080:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <HAL_I2C_Init+0x140>)
 8005082:	6865      	ldr	r5, [r4, #4]
 8005084:	429d      	cmp	r5, r3
 8005086:	bf94      	ite	ls
 8005088:	4b3e      	ldrls	r3, [pc, #248]	@ (8005184 <HAL_I2C_Init+0x144>)
 800508a:	4b3f      	ldrhi	r3, [pc, #252]	@ (8005188 <HAL_I2C_Init+0x148>)
 800508c:	4298      	cmp	r0, r3
 800508e:	bf8c      	ite	hi
 8005090:	2300      	movhi	r3, #0
 8005092:	2301      	movls	r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1d6      	bne.n	8005046 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005098:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800509a:	4e39      	ldr	r6, [pc, #228]	@ (8005180 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800509c:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800509e:	4b3b      	ldr	r3, [pc, #236]	@ (800518c <HAL_I2C_Init+0x14c>)
 80050a0:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050a4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80050a8:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050aa:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050ac:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ae:	bf88      	it	hi
 80050b0:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 80050b4:	6a11      	ldr	r1, [r2, #32]
 80050b6:	bf88      	it	hi
 80050b8:	4373      	mulhi	r3, r6
 80050ba:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80050be:	bf84      	itt	hi
 80050c0:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 80050c4:	fbb3 f3f6 	udivhi	r3, r3, r6
 80050c8:	3301      	adds	r3, #1
 80050ca:	430b      	orrs	r3, r1
 80050cc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050ce:	69d1      	ldr	r1, [r2, #28]
 80050d0:	1e43      	subs	r3, r0, #1
 80050d2:	482b      	ldr	r0, [pc, #172]	@ (8005180 <HAL_I2C_Init+0x140>)
 80050d4:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80050d8:	4285      	cmp	r5, r0
 80050da:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80050de:	d832      	bhi.n	8005146 <HAL_I2C_Init+0x106>
 80050e0:	006d      	lsls	r5, r5, #1
 80050e2:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80050e6:	fbb3 f3f5 	udiv	r3, r3, r5
 80050ea:	3301      	adds	r3, #1
 80050ec:	4203      	tst	r3, r0
 80050ee:	d042      	beq.n	8005176 <HAL_I2C_Init+0x136>
 80050f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f4:	4319      	orrs	r1, r3
 80050f6:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050f8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80050fc:	6811      	ldr	r1, [r2, #0]
 80050fe:	4303      	orrs	r3, r0
 8005100:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8005104:	430b      	orrs	r3, r1
 8005106:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005108:	6891      	ldr	r1, [r2, #8]
 800510a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800510e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8005112:	4303      	orrs	r3, r0
 8005114:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005118:	430b      	orrs	r3, r1
 800511a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800511c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005120:	68d1      	ldr	r1, [r2, #12]
 8005122:	4303      	orrs	r3, r0
 8005124:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005128:	430b      	orrs	r3, r1
 800512a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800512c:	6813      	ldr	r3, [r2, #0]
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005134:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005136:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005138:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800513a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800513e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005140:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005144:	e780      	b.n	8005048 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005146:	68a0      	ldr	r0, [r4, #8]
 8005148:	b950      	cbnz	r0, 8005160 <HAL_I2C_Init+0x120>
 800514a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800514e:	fbb3 f3f5 	udiv	r3, r3, r5
 8005152:	3301      	adds	r3, #1
 8005154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005158:	b17b      	cbz	r3, 800517a <HAL_I2C_Init+0x13a>
 800515a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800515e:	e7c9      	b.n	80050f4 <HAL_I2C_Init+0xb4>
 8005160:	2019      	movs	r0, #25
 8005162:	4368      	muls	r0, r5
 8005164:	fbb3 f3f0 	udiv	r3, r3, r0
 8005168:	3301      	adds	r3, #1
 800516a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516e:	b123      	cbz	r3, 800517a <HAL_I2C_Init+0x13a>
 8005170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005174:	e7be      	b.n	80050f4 <HAL_I2C_Init+0xb4>
 8005176:	2304      	movs	r3, #4
 8005178:	e7bc      	b.n	80050f4 <HAL_I2C_Init+0xb4>
 800517a:	2301      	movs	r3, #1
 800517c:	e7ba      	b.n	80050f4 <HAL_I2C_Init+0xb4>
 800517e:	bf00      	nop
 8005180:	000186a0 	.word	0x000186a0
 8005184:	001e847f 	.word	0x001e847f
 8005188:	003d08ff 	.word	0x003d08ff
 800518c:	000f4240 	.word	0x000f4240

08005190 <HAL_I2C_Mem_Write>:
{
 8005190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005194:	4604      	mov	r4, r0
 8005196:	4699      	mov	r9, r3
 8005198:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800519a:	460f      	mov	r7, r1
 800519c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800519e:	f7ff fafd 	bl	800479c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80051a6:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80051a8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80051aa:	d003      	beq.n	80051b4 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80051ac:	2002      	movs	r0, #2
}
 80051ae:	b003      	add	sp, #12
 80051b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051b4:	9000      	str	r0, [sp, #0]
 80051b6:	493c      	ldr	r1, [pc, #240]	@ (80052a8 <HAL_I2C_Mem_Write+0x118>)
 80051b8:	2319      	movs	r3, #25
 80051ba:	2201      	movs	r2, #1
 80051bc:	4620      	mov	r0, r4
 80051be:	f7ff fd75 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d1f2      	bne.n	80051ac <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80051c6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d0ee      	beq.n	80051ac <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051ce:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80051d0:	2301      	movs	r3, #1
 80051d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051d6:	6803      	ldr	r3, [r0, #0]
 80051d8:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80051da:	bf5e      	ittt	pl
 80051dc:	6803      	ldrpl	r3, [r0, #0]
 80051de:	f043 0301 	orrpl.w	r3, r3, #1
 80051e2:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e4:	6803      	ldr	r3, [r0, #0]
 80051e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051ea:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051ec:	2321      	movs	r3, #33	@ 0x21
 80051ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051f2:	2340      	movs	r3, #64	@ 0x40
 80051f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80051fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051fe:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005200:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8005204:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005206:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005208:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800520a:	4b28      	ldr	r3, [pc, #160]	@ (80052ac <HAL_I2C_Mem_Write+0x11c>)
 800520c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800520e:	4642      	mov	r2, r8
 8005210:	e9cd 6500 	strd	r6, r5, [sp]
 8005214:	464b      	mov	r3, r9
 8005216:	4639      	mov	r1, r7
 8005218:	4620      	mov	r0, r4
 800521a:	f7ff fddd 	bl	8004dd8 <I2C_RequestMemoryWrite>
 800521e:	2800      	cmp	r0, #0
 8005220:	d02a      	beq.n	8005278 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8005222:	2001      	movs	r0, #1
 8005224:	e7c3      	b.n	80051ae <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005226:	f7ff fdaf 	bl	8004d88 <I2C_WaitOnTXEFlagUntilTimeout>
 800522a:	b140      	cbz	r0, 800523e <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800522e:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005230:	bf01      	itttt	eq
 8005232:	6822      	ldreq	r2, [r4, #0]
 8005234:	6813      	ldreq	r3, [r2, #0]
 8005236:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800523a:	6013      	streq	r3, [r2, #0]
 800523c:	e7f1      	b.n	8005222 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800523e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005240:	6827      	ldr	r7, [r4, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005248:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800524a:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800524c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800524e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005250:	3a01      	subs	r2, #1
 8005252:	b292      	uxth	r2, r2
 8005254:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005256:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005258:	1e48      	subs	r0, r1, #1
 800525a:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800525c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800525e:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005260:	d50a      	bpl.n	8005278 <HAL_I2C_Mem_Write+0xe8>
 8005262:	b148      	cbz	r0, 8005278 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005264:	785a      	ldrb	r2, [r3, #1]
 8005266:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005268:	3302      	adds	r3, #2
 800526a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800526c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800526e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8005270:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005272:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005274:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8005276:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005278:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800527a:	462a      	mov	r2, r5
 800527c:	4631      	mov	r1, r6
 800527e:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1d0      	bne.n	8005226 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005284:	f7ff fe84 	bl	8004f90 <I2C_WaitOnBTFFlagUntilTimeout>
 8005288:	2800      	cmp	r0, #0
 800528a:	d1cf      	bne.n	800522c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528c:	6822      	ldr	r2, [r4, #0]
 800528e:	6813      	ldr	r3, [r2, #0]
 8005290:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005294:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005296:	2320      	movs	r3, #32
 8005298:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800529c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80052a4:	e783      	b.n	80051ae <HAL_I2C_Mem_Write+0x1e>
 80052a6:	bf00      	nop
 80052a8:	00100002 	.word	0x00100002
 80052ac:	ffff0000 	.word	0xffff0000

080052b0 <HAL_I2C_Mem_Read>:
{
 80052b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052b4:	4604      	mov	r4, r0
 80052b6:	b087      	sub	sp, #28
 80052b8:	4699      	mov	r9, r3
 80052ba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80052bc:	460d      	mov	r5, r1
 80052be:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7ff fa6c 	bl	800479c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80052c8:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80052ca:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052cc:	d004      	beq.n	80052d8 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 80052ce:	2502      	movs	r5, #2
}
 80052d0:	4628      	mov	r0, r5
 80052d2:	b007      	add	sp, #28
 80052d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052d8:	9000      	str	r0, [sp, #0]
 80052da:	4976      	ldr	r1, [pc, #472]	@ (80054b4 <HAL_I2C_Mem_Read+0x204>)
 80052dc:	2319      	movs	r3, #25
 80052de:	2201      	movs	r2, #1
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff fce3 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d1f1      	bne.n	80052ce <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80052ea:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d0ed      	beq.n	80052ce <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f2:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80052f4:	2301      	movs	r3, #1
 80052f6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052fa:	6803      	ldr	r3, [r0, #0]
 80052fc:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80052fe:	bf5e      	ittt	pl
 8005300:	6803      	ldrpl	r3, [r0, #0]
 8005302:	f043 0301 	orrpl.w	r3, r3, #1
 8005306:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005308:	6803      	ldr	r3, [r0, #0]
 800530a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800530e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005310:	2322      	movs	r3, #34	@ 0x22
 8005312:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005316:	2340      	movs	r3, #64	@ 0x40
 8005318:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800531c:	2300      	movs	r3, #0
 800531e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005322:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005324:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8005328:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800532a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800532c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800532e:	4b62      	ldr	r3, [pc, #392]	@ (80054b8 <HAL_I2C_Mem_Read+0x208>)
 8005330:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005332:	4629      	mov	r1, r5
 8005334:	e9cd 7600 	strd	r7, r6, [sp]
 8005338:	464b      	mov	r3, r9
 800533a:	4642      	mov	r2, r8
 800533c:	4620      	mov	r0, r4
 800533e:	f7ff fda5 	bl	8004e8c <I2C_RequestMemoryRead>
 8005342:	4605      	mov	r5, r0
 8005344:	b108      	cbz	r0, 800534a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8005346:	2501      	movs	r5, #1
 8005348:	e7c2      	b.n	80052d0 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800534a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800534e:	b9b2      	cbnz	r2, 800537e <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005350:	9002      	str	r0, [sp, #8]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	9202      	str	r2, [sp, #8]
 8005356:	699a      	ldr	r2, [r3, #24]
 8005358:	9202      	str	r2, [sp, #8]
 800535a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005362:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005364:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 80054bc <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8005368:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800536a:	2b00      	cmp	r3, #0
 800536c:	d12c      	bne.n	80053c8 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 800536e:	2220      	movs	r2, #32
 8005370:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005374:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005378:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 800537c:	e7a8      	b.n	80052d0 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800537e:	2a01      	cmp	r2, #1
 8005380:	d10a      	bne.n	8005398 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005388:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538a:	9003      	str	r0, [sp, #12]
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	9203      	str	r2, [sp, #12]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	9203      	str	r2, [sp, #12]
 8005394:	9a03      	ldr	r2, [sp, #12]
 8005396:	e7e1      	b.n	800535c <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8005398:	2a02      	cmp	r2, #2
 800539a:	d10e      	bne.n	80053ba <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053aa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ac:	9004      	str	r0, [sp, #16]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	9204      	str	r2, [sp, #16]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	9b04      	ldr	r3, [sp, #16]
 80053b8:	e7d4      	b.n	8005364 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	9005      	str	r0, [sp, #20]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	9205      	str	r2, [sp, #20]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	9305      	str	r3, [sp, #20]
 80053c4:	9b05      	ldr	r3, [sp, #20]
 80053c6:	e7cd      	b.n	8005364 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d856      	bhi.n	800547a <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d115      	bne.n	80053fc <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d0:	4632      	mov	r2, r6
 80053d2:	4639      	mov	r1, r7
 80053d4:	4620      	mov	r0, r4
 80053d6:	f7ff fe02 	bl	8004fde <I2C_WaitOnRXNEFlagUntilTimeout>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d1b3      	bne.n	8005346 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80053e4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80053e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80053e8:	3301      	adds	r3, #1
 80053ea:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80053ec:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80053ee:	3b01      	subs	r3, #1
 80053f0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80053f2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80053fa:	e7b5      	b.n	8005368 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 80053fc:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053fe:	9600      	str	r6, [sp, #0]
 8005400:	463b      	mov	r3, r7
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	4641      	mov	r1, r8
 8005408:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800540a:	d119      	bne.n	8005440 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800540c:	f7ff fc4e 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8005410:	2800      	cmp	r0, #0
 8005412:	d198      	bne.n	8005346 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800541c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005422:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005424:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005426:	1c53      	adds	r3, r2, #1
 8005428:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800542a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005430:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005432:	3b01      	subs	r3, #1
 8005434:	b29b      	uxth	r3, r3
 8005436:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005438:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	7053      	strb	r3, [r2, #1]
 800543e:	e7d2      	b.n	80053e6 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005440:	f7ff fc34 	bl	8004cac <I2C_WaitOnFlagUntilTimeout>
 8005444:	4602      	mov	r2, r0
 8005446:	2800      	cmp	r0, #0
 8005448:	f47f af7d 	bne.w	8005346 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8005454:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005456:	6919      	ldr	r1, [r3, #16]
 8005458:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800545a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800545c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800545e:	3301      	adds	r3, #1
 8005460:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005462:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005464:	3b01      	subs	r3, #1
 8005466:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005468:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800546a:	3b01      	subs	r3, #1
 800546c:	b29b      	uxth	r3, r3
 800546e:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005470:	4641      	mov	r1, r8
 8005472:	9600      	str	r6, [sp, #0]
 8005474:	463b      	mov	r3, r7
 8005476:	4620      	mov	r0, r4
 8005478:	e7c8      	b.n	800540c <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547a:	4632      	mov	r2, r6
 800547c:	4639      	mov	r1, r7
 800547e:	4620      	mov	r0, r4
 8005480:	f7ff fdad 	bl	8004fde <I2C_WaitOnRXNEFlagUntilTimeout>
 8005484:	2800      	cmp	r0, #0
 8005486:	f47f af5e 	bne.w	8005346 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005490:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005492:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005494:	1c53      	adds	r3, r2, #1
 8005496:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8005498:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800549a:	3b01      	subs	r3, #1
 800549c:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800549e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	6959      	ldr	r1, [r3, #20]
 80054aa:	0749      	lsls	r1, r1, #29
 80054ac:	f57f af5c 	bpl.w	8005368 <HAL_I2C_Mem_Read+0xb8>
 80054b0:	e7c3      	b.n	800543a <HAL_I2C_Mem_Read+0x18a>
 80054b2:	bf00      	nop
 80054b4:	00100002 	.word	0x00100002
 80054b8:	ffff0000 	.word	0xffff0000
 80054bc:	00010004 	.word	0x00010004

080054c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054c0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	b2dc      	uxtb	r4, r3
 80054ca:	d116      	bne.n	80054fa <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80054cc:	2324      	movs	r3, #36	@ 0x24
 80054ce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d2:	6803      	ldr	r3, [r0, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80054dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054de:	f022 0210 	bic.w	r2, r2, #16
 80054e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80054e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054e6:	4311      	orrs	r1, r2
 80054e8:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 80054f6:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80054f8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80054fa:	2002      	movs	r0, #2
 80054fc:	e7fc      	b.n	80054f8 <HAL_I2CEx_ConfigAnalogFilter+0x38>

080054fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054fe:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005500:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005504:	2b20      	cmp	r3, #32
 8005506:	b2dc      	uxtb	r4, r3
 8005508:	d116      	bne.n	8005538 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800550a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800550c:	2324      	movs	r3, #36	@ 0x24
 800550e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800551a:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800551c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005520:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005522:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005524:	b29b      	uxth	r3, r3
 8005526:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005528:	6813      	ldr	r3, [r2, #0]
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005530:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8005534:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005536:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8005538:	2002      	movs	r0, #2
 800553a:	e7fc      	b.n	8005536 <HAL_I2CEx_ConfigDigitalFilter+0x38>

0800553c <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800553c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800553e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005542:	01d2      	lsls	r2, r2, #7
 8005544:	3284      	adds	r2, #132	@ 0x84
 8005546:	1883      	adds	r3, r0, r2
{
 8005548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800554c:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800554e:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005550:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005552:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005556:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800555a:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800555c:	68c5      	ldr	r5, [r0, #12]
 800555e:	f10c 0701 	add.w	r7, ip, #1
 8005562:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005566:	f3c6 460b 	ubfx	r6, r6, #16, #12
 800556a:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800556c:	443d      	add	r5, r7
 800556e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005572:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005574:	68c6      	ldr	r6, [r0, #12]
 8005576:	68cd      	ldr	r5, [r1, #12]
 8005578:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800557c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800557e:	689d      	ldr	r5, [r3, #8]
 8005580:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8005584:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005586:	68c7      	ldr	r7, [r0, #12]
 8005588:	688d      	ldr	r5, [r1, #8]
 800558a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800558e:	3501      	adds	r5, #1
 8005590:	443d      	add	r5, r7
 8005592:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8005596:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005598:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800559a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800559c:	f025 0507 	bic.w	r5, r5, #7
 80055a0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80055a2:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80055a6:	611e      	str	r6, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055a8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80055ac:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055ae:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80055b2:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80055b6:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80055ba:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80055be:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80055c2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80055c6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80055c8:	695d      	ldr	r5, [r3, #20]
 80055ca:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80055ce:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80055d0:	694d      	ldr	r5, [r1, #20]
 80055d2:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80055d4:	69dd      	ldr	r5, [r3, #28]
 80055d6:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80055da:	f025 0507 	bic.w	r5, r5, #7
 80055de:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80055e0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80055e4:	433d      	orrs	r5, r7
 80055e6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80055e8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80055ea:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80055ec:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80055f0:	2e07      	cmp	r6, #7
 80055f2:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055f4:	bf9c      	itt	ls
 80055f6:	4d0e      	ldrls	r5, [pc, #56]	@ (8005630 <LTDC_SetConfig+0xf4>)
 80055f8:	5dae      	ldrbls	r6, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80055fa:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80055fc:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 8005600:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005602:	bf88      	it	hi
 8005604:	2601      	movhi	r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005606:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005608:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800560a:	eba4 040c 	sub.w	r4, r4, ip
 800560e:	4374      	muls	r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005610:	4375      	muls	r5, r6
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005612:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005614:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005618:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800561a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800561c:	f36f 040a 	bfc	r4, #0, #11
 8005620:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005622:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005624:	5883      	ldr	r3, [r0, r2]
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	5083      	str	r3, [r0, r2]
}
 800562c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005630:	08015490 	.word	0x08015490

08005634 <HAL_LTDC_Init>:
{
 8005634:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005636:	4604      	mov	r4, r0
 8005638:	2800      	cmp	r0, #0
 800563a:	d063      	beq.n	8005704 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800563c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8005640:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005644:	b91b      	cbnz	r3, 800564e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005646:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800564a:	f7fb fed7 	bl	80013fc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800564e:	2302      	movs	r3, #2
 8005650:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800565c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800565e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005662:	4302      	orrs	r2, r0
 8005664:	68e0      	ldr	r0, [r4, #12]
 8005666:	6999      	ldr	r1, [r3, #24]
 8005668:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800566a:	6920      	ldr	r0, [r4, #16]
 800566c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800566e:	430a      	orrs	r2, r1
 8005670:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	4924      	ldr	r1, [pc, #144]	@ (8005708 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005676:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005678:	400a      	ands	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005682:	69a0      	ldr	r0, [r4, #24]
 8005684:	4302      	orrs	r2, r0
 8005686:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005688:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800568a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800568c:	400a      	ands	r2, r1
 800568e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005696:	6a20      	ldr	r0, [r4, #32]
 8005698:	4302      	orrs	r2, r0
 800569a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800569c:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800569e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80056a0:	400a      	ands	r2, r1
 80056a2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80056aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80056ac:	4302      	orrs	r2, r0
 80056ae:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	400a      	ands	r2, r1
 80056b4:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80056b6:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80056b8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80056ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80056be:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80056c0:	430a      	orrs	r2, r1
 80056c2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80056c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80056c6:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80056ca:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80056ce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80056d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80056d4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80056d6:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80056da:	432a      	orrs	r2, r5
 80056dc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80056e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80056e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80056e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e8:	f042 0206 	orr.w	r2, r2, #6
 80056ec:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80056f6:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80056f8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80056fa:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80056fe:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8005702:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005704:	2001      	movs	r0, #1
 8005706:	e7fc      	b.n	8005702 <HAL_LTDC_Init+0xce>
 8005708:	f000f800 	.word	0xf000f800

0800570c <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800570c:	4770      	bx	lr

0800570e <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800570e:	4770      	bx	lr

08005710 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005710:	6803      	ldr	r3, [r0, #0]
{
 8005712:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005714:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005716:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005718:	0772      	lsls	r2, r6, #29
{
 800571a:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800571c:	d514      	bpl.n	8005748 <HAL_LTDC_IRQHandler+0x38>
 800571e:	0769      	lsls	r1, r5, #29
 8005720:	d512      	bpl.n	8005748 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005724:	f022 0204 	bic.w	r2, r2, #4
 8005728:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800572a:	2204      	movs	r2, #4
 800572c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800572e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800573a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800573c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005740:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005744:	f7ff ffe2 	bl	800570c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005748:	07b2      	lsls	r2, r6, #30
 800574a:	d516      	bpl.n	800577a <HAL_LTDC_IRQHandler+0x6a>
 800574c:	07ab      	lsls	r3, r5, #30
 800574e:	d514      	bpl.n	800577a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005754:	f022 0202 	bic.w	r2, r2, #2
 8005758:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800575a:	2202      	movs	r2, #2
 800575c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800575e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005768:	2304      	movs	r3, #4
 800576a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800576e:	2300      	movs	r3, #0
 8005770:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005774:	4620      	mov	r0, r4
 8005776:	f7ff ffc9 	bl	800570c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800577a:	07f0      	lsls	r0, r6, #31
 800577c:	d510      	bpl.n	80057a0 <HAL_LTDC_IRQHandler+0x90>
 800577e:	07e9      	lsls	r1, r5, #31
 8005780:	d50e      	bpl.n	80057a0 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800578c:	2201      	movs	r2, #1
 800578e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8005790:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005792:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005796:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800579a:	4620      	mov	r0, r4
 800579c:	f7fc fea4 	bl	80024e8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80057a0:	0732      	lsls	r2, r6, #28
 80057a2:	d511      	bpl.n	80057c8 <HAL_LTDC_IRQHandler+0xb8>
 80057a4:	072b      	lsls	r3, r5, #28
 80057a6:	d50f      	bpl.n	80057c8 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ac:	f022 0208 	bic.w	r2, r2, #8
 80057b0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80057b2:	2208      	movs	r2, #8
 80057b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80057bc:	2300      	movs	r3, #0
 80057be:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7ff ffa3 	bl	800570e <HAL_LTDC_ReloadEventCallback>
}
 80057c8:	bd70      	pop	{r4, r5, r6, pc}

080057ca <HAL_LTDC_ConfigLayer>:
{
 80057ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80057ce:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80057d2:	2b01      	cmp	r3, #1
{
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	4694      	mov	ip, r2
 80057da:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80057de:	d01f      	beq.n	8005820 <HAL_LTDC_ConfigLayer+0x56>
 80057e0:	f04f 0801 	mov.w	r8, #1
 80057e4:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80057e8:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80057ec:	2434      	movs	r4, #52	@ 0x34
 80057ee:	460d      	mov	r5, r1
 80057f0:	fb04 6402 	mla	r4, r4, r2, r6
 80057f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057f6:	3438      	adds	r4, #56	@ 0x38
 80057f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005806:	4630      	mov	r0, r6
 8005808:	4662      	mov	r2, ip
 800580a:	4639      	mov	r1, r7
 800580c:	f7ff fe96 	bl	800553c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005810:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005812:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005814:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005818:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800581c:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8005820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005824 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005824:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 8005828:	2a01      	cmp	r2, #1
{
 800582a:	4603      	mov	r3, r0
 800582c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8005830:	d012      	beq.n	8005858 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005832:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005834:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005838:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800583a:	f020 0001 	bic.w	r0, r0, #1
 800583e:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005840:	4806      	ldr	r0, [pc, #24]	@ (800585c <HAL_LTDC_ProgramLineEvent+0x38>)
 8005842:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005844:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8005846:	f041 0101 	orr.w	r1, r1, #1
 800584a:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 800584c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800584e:	2201      	movs	r2, #1
 8005850:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8005854:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40016800 	.word	0x40016800

08005860 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005864:	4604      	mov	r4, r0
 8005866:	b340      	cbz	r0, 80058ba <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005868:	6803      	ldr	r3, [r0, #0]
 800586a:	07de      	lsls	r6, r3, #31
 800586c:	d410      	bmi.n	8005890 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	079d      	lsls	r5, r3, #30
 8005872:	d45b      	bmi.n	800592c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	0719      	lsls	r1, r3, #28
 8005878:	f100 809d 	bmi.w	80059b6 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	075a      	lsls	r2, r3, #29
 8005880:	f100 80bd 	bmi.w	80059fe <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005884:	69a3      	ldr	r3, [r4, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f040 8124 	bne.w	8005ad4 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800588c:	2000      	movs	r0, #0
 800588e:	e02c      	b.n	80058ea <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005890:	4b8d      	ldr	r3, [pc, #564]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	f002 020c 	and.w	r2, r2, #12
 8005898:	2a04      	cmp	r2, #4
 800589a:	d007      	beq.n	80058ac <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058a2:	2a08      	cmp	r2, #8
 80058a4:	d10b      	bne.n	80058be <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	0259      	lsls	r1, r3, #9
 80058aa:	d508      	bpl.n	80058be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ac:	4b86      	ldr	r3, [pc, #536]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	039a      	lsls	r2, r3, #14
 80058b2:	d5dc      	bpl.n	800586e <HAL_RCC_OscConfig+0xe>
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1d9      	bne.n	800586e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80058ba:	2001      	movs	r0, #1
 80058bc:	e015      	b.n	80058ea <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058be:	6863      	ldr	r3, [r4, #4]
 80058c0:	4d81      	ldr	r5, [pc, #516]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
 80058c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c6:	d113      	bne.n	80058f0 <HAL_RCC_OscConfig+0x90>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80058d0:	f7fe ff64 	bl	800479c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d4:	4e7c      	ldr	r6, [pc, #496]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80058d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d8:	6833      	ldr	r3, [r6, #0]
 80058da:	039b      	lsls	r3, r3, #14
 80058dc:	d4c7      	bmi.n	800586e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058de:	f7fe ff5d 	bl	800479c <HAL_GetTick>
 80058e2:	1b40      	subs	r0, r0, r5
 80058e4:	2864      	cmp	r0, #100	@ 0x64
 80058e6:	d9f7      	bls.n	80058d8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80058e8:	2003      	movs	r0, #3
}
 80058ea:	b002      	add	sp, #8
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058f4:	d104      	bne.n	8005900 <HAL_RCC_OscConfig+0xa0>
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058fc:	602b      	str	r3, [r5, #0]
 80058fe:	e7e3      	b.n	80058c8 <HAL_RCC_OscConfig+0x68>
 8005900:	682a      	ldr	r2, [r5, #0]
 8005902:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005906:	602a      	str	r2, [r5, #0]
 8005908:	682a      	ldr	r2, [r5, #0]
 800590a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800590e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1dd      	bne.n	80058d0 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8005914:	f7fe ff42 	bl	800479c <HAL_GetTick>
 8005918:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591a:	682b      	ldr	r3, [r5, #0]
 800591c:	039f      	lsls	r7, r3, #14
 800591e:	d5a6      	bpl.n	800586e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005920:	f7fe ff3c 	bl	800479c <HAL_GetTick>
 8005924:	1b80      	subs	r0, r0, r6
 8005926:	2864      	cmp	r0, #100	@ 0x64
 8005928:	d9f7      	bls.n	800591a <HAL_RCC_OscConfig+0xba>
 800592a:	e7dd      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800592c:	4b66      	ldr	r3, [pc, #408]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	f012 0f0c 	tst.w	r2, #12
 8005934:	d007      	beq.n	8005946 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800593c:	2a08      	cmp	r2, #8
 800593e:	d111      	bne.n	8005964 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	025d      	lsls	r5, r3, #9
 8005944:	d40e      	bmi.n	8005964 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005946:	4a60      	ldr	r2, [pc, #384]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	0799      	lsls	r1, r3, #30
 800594c:	d502      	bpl.n	8005954 <HAL_RCC_OscConfig+0xf4>
 800594e:	68e3      	ldr	r3, [r4, #12]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d1b2      	bne.n	80058ba <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005954:	6813      	ldr	r3, [r2, #0]
 8005956:	6921      	ldr	r1, [r4, #16]
 8005958:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800595c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005960:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005962:	e787      	b.n	8005874 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005964:	68e2      	ldr	r2, [r4, #12]
 8005966:	4b59      	ldr	r3, [pc, #356]	@ (8005acc <HAL_RCC_OscConfig+0x26c>)
 8005968:	b1b2      	cbz	r2, 8005998 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800596e:	f7fe ff15 	bl	800479c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005972:	4d55      	ldr	r5, [pc, #340]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005974:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005976:	682b      	ldr	r3, [r5, #0]
 8005978:	079b      	lsls	r3, r3, #30
 800597a:	d507      	bpl.n	800598c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	6922      	ldr	r2, [r4, #16]
 8005980:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005984:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005988:	602b      	str	r3, [r5, #0]
 800598a:	e773      	b.n	8005874 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800598c:	f7fe ff06 	bl	800479c <HAL_GetTick>
 8005990:	1b80      	subs	r0, r0, r6
 8005992:	2802      	cmp	r0, #2
 8005994:	d9ef      	bls.n	8005976 <HAL_RCC_OscConfig+0x116>
 8005996:	e7a7      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005998:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800599a:	f7fe feff 	bl	800479c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599e:	4e4a      	ldr	r6, [pc, #296]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80059a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a2:	6833      	ldr	r3, [r6, #0]
 80059a4:	079f      	lsls	r7, r3, #30
 80059a6:	f57f af65 	bpl.w	8005874 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059aa:	f7fe fef7 	bl	800479c <HAL_GetTick>
 80059ae:	1b40      	subs	r0, r0, r5
 80059b0:	2802      	cmp	r0, #2
 80059b2:	d9f6      	bls.n	80059a2 <HAL_RCC_OscConfig+0x142>
 80059b4:	e798      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059b6:	6962      	ldr	r2, [r4, #20]
 80059b8:	4b44      	ldr	r3, [pc, #272]	@ (8005acc <HAL_RCC_OscConfig+0x26c>)
 80059ba:	b182      	cbz	r2, 80059de <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80059bc:	2201      	movs	r2, #1
 80059be:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80059c2:	f7fe feeb 	bl	800479c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c6:	4e40      	ldr	r6, [pc, #256]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80059c8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ca:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80059cc:	079b      	lsls	r3, r3, #30
 80059ce:	f53f af55 	bmi.w	800587c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059d2:	f7fe fee3 	bl	800479c <HAL_GetTick>
 80059d6:	1b40      	subs	r0, r0, r5
 80059d8:	2802      	cmp	r0, #2
 80059da:	d9f6      	bls.n	80059ca <HAL_RCC_OscConfig+0x16a>
 80059dc:	e784      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80059de:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80059e2:	f7fe fedb 	bl	800479c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e6:	4e38      	ldr	r6, [pc, #224]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80059e8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ea:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80059ec:	079f      	lsls	r7, r3, #30
 80059ee:	f57f af45 	bpl.w	800587c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059f2:	f7fe fed3 	bl	800479c <HAL_GetTick>
 80059f6:	1b40      	subs	r0, r0, r5
 80059f8:	2802      	cmp	r0, #2
 80059fa:	d9f6      	bls.n	80059ea <HAL_RCC_OscConfig+0x18a>
 80059fc:	e774      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059fe:	4b32      	ldr	r3, [pc, #200]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
 8005a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a02:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8005a06:	d128      	bne.n	8005a5a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a08:	9201      	str	r2, [sp, #4]
 8005a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a0c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005a10:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005a1c:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1e:	4d2c      	ldr	r5, [pc, #176]	@ (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	05d8      	lsls	r0, r3, #23
 8005a24:	d51b      	bpl.n	8005a5e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a26:	68a3      	ldr	r3, [r4, #8]
 8005a28:	4d27      	ldr	r5, [pc, #156]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d127      	bne.n	8005a7e <HAL_RCC_OscConfig+0x21e>
 8005a2e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005a36:	f7fe feb1 	bl	800479c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3a:	4e23      	ldr	r6, [pc, #140]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005a3c:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a3e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a42:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005a44:	079a      	lsls	r2, r3, #30
 8005a46:	d539      	bpl.n	8005abc <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8005a48:	2f00      	cmp	r7, #0
 8005a4a:	f43f af1b 	beq.w	8005884 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac8 <HAL_RCC_OscConfig+0x268>)
 8005a50:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a58:	e714      	b.n	8005884 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005a5a:	2700      	movs	r7, #0
 8005a5c:	e7df      	b.n	8005a1e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a64:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005a66:	f7fe fe99 	bl	800479c <HAL_GetTick>
 8005a6a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	05d9      	lsls	r1, r3, #23
 8005a70:	d4d9      	bmi.n	8005a26 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a72:	f7fe fe93 	bl	800479c <HAL_GetTick>
 8005a76:	1b80      	subs	r0, r0, r6
 8005a78:	2802      	cmp	r0, #2
 8005a7a:	d9f7      	bls.n	8005a6c <HAL_RCC_OscConfig+0x20c>
 8005a7c:	e734      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a7e:	2b05      	cmp	r3, #5
 8005a80:	d104      	bne.n	8005a8c <HAL_RCC_OscConfig+0x22c>
 8005a82:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005a84:	f043 0304 	orr.w	r3, r3, #4
 8005a88:	672b      	str	r3, [r5, #112]	@ 0x70
 8005a8a:	e7d0      	b.n	8005a2e <HAL_RCC_OscConfig+0x1ce>
 8005a8c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005a8e:	f022 0201 	bic.w	r2, r2, #1
 8005a92:	672a      	str	r2, [r5, #112]	@ 0x70
 8005a94:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005a96:	f022 0204 	bic.w	r2, r2, #4
 8005a9a:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1ca      	bne.n	8005a36 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005aa0:	f7fe fe7c 	bl	800479c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005aa8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aaa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005aac:	079b      	lsls	r3, r3, #30
 8005aae:	d5cb      	bpl.n	8005a48 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab0:	f7fe fe74 	bl	800479c <HAL_GetTick>
 8005ab4:	1b80      	subs	r0, r0, r6
 8005ab6:	4540      	cmp	r0, r8
 8005ab8:	d9f7      	bls.n	8005aaa <HAL_RCC_OscConfig+0x24a>
 8005aba:	e715      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abc:	f7fe fe6e 	bl	800479c <HAL_GetTick>
 8005ac0:	1b40      	subs	r0, r0, r5
 8005ac2:	4540      	cmp	r0, r8
 8005ac4:	d9bd      	bls.n	8005a42 <HAL_RCC_OscConfig+0x1e2>
 8005ac6:	e70f      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	42470000 	.word	0x42470000
 8005ad0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ad4:	4d37      	ldr	r5, [pc, #220]	@ (8005bb4 <HAL_RCC_OscConfig+0x354>)
 8005ad6:	68aa      	ldr	r2, [r5, #8]
 8005ad8:	f002 020c 	and.w	r2, r2, #12
 8005adc:	2a08      	cmp	r2, #8
 8005ade:	d03e      	beq.n	8005b5e <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	4b35      	ldr	r3, [pc, #212]	@ (8005bb8 <HAL_RCC_OscConfig+0x358>)
 8005ae4:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8005ae8:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aea:	d12b      	bne.n	8005b44 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8005aec:	f7fe fe56 	bl	800479c <HAL_GetTick>
 8005af0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	0199      	lsls	r1, r3, #6
 8005af6:	d41f      	bmi.n	8005b38 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005af8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005b00:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005b04:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005b06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005b0a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005b0c:	0852      	lsrs	r2, r2, #1
 8005b0e:	3a01      	subs	r2, #1
 8005b10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b14:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005b16:	4b28      	ldr	r3, [pc, #160]	@ (8005bb8 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b18:	4d26      	ldr	r5, [pc, #152]	@ (8005bb4 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005b1e:	f7fe fe3d 	bl	800479c <HAL_GetTick>
 8005b22:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	019a      	lsls	r2, r3, #6
 8005b28:	f53f aeb0 	bmi.w	800588c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fe fe36 	bl	800479c <HAL_GetTick>
 8005b30:	1b00      	subs	r0, r0, r4
 8005b32:	2802      	cmp	r0, #2
 8005b34:	d9f6      	bls.n	8005b24 <HAL_RCC_OscConfig+0x2c4>
 8005b36:	e6d7      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fe fe30 	bl	800479c <HAL_GetTick>
 8005b3c:	1b80      	subs	r0, r0, r6
 8005b3e:	2802      	cmp	r0, #2
 8005b40:	d9d7      	bls.n	8005af2 <HAL_RCC_OscConfig+0x292>
 8005b42:	e6d1      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8005b44:	f7fe fe2a 	bl	800479c <HAL_GetTick>
 8005b48:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	f57f ae9d 	bpl.w	800588c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b52:	f7fe fe23 	bl	800479c <HAL_GetTick>
 8005b56:	1b00      	subs	r0, r0, r4
 8005b58:	2802      	cmp	r0, #2
 8005b5a:	d9f6      	bls.n	8005b4a <HAL_RCC_OscConfig+0x2ea>
 8005b5c:	e6c4      	b.n	80058e8 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	f43f aeab 	beq.w	80058ba <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8005b64:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b66:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b68:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6c:	4291      	cmp	r1, r2
 8005b6e:	f47f aea4 	bne.w	80058ba <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b72:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b74:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b78:	428a      	cmp	r2, r1
 8005b7a:	f47f ae9e 	bne.w	80058ba <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b7e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b80:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005b84:	401a      	ands	r2, r3
 8005b86:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005b8a:	f47f ae96 	bne.w	80058ba <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b8e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005b90:	0852      	lsrs	r2, r2, #1
 8005b92:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005b96:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b98:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005b9c:	f47f ae8d 	bne.w	80058ba <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ba0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005ba2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ba6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005baa:	bf14      	ite	ne
 8005bac:	2001      	movne	r0, #1
 8005bae:	2000      	moveq	r0, #0
 8005bb0:	e69b      	b.n	80058ea <HAL_RCC_OscConfig+0x8a>
 8005bb2:	bf00      	nop
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	42470000 	.word	0x42470000

08005bbc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bbc:	4913      	ldr	r1, [pc, #76]	@ (8005c0c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005bbe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc0:	688b      	ldr	r3, [r1, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d01c      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x48>
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d11c      	bne.n	8005c08 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bd0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bd4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd8:	bf14      	ite	ne
 8005bda:	480d      	ldrne	r0, [pc, #52]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bdc:	480d      	ldreq	r0, [pc, #52]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bde:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005be2:	bf18      	it	ne
 8005be4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bea:	fba1 0100 	umull	r0, r1, r1, r0
 8005bee:	f7fa fb4f 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bf2:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <HAL_RCC_GetSysClockFreq+0x50>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005bfe:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005c02:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c04:	4802      	ldr	r0, [pc, #8]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x54>)
 8005c06:	e7fc      	b.n	8005c02 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8005c08:	4802      	ldr	r0, [pc, #8]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005c0a:	e7fa      	b.n	8005c02 <HAL_RCC_GetSysClockFreq+0x46>
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	007a1200 	.word	0x007a1200
 8005c14:	00f42400 	.word	0x00f42400

08005c18 <HAL_RCC_ClockConfig>:
{
 8005c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005c1e:	4604      	mov	r4, r0
 8005c20:	b910      	cbnz	r0, 8005c28 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005c22:	2001      	movs	r0, #1
}
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c28:	4b43      	ldr	r3, [pc, #268]	@ (8005d38 <HAL_RCC_ClockConfig+0x120>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f002 020f 	and.w	r2, r2, #15
 8005c30:	428a      	cmp	r2, r1
 8005c32:	d328      	bcc.n	8005c86 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c34:	6821      	ldr	r1, [r4, #0]
 8005c36:	078f      	lsls	r7, r1, #30
 8005c38:	d42d      	bmi.n	8005c96 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3a:	07c8      	lsls	r0, r1, #31
 8005c3c:	d440      	bmi.n	8005cc0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d38 <HAL_RCC_ClockConfig+0x120>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	f002 020f 	and.w	r2, r2, #15
 8005c46:	42aa      	cmp	r2, r5
 8005c48:	d865      	bhi.n	8005d16 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	0751      	lsls	r1, r2, #29
 8005c4e:	d46b      	bmi.n	8005d28 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	0713      	lsls	r3, r2, #28
 8005c52:	d507      	bpl.n	8005c64 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c54:	4a39      	ldr	r2, [pc, #228]	@ (8005d3c <HAL_RCC_ClockConfig+0x124>)
 8005c56:	6921      	ldr	r1, [r4, #16]
 8005c58:	6893      	ldr	r3, [r2, #8]
 8005c5a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005c5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c62:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c64:	f7ff ffaa 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 8005c68:	4b34      	ldr	r3, [pc, #208]	@ (8005d3c <HAL_RCC_ClockConfig+0x124>)
 8005c6a:	4a35      	ldr	r2, [pc, #212]	@ (8005d40 <HAL_RCC_ClockConfig+0x128>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c72:	5cd3      	ldrb	r3, [r2, r3]
 8005c74:	40d8      	lsrs	r0, r3
 8005c76:	4b33      	ldr	r3, [pc, #204]	@ (8005d44 <HAL_RCC_ClockConfig+0x12c>)
 8005c78:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005c7a:	4b33      	ldr	r3, [pc, #204]	@ (8005d48 <HAL_RCC_ClockConfig+0x130>)
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	f7fb fd71 	bl	8001764 <HAL_InitTick>
  return HAL_OK;
 8005c82:	2000      	movs	r0, #0
 8005c84:	e7ce      	b.n	8005c24 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c86:	b2ca      	uxtb	r2, r1
 8005c88:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	428b      	cmp	r3, r1
 8005c92:	d1c6      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xa>
 8005c94:	e7ce      	b.n	8005c34 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c96:	4b29      	ldr	r3, [pc, #164]	@ (8005d3c <HAL_RCC_ClockConfig+0x124>)
 8005c98:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c9c:	bf1e      	ittt	ne
 8005c9e:	689a      	ldrne	r2, [r3, #8]
 8005ca0:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8005ca4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ca8:	bf42      	ittt	mi
 8005caa:	689a      	ldrmi	r2, [r3, #8]
 8005cac:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005cb0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	68a0      	ldr	r0, [r4, #8]
 8005cb6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005cba:	4302      	orrs	r2, r0
 8005cbc:	609a      	str	r2, [r3, #8]
 8005cbe:	e7bc      	b.n	8005c3a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc0:	6862      	ldr	r2, [r4, #4]
 8005cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d3c <HAL_RCC_ClockConfig+0x124>)
 8005cc4:	2a01      	cmp	r2, #1
 8005cc6:	d11c      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cce:	d0a8      	beq.n	8005c22 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cd0:	4e1a      	ldr	r6, [pc, #104]	@ (8005d3c <HAL_RCC_ClockConfig+0x124>)
 8005cd2:	68b3      	ldr	r3, [r6, #8]
 8005cd4:	f023 0303 	bic.w	r3, r3, #3
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005cdc:	f7fe fd5e 	bl	800479c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce0:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005ce4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce6:	68b3      	ldr	r3, [r6, #8]
 8005ce8:	6862      	ldr	r2, [r4, #4]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005cf2:	d0a4      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f7fe fd52 	bl	800479c <HAL_GetTick>
 8005cf8:	1bc0      	subs	r0, r0, r7
 8005cfa:	4540      	cmp	r0, r8
 8005cfc:	d9f3      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8005cfe:	2003      	movs	r0, #3
 8005d00:	e790      	b.n	8005c24 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d02:	1e91      	subs	r1, r2, #2
 8005d04:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d06:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d08:	d802      	bhi.n	8005d10 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d0a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d0e:	e7de      	b.n	8005cce <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d10:	f013 0f02 	tst.w	r3, #2
 8005d14:	e7db      	b.n	8005cce <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d16:	b2ea      	uxtb	r2, r5
 8005d18:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	42ab      	cmp	r3, r5
 8005d22:	f47f af7e 	bne.w	8005c22 <HAL_RCC_ClockConfig+0xa>
 8005d26:	e790      	b.n	8005c4a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d28:	4904      	ldr	r1, [pc, #16]	@ (8005d3c <HAL_RCC_ClockConfig+0x124>)
 8005d2a:	68e0      	ldr	r0, [r4, #12]
 8005d2c:	688b      	ldr	r3, [r1, #8]
 8005d2e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005d32:	4303      	orrs	r3, r0
 8005d34:	608b      	str	r3, [r1, #8]
 8005d36:	e78b      	b.n	8005c50 <HAL_RCC_ClockConfig+0x38>
 8005d38:	40023c00 	.word	0x40023c00
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	08015480 	.word	0x08015480
 8005d44:	20000074 	.word	0x20000074
 8005d48:	2000007c 	.word	0x2000007c

08005d4c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d4c:	4b04      	ldr	r3, [pc, #16]	@ (8005d60 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005d4e:	4a05      	ldr	r2, [pc, #20]	@ (8005d64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005d56:	5cd3      	ldrb	r3, [r2, r3]
 8005d58:	4a03      	ldr	r2, [pc, #12]	@ (8005d68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005d5a:	6810      	ldr	r0, [r2, #0]
}
 8005d5c:	40d8      	lsrs	r0, r3
 8005d5e:	4770      	bx	lr
 8005d60:	40023800 	.word	0x40023800
 8005d64:	08015478 	.word	0x08015478
 8005d68:	20000074 	.word	0x20000074

08005d6c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d6c:	4b04      	ldr	r3, [pc, #16]	@ (8005d80 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005d6e:	4a05      	ldr	r2, [pc, #20]	@ (8005d84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005d76:	5cd3      	ldrb	r3, [r2, r3]
 8005d78:	4a03      	ldr	r2, [pc, #12]	@ (8005d88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005d7a:	6810      	ldr	r0, [r2, #0]
}
 8005d7c:	40d8      	lsrs	r0, r3
 8005d7e:	4770      	bx	lr
 8005d80:	40023800 	.word	0x40023800
 8005d84:	08015478 	.word	0x08015478
 8005d88:	20000074 	.word	0x20000074

08005d8c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d8c:	230f      	movs	r3, #15
 8005d8e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <HAL_RCC_GetClockConfig+0x34>)
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	f002 0203 	and.w	r2, r2, #3
 8005d98:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005da0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005da8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	08db      	lsrs	r3, r3, #3
 8005dae:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005db2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005db4:	4b03      	ldr	r3, [pc, #12]	@ (8005dc4 <HAL_RCC_GetClockConfig+0x38>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	600b      	str	r3, [r1, #0]
}
 8005dbe:	4770      	bx	lr
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	40023c00 	.word	0x40023c00

08005dc8 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005dc8:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dca:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8005dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dd0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dd2:	f040 8088 	bne.w	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	f013 0f0c 	tst.w	r3, #12
 8005ddc:	d045      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005dde:	4b8c      	ldr	r3, [pc, #560]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005de0:	4d8c      	ldr	r5, [pc, #560]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005de2:	2200      	movs	r2, #0
 8005de4:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005de6:	f7fe fcd9 	bl	800479c <HAL_GetTick>
 8005dea:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	0099      	lsls	r1, r3, #2
 8005df0:	f100 80cb 	bmi.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005df4:	6821      	ldr	r1, [r4, #0]
 8005df6:	074a      	lsls	r2, r1, #29
 8005df8:	d515      	bpl.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005dfa:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005dfe:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e02:	061b      	lsls	r3, r3, #24
 8005e04:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8005e08:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e12:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8005e16:	6a22      	ldr	r2, [r4, #32]
 8005e18:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e22:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e26:	070b      	lsls	r3, r1, #28
 8005e28:	d514      	bpl.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e2a:	4a7a      	ldr	r2, [pc, #488]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e2c:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e2e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e32:	6920      	ldr	r0, [r4, #16]
 8005e34:	071b      	lsls	r3, r3, #28
 8005e36:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005e3a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e44:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005e48:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005e4a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e54:	4b6e      	ldr	r3, [pc, #440]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e56:	4e6f      	ldr	r6, [pc, #444]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005e58:	2201      	movs	r2, #1
 8005e5a:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005e5c:	f7fe fc9e 	bl	800479c <HAL_GetTick>
 8005e60:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e62:	6833      	ldr	r3, [r6, #0]
 8005e64:	009f      	lsls	r7, r3, #2
 8005e66:	f140 8097 	bpl.w	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	0698      	lsls	r0, r3, #26
 8005e6e:	d534      	bpl.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e70:	2300      	movs	r3, #0
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	4b67      	ldr	r3, [pc, #412]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e76:	4d68      	ldr	r5, [pc, #416]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e7a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005e8a:	682b      	ldr	r3, [r5, #0]
 8005e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e90:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e92:	f7fe fc83 	bl	800479c <HAL_GetTick>
 8005e96:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	05d8      	lsls	r0, r3, #23
 8005e9c:	f140 8083 	bpl.w	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ea0:	4d5c      	ldr	r5, [pc, #368]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ea2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ea4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ea6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005eaa:	f040 8083 	bne.w	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005eb0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005eb4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005eb8:	4a56      	ldr	r2, [pc, #344]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005eba:	f040 809e 	bne.w	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005ebe:	6891      	ldr	r1, [r2, #8]
 8005ec0:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8005ec4:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005ec8:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005ecc:	4301      	orrs	r1, r0
 8005ece:	6091      	str	r1, [r2, #8]
 8005ed0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	06db      	lsls	r3, r3, #27
 8005ede:	f100 8090 	bmi.w	8006002 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	e04f      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ee8:	4e4a      	ldr	r6, [pc, #296]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8005eea:	2200      	movs	r2, #0
 8005eec:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005eee:	f7fe fc55 	bl	800479c <HAL_GetTick>
 8005ef2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ef4:	6833      	ldr	r3, [r6, #0]
 8005ef6:	011f      	lsls	r7, r3, #4
 8005ef8:	d43f      	bmi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005efa:	6821      	ldr	r1, [r4, #0]
 8005efc:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005efe:	bf41      	itttt	mi
 8005f00:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8005f04:	071b      	lslmi	r3, r3, #28
 8005f06:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8005f0a:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f0e:	078a      	lsls	r2, r1, #30
 8005f10:	d515      	bpl.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f12:	4a40      	ldr	r2, [pc, #256]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f14:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f16:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f1a:	6865      	ldr	r5, [r4, #4]
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005f22:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005f26:	4303      	orrs	r3, r0
 8005f28:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f2c:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8005f30:	69e3      	ldr	r3, [r4, #28]
 8005f32:	f020 001f 	bic.w	r0, r0, #31
 8005f36:	3b01      	subs	r3, #1
 8005f38:	4303      	orrs	r3, r0
 8005f3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f3e:	064b      	lsls	r3, r1, #25
 8005f40:	d50a      	bpl.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6862      	ldr	r2, [r4, #4]
 8005f46:	061b      	lsls	r3, r3, #24
 8005f48:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005f4c:	68a2      	ldr	r2, [r4, #8]
 8005f4e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005f52:	4a30      	ldr	r2, [pc, #192]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f54:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005f58:	4b2d      	ldr	r3, [pc, #180]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f5a:	4e2e      	ldr	r6, [pc, #184]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005f60:	f7fe fc1c 	bl	800479c <HAL_GetTick>
 8005f64:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f66:	6833      	ldr	r3, [r6, #0]
 8005f68:	011f      	lsls	r7, r3, #4
 8005f6a:	f53f af34 	bmi.w	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f6e:	f7fe fc15 	bl	800479c <HAL_GetTick>
 8005f72:	1b40      	subs	r0, r0, r5
 8005f74:	2802      	cmp	r0, #2
 8005f76:	d9f6      	bls.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005f78:	e004      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f7a:	f7fe fc0f 	bl	800479c <HAL_GetTick>
 8005f7e:	1b40      	subs	r0, r0, r5
 8005f80:	2802      	cmp	r0, #2
 8005f82:	d9b7      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8005f84:	2003      	movs	r0, #3
}
 8005f86:	b003      	add	sp, #12
 8005f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f8a:	f7fe fc07 	bl	800479c <HAL_GetTick>
 8005f8e:	1b80      	subs	r0, r0, r6
 8005f90:	2802      	cmp	r0, #2
 8005f92:	f67f af2b 	bls.w	8005dec <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005f96:	e7f5      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f98:	f7fe fc00 	bl	800479c <HAL_GetTick>
 8005f9c:	1b40      	subs	r0, r0, r5
 8005f9e:	2802      	cmp	r0, #2
 8005fa0:	f67f af5f 	bls.w	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8005fa4:	e7ee      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fa6:	f7fe fbf9 	bl	800479c <HAL_GetTick>
 8005faa:	1b80      	subs	r0, r0, r6
 8005fac:	2802      	cmp	r0, #2
 8005fae:	f67f af73 	bls.w	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8005fb2:	e7e7      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fb4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	f43f af78 	beq.w	8005eae <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fbe:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fc0:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8005fd2:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fd4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005fd6:	07d9      	lsls	r1, r3, #31
 8005fd8:	f57f af69 	bpl.w	8005eae <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8005fdc:	f7fe fbde 	bl	800479c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe0:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005fe4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005fe8:	079a      	lsls	r2, r3, #30
 8005fea:	f53f af60 	bmi.w	8005eae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fee:	f7fe fbd5 	bl	800479c <HAL_GetTick>
 8005ff2:	1b80      	subs	r0, r0, r6
 8005ff4:	42b8      	cmp	r0, r7
 8005ff6:	d9f6      	bls.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005ff8:	e7c4      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ffa:	6891      	ldr	r1, [r2, #8]
 8005ffc:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8006000:	e765      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006002:	4b06      	ldr	r3, [pc, #24]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006004:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8006008:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 800600c:	e769      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800600e:	bf00      	nop
 8006010:	42470000 	.word	0x42470000
 8006014:	40023800 	.word	0x40023800
 8006018:	40007000 	.word	0x40007000
 800601c:	42471000 	.word	0x42471000

08006020 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006024:	4604      	mov	r4, r0
 8006026:	b1c8      	cbz	r0, 800605c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006028:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800602c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006030:	b91b      	cbnz	r3, 800603a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006032:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006036:	f7fb faf3 	bl	8001620 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800603a:	2302      	movs	r3, #2
 800603c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006040:	1d21      	adds	r1, r4, #4
 8006042:	6820      	ldr	r0, [r4, #0]
 8006044:	f000 fe21 	bl	8006c8a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006048:	6862      	ldr	r2, [r4, #4]
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	4629      	mov	r1, r5
 800604e:	f000 fe52 	bl	8006cf6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006052:	2301      	movs	r3, #1
 8006054:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8006058:	2000      	movs	r0, #0
}
 800605a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800605c:	2001      	movs	r0, #1
 800605e:	e7fc      	b.n	800605a <HAL_SDRAM_Init+0x3a>

08006060 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006060:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006062:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006066:	2b02      	cmp	r3, #2
{
 8006068:	4605      	mov	r5, r0
 800606a:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800606c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800606e:	d012      	beq.n	8006096 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006070:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8006074:	2c01      	cmp	r4, #1
 8006076:	d10f      	bne.n	8006098 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006078:	2302      	movs	r3, #2
 800607a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800607e:	6828      	ldr	r0, [r5, #0]
 8006080:	f000 fe6f 	bl	8006d62 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006084:	6833      	ldr	r3, [r6, #0]
 8006086:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006088:	bf06      	itte	eq
 800608a:	2305      	moveq	r3, #5
 800608c:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006090:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006094:	2000      	movs	r0, #0
}
 8006096:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006098:	2001      	movs	r0, #1
 800609a:	e7fc      	b.n	8006096 <HAL_SDRAM_SendCommand+0x36>

0800609c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800609c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800609e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80060a2:	2b02      	cmp	r3, #2
{
 80060a4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80060a6:	b2d8      	uxtb	r0, r3
 80060a8:	d00d      	beq.n	80060c6 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80060aa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	b2dd      	uxtb	r5, r3
 80060b2:	d109      	bne.n	80060c8 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060b4:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80060b6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060b8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80060bc:	f000 fe75 	bl	8006daa <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80060c0:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80060c4:	2000      	movs	r0, #0
}
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80060c8:	2001      	movs	r0, #1
 80060ca:	e7fc      	b.n	80060c6 <HAL_SDRAM_ProgramRefreshRate+0x2a>

080060cc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80060cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060d0:	461c      	mov	r4, r3
 80060d2:	4616      	mov	r6, r2
 80060d4:	460f      	mov	r7, r1
 80060d6:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060d8:	f7fe fb60 	bl	800479c <HAL_GetTick>
 80060dc:	4434      	add	r4, r6
 80060de:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80060e0:	f7fe fb5c 	bl	800479c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060e4:	4b24      	ldr	r3, [pc, #144]	@ (8006178 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80060ec:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80060ee:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060f0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060f2:	682a      	ldr	r2, [r5, #0]
 80060f4:	6893      	ldr	r3, [r2, #8]
 80060f6:	ea37 0303 	bics.w	r3, r7, r3
 80060fa:	d001      	beq.n	8006100 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 80060fc:	2000      	movs	r0, #0
 80060fe:	e02e      	b.n	800615e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8006100:	1c73      	adds	r3, r6, #1
 8006102:	d0f7      	beq.n	80060f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006104:	f7fe fb4a 	bl	800479c <HAL_GetTick>
 8006108:	eba0 0008 	sub.w	r0, r0, r8
 800610c:	42a0      	cmp	r0, r4
 800610e:	d329      	bcc.n	8006164 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006118:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800611a:	686a      	ldr	r2, [r5, #4]
 800611c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006120:	d10a      	bne.n	8006138 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8006122:	68aa      	ldr	r2, [r5, #8]
 8006124:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006128:	d002      	beq.n	8006130 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800612a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800612e:	d103      	bne.n	8006138 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006136:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006138:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800613a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800613e:	d107      	bne.n	8006150 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800614e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006150:	2301      	movs	r3, #1
 8006152:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006156:	2300      	movs	r3, #0
 8006158:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 800615c:	2003      	movs	r0, #3
}
 800615e:	b002      	add	sp, #8
 8006160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8006164:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006166:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006168:	2a00      	cmp	r2, #0
      count--;
 800616a:	f103 33ff 	add.w	r3, r3, #4294967295
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	bf08      	it	eq
 8006172:	4614      	moveq	r4, r2
 8006174:	e7bd      	b.n	80060f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8006176:	bf00      	nop
 8006178:	20000074 	.word	0x20000074

0800617c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006180:	6842      	ldr	r2, [r0, #4]
 8006182:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8006186:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006188:	d006      	beq.n	8006198 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800618a:	460a      	mov	r2, r1
 800618c:	2101      	movs	r1, #1
 800618e:	f7ff ff9d 	bl	80060cc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006192:	b9b8      	cbnz	r0, 80061c4 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006194:	2000      	movs	r0, #0
}
 8006196:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006198:	6882      	ldr	r2, [r0, #8]
 800619a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800619e:	d002      	beq.n	80061a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061a0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80061a4:	d107      	bne.n	80061b6 <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 80061a6:	6825      	ldr	r5, [r4, #0]
 80061a8:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061aa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 80061ae:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80061b2:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061b4:	d003      	beq.n	80061be <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061b6:	460a      	mov	r2, r1
 80061b8:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061ba:	4620      	mov	r0, r4
 80061bc:	e7e7      	b.n	800618e <SPI_EndRxTransaction+0x12>
 80061be:	460a      	mov	r2, r1
 80061c0:	2101      	movs	r1, #1
 80061c2:	e7fa      	b.n	80061ba <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80061c6:	f043 0320 	orr.w	r3, r3, #32
 80061ca:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80061cc:	2003      	movs	r0, #3
 80061ce:	e7e2      	b.n	8006196 <SPI_EndRxTransaction+0x1a>

080061d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061d2:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061d4:	4a12      	ldr	r2, [pc, #72]	@ (8006220 <SPI_EndRxTxTransaction+0x50>)
 80061d6:	6815      	ldr	r5, [r2, #0]
 80061d8:	4a12      	ldr	r2, [pc, #72]	@ (8006224 <SPI_EndRxTxTransaction+0x54>)
 80061da:	fbb5 f5f2 	udiv	r5, r5, r2
 80061de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061e2:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061e4:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061e6:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061e8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 80061ec:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ee:	d10b      	bne.n	8006208 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061f0:	460a      	mov	r2, r1
 80061f2:	2180      	movs	r1, #128	@ 0x80
 80061f4:	f7ff ff6a 	bl	80060cc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80061f8:	b178      	cbz	r0, 800621a <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80061fc:	f043 0320 	orr.w	r3, r3, #32
 8006200:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006202:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8006204:	b003      	add	sp, #12
 8006206:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	b133      	cbz	r3, 800621a <SPI_EndRxTxTransaction+0x4a>
      count--;
 800620c:	9b01      	ldr	r3, [sp, #4]
 800620e:	3b01      	subs	r3, #1
 8006210:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	d4f6      	bmi.n	8006208 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 800621a:	2000      	movs	r0, #0
 800621c:	e7f2      	b.n	8006204 <SPI_EndRxTxTransaction+0x34>
 800621e:	bf00      	nop
 8006220:	20000074 	.word	0x20000074
 8006224:	016e3600 	.word	0x016e3600

08006228 <HAL_SPI_Init>:
{
 8006228:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800622a:	4604      	mov	r4, r0
 800622c:	2800      	cmp	r0, #0
 800622e:	d055      	beq.n	80062dc <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006230:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d14e      	bne.n	80062d4 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006236:	6842      	ldr	r2, [r0, #4]
 8006238:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800623c:	d000      	beq.n	8006240 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800623e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006240:	2300      	movs	r3, #0
 8006242:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006244:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006248:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800624c:	b923      	cbnz	r3, 8006258 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800624e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006252:	4620      	mov	r0, r4
 8006254:	f7fb f9ae 	bl	80015b4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006258:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800625a:	68a0      	ldr	r0, [r4, #8]
 800625c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800625e:	2302      	movs	r3, #2
 8006260:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8006264:	680b      	ldr	r3, [r1, #0]
 8006266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800626a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8006272:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006276:	4303      	orrs	r3, r0
 8006278:	68e0      	ldr	r0, [r4, #12]
 800627a:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800627e:	4303      	orrs	r3, r0
 8006280:	6920      	ldr	r0, [r4, #16]
 8006282:	f000 0002 	and.w	r0, r0, #2
 8006286:	4303      	orrs	r3, r0
 8006288:	6960      	ldr	r0, [r4, #20]
 800628a:	f000 0001 	and.w	r0, r0, #1
 800628e:	4303      	orrs	r3, r0
 8006290:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8006294:	4303      	orrs	r3, r0
 8006296:	69e0      	ldr	r0, [r4, #28]
 8006298:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800629c:	4303      	orrs	r3, r0
 800629e:	6a20      	ldr	r0, [r4, #32]
 80062a0:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80062a4:	4303      	orrs	r3, r0
 80062a6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80062a8:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80062ac:	4303      	orrs	r3, r0
 80062ae:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062b2:	0c12      	lsrs	r2, r2, #16
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	f002 0204 	and.w	r2, r2, #4
 80062bc:	431a      	orrs	r2, r3
 80062be:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062c0:	69cb      	ldr	r3, [r1, #28]
 80062c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062c6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062c8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80062ca:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062cc:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062ce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80062d2:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062d4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062da:	e7b1      	b.n	8006240 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80062dc:	2001      	movs	r0, #1
 80062de:	e7f8      	b.n	80062d2 <HAL_SPI_Init+0xaa>

080062e0 <HAL_SPI_Transmit>:
{
 80062e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062e4:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80062e6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80062ea:	2b01      	cmp	r3, #1
{
 80062ec:	4604      	mov	r4, r0
 80062ee:	460d      	mov	r5, r1
 80062f0:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80062f2:	f000 80a0 	beq.w	8006436 <HAL_SPI_Transmit+0x156>
 80062f6:	2301      	movs	r3, #1
 80062f8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80062fc:	f7fe fa4e 	bl	800479c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006300:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006304:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006306:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006308:	b2d8      	uxtb	r0, r3
 800630a:	f040 8092 	bne.w	8006432 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 800630e:	2d00      	cmp	r5, #0
 8006310:	d061      	beq.n	80063d6 <HAL_SPI_Transmit+0xf6>
 8006312:	f1b8 0f00 	cmp.w	r8, #0
 8006316:	d05e      	beq.n	80063d6 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006318:	2303      	movs	r3, #3
 800631a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800631e:	2300      	movs	r3, #0
 8006320:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8006322:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8006326:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800632a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800632c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800632e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006330:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006332:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006334:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 800633a:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633e:	d107      	bne.n	8006350 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8006340:	6833      	ldr	r3, [r6, #0]
 8006342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006346:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006348:	6833      	ldr	r3, [r6, #0]
 800634a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800634e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006350:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006352:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006354:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006356:	bf5e      	ittt	pl
 8006358:	6833      	ldrpl	r3, [r6, #0]
 800635a:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 800635e:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006360:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006364:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006366:	d13f      	bne.n	80063e8 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006368:	b113      	cbz	r3, 8006370 <HAL_SPI_Transmit+0x90>
 800636a:	f1b8 0f01 	cmp.w	r8, #1
 800636e:	d107      	bne.n	8006380 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006370:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006374:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006376:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006378:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800637a:	3b01      	subs	r3, #1
 800637c:	b29b      	uxth	r3, r3
 800637e:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006380:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	b9a3      	cbnz	r3, 80063b0 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006386:	464a      	mov	r2, r9
 8006388:	4639      	mov	r1, r7
 800638a:	4620      	mov	r0, r4
 800638c:	f7ff ff20 	bl	80061d0 <SPI_EndRxTxTransaction>
 8006390:	2800      	cmp	r0, #0
 8006392:	d14b      	bne.n	800642c <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006394:	68a3      	ldr	r3, [r4, #8]
 8006396:	b933      	cbnz	r3, 80063a6 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	9201      	str	r2, [sp, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063a6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80063a8:	3800      	subs	r0, #0
 80063aa:	bf18      	it	ne
 80063ac:	2001      	movne	r0, #1
error:
 80063ae:	e012      	b.n	80063d6 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	6893      	ldr	r3, [r2, #8]
 80063b4:	0798      	lsls	r0, r3, #30
 80063b6:	d505      	bpl.n	80063c4 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80063ba:	f833 1b02 	ldrh.w	r1, [r3], #2
 80063be:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80063c2:	e7d9      	b.n	8006378 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c4:	f7fe f9ea 	bl	800479c <HAL_GetTick>
 80063c8:	eba0 0009 	sub.w	r0, r0, r9
 80063cc:	42b8      	cmp	r0, r7
 80063ce:	d3d7      	bcc.n	8006380 <HAL_SPI_Transmit+0xa0>
 80063d0:	1c79      	adds	r1, r7, #1
 80063d2:	d0d5      	beq.n	8006380 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80063d4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80063dc:	2300      	movs	r3, #0
 80063de:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80063e2:	b003      	add	sp, #12
 80063e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e8:	b113      	cbz	r3, 80063f0 <HAL_SPI_Transmit+0x110>
 80063ea:	f1b8 0f01 	cmp.w	r8, #1
 80063ee:	d108      	bne.n	8006402 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f0:	782b      	ldrb	r3, [r5, #0]
 80063f2:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80063f6:	3301      	adds	r3, #1
 80063f8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80063fa:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29b      	uxth	r3, r3
 8006400:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006402:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0bd      	beq.n	8006386 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	0792      	lsls	r2, r2, #30
 8006410:	d503      	bpl.n	800641a <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006412:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	731a      	strb	r2, [r3, #12]
 8006418:	e7ec      	b.n	80063f4 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800641a:	f7fe f9bf 	bl	800479c <HAL_GetTick>
 800641e:	eba0 0009 	sub.w	r0, r0, r9
 8006422:	42b8      	cmp	r0, r7
 8006424:	d3ed      	bcc.n	8006402 <HAL_SPI_Transmit+0x122>
 8006426:	1c7b      	adds	r3, r7, #1
 8006428:	d0eb      	beq.n	8006402 <HAL_SPI_Transmit+0x122>
 800642a:	e7d3      	b.n	80063d4 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800642c:	2320      	movs	r3, #32
 800642e:	6563      	str	r3, [r4, #84]	@ 0x54
 8006430:	e7b0      	b.n	8006394 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8006432:	2002      	movs	r0, #2
 8006434:	e7cf      	b.n	80063d6 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8006436:	2002      	movs	r0, #2
 8006438:	e7d3      	b.n	80063e2 <HAL_SPI_Transmit+0x102>

0800643a <HAL_SPI_TransmitReceive>:
{
 800643a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800643e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006440:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8006444:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8006448:	2b01      	cmp	r3, #1
{
 800644a:	4604      	mov	r4, r0
 800644c:	460d      	mov	r5, r1
 800644e:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006450:	f000 80e1 	beq.w	8006616 <HAL_SPI_TransmitReceive+0x1dc>
 8006454:	2301      	movs	r3, #1
 8006456:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800645a:	f7fe f99f 	bl	800479c <HAL_GetTick>
  tmp_state           = hspi->State;
 800645e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8006462:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006464:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006466:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8006468:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800646a:	d00a      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x48>
 800646c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006470:	f040 80cf 	bne.w	8006612 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006474:	68a3      	ldr	r3, [r4, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f040 80cb 	bne.w	8006612 <HAL_SPI_TransmitReceive+0x1d8>
 800647c:	2904      	cmp	r1, #4
 800647e:	f040 80c8 	bne.w	8006612 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006482:	b115      	cbz	r5, 800648a <HAL_SPI_TransmitReceive+0x50>
 8006484:	f1b9 0f00 	cmp.w	r9, #0
 8006488:	d109      	bne.n	800649e <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 800648a:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 800648c:	2301      	movs	r3, #1
 800648e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006492:	2300      	movs	r3, #0
 8006494:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006498:	b003      	add	sp, #12
 800649a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d0f3      	beq.n	800648a <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064a2:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064a6:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064aa:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064ac:	bf1c      	itt	ne
 80064ae:	2305      	movne	r3, #5
 80064b0:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 80064b8:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064bc:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80064be:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 80064c0:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c2:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80064c4:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c6:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80064c8:	bf58      	it	pl
 80064ca:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064cc:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 80064ce:	bf58      	it	pl
 80064d0:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 80064d4:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 80064d6:	bf58      	it	pl
 80064d8:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064da:	68e1      	ldr	r1, [r4, #12]
 80064dc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80064e0:	d148      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e2:	b10a      	cbz	r2, 80064e8 <HAL_SPI_TransmitReceive+0xae>
 80064e4:	2e01      	cmp	r6, #1
 80064e6:	d107      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80064ec:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80064ee:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80064f8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064fa:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	b963      	cbnz	r3, 800651a <HAL_SPI_TransmitReceive+0xe0>
 8006500:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006502:	b29b      	uxth	r3, r3
 8006504:	b94b      	cbnz	r3, 800651a <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006506:	463a      	mov	r2, r7
 8006508:	4641      	mov	r1, r8
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff fe60 	bl	80061d0 <SPI_EndRxTxTransaction>
 8006510:	2800      	cmp	r0, #0
 8006512:	d072      	beq.n	80065fa <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006514:	2320      	movs	r3, #32
 8006516:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8006518:	e7b7      	b.n	800648a <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800651a:	6821      	ldr	r1, [r4, #0]
 800651c:	688b      	ldr	r3, [r1, #8]
 800651e:	079a      	lsls	r2, r3, #30
 8006520:	d50d      	bpl.n	800653e <HAL_SPI_TransmitReceive+0x104>
 8006522:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006524:	b29b      	uxth	r3, r3
 8006526:	b153      	cbz	r3, 800653e <HAL_SPI_TransmitReceive+0x104>
 8006528:	b145      	cbz	r5, 800653c <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800652a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800652c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006530:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006532:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006534:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006536:	3b01      	subs	r3, #1
 8006538:	b29b      	uxth	r3, r3
 800653a:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 800653c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800653e:	688a      	ldr	r2, [r1, #8]
 8006540:	f012 0201 	ands.w	r2, r2, #1
 8006544:	d00c      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x126>
 8006546:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006548:	b29b      	uxth	r3, r3
 800654a:	b14b      	cbz	r3, 8006560 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800654c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800654e:	68c9      	ldr	r1, [r1, #12]
 8006550:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006554:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006556:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006558:	3b01      	subs	r3, #1
 800655a:	b29b      	uxth	r3, r3
 800655c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800655e:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006560:	f7fe f91c 	bl	800479c <HAL_GetTick>
 8006564:	1bc0      	subs	r0, r0, r7
 8006566:	4540      	cmp	r0, r8
 8006568:	d3c7      	bcc.n	80064fa <HAL_SPI_TransmitReceive+0xc0>
 800656a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800656e:	d0c4      	beq.n	80064fa <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 8006570:	2003      	movs	r0, #3
 8006572:	e78b      	b.n	800648c <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006574:	b10a      	cbz	r2, 800657a <HAL_SPI_TransmitReceive+0x140>
 8006576:	2e01      	cmp	r6, #1
 8006578:	d108      	bne.n	800658c <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800657a:	782a      	ldrb	r2, [r5, #0]
 800657c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800657e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006580:	3301      	adds	r3, #1
 8006582:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006584:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006586:	3b01      	subs	r3, #1
 8006588:	b29b      	uxth	r3, r3
 800658a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800658c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800658e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006590:	b29b      	uxth	r3, r3
 8006592:	b91b      	cbnz	r3, 800659c <HAL_SPI_TransmitReceive+0x162>
 8006594:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0b4      	beq.n	8006506 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	6893      	ldr	r3, [r2, #8]
 80065a0:	079b      	lsls	r3, r3, #30
 80065a2:	d50e      	bpl.n	80065c2 <HAL_SPI_TransmitReceive+0x188>
 80065a4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	b15b      	cbz	r3, 80065c2 <HAL_SPI_TransmitReceive+0x188>
 80065aa:	b14d      	cbz	r5, 80065c0 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80065b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065b4:	3301      	adds	r3, #1
 80065b6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80065b8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29b      	uxth	r3, r3
 80065be:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80065c0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	6891      	ldr	r1, [r2, #8]
 80065c6:	f011 0101 	ands.w	r1, r1, #1
 80065ca:	d00d      	beq.n	80065e8 <HAL_SPI_TransmitReceive+0x1ae>
 80065cc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	b153      	cbz	r3, 80065e8 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065d4:	68d2      	ldr	r2, [r2, #12]
 80065d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065da:	3301      	adds	r3, #1
 80065dc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80065de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80065e6:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065e8:	f7fe f8d8 	bl	800479c <HAL_GetTick>
 80065ec:	1bc0      	subs	r0, r0, r7
 80065ee:	4540      	cmp	r0, r8
 80065f0:	d3cd      	bcc.n	800658e <HAL_SPI_TransmitReceive+0x154>
 80065f2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80065f6:	d0ca      	beq.n	800658e <HAL_SPI_TransmitReceive+0x154>
 80065f8:	e7ba      	b.n	8006570 <HAL_SPI_TransmitReceive+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f47f af45 	bne.w	800648c <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	9001      	str	r0, [sp, #4]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	9201      	str	r2, [sp, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	e73c      	b.n	800648c <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8006612:	2002      	movs	r0, #2
 8006614:	e73a      	b.n	800648c <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 8006616:	2002      	movs	r0, #2
 8006618:	e73e      	b.n	8006498 <HAL_SPI_TransmitReceive+0x5e>

0800661a <HAL_SPI_Receive>:
{
 800661a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800661e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006620:	6843      	ldr	r3, [r0, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8006626:	4604      	mov	r4, r0
 8006628:	4689      	mov	r9, r1
 800662a:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800662c:	d10c      	bne.n	8006648 <HAL_SPI_Receive+0x2e>
 800662e:	6883      	ldr	r3, [r0, #8]
 8006630:	b953      	cbnz	r3, 8006648 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006632:	2304      	movs	r3, #4
 8006634:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006638:	4613      	mov	r3, r2
 800663a:	9500      	str	r5, [sp, #0]
 800663c:	460a      	mov	r2, r1
 800663e:	f7ff fefc 	bl	800643a <HAL_SPI_TransmitReceive>
}
 8006642:	b003      	add	sp, #12
 8006644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006648:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800664c:	2b01      	cmp	r3, #1
 800664e:	d07f      	beq.n	8006750 <HAL_SPI_Receive+0x136>
 8006650:	2301      	movs	r3, #1
 8006652:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8006656:	f7fe f8a1 	bl	800479c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800665a:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800665e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006660:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006662:	b2d8      	uxtb	r0, r3
 8006664:	d172      	bne.n	800674c <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 8006666:	f1b9 0f00 	cmp.w	r9, #0
 800666a:	d05c      	beq.n	8006726 <HAL_SPI_Receive+0x10c>
 800666c:	2f00      	cmp	r7, #0
 800666e:	d05a      	beq.n	8006726 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006670:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006672:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006676:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006678:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800667a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800667e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 8006682:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006686:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 8006688:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800668a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800668c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800668e:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006690:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006692:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006694:	d107      	bne.n	80066a6 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800669c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066a4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80066aa:	bf5e      	ittt	pl
 80066ac:	681a      	ldrpl	r2, [r3, #0]
 80066ae:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80066b2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066b4:	68e3      	ldr	r3, [r4, #12]
 80066b6:	b1f3      	cbz	r3, 80066f6 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 80066b8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	b1fb      	cbz	r3, 80066fe <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	07d2      	lsls	r2, r2, #31
 80066c4:	d536      	bpl.n	8006734 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80066ca:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ce:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80066d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80066d8:	e7ee      	b.n	80066b8 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	07d0      	lsls	r0, r2, #31
 80066e0:	d518      	bpl.n	8006714 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066e2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80066e4:	7b1b      	ldrb	r3, [r3, #12]
 80066e6:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80066ea:	3301      	adds	r3, #1
 80066ec:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80066ee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80066f6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1ed      	bne.n	80066da <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066fe:	4642      	mov	r2, r8
 8006700:	4629      	mov	r1, r5
 8006702:	4620      	mov	r0, r4
 8006704:	f7ff fd3a 	bl	800617c <SPI_EndRxTransaction>
 8006708:	b9e8      	cbnz	r0, 8006746 <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800670a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800670c:	3800      	subs	r0, #0
 800670e:	bf18      	it	ne
 8006710:	2001      	movne	r0, #1
error :
 8006712:	e008      	b.n	8006726 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006714:	f7fe f842 	bl	800479c <HAL_GetTick>
 8006718:	eba0 0008 	sub.w	r0, r0, r8
 800671c:	42a8      	cmp	r0, r5
 800671e:	d3ea      	bcc.n	80066f6 <HAL_SPI_Receive+0xdc>
 8006720:	1c69      	adds	r1, r5, #1
 8006722:	d0e8      	beq.n	80066f6 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8006724:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006726:	2301      	movs	r3, #1
 8006728:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800672c:	2300      	movs	r3, #0
 800672e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 8006732:	e786      	b.n	8006642 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006734:	f7fe f832 	bl	800479c <HAL_GetTick>
 8006738:	eba0 0008 	sub.w	r0, r0, r8
 800673c:	42a8      	cmp	r0, r5
 800673e:	d3bb      	bcc.n	80066b8 <HAL_SPI_Receive+0x9e>
 8006740:	1c6b      	adds	r3, r5, #1
 8006742:	d0b9      	beq.n	80066b8 <HAL_SPI_Receive+0x9e>
 8006744:	e7ee      	b.n	8006724 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006746:	2320      	movs	r3, #32
 8006748:	6563      	str	r3, [r4, #84]	@ 0x54
 800674a:	e7de      	b.n	800670a <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 800674c:	2002      	movs	r0, #2
 800674e:	e7ea      	b.n	8006726 <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8006750:	2002      	movs	r0, #2
 8006752:	e776      	b.n	8006642 <HAL_SPI_Receive+0x28>

08006754 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006754:	4770      	bx	lr
	...

08006758 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006758:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800675c:	2b01      	cmp	r3, #1
 800675e:	d130      	bne.n	80067c2 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	2302      	movs	r3, #2
 8006762:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006766:	6803      	ldr	r3, [r0, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006770:	4a15      	ldr	r2, [pc, #84]	@ (80067c8 <HAL_TIM_Base_Start_IT+0x70>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d01a      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x54>
 8006776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800677a:	d017      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x54>
 800677c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x54>
 8006784:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006788:	4293      	cmp	r3, r2
 800678a:	d00f      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x54>
 800678c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006790:	4293      	cmp	r3, r2
 8006792:	d00b      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x54>
 8006794:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x54>
 800679c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x54>
 80067a4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d104      	bne.n	80067b6 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b2:	2a06      	cmp	r2, #6
 80067b4:	d003      	beq.n	80067be <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80067be:	2000      	movs	r0, #0
 80067c0:	4770      	bx	lr
    return HAL_ERROR;
 80067c2:	2001      	movs	r0, #1
}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40010000 	.word	0x40010000

080067cc <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80067cc:	4770      	bx	lr

080067ce <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80067d0:	4770      	bx	lr

080067d2 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067d4:	6803      	ldr	r3, [r0, #0]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	0791      	lsls	r1, r2, #30
{
 80067da:	b510      	push	{r4, lr}
 80067dc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067de:	d50e      	bpl.n	80067fe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	0792      	lsls	r2, r2, #30
 80067e4:	d50b      	bpl.n	80067fe <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067e6:	f06f 0202 	mvn.w	r2, #2
 80067ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ec:	2201      	movs	r2, #1
 80067ee:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	d077      	beq.n	80068e6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80067f6:	f7ff ffea 	bl	80067ce <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fa:	2300      	movs	r3, #0
 80067fc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	0750      	lsls	r0, r2, #29
 8006804:	d510      	bpl.n	8006828 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	0751      	lsls	r1, r2, #29
 800680a:	d50d      	bpl.n	8006828 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800680c:	f06f 0204 	mvn.w	r2, #4
 8006810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006812:	2202      	movs	r2, #2
 8006814:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800681c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800681e:	d068      	beq.n	80068f2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006820:	f7ff ffd5 	bl	80067ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006824:	2300      	movs	r3, #0
 8006826:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	0712      	lsls	r2, r2, #28
 800682e:	d50f      	bpl.n	8006850 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	0710      	lsls	r0, r2, #28
 8006834:	d50c      	bpl.n	8006850 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006836:	f06f 0208 	mvn.w	r2, #8
 800683a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800683c:	2204      	movs	r2, #4
 800683e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006844:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006846:	d05a      	beq.n	80068fe <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006848:	f7ff ffc1 	bl	80067ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684c:	2300      	movs	r3, #0
 800684e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	06d2      	lsls	r2, r2, #27
 8006856:	d510      	bpl.n	800687a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	06d0      	lsls	r0, r2, #27
 800685c:	d50d      	bpl.n	800687a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800685e:	f06f 0210 	mvn.w	r2, #16
 8006862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006864:	2208      	movs	r2, #8
 8006866:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006870:	d04b      	beq.n	800690a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006872:	f7ff ffac 	bl	80067ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	2300      	movs	r3, #0
 8006878:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	07d1      	lsls	r1, r2, #31
 8006880:	d508      	bpl.n	8006894 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	07d2      	lsls	r2, r2, #31
 8006886:	d505      	bpl.n	8006894 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006888:	f06f 0201 	mvn.w	r2, #1
 800688c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800688e:	4620      	mov	r0, r4
 8006890:	f7fa fcf2 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	0610      	lsls	r0, r2, #24
 800689a:	d508      	bpl.n	80068ae <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	0611      	lsls	r1, r2, #24
 80068a0:	d505      	bpl.n	80068ae <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068a2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80068a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 f8b2 	bl	8006a12 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	0652      	lsls	r2, r2, #25
 80068b4:	d508      	bpl.n	80068c8 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	0650      	lsls	r0, r2, #25
 80068ba:	d505      	bpl.n	80068c8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff ff85 	bl	80067d2 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	0691      	lsls	r1, r2, #26
 80068ce:	d522      	bpl.n	8006916 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	0692      	lsls	r2, r2, #26
 80068d4:	d51f      	bpl.n	8006916 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80068da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068dc:	611a      	str	r2, [r3, #16]
}
 80068de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80068e2:	f000 b895 	b.w	8006a10 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e6:	f7ff ff71 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ea:	4620      	mov	r0, r4
 80068ec:	f7ff ff70 	bl	80067d0 <HAL_TIM_PWM_PulseFinishedCallback>
 80068f0:	e783      	b.n	80067fa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f2:	f7ff ff6b 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff ff6a 	bl	80067d0 <HAL_TIM_PWM_PulseFinishedCallback>
 80068fc:	e792      	b.n	8006824 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	f7ff ff65 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006902:	4620      	mov	r0, r4
 8006904:	f7ff ff64 	bl	80067d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006908:	e7a0      	b.n	800684c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690a:	f7ff ff5f 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690e:	4620      	mov	r0, r4
 8006910:	f7ff ff5e 	bl	80067d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006914:	e7af      	b.n	8006876 <HAL_TIM_IRQHandler+0xa2>
}
 8006916:	bd10      	pop	{r4, pc}

08006918 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006918:	4a25      	ldr	r2, [pc, #148]	@ (80069b0 <TIM_Base_SetConfig+0x98>)
  tmpcr1 = TIMx->CR1;
 800691a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800691c:	4290      	cmp	r0, r2
 800691e:	d012      	beq.n	8006946 <TIM_Base_SetConfig+0x2e>
 8006920:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006924:	d00f      	beq.n	8006946 <TIM_Base_SetConfig+0x2e>
 8006926:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800692a:	4290      	cmp	r0, r2
 800692c:	d00b      	beq.n	8006946 <TIM_Base_SetConfig+0x2e>
 800692e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006932:	4290      	cmp	r0, r2
 8006934:	d007      	beq.n	8006946 <TIM_Base_SetConfig+0x2e>
 8006936:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800693a:	4290      	cmp	r0, r2
 800693c:	d003      	beq.n	8006946 <TIM_Base_SetConfig+0x2e>
 800693e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006942:	4290      	cmp	r0, r2
 8006944:	d108      	bne.n	8006958 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006946:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800694c:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800694e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006954:	4313      	orrs	r3, r2
 8006956:	e016      	b.n	8006986 <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006958:	4a16      	ldr	r2, [pc, #88]	@ (80069b4 <TIM_Base_SetConfig+0x9c>)
 800695a:	4290      	cmp	r0, r2
 800695c:	d0f7      	beq.n	800694e <TIM_Base_SetConfig+0x36>
 800695e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006962:	4290      	cmp	r0, r2
 8006964:	d0f3      	beq.n	800694e <TIM_Base_SetConfig+0x36>
 8006966:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800696a:	4290      	cmp	r0, r2
 800696c:	d0ef      	beq.n	800694e <TIM_Base_SetConfig+0x36>
 800696e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8006972:	4290      	cmp	r0, r2
 8006974:	d0eb      	beq.n	800694e <TIM_Base_SetConfig+0x36>
 8006976:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800697a:	4290      	cmp	r0, r2
 800697c:	d0e7      	beq.n	800694e <TIM_Base_SetConfig+0x36>
 800697e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006982:	4290      	cmp	r0, r2
 8006984:	d0e3      	beq.n	800694e <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006986:	694a      	ldr	r2, [r1, #20]
 8006988:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800698c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800698e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	688b      	ldr	r3, [r1, #8]
 8006992:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006994:	680b      	ldr	r3, [r1, #0]
 8006996:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006998:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <TIM_Base_SetConfig+0x98>)
 800699a:	4298      	cmp	r0, r3
 800699c:	d003      	beq.n	80069a6 <TIM_Base_SetConfig+0x8e>
 800699e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069a2:	4298      	cmp	r0, r3
 80069a4:	d101      	bne.n	80069aa <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a6:	690b      	ldr	r3, [r1, #16]
 80069a8:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069aa:	2301      	movs	r3, #1
 80069ac:	6143      	str	r3, [r0, #20]
}
 80069ae:	4770      	bx	lr
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40014000 	.word	0x40014000

080069b8 <HAL_TIM_Base_Init>:
{
 80069b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80069ba:	4604      	mov	r4, r0
 80069bc:	b330      	cbz	r0, 8006a0c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80069be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80069c2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80069c6:	b91b      	cbnz	r3, 80069d0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80069c8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80069cc:	f7ff fec2 	bl	8006754 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d8:	1d21      	adds	r1, r4, #4
 80069da:	f7ff ff9d 	bl	8006918 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069de:	2301      	movs	r3, #1
 80069e0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 80069e4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80069ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80069ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80069f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006a02:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006a06:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006a0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	e7fc      	b.n	8006a0a <HAL_TIM_Base_Init+0x52>

08006a10 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006a10:	4770      	bx	lr

08006a12 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006a12:	4770      	bx	lr

08006a14 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a14:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	f102 030c 	add.w	r3, r2, #12
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	320c      	adds	r2, #12
 8006a24:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006a28:	6802      	ldr	r2, [r0, #0]
 8006a2a:	2900      	cmp	r1, #0
 8006a2c:	d1f2      	bne.n	8006a14 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	f102 0314 	add.w	r3, r2, #20
 8006a32:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	f102 0c14 	add.w	ip, r2, #20
 8006a3e:	e84c 3100 	strex	r1, r3, [ip]
 8006a42:	2900      	cmp	r1, #0
 8006a44:	d1f3      	bne.n	8006a2e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d10b      	bne.n	8006a64 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	f102 030c 	add.w	r3, r2, #12
 8006a50:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a54:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	f102 0c0c 	add.w	ip, r2, #12
 8006a5c:	e84c 3100 	strex	r1, r3, [ip]
 8006a60:	2900      	cmp	r1, #0
 8006a62:	d1f3      	bne.n	8006a4c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a64:	2320      	movs	r3, #32
 8006a66:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8006a6e:	4770      	bx	lr

08006a70 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a70:	6802      	ldr	r2, [r0, #0]
 8006a72:	68c1      	ldr	r1, [r0, #12]
{
 8006a74:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a76:	6913      	ldr	r3, [r2, #16]
 8006a78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	6113      	str	r3, [r2, #16]
{
 8006a80:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a82:	6883      	ldr	r3, [r0, #8]
 8006a84:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006a86:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a88:	4303      	orrs	r3, r0
 8006a8a:	6968      	ldr	r0, [r5, #20]
 8006a8c:	4303      	orrs	r3, r0
 8006a8e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006a90:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8006a94:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a98:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a9e:	6953      	ldr	r3, [r2, #20]
 8006aa0:	69a9      	ldr	r1, [r5, #24]
 8006aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8006b28 <UART_SetConfig+0xb8>)
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d003      	beq.n	8006ab8 <UART_SetConfig+0x48>
 8006ab0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d124      	bne.n	8006b02 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ab8:	f7ff f958 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006abc:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006abe:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ac4:	e9d5 4300 	ldrd	r4, r3, [r5]
 8006ac8:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006acc:	d11c      	bne.n	8006b08 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ace:	18da      	adds	r2, r3, r3
 8006ad0:	f04f 0500 	mov.w	r5, #0
 8006ad4:	eb45 0305 	adc.w	r3, r5, r5
 8006ad8:	f7f9 fbda 	bl	8000290 <__aeabi_uldivmod>
 8006adc:	2264      	movs	r2, #100	@ 0x64
 8006ade:	fbb0 f1f2 	udiv	r1, r0, r2
 8006ae2:	fb02 0311 	mls	r3, r2, r1, r0
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	3332      	adds	r3, #50	@ 0x32
 8006aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aee:	f003 0207 	and.w	r2, r3, #7
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006af8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006afc:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006afe:	60a3      	str	r3, [r4, #8]
  }
}
 8006b00:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b02:	f7ff f923 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
 8006b06:	e7d9      	b.n	8006abc <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b08:	009a      	lsls	r2, r3, #2
 8006b0a:	0f9b      	lsrs	r3, r3, #30
 8006b0c:	f7f9 fbc0 	bl	8000290 <__aeabi_uldivmod>
 8006b10:	2264      	movs	r2, #100	@ 0x64
 8006b12:	fbb0 f1f2 	udiv	r1, r0, r2
 8006b16:	fb02 0311 	mls	r3, r2, r1, r0
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	3332      	adds	r3, #50	@ 0x32
 8006b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b22:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006b26:	e7ea      	b.n	8006afe <UART_SetConfig+0x8e>
 8006b28:	40011000 	.word	0x40011000

08006b2c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8006b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b2e:	4605      	mov	r5, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	4617      	mov	r7, r2
 8006b34:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b36:	682a      	ldr	r2, [r5, #0]
 8006b38:	6813      	ldr	r3, [r2, #0]
 8006b3a:	ea34 0303 	bics.w	r3, r4, r3
 8006b3e:	d101      	bne.n	8006b44 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8006b40:	2000      	movs	r0, #0
 8006b42:	e021      	b.n	8006b88 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006b44:	1c70      	adds	r0, r6, #1
 8006b46:	d0f7      	beq.n	8006b38 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b48:	f7fd fe28 	bl	800479c <HAL_GetTick>
 8006b4c:	1bc0      	subs	r0, r0, r7
 8006b4e:	4286      	cmp	r6, r0
 8006b50:	d31c      	bcc.n	8006b8c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8006b52:	b1de      	cbz	r6, 8006b8c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	0751      	lsls	r1, r2, #29
 8006b5a:	d5ec      	bpl.n	8006b36 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006b5c:	2c80      	cmp	r4, #128	@ 0x80
 8006b5e:	d0ea      	beq.n	8006b36 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006b60:	2c40      	cmp	r4, #64	@ 0x40
 8006b62:	d0e8      	beq.n	8006b36 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	0712      	lsls	r2, r2, #28
 8006b68:	d5e5      	bpl.n	8006b36 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b6a:	2400      	movs	r4, #0
 8006b6c:	9401      	str	r4, [sp, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	9201      	str	r2, [sp, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006b76:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b78:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006b7a:	f7ff ff4b 	bl	8006a14 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b7e:	2308      	movs	r3, #8
 8006b80:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8006b82:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8006b86:	2001      	movs	r0, #1
}
 8006b88:	b003      	add	sp, #12
 8006b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006b8c:	2003      	movs	r0, #3
 8006b8e:	e7fb      	b.n	8006b88 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08006b90 <HAL_UART_Init>:
{
 8006b90:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006b92:	4604      	mov	r4, r0
 8006b94:	b348      	cbz	r0, 8006bea <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006b96:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006b9a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006b9e:	b91b      	cbnz	r3, 8006ba8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006ba0:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8006ba4:	f7fa fda8 	bl	80016f8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006ba8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006baa:	2324      	movs	r3, #36	@ 0x24
 8006bac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8006bb0:	68d3      	ldr	r3, [r2, #12]
 8006bb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bb6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f7ff ff59 	bl	8006a70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bd6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006bda:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bdc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bde:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006be2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8006be8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006bea:	2001      	movs	r0, #1
 8006bec:	e7fc      	b.n	8006be8 <HAL_UART_Init+0x58>

08006bee <HAL_UART_Transmit>:
{
 8006bee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf2:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006bf8:	2b20      	cmp	r3, #32
{
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	460e      	mov	r6, r1
 8006bfe:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006c00:	d13f      	bne.n	8006c82 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d03f      	beq.n	8006c86 <HAL_UART_Transmit+0x98>
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	d03d      	beq.n	8006c86 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c0a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c10:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8006c14:	f7fd fdc2 	bl	800479c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c18:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8006c1a:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8006c20:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8006c22:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c24:	d103      	bne.n	8006c2e <HAL_UART_Transmit+0x40>
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	b90b      	cbnz	r3, 8006c2e <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 8006c2a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006c2c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8006c2e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	b953      	cbnz	r3, 8006c4a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c34:	4643      	mov	r3, r8
 8006c36:	464a      	mov	r2, r9
 8006c38:	2140      	movs	r1, #64	@ 0x40
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7ff ff76 	bl	8006b2c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006c40:	2320      	movs	r3, #32
 8006c42:	b950      	cbnz	r0, 8006c5a <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8006c44:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8006c48:	e00a      	b.n	8006c60 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c4a:	4643      	mov	r3, r8
 8006c4c:	464a      	mov	r2, r9
 8006c4e:	2180      	movs	r1, #128	@ 0x80
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7ff ff6b 	bl	8006b2c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006c56:	b128      	cbz	r0, 8006c64 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8006c58:	2320      	movs	r3, #32
 8006c5a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8006c5e:	2003      	movs	r0, #3
}
 8006c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c64:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8006c66:	b94e      	cbnz	r6, 8006c7c <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c68:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c70:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8006c72:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8006c74:	3901      	subs	r1, #1
 8006c76:	b289      	uxth	r1, r1
 8006c78:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8006c7a:	e7d8      	b.n	8006c2e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c7c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006c80:	e7f6      	b.n	8006c70 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8006c82:	2002      	movs	r0, #2
 8006c84:	e7ec      	b.n	8006c60 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8006c86:	2001      	movs	r0, #1
 8006c88:	e7ea      	b.n	8006c60 <HAL_UART_Transmit+0x72>

08006c8a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c8e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8006c92:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8006c96:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8006c9a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 8006c9e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006ca2:	6809      	ldr	r1, [r1, #0]
 8006ca4:	ea43 0308 	orr.w	r3, r3, r8
 8006ca8:	b981      	cbnz	r1, 8006ccc <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006caa:	ea43 030e 	orr.w	r3, r3, lr
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	ea43 030c 	orr.w	r3, r3, ip
 8006cb4:	433b      	orrs	r3, r7
 8006cb6:	6801      	ldr	r1, [r0, #0]
 8006cb8:	4333      	orrs	r3, r6
 8006cba:	432b      	orrs	r3, r5
 8006cbc:	4323      	orrs	r3, r4
 8006cbe:	f36f 010e 	bfc	r1, #0, #15
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006ccc:	6801      	ldr	r1, [r0, #0]
 8006cce:	ea43 030e 	orr.w	r3, r3, lr
 8006cd2:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006cda:	ea42 030c 	orr.w	r3, r2, ip
 8006cde:	6841      	ldr	r1, [r0, #4]
 8006ce0:	433b      	orrs	r3, r7
 8006ce2:	4333      	orrs	r3, r6
 8006ce4:	432b      	orrs	r3, r5
 8006ce6:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8006cea:	4323      	orrs	r3, r4
 8006cec:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	6043      	str	r3, [r0, #4]
 8006cf4:	e7e7      	b.n	8006cc6 <FMC_SDRAM_Init+0x3c>

08006cf6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cf6:	68cb      	ldr	r3, [r1, #12]
 8006cf8:	f103 3cff 	add.w	ip, r3, #4294967295
 8006cfc:	694b      	ldr	r3, [r1, #20]
{
 8006cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006d00:	684c      	ldr	r4, [r1, #4]
 8006d02:	688f      	ldr	r7, [r1, #8]
 8006d04:	690e      	ldr	r6, [r1, #16]
 8006d06:	698d      	ldr	r5, [r1, #24]
 8006d08:	6809      	ldr	r1, [r1, #0]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	051b      	lsls	r3, r3, #20
 8006d0e:	3c01      	subs	r4, #1
 8006d10:	3f01      	subs	r7, #1
 8006d12:	3e01      	subs	r6, #1
 8006d14:	3d01      	subs	r5, #1
 8006d16:	0124      	lsls	r4, r4, #4
 8006d18:	023f      	lsls	r7, r7, #8
 8006d1a:	0436      	lsls	r6, r6, #16
 8006d1c:	062d      	lsls	r5, r5, #24
 8006d1e:	3901      	subs	r1, #1
 8006d20:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006d24:	b95a      	cbnz	r2, 8006d3e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006d26:	430b      	orrs	r3, r1
 8006d28:	4323      	orrs	r3, r4
 8006d2a:	6882      	ldr	r2, [r0, #8]
 8006d2c:	433b      	orrs	r3, r7
 8006d2e:	4333      	orrs	r3, r6
 8006d30:	432b      	orrs	r3, r5
 8006d32:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006d36:	4313      	orrs	r3, r2
 8006d38:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006d3e:	6882      	ldr	r2, [r0, #8]
 8006d40:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006d44:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006d4c:	ea44 0307 	orr.w	r3, r4, r7
 8006d50:	68c2      	ldr	r2, [r0, #12]
 8006d52:	430b      	orrs	r3, r1
 8006d54:	4333      	orrs	r3, r6
 8006d56:	432b      	orrs	r3, r5
 8006d58:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60c3      	str	r3, [r0, #12]
 8006d60:	e7eb      	b.n	8006d3a <FMC_SDRAM_Timing_Init+0x44>

08006d62 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d62:	b570      	push	{r4, r5, r6, lr}
 8006d64:	4604      	mov	r4, r0
 8006d66:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d68:	6902      	ldr	r2, [r0, #16]
 8006d6a:	e9d1 3000 	ldrd	r3, r0, [r1]
 8006d6e:	4303      	orrs	r3, r0
 8006d70:	68c8      	ldr	r0, [r1, #12]
 8006d72:	f36f 0215 	bfc	r2, #0, #22
 8006d76:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	688a      	ldr	r2, [r1, #8]
 8006d7e:	3a01      	subs	r2, #1
 8006d80:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006d84:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006d86:	f7fd fd09 	bl	800479c <HAL_GetTick>
 8006d8a:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006d8c:	69a0      	ldr	r0, [r4, #24]
 8006d8e:	f010 0020 	ands.w	r0, r0, #32
 8006d92:	d003      	beq.n	8006d9c <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d94:	1c6b      	adds	r3, r5, #1
 8006d96:	d0f9      	beq.n	8006d8c <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006d98:	b90d      	cbnz	r5, 8006d9e <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8006d9a:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 8006d9c:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006d9e:	f7fd fcfd 	bl	800479c <HAL_GetTick>
 8006da2:	1b80      	subs	r0, r0, r6
 8006da4:	42a8      	cmp	r0, r5
 8006da6:	d9f1      	bls.n	8006d8c <FMC_SDRAM_SendCommand+0x2a>
 8006da8:	e7f7      	b.n	8006d9a <FMC_SDRAM_SendCommand+0x38>

08006daa <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006daa:	6943      	ldr	r3, [r0, #20]
 8006dac:	f36f 034d 	bfc	r3, #1, #13
 8006db0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006db4:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8006db6:	2000      	movs	r0, #0
 8006db8:	4770      	bx	lr

08006dba <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006dba:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006dbc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006dc0:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dc2:	f001 fe83 	bl	8008acc <xTaskGetSchedulerState>
 8006dc6:	2801      	cmp	r0, #1
 8006dc8:	d003      	beq.n	8006dd2 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006dce:	f000 bbf1 	b.w	80075b4 <xPortSysTickHandler>
}
 8006dd2:	bd08      	pop	{r3, pc}

08006dd4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dd8:	b92b      	cbnz	r3, 8006de6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006dda:	4b06      	ldr	r3, [pc, #24]	@ (8006df4 <osKernelInitialize+0x20>)
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	b928      	cbnz	r0, 8006dec <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006de4:	4770      	bx	lr
    stat = osErrorISR;
 8006de6:	f06f 0005 	mvn.w	r0, #5
 8006dea:	4770      	bx	lr
    } else {
      stat = osError;
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20004d90 	.word	0x20004d90

08006df8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dfe:	b95c      	cbnz	r4, 8006e18 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006e00:	4b08      	ldr	r3, [pc, #32]	@ (8006e24 <osKernelStart+0x2c>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	2a01      	cmp	r2, #1
 8006e06:	d10a      	bne.n	8006e1e <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e08:	4a07      	ldr	r2, [pc, #28]	@ (8006e28 <osKernelStart+0x30>)
 8006e0a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e10:	f001 fbd2 	bl	80085b8 <vTaskStartScheduler>
      stat = osOK;
 8006e14:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006e16:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006e18:	f06f 0005 	mvn.w	r0, #5
 8006e1c:	e7fb      	b.n	8006e16 <osKernelStart+0x1e>
      stat = osError;
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006e22:	e7f8      	b.n	8006e16 <osKernelStart+0x1e>
 8006e24:	20004d90 	.word	0x20004d90
 8006e28:	e000ed00 	.word	0xe000ed00

08006e2c <osKernelGetTickCount>:
 8006e2c:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8006e30:	b10b      	cbz	r3, 8006e36 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8006e32:	f001 bc15 	b.w	8008660 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8006e36:	f001 bc0d 	b.w	8008654 <xTaskGetTickCount>

08006e3a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3c:	b087      	sub	sp, #28
 8006e3e:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e40:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e42:	460b      	mov	r3, r1
  hTask = NULL;
 8006e44:	9205      	str	r2, [sp, #20]
 8006e46:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006e4a:	b9fa      	cbnz	r2, 8006e8c <osThreadNew+0x52>
 8006e4c:	b1f0      	cbz	r0, 8006e8c <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006e4e:	b354      	cbz	r4, 8006ea6 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006e50:	69a5      	ldr	r5, [r4, #24]
 8006e52:	b125      	cbz	r5, 8006e5e <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e54:	1e69      	subs	r1, r5, #1
 8006e56:	2937      	cmp	r1, #55	@ 0x37
 8006e58:	d902      	bls.n	8006e60 <osThreadNew+0x26>
        return (NULL);
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e017      	b.n	8006e8e <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8006e5e:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e60:	6862      	ldr	r2, [r4, #4]
 8006e62:	07d2      	lsls	r2, r2, #31
 8006e64:	d4f9      	bmi.n	8006e5a <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8006e66:	6966      	ldr	r6, [r4, #20]
 8006e68:	b19e      	cbz	r6, 8006e92 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e6a:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e6c:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 8006e70:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e72:	b187      	cbz	r7, 8006e96 <osThreadNew+0x5c>
 8006e74:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 8006e78:	d908      	bls.n	8006e8c <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e7a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e7c:	b134      	cbz	r4, 8006e8c <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e7e:	b12e      	cbz	r6, 8006e8c <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e80:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006e84:	9500      	str	r5, [sp, #0]
 8006e86:	f001 fad8 	bl	800843a <xTaskCreateStatic>
 8006e8a:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e8c:	9805      	ldr	r0, [sp, #20]
}
 8006e8e:	b007      	add	sp, #28
 8006e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006e92:	2280      	movs	r2, #128	@ 0x80
 8006e94:	e7ea      	b.n	8006e6c <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e96:	f1bc 0f00 	cmp.w	ip, #0
 8006e9a:	d1f7      	bne.n	8006e8c <osThreadNew+0x52>
 8006e9c:	6924      	ldr	r4, [r4, #16]
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	d1f4      	bne.n	8006e8c <osThreadNew+0x52>
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	e001      	b.n	8006eaa <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8006ea6:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8006ea8:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006eaa:	a905      	add	r1, sp, #20
 8006eac:	e9cd 5100 	strd	r5, r1, [sp]
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	f001 faf9 	bl	80084aa <xTaskCreate>
 8006eb8:	2801      	cmp	r0, #1
            hTask = NULL;
 8006eba:	bf1c      	itt	ne
 8006ebc:	2300      	movne	r3, #0
 8006ebe:	9305      	strne	r3, [sp, #20]
 8006ec0:	e7e4      	b.n	8006e8c <osThreadNew+0x52>

08006ec2 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8006ec2:	b508      	push	{r3, lr}
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	f001 fb1f 	bl	8008508 <vTaskDelete>
#endif
  for (;;);
 8006eca:	e7fe      	b.n	8006eca <osThreadExit+0x8>

08006ecc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ecc:	b508      	push	{r3, lr}
 8006ece:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed2:	b922      	cbnz	r2, 8006ede <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006ed4:	b108      	cbz	r0, 8006eda <osDelay+0xe>
      vTaskDelay(ticks);
 8006ed6:	f001 fcd5 	bl	8008884 <vTaskDelay>
    stat = osOK;
 8006eda:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8006edc:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8006ede:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8006ee2:	e7fb      	b.n	8006edc <osDelay+0x10>

08006ee4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	460e      	mov	r6, r1
 8006eea:	4615      	mov	r5, r2
 8006eec:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006ef0:	b942      	cbnz	r2, 8006f04 <osSemaphoreNew+0x20>
 8006ef2:	b138      	cbz	r0, 8006f04 <osSemaphoreNew+0x20>
 8006ef4:	4288      	cmp	r0, r1
 8006ef6:	d305      	bcc.n	8006f04 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8006ef8:	b155      	cbz	r5, 8006f10 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006efa:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8006efe:	b12b      	cbz	r3, 8006f0c <osSemaphoreNew+0x28>
 8006f00:	2f4f      	cmp	r7, #79	@ 0x4f
 8006f02:	d822      	bhi.n	8006f4a <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8006f04:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006f06:	4620      	mov	r0, r4
 8006f08:	b003      	add	sp, #12
 8006f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f0c:	2f00      	cmp	r7, #0
 8006f0e:	d1f9      	bne.n	8006f04 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8006f10:	2c01      	cmp	r4, #1
 8006f12:	d00c      	beq.n	8006f2e <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006f14:	4620      	mov	r0, r4
 8006f16:	4631      	mov	r1, r6
 8006f18:	f000 fd84 	bl	8007a24 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d0f0      	beq.n	8006f04 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8006f22:	b985      	cbnz	r5, 8006f46 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8006f24:	4629      	mov	r1, r5
 8006f26:	4620      	mov	r0, r4
 8006f28:	f001 f8c2 	bl	80080b0 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006f2c:	e7eb      	b.n	8006f06 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8006f2e:	2203      	movs	r2, #3
 8006f30:	2100      	movs	r1, #0
 8006f32:	2001      	movs	r0, #1
 8006f34:	f000 fd2d 	bl	8007992 <xQueueGenericCreate>
 8006f38:	e00e      	b.n	8006f58 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f000 fd50 	bl	80079e0 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006f40:	4604      	mov	r4, r0
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d0de      	beq.n	8006f04 <osSemaphoreNew+0x20>
          name = attr->name;
 8006f46:	682d      	ldr	r5, [r5, #0]
 8006f48:	e7ec      	b.n	8006f24 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8006f4a:	2801      	cmp	r0, #1
 8006f4c:	d1f5      	bne.n	8006f3a <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006f4e:	2103      	movs	r1, #3
 8006f50:	9100      	str	r1, [sp, #0]
 8006f52:	4611      	mov	r1, r2
 8006f54:	f000 fccf 	bl	80078f6 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8006f58:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d0d2      	beq.n	8006f04 <osSemaphoreNew+0x20>
 8006f5e:	2e00      	cmp	r6, #0
 8006f60:	d0df      	beq.n	8006f22 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006f62:	2300      	movs	r3, #0
 8006f64:	461a      	mov	r2, r3
 8006f66:	4619      	mov	r1, r3
 8006f68:	f000 fd7a 	bl	8007a60 <xQueueGenericSend>
 8006f6c:	2801      	cmp	r0, #1
 8006f6e:	d0d8      	beq.n	8006f22 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8006f70:	4620      	mov	r0, r4
 8006f72:	f001 f8c7 	bl	8008104 <vQueueDelete>
      if (hSemaphore != NULL) {
 8006f76:	e7c5      	b.n	8006f04 <osSemaphoreNew+0x20>

08006f78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006f78:	b513      	push	{r0, r1, r4, lr}
 8006f7a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006f7c:	b328      	cbz	r0, 8006fca <osSemaphoreAcquire+0x52>
 8006f7e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006f82:	b1cb      	cbz	r3, 8006fb8 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8006f84:	bb09      	cbnz	r1, 8006fca <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006f86:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006f88:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006f8a:	f001 f824 	bl	8007fd6 <xQueueReceiveFromISR>
 8006f8e:	2801      	cmp	r0, #1
 8006f90:	d003      	beq.n	8006f9a <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8006f92:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006f96:	b002      	add	sp, #8
 8006f98:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8006f9a:	9b01      	ldr	r3, [sp, #4]
 8006f9c:	b90b      	cbnz	r3, 8006fa2 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e7f9      	b.n	8006f96 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8006fa2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006faa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	e7f2      	b.n	8006f9e <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006fb8:	f000 ff50 	bl	8007e5c <xQueueSemaphoreTake>
 8006fbc:	2801      	cmp	r0, #1
 8006fbe:	d0ee      	beq.n	8006f9e <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	d0e6      	beq.n	8006f92 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8006fc4:	f06f 0001 	mvn.w	r0, #1
 8006fc8:	e7e5      	b.n	8006f96 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8006fca:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006fce:	e7e2      	b.n	8006f96 <osSemaphoreAcquire+0x1e>

08006fd0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006fd0:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006fd2:	b318      	cbz	r0, 800701c <osSemaphoreRelease+0x4c>
 8006fd4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006fd8:	b1cb      	cbz	r3, 800700e <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8006fda:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006fdc:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006fde:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006fe0:	f000 fe4d 	bl	8007c7e <xQueueGiveFromISR>
 8006fe4:	2801      	cmp	r0, #1
 8006fe6:	d004      	beq.n	8006ff2 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006fe8:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8006fec:	b003      	add	sp, #12
 8006fee:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8006ff2:	9b01      	ldr	r3, [sp, #4]
 8006ff4:	b14b      	cbz	r3, 800700a <osSemaphoreRelease+0x3a>
 8006ff6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ffe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800700a:	2000      	movs	r0, #0
 800700c:	e7ee      	b.n	8006fec <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800700e:	461a      	mov	r2, r3
 8007010:	4619      	mov	r1, r3
 8007012:	f000 fd25 	bl	8007a60 <xQueueGenericSend>
 8007016:	2801      	cmp	r0, #1
 8007018:	d0f7      	beq.n	800700a <osSemaphoreRelease+0x3a>
 800701a:	e7e5      	b.n	8006fe8 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800701c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007020:	e7e4      	b.n	8006fec <osSemaphoreRelease+0x1c>

08007022 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8007022:	b130      	cbz	r0, 8007032 <osSemaphoreGetCount+0x10>
 8007024:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8007028:	b10b      	cbz	r3, 800702e <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800702a:	f001 b834 	b.w	8008096 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800702e:	f001 b81f 	b.w	8008070 <uxQueueMessagesWaiting>
  }

  return (count);
}
 8007032:	4770      	bx	lr

08007034 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007036:	4605      	mov	r5, r0
 8007038:	460e      	mov	r6, r1
 800703a:	4614      	mov	r4, r2
 800703c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007040:	b11f      	cbz	r7, 800704a <osMessageQueueNew+0x16>
  hQueue = NULL;
 8007042:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007044:	4628      	mov	r0, r5
 8007046:	b003      	add	sp, #12
 8007048:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800704a:	2800      	cmp	r0, #0
 800704c:	d0f9      	beq.n	8007042 <osMessageQueueNew+0xe>
 800704e:	2900      	cmp	r1, #0
 8007050:	d0f7      	beq.n	8007042 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8007052:	b1da      	cbz	r2, 800708c <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007054:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8007058:	b183      	cbz	r3, 800707c <osMessageQueueNew+0x48>
 800705a:	2a4f      	cmp	r2, #79	@ 0x4f
 800705c:	d9f1      	bls.n	8007042 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800705e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007060:	2a00      	cmp	r2, #0
 8007062:	d0ee      	beq.n	8007042 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007064:	6966      	ldr	r6, [r4, #20]
 8007066:	434d      	muls	r5, r1
 8007068:	42ae      	cmp	r6, r5
 800706a:	d3ea      	bcc.n	8007042 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800706c:	9700      	str	r7, [sp, #0]
 800706e:	f000 fc42 	bl	80078f6 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8007072:	4605      	mov	r5, r0
 8007074:	2800      	cmp	r0, #0
 8007076:	d0e4      	beq.n	8007042 <osMessageQueueNew+0xe>
        name = attr->name;
 8007078:	6824      	ldr	r4, [r4, #0]
 800707a:	e011      	b.n	80070a0 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800707c:	2a00      	cmp	r2, #0
 800707e:	d1e0      	bne.n	8007042 <osMessageQueueNew+0xe>
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1dd      	bne.n	8007042 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007086:	6963      	ldr	r3, [r4, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1da      	bne.n	8007042 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800708c:	4628      	mov	r0, r5
 800708e:	2200      	movs	r2, #0
 8007090:	4631      	mov	r1, r6
 8007092:	f000 fc7e 	bl	8007992 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8007096:	4605      	mov	r5, r0
 8007098:	2800      	cmp	r0, #0
 800709a:	d0d2      	beq.n	8007042 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800709c:	2c00      	cmp	r4, #0
 800709e:	d1eb      	bne.n	8007078 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f001 f804 	bl	80080b0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80070a8:	e7cc      	b.n	8007044 <osMessageQueueNew+0x10>

080070aa <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80070aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070ac:	461c      	mov	r4, r3
 80070ae:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80070b2:	b1de      	cbz	r6, 80070ec <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80070b4:	b338      	cbz	r0, 8007106 <osMessageQueuePut+0x5c>
 80070b6:	b331      	cbz	r1, 8007106 <osMessageQueuePut+0x5c>
 80070b8:	bb2b      	cbnz	r3, 8007106 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80070ba:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80070bc:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80070be:	f000 fd81 	bl	8007bc4 <xQueueGenericSendFromISR>
 80070c2:	2801      	cmp	r0, #1
 80070c4:	d003      	beq.n	80070ce <osMessageQueuePut+0x24>
        stat = osErrorResource;
 80070c6:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80070ca:	b002      	add	sp, #8
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	b90b      	cbnz	r3, 80070d6 <osMessageQueuePut+0x2c>
  stat = osOK;
 80070d2:	2000      	movs	r0, #0
 80070d4:	e7f9      	b.n	80070ca <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 80070d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80070da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	e7f2      	b.n	80070d2 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80070ec:	b158      	cbz	r0, 8007106 <osMessageQueuePut+0x5c>
 80070ee:	b151      	cbz	r1, 8007106 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80070f0:	4633      	mov	r3, r6
 80070f2:	4622      	mov	r2, r4
 80070f4:	f000 fcb4 	bl	8007a60 <xQueueGenericSend>
 80070f8:	2801      	cmp	r0, #1
 80070fa:	d0ea      	beq.n	80070d2 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 80070fc:	2c00      	cmp	r4, #0
 80070fe:	d0e2      	beq.n	80070c6 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8007100:	f06f 0001 	mvn.w	r0, #1
 8007104:	e7e1      	b.n	80070ca <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8007106:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800710a:	e7de      	b.n	80070ca <osMessageQueuePut+0x20>

0800710c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800710c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800710e:	461c      	mov	r4, r3
 8007110:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007114:	b1db      	cbz	r3, 800714e <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007116:	b330      	cbz	r0, 8007166 <osMessageQueueGet+0x5a>
 8007118:	b329      	cbz	r1, 8007166 <osMessageQueueGet+0x5a>
 800711a:	bb24      	cbnz	r4, 8007166 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800711c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800711e:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007120:	f000 ff59 	bl	8007fd6 <xQueueReceiveFromISR>
 8007124:	2801      	cmp	r0, #1
 8007126:	d003      	beq.n	8007130 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8007128:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800712c:	b003      	add	sp, #12
 800712e:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	b90b      	cbnz	r3, 8007138 <osMessageQueueGet+0x2c>
  stat = osOK;
 8007134:	2000      	movs	r0, #0
 8007136:	e7f9      	b.n	800712c <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8007138:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800713c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007140:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	e7f2      	b.n	8007134 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800714e:	b150      	cbz	r0, 8007166 <osMessageQueueGet+0x5a>
 8007150:	b149      	cbz	r1, 8007166 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007152:	4622      	mov	r2, r4
 8007154:	f000 fde4 	bl	8007d20 <xQueueReceive>
 8007158:	2801      	cmp	r0, #1
 800715a:	d0eb      	beq.n	8007134 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800715c:	2c00      	cmp	r4, #0
 800715e:	d0e3      	beq.n	8007128 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8007160:	f06f 0001 	mvn.w	r0, #1
 8007164:	e7e2      	b.n	800712c <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8007166:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800716a:	e7df      	b.n	800712c <osMessageQueueGet+0x20>

0800716c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800716c:	f7ff bf59 	b.w	8007022 <osSemaphoreGetCount>

08007170 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007170:	4b03      	ldr	r3, [pc, #12]	@ (8007180 <vApplicationGetIdleTaskMemory+0x10>)
 8007172:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007174:	4b03      	ldr	r3, [pc, #12]	@ (8007184 <vApplicationGetIdleTaskMemory+0x14>)
 8007176:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007178:	2380      	movs	r3, #128	@ 0x80
 800717a:	6013      	str	r3, [r2, #0]
}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20004d30 	.word	0x20004d30
 8007184:	20004b30 	.word	0x20004b30

08007188 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007188:	4b03      	ldr	r3, [pc, #12]	@ (8007198 <vApplicationGetTimerTaskMemory+0x10>)
 800718a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800718c:	4b03      	ldr	r3, [pc, #12]	@ (800719c <vApplicationGetTimerTaskMemory+0x14>)
 800718e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007194:	6013      	str	r3, [r2, #0]
}
 8007196:	4770      	bx	lr
 8007198:	20004ad0 	.word	0x20004ad0
 800719c:	200046d0 	.word	0x200046d0

080071a0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071a0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071a2:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <prvInsertBlockIntoFreeList+0x44>)
 80071a4:	461a      	mov	r2, r3
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4283      	cmp	r3, r0
 80071aa:	d3fb      	bcc.n	80071a4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071ac:	6854      	ldr	r4, [r2, #4]
 80071ae:	1911      	adds	r1, r2, r4
 80071b0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071b2:	bf01      	itttt	eq
 80071b4:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 80071b6:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071b8:	1909      	addeq	r1, r1, r4
 80071ba:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071bc:	6844      	ldr	r4, [r0, #4]
 80071be:	1901      	adds	r1, r0, r4
 80071c0:	428b      	cmp	r3, r1
 80071c2:	d10c      	bne.n	80071de <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071c4:	4908      	ldr	r1, [pc, #32]	@ (80071e8 <prvInsertBlockIntoFreeList+0x48>)
 80071c6:	6809      	ldr	r1, [r1, #0]
 80071c8:	428b      	cmp	r3, r1
 80071ca:	d003      	beq.n	80071d4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071cc:	6859      	ldr	r1, [r3, #4]
 80071ce:	4421      	add	r1, r4
 80071d0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071d2:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071d4:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071d6:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071d8:	bf18      	it	ne
 80071da:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	4619      	mov	r1, r3
 80071e0:	e7f8      	b.n	80071d4 <prvInsertBlockIntoFreeList+0x34>
 80071e2:	bf00      	nop
 80071e4:	20004dac 	.word	0x20004dac
 80071e8:	20004da8 	.word	0x20004da8

080071ec <pvPortMalloc>:
{
 80071ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80071f2:	f001 fa27 	bl	8008644 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80071f6:	4942      	ldr	r1, [pc, #264]	@ (8007300 <pvPortMalloc+0x114>)
 80071f8:	4d42      	ldr	r5, [pc, #264]	@ (8007304 <pvPortMalloc+0x118>)
 80071fa:	680b      	ldr	r3, [r1, #0]
 80071fc:	bb0b      	cbnz	r3, 8007242 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80071fe:	4a42      	ldr	r2, [pc, #264]	@ (8007308 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007200:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007202:	bf1f      	itttt	ne
 8007204:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007206:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800720a:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 800720e:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007210:	bf0c      	ite	eq
 8007212:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007216:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007218:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800721a:	4e3c      	ldr	r6, [pc, #240]	@ (800730c <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 800721c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800721e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007222:	2000      	movs	r0, #0
 8007224:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007226:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007228:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800722c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800722e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007232:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007234:	4b36      	ldr	r3, [pc, #216]	@ (8007310 <pvPortMalloc+0x124>)
 8007236:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007238:	4b36      	ldr	r3, [pc, #216]	@ (8007314 <pvPortMalloc+0x128>)
 800723a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800723c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007240:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007242:	682e      	ldr	r6, [r5, #0]
 8007244:	4226      	tst	r6, r4
 8007246:	d155      	bne.n	80072f4 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8007248:	2c00      	cmp	r4, #0
 800724a:	d046      	beq.n	80072da <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800724c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007250:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007252:	bf1c      	itt	ne
 8007254:	f023 0307 	bicne.w	r3, r3, #7
 8007258:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800725a:	2b00      	cmp	r3, #0
 800725c:	d04a      	beq.n	80072f4 <pvPortMalloc+0x108>
 800725e:	4f2d      	ldr	r7, [pc, #180]	@ (8007314 <pvPortMalloc+0x128>)
 8007260:	683c      	ldr	r4, [r7, #0]
 8007262:	429c      	cmp	r4, r3
 8007264:	d346      	bcc.n	80072f4 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8007266:	4a29      	ldr	r2, [pc, #164]	@ (800730c <pvPortMalloc+0x120>)
 8007268:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800726a:	6868      	ldr	r0, [r5, #4]
 800726c:	4298      	cmp	r0, r3
 800726e:	d204      	bcs.n	800727a <pvPortMalloc+0x8e>
 8007270:	f8d5 c000 	ldr.w	ip, [r5]
 8007274:	f1bc 0f00 	cmp.w	ip, #0
 8007278:	d115      	bne.n	80072a6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800727a:	6809      	ldr	r1, [r1, #0]
 800727c:	42a9      	cmp	r1, r5
 800727e:	d039      	beq.n	80072f4 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007280:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007282:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007286:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007288:	1ac2      	subs	r2, r0, r3
 800728a:	2a10      	cmp	r2, #16
 800728c:	d912      	bls.n	80072b4 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800728e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007290:	0741      	lsls	r1, r0, #29
 8007292:	d00b      	beq.n	80072ac <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	e7fe      	b.n	80072a4 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 80072a6:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80072a8:	4665      	mov	r5, ip
 80072aa:	e7de      	b.n	800726a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072ac:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072ae:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072b0:	f7ff ff76 	bl	80071a0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072b4:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072b6:	4916      	ldr	r1, [pc, #88]	@ (8007310 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072b8:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072ba:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 80072bc:	4a16      	ldr	r2, [pc, #88]	@ (8007318 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072be:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072c0:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80072c6:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072c8:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072ca:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 80072cc:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072d0:	bf38      	it	cc
 80072d2:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80072d4:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072d6:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 80072da:	f001 fa5f 	bl	800879c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072de:	0763      	lsls	r3, r4, #29
 80072e0:	d00a      	beq.n	80072f8 <pvPortMalloc+0x10c>
 80072e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	e7fe      	b.n	80072f2 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 80072f4:	2400      	movs	r4, #0
 80072f6:	e7f0      	b.n	80072da <pvPortMalloc+0xee>
}
 80072f8:	4620      	mov	r0, r4
 80072fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fe:	bf00      	nop
 8007300:	20004da8 	.word	0x20004da8
 8007304:	20004d94 	.word	0x20004d94
 8007308:	20004db4 	.word	0x20004db4
 800730c:	20004dac 	.word	0x20004dac
 8007310:	20004da0 	.word	0x20004da0
 8007314:	20004da4 	.word	0x20004da4
 8007318:	20004d9c 	.word	0x20004d9c

0800731c <vPortFree>:
{
 800731c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800731e:	4604      	mov	r4, r0
 8007320:	b390      	cbz	r0, 8007388 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007322:	4a1a      	ldr	r2, [pc, #104]	@ (800738c <vPortFree+0x70>)
 8007324:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	4213      	tst	r3, r2
 800732c:	d108      	bne.n	8007340 <vPortFree+0x24>
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	e7fe      	b.n	800733e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007340:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007344:	b141      	cbz	r1, 8007358 <vPortFree+0x3c>
 8007346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	e7fe      	b.n	8007356 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007358:	ea23 0302 	bic.w	r3, r3, r2
 800735c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007360:	f001 f970 	bl	8008644 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007364:	4a0a      	ldr	r2, [pc, #40]	@ (8007390 <vPortFree+0x74>)
 8007366:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800736a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800736c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007370:	440b      	add	r3, r1
 8007372:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007374:	f7ff ff14 	bl	80071a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007378:	4a06      	ldr	r2, [pc, #24]	@ (8007394 <vPortFree+0x78>)
 800737a:	6813      	ldr	r3, [r2, #0]
}
 800737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8007380:	3301      	adds	r3, #1
 8007382:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8007384:	f001 ba0a 	b.w	800879c <xTaskResumeAll>
}
 8007388:	bd10      	pop	{r4, pc}
 800738a:	bf00      	nop
 800738c:	20004d94 	.word	0x20004d94
 8007390:	20004da4 	.word	0x20004da4
 8007394:	20004d98 	.word	0x20004d98

08007398 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007398:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800739c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a4:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073ac:	4770      	bx	lr

080073ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073b2:	4770      	bx	lr

080073b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80073b4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073b6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073bc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073be:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80073c0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80073c2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80073c4:	3301      	adds	r3, #1
 80073c6:	6003      	str	r3, [r0, #0]
}
 80073c8:	4770      	bx	lr

080073ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073ca:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073cc:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073ce:	1c63      	adds	r3, r4, #1
 80073d0:	d10a      	bne.n	80073e8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073d2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073d8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073da:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80073dc:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80073de:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80073e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80073e2:	3301      	adds	r3, #1
 80073e4:	6003      	str	r3, [r0, #0]
}
 80073e6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073e8:	f100 0208 	add.w	r2, r0, #8
 80073ec:	4613      	mov	r3, r2
 80073ee:	6852      	ldr	r2, [r2, #4]
 80073f0:	6815      	ldr	r5, [r2, #0]
 80073f2:	42a5      	cmp	r5, r4
 80073f4:	d9fa      	bls.n	80073ec <vListInsert+0x22>
 80073f6:	e7ed      	b.n	80073d4 <vListInsert+0xa>

080073f8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073f8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 80073fc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073fe:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007400:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007402:	6859      	ldr	r1, [r3, #4]
 8007404:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007406:	bf08      	it	eq
 8007408:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800740a:	2200      	movs	r2, #0
 800740c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	3a01      	subs	r2, #1
 8007412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007414:	6818      	ldr	r0, [r3, #0]
}
 8007416:	4770      	bx	lr

08007418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007418:	4808      	ldr	r0, [pc, #32]	@ (800743c <prvPortStartFirstTask+0x24>)
 800741a:	6800      	ldr	r0, [r0, #0]
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f380 8808 	msr	MSP, r0
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8814 	msr	CONTROL, r0
 800742a:	b662      	cpsie	i
 800742c:	b661      	cpsie	f
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	df00      	svc	0
 8007438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800743a:	0000      	.short	0x0000
 800743c:	e000ed08 	.word	0xe000ed08

08007440 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007440:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007450 <vPortEnableVFP+0x10>
 8007444:	6801      	ldr	r1, [r0, #0]
 8007446:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800744a:	6001      	str	r1, [r0, #0]
 800744c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800744e:	0000      	.short	0x0000
 8007450:	e000ed88 	.word	0xe000ed88

08007454 <prvTaskExitError>:
{
 8007454:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800745a:	4b0d      	ldr	r3, [pc, #52]	@ (8007490 <prvTaskExitError+0x3c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3301      	adds	r3, #1
 8007460:	d008      	beq.n	8007474 <prvTaskExitError+0x20>
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	e7fe      	b.n	8007472 <prvTaskExitError+0x1e>
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007484:	9b01      	ldr	r3, [sp, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0fc      	beq.n	8007484 <prvTaskExitError+0x30>
}
 800748a:	b002      	add	sp, #8
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000080 	.word	0x20000080

08007494 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007494:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007498:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <pxPortInitialiseStack+0x28>)
 800749e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074a2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074a6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074aa:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074ae:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074b2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80074b6:	3844      	subs	r0, #68	@ 0x44
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	08007455 	.word	0x08007455

080074c0 <SVC_Handler>:
	__asm volatile (
 80074c0:	4b07      	ldr	r3, [pc, #28]	@ (80074e0 <pxCurrentTCBConst2>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	f380 8809 	msr	PSP, r0
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	4770      	bx	lr
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst2>:
 80074e0:	200152f4 	.word	0x200152f4

080074e4 <vPortEnterCritical>:
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80074f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007520 <vPortEnterCritical+0x3c>)
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80074fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80074fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80074fe:	d10e      	bne.n	800751e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007500:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007504:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007508:	b2db      	uxtb	r3, r3
 800750a:	b143      	cbz	r3, 800751e <vPortEnterCritical+0x3a>
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	e7fe      	b.n	800751c <vPortEnterCritical+0x38>
}
 800751e:	4770      	bx	lr
 8007520:	20000080 	.word	0x20000080

08007524 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007524:	4a08      	ldr	r2, [pc, #32]	@ (8007548 <vPortExitCritical+0x24>)
 8007526:	6813      	ldr	r3, [r2, #0]
 8007528:	b943      	cbnz	r3, 800753c <vPortExitCritical+0x18>
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	e7fe      	b.n	800753a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800753c:	3b01      	subs	r3, #1
 800753e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007540:	b90b      	cbnz	r3, 8007546 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007542:	f383 8811 	msr	BASEPRI, r3
}
 8007546:	4770      	bx	lr
 8007548:	20000080 	.word	0x20000080
 800754c:	00000000 	.word	0x00000000

08007550 <PendSV_Handler>:
	__asm volatile
 8007550:	f3ef 8009 	mrs	r0, PSP
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	4b15      	ldr	r3, [pc, #84]	@ (80075b0 <pxCurrentTCBConst>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	f01e 0f10 	tst.w	lr, #16
 8007560:	bf08      	it	eq
 8007562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	6010      	str	r0, [r2, #0]
 800756c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007574:	f380 8811 	msr	BASEPRI, r0
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f001 f9a4 	bl	80088cc <vTaskSwitchContext>
 8007584:	f04f 0000 	mov.w	r0, #0
 8007588:	f380 8811 	msr	BASEPRI, r0
 800758c:	bc09      	pop	{r0, r3}
 800758e:	6819      	ldr	r1, [r3, #0]
 8007590:	6808      	ldr	r0, [r1, #0]
 8007592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007596:	f01e 0f10 	tst.w	lr, #16
 800759a:	bf08      	it	eq
 800759c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075a0:	f380 8809 	msr	PSP, r0
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	f3af 8000 	nop.w

080075b0 <pxCurrentTCBConst>:
 80075b0:	200152f4 	.word	0x200152f4

080075b4 <xPortSysTickHandler>:
{
 80075b4:	b508      	push	{r3, lr}
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80075c6:	f001 f853 	bl	8008670 <xTaskIncrementTick>
 80075ca:	b128      	cbz	r0, 80075d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80075d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80075d8:	2300      	movs	r3, #0
 80075da:	f383 8811 	msr	BASEPRI, r3
}
 80075de:	bd08      	pop	{r3, pc}

080075e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80075e4:	2300      	movs	r3, #0
 80075e6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075e8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ea:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <vPortSetupTimerInterrupt+0x20>)
 80075ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075f6:	3b01      	subs	r3, #1
 80075f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075fa:	2307      	movs	r3, #7
 80075fc:	6113      	str	r3, [r2, #16]
}
 80075fe:	4770      	bx	lr
 8007600:	20000074 	.word	0x20000074

08007604 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007604:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8007608:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800760a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800760e:	4a38      	ldr	r2, [pc, #224]	@ (80076f0 <xPortStartScheduler+0xec>)
 8007610:	4291      	cmp	r1, r2
 8007612:	d108      	bne.n	8007626 <xPortStartScheduler+0x22>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	e7fe      	b.n	8007624 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007626:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800762a:	4b32      	ldr	r3, [pc, #200]	@ (80076f4 <xPortStartScheduler+0xf0>)
 800762c:	429a      	cmp	r2, r3
 800762e:	d108      	bne.n	8007642 <xPortStartScheduler+0x3e>
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	e7fe      	b.n	8007640 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007642:	4b2d      	ldr	r3, [pc, #180]	@ (80076f8 <xPortStartScheduler+0xf4>)
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800764a:	22ff      	movs	r2, #255	@ 0xff
 800764c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800764e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007650:	4a2a      	ldr	r2, [pc, #168]	@ (80076fc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007652:	b2db      	uxtb	r3, r3
 8007654:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007658:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800765c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007660:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007662:	4a27      	ldr	r2, [pc, #156]	@ (8007700 <xPortStartScheduler+0xfc>)
 8007664:	2307      	movs	r3, #7
 8007666:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007668:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800766c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800766e:	0609      	lsls	r1, r1, #24
 8007670:	d40a      	bmi.n	8007688 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007672:	2b03      	cmp	r3, #3
 8007674:	d011      	beq.n	800769a <xPortStartScheduler+0x96>
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	e7fe      	b.n	8007686 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8007688:	3b01      	subs	r3, #1
 800768a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800768c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f88d 3003 	strb.w	r3, [sp, #3]
 8007698:	e7e6      	b.n	8007668 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800769a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800769e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076a0:	9b01      	ldr	r3, [sp, #4]
 80076a2:	4a15      	ldr	r2, [pc, #84]	@ (80076f8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076a4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076ac:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80076b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80076b4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076b8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80076bc:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80076c0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80076c4:	f7ff ff8c 	bl	80075e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80076c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007704 <xPortStartScheduler+0x100>)
 80076ca:	2500      	movs	r5, #0
 80076cc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80076ce:	f7ff feb7 	bl	8007440 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076d2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80076d6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80076da:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80076de:	f7ff fe9b 	bl	8007418 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80076e2:	f001 f8f3 	bl	80088cc <vTaskSwitchContext>
	prvTaskExitError();
 80076e6:	f7ff feb5 	bl	8007454 <prvTaskExitError>
}
 80076ea:	4628      	mov	r0, r5
 80076ec:	b003      	add	sp, #12
 80076ee:	bd30      	pop	{r4, r5, pc}
 80076f0:	410fc271 	.word	0x410fc271
 80076f4:	410fc270 	.word	0x410fc270
 80076f8:	e000e400 	.word	0xe000e400
 80076fc:	20014db8 	.word	0x20014db8
 8007700:	20014db4 	.word	0x20014db4
 8007704:	20000080 	.word	0x20000080

08007708 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007708:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800770c:	2b0f      	cmp	r3, #15
 800770e:	d90e      	bls.n	800772e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007710:	4a11      	ldr	r2, [pc, #68]	@ (8007758 <vPortValidateInterruptPriority+0x50>)
 8007712:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007714:	4a11      	ldr	r2, [pc, #68]	@ (800775c <vPortValidateInterruptPriority+0x54>)
 8007716:	7812      	ldrb	r2, [r2, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d908      	bls.n	800772e <vPortValidateInterruptPriority+0x26>
 800771c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	e7fe      	b.n	800772c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800772e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007732:	4a0b      	ldr	r2, [pc, #44]	@ (8007760 <vPortValidateInterruptPriority+0x58>)
 8007734:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800773e:	4293      	cmp	r3, r2
 8007740:	d908      	bls.n	8007754 <vPortValidateInterruptPriority+0x4c>
 8007742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	e7fe      	b.n	8007752 <vPortValidateInterruptPriority+0x4a>
	}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	e000e3f0 	.word	0xe000e3f0
 800775c:	20014db8 	.word	0x20014db8
 8007760:	20014db4 	.word	0x20014db4

08007764 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007764:	b510      	push	{r4, lr}
 8007766:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007768:	f7ff febc 	bl	80074e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800776c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800776e:	f7ff fed9 	bl	8007524 <vPortExitCritical>

	return xReturn;
}
 8007772:	fab4 f084 	clz	r0, r4
 8007776:	0940      	lsrs	r0, r0, #5
 8007778:	bd10      	pop	{r4, pc}

0800777a <prvCopyDataToQueue>:
{
 800777a:	b570      	push	{r4, r5, r6, lr}
 800777c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800777e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007780:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8007782:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007784:	b942      	cbnz	r2, 8007798 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007786:	6806      	ldr	r6, [r0, #0]
 8007788:	b99e      	cbnz	r6, 80077b2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800778a:	6880      	ldr	r0, [r0, #8]
 800778c:	f001 f9ec 	bl	8008b68 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007790:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007792:	3501      	adds	r5, #1
 8007794:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007796:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007798:	b96e      	cbnz	r6, 80077b6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800779a:	6840      	ldr	r0, [r0, #4]
 800779c:	f00b fb9d 	bl	8012eda <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80077a4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077a6:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077a8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077aa:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077ac:	bf24      	itt	cs
 80077ae:	6823      	ldrcs	r3, [r4, #0]
 80077b0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80077b2:	2000      	movs	r0, #0
 80077b4:	e7ed      	b.n	8007792 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077b6:	68c0      	ldr	r0, [r0, #12]
 80077b8:	f00b fb8f 	bl	8012eda <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077bc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80077be:	68e3      	ldr	r3, [r4, #12]
 80077c0:	4251      	negs	r1, r2
 80077c2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077c4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077c6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077c8:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077ca:	bf3e      	ittt	cc
 80077cc:	68a3      	ldrcc	r3, [r4, #8]
 80077ce:	185b      	addcc	r3, r3, r1
 80077d0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80077d2:	2e02      	cmp	r6, #2
 80077d4:	d1ed      	bne.n	80077b2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077d6:	b10d      	cbz	r5, 80077dc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80077d8:	3d01      	subs	r5, #1
 80077da:	e7ea      	b.n	80077b2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80077dc:	4628      	mov	r0, r5
 80077de:	e7d8      	b.n	8007792 <prvCopyDataToQueue+0x18>

080077e0 <prvCopyDataFromQueue>:
{
 80077e0:	4603      	mov	r3, r0
 80077e2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80077e6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077e8:	b16a      	cbz	r2, 8007806 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077ea:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077ec:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077ee:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077f0:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077f2:	bf28      	it	cs
 80077f4:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077f6:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077f8:	bf28      	it	cs
 80077fa:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077fc:	68d9      	ldr	r1, [r3, #12]
}
 80077fe:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007802:	f00b bb6a 	b.w	8012eda <memcpy>
}
 8007806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800780a:	4770      	bx	lr

0800780c <prvUnlockQueue>:
{
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007810:	f7ff fe68 	bl	80074e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007814:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007818:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800781c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800781e:	2d00      	cmp	r5, #0
 8007820:	dd01      	ble.n	8007826 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007824:	b9b3      	cbnz	r3, 8007854 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8007826:	23ff      	movs	r3, #255	@ 0xff
 8007828:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800782c:	f7ff fe7a 	bl	8007524 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007830:	f7ff fe58 	bl	80074e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007834:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007838:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800783c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800783e:	2d00      	cmp	r5, #0
 8007840:	dd01      	ble.n	8007846 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007842:	6923      	ldr	r3, [r4, #16]
 8007844:	b97b      	cbnz	r3, 8007866 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8007846:	23ff      	movs	r3, #255	@ 0xff
 8007848:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800784c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007850:	f7ff be68 	b.w	8007524 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007854:	4630      	mov	r0, r6
 8007856:	f001 f8ab 	bl	80089b0 <xTaskRemoveFromEventList>
 800785a:	b108      	cbz	r0, 8007860 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800785c:	f001 f930 	bl	8008ac0 <vTaskMissedYield>
			--cTxLock;
 8007860:	3d01      	subs	r5, #1
 8007862:	b26d      	sxtb	r5, r5
 8007864:	e7db      	b.n	800781e <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007866:	4630      	mov	r0, r6
 8007868:	f001 f8a2 	bl	80089b0 <xTaskRemoveFromEventList>
 800786c:	b108      	cbz	r0, 8007872 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800786e:	f001 f927 	bl	8008ac0 <vTaskMissedYield>
				--cRxLock;
 8007872:	3d01      	subs	r5, #1
 8007874:	b26d      	sxtb	r5, r5
 8007876:	e7e2      	b.n	800783e <prvUnlockQueue+0x32>

08007878 <xQueueGenericReset>:
{
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800787c:	4604      	mov	r4, r0
 800787e:	b940      	cbnz	r0, 8007892 <xQueueGenericReset+0x1a>
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	e7fe      	b.n	8007890 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007892:	f7ff fe27 	bl	80074e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007896:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800789a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800789c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800789e:	434b      	muls	r3, r1
 80078a0:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078a2:	1a5b      	subs	r3, r3, r1
 80078a4:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078a6:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80078a8:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078aa:	2000      	movs	r0, #0
 80078ac:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078ae:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078b0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078b4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80078b8:	b9a5      	cbnz	r5, 80078e4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	b173      	cbz	r3, 80078dc <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078be:	f104 0010 	add.w	r0, r4, #16
 80078c2:	f001 f875 	bl	80089b0 <xTaskRemoveFromEventList>
 80078c6:	b148      	cbz	r0, 80078dc <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80078c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80078cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80078dc:	f7ff fe22 	bl	8007524 <vPortExitCritical>
}
 80078e0:	2001      	movs	r0, #1
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078e4:	f104 0010 	add.w	r0, r4, #16
 80078e8:	f7ff fd56 	bl	8007398 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078ec:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80078f0:	f7ff fd52 	bl	8007398 <vListInitialise>
 80078f4:	e7f2      	b.n	80078dc <xQueueGenericReset+0x64>

080078f6 <xQueueGenericCreateStatic>:
	{
 80078f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078f8:	460d      	mov	r5, r1
 80078fa:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078fc:	b940      	cbnz	r0, 8007910 <xQueueGenericCreateStatic+0x1a>
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	e7fe      	b.n	800790e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007910:	b943      	cbnz	r3, 8007924 <xQueueGenericCreateStatic+0x2e>
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	e7fe      	b.n	8007922 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007924:	b14a      	cbz	r2, 800793a <xQueueGenericCreateStatic+0x44>
 8007926:	b991      	cbnz	r1, 800794e <xQueueGenericCreateStatic+0x58>
 8007928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	e7fe      	b.n	8007938 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800793a:	b141      	cbz	r1, 800794e <xQueueGenericCreateStatic+0x58>
 800793c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	e7fe      	b.n	800794c <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800794e:	2350      	movs	r3, #80	@ 0x50
 8007950:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	2b50      	cmp	r3, #80	@ 0x50
 8007956:	d008      	beq.n	800796a <xQueueGenericCreateStatic+0x74>
 8007958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	e7fe      	b.n	8007968 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800796a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800796c:	2d00      	cmp	r5, #0
 800796e:	bf08      	it	eq
 8007970:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007972:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007976:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 800797a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800797c:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800797e:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007980:	f7ff ff7a 	bl	8007878 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007984:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007988:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800798c:	4620      	mov	r0, r4
 800798e:	b003      	add	sp, #12
 8007990:	bd30      	pop	{r4, r5, pc}

08007992 <xQueueGenericCreate>:
	{
 8007992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007994:	460d      	mov	r5, r1
 8007996:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007998:	4606      	mov	r6, r0
 800799a:	b940      	cbnz	r0, 80079ae <xQueueGenericCreate+0x1c>
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	e7fe      	b.n	80079ac <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ae:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079b0:	3050      	adds	r0, #80	@ 0x50
 80079b2:	f7ff fc1b 	bl	80071ec <pvPortMalloc>
		if( pxNewQueue != NULL )
 80079b6:	4604      	mov	r4, r0
 80079b8:	b170      	cbz	r0, 80079d8 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80079c0:	b165      	cbz	r5, 80079dc <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079c2:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 80079c6:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80079ca:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079cc:	2101      	movs	r1, #1
 80079ce:	4620      	mov	r0, r4
 80079d0:	f7ff ff52 	bl	8007878 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80079d4:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80079d8:	4620      	mov	r0, r4
 80079da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079dc:	4603      	mov	r3, r0
 80079de:	e7f2      	b.n	80079c6 <xQueueGenericCreate+0x34>

080079e0 <xQueueCreateCountingSemaphoreStatic>:
	{
 80079e0:	b513      	push	{r0, r1, r4, lr}
 80079e2:	4613      	mov	r3, r2
 80079e4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80079e6:	b940      	cbnz	r0, 80079fa <xQueueCreateCountingSemaphoreStatic+0x1a>
 80079e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	e7fe      	b.n	80079f8 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 80079fa:	4288      	cmp	r0, r1
 80079fc:	d208      	bcs.n	8007a10 <xQueueCreateCountingSemaphoreStatic+0x30>
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	e7fe      	b.n	8007a0e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007a10:	2202      	movs	r2, #2
 8007a12:	9200      	str	r2, [sp, #0]
 8007a14:	2200      	movs	r2, #0
 8007a16:	4611      	mov	r1, r2
 8007a18:	f7ff ff6d 	bl	80078f6 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007a1c:	b100      	cbz	r0, 8007a20 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007a1e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007a20:	b002      	add	sp, #8
 8007a22:	bd10      	pop	{r4, pc}

08007a24 <xQueueCreateCountingSemaphore>:
	{
 8007a24:	b510      	push	{r4, lr}
 8007a26:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007a28:	b940      	cbnz	r0, 8007a3c <xQueueCreateCountingSemaphore+0x18>
 8007a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	e7fe      	b.n	8007a3a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007a3c:	4288      	cmp	r0, r1
 8007a3e:	d208      	bcs.n	8007a52 <xQueueCreateCountingSemaphore+0x2e>
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	e7fe      	b.n	8007a50 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007a52:	2202      	movs	r2, #2
 8007a54:	2100      	movs	r1, #0
 8007a56:	f7ff ff9c 	bl	8007992 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007a5a:	b100      	cbz	r0, 8007a5e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007a5c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007a5e:	bd10      	pop	{r4, pc}

08007a60 <xQueueGenericSend>:
{
 8007a60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007a64:	460f      	mov	r7, r1
 8007a66:	9201      	str	r2, [sp, #4]
 8007a68:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	b940      	cbnz	r0, 8007a80 <xQueueGenericSend+0x20>
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	e7fe      	b.n	8007a7e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a80:	b951      	cbnz	r1, 8007a98 <xQueueGenericSend+0x38>
 8007a82:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007a84:	b143      	cbz	r3, 8007a98 <xQueueGenericSend+0x38>
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	e7fe      	b.n	8007a96 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a98:	2e02      	cmp	r6, #2
 8007a9a:	d10b      	bne.n	8007ab4 <xQueueGenericSend+0x54>
 8007a9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d008      	beq.n	8007ab4 <xQueueGenericSend+0x54>
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	e7fe      	b.n	8007ab2 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ab4:	f001 f80a 	bl	8008acc <xTaskGetSchedulerState>
 8007ab8:	4605      	mov	r5, r0
 8007aba:	b320      	cbz	r0, 8007b06 <xQueueGenericSend+0xa6>
 8007abc:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007abe:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007ac2:	f7ff fd0f 	bl	80074e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ac6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007ac8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d227      	bcs.n	8007b1e <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ace:	4632      	mov	r2, r6
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff fe51 	bl	800777a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ad8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ada:	b11b      	cbz	r3, 8007ae4 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007adc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007ae0:	f000 ff66 	bl	80089b0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007ae4:	b148      	cbz	r0, 8007afa <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8007ae6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007afa:	f7ff fd13 	bl	8007524 <vPortExitCritical>
				return pdPASS;
 8007afe:	2001      	movs	r0, #1
}
 8007b00:	b004      	add	sp, #16
 8007b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0d8      	beq.n	8007abe <xQueueGenericSend+0x5e>
 8007b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	e7fe      	b.n	8007b1c <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b1e:	2e02      	cmp	r6, #2
 8007b20:	d0d5      	beq.n	8007ace <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b22:	9b01      	ldr	r3, [sp, #4]
 8007b24:	b91b      	cbnz	r3, 8007b2e <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007b26:	f7ff fcfd 	bl	8007524 <vPortExitCritical>
					return errQUEUE_FULL;
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e7e8      	b.n	8007b00 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 8007b2e:	b915      	cbnz	r5, 8007b36 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b30:	a802      	add	r0, sp, #8
 8007b32:	f000 ff7d 	bl	8008a30 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007b36:	f7ff fcf5 	bl	8007524 <vPortExitCritical>
		vTaskSuspendAll();
 8007b3a:	f000 fd83 	bl	8008644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b3e:	f7ff fcd1 	bl	80074e4 <vPortEnterCritical>
 8007b42:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007b46:	2bff      	cmp	r3, #255	@ 0xff
 8007b48:	bf08      	it	eq
 8007b4a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007b4e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b52:	2bff      	cmp	r3, #255	@ 0xff
 8007b54:	bf08      	it	eq
 8007b56:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007b5a:	f7ff fce3 	bl	8007524 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b5e:	a901      	add	r1, sp, #4
 8007b60:	a802      	add	r0, sp, #8
 8007b62:	f000 ff71 	bl	8008a48 <xTaskCheckForTimeOut>
 8007b66:	bb38      	cbnz	r0, 8007bb8 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b68:	f7ff fcbc 	bl	80074e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007b6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d10e      	bne.n	8007b92 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007b74:	f7ff fcd6 	bl	8007524 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b78:	9901      	ldr	r1, [sp, #4]
 8007b7a:	f104 0010 	add.w	r0, r4, #16
 8007b7e:	f000 fedf 	bl	8008940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7ff fe42 	bl	800780c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b88:	f000 fe08 	bl	800879c <xTaskResumeAll>
 8007b8c:	b148      	cbz	r0, 8007ba2 <xQueueGenericSend+0x142>
 8007b8e:	2501      	movs	r5, #1
 8007b90:	e797      	b.n	8007ac2 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007b92:	f7ff fcc7 	bl	8007524 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007b96:	4620      	mov	r0, r4
 8007b98:	f7ff fe38 	bl	800780c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b9c:	f000 fdfe 	bl	800879c <xTaskResumeAll>
 8007ba0:	e7f5      	b.n	8007b8e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007ba2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007baa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	e7ea      	b.n	8007b8e <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7ff fe27 	bl	800780c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bbe:	f000 fded 	bl	800879c <xTaskResumeAll>
			return errQUEUE_FULL;
 8007bc2:	e7b2      	b.n	8007b2a <xQueueGenericSend+0xca>

08007bc4 <xQueueGenericSendFromISR>:
{
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	4689      	mov	r9, r1
 8007bca:	4617      	mov	r7, r2
 8007bcc:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007bce:	4604      	mov	r4, r0
 8007bd0:	b940      	cbnz	r0, 8007be4 <xQueueGenericSendFromISR+0x20>
 8007bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	e7fe      	b.n	8007be2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007be4:	b951      	cbnz	r1, 8007bfc <xQueueGenericSendFromISR+0x38>
 8007be6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007be8:	b143      	cbz	r3, 8007bfc <xQueueGenericSendFromISR+0x38>
 8007bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	e7fe      	b.n	8007bfa <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bfc:	2e02      	cmp	r6, #2
 8007bfe:	d10b      	bne.n	8007c18 <xQueueGenericSendFromISR+0x54>
 8007c00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d008      	beq.n	8007c18 <xQueueGenericSendFromISR+0x54>
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	e7fe      	b.n	8007c16 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c18:	f7ff fd76 	bl	8007708 <vPortValidateInterruptPriority>
	__asm volatile
 8007c1c:	f3ef 8811 	mrs	r8, BASEPRI
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c30:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007c32:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d301      	bcc.n	8007c3c <xQueueGenericSendFromISR+0x78>
 8007c38:	2e02      	cmp	r6, #2
 8007c3a:	d11e      	bne.n	8007c7a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c3c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c42:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c44:	4632      	mov	r2, r6
 8007c46:	4649      	mov	r1, r9
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f7ff fd96 	bl	800777a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007c4e:	1c6b      	adds	r3, r5, #1
 8007c50:	d10e      	bne.n	8007c70 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c54:	b13b      	cbz	r3, 8007c66 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c56:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007c5a:	f000 fea9 	bl	80089b0 <xTaskRemoveFromEventList>
 8007c5e:	b110      	cbz	r0, 8007c66 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8007c60:	b10f      	cbz	r7, 8007c66 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c62:	2301      	movs	r3, #1
 8007c64:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8007c66:	2001      	movs	r0, #1
	__asm volatile
 8007c68:	f388 8811 	msr	BASEPRI, r8
}
 8007c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c70:	3501      	adds	r5, #1
 8007c72:	b26d      	sxtb	r5, r5
 8007c74:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8007c78:	e7f5      	b.n	8007c66 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	e7f4      	b.n	8007c68 <xQueueGenericSendFromISR+0xa4>

08007c7e <xQueueGiveFromISR>:
{
 8007c7e:	b570      	push	{r4, r5, r6, lr}
 8007c80:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007c82:	4604      	mov	r4, r0
 8007c84:	b940      	cbnz	r0, 8007c98 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	e7fe      	b.n	8007c96 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c98:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007c9a:	b143      	cbz	r3, 8007cae <xQueueGiveFromISR+0x30>
 8007c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	e7fe      	b.n	8007cac <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007cae:	6803      	ldr	r3, [r0, #0]
 8007cb0:	b953      	cbnz	r3, 8007cc8 <xQueueGiveFromISR+0x4a>
 8007cb2:	6883      	ldr	r3, [r0, #8]
 8007cb4:	b143      	cbz	r3, 8007cc8 <xQueueGiveFromISR+0x4a>
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	e7fe      	b.n	8007cc6 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cc8:	f7ff fd1e 	bl	8007708 <vPortValidateInterruptPriority>
	__asm volatile
 8007ccc:	f3ef 8611 	mrs	r6, BASEPRI
 8007cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ce0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ce2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d919      	bls.n	8007d1c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cec:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8007cee:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cf0:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cf2:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8007cf4:	d10d      	bne.n	8007d12 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007cf8:	b13b      	cbz	r3, 8007d0a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cfa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007cfe:	f000 fe57 	bl	80089b0 <xTaskRemoveFromEventList>
 8007d02:	b110      	cbz	r0, 8007d0a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007d04:	b10d      	cbz	r5, 8007d0a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8007d0a:	2001      	movs	r0, #1
	__asm volatile
 8007d0c:	f386 8811 	msr	BASEPRI, r6
}
 8007d10:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d12:	3301      	adds	r3, #1
 8007d14:	b25b      	sxtb	r3, r3
 8007d16:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007d1a:	e7f6      	b.n	8007d0a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e7f5      	b.n	8007d0c <xQueueGiveFromISR+0x8e>

08007d20 <xQueueReceive>:
{
 8007d20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007d24:	460e      	mov	r6, r1
 8007d26:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007d28:	4604      	mov	r4, r0
 8007d2a:	b940      	cbnz	r0, 8007d3e <xQueueReceive+0x1e>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	e7fe      	b.n	8007d3c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d3e:	b951      	cbnz	r1, 8007d56 <xQueueReceive+0x36>
 8007d40:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007d42:	b143      	cbz	r3, 8007d56 <xQueueReceive+0x36>
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	e7fe      	b.n	8007d54 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d56:	f000 feb9 	bl	8008acc <xTaskGetSchedulerState>
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	b318      	cbz	r0, 8007da6 <xQueueReceive+0x86>
 8007d5e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007d60:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007d64:	f7ff fbbe 	bl	80074e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d68:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d6a:	b347      	cbz	r7, 8007dbe <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d70:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d72:	f7ff fd35 	bl	80077e0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d76:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	b173      	cbz	r3, 8007d9a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d7c:	f104 0010 	add.w	r0, r4, #16
 8007d80:	f000 fe16 	bl	80089b0 <xTaskRemoveFromEventList>
 8007d84:	b148      	cbz	r0, 8007d9a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8007d86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007d9a:	f7ff fbc3 	bl	8007524 <vPortExitCritical>
				return pdPASS;
 8007d9e:	2001      	movs	r0, #1
}
 8007da0:	b004      	add	sp, #16
 8007da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0d9      	beq.n	8007d60 <xQueueReceive+0x40>
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	e7fe      	b.n	8007dbc <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	b91b      	cbnz	r3, 8007dca <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8007dc2:	f7ff fbaf 	bl	8007524 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	e7ea      	b.n	8007da0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8007dca:	b915      	cbnz	r5, 8007dd2 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dcc:	a802      	add	r0, sp, #8
 8007dce:	f000 fe2f 	bl	8008a30 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007dd2:	f7ff fba7 	bl	8007524 <vPortExitCritical>
		vTaskSuspendAll();
 8007dd6:	f000 fc35 	bl	8008644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dda:	f7ff fb83 	bl	80074e4 <vPortEnterCritical>
 8007dde:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007de2:	2bff      	cmp	r3, #255	@ 0xff
 8007de4:	bf08      	it	eq
 8007de6:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007dea:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007dee:	2bff      	cmp	r3, #255	@ 0xff
 8007df0:	bf08      	it	eq
 8007df2:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007df6:	f7ff fb95 	bl	8007524 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dfa:	a901      	add	r1, sp, #4
 8007dfc:	a802      	add	r0, sp, #8
 8007dfe:	f000 fe23 	bl	8008a48 <xTaskCheckForTimeOut>
 8007e02:	bb00      	cbnz	r0, 8007e46 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e04:	4620      	mov	r0, r4
 8007e06:	f7ff fcad 	bl	8007764 <prvIsQueueEmpty>
 8007e0a:	b1b0      	cbz	r0, 8007e3a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e0c:	9901      	ldr	r1, [sp, #4]
 8007e0e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e12:	f000 fd95 	bl	8008940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7ff fcf8 	bl	800780c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e1c:	f000 fcbe 	bl	800879c <xTaskResumeAll>
 8007e20:	b948      	cbnz	r0, 8007e36 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007e22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	2501      	movs	r5, #1
 8007e38:	e794      	b.n	8007d64 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff fce6 	bl	800780c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e40:	f000 fcac 	bl	800879c <xTaskResumeAll>
 8007e44:	e7f7      	b.n	8007e36 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7ff fce0 	bl	800780c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e4c:	f000 fca6 	bl	800879c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7ff fc87 	bl	8007764 <prvIsQueueEmpty>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d0ed      	beq.n	8007e36 <xQueueReceive+0x116>
 8007e5a:	e7b4      	b.n	8007dc6 <xQueueReceive+0xa6>

08007e5c <xQueueSemaphoreTake>:
{
 8007e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007e60:	4604      	mov	r4, r0
{
 8007e62:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007e64:	b940      	cbnz	r0, 8007e78 <xQueueSemaphoreTake+0x1c>
 8007e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	e7fe      	b.n	8007e76 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e78:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8007e7a:	b145      	cbz	r5, 8007e8e <xQueueSemaphoreTake+0x32>
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	e7fe      	b.n	8007e8c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e8e:	f000 fe1d 	bl	8008acc <xTaskGetSchedulerState>
 8007e92:	4606      	mov	r6, r0
 8007e94:	b320      	cbz	r0, 8007ee0 <xQueueSemaphoreTake+0x84>
 8007e96:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007e98:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8007e9a:	f7ff fb23 	bl	80074e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ea0:	b353      	cbz	r3, 8007ef8 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	b913      	cbnz	r3, 8007eb0 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007eaa:	f000 feed 	bl	8008c88 <pvTaskIncrementMutexHeldCount>
 8007eae:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eb0:	6923      	ldr	r3, [r4, #16]
 8007eb2:	b173      	cbz	r3, 8007ed2 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eb4:	f104 0010 	add.w	r0, r4, #16
 8007eb8:	f000 fd7a 	bl	80089b0 <xTaskRemoveFromEventList>
 8007ebc:	b148      	cbz	r0, 8007ed2 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8007ebe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ec6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007ed2:	f7ff fb27 	bl	8007524 <vPortExitCritical>
				return pdPASS;
 8007ed6:	2001      	movs	r0, #1
}
 8007ed8:	b005      	add	sp, #20
 8007eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007edc:	4635      	mov	r5, r6
 8007ede:	e7db      	b.n	8007e98 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0fa      	beq.n	8007edc <xQueueSemaphoreTake+0x80>
 8007ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	e7fe      	b.n	8007ef6 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ef8:	9b01      	ldr	r3, [sp, #4]
 8007efa:	b953      	cbnz	r3, 8007f12 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	d066      	beq.n	8007fce <xQueueSemaphoreTake+0x172>
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	e7fe      	b.n	8007f10 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8007f12:	b916      	cbnz	r6, 8007f1a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f14:	a802      	add	r0, sp, #8
 8007f16:	f000 fd8b 	bl	8008a30 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007f1a:	f7ff fb03 	bl	8007524 <vPortExitCritical>
		vTaskSuspendAll();
 8007f1e:	f000 fb91 	bl	8008644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f22:	f7ff fadf 	bl	80074e4 <vPortEnterCritical>
 8007f26:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007f2a:	2bff      	cmp	r3, #255	@ 0xff
 8007f2c:	bf08      	it	eq
 8007f2e:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8007f32:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007f36:	2bff      	cmp	r3, #255	@ 0xff
 8007f38:	bf08      	it	eq
 8007f3a:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8007f3e:	f7ff faf1 	bl	8007524 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f42:	a901      	add	r1, sp, #4
 8007f44:	a802      	add	r0, sp, #8
 8007f46:	f000 fd7f 	bl	8008a48 <xTaskCheckForTimeOut>
 8007f4a:	bb50      	cbnz	r0, 8007fa2 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f7ff fc09 	bl	8007764 <prvIsQueueEmpty>
 8007f52:	b300      	cbz	r0, 8007f96 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	b93b      	cbnz	r3, 8007f68 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8007f58:	f7ff fac4 	bl	80074e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f5c:	68a0      	ldr	r0, [r4, #8]
 8007f5e:	f000 fdc5 	bl	8008aec <xTaskPriorityInherit>
 8007f62:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007f64:	f7ff fade 	bl	8007524 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f68:	9901      	ldr	r1, [sp, #4]
 8007f6a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f6e:	f000 fce7 	bl	8008940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f72:	4620      	mov	r0, r4
 8007f74:	f7ff fc4a 	bl	800780c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f78:	f000 fc10 	bl	800879c <xTaskResumeAll>
 8007f7c:	b948      	cbnz	r0, 8007f92 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8007f7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	2601      	movs	r6, #1
 8007f94:	e781      	b.n	8007e9a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8007f96:	4620      	mov	r0, r4
 8007f98:	f7ff fc38 	bl	800780c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f9c:	f000 fbfe 	bl	800879c <xTaskResumeAll>
 8007fa0:	e7f7      	b.n	8007f92 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f7ff fc32 	bl	800780c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fa8:	f000 fbf8 	bl	800879c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fac:	4620      	mov	r0, r4
 8007fae:	f7ff fbd9 	bl	8007764 <prvIsQueueEmpty>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d0ed      	beq.n	8007f92 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8007fb6:	b165      	cbz	r5, 8007fd2 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8007fb8:	f7ff fa94 	bl	80074e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007fbc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007fbe:	b119      	cbz	r1, 8007fc8 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007fc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fc8:	68a0      	ldr	r0, [r4, #8]
 8007fca:	f000 fe0f 	bl	8008bec <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007fce:	f7ff faa9 	bl	8007524 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e780      	b.n	8007ed8 <xQueueSemaphoreTake+0x7c>

08007fd6 <xQueueReceiveFromISR>:
{
 8007fd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fda:	4689      	mov	r9, r1
 8007fdc:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007fde:	4604      	mov	r4, r0
 8007fe0:	b940      	cbnz	r0, 8007ff4 <xQueueReceiveFromISR+0x1e>
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	e7fe      	b.n	8007ff2 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ff4:	b951      	cbnz	r1, 800800c <xQueueReceiveFromISR+0x36>
 8007ff6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007ff8:	b143      	cbz	r3, 800800c <xQueueReceiveFromISR+0x36>
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	e7fe      	b.n	800800a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800800c:	f7ff fb7c 	bl	8007708 <vPortValidateInterruptPriority>
	__asm volatile
 8008010:	f3ef 8711 	mrs	r7, BASEPRI
 8008014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008024:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008026:	b30d      	cbz	r5, 800806c <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008028:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800802c:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800802e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008030:	4620      	mov	r0, r4
 8008032:	f7ff fbd5 	bl	80077e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008036:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008038:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800803a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800803c:	d111      	bne.n	8008062 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	b153      	cbz	r3, 8008058 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008042:	f104 0010 	add.w	r0, r4, #16
 8008046:	f000 fcb3 	bl	80089b0 <xTaskRemoveFromEventList>
 800804a:	b128      	cbz	r0, 8008058 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800804c:	f1b8 0f00 	cmp.w	r8, #0
 8008050:	d002      	beq.n	8008058 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008052:	2301      	movs	r3, #1
 8008054:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008058:	2001      	movs	r0, #1
	__asm volatile
 800805a:	f387 8811 	msr	BASEPRI, r7
}
 800805e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008062:	3601      	adds	r6, #1
 8008064:	b276      	sxtb	r6, r6
 8008066:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800806a:	e7f5      	b.n	8008058 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800806c:	4628      	mov	r0, r5
 800806e:	e7f4      	b.n	800805a <xQueueReceiveFromISR+0x84>

08008070 <uxQueueMessagesWaiting>:
{
 8008070:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8008072:	4604      	mov	r4, r0
 8008074:	b940      	cbnz	r0, 8008088 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	e7fe      	b.n	8008086 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8008088:	f7ff fa2c 	bl	80074e4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800808c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 800808e:	f7ff fa49 	bl	8007524 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008092:	4620      	mov	r0, r4
 8008094:	bd10      	pop	{r4, pc}

08008096 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8008096:	b940      	cbnz	r0, 80080aa <uxQueueMessagesWaitingFromISR+0x14>
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	e7fe      	b.n	80080a8 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 80080aa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80080ac:	4770      	bx	lr
	...

080080b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080b0:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080b2:	4a07      	ldr	r2, [pc, #28]	@ (80080d0 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080b4:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080b6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80080ba:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80080be:	b91d      	cbnz	r5, 80080c8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080c4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080c6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080c8:	3301      	adds	r3, #1
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d1f3      	bne.n	80080b6 <vQueueAddToRegistry+0x6>
 80080ce:	e7fa      	b.n	80080c6 <vQueueAddToRegistry+0x16>
 80080d0:	20014dbc 	.word	0x20014dbc

080080d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80080d4:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80080d6:	4a09      	ldr	r2, [pc, #36]	@ (80080fc <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080d8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80080da:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80080de:	4281      	cmp	r1, r0
 80080e0:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 80080e4:	d106      	bne.n	80080f4 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80080e6:	4a06      	ldr	r2, [pc, #24]	@ (8008100 <vQueueUnregisterQueue+0x2c>)
 80080e8:	2100      	movs	r1, #0
 80080ea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80080ee:	4422      	add	r2, r4
 80080f0:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80080f2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080f4:	3301      	adds	r3, #1
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d1ef      	bne.n	80080da <vQueueUnregisterQueue+0x6>
 80080fa:	e7fa      	b.n	80080f2 <vQueueUnregisterQueue+0x1e>
 80080fc:	20014dc0 	.word	0x20014dc0
 8008100:	20014dbc 	.word	0x20014dbc

08008104 <vQueueDelete>:
{
 8008104:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008106:	b940      	cbnz	r0, 800811a <vQueueDelete+0x16>
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	e7fe      	b.n	8008118 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800811a:	f7ff ffdb 	bl	80080d4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800811e:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8008122:	b91b      	cbnz	r3, 800812c <vQueueDelete+0x28>
}
 8008124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008128:	f7ff b8f8 	b.w	800731c <vPortFree>
}
 800812c:	bd10      	pop	{r4, pc}

0800812e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800812e:	b570      	push	{r4, r5, r6, lr}
 8008130:	4604      	mov	r4, r0
 8008132:	460d      	mov	r5, r1
 8008134:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008136:	f7ff f9d5 	bl	80074e4 <vPortEnterCritical>
 800813a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800813e:	2bff      	cmp	r3, #255	@ 0xff
 8008140:	bf04      	itt	eq
 8008142:	2300      	moveq	r3, #0
 8008144:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8008148:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800814c:	2bff      	cmp	r3, #255	@ 0xff
 800814e:	bf04      	itt	eq
 8008150:	2300      	moveq	r3, #0
 8008152:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8008156:	f7ff f9e5 	bl	8007524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800815a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800815c:	b92b      	cbnz	r3, 800816a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800815e:	4632      	mov	r2, r6
 8008160:	4629      	mov	r1, r5
 8008162:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008166:	f000 fc05 	bl	8008974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800816a:	4620      	mov	r0, r4
	}
 800816c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008170:	f7ff bb4c 	b.w	800780c <prvUnlockQueue>

08008174 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008178:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800817a:	f7ff f9b3 	bl	80074e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800817e:	4b30      	ldr	r3, [pc, #192]	@ (8008240 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8008180:	4e30      	ldr	r6, [pc, #192]	@ (8008244 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	4f30      	ldr	r7, [pc, #192]	@ (8008248 <prvAddNewTaskToReadyList+0xd4>)
 8008186:	3201      	adds	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800818a:	6835      	ldr	r5, [r6, #0]
 800818c:	2d00      	cmp	r5, #0
 800818e:	d14b      	bne.n	8008228 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008190:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d11f      	bne.n	80081d8 <prvAddNewTaskToReadyList+0x64>
 8008198:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800819a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800819c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800819e:	f7ff f8fb 	bl	8007398 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081a2:	2d38      	cmp	r5, #56	@ 0x38
 80081a4:	f108 0814 	add.w	r8, r8, #20
 80081a8:	d1f7      	bne.n	800819a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081aa:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8008270 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 80081ae:	4d27      	ldr	r5, [pc, #156]	@ (800824c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80081b0:	4640      	mov	r0, r8
 80081b2:	f7ff f8f1 	bl	8007398 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081b6:	4628      	mov	r0, r5
 80081b8:	f7ff f8ee 	bl	8007398 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081bc:	4824      	ldr	r0, [pc, #144]	@ (8008250 <prvAddNewTaskToReadyList+0xdc>)
 80081be:	f7ff f8eb 	bl	8007398 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081c2:	4824      	ldr	r0, [pc, #144]	@ (8008254 <prvAddNewTaskToReadyList+0xe0>)
 80081c4:	f7ff f8e8 	bl	8007398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081c8:	4823      	ldr	r0, [pc, #140]	@ (8008258 <prvAddNewTaskToReadyList+0xe4>)
 80081ca:	f7ff f8e5 	bl	8007398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ce:	4b23      	ldr	r3, [pc, #140]	@ (800825c <prvAddNewTaskToReadyList+0xe8>)
 80081d0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081d4:	4b22      	ldr	r3, [pc, #136]	@ (8008260 <prvAddNewTaskToReadyList+0xec>)
 80081d6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80081d8:	4a22      	ldr	r2, [pc, #136]	@ (8008264 <prvAddNewTaskToReadyList+0xf0>)
 80081da:	6813      	ldr	r3, [r2, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80081e0:	4a21      	ldr	r2, [pc, #132]	@ (8008268 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081e2:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80081e4:	6811      	ldr	r1, [r2, #0]
 80081e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80081e8:	2014      	movs	r0, #20
 80081ea:	428b      	cmp	r3, r1
 80081ec:	fb00 7003 	mla	r0, r0, r3, r7
 80081f0:	f104 0104 	add.w	r1, r4, #4
 80081f4:	bf88      	it	hi
 80081f6:	6013      	strhi	r3, [r2, #0]
 80081f8:	f7ff f8dc 	bl	80073b4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80081fc:	f7ff f992 	bl	8007524 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008200:	4b1a      	ldr	r3, [pc, #104]	@ (800826c <prvAddNewTaskToReadyList+0xf8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	b173      	cbz	r3, 8008224 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008206:	6833      	ldr	r3, [r6, #0]
 8008208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800820c:	429a      	cmp	r2, r3
 800820e:	d209      	bcs.n	8008224 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8008210:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008218:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	f3bf 8f6f 	isb	sy
}
 8008224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008228:	4b10      	ldr	r3, [pc, #64]	@ (800826c <prvAddNewTaskToReadyList+0xf8>)
 800822a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800822c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800822e:	2a00      	cmp	r2, #0
 8008230:	d1d2      	bne.n	80081d8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008232:	6832      	ldr	r2, [r6, #0]
 8008234:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008236:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008238:	bf98      	it	ls
 800823a:	6034      	strls	r4, [r6, #0]
 800823c:	e7cc      	b.n	80081d8 <prvAddNewTaskToReadyList+0x64>
 800823e:	bf00      	nop
 8008240:	20014e20 	.word	0x20014e20
 8008244:	200152f4 	.word	0x200152f4
 8008248:	20014e94 	.word	0x20014e94
 800824c:	20014e6c 	.word	0x20014e6c
 8008250:	20014e50 	.word	0x20014e50
 8008254:	20014e3c 	.word	0x20014e3c
 8008258:	20014e24 	.word	0x20014e24
 800825c:	20014e68 	.word	0x20014e68
 8008260:	20014e64 	.word	0x20014e64
 8008264:	20014e04 	.word	0x20014e04
 8008268:	20014e18 	.word	0x20014e18
 800826c:	20014e14 	.word	0x20014e14
 8008270:	20014e80 	.word	0x20014e80

08008274 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008276:	4b15      	ldr	r3, [pc, #84]	@ (80082cc <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008278:	4d15      	ldr	r5, [pc, #84]	@ (80082d0 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800827a:	681c      	ldr	r4, [r3, #0]
{
 800827c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800827e:	6828      	ldr	r0, [r5, #0]
 8008280:	3004      	adds	r0, #4
{
 8008282:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008284:	f7ff f8b8 	bl	80073f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008288:	1c73      	adds	r3, r6, #1
 800828a:	d107      	bne.n	800829c <prvAddCurrentTaskToDelayedList+0x28>
 800828c:	b137      	cbz	r7, 800829c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800828e:	6829      	ldr	r1, [r5, #0]
 8008290:	4810      	ldr	r0, [pc, #64]	@ (80082d4 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008296:	3104      	adds	r1, #4
 8008298:	f7ff b88c 	b.w	80073b4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	19a4      	adds	r4, r4, r6
 80082a0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082a2:	d307      	bcc.n	80082b4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a4:	4b0c      	ldr	r3, [pc, #48]	@ (80082d8 <prvAddCurrentTaskToDelayedList+0x64>)
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	6829      	ldr	r1, [r5, #0]
}
 80082aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ae:	3104      	adds	r1, #4
 80082b0:	f7ff b88b 	b.w	80073ca <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b4:	4b09      	ldr	r3, [pc, #36]	@ (80082dc <prvAddCurrentTaskToDelayedList+0x68>)
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	6829      	ldr	r1, [r5, #0]
 80082ba:	3104      	adds	r1, #4
 80082bc:	f7ff f885 	bl	80073ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c0:	4b07      	ldr	r3, [pc, #28]	@ (80082e0 <prvAddCurrentTaskToDelayedList+0x6c>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80082c6:	bf88      	it	hi
 80082c8:	601c      	strhi	r4, [r3, #0]
}
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082cc:	20014e1c 	.word	0x20014e1c
 80082d0:	200152f4 	.word	0x200152f4
 80082d4:	20014e24 	.word	0x20014e24
 80082d8:	20014e64 	.word	0x20014e64
 80082dc:	20014e68 	.word	0x20014e68
 80082e0:	20014e00 	.word	0x20014e00

080082e4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e4:	4a06      	ldr	r2, [pc, #24]	@ (8008300 <prvResetNextTaskUnblockTime+0x1c>)
 80082e6:	6813      	ldr	r3, [r2, #0]
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <prvResetNextTaskUnblockTime+0x20>)
 80082ec:	b919      	cbnz	r1, 80082f6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80082ee:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f6:	6812      	ldr	r2, [r2, #0]
 80082f8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082fa:	68d2      	ldr	r2, [r2, #12]
 80082fc:	6852      	ldr	r2, [r2, #4]
 80082fe:	e7f8      	b.n	80082f2 <prvResetNextTaskUnblockTime+0xe>
 8008300:	20014e68 	.word	0x20014e68
 8008304:	20014e00 	.word	0x20014e00

08008308 <prvDeleteTCB>:
	{
 8008308:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800830a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800830e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008310:	b93b      	cbnz	r3, 8008322 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008312:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008314:	f7ff f802 	bl	800731c <vPortFree>
				vPortFree( pxTCB );
 8008318:	4620      	mov	r0, r4
	}
 800831a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800831e:	f7fe bffd 	b.w	800731c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008322:	2b01      	cmp	r3, #1
 8008324:	d0f9      	beq.n	800831a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008326:	2b02      	cmp	r3, #2
 8008328:	d008      	beq.n	800833c <prvDeleteTCB+0x34>
 800832a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	e7fe      	b.n	800833a <prvDeleteTCB+0x32>
	}
 800833c:	bd10      	pop	{r4, pc}
	...

08008340 <prvIdleTask>:
{
 8008340:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008342:	4c13      	ldr	r4, [pc, #76]	@ (8008390 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008344:	4f13      	ldr	r7, [pc, #76]	@ (8008394 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008346:	4d14      	ldr	r5, [pc, #80]	@ (8008398 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	b973      	cbnz	r3, 800836a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800834c:	4b13      	ldr	r3, [pc, #76]	@ (800839c <prvIdleTask+0x5c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d9f8      	bls.n	8008346 <prvIdleTask+0x6>
				taskYIELD();
 8008354:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800835c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	e7ed      	b.n	8008346 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800836a:	f7ff f8bb 	bl	80074e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008372:	1d30      	adds	r0, r6, #4
 8008374:	f7ff f840 	bl	80073f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	3b01      	subs	r3, #1
 800837c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	3b01      	subs	r3, #1
 8008382:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008384:	f7ff f8ce 	bl	8007524 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008388:	4630      	mov	r0, r6
 800838a:	f7ff ffbd 	bl	8008308 <prvDeleteTCB>
 800838e:	e7db      	b.n	8008348 <prvIdleTask+0x8>
 8008390:	20014e38 	.word	0x20014e38
 8008394:	20014e3c 	.word	0x20014e3c
 8008398:	20014e20 	.word	0x20014e20
 800839c:	20014e94 	.word	0x20014e94

080083a0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a4:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083a8:	0096      	lsls	r6, r2, #2
 80083aa:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083ac:	4607      	mov	r7, r0
 80083ae:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083b0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80083b2:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083b4:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083b6:	f00a fcc0 	bl	8012d3a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80083bc:	3e04      	subs	r6, #4
 80083be:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083c0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80083c4:	b3b5      	cbz	r5, 8008434 <prvInitialiseNewTask.constprop.0+0x94>
 80083c6:	1e6b      	subs	r3, r5, #1
 80083c8:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80083cc:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083ce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80083d2:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80083d6:	b109      	cbz	r1, 80083dc <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083d8:	42ab      	cmp	r3, r5
 80083da:	d1f8      	bne.n	80083ce <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083dc:	2300      	movs	r3, #0
 80083de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083e2:	9d08      	ldr	r5, [sp, #32]
 80083e4:	2d37      	cmp	r5, #55	@ 0x37
 80083e6:	bf28      	it	cs
 80083e8:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80083ea:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80083ee:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80083f0:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083f2:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80083f4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083f8:	f7fe ffd9 	bl	80073ae <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083fc:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008400:	f104 0018 	add.w	r0, r4, #24
 8008404:	f7fe ffd3 	bl	80073ae <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008408:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800840c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800840e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008410:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008412:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008416:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800841a:	4642      	mov	r2, r8
 800841c:	4639      	mov	r1, r7
 800841e:	4630      	mov	r0, r6
 8008420:	f7ff f838 	bl	8007494 <pxPortInitialiseStack>
 8008424:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008426:	f1b9 0f00 	cmp.w	r9, #0
 800842a:	d001      	beq.n	8008430 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800842c:	f8c9 4000 	str.w	r4, [r9]
}
 8008430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008434:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8008438:	e7d3      	b.n	80083e2 <prvInitialiseNewTask.constprop.0+0x42>

0800843a <xTaskCreateStatic>:
	{
 800843a:	b570      	push	{r4, r5, r6, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008442:	b945      	cbnz	r5, 8008456 <xTaskCreateStatic+0x1c>
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	e7fe      	b.n	8008454 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008456:	b944      	cbnz	r4, 800846a <xTaskCreateStatic+0x30>
 8008458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	e7fe      	b.n	8008468 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800846a:	2660      	movs	r6, #96	@ 0x60
 800846c:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800846e:	9e05      	ldr	r6, [sp, #20]
 8008470:	2e60      	cmp	r6, #96	@ 0x60
 8008472:	d008      	beq.n	8008486 <xTaskCreateStatic+0x4c>
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	e7fe      	b.n	8008484 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008486:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008488:	2502      	movs	r5, #2
 800848a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800848e:	ad04      	add	r5, sp, #16
 8008490:	9501      	str	r5, [sp, #4]
 8008492:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008494:	9402      	str	r4, [sp, #8]
 8008496:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008498:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800849a:	f7ff ff81 	bl	80083a0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff fe68 	bl	8008174 <prvAddNewTaskToReadyList>
	}
 80084a4:	9804      	ldr	r0, [sp, #16]
 80084a6:	b006      	add	sp, #24
 80084a8:	bd70      	pop	{r4, r5, r6, pc}

080084aa <xTaskCreate>:
	{
 80084aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084ae:	4607      	mov	r7, r0
 80084b0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084b2:	0090      	lsls	r0, r2, #2
	{
 80084b4:	4688      	mov	r8, r1
 80084b6:	4616      	mov	r6, r2
 80084b8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084ba:	f7fe fe97 	bl	80071ec <pvPortMalloc>
			if( pxStack != NULL )
 80084be:	4605      	mov	r5, r0
 80084c0:	b920      	cbnz	r0, 80084cc <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80084c6:	b005      	add	sp, #20
 80084c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084cc:	2060      	movs	r0, #96	@ 0x60
 80084ce:	f7fe fe8d 	bl	80071ec <pvPortMalloc>
				if( pxNewTCB != NULL )
 80084d2:	4604      	mov	r4, r0
 80084d4:	b198      	cbz	r0, 80084fe <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084d6:	2300      	movs	r3, #0
 80084d8:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80084de:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084e4:	9002      	str	r0, [sp, #8]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	4632      	mov	r2, r6
 80084ea:	464b      	mov	r3, r9
 80084ec:	4641      	mov	r1, r8
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7ff ff56 	bl	80083a0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084f4:	4620      	mov	r0, r4
 80084f6:	f7ff fe3d 	bl	8008174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084fa:	2001      	movs	r0, #1
 80084fc:	e7e3      	b.n	80084c6 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80084fe:	4628      	mov	r0, r5
 8008500:	f7fe ff0c 	bl	800731c <vPortFree>
		if( pxNewTCB != NULL )
 8008504:	e7dd      	b.n	80084c2 <xTaskCreate+0x18>
	...

08008508 <vTaskDelete>:
	{
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	4604      	mov	r4, r0
 800850c:	4d23      	ldr	r5, [pc, #140]	@ (800859c <vTaskDelete+0x94>)
		taskENTER_CRITICAL();
 800850e:	f7fe ffe9 	bl	80074e4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008512:	b904      	cbnz	r4, 8008516 <vTaskDelete+0xe>
 8008514:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008516:	1d26      	adds	r6, r4, #4
 8008518:	4630      	mov	r0, r6
 800851a:	f7fe ff6d 	bl	80073f8 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800851e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008520:	b11b      	cbz	r3, 800852a <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008522:	f104 0018 	add.w	r0, r4, #24
 8008526:	f7fe ff67 	bl	80073f8 <uxListRemove>
			uxTaskNumber++;
 800852a:	4a1d      	ldr	r2, [pc, #116]	@ (80085a0 <vTaskDelete+0x98>)
 800852c:	6813      	ldr	r3, [r2, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8008532:	682b      	ldr	r3, [r5, #0]
 8008534:	42a3      	cmp	r3, r4
 8008536:	d11b      	bne.n	8008570 <vTaskDelete+0x68>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008538:	481a      	ldr	r0, [pc, #104]	@ (80085a4 <vTaskDelete+0x9c>)
 800853a:	4631      	mov	r1, r6
 800853c:	f7fe ff3a 	bl	80073b4 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8008540:	4a19      	ldr	r2, [pc, #100]	@ (80085a8 <vTaskDelete+0xa0>)
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8008548:	f7fe ffec 	bl	8007524 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800854c:	4b17      	ldr	r3, [pc, #92]	@ (80085ac <vTaskDelete+0xa4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	b313      	cbz	r3, 8008598 <vTaskDelete+0x90>
			if( pxTCB == pxCurrentTCB )
 8008552:	682b      	ldr	r3, [r5, #0]
 8008554:	42a3      	cmp	r3, r4
 8008556:	d11f      	bne.n	8008598 <vTaskDelete+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 8008558:	4b15      	ldr	r3, [pc, #84]	@ (80085b0 <vTaskDelete+0xa8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	b193      	cbz	r3, 8008584 <vTaskDelete+0x7c>
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	e7fe      	b.n	800856e <vTaskDelete+0x66>
				--uxCurrentNumberOfTasks;
 8008570:	4a10      	ldr	r2, [pc, #64]	@ (80085b4 <vTaskDelete+0xac>)
 8008572:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008574:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8008576:	3b01      	subs	r3, #1
 8008578:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800857a:	f7ff fec5 	bl	8008308 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800857e:	f7ff feb1 	bl	80082e4 <prvResetNextTaskUnblockTime>
 8008582:	e7e1      	b.n	8008548 <vTaskDelete+0x40>
				portYIELD_WITHIN_API();
 8008584:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800858c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	f3bf 8f6f 	isb	sy
	}
 8008598:	bd70      	pop	{r4, r5, r6, pc}
 800859a:	bf00      	nop
 800859c:	200152f4 	.word	0x200152f4
 80085a0:	20014e04 	.word	0x20014e04
 80085a4:	20014e3c 	.word	0x20014e3c
 80085a8:	20014e38 	.word	0x20014e38
 80085ac:	20014e14 	.word	0x20014e14
 80085b0:	20014dfc 	.word	0x20014dfc
 80085b4:	20014e20 	.word	0x20014e20

080085b8 <vTaskStartScheduler>:
{
 80085b8:	b510      	push	{r4, lr}
 80085ba:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085bc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085be:	aa07      	add	r2, sp, #28
 80085c0:	a906      	add	r1, sp, #24
 80085c2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085c4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085c8:	f7fe fdd2 	bl	8007170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085cc:	9b05      	ldr	r3, [sp, #20]
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	9b06      	ldr	r3, [sp, #24]
 80085d2:	9a07      	ldr	r2, [sp, #28]
 80085d4:	4916      	ldr	r1, [pc, #88]	@ (8008630 <vTaskStartScheduler+0x78>)
 80085d6:	4817      	ldr	r0, [pc, #92]	@ (8008634 <vTaskStartScheduler+0x7c>)
 80085d8:	e9cd 4300 	strd	r4, r3, [sp]
 80085dc:	4623      	mov	r3, r4
 80085de:	f7ff ff2c 	bl	800843a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80085e2:	b318      	cbz	r0, 800862c <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80085e4:	f000 fbae 	bl	8008d44 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80085e8:	2801      	cmp	r0, #1
 80085ea:	d114      	bne.n	8008616 <vTaskStartScheduler+0x5e>
 80085ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80085fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008638 <vTaskStartScheduler+0x80>)
 80085fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008602:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008604:	4b0d      	ldr	r3, [pc, #52]	@ (800863c <vTaskStartScheduler+0x84>)
 8008606:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008608:	4b0d      	ldr	r3, [pc, #52]	@ (8008640 <vTaskStartScheduler+0x88>)
 800860a:	601c      	str	r4, [r3, #0]
}
 800860c:	b008      	add	sp, #32
 800860e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008612:	f7fe bff7 	b.w	8007604 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008616:	3001      	adds	r0, #1
 8008618:	d108      	bne.n	800862c <vTaskStartScheduler+0x74>
 800861a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	e7fe      	b.n	800862a <vTaskStartScheduler+0x72>
}
 800862c:	b008      	add	sp, #32
 800862e:	bd10      	pop	{r4, pc}
 8008630:	0801478f 	.word	0x0801478f
 8008634:	08008341 	.word	0x08008341
 8008638:	20014e00 	.word	0x20014e00
 800863c:	20014e14 	.word	0x20014e14
 8008640:	20014e1c 	.word	0x20014e1c

08008644 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008644:	4a02      	ldr	r2, [pc, #8]	@ (8008650 <vTaskSuspendAll+0xc>)
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	3301      	adds	r3, #1
 800864a:	6013      	str	r3, [r2, #0]
}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20014dfc 	.word	0x20014dfc

08008654 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008654:	4b01      	ldr	r3, [pc, #4]	@ (800865c <xTaskGetTickCount+0x8>)
 8008656:	6818      	ldr	r0, [r3, #0]
}
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	20014e1c 	.word	0x20014e1c

08008660 <xTaskGetTickCountFromISR>:
{
 8008660:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008662:	f7ff f851 	bl	8007708 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8008666:	4b01      	ldr	r3, [pc, #4]	@ (800866c <xTaskGetTickCountFromISR+0xc>)
 8008668:	6818      	ldr	r0, [r3, #0]
}
 800866a:	bd08      	pop	{r3, pc}
 800866c:	20014e1c 	.word	0x20014e1c

08008670 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008670:	4b3f      	ldr	r3, [pc, #252]	@ (8008770 <xTaskIncrementTick+0x100>)
 8008672:	681b      	ldr	r3, [r3, #0]
{
 8008674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008678:	2b00      	cmp	r3, #0
 800867a:	d172      	bne.n	8008762 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800867c:	4b3d      	ldr	r3, [pc, #244]	@ (8008774 <xTaskIncrementTick+0x104>)
 800867e:	681c      	ldr	r4, [r3, #0]
 8008680:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008682:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008684:	b9bc      	cbnz	r4, 80086b6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008686:	4b3c      	ldr	r3, [pc, #240]	@ (8008778 <xTaskIncrementTick+0x108>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	6812      	ldr	r2, [r2, #0]
 800868c:	b142      	cbz	r2, 80086a0 <xTaskIncrementTick+0x30>
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	e7fe      	b.n	800869e <xTaskIncrementTick+0x2e>
 80086a0:	4a36      	ldr	r2, [pc, #216]	@ (800877c <xTaskIncrementTick+0x10c>)
 80086a2:	6819      	ldr	r1, [r3, #0]
 80086a4:	6810      	ldr	r0, [r2, #0]
 80086a6:	6018      	str	r0, [r3, #0]
 80086a8:	6011      	str	r1, [r2, #0]
 80086aa:	4a35      	ldr	r2, [pc, #212]	@ (8008780 <xTaskIncrementTick+0x110>)
 80086ac:	6813      	ldr	r3, [r2, #0]
 80086ae:	3301      	adds	r3, #1
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	f7ff fe17 	bl	80082e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086b6:	4d33      	ldr	r5, [pc, #204]	@ (8008784 <xTaskIncrementTick+0x114>)
 80086b8:	4e33      	ldr	r6, [pc, #204]	@ (8008788 <xTaskIncrementTick+0x118>)
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	4f33      	ldr	r7, [pc, #204]	@ (800878c <xTaskIncrementTick+0x11c>)
 80086be:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 80086c0:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086c4:	d212      	bcs.n	80086ec <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086ca:	2114      	movs	r1, #20
 80086cc:	434a      	muls	r2, r1
 80086ce:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80086d0:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 80086d2:	4a2f      	ldr	r2, [pc, #188]	@ (8008790 <xTaskIncrementTick+0x120>)
 80086d4:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 80086d6:	bf28      	it	cs
 80086d8:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 80086dc:	2a00      	cmp	r2, #0
 80086de:	bf18      	it	ne
 80086e0:	f04f 0b01 	movne.w	fp, #1
}
 80086e4:	4658      	mov	r0, fp
 80086e6:	b003      	add	sp, #12
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086ec:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8008778 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80086f0:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8008798 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086f4:	f8d9 2000 	ldr.w	r2, [r9]
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	b91a      	cbnz	r2, 8008704 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008700:	602a      	str	r2, [r5, #0]
					break;
 8008702:	e7e0      	b.n	80086c6 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008704:	f8d9 2000 	ldr.w	r2, [r9]
 8008708:	68d2      	ldr	r2, [r2, #12]
 800870a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800870e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8008712:	428c      	cmp	r4, r1
 8008714:	d201      	bcs.n	800871a <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8008716:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008718:	e7d5      	b.n	80086c6 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800871a:	f108 0304 	add.w	r3, r8, #4
 800871e:	4618      	mov	r0, r3
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f7fe fe69 	bl	80073f8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008726:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800872a:	b119      	cbz	r1, 8008734 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800872c:	f108 0018 	add.w	r0, r8, #24
 8008730:	f7fe fe62 	bl	80073f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008734:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8008738:	f8da 1000 	ldr.w	r1, [sl]
 800873c:	2314      	movs	r3, #20
 800873e:	4288      	cmp	r0, r1
 8008740:	bf88      	it	hi
 8008742:	f8ca 0000 	strhi.w	r0, [sl]
 8008746:	9901      	ldr	r1, [sp, #4]
 8008748:	fb03 6000 	mla	r0, r3, r0, r6
 800874c:	f7fe fe32 	bl	80073b4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008750:	6838      	ldr	r0, [r7, #0]
 8008752:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008756:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008758:	4291      	cmp	r1, r2
 800875a:	bf28      	it	cs
 800875c:	f04f 0b01 	movcs.w	fp, #1
 8008760:	e7c8      	b.n	80086f4 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8008762:	4a0c      	ldr	r2, [pc, #48]	@ (8008794 <xTaskIncrementTick+0x124>)
 8008764:	6813      	ldr	r3, [r2, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800876a:	f04f 0b00 	mov.w	fp, #0
 800876e:	e7b9      	b.n	80086e4 <xTaskIncrementTick+0x74>
 8008770:	20014dfc 	.word	0x20014dfc
 8008774:	20014e1c 	.word	0x20014e1c
 8008778:	20014e68 	.word	0x20014e68
 800877c:	20014e64 	.word	0x20014e64
 8008780:	20014e08 	.word	0x20014e08
 8008784:	20014e00 	.word	0x20014e00
 8008788:	20014e94 	.word	0x20014e94
 800878c:	200152f4 	.word	0x200152f4
 8008790:	20014e0c 	.word	0x20014e0c
 8008794:	20014e10 	.word	0x20014e10
 8008798:	20014e18 	.word	0x20014e18

0800879c <xTaskResumeAll>:
{
 800879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80087a0:	4c30      	ldr	r4, [pc, #192]	@ (8008864 <xTaskResumeAll+0xc8>)
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	b943      	cbnz	r3, 80087b8 <xTaskResumeAll+0x1c>
 80087a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	e7fe      	b.n	80087b6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80087b8:	f7fe fe94 	bl	80074e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	3b01      	subs	r3, #1
 80087c0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c2:	6824      	ldr	r4, [r4, #0]
 80087c4:	b12c      	cbz	r4, 80087d2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80087c6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80087c8:	f7fe feac 	bl	8007524 <vPortExitCritical>
}
 80087cc:	4620      	mov	r0, r4
 80087ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087d2:	4b25      	ldr	r3, [pc, #148]	@ (8008868 <xTaskResumeAll+0xcc>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f5      	beq.n	80087c6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087da:	4d24      	ldr	r5, [pc, #144]	@ (800886c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80087dc:	4e24      	ldr	r6, [pc, #144]	@ (8008870 <xTaskResumeAll+0xd4>)
 80087de:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8008880 <xTaskResumeAll+0xe4>
 80087e2:	e01d      	b.n	8008820 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e4:	68eb      	ldr	r3, [r5, #12]
 80087e6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087e8:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ea:	f104 0018 	add.w	r0, r4, #24
 80087ee:	f7fe fe03 	bl	80073f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f2:	4638      	mov	r0, r7
 80087f4:	f7fe fe00 	bl	80073f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80087fa:	6832      	ldr	r2, [r6, #0]
 80087fc:	2014      	movs	r0, #20
 80087fe:	4293      	cmp	r3, r2
 8008800:	fb00 8003 	mla	r0, r0, r3, r8
 8008804:	4639      	mov	r1, r7
 8008806:	bf88      	it	hi
 8008808:	6033      	strhi	r3, [r6, #0]
 800880a:	f7fe fdd3 	bl	80073b4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800880e:	4b19      	ldr	r3, [pc, #100]	@ (8008874 <xTaskResumeAll+0xd8>)
 8008810:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008816:	429a      	cmp	r2, r3
 8008818:	d302      	bcc.n	8008820 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800881a:	4b17      	ldr	r3, [pc, #92]	@ (8008878 <xTaskResumeAll+0xdc>)
 800881c:	2201      	movs	r2, #1
 800881e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1de      	bne.n	80087e4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008826:	b10c      	cbz	r4, 800882c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8008828:	f7ff fd5c 	bl	80082e4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800882c:	4d13      	ldr	r5, [pc, #76]	@ (800887c <xTaskResumeAll+0xe0>)
 800882e:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008830:	b144      	cbz	r4, 8008844 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8008832:	4e11      	ldr	r6, [pc, #68]	@ (8008878 <xTaskResumeAll+0xdc>)
 8008834:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008836:	f7ff ff1b 	bl	8008670 <xTaskIncrementTick>
 800883a:	b100      	cbz	r0, 800883e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800883c:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800883e:	3c01      	subs	r4, #1
 8008840:	d1f9      	bne.n	8008836 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8008842:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008844:	4b0c      	ldr	r3, [pc, #48]	@ (8008878 <xTaskResumeAll+0xdc>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0bc      	beq.n	80087c6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800884c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008854:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008860:	2401      	movs	r4, #1
 8008862:	e7b1      	b.n	80087c8 <xTaskResumeAll+0x2c>
 8008864:	20014dfc 	.word	0x20014dfc
 8008868:	20014e20 	.word	0x20014e20
 800886c:	20014e50 	.word	0x20014e50
 8008870:	20014e18 	.word	0x20014e18
 8008874:	200152f4 	.word	0x200152f4
 8008878:	20014e0c 	.word	0x20014e0c
 800887c:	20014e10 	.word	0x20014e10
 8008880:	20014e94 	.word	0x20014e94

08008884 <vTaskDelay>:
	{
 8008884:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008886:	b950      	cbnz	r0, 800889e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008888:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800888c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008890:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	f3bf 8f6f 	isb	sy
	}
 800889c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800889e:	4b0a      	ldr	r3, [pc, #40]	@ (80088c8 <vTaskDelay+0x44>)
 80088a0:	6819      	ldr	r1, [r3, #0]
 80088a2:	b141      	cbz	r1, 80088b6 <vTaskDelay+0x32>
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	e7fe      	b.n	80088b4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80088b6:	f7ff fec5 	bl	8008644 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088ba:	f7ff fcdb 	bl	8008274 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80088be:	f7ff ff6d 	bl	800879c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0e0      	beq.n	8008888 <vTaskDelay+0x4>
 80088c6:	e7e9      	b.n	800889c <vTaskDelay+0x18>
 80088c8:	20014dfc 	.word	0x20014dfc

080088cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088cc:	4b17      	ldr	r3, [pc, #92]	@ (800892c <vTaskSwitchContext+0x60>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b17      	ldr	r3, [pc, #92]	@ (8008930 <vTaskSwitchContext+0x64>)
{
 80088d2:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088d4:	b112      	cbz	r2, 80088dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80088d6:	2201      	movs	r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
}
 80088da:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088dc:	4d15      	ldr	r5, [pc, #84]	@ (8008934 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 80088de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088e0:	682a      	ldr	r2, [r5, #0]
 80088e2:	4915      	ldr	r1, [pc, #84]	@ (8008938 <vTaskSwitchContext+0x6c>)
 80088e4:	2614      	movs	r6, #20
 80088e6:	fb06 f302 	mul.w	r3, r6, r2
 80088ea:	18c8      	adds	r0, r1, r3
 80088ec:	58cc      	ldr	r4, [r1, r3]
 80088ee:	b18c      	cbz	r4, 8008914 <vTaskSwitchContext+0x48>
 80088f0:	6844      	ldr	r4, [r0, #4]
 80088f2:	3308      	adds	r3, #8
 80088f4:	6864      	ldr	r4, [r4, #4]
 80088f6:	6044      	str	r4, [r0, #4]
 80088f8:	440b      	add	r3, r1
 80088fa:	429c      	cmp	r4, r3
 80088fc:	bf04      	itt	eq
 80088fe:	6863      	ldreq	r3, [r4, #4]
 8008900:	6043      	streq	r3, [r0, #4]
 8008902:	2314      	movs	r3, #20
 8008904:	fb03 1102 	mla	r1, r3, r2, r1
 8008908:	684b      	ldr	r3, [r1, #4]
 800890a:	68d9      	ldr	r1, [r3, #12]
 800890c:	4b0b      	ldr	r3, [pc, #44]	@ (800893c <vTaskSwitchContext+0x70>)
 800890e:	6019      	str	r1, [r3, #0]
 8008910:	602a      	str	r2, [r5, #0]
}
 8008912:	e7e2      	b.n	80088da <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008914:	b942      	cbnz	r2, 8008928 <vTaskSwitchContext+0x5c>
 8008916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	e7fe      	b.n	8008926 <vTaskSwitchContext+0x5a>
 8008928:	3a01      	subs	r2, #1
 800892a:	e7dc      	b.n	80088e6 <vTaskSwitchContext+0x1a>
 800892c:	20014dfc 	.word	0x20014dfc
 8008930:	20014e0c 	.word	0x20014e0c
 8008934:	20014e18 	.word	0x20014e18
 8008938:	20014e94 	.word	0x20014e94
 800893c:	200152f4 	.word	0x200152f4

08008940 <vTaskPlaceOnEventList>:
{
 8008940:	b510      	push	{r4, lr}
 8008942:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008944:	b940      	cbnz	r0, 8008958 <vTaskPlaceOnEventList+0x18>
 8008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	e7fe      	b.n	8008956 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008958:	4b05      	ldr	r3, [pc, #20]	@ (8008970 <vTaskPlaceOnEventList+0x30>)
 800895a:	6819      	ldr	r1, [r3, #0]
 800895c:	3118      	adds	r1, #24
 800895e:	f7fe fd34 	bl	80073ca <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008962:	4620      	mov	r0, r4
 8008964:	2101      	movs	r1, #1
}
 8008966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800896a:	f7ff bc83 	b.w	8008274 <prvAddCurrentTaskToDelayedList>
 800896e:	bf00      	nop
 8008970:	200152f4 	.word	0x200152f4

08008974 <vTaskPlaceOnEventListRestricted>:
	{
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	460d      	mov	r5, r1
 8008978:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800897a:	b940      	cbnz	r0, 800898e <vTaskPlaceOnEventListRestricted+0x1a>
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	e7fe      	b.n	800898c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800898e:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <vTaskPlaceOnEventListRestricted+0x38>)
 8008990:	6819      	ldr	r1, [r3, #0]
 8008992:	3118      	adds	r1, #24
 8008994:	f7fe fd0e 	bl	80073b4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008998:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800899a:	4621      	mov	r1, r4
 800899c:	bf0c      	ite	eq
 800899e:	4628      	moveq	r0, r5
 80089a0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80089a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089a8:	f7ff bc64 	b.w	8008274 <prvAddCurrentTaskToDelayedList>
 80089ac:	200152f4 	.word	0x200152f4

080089b0 <xTaskRemoveFromEventList>:
{
 80089b0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b2:	68c3      	ldr	r3, [r0, #12]
 80089b4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80089b6:	b944      	cbnz	r4, 80089ca <xTaskRemoveFromEventList+0x1a>
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	e7fe      	b.n	80089c8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089ca:	f104 0518 	add.w	r5, r4, #24
 80089ce:	4628      	mov	r0, r5
 80089d0:	f7fe fd12 	bl	80073f8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d4:	4b10      	ldr	r3, [pc, #64]	@ (8008a18 <xTaskRemoveFromEventList+0x68>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	b9db      	cbnz	r3, 8008a12 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089da:	1d25      	adds	r5, r4, #4
 80089dc:	4628      	mov	r0, r5
 80089de:	f7fe fd0b 	bl	80073f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089e2:	4a0e      	ldr	r2, [pc, #56]	@ (8008a1c <xTaskRemoveFromEventList+0x6c>)
 80089e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80089e6:	6811      	ldr	r1, [r2, #0]
 80089e8:	428b      	cmp	r3, r1
 80089ea:	bf88      	it	hi
 80089ec:	6013      	strhi	r3, [r2, #0]
 80089ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008a20 <xTaskRemoveFromEventList+0x70>)
 80089f0:	2014      	movs	r0, #20
 80089f2:	4629      	mov	r1, r5
 80089f4:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089f8:	f7fe fcdc 	bl	80073b4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089fc:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <xTaskRemoveFromEventList+0x74>)
 80089fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008a06:	bf83      	ittte	hi
 8008a08:	4b07      	ldrhi	r3, [pc, #28]	@ (8008a28 <xTaskRemoveFromEventList+0x78>)
 8008a0a:	2001      	movhi	r0, #1
 8008a0c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8008a0e:	2000      	movls	r0, #0
}
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a12:	4806      	ldr	r0, [pc, #24]	@ (8008a2c <xTaskRemoveFromEventList+0x7c>)
 8008a14:	4629      	mov	r1, r5
 8008a16:	e7ef      	b.n	80089f8 <xTaskRemoveFromEventList+0x48>
 8008a18:	20014dfc 	.word	0x20014dfc
 8008a1c:	20014e18 	.word	0x20014e18
 8008a20:	20014e94 	.word	0x20014e94
 8008a24:	200152f4 	.word	0x200152f4
 8008a28:	20014e0c 	.word	0x20014e0c
 8008a2c:	20014e50 	.word	0x20014e50

08008a30 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a30:	4b03      	ldr	r3, [pc, #12]	@ (8008a40 <vTaskInternalSetTimeOutState+0x10>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a36:	4b03      	ldr	r3, [pc, #12]	@ (8008a44 <vTaskInternalSetTimeOutState+0x14>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6043      	str	r3, [r0, #4]
}
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20014e08 	.word	0x20014e08
 8008a44:	20014e1c 	.word	0x20014e1c

08008a48 <xTaskCheckForTimeOut>:
{
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	b940      	cbnz	r0, 8008a62 <xTaskCheckForTimeOut+0x1a>
 8008a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	e7fe      	b.n	8008a60 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008a62:	b941      	cbnz	r1, 8008a76 <xTaskCheckForTimeOut+0x2e>
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	e7fe      	b.n	8008a74 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008a76:	f7fe fd35 	bl	80074e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab8 <xTaskCheckForTimeOut+0x70>)
 8008a7c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	d010      	beq.n	8008aa6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a84:	480d      	ldr	r0, [pc, #52]	@ (8008abc <xTaskCheckForTimeOut+0x74>)
 8008a86:	682e      	ldr	r6, [r5, #0]
 8008a88:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a8a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a8c:	4286      	cmp	r6, r0
 8008a8e:	d001      	beq.n	8008a94 <xTaskCheckForTimeOut+0x4c>
 8008a90:	428a      	cmp	r2, r1
 8008a92:	d90f      	bls.n	8008ab4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a94:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a96:	4283      	cmp	r3, r0
 8008a98:	d90a      	bls.n	8008ab0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008a9a:	1a5b      	subs	r3, r3, r1
 8008a9c:	4413      	add	r3, r2
 8008a9e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f7ff ffc5 	bl	8008a30 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008aa6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008aa8:	f7fe fd3c 	bl	8007524 <vPortExitCritical>
}
 8008aac:	4620      	mov	r0, r4
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008ab4:	2401      	movs	r4, #1
 8008ab6:	e7f7      	b.n	8008aa8 <xTaskCheckForTimeOut+0x60>
 8008ab8:	20014e1c 	.word	0x20014e1c
 8008abc:	20014e08 	.word	0x20014e08

08008ac0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008ac0:	4b01      	ldr	r3, [pc, #4]	@ (8008ac8 <vTaskMissedYield+0x8>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	601a      	str	r2, [r3, #0]
}
 8008ac6:	4770      	bx	lr
 8008ac8:	20014e0c 	.word	0x20014e0c

08008acc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008acc:	4b05      	ldr	r3, [pc, #20]	@ (8008ae4 <xTaskGetSchedulerState+0x18>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	b133      	cbz	r3, 8008ae0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ad2:	4b05      	ldr	r3, [pc, #20]	@ (8008ae8 <xTaskGetSchedulerState+0x1c>)
 8008ad4:	6818      	ldr	r0, [r3, #0]
 8008ad6:	fab0 f080 	clz	r0, r0
 8008ada:	0940      	lsrs	r0, r0, #5
 8008adc:	0040      	lsls	r0, r0, #1
 8008ade:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ae0:	2001      	movs	r0, #1
	}
 8008ae2:	4770      	bx	lr
 8008ae4:	20014e14 	.word	0x20014e14
 8008ae8:	20014dfc 	.word	0x20014dfc

08008aec <xTaskPriorityInherit>:
	{
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008aee:	4604      	mov	r4, r0
 8008af0:	b338      	cbz	r0, 8008b42 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008af2:	4d1a      	ldr	r5, [pc, #104]	@ (8008b5c <xTaskPriorityInherit+0x70>)
 8008af4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008af6:	682a      	ldr	r2, [r5, #0]
 8008af8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d226      	bcs.n	8008b4c <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008afe:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b00:	4e17      	ldr	r6, [pc, #92]	@ (8008b60 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b02:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b04:	bfa1      	itttt	ge
 8008b06:	682a      	ldrge	r2, [r5, #0]
 8008b08:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8008b0a:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8008b0e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b10:	2214      	movs	r2, #20
 8008b12:	fb02 6303 	mla	r3, r2, r3, r6
 8008b16:	6942      	ldr	r2, [r0, #20]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d113      	bne.n	8008b44 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b1c:	1d07      	adds	r7, r0, #4
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7fe fc6a 	bl	80073f8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b24:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b26:	4a0f      	ldr	r2, [pc, #60]	@ (8008b64 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b2a:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b2e:	2014      	movs	r0, #20
 8008b30:	428b      	cmp	r3, r1
 8008b32:	fb00 6003 	mla	r0, r0, r3, r6
 8008b36:	4639      	mov	r1, r7
 8008b38:	bf88      	it	hi
 8008b3a:	6013      	strhi	r3, [r2, #0]
 8008b3c:	f7fe fc3a 	bl	80073b4 <vListInsertEnd>
				xReturn = pdTRUE;
 8008b40:	2001      	movs	r0, #1
	}
 8008b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b48:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8008b4a:	e7f9      	b.n	8008b40 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b52:	4298      	cmp	r0, r3
 8008b54:	bf2c      	ite	cs
 8008b56:	2000      	movcs	r0, #0
 8008b58:	2001      	movcc	r0, #1
 8008b5a:	e7f2      	b.n	8008b42 <xTaskPriorityInherit+0x56>
 8008b5c:	200152f4 	.word	0x200152f4
 8008b60:	20014e94 	.word	0x20014e94
 8008b64:	20014e18 	.word	0x20014e18

08008b68 <xTaskPriorityDisinherit>:
	{
 8008b68:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008b6a:	b908      	cbnz	r0, 8008b70 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008b6c:	2000      	movs	r0, #0
	}
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008b70:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <xTaskPriorityDisinherit+0x78>)
 8008b72:	681c      	ldr	r4, [r3, #0]
 8008b74:	4284      	cmp	r4, r0
 8008b76:	d008      	beq.n	8008b8a <xTaskPriorityDisinherit+0x22>
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	e7fe      	b.n	8008b88 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b8a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008b8c:	b943      	cbnz	r3, 8008ba0 <xTaskPriorityDisinherit+0x38>
 8008b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	e7fe      	b.n	8008b9e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ba0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008ba2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008ba4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ba6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008ba8:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008baa:	d0df      	beq.n	8008b6c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1dd      	bne.n	8008b6c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bb0:	1d25      	adds	r5, r4, #4
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f7fe fc20 	bl	80073f8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bb8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008bba:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bc0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bc2:	4a08      	ldr	r2, [pc, #32]	@ (8008be4 <xTaskPriorityDisinherit+0x7c>)
 8008bc4:	6811      	ldr	r1, [r2, #0]
 8008bc6:	428b      	cmp	r3, r1
 8008bc8:	bf88      	it	hi
 8008bca:	6013      	strhi	r3, [r2, #0]
 8008bcc:	4a06      	ldr	r2, [pc, #24]	@ (8008be8 <xTaskPriorityDisinherit+0x80>)
 8008bce:	2014      	movs	r0, #20
 8008bd0:	fb00 2003 	mla	r0, r0, r3, r2
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7fe fbed 	bl	80073b4 <vListInsertEnd>
					xReturn = pdTRUE;
 8008bda:	2001      	movs	r0, #1
		return xReturn;
 8008bdc:	e7c7      	b.n	8008b6e <xTaskPriorityDisinherit+0x6>
 8008bde:	bf00      	nop
 8008be0:	200152f4 	.word	0x200152f4
 8008be4:	20014e18 	.word	0x20014e18
 8008be8:	20014e94 	.word	0x20014e94

08008bec <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008bec:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008bee:	4604      	mov	r4, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d041      	beq.n	8008c78 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bf4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008bf6:	b942      	cbnz	r2, 8008c0a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	e7fe      	b.n	8008c08 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c0a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008c0c:	4299      	cmp	r1, r3
 8008c0e:	bf38      	it	cc
 8008c10:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c12:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008c14:	428b      	cmp	r3, r1
 8008c16:	d02f      	beq.n	8008c78 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c18:	2a01      	cmp	r2, #1
 8008c1a:	d12d      	bne.n	8008c78 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8008c1c:	4a17      	ldr	r2, [pc, #92]	@ (8008c7c <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8008c1e:	6812      	ldr	r2, [r2, #0]
 8008c20:	4282      	cmp	r2, r0
 8008c22:	d108      	bne.n	8008c36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	e7fe      	b.n	8008c34 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c36:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c38:	4d11      	ldr	r5, [pc, #68]	@ (8008c80 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 8008c3a:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c3c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c3e:	f04f 0214 	mov.w	r2, #20
 8008c42:	fb02 5303 	mla	r3, r2, r3, r5
 8008c46:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c48:	bfa4      	itt	ge
 8008c4a:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 8008c4e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d111      	bne.n	8008c78 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c54:	1d06      	adds	r6, r0, #4
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7fe fbce 	bl	80073f8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008c5c:	4a09      	ldr	r2, [pc, #36]	@ (8008c84 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008c5e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008c60:	6811      	ldr	r1, [r2, #0]
 8008c62:	2014      	movs	r0, #20
 8008c64:	428b      	cmp	r3, r1
 8008c66:	fb00 5003 	mla	r0, r0, r3, r5
 8008c6a:	4631      	mov	r1, r6
	}
 8008c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8008c70:	bf88      	it	hi
 8008c72:	6013      	strhi	r3, [r2, #0]
 8008c74:	f7fe bb9e 	b.w	80073b4 <vListInsertEnd>
	}
 8008c78:	bd70      	pop	{r4, r5, r6, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200152f4 	.word	0x200152f4
 8008c80:	20014e94 	.word	0x20014e94
 8008c84:	20014e18 	.word	0x20014e18

08008c88 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008c88:	4b04      	ldr	r3, [pc, #16]	@ (8008c9c <pvTaskIncrementMutexHeldCount+0x14>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	b11a      	cbz	r2, 8008c96 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008c92:	3201      	adds	r2, #1
 8008c94:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8008c96:	6818      	ldr	r0, [r3, #0]
	}
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	200152f4 	.word	0x200152f4

08008ca0 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8008ca0:	4291      	cmp	r1, r2
{
 8008ca2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ca4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ca6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008ca8:	d80a      	bhi.n	8008cc0 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008caa:	1ad2      	subs	r2, r2, r3
 8008cac:	6983      	ldr	r3, [r0, #24]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d20d      	bcs.n	8008cce <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cb2:	4b08      	ldr	r3, [pc, #32]	@ (8008cd4 <prvInsertTimerInActiveList+0x34>)
 8008cb4:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	f7fe fb87 	bl	80073ca <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008cbc:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8008cbe:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d201      	bcs.n	8008cc8 <prvInsertTimerInActiveList+0x28>
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	d202      	bcs.n	8008cce <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cc8:	4b03      	ldr	r3, [pc, #12]	@ (8008cd8 <prvInsertTimerInActiveList+0x38>)
 8008cca:	1d01      	adds	r1, r0, #4
 8008ccc:	e7f3      	b.n	8008cb6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008cce:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008cd0:	e7f5      	b.n	8008cbe <prvInsertTimerInActiveList+0x1e>
 8008cd2:	bf00      	nop
 8008cd4:	200153f4 	.word	0x200153f4
 8008cd8:	200153f8 	.word	0x200153f8

08008cdc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008cde:	4c11      	ldr	r4, [pc, #68]	@ (8008d24 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008ce0:	f7fe fc00 	bl	80074e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008ce4:	6825      	ldr	r5, [r4, #0]
 8008ce6:	b9bd      	cbnz	r5, 8008d18 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ce8:	4f0f      	ldr	r7, [pc, #60]	@ (8008d28 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008cea:	4e10      	ldr	r6, [pc, #64]	@ (8008d2c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008cec:	4638      	mov	r0, r7
 8008cee:	f7fe fb53 	bl	8007398 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7fe fb50 	bl	8007398 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8008d30 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8008d34 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8008cfc:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008d38 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d00:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8008d02:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d04:	200a      	movs	r0, #10
 8008d06:	4b0d      	ldr	r3, [pc, #52]	@ (8008d3c <prvCheckForValidListAndQueue+0x60>)
 8008d08:	9500      	str	r5, [sp, #0]
 8008d0a:	f7fe fdf4 	bl	80078f6 <xQueueGenericCreateStatic>
 8008d0e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d10:	b110      	cbz	r0, 8008d18 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d12:	490b      	ldr	r1, [pc, #44]	@ (8008d40 <prvCheckForValidListAndQueue+0x64>)
 8008d14:	f7ff f9cc 	bl	80080b0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008d18:	b003      	add	sp, #12
 8008d1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008d1e:	f7fe bc01 	b.w	8007524 <vPortExitCritical>
 8008d22:	bf00      	nop
 8008d24:	200153f0 	.word	0x200153f0
 8008d28:	20015410 	.word	0x20015410
 8008d2c:	200153fc 	.word	0x200153fc
 8008d30:	200153f8 	.word	0x200153f8
 8008d34:	20015348 	.word	0x20015348
 8008d38:	200153f4 	.word	0x200153f4
 8008d3c:	200152f8 	.word	0x200152f8
 8008d40:	08014794 	.word	0x08014794

08008d44 <xTimerCreateTimerTask>:
{
 8008d44:	b510      	push	{r4, lr}
 8008d46:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008d48:	f7ff ffc8 	bl	8008cdc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008d4c:	4b12      	ldr	r3, [pc, #72]	@ (8008d98 <xTimerCreateTimerTask+0x54>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	b1b3      	cbz	r3, 8008d80 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d52:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d54:	aa07      	add	r2, sp, #28
 8008d56:	a906      	add	r1, sp, #24
 8008d58:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d5a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d5e:	f7fe fa13 	bl	8007188 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d62:	9b05      	ldr	r3, [sp, #20]
 8008d64:	9302      	str	r3, [sp, #8]
 8008d66:	9b06      	ldr	r3, [sp, #24]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	9a07      	ldr	r2, [sp, #28]
 8008d70:	490a      	ldr	r1, [pc, #40]	@ (8008d9c <xTimerCreateTimerTask+0x58>)
 8008d72:	480b      	ldr	r0, [pc, #44]	@ (8008da0 <xTimerCreateTimerTask+0x5c>)
 8008d74:	4623      	mov	r3, r4
 8008d76:	f7ff fb60 	bl	800843a <xTaskCreateStatic>
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008da4 <xTimerCreateTimerTask+0x60>)
 8008d7c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008d7e:	b940      	cbnz	r0, 8008d92 <xTimerCreateTimerTask+0x4e>
 8008d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008d90:	e7fe      	b.n	8008d90 <xTimerCreateTimerTask+0x4c>
}
 8008d92:	2001      	movs	r0, #1
 8008d94:	b008      	add	sp, #32
 8008d96:	bd10      	pop	{r4, pc}
 8008d98:	200153f0 	.word	0x200153f0
 8008d9c:	08014799 	.word	0x08014799
 8008da0:	08008ea5 	.word	0x08008ea5
 8008da4:	200153ec 	.word	0x200153ec

08008da8 <xTimerGenericCommand>:
{
 8008da8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008daa:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008dac:	4604      	mov	r4, r0
{
 8008dae:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008db0:	b940      	cbnz	r0, 8008dc4 <xTimerGenericCommand+0x1c>
 8008db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	e7fe      	b.n	8008dc2 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008dc4:	4d0d      	ldr	r5, [pc, #52]	@ (8008dfc <xTimerGenericCommand+0x54>)
 8008dc6:	6828      	ldr	r0, [r5, #0]
 8008dc8:	b180      	cbz	r0, 8008dec <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008dca:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008dcc:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008dd0:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008dd2:	dc0d      	bgt.n	8008df0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008dd4:	f7ff fe7a 	bl	8008acc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008dd8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008dda:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ddc:	bf08      	it	eq
 8008dde:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008de0:	6828      	ldr	r0, [r5, #0]
 8008de2:	bf18      	it	ne
 8008de4:	461a      	movne	r2, r3
 8008de6:	4669      	mov	r1, sp
 8008de8:	f7fe fe3a 	bl	8007a60 <xQueueGenericSend>
}
 8008dec:	b004      	add	sp, #16
 8008dee:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008df0:	2300      	movs	r3, #0
 8008df2:	4669      	mov	r1, sp
 8008df4:	f7fe fee6 	bl	8007bc4 <xQueueGenericSendFromISR>
 8008df8:	e7f8      	b.n	8008dec <xTimerGenericCommand+0x44>
 8008dfa:	bf00      	nop
 8008dfc:	200153f0 	.word	0x200153f0

08008e00 <prvSampleTimeNow>:
{
 8008e00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8008e04:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008ea0 <prvSampleTimeNow+0xa0>
{
 8008e08:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8008e0a:	f7ff fc23 	bl	8008654 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e12:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8008e14:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008e16:	d909      	bls.n	8008e2c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e18:	4f1f      	ldr	r7, [pc, #124]	@ (8008e98 <prvSampleTimeNow+0x98>)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	b96a      	cbnz	r2, 8008e3c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8008e20:	4a1e      	ldr	r2, [pc, #120]	@ (8008e9c <prvSampleTimeNow+0x9c>)
 8008e22:	6811      	ldr	r1, [r2, #0]
 8008e24:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8008e26:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e000      	b.n	8008e2e <prvSampleTimeNow+0x2e>
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8008e30:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8008e32:	f8c8 5000 	str.w	r5, [r8]
}
 8008e36:	b002      	add	sp, #8
 8008e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e3c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e40:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e44:	f104 0a04 	add.w	sl, r4, #4
 8008e48:	4650      	mov	r0, sl
 8008e4a:	f7fe fad5 	bl	80073f8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e4e:	6a23      	ldr	r3, [r4, #32]
 8008e50:	4620      	mov	r0, r4
 8008e52:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e54:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008e58:	075b      	lsls	r3, r3, #29
 8008e5a:	d5de      	bpl.n	8008e1a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e5c:	69a3      	ldr	r3, [r4, #24]
 8008e5e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8008e60:	4599      	cmp	r9, r3
 8008e62:	d206      	bcs.n	8008e72 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e64:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e66:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e68:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e6a:	4651      	mov	r1, sl
 8008e6c:	f7fe faad 	bl	80073ca <vListInsert>
 8008e70:	e7d3      	b.n	8008e1a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e72:	2300      	movs	r3, #0
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	464a      	mov	r2, r9
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7ff ff94 	bl	8008da8 <xTimerGenericCommand>
				configASSERT( xResult );
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1ca      	bne.n	8008e1a <prvSampleTimeNow+0x1a>
 8008e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	e7fe      	b.n	8008e94 <prvSampleTimeNow+0x94>
 8008e96:	bf00      	nop
 8008e98:	200153f8 	.word	0x200153f8
 8008e9c:	200153f4 	.word	0x200153f4
 8008ea0:	200153e8 	.word	0x200153e8

08008ea4 <prvTimerTask>:
{
 8008ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ea8:	4d6e      	ldr	r5, [pc, #440]	@ (8009064 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008eaa:	4e6f      	ldr	r6, [pc, #444]	@ (8009068 <prvTimerTask+0x1c4>)
{
 8008eac:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	f8d3 8000 	ldr.w	r8, [r3]
 8008eb4:	f1b8 0f00 	cmp.w	r8, #0
 8008eb8:	d035      	beq.n	8008f26 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ec0:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8008ec2:	f7ff fbbf 	bl	8008644 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ec6:	a804      	add	r0, sp, #16
 8008ec8:	f7ff ff9a 	bl	8008e00 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008ecc:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ece:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d169      	bne.n	8008fa8 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ed4:	2c00      	cmp	r4, #0
 8008ed6:	d14c      	bne.n	8008f72 <prvTimerTask+0xce>
 8008ed8:	4540      	cmp	r0, r8
 8008eda:	d350      	bcc.n	8008f7e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8008edc:	f7ff fc5e 	bl	800879c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ee6:	1d38      	adds	r0, r7, #4
 8008ee8:	f7fe fa86 	bl	80073f8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ef0:	0758      	lsls	r0, r3, #29
 8008ef2:	d51a      	bpl.n	8008f2a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ef4:	69b9      	ldr	r1, [r7, #24]
 8008ef6:	4643      	mov	r3, r8
 8008ef8:	464a      	mov	r2, r9
 8008efa:	4441      	add	r1, r8
 8008efc:	4638      	mov	r0, r7
 8008efe:	f7ff fecf 	bl	8008ca0 <prvInsertTimerInActiveList>
 8008f02:	b1b0      	cbz	r0, 8008f32 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f04:	9400      	str	r4, [sp, #0]
 8008f06:	4623      	mov	r3, r4
 8008f08:	4642      	mov	r2, r8
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff ff4b 	bl	8008da8 <xTimerGenericCommand>
			configASSERT( xResult );
 8008f12:	b970      	cbnz	r0, 8008f32 <prvTimerTask+0x8e>
 8008f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	e7fe      	b.n	8008f24 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f26:	2401      	movs	r4, #1
 8008f28:	e7cb      	b.n	8008ec2 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f2a:	f023 0301 	bic.w	r3, r3, #1
 8008f2e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	4638      	mov	r0, r7
 8008f36:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f38:	6830      	ldr	r0, [r6, #0]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	a904      	add	r1, sp, #16
 8008f3e:	f7fe feef 	bl	8007d20 <xQueueReceive>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d0b3      	beq.n	8008eae <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f46:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f48:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	db2f      	blt.n	8008fae <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f4e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f50:	6963      	ldr	r3, [r4, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d132      	bne.n	8008fbc <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f56:	a803      	add	r0, sp, #12
 8008f58:	f7ff ff52 	bl	8008e00 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008f5c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f5e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008f60:	2b09      	cmp	r3, #9
 8008f62:	d8e9      	bhi.n	8008f38 <prvTimerTask+0x94>
 8008f64:	e8df f003 	tbb	[pc, r3]
 8008f68:	572e2e2e 	.word	0x572e2e2e
 8008f6c:	2e2e765e 	.word	0x2e2e765e
 8008f70:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f72:	4b3e      	ldr	r3, [pc, #248]	@ (800906c <prvTimerTask+0x1c8>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681c      	ldr	r4, [r3, #0]
 8008f78:	fab4 f484 	clz	r4, r4
 8008f7c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f7e:	6830      	ldr	r0, [r6, #0]
 8008f80:	4622      	mov	r2, r4
 8008f82:	eba8 0109 	sub.w	r1, r8, r9
 8008f86:	f7ff f8d2 	bl	800812e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f8a:	f7ff fc07 	bl	800879c <xTaskResumeAll>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1d2      	bne.n	8008f38 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8008f92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	e7c7      	b.n	8008f38 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8008fa8:	f7ff fbf8 	bl	800879c <xTaskResumeAll>
}
 8008fac:	e7c4      	b.n	8008f38 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fae:	9b05      	ldr	r3, [sp, #20]
 8008fb0:	9907      	ldr	r1, [sp, #28]
 8008fb2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	dbbe      	blt.n	8008f38 <prvTimerTask+0x94>
 8008fba:	e7c8      	b.n	8008f4e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fbc:	1d20      	adds	r0, r4, #4
 8008fbe:	f7fe fa1b 	bl	80073f8 <uxListRemove>
 8008fc2:	e7c8      	b.n	8008f56 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fc4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fc8:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fca:	f043 0301 	orr.w	r3, r3, #1
 8008fce:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fd2:	9b05      	ldr	r3, [sp, #20]
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4419      	add	r1, r3
 8008fd8:	f7ff fe62 	bl	8008ca0 <prvInsertTimerInActiveList>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d0ab      	beq.n	8008f38 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fe0:	6a23      	ldr	r3, [r4, #32]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fe6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008fea:	0759      	lsls	r1, r3, #29
 8008fec:	d5a4      	bpl.n	8008f38 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fee:	69a2      	ldr	r2, [r4, #24]
 8008ff0:	9905      	ldr	r1, [sp, #20]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	440a      	add	r2, r1
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7ff fed4 	bl	8008da8 <xTimerGenericCommand>
							configASSERT( xResult );
 8009000:	2800      	cmp	r0, #0
 8009002:	d199      	bne.n	8008f38 <prvTimerTask+0x94>
 8009004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	e7fe      	b.n	8009014 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009016:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800901a:	f023 0301 	bic.w	r3, r3, #1
 800901e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8009022:	e789      	b.n	8008f38 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009024:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009028:	f043 0301 	orr.w	r3, r3, #1
 800902c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009030:	9905      	ldr	r1, [sp, #20]
 8009032:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009034:	b941      	cbnz	r1, 8009048 <prvTimerTask+0x1a4>
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	e7fe      	b.n	8009046 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009048:	4603      	mov	r3, r0
 800904a:	4401      	add	r1, r0
 800904c:	4620      	mov	r0, r4
 800904e:	f7ff fe27 	bl	8008ca0 <prvInsertTimerInActiveList>
					break;
 8009052:	e771      	b.n	8008f38 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009054:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009058:	079a      	lsls	r2, r3, #30
 800905a:	d4de      	bmi.n	800901a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800905c:	4620      	mov	r0, r4
 800905e:	f7fe f95d 	bl	800731c <vPortFree>
 8009062:	e769      	b.n	8008f38 <prvTimerTask+0x94>
 8009064:	200153f8 	.word	0x200153f8
 8009068:	200153f0 	.word	0x200153f0
 800906c:	200153f4 	.word	0x200153f4

08009070 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8009070:	8880      	ldrh	r0, [r0, #4]
 8009072:	4770      	bx	lr

08009074 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	6803      	ldr	r3, [r0, #0]
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907e:	2100      	movs	r1, #0
 8009080:	4798      	blx	r3
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	4606      	mov	r6, r0
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	4628      	mov	r0, r5
 800908a:	4798      	blx	r3
 800908c:	1ba4      	subs	r4, r4, r6
 800908e:	b2a4      	uxth	r4, r4
 8009090:	fbb4 f0f0 	udiv	r0, r4, r0
 8009094:	bd70      	pop	{r4, r5, r6, pc}

08009096 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8009096:	2300      	movs	r3, #0
 8009098:	8083      	strh	r3, [r0, #4]
 800909a:	4770      	bx	lr

0800909c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800909c:	b510      	push	{r4, lr}
 800909e:	6803      	ldr	r3, [r0, #0]
 80090a0:	8881      	ldrh	r1, [r0, #4]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a4:	4604      	mov	r4, r0
 80090a6:	4798      	blx	r3
 80090a8:	88a3      	ldrh	r3, [r4, #4]
 80090aa:	3301      	adds	r3, #1
 80090ac:	80a3      	strh	r3, [r4, #4]
 80090ae:	bd10      	pop	{r4, pc}

080090b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80090b0:	6803      	ldr	r3, [r0, #0]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b4:	4718      	bx	r3

080090b6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80090b6:	4770      	bx	lr

080090b8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80090b8:	4a02      	ldr	r2, [pc, #8]	@ (80090c4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80090ba:	6002      	str	r2, [r0, #0]
 80090bc:	2200      	movs	r2, #0
 80090be:	8082      	strh	r2, [r0, #4]
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	080154a0 	.word	0x080154a0

080090c8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80090c8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80090ca:	2000      	movs	r0, #0
 80090cc:	b12b      	cbz	r3, 80090da <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80090ce:	b920      	cbnz	r0, 80090da <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80090d0:	1a5a      	subs	r2, r3, r1
 80090d2:	4250      	negs	r0, r2
 80090d4:	4150      	adcs	r0, r2
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	e7f8      	b.n	80090cc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80090da:	4770      	bx	lr

080090dc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80090dc:	2300      	movs	r3, #0
 80090de:	6148      	str	r0, [r1, #20]
 80090e0:	618b      	str	r3, [r1, #24]
 80090e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80090e4:	b913      	cbnz	r3, 80090ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80090e6:	6281      	str	r1, [r0, #40]	@ 0x28
 80090e8:	4770      	bx	lr
 80090ea:	4613      	mov	r3, r2
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	d1fb      	bne.n	80090ea <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80090f2:	6199      	str	r1, [r3, #24]
 80090f4:	4770      	bx	lr

080090f6 <_ZN8touchgfx9Container9removeAllEv>:
 80090f6:	2200      	movs	r2, #0
 80090f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80090fa:	b123      	cbz	r3, 8009106 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80090fc:	6999      	ldr	r1, [r3, #24]
 80090fe:	6281      	str	r1, [r0, #40]	@ 0x28
 8009100:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8009104:	e7f8      	b.n	80090f8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8009106:	4770      	bx	lr

08009108 <_ZN8touchgfx9Container6unlinkEv>:
 8009108:	2300      	movs	r3, #0
 800910a:	6283      	str	r3, [r0, #40]	@ 0x28
 800910c:	4770      	bx	lr

0800910e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800910e:	2200      	movs	r2, #0
 8009110:	8002      	strh	r2, [r0, #0]
 8009112:	8042      	strh	r2, [r0, #2]
 8009114:	8082      	strh	r2, [r0, #4]
 8009116:	80c2      	strh	r2, [r0, #6]
 8009118:	4770      	bx	lr

0800911a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800911a:	b570      	push	{r4, r5, r6, lr}
 800911c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800911e:	460d      	mov	r5, r1
 8009120:	4616      	mov	r6, r2
 8009122:	b13c      	cbz	r4, 8009134 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	4620      	mov	r0, r4
 8009128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912a:	4632      	mov	r2, r6
 800912c:	4629      	mov	r1, r5
 800912e:	4798      	blx	r3
 8009130:	69a4      	ldr	r4, [r4, #24]
 8009132:	e7f6      	b.n	8009122 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8009134:	bd70      	pop	{r4, r5, r6, pc}

08009136 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8009136:	b538      	push	{r3, r4, r5, lr}
 8009138:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800913a:	460d      	mov	r5, r1
 800913c:	b134      	cbz	r4, 800914c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800913e:	682b      	ldr	r3, [r5, #0]
 8009140:	4621      	mov	r1, r4
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	4628      	mov	r0, r5
 8009146:	4798      	blx	r3
 8009148:	69a4      	ldr	r4, [r4, #24]
 800914a:	e7f7      	b.n	800913c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800914c:	bd38      	pop	{r3, r4, r5, pc}

0800914e <_ZN8touchgfx9ContainerD1Ev>:
 800914e:	4770      	bx	lr

08009150 <_ZN8touchgfx9ContainerD0Ev>:
 8009150:	b510      	push	{r4, lr}
 8009152:	212c      	movs	r1, #44	@ 0x2c
 8009154:	4604      	mov	r4, r0
 8009156:	f009 fbbb 	bl	80128d0 <_ZdlPvj>
 800915a:	4620      	mov	r0, r4
 800915c:	bd10      	pop	{r4, pc}

0800915e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800915e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009160:	b19b      	cbz	r3, 800918a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8009162:	428b      	cmp	r3, r1
 8009164:	d109      	bne.n	800917a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8009166:	699a      	ldr	r2, [r3, #24]
 8009168:	2100      	movs	r1, #0
 800916a:	6159      	str	r1, [r3, #20]
 800916c:	6282      	str	r2, [r0, #40]	@ 0x28
 800916e:	b902      	cbnz	r2, 8009172 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8009170:	4770      	bx	lr
 8009172:	6199      	str	r1, [r3, #24]
 8009174:	4770      	bx	lr
 8009176:	4613      	mov	r3, r2
 8009178:	b13a      	cbz	r2, 800918a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	428a      	cmp	r2, r1
 800917e:	d1fa      	bne.n	8009176 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8009180:	698a      	ldr	r2, [r1, #24]
 8009182:	619a      	str	r2, [r3, #24]
 8009184:	2300      	movs	r3, #0
 8009186:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800918a:	4770      	bx	lr

0800918c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800918c:	b410      	push	{r4}
 800918e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009190:	4604      	mov	r4, r0
 8009192:	b92b      	cbnz	r3, 80091a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8009194:	6803      	ldr	r3, [r0, #0]
 8009196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800919a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800919c:	4611      	mov	r1, r2
 800919e:	4718      	bx	r3
 80091a0:	b941      	cbnz	r1, 80091b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80091a2:	6193      	str	r3, [r2, #24]
 80091a4:	6282      	str	r2, [r0, #40]	@ 0x28
 80091a6:	6154      	str	r4, [r2, #20]
 80091a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	4603      	mov	r3, r0
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d0f9      	beq.n	80091a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80091b4:	4299      	cmp	r1, r3
 80091b6:	6998      	ldr	r0, [r3, #24]
 80091b8:	d1f9      	bne.n	80091ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80091ba:	6190      	str	r0, [r2, #24]
 80091bc:	618a      	str	r2, [r1, #24]
 80091be:	e7f2      	b.n	80091a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080091c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80091c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c4:	461f      	mov	r7, r3
 80091c6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80091ca:	460d      	mov	r5, r1
 80091cc:	4616      	mov	r6, r2
 80091ce:	b103      	cbz	r3, 80091d2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80091d0:	6038      	str	r0, [r7, #0]
 80091d2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80091d4:	b314      	cbz	r4, 800921c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80091d6:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80091da:	b1eb      	cbz	r3, 8009218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80091dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80091e0:	428d      	cmp	r5, r1
 80091e2:	db19      	blt.n	8009218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80091e4:	8923      	ldrh	r3, [r4, #8]
 80091e6:	b289      	uxth	r1, r1
 80091e8:	440b      	add	r3, r1
 80091ea:	b21b      	sxth	r3, r3
 80091ec:	429d      	cmp	r5, r3
 80091ee:	da13      	bge.n	8009218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80091f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80091f4:	4296      	cmp	r6, r2
 80091f6:	db0f      	blt.n	8009218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80091f8:	8963      	ldrh	r3, [r4, #10]
 80091fa:	b292      	uxth	r2, r2
 80091fc:	4413      	add	r3, r2
 80091fe:	b21b      	sxth	r3, r3
 8009200:	429e      	cmp	r6, r3
 8009202:	da09      	bge.n	8009218 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	1ab2      	subs	r2, r6, r2
 8009208:	1a69      	subs	r1, r5, r1
 800920a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800920e:	b212      	sxth	r2, r2
 8009210:	463b      	mov	r3, r7
 8009212:	b209      	sxth	r1, r1
 8009214:	4620      	mov	r0, r4
 8009216:	47c0      	blx	r8
 8009218:	69a4      	ldr	r4, [r4, #24]
 800921a:	e7db      	b.n	80091d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009220 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	4c6e      	ldr	r4, [pc, #440]	@ (80093e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8009226:	b0a1      	sub	sp, #132	@ 0x84
 8009228:	6824      	ldr	r4, [r4, #0]
 800922a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800922c:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8009230:	9303      	str	r3, [sp, #12]
 8009232:	2400      	movs	r4, #0
 8009234:	802c      	strh	r4, [r5, #0]
 8009236:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8009238:	802c      	strh	r4, [r5, #0]
 800923a:	601c      	str	r4, [r3, #0]
 800923c:	4606      	mov	r6, r0
 800923e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009242:	f7ff ffbd 	bl	80091c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009246:	f1b9 0f03 	cmp.w	r9, #3
 800924a:	f340 80c2 	ble.w	80093d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 800924e:	4631      	mov	r1, r6
 8009250:	a80c      	add	r0, sp, #48	@ 0x30
 8009252:	f004 fd19 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009256:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800925a:	9306      	str	r3, [sp, #24]
 800925c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8009260:	9307      	str	r3, [sp, #28]
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	f8d3 a000 	ldr.w	sl, [r3]
 8009268:	f1ba 0f00 	cmp.w	sl, #0
 800926c:	f000 80b4 	beq.w	80093d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8009270:	4651      	mov	r1, sl
 8009272:	a810      	add	r0, sp, #64	@ 0x40
 8009274:	f004 fd08 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009278:	9b01      	ldr	r3, [sp, #4]
 800927a:	9a06      	ldr	r2, [sp, #24]
 800927c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8009280:	189d      	adds	r5, r3, r2
 8009282:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8009286:	9a07      	ldr	r2, [sp, #28]
 8009288:	2002      	movs	r0, #2
 800928a:	fb91 f1f0 	sdiv	r1, r1, r0
 800928e:	4419      	add	r1, r3
 8009290:	1a6d      	subs	r5, r5, r1
 8009292:	9b02      	ldr	r3, [sp, #8]
 8009294:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8009298:	4413      	add	r3, r2
 800929a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800929e:	fb92 f2f0 	sdiv	r2, r2, r0
 80092a2:	440a      	add	r2, r1
 80092a4:	1a9b      	subs	r3, r3, r2
 80092a6:	435b      	muls	r3, r3
 80092a8:	fb05 3505 	mla	r5, r5, r5, r3
 80092ac:	4f4d      	ldr	r7, [pc, #308]	@ (80093e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 80092ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80092b0:	ac10      	add	r4, sp, #64	@ 0x40
 80092b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80092b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80092ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092bc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80092c0:	f1b9 0f0c 	cmp.w	r9, #12
 80092c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80092c8:	f04f 0303 	mov.w	r3, #3
 80092cc:	bfc8      	it	gt
 80092ce:	4698      	movgt	r8, r3
 80092d0:	f8cd 9000 	str.w	r9, [sp]
 80092d4:	f04f 0400 	mov.w	r4, #0
 80092d8:	bfdc      	itt	le
 80092da:	f109 32ff 	addle.w	r2, r9, #4294967295
 80092de:	fb92 f8f3 	sdivle	r8, r2, r3
 80092e2:	1c63      	adds	r3, r4, #1
 80092e4:	aa10      	add	r2, sp, #64	@ 0x40
 80092e6:	f004 0401 	and.w	r4, r4, #1
 80092ea:	9308      	str	r3, [sp, #32]
 80092ec:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80092f0:	9b00      	ldr	r3, [sp, #0]
 80092f2:	fb93 f3f8 	sdiv	r3, r3, r8
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	3404      	adds	r4, #4
 80092fa:	f04f 0b00 	mov.w	fp, #0
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	9a04      	ldr	r2, [sp, #16]
 8009302:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009306:	fb13 f302 	smulbb	r3, r3, r2
 800930a:	9a01      	ldr	r2, [sp, #4]
 800930c:	b29b      	uxth	r3, r3
 800930e:	1899      	adds	r1, r3, r2
 8009310:	9305      	str	r3, [sp, #20]
 8009312:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009316:	b209      	sxth	r1, r1
 8009318:	4299      	cmp	r1, r3
 800931a:	db4d      	blt.n	80093b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800931c:	8932      	ldrh	r2, [r6, #8]
 800931e:	4413      	add	r3, r2
 8009320:	b21b      	sxth	r3, r3
 8009322:	4299      	cmp	r1, r3
 8009324:	da48      	bge.n	80093b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009326:	9b04      	ldr	r3, [sp, #16]
 8009328:	6827      	ldr	r7, [r4, #0]
 800932a:	fb17 f703 	smulbb	r7, r7, r3
 800932e:	9b02      	ldr	r3, [sp, #8]
 8009330:	b2bf      	uxth	r7, r7
 8009332:	18fa      	adds	r2, r7, r3
 8009334:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009338:	b212      	sxth	r2, r2
 800933a:	429a      	cmp	r2, r3
 800933c:	db3c      	blt.n	80093b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800933e:	8970      	ldrh	r0, [r6, #10]
 8009340:	4403      	add	r3, r0
 8009342:	b21b      	sxth	r3, r3
 8009344:	429a      	cmp	r2, r3
 8009346:	da37      	bge.n	80093b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009348:	2300      	movs	r3, #0
 800934a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800934c:	4630      	mov	r0, r6
 800934e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8009350:	f7ff ff36 	bl	80091c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009354:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009356:	b37a      	cbz	r2, 80093b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009358:	4552      	cmp	r2, sl
 800935a:	d02d      	beq.n	80093b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800935c:	4611      	mov	r1, r2
 800935e:	a80e      	add	r0, sp, #56	@ 0x38
 8009360:	9209      	str	r2, [sp, #36]	@ 0x24
 8009362:	f004 fc91 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009366:	9a06      	ldr	r2, [sp, #24]
 8009368:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8009372:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8009376:	4413      	add	r3, r2
 8009378:	f04f 0e02 	mov.w	lr, #2
 800937c:	fb91 f1fe 	sdiv	r1, r1, lr
 8009380:	4401      	add	r1, r0
 8009382:	1a58      	subs	r0, r3, r1
 8009384:	9a07      	ldr	r2, [sp, #28]
 8009386:	9b02      	ldr	r3, [sp, #8]
 8009388:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800938c:	fb9c fcfe 	sdiv	ip, ip, lr
 8009390:	4413      	add	r3, r2
 8009392:	448c      	add	ip, r1
 8009394:	eba3 030c 	sub.w	r3, r3, ip
 8009398:	435b      	muls	r3, r3
 800939a:	fb00 3300 	mla	r3, r0, r0, r3
 800939e:	42ab      	cmp	r3, r5
 80093a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093a2:	d208      	bcs.n	80093b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80093a4:	9803      	ldr	r0, [sp, #12]
 80093a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093a8:	6001      	str	r1, [r0, #0]
 80093aa:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80093ac:	9805      	ldr	r0, [sp, #20]
 80093ae:	8008      	strh	r0, [r1, #0]
 80093b0:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80093b2:	461d      	mov	r5, r3
 80093b4:	800f      	strh	r7, [r1, #0]
 80093b6:	4692      	mov	sl, r2
 80093b8:	f10b 0b01 	add.w	fp, fp, #1
 80093bc:	f1bb 0f04 	cmp.w	fp, #4
 80093c0:	f104 0408 	add.w	r4, r4, #8
 80093c4:	d19c      	bne.n	8009300 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80093c6:	9b00      	ldr	r3, [sp, #0]
 80093c8:	9c08      	ldr	r4, [sp, #32]
 80093ca:	444b      	add	r3, r9
 80093cc:	4544      	cmp	r4, r8
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	d187      	bne.n	80092e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80093d2:	b021      	add	sp, #132	@ 0x84
 80093d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d8:	f04f 35ff 	mov.w	r5, #4294967295
 80093dc:	e766      	b.n	80092ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80093de:	bf00      	nop
 80093e0:	20015430 	.word	0x20015430
 80093e4:	08013980 	.word	0x08013980

080093e8 <_ZN8touchgfx4RectaNERKS0_>:
 80093e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093ec:	f9b1 7000 	ldrsh.w	r7, [r1]
 80093f0:	888c      	ldrh	r4, [r1, #4]
 80093f2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80093f6:	443c      	add	r4, r7
 80093f8:	b2a4      	uxth	r4, r4
 80093fa:	fa0f f884 	sxth.w	r8, r4
 80093fe:	45c1      	cmp	r9, r8
 8009400:	da2f      	bge.n	8009462 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009402:	8882      	ldrh	r2, [r0, #4]
 8009404:	444a      	add	r2, r9
 8009406:	b292      	uxth	r2, r2
 8009408:	fa0f fe82 	sxth.w	lr, r2
 800940c:	4577      	cmp	r7, lr
 800940e:	da28      	bge.n	8009462 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009410:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009414:	88cb      	ldrh	r3, [r1, #6]
 8009416:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800941a:	442b      	add	r3, r5
 800941c:	b21b      	sxth	r3, r3
 800941e:	429e      	cmp	r6, r3
 8009420:	da1f      	bge.n	8009462 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009422:	88c3      	ldrh	r3, [r0, #6]
 8009424:	4433      	add	r3, r6
 8009426:	b29b      	uxth	r3, r3
 8009428:	fa0f fc83 	sxth.w	ip, r3
 800942c:	4565      	cmp	r5, ip
 800942e:	da18      	bge.n	8009462 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009430:	454f      	cmp	r7, r9
 8009432:	bfb8      	it	lt
 8009434:	464f      	movlt	r7, r9
 8009436:	42b5      	cmp	r5, r6
 8009438:	bfb8      	it	lt
 800943a:	4635      	movlt	r5, r6
 800943c:	45f0      	cmp	r8, lr
 800943e:	bfd8      	it	le
 8009440:	4622      	movle	r2, r4
 8009442:	1bd2      	subs	r2, r2, r7
 8009444:	8082      	strh	r2, [r0, #4]
 8009446:	884a      	ldrh	r2, [r1, #2]
 8009448:	88c9      	ldrh	r1, [r1, #6]
 800944a:	8007      	strh	r7, [r0, #0]
 800944c:	440a      	add	r2, r1
 800944e:	b292      	uxth	r2, r2
 8009450:	b211      	sxth	r1, r2
 8009452:	458c      	cmp	ip, r1
 8009454:	bfa8      	it	ge
 8009456:	4613      	movge	r3, r2
 8009458:	1b5b      	subs	r3, r3, r5
 800945a:	80c3      	strh	r3, [r0, #6]
 800945c:	8045      	strh	r5, [r0, #2]
 800945e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009462:	2300      	movs	r3, #0
 8009464:	8003      	strh	r3, [r0, #0]
 8009466:	8043      	strh	r3, [r0, #2]
 8009468:	8083      	strh	r3, [r0, #4]
 800946a:	80c3      	strh	r3, [r0, #6]
 800946c:	e7f7      	b.n	800945e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800946e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800946e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	dd06      	ble.n	8009484 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8009476:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800947a:	2800      	cmp	r0, #0
 800947c:	bfcc      	ite	gt
 800947e:	2000      	movgt	r0, #0
 8009480:	2001      	movle	r0, #1
 8009482:	4770      	bx	lr
 8009484:	2001      	movs	r0, #1
 8009486:	4770      	bx	lr

08009488 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	2300      	movs	r3, #0
 800948e:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8009490:	8003      	strh	r3, [r0, #0]
 8009492:	4604      	mov	r4, r0
 8009494:	8043      	strh	r3, [r0, #2]
 8009496:	8083      	strh	r3, [r0, #4]
 8009498:	80c3      	strh	r3, [r0, #6]
 800949a:	2d00      	cmp	r5, #0
 800949c:	d040      	beq.n	8009520 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800949e:	1d28      	adds	r0, r5, #4
 80094a0:	f7ff ffe5 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 80094a4:	b988      	cbnz	r0, 80094ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7ff ffe1 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 80094ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80094b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80094b4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80094b8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80094bc:	b138      	cbz	r0, 80094ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80094be:	8022      	strh	r2, [r4, #0]
 80094c0:	8063      	strh	r3, [r4, #2]
 80094c2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80094c6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80094ca:	69ad      	ldr	r5, [r5, #24]
 80094cc:	e7e5      	b.n	800949a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80094ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80094d2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80094d6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80094da:	4290      	cmp	r0, r2
 80094dc:	4607      	mov	r7, r0
 80094de:	bfa8      	it	ge
 80094e0:	4617      	movge	r7, r2
 80094e2:	4472      	add	r2, lr
 80094e4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80094e8:	8027      	strh	r7, [r4, #0]
 80094ea:	4299      	cmp	r1, r3
 80094ec:	460e      	mov	r6, r1
 80094ee:	4440      	add	r0, r8
 80094f0:	bfa8      	it	ge
 80094f2:	461e      	movge	r6, r3
 80094f4:	4471      	add	r1, lr
 80094f6:	4463      	add	r3, ip
 80094f8:	b200      	sxth	r0, r0
 80094fa:	b212      	sxth	r2, r2
 80094fc:	b209      	sxth	r1, r1
 80094fe:	b21b      	sxth	r3, r3
 8009500:	4290      	cmp	r0, r2
 8009502:	bfac      	ite	ge
 8009504:	ebc7 0200 	rsbge	r2, r7, r0
 8009508:	ebc7 0202 	rsblt	r2, r7, r2
 800950c:	4299      	cmp	r1, r3
 800950e:	bfac      	ite	ge
 8009510:	ebc6 0301 	rsbge	r3, r6, r1
 8009514:	ebc6 0303 	rsblt	r3, r6, r3
 8009518:	8066      	strh	r6, [r4, #2]
 800951a:	80a2      	strh	r2, [r4, #4]
 800951c:	80e3      	strh	r3, [r4, #6]
 800951e:	e7d4      	b.n	80094ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009520:	4620      	mov	r0, r4
 8009522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009526 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8009526:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800952a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800952e:	b383      	cbz	r3, 8009592 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009530:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009532:	b374      	cbz	r4, 8009592 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009534:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009538:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800953c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009540:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8009544:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009548:	b303      	cbz	r3, 800958c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800954a:	4668      	mov	r0, sp
 800954c:	1d21      	adds	r1, r4, #4
 800954e:	f8ad 5000 	strh.w	r5, [sp]
 8009552:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009556:	f8ad 7004 	strh.w	r7, [sp, #4]
 800955a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800955e:	f7ff ff43 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 8009562:	4668      	mov	r0, sp
 8009564:	f7ff ff83 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 8009568:	b980      	cbnz	r0, 800958c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800956a:	f8bd 3000 	ldrh.w	r3, [sp]
 800956e:	88a2      	ldrh	r2, [r4, #4]
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	f8ad 3000 	strh.w	r3, [sp]
 8009576:	88e2      	ldrh	r2, [r4, #6]
 8009578:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	4669      	mov	r1, sp
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	4620      	mov	r0, r4
 800958a:	4798      	blx	r3
 800958c:	69a4      	ldr	r4, [r4, #24]
 800958e:	2c00      	cmp	r4, #0
 8009590:	d1d8      	bne.n	8009544 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009592:	b002      	add	sp, #8
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009598 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8009598:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800959a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800959e:	460d      	mov	r5, r1
 80095a0:	4616      	mov	r6, r2
 80095a2:	b323      	cbz	r3, 80095ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80095a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80095a6:	b314      	cbz	r4, 80095ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80095a8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80095ac:	b1eb      	cbz	r3, 80095ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80095ae:	6828      	ldr	r0, [r5, #0]
 80095b0:	6869      	ldr	r1, [r5, #4]
 80095b2:	466b      	mov	r3, sp
 80095b4:	c303      	stmia	r3!, {r0, r1}
 80095b6:	4668      	mov	r0, sp
 80095b8:	1d21      	adds	r1, r4, #4
 80095ba:	f7ff ff15 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 80095be:	4668      	mov	r0, sp
 80095c0:	f7ff ff55 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 80095c4:	b988      	cbnz	r0, 80095ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80095c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80095ca:	88a2      	ldrh	r2, [r4, #4]
 80095cc:	1a9b      	subs	r3, r3, r2
 80095ce:	f8ad 3000 	strh.w	r3, [sp]
 80095d2:	88e2      	ldrh	r2, [r4, #6]
 80095d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	f8ad 3002 	strh.w	r3, [sp, #2]
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	4632      	mov	r2, r6
 80095e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095e4:	4669      	mov	r1, sp
 80095e6:	4620      	mov	r0, r4
 80095e8:	4798      	blx	r3
 80095ea:	69a4      	ldr	r4, [r4, #24]
 80095ec:	e7db      	b.n	80095a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80095ee:	b002      	add	sp, #8
 80095f0:	bd70      	pop	{r4, r5, r6, pc}

080095f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80095f2:	b513      	push	{r0, r1, r4, lr}
 80095f4:	6803      	ldr	r3, [r0, #0]
 80095f6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80095fa:	2300      	movs	r3, #0
 80095fc:	e9cd 3300 	strd	r3, r3, [sp]
 8009600:	466b      	mov	r3, sp
 8009602:	47a0      	blx	r4
 8009604:	b002      	add	sp, #8
 8009606:	bd10      	pop	{r4, pc}

08009608 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8009608:	2301      	movs	r3, #1
 800960a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800960e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009612:	4770      	bx	lr

08009614 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8009614:	2301      	movs	r3, #1
 8009616:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800961a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800961e:	4770      	bx	lr

08009620 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8009620:	6843      	ldr	r3, [r0, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	725a      	strb	r2, [r3, #9]
 8009626:	6840      	ldr	r0, [r0, #4]
 8009628:	6803      	ldr	r3, [r0, #0]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	4718      	bx	r3

0800962e <_ZN8touchgfx3HAL8flushDMAEv>:
 800962e:	6840      	ldr	r0, [r0, #4]
 8009630:	6803      	ldr	r3, [r0, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	4718      	bx	r3

08009636 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8009636:	b530      	push	{r4, r5, lr}
 8009638:	b08b      	sub	sp, #44	@ 0x2c
 800963a:	6804      	ldr	r4, [r0, #0]
 800963c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8009640:	9509      	str	r5, [sp, #36]	@ 0x24
 8009642:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8009646:	9508      	str	r5, [sp, #32]
 8009648:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800964c:	9507      	str	r5, [sp, #28]
 800964e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8009652:	9506      	str	r5, [sp, #24]
 8009654:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8009658:	9505      	str	r5, [sp, #20]
 800965a:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800965e:	9504      	str	r5, [sp, #16]
 8009660:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8009664:	9503      	str	r5, [sp, #12]
 8009666:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800966a:	9502      	str	r5, [sp, #8]
 800966c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8009670:	e9cd 3500 	strd	r3, r5, [sp]
 8009674:	4613      	mov	r3, r2
 8009676:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8009678:	2200      	movs	r2, #0
 800967a:	47a0      	blx	r4
 800967c:	b00b      	add	sp, #44	@ 0x2c
 800967e:	bd30      	pop	{r4, r5, pc}

08009680 <_ZN8touchgfx3HAL10beginFrameEv>:
 8009680:	4b04      	ldr	r3, [pc, #16]	@ (8009694 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	b123      	cbz	r3, 8009690 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8009686:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800968a:	f080 0001 	eor.w	r0, r0, #1
 800968e:	4770      	bx	lr
 8009690:	2001      	movs	r0, #1
 8009692:	4770      	bx	lr
 8009694:	2001542e 	.word	0x2001542e

08009698 <_ZN8touchgfx3HAL8endFrameEv>:
 8009698:	b510      	push	{r4, lr}
 800969a:	4604      	mov	r4, r0
 800969c:	6840      	ldr	r0, [r0, #4]
 800969e:	6803      	ldr	r3, [r0, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	4798      	blx	r3
 80096a4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80096a8:	b113      	cbz	r3, 80096b0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80096aa:	2301      	movs	r3, #1
 80096ac:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80096b0:	bd10      	pop	{r4, pc}

080096b2 <_ZN8touchgfx3HAL10initializeEv>:
 80096b2:	b510      	push	{r4, lr}
 80096b4:	4604      	mov	r4, r0
 80096b6:	f7f8 fb33 	bl	8001d20 <_ZN8touchgfx10OSWrappers10initializeEv>
 80096ba:	f7f8 fa3b 	bl	8001b34 <_ZN8touchgfx4GPIO4initEv>
 80096be:	6860      	ldr	r0, [r4, #4]
 80096c0:	6803      	ldr	r3, [r0, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	4798      	blx	r3
 80096c6:	68e0      	ldr	r0, [r4, #12]
 80096c8:	6803      	ldr	r3, [r0, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	4798      	blx	r3
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	4620      	mov	r0, r4
 80096d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d8:	4718      	bx	r3
	...

080096dc <_ZN8touchgfx3HAL4tickEv>:
 80096dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80096de:	6803      	ldr	r3, [r0, #0]
 80096e0:	4d5b      	ldr	r5, [pc, #364]	@ (8009850 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80096e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096e6:	4604      	mov	r4, r0
 80096e8:	4798      	blx	r3
 80096ea:	2800      	cmp	r0, #0
 80096ec:	f000 8095 	beq.w	800981a <_ZN8touchgfx3HAL4tickEv+0x13e>
 80096f0:	2001      	movs	r0, #1
 80096f2:	f7f8 f99d 	bl	8001a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80096f6:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80096fa:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80096fe:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8009702:	2600      	movs	r6, #0
 8009704:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8009708:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800970c:	b133      	cbz	r3, 800971c <_ZN8touchgfx3HAL4tickEv+0x40>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	4620      	mov	r0, r4
 8009712:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009716:	4798      	blx	r3
 8009718:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800971c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8009720:	6862      	ldr	r2, [r4, #4]
 8009722:	f083 0301 	eor.w	r3, r3, #1
 8009726:	7253      	strb	r3, [r2, #9]
 8009728:	2601      	movs	r6, #1
 800972a:	702e      	strb	r6, [r5, #0]
 800972c:	f003 f972 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
 8009730:	6803      	ldr	r3, [r0, #0]
 8009732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009734:	4798      	blx	r3
 8009736:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800973a:	b90b      	cbnz	r3, 8009740 <_ZN8touchgfx3HAL4tickEv+0x64>
 800973c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8009740:	f003 f968 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
 8009744:	6803      	ldr	r3, [r0, #0]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	4798      	blx	r3
 800974a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800974c:	6803      	ldr	r3, [r0, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	4798      	blx	r3
 8009752:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8009756:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800975a:	3b01      	subs	r3, #1
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009762:	b10a      	cbz	r2, 8009768 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1eb      	bne.n	8009740 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009768:	4a3a      	ldr	r2, [pc, #232]	@ (8009854 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800976a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800976e:	7813      	ldrb	r3, [r2, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	b25b      	sxtb	r3, r3
 8009774:	4299      	cmp	r1, r3
 8009776:	7013      	strb	r3, [r2, #0]
 8009778:	dc10      	bgt.n	800979c <_ZN8touchgfx3HAL4tickEv+0xc0>
 800977a:	68e0      	ldr	r0, [r4, #12]
 800977c:	2300      	movs	r3, #0
 800977e:	7013      	strb	r3, [r2, #0]
 8009780:	6803      	ldr	r3, [r0, #0]
 8009782:	aa03      	add	r2, sp, #12
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	a902      	add	r1, sp, #8
 8009788:	4798      	blx	r3
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	2800      	cmp	r0, #0
 800978e:	d050      	beq.n	8009832 <_ZN8touchgfx3HAL4tickEv+0x156>
 8009790:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009794:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009798:	4620      	mov	r0, r4
 800979a:	4798      	blx	r3
 800979c:	6960      	ldr	r0, [r4, #20]
 800979e:	2300      	movs	r3, #0
 80097a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80097a4:	b158      	cbz	r0, 80097be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80097a6:	6803      	ldr	r3, [r0, #0]
 80097a8:	f10d 0107 	add.w	r1, sp, #7
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	4798      	blx	r3
 80097b0:	b128      	cbz	r0, 80097be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80097b2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80097b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80097b8:	6803      	ldr	r3, [r0, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	4798      	blx	r3
 80097be:	f104 001c 	add.w	r0, r4, #28
 80097c2:	f008 ffb1 	bl	8012728 <_ZN8touchgfx8Gestures4tickEv>
 80097c6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80097ca:	b30b      	cbz	r3, 8009810 <_ZN8touchgfx3HAL4tickEv+0x134>
 80097cc:	6920      	ldr	r0, [r4, #16]
 80097ce:	6803      	ldr	r3, [r0, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	4798      	blx	r3
 80097d4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80097d6:	4606      	mov	r6, r0
 80097d8:	b903      	cbnz	r3, 80097dc <_ZN8touchgfx3HAL4tickEv+0x100>
 80097da:	6760      	str	r0, [r4, #116]	@ 0x74
 80097dc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80097de:	4a1e      	ldr	r2, [pc, #120]	@ (8009858 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80097e0:	1af3      	subs	r3, r6, r3
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d914      	bls.n	8009810 <_ZN8touchgfx3HAL4tickEv+0x134>
 80097e6:	6920      	ldr	r0, [r4, #16]
 80097e8:	6803      	ldr	r3, [r0, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	4798      	blx	r3
 80097ee:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80097f0:	2264      	movs	r2, #100	@ 0x64
 80097f2:	1af3      	subs	r3, r6, r3
 80097f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80097fc:	2800      	cmp	r0, #0
 80097fe:	dc1d      	bgt.n	800983c <_ZN8touchgfx3HAL4tickEv+0x160>
 8009800:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8009804:	6920      	ldr	r0, [r4, #16]
 8009806:	6803      	ldr	r3, [r0, #0]
 8009808:	2100      	movs	r1, #0
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	4798      	blx	r3
 800980e:	6766      	str	r6, [r4, #116]	@ 0x74
 8009810:	f003 f900 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
 8009814:	6803      	ldr	r3, [r0, #0]
 8009816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009818:	4798      	blx	r3
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	4620      	mov	r0, r4
 800981e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009822:	4798      	blx	r3
 8009824:	2001      	movs	r0, #1
 8009826:	f7f8 f92d 	bl	8001a84 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800982a:	2300      	movs	r3, #0
 800982c:	702b      	strb	r3, [r5, #0]
 800982e:	b004      	add	sp, #16
 8009830:	bd70      	pop	{r4, r5, r6, pc}
 8009832:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009836:	4620      	mov	r0, r4
 8009838:	4798      	blx	r3
 800983a:	e7af      	b.n	800979c <_ZN8touchgfx3HAL4tickEv+0xc0>
 800983c:	2863      	cmp	r0, #99	@ 0x63
 800983e:	bfcb      	itete	gt
 8009840:	2300      	movgt	r3, #0
 8009842:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8009846:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800984a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800984e:	e7d9      	b.n	8009804 <_ZN8touchgfx3HAL4tickEv+0x128>
 8009850:	20015434 	.word	0x20015434
 8009854:	20015435 	.word	0x20015435
 8009858:	05f5e100 	.word	0x05f5e100

0800985c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800985c:	b510      	push	{r4, lr}
 800985e:	4604      	mov	r4, r0
 8009860:	f7f8 fa8e 	bl	8001d80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8009864:	6863      	ldr	r3, [r4, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	729a      	strb	r2, [r3, #10]
 800986a:	bd10      	pop	{r4, pc}

0800986c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800986c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800986e:	301c      	adds	r0, #28
 8009870:	f008 bf58 	b.w	8012724 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08009874 <_ZN8touchgfx3HAL5touchEll>:
 8009874:	b530      	push	{r4, r5, lr}
 8009876:	b087      	sub	sp, #28
 8009878:	4604      	mov	r4, r0
 800987a:	a804      	add	r0, sp, #16
 800987c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009880:	f002 feb0 	bl	800c5e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	f8ad 300c 	strh.w	r3, [sp, #12]
 800988a:	a906      	add	r1, sp, #24
 800988c:	9b05      	ldr	r3, [sp, #20]
 800988e:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8009892:	a803      	add	r0, sp, #12
 8009894:	f002 fef8 	bl	800c688 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8009898:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800989c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80098a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80098a4:	f104 001c 	add.w	r0, r4, #28
 80098a8:	b189      	cbz	r1, 80098ce <_ZN8touchgfx3HAL5touchEll+0x5a>
 80098aa:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80098b4:	4613      	mov	r3, r2
 80098b6:	462a      	mov	r2, r5
 80098b8:	f008 ff44 	bl	8012744 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80098bc:	b128      	cbz	r0, 80098ca <_ZN8touchgfx3HAL5touchEll+0x56>
 80098be:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80098c2:	6623      	str	r3, [r4, #96]	@ 0x60
 80098c4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80098c8:	6663      	str	r3, [r4, #100]	@ 0x64
 80098ca:	b007      	add	sp, #28
 80098cc:	bd30      	pop	{r4, r5, pc}
 80098ce:	f008 ff79 	bl	80127c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80098d2:	2301      	movs	r3, #1
 80098d4:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80098d8:	e7f1      	b.n	80098be <_ZN8touchgfx3HAL5touchEll+0x4a>

080098da <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80098da:	b510      	push	{r4, lr}
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d046      	beq.n	800996e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80098e0:	ea81 0002 	eor.w	r0, r1, r2
 80098e4:	07c4      	lsls	r4, r0, #31
 80098e6:	d508      	bpl.n	80098fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80098e8:	440b      	add	r3, r1
 80098ea:	3a01      	subs	r2, #1
 80098ec:	428b      	cmp	r3, r1
 80098ee:	d93e      	bls.n	800996e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80098f0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80098f4:	f801 0b01 	strb.w	r0, [r1], #1
 80098f8:	e7f8      	b.n	80098ec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80098fa:	07d0      	lsls	r0, r2, #31
 80098fc:	bf42      	ittt	mi
 80098fe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8009902:	f801 0b01 	strbmi.w	r0, [r1], #1
 8009906:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800990a:	2b01      	cmp	r3, #1
 800990c:	d911      	bls.n	8009932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800990e:	ea81 0402 	eor.w	r4, r1, r2
 8009912:	07a4      	lsls	r4, r4, #30
 8009914:	4610      	mov	r0, r2
 8009916:	d022      	beq.n	800995e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8009918:	f023 0401 	bic.w	r4, r3, #1
 800991c:	440c      	add	r4, r1
 800991e:	428c      	cmp	r4, r1
 8009920:	4602      	mov	r2, r0
 8009922:	d904      	bls.n	800992e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8009924:	8812      	ldrh	r2, [r2, #0]
 8009926:	f821 2b02 	strh.w	r2, [r1], #2
 800992a:	3002      	adds	r0, #2
 800992c:	e7f7      	b.n	800991e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	f023 0003 	bic.w	r0, r3, #3
 8009936:	4408      	add	r0, r1
 8009938:	4288      	cmp	r0, r1
 800993a:	4614      	mov	r4, r2
 800993c:	d904      	bls.n	8009948 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800993e:	6824      	ldr	r4, [r4, #0]
 8009940:	f841 4b04 	str.w	r4, [r1], #4
 8009944:	3204      	adds	r2, #4
 8009946:	e7f7      	b.n	8009938 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8009948:	f003 0303 	and.w	r3, r3, #3
 800994c:	440b      	add	r3, r1
 800994e:	3a01      	subs	r2, #1
 8009950:	428b      	cmp	r3, r1
 8009952:	d90c      	bls.n	800996e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009954:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009958:	f801 0b01 	strb.w	r0, [r1], #1
 800995c:	e7f8      	b.n	8009950 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800995e:	0790      	lsls	r0, r2, #30
 8009960:	d0e7      	beq.n	8009932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009962:	f832 0b02 	ldrh.w	r0, [r2], #2
 8009966:	f821 0b02 	strh.w	r0, [r1], #2
 800996a:	3b02      	subs	r3, #2
 800996c:	e7e1      	b.n	8009932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800996e:	2001      	movs	r0, #1
 8009970:	bd10      	pop	{r4, pc}

08009972 <_ZN8touchgfx3HAL7noTouchEv>:
 8009972:	b510      	push	{r4, lr}
 8009974:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8009978:	4604      	mov	r4, r0
 800997a:	b153      	cbz	r3, 8009992 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800997c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8009980:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8009984:	2101      	movs	r1, #1
 8009986:	301c      	adds	r0, #28
 8009988:	f008 ff1c 	bl	80127c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800998c:	2300      	movs	r3, #0
 800998e:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009992:	bd10      	pop	{r4, pc}

08009994 <_ZN8touchgfx3HAL3lcdEv>:
 8009994:	4b04      	ldr	r3, [pc, #16]	@ (80099a8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800999c:	b10a      	cbz	r2, 80099a2 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800999e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80099a0:	b900      	cbnz	r0, 80099a4 <_ZN8touchgfx3HAL3lcdEv+0x10>
 80099a2:	6898      	ldr	r0, [r3, #8]
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	20015430 	.word	0x20015430

080099ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80099ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099b0:	b085      	sub	sp, #20
 80099b2:	ad04      	add	r5, sp, #16
 80099b4:	4604      	mov	r4, r0
 80099b6:	2000      	movs	r0, #0
 80099b8:	f845 0d04 	str.w	r0, [r5, #-4]!
 80099bc:	69a0      	ldr	r0, [r4, #24]
 80099be:	6806      	ldr	r6, [r0, #0]
 80099c0:	9501      	str	r5, [sp, #4]
 80099c2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80099c6:	9500      	str	r5, [sp, #0]
 80099c8:	6835      	ldr	r5, [r6, #0]
 80099ca:	4699      	mov	r9, r3
 80099cc:	460f      	mov	r7, r1
 80099ce:	4690      	mov	r8, r2
 80099d0:	47a8      	blx	r5
 80099d2:	4d10      	ldr	r5, [pc, #64]	@ (8009a14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80099d4:	4606      	mov	r6, r0
 80099d6:	f8a5 9000 	strh.w	r9, [r5]
 80099da:	f7ff ffdb 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 80099de:	6803      	ldr	r3, [r0, #0]
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e2:	4798      	blx	r3
 80099e4:	b128      	cbz	r0, 80099f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80099e6:	2801      	cmp	r0, #1
 80099e8:	d00b      	beq.n	8009a02 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80099ea:	4630      	mov	r0, r6
 80099ec:	b005      	add	sp, #20
 80099ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099f2:	882b      	ldrh	r3, [r5, #0]
 80099f4:	fb08 7203 	mla	r2, r8, r3, r7
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80099fe:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009a00:	e7f3      	b.n	80099ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009a02:	882a      	ldrh	r2, [r5, #0]
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	fb08 7202 	mla	r2, r8, r2, r7
 8009a0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009a0e:	1a9a      	subs	r2, r3, r2
 8009a10:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8009a12:	e7ea      	b.n	80099ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009a14:	2001542a 	.word	0x2001542a

08009a18 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8009a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a1a:	b08b      	sub	sp, #44	@ 0x2c
 8009a1c:	4617      	mov	r7, r2
 8009a1e:	4604      	mov	r4, r0
 8009a20:	460e      	mov	r6, r1
 8009a22:	461d      	mov	r5, r3
 8009a24:	f7ff ffb6 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 8009a28:	6803      	ldr	r3, [r0, #0]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2c:	4798      	blx	r3
 8009a2e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009a32:	9007      	str	r0, [sp, #28]
 8009a34:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009a38:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	9306      	str	r3, [sp, #24]
 8009a40:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009a44:	9305      	str	r3, [sp, #20]
 8009a46:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8009a4a:	9304      	str	r3, [sp, #16]
 8009a4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009a50:	9303      	str	r3, [sp, #12]
 8009a52:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009a56:	9302      	str	r3, [sp, #8]
 8009a58:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009a5c:	e9cd 5300 	strd	r5, r3, [sp]
 8009a60:	4631      	mov	r1, r6
 8009a62:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8009a64:	463b      	mov	r3, r7
 8009a66:	2200      	movs	r2, #0
 8009a68:	4620      	mov	r0, r4
 8009a6a:	47a8      	blx	r5
 8009a6c:	b00b      	add	sp, #44	@ 0x2c
 8009a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a70:	2001542a 	.word	0x2001542a

08009a74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8009a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a78:	4698      	mov	r8, r3
 8009a7a:	6803      	ldr	r3, [r0, #0]
 8009a7c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8009a7e:	4b15      	ldr	r3, [pc, #84]	@ (8009ad4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8009a80:	b08b      	sub	sp, #44	@ 0x2c
 8009a82:	4617      	mov	r7, r2
 8009a84:	f8b3 9000 	ldrh.w	r9, [r3]
 8009a88:	460e      	mov	r6, r1
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	f7ff ff82 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 8009a90:	6803      	ldr	r3, [r0, #0]
 8009a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a94:	4798      	blx	r3
 8009a96:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009a9a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009aac:	9304      	str	r3, [sp, #16]
 8009aae:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8009ab2:	9303      	str	r3, [sp, #12]
 8009ab4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009ab8:	9302      	str	r3, [sp, #8]
 8009aba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009abe:	2200      	movs	r2, #0
 8009ac0:	e9cd 8300 	strd	r8, r3, [sp]
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	4620      	mov	r0, r4
 8009aca:	47a8      	blx	r5
 8009acc:	b00b      	add	sp, #44	@ 0x2c
 8009ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad2:	bf00      	nop
 8009ad4:	2001542a 	.word	0x2001542a

08009ad8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8009ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009adc:	4698      	mov	r8, r3
 8009ade:	6803      	ldr	r3, [r0, #0]
 8009ae0:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8009ae2:	4b11      	ldr	r3, [pc, #68]	@ (8009b28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8009ae4:	b087      	sub	sp, #28
 8009ae6:	f8b3 9000 	ldrh.w	r9, [r3]
 8009aea:	460e      	mov	r6, r1
 8009aec:	4617      	mov	r7, r2
 8009aee:	4604      	mov	r4, r0
 8009af0:	f7ff ff50 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 8009af4:	6803      	ldr	r3, [r0, #0]
 8009af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af8:	4798      	blx	r3
 8009afa:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8009afe:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b02:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8009b06:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8009b0a:	9302      	str	r3, [sp, #8]
 8009b0c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	463a      	mov	r2, r7
 8009b1a:	4643      	mov	r3, r8
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4620      	mov	r0, r4
 8009b20:	47a8      	blx	r5
 8009b22:	b007      	add	sp, #28
 8009b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b28:	2001542a 	.word	0x2001542a

08009b2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8009b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b30:	4604      	mov	r4, r0
 8009b32:	b08f      	sub	sp, #60	@ 0x3c
 8009b34:	4610      	mov	r0, r2
 8009b36:	460d      	mov	r5, r1
 8009b38:	4691      	mov	r9, r2
 8009b3a:	461e      	mov	r6, r3
 8009b3c:	f005 ffb6 	bl	800faac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	f000 809d 	beq.w	8009c80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8009ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8009ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8009b52:	4f61      	ldr	r7, [pc, #388]	@ (8009cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009b54:	4620      	mov	r0, r4
 8009b56:	4798      	blx	r3
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5e:	4798      	blx	r3
 8009b60:	f8bb 3000 	ldrh.w	r3, [fp]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8009b6a:	f8ba 3000 	ldrh.w	r3, [sl]
 8009b6e:	9302      	str	r3, [sp, #8]
 8009b70:	883b      	ldrh	r3, [r7, #0]
 8009b72:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	4b58      	ldr	r3, [pc, #352]	@ (8009cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009b7a:	9305      	str	r3, [sp, #20]
 8009b7c:	881a      	ldrh	r2, [r3, #0]
 8009b7e:	9204      	str	r2, [sp, #16]
 8009b80:	4640      	mov	r0, r8
 8009b82:	f006 f827 	bl	800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8009b86:	8038      	strh	r0, [r7, #0]
 8009b88:	4640      	mov	r0, r8
 8009b8a:	f006 f857 	bl	800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009b8e:	9b05      	ldr	r3, [sp, #20]
 8009b90:	b280      	uxth	r0, r0
 8009b92:	8018      	strh	r0, [r3, #0]
 8009b94:	4b52      	ldr	r3, [pc, #328]	@ (8009ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d174      	bne.n	8009c86 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8009b9c:	883b      	ldrh	r3, [r7, #0]
 8009b9e:	f8ab 3000 	strh.w	r3, [fp]
 8009ba2:	f8aa 0000 	strh.w	r0, [sl]
 8009ba6:	4648      	mov	r0, r9
 8009ba8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8009bac:	f005 ff7e 	bl	800faac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8009bb0:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8009bbe:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8009bc2:	f7f9 fa97 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8009bcc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009bd0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dd5c      	ble.n	8009c92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009bd8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dd58      	ble.n	8009c92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009be0:	462a      	mov	r2, r5
 8009be2:	ab0a      	add	r3, sp, #40	@ 0x28
 8009be4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009be8:	6851      	ldr	r1, [r2, #4]
 8009bea:	c303      	stmia	r3!, {r0, r1}
 8009bec:	4631      	mov	r1, r6
 8009bee:	a80a      	add	r0, sp, #40	@ 0x28
 8009bf0:	f7ff fbfa 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 8009bf4:	4b38      	ldr	r3, [pc, #224]	@ (8009cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009bf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009bfa:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8009bfe:	2100      	movs	r1, #0
 8009c00:	aa0a      	add	r2, sp, #40	@ 0x28
 8009c02:	4b36      	ldr	r3, [pc, #216]	@ (8009cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009c04:	910c      	str	r1, [sp, #48]	@ 0x30
 8009c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c0e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8009c12:	ab08      	add	r3, sp, #32
 8009c14:	e883 0003 	stmia.w	r3, {r0, r1}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	a90c      	add	r1, sp, #48	@ 0x30
 8009c1c:	f7ff fbe4 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 8009c20:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d13c      	bne.n	8009ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8009c26:	2000      	movs	r0, #0
 8009c28:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8009c2c:	2600      	movs	r6, #0
 8009c2e:	682a      	ldr	r2, [r5, #0]
 8009c30:	696b      	ldr	r3, [r5, #20]
 8009c32:	616e      	str	r6, [r5, #20]
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	6892      	ldr	r2, [r2, #8]
 8009c38:	a908      	add	r1, sp, #32
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	4790      	blx	r2
 8009c3e:	9b05      	ldr	r3, [sp, #20]
 8009c40:	616b      	str	r3, [r5, #20]
 8009c42:	4652      	mov	r2, sl
 8009c44:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8009c48:	4649      	mov	r1, r9
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8009c50:	f7f9 fa50 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
 8009c54:	4b23      	ldr	r3, [pc, #140]	@ (8009ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8009c56:	9a01      	ldr	r2, [sp, #4]
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	4b23      	ldr	r3, [pc, #140]	@ (8009ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8009c5c:	9a02      	ldr	r2, [sp, #8]
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009c62:	9a03      	ldr	r2, [sp, #12]
 8009c64:	801a      	strh	r2, [r3, #0]
 8009c66:	4b1d      	ldr	r3, [pc, #116]	@ (8009cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009c68:	9a04      	ldr	r2, [sp, #16]
 8009c6a:	801a      	strh	r2, [r3, #0]
 8009c6c:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	4620      	mov	r0, r4
 8009c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c76:	4798      	blx	r3
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	4798      	blx	r3
 8009c80:	b00f      	add	sp, #60	@ 0x3c
 8009c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	883b      	ldrh	r3, [r7, #0]
 8009c88:	f8ab 0000 	strh.w	r0, [fp]
 8009c8c:	f8aa 3000 	strh.w	r3, [sl]
 8009c90:	e789      	b.n	8009ba6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8009c92:	462a      	mov	r2, r5
 8009c94:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c96:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009c9a:	6851      	ldr	r1, [r2, #4]
 8009c9c:	c303      	stmia	r3!, {r0, r1}
 8009c9e:	e7a9      	b.n	8009bf4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8009ca0:	a807      	add	r0, sp, #28
 8009ca2:	f006 f90d 	bl	800fec0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8009caa:	6803      	ldr	r3, [r0, #0]
 8009cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cae:	4798      	blx	r3
 8009cb0:	4286      	cmp	r6, r0
 8009cb2:	d1b8      	bne.n	8009c26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8009cb4:	f7ff fe6e 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 8009cb8:	6803      	ldr	r3, [r0, #0]
 8009cba:	4606      	mov	r6, r0
 8009cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cbe:	9305      	str	r3, [sp, #20]
 8009cc0:	a807      	add	r0, sp, #28
 8009cc2:	f006 f8fd 	bl	800fec0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009cc6:	9b05      	ldr	r3, [sp, #20]
 8009cc8:	4601      	mov	r1, r0
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4798      	blx	r3
 8009cce:	f080 0001 	eor.w	r0, r0, #1
 8009cd2:	b2c0      	uxtb	r0, r0
 8009cd4:	e7a8      	b.n	8009c28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8009cd6:	bf00      	nop
 8009cd8:	20015424 	.word	0x20015424
 8009cdc:	20015426 	.word	0x20015426
 8009ce0:	20015428 	.word	0x20015428
 8009ce4:	2001542a 	.word	0x2001542a
 8009ce8:	2001542c 	.word	0x2001542c

08009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8009cec:	b510      	push	{r4, lr}
 8009cee:	4b07      	ldr	r3, [pc, #28]	@ (8009d0c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	b13b      	cbz	r3, 8009d06 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009cf6:	6803      	ldr	r3, [r0, #0]
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cfa:	4798      	blx	r3
 8009cfc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009cfe:	4283      	cmp	r3, r0
 8009d00:	d101      	bne.n	8009d06 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009d02:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009d04:	bd10      	pop	{r4, pc}
 8009d06:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009d08:	e7fc      	b.n	8009d04 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8009d0a:	bf00      	nop
 8009d0c:	2001542e 	.word	0x2001542e

08009d10 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8009d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d14:	b08a      	sub	sp, #40	@ 0x28
 8009d16:	461d      	mov	r5, r3
 8009d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d1c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009d20:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009d24:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009d28:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009d2c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009d30:	2400      	movs	r4, #0
 8009d32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009d36:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8009d3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009d3e:	4690      	mov	r8, r2
 8009d40:	4607      	mov	r7, r0
 8009d42:	9404      	str	r4, [sp, #16]
 8009d44:	f88d 4020 	strb.w	r4, [sp, #32]
 8009d48:	f7ff ffd0 	bl	8009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009d4c:	fb06 8505 	mla	r5, r6, r5, r8
 8009d50:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	9505      	str	r5, [sp, #20]
 8009d58:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009d5c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009d60:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8009d64:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009d68:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009d6c:	6803      	ldr	r3, [r0, #0]
 8009d6e:	a901      	add	r1, sp, #4
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	4798      	blx	r3
 8009d74:	b00a      	add	sp, #40	@ 0x28
 8009d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d7a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8009d7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d7e:	b08b      	sub	sp, #44	@ 0x2c
 8009d80:	2400      	movs	r4, #0
 8009d82:	461d      	mov	r5, r3
 8009d84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d88:	4688      	mov	r8, r1
 8009d8a:	4691      	mov	r9, r2
 8009d8c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8009d90:	9404      	str	r4, [sp, #16]
 8009d92:	4607      	mov	r7, r0
 8009d94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d98:	f7ff ffa8 	bl	8009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009d9c:	fb06 9505 	mla	r5, r6, r5, r9
 8009da0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009da4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009da8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009dac:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	9505      	str	r5, [sp, #20]
 8009db4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009db8:	f8ad 401c 	strh.w	r4, [sp, #28]
 8009dbc:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009dc0:	f8cd 8010 	str.w	r8, [sp, #16]
 8009dc4:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009dc8:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009dcc:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009dd0:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009dd4:	6803      	ldr	r3, [r0, #0]
 8009dd6:	a901      	add	r1, sp, #4
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	4798      	blx	r3
 8009ddc:	b00b      	add	sp, #44	@ 0x2c
 8009dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009de4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8009de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de8:	b08a      	sub	sp, #40	@ 0x28
 8009dea:	4698      	mov	r8, r3
 8009dec:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8009df0:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8009df4:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8009df8:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	2d0b      	cmp	r5, #11
 8009e00:	4606      	mov	r6, r0
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8009e08:	d138      	bne.n	8009e7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8009e0a:	2380      	movs	r3, #128	@ 0x80
 8009e0c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009e10:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009e14:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009e18:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009e1c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009e20:	f88d 0020 	strb.w	r0, [sp, #32]
 8009e24:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009e28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	9203      	str	r2, [sp, #12]
 8009e30:	f7ff ff5c 	bl	8009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009e34:	2c0b      	cmp	r4, #11
 8009e36:	bf98      	it	ls
 8009e38:	4b1b      	ldrls	r3, [pc, #108]	@ (8009ea8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8009e3a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8009e3e:	bf98      	it	ls
 8009e40:	5d19      	ldrbls	r1, [r3, r4]
 8009e42:	f8ad 701e 	strh.w	r7, [sp, #30]
 8009e46:	bf88      	it	hi
 8009e48:	2100      	movhi	r1, #0
 8009e4a:	fb02 8307 	mla	r3, r2, r7, r8
 8009e4e:	10c9      	asrs	r1, r1, #3
 8009e50:	fb01 0003 	mla	r0, r1, r3, r0
 8009e54:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8009e58:	9005      	str	r0, [sp, #20]
 8009e5a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8009e5e:	6870      	ldr	r0, [r6, #4]
 8009e60:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8009e64:	2300      	movs	r3, #0
 8009e66:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009e6a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009e6e:	6803      	ldr	r3, [r0, #0]
 8009e70:	a901      	add	r1, sp, #4
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	4798      	blx	r3
 8009e76:	b00a      	add	sp, #40	@ 0x28
 8009e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e7c:	2d02      	cmp	r5, #2
 8009e7e:	d109      	bne.n	8009e94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8009e80:	28ff      	cmp	r0, #255	@ 0xff
 8009e82:	d105      	bne.n	8009e90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8009e84:	f1bc 0f00 	cmp.w	ip, #0
 8009e88:	bf14      	ite	ne
 8009e8a:	2340      	movne	r3, #64	@ 0x40
 8009e8c:	2320      	moveq	r3, #32
 8009e8e:	e7bd      	b.n	8009e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009e90:	2340      	movs	r3, #64	@ 0x40
 8009e92:	e7bb      	b.n	8009e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009e94:	28ff      	cmp	r0, #255	@ 0xff
 8009e96:	d105      	bne.n	8009ea4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8009e98:	f1bc 0f00 	cmp.w	ip, #0
 8009e9c:	bf14      	ite	ne
 8009e9e:	2304      	movne	r3, #4
 8009ea0:	2301      	moveq	r3, #1
 8009ea2:	e7b3      	b.n	8009e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	e7b1      	b.n	8009e0c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009ea8:	0801555c 	.word	0x0801555c

08009eac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	b08b      	sub	sp, #44	@ 0x2c
 8009eb2:	461d      	mov	r5, r3
 8009eb4:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8009eb8:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8009ebc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8009ec0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8009ec4:	bf14      	ite	ne
 8009ec6:	2308      	movne	r3, #8
 8009ec8:	2302      	moveq	r3, #2
 8009eca:	2400      	movs	r4, #0
 8009ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ed0:	4688      	mov	r8, r1
 8009ed2:	4693      	mov	fp, r2
 8009ed4:	9404      	str	r4, [sp, #16]
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	f7ff ff08 	bl	8009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009edc:	2e0b      	cmp	r6, #11
 8009ede:	bf98      	it	ls
 8009ee0:	4b15      	ldrls	r3, [pc, #84]	@ (8009f38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8009ee2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8009ee6:	bf98      	it	ls
 8009ee8:	5d9c      	ldrbls	r4, [r3, r6]
 8009eea:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8009eee:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009ef2:	fb05 b50a 	mla	r5, r5, sl, fp
 8009ef6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8009efa:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009efe:	10e4      	asrs	r4, r4, #3
 8009f00:	fb04 0405 	mla	r4, r4, r5, r0
 8009f04:	2300      	movs	r3, #0
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	9405      	str	r4, [sp, #20]
 8009f0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f0e:	f8ad a01e 	strh.w	sl, [sp, #30]
 8009f12:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f16:	f88d 9020 	strb.w	r9, [sp, #32]
 8009f1a:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8009f1e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009f22:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8009f26:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8009f2a:	6803      	ldr	r3, [r0, #0]
 8009f2c:	a901      	add	r1, sp, #4
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	4798      	blx	r3
 8009f32:	b00b      	add	sp, #44	@ 0x2c
 8009f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f38:	0801555c 	.word	0x0801555c

08009f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	461e      	mov	r6, r3
 8009f42:	4b0a      	ldr	r3, [pc, #40]	@ (8009f6c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8009f44:	460f      	mov	r7, r1
 8009f46:	881d      	ldrh	r5, [r3, #0]
 8009f48:	4690      	mov	r8, r2
 8009f4a:	f7ff fd23 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 8009f4e:	6803      	ldr	r3, [r0, #0]
 8009f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f52:	4798      	blx	r3
 8009f54:	280b      	cmp	r0, #11
 8009f56:	bf9a      	itte	ls
 8009f58:	4b05      	ldrls	r3, [pc, #20]	@ (8009f70 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8009f5a:	5c1c      	ldrbls	r4, [r3, r0]
 8009f5c:	2400      	movhi	r4, #0
 8009f5e:	fb08 7005 	mla	r0, r8, r5, r7
 8009f62:	10e4      	asrs	r4, r4, #3
 8009f64:	fb04 6000 	mla	r0, r4, r0, r6
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	2001542a 	.word	0x2001542a
 8009f70:	0801555c 	.word	0x0801555c

08009f74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8009f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f76:	b08b      	sub	sp, #44	@ 0x2c
 8009f78:	461f      	mov	r7, r3
 8009f7a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8009f7e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009f82:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009f86:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009f8a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009f8e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009f92:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009f96:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f9a:	2500      	movs	r5, #0
 8009f9c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009fa0:	f88d 3020 	strb.w	r3, [sp, #32]
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	4616      	mov	r6, r2
 8009fa8:	9504      	str	r5, [sp, #16]
 8009faa:	f7ff fe9f 	bl	8009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009fae:	463a      	mov	r2, r7
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f7ff ffc1 	bl	8009f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009fba:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8009fbc:	9005      	str	r0, [sp, #20]
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009fc4:	f7ff fce6 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 8009fc8:	6803      	ldr	r3, [r0, #0]
 8009fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fcc:	4798      	blx	r3
 8009fce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fd0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8009fd4:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	6860      	ldr	r0, [r4, #4]
 8009fdc:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009fe0:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8009fe4:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8009fe8:	6803      	ldr	r3, [r0, #0]
 8009fea:	a901      	add	r1, sp, #4
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	4798      	blx	r3
 8009ff0:	b00b      	add	sp, #44	@ 0x2c
 8009ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff4:	2001542a 	.word	0x2001542a

08009ff8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8009ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ffa:	b08d      	sub	sp, #52	@ 0x34
 8009ffc:	466b      	mov	r3, sp
 8009ffe:	e883 0006 	stmia.w	r3, {r1, r2}
 800a002:	2300      	movs	r3, #0
 800a004:	9306      	str	r3, [sp, #24]
 800a006:	6803      	ldr	r3, [r0, #0]
 800a008:	f8bd 6000 	ldrh.w	r6, [sp]
 800a00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800a012:	2501      	movs	r5, #1
 800a014:	9503      	str	r5, [sp, #12]
 800a016:	4604      	mov	r4, r0
 800a018:	4798      	blx	r3
 800a01a:	463a      	mov	r2, r7
 800a01c:	4631      	mov	r1, r6
 800a01e:	4603      	mov	r3, r0
 800a020:	4620      	mov	r0, r4
 800a022:	f7ff ff8b 	bl	8009f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a026:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a028:	9307      	str	r3, [sp, #28]
 800a02a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a02e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a032:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a036:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a03a:	4b0f      	ldr	r3, [pc, #60]	@ (800a078 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800a03c:	9004      	str	r0, [sp, #16]
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a044:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a048:	f7ff fca4 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 800a04c:	6803      	ldr	r3, [r0, #0]
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	4798      	blx	r3
 800a052:	23ff      	movs	r3, #255	@ 0xff
 800a054:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a058:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a05c:	6860      	ldr	r0, [r4, #4]
 800a05e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a062:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a066:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a06a:	6803      	ldr	r3, [r0, #0]
 800a06c:	a903      	add	r1, sp, #12
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	4798      	blx	r3
 800a072:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a074:	b00d      	add	sp, #52	@ 0x34
 800a076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a078:	2001542a 	.word	0x2001542a

0800a07c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	b08c      	sub	sp, #48	@ 0x30
 800a082:	461e      	mov	r6, r3
 800a084:	466d      	mov	r5, sp
 800a086:	2300      	movs	r3, #0
 800a088:	e885 0006 	stmia.w	r5, {r1, r2}
 800a08c:	9306      	str	r3, [sp, #24]
 800a08e:	6803      	ldr	r3, [r0, #0]
 800a090:	f8bd 7000 	ldrh.w	r7, [sp]
 800a094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a096:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800a09a:	2501      	movs	r5, #1
 800a09c:	9503      	str	r5, [sp, #12]
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4798      	blx	r3
 800a0a2:	4642      	mov	r2, r8
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f7ff ff47 	bl	8009f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a0ae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a0b2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a0b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a0ba:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a0be:	4b11      	ldr	r3, [pc, #68]	@ (800a104 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800a0c0:	9004      	str	r0, [sp, #16]
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a0c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0ca:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a0ce:	9607      	str	r6, [sp, #28]
 800a0d0:	f7ff fc60 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 800a0d4:	6803      	ldr	r3, [r0, #0]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d8:	4798      	blx	r3
 800a0da:	23ff      	movs	r3, #255	@ 0xff
 800a0dc:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a0e0:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a0e4:	6860      	ldr	r0, [r4, #4]
 800a0e6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a0ea:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a0ee:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a0f2:	6803      	ldr	r3, [r0, #0]
 800a0f4:	a903      	add	r1, sp, #12
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	4798      	blx	r3
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	b00c      	add	sp, #48	@ 0x30
 800a0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a102:	bf00      	nop
 800a104:	2001542a 	.word	0x2001542a

0800a108 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800a108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a10a:	b085      	sub	sp, #20
 800a10c:	ac02      	add	r4, sp, #8
 800a10e:	e884 0006 	stmia.w	r4, {r1, r2}
 800a112:	4605      	mov	r5, r0
 800a114:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800a118:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800a11c:	f7ff fde6 	bl	8009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a120:	463a      	mov	r2, r7
 800a122:	4603      	mov	r3, r0
 800a124:	4631      	mov	r1, r6
 800a126:	4628      	mov	r0, r5
 800a128:	f7ff ff08 	bl	8009f3c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a12c:	4a05      	ldr	r2, [pc, #20]	@ (800a144 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	8812      	ldrh	r2, [r2, #0]
 800a132:	9200      	str	r2, [sp, #0]
 800a134:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800a136:	e894 0006 	ldmia.w	r4, {r1, r2}
 800a13a:	4603      	mov	r3, r0
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b0      	blx	r6
 800a140:	b005      	add	sp, #20
 800a142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a144:	2001542a 	.word	0x2001542a

0800a148 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800a14e:	4604      	mov	r4, r0
 800a150:	b19b      	cbz	r3, 800a17a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800a152:	2002      	movs	r0, #2
 800a154:	f7f7 fcc0 	bl	8001ad8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800a158:	2300      	movs	r3, #0
 800a15a:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800a15e:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	4620      	mov	r0, r4
 800a166:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800a16a:	f7ff fdbf 	bl	8009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a16e:	462b      	mov	r3, r5
 800a170:	4601      	mov	r1, r0
 800a172:	4620      	mov	r0, r4
 800a174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a178:	4718      	bx	r3
 800a17a:	bd70      	pop	{r4, r5, r6, pc}

0800a17c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a182:	428b      	cmp	r3, r1
 800a184:	4604      	mov	r4, r0
 800a186:	460d      	mov	r5, r1
 800a188:	d006      	beq.n	800a198 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800a18a:	6803      	ldr	r3, [r0, #0]
 800a18c:	b929      	cbnz	r1, 800a19a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800a18e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a192:	4798      	blx	r3
 800a194:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800a198:	bd38      	pop	{r3, r4, r5, pc}
 800a19a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a19e:	e7f8      	b.n	800a192 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800a1a0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	b95b      	cbnz	r3, 800a1c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a1aa:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d007      	beq.n	800a1c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a1b2:	6840      	ldr	r0, [r0, #4]
 800a1b4:	f000 f912 	bl	800a3dc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800a1b8:	b118      	cbz	r0, 800a1c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a1ba:	6862      	ldr	r2, [r4, #4]
 800a1bc:	7a53      	ldrb	r3, [r2, #9]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0fc      	beq.n	800a1bc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800a1c2:	f7f7 fdd5 	bl	8001d70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	f7ff ffd7 	bl	800a17c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f7ff fd8c 	bl	8009cec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a1d4:	bd10      	pop	{r4, pc}
 800a1d6:	bf00      	nop
 800a1d8:	2001542e 	.word	0x2001542e

0800a1dc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800a1dc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800a1e0:	1a13      	subs	r3, r2, r0
 800a1e2:	4258      	negs	r0, r3
 800a1e4:	4158      	adcs	r0, r3
 800a1e6:	4770      	bx	lr

0800a1e8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800a1e8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800a1ec:	1a9b      	subs	r3, r3, r2
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bfdc      	itt	le
 800a1f2:	6882      	ldrle	r2, [r0, #8]
 800a1f4:	189b      	addle	r3, r3, r2
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	bfcc      	ite	gt
 800a1fa:	2000      	movgt	r0, #0
 800a1fc:	2001      	movle	r0, #1
 800a1fe:	4770      	bx	lr

0800a200 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800a200:	6902      	ldr	r2, [r0, #16]
 800a202:	6843      	ldr	r3, [r0, #4]
 800a204:	2024      	movs	r0, #36	@ 0x24
 800a206:	fb00 3002 	mla	r0, r0, r2, r3
 800a20a:	4770      	bx	lr

0800a20c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800a20c:	6803      	ldr	r3, [r0, #0]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	4718      	bx	r3

0800a212 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800a212:	b570      	push	{r4, r5, r6, lr}
 800a214:	2301      	movs	r3, #1
 800a216:	7203      	strb	r3, [r0, #8]
 800a218:	4604      	mov	r4, r0
 800a21a:	6840      	ldr	r0, [r0, #4]
 800a21c:	6803      	ldr	r3, [r0, #0]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	4798      	blx	r3
 800a222:	6803      	ldr	r3, [r0, #0]
 800a224:	2b40      	cmp	r3, #64	@ 0x40
 800a226:	4605      	mov	r5, r0
 800a228:	d00c      	beq.n	800a244 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a22a:	d810      	bhi.n	800a24e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d01d      	beq.n	800a26c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800a230:	d804      	bhi.n	800a23c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800a232:	2b01      	cmp	r3, #1
 800a234:	d006      	beq.n	800a244 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a236:	2b02      	cmp	r3, #2
 800a238:	d02c      	beq.n	800a294 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	2b08      	cmp	r3, #8
 800a23e:	d01d      	beq.n	800a27c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800a240:	2b20      	cmp	r3, #32
 800a242:	d1fa      	bne.n	800a23a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	4620      	mov	r0, r4
 800a248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a24a:	4798      	blx	r3
 800a24c:	e013      	b.n	800a276 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800a24e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a252:	d0f7      	beq.n	800a244 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a254:	d804      	bhi.n	800a260 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800a256:	2b80      	cmp	r3, #128	@ 0x80
 800a258:	d0f4      	beq.n	800a244 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a25e:	e7f0      	b.n	800a242 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800a260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a264:	d0ee      	beq.n	800a244 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a26a:	e7e5      	b.n	800a238 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	7f01      	ldrb	r1, [r0, #28]
 800a270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a272:	4620      	mov	r0, r4
 800a274:	4798      	blx	r3
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a27a:	e006      	b.n	800a28a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	7f01      	ldrb	r1, [r0, #28]
 800a280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a282:	4620      	mov	r0, r4
 800a284:	4798      	blx	r3
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a28a:	4629      	mov	r1, r5
 800a28c:	4620      	mov	r0, r4
 800a28e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a292:	4718      	bx	r3
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	4620      	mov	r0, r4
 800a298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a29a:	4798      	blx	r3
 800a29c:	e7f3      	b.n	800a286 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800a29e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800a29e:	4770      	bx	lr

0800a2a0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800a2a0:	4770      	bx	lr

0800a2a2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800a2a2:	4770      	bx	lr

0800a2a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800a2a4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800a2a8:	1ad2      	subs	r2, r2, r3
 800a2aa:	2a00      	cmp	r2, #0
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	bfdc      	itt	le
 800a2b0:	6884      	ldrle	r4, [r0, #8]
 800a2b2:	1912      	addle	r2, r2, r4
 800a2b4:	2a01      	cmp	r2, #1
 800a2b6:	dd16      	ble.n	800a2e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800a2b8:	6842      	ldr	r2, [r0, #4]
 800a2ba:	2424      	movs	r4, #36	@ 0x24
 800a2bc:	fb04 2303 	mla	r3, r4, r3, r2
 800a2c0:	f101 0220 	add.w	r2, r1, #32
 800a2c4:	f851 4b04 	ldr.w	r4, [r1], #4
 800a2c8:	f843 4b04 	str.w	r4, [r3], #4
 800a2cc:	4291      	cmp	r1, r2
 800a2ce:	d1f9      	bne.n	800a2c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800a2d0:	780a      	ldrb	r2, [r1, #0]
 800a2d2:	701a      	strb	r2, [r3, #0]
 800a2d4:	68c3      	ldr	r3, [r0, #12]
 800a2d6:	6882      	ldr	r2, [r0, #8]
 800a2d8:	f3bf 8f5b 	dmb	ish
 800a2dc:	3301      	adds	r3, #1
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	bfd8      	it	le
 800a2e2:	1a9b      	suble	r3, r3, r2
 800a2e4:	60c3      	str	r3, [r0, #12]
 800a2e6:	bd10      	pop	{r4, pc}

0800a2e8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800a2e8:	6903      	ldr	r3, [r0, #16]
 800a2ea:	6882      	ldr	r2, [r0, #8]
 800a2ec:	f3bf 8f5b 	dmb	ish
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	bfd8      	it	le
 800a2f6:	1a9b      	suble	r3, r3, r2
 800a2f8:	6103      	str	r3, [r0, #16]
 800a2fa:	4770      	bx	lr

0800a2fc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	4604      	mov	r4, r0
 800a300:	460e      	mov	r6, r1
 800a302:	6860      	ldr	r0, [r4, #4]
 800a304:	6803      	ldr	r3, [r0, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	4798      	blx	r3
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d1f9      	bne.n	800a302 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800a30e:	4d0d      	ldr	r5, [pc, #52]	@ (800a344 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800a310:	6828      	ldr	r0, [r5, #0]
 800a312:	6803      	ldr	r3, [r0, #0]
 800a314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a316:	4798      	blx	r3
 800a318:	f7f7 fd38 	bl	8001d8c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800a31c:	6828      	ldr	r0, [r5, #0]
 800a31e:	2101      	movs	r1, #1
 800a320:	f7ff ff2c 	bl	800a17c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a324:	6860      	ldr	r0, [r4, #4]
 800a326:	6803      	ldr	r3, [r0, #0]
 800a328:	4631      	mov	r1, r6
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	4798      	blx	r3
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	4620      	mov	r0, r4
 800a332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a334:	4798      	blx	r3
 800a336:	6828      	ldr	r0, [r5, #0]
 800a338:	6803      	ldr	r3, [r0, #0]
 800a33a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a33e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a340:	4718      	bx	r3
 800a342:	bf00      	nop
 800a344:	20015430 	.word	0x20015430

0800a348 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800a348:	b508      	push	{r3, lr}
 800a34a:	f7f7 fd11 	bl	8001d70 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a34e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a352:	f7f7 bd15 	b.w	8001d80 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800a356 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800a356:	b510      	push	{r4, lr}
 800a358:	2114      	movs	r1, #20
 800a35a:	4604      	mov	r4, r0
 800a35c:	f008 fab8 	bl	80128d0 <_ZdlPvj>
 800a360:	4620      	mov	r0, r4
 800a362:	bd10      	pop	{r4, pc}

0800a364 <_ZN8touchgfx13DMA_Interface5startEv>:
 800a364:	b510      	push	{r4, lr}
 800a366:	4604      	mov	r4, r0
 800a368:	6840      	ldr	r0, [r0, #4]
 800a36a:	6803      	ldr	r3, [r0, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4798      	blx	r3
 800a370:	b948      	cbnz	r0, 800a386 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a372:	7a63      	ldrb	r3, [r4, #9]
 800a374:	b13b      	cbz	r3, 800a386 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a376:	7a23      	ldrb	r3, [r4, #8]
 800a378:	b92b      	cbnz	r3, 800a386 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	4620      	mov	r0, r4
 800a37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a384:	4718      	bx	r3
 800a386:	bd10      	pop	{r4, pc}

0800a388 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	4604      	mov	r4, r0
 800a38c:	6840      	ldr	r0, [r0, #4]
 800a38e:	6803      	ldr	r3, [r0, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4798      	blx	r3
 800a394:	4605      	mov	r5, r0
 800a396:	b930      	cbnz	r0, 800a3a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800a398:	7a23      	ldrb	r3, [r4, #8]
 800a39a:	b123      	cbz	r3, 800a3a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800a39c:	6860      	ldr	r0, [r4, #4]
 800a39e:	6803      	ldr	r3, [r0, #0]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	4798      	blx	r3
 800a3a4:	7225      	strb	r5, [r4, #8]
 800a3a6:	6860      	ldr	r0, [r4, #4]
 800a3a8:	6803      	ldr	r3, [r0, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4798      	blx	r3
 800a3ae:	b928      	cbnz	r0, 800a3bc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3ba:	4718      	bx	r3
 800a3bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3c0:	f7f7 bcec 	b.w	8001d9c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800a3c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	4c04      	ldr	r4, [pc, #16]	@ (800a3d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800a3c8:	6082      	str	r2, [r0, #8]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	e9c0 4100 	strd	r4, r1, [r0]
 800a3d0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	bf00      	nop
 800a3d8:	08015570 	.word	0x08015570

0800a3dc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800a3dc:	6840      	ldr	r0, [r0, #4]
 800a3de:	6803      	ldr	r3, [r0, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4718      	bx	r3

0800a3e4 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	4770      	bx	lr

0800a3e8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800a3e8:	4b07      	ldr	r3, [pc, #28]	@ (800a408 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800a3ea:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bf81      	itttt	hi
 800a3f2:	4b06      	ldrhi	r3, [pc, #24]	@ (800a40c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800a3f4:	681b      	ldrhi	r3, [r3, #0]
 800a3f6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800a3fa:	7858      	ldrbhi	r0, [r3, #1]
 800a3fc:	bf8c      	ite	hi
 800a3fe:	f000 0003 	andhi.w	r0, r0, #3
 800a402:	2000      	movls	r0, #0
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20015484 	.word	0x20015484
 800a40c:	20015480 	.word	0x20015480

0800a410 <_ZN8touchgfx8TextAreaD1Ev>:
 800a410:	4770      	bx	lr
	...

0800a414 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800a414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a418:	4b10      	ldr	r3, [pc, #64]	@ (800a45c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800a41a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	428b      	cmp	r3, r1
 800a420:	4604      	mov	r4, r0
 800a422:	d918      	bls.n	800a456 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800a424:	6803      	ldr	r3, [r0, #0]
 800a426:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 800a428:	4b0d      	ldr	r3, [pc, #52]	@ (800a460 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800a42a:	6818      	ldr	r0, [r3, #0]
 800a42c:	f7f9 fb90 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	4606      	mov	r6, r0
 800a434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a436:	4620      	mov	r0, r4
 800a438:	4798      	blx	r3
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	4607      	mov	r7, r0
 800a43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a442:	4620      	mov	r0, r4
 800a444:	4798      	blx	r3
 800a446:	463a      	mov	r2, r7
 800a448:	4603      	mov	r3, r0
 800a44a:	4631      	mov	r1, r6
 800a44c:	4620      	mov	r0, r4
 800a44e:	46ac      	mov	ip, r5
 800a450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a454:	4760      	bx	ip
 800a456:	2000      	movs	r0, #0
 800a458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a45c:	20015484 	.word	0x20015484
 800a460:	2001548c 	.word	0x2001548c

0800a464 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800a464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a468:	4b17      	ldr	r3, [pc, #92]	@ (800a4c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800a46a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	428b      	cmp	r3, r1
 800a470:	4604      	mov	r4, r0
 800a472:	d926      	bls.n	800a4c2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800a474:	4b15      	ldr	r3, [pc, #84]	@ (800a4cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800a47c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800a480:	4b13      	ldr	r3, [pc, #76]	@ (800a4d0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800a482:	7855      	ldrb	r5, [r2, #1]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a48a:	6833      	ldr	r3, [r6, #0]
 800a48c:	69df      	ldr	r7, [r3, #28]
 800a48e:	4b11      	ldr	r3, [pc, #68]	@ (800a4d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800a490:	6818      	ldr	r0, [r3, #0]
 800a492:	f7f9 fb5d 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	4680      	mov	r8, r0
 800a49a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a49c:	4620      	mov	r0, r4
 800a49e:	4798      	blx	r3
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	4681      	mov	r9, r0
 800a4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4798      	blx	r3
 800a4ac:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800a4b0:	9000      	str	r0, [sp, #0]
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	4642      	mov	r2, r8
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	47b8      	blx	r7
 800a4bc:	b003      	add	sp, #12
 800a4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e7fa      	b.n	800a4bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800a4c6:	bf00      	nop
 800a4c8:	20015484 	.word	0x20015484
 800a4cc:	20015480 	.word	0x20015480
 800a4d0:	20015488 	.word	0x20015488
 800a4d4:	2001548c 	.word	0x2001548c

0800a4d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800a4d8:	b40e      	push	{r1, r2, r3}
 800a4da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4de:	4b2f      	ldr	r3, [pc, #188]	@ (800a59c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800a4e0:	881a      	ldrh	r2, [r3, #0]
 800a4e2:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	b09d      	sub	sp, #116	@ 0x74
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	d954      	bls.n	800a596 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800a4ec:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800a5a0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800a4f0:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800a5a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800a4f4:	aa26      	add	r2, sp, #152	@ 0x98
 800a4f6:	9202      	str	r2, [sp, #8]
 800a4f8:	f8d9 2000 	ldr.w	r2, [r9]
 800a4fc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800a500:	f8d8 3000 	ldr.w	r3, [r8]
 800a504:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	4628      	mov	r0, r5
 800a50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50e:	4798      	blx	r3
 800a510:	b207      	sxth	r7, r0
 800a512:	4606      	mov	r6, r0
 800a514:	a803      	add	r0, sp, #12
 800a516:	f003 ffa8 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	4628      	mov	r0, r5
 800a51e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a520:	4798      	blx	r3
 800a522:	682b      	ldr	r3, [r5, #0]
 800a524:	4682      	mov	sl, r0
 800a526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a528:	4628      	mov	r0, r5
 800a52a:	4798      	blx	r3
 800a52c:	4653      	mov	r3, sl
 800a52e:	9000      	str	r0, [sp, #0]
 800a530:	9a02      	ldr	r2, [sp, #8]
 800a532:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800a534:	a803      	add	r0, sp, #12
 800a536:	f003 fff3 	bl	800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a53a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a53c:	f8d9 3000 	ldr.w	r3, [r9]
 800a540:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800a544:	8925      	ldrh	r5, [r4, #8]
 800a546:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800a54a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800a54e:	eba5 050c 	sub.w	r5, r5, ip
 800a552:	784a      	ldrb	r2, [r1, #1]
 800a554:	f8d8 3000 	ldr.w	r3, [r8]
 800a558:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800a55c:	b22d      	sxth	r5, r5
 800a55e:	9500      	str	r5, [sp, #0]
 800a560:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a564:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a568:	a803      	add	r0, sp, #12
 800a56a:	f001 fdc1 	bl	800c0f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800a56e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800a572:	18b9      	adds	r1, r7, r2
 800a574:	2900      	cmp	r1, #0
 800a576:	b203      	sxth	r3, r0
 800a578:	dd0b      	ble.n	800a592 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800a57a:	3b01      	subs	r3, #1
 800a57c:	fb13 f302 	smulbb	r3, r3, r2
 800a580:	fb16 3300 	smlabb	r3, r6, r0, r3
 800a584:	b21f      	sxth	r7, r3
 800a586:	4638      	mov	r0, r7
 800a588:	b01d      	add	sp, #116	@ 0x74
 800a58a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a58e:	b003      	add	sp, #12
 800a590:	4770      	bx	lr
 800a592:	2b00      	cmp	r3, #0
 800a594:	dcf7      	bgt.n	800a586 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a596:	2700      	movs	r7, #0
 800a598:	e7f5      	b.n	800a586 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a59a:	bf00      	nop
 800a59c:	20015484 	.word	0x20015484
 800a5a0:	20015480 	.word	0x20015480
 800a5a4:	20015488 	.word	0x20015488

0800a5a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	4bbc      	ldr	r3, [pc, #752]	@ (800a8a0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800a5b4:	428b      	cmp	r3, r1
 800a5b6:	b0a9      	sub	sp, #164	@ 0xa4
 800a5b8:	4680      	mov	r8, r0
 800a5ba:	d809      	bhi.n	800a5d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c2:	e9c0 3200 	strd	r3, r2, [r0]
 800a5c6:	6083      	str	r3, [r0, #8]
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	b029      	add	sp, #164	@ 0xa4
 800a5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d0:	4eb4      	ldr	r6, [pc, #720]	@ (800a8a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800a5d2:	6833      	ldr	r3, [r6, #0]
 800a5d4:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800a5d8:	4bb3      	ldr	r3, [pc, #716]	@ (800a8a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a5e0:	4bb2      	ldr	r3, [pc, #712]	@ (800a8ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	f7f9 fab4 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	4681      	mov	r9, r0
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	4798      	blx	r3
 800a5f2:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800a5f4:	b203      	sxth	r3, r0
 800a5f6:	4407      	add	r7, r0
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	b2bb      	uxth	r3, r7
 800a5fc:	9303      	str	r3, [sp, #12]
 800a5fe:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a602:	4682      	mov	sl, r0
 800a604:	a80f      	add	r0, sp, #60	@ 0x3c
 800a606:	2b00      	cmp	r3, #0
 800a608:	f040 80a6 	bne.w	800a758 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800a60c:	f003 ff2d 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	4628      	mov	r0, r5
 800a614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a616:	4798      	blx	r3
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	4606      	mov	r6, r0
 800a61c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a61e:	4628      	mov	r0, r5
 800a620:	4798      	blx	r3
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	4607      	mov	r7, r0
 800a626:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a628:	4620      	mov	r0, r4
 800a62a:	4798      	blx	r3
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	4683      	mov	fp, r0
 800a630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a634:	4620      	mov	r0, r4
 800a636:	4798      	blx	r3
 800a638:	463b      	mov	r3, r7
 800a63a:	e9cd b000 	strd	fp, r0, [sp]
 800a63e:	4649      	mov	r1, r9
 800a640:	4632      	mov	r2, r6
 800a642:	a80f      	add	r0, sp, #60	@ 0x3c
 800a644:	f003 ff81 	bl	800e54a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a648:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a64c:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800a8a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800a650:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a654:	f04f 0600 	mov.w	r6, #0
 800a658:	bf0c      	ite	eq
 800a65a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800a65e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800a662:	4637      	mov	r7, r6
 800a664:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a666:	f8db 3000 	ldr.w	r3, [fp]
 800a66a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a66e:	4629      	mov	r1, r5
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a676:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a67a:	a80f      	add	r0, sp, #60	@ 0x3c
 800a67c:	f001 fa3f 	bl	800bafe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	4286      	cmp	r6, r0
 800a684:	bfb8      	it	lt
 800a686:	4606      	movlt	r6, r0
 800a688:	3701      	adds	r7, #1
 800a68a:	eba9 0903 	sub.w	r9, r9, r3
 800a68e:	a80f      	add	r0, sp, #60	@ 0x3c
 800a690:	b236      	sxth	r6, r6
 800a692:	b2bf      	uxth	r7, r7
 800a694:	fa0f f989 	sxth.w	r9, r9
 800a698:	f003 ff0e 	bl	800e4b8 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800a69c:	b918      	cbnz	r0, 800a6a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a69e:	7a2b      	ldrb	r3, [r5, #8]
 800a6a0:	444b      	add	r3, r9
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dcde      	bgt.n	800a664 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	9a04      	ldr	r2, [sp, #16]
 800a6aa:	f895 9009 	ldrb.w	r9, [r5, #9]
 800a6ae:	fb13 f707 	smulbb	r7, r3, r7
 800a6b2:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800a6b4:	1aff      	subs	r7, r7, r3
 800a6b6:	b2bf      	uxth	r7, r7
 800a6b8:	b23b      	sxth	r3, r7
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	bfa8      	it	ge
 800a6be:	4657      	movge	r7, sl
 800a6c0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a6c4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	bf08      	it	eq
 800a6cc:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800a6d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6d2:	bf18      	it	ne
 800a6d4:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800a6d8:	4620      	mov	r0, r4
 800a6da:	4798      	blx	r3
 800a6dc:	444f      	add	r7, r9
 800a6de:	fa1f f987 	uxth.w	r9, r7
 800a6e2:	2801      	cmp	r0, #1
 800a6e4:	fa0f f789 	sxth.w	r7, r9
 800a6e8:	b2b3      	uxth	r3, r6
 800a6ea:	f000 80e1 	beq.w	800a8b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800a6ee:	2802      	cmp	r0, #2
 800a6f0:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800a6f4:	f000 80e2 	beq.w	800a8bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800a6f8:	7aea      	ldrb	r2, [r5, #11]
 800a6fa:	7b2d      	ldrb	r5, [r5, #12]
 800a6fc:	b236      	sxth	r6, r6
 800a6fe:	1ab6      	subs	r6, r6, r2
 800a700:	442a      	add	r2, r5
 800a702:	4413      	add	r3, r2
 800a704:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800a708:	fa1f fa86 	uxth.w	sl, r6
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	2a02      	cmp	r2, #2
 800a710:	fa0f fb8a 	sxth.w	fp, sl
 800a714:	b21e      	sxth	r6, r3
 800a716:	f000 80d5 	beq.w	800a8c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800a71a:	2a03      	cmp	r2, #3
 800a71c:	f000 80dd 	beq.w	800a8da <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800a720:	2a01      	cmp	r2, #1
 800a722:	f040 80e5 	bne.w	800a8f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800a726:	8925      	ldrh	r5, [r4, #8]
 800a728:	4633      	mov	r3, r6
 800a72a:	eba5 0909 	sub.w	r9, r5, r9
 800a72e:	463e      	mov	r6, r7
 800a730:	465d      	mov	r5, fp
 800a732:	461f      	mov	r7, r3
 800a734:	fa0f fb89 	sxth.w	fp, r9
 800a738:	4b5c      	ldr	r3, [pc, #368]	@ (800a8ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a73a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f7f9 fa07 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 800a742:	f8a8 b000 	strh.w	fp, [r8]
 800a746:	f8a8 5002 	strh.w	r5, [r8, #2]
 800a74a:	f8a8 6004 	strh.w	r6, [r8, #4]
 800a74e:	f8a8 7006 	strh.w	r7, [r8, #6]
 800a752:	f8c8 0008 	str.w	r0, [r8, #8]
 800a756:	e737      	b.n	800a5c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800a758:	f003 fe87 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	4628      	mov	r0, r5
 800a760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a762:	4798      	blx	r3
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	4607      	mov	r7, r0
 800a768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a76a:	4628      	mov	r0, r5
 800a76c:	4798      	blx	r3
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	4683      	mov	fp, r0
 800a772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a774:	4620      	mov	r0, r4
 800a776:	4798      	blx	r3
 800a778:	6822      	ldr	r2, [r4, #0]
 800a77a:	9005      	str	r0, [sp, #20]
 800a77c:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a780:	4620      	mov	r0, r4
 800a782:	4790      	blx	r2
 800a784:	9b05      	ldr	r3, [sp, #20]
 800a786:	9001      	str	r0, [sp, #4]
 800a788:	463a      	mov	r2, r7
 800a78a:	4649      	mov	r1, r9
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	a80f      	add	r0, sp, #60	@ 0x3c
 800a790:	465b      	mov	r3, fp
 800a792:	f003 feda 	bl	800e54a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a796:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a79a:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800a79e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a7a0:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800a7a4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a7a8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800a7ac:	bf0a      	itet	eq
 800a7ae:	464a      	moveq	r2, r9
 800a7b0:	461a      	movne	r2, r3
 800a7b2:	4699      	moveq	r9, r3
 800a7b4:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800a7b8:	1ad2      	subs	r2, r2, r3
 800a7ba:	6833      	ldr	r3, [r6, #0]
 800a7bc:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800a7c0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a7c4:	af0f      	add	r7, sp, #60	@ 0x3c
 800a7c6:	7859      	ldrb	r1, [r3, #1]
 800a7c8:	9707      	str	r7, [sp, #28]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800a7d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a7d4:	f88d 1020 	strb.w	r1, [sp, #32]
 800a7d8:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a7dc:	9509      	str	r5, [sp, #36]	@ 0x24
 800a7de:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800a7e2:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800a7e6:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800a7ea:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800a7ee:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800a7f2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800a7f6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800a7fa:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800a7fe:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a802:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800a806:	b350      	cbz	r0, 800a85e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	4628      	mov	r0, r5
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	4798      	blx	r3
 800a810:	4607      	mov	r7, r0
 800a812:	b320      	cbz	r0, 800a85e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a814:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a816:	6803      	ldr	r3, [r0, #0]
 800a818:	4639      	mov	r1, r7
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4798      	blx	r3
 800a81e:	4606      	mov	r6, r0
 800a820:	b1e8      	cbz	r0, 800a85e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a822:	7b43      	ldrb	r3, [r0, #13]
 800a824:	7a82      	ldrb	r2, [r0, #10]
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a82c:	4313      	orrs	r3, r2
 800a82e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a832:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800a836:	2b06      	cmp	r3, #6
 800a838:	d111      	bne.n	800a85e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a83a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a83c:	6803      	ldr	r3, [r0, #0]
 800a83e:	4632      	mov	r2, r6
 800a840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a842:	4639      	mov	r1, r7
 800a844:	4798      	blx	r3
 800a846:	7b73      	ldrb	r3, [r6, #13]
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800a84e:	7ab3      	ldrb	r3, [r6, #10]
 800a850:	4313      	orrs	r3, r2
 800a852:	4418      	add	r0, r3
 800a854:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a858:	4418      	add	r0, r3
 800a85a:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800a85e:	2600      	movs	r6, #0
 800a860:	4637      	mov	r7, r6
 800a862:	a806      	add	r0, sp, #24
 800a864:	f001 fb40 	bl	800bee8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800a868:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	4286      	cmp	r6, r0
 800a870:	eba9 0903 	sub.w	r9, r9, r3
 800a874:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a878:	bfb8      	it	lt
 800a87a:	4606      	movlt	r6, r0
 800a87c:	3701      	adds	r7, #1
 800a87e:	b236      	sxth	r6, r6
 800a880:	b2bf      	uxth	r7, r7
 800a882:	fa0f f989 	sxth.w	r9, r9
 800a886:	2b00      	cmp	r3, #0
 800a888:	f43f af0d 	beq.w	800a6a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a88c:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800a890:	2b00      	cmp	r3, #0
 800a892:	f47f af08 	bne.w	800a6a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a896:	7a2b      	ldrb	r3, [r5, #8]
 800a898:	444b      	add	r3, r9
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dce1      	bgt.n	800a862 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800a89e:	e702      	b.n	800a6a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a8a0:	20015484 	.word	0x20015484
 800a8a4:	20015480 	.word	0x20015480
 800a8a8:	20015488 	.word	0x20015488
 800a8ac:	2001548c 	.word	0x2001548c
 800a8b0:	ebaa 0606 	sub.w	r6, sl, r6
 800a8b4:	2002      	movs	r0, #2
 800a8b6:	fb96 f6f0 	sdiv	r6, r6, r0
 800a8ba:	e71d      	b.n	800a6f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800a8bc:	441e      	add	r6, r3
 800a8be:	ebaa 0606 	sub.w	r6, sl, r6
 800a8c2:	e719      	b.n	800a6f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800a8c4:	8925      	ldrh	r5, [r4, #8]
 800a8c6:	1aed      	subs	r5, r5, r3
 800a8c8:	eba5 050a 	sub.w	r5, r5, sl
 800a8cc:	fa0f fb85 	sxth.w	fp, r5
 800a8d0:	8965      	ldrh	r5, [r4, #10]
 800a8d2:	eba5 0509 	sub.w	r5, r5, r9
 800a8d6:	b22d      	sxth	r5, r5
 800a8d8:	e72e      	b.n	800a738 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800a8da:	8965      	ldrh	r5, [r4, #10]
 800a8dc:	1aed      	subs	r5, r5, r3
 800a8de:	eba5 050a 	sub.w	r5, r5, sl
 800a8e2:	4633      	mov	r3, r6
 800a8e4:	b22d      	sxth	r5, r5
 800a8e6:	463e      	mov	r6, r7
 800a8e8:	f04f 0b00 	mov.w	fp, #0
 800a8ec:	461f      	mov	r7, r3
 800a8ee:	e723      	b.n	800a738 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800a8f0:	2500      	movs	r5, #0
 800a8f2:	e721      	b.n	800a738 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800a8f4 <_ZN8touchgfx8TextAreaD0Ev>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	2148      	movs	r1, #72	@ 0x48
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	f007 ffe9 	bl	80128d0 <_ZdlPvj>
 800a8fe:	4620      	mov	r0, r4
 800a900:	bd10      	pop	{r4, pc}
	...

0800a904 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800a904:	b513      	push	{r0, r1, r4, lr}
 800a906:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800a90a:	4604      	mov	r4, r0
 800a90c:	b1fb      	cbz	r3, 800a94e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a90e:	4b16      	ldr	r3, [pc, #88]	@ (800a968 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800a910:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	428b      	cmp	r3, r1
 800a916:	d91a      	bls.n	800a94e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a918:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	dd16      	ble.n	800a94e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a920:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a924:	2b00      	cmp	r3, #0
 800a926:	dd12      	ble.n	800a94e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a928:	4b10      	ldr	r3, [pc, #64]	@ (800a96c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800a92a:	6818      	ldr	r0, [r3, #0]
 800a92c:	f7f9 f910 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 800a930:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	db06      	blt.n	800a948 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800a93a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	db02      	blt.n	800a948 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800a942:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a944:	4298      	cmp	r0, r3
 800a946:	d004      	beq.n	800a952 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800a948:	6953      	ldr	r3, [r2, #20]
 800a94a:	4620      	mov	r0, r4
 800a94c:	4798      	blx	r3
 800a94e:	b002      	add	sp, #8
 800a950:	bd10      	pop	{r4, pc}
 800a952:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800a956:	c903      	ldmia	r1, {r0, r1}
 800a958:	466b      	mov	r3, sp
 800a95a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a95e:	6912      	ldr	r2, [r2, #16]
 800a960:	4619      	mov	r1, r3
 800a962:	4620      	mov	r0, r4
 800a964:	4790      	blx	r2
 800a966:	e7f2      	b.n	800a94e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a968:	20015484 	.word	0x20015484
 800a96c:	2001548c 	.word	0x2001548c

0800a970 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	4b44      	ldr	r3, [pc, #272]	@ (800aa88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800a976:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	4293      	cmp	r3, r2
 800a97c:	b08e      	sub	sp, #56	@ 0x38
 800a97e:	4604      	mov	r4, r0
 800a980:	d97e      	bls.n	800aa80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a982:	6808      	ldr	r0, [r1, #0]
 800a984:	4d41      	ldr	r5, [pc, #260]	@ (800aa8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800a986:	6849      	ldr	r1, [r1, #4]
 800a988:	ab05      	add	r3, sp, #20
 800a98a:	c303      	stmia	r3!, {r0, r1}
 800a98c:	4611      	mov	r1, r2
 800a98e:	6828      	ldr	r0, [r5, #0]
 800a990:	f7f9 f8de 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 800a994:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800a998:	2b00      	cmp	r3, #0
 800a99a:	db11      	blt.n	800a9c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a99c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	db0d      	blt.n	800a9c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a9a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a9a6:	4298      	cmp	r0, r3
 800a9a8:	d10a      	bne.n	800a9c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a9aa:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800a9ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9b2:	ab09      	add	r3, sp, #36	@ 0x24
 800a9b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	a805      	add	r0, sp, #20
 800a9bc:	f7fe fd14 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800a9c0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd5b      	ble.n	800aa80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a9c8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	dd57      	ble.n	800aa80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a9d0:	4f2f      	ldr	r7, [pc, #188]	@ (800aa90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800a9d2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800a9da:	4b2e      	ldr	r3, [pc, #184]	@ (800aa94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a9e2:	2e00      	cmp	r6, #0
 800a9e4:	d04c      	beq.n	800aa80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800a9ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	4798      	blx	r3
 800a9f2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800a9fa:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800a9fe:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800aa02:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa04:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800aa08:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	9609      	str	r6, [sp, #36]	@ 0x24
 800aa10:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800aa14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa18:	4b1f      	ldr	r3, [pc, #124]	@ (800aa98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800aa1a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800aa24:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa26:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800aa2a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800aa2e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800aa32:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800aa36:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800aa3a:	b10a      	cbz	r2, 800aa40 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800aa3c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800aa3e:	b906      	cbnz	r6, 800aa42 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800aa40:	689e      	ldr	r6, [r3, #8]
 800aa42:	af07      	add	r7, sp, #28
 800aa44:	4621      	mov	r1, r4
 800aa46:	4638      	mov	r0, r7
 800aa48:	f003 f91e 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800aa4c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800aa4e:	6828      	ldr	r0, [r5, #0]
 800aa50:	f7f9 f87e 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	4605      	mov	r5, r0
 800aa58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4798      	blx	r3
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	4680      	mov	r8, r0
 800aa62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa66:	4620      	mov	r0, r4
 800aa68:	4798      	blx	r3
 800aa6a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800aa6e:	ab09      	add	r3, sp, #36	@ 0x24
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	9501      	str	r5, [sp, #4]
 800aa74:	ab05      	add	r3, sp, #20
 800aa76:	e897 0006 	ldmia.w	r7, {r1, r2}
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f7f9 f81a 	bl	8003ab4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800aa80:	b00e      	add	sp, #56	@ 0x38
 800aa82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa86:	bf00      	nop
 800aa88:	20015484 	.word	0x20015484
 800aa8c:	2001548c 	.word	0x2001548c
 800aa90:	20015480 	.word	0x20015480
 800aa94:	20015488 	.word	0x20015488
 800aa98:	20015430 	.word	0x20015430

0800aa9c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	6803      	ldr	r3, [r0, #0]
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	4798      	blx	r3
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4620      	mov	r0, r4
 800aaae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aab4:	4718      	bx	r3
	...

0800aab8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4b0e      	ldr	r3, [pc, #56]	@ (800aaf4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800aabc:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	4604      	mov	r4, r0
 800aac4:	d214      	bcs.n	800aaf0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800aac6:	6803      	ldr	r3, [r0, #0]
 800aac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaca:	4798      	blx	r3
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	4605      	mov	r5, r0
 800aad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aad2:	4620      	mov	r0, r4
 800aad4:	4798      	blx	r3
 800aad6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800aada:	b22d      	sxth	r5, r5
 800aadc:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800aae0:	4601      	mov	r1, r0
 800aae2:	bf06      	itte	eq
 800aae4:	4602      	moveq	r2, r0
 800aae6:	4629      	moveq	r1, r5
 800aae8:	462a      	movne	r2, r5
 800aaea:	4620      	mov	r0, r4
 800aaec:	f7ff ffd6 	bl	800aa9c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800aaf0:	bd38      	pop	{r3, r4, r5, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20015484 	.word	0x20015484

0800aaf8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800aaf8:	b530      	push	{r4, r5, lr}
 800aafa:	888b      	ldrh	r3, [r1, #4]
 800aafc:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800aafe:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800ab02:	b085      	sub	sp, #20
 800ab04:	4604      	mov	r4, r0
 800ab06:	b923      	cbnz	r3, 800ab12 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800ab08:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ab0c:	b90b      	cbnz	r3, 800ab12 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800ab0e:	f7ff ffd3 	bl	800aab8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	466d      	mov	r5, sp
 800ab16:	4621      	mov	r1, r4
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab1e:	4798      	blx	r3
 800ab20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab24:	343c      	adds	r4, #60	@ 0x3c
 800ab26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab2a:	b005      	add	sp, #20
 800ab2c:	bd30      	pop	{r4, r5, pc}

0800ab2e <_ZNK8touchgfx3Box12getSolidRectEv>:
 800ab2e:	2300      	movs	r3, #0
 800ab30:	8083      	strh	r3, [r0, #4]
 800ab32:	80c3      	strh	r3, [r0, #6]
 800ab34:	8003      	strh	r3, [r0, #0]
 800ab36:	8043      	strh	r3, [r0, #2]
 800ab38:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800ab3c:	2bff      	cmp	r3, #255	@ 0xff
 800ab3e:	bf01      	itttt	eq
 800ab40:	890b      	ldrheq	r3, [r1, #8]
 800ab42:	8083      	strheq	r3, [r0, #4]
 800ab44:	894b      	ldrheq	r3, [r1, #10]
 800ab46:	80c3      	strheq	r3, [r0, #6]
 800ab48:	4770      	bx	lr
	...

0800ab4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800ab4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab4e:	4604      	mov	r4, r0
 800ab50:	6808      	ldr	r0, [r1, #0]
 800ab52:	6849      	ldr	r1, [r1, #4]
 800ab54:	466b      	mov	r3, sp
 800ab56:	c303      	stmia	r3!, {r0, r1}
 800ab58:	6823      	ldr	r3, [r4, #0]
 800ab5a:	4669      	mov	r1, sp
 800ab5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4798      	blx	r3
 800ab62:	4b08      	ldr	r3, [pc, #32]	@ (800ab84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ab6a:	b10a      	cbz	r2, 800ab70 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800ab6c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ab6e:	b900      	cbnz	r0, 800ab72 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800ab70:	6898      	ldr	r0, [r3, #8]
 800ab72:	6803      	ldr	r3, [r0, #0]
 800ab74:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ab76:	6a1d      	ldr	r5, [r3, #32]
 800ab78:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800ab7c:	4669      	mov	r1, sp
 800ab7e:	47a8      	blx	r5
 800ab80:	b003      	add	sp, #12
 800ab82:	bd30      	pop	{r4, r5, pc}
 800ab84:	20015430 	.word	0x20015430

0800ab88 <_ZN8touchgfx3BoxD1Ev>:
 800ab88:	4770      	bx	lr

0800ab8a <_ZN8touchgfx3BoxD0Ev>:
 800ab8a:	b510      	push	{r4, lr}
 800ab8c:	212c      	movs	r1, #44	@ 0x2c
 800ab8e:	4604      	mov	r4, r0
 800ab90:	f007 fe9e 	bl	80128d0 <_ZdlPvj>
 800ab94:	4620      	mov	r0, r4
 800ab96:	bd10      	pop	{r4, pc}

0800ab98 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800ab98:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800ab9c:	b12a      	cbz	r2, 800abaa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800ab9e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800aba2:	b112      	cbz	r2, 800abaa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800aba4:	6803      	ldr	r3, [r0, #0]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	4718      	bx	r3
 800abaa:	4770      	bx	lr

0800abac <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800abac:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800abb0:	4770      	bx	lr

0800abb2 <_ZN8touchgfx6ButtonD1Ev>:
 800abb2:	4770      	bx	lr

0800abb4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	880b      	ldrh	r3, [r1, #0]
 800abb8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800abba:	4605      	mov	r5, r0
 800abbc:	8813      	ldrh	r3, [r2, #0]
 800abbe:	f825 3f30 	strh.w	r3, [r5, #48]!
 800abc2:	4604      	mov	r4, r0
 800abc4:	4628      	mov	r0, r5
 800abc6:	f005 f805 	bl	800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800abca:	4606      	mov	r6, r0
 800abcc:	4628      	mov	r0, r5
 800abce:	f005 f835 	bl	800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	4605      	mov	r5, r0
 800abd6:	4631      	mov	r1, r6
 800abd8:	4620      	mov	r0, r4
 800abda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abdc:	4798      	blx	r3
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	4629      	mov	r1, r5
 800abe2:	4620      	mov	r0, r4
 800abe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abea:	4718      	bx	r3

0800abec <_ZN8touchgfx6ButtonD0Ev>:
 800abec:	b510      	push	{r4, lr}
 800abee:	2134      	movs	r1, #52	@ 0x34
 800abf0:	4604      	mov	r4, r0
 800abf2:	f007 fe6d 	bl	80128d0 <_ZdlPvj>
 800abf6:	4620      	mov	r0, r4
 800abf8:	bd10      	pop	{r4, pc}

0800abfa <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800abfa:	b510      	push	{r4, lr}
 800abfc:	4604      	mov	r4, r0
 800abfe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800ac00:	b150      	cbz	r0, 800ac18 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ac02:	6803      	ldr	r3, [r0, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	4798      	blx	r3
 800ac08:	b130      	cbz	r0, 800ac18 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ac0a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ac0c:	6803      	ldr	r3, [r0, #0]
 800ac0e:	4621      	mov	r1, r4
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac16:	4718      	bx	r3
 800ac18:	bd10      	pop	{r4, pc}

0800ac1a <_ZNK8touchgfx6Button12getSolidRectEv>:
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800ac20:	2bff      	cmp	r3, #255	@ 0xff
 800ac22:	4604      	mov	r4, r0
 800ac24:	d006      	beq.n	800ac34 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800ac26:	2300      	movs	r3, #0
 800ac28:	8003      	strh	r3, [r0, #0]
 800ac2a:	8043      	strh	r3, [r0, #2]
 800ac2c:	8083      	strh	r3, [r0, #4]
 800ac2e:	80c3      	strh	r3, [r0, #6]
 800ac30:	4620      	mov	r0, r4
 800ac32:	bd10      	pop	{r4, pc}
 800ac34:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800ac38:	b11b      	cbz	r3, 800ac42 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800ac3a:	3130      	adds	r1, #48	@ 0x30
 800ac3c:	f005 f832 	bl	800fca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ac40:	e7f6      	b.n	800ac30 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800ac42:	312e      	adds	r1, #46	@ 0x2e
 800ac44:	e7fa      	b.n	800ac3c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800ac48 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800ac48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ac50:	b08a      	sub	sp, #40	@ 0x28
 800ac52:	4604      	mov	r4, r0
 800ac54:	4688      	mov	r8, r1
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d066      	beq.n	800ad28 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800ac5a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ac5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac60:	a805      	add	r0, sp, #20
 800ac62:	f004 ffb7 	bl	800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ac66:	4607      	mov	r7, r0
 800ac68:	a805      	add	r0, sp, #20
 800ac6a:	f004 ffe7 	bl	800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ac6e:	f9b8 6000 	ldrsh.w	r6, [r8]
 800ac72:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800ac76:	4432      	add	r2, r6
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	fa0f fc82 	sxth.w	ip, r2
 800ac80:	459c      	cmp	ip, r3
 800ac82:	9306      	str	r3, [sp, #24]
 800ac84:	dd52      	ble.n	800ad2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ac86:	42b7      	cmp	r7, r6
 800ac88:	dd50      	ble.n	800ad2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ac8a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800ac8e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ac92:	442b      	add	r3, r5
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	b219      	sxth	r1, r3
 800ac98:	2900      	cmp	r1, #0
 800ac9a:	dd47      	ble.n	800ad2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ac9c:	42a8      	cmp	r0, r5
 800ac9e:	dd45      	ble.n	800ad2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800aca0:	4567      	cmp	r7, ip
 800aca2:	bfb8      	it	lt
 800aca4:	b2ba      	uxthlt	r2, r7
 800aca6:	4288      	cmp	r0, r1
 800aca8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800acac:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800acb0:	bfb8      	it	lt
 800acb2:	b283      	uxthlt	r3, r0
 800acb4:	1b92      	subs	r2, r2, r6
 800acb6:	1b5b      	subs	r3, r3, r5
 800acb8:	f8ad 201c 	strh.w	r2, [sp, #28]
 800acbc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800acc0:	f8ad 6018 	strh.w	r6, [sp, #24]
 800acc4:	f8ad 501a 	strh.w	r5, [sp, #26]
 800acc8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800accc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d026      	beq.n	800ad22 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800acd4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	dd22      	ble.n	800ad22 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800acdc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	dd1e      	ble.n	800ad22 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800ace4:	2300      	movs	r3, #0
 800ace6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	a908      	add	r1, sp, #32
 800acee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf0:	4620      	mov	r0, r4
 800acf2:	4798      	blx	r3
 800acf4:	4b0f      	ldr	r3, [pc, #60]	@ (800ad34 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800acfc:	b10a      	cbz	r2, 800ad02 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800acfe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ad00:	b900      	cbnz	r0, 800ad04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800ad02:	6898      	ldr	r0, [r3, #8]
 800ad04:	6801      	ldr	r1, [r0, #0]
 800ad06:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800ad0a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800ad0e:	2501      	movs	r5, #1
 800ad10:	9502      	str	r5, [sp, #8]
 800ad12:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800ad16:	9401      	str	r4, [sp, #4]
 800ad18:	ac06      	add	r4, sp, #24
 800ad1a:	9400      	str	r4, [sp, #0]
 800ad1c:	688c      	ldr	r4, [r1, #8]
 800ad1e:	a905      	add	r1, sp, #20
 800ad20:	47a0      	blx	r4
 800ad22:	b00a      	add	sp, #40	@ 0x28
 800ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad28:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800ad2a:	e797      	b.n	800ac5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9307      	str	r3, [sp, #28]
 800ad30:	e7ca      	b.n	800acc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800ad32:	bf00      	nop
 800ad34:	20015430 	.word	0x20015430

0800ad38 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800ad38:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800ad3c:	b12a      	cbz	r2, 800ad4a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800ad3e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800ad42:	b112      	cbz	r2, 800ad4a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800ad44:	6803      	ldr	r3, [r0, #0]
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	4718      	bx	r3
 800ad4a:	4770      	bx	lr

0800ad4c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800ad4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad50:	4b2f      	ldr	r3, [pc, #188]	@ (800ae10 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800ad52:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	4293      	cmp	r3, r2
 800ad58:	b08d      	sub	sp, #52	@ 0x34
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	460f      	mov	r7, r1
 800ad5e:	d954      	bls.n	800ae0a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800ad60:	4b2c      	ldr	r3, [pc, #176]	@ (800ae14 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800ad62:	6819      	ldr	r1, [r3, #0]
 800ad64:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800ad68:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800ad6c:	4a2a      	ldr	r2, [pc, #168]	@ (800ae18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800ad6e:	6812      	ldr	r2, [r2, #0]
 800ad70:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800ad74:	2900      	cmp	r1, #0
 800ad76:	d048      	beq.n	800ae0a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800ad78:	785a      	ldrb	r2, [r3, #1]
 800ad7a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800ad7e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800ad82:	4b26      	ldr	r3, [pc, #152]	@ (800ae1c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800ad84:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800ad88:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800ad8c:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800ad90:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800ad92:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800ad96:	9107      	str	r1, [sp, #28]
 800ad98:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800ad9c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800ada0:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	f88d 8020 	strb.w	r8, [sp, #32]
 800adaa:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800adae:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800adb2:	9609      	str	r6, [sp, #36]	@ 0x24
 800adb4:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800adb8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800adbc:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800adc0:	b10b      	cbz	r3, 800adc6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800adc2:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800adc4:	b905      	cbnz	r5, 800adc8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800adc6:	6895      	ldr	r5, [r2, #8]
 800adc8:	ae05      	add	r6, sp, #20
 800adca:	4621      	mov	r1, r4
 800adcc:	4630      	mov	r0, r6
 800adce:	f002 ff5b 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800add2:	4b13      	ldr	r3, [pc, #76]	@ (800ae20 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800add4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	f7f8 feba 	bl	8003b50 <_ZNK8touchgfx5Texts7getTextEt>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	4680      	mov	r8, r0
 800ade0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ade2:	4620      	mov	r0, r4
 800ade4:	4798      	blx	r3
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	4681      	mov	r9, r0
 800adea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adee:	4620      	mov	r0, r4
 800adf0:	4798      	blx	r3
 800adf2:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800adf6:	ab07      	add	r3, sp, #28
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	f8cd 8004 	str.w	r8, [sp, #4]
 800adfe:	463b      	mov	r3, r7
 800ae00:	e896 0006 	ldmia.w	r6, {r1, r2}
 800ae04:	4628      	mov	r0, r5
 800ae06:	f7f8 fe55 	bl	8003ab4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800ae0a:	b00d      	add	sp, #52	@ 0x34
 800ae0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae10:	20015484 	.word	0x20015484
 800ae14:	20015480 	.word	0x20015480
 800ae18:	20015488 	.word	0x20015488
 800ae1c:	20015430 	.word	0x20015430
 800ae20:	2001548c 	.word	0x2001548c

0800ae24 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800ae24:	4770      	bx	lr

0800ae26 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800ae26:	b510      	push	{r4, lr}
 800ae28:	2134      	movs	r1, #52	@ 0x34
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	f007 fd50 	bl	80128d0 <_ZdlPvj>
 800ae30:	4620      	mov	r0, r4
 800ae32:	bd10      	pop	{r4, pc}

0800ae34 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	4604      	mov	r4, r0
 800ae3a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ae3c:	8962      	ldrh	r2, [r4, #10]
 800ae3e:	b218      	sxth	r0, r3
 800ae40:	460e      	mov	r6, r1
 800ae42:	005b      	lsls	r3, r3, #1
 800ae44:	8921      	ldrh	r1, [r4, #8]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	1ac9      	subs	r1, r1, r3
 800ae4a:	b08e      	sub	sp, #56	@ 0x38
 800ae4c:	b209      	sxth	r1, r1
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	b21b      	sxth	r3, r3
 800ae52:	2900      	cmp	r1, #0
 800ae54:	f8ad 0000 	strh.w	r0, [sp]
 800ae58:	f8ad 0002 	strh.w	r0, [sp, #2]
 800ae5c:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ae60:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ae64:	dd5e      	ble.n	800af24 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	dd5c      	ble.n	800af24 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800ae6a:	6830      	ldr	r0, [r6, #0]
 800ae6c:	6871      	ldr	r1, [r6, #4]
 800ae6e:	ab02      	add	r3, sp, #8
 800ae70:	c303      	stmia	r3!, {r0, r1}
 800ae72:	4669      	mov	r1, sp
 800ae74:	a802      	add	r0, sp, #8
 800ae76:	f7fe fab7 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	a902      	add	r1, sp, #8
 800ae7e:	f7ff fe65 	bl	800ab4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800ae82:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d05f      	beq.n	800af48 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800ae88:	8963      	ldrh	r3, [r4, #10]
 800ae8a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800ae8e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ae92:	1a1f      	subs	r7, r3, r0
 800ae94:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800ae98:	b202      	sxth	r2, r0
 800ae9a:	2500      	movs	r5, #0
 800ae9c:	b21b      	sxth	r3, r3
 800ae9e:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 800aea2:	1a09      	subs	r1, r1, r0
 800aea4:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800aea8:	9506      	str	r5, [sp, #24]
 800aeaa:	f8ad 201e 	strh.w	r2, [sp, #30]
 800aeae:	f8ad 5020 	strh.w	r5, [sp, #32]
 800aeb2:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 800aeb6:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 800aeba:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800aebe:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800aec2:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800aec6:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 800aeca:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800aece:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800aed2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800aed6:	af04      	add	r7, sp, #16
 800aed8:	ab06      	add	r3, sp, #24
 800aeda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aede:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aee2:	e887 0003 	stmia.w	r7, {r0, r1}
 800aee6:	4631      	mov	r1, r6
 800aee8:	4638      	mov	r0, r7
 800aeea:	f7fe fa7d 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800aeee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	dd12      	ble.n	800af1c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800aef6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	dd0e      	ble.n	800af1c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	4639      	mov	r1, r7
 800af02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af04:	4620      	mov	r0, r4
 800af06:	4798      	blx	r3
 800af08:	f7fe fd44 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 800af0c:	6803      	ldr	r3, [r0, #0]
 800af0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800af10:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800af14:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800af18:	4639      	mov	r1, r7
 800af1a:	47c0      	blx	r8
 800af1c:	3501      	adds	r5, #1
 800af1e:	2d04      	cmp	r5, #4
 800af20:	d1da      	bne.n	800aed8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800af22:	e011      	b.n	800af48 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800af24:	6830      	ldr	r0, [r6, #0]
 800af26:	6871      	ldr	r1, [r6, #4]
 800af28:	ab06      	add	r3, sp, #24
 800af2a:	c303      	stmia	r3!, {r0, r1}
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	a906      	add	r1, sp, #24
 800af30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af32:	4620      	mov	r0, r4
 800af34:	4798      	blx	r3
 800af36:	f7fe fd2d 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 800af3a:	6803      	ldr	r3, [r0, #0]
 800af3c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800af3e:	6a1d      	ldr	r5, [r3, #32]
 800af40:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800af44:	a906      	add	r1, sp, #24
 800af46:	47a8      	blx	r5
 800af48:	b00e      	add	sp, #56	@ 0x38
 800af4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af4e <_ZN8touchgfx5ImageD1Ev>:
 800af4e:	4770      	bx	lr

0800af50 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800af50:	b570      	push	{r4, r5, r6, lr}
 800af52:	880b      	ldrh	r3, [r1, #0]
 800af54:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800af56:	4604      	mov	r4, r0
 800af58:	4608      	mov	r0, r1
 800af5a:	460d      	mov	r5, r1
 800af5c:	f004 fe3a 	bl	800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800af60:	4606      	mov	r6, r0
 800af62:	4628      	mov	r0, r5
 800af64:	f004 fe6a 	bl	800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	4605      	mov	r5, r0
 800af6c:	4631      	mov	r1, r6
 800af6e:	4620      	mov	r0, r4
 800af70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af72:	4798      	blx	r3
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	4629      	mov	r1, r5
 800af78:	4620      	mov	r0, r4
 800af7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af80:	4718      	bx	r3

0800af82 <_ZN8touchgfx5ImageD0Ev>:
 800af82:	b510      	push	{r4, lr}
 800af84:	212c      	movs	r1, #44	@ 0x2c
 800af86:	4604      	mov	r4, r0
 800af88:	f007 fca2 	bl	80128d0 <_ZdlPvj>
 800af8c:	4620      	mov	r0, r4
 800af8e:	bd10      	pop	{r4, pc}

0800af90 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800af90:	b510      	push	{r4, lr}
 800af92:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800af96:	2bff      	cmp	r3, #255	@ 0xff
 800af98:	4604      	mov	r4, r0
 800af9a:	d006      	beq.n	800afaa <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800af9c:	2300      	movs	r3, #0
 800af9e:	8003      	strh	r3, [r0, #0]
 800afa0:	8043      	strh	r3, [r0, #2]
 800afa2:	8083      	strh	r3, [r0, #4]
 800afa4:	80c3      	strh	r3, [r0, #6]
 800afa6:	4620      	mov	r0, r4
 800afa8:	bd10      	pop	{r4, pc}
 800afaa:	3126      	adds	r1, #38	@ 0x26
 800afac:	f004 fe7a 	bl	800fca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800afb0:	e7f9      	b.n	800afa6 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800afb2 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800afb2:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800afb6:	b12a      	cbz	r2, 800afc4 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800afb8:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800afbc:	b112      	cbz	r2, 800afc4 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800afbe:	6803      	ldr	r3, [r0, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	4718      	bx	r3
 800afc4:	4770      	bx	lr
	...

0800afc8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800afc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afcc:	4604      	mov	r4, r0
 800afce:	b088      	sub	sp, #32
 800afd0:	f854 3b26 	ldr.w	r3, [r4], #38
 800afd4:	2500      	movs	r5, #0
 800afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd8:	460f      	mov	r7, r1
 800afda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800afde:	a904      	add	r1, sp, #16
 800afe0:	4606      	mov	r6, r0
 800afe2:	4798      	blx	r3
 800afe4:	4620      	mov	r0, r4
 800afe6:	f004 fdf5 	bl	800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800afea:	4680      	mov	r8, r0
 800afec:	4620      	mov	r0, r4
 800afee:	f004 fe25 	bl	800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800aff2:	9506      	str	r5, [sp, #24]
 800aff4:	ad06      	add	r5, sp, #24
 800aff6:	f8ad 001e 	strh.w	r0, [sp, #30]
 800affa:	4639      	mov	r1, r7
 800affc:	4628      	mov	r0, r5
 800affe:	f8ad 801c 	strh.w	r8, [sp, #28]
 800b002:	f7fe f9f1 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800b006:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dd19      	ble.n	800b042 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b00e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800b012:	2b00      	cmp	r3, #0
 800b014:	dd15      	ble.n	800b042 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b016:	4b0c      	ldr	r3, [pc, #48]	@ (800b048 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b01e:	b10a      	cbz	r2, 800b024 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800b020:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b022:	b900      	cbnz	r0, 800b026 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800b024:	6898      	ldr	r0, [r3, #8]
 800b026:	6801      	ldr	r1, [r0, #0]
 800b028:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800b02c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800b030:	2701      	movs	r7, #1
 800b032:	9702      	str	r7, [sp, #8]
 800b034:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800b038:	e9cd 5600 	strd	r5, r6, [sp]
 800b03c:	688d      	ldr	r5, [r1, #8]
 800b03e:	4621      	mov	r1, r4
 800b040:	47a8      	blx	r5
 800b042:	b008      	add	sp, #32
 800b044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b048:	20015430 	.word	0x20015430

0800b04c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800b04c:	b510      	push	{r4, lr}
 800b04e:	6803      	ldr	r3, [r0, #0]
 800b050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b052:	460c      	mov	r4, r1
 800b054:	4798      	blx	r3
 800b056:	1b03      	subs	r3, r0, r4
 800b058:	4258      	negs	r0, r3
 800b05a:	4158      	adcs	r0, r3
 800b05c:	bd10      	pop	{r4, pc}
	...

0800b060 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800b060:	4b01      	ldr	r3, [pc, #4]	@ (800b068 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800b062:	6019      	str	r1, [r3, #0]
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	20015438 	.word	0x20015438

0800b06c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b070:	4696      	mov	lr, r2
 800b072:	4605      	mov	r5, r0
 800b074:	4614      	mov	r4, r2
 800b076:	460e      	mov	r6, r1
 800b078:	461f      	mov	r7, r3
 800b07a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b07e:	b097      	sub	sp, #92	@ 0x5c
 800b080:	f10d 0c1c 	add.w	ip, sp, #28
 800b084:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b088:	f8de 3000 	ldr.w	r3, [lr]
 800b08c:	f8cc 3000 	str.w	r3, [ip]
 800b090:	f104 0e14 	add.w	lr, r4, #20
 800b094:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b098:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b09c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0a0:	f8de 3000 	ldr.w	r3, [lr]
 800b0a4:	f8cc 3000 	str.w	r3, [ip]
 800b0a8:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b0ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b0b0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b0b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0b8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800b0bc:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800b0c0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800b0c4:	f8de 3000 	ldr.w	r3, [lr]
 800b0c8:	f8cc 3000 	str.w	r3, [ip]
 800b0cc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b0ce:	682b      	ldr	r3, [r5, #0]
 800b0d0:	9201      	str	r2, [sp, #4]
 800b0d2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b0d6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b0d8:	9200      	str	r2, [sp, #0]
 800b0da:	f8cd 8008 	str.w	r8, [sp, #8]
 800b0de:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800b0e2:	aa07      	add	r2, sp, #28
 800b0e4:	463b      	mov	r3, r7
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	47d8      	blx	fp
 800b0ec:	46a6      	mov	lr, r4
 800b0ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b0f2:	f10d 0c1c 	add.w	ip, sp, #28
 800b0f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0fa:	f8de 3000 	ldr.w	r3, [lr]
 800b0fe:	f8cc 3000 	str.w	r3, [ip]
 800b102:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b106:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b10a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b10e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b112:	343c      	adds	r4, #60	@ 0x3c
 800b114:	f8de 3000 	ldr.w	r3, [lr]
 800b118:	f8cc 3000 	str.w	r3, [ip]
 800b11c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b11e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b122:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	f8cc 3000 	str.w	r3, [ip]
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b132:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b134:	9201      	str	r2, [sp, #4]
 800b136:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b138:	9200      	str	r2, [sp, #0]
 800b13a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b13e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800b140:	aa07      	add	r2, sp, #28
 800b142:	463b      	mov	r3, r7
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47a0      	blx	r4
 800b14a:	b017      	add	sp, #92	@ 0x5c
 800b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b150 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	b08d      	sub	sp, #52	@ 0x34
 800b156:	4688      	mov	r8, r1
 800b158:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b15a:	f8d3 c000 	ldr.w	ip, [r3]
 800b15e:	680f      	ldr	r7, [r1, #0]
 800b160:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800b164:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800b168:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800b16c:	edd3 6a07 	vldr	s13, [r3, #28]
 800b170:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b172:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800b176:	f9b1 9000 	ldrsh.w	r9, [r1]
 800b17a:	f9ba 1000 	ldrsh.w	r1, [sl]
 800b17e:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800b182:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800b186:	eba7 070c 	sub.w	r7, r7, ip
 800b18a:	42bc      	cmp	r4, r7
 800b18c:	bfa8      	it	ge
 800b18e:	463c      	movge	r4, r7
 800b190:	ee07 4a90 	vmov	s15, r4
 800b194:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800b198:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800b19c:	ee25 4a04 	vmul.f32	s8, s10, s8
 800b1a0:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b1a4:	ee25 5a27 	vmul.f32	s10, s10, s15
 800b1a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b1ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b1b0:	eb09 0e0c 	add.w	lr, r9, ip
 800b1b4:	4571      	cmp	r1, lr
 800b1b6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800b1ba:	ee32 1a05 	vadd.f32	s2, s4, s10
 800b1be:	ee36 0a84 	vadd.f32	s0, s13, s8
 800b1c2:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b1c6:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b1ca:	f340 808d 	ble.w	800b2e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800b1ce:	eba1 060e 	sub.w	r6, r1, lr
 800b1d2:	fb96 f5f4 	sdiv	r5, r6, r4
 800b1d6:	ee07 5a10 	vmov	s14, r5
 800b1da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	fb04 6615 	mls	r6, r4, r5, r6
 800b1e4:	eea7 0a04 	vfma.f32	s0, s14, s8
 800b1e8:	eee7 0a24 	vfma.f32	s1, s14, s9
 800b1ec:	eea7 1a05 	vfma.f32	s2, s14, s10
 800b1f0:	dd13      	ble.n	800b21a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800b1f2:	ee70 6a44 	vsub.f32	s13, s0, s8
 800b1f6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800b1fa:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b202:	bf18      	it	ne
 800b204:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800b208:	ee31 2a45 	vsub.f32	s4, s2, s10
 800b20c:	bf08      	it	eq
 800b20e:	eeb0 7a67 	vmoveq.f32	s14, s15
 800b212:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b216:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b21a:	fb05 f204 	mul.w	r2, r5, r4
 800b21e:	1abf      	subs	r7, r7, r2
 800b220:	4494      	add	ip, r2
 800b222:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800b226:	4411      	add	r1, r2
 800b228:	eb09 020c 	add.w	r2, r9, ip
 800b22c:	443a      	add	r2, r7
 800b22e:	b209      	sxth	r1, r1
 800b230:	428a      	cmp	r2, r1
 800b232:	bfc4      	itt	gt
 800b234:	eba1 0209 	subgt.w	r2, r1, r9
 800b238:	eba2 070c 	subgt.w	r7, r2, ip
 800b23c:	2f00      	cmp	r7, #0
 800b23e:	dd50      	ble.n	800b2e2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800b240:	fb97 f1f4 	sdiv	r1, r7, r4
 800b244:	fb04 7211 	mls	r2, r4, r1, r7
 800b248:	b90a      	cbnz	r2, 800b24e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800b24a:	3901      	subs	r1, #1
 800b24c:	4622      	mov	r2, r4
 800b24e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800b252:	6840      	ldr	r0, [r0, #4]
 800b254:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b256:	f8d0 a000 	ldr.w	sl, [r0]
 800b25a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b25c:	9008      	str	r0, [sp, #32]
 800b25e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800b262:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b264:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b268:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b270:	445b      	add	r3, fp
 800b272:	eef0 6a42 	vmov.f32	s13, s4
 800b276:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800b27a:	ee21 3a23 	vmul.f32	s6, s2, s7
 800b27e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800b282:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800b286:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b28a:	9307      	str	r3, [sp, #28]
 800b28c:	ee17 7a90 	vmov	r7, s15
 800b290:	ee73 7a42 	vsub.f32	s15, s6, s4
 800b294:	eeb0 7a61 	vmov.f32	s14, s3
 800b298:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b29c:	ee16 3a90 	vmov	r3, s13
 800b2a0:	fb97 f7f4 	sdiv	r7, r7, r4
 800b2a4:	ee17 ca90 	vmov	ip, s15
 800b2a8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800b2ac:	fb9c fcf4 	sdiv	ip, ip, r4
 800b2b0:	fb0c 3306 	mla	r3, ip, r6, r3
 800b2b4:	9302      	str	r3, [sp, #8]
 800b2b6:	ee17 3a10 	vmov	r3, s14
 800b2ba:	44b6      	add	lr, r6
 800b2bc:	fb04 e505 	mla	r5, r4, r5, lr
 800b2c0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800b2c4:	fb07 3706 	mla	r7, r7, r6, r3
 800b2c8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800b2cc:	e9cd 4700 	strd	r4, r7, [sp]
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	bfcc      	ite	gt
 800b2d4:	46a1      	movgt	r9, r4
 800b2d6:	4691      	movle	r9, r2
 800b2d8:	eba9 0306 	sub.w	r3, r9, r6
 800b2dc:	f8da 4008 	ldr.w	r4, [sl, #8]
 800b2e0:	47a0      	blx	r4
 800b2e2:	b00d      	add	sp, #52	@ 0x34
 800b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e8:	2500      	movs	r5, #0
 800b2ea:	462e      	mov	r6, r5
 800b2ec:	e799      	b.n	800b222 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800b2f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	b0db      	sub	sp, #364	@ 0x16c
 800b2f6:	461d      	mov	r5, r3
 800b2f8:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800b2fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2fe:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800b302:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b304:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800b308:	9310      	str	r3, [sp, #64]	@ 0x40
 800b30a:	6803      	ldr	r3, [r0, #0]
 800b30c:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b30e:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800b310:	9009      	str	r0, [sp, #36]	@ 0x24
 800b312:	4614      	mov	r4, r2
 800b314:	4629      	mov	r1, r5
 800b316:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b31a:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800b31e:	47b8      	blx	r7
 800b320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b322:	6058      	str	r0, [r3, #4]
 800b324:	2800      	cmp	r0, #0
 800b326:	f000 83a1 	beq.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b32a:	682b      	ldr	r3, [r5, #0]
 800b32c:	9314      	str	r3, [sp, #80]	@ 0x50
 800b32e:	686b      	ldr	r3, [r5, #4]
 800b330:	9315      	str	r3, [sp, #84]	@ 0x54
 800b332:	4bc4      	ldr	r3, [pc, #784]	@ (800b644 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800b334:	ed94 7a02 	vldr	s14, [r4, #8]
 800b338:	7819      	ldrb	r1, [r3, #0]
 800b33a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b33e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800b342:	2900      	cmp	r1, #0
 800b344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b348:	bf16      	itet	ne
 800b34a:	4619      	movne	r1, r3
 800b34c:	4611      	moveq	r1, r2
 800b34e:	4613      	movne	r3, r2
 800b350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b354:	9116      	str	r1, [sp, #88]	@ 0x58
 800b356:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800b35a:	f240 8387 	bls.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b35e:	ed94 7a07 	vldr	s14, [r4, #28]
 800b362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b36a:	f240 837f 	bls.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b36e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800b372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37a:	f240 8377 	bls.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	4bb1      	ldr	r3, [pc, #708]	@ (800b648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800b382:	429a      	cmp	r2, r3
 800b384:	f2c0 8372 	blt.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b388:	49b0      	ldr	r1, [pc, #704]	@ (800b64c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800b38a:	6963      	ldr	r3, [r4, #20]
 800b38c:	428a      	cmp	r2, r1
 800b38e:	f300 836d 	bgt.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b392:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b396:	48ae      	ldr	r0, [pc, #696]	@ (800b650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800b398:	33ff      	adds	r3, #255	@ 0xff
 800b39a:	4283      	cmp	r3, r0
 800b39c:	f200 8366 	bhi.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b3a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b3a2:	4dac      	ldr	r5, [pc, #688]	@ (800b654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800b3a4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b3a8:	33ff      	adds	r3, #255	@ 0xff
 800b3aa:	42ab      	cmp	r3, r5
 800b3ac:	f200 835e 	bhi.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b3b0:	6862      	ldr	r2, [r4, #4]
 800b3b2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800b3b6:	33ff      	adds	r3, #255	@ 0xff
 800b3b8:	4283      	cmp	r3, r0
 800b3ba:	f200 8357 	bhi.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b3be:	69a1      	ldr	r1, [r4, #24]
 800b3c0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800b3c4:	33ff      	adds	r3, #255	@ 0xff
 800b3c6:	4283      	cmp	r3, r0
 800b3c8:	f200 8350 	bhi.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b3cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b3ce:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800b3d2:	30ff      	adds	r0, #255	@ 0xff
 800b3d4:	42a8      	cmp	r0, r5
 800b3d6:	f200 8349 	bhi.w	800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b3da:	428a      	cmp	r2, r1
 800b3dc:	f280 8110 	bge.w	800b600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	f300 8119 	bgt.w	800b618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800b3e6:	4299      	cmp	r1, r3
 800b3e8:	f280 811d 	bge.w	800b626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800b3ec:	2502      	movs	r5, #2
 800b3ee:	2701      	movs	r7, #1
 800b3f0:	46a9      	mov	r9, r5
 800b3f2:	46b8      	mov	r8, r7
 800b3f4:	f04f 0a00 	mov.w	sl, #0
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	a849      	add	r0, sp, #292	@ 0x124
 800b3fc:	f003 fda6 	bl	800ef4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800b400:	4622      	mov	r2, r4
 800b402:	4653      	mov	r3, sl
 800b404:	a949      	add	r1, sp, #292	@ 0x124
 800b406:	f8cd 9000 	str.w	r9, [sp]
 800b40a:	a819      	add	r0, sp, #100	@ 0x64
 800b40c:	f003 fece 	bl	800f1ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b410:	4622      	mov	r2, r4
 800b412:	4653      	mov	r3, sl
 800b414:	a949      	add	r1, sp, #292	@ 0x124
 800b416:	f8cd 8000 	str.w	r8, [sp]
 800b41a:	a829      	add	r0, sp, #164	@ 0xa4
 800b41c:	f003 fec6 	bl	800f1ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b420:	4643      	mov	r3, r8
 800b422:	4622      	mov	r2, r4
 800b424:	a949      	add	r1, sp, #292	@ 0x124
 800b426:	f8cd 9000 	str.w	r9, [sp]
 800b42a:	a839      	add	r0, sp, #228	@ 0xe4
 800b42c:	f003 febe 	bl	800f1ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b430:	42af      	cmp	r7, r5
 800b432:	bfb5      	itete	lt
 800b434:	2300      	movlt	r3, #0
 800b436:	2301      	movge	r3, #1
 800b438:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800b43a:	930e      	strge	r3, [sp, #56]	@ 0x38
 800b43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b43e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b442:	af12      	add	r7, sp, #72	@ 0x48
 800b444:	bfb9      	ittee	lt
 800b446:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800b448:	ac19      	addlt	r4, sp, #100	@ 0x64
 800b44a:	ad19      	addge	r5, sp, #100	@ 0x64
 800b44c:	ac29      	addge	r4, sp, #164	@ 0xa4
 800b44e:	e887 0003 	stmia.w	r7, {r0, r1}
 800b452:	b928      	cbnz	r0, 800b460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800b454:	4b80      	ldr	r3, [pc, #512]	@ (800b658 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800b456:	6818      	ldr	r0, [r3, #0]
 800b458:	6803      	ldr	r3, [r0, #0]
 800b45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45c:	4798      	blx	r3
 800b45e:	6038      	str	r0, [r7, #0]
 800b460:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b462:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b46a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b46c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b46e:	6963      	ldr	r3, [r4, #20]
 800b470:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800b472:	440b      	add	r3, r1
 800b474:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b478:	4408      	add	r0, r1
 800b47a:	b200      	sxth	r0, r0
 800b47c:	4283      	cmp	r3, r0
 800b47e:	900d      	str	r0, [sp, #52]	@ 0x34
 800b480:	f280 80dd 	bge.w	800b63e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800b484:	428b      	cmp	r3, r1
 800b486:	da08      	bge.n	800b49a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b488:	2a00      	cmp	r2, #0
 800b48a:	dd06      	ble.n	800b49a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b48c:	1acb      	subs	r3, r1, r3
 800b48e:	429a      	cmp	r2, r3
 800b490:	f2c0 80e4 	blt.w	800b65c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800b494:	2b00      	cmp	r3, #0
 800b496:	f300 80e2 	bgt.w	800b65e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800b49a:	6967      	ldr	r7, [r4, #20]
 800b49c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b49e:	443b      	add	r3, r7
 800b4a0:	461f      	mov	r7, r3
 800b4a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4a4:	1bdf      	subs	r7, r3, r7
 800b4a6:	4297      	cmp	r7, r2
 800b4a8:	bfa8      	it	ge
 800b4aa:	4617      	movge	r7, r2
 800b4ac:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800b4b0:	2f00      	cmp	r7, #0
 800b4b2:	f340 8166 	ble.w	800b782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800b4b6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b4b8:	6829      	ldr	r1, [r5, #0]
 800b4ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b4be:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b4c2:	6820      	ldr	r0, [r4, #0]
 800b4c4:	4411      	add	r1, r2
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	dd1a      	ble.n	800b500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800b4ca:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b4ce:	440b      	add	r3, r1
 800b4d0:	4402      	add	r2, r0
 800b4d2:	b21b      	sxth	r3, r3
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	dc13      	bgt.n	800b500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800b4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4da:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	9206      	str	r2, [sp, #24]
 800b4e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4e2:	9205      	str	r2, [sp, #20]
 800b4e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4e6:	9500      	str	r5, [sp, #0]
 800b4e8:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b4ec:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800b4ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4f0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b4f4:	a912      	add	r1, sp, #72	@ 0x48
 800b4f6:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800b4fa:	aa49      	add	r2, sp, #292	@ 0x124
 800b4fc:	4623      	mov	r3, r4
 800b4fe:	47c8      	blx	r9
 800b500:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b504:	441a      	add	r2, r3
 800b506:	6963      	ldr	r3, [r4, #20]
 800b508:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800b50c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800b510:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800b514:	68a1      	ldr	r1, [r4, #8]
 800b516:	ed94 6a08 	vldr	s12, [r4, #32]
 800b51a:	6022      	str	r2, [r4, #0]
 800b51c:	3301      	adds	r3, #1
 800b51e:	6163      	str	r3, [r4, #20]
 800b520:	69a3      	ldr	r3, [r4, #24]
 800b522:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b526:	3b01      	subs	r3, #1
 800b528:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800b52c:	61a3      	str	r3, [r4, #24]
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b538:	edd4 6a07 	vldr	s13, [r4, #28]
 800b53c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b540:	440b      	add	r3, r1
 800b542:	68e1      	ldr	r1, [r4, #12]
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b54a:	428b      	cmp	r3, r1
 800b54c:	edc4 6a07 	vstr	s13, [r4, #28]
 800b550:	db15      	blt.n	800b57e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800b552:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800b556:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b55a:	3201      	adds	r2, #1
 800b55c:	edc4 6a07 	vstr	s13, [r4, #28]
 800b560:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b564:	6022      	str	r2, [r4, #0]
 800b566:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b56a:	1a5b      	subs	r3, r3, r1
 800b56c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b570:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b57a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b57e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b582:	441a      	add	r2, r3
 800b584:	696b      	ldr	r3, [r5, #20]
 800b586:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800b58a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800b58e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800b592:	68a9      	ldr	r1, [r5, #8]
 800b594:	ed95 6a08 	vldr	s12, [r5, #32]
 800b598:	602a      	str	r2, [r5, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	616b      	str	r3, [r5, #20]
 800b59e:	69ab      	ldr	r3, [r5, #24]
 800b5a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800b5aa:	61ab      	str	r3, [r5, #24]
 800b5ac:	692b      	ldr	r3, [r5, #16]
 800b5ae:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5b6:	edd5 6a07 	vldr	s13, [r5, #28]
 800b5ba:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b5be:	440b      	add	r3, r1
 800b5c0:	68e9      	ldr	r1, [r5, #12]
 800b5c2:	612b      	str	r3, [r5, #16]
 800b5c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b5c8:	428b      	cmp	r3, r1
 800b5ca:	edc5 6a07 	vstr	s13, [r5, #28]
 800b5ce:	db15      	blt.n	800b5fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800b5d0:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b5d4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b5d8:	3201      	adds	r2, #1
 800b5da:	edc5 6a07 	vstr	s13, [r5, #28]
 800b5de:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b5e2:	602a      	str	r2, [r5, #0]
 800b5e4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b5e8:	1a5b      	subs	r3, r3, r1
 800b5ea:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b5ee:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b5f2:	612b      	str	r3, [r5, #16]
 800b5f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5f8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b5fc:	3f01      	subs	r7, #1
 800b5fe:	e757      	b.n	800b4b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800b600:	4299      	cmp	r1, r3
 800b602:	dc13      	bgt.n	800b62c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800b604:	429a      	cmp	r2, r3
 800b606:	da14      	bge.n	800b632 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800b608:	2502      	movs	r5, #2
 800b60a:	2703      	movs	r7, #3
 800b60c:	46a9      	mov	r9, r5
 800b60e:	f04f 0800 	mov.w	r8, #0
 800b612:	f04f 0a01 	mov.w	sl, #1
 800b616:	e6ef      	b.n	800b3f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b618:	2501      	movs	r5, #1
 800b61a:	2700      	movs	r7, #0
 800b61c:	46a9      	mov	r9, r5
 800b61e:	46b8      	mov	r8, r7
 800b620:	f04f 0a02 	mov.w	sl, #2
 800b624:	e6e8      	b.n	800b3f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b626:	2501      	movs	r5, #1
 800b628:	2702      	movs	r7, #2
 800b62a:	e6e1      	b.n	800b3f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800b62c:	2500      	movs	r5, #0
 800b62e:	2701      	movs	r7, #1
 800b630:	e7f4      	b.n	800b61c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800b632:	2702      	movs	r7, #2
 800b634:	2503      	movs	r5, #3
 800b636:	f04f 0900 	mov.w	r9, #0
 800b63a:	46b8      	mov	r8, r7
 800b63c:	e7e9      	b.n	800b612 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800b63e:	4613      	mov	r3, r2
 800b640:	e728      	b.n	800b494 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800b642:	bf00      	nop
 800b644:	20015428 	.word	0x20015428
 800b648:	fffd8f01 	.word	0xfffd8f01
 800b64c:	00027100 	.word	0x00027100
 800b650:	0004e1ff 	.word	0x0004e1ff
 800b654:	0004e1fe 	.word	0x0004e1fe
 800b658:	20015430 	.word	0x20015430
 800b65c:	4613      	mov	r3, r2
 800b65e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800b660:	9111      	str	r1, [sp, #68]	@ 0x44
 800b662:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800b666:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800b66a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800b66c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800b670:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800b674:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800b678:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800b67c:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800b680:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b684:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800b688:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800b68c:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800b690:	469e      	mov	lr, r3
 800b692:	469c      	mov	ip, r3
 800b694:	f04f 0900 	mov.w	r9, #0
 800b698:	f1bc 0f00 	cmp.w	ip, #0
 800b69c:	d147      	bne.n	800b72e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800b69e:	eb03 0c07 	add.w	ip, r3, r7
 800b6a2:	1ad7      	subs	r7, r2, r3
 800b6a4:	f1b9 0f00 	cmp.w	r9, #0
 800b6a8:	d009      	beq.n	800b6be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800b6aa:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800b6ae:	9029      	str	r0, [sp, #164]	@ 0xa4
 800b6b0:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800b6b4:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800b6b8:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800b6bc:	912d      	str	r1, [sp, #180]	@ 0xb4
 800b6be:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b6c0:	9111      	str	r1, [sp, #68]	@ 0x44
 800b6c2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b6c6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b6ca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b6ce:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b6d2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b6d6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b6da:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b6de:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b6e2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b6e6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b6ea:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b6ee:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b6f2:	f04f 0800 	mov.w	r8, #0
 800b6f6:	f1be 0f00 	cmp.w	lr, #0
 800b6fa:	d031      	beq.n	800b760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800b6fc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b6fe:	4431      	add	r1, r6
 800b700:	4549      	cmp	r1, r9
 800b702:	4450      	add	r0, sl
 800b704:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b708:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b70c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b710:	db08      	blt.n	800b724 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800b712:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b716:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b71a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b71e:	3001      	adds	r0, #1
 800b720:	eba1 0109 	sub.w	r1, r1, r9
 800b724:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b728:	f04f 0801 	mov.w	r8, #1
 800b72c:	e7e3      	b.n	800b6f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800b72e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b730:	4431      	add	r1, r6
 800b732:	4541      	cmp	r1, r8
 800b734:	4450      	add	r0, sl
 800b736:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b73a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b73e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b742:	db08      	blt.n	800b756 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800b744:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b748:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b74c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b750:	3001      	adds	r0, #1
 800b752:	eba1 0108 	sub.w	r1, r1, r8
 800b756:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b75a:	f04f 0901 	mov.w	r9, #1
 800b75e:	e79b      	b.n	800b698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800b760:	449c      	add	ip, r3
 800b762:	1aff      	subs	r7, r7, r3
 800b764:	f1b8 0f00 	cmp.w	r8, #0
 800b768:	d009      	beq.n	800b77e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800b76a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800b76e:	9019      	str	r0, [sp, #100]	@ 0x64
 800b770:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800b774:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800b778:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800b77c:	911d      	str	r1, [sp, #116]	@ 0x74
 800b77e:	1ad2      	subs	r2, r2, r3
 800b780:	e68b      	b.n	800b49a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b784:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800b786:	2b00      	cmp	r3, #0
 800b788:	f000 80d1 	beq.w	800b92e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800b78c:	ad19      	add	r5, sp, #100	@ 0x64
 800b78e:	ac39      	add	r4, sp, #228	@ 0xe4
 800b790:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b792:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b796:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b79a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b79c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b79e:	6963      	ldr	r3, [r4, #20]
 800b7a0:	440b      	add	r3, r1
 800b7a2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b7a6:	4408      	add	r0, r1
 800b7a8:	b200      	sxth	r0, r0
 800b7aa:	4283      	cmp	r3, r0
 800b7ac:	900d      	str	r0, [sp, #52]	@ 0x34
 800b7ae:	f280 80c1 	bge.w	800b934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800b7b2:	428b      	cmp	r3, r1
 800b7b4:	da08      	bge.n	800b7c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b7b6:	2a00      	cmp	r2, #0
 800b7b8:	dd06      	ble.n	800b7c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b7ba:	1acb      	subs	r3, r1, r3
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	f2c0 80bb 	blt.w	800b938 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f300 80b9 	bgt.w	800b93a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800b7c8:	6967      	ldr	r7, [r4, #20]
 800b7ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7cc:	443b      	add	r3, r7
 800b7ce:	461f      	mov	r7, r3
 800b7d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7d2:	1bdf      	subs	r7, r3, r7
 800b7d4:	4297      	cmp	r7, r2
 800b7d6:	bfa8      	it	ge
 800b7d8:	4617      	movge	r7, r2
 800b7da:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	f340 813c 	ble.w	800ba5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800b7e4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b7e6:	6829      	ldr	r1, [r5, #0]
 800b7e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b7ec:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b7f0:	6820      	ldr	r0, [r4, #0]
 800b7f2:	4411      	add	r1, r2
 800b7f4:	4299      	cmp	r1, r3
 800b7f6:	dd1a      	ble.n	800b82e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b7f8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b7fc:	440b      	add	r3, r1
 800b7fe:	4402      	add	r2, r0
 800b800:	b21b      	sxth	r3, r3
 800b802:	429a      	cmp	r2, r3
 800b804:	dc13      	bgt.n	800b82e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	9206      	str	r2, [sp, #24]
 800b80e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b810:	9205      	str	r2, [sp, #20]
 800b812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b814:	9500      	str	r5, [sp, #0]
 800b816:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b81a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800b81c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b81e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b822:	a912      	add	r1, sp, #72	@ 0x48
 800b824:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800b828:	aa49      	add	r2, sp, #292	@ 0x124
 800b82a:	4623      	mov	r3, r4
 800b82c:	47c8      	blx	r9
 800b82e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b832:	441a      	add	r2, r3
 800b834:	6963      	ldr	r3, [r4, #20]
 800b836:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800b83a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800b83e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800b842:	68a1      	ldr	r1, [r4, #8]
 800b844:	ed94 6a08 	vldr	s12, [r4, #32]
 800b848:	6022      	str	r2, [r4, #0]
 800b84a:	3301      	adds	r3, #1
 800b84c:	6163      	str	r3, [r4, #20]
 800b84e:	69a3      	ldr	r3, [r4, #24]
 800b850:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b854:	3b01      	subs	r3, #1
 800b856:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800b85a:	61a3      	str	r3, [r4, #24]
 800b85c:	6923      	ldr	r3, [r4, #16]
 800b85e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b866:	edd4 6a07 	vldr	s13, [r4, #28]
 800b86a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b86e:	440b      	add	r3, r1
 800b870:	68e1      	ldr	r1, [r4, #12]
 800b872:	6123      	str	r3, [r4, #16]
 800b874:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b878:	428b      	cmp	r3, r1
 800b87a:	edc4 6a07 	vstr	s13, [r4, #28]
 800b87e:	db15      	blt.n	800b8ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800b880:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800b884:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b888:	3201      	adds	r2, #1
 800b88a:	edc4 6a07 	vstr	s13, [r4, #28]
 800b88e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b892:	6022      	str	r2, [r4, #0]
 800b894:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b898:	1a5b      	subs	r3, r3, r1
 800b89a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b89e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800b8a2:	6123      	str	r3, [r4, #16]
 800b8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8a8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b8ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8b0:	441a      	add	r2, r3
 800b8b2:	696b      	ldr	r3, [r5, #20]
 800b8b4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800b8b8:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800b8bc:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800b8c0:	68a9      	ldr	r1, [r5, #8]
 800b8c2:	ed95 6a08 	vldr	s12, [r5, #32]
 800b8c6:	602a      	str	r2, [r5, #0]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	616b      	str	r3, [r5, #20]
 800b8cc:	69ab      	ldr	r3, [r5, #24]
 800b8ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800b8d8:	61ab      	str	r3, [r5, #24]
 800b8da:	692b      	ldr	r3, [r5, #16]
 800b8dc:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b8e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8e4:	edd5 6a07 	vldr	s13, [r5, #28]
 800b8e8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b8ec:	440b      	add	r3, r1
 800b8ee:	68e9      	ldr	r1, [r5, #12]
 800b8f0:	612b      	str	r3, [r5, #16]
 800b8f2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b8f6:	428b      	cmp	r3, r1
 800b8f8:	edc5 6a07 	vstr	s13, [r5, #28]
 800b8fc:	db15      	blt.n	800b92a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800b8fe:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b902:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b906:	3201      	adds	r2, #1
 800b908:	edc5 6a07 	vstr	s13, [r5, #28]
 800b90c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b910:	602a      	str	r2, [r5, #0]
 800b912:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b916:	1a5b      	subs	r3, r3, r1
 800b918:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b91c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b920:	612b      	str	r3, [r5, #16]
 800b922:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b926:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b92a:	3f01      	subs	r7, #1
 800b92c:	e757      	b.n	800b7de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800b92e:	ad39      	add	r5, sp, #228	@ 0xe4
 800b930:	ac19      	add	r4, sp, #100	@ 0x64
 800b932:	e72d      	b.n	800b790 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800b934:	4613      	mov	r3, r2
 800b936:	e744      	b.n	800b7c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800b938:	4613      	mov	r3, r2
 800b93a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800b93e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800b940:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800b944:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800b948:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800b94c:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800b950:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800b954:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800b958:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800b95c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800b95e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800b962:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800b966:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800b96a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800b96e:	960e      	str	r6, [sp, #56]	@ 0x38
 800b970:	469e      	mov	lr, r3
 800b972:	461f      	mov	r7, r3
 800b974:	f04f 0900 	mov.w	r9, #0
 800b978:	2f00      	cmp	r7, #0
 800b97a:	d146      	bne.n	800ba0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800b97c:	449c      	add	ip, r3
 800b97e:	1ad7      	subs	r7, r2, r3
 800b980:	f1b9 0f00 	cmp.w	r9, #0
 800b984:	d009      	beq.n	800b99a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800b986:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800b98a:	9039      	str	r0, [sp, #228]	@ 0xe4
 800b98c:	913d      	str	r1, [sp, #244]	@ 0xf4
 800b98e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800b992:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800b996:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800b99a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b99c:	910e      	str	r1, [sp, #56]	@ 0x38
 800b99e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b9a2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b9a6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b9aa:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b9ae:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b9b2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b9b6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b9ba:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b9be:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b9c2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b9c6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b9ca:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b9ce:	f04f 0800 	mov.w	r8, #0
 800b9d2:	f1be 0f00 	cmp.w	lr, #0
 800b9d6:	d030      	beq.n	800ba3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800b9d8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b9da:	4431      	add	r1, r6
 800b9dc:	4549      	cmp	r1, r9
 800b9de:	4450      	add	r0, sl
 800b9e0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b9e4:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b9e8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b9ec:	db08      	blt.n	800ba00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800b9ee:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b9f2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b9f6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	eba1 0109 	sub.w	r1, r1, r9
 800ba00:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ba04:	f04f 0801 	mov.w	r8, #1
 800ba08:	e7e3      	b.n	800b9d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800ba0a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ba0c:	4431      	add	r1, r6
 800ba0e:	4541      	cmp	r1, r8
 800ba10:	4450      	add	r0, sl
 800ba12:	ee37 7a24 	vadd.f32	s14, s14, s9
 800ba16:	ee77 7a84 	vadd.f32	s15, s15, s8
 800ba1a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800ba1e:	db08      	blt.n	800ba32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800ba20:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ba24:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ba28:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	eba1 0108 	sub.w	r1, r1, r8
 800ba32:	3f01      	subs	r7, #1
 800ba34:	f04f 0901 	mov.w	r9, #1
 800ba38:	e79e      	b.n	800b978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800ba3a:	449c      	add	ip, r3
 800ba3c:	1aff      	subs	r7, r7, r3
 800ba3e:	f1b8 0f00 	cmp.w	r8, #0
 800ba42:	d009      	beq.n	800ba58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800ba44:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800ba48:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba4a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800ba4e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800ba52:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800ba56:	911d      	str	r1, [sp, #116]	@ 0x74
 800ba58:	1ad2      	subs	r2, r2, r3
 800ba5a:	e6b5      	b.n	800b7c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ba5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	b923      	cbnz	r3, 800ba6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ba62:	4b04      	ldr	r3, [pc, #16]	@ (800ba74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800ba64:	6818      	ldr	r0, [r3, #0]
 800ba66:	6803      	ldr	r3, [r0, #0]
 800ba68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba6a:	4798      	blx	r3
 800ba6c:	b05b      	add	sp, #364	@ 0x16c
 800ba6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba72:	bf00      	nop
 800ba74:	20015430 	.word	0x20015430

0800ba78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800ba80:	9805      	ldr	r0, [sp, #20]
 800ba82:	6061      	str	r1, [r4, #4]
 800ba84:	2500      	movs	r5, #0
 800ba86:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800ba8a:	8263      	strh	r3, [r4, #18]
 800ba8c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800ba90:	8025      	strh	r5, [r4, #0]
 800ba92:	7221      	strb	r1, [r4, #8]
 800ba94:	7266      	strb	r6, [r4, #9]
 800ba96:	60e0      	str	r0, [r4, #12]
 800ba98:	8222      	strh	r2, [r4, #16]
 800ba9a:	82a3      	strh	r3, [r4, #20]
 800ba9c:	82e5      	strh	r5, [r4, #22]
 800ba9e:	8325      	strh	r5, [r4, #24]
 800baa0:	8365      	strh	r5, [r4, #26]
 800baa2:	83a5      	strh	r5, [r4, #28]
 800baa4:	83e5      	strh	r5, [r4, #30]
 800baa6:	8425      	strh	r5, [r4, #32]
 800baa8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800baac:	b32e      	cbz	r6, 800bafa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800baae:	6803      	ldr	r3, [r0, #0]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	4798      	blx	r3
 800bab4:	4606      	mov	r6, r0
 800bab6:	b300      	cbz	r0, 800bafa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800bab8:	68e0      	ldr	r0, [r4, #12]
 800baba:	6803      	ldr	r3, [r0, #0]
 800babc:	4631      	mov	r1, r6
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	4798      	blx	r3
 800bac2:	4605      	mov	r5, r0
 800bac4:	b1c8      	cbz	r0, 800bafa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800bac6:	7b43      	ldrb	r3, [r0, #13]
 800bac8:	7a82      	ldrb	r2, [r0, #10]
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bad0:	4313      	orrs	r3, r2
 800bad2:	8423      	strh	r3, [r4, #32]
 800bad4:	7a63      	ldrb	r3, [r4, #9]
 800bad6:	2b06      	cmp	r3, #6
 800bad8:	d10f      	bne.n	800bafa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800bada:	68e0      	ldr	r0, [r4, #12]
 800badc:	6803      	ldr	r3, [r0, #0]
 800bade:	462a      	mov	r2, r5
 800bae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bae2:	4631      	mov	r1, r6
 800bae4:	4798      	blx	r3
 800bae6:	7b6b      	ldrb	r3, [r5, #13]
 800bae8:	005b      	lsls	r3, r3, #1
 800baea:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800baee:	7aab      	ldrb	r3, [r5, #10]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	4418      	add	r0, r3
 800baf4:	8c23      	ldrh	r3, [r4, #32]
 800baf6:	4418      	add	r0, r3
 800baf8:	8420      	strh	r0, [r4, #32]
 800bafa:	4620      	mov	r0, r4
 800bafc:	bd70      	pop	{r4, r5, r6, pc}

0800bafe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800bafe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb02:	2400      	movs	r4, #0
 800bb04:	b085      	sub	sp, #20
 800bb06:	4681      	mov	r9, r0
 800bb08:	4688      	mov	r8, r1
 800bb0a:	4692      	mov	sl, r2
 800bb0c:	469b      	mov	fp, r3
 800bb0e:	4627      	mov	r7, r4
 800bb10:	4625      	mov	r5, r4
 800bb12:	4626      	mov	r6, r4
 800bb14:	4554      	cmp	r4, sl
 800bb16:	da2a      	bge.n	800bb6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9303      	str	r3, [sp, #12]
 800bb1c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bb20:	429d      	cmp	r5, r3
 800bb22:	d004      	beq.n	800bb2e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800bb24:	f242 030b 	movw	r3, #8203	@ 0x200b
 800bb28:	429d      	cmp	r5, r3
 800bb2a:	bf18      	it	ne
 800bb2c:	462f      	movne	r7, r5
 800bb2e:	ab03      	add	r3, sp, #12
 800bb30:	4642      	mov	r2, r8
 800bb32:	4659      	mov	r1, fp
 800bb34:	4648      	mov	r0, r9
 800bb36:	f003 f81f 	bl	800eb78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	b1b8      	cbz	r0, 800bb6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800bb3e:	280a      	cmp	r0, #10
 800bb40:	d015      	beq.n	800bb6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800bb42:	9a03      	ldr	r2, [sp, #12]
 800bb44:	b18a      	cbz	r2, 800bb6a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800bb46:	7b50      	ldrb	r0, [r2, #13]
 800bb48:	7a93      	ldrb	r3, [r2, #10]
 800bb4a:	8895      	ldrh	r5, [r2, #4]
 800bb4c:	0040      	lsls	r0, r0, #1
 800bb4e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800bb52:	4303      	orrs	r3, r0
 800bb54:	9301      	str	r3, [sp, #4]
 800bb56:	f8d8 3000 	ldr.w	r3, [r8]
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb5e:	4640      	mov	r0, r8
 800bb60:	4798      	blx	r3
 800bb62:	9b01      	ldr	r3, [sp, #4]
 800bb64:	4418      	add	r0, r3
 800bb66:	4406      	add	r6, r0
 800bb68:	b2b6      	uxth	r6, r6
 800bb6a:	3401      	adds	r4, #1
 800bb6c:	e7d2      	b.n	800bb14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800bb6e:	4630      	mov	r0, r6
 800bb70:	b005      	add	sp, #20
 800bb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800bb76:	2a02      	cmp	r2, #2
 800bb78:	b530      	push	{r4, r5, lr}
 800bb7a:	d011      	beq.n	800bba0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800bb7c:	2a03      	cmp	r2, #3
 800bb7e:	d01c      	beq.n	800bbba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800bb80:	2a01      	cmp	r2, #1
 800bb82:	d10c      	bne.n	800bb9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800bb84:	888b      	ldrh	r3, [r1, #4]
 800bb86:	8801      	ldrh	r1, [r0, #0]
 800bb88:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800bb8c:	8844      	ldrh	r4, [r0, #2]
 800bb8e:	8004      	strh	r4, [r0, #0]
 800bb90:	1a5b      	subs	r3, r3, r1
 800bb92:	1a9b      	subs	r3, r3, r2
 800bb94:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800bb98:	8043      	strh	r3, [r0, #2]
 800bb9a:	8081      	strh	r1, [r0, #4]
 800bb9c:	80c2      	strh	r2, [r0, #6]
 800bb9e:	bd30      	pop	{r4, r5, pc}
 800bba0:	88cb      	ldrh	r3, [r1, #6]
 800bba2:	8842      	ldrh	r2, [r0, #2]
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	88c2      	ldrh	r2, [r0, #6]
 800bba8:	1a9b      	subs	r3, r3, r2
 800bbaa:	888a      	ldrh	r2, [r1, #4]
 800bbac:	8801      	ldrh	r1, [r0, #0]
 800bbae:	8043      	strh	r3, [r0, #2]
 800bbb0:	1a52      	subs	r2, r2, r1
 800bbb2:	8881      	ldrh	r1, [r0, #4]
 800bbb4:	1a52      	subs	r2, r2, r1
 800bbb6:	8002      	strh	r2, [r0, #0]
 800bbb8:	e7f1      	b.n	800bb9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800bbba:	88cb      	ldrh	r3, [r1, #6]
 800bbbc:	8841      	ldrh	r1, [r0, #2]
 800bbbe:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800bbc2:	f9b0 5000 	ldrsh.w	r5, [r0]
 800bbc6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800bbca:	8045      	strh	r5, [r0, #2]
 800bbcc:	1a5b      	subs	r3, r3, r1
 800bbce:	1a9b      	subs	r3, r3, r2
 800bbd0:	8003      	strh	r3, [r0, #0]
 800bbd2:	8082      	strh	r2, [r0, #4]
 800bbd4:	80c4      	strh	r4, [r0, #6]
 800bbd6:	e7e2      	b.n	800bb9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800bbd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	b09f      	sub	sp, #124	@ 0x7c
 800bbde:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bbe0:	9312      	str	r3, [sp, #72]	@ 0x48
 800bbe2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800bbe4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800bbe6:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800bbe8:	8812      	ldrh	r2, [r2, #0]
 800bbea:	889b      	ldrh	r3, [r3, #4]
 800bbec:	900e      	str	r0, [sp, #56]	@ 0x38
 800bbee:	4413      	add	r3, r2
 800bbf0:	6828      	ldr	r0, [r5, #0]
 800bbf2:	9117      	str	r1, [sp, #92]	@ 0x5c
 800bbf4:	b21b      	sxth	r3, r3
 800bbf6:	9311      	str	r3, [sp, #68]	@ 0x44
 800bbf8:	6803      	ldr	r3, [r0, #0]
 800bbfa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800bbfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc00:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800bc04:	4798      	blx	r3
 800bc06:	682b      	ldr	r3, [r5, #0]
 800bc08:	9013      	str	r0, [sp, #76]	@ 0x4c
 800bc0a:	7b1a      	ldrb	r2, [r3, #12]
 800bc0c:	7adb      	ldrb	r3, [r3, #11]
 800bc0e:	9215      	str	r2, [sp, #84]	@ 0x54
 800bc10:	9316      	str	r3, [sp, #88]	@ 0x58
 800bc12:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800bc16:	2c00      	cmp	r4, #0
 800bc18:	d067      	beq.n	800bcea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800bc1a:	7c2b      	ldrb	r3, [r5, #16]
 800bc1c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800bc1e:	2b06      	cmp	r3, #6
 800bc20:	bf14      	ite	ne
 800bc22:	2301      	movne	r3, #1
 800bc24:	2302      	moveq	r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	f04f 0900 	mov.w	r9, #0
 800bc2c:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc2e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800bc32:	464c      	mov	r4, r9
 800bc34:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800bc38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc3a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	f280 808b 	bge.w	800bd58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800bc42:	2300      	movs	r3, #0
 800bc44:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800bc48:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800bc4c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bc50:	429c      	cmp	r4, r3
 800bc52:	d006      	beq.n	800bc62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800bc54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc56:	f242 020b 	movw	r2, #8203	@ 0x200b
 800bc5a:	4294      	cmp	r4, r2
 800bc5c:	bf18      	it	ne
 800bc5e:	4623      	movne	r3, r4
 800bc60:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc64:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800bc66:	682a      	ldr	r2, [r5, #0]
 800bc68:	428b      	cmp	r3, r1
 800bc6a:	db40      	blt.n	800bcee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800bc6c:	6813      	ldr	r3, [r2, #0]
 800bc6e:	4610      	mov	r0, r2
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	4798      	blx	r3
 800bc74:	4604      	mov	r4, r0
 800bc76:	6828      	ldr	r0, [r5, #0]
 800bc78:	6803      	ldr	r3, [r0, #0]
 800bc7a:	aa1d      	add	r2, sp, #116	@ 0x74
 800bc7c:	689f      	ldr	r7, [r3, #8]
 800bc7e:	4621      	mov	r1, r4
 800bc80:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800bc84:	47b8      	blx	r7
 800bc86:	901c      	str	r0, [sp, #112]	@ 0x70
 800bc88:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bc8c:	429c      	cmp	r4, r3
 800bc8e:	f000 80ea 	beq.w	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bc92:	f242 030b 	movw	r3, #8203	@ 0x200b
 800bc96:	429c      	cmp	r4, r3
 800bc98:	f000 80e5 	beq.w	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bc9c:	2c00      	cmp	r4, #0
 800bc9e:	f000 810c 	beq.w	800beba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800bca2:	2c0a      	cmp	r4, #10
 800bca4:	d05e      	beq.n	800bd64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800bca6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bca8:	b36a      	cbz	r2, 800bd06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800bcaa:	8894      	ldrh	r4, [r2, #4]
 800bcac:	f1bb 0f00 	cmp.w	fp, #0
 800bcb0:	d03a      	beq.n	800bd28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800bcb2:	f892 900d 	ldrb.w	r9, [r2, #13]
 800bcb6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800bcba:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800bcbe:	f892 900a 	ldrb.w	r9, [r2, #10]
 800bcc2:	f1bb 0f01 	cmp.w	fp, #1
 800bcc6:	ea49 0903 	orr.w	r9, r9, r3
 800bcca:	d133      	bne.n	800bd34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800bccc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bcce:	eba6 0609 	sub.w	r6, r6, r9
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d14d      	bne.n	800bd72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800bcd6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bcd8:	eb09 0306 	add.w	r3, r9, r6
 800bcdc:	4413      	add	r3, r2
 800bcde:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800bce0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800bce4:	4293      	cmp	r3, r2
 800bce6:	da4e      	bge.n	800bd86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800bce8:	e036      	b.n	800bd58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800bcea:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800bcec:	e79c      	b.n	800bc28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800bcee:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	ab1d      	add	r3, sp, #116	@ 0x74
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	4659      	mov	r1, fp
 800bcfa:	ab1c      	add	r3, sp, #112	@ 0x70
 800bcfc:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800bcfe:	f002 ff84 	bl	800ec0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800bd02:	4604      	mov	r4, r0
 800bd04:	e7c0      	b.n	800bc88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800bd06:	6828      	ldr	r0, [r5, #0]
 800bd08:	6803      	ldr	r3, [r0, #0]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	4798      	blx	r3
 800bd0e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bd12:	4298      	cmp	r0, r3
 800bd14:	f000 80a7 	beq.w	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bd18:	f242 030b 	movw	r3, #8203	@ 0x200b
 800bd1c:	4298      	cmp	r0, r3
 800bd1e:	f000 80a2 	beq.w	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bd22:	f1bb 0f00 	cmp.w	fp, #0
 800bd26:	d100      	bne.n	800bd2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800bd28:	444e      	add	r6, r9
 800bd2a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bd2c:	2a00      	cmp	r2, #0
 800bd2e:	d1c0      	bne.n	800bcb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800bd30:	4691      	mov	r9, r2
 800bd32:	e098      	b.n	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bd34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 80c1 	beq.w	800bebe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800bd3c:	f1bb 0f00 	cmp.w	fp, #0
 800bd40:	d117      	bne.n	800bd72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800bd42:	6828      	ldr	r0, [r5, #0]
 800bd44:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd46:	6803      	ldr	r3, [r0, #0]
 800bd48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd4a:	4798      	blx	r3
 800bd4c:	4406      	add	r6, r0
 800bd4e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd52:	1af3      	subs	r3, r6, r3
 800bd54:	4293      	cmp	r3, r2
 800bd56:	dd16      	ble.n	800bd86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800bd58:	2c00      	cmp	r4, #0
 800bd5a:	f000 80ae 	beq.w	800beba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800bd5e:	2c0a      	cmp	r4, #10
 800bd60:	f040 809c 	bne.w	800be9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800bd64:	240a      	movs	r4, #10
 800bd66:	fab4 f084 	clz	r0, r4
 800bd6a:	0940      	lsrs	r0, r0, #5
 800bd6c:	b01f      	add	sp, #124	@ 0x7c
 800bd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd72:	6828      	ldr	r0, [r5, #0]
 800bd74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd76:	6803      	ldr	r3, [r0, #0]
 800bd78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd7a:	4798      	blx	r3
 800bd7c:	f1bb 0f01 	cmp.w	fp, #1
 800bd80:	eba6 0600 	sub.w	r6, r6, r0
 800bd84:	d0a7      	beq.n	800bcd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800bd86:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800bd88:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800bd8a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800bd8e:	f9b3 8000 	ldrsh.w	r8, [r3]
 800bd92:	7b43      	ldrb	r3, [r0, #13]
 800bd94:	015b      	lsls	r3, r3, #5
 800bd96:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800bd9a:	7983      	ldrb	r3, [r0, #6]
 800bd9c:	4431      	add	r1, r6
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	440b      	add	r3, r1
 800bda2:	4543      	cmp	r3, r8
 800bda4:	db5f      	blt.n	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bda6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	da5c      	bge.n	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bdac:	6828      	ldr	r0, [r5, #0]
 800bdae:	6803      	ldr	r3, [r0, #0]
 800bdb0:	45b0      	cmp	r8, r6
 800bdb2:	bfc8      	it	gt
 800bdb4:	eba8 0806 	subgt.w	r8, r8, r6
 800bdb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdba:	bfcc      	ite	gt
 800bdbc:	fa1f f888 	uxthgt.w	r8, r8
 800bdc0:	f04f 0800 	movle.w	r8, #0
 800bdc4:	4798      	blx	r3
 800bdc6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bdc8:	7b53      	ldrb	r3, [r2, #13]
 800bdca:	00d9      	lsls	r1, r3, #3
 800bdcc:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800bdd0:	7a11      	ldrb	r1, [r2, #8]
 800bdd2:	4339      	orrs	r1, r7
 800bdd4:	065f      	lsls	r7, r3, #25
 800bdd6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800bdd8:	bf44      	itt	mi
 800bdda:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800bdde:	b209      	sxthmi	r1, r1
 800bde0:	19c7      	adds	r7, r0, r7
 800bde2:	1a7f      	subs	r7, r7, r1
 800bde4:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800bde6:	b2bf      	uxth	r7, r7
 800bde8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bdec:	fa0f fa87 	sxth.w	sl, r7
 800bdf0:	4551      	cmp	r1, sl
 800bdf2:	dd3c      	ble.n	800be6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800bdf4:	011b      	lsls	r3, r3, #4
 800bdf6:	79d0      	ldrb	r0, [r2, #7]
 800bdf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdfc:	4303      	orrs	r3, r0
 800bdfe:	449a      	add	sl, r3
 800be00:	4551      	cmp	r1, sl
 800be02:	dc30      	bgt.n	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800be04:	1bcf      	subs	r7, r1, r7
 800be06:	b23f      	sxth	r7, r7
 800be08:	468a      	mov	sl, r1
 800be0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800be0c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800be10:	6828      	ldr	r0, [r5, #0]
 800be12:	2a00      	cmp	r2, #0
 800be14:	d12d      	bne.n	800be72 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800be16:	9318      	str	r3, [sp, #96]	@ 0x60
 800be18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be1a:	6819      	ldr	r1, [r3, #0]
 800be1c:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800be1e:	6801      	ldr	r1, [r0, #0]
 800be20:	9314      	str	r3, [sp, #80]	@ 0x50
 800be22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be24:	4788      	blx	r1
 800be26:	79a9      	ldrb	r1, [r5, #6]
 800be28:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be2a:	7ba9      	ldrb	r1, [r5, #14]
 800be2c:	910a      	str	r1, [sp, #40]	@ 0x28
 800be2e:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800be32:	9109      	str	r1, [sp, #36]	@ 0x24
 800be34:	68a9      	ldr	r1, [r5, #8]
 800be36:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800be38:	9306      	str	r3, [sp, #24]
 800be3a:	b2bf      	uxth	r7, r7
 800be3c:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800be40:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	44b0      	add	r8, r6
 800be46:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800be4a:	fa0f f388 	sxth.w	r3, r8
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800be52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be54:	9205      	str	r2, [sp, #20]
 800be56:	f8cd a004 	str.w	sl, [sp, #4]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800be62:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800be64:	47b8      	blx	r7
 800be66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be68:	3301      	adds	r3, #1
 800be6a:	930d      	str	r3, [sp, #52]	@ 0x34
 800be6c:	e6e4      	b.n	800bc38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800be6e:	2700      	movs	r7, #0
 800be70:	e7cb      	b.n	800be0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800be72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be74:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800be78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800be7a:	f8dc 1000 	ldr.w	r1, [ip]
 800be7e:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800be82:	79aa      	ldrb	r2, [r5, #6]
 800be84:	9203      	str	r2, [sp, #12]
 800be86:	7baa      	ldrb	r2, [r5, #14]
 800be88:	9202      	str	r2, [sp, #8]
 800be8a:	68aa      	ldr	r2, [r5, #8]
 800be8c:	e9cd 0200 	strd	r0, r2, [sp]
 800be90:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800be92:	688f      	ldr	r7, [r1, #8]
 800be94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800be96:	4660      	mov	r0, ip
 800be98:	47b8      	blx	r7
 800be9a:	e7e4      	b.n	800be66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800be9c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800be9e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800bea0:	3501      	adds	r5, #1
 800bea2:	429d      	cmp	r5, r3
 800bea4:	f6bf af5f 	bge.w	800bd66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800bea8:	4659      	mov	r1, fp
 800beaa:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800beac:	f7f7 fdbe 	bl	8003a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800beb0:	4604      	mov	r4, r0
 800beb2:	b110      	cbz	r0, 800beba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800beb4:	280a      	cmp	r0, #10
 800beb6:	d1f2      	bne.n	800be9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800beb8:	e754      	b.n	800bd64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800beba:	2400      	movs	r4, #0
 800bebc:	e753      	b.n	800bd66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800bebe:	f1bb 0f00 	cmp.w	fp, #0
 800bec2:	f43f af44 	beq.w	800bd4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800bec6:	e75e      	b.n	800bd86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800bec8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800bec8:	b530      	push	{r4, r5, lr}
 800beca:	8ac4      	ldrh	r4, [r0, #22]
 800becc:	8b45      	ldrh	r5, [r0, #26]
 800bece:	8343      	strh	r3, [r0, #26]
 800bed0:	442c      	add	r4, r5
 800bed2:	1ae4      	subs	r4, r4, r3
 800bed4:	82c4      	strh	r4, [r0, #22]
 800bed6:	8b83      	ldrh	r3, [r0, #28]
 800bed8:	8b04      	ldrh	r4, [r0, #24]
 800beda:	4422      	add	r2, r4
 800bedc:	440c      	add	r4, r1
 800bede:	1a59      	subs	r1, r3, r1
 800bee0:	83c2      	strh	r2, [r0, #30]
 800bee2:	8304      	strh	r4, [r0, #24]
 800bee4:	8381      	strh	r1, [r0, #28]
 800bee6:	bd30      	pop	{r4, r5, pc}

0800bee8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	4604      	mov	r4, r0
 800beee:	8a47      	ldrh	r7, [r0, #18]
 800bef0:	68c0      	ldr	r0, [r0, #12]
 800bef2:	6803      	ldr	r3, [r0, #0]
 800bef4:	b085      	sub	sp, #20
 800bef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef8:	4798      	blx	r3
 800befa:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800befe:	7a63      	ldrb	r3, [r4, #9]
 800bf00:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800bf04:	42b7      	cmp	r7, r6
 800bf06:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf0a:	bfac      	ite	ge
 800bf0c:	f04f 0900 	movge.w	r9, #0
 800bf10:	f04f 0901 	movlt.w	r9, #1
 800bf14:	2b05      	cmp	r3, #5
 800bf16:	d804      	bhi.n	800bf22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800bf18:	e8df f003 	tbb	[pc, r3]
 800bf1c:	470e0854 	.word	0x470e0854
 800bf20:	4c4c      	.short	0x4c4c
 800bf22:	2500      	movs	r5, #0
 800bf24:	46a9      	mov	r9, r5
 800bf26:	462e      	mov	r6, r5
 800bf28:	462f      	mov	r7, r5
 800bf2a:	e00d      	b.n	800bf48 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800bf2c:	42b7      	cmp	r7, r6
 800bf2e:	bfb4      	ite	lt
 800bf30:	2600      	movlt	r6, #0
 800bf32:	2601      	movge	r6, #1
 800bf34:	2500      	movs	r5, #0
 800bf36:	e7f7      	b.n	800bf28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800bf38:	42b7      	cmp	r7, r6
 800bf3a:	464d      	mov	r5, r9
 800bf3c:	f04f 0900 	mov.w	r9, #0
 800bf40:	bfb4      	ite	lt
 800bf42:	2600      	movlt	r6, #0
 800bf44:	2601      	movge	r6, #1
 800bf46:	464f      	mov	r7, r9
 800bf48:	f04f 0800 	mov.w	r8, #0
 800bf4c:	f8a4 8016 	strh.w	r8, [r4, #22]
 800bf50:	f8a4 8018 	strh.w	r8, [r4, #24]
 800bf54:	f8cd 8004 	str.w	r8, [sp, #4]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	9303      	str	r3, [sp, #12]
 800bf5c:	8823      	ldrh	r3, [r4, #0]
 800bf5e:	2b20      	cmp	r3, #32
 800bf60:	d034      	beq.n	800bfcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800bf62:	f242 010b 	movw	r1, #8203	@ 0x200b
 800bf66:	1a5a      	subs	r2, r3, r1
 800bf68:	f1d2 0a00 	rsbs	sl, r2, #0
 800bf6c:	eb4a 0a02 	adc.w	sl, sl, r2
 800bf70:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d009      	beq.n	800bf8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800bf78:	428b      	cmp	r3, r1
 800bf7a:	9a01      	ldr	r2, [sp, #4]
 800bf7c:	bf18      	it	ne
 800bf7e:	461a      	movne	r2, r3
 800bf80:	9201      	str	r2, [sp, #4]
 800bf82:	bf0c      	ite	eq
 800bf84:	f04f 0a01 	moveq.w	sl, #1
 800bf88:	f04f 0a00 	movne.w	sl, #0
 800bf8c:	ab03      	add	r3, sp, #12
 800bf8e:	68e2      	ldr	r2, [r4, #12]
 800bf90:	7a21      	ldrb	r1, [r4, #8]
 800bf92:	6860      	ldr	r0, [r4, #4]
 800bf94:	f002 fdf0 	bl	800eb78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bf98:	8020      	strh	r0, [r4, #0]
 800bf9a:	b9d8      	cbnz	r0, 800bfd4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800bf9c:	8ba2      	ldrh	r2, [r4, #28]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f7ff ff90 	bl	800bec8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800bfa8:	e06e      	b.n	800c088 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800bfaa:	2500      	movs	r5, #0
 800bfac:	46a9      	mov	r9, r5
 800bfae:	462e      	mov	r6, r5
 800bfb0:	2701      	movs	r7, #1
 800bfb2:	e7c9      	b.n	800bf48 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800bfb4:	42b7      	cmp	r7, r6
 800bfb6:	f04f 0500 	mov.w	r5, #0
 800bfba:	bfb4      	ite	lt
 800bfbc:	2700      	movlt	r7, #0
 800bfbe:	2701      	movge	r7, #1
 800bfc0:	462e      	mov	r6, r5
 800bfc2:	e7c1      	b.n	800bf48 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800bfc4:	2500      	movs	r5, #0
 800bfc6:	46a9      	mov	r9, r5
 800bfc8:	2601      	movs	r6, #1
 800bfca:	e7ad      	b.n	800bf28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800bfcc:	9301      	str	r3, [sp, #4]
 800bfce:	f04f 0a01 	mov.w	sl, #1
 800bfd2:	e7db      	b.n	800bf8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800bfd4:	8b63      	ldrh	r3, [r4, #26]
 800bfd6:	280a      	cmp	r0, #10
 800bfd8:	f103 0301 	add.w	r3, r3, #1
 800bfdc:	8363      	strh	r3, [r4, #26]
 800bfde:	d0dd      	beq.n	800bf9c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800bfe0:	9a03      	ldr	r2, [sp, #12]
 800bfe2:	bb62      	cbnz	r2, 800c03e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800bfe4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bfe8:	4298      	cmp	r0, r3
 800bfea:	d003      	beq.n	800bff4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800bfec:	f242 030b 	movw	r3, #8203	@ 0x200b
 800bff0:	4298      	cmp	r0, r3
 800bff2:	d1b1      	bne.n	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800bff4:	8823      	ldrh	r3, [r4, #0]
 800bff6:	8ba1      	ldrh	r1, [r4, #28]
 800bff8:	2b20      	cmp	r3, #32
 800bffa:	d003      	beq.n	800c004 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800bffc:	f242 000b 	movw	r0, #8203	@ 0x200b
 800c000:	4283      	cmp	r3, r0
 800c002:	d131      	bne.n	800c068 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800c004:	f1ba 0f00 	cmp.w	sl, #0
 800c008:	bf0a      	itet	eq
 800c00a:	4688      	moveq	r8, r1
 800c00c:	4650      	movne	r0, sl
 800c00e:	2001      	moveq	r0, #1
 800c010:	440a      	add	r2, r1
 800c012:	8b23      	ldrh	r3, [r4, #24]
 800c014:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800c018:	b292      	uxth	r2, r2
 800c01a:	83a2      	strh	r2, [r4, #28]
 800c01c:	4413      	add	r3, r2
 800c01e:	f1b9 0f00 	cmp.w	r9, #0
 800c022:	d102      	bne.n	800c02a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800c024:	2d00      	cmp	r5, #0
 800c026:	d042      	beq.n	800c0ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800c028:	b300      	cbz	r0, 800c06c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800c02a:	8c21      	ldrh	r1, [r4, #32]
 800c02c:	4419      	add	r1, r3
 800c02e:	458c      	cmp	ip, r1
 800c030:	da37      	bge.n	800c0a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c032:	8ae1      	ldrh	r1, [r4, #22]
 800c034:	2900      	cmp	r1, #0
 800c036:	d034      	beq.n	800c0a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c038:	4563      	cmp	r3, ip
 800c03a:	dd8d      	ble.n	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c03c:	e01d      	b.n	800c07a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800c03e:	8893      	ldrh	r3, [r2, #4]
 800c040:	8023      	strh	r3, [r4, #0]
 800c042:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800c046:	9901      	ldr	r1, [sp, #4]
 800c048:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c04c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800c050:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800c054:	ea4b 0b00 	orr.w	fp, fp, r0
 800c058:	68e0      	ldr	r0, [r4, #12]
 800c05a:	6803      	ldr	r3, [r0, #0]
 800c05c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c05e:	4798      	blx	r3
 800c060:	eb0b 0200 	add.w	r2, fp, r0
 800c064:	b292      	uxth	r2, r2
 800c066:	e7c5      	b.n	800bff4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c068:	2000      	movs	r0, #0
 800c06a:	e7d1      	b.n	800c010 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800c06c:	4563      	cmp	r3, ip
 800c06e:	f77f af73 	ble.w	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c072:	8ae3      	ldrh	r3, [r4, #22]
 800c074:	2b00      	cmp	r3, #0
 800c076:	f43f af6f 	beq.w	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c07a:	2301      	movs	r3, #1
 800c07c:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800c080:	8c22      	ldrh	r2, [r4, #32]
 800c082:	8be3      	ldrh	r3, [r4, #30]
 800c084:	4413      	add	r3, r2
 800c086:	83e3      	strh	r3, [r4, #30]
 800c088:	68e0      	ldr	r0, [r4, #12]
 800c08a:	6803      	ldr	r3, [r0, #0]
 800c08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c08e:	4798      	blx	r3
 800c090:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800c094:	4418      	add	r0, r3
 800c096:	8a63      	ldrh	r3, [r4, #18]
 800c098:	1a18      	subs	r0, r3, r0
 800c09a:	8260      	strh	r0, [r4, #18]
 800c09c:	b005      	add	sp, #20
 800c09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f7ff ff0e 	bl	800bec8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c0ac:	e754      	b.n	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c0ae:	4563      	cmp	r3, ip
 800c0b0:	dd14      	ble.n	800c0dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800c0b2:	b117      	cbz	r7, 800c0ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	460a      	mov	r2, r1
 800c0b8:	e772      	b.n	800bfa0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800c0ba:	2e00      	cmp	r6, #0
 800c0bc:	f43f af4c 	beq.w	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	f47f af49 	bne.w	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c0c6:	f1ba 0f00 	cmp.w	sl, #0
 800c0ca:	d002      	beq.n	800c0d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	4642      	mov	r2, r8
 800c0d0:	e767      	b.n	800bfa2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800c0d2:	8ae3      	ldrh	r3, [r4, #22]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f43f af3f 	beq.w	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c0da:	e7d5      	b.n	800c088 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	f47f af3b 	bne.w	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c0e2:	f1ba 0f00 	cmp.w	sl, #0
 800c0e6:	f43f af37 	beq.w	800bf58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	e7da      	b.n	800c0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800c0f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800c0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	b08f      	sub	sp, #60	@ 0x3c
 800c0f6:	4617      	mov	r7, r2
 800c0f8:	461c      	mov	r4, r3
 800c0fa:	460e      	mov	r6, r1
 800c0fc:	b1d1      	cbz	r1, 800c134 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4620      	mov	r0, r4
 800c102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c104:	4798      	blx	r3
 800c106:	4240      	negs	r0, r0
 800c108:	b200      	sxth	r0, r0
 800c10a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c10e:	9603      	str	r6, [sp, #12]
 800c110:	9700      	str	r7, [sp, #0]
 800c112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c116:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800c11a:	4629      	mov	r1, r5
 800c11c:	a805      	add	r0, sp, #20
 800c11e:	f7ff fcab 	bl	800ba78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c122:	2401      	movs	r4, #1
 800c124:	a805      	add	r0, sp, #20
 800c126:	f7ff fedf 	bl	800bee8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c12a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c12e:	b163      	cbz	r3, 800c14a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800c130:	3401      	adds	r4, #1
 800c132:	e7f7      	b.n	800c124 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800c134:	f002 fdee 	bl	800ed14 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c138:	2401      	movs	r4, #1
 800c13a:	280a      	cmp	r0, #10
 800c13c:	4628      	mov	r0, r5
 800c13e:	bf08      	it	eq
 800c140:	3401      	addeq	r4, #1
 800c142:	f002 fde7 	bl	800ed14 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c146:	2800      	cmp	r0, #0
 800c148:	d1f7      	bne.n	800c13a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800c14a:	b2a0      	uxth	r0, r4
 800c14c:	b00f      	add	sp, #60	@ 0x3c
 800c14e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c150 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	b0e3      	sub	sp, #396	@ 0x18c
 800c156:	461c      	mov	r4, r3
 800c158:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 800c15a:	4683      	mov	fp, r0
 800c15c:	4688      	mov	r8, r1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 8112 	beq.w	800c388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 810e 	beq.w	800c388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c16c:	7ba3      	ldrb	r3, [r4, #14]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 810a 	beq.w	800c388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c174:	6810      	ldr	r0, [r2, #0]
 800c176:	6851      	ldr	r1, [r2, #4]
 800c178:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800c17c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800c180:	ad0a      	add	r5, sp, #40	@ 0x28
 800c182:	462b      	mov	r3, r5
 800c184:	c303      	stmia	r3!, {r0, r1}
 800c186:	2100      	movs	r1, #0
 800c188:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800c18c:	910c      	str	r1, [sp, #48]	@ 0x30
 800c18e:	79a2      	ldrb	r2, [r4, #6]
 800c190:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c194:	a90c      	add	r1, sp, #48	@ 0x30
 800c196:	4628      	mov	r0, r5
 800c198:	f7ff fced 	bl	800bb76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c19c:	a90c      	add	r1, sp, #48	@ 0x30
 800c19e:	4608      	mov	r0, r1
 800c1a0:	79a2      	ldrb	r2, [r4, #6]
 800c1a2:	f7ff fce8 	bl	800bb76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c1a6:	a817      	add	r0, sp, #92	@ 0x5c
 800c1a8:	f002 f95f 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800c1ac:	6820      	ldr	r0, [r4, #0]
 800c1ae:	6803      	ldr	r3, [r0, #0]
 800c1b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1b2:	4798      	blx	r3
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	6820      	ldr	r0, [r4, #0]
 800c1b8:	6803      	ldr	r3, [r0, #0]
 800c1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1bc:	4798      	blx	r3
 800c1be:	4633      	mov	r3, r6
 800c1c0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800c1c2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800c1c4:	9000      	str	r0, [sp, #0]
 800c1c6:	a817      	add	r0, sp, #92	@ 0x5c
 800c1c8:	f002 f9aa 	bl	800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	f894 a004 	ldrb.w	sl, [r4, #4]
 800c1d2:	6803      	ldr	r3, [r0, #0]
 800c1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1d6:	4798      	blx	r3
 800c1d8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	4607      	mov	r7, r0
 800c1e0:	4406      	add	r6, r0
 800c1e2:	a830      	add	r0, sp, #192	@ 0xc0
 800c1e4:	f893 9009 	ldrb.w	r9, [r3, #9]
 800c1e8:	f002 f93f 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800c1ec:	7c23      	ldrb	r3, [r4, #16]
 800c1ee:	b17b      	cbz	r3, 800c210 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 800c1f0:	6820      	ldr	r0, [r4, #0]
 800c1f2:	6803      	ldr	r3, [r0, #0]
 800c1f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1f6:	4798      	blx	r3
 800c1f8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c1fa:	6820      	ldr	r0, [r4, #0]
 800c1fc:	6802      	ldr	r2, [r0, #0]
 800c1fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c200:	4790      	blx	r2
 800c202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c204:	9000      	str	r0, [sp, #0]
 800c206:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800c208:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800c20a:	a830      	add	r0, sp, #192	@ 0xc0
 800c20c:	f002 f988 	bl	800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c210:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800c214:	7be2      	ldrb	r2, [r4, #15]
 800c216:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c21a:	1a8a      	subs	r2, r1, r2
 800c21c:	7c21      	ldrb	r1, [r4, #16]
 800c21e:	9103      	str	r1, [sp, #12]
 800c220:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800c224:	9102      	str	r1, [sp, #8]
 800c226:	6821      	ldr	r1, [r4, #0]
 800c228:	9101      	str	r1, [sp, #4]
 800c22a:	7961      	ldrb	r1, [r4, #5]
 800c22c:	9100      	str	r1, [sp, #0]
 800c22e:	b292      	uxth	r2, r2
 800c230:	a930      	add	r1, sp, #192	@ 0xc0
 800c232:	a80e      	add	r0, sp, #56	@ 0x38
 800c234:	f7ff fc20 	bl	800ba78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c238:	2e00      	cmp	r6, #0
 800c23a:	dc5b      	bgt.n	800c2f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c23c:	af17      	add	r7, sp, #92	@ 0x5c
 800c23e:	f04f 0900 	mov.w	r9, #0
 800c242:	7c23      	ldrb	r3, [r4, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 80b1 	beq.w	800c3ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800c24a:	a80e      	add	r0, sp, #56	@ 0x38
 800c24c:	f7ff fe4c 	bl	800bee8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c250:	f1ba 0f00 	cmp.w	sl, #0
 800c254:	f000 80a5 	beq.w	800c3a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800c258:	7c23      	ldrb	r3, [r4, #16]
 800c25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c25c:	2264      	movs	r2, #100	@ 0x64
 800c25e:	4639      	mov	r1, r7
 800c260:	a849      	add	r0, sp, #292	@ 0x124
 800c262:	f006 fe3a 	bl	8012eda <memcpy>
 800c266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f000 80a7 	beq.w	800c3bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800c26e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800c272:	7922      	ldrb	r2, [r4, #4]
 800c274:	2a01      	cmp	r2, #1
 800c276:	f040 808a 	bne.w	800c38e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 800c27a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 800c27e:	1ac0      	subs	r0, r0, r3
 800c280:	2302      	movs	r3, #2
 800c282:	fb90 f0f3 	sdiv	r0, r0, r3
 800c286:	b200      	sxth	r0, r0
 800c288:	7c23      	ldrb	r3, [r4, #16]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f000 808b 	beq.w	800c3a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800c290:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 800c294:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 800c298:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c29c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800c2a0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800c2a4:	4410      	add	r0, r2
 800c2a6:	b200      	sxth	r0, r0
 800c2a8:	9000      	str	r0, [sp, #0]
 800c2aa:	e9cd 9703 	strd	r9, r7, [sp, #12]
 800c2ae:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800c2b2:	4642      	mov	r2, r8
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	4658      	mov	r0, fp
 800c2b8:	f7ff fc8e 	bl	800bbd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d163      	bne.n	800c388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c2c0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c2c4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800c2c8:	b2b2      	uxth	r2, r6
 800c2ca:	4413      	add	r3, r2
 800c2cc:	1a8a      	subs	r2, r1, r2
 800c2ce:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800c2d2:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 800c2d6:	b21b      	sxth	r3, r3
 800c2d8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c2dc:	2a00      	cmp	r2, #0
 800c2de:	d153      	bne.n	800c388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c2e0:	6822      	ldr	r2, [r4, #0]
 800c2e2:	8869      	ldrh	r1, [r5, #2]
 800c2e4:	7a12      	ldrb	r2, [r2, #8]
 800c2e6:	1a9b      	subs	r3, r3, r2
 800c2e8:	88ea      	ldrh	r2, [r5, #6]
 800c2ea:	440a      	add	r2, r1
 800c2ec:	b212      	sxth	r2, r2
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	dda7      	ble.n	800c242 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 800c2f2:	e049      	b.n	800c388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c2f4:	7c23      	ldrb	r3, [r4, #16]
 800c2f6:	444f      	add	r7, r9
 800c2f8:	b1c3      	cbz	r3, 800c32c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 800c2fa:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800c2fe:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c302:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c306:	443b      	add	r3, r7
 800c308:	4293      	cmp	r3, r2
 800c30a:	da97      	bge.n	800c23c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800c30c:	a80e      	add	r0, sp, #56	@ 0x38
 800c30e:	f7ff fdeb 	bl	800bee8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c312:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 800c316:	3b01      	subs	r3, #1
 800c318:	b29b      	uxth	r3, r3
 800c31a:	454b      	cmp	r3, r9
 800c31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c31e:	d021      	beq.n	800c364 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 800c320:	7961      	ldrb	r1, [r4, #5]
 800c322:	a817      	add	r0, sp, #92	@ 0x5c
 800c324:	f7f7 fb82 	bl	8003a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32a:	e7f4      	b.n	800c316 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 800c32c:	fa1f f986 	uxth.w	r9, r6
 800c330:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c334:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c338:	443b      	add	r3, r7
 800c33a:	4293      	cmp	r3, r2
 800c33c:	f6bf af7e 	bge.w	800c23c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800c340:	a817      	add	r0, sp, #92	@ 0x5c
 800c342:	f002 fce7 	bl	800ed14 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c346:	b1f8      	cbz	r0, 800c388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c348:	280a      	cmp	r0, #10
 800c34a:	d1f1      	bne.n	800c330 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800c34c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c350:	444b      	add	r3, r9
 800c352:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c356:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c35a:	eba3 0309 	sub.w	r3, r3, r9
 800c35e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c362:	e7e5      	b.n	800c330 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800c364:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800c368:	b2b3      	uxth	r3, r6
 800c36a:	441a      	add	r2, r3
 800c36c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800c370:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c37a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800c37e:	b11b      	cbz	r3, 800c388 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c380:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0ba      	beq.n	800c2fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 800c388:	b063      	add	sp, #396	@ 0x18c
 800c38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38e:	2a02      	cmp	r2, #2
 800c390:	d105      	bne.n	800c39e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 800c392:	7be2      	ldrb	r2, [r4, #15]
 800c394:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800c398:	1a80      	subs	r0, r0, r2
 800c39a:	1ac0      	subs	r0, r0, r3
 800c39c:	e773      	b.n	800c286 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800c39e:	2000      	movs	r0, #0
 800c3a0:	e772      	b.n	800c288 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800c3a2:	7be0      	ldrb	r0, [r4, #15]
 800c3a4:	e770      	b.n	800c288 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800c3a6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c3aa:	e773      	b.n	800c294 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 800c3ac:	f1ba 0f00 	cmp.w	sl, #0
 800c3b0:	d0f7      	beq.n	800c3a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800c3b2:	2264      	movs	r2, #100	@ 0x64
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	a849      	add	r0, sp, #292	@ 0x124
 800c3b8:	f006 fd8f 	bl	8012eda <memcpy>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c3c2:	6821      	ldr	r1, [r4, #0]
 800c3c4:	a849      	add	r0, sp, #292	@ 0x124
 800c3c6:	f7ff fb9a 	bl	800bafe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800c3ca:	b203      	sxth	r3, r0
 800c3cc:	e751      	b.n	800c272 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0800c3ce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d818      	bhi.n	800c404 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800c3d2:	e8df f003 	tbb	[pc, r3]
 800c3d6:	0602      	.short	0x0602
 800c3d8:	130d      	.short	0x130d
 800c3da:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c3de:	1850      	adds	r0, r2, r1
 800c3e0:	4770      	bx	lr
 800c3e2:	8803      	ldrh	r3, [r0, #0]
 800c3e4:	8880      	ldrh	r0, [r0, #4]
 800c3e6:	4418      	add	r0, r3
 800c3e8:	b200      	sxth	r0, r0
 800c3ea:	1a80      	subs	r0, r0, r2
 800c3ec:	3801      	subs	r0, #1
 800c3ee:	4770      	bx	lr
 800c3f0:	8803      	ldrh	r3, [r0, #0]
 800c3f2:	8880      	ldrh	r0, [r0, #4]
 800c3f4:	4418      	add	r0, r3
 800c3f6:	b200      	sxth	r0, r0
 800c3f8:	1a40      	subs	r0, r0, r1
 800c3fa:	e7f7      	b.n	800c3ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800c3fc:	f9b0 0000 	ldrsh.w	r0, [r0]
 800c400:	4410      	add	r0, r2
 800c402:	4770      	bx	lr
 800c404:	2000      	movs	r0, #0
 800c406:	4770      	bx	lr

0800c408 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800c408:	2b03      	cmp	r3, #3
 800c40a:	d817      	bhi.n	800c43c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800c40c:	e8df f003 	tbb	[pc, r3]
 800c410:	10090602 	.word	0x10090602
 800c414:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c418:	1850      	adds	r0, r2, r1
 800c41a:	4770      	bx	lr
 800c41c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c420:	e7fa      	b.n	800c418 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800c422:	8843      	ldrh	r3, [r0, #2]
 800c424:	88c0      	ldrh	r0, [r0, #6]
 800c426:	4418      	add	r0, r3
 800c428:	b200      	sxth	r0, r0
 800c42a:	1a80      	subs	r0, r0, r2
 800c42c:	3801      	subs	r0, #1
 800c42e:	4770      	bx	lr
 800c430:	8843      	ldrh	r3, [r0, #2]
 800c432:	88c0      	ldrh	r0, [r0, #6]
 800c434:	4418      	add	r0, r3
 800c436:	b200      	sxth	r0, r0
 800c438:	1a40      	subs	r0, r0, r1
 800c43a:	e7f7      	b.n	800c42c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800c43c:	2000      	movs	r0, #0
 800c43e:	4770      	bx	lr

0800c440 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800c440:	4b01      	ldr	r3, [pc, #4]	@ (800c448 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	4770      	bx	lr
 800c448:	20015438 	.word	0x20015438

0800c44c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800c44c:	4603      	mov	r3, r0
 800c44e:	b1c8      	cbz	r0, 800c484 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800c450:	0c02      	lsrs	r2, r0, #16
 800c452:	0412      	lsls	r2, r2, #16
 800c454:	b9a2      	cbnz	r2, 800c480 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800c456:	0403      	lsls	r3, r0, #16
 800c458:	2010      	movs	r0, #16
 800c45a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800c45e:	bf04      	itt	eq
 800c460:	021b      	lsleq	r3, r3, #8
 800c462:	3008      	addeq	r0, #8
 800c464:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800c468:	bf04      	itt	eq
 800c46a:	011b      	lsleq	r3, r3, #4
 800c46c:	3004      	addeq	r0, #4
 800c46e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800c472:	bf04      	itt	eq
 800c474:	009b      	lsleq	r3, r3, #2
 800c476:	3002      	addeq	r0, #2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	db04      	blt.n	800c486 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800c47c:	3001      	adds	r0, #1
 800c47e:	4770      	bx	lr
 800c480:	2000      	movs	r0, #0
 800c482:	e7ea      	b.n	800c45a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800c484:	2020      	movs	r0, #32
 800c486:	4770      	bx	lr

0800c488 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	b087      	sub	sp, #28
 800c48e:	460d      	mov	r5, r1
 800c490:	4616      	mov	r6, r2
 800c492:	4698      	mov	r8, r3
 800c494:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800c498:	4601      	mov	r1, r0
 800c49a:	b120      	cbz	r0, 800c4a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c49c:	b11a      	cbz	r2, 800c4a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c49e:	2d1f      	cmp	r5, #31
 800c4a0:	d801      	bhi.n	800c4a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c4a2:	2b1f      	cmp	r3, #31
 800c4a4:	d904      	bls.n	800c4b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	6038      	str	r0, [r7, #0]
 800c4aa:	b007      	add	sp, #28
 800c4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b0:	b97d      	cbnz	r5, 800c4d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800c4b2:	b143      	cbz	r3, 800c4c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	e9cd 4700 	strd	r4, r7, [sp]
 800c4ba:	462b      	mov	r3, r5
 800c4bc:	4641      	mov	r1, r8
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7ff ffe2 	bl	800c488 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c4c4:	e7f1      	b.n	800c4aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ca:	603b      	str	r3, [r7, #0]
 800c4cc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800c4d0:	e7eb      	b.n	800c4aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c4d2:	fa32 fa05 	lsrs.w	sl, r2, r5
 800c4d6:	d106      	bne.n	800c4e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800c4d8:	4346      	muls	r6, r0
 800c4da:	fbb6 f0f4 	udiv	r0, r6, r4
 800c4de:	fb04 6610 	mls	r6, r4, r0, r6
 800c4e2:	603e      	str	r6, [r7, #0]
 800c4e4:	e7e1      	b.n	800c4aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	40aa      	lsls	r2, r5
 800c4ea:	3a01      	subs	r2, #1
 800c4ec:	4016      	ands	r6, r2
 800c4ee:	fa00 fb05 	lsl.w	fp, r0, r5
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	fbbb f9f4 	udiv	r9, fp, r4
 800c4f8:	fb0a f309 	mul.w	r3, sl, r9
 800c4fc:	9303      	str	r3, [sp, #12]
 800c4fe:	f7ff ffa5 	bl	800c44c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c502:	462b      	mov	r3, r5
 800c504:	460a      	mov	r2, r1
 800c506:	e9cd 4700 	strd	r4, r7, [sp]
 800c50a:	4601      	mov	r1, r0
 800c50c:	4630      	mov	r0, r6
 800c50e:	f7ff ffbb 	bl	800c488 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c512:	fb04 b919 	mls	r9, r4, r9, fp
 800c516:	4606      	mov	r6, r0
 800c518:	4648      	mov	r0, r9
 800c51a:	eb05 0108 	add.w	r1, r5, r8
 800c51e:	f7ff ff95 	bl	800c44c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c522:	ab05      	add	r3, sp, #20
 800c524:	e9cd 4300 	strd	r4, r3, [sp]
 800c528:	464a      	mov	r2, r9
 800c52a:	4603      	mov	r3, r0
 800c52c:	4650      	mov	r0, sl
 800c52e:	f7ff ffab 	bl	800c488 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	9a05      	ldr	r2, [sp, #20]
 800c536:	9b03      	ldr	r3, [sp, #12]
 800c538:	4411      	add	r1, r2
 800c53a:	fbb1 f2f4 	udiv	r2, r1, r4
 800c53e:	18d3      	adds	r3, r2, r3
 800c540:	441e      	add	r6, r3
 800c542:	fb04 1412 	mls	r4, r4, r2, r1
 800c546:	4430      	add	r0, r6
 800c548:	603c      	str	r4, [r7, #0]
 800c54a:	e7ae      	b.n	800c4aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800c54c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800c54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c550:	b085      	sub	sp, #20
 800c552:	f1b0 0900 	subs.w	r9, r0, #0
 800c556:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c558:	461d      	mov	r5, r3
 800c55a:	bfbf      	itttt	lt
 800c55c:	6823      	ldrlt	r3, [r4, #0]
 800c55e:	425b      	neglt	r3, r3
 800c560:	f1c9 0900 	rsblt	r9, r9, #0
 800c564:	6023      	strlt	r3, [r4, #0]
 800c566:	bfb4      	ite	lt
 800c568:	f04f 36ff 	movlt.w	r6, #4294967295
 800c56c:	2601      	movge	r6, #1
 800c56e:	2a00      	cmp	r2, #0
 800c570:	4617      	mov	r7, r2
 800c572:	da04      	bge.n	800c57e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	425b      	negs	r3, r3
 800c578:	4257      	negs	r7, r2
 800c57a:	4276      	negs	r6, r6
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	2d00      	cmp	r5, #0
 800c580:	4638      	mov	r0, r7
 800c582:	bfba      	itte	lt
 800c584:	426d      	neglt	r5, r5
 800c586:	f04f 38ff 	movlt.w	r8, #4294967295
 800c58a:	f04f 0801 	movge.w	r8, #1
 800c58e:	f7ff ff5d 	bl	800c44c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c592:	ab03      	add	r3, sp, #12
 800c594:	e9cd 5300 	strd	r5, r3, [sp]
 800c598:	463a      	mov	r2, r7
 800c59a:	4603      	mov	r3, r0
 800c59c:	4648      	mov	r0, r9
 800c59e:	f7ff ff73 	bl	800c488 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	9a03      	ldr	r2, [sp, #12]
 800c5a6:	4546      	cmp	r6, r8
 800c5a8:	441a      	add	r2, r3
 800c5aa:	fb92 f3f5 	sdiv	r3, r2, r5
 800c5ae:	4418      	add	r0, r3
 800c5b0:	bf18      	it	ne
 800c5b2:	4240      	negne	r0, r0
 800c5b4:	fb05 2313 	mls	r3, r5, r3, r2
 800c5b8:	1c72      	adds	r2, r6, #1
 800c5ba:	6023      	str	r3, [r4, #0]
 800c5bc:	d105      	bne.n	800c5ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f1c3 0200 	rsb	r2, r3, #0
 800c5c4:	db0b      	blt.n	800c5de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800c5c6:	6022      	str	r2, [r4, #0]
 800c5c8:	e006      	b.n	800c5d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c5ca:	2e01      	cmp	r6, #1
 800c5cc:	d104      	bne.n	800c5d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	da02      	bge.n	800c5d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c5d2:	442b      	add	r3, r5
 800c5d4:	3801      	subs	r0, #1
 800c5d6:	6023      	str	r3, [r4, #0]
 800c5d8:	b005      	add	sp, #20
 800c5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5de:	3801      	subs	r0, #1
 800c5e0:	1b52      	subs	r2, r2, r5
 800c5e2:	e7f0      	b.n	800c5c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800c5e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800c5e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c5e8:	4c1c      	ldr	r4, [pc, #112]	@ (800c65c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800c5ea:	6807      	ldr	r7, [r0, #0]
 800c5ec:	69a3      	ldr	r3, [r4, #24]
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	b92b      	cbnz	r3, 800c5fe <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800c5f2:	6840      	ldr	r0, [r0, #4]
 800c5f4:	e9c5 7000 	strd	r7, r0, [r5]
 800c5f8:	b004      	add	sp, #16
 800c5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fe:	68a2      	ldr	r2, [r4, #8]
 800c600:	6820      	ldr	r0, [r4, #0]
 800c602:	ae04      	add	r6, sp, #16
 800c604:	f04f 0802 	mov.w	r8, #2
 800c608:	fb93 f1f8 	sdiv	r1, r3, r8
 800c60c:	440a      	add	r2, r1
 800c60e:	f846 2d04 	str.w	r2, [r6, #-4]!
 800c612:	69e1      	ldr	r1, [r4, #28]
 800c614:	9600      	str	r6, [sp, #0]
 800c616:	463a      	mov	r2, r7
 800c618:	f7ff ff98 	bl	800c54c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c61c:	69a3      	ldr	r3, [r4, #24]
 800c61e:	686a      	ldr	r2, [r5, #4]
 800c620:	6a21      	ldr	r1, [r4, #32]
 800c622:	9600      	str	r6, [sp, #0]
 800c624:	4607      	mov	r7, r0
 800c626:	6860      	ldr	r0, [r4, #4]
 800c628:	f7ff ff90 	bl	800c54c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c62c:	6962      	ldr	r2, [r4, #20]
 800c62e:	69a3      	ldr	r3, [r4, #24]
 800c630:	fb93 f8f8 	sdiv	r8, r3, r8
 800c634:	4442      	add	r2, r8
 800c636:	9203      	str	r2, [sp, #12]
 800c638:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c63a:	682a      	ldr	r2, [r5, #0]
 800c63c:	9600      	str	r6, [sp, #0]
 800c63e:	4407      	add	r7, r0
 800c640:	68e0      	ldr	r0, [r4, #12]
 800c642:	f7ff ff83 	bl	800c54c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c646:	9600      	str	r6, [sp, #0]
 800c648:	4680      	mov	r8, r0
 800c64a:	69a3      	ldr	r3, [r4, #24]
 800c64c:	686a      	ldr	r2, [r5, #4]
 800c64e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c650:	6920      	ldr	r0, [r4, #16]
 800c652:	f7ff ff7b 	bl	800c54c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c656:	4440      	add	r0, r8
 800c658:	e7cc      	b.n	800c5f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800c65a:	bf00      	nop
 800c65c:	2001543c 	.word	0x2001543c

0800c660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800c660:	4b07      	ldr	r3, [pc, #28]	@ (800c680 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d109      	bne.n	800c67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800c668:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c66c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c670:	8003      	strh	r3, [r0, #0]
 800c672:	4b04      	ldr	r3, [pc, #16]	@ (800c684 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	3b01      	subs	r3, #1
 800c678:	1a9b      	subs	r3, r3, r2
 800c67a:	800b      	strh	r3, [r1, #0]
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	20015428 	.word	0x20015428
 800c684:	20015424 	.word	0x20015424

0800c688 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800c688:	b510      	push	{r4, lr}
 800c68a:	4b07      	ldr	r3, [pc, #28]	@ (800c6a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d108      	bne.n	800c6a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800c692:	4b06      	ldr	r3, [pc, #24]	@ (800c6ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800c694:	880c      	ldrh	r4, [r1, #0]
 800c696:	881b      	ldrh	r3, [r3, #0]
 800c698:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	1b1b      	subs	r3, r3, r4
 800c6a0:	8003      	strh	r3, [r0, #0]
 800c6a2:	800a      	strh	r2, [r1, #0]
 800c6a4:	bd10      	pop	{r4, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20015428 	.word	0x20015428
 800c6ac:	20015424 	.word	0x20015424

0800c6b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c6dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d10e      	bne.n	800c6d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800c6ba:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c6be:	8843      	ldrh	r3, [r0, #2]
 800c6c0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c6c4:	8044      	strh	r4, [r0, #2]
 800c6c6:	18ca      	adds	r2, r1, r3
 800c6c8:	4b05      	ldr	r3, [pc, #20]	@ (800c6e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	1a9b      	subs	r3, r3, r2
 800c6ce:	8003      	strh	r3, [r0, #0]
 800c6d0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c6d4:	80c3      	strh	r3, [r0, #6]
 800c6d6:	8081      	strh	r1, [r0, #4]
 800c6d8:	bd10      	pop	{r4, pc}
 800c6da:	bf00      	nop
 800c6dc:	20015428 	.word	0x20015428
 800c6e0:	20015424 	.word	0x20015424

0800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800c6e4:	4b08      	ldr	r3, [pc, #32]	@ (800c708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d10c      	bne.n	800c706 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800c6ec:	8803      	ldrh	r3, [r0, #0]
 800c6ee:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800c6f2:	8842      	ldrh	r2, [r0, #2]
 800c6f4:	8002      	strh	r2, [r0, #0]
 800c6f6:	185a      	adds	r2, r3, r1
 800c6f8:	4b04      	ldr	r3, [pc, #16]	@ (800c70c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800c6fa:	881b      	ldrh	r3, [r3, #0]
 800c6fc:	1a9b      	subs	r3, r3, r2
 800c6fe:	8043      	strh	r3, [r0, #2]
 800c700:	88c3      	ldrh	r3, [r0, #6]
 800c702:	8083      	strh	r3, [r0, #4]
 800c704:	80c1      	strh	r1, [r0, #6]
 800c706:	4770      	bx	lr
 800c708:	20015428 	.word	0x20015428
 800c70c:	20015424 	.word	0x20015424

0800c710 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800c710:	b510      	push	{r4, lr}
 800c712:	4b07      	ldr	r3, [pc, #28]	@ (800c730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d108      	bne.n	800c72c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800c71a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c71e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c722:	8003      	strh	r3, [r0, #0]
 800c724:	8893      	ldrh	r3, [r2, #4]
 800c726:	3b01      	subs	r3, #1
 800c728:	1b1b      	subs	r3, r3, r4
 800c72a:	800b      	strh	r3, [r1, #0]
 800c72c:	bd10      	pop	{r4, pc}
 800c72e:	bf00      	nop
 800c730:	20015428 	.word	0x20015428

0800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800c734:	b510      	push	{r4, lr}
 800c736:	4b0a      	ldr	r3, [pc, #40]	@ (800c760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	460a      	mov	r2, r1
 800c73e:	d10d      	bne.n	800c75c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800c740:	8881      	ldrh	r1, [r0, #4]
 800c742:	8803      	ldrh	r3, [r0, #0]
 800c744:	440b      	add	r3, r1
 800c746:	4601      	mov	r1, r0
 800c748:	3b01      	subs	r3, #1
 800c74a:	f821 3b02 	strh.w	r3, [r1], #2
 800c74e:	f7ff ffdf 	bl	800c710 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800c752:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c756:	88c2      	ldrh	r2, [r0, #6]
 800c758:	8082      	strh	r2, [r0, #4]
 800c75a:	80c3      	strh	r3, [r0, #6]
 800c75c:	bd10      	pop	{r4, pc}
 800c75e:	bf00      	nop
 800c760:	20015428 	.word	0x20015428

0800c764 <_ZN8touchgfx11Application13requestRedrawEv>:
 800c764:	4b06      	ldr	r3, [pc, #24]	@ (800c780 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800c766:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c76a:	4b06      	ldr	r3, [pc, #24]	@ (800c784 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800c76c:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800c770:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c774:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800c778:	2100      	movs	r1, #0
 800c77a:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800c77e:	4770      	bx	lr
 800c780:	20015424 	.word	0x20015424
 800c784:	20015426 	.word	0x20015426

0800c788 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800c788:	4b03      	ldr	r3, [pc, #12]	@ (800c798 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800c78a:	6818      	ldr	r0, [r3, #0]
 800c78c:	b110      	cbz	r0, 800c794 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800c78e:	6803      	ldr	r3, [r0, #0]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	4718      	bx	r3
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	2001546c 	.word	0x2001546c

0800c79c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800c79c:	4770      	bx	lr
	...

0800c7a0 <_ZN8touchgfx11Application4drawEv>:
 800c7a0:	b507      	push	{r0, r1, r2, lr}
 800c7a2:	4b09      	ldr	r3, [pc, #36]	@ (800c7c8 <_ZN8touchgfx11Application4drawEv+0x28>)
 800c7a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c7a8:	4b08      	ldr	r3, [pc, #32]	@ (800c7cc <_ZN8touchgfx11Application4drawEv+0x2c>)
 800c7aa:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c7ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c7b6:	6803      	ldr	r3, [r0, #0]
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	9100      	str	r1, [sp, #0]
 800c7bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7be:	4669      	mov	r1, sp
 800c7c0:	4798      	blx	r3
 800c7c2:	b003      	add	sp, #12
 800c7c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7c8:	20015424 	.word	0x20015424
 800c7cc:	20015426 	.word	0x20015426

0800c7d0 <_ZN8touchgfx11Application10invalidateEv>:
 800c7d0:	4b09      	ldr	r3, [pc, #36]	@ (800c7f8 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800c7d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c7d6:	4b09      	ldr	r3, [pc, #36]	@ (800c7fc <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800c7d8:	b082      	sub	sp, #8
 800c7da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7de:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c7e8:	9100      	str	r1, [sp, #0]
 800c7ea:	6803      	ldr	r3, [r0, #0]
 800c7ec:	aa02      	add	r2, sp, #8
 800c7ee:	e912 0006 	ldmdb	r2, {r1, r2}
 800c7f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7f4:	b002      	add	sp, #8
 800c7f6:	4718      	bx	r3
 800c7f8:	20015424 	.word	0x20015424
 800c7fc:	20015426 	.word	0x20015426

0800c800 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800c800:	4b03      	ldr	r3, [pc, #12]	@ (800c810 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800c802:	6818      	ldr	r0, [r3, #0]
 800c804:	b110      	cbz	r0, 800c80c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800c806:	6803      	ldr	r3, [r0, #0]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	4718      	bx	r3
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	2001546c 	.word	0x2001546c

0800c814 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800c814:	4b03      	ldr	r3, [pc, #12]	@ (800c824 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	b110      	cbz	r0, 800c820 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800c81a:	6803      	ldr	r3, [r0, #0]
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	4718      	bx	r3
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	2001546c 	.word	0x2001546c

0800c828 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800c828:	2300      	movs	r3, #0
 800c82a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800c82e:	4770      	bx	lr

0800c830 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800c830:	4b03      	ldr	r3, [pc, #12]	@ (800c840 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800c832:	6818      	ldr	r0, [r3, #0]
 800c834:	b110      	cbz	r0, 800c83c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800c836:	6803      	ldr	r3, [r0, #0]
 800c838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c83a:	4718      	bx	r3
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	2001546c 	.word	0x2001546c

0800c844 <_ZN8touchgfx11ApplicationD1Ev>:
 800c844:	4770      	bx	lr

0800c846 <_ZN8touchgfx11ApplicationD0Ev>:
 800c846:	b510      	push	{r4, lr}
 800c848:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800c84c:	4604      	mov	r4, r0
 800c84e:	f006 f83f 	bl	80128d0 <_ZdlPvj>
 800c852:	4620      	mov	r0, r4
 800c854:	bd10      	pop	{r4, pc}

0800c856 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800c856:	b510      	push	{r4, lr}
 800c858:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c85c:	888a      	ldrh	r2, [r1, #4]
 800c85e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c862:	4422      	add	r2, r4
 800c864:	b212      	sxth	r2, r2
 800c866:	4293      	cmp	r3, r2
 800c868:	da15      	bge.n	800c896 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c86a:	8882      	ldrh	r2, [r0, #4]
 800c86c:	4413      	add	r3, r2
 800c86e:	b21b      	sxth	r3, r3
 800c870:	429c      	cmp	r4, r3
 800c872:	da10      	bge.n	800c896 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c874:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c878:	88c9      	ldrh	r1, [r1, #6]
 800c87a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c87e:	4419      	add	r1, r3
 800c880:	b209      	sxth	r1, r1
 800c882:	428a      	cmp	r2, r1
 800c884:	da07      	bge.n	800c896 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c886:	88c0      	ldrh	r0, [r0, #6]
 800c888:	4410      	add	r0, r2
 800c88a:	b200      	sxth	r0, r0
 800c88c:	4283      	cmp	r3, r0
 800c88e:	bfac      	ite	ge
 800c890:	2000      	movge	r0, #0
 800c892:	2001      	movlt	r0, #1
 800c894:	bd10      	pop	{r4, pc}
 800c896:	2000      	movs	r0, #0
 800c898:	e7fc      	b.n	800c894 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800c89a <_ZN8touchgfx4Rect10restrictToEss>:
 800c89a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	b510      	push	{r4, lr}
 800c8a2:	da04      	bge.n	800c8ae <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800c8a4:	8884      	ldrh	r4, [r0, #4]
 800c8a6:	4423      	add	r3, r4
 800c8a8:	8083      	strh	r3, [r0, #4]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	8003      	strh	r3, [r0, #0]
 800c8ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c8b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c8b6:	1b09      	subs	r1, r1, r4
 800c8b8:	428b      	cmp	r3, r1
 800c8ba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800c8be:	bfc8      	it	gt
 800c8c0:	8081      	strhgt	r1, [r0, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da04      	bge.n	800c8d0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800c8c6:	88c1      	ldrh	r1, [r0, #6]
 800c8c8:	440b      	add	r3, r1
 800c8ca:	80c3      	strh	r3, [r0, #6]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	8043      	strh	r3, [r0, #2]
 800c8d0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c8d4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c8d8:	1a52      	subs	r2, r2, r1
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	bfc8      	it	gt
 800c8de:	80c2      	strhgt	r2, [r0, #6]
 800c8e0:	bd10      	pop	{r4, pc}
	...

0800c8e4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	4b10      	ldr	r3, [pc, #64]	@ (800c928 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800c8e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c92c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c8f6:	f7ff ffd0 	bl	800c89a <_ZN8touchgfx4Rect10restrictToEss>
 800c8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c930 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800c8fc:	6818      	ldr	r0, [r3, #0]
 800c8fe:	b190      	cbz	r0, 800c926 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800c900:	6803      	ldr	r3, [r0, #0]
 800c902:	4621      	mov	r1, r4
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	4798      	blx	r3
 800c908:	4b0a      	ldr	r3, [pc, #40]	@ (800c934 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	b118      	cbz	r0, 800c916 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800c90e:	6803      	ldr	r3, [r0, #0]
 800c910:	4621      	mov	r1, r4
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	4798      	blx	r3
 800c916:	4b08      	ldr	r3, [pc, #32]	@ (800c938 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	6803      	ldr	r3, [r0, #0]
 800c91c:	4621      	mov	r1, r4
 800c91e:	69db      	ldr	r3, [r3, #28]
 800c920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c924:	4718      	bx	r3
 800c926:	bd10      	pop	{r4, pc}
 800c928:	20015426 	.word	0x20015426
 800c92c:	20015424 	.word	0x20015424
 800c930:	2001546c 	.word	0x2001546c
 800c934:	20015468 	.word	0x20015468
 800c938:	20015430 	.word	0x20015430

0800c93c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93e:	4606      	mov	r6, r0
 800c940:	4608      	mov	r0, r1
 800c942:	460f      	mov	r7, r1
 800c944:	f7fc fd93 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800c948:	b9e8      	cbnz	r0, 800c986 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800c94a:	f9b7 5000 	ldrsh.w	r5, [r7]
 800c94e:	f9b6 4000 	ldrsh.w	r4, [r6]
 800c952:	42a5      	cmp	r5, r4
 800c954:	db17      	blt.n	800c986 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800c956:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c95a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800c95e:	429a      	cmp	r2, r3
 800c960:	db11      	blt.n	800c986 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800c962:	88b9      	ldrh	r1, [r7, #4]
 800c964:	440d      	add	r5, r1
 800c966:	88b1      	ldrh	r1, [r6, #4]
 800c968:	440c      	add	r4, r1
 800c96a:	b22d      	sxth	r5, r5
 800c96c:	b224      	sxth	r4, r4
 800c96e:	42a5      	cmp	r5, r4
 800c970:	dc09      	bgt.n	800c986 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800c972:	88f8      	ldrh	r0, [r7, #6]
 800c974:	4410      	add	r0, r2
 800c976:	88f2      	ldrh	r2, [r6, #6]
 800c978:	4413      	add	r3, r2
 800c97a:	b200      	sxth	r0, r0
 800c97c:	b21b      	sxth	r3, r3
 800c97e:	4298      	cmp	r0, r3
 800c980:	bfcc      	ite	gt
 800c982:	2000      	movgt	r0, #0
 800c984:	2001      	movle	r0, #1
 800c986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c988 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800c988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98a:	4604      	mov	r4, r0
 800c98c:	4608      	mov	r0, r1
 800c98e:	460d      	mov	r5, r1
 800c990:	f7fc fd6d 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800c994:	b978      	cbnz	r0, 800c9b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800c996:	4620      	mov	r0, r4
 800c998:	f7fc fd69 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800c99c:	f9b5 6000 	ldrsh.w	r6, [r5]
 800c9a0:	b150      	cbz	r0, 800c9b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800c9a2:	8026      	strh	r6, [r4, #0]
 800c9a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800c9a8:	8063      	strh	r3, [r4, #2]
 800c9aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c9ae:	80a3      	strh	r3, [r4, #4]
 800c9b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800c9b4:	80e3      	strh	r3, [r4, #6]
 800c9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 800c9bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c9c0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800c9c4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800c9c8:	88ed      	ldrh	r5, [r5, #6]
 800c9ca:	42b1      	cmp	r1, r6
 800c9cc:	460f      	mov	r7, r1
 800c9ce:	bfa8      	it	ge
 800c9d0:	4637      	movge	r7, r6
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	4466      	add	r6, ip
 800c9d8:	bfa8      	it	ge
 800c9da:	4610      	movge	r0, r2
 800c9dc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800c9e0:	8027      	strh	r7, [r4, #0]
 800c9e2:	442a      	add	r2, r5
 800c9e4:	88e5      	ldrh	r5, [r4, #6]
 800c9e6:	8060      	strh	r0, [r4, #2]
 800c9e8:	4461      	add	r1, ip
 800c9ea:	442b      	add	r3, r5
 800c9ec:	b236      	sxth	r6, r6
 800c9ee:	b209      	sxth	r1, r1
 800c9f0:	b212      	sxth	r2, r2
 800c9f2:	b21b      	sxth	r3, r3
 800c9f4:	428e      	cmp	r6, r1
 800c9f6:	bfac      	ite	ge
 800c9f8:	ebc7 0106 	rsbge	r1, r7, r6
 800c9fc:	ebc7 0101 	rsblt	r1, r7, r1
 800ca00:	429a      	cmp	r2, r3
 800ca02:	bfac      	ite	ge
 800ca04:	ebc0 0202 	rsbge	r2, r0, r2
 800ca08:	ebc0 0203 	rsblt	r2, r0, r3
 800ca0c:	80a1      	strh	r1, [r4, #4]
 800ca0e:	80e2      	strh	r2, [r4, #6]
 800ca10:	e7d1      	b.n	800c9b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800ca14 <_ZN8touchgfx11Application11getInstanceEv>:
 800ca14:	4b01      	ldr	r3, [pc, #4]	@ (800ca1c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800ca16:	6818      	ldr	r0, [r3, #0]
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	2001547c 	.word	0x2001547c

0800ca20 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800ca20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca22:	4b10      	ldr	r3, [pc, #64]	@ (800ca64 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	4605      	mov	r5, r0
 800ca28:	b1d3      	cbz	r3, 800ca60 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800ca2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ca68 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800ca2c:	4f0f      	ldr	r7, [pc, #60]	@ (800ca6c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800ca2e:	881c      	ldrh	r4, [r3, #0]
 800ca30:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800ca34:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800ca38:	42a3      	cmp	r3, r4
 800ca3a:	d90e      	bls.n	800ca5a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ca42:	b10a      	cbz	r2, 800ca48 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800ca44:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ca46:	b900      	cbnz	r0, 800ca4a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800ca48:	6898      	ldr	r0, [r3, #8]
 800ca4a:	6803      	ldr	r3, [r0, #0]
 800ca4c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	3401      	adds	r4, #1
 800ca54:	4798      	blx	r3
 800ca56:	b2a4      	uxth	r4, r4
 800ca58:	e7ec      	b.n	800ca34 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800ca60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca62:	bf00      	nop
 800ca64:	2001542e 	.word	0x2001542e
 800ca68:	20000084 	.word	0x20000084
 800ca6c:	20015430 	.word	0x20015430

0800ca70 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800ca70:	b510      	push	{r4, lr}
 800ca72:	2300      	movs	r3, #0
 800ca74:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800ca78:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800ca7c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800ca80:	4604      	mov	r4, r0
 800ca82:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800ca86:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d90e      	bls.n	800caac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800ca8e:	18e2      	adds	r2, r4, r3
 800ca90:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800ca94:	b122      	cbz	r2, 800caa0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800ca96:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ca9a:	6803      	ldr	r3, [r0, #0]
 800ca9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca9e:	4798      	blx	r3
 800caa0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800caa4:	3301      	adds	r3, #1
 800caa6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800caaa:	e7ea      	b.n	800ca82 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800caac:	bd10      	pop	{r4, pc}

0800caae <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800caae:	2300      	movs	r3, #0
 800cab0:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800cab4:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800cab8:	30a4      	adds	r0, #164	@ 0xa4
 800caba:	f802 3b01 	strb.w	r3, [r2], #1
 800cabe:	4282      	cmp	r2, r0
 800cac0:	d1fb      	bne.n	800caba <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800cac2:	4770      	bx	lr

0800cac4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800cac4:	b570      	push	{r4, r5, r6, lr}
 800cac6:	4c0b      	ldr	r4, [pc, #44]	@ (800caf4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800cac8:	4605      	mov	r5, r0
 800caca:	6820      	ldr	r0, [r4, #0]
 800cacc:	460e      	mov	r6, r1
 800cace:	b110      	cbz	r0, 800cad6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800cad0:	6803      	ldr	r3, [r0, #0]
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	4798      	blx	r3
 800cad6:	1d28      	adds	r0, r5, #4
 800cad8:	f7ff ffe9 	bl	800caae <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800cadc:	6026      	str	r6, [r4, #0]
 800cade:	6833      	ldr	r3, [r6, #0]
 800cae0:	4630      	mov	r0, r6
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	4798      	blx	r3
 800cae6:	682b      	ldr	r3, [r5, #0]
 800cae8:	4628      	mov	r0, r5
 800caea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800caf0:	4718      	bx	r3
 800caf2:	bf00      	nop
 800caf4:	2001546c 	.word	0x2001546c

0800caf8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800caf8:	2300      	movs	r3, #0
 800cafa:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800cafe:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800cb02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb04:	461a      	mov	r2, r3
 800cb06:	461c      	mov	r4, r3
 800cb08:	461d      	mov	r5, r3
 800cb0a:	459c      	cmp	ip, r3
 800cb0c:	dd1a      	ble.n	800cb44 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800cb0e:	18c6      	adds	r6, r0, r3
 800cb10:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800cb14:	b16e      	cbz	r6, 800cb32 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d008      	beq.n	800cb2c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800cb1a:	fa1f fe82 	uxth.w	lr, r2
 800cb1e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800cb22:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800cb26:	1887      	adds	r7, r0, r2
 800cb28:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800cb2c:	3201      	adds	r2, #1
 800cb2e:	3301      	adds	r3, #1
 800cb30:	e7eb      	b.n	800cb0a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800cb32:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800cb36:	4299      	cmp	r1, r3
 800cb38:	bfa8      	it	ge
 800cb3a:	3501      	addge	r5, #1
 800cb3c:	429e      	cmp	r6, r3
 800cb3e:	bfc8      	it	gt
 800cb40:	3401      	addgt	r4, #1
 800cb42:	e7f4      	b.n	800cb2e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800cb44:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800cb48:	1b49      	subs	r1, r1, r5
 800cb4a:	1b1b      	subs	r3, r3, r4
 800cb4c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800cb50:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800cb54:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	dd03      	ble.n	800cb64 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800cb62:	e7f7      	b.n	800cb54 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800cb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cb68 <_ZN8touchgfx11Application15handleTickEventEv>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	4d16      	ldr	r5, [pc, #88]	@ (800cbc4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	6828      	ldr	r0, [r5, #0]
 800cb70:	b140      	cbz	r0, 800cb84 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800cb72:	7a03      	ldrb	r3, [r0, #8]
 800cb74:	b933      	cbnz	r3, 800cb84 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800cb76:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800cb7a:	6803      	ldr	r3, [r0, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb82:	4718      	bx	r3
 800cb84:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800cb88:	4e0f      	ldr	r6, [pc, #60]	@ (800cbc8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800cb8a:	b973      	cbnz	r3, 800cbaa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cb8c:	b168      	cbz	r0, 800cbaa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cb8e:	7a03      	ldrb	r3, [r0, #8]
 800cb90:	b15b      	cbz	r3, 800cbaa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cb92:	6830      	ldr	r0, [r6, #0]
 800cb94:	b110      	cbz	r0, 800cb9c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800cb96:	6803      	ldr	r3, [r0, #0]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	4798      	blx	r3
 800cb9c:	6828      	ldr	r0, [r5, #0]
 800cb9e:	6803      	ldr	r3, [r0, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	4798      	blx	r3
 800cba4:	2301      	movs	r3, #1
 800cba6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800cbaa:	3404      	adds	r4, #4
 800cbac:	4620      	mov	r0, r4
 800cbae:	f7ff ff5f 	bl	800ca70 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f7ff ffa0 	bl	800caf8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800cbb8:	6830      	ldr	r0, [r6, #0]
 800cbba:	b110      	cbz	r0, 800cbc2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800cbbc:	6803      	ldr	r3, [r0, #0]
 800cbbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc0:	e7dd      	b.n	800cb7e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800cbc2:	bd70      	pop	{r4, r5, r6, pc}
 800cbc4:	20015470 	.word	0x20015470
 800cbc8:	2001546c 	.word	0x2001546c

0800cbcc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800cbcc:	4603      	mov	r3, r0
 800cbce:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	801a      	strh	r2, [r3, #0]
 800cbd6:	805a      	strh	r2, [r3, #2]
 800cbd8:	809a      	strh	r2, [r3, #4]
 800cbda:	80da      	strh	r2, [r3, #6]
 800cbdc:	3308      	adds	r3, #8
 800cbde:	428b      	cmp	r3, r1
 800cbe0:	d1f8      	bne.n	800cbd4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800cbe2:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800cbe6:	4770      	bx	lr

0800cbe8 <_ZN8touchgfx11ApplicationC1Ev>:
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbea:	4606      	mov	r6, r0
 800cbec:	4b1c      	ldr	r3, [pc, #112]	@ (800cc60 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800cbee:	f846 3b04 	str.w	r3, [r6], #4
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	2500      	movs	r5, #0
 800cbf6:	22a8      	movs	r2, #168	@ 0xa8
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f006 f89d 	bl	8012d3a <memset>
 800cc00:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800cc04:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800cc08:	f7ff ffe0 	bl	800cbcc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800cc0c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800cc10:	f7ff ffdc 	bl	800cbcc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800cc14:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800cc18:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800cc1c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800cc20:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800cc24:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800cc28:	490e      	ldr	r1, [pc, #56]	@ (800cc64 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800cc2a:	480f      	ldr	r0, [pc, #60]	@ (800cc68 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800cc2c:	4f0f      	ldr	r7, [pc, #60]	@ (800cc6c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800cc2e:	f005 fd07 	bl	8012640 <CRC_Lock>
 800cc32:	4b0f      	ldr	r3, [pc, #60]	@ (800cc70 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800cc34:	b158      	cbz	r0, 800cc4e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800cc36:	801d      	strh	r5, [r3, #0]
 800cc38:	4a0e      	ldr	r2, [pc, #56]	@ (800cc74 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	4a0e      	ldr	r2, [pc, #56]	@ (800cc78 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800cc40:	603b      	str	r3, [r7, #0]
 800cc42:	4630      	mov	r0, r6
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	f7ff ff32 	bl	800caae <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cc52:	2002      	movs	r0, #2
 800cc54:	801a      	strh	r2, [r3, #0]
 800cc56:	6038      	str	r0, [r7, #0]
 800cc58:	f001 fa5a 	bl	800e110 <_ZN8touchgfx6Screen4drawEv>
 800cc5c:	e7ec      	b.n	800cc38 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800cc5e:	bf00      	nop
 800cc60:	080157d4 	.word	0x080157d4
 800cc64:	b5e8b5cd 	.word	0xb5e8b5cd
 800cc68:	f407a5c2 	.word	0xf407a5c2
 800cc6c:	2001546c 	.word	0x2001546c
 800cc70:	20000084 	.word	0x20000084
 800cc74:	2001547c 	.word	0x2001547c
 800cc78:	20015470 	.word	0x20015470

0800cc7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800cc7c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800cc80:	3b01      	subs	r3, #1
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	428b      	cmp	r3, r1
 800cc86:	b510      	push	{r4, lr}
 800cc88:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800cc8c:	d908      	bls.n	800cca0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800cc8e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cc92:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	6062      	str	r2, [r4, #4]
 800cca0:	bd10      	pop	{r4, pc}
	...

0800cca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800cca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca8:	4b8f      	ldr	r3, [pc, #572]	@ (800cee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800ccaa:	b08f      	sub	sp, #60	@ 0x3c
 800ccac:	ac0a      	add	r4, sp, #40	@ 0x28
 800ccae:	e884 0006 	stmia.w	r4, {r1, r2}
 800ccb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ccb6:	4b8d      	ldr	r3, [pc, #564]	@ (800ceec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800ccb8:	4683      	mov	fp, r0
 800ccba:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f7ff fdeb 	bl	800c89a <_ZN8touchgfx4Rect10restrictToEss>
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7fc fbd2 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d16a      	bne.n	800cda4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ccce:	9403      	str	r4, [sp, #12]
 800ccd0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800ccd4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800ccd8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800ccdc:	35a4      	adds	r5, #164	@ 0xa4
 800ccde:	9301      	str	r3, [sp, #4]
 800cce0:	b15c      	cbz	r4, 800ccfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800cce2:	4629      	mov	r1, r5
 800cce4:	9803      	ldr	r0, [sp, #12]
 800cce6:	f7ff fe29 	bl	800c93c <_ZNK8touchgfx4Rect8includesERKS0_>
 800ccea:	3c01      	subs	r4, #1
 800ccec:	b118      	cbz	r0, 800ccf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800ccee:	b2a1      	uxth	r1, r4
 800ccf0:	9801      	ldr	r0, [sp, #4]
 800ccf2:	f7ff ffc3 	bl	800cc7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ccf6:	3d08      	subs	r5, #8
 800ccf8:	e7f2      	b.n	800cce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800ccfa:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800ccfe:	f8cd a010 	str.w	sl, [sp, #16]
 800cd02:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cd06:	9302      	str	r3, [sp, #8]
 800cd08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cd0c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800cd10:	9306      	str	r3, [sp, #24]
 800cd12:	445c      	add	r4, fp
 800cd14:	2500      	movs	r5, #0
 800cd16:	4626      	mov	r6, r4
 800cd18:	f8cd a014 	str.w	sl, [sp, #20]
 800cd1c:	462f      	mov	r7, r5
 800cd1e:	9b05      	ldr	r3, [sp, #20]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d073      	beq.n	800ce0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800cd24:	9903      	ldr	r1, [sp, #12]
 800cd26:	4630      	mov	r0, r6
 800cd28:	f7ff fd95 	bl	800c856 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cd2c:	b350      	cbz	r0, 800cd84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800cd2e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800cd32:	f9b6 c000 	ldrsh.w	ip, [r6]
 800cd36:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800cd3a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800cd3e:	45e6      	cmp	lr, ip
 800cd40:	db33      	blt.n	800cdaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800cd42:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800cd46:	88b3      	ldrh	r3, [r6, #4]
 800cd48:	4472      	add	r2, lr
 800cd4a:	4463      	add	r3, ip
 800cd4c:	b212      	sxth	r2, r2
 800cd4e:	b21b      	sxth	r3, r3
 800cd50:	429a      	cmp	r2, r3
 800cd52:	dc2a      	bgt.n	800cdaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800cd54:	88f3      	ldrh	r3, [r6, #6]
 800cd56:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800cd5a:	fa1f f289 	uxth.w	r2, r9
 800cd5e:	4413      	add	r3, r2
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	45c8      	cmp	r8, r9
 800cd64:	fa1f fc88 	uxth.w	ip, r8
 800cd68:	fa0f fe83 	sxth.w	lr, r3
 800cd6c:	db0f      	blt.n	800cd8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800cd6e:	eba3 030c 	sub.w	r3, r3, ip
 800cd72:	1ac9      	subs	r1, r1, r3
 800cd74:	b209      	sxth	r1, r1
 800cd76:	2900      	cmp	r1, #0
 800cd78:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800cd7c:	dd12      	ble.n	800cda4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800cd7e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800cd82:	4605      	mov	r5, r0
 800cd84:	9b05      	ldr	r3, [sp, #20]
 800cd86:	3b01      	subs	r3, #1
 800cd88:	9305      	str	r3, [sp, #20]
 800cd8a:	3e08      	subs	r6, #8
 800cd8c:	e7c7      	b.n	800cd1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800cd8e:	4461      	add	r1, ip
 800cd90:	b209      	sxth	r1, r1
 800cd92:	4571      	cmp	r1, lr
 800cd94:	dc38      	bgt.n	800ce08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cd96:	eba2 020c 	sub.w	r2, r2, ip
 800cd9a:	b212      	sxth	r2, r2
 800cd9c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800cda0:	2a00      	cmp	r2, #0
 800cda2:	dcee      	bgt.n	800cd82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800cda4:	b00f      	add	sp, #60	@ 0x3c
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdaa:	45c8      	cmp	r8, r9
 800cdac:	db2c      	blt.n	800ce08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cdae:	88f3      	ldrh	r3, [r6, #6]
 800cdb0:	4499      	add	r9, r3
 800cdb2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800cdb6:	4498      	add	r8, r3
 800cdb8:	fa0f f989 	sxth.w	r9, r9
 800cdbc:	fa0f f888 	sxth.w	r8, r8
 800cdc0:	45c1      	cmp	r9, r8
 800cdc2:	db21      	blt.n	800ce08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cdc4:	88b3      	ldrh	r3, [r6, #4]
 800cdc6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800cdca:	fa1f f28c 	uxth.w	r2, ip
 800cdce:	4413      	add	r3, r2
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	45e6      	cmp	lr, ip
 800cdd4:	fa1f f88e 	uxth.w	r8, lr
 800cdd8:	fa0f f983 	sxth.w	r9, r3
 800cddc:	db0a      	blt.n	800cdf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800cdde:	eba3 0308 	sub.w	r3, r3, r8
 800cde2:	1ac9      	subs	r1, r1, r3
 800cde4:	b209      	sxth	r1, r1
 800cde6:	2900      	cmp	r1, #0
 800cde8:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800cdec:	ddda      	ble.n	800cda4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800cdee:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800cdf2:	e7c6      	b.n	800cd82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800cdf4:	4441      	add	r1, r8
 800cdf6:	b209      	sxth	r1, r1
 800cdf8:	4549      	cmp	r1, r9
 800cdfa:	dc05      	bgt.n	800ce08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cdfc:	eba2 0208 	sub.w	r2, r2, r8
 800ce00:	b212      	sxth	r2, r2
 800ce02:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800ce06:	e7cb      	b.n	800cda0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800ce08:	4607      	mov	r7, r0
 800ce0a:	e7bb      	b.n	800cd84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	d181      	bne.n	800cd14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800ce10:	2f00      	cmp	r7, #0
 800ce12:	f000 81dd 	beq.w	800d1d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800ce16:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800ce1a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800ce1e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800ce22:	b2b3      	uxth	r3, r6
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	9a05      	ldr	r2, [sp, #20]
 800ce28:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800ce2c:	4413      	add	r3, r2
 800ce2e:	b2ba      	uxth	r2, r7
 800ce30:	4492      	add	sl, r2
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	fa1f fa8a 	uxth.w	sl, sl
 800ce38:	fa0f f883 	sxth.w	r8, r3
 800ce3c:	fa0f f98a 	sxth.w	r9, sl
 800ce40:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800ce44:	9b04      	ldr	r3, [sp, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d052      	beq.n	800cef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800ce4a:	9903      	ldr	r1, [sp, #12]
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f7ff fd02 	bl	800c856 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800ce52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ce56:	b1c0      	cbz	r0, 800ce8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800ce58:	f9b4 e000 	ldrsh.w	lr, [r4]
 800ce5c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ce60:	4576      	cmp	r6, lr
 800ce62:	dc22      	bgt.n	800ceaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800ce64:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800ce68:	44f4      	add	ip, lr
 800ce6a:	fa0f fc8c 	sxth.w	ip, ip
 800ce6e:	45e0      	cmp	r8, ip
 800ce70:	db1b      	blt.n	800ceaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800ce72:	428f      	cmp	r7, r1
 800ce74:	fa1f fc81 	uxth.w	ip, r1
 800ce78:	88e1      	ldrh	r1, [r4, #6]
 800ce7a:	dc0d      	bgt.n	800ce98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800ce7c:	ebaa 0c0c 	sub.w	ip, sl, ip
 800ce80:	eba1 010c 	sub.w	r1, r1, ip
 800ce84:	f8a4 9002 	strh.w	r9, [r4, #2]
 800ce88:	80e1      	strh	r1, [r4, #6]
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	9904      	ldr	r1, [sp, #16]
 800ce8e:	3901      	subs	r1, #1
 800ce90:	9104      	str	r1, [sp, #16]
 800ce92:	3c08      	subs	r4, #8
 800ce94:	4605      	mov	r5, r0
 800ce96:	e7d3      	b.n	800ce40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800ce98:	4461      	add	r1, ip
 800ce9a:	b209      	sxth	r1, r1
 800ce9c:	4549      	cmp	r1, r9
 800ce9e:	dcf5      	bgt.n	800ce8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800cea0:	eba2 0c0c 	sub.w	ip, r2, ip
 800cea4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800cea8:	e7ef      	b.n	800ce8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800ceaa:	428f      	cmp	r7, r1
 800ceac:	dcee      	bgt.n	800ce8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800ceae:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800ceb2:	4461      	add	r1, ip
 800ceb4:	b209      	sxth	r1, r1
 800ceb6:	4589      	cmp	r9, r1
 800ceb8:	dbe8      	blt.n	800ce8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800ceba:	4576      	cmp	r6, lr
 800cebc:	fa1f fc8e 	uxth.w	ip, lr
 800cec0:	88a1      	ldrh	r1, [r4, #4]
 800cec2:	dc07      	bgt.n	800ced4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800cec4:	eba3 0c0c 	sub.w	ip, r3, ip
 800cec8:	eba1 010c 	sub.w	r1, r1, ip
 800cecc:	f8a4 8000 	strh.w	r8, [r4]
 800ced0:	80a1      	strh	r1, [r4, #4]
 800ced2:	e7da      	b.n	800ce8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800ced4:	4461      	add	r1, ip
 800ced6:	b209      	sxth	r1, r1
 800ced8:	4588      	cmp	r8, r1
 800ceda:	dbd7      	blt.n	800ce8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800cedc:	9905      	ldr	r1, [sp, #20]
 800cede:	eba1 0c0c 	sub.w	ip, r1, ip
 800cee2:	f8a4 c004 	strh.w	ip, [r4, #4]
 800cee6:	e7d0      	b.n	800ce8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800cee8:	20015426 	.word	0x20015426
 800ceec:	20015424 	.word	0x20015424
 800cef0:	2d00      	cmp	r5, #0
 800cef2:	f000 816d 	beq.w	800d1d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800cef6:	9b06      	ldr	r3, [sp, #24]
 800cef8:	445b      	add	r3, fp
 800cefa:	461c      	mov	r4, r3
 800cefc:	9b02      	ldr	r3, [sp, #8]
 800cefe:	3301      	adds	r3, #1
 800cf00:	f000 8166 	beq.w	800d1d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800cf04:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800cf08:	4629      	mov	r1, r5
 800cf0a:	9803      	ldr	r0, [sp, #12]
 800cf0c:	f7ff fd16 	bl	800c93c <_ZNK8touchgfx4Rect8includesERKS0_>
 800cf10:	b120      	cbz	r0, 800cf1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800cf12:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800cf16:	9801      	ldr	r0, [sp, #4]
 800cf18:	f7ff feb0 	bl	800cc7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800cf1c:	9903      	ldr	r1, [sp, #12]
 800cf1e:	4628      	mov	r0, r5
 800cf20:	f7ff fc99 	bl	800c856 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	f000 809c 	beq.w	800d062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800cf2a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800cf2e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800cf32:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800cf36:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf38:	fa1f f189 	uxth.w	r1, r9
 800cf3c:	eb01 0c03 	add.w	ip, r1, r3
 800cf40:	fa1f fa8c 	uxth.w	sl, ip
 800cf44:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800cf48:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800cf4c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800cf50:	b283      	uxth	r3, r0
 800cf52:	eb03 050c 	add.w	r5, r3, ip
 800cf56:	b2ad      	uxth	r5, r5
 800cf58:	9505      	str	r5, [sp, #20]
 800cf5a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800cf5e:	9504      	str	r5, [sp, #16]
 800cf60:	4548      	cmp	r0, r9
 800cf62:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800cf66:	f340 8099 	ble.w	800d09c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800cf6a:	1a5b      	subs	r3, r3, r1
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	4596      	cmp	lr, r2
 800cf70:	fa0f f08a 	sxth.w	r0, sl
 800cf74:	b21e      	sxth	r6, r3
 800cf76:	dd2e      	ble.n	800cfd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800cf78:	9f02      	ldr	r7, [sp, #8]
 800cf7a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800cf7e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800cf82:	9f04      	ldr	r7, [sp, #16]
 800cf84:	1a3f      	subs	r7, r7, r0
 800cf86:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800cf8a:	fa1f fe8e 	uxth.w	lr, lr
 800cf8e:	b292      	uxth	r2, r2
 800cf90:	ebae 0102 	sub.w	r1, lr, r2
 800cf94:	44a6      	add	lr, r4
 800cf96:	4402      	add	r2, r0
 800cf98:	b289      	uxth	r1, r1
 800cf9a:	fa0f fe8e 	sxth.w	lr, lr
 800cf9e:	b212      	sxth	r2, r2
 800cfa0:	b20d      	sxth	r5, r1
 800cfa2:	ebae 0202 	sub.w	r2, lr, r2
 800cfa6:	436f      	muls	r7, r5
 800cfa8:	4372      	muls	r2, r6
 800cfaa:	4297      	cmp	r7, r2
 800cfac:	db09      	blt.n	800cfc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800cfae:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800cfb2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800cfb6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800cfba:	449c      	add	ip, r3
 800cfbc:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800cfc0:	e686      	b.n	800ccd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800cfc2:	4421      	add	r1, r4
 800cfc4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800cfc8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800cfcc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800cfd0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800cfd4:	e67c      	b.n	800ccd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800cfd6:	9f04      	ldr	r7, [sp, #16]
 800cfd8:	42b8      	cmp	r0, r7
 800cfda:	da27      	bge.n	800d02c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800cfdc:	9902      	ldr	r1, [sp, #8]
 800cfde:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800cfe2:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800cfe6:	eb05 010e 	add.w	r1, r5, lr
 800cfea:	fa1f f881 	uxth.w	r8, r1
 800cfee:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800cff2:	4411      	add	r1, r2
 800cff4:	eba1 0108 	sub.w	r1, r1, r8
 800cff8:	b289      	uxth	r1, r1
 800cffa:	fa0f f988 	sxth.w	r9, r8
 800cffe:	eba2 020e 	sub.w	r2, r2, lr
 800d002:	fa0f f881 	sxth.w	r8, r1
 800d006:	1a3f      	subs	r7, r7, r0
 800d008:	4372      	muls	r2, r6
 800d00a:	fb08 f707 	mul.w	r7, r8, r7
 800d00e:	42ba      	cmp	r2, r7
 800d010:	dc06      	bgt.n	800d020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800d012:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800d016:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800d01a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800d01e:	e7ca      	b.n	800cfb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800d020:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800d024:	4429      	add	r1, r5
 800d026:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d02a:	e651      	b.n	800ccd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d02c:	9805      	ldr	r0, [sp, #20]
 800d02e:	ebaa 0000 	sub.w	r0, sl, r0
 800d032:	b280      	uxth	r0, r0
 800d034:	2d06      	cmp	r5, #6
 800d036:	fa0f fe80 	sxth.w	lr, r0
 800d03a:	d817      	bhi.n	800d06c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800d03c:	9b04      	ldr	r3, [sp, #16]
 800d03e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d042:	1c6b      	adds	r3, r5, #1
 800d044:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800d048:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800d04c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d050:	9b01      	ldr	r3, [sp, #4]
 800d052:	9801      	ldr	r0, [sp, #4]
 800d054:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d058:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800d05c:	805a      	strh	r2, [r3, #2]
 800d05e:	809e      	strh	r6, [r3, #4]
 800d060:	80d9      	strh	r1, [r3, #6]
 800d062:	9b02      	ldr	r3, [sp, #8]
 800d064:	3b01      	subs	r3, #1
 800d066:	9302      	str	r3, [sp, #8]
 800d068:	3c08      	subs	r4, #8
 800d06a:	e747      	b.n	800cefc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800d06c:	9a02      	ldr	r2, [sp, #8]
 800d06e:	45b6      	cmp	lr, r6
 800d070:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d074:	db0d      	blt.n	800d092 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800d076:	449c      	add	ip, r3
 800d078:	fa1f fc8c 	uxth.w	ip, ip
 800d07c:	445a      	add	r2, fp
 800d07e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d082:	448c      	add	ip, r1
 800d084:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d088:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800d08c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800d090:	e61e      	b.n	800ccd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d092:	445a      	add	r2, fp
 800d094:	4484      	add	ip, r0
 800d096:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800d09a:	e78f      	b.n	800cfbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d09c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800d0a0:	fa1f f18e 	uxth.w	r1, lr
 800d0a4:	eb01 0806 	add.w	r8, r1, r6
 800d0a8:	b293      	uxth	r3, r2
 800d0aa:	fa1f f888 	uxth.w	r8, r8
 800d0ae:	9306      	str	r3, [sp, #24]
 800d0b0:	fa0f f388 	sxth.w	r3, r8
 800d0b4:	9307      	str	r3, [sp, #28]
 800d0b6:	9f06      	ldr	r7, [sp, #24]
 800d0b8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d0bc:	443b      	add	r3, r7
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	4596      	cmp	lr, r2
 800d0c2:	9308      	str	r3, [sp, #32]
 800d0c4:	da24      	bge.n	800d110 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800d0c6:	9905      	ldr	r1, [sp, #20]
 800d0c8:	eba3 0308 	sub.w	r3, r3, r8
 800d0cc:	ebaa 0401 	sub.w	r4, sl, r1
 800d0d0:	b2a4      	uxth	r4, r4
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	b225      	sxth	r5, r4
 800d0d6:	b219      	sxth	r1, r3
 800d0d8:	eba2 020e 	sub.w	r2, r2, lr
 800d0dc:	eba9 0000 	sub.w	r0, r9, r0
 800d0e0:	436a      	muls	r2, r5
 800d0e2:	4348      	muls	r0, r1
 800d0e4:	4282      	cmp	r2, r0
 800d0e6:	9a02      	ldr	r2, [sp, #8]
 800d0e8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d0ec:	445a      	add	r2, fp
 800d0ee:	dc06      	bgt.n	800d0fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800d0f0:	9b07      	ldr	r3, [sp, #28]
 800d0f2:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800d0f6:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800d0fa:	44a4      	add	ip, r4
 800d0fc:	e75e      	b.n	800cfbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d0fe:	9904      	ldr	r1, [sp, #16]
 800d100:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800d104:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800d108:	4433      	add	r3, r6
 800d10a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d10e:	e5df      	b.n	800ccd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d110:	9f06      	ldr	r7, [sp, #24]
 800d112:	9b04      	ldr	r3, [sp, #16]
 800d114:	1bc9      	subs	r1, r1, r7
 800d116:	fa0f f78a 	sxth.w	r7, sl
 800d11a:	b289      	uxth	r1, r1
 800d11c:	429f      	cmp	r7, r3
 800d11e:	fa0f fe81 	sxth.w	lr, r1
 800d122:	dd23      	ble.n	800d16c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800d124:	9a05      	ldr	r2, [sp, #20]
 800d126:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d12a:	9d07      	ldr	r5, [sp, #28]
 800d12c:	ebaa 0202 	sub.w	r2, sl, r2
 800d130:	b292      	uxth	r2, r2
 800d132:	eba5 0a03 	sub.w	sl, r5, r3
 800d136:	b214      	sxth	r4, r2
 800d138:	eba9 0000 	sub.w	r0, r9, r0
 800d13c:	9b02      	ldr	r3, [sp, #8]
 800d13e:	fb0e f000 	mul.w	r0, lr, r0
 800d142:	fb04 fa0a 	mul.w	sl, r4, sl
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	4550      	cmp	r0, sl
 800d14a:	445b      	add	r3, fp
 800d14c:	db03      	blt.n	800d156 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800d14e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800d152:	4494      	add	ip, r2
 800d154:	e732      	b.n	800cfbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d156:	9a04      	ldr	r2, [sp, #16]
 800d158:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800d15c:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800d160:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800d164:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d168:	4431      	add	r1, r6
 800d16a:	e75c      	b.n	800d026 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800d16c:	9b08      	ldr	r3, [sp, #32]
 800d16e:	eba3 0308 	sub.w	r3, r3, r8
 800d172:	b29b      	uxth	r3, r3
 800d174:	2d06      	cmp	r5, #6
 800d176:	b218      	sxth	r0, r3
 800d178:	d813      	bhi.n	800d1a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800d17a:	9b07      	ldr	r3, [sp, #28]
 800d17c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800d180:	1c6b      	adds	r3, r5, #1
 800d182:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800d186:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d18a:	9b01      	ldr	r3, [sp, #4]
 800d18c:	9901      	ldr	r1, [sp, #4]
 800d18e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d192:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800d196:	805a      	strh	r2, [r3, #2]
 800d198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d19a:	809a      	strh	r2, [r3, #4]
 800d19c:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d1a0:	e75f      	b.n	800d062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d1a2:	9c02      	ldr	r4, [sp, #8]
 800d1a4:	4570      	cmp	r0, lr
 800d1a6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d1aa:	db0d      	blt.n	800d1c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800d1ac:	4431      	add	r1, r6
 800d1ae:	9b06      	ldr	r3, [sp, #24]
 800d1b0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d1b4:	b289      	uxth	r1, r1
 800d1b6:	445c      	add	r4, fp
 800d1b8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d1bc:	4419      	add	r1, r3
 800d1be:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800d1c2:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800d1c6:	e583      	b.n	800ccd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d1c8:	445c      	add	r4, fp
 800d1ca:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800d1ce:	e79b      	b.n	800d108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800d1d0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d1d4:	1e65      	subs	r5, r4, #1
 800d1d6:	b2ad      	uxth	r5, r5
 800d1d8:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d1dc:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800d1e0:	42b5      	cmp	r5, r6
 800d1e2:	d044      	beq.n	800d26e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800d1e4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d1e8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800d1ec:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800d1f0:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800d1f4:	4282      	cmp	r2, r0
 800d1f6:	d11f      	bne.n	800d238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d1f8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800d1fc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d200:	459c      	cmp	ip, r3
 800d202:	d119      	bne.n	800d238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d204:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800d208:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d20c:	19d8      	adds	r0, r3, r7
 800d20e:	b200      	sxth	r0, r0
 800d210:	4288      	cmp	r0, r1
 800d212:	d109      	bne.n	800d228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800d214:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800d218:	4413      	add	r3, r2
 800d21a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d21e:	4629      	mov	r1, r5
 800d220:	9801      	ldr	r0, [sp, #4]
 800d222:	f7ff fd2b 	bl	800cc7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d226:	e003      	b.n	800d230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d228:	4411      	add	r1, r2
 800d22a:	b209      	sxth	r1, r1
 800d22c:	42b9      	cmp	r1, r7
 800d22e:	d0f3      	beq.n	800d218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800d230:	3d01      	subs	r5, #1
 800d232:	b2ad      	uxth	r5, r5
 800d234:	3c08      	subs	r4, #8
 800d236:	e7d3      	b.n	800d1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d238:	42b9      	cmp	r1, r7
 800d23a:	d1f9      	bne.n	800d230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d23c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800d240:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d244:	4299      	cmp	r1, r3
 800d246:	d1f3      	bne.n	800d230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d248:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d24c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d250:	181f      	adds	r7, r3, r0
 800d252:	b23f      	sxth	r7, r7
 800d254:	42ba      	cmp	r2, r7
 800d256:	d105      	bne.n	800d264 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800d258:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800d25c:	440b      	add	r3, r1
 800d25e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d262:	e7dc      	b.n	800d21e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800d264:	440a      	add	r2, r1
 800d266:	b212      	sxth	r2, r2
 800d268:	4290      	cmp	r0, r2
 800d26a:	d1e1      	bne.n	800d230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d26c:	e7f6      	b.n	800d25c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800d26e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800d272:	2e07      	cmp	r6, #7
 800d274:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d278:	d812      	bhi.n	800d2a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d27a:	1c75      	adds	r5, r6, #1
 800d27c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800d280:	9d01      	ldr	r5, [sp, #4]
 800d282:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d286:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800d28a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800d28e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800d292:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d296:	442c      	add	r4, r5
 800d298:	8061      	strh	r1, [r4, #2]
 800d29a:	80a2      	strh	r2, [r4, #4]
 800d29c:	80e3      	strh	r3, [r4, #6]
 800d29e:	e581      	b.n	800cda4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d2a0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d2a4:	3e01      	subs	r6, #1
 800d2a6:	445c      	add	r4, fp
 800d2a8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800d2ac:	f04f 37ff 	mov.w	r7, #4294967295
 800d2b0:	2500      	movs	r5, #0
 800d2b2:	9305      	str	r3, [sp, #20]
 800d2b4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d2b8:	9302      	str	r3, [sp, #8]
 800d2ba:	1e72      	subs	r2, r6, #1
 800d2bc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d2c0:	9304      	str	r3, [sp, #16]
 800d2c2:	4691      	mov	r9, r2
 800d2c4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800d2c8:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d2cc:	bf14      	ite	ne
 800d2ce:	9905      	ldrne	r1, [sp, #20]
 800d2d0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d2d4:	6818      	ldr	r0, [r3, #0]
 800d2d6:	9207      	str	r2, [sp, #28]
 800d2d8:	bf18      	it	ne
 800d2da:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d2de:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d2e2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d2e6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d2ea:	9306      	str	r3, [sp, #24]
 800d2ec:	fb18 f801 	smulbb	r8, r8, r1
 800d2f0:	6859      	ldr	r1, [r3, #4]
 800d2f2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d2f6:	4671      	mov	r1, lr
 800d2f8:	a80c      	add	r0, sp, #48	@ 0x30
 800d2fa:	f7ff fb45 	bl	800c988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d2fe:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800d302:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800d306:	9b04      	ldr	r3, [sp, #16]
 800d308:	9a02      	ldr	r2, [sp, #8]
 800d30a:	fb10 f001 	smulbb	r0, r0, r1
 800d30e:	fb02 8803 	mla	r8, r2, r3, r8
 800d312:	eba0 0108 	sub.w	r1, r0, r8
 800d316:	f04f 0c08 	mov.w	ip, #8
 800d31a:	fb90 f0fc 	sdiv	r0, r0, ip
 800d31e:	4288      	cmp	r0, r1
 800d320:	dc20      	bgt.n	800d364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d322:	4551      	cmp	r1, sl
 800d324:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d328:	da03      	bge.n	800d332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800d32a:	b1d9      	cbz	r1, 800d364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d32c:	468a      	mov	sl, r1
 800d32e:	464f      	mov	r7, r9
 800d330:	4635      	mov	r5, r6
 800d332:	f109 39ff 	add.w	r9, r9, #4294967295
 800d336:	f119 0f02 	cmn.w	r9, #2
 800d33a:	d1c5      	bne.n	800d2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d33c:	4616      	mov	r6, r2
 800d33e:	3201      	adds	r2, #1
 800d340:	f1a4 0408 	sub.w	r4, r4, #8
 800d344:	d1b6      	bne.n	800d2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	b2ac      	uxth	r4, r5
 800d34a:	00ed      	lsls	r5, r5, #3
 800d34c:	1958      	adds	r0, r3, r5
 800d34e:	1c7b      	adds	r3, r7, #1
 800d350:	d10b      	bne.n	800d36a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800d352:	4601      	mov	r1, r0
 800d354:	9803      	ldr	r0, [sp, #12]
 800d356:	f7ff fb17 	bl	800c988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d35a:	4621      	mov	r1, r4
 800d35c:	9801      	ldr	r0, [sp, #4]
 800d35e:	f7ff fc8d 	bl	800cc7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d362:	e4b5      	b.n	800ccd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d364:	464f      	mov	r7, r9
 800d366:	4635      	mov	r5, r6
 800d368:	e7ed      	b.n	800d346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800d36a:	9b01      	ldr	r3, [sp, #4]
 800d36c:	00ff      	lsls	r7, r7, #3
 800d36e:	19d9      	adds	r1, r3, r7
 800d370:	f7ff fb0a 	bl	800c988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d374:	9b03      	ldr	r3, [sp, #12]
 800d376:	cb03      	ldmia	r3!, {r0, r1}
 800d378:	445f      	add	r7, fp
 800d37a:	445d      	add	r5, fp
 800d37c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d380:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800d384:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800d388:	9b03      	ldr	r3, [sp, #12]
 800d38a:	6869      	ldr	r1, [r5, #4]
 800d38c:	c303      	stmia	r3!, {r0, r1}
 800d38e:	e7e4      	b.n	800d35a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800d390 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800d398:	b09b      	sub	sp, #108	@ 0x6c
 800d39a:	4604      	mov	r4, r0
 800d39c:	4630      	mov	r0, r6
 800d39e:	f7fc f866 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d3a2:	4605      	mov	r5, r0
 800d3a4:	b948      	cbnz	r0, 800d3ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	4798      	blx	r3
 800d3b2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800d3b6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800d3ba:	4bc6      	ldr	r3, [pc, #792]	@ (800d6d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d03f      	beq.n	800d442 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d3c2:	4dc5      	ldr	r5, [pc, #788]	@ (800d6d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	f7fc f852 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d138      	bne.n	800d442 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7ff f96d 	bl	800c6b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	6829      	ldr	r1, [r5, #0]
 800d3da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3dc:	686a      	ldr	r2, [r5, #4]
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4798      	blx	r3
 800d3e2:	802e      	strh	r6, [r5, #0]
 800d3e4:	806e      	strh	r6, [r5, #2]
 800d3e6:	80ae      	strh	r6, [r5, #4]
 800d3e8:	80ee      	strh	r6, [r5, #6]
 800d3ea:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800d3ee:	4dbb      	ldr	r5, [pc, #748]	@ (800d6dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800d3f0:	4640      	mov	r0, r8
 800d3f2:	f7ff fbeb 	bl	800cbcc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d3f6:	882e      	ldrh	r6, [r5, #0]
 800d3f8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d3fc:	4633      	mov	r3, r6
 800d3fe:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d402:	42bb      	cmp	r3, r7
 800d404:	d224      	bcs.n	800d450 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d406:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800d40a:	2907      	cmp	r1, #7
 800d40c:	d816      	bhi.n	800d43c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800d40e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d412:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800d416:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800d41a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800d41e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800d422:	1c4a      	adds	r2, r1, #1
 800d424:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800d428:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800d42c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800d430:	f8a2 a002 	strh.w	sl, [r2, #2]
 800d434:	f8a2 e004 	strh.w	lr, [r2, #4]
 800d438:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d43c:	3301      	adds	r3, #1
 800d43e:	b29b      	uxth	r3, r3
 800d440:	e7df      	b.n	800d402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800d442:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1cf      	bne.n	800d3ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800d44a:	b01b      	add	sp, #108	@ 0x6c
 800d44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d450:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800d454:	42b3      	cmp	r3, r6
 800d456:	d90c      	bls.n	800d472 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800d458:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800d45c:	6822      	ldr	r2, [r4, #0]
 800d45e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800d462:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800d464:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800d468:	4620      	mov	r0, r4
 800d46a:	3601      	adds	r6, #1
 800d46c:	47b8      	blx	r7
 800d46e:	b2b6      	uxth	r6, r6
 800d470:	e7ee      	b.n	800d450 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d472:	4a9b      	ldr	r2, [pc, #620]	@ (800d6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d474:	6813      	ldr	r3, [r2, #0]
 800d476:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	4691      	mov	r9, r2
 800d47e:	f040 80e2 	bne.w	800d646 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800d482:	8829      	ldrh	r1, [r5, #0]
 800d484:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d488:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800d48c:	33ae      	adds	r3, #174	@ 0xae
 800d48e:	2600      	movs	r6, #0
 800d490:	428f      	cmp	r7, r1
 800d492:	f103 0308 	add.w	r3, r3, #8
 800d496:	dd0a      	ble.n	800d4ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800d498:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d49c:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800d4a0:	4402      	add	r2, r0
 800d4a2:	b212      	sxth	r2, r2
 800d4a4:	4296      	cmp	r6, r2
 800d4a6:	bfb8      	it	lt
 800d4a8:	4616      	movlt	r6, r2
 800d4aa:	3101      	adds	r1, #1
 800d4ac:	e7f0      	b.n	800d490 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800d4ae:	4b8d      	ldr	r3, [pc, #564]	@ (800d6e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800d4b0:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800d6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800d4b4:	881b      	ldrh	r3, [r3, #0]
 800d4b6:	2b0f      	cmp	r3, #15
 800d4b8:	bf88      	it	hi
 800d4ba:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800d4be:	f04f 0300 	mov.w	r3, #0
 800d4c2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d4c6:	bf98      	it	ls
 800d4c8:	f04f 0b01 	movls.w	fp, #1
 800d4cc:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800d4d0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800d4d4:	4b82      	ldr	r3, [pc, #520]	@ (800d6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d4d6:	4438      	add	r0, r7
 800d4d8:	b207      	sxth	r7, r0
 800d4da:	6818      	ldr	r0, [r3, #0]
 800d4dc:	42b7      	cmp	r7, r6
 800d4de:	6803      	ldr	r3, [r0, #0]
 800d4e0:	f280 8083 	bge.w	800d5ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800d4e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d4e8:	4798      	blx	r3
 800d4ea:	eb07 030b 	add.w	r3, r7, fp
 800d4ee:	4298      	cmp	r0, r3
 800d4f0:	da07      	bge.n	800d502 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800d4f2:	42b0      	cmp	r0, r6
 800d4f4:	da05      	bge.n	800d502 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800d4f6:	4287      	cmp	r7, r0
 800d4f8:	dd6c      	ble.n	800d5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800d4fa:	2f00      	cmp	r7, #0
 800d4fc:	dd6a      	ble.n	800d5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800d4fe:	4630      	mov	r0, r6
 800d500:	e004      	b.n	800d50c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800d502:	4287      	cmp	r7, r0
 800d504:	dcfb      	bgt.n	800d4fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800d506:	42b0      	cmp	r0, r6
 800d508:	bfa8      	it	ge
 800d50a:	4630      	movge	r0, r6
 800d50c:	4b76      	ldr	r3, [pc, #472]	@ (800d6e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800d50e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d512:	1bc0      	subs	r0, r0, r7
 800d514:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d518:	882f      	ldrh	r7, [r5, #0]
 800d51a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d51e:	2200      	movs	r2, #0
 800d520:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d524:	f8ad 001a 	strh.w	r0, [sp, #26]
 800d528:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d52c:	42bb      	cmp	r3, r7
 800d52e:	d9cd      	bls.n	800d4cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d530:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800d534:	ab07      	add	r3, sp, #28
 800d536:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800d53a:	6851      	ldr	r1, [r2, #4]
 800d53c:	c303      	stmia	r3!, {r0, r1}
 800d53e:	a905      	add	r1, sp, #20
 800d540:	a807      	add	r0, sp, #28
 800d542:	f7ff f988 	bl	800c856 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d546:	2800      	cmp	r0, #0
 800d548:	d04c      	beq.n	800d5e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800d54a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800d54e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800d552:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800d556:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800d55a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d55e:	9302      	str	r3, [sp, #8]
 800d560:	4686      	mov	lr, r0
 800d562:	4290      	cmp	r0, r2
 800d564:	4450      	add	r0, sl
 800d566:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800d56a:	bfb8      	it	lt
 800d56c:	4696      	movlt	lr, r2
 800d56e:	4452      	add	r2, sl
 800d570:	4299      	cmp	r1, r3
 800d572:	b280      	uxth	r0, r0
 800d574:	b292      	uxth	r2, r2
 800d576:	468c      	mov	ip, r1
 800d578:	fa0f fa82 	sxth.w	sl, r2
 800d57c:	bfb8      	it	lt
 800d57e:	469c      	movlt	ip, r3
 800d580:	b203      	sxth	r3, r0
 800d582:	4553      	cmp	r3, sl
 800d584:	bfb8      	it	lt
 800d586:	4602      	movlt	r2, r0
 800d588:	eba2 020e 	sub.w	r2, r2, lr
 800d58c:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d590:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800d594:	9b02      	ldr	r3, [sp, #8]
 800d596:	f8ad e01c 	strh.w	lr, [sp, #28]
 800d59a:	4411      	add	r1, r2
 800d59c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d5a0:	f8ad c01e 	strh.w	ip, [sp, #30]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	b289      	uxth	r1, r1
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	b208      	sxth	r0, r1
 800d5ac:	b21a      	sxth	r2, r3
 800d5ae:	4290      	cmp	r0, r2
 800d5b0:	bfb8      	it	lt
 800d5b2:	460b      	movlt	r3, r1
 800d5b4:	eba3 030c 	sub.w	r3, r3, ip
 800d5b8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800d5bc:	a807      	add	r0, sp, #28
 800d5be:	f7fb ff56 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d5c2:	b920      	cbnz	r0, 800d5ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	a907      	add	r1, sp, #28
 800d5c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	4798      	blx	r3
 800d5ce:	3701      	adds	r7, #1
 800d5d0:	b2bf      	uxth	r7, r7
 800d5d2:	e7a9      	b.n	800d528 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800d5d4:	f8d9 0000 	ldr.w	r0, [r9]
 800d5d8:	6803      	ldr	r3, [r0, #0]
 800d5da:	2101      	movs	r1, #1
 800d5dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d5e0:	4798      	blx	r3
 800d5e2:	e773      	b.n	800d4cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d5e4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800d5e8:	e7e8      	b.n	800d5bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800d5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ec:	4798      	blx	r3
 800d5ee:	4b3f      	ldr	r3, [pc, #252]	@ (800d6ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f43f af29 	beq.w	800d44a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800d5fe:	882b      	ldrh	r3, [r5, #0]
 800d600:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800d604:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800d608:	42ab      	cmp	r3, r5
 800d60a:	f4bf af1e 	bcs.w	800d44a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800d60e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800d612:	2907      	cmp	r1, #7
 800d614:	d814      	bhi.n	800d640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800d616:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800d61a:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800d61e:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800d622:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800d626:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800d62a:	1c4a      	adds	r2, r1, #1
 800d62c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800d630:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800d634:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800d638:	f8a2 c002 	strh.w	ip, [r2, #2]
 800d63c:	8097      	strh	r7, [r2, #4]
 800d63e:	80d6      	strh	r6, [r2, #6]
 800d640:	3301      	adds	r3, #1
 800d642:	b29b      	uxth	r3, r3
 800d644:	e7e0      	b.n	800d608 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800d646:	2b02      	cmp	r3, #2
 800d648:	f040 8133 	bne.w	800d8b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800d64c:	4b28      	ldr	r3, [pc, #160]	@ (800d6f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b01      	cmp	r3, #1
 800d652:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800d656:	f000 8098 	beq.w	800d78a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d65a:	882a      	ldrh	r2, [r5, #0]
 800d65c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800d660:	3201      	adds	r2, #1
 800d662:	b292      	uxth	r2, r2
 800d664:	2900      	cmp	r1, #0
 800d666:	d0c2      	beq.n	800d5ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d668:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800d66c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800d670:	441e      	add	r6, r3
 800d672:	b236      	sxth	r6, r6
 800d674:	4694      	mov	ip, r2
 800d676:	f04f 0900 	mov.w	r9, #0
 800d67a:	fa1f f38c 	uxth.w	r3, ip
 800d67e:	4299      	cmp	r1, r3
 800d680:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800d684:	f240 80bf 	bls.w	800d806 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800d688:	4427      	add	r7, r4
 800d68a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800d68e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800d692:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800d696:	4283      	cmp	r3, r0
 800d698:	f340 80a1 	ble.w	800d7de <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800d69c:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800d6a0:	4406      	add	r6, r0
 800d6a2:	b236      	sxth	r6, r6
 800d6a4:	429e      	cmp	r6, r3
 800d6a6:	bfa8      	it	ge
 800d6a8:	461e      	movge	r6, r3
 800d6aa:	46e1      	mov	r9, ip
 800d6ac:	f10c 0c01 	add.w	ip, ip, #1
 800d6b0:	e7e3      	b.n	800d67a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800d6b2:	d10a      	bne.n	800d6ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800d6b4:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800d6b8:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800d6bc:	4562      	cmp	r2, ip
 800d6be:	bfb8      	it	lt
 800d6c0:	4662      	movlt	r2, ip
 800d6c2:	4288      	cmp	r0, r1
 800d6c4:	bfb8      	it	lt
 800d6c6:	461f      	movlt	r7, r3
 800d6c8:	e087      	b.n	800d7da <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800d6ca:	428a      	cmp	r2, r1
 800d6cc:	bfb8      	it	lt
 800d6ce:	460a      	movlt	r2, r1
 800d6d0:	e083      	b.n	800d7da <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800d6d2:	bf00      	nop
 800d6d4:	20015468 	.word	0x20015468
 800d6d8:	20015474 	.word	0x20015474
 800d6dc:	20000084 	.word	0x20000084
 800d6e0:	20015430 	.word	0x20015430
 800d6e4:	20015426 	.word	0x20015426
 800d6e8:	20015424 	.word	0x20015424
 800d6ec:	2001542e 	.word	0x2001542e
 800d6f0:	20015428 	.word	0x20015428
 800d6f4:	19a1      	adds	r1, r4, r6
 800d6f6:	ab07      	add	r3, sp, #28
 800d6f8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800d6fc:	6849      	ldr	r1, [r1, #4]
 800d6fe:	c303      	stmia	r3!, {r0, r1}
 800d700:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d704:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d708:	2b13      	cmp	r3, #19
 800d70a:	bfd8      	it	le
 800d70c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800d710:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d714:	440b      	add	r3, r1
 800d716:	1a9b      	subs	r3, r3, r2
 800d718:	a807      	add	r0, sp, #28
 800d71a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d71e:	f7fe ffe1 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d722:	a807      	add	r0, sp, #28
 800d724:	f7fb fea3 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d728:	bb78      	cbnz	r0, 800d78a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d72a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800d72e:	f8d9 0000 	ldr.w	r0, [r9]
 800d732:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d736:	f8d0 e000 	ldr.w	lr, [r0]
 800d73a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d73e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d742:	f1bc 0f14 	cmp.w	ip, #20
 800d746:	bfa8      	it	ge
 800d748:	f04f 0c14 	movge.w	ip, #20
 800d74c:	fa1f fc8c 	uxth.w	ip, ip
 800d750:	f8cd c000 	str.w	ip, [sp]
 800d754:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800d758:	47d8      	blx	fp
 800d75a:	4683      	mov	fp, r0
 800d75c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800d760:	a807      	add	r0, sp, #28
 800d762:	f7fe ffa5 	bl	800c6b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	4426      	add	r6, r4
 800d76a:	4620      	mov	r0, r4
 800d76c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d76e:	a907      	add	r1, sp, #28
 800d770:	4798      	blx	r3
 800d772:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800d776:	eba0 000b 	sub.w	r0, r0, fp
 800d77a:	b200      	sxth	r0, r0
 800d77c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800d780:	b918      	cbnz	r0, 800d78a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d782:	b2b9      	uxth	r1, r7
 800d784:	4650      	mov	r0, sl
 800d786:	f7ff fa79 	bl	800cc7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d78a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800d78e:	f1bb 0f00 	cmp.w	fp, #0
 800d792:	f43f af2c 	beq.w	800d5ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d796:	882b      	ldrh	r3, [r5, #0]
 800d798:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800d79c:	3301      	adds	r3, #1
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	2700      	movs	r7, #0
 800d7a2:	b299      	uxth	r1, r3
 800d7a4:	458b      	cmp	fp, r1
 800d7a6:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800d7aa:	d9a3      	bls.n	800d6f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800d7ac:	4426      	add	r6, r4
 800d7ae:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800d7b2:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800d7b6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800d7ba:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800d7be:	4408      	add	r0, r1
 800d7c0:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800d7c4:	4461      	add	r1, ip
 800d7c6:	b200      	sxth	r0, r0
 800d7c8:	b209      	sxth	r1, r1
 800d7ca:	4288      	cmp	r0, r1
 800d7cc:	f6bf af71 	bge.w	800d6b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800d7d0:	4584      	cmp	ip, r0
 800d7d2:	4662      	mov	r2, ip
 800d7d4:	461f      	mov	r7, r3
 800d7d6:	bfb8      	it	lt
 800d7d8:	4602      	movlt	r2, r0
 800d7da:	3301      	adds	r3, #1
 800d7dc:	e7e1      	b.n	800d7a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800d7de:	d10e      	bne.n	800d7fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800d7e0:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800d7e4:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800d7e8:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800d7ec:	4473      	add	r3, lr
 800d7ee:	b21b      	sxth	r3, r3
 800d7f0:	429e      	cmp	r6, r3
 800d7f2:	bfa8      	it	ge
 800d7f4:	461e      	movge	r6, r3
 800d7f6:	4287      	cmp	r7, r0
 800d7f8:	bfb8      	it	lt
 800d7fa:	46e1      	movlt	r9, ip
 800d7fc:	e756      	b.n	800d6ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800d7fe:	4286      	cmp	r6, r0
 800d800:	bfa8      	it	ge
 800d802:	4606      	movge	r6, r0
 800d804:	e752      	b.n	800d6ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800d806:	eb0a 0007 	add.w	r0, sl, r7
 800d80a:	4427      	add	r7, r4
 800d80c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d810:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800d814:	f1bb 0f13 	cmp.w	fp, #19
 800d818:	bfde      	ittt	le
 800d81a:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800d81e:	445e      	addle	r6, fp
 800d820:	b236      	sxthle	r6, r6
 800d822:	f7fb fe24 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d826:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d82a:	2800      	cmp	r0, #0
 800d82c:	f47f af1a 	bne.w	800d664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800d830:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800d834:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800d838:	482a      	ldr	r0, [pc, #168]	@ (800d8e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800d83a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800d83e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800d842:	6800      	ldr	r0, [r0, #0]
 800d844:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d848:	1ab6      	subs	r6, r6, r2
 800d84a:	2e14      	cmp	r6, #20
 800d84c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800d850:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d854:	bfa8      	it	ge
 800d856:	2614      	movge	r6, #20
 800d858:	f8d0 c000 	ldr.w	ip, [r0]
 800d85c:	b2b6      	uxth	r6, r6
 800d85e:	fa1f fb8b 	uxth.w	fp, fp
 800d862:	455e      	cmp	r6, fp
 800d864:	bf94      	ite	ls
 800d866:	9600      	strls	r6, [sp, #0]
 800d868:	f8cd b000 	strhi.w	fp, [sp]
 800d86c:	b292      	uxth	r2, r2
 800d86e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800d872:	b29b      	uxth	r3, r3
 800d874:	b289      	uxth	r1, r1
 800d876:	47b0      	blx	r6
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800d87e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d880:	a907      	add	r1, sp, #28
 800d882:	4620      	mov	r0, r4
 800d884:	4798      	blx	r3
 800d886:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800d88a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d88e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800d892:	1a5b      	subs	r3, r3, r1
 800d894:	440a      	add	r2, r1
 800d896:	b21b      	sxth	r3, r3
 800d898:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800d89c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f47f aeda 	bne.w	800d65a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800d8a6:	fa1f f189 	uxth.w	r1, r9
 800d8aa:	4650      	mov	r0, sl
 800d8ac:	f7ff f9e6 	bl	800cc7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d8b0:	e6d3      	b.n	800d65a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800d8b2:	882e      	ldrh	r6, [r5, #0]
 800d8b4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d8b8:	42b3      	cmp	r3, r6
 800d8ba:	f67f ae98 	bls.w	800d5ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d8be:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800d8c2:	ab07      	add	r3, sp, #28
 800d8c4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800d8c8:	6851      	ldr	r1, [r2, #4]
 800d8ca:	c303      	stmia	r3!, {r0, r1}
 800d8cc:	a807      	add	r0, sp, #28
 800d8ce:	f7fb fdce 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8d2:	b920      	cbnz	r0, 800d8de <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	a907      	add	r1, sp, #28
 800d8d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8da:	4620      	mov	r0, r4
 800d8dc:	4798      	blx	r3
 800d8de:	3601      	adds	r6, #1
 800d8e0:	b2b6      	uxth	r6, r6
 800d8e2:	e7e7      	b.n	800d8b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800d8e4:	20015430 	.word	0x20015430

0800d8e8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800d8e8:	4b03      	ldr	r3, [pc, #12]	@ (800d8f8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	801a      	strh	r2, [r3, #0]
 800d8ee:	805a      	strh	r2, [r3, #2]
 800d8f0:	809a      	strh	r2, [r3, #4]
 800d8f2:	80da      	strh	r2, [r3, #6]
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	20015474 	.word	0x20015474

0800d8fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800d8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d900:	4606      	mov	r6, r0
 800d902:	b09d      	sub	sp, #116	@ 0x74
 800d904:	a803      	add	r0, sp, #12
 800d906:	4614      	mov	r4, r2
 800d908:	468a      	mov	sl, r1
 800d90a:	461d      	mov	r5, r3
 800d90c:	f000 fdad 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800d910:	6833      	ldr	r3, [r6, #0]
 800d912:	4630      	mov	r0, r6
 800d914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d916:	4798      	blx	r3
 800d918:	6833      	ldr	r3, [r6, #0]
 800d91a:	4607      	mov	r7, r0
 800d91c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d91e:	4630      	mov	r0, r6
 800d920:	4798      	blx	r3
 800d922:	462a      	mov	r2, r5
 800d924:	9000      	str	r0, [sp, #0]
 800d926:	4621      	mov	r1, r4
 800d928:	463b      	mov	r3, r7
 800d92a:	a803      	add	r0, sp, #12
 800d92c:	f000 fdf8 	bl	800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d930:	2500      	movs	r5, #0
 800d932:	462c      	mov	r4, r5
 800d934:	46a9      	mov	r9, r5
 800d936:	46a8      	mov	r8, r5
 800d938:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800d93c:	2300      	movs	r3, #0
 800d93e:	9302      	str	r3, [sp, #8]
 800d940:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800d944:	429c      	cmp	r4, r3
 800d946:	d002      	beq.n	800d94e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800d948:	455c      	cmp	r4, fp
 800d94a:	bf18      	it	ne
 800d94c:	4625      	movne	r5, r4
 800d94e:	ab02      	add	r3, sp, #8
 800d950:	4632      	mov	r2, r6
 800d952:	4651      	mov	r1, sl
 800d954:	a803      	add	r0, sp, #12
 800d956:	f001 f90f 	bl	800eb78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d95a:	4604      	mov	r4, r0
 800d95c:	b108      	cbz	r0, 800d962 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800d95e:	280a      	cmp	r0, #10
 800d960:	d10a      	bne.n	800d978 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800d962:	45c1      	cmp	r9, r8
 800d964:	bf38      	it	cc
 800d966:	46c1      	movcc	r9, r8
 800d968:	f04f 0800 	mov.w	r8, #0
 800d96c:	2c00      	cmp	r4, #0
 800d96e:	d1e5      	bne.n	800d93c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800d970:	4648      	mov	r0, r9
 800d972:	b01d      	add	sp, #116	@ 0x74
 800d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d978:	9a02      	ldr	r2, [sp, #8]
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	d0de      	beq.n	800d93c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800d97e:	7b57      	ldrb	r7, [r2, #13]
 800d980:	6833      	ldr	r3, [r6, #0]
 800d982:	8894      	ldrh	r4, [r2, #4]
 800d984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d986:	007f      	lsls	r7, r7, #1
 800d988:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800d98c:	7a97      	ldrb	r7, [r2, #10]
 800d98e:	4629      	mov	r1, r5
 800d990:	4307      	orrs	r7, r0
 800d992:	4630      	mov	r0, r6
 800d994:	4798      	blx	r3
 800d996:	4438      	add	r0, r7
 800d998:	4480      	add	r8, r0
 800d99a:	fa1f f888 	uxth.w	r8, r8
 800d99e:	e7e5      	b.n	800d96c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800d9a0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800d9a0:	b508      	push	{r3, lr}
 800d9a2:	6803      	ldr	r3, [r0, #0]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	4798      	blx	r3
 800d9a8:	b128      	cbz	r0, 800d9b6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800d9aa:	7b43      	ldrb	r3, [r0, #13]
 800d9ac:	7a80      	ldrb	r0, [r0, #10]
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9b4:	4318      	orrs	r0, r3
 800d9b6:	bd08      	pop	{r3, pc}

0800d9b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800d9b8:	b40e      	push	{r1, r2, r3}
 800d9ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9bc:	b09e      	sub	sp, #120	@ 0x78
 800d9be:	ab23      	add	r3, sp, #140	@ 0x8c
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	f853 4b04 	ldr.w	r4, [r3], #4
 800d9c6:	9303      	str	r3, [sp, #12]
 800d9c8:	a805      	add	r0, sp, #20
 800d9ca:	f000 fd4e 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9d4:	4798      	blx	r3
 800d9d6:	682b      	ldr	r3, [r5, #0]
 800d9d8:	4606      	mov	r6, r0
 800d9da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9dc:	4628      	mov	r0, r5
 800d9de:	4798      	blx	r3
 800d9e0:	4633      	mov	r3, r6
 800d9e2:	ae1e      	add	r6, sp, #120	@ 0x78
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	9000      	str	r0, [sp, #0]
 800d9e8:	9a03      	ldr	r2, [sp, #12]
 800d9ea:	2400      	movs	r4, #0
 800d9ec:	a805      	add	r0, sp, #20
 800d9ee:	f000 fd97 	bl	800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d9f2:	f846 4d68 	str.w	r4, [r6, #-104]!
 800d9f6:	462a      	mov	r2, r5
 800d9f8:	4633      	mov	r3, r6
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	a805      	add	r0, sp, #20
 800d9fe:	f001 f8bb 	bl	800eb78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800da02:	b1f0      	cbz	r0, 800da42 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800da04:	280a      	cmp	r0, #10
 800da06:	d018      	beq.n	800da3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800da08:	9f04      	ldr	r7, [sp, #16]
 800da0a:	b1b7      	cbz	r7, 800da3a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800da0c:	7b78      	ldrb	r0, [r7, #13]
 800da0e:	7a3b      	ldrb	r3, [r7, #8]
 800da10:	88ea      	ldrh	r2, [r5, #6]
 800da12:	00c1      	lsls	r1, r0, #3
 800da14:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800da18:	4319      	orrs	r1, r3
 800da1a:	0643      	lsls	r3, r0, #25
 800da1c:	bf44      	itt	mi
 800da1e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800da22:	b219      	sxthmi	r1, r3
 800da24:	0100      	lsls	r0, r0, #4
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800da2c:	4303      	orrs	r3, r0
 800da2e:	4413      	add	r3, r2
 800da30:	1a5b      	subs	r3, r3, r1
 800da32:	b21b      	sxth	r3, r3
 800da34:	429c      	cmp	r4, r3
 800da36:	bfb8      	it	lt
 800da38:	461c      	movlt	r4, r3
 800da3a:	4633      	mov	r3, r6
 800da3c:	462a      	mov	r2, r5
 800da3e:	2100      	movs	r1, #0
 800da40:	e7dc      	b.n	800d9fc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800da42:	b2a0      	uxth	r0, r4
 800da44:	b01e      	add	sp, #120	@ 0x78
 800da46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800da4a:	b003      	add	sp, #12
 800da4c:	4770      	bx	lr

0800da4e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800da4e:	7a43      	ldrb	r3, [r0, #9]
 800da50:	8880      	ldrh	r0, [r0, #4]
 800da52:	4418      	add	r0, r3
 800da54:	b280      	uxth	r0, r0
 800da56:	4770      	bx	lr

0800da58 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800da58:	6803      	ldr	r3, [r0, #0]
 800da5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da5c:	4718      	bx	r3

0800da5e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800da5e:	b40e      	push	{r1, r2, r3}
 800da60:	b570      	push	{r4, r5, r6, lr}
 800da62:	b09d      	sub	sp, #116	@ 0x74
 800da64:	ab21      	add	r3, sp, #132	@ 0x84
 800da66:	4604      	mov	r4, r0
 800da68:	f853 5b04 	ldr.w	r5, [r3], #4
 800da6c:	9302      	str	r3, [sp, #8]
 800da6e:	a803      	add	r0, sp, #12
 800da70:	f000 fcfb 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	4620      	mov	r0, r4
 800da78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da7a:	4798      	blx	r3
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	4606      	mov	r6, r0
 800da80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da82:	4620      	mov	r0, r4
 800da84:	4798      	blx	r3
 800da86:	4633      	mov	r3, r6
 800da88:	9000      	str	r0, [sp, #0]
 800da8a:	9a02      	ldr	r2, [sp, #8]
 800da8c:	4629      	mov	r1, r5
 800da8e:	a803      	add	r0, sp, #12
 800da90:	f000 fd46 	bl	800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800da94:	a803      	add	r0, sp, #12
 800da96:	f001 f93d 	bl	800ed14 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800da9a:	2401      	movs	r4, #1
 800da9c:	b2a3      	uxth	r3, r4
 800da9e:	b140      	cbz	r0, 800dab2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800daa0:	280a      	cmp	r0, #10
 800daa2:	bf08      	it	eq
 800daa4:	3301      	addeq	r3, #1
 800daa6:	a803      	add	r0, sp, #12
 800daa8:	bf08      	it	eq
 800daaa:	b21c      	sxtheq	r4, r3
 800daac:	f001 f932 	bl	800ed14 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dab0:	e7f4      	b.n	800da9c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800dab2:	4618      	mov	r0, r3
 800dab4:	b01d      	add	sp, #116	@ 0x74
 800dab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800daba:	b003      	add	sp, #12
 800dabc:	4770      	bx	lr

0800dabe <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800dabe:	b40e      	push	{r1, r2, r3}
 800dac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dac2:	b09e      	sub	sp, #120	@ 0x78
 800dac4:	ab23      	add	r3, sp, #140	@ 0x8c
 800dac6:	4604      	mov	r4, r0
 800dac8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dacc:	9303      	str	r3, [sp, #12]
 800dace:	a805      	add	r0, sp, #20
 800dad0:	f000 fccb 	bl	800e46a <_ZN8touchgfx12TextProviderC1Ev>
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	4620      	mov	r0, r4
 800dad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dada:	4798      	blx	r3
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	4606      	mov	r6, r0
 800dae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dae2:	4620      	mov	r0, r4
 800dae4:	4798      	blx	r3
 800dae6:	4633      	mov	r3, r6
 800dae8:	4629      	mov	r1, r5
 800daea:	9000      	str	r0, [sp, #0]
 800daec:	9a03      	ldr	r2, [sp, #12]
 800daee:	a805      	add	r0, sp, #20
 800daf0:	ad1e      	add	r5, sp, #120	@ 0x78
 800daf2:	f000 fd15 	bl	800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800daf6:	2100      	movs	r1, #0
 800daf8:	f845 1d68 	str.w	r1, [r5, #-104]!
 800dafc:	4622      	mov	r2, r4
 800dafe:	462b      	mov	r3, r5
 800db00:	a805      	add	r0, sp, #20
 800db02:	f001 f839 	bl	800eb78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800db06:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800db0a:	b1d8      	cbz	r0, 800db44 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800db0c:	280a      	cmp	r0, #10
 800db0e:	d012      	beq.n	800db36 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800db10:	9804      	ldr	r0, [sp, #16]
 800db12:	b180      	cbz	r0, 800db36 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800db14:	7b47      	ldrb	r7, [r0, #13]
 800db16:	88e2      	ldrh	r2, [r4, #6]
 800db18:	00fb      	lsls	r3, r7, #3
 800db1a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800db1e:	7a03      	ldrb	r3, [r0, #8]
 800db20:	430b      	orrs	r3, r1
 800db22:	0679      	lsls	r1, r7, #25
 800db24:	bf44      	itt	mi
 800db26:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800db2a:	b21b      	sxthmi	r3, r3
 800db2c:	1ad3      	subs	r3, r2, r3
 800db2e:	b21b      	sxth	r3, r3
 800db30:	429e      	cmp	r6, r3
 800db32:	bfa8      	it	ge
 800db34:	461e      	movge	r6, r3
 800db36:	462b      	mov	r3, r5
 800db38:	4622      	mov	r2, r4
 800db3a:	2100      	movs	r1, #0
 800db3c:	a805      	add	r0, sp, #20
 800db3e:	f001 f81b 	bl	800eb78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800db42:	e7e2      	b.n	800db0a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800db44:	4630      	mov	r0, r6
 800db46:	b01e      	add	sp, #120	@ 0x78
 800db48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db4c:	b003      	add	sp, #12
 800db4e:	4770      	bx	lr

0800db50 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800db50:	b513      	push	{r0, r1, r4, lr}
 800db52:	6803      	ldr	r3, [r0, #0]
 800db54:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800db58:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800db5c:	f8ad 1004 	strh.w	r1, [sp, #4]
 800db60:	2400      	movs	r4, #0
 800db62:	9400      	str	r4, [sp, #0]
 800db64:	f8ad 2006 	strh.w	r2, [sp, #6]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	4669      	mov	r1, sp
 800db6c:	4798      	blx	r3
 800db6e:	b002      	add	sp, #8
 800db70:	bd10      	pop	{r4, pc}

0800db72 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800db72:	b538      	push	{r3, r4, r5, lr}
 800db74:	680b      	ldr	r3, [r1, #0]
 800db76:	460c      	mov	r4, r1
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	4605      	mov	r5, r0
 800db7c:	4798      	blx	r3
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	4620      	mov	r0, r4
 800db82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db84:	4629      	mov	r1, r5
 800db86:	4798      	blx	r3
 800db88:	4628      	mov	r0, r5
 800db8a:	bd38      	pop	{r3, r4, r5, pc}

0800db8c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800db8c:	b410      	push	{r4}
 800db8e:	880a      	ldrh	r2, [r1, #0]
 800db90:	8884      	ldrh	r4, [r0, #4]
 800db92:	4422      	add	r2, r4
 800db94:	800a      	strh	r2, [r1, #0]
 800db96:	88c4      	ldrh	r4, [r0, #6]
 800db98:	884a      	ldrh	r2, [r1, #2]
 800db9a:	4422      	add	r2, r4
 800db9c:	804a      	strh	r2, [r1, #2]
 800db9e:	6940      	ldr	r0, [r0, #20]
 800dba0:	b120      	cbz	r0, 800dbac <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800dba2:	6803      	ldr	r3, [r0, #0]
 800dba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbaa:	4718      	bx	r3
 800dbac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800dbb2:	b570      	push	{r4, r5, r6, lr}
 800dbb4:	8882      	ldrh	r2, [r0, #4]
 800dbb6:	880b      	ldrh	r3, [r1, #0]
 800dbb8:	4413      	add	r3, r2
 800dbba:	800b      	strh	r3, [r1, #0]
 800dbbc:	88c2      	ldrh	r2, [r0, #6]
 800dbbe:	884b      	ldrh	r3, [r1, #2]
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	4413      	add	r3, r2
 800dbc4:	804b      	strh	r3, [r1, #2]
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	1d01      	adds	r1, r0, #4
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f7fb fc0c 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800dbd0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd0b      	ble.n	800dbf0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800dbd8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	dd07      	ble.n	800dbf0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800dbe0:	6968      	ldr	r0, [r5, #20]
 800dbe2:	b128      	cbz	r0, 800dbf0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800dbe4:	6803      	ldr	r3, [r0, #0]
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbee:	4718      	bx	r3
 800dbf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dbf4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	8882      	ldrh	r2, [r0, #4]
 800dbf8:	880b      	ldrh	r3, [r1, #0]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	800b      	strh	r3, [r1, #0]
 800dbfe:	88c2      	ldrh	r2, [r0, #6]
 800dc00:	884b      	ldrh	r3, [r1, #2]
 800dc02:	460c      	mov	r4, r1
 800dc04:	4413      	add	r3, r2
 800dc06:	804b      	strh	r3, [r1, #2]
 800dc08:	4605      	mov	r5, r0
 800dc0a:	1d01      	adds	r1, r0, #4
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f7fb fbeb 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800dc12:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	dd19      	ble.n	800dc4e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800dc1a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	dd15      	ble.n	800dc4e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800dc22:	6968      	ldr	r0, [r5, #20]
 800dc24:	b128      	cbz	r0, 800dc32 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800dc26:	6803      	ldr	r3, [r0, #0]
 800dc28:	4621      	mov	r1, r4
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc30:	4718      	bx	r3
 800dc32:	4b07      	ldr	r3, [pc, #28]	@ (800dc50 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3304      	adds	r3, #4
 800dc38:	429d      	cmp	r5, r3
 800dc3a:	d108      	bne.n	800dc4e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800dc3c:	f7fe feea 	bl	800ca14 <_ZN8touchgfx11Application11getInstanceEv>
 800dc40:	6803      	ldr	r3, [r0, #0]
 800dc42:	6821      	ldr	r1, [r4, #0]
 800dc44:	6862      	ldr	r2, [r4, #4]
 800dc46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc4c:	4718      	bx	r3
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}
 800dc50:	2001546c 	.word	0x2001546c

0800dc54 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	4604      	mov	r4, r0
 800dc58:	4616      	mov	r6, r2
 800dc5a:	460d      	mov	r5, r1
 800dc5c:	b901      	cbnz	r1, 800dc60 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800dc5e:	b192      	cbz	r2, 800dc86 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800dc60:	6823      	ldr	r3, [r4, #0]
 800dc62:	4620      	mov	r0, r4
 800dc64:	699b      	ldr	r3, [r3, #24]
 800dc66:	4798      	blx	r3
 800dc68:	88e2      	ldrh	r2, [r4, #6]
 800dc6a:	88a1      	ldrh	r1, [r4, #4]
 800dc6c:	4432      	add	r2, r6
 800dc6e:	4429      	add	r1, r5
 800dc70:	4620      	mov	r0, r4
 800dc72:	b212      	sxth	r2, r2
 800dc74:	b209      	sxth	r1, r1
 800dc76:	f7f5 fa3d 	bl	80030f4 <_ZN8touchgfx8Drawable5setXYEss>
 800dc7a:	6823      	ldr	r3, [r4, #0]
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc84:	4718      	bx	r3
 800dc86:	bd70      	pop	{r4, r5, r6, pc}

0800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800dc88:	b510      	push	{r4, lr}
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	2300      	movs	r3, #0
 800dc90:	8023      	strh	r3, [r4, #0]
 800dc92:	8063      	strh	r3, [r4, #2]
 800dc94:	6803      	ldr	r3, [r0, #0]
 800dc96:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800dc9a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800dc9e:	80a1      	strh	r1, [r4, #4]
 800dca0:	80e2      	strh	r2, [r4, #6]
 800dca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dca4:	4621      	mov	r1, r4
 800dca6:	4798      	blx	r3
 800dca8:	4620      	mov	r0, r4
 800dcaa:	bd10      	pop	{r4, pc}

0800dcac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800dcac:	b530      	push	{r4, r5, lr}
 800dcae:	8083      	strh	r3, [r0, #4]
 800dcb0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800dcb4:	80c3      	strh	r3, [r0, #6]
 800dcb6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dcba:	7203      	strb	r3, [r0, #8]
 800dcbc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800dcc0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800dcc4:	7243      	strb	r3, [r0, #9]
 800dcc6:	7a83      	ldrb	r3, [r0, #10]
 800dcc8:	6141      	str	r1, [r0, #20]
 800dcca:	f365 0306 	bfi	r3, r5, #0, #7
 800dcce:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800dcd2:	8302      	strh	r2, [r0, #24]
 800dcd4:	f365 13c7 	bfi	r3, r5, #7, #1
 800dcd8:	7283      	strb	r3, [r0, #10]
 800dcda:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800dcde:	72c3      	strb	r3, [r0, #11]
 800dce0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800dce4:	7303      	strb	r3, [r0, #12]
 800dce6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800dcea:	81c3      	strh	r3, [r0, #14]
 800dcec:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800dcf0:	8203      	strh	r3, [r0, #16]
 800dcf2:	4b01      	ldr	r3, [pc, #4]	@ (800dcf8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800dcf4:	6003      	str	r3, [r0, #0]
 800dcf6:	bd30      	pop	{r4, r5, pc}
 800dcf8:	08015828 	.word	0x08015828

0800dcfc <_ZNK8touchgfx9ConstFont4findEt>:
 800dcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcfe:	6944      	ldr	r4, [r0, #20]
 800dd00:	b3bc      	cbz	r4, 800dd72 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dd02:	88a3      	ldrh	r3, [r4, #4]
 800dd04:	8b02      	ldrh	r2, [r0, #24]
 800dd06:	1acb      	subs	r3, r1, r3
 800dd08:	f102 32ff 	add.w	r2, r2, #4294967295
 800dd0c:	d431      	bmi.n	800dd72 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	dd0c      	ble.n	800dd2c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800dd12:	230e      	movs	r3, #14
 800dd14:	fb03 4302 	mla	r3, r3, r2, r4
 800dd18:	889b      	ldrh	r3, [r3, #4]
 800dd1a:	1a5b      	subs	r3, r3, r1
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	db27      	blt.n	800dd72 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	bfbc      	itt	lt
 800dd26:	2302      	movlt	r3, #2
 800dd28:	fb92 f3f3 	sdivlt	r3, r2, r3
 800dd2c:	2500      	movs	r5, #0
 800dd2e:	260e      	movs	r6, #14
 800dd30:	4295      	cmp	r5, r2
 800dd32:	dc1e      	bgt.n	800dd72 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dd34:	fb06 4003 	mla	r0, r6, r3, r4
 800dd38:	8887      	ldrh	r7, [r0, #4]
 800dd3a:	42b9      	cmp	r1, r7
 800dd3c:	d01a      	beq.n	800dd74 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800dd3e:	d20d      	bcs.n	800dd5c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800dd40:	1e5a      	subs	r2, r3, #1
 800dd42:	4295      	cmp	r5, r2
 800dd44:	dc15      	bgt.n	800dd72 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dd46:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800dd4a:	1a5b      	subs	r3, r3, r1
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	db0f      	blt.n	800dd72 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dd52:	429d      	cmp	r5, r3
 800dd54:	ddec      	ble.n	800dd30 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dd56:	1953      	adds	r3, r2, r5
 800dd58:	105b      	asrs	r3, r3, #1
 800dd5a:	e7e9      	b.n	800dd30 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dd5c:	1c5d      	adds	r5, r3, #1
 800dd5e:	42aa      	cmp	r2, r5
 800dd60:	db07      	blt.n	800dd72 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dd62:	8a43      	ldrh	r3, [r0, #18]
 800dd64:	1acb      	subs	r3, r1, r3
 800dd66:	442b      	add	r3, r5
 800dd68:	429d      	cmp	r5, r3
 800dd6a:	dc02      	bgt.n	800dd72 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	dadf      	bge.n	800dd30 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dd70:	e7f1      	b.n	800dd56 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800dd72:	2000      	movs	r0, #0
 800dd74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd76 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800dd76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd78:	4604      	mov	r4, r0
 800dd7a:	4617      	mov	r7, r2
 800dd7c:	461e      	mov	r6, r3
 800dd7e:	b911      	cbnz	r1, 800dd86 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800dd80:	2500      	movs	r5, #0
 800dd82:	4628      	mov	r0, r5
 800dd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd86:	290a      	cmp	r1, #10
 800dd88:	d0fa      	beq.n	800dd80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dd8a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800dd8e:	4291      	cmp	r1, r2
 800dd90:	d0f6      	beq.n	800dd80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dd92:	f242 020b 	movw	r2, #8203	@ 0x200b
 800dd96:	4291      	cmp	r1, r2
 800dd98:	d0f2      	beq.n	800dd80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dd9a:	f7ff ffaf 	bl	800dcfc <_ZNK8touchgfx9ConstFont4findEt>
 800dd9e:	4605      	mov	r5, r0
 800dda0:	b950      	cbnz	r0, 800ddb8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800dda2:	6823      	ldr	r3, [r4, #0]
 800dda4:	4620      	mov	r0, r4
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	4798      	blx	r3
 800ddaa:	4601      	mov	r1, r0
 800ddac:	4620      	mov	r0, r4
 800ddae:	f7ff ffa5 	bl	800dcfc <_ZNK8touchgfx9ConstFont4findEt>
 800ddb2:	4605      	mov	r5, r0
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d0e3      	beq.n	800dd80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ddb8:	6823      	ldr	r3, [r4, #0]
 800ddba:	4629      	mov	r1, r5
 800ddbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4798      	blx	r3
 800ddc2:	6038      	str	r0, [r7, #0]
 800ddc4:	6823      	ldr	r3, [r4, #0]
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddca:	4798      	blx	r3
 800ddcc:	7030      	strb	r0, [r6, #0]
 800ddce:	e7d8      	b.n	800dd82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800ddd0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	4770      	bx	lr

0800ddd4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800ddd4:	2001      	movs	r0, #1
 800ddd6:	4770      	bx	lr

0800ddd8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800ddd8:	2002      	movs	r0, #2
 800ddda:	4770      	bx	lr

0800dddc <_ZN8touchgfx6ScreenD1Ev>:
 800dddc:	4770      	bx	lr

0800ddde <_ZN8touchgfx12GestureEventD1Ev>:
 800ddde:	4770      	bx	lr

0800dde0 <_ZN8touchgfx9DragEventD1Ev>:
 800dde0:	4770      	bx	lr

0800dde2 <_ZN8touchgfx10ClickEventD1Ev>:
 800dde2:	4770      	bx	lr

0800dde4 <_ZN8touchgfx10ClickEventD0Ev>:
 800dde4:	b510      	push	{r4, lr}
 800dde6:	210c      	movs	r1, #12
 800dde8:	4604      	mov	r4, r0
 800ddea:	f004 fd71 	bl	80128d0 <_ZdlPvj>
 800ddee:	4620      	mov	r0, r4
 800ddf0:	bd10      	pop	{r4, pc}

0800ddf2 <_ZN8touchgfx9DragEventD0Ev>:
 800ddf2:	b510      	push	{r4, lr}
 800ddf4:	2110      	movs	r1, #16
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	f004 fd6a 	bl	80128d0 <_ZdlPvj>
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	bd10      	pop	{r4, pc}

0800de00 <_ZN8touchgfx12GestureEventD0Ev>:
 800de00:	b510      	push	{r4, lr}
 800de02:	210c      	movs	r1, #12
 800de04:	4604      	mov	r4, r0
 800de06:	f004 fd63 	bl	80128d0 <_ZdlPvj>
 800de0a:	4620      	mov	r0, r4
 800de0c:	bd10      	pop	{r4, pc}

0800de0e <_ZN8touchgfx6ScreenD0Ev>:
 800de0e:	b510      	push	{r4, lr}
 800de10:	213c      	movs	r1, #60	@ 0x3c
 800de12:	4604      	mov	r4, r0
 800de14:	f004 fd5c 	bl	80128d0 <_ZdlPvj>
 800de18:	4620      	mov	r0, r4
 800de1a:	bd10      	pop	{r4, pc}

0800de1c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800de1c:	b530      	push	{r4, r5, lr}
 800de1e:	460d      	mov	r5, r1
 800de20:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800de22:	b087      	sub	sp, #28
 800de24:	4604      	mov	r4, r0
 800de26:	b301      	cbz	r1, 800de6a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800de28:	a801      	add	r0, sp, #4
 800de2a:	f7ff ff2d 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800de2e:	892a      	ldrh	r2, [r5, #8]
 800de30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800de34:	7928      	ldrb	r0, [r5, #4]
 800de36:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800de3a:	f88d 0010 	strb.w	r0, [sp, #16]
 800de3e:	1ad2      	subs	r2, r2, r3
 800de40:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800de42:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800de44:	f8ad 1012 	strh.w	r1, [sp, #18]
 800de48:	441a      	add	r2, r3
 800de4a:	896b      	ldrh	r3, [r5, #10]
 800de4c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800de50:	f8ad 2014 	strh.w	r2, [sp, #20]
 800de54:	1b5b      	subs	r3, r3, r5
 800de56:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800de58:	442b      	add	r3, r5
 800de5a:	4d05      	ldr	r5, [pc, #20]	@ (800de70 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800de5c:	9503      	str	r5, [sp, #12]
 800de5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800de62:	6803      	ldr	r3, [r0, #0]
 800de64:	a903      	add	r1, sp, #12
 800de66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de68:	4798      	blx	r3
 800de6a:	b007      	add	sp, #28
 800de6c:	bd30      	pop	{r4, r5, pc}
 800de6e:	bf00      	nop
 800de70:	080158b8 	.word	0x080158b8

0800de74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800de74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de78:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800de7a:	b08a      	sub	sp, #40	@ 0x28
 800de7c:	4604      	mov	r4, r0
 800de7e:	460d      	mov	r5, r1
 800de80:	b113      	cbz	r3, 800de88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800de82:	790b      	ldrb	r3, [r1, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d044      	beq.n	800df12 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800de88:	f104 0804 	add.w	r8, r4, #4
 800de8c:	4641      	mov	r1, r8
 800de8e:	a803      	add	r0, sp, #12
 800de90:	f7ff fefa 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800de94:	792b      	ldrb	r3, [r5, #4]
 800de96:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800de9a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800de9e:	b983      	cbnz	r3, 800dec2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800dea0:	892a      	ldrh	r2, [r5, #8]
 800dea2:	88e9      	ldrh	r1, [r5, #6]
 800dea4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800dea8:	1b92      	subs	r2, r2, r6
 800deaa:	1bc9      	subs	r1, r1, r7
 800deac:	9301      	str	r3, [sp, #4]
 800deae:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	b212      	sxth	r2, r2
 800deb6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800deba:	b209      	sxth	r1, r1
 800debc:	4640      	mov	r0, r8
 800debe:	f7fb f9af 	bl	8009220 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800dec2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dec4:	b329      	cbz	r1, 800df12 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800dec6:	a805      	add	r0, sp, #20
 800dec8:	f7ff fede 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800decc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ded0:	792b      	ldrb	r3, [r5, #4]
 800ded2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ded4:	f88d 3020 	strb.w	r3, [sp, #32]
 800ded8:	1abf      	subs	r7, r7, r2
 800deda:	88ea      	ldrh	r2, [r5, #6]
 800dedc:	4417      	add	r7, r2
 800dede:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800dee0:	4417      	add	r7, r2
 800dee2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800dee6:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800deea:	1ab6      	subs	r6, r6, r2
 800deec:	892a      	ldrh	r2, [r5, #8]
 800deee:	4416      	add	r6, r2
 800def0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800def2:	4416      	add	r6, r2
 800def4:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800def8:	4a07      	ldr	r2, [pc, #28]	@ (800df18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800defa:	9207      	str	r2, [sp, #28]
 800defc:	2600      	movs	r6, #0
 800defe:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800df02:	6803      	ldr	r3, [r0, #0]
 800df04:	a907      	add	r1, sp, #28
 800df06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df08:	4798      	blx	r3
 800df0a:	792b      	ldrb	r3, [r5, #4]
 800df0c:	b10b      	cbz	r3, 800df12 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800df0e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800df12:	b00a      	add	sp, #40	@ 0x28
 800df14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df18:	08015890 	.word	0x08015890

0800df1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800df1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df20:	460c      	mov	r4, r1
 800df22:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800df24:	b088      	sub	sp, #32
 800df26:	4605      	mov	r5, r0
 800df28:	2900      	cmp	r1, #0
 800df2a:	d06d      	beq.n	800e008 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800df2c:	4668      	mov	r0, sp
 800df2e:	f7ff feab 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800df32:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800df34:	88e3      	ldrh	r3, [r4, #6]
 800df36:	f9bd 8000 	ldrsh.w	r8, [sp]
 800df3a:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800df3e:	440b      	add	r3, r1
 800df40:	b21b      	sxth	r3, r3
 800df42:	4543      	cmp	r3, r8
 800df44:	db31      	blt.n	800dfaa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800df46:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800df4a:	44c4      	add	ip, r8
 800df4c:	fa0f fc8c 	sxth.w	ip, ip
 800df50:	4563      	cmp	r3, ip
 800df52:	da2a      	bge.n	800dfaa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800df54:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800df56:	8926      	ldrh	r6, [r4, #8]
 800df58:	4416      	add	r6, r2
 800df5a:	b236      	sxth	r6, r6
 800df5c:	42be      	cmp	r6, r7
 800df5e:	db24      	blt.n	800dfaa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800df60:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800df64:	4438      	add	r0, r7
 800df66:	b200      	sxth	r0, r0
 800df68:	4286      	cmp	r6, r0
 800df6a:	da1e      	bge.n	800dfaa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800df6c:	8963      	ldrh	r3, [r4, #10]
 800df6e:	4419      	add	r1, r3
 800df70:	b209      	sxth	r1, r1
 800df72:	4541      	cmp	r1, r8
 800df74:	db08      	blt.n	800df88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800df76:	4561      	cmp	r1, ip
 800df78:	da06      	bge.n	800df88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800df7a:	89a3      	ldrh	r3, [r4, #12]
 800df7c:	441a      	add	r2, r3
 800df7e:	b212      	sxth	r2, r2
 800df80:	42ba      	cmp	r2, r7
 800df82:	db01      	blt.n	800df88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800df84:	4282      	cmp	r2, r0
 800df86:	db10      	blt.n	800dfaa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800df88:	4b21      	ldr	r3, [pc, #132]	@ (800e010 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800df8a:	9304      	str	r3, [sp, #16]
 800df8c:	2302      	movs	r3, #2
 800df8e:	f88d 3014 	strb.w	r3, [sp, #20]
 800df92:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800df94:	2300      	movs	r3, #0
 800df96:	f8ad 3016 	strh.w	r3, [sp, #22]
 800df9a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800df9e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dfa2:	6803      	ldr	r3, [r0, #0]
 800dfa4:	a904      	add	r1, sp, #16
 800dfa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfa8:	4798      	blx	r3
 800dfaa:	1d29      	adds	r1, r5, #4
 800dfac:	a802      	add	r0, sp, #8
 800dfae:	f7ff fe6b 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dfb2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800dfb6:	88e0      	ldrh	r0, [r4, #6]
 800dfb8:	7921      	ldrb	r1, [r4, #4]
 800dfba:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800dfbe:	8922      	ldrh	r2, [r4, #8]
 800dfc0:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800dfc2:	f88d 1014 	strb.w	r1, [sp, #20]
 800dfc6:	eba3 0808 	sub.w	r8, r3, r8
 800dfca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800dfce:	1bdf      	subs	r7, r3, r7
 800dfd0:	b2bb      	uxth	r3, r7
 800dfd2:	fa1f f888 	uxth.w	r8, r8
 800dfd6:	8967      	ldrh	r7, [r4, #10]
 800dfd8:	89a4      	ldrh	r4, [r4, #12]
 800dfda:	4440      	add	r0, r8
 800dfdc:	4460      	add	r0, ip
 800dfde:	441a      	add	r2, r3
 800dfe0:	44b8      	add	r8, r7
 800dfe2:	4423      	add	r3, r4
 800dfe4:	f8ad 0016 	strh.w	r0, [sp, #22]
 800dfe8:	4433      	add	r3, r6
 800dfea:	4432      	add	r2, r6
 800dfec:	44e0      	add	r8, ip
 800dfee:	4c09      	ldr	r4, [pc, #36]	@ (800e014 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800dff0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800dff2:	9404      	str	r4, [sp, #16]
 800dff4:	f8ad 2018 	strh.w	r2, [sp, #24]
 800dff8:	f8ad 801a 	strh.w	r8, [sp, #26]
 800dffc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e000:	6803      	ldr	r3, [r0, #0]
 800e002:	a904      	add	r1, sp, #16
 800e004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e006:	4798      	blx	r3
 800e008:	b008      	add	sp, #32
 800e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00e:	bf00      	nop
 800e010:	08015890 	.word	0x08015890
 800e014:	080158a4 	.word	0x080158a4

0800e018 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e01a:	4604      	mov	r4, r0
 800e01c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e020:	3201      	adds	r2, #1
 800e022:	d112      	bne.n	800e04a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e024:	6803      	ldr	r3, [r0, #0]
 800e026:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e02a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e02e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e032:	2500      	movs	r5, #0
 800e034:	9500      	str	r5, [sp, #0]
 800e036:	466d      	mov	r5, sp
 800e038:	4629      	mov	r1, r5
 800e03a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e040:	4798      	blx	r3
 800e042:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e046:	e884 0003 	stmia.w	r4, {r0, r1}
 800e04a:	4620      	mov	r0, r4
 800e04c:	b003      	add	sp, #12
 800e04e:	bd30      	pop	{r4, r5, pc}

0800e050 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e050:	b513      	push	{r0, r1, r4, lr}
 800e052:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e056:	3301      	adds	r3, #1
 800e058:	4604      	mov	r4, r0
 800e05a:	d109      	bne.n	800e070 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e05c:	4601      	mov	r1, r0
 800e05e:	4668      	mov	r0, sp
 800e060:	f7ff fe12 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e064:	f8bd 3000 	ldrh.w	r3, [sp]
 800e068:	8423      	strh	r3, [r4, #32]
 800e06a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e06e:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e070:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e074:	b002      	add	sp, #8
 800e076:	bd10      	pop	{r4, pc}

0800e078 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e078:	b513      	push	{r0, r1, r4, lr}
 800e07a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800e07e:	3301      	adds	r3, #1
 800e080:	4604      	mov	r4, r0
 800e082:	d109      	bne.n	800e098 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e084:	4601      	mov	r1, r0
 800e086:	4668      	mov	r0, sp
 800e088:	f7ff fdfe 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e08c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e090:	8423      	strh	r3, [r4, #32]
 800e092:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e096:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e098:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800e09c:	b002      	add	sp, #8
 800e09e:	bd10      	pop	{r4, pc}

0800e0a0 <_ZN8touchgfx6ScreenC1Ev>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	4605      	mov	r5, r0
 800e0a4:	4b16      	ldr	r3, [pc, #88]	@ (800e100 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e0a6:	f845 3b04 	str.w	r3, [r5], #4
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	8103      	strh	r3, [r0, #8]
 800e0ae:	8143      	strh	r3, [r0, #10]
 800e0b0:	8183      	strh	r3, [r0, #12]
 800e0b2:	81c3      	strh	r3, [r0, #14]
 800e0b4:	8203      	strh	r3, [r0, #16]
 800e0b6:	8243      	strh	r3, [r0, #18]
 800e0b8:	8283      	strh	r3, [r0, #20]
 800e0ba:	82c3      	strh	r3, [r0, #22]
 800e0bc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e0c0:	6203      	str	r3, [r0, #32]
 800e0c2:	8483      	strh	r3, [r0, #36]	@ 0x24
 800e0c4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e0c6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800e0ca:	4a0e      	ldr	r2, [pc, #56]	@ (800e104 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e0cc:	6343      	str	r3, [r0, #52]	@ 0x34
 800e0ce:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800e0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e108 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e0d4:	6042      	str	r2, [r0, #4]
 800e0d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e0da:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e0dc:	4a0b      	ldr	r2, [pc, #44]	@ (800e10c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e0de:	4604      	mov	r4, r0
 800e0e0:	2101      	movs	r1, #1
 800e0e2:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800e0e6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e0ea:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	4798      	blx	r3
 800e0f2:	6863      	ldr	r3, [r4, #4]
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0f8:	4631      	mov	r1, r6
 800e0fa:	4798      	blx	r3
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	bd70      	pop	{r4, r5, r6, pc}
 800e100:	080158cc 	.word	0x080158cc
 800e104:	080154d4 	.word	0x080154d4
 800e108:	20015426 	.word	0x20015426
 800e10c:	20015424 	.word	0x20015424

0800e110 <_ZN8touchgfx6Screen4drawEv>:
 800e110:	b507      	push	{r0, r1, r2, lr}
 800e112:	4b09      	ldr	r3, [pc, #36]	@ (800e138 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e114:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e118:	4b08      	ldr	r3, [pc, #32]	@ (800e13c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e11a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e11e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e122:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e126:	6803      	ldr	r3, [r0, #0]
 800e128:	2100      	movs	r1, #0
 800e12a:	9100      	str	r1, [sp, #0]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	4669      	mov	r1, sp
 800e130:	4798      	blx	r3
 800e132:	b003      	add	sp, #12
 800e134:	f85d fb04 	ldr.w	pc, [sp], #4
 800e138:	20015424 	.word	0x20015424
 800e13c:	20015426 	.word	0x20015426

0800e140 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	b089      	sub	sp, #36	@ 0x24
 800e14c:	4680      	mov	r8, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	4615      	mov	r5, r2
 800e152:	dd0e      	ble.n	800e172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e154:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	dd0a      	ble.n	800e172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e15c:	4628      	mov	r0, r5
 800e15e:	f7ff ff5b 	bl	800e018 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e162:	4621      	mov	r1, r4
 800e164:	f7fe fb77 	bl	800c856 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e168:	69eb      	ldr	r3, [r5, #28]
 800e16a:	b928      	cbnz	r0, 800e178 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e16c:	461d      	mov	r5, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1f4      	bne.n	800e15c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e172:	b009      	add	sp, #36	@ 0x24
 800e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e178:	ae04      	add	r6, sp, #16
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f000 80b5 	beq.w	800e2ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	4629      	mov	r1, r5
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	a802      	add	r0, sp, #8
 800e188:	4798      	blx	r3
 800e18a:	4628      	mov	r0, r5
 800e18c:	f7ff ff60 	bl	800e050 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e190:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e194:	4407      	add	r7, r0
 800e196:	4628      	mov	r0, r5
 800e198:	f7ff ff6e 	bl	800e078 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e19c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e1a0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e1a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e1a8:	4418      	add	r0, r3
 800e1aa:	4621      	mov	r1, r4
 800e1ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e1b0:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e1b4:	b23f      	sxth	r7, r7
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e1bc:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e1c0:	f7fb f912 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f7ff ff27 	bl	800e018 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e1d0:	ab06      	add	r3, sp, #24
 800e1d2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fb f905 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800e1de:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e1e2:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e1e6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e1ea:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e1ee:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e1f2:	4299      	cmp	r1, r3
 800e1f4:	d10b      	bne.n	800e20e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e1f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e1fa:	4552      	cmp	r2, sl
 800e1fc:	d107      	bne.n	800e20e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e1fe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e202:	455a      	cmp	r2, fp
 800e204:	d103      	bne.n	800e20e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e206:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e20a:	454a      	cmp	r2, r9
 800e20c:	d06d      	beq.n	800e2ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e20e:	f1bb 0f00 	cmp.w	fp, #0
 800e212:	dd65      	ble.n	800e2e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e214:	f1b9 0f00 	cmp.w	r9, #0
 800e218:	dd62      	ble.n	800e2e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e21a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e21e:	fa1f f08a 	uxth.w	r0, sl
 800e222:	4552      	cmp	r2, sl
 800e224:	9000      	str	r0, [sp, #0]
 800e226:	da12      	bge.n	800e24e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e228:	9301      	str	r3, [sp, #4]
 800e22a:	9b00      	ldr	r3, [sp, #0]
 800e22c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e230:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e234:	1a9a      	subs	r2, r3, r2
 800e236:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e23a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e23e:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e242:	69ea      	ldr	r2, [r5, #28]
 800e244:	4631      	mov	r1, r6
 800e246:	4640      	mov	r0, r8
 800e248:	f7ff ff7a 	bl	800e140 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e24c:	9b01      	ldr	r3, [sp, #4]
 800e24e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e252:	429a      	cmp	r2, r3
 800e254:	b29f      	uxth	r7, r3
 800e256:	da0d      	bge.n	800e274 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e258:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e25c:	1aba      	subs	r2, r7, r2
 800e25e:	f8ad a012 	strh.w	sl, [sp, #18]
 800e262:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e266:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e26a:	69ea      	ldr	r2, [r5, #28]
 800e26c:	4631      	mov	r1, r6
 800e26e:	4640      	mov	r0, r8
 800e270:	f7ff ff66 	bl	800e140 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e274:	8822      	ldrh	r2, [r4, #0]
 800e276:	88a3      	ldrh	r3, [r4, #4]
 800e278:	445f      	add	r7, fp
 800e27a:	4413      	add	r3, r2
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	b2bf      	uxth	r7, r7
 800e280:	b23a      	sxth	r2, r7
 800e282:	b219      	sxth	r1, r3
 800e284:	4291      	cmp	r1, r2
 800e286:	dd0d      	ble.n	800e2a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e288:	1bdb      	subs	r3, r3, r7
 800e28a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e28e:	f8ad a012 	strh.w	sl, [sp, #18]
 800e292:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e296:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e29a:	69ea      	ldr	r2, [r5, #28]
 800e29c:	4631      	mov	r1, r6
 800e29e:	4640      	mov	r0, r8
 800e2a0:	f7ff ff4e 	bl	800e140 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e2a4:	88e2      	ldrh	r2, [r4, #6]
 800e2a6:	8863      	ldrh	r3, [r4, #2]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	9a00      	ldr	r2, [sp, #0]
 800e2ac:	444a      	add	r2, r9
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	fa1f f982 	uxth.w	r9, r2
 800e2b4:	fa0f f289 	sxth.w	r2, r9
 800e2b8:	b219      	sxth	r1, r3
 800e2ba:	428a      	cmp	r2, r1
 800e2bc:	da15      	bge.n	800e2ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e2be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e2c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e2c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e2ca:	eba3 0309 	sub.w	r3, r3, r9
 800e2ce:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e2d2:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e2d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e2da:	69ea      	ldr	r2, [r5, #28]
 800e2dc:	4631      	mov	r1, r6
 800e2de:	e001      	b.n	800e2e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e2e0:	69ea      	ldr	r2, [r5, #28]
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	4640      	mov	r0, r8
 800e2e6:	f7ff ff2b 	bl	800e140 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f7ff fe94 	bl	800e018 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e2f0:	6861      	ldr	r1, [r4, #4]
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	6820      	ldr	r0, [r4, #0]
 800e2f6:	4633      	mov	r3, r6
 800e2f8:	c303      	stmia	r3!, {r0, r1}
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	f7fb f873 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800e302:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e306:	2b00      	cmp	r3, #0
 800e308:	f77f af33 	ble.w	800e172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e30c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e310:	2b00      	cmp	r3, #0
 800e312:	f77f af2e 	ble.w	800e172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e316:	4628      	mov	r0, r5
 800e318:	f7ff fe9a 	bl	800e050 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e31c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e320:	1a18      	subs	r0, r3, r0
 800e322:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e326:	4628      	mov	r0, r5
 800e328:	f7ff fea6 	bl	800e078 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e32c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e330:	1a18      	subs	r0, r3, r0
 800e332:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e336:	682b      	ldr	r3, [r5, #0]
 800e338:	4631      	mov	r1, r6
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	4628      	mov	r0, r5
 800e33e:	4798      	blx	r3
 800e340:	e717      	b.n	800e172 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e342 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e342:	b570      	push	{r4, r5, r6, lr}
 800e344:	460c      	mov	r4, r1
 800e346:	b086      	sub	sp, #24
 800e348:	1d06      	adds	r6, r0, #4
 800e34a:	2300      	movs	r3, #0
 800e34c:	4631      	mov	r1, r6
 800e34e:	4605      	mov	r5, r0
 800e350:	a802      	add	r0, sp, #8
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	f7ff fc98 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e358:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e35c:	8822      	ldrh	r2, [r4, #0]
 800e35e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e362:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e366:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e36a:	1ad2      	subs	r2, r2, r3
 800e36c:	8863      	ldrh	r3, [r4, #2]
 800e36e:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e372:	1a5b      	subs	r3, r3, r1
 800e374:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e378:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e37c:	aa01      	add	r2, sp, #4
 800e37e:	a904      	add	r1, sp, #16
 800e380:	4630      	mov	r0, r6
 800e382:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e386:	f7fb f907 	bl	8009598 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e38a:	9a01      	ldr	r2, [sp, #4]
 800e38c:	b11a      	cbz	r2, 800e396 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e38e:	4621      	mov	r1, r4
 800e390:	4628      	mov	r0, r5
 800e392:	f7ff fed5 	bl	800e140 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e396:	b006      	add	sp, #24
 800e398:	bd70      	pop	{r4, r5, r6, pc}

0800e39a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e39a:	b530      	push	{r4, r5, lr}
 800e39c:	4602      	mov	r2, r0
 800e39e:	4604      	mov	r4, r0
 800e3a0:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e3a4:	b085      	sub	sp, #20
 800e3a6:	460d      	mov	r5, r1
 800e3a8:	6851      	ldr	r1, [r2, #4]
 800e3aa:	466b      	mov	r3, sp
 800e3ac:	c303      	stmia	r3!, {r0, r1}
 800e3ae:	4629      	mov	r1, r5
 800e3b0:	4668      	mov	r0, sp
 800e3b2:	f7fb f819 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 800e3b6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e3ba:	b12b      	cbz	r3, 800e3c8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e3bc:	4669      	mov	r1, sp
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f7ff ffbf 	bl	800e342 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e3c4:	b005      	add	sp, #20
 800e3c6:	bd30      	pop	{r4, r5, pc}
 800e3c8:	3404      	adds	r4, #4
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	a802      	add	r0, sp, #8
 800e3ce:	f7ff fc5b 	bl	800dc88 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3d2:	f8bd 3000 	ldrh.w	r3, [sp]
 800e3d6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e3da:	1a9b      	subs	r3, r3, r2
 800e3dc:	f8ad 3000 	strh.w	r3, [sp]
 800e3e0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e3e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e3e8:	4669      	mov	r1, sp
 800e3ea:	1a9b      	subs	r3, r3, r2
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e3f2:	f7fb f898 	bl	8009526 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e3f6:	e7e5      	b.n	800e3c4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e3f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e3f8:	680a      	ldr	r2, [r1, #0]
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	6992      	ldr	r2, [r2, #24]
 800e3fe:	1d01      	adds	r1, r0, #4
 800e400:	4618      	mov	r0, r3
 800e402:	4710      	bx	r2

0800e404 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800e404:	4298      	cmp	r0, r3
 800e406:	d200      	bcs.n	800e40a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800e408:	b913      	cbnz	r3, 800e410 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800e40a:	440a      	add	r2, r1
 800e40c:	b210      	sxth	r0, r2
 800e40e:	4770      	bx	lr
 800e410:	ee07 0a90 	vmov	s15, r0
 800e414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e418:	ee07 3a90 	vmov	s15, r3
 800e41c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e428:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e42c:	ee07 2a90 	vmov	s15, r2
 800e430:	ee67 5a07 	vmul.f32	s11, s14, s14
 800e434:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800e438:	eee5 6a87 	vfma.f32	s13, s11, s14
 800e43c:	ee07 1a90 	vmov	s15, r1
 800e440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e444:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e448:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e44c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	bfcc      	ite	gt
 800e456:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800e45a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800e45e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e462:	ee17 3a90 	vmov	r3, s15
 800e466:	b218      	sxth	r0, r3
 800e468:	4770      	bx	lr

0800e46a <_ZN8touchgfx12TextProviderC1Ev>:
 800e46a:	b538      	push	{r3, r4, r5, lr}
 800e46c:	2500      	movs	r5, #0
 800e46e:	2302      	movs	r3, #2
 800e470:	4604      	mov	r4, r0
 800e472:	e9c0 5500 	strd	r5, r5, [r0]
 800e476:	7403      	strb	r3, [r0, #16]
 800e478:	6145      	str	r5, [r0, #20]
 800e47a:	7605      	strb	r5, [r0, #24]
 800e47c:	83c5      	strh	r5, [r0, #30]
 800e47e:	8405      	strh	r5, [r0, #32]
 800e480:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e482:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e484:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e486:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e48a:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e48e:	220e      	movs	r2, #14
 800e490:	4629      	mov	r1, r5
 800e492:	304c      	adds	r0, #76	@ 0x4c
 800e494:	f004 fc51 	bl	8012d3a <memset>
 800e498:	2301      	movs	r3, #1
 800e49a:	4620      	mov	r0, r4
 800e49c:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e4a0:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e4a4:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e4a8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e4ac:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e4b0:	f7f5 fafe 	bl	8003ab0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}

0800e4b8 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800e4b8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e4ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e4be:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800e4c0:	fab0 f080 	clz	r0, r0
 800e4c4:	0940      	lsrs	r0, r0, #5
 800e4c6:	4770      	bx	lr

0800e4c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e4c8:	b530      	push	{r4, r5, lr}
 800e4ca:	2500      	movs	r5, #0
 800e4cc:	2401      	movs	r4, #1
 800e4ce:	6843      	ldr	r3, [r0, #4]
 800e4d0:	b913      	cbnz	r3, 800e4d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e4d2:	6803      	ldr	r3, [r0, #0]
 800e4d4:	b313      	cbz	r3, 800e51c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e4d6:	6043      	str	r3, [r0, #4]
 800e4d8:	7e03      	ldrb	r3, [r0, #24]
 800e4da:	b143      	cbz	r3, 800e4ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e4dc:	6943      	ldr	r3, [r0, #20]
 800e4de:	b12b      	cbz	r3, 800e4ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e4e0:	881a      	ldrh	r2, [r3, #0]
 800e4e2:	b11a      	cbz	r2, 800e4ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e4e4:	1c9a      	adds	r2, r3, #2
 800e4e6:	6142      	str	r2, [r0, #20]
 800e4e8:	8818      	ldrh	r0, [r3, #0]
 800e4ea:	bd30      	pop	{r4, r5, pc}
 800e4ec:	7605      	strb	r5, [r0, #24]
 800e4ee:	6843      	ldr	r3, [r0, #4]
 800e4f0:	8819      	ldrh	r1, [r3, #0]
 800e4f2:	b199      	cbz	r1, 800e51c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e4f4:	1c9a      	adds	r2, r3, #2
 800e4f6:	2902      	cmp	r1, #2
 800e4f8:	6042      	str	r2, [r0, #4]
 800e4fa:	d1f5      	bne.n	800e4e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e4fc:	7c03      	ldrb	r3, [r0, #16]
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d8e5      	bhi.n	800e4ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	3302      	adds	r3, #2
 800e506:	7402      	strb	r2, [r0, #16]
 800e508:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e50c:	6143      	str	r3, [r0, #20]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d0dd      	beq.n	800e4ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d0da      	beq.n	800e4ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e518:	7604      	strb	r4, [r0, #24]
 800e51a:	e7d8      	b.n	800e4ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e51c:	2000      	movs	r0, #0
 800e51e:	e7e4      	b.n	800e4ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e520:	b430      	push	{r4, r5}
 800e522:	6001      	str	r1, [r0, #0]
 800e524:	2100      	movs	r1, #0
 800e526:	6041      	str	r1, [r0, #4]
 800e528:	6815      	ldr	r5, [r2, #0]
 800e52a:	6085      	str	r5, [r0, #8]
 800e52c:	6852      	ldr	r2, [r2, #4]
 800e52e:	6443      	str	r3, [r0, #68]	@ 0x44
 800e530:	9b02      	ldr	r3, [sp, #8]
 800e532:	60c2      	str	r2, [r0, #12]
 800e534:	7401      	strb	r1, [r0, #16]
 800e536:	6141      	str	r1, [r0, #20]
 800e538:	7601      	strb	r1, [r0, #24]
 800e53a:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e53c:	8401      	strh	r1, [r0, #32]
 800e53e:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e542:	6483      	str	r3, [r0, #72]	@ 0x48
 800e544:	bc30      	pop	{r4, r5}
 800e546:	f7f5 bab3 	b.w	8003ab0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e54a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800e54a:	b408      	push	{r3}
 800e54c:	b510      	push	{r4, lr}
 800e54e:	b085      	sub	sp, #20
 800e550:	ac07      	add	r4, sp, #28
 800e552:	f854 3b04 	ldr.w	r3, [r4], #4
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	4613      	mov	r3, r2
 800e55a:	4622      	mov	r2, r4
 800e55c:	9403      	str	r4, [sp, #12]
 800e55e:	f7ff ffdf 	bl	800e520 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e562:	b005      	add	sp, #20
 800e564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e568:	b001      	add	sp, #4
 800e56a:	4770      	bx	lr

0800e56c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56e:	4605      	mov	r5, r0
 800e570:	4608      	mov	r0, r1
 800e572:	b1e9      	cbz	r1, 800e5b0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800e574:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800e578:	460b      	mov	r3, r1
 800e57a:	f101 0708 	add.w	r7, r1, #8
 800e57e:	4622      	mov	r2, r4
 800e580:	6818      	ldr	r0, [r3, #0]
 800e582:	6859      	ldr	r1, [r3, #4]
 800e584:	4626      	mov	r6, r4
 800e586:	c603      	stmia	r6!, {r0, r1}
 800e588:	3308      	adds	r3, #8
 800e58a:	42bb      	cmp	r3, r7
 800e58c:	4634      	mov	r4, r6
 800e58e:	d1f7      	bne.n	800e580 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e590:	6818      	ldr	r0, [r3, #0]
 800e592:	6030      	str	r0, [r6, #0]
 800e594:	889b      	ldrh	r3, [r3, #4]
 800e596:	80b3      	strh	r3, [r6, #4]
 800e598:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e59c:	015b      	lsls	r3, r3, #5
 800e59e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e5a2:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800e5a6:	430b      	orrs	r3, r1
 800e5a8:	425b      	negs	r3, r3
 800e5aa:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800e5b2:	b538      	push	{r3, r4, r5, lr}
 800e5b4:	460c      	mov	r4, r1
 800e5b6:	6811      	ldr	r1, [r2, #0]
 800e5b8:	4610      	mov	r0, r2
 800e5ba:	68cd      	ldr	r5, [r1, #12]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	47a8      	blx	r5
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	bf08      	it	eq
 800e5c4:	4620      	moveq	r0, r4
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}

0800e5c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800e5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5cc:	468c      	mov	ip, r1
 800e5ce:	4605      	mov	r5, r0
 800e5d0:	4614      	mov	r4, r2
 800e5d2:	b942      	cbnz	r2, 800e5e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800e5d4:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e5d8:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800e5dc:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e6:	7b50      	ldrb	r0, [r2, #13]
 800e5e8:	8893      	ldrh	r3, [r2, #4]
 800e5ea:	0106      	lsls	r6, r0, #4
 800e5ec:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e5f0:	79e6      	ldrb	r6, [r4, #7]
 800e5f2:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800e5f6:	4316      	orrs	r6, r2
 800e5f8:	185a      	adds	r2, r3, r1
 800e5fa:	b291      	uxth	r1, r2
 800e5fc:	291d      	cmp	r1, #29
 800e5fe:	b2b7      	uxth	r7, r6
 800e600:	d87e      	bhi.n	800e700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800e602:	2201      	movs	r2, #1
 800e604:	408a      	lsls	r2, r1
 800e606:	498a      	ldr	r1, [pc, #552]	@ (800e830 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 800e608:	420a      	tst	r2, r1
 800e60a:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800e60e:	d12d      	bne.n	800e66c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800e610:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800e614:	d074      	beq.n	800e700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800e616:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e61a:	4623      	mov	r3, r4
 800e61c:	f104 0e08 	add.w	lr, r4, #8
 800e620:	4614      	mov	r4, r2
 800e622:	6818      	ldr	r0, [r3, #0]
 800e624:	6859      	ldr	r1, [r3, #4]
 800e626:	4694      	mov	ip, r2
 800e628:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e62c:	3308      	adds	r3, #8
 800e62e:	4573      	cmp	r3, lr
 800e630:	4662      	mov	r2, ip
 800e632:	d1f6      	bne.n	800e622 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800e634:	6818      	ldr	r0, [r3, #0]
 800e636:	f8cc 0000 	str.w	r0, [ip]
 800e63a:	889b      	ldrh	r3, [r3, #4]
 800e63c:	f8ac 3004 	strh.w	r3, [ip, #4]
 800e640:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800e644:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800e648:	b2b3      	uxth	r3, r6
 800e64a:	1aca      	subs	r2, r1, r3
 800e64c:	b292      	uxth	r2, r2
 800e64e:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800e652:	10d2      	asrs	r2, r2, #3
 800e654:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800e658:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800e65c:	4302      	orrs	r2, r0
 800e65e:	1bcf      	subs	r7, r1, r7
 800e660:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800e664:	1afb      	subs	r3, r7, r3
 800e666:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800e66a:	e7b9      	b.n	800e5e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e66c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e670:	4623      	mov	r3, r4
 800e672:	f104 0808 	add.w	r8, r4, #8
 800e676:	4614      	mov	r4, r2
 800e678:	6818      	ldr	r0, [r3, #0]
 800e67a:	6859      	ldr	r1, [r3, #4]
 800e67c:	4696      	mov	lr, r2
 800e67e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e682:	3308      	adds	r3, #8
 800e684:	4543      	cmp	r3, r8
 800e686:	4672      	mov	r2, lr
 800e688:	d1f6      	bne.n	800e678 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800e68a:	6818      	ldr	r0, [r3, #0]
 800e68c:	f8ce 0000 	str.w	r0, [lr]
 800e690:	889b      	ldrh	r3, [r3, #4]
 800e692:	f8ae 3004 	strh.w	r3, [lr, #4]
 800e696:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800e698:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e69c:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800e69e:	f640 6333 	movw	r3, #3635	@ 0xe33
 800e6a2:	4299      	cmp	r1, r3
 800e6a4:	d111      	bne.n	800e6ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800e6a6:	f8dc 3000 	ldr.w	r3, [ip]
 800e6aa:	4660      	mov	r0, ip
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	4798      	blx	r3
 800e6b0:	7b41      	ldrb	r1, [r0, #13]
 800e6b2:	00cb      	lsls	r3, r1, #3
 800e6b4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e6b8:	7a03      	ldrb	r3, [r0, #8]
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	064a      	lsls	r2, r1, #25
 800e6be:	bf44      	itt	mi
 800e6c0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e6c4:	b21b      	sxthmi	r3, r3
 800e6c6:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e6ca:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800e6ce:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800e6d2:	443b      	add	r3, r7
 800e6d4:	4433      	add	r3, r6
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e6dc:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800e6e0:	10db      	asrs	r3, r3, #3
 800e6e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e6e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800e6f0:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800e6f4:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800e6f8:	1a9b      	subs	r3, r3, r2
 800e6fa:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e6fe:	e76f      	b.n	800e5e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e700:	f023 0204 	bic.w	r2, r3, #4
 800e704:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800e708:	428a      	cmp	r2, r1
 800e70a:	d003      	beq.n	800e714 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800e70c:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800e710:	4293      	cmp	r3, r2
 800e712:	d137      	bne.n	800e784 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 800e714:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800e718:	4622      	mov	r2, r4
 800e71a:	f104 0808 	add.w	r8, r4, #8
 800e71e:	4634      	mov	r4, r6
 800e720:	6810      	ldr	r0, [r2, #0]
 800e722:	6851      	ldr	r1, [r2, #4]
 800e724:	46b6      	mov	lr, r6
 800e726:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e72a:	3208      	adds	r2, #8
 800e72c:	4542      	cmp	r2, r8
 800e72e:	4676      	mov	r6, lr
 800e730:	d1f6      	bne.n	800e720 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800e732:	6810      	ldr	r0, [r2, #0]
 800e734:	f8ce 0000 	str.w	r0, [lr]
 800e738:	8892      	ldrh	r2, [r2, #4]
 800e73a:	f8ae 2004 	strh.w	r2, [lr, #4]
 800e73e:	3b01      	subs	r3, #1
 800e740:	b29b      	uxth	r3, r3
 800e742:	4662      	mov	r2, ip
 800e744:	4621      	mov	r1, r4
 800e746:	4628      	mov	r0, r5
 800e748:	f7ff ff33 	bl	800e5b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e74c:	7b41      	ldrb	r1, [r0, #13]
 800e74e:	00cb      	lsls	r3, r1, #3
 800e750:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e754:	7a03      	ldrb	r3, [r0, #8]
 800e756:	0648      	lsls	r0, r1, #25
 800e758:	ea43 0302 	orr.w	r3, r3, r2
 800e75c:	bf44      	itt	mi
 800e75e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e762:	b21b      	sxthmi	r3, r3
 800e764:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e768:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e76c:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800e770:	005b      	lsls	r3, r3, #1
 800e772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e776:	4313      	orrs	r3, r2
 800e778:	115a      	asrs	r2, r3, #5
 800e77a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800e77e:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800e782:	e046      	b.n	800e812 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 800e784:	00c2      	lsls	r2, r0, #3
 800e786:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800e78a:	7a22      	ldrb	r2, [r4, #8]
 800e78c:	430a      	orrs	r2, r1
 800e78e:	0641      	lsls	r1, r0, #25
 800e790:	bf44      	itt	mi
 800e792:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800e796:	b212      	sxthmi	r2, r2
 800e798:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e79c:	f640 6109 	movw	r1, #3593	@ 0xe09
 800e7a0:	f023 0210 	bic.w	r2, r3, #16
 800e7a4:	428a      	cmp	r2, r1
 800e7a6:	d003      	beq.n	800e7b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 800e7a8:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d13d      	bne.n	800e82c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 800e7b0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e7b4:	f104 0808 	add.w	r8, r4, #8
 800e7b8:	4696      	mov	lr, r2
 800e7ba:	6820      	ldr	r0, [r4, #0]
 800e7bc:	6861      	ldr	r1, [r4, #4]
 800e7be:	4616      	mov	r6, r2
 800e7c0:	c603      	stmia	r6!, {r0, r1}
 800e7c2:	3408      	adds	r4, #8
 800e7c4:	4544      	cmp	r4, r8
 800e7c6:	4632      	mov	r2, r6
 800e7c8:	d1f7      	bne.n	800e7ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 800e7ca:	6820      	ldr	r0, [r4, #0]
 800e7cc:	6030      	str	r0, [r6, #0]
 800e7ce:	88a1      	ldrh	r1, [r4, #4]
 800e7d0:	80b1      	strh	r1, [r6, #4]
 800e7d2:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800e7d6:	0076      	lsls	r6, r6, #1
 800e7d8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e7dc:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800e7e0:	4316      	orrs	r6, r2
 800e7e2:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	bf1a      	itte	ne
 800e7ea:	f103 33ff 	addne.w	r3, r3, #4294967295
 800e7ee:	b29b      	uxthne	r3, r3
 800e7f0:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800e7f4:	4662      	mov	r2, ip
 800e7f6:	4671      	mov	r1, lr
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	4674      	mov	r4, lr
 800e7fc:	f7ff fed9 	bl	800e5b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e800:	7b43      	ldrb	r3, [r0, #13]
 800e802:	7a82      	ldrb	r2, [r0, #10]
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e80a:	4313      	orrs	r3, r2
 800e80c:	1af6      	subs	r6, r6, r3
 800e80e:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800e812:	7b61      	ldrb	r1, [r4, #13]
 800e814:	00cb      	lsls	r3, r1, #3
 800e816:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e81a:	7a23      	ldrb	r3, [r4, #8]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	064a      	lsls	r2, r1, #25
 800e820:	bf44      	itt	mi
 800e822:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e826:	b21b      	sxthmi	r3, r3
 800e828:	1bdb      	subs	r3, r3, r7
 800e82a:	e71c      	b.n	800e666 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800e82c:	2300      	movs	r3, #0
 800e82e:	e7a6      	b.n	800e77e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 800e830:	3fc00079 	.word	0x3fc00079

0800e834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800e834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e838:	4604      	mov	r4, r0
 800e83a:	b942      	cbnz	r2, 800e84e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800e83c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e840:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800e844:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800e848:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800e84c:	e047      	b.n	800e8de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800e84e:	7b51      	ldrb	r1, [r2, #13]
 800e850:	8893      	ldrh	r3, [r2, #4]
 800e852:	010d      	lsls	r5, r1, #4
 800e854:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800e858:	79d5      	ldrb	r5, [r2, #7]
 800e85a:	4305      	orrs	r5, r0
 800e85c:	2d04      	cmp	r5, #4
 800e85e:	bfcc      	ite	gt
 800e860:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800e864:	f04f 0e01 	movle.w	lr, #1
 800e868:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800e86c:	f200 80ab 	bhi.w	800e9c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800e870:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800e874:	4283      	cmp	r3, r0
 800e876:	d216      	bcs.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e878:	f240 605b 	movw	r0, #1627	@ 0x65b
 800e87c:	4283      	cmp	r3, r0
 800e87e:	d859      	bhi.n	800e934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800e880:	f240 6057 	movw	r0, #1623	@ 0x657
 800e884:	4283      	cmp	r3, r0
 800e886:	d20e      	bcs.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e888:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800e88c:	d24a      	bcs.n	800e924 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800e88e:	f240 604e 	movw	r0, #1614	@ 0x64e
 800e892:	4283      	cmp	r3, r0
 800e894:	d207      	bcs.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e896:	f240 601a 	movw	r0, #1562	@ 0x61a
 800e89a:	4283      	cmp	r3, r0
 800e89c:	d02a      	beq.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e89e:	d821      	bhi.n	800e8e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800e8a0:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800e8a4:	d35b      	bcc.n	800e95e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e8a6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800e8aa:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e8ae:	f040 80d0 	bne.w	800ea52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800e8b2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800e8b6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e8ba:	f040 80ca 	bne.w	800ea52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800e8be:	00cb      	lsls	r3, r1, #3
 800e8c0:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e8c4:	7a13      	ldrb	r3, [r2, #8]
 800e8c6:	0649      	lsls	r1, r1, #25
 800e8c8:	ea43 0300 	orr.w	r3, r3, r0
 800e8cc:	bf44      	itt	mi
 800e8ce:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e8d2:	b21b      	sxthmi	r3, r3
 800e8d4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e8d8:	1b5d      	subs	r5, r3, r5
 800e8da:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e8de:	4610      	mov	r0, r2
 800e8e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8e4:	f240 604b 	movw	r0, #1611	@ 0x64b
 800e8e8:	4283      	cmp	r3, r0
 800e8ea:	d338      	bcc.n	800e95e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e8ec:	f240 604c 	movw	r0, #1612	@ 0x64c
 800e8f0:	4283      	cmp	r3, r0
 800e8f2:	d9d8      	bls.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e8f4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800e8f8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800e8fc:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e900:	f040 80f2 	bne.w	800eae8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800e904:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e908:	f040 80ee 	bne.w	800eae8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800e90c:	00cb      	lsls	r3, r1, #3
 800e90e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e912:	7a13      	ldrb	r3, [r2, #8]
 800e914:	064e      	lsls	r6, r1, #25
 800e916:	ea43 0300 	orr.w	r3, r3, r0
 800e91a:	bf44      	itt	mi
 800e91c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e920:	b21b      	sxthmi	r3, r3
 800e922:	e7d9      	b.n	800e8d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800e924:	f240 6054 	movw	r0, #1620	@ 0x654
 800e928:	4283      	cmp	r3, r0
 800e92a:	d8e3      	bhi.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e92c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800e930:	d9e0      	bls.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e932:	e7b8      	b.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e934:	f240 6074 	movw	r0, #1652	@ 0x674
 800e938:	4283      	cmp	r3, r0
 800e93a:	d0b4      	beq.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e93c:	d82d      	bhi.n	800e99a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800e93e:	f240 605e 	movw	r0, #1630	@ 0x65e
 800e942:	4283      	cmp	r3, r0
 800e944:	d804      	bhi.n	800e950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800e946:	f240 605d 	movw	r0, #1629	@ 0x65d
 800e94a:	4283      	cmp	r3, r0
 800e94c:	d3d2      	bcc.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e94e:	e7aa      	b.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e950:	f240 605f 	movw	r0, #1631	@ 0x65f
 800e954:	4283      	cmp	r3, r0
 800e956:	d0cd      	beq.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e958:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800e95c:	d0a3      	beq.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e95e:	00cb      	lsls	r3, r1, #3
 800e960:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e964:	7a13      	ldrb	r3, [r2, #8]
 800e966:	0649      	lsls	r1, r1, #25
 800e968:	ea43 0300 	orr.w	r3, r3, r0
 800e96c:	bf44      	itt	mi
 800e96e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e972:	b21b      	sxthmi	r3, r3
 800e974:	1b5d      	subs	r5, r3, r5
 800e976:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e97a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e97e:	7b53      	ldrb	r3, [r2, #13]
 800e980:	015b      	lsls	r3, r3, #5
 800e982:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e986:	7993      	ldrb	r3, [r2, #6]
 800e988:	430b      	orrs	r3, r1
 800e98a:	005b      	lsls	r3, r3, #1
 800e98c:	2105      	movs	r1, #5
 800e98e:	fb93 f3f1 	sdiv	r3, r3, r1
 800e992:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800e996:	440b      	add	r3, r1
 800e998:	e756      	b.n	800e848 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800e99a:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800e99e:	4283      	cmp	r3, r0
 800e9a0:	d809      	bhi.n	800e9b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800e9a2:	f240 60df 	movw	r0, #1759	@ 0x6df
 800e9a6:	4283      	cmp	r3, r0
 800e9a8:	f4bf af7d 	bcs.w	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e9ac:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800e9b0:	2b05      	cmp	r3, #5
 800e9b2:	d8d4      	bhi.n	800e95e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e9b4:	e777      	b.n	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e9b6:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800e9ba:	4283      	cmp	r3, r0
 800e9bc:	d09a      	beq.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e9be:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800e9c2:	4283      	cmp	r3, r0
 800e9c4:	e7ca      	b.n	800e95c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800e9c6:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800e9ca:	d22b      	bcs.n	800ea24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800e9cc:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800e9d0:	4283      	cmp	r3, r0
 800e9d2:	d28f      	bcs.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e9d4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800e9d8:	4283      	cmp	r3, r0
 800e9da:	d816      	bhi.n	800ea0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800e9dc:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800e9e0:	4283      	cmp	r3, r0
 800e9e2:	f4bf af60 	bcs.w	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e9e6:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800e9ea:	4283      	cmp	r3, r0
 800e9ec:	d80a      	bhi.n	800ea04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800e9ee:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800e9f2:	4283      	cmp	r3, r0
 800e9f4:	f4bf af57 	bcs.w	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e9f8:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800e9fc:	4283      	cmp	r3, r0
 800e9fe:	f43f af79 	beq.w	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea02:	e7ac      	b.n	800e95e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ea04:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800ea08:	e7f8      	b.n	800e9fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ea0a:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800ea0e:	4283      	cmp	r3, r0
 800ea10:	d802      	bhi.n	800ea18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ea12:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800ea16:	e798      	b.n	800e94a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800ea18:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800ea1c:	4283      	cmp	r3, r0
 800ea1e:	f47f af42 	bne.w	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea22:	e767      	b.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea24:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800ea28:	4283      	cmp	r3, r0
 800ea2a:	f43f af63 	beq.w	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea2e:	d802      	bhi.n	800ea36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ea30:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800ea34:	e7f2      	b.n	800ea1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800ea36:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800ea3a:	4283      	cmp	r3, r0
 800ea3c:	d805      	bhi.n	800ea4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ea3e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800ea42:	4283      	cmp	r3, r0
 800ea44:	f4ff af2f 	bcc.w	800e8a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea48:	e754      	b.n	800e8f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea4a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800ea4e:	4283      	cmp	r3, r0
 800ea50:	e7af      	b.n	800e9b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800ea52:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ea56:	4617      	mov	r7, r2
 800ea58:	f102 0808 	add.w	r8, r2, #8
 800ea5c:	4666      	mov	r6, ip
 800ea5e:	6838      	ldr	r0, [r7, #0]
 800ea60:	6879      	ldr	r1, [r7, #4]
 800ea62:	46e6      	mov	lr, ip
 800ea64:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ea68:	3708      	adds	r7, #8
 800ea6a:	4547      	cmp	r7, r8
 800ea6c:	46f4      	mov	ip, lr
 800ea6e:	d1f6      	bne.n	800ea5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800ea70:	6838      	ldr	r0, [r7, #0]
 800ea72:	f8ce 0000 	str.w	r0, [lr]
 800ea76:	88b9      	ldrh	r1, [r7, #4]
 800ea78:	f8ae 1004 	strh.w	r1, [lr, #4]
 800ea7c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ea80:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ea84:	d009      	beq.n	800ea9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800ea86:	7b51      	ldrb	r1, [r2, #13]
 800ea88:	7992      	ldrb	r2, [r2, #6]
 800ea8a:	0149      	lsls	r1, r1, #5
 800ea8c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ea90:	4311      	orrs	r1, r2
 800ea92:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ea96:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ea9a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ea9e:	b2ad      	uxth	r5, r5
 800eaa0:	d00d      	beq.n	800eabe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800eaa2:	442b      	add	r3, r5
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800eaaa:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800eaae:	10db      	asrs	r3, r3, #3
 800eab0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800eab4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eab8:	4313      	orrs	r3, r2
 800eaba:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800eabe:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800eac2:	00cb      	lsls	r3, r1, #3
 800eac4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800eac8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800eacc:	064f      	lsls	r7, r1, #25
 800eace:	ea43 0302 	orr.w	r3, r3, r2
 800ead2:	bf44      	itt	mi
 800ead4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ead8:	b21b      	sxthmi	r3, r3
 800eada:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eade:	1b5b      	subs	r3, r3, r5
 800eae0:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800eae4:	4632      	mov	r2, r6
 800eae6:	e6fa      	b.n	800e8de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800eae8:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800eaec:	4617      	mov	r7, r2
 800eaee:	f102 0908 	add.w	r9, r2, #8
 800eaf2:	4666      	mov	r6, ip
 800eaf4:	6838      	ldr	r0, [r7, #0]
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	46e0      	mov	r8, ip
 800eafa:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800eafe:	3708      	adds	r7, #8
 800eb00:	454f      	cmp	r7, r9
 800eb02:	46c4      	mov	ip, r8
 800eb04:	d1f6      	bne.n	800eaf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800eb06:	6838      	ldr	r0, [r7, #0]
 800eb08:	f8c8 0000 	str.w	r0, [r8]
 800eb0c:	88b9      	ldrh	r1, [r7, #4]
 800eb0e:	f8a8 1004 	strh.w	r1, [r8, #4]
 800eb12:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800eb16:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800eb1a:	d009      	beq.n	800eb30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800eb1c:	7b51      	ldrb	r1, [r2, #13]
 800eb1e:	7992      	ldrb	r2, [r2, #6]
 800eb20:	0149      	lsls	r1, r1, #5
 800eb22:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800eb26:	4311      	orrs	r1, r2
 800eb28:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800eb2c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800eb30:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800eb34:	d00e      	beq.n	800eb54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800eb36:	eba3 030e 	sub.w	r3, r3, lr
 800eb3a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800eb44:	10db      	asrs	r3, r3, #3
 800eb46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800eb54:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800eb58:	00cb      	lsls	r3, r1, #3
 800eb5a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800eb5e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800eb62:	0648      	lsls	r0, r1, #25
 800eb64:	ea43 0302 	orr.w	r3, r3, r2
 800eb68:	bf44      	itt	mi
 800eb6a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eb6e:	b21b      	sxthmi	r3, r3
 800eb70:	1b5d      	subs	r5, r3, r5
 800eb72:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800eb76:	e7b5      	b.n	800eae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800eb78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800eb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7c:	461e      	mov	r6, r3
 800eb7e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800eb80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800eb84:	4604      	mov	r4, r0
 800eb86:	4617      	mov	r7, r2
 800eb88:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800eb8c:	f7f4 ff4e 	bl	8003a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800eb90:	4605      	mov	r5, r0
 800eb92:	b918      	cbnz	r0, 800eb9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800eb94:	6030      	str	r0, [r6, #0]
 800eb96:	4628      	mov	r0, r5
 800eb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	4601      	mov	r1, r0
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	4638      	mov	r0, r7
 800eba4:	4798      	blx	r3
 800eba6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800ebaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ebae:	4602      	mov	r2, r0
 800ebb0:	6030      	str	r0, [r6, #0]
 800ebb2:	d213      	bcs.n	800ebdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800ebb4:	4643      	mov	r3, r8
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f7ff fe3b 	bl	800e834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800ebbe:	6030      	str	r0, [r6, #0]
 800ebc0:	6833      	ldr	r3, [r6, #0]
 800ebc2:	b143      	cbz	r3, 800ebd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800ebc4:	7b5a      	ldrb	r2, [r3, #13]
 800ebc6:	7a9b      	ldrb	r3, [r3, #10]
 800ebc8:	0052      	lsls	r2, r2, #1
 800ebca:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	bf0c      	ite	eq
 800ebd2:	2301      	moveq	r3, #1
 800ebd4:	2300      	movne	r3, #0
 800ebd6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800ebda:	e7dc      	b.n	800eb96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800ebdc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	2b7f      	cmp	r3, #127	@ 0x7f
 800ebe4:	d804      	bhi.n	800ebf0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800ebe6:	4639      	mov	r1, r7
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f7ff fced 	bl	800e5c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800ebee:	e7e6      	b.n	800ebbe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800ebf0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d0e3      	beq.n	800ebc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800ebf8:	f640 1302 	movw	r3, #2306	@ 0x902
 800ebfc:	429d      	cmp	r5, r3
 800ebfe:	d1df      	bne.n	800ebc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800ec00:	4601      	mov	r1, r0
 800ec02:	4620      	mov	r0, r4
 800ec04:	f7ff fcb2 	bl	800e56c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800ec08:	e7d9      	b.n	800ebbe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800ec0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800ec0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec0e:	461e      	mov	r6, r3
 800ec10:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ec12:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ec16:	4604      	mov	r4, r0
 800ec18:	4617      	mov	r7, r2
 800ec1a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ec1e:	f7f4 ff05 	bl	8003a2c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ec22:	4605      	mov	r5, r0
 800ec24:	b918      	cbnz	r0, 800ec2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800ec26:	6030      	str	r0, [r6, #0]
 800ec28:	4628      	mov	r0, r5
 800ec2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	4601      	mov	r1, r0
 800ec32:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800ec36:	4638      	mov	r0, r7
 800ec38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ec3c:	47c8      	blx	r9
 800ec3e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800ec42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec46:	4602      	mov	r2, r0
 800ec48:	6030      	str	r0, [r6, #0]
 800ec4a:	d213      	bcs.n	800ec74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800ec4c:	4643      	mov	r3, r8
 800ec4e:	4639      	mov	r1, r7
 800ec50:	4620      	mov	r0, r4
 800ec52:	f7ff fdef 	bl	800e834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800ec56:	6030      	str	r0, [r6, #0]
 800ec58:	6833      	ldr	r3, [r6, #0]
 800ec5a:	b143      	cbz	r3, 800ec6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800ec5c:	7b5a      	ldrb	r2, [r3, #13]
 800ec5e:	7a9b      	ldrb	r3, [r3, #10]
 800ec60:	0052      	lsls	r2, r2, #1
 800ec62:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800ec66:	4313      	orrs	r3, r2
 800ec68:	bf0c      	ite	eq
 800ec6a:	2301      	moveq	r3, #1
 800ec6c:	2300      	movne	r3, #0
 800ec6e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800ec72:	e7d9      	b.n	800ec28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800ec74:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec7c:	d804      	bhi.n	800ec88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800ec7e:	4639      	mov	r1, r7
 800ec80:	4620      	mov	r0, r4
 800ec82:	f7ff fca1 	bl	800e5c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800ec86:	e7e6      	b.n	800ec56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800ec88:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d0e3      	beq.n	800ec58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800ec90:	f640 1302 	movw	r3, #2306	@ 0x902
 800ec94:	429d      	cmp	r5, r3
 800ec96:	d1df      	bne.n	800ec58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800ec98:	4601      	mov	r1, r0
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f7ff fc66 	bl	800e56c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800eca0:	e7d9      	b.n	800ec56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800eca2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800eca2:	b510      	push	{r4, lr}
 800eca4:	4604      	mov	r4, r0
 800eca6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800ecaa:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ecac:	b1f1      	cbz	r1, 800ecec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800ecae:	2b0a      	cmp	r3, #10
 800ecb0:	d02f      	beq.n	800ed12 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800ecb2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800ecb4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800ecb8:	3901      	subs	r1, #1
 800ecba:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800ecbc:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800ecc0:	1c51      	adds	r1, r2, #1
 800ecc2:	b289      	uxth	r1, r1
 800ecc4:	2901      	cmp	r1, #1
 800ecc6:	bf84      	itt	hi
 800ecc8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800eccc:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800ecce:	f103 0201 	add.w	r2, r3, #1
 800ecd2:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ecd4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ecd6:	bf98      	it	ls
 800ecd8:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800ecda:	4413      	add	r3, r2
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	2b09      	cmp	r3, #9
 800ece0:	bf88      	it	hi
 800ece2:	3b0a      	subhi	r3, #10
 800ece4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ece8:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ecea:	e7dc      	b.n	800eca6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800ecec:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ecee:	2b0a      	cmp	r3, #10
 800ecf0:	d00f      	beq.n	800ed12 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f7ff fbe8 	bl	800e4c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800ecf8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ecfa:	1c5a      	adds	r2, r3, #1
 800ecfc:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ecfe:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ed00:	4413      	add	r3, r2
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	2b09      	cmp	r3, #9
 800ed06:	bf88      	it	hi
 800ed08:	3b0a      	subhi	r3, #10
 800ed0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ed0e:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ed10:	e7ec      	b.n	800ecec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800ed12:	bd10      	pop	{r4, pc}

0800ed14 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ed18:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800ed20:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800ed22:	3a01      	subs	r2, #1
 800ed24:	8702      	strh	r2, [r0, #56]	@ 0x38
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	b292      	uxth	r2, r2
 800ed2a:	2a09      	cmp	r2, #9
 800ed2c:	bf86      	itte	hi
 800ed2e:	3b09      	subhi	r3, #9
 800ed30:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800ed32:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800ed34:	f7ff ffb5 	bl	800eca2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ed38:	8c23      	ldrh	r3, [r4, #32]
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	bf9c      	itt	ls
 800ed3e:	3301      	addls	r3, #1
 800ed40:	8423      	strhls	r3, [r4, #32]
 800ed42:	8be3      	ldrh	r3, [r4, #30]
 800ed44:	b90b      	cbnz	r3, 800ed4a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800ed46:	2302      	movs	r3, #2
 800ed48:	83e3      	strh	r3, [r4, #30]
 800ed4a:	8be3      	ldrh	r3, [r4, #30]
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	83e3      	strh	r3, [r4, #30]
 800ed52:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800ed56:	4628      	mov	r0, r5
 800ed58:	8365      	strh	r5, [r4, #26]
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}

0800ed5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800ed5c:	428a      	cmp	r2, r1
 800ed5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed62:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800ed64:	d931      	bls.n	800edca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800ed66:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800ed68:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800ed6c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800ed70:	19ee      	adds	r6, r5, r7
 800ed72:	1a54      	subs	r4, r2, r1
 800ed74:	3e01      	subs	r6, #1
 800ed76:	fa1f fe84 	uxth.w	lr, r4
 800ed7a:	b2b4      	uxth	r4, r6
 800ed7c:	eba4 090e 	sub.w	r9, r4, lr
 800ed80:	fa1f f989 	uxth.w	r9, r9
 800ed84:	2c09      	cmp	r4, #9
 800ed86:	4626      	mov	r6, r4
 800ed88:	bf88      	it	hi
 800ed8a:	f1a4 060a 	subhi.w	r6, r4, #10
 800ed8e:	f1bc 0f00 	cmp.w	ip, #0
 800ed92:	bf08      	it	eq
 800ed94:	f04f 0c02 	moveq.w	ip, #2
 800ed98:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800ed9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eda0:	fa1f fc8c 	uxth.w	ip, ip
 800eda4:	3c01      	subs	r4, #1
 800eda6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800edaa:	b2a4      	uxth	r4, r4
 800edac:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800edb0:	454c      	cmp	r4, r9
 800edb2:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800edb6:	d1e5      	bne.n	800ed84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800edb8:	eba5 050e 	sub.w	r5, r5, lr
 800edbc:	eb0e 0408 	add.w	r4, lr, r8
 800edc0:	8705      	strh	r5, [r0, #56]	@ 0x38
 800edc2:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800edc6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800edca:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800edcc:	1a64      	subs	r4, r4, r1
 800edce:	4439      	add	r1, r7
 800edd0:	b289      	uxth	r1, r1
 800edd2:	2909      	cmp	r1, #9
 800edd4:	bf88      	it	hi
 800edd6:	390a      	subhi	r1, #10
 800edd8:	8704      	strh	r4, [r0, #56]	@ 0x38
 800edda:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800eddc:	250a      	movs	r5, #10
 800edde:	b18a      	cbz	r2, 800ee04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800ede0:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800ede2:	3a01      	subs	r2, #1
 800ede4:	b292      	uxth	r2, r2
 800ede6:	3101      	adds	r1, #1
 800ede8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800edec:	8701      	strh	r1, [r0, #56]	@ 0x38
 800edee:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800edf0:	b901      	cbnz	r1, 800edf4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800edf2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800edf4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800edf6:	3901      	subs	r1, #1
 800edf8:	b289      	uxth	r1, r1
 800edfa:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800edfc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ee00:	844c      	strh	r4, [r1, #34]	@ 0x22
 800ee02:	e7ec      	b.n	800edde <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800ee04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee08:	f7ff bf4b 	b.w	800eca2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800ee0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	2500      	movs	r5, #0
 800ee10:	4295      	cmp	r5, r2
 800ee12:	d011      	beq.n	800ee38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800ee14:	8bc4      	ldrh	r4, [r0, #30]
 800ee16:	f831 6b02 	ldrh.w	r6, [r1], #2
 800ee1a:	4414      	add	r4, r2
 800ee1c:	3c01      	subs	r4, #1
 800ee1e:	1b64      	subs	r4, r4, r5
 800ee20:	b2a4      	uxth	r4, r4
 800ee22:	2c01      	cmp	r4, #1
 800ee24:	bf88      	it	hi
 800ee26:	3c02      	subhi	r4, #2
 800ee28:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ee2c:	8b64      	ldrh	r4, [r4, #26]
 800ee2e:	42b4      	cmp	r4, r6
 800ee30:	d117      	bne.n	800ee62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800ee32:	3501      	adds	r5, #1
 800ee34:	b2ad      	uxth	r5, r5
 800ee36:	e7eb      	b.n	800ee10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800ee38:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ee3c:	2400      	movs	r4, #0
 800ee3e:	4413      	add	r3, r2
 800ee40:	b2a2      	uxth	r2, r4
 800ee42:	429a      	cmp	r2, r3
 800ee44:	da0f      	bge.n	800ee66 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800ee46:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800ee48:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ee4c:	4432      	add	r2, r6
 800ee4e:	b292      	uxth	r2, r2
 800ee50:	2a09      	cmp	r2, #9
 800ee52:	bf88      	it	hi
 800ee54:	3a0a      	subhi	r2, #10
 800ee56:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ee5a:	3401      	adds	r4, #1
 800ee5c:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800ee5e:	42aa      	cmp	r2, r5
 800ee60:	d0ee      	beq.n	800ee40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800ee62:	2000      	movs	r0, #0
 800ee64:	bd70      	pop	{r4, r5, r6, pc}
 800ee66:	2001      	movs	r0, #1
 800ee68:	e7fc      	b.n	800ee64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800ee6a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800ee6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6e:	4605      	mov	r5, r0
 800ee70:	4616      	mov	r6, r2
 800ee72:	1c8c      	adds	r4, r1, #2
 800ee74:	8809      	ldrh	r1, [r1, #0]
 800ee76:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800ee7a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800ee7e:	42b3      	cmp	r3, r6
 800ee80:	d124      	bne.n	800eecc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800ee82:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800ee86:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800ee8a:	f001 070f 	and.w	r7, r1, #15
 800ee8e:	f8cd 8000 	str.w	r8, [sp]
 800ee92:	464b      	mov	r3, r9
 800ee94:	4652      	mov	r2, sl
 800ee96:	4621      	mov	r1, r4
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f7ff ffb7 	bl	800ee0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800ee9e:	4683      	mov	fp, r0
 800eea0:	b168      	cbz	r0, 800eebe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800eea2:	eb0a 0109 	add.w	r1, sl, r9
 800eea6:	4441      	add	r1, r8
 800eea8:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800eeac:	463a      	mov	r2, r7
 800eeae:	4649      	mov	r1, r9
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	f7ff ff53 	bl	800ed5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800eeb6:	4658      	mov	r0, fp
 800eeb8:	b003      	add	sp, #12
 800eeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eebe:	eb07 010a 	add.w	r1, r7, sl
 800eec2:	4449      	add	r1, r9
 800eec4:	4441      	add	r1, r8
 800eec6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800eeca:	e7d2      	b.n	800ee72 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800eecc:	f04f 0b00 	mov.w	fp, #0
 800eed0:	e7f1      	b.n	800eeb6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800eed2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800eed2:	b570      	push	{r4, r5, r6, lr}
 800eed4:	8810      	ldrh	r0, [r2, #0]
 800eed6:	4298      	cmp	r0, r3
 800eed8:	d817      	bhi.n	800ef0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800eeda:	1e48      	subs	r0, r1, #1
 800eedc:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800eee0:	4298      	cmp	r0, r3
 800eee2:	d312      	bcc.n	800ef0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800eee4:	2400      	movs	r4, #0
 800eee6:	428c      	cmp	r4, r1
 800eee8:	d20f      	bcs.n	800ef0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800eeea:	1860      	adds	r0, r4, r1
 800eeec:	1040      	asrs	r0, r0, #1
 800eeee:	0085      	lsls	r5, r0, #2
 800eef0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800eef4:	42b3      	cmp	r3, r6
 800eef6:	d902      	bls.n	800eefe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800eef8:	3001      	adds	r0, #1
 800eefa:	b284      	uxth	r4, r0
 800eefc:	e7f3      	b.n	800eee6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800eefe:	d201      	bcs.n	800ef04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800ef00:	b281      	uxth	r1, r0
 800ef02:	e7f0      	b.n	800eee6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800ef04:	442a      	add	r2, r5
 800ef06:	8850      	ldrh	r0, [r2, #2]
 800ef08:	bd70      	pop	{r4, r5, r6, pc}
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e7fc      	b.n	800ef08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800ef0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800ef0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef12:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800ef14:	886f      	ldrh	r7, [r5, #2]
 800ef16:	4604      	mov	r4, r0
 800ef18:	087f      	lsrs	r7, r7, #1
 800ef1a:	260b      	movs	r6, #11
 800ef1c:	3e01      	subs	r6, #1
 800ef1e:	d013      	beq.n	800ef48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800ef20:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800ef22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ef26:	462a      	mov	r2, r5
 800ef28:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ef2c:	4639      	mov	r1, r7
 800ef2e:	4643      	mov	r3, r8
 800ef30:	4620      	mov	r0, r4
 800ef32:	f7ff ffce 	bl	800eed2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800ef36:	b138      	cbz	r0, 800ef48 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800ef38:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800ef3c:	4642      	mov	r2, r8
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f7ff ff93 	bl	800ee6a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d1e9      	bne.n	800ef1c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800ef48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800ef4c:	b570      	push	{r4, r5, r6, lr}
 800ef4e:	694a      	ldr	r2, [r1, #20]
 800ef50:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800ef52:	684b      	ldr	r3, [r1, #4]
 800ef54:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800ef56:	1b54      	subs	r4, r2, r5
 800ef58:	f000 8106 	beq.w	800f168 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800ef5c:	1b9b      	subs	r3, r3, r6
 800ef5e:	d003      	beq.n	800ef68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800ef60:	4363      	muls	r3, r4
 800ef62:	2210      	movs	r2, #16
 800ef64:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef68:	680c      	ldr	r4, [r1, #0]
 800ef6a:	698a      	ldr	r2, [r1, #24]
 800ef6c:	1b65      	subs	r5, r4, r5
 800ef6e:	f000 80fd 	beq.w	800f16c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800ef72:	1b92      	subs	r2, r2, r6
 800ef74:	d003      	beq.n	800ef7e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800ef76:	436a      	muls	r2, r5
 800ef78:	2410      	movs	r4, #16
 800ef7a:	fb92 f2f4 	sdiv	r2, r2, r4
 800ef7e:	1a9b      	subs	r3, r3, r2
 800ef80:	ee07 3a90 	vmov	s15, r3
 800ef84:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800f1a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800ef88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ef90:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ef94:	460a      	mov	r2, r1
 800ef96:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	f100 040c 	add.w	r4, r0, #12
 800efa0:	eeb1 6a43 	vneg.f32	s12, s6
 800efa4:	edd2 7a02 	vldr	s15, [r2, #8]
 800efa8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800efac:	3214      	adds	r2, #20
 800efae:	ece3 6a01 	vstmia	r3!, {s13}
 800efb2:	ed52 7a02 	vldr	s15, [r2, #-8]
 800efb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800efba:	429c      	cmp	r4, r3
 800efbc:	edc3 7a02 	vstr	s15, [r3, #8]
 800efc0:	ed52 7a01 	vldr	s15, [r2, #-4]
 800efc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800efc8:	edc3 7a05 	vstr	s15, [r3, #20]
 800efcc:	d1ea      	bne.n	800efa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800efce:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800efd0:	698b      	ldr	r3, [r1, #24]
 800efd2:	edd0 4a02 	vldr	s9, [r0, #8]
 800efd6:	edd0 3a00 	vldr	s7, [r0]
 800efda:	edd0 6a01 	vldr	s13, [r0, #4]
 800efde:	ed90 5a05 	vldr	s10, [r0, #20]
 800efe2:	ed90 2a03 	vldr	s4, [r0, #12]
 800efe6:	edd0 5a04 	vldr	s11, [r0, #16]
 800efea:	ed90 1a07 	vldr	s2, [r0, #28]
 800efee:	edd0 2a06 	vldr	s5, [r0, #24]
 800eff2:	1a9b      	subs	r3, r3, r2
 800eff4:	ee07 3a90 	vmov	s15, r3
 800eff8:	684b      	ldr	r3, [r1, #4]
 800effa:	1a9b      	subs	r3, r3, r2
 800effc:	ee07 3a10 	vmov	s14, r3
 800f000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f004:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f008:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f00c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800f010:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f014:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800f018:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f01c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f020:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f024:	ee32 5a45 	vsub.f32	s10, s4, s10
 800f028:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f02c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800f030:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f032:	694a      	ldr	r2, [r1, #20]
 800f034:	1b13      	subs	r3, r2, r4
 800f036:	ee07 3a10 	vmov	s14, r3
 800f03a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f03e:	680b      	ldr	r3, [r1, #0]
 800f040:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f044:	1b1b      	subs	r3, r3, r4
 800f046:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800f04a:	ee07 3a10 	vmov	s14, r3
 800f04e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f052:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f056:	eee6 4a87 	vfma.f32	s9, s13, s14
 800f05a:	ee64 4a86 	vmul.f32	s9, s9, s12
 800f05e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800f062:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f064:	698b      	ldr	r3, [r1, #24]
 800f066:	1a9b      	subs	r3, r3, r2
 800f068:	ee06 3a90 	vmov	s13, r3
 800f06c:	684b      	ldr	r3, [r1, #4]
 800f06e:	1a9b      	subs	r3, r3, r2
 800f070:	ee07 3a10 	vmov	s14, r3
 800f074:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f078:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f07c:	ee66 6a84 	vmul.f32	s13, s13, s8
 800f080:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f084:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800f088:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f08c:	ee66 6a83 	vmul.f32	s13, s13, s6
 800f090:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800f094:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f096:	694a      	ldr	r2, [r1, #20]
 800f098:	1b13      	subs	r3, r2, r4
 800f09a:	ee07 3a10 	vmov	s14, r3
 800f09e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0a2:	680b      	ldr	r3, [r1, #0]
 800f0a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f0a8:	1b1b      	subs	r3, r3, r4
 800f0aa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800f0ae:	ee07 3a10 	vmov	s14, r3
 800f0b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f0ba:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f0be:	edd0 5a08 	vldr	s11, [r0, #32]
 800f0c2:	ee25 5a06 	vmul.f32	s10, s10, s12
 800f0c6:	ee31 1a65 	vsub.f32	s2, s2, s11
 800f0ca:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800f0ce:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f0d0:	698b      	ldr	r3, [r1, #24]
 800f0d2:	1a9b      	subs	r3, r3, r2
 800f0d4:	ee07 3a10 	vmov	s14, r3
 800f0d8:	684b      	ldr	r3, [r1, #4]
 800f0da:	1a9b      	subs	r3, r3, r2
 800f0dc:	ee01 3a90 	vmov	s3, r3
 800f0e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0e4:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800f0e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f0ec:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800f0f0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800f0f4:	ee61 1a84 	vmul.f32	s3, s3, s8
 800f0f8:	eea1 7a21 	vfma.f32	s14, s2, s3
 800f0fc:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f100:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800f104:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f106:	694a      	ldr	r2, [r1, #20]
 800f108:	1b13      	subs	r3, r2, r4
 800f10a:	ee03 3a10 	vmov	s6, r3
 800f10e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f112:	680b      	ldr	r3, [r1, #0]
 800f114:	ee23 3a04 	vmul.f32	s6, s6, s8
 800f118:	1b1b      	subs	r3, r3, r4
 800f11a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800f11e:	ee03 3a10 	vmov	s6, r3
 800f122:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f126:	ee23 4a04 	vmul.f32	s8, s6, s8
 800f12a:	eee1 5a04 	vfma.f32	s11, s2, s8
 800f12e:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f132:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800f136:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800f13a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800f13e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f146:	dd13      	ble.n	800f170 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800f148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f14c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800f150:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800f152:	eee3 7a87 	vfma.f32	s15, s7, s14
 800f156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15e:	dd15      	ble.n	800f18c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800f160:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f164:	6403      	str	r3, [r0, #64]	@ 0x40
 800f166:	bd70      	pop	{r4, r5, r6, pc}
 800f168:	4623      	mov	r3, r4
 800f16a:	e6fd      	b.n	800ef68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f16c:	462a      	mov	r2, r5
 800f16e:	e706      	b.n	800ef7e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f170:	d502      	bpl.n	800f178 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800f172:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800f176:	e7e9      	b.n	800f14c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800f178:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800f17c:	eea3 2a85 	vfma.f32	s4, s7, s10
 800f180:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800f184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f188:	dade      	bge.n	800f148 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800f18a:	e7f2      	b.n	800f172 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800f18c:	d502      	bpl.n	800f194 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800f18e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800f192:	e7e7      	b.n	800f164 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800f194:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800f198:	eee3 4a86 	vfma.f32	s9, s7, s12
 800f19c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800f1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a4:	dadc      	bge.n	800f160 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800f1a6:	e7f2      	b.n	800f18e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800f1a8:	3d800000 	.word	0x3d800000

0800f1ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800f1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1b0:	2714      	movs	r7, #20
 800f1b2:	435f      	muls	r7, r3
 800f1b4:	eb02 0c07 	add.w	ip, r2, r7
 800f1b8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800f1bc:	f115 0e0f 	adds.w	lr, r5, #15
 800f1c0:	f100 80a2 	bmi.w	800f308 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800f1c4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800f1c8:	9c08      	ldr	r4, [sp, #32]
 800f1ca:	f8c0 e014 	str.w	lr, [r0, #20]
 800f1ce:	2614      	movs	r6, #20
 800f1d0:	4366      	muls	r6, r4
 800f1d2:	eb02 0806 	add.w	r8, r2, r6
 800f1d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f1da:	f115 040f 	adds.w	r4, r5, #15
 800f1de:	f100 809f 	bmi.w	800f320 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800f1e2:	1124      	asrs	r4, r4, #4
 800f1e4:	eba4 040e 	sub.w	r4, r4, lr
 800f1e8:	6184      	str	r4, [r0, #24]
 800f1ea:	2c00      	cmp	r4, #0
 800f1ec:	f000 808a 	beq.w	800f304 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800f1f0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800f1f4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f1f8:	5995      	ldr	r5, [r2, r6]
 800f1fa:	eba4 0809 	sub.w	r8, r4, r9
 800f1fe:	59d4      	ldr	r4, [r2, r7]
 800f200:	eba5 0a04 	sub.w	sl, r5, r4
 800f204:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800f208:	fb0e fe05 	mul.w	lr, lr, r5
 800f20c:	fb0a ee19 	mls	lr, sl, r9, lr
 800f210:	fb08 e404 	mla	r4, r8, r4, lr
 800f214:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800f218:	3c01      	subs	r4, #1
 800f21a:	19a4      	adds	r4, r4, r6
 800f21c:	f100 808c 	bmi.w	800f338 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800f220:	fb94 fef6 	sdiv	lr, r4, r6
 800f224:	f8c0 e000 	str.w	lr, [r0]
 800f228:	fb06 441e 	mls	r4, r6, lr, r4
 800f22c:	6104      	str	r4, [r0, #16]
 800f22e:	2d00      	cmp	r5, #0
 800f230:	f2c0 8095 	blt.w	800f35e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800f234:	fb95 f4f6 	sdiv	r4, r5, r6
 800f238:	6044      	str	r4, [r0, #4]
 800f23a:	fb06 5514 	mls	r5, r6, r4, r5
 800f23e:	6085      	str	r5, [r0, #8]
 800f240:	60c6      	str	r6, [r0, #12]
 800f242:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f246:	6945      	ldr	r5, [r0, #20]
 800f248:	59d2      	ldr	r2, [r2, r7]
 800f24a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800f380 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800f24e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800f252:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800f256:	ee07 4a10 	vmov	s14, r4
 800f25a:	6804      	ldr	r4, [r0, #0]
 800f25c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800f260:	ee07 2a90 	vmov	s15, r2
 800f264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f26c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f270:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f274:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f278:	edd3 6a00 	vldr	s13, [r3]
 800f27c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f280:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800f284:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f288:	edc0 6a07 	vstr	s13, [r0, #28]
 800f28c:	edd0 6a01 	vldr	s13, [r0, #4]
 800f290:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800f294:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800f298:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f29c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f2a0:	ed80 6a08 	vstr	s12, [r0, #32]
 800f2a4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800f2a6:	6242      	str	r2, [r0, #36]	@ 0x24
 800f2a8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800f2ac:	ed93 6a03 	vldr	s12, [r3, #12]
 800f2b0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f2b4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800f2b8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f2bc:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800f2c0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800f2c4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800f2c8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f2cc:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800f2d0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f2d2:	6302      	str	r2, [r0, #48]	@ 0x30
 800f2d4:	ed93 6a06 	vldr	s12, [r3, #24]
 800f2d8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800f2dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f2e0:	eeb0 7a46 	vmov.f32	s14, s12
 800f2e4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800f2e8:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f2ec:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800f2f0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800f2f4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800f2f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f2fc:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800f300:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800f302:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800f304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f308:	f1c5 0501 	rsb	r5, r5, #1
 800f30c:	f015 050f 	ands.w	r5, r5, #15
 800f310:	bf18      	it	ne
 800f312:	2501      	movne	r5, #1
 800f314:	2410      	movs	r4, #16
 800f316:	fb9e fef4 	sdiv	lr, lr, r4
 800f31a:	ebae 0e05 	sub.w	lr, lr, r5
 800f31e:	e753      	b.n	800f1c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800f320:	f1c5 0501 	rsb	r5, r5, #1
 800f324:	f015 050f 	ands.w	r5, r5, #15
 800f328:	bf18      	it	ne
 800f32a:	2501      	movne	r5, #1
 800f32c:	f04f 0910 	mov.w	r9, #16
 800f330:	fb94 f4f9 	sdiv	r4, r4, r9
 800f334:	1b64      	subs	r4, r4, r5
 800f336:	e755      	b.n	800f1e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800f338:	4264      	negs	r4, r4
 800f33a:	fb94 fef6 	sdiv	lr, r4, r6
 800f33e:	f1ce 0800 	rsb	r8, lr, #0
 800f342:	fb06 441e 	mls	r4, r6, lr, r4
 800f346:	f8c0 8000 	str.w	r8, [r0]
 800f34a:	6104      	str	r4, [r0, #16]
 800f34c:	2c00      	cmp	r4, #0
 800f34e:	f43f af6e 	beq.w	800f22e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800f352:	ea6f 0e0e 	mvn.w	lr, lr
 800f356:	f8c0 e000 	str.w	lr, [r0]
 800f35a:	1b34      	subs	r4, r6, r4
 800f35c:	e766      	b.n	800f22c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800f35e:	426d      	negs	r5, r5
 800f360:	fb95 f4f6 	sdiv	r4, r5, r6
 800f364:	f1c4 0e00 	rsb	lr, r4, #0
 800f368:	fb06 5514 	mls	r5, r6, r4, r5
 800f36c:	f8c0 e004 	str.w	lr, [r0, #4]
 800f370:	6085      	str	r5, [r0, #8]
 800f372:	2d00      	cmp	r5, #0
 800f374:	f43f af64 	beq.w	800f240 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800f378:	43e4      	mvns	r4, r4
 800f37a:	6044      	str	r4, [r0, #4]
 800f37c:	1b75      	subs	r5, r6, r5
 800f37e:	e75e      	b.n	800f23e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800f380:	3d800000 	.word	0x3d800000

0800f384 <_ZN8touchgfx7Unicode6strlenEPKt>:
 800f384:	4602      	mov	r2, r0
 800f386:	b148      	cbz	r0, 800f39c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 800f388:	2300      	movs	r3, #0
 800f38a:	b298      	uxth	r0, r3
 800f38c:	3301      	adds	r3, #1
 800f38e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800f392:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 800f396:	2900      	cmp	r1, #0
 800f398:	d1f7      	bne.n	800f38a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 800f39a:	4770      	bx	lr
 800f39c:	4770      	bx	lr

0800f39e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 800f39e:	b530      	push	{r4, r5, lr}
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	b159      	cbz	r1, 800f3bc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 800f3a4:	b148      	cbz	r0, 800f3ba <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	b298      	uxth	r0, r3
 800f3aa:	4282      	cmp	r2, r0
 800f3ac:	d905      	bls.n	800f3ba <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800f3ae:	5ccd      	ldrb	r5, [r1, r3]
 800f3b0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	2d00      	cmp	r5, #0
 800f3b8:	d1f6      	bne.n	800f3a8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 800f3ba:	bd30      	pop	{r4, r5, pc}
 800f3bc:	4608      	mov	r0, r1
 800f3be:	e7fc      	b.n	800f3ba <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0800f3c0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 800f3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3c2:	b08b      	sub	sp, #44	@ 0x2c
 800f3c4:	468c      	mov	ip, r1
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	261f      	movs	r6, #31
 800f3d0:	af01      	add	r7, sp, #4
 800f3d2:	fb94 fef3 	sdiv	lr, r4, r3
 800f3d6:	fb03 441e 	mls	r4, r3, lr, r4
 800f3da:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f3de:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 800f3e2:	b2ec      	uxtb	r4, r5
 800f3e4:	2d09      	cmp	r5, #9
 800f3e6:	bfd4      	ite	le
 800f3e8:	3430      	addle	r4, #48	@ 0x30
 800f3ea:	3457      	addgt	r4, #87	@ 0x57
 800f3ec:	b2e4      	uxtb	r4, r4
 800f3ee:	55bc      	strb	r4, [r7, r6]
 800f3f0:	4674      	mov	r4, lr
 800f3f2:	1e71      	subs	r1, r6, #1
 800f3f4:	b974      	cbnz	r4, 800f414 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	da05      	bge.n	800f406 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 800f3fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3fc:	4419      	add	r1, r3
 800f3fe:	232d      	movs	r3, #45	@ 0x2d
 800f400:	f801 3c24 	strb.w	r3, [r1, #-36]
 800f404:	1eb1      	subs	r1, r6, #2
 800f406:	3101      	adds	r1, #1
 800f408:	4439      	add	r1, r7
 800f40a:	4660      	mov	r0, ip
 800f40c:	f7ff ffc7 	bl	800f39e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800f410:	b00b      	add	sp, #44	@ 0x2c
 800f412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f414:	460e      	mov	r6, r1
 800f416:	e7dc      	b.n	800f3d2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0800f418 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 800f418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f41a:	b08b      	sub	sp, #44	@ 0x2c
 800f41c:	468c      	mov	ip, r1
 800f41e:	2100      	movs	r1, #0
 800f420:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f424:	ae01      	add	r6, sp, #4
 800f426:	211f      	movs	r1, #31
 800f428:	fbb0 f7f3 	udiv	r7, r0, r3
 800f42c:	fb03 0517 	mls	r5, r3, r7, r0
 800f430:	b2ec      	uxtb	r4, r5
 800f432:	2d09      	cmp	r5, #9
 800f434:	bfd4      	ite	le
 800f436:	3430      	addle	r4, #48	@ 0x30
 800f438:	3457      	addgt	r4, #87	@ 0x57
 800f43a:	b2e4      	uxtb	r4, r4
 800f43c:	558c      	strb	r4, [r1, r6]
 800f43e:	4638      	mov	r0, r7
 800f440:	1e4c      	subs	r4, r1, #1
 800f442:	b92f      	cbnz	r7, 800f450 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 800f444:	4431      	add	r1, r6
 800f446:	4660      	mov	r0, ip
 800f448:	f7ff ffa9 	bl	800f39e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800f44c:	b00b      	add	sp, #44	@ 0x2c
 800f44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f450:	4621      	mov	r1, r4
 800f452:	e7e9      	b.n	800f428 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0800f454 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 800f454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	4691      	mov	r9, r2
 800f45a:	b085      	sub	sp, #20
 800f45c:	6802      	ldr	r2, [r0, #0]
 800f45e:	9201      	str	r2, [sp, #4]
 800f460:	4688      	mov	r8, r1
 800f462:	4683      	mov	fp, r0
 800f464:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800f468:	9103      	str	r1, [sp, #12]
 800f46a:	4610      	mov	r0, r2
 800f46c:	461c      	mov	r4, r3
 800f46e:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800f472:	9302      	str	r3, [sp, #8]
 800f474:	f7ff ff86 	bl	800f384 <_ZN8touchgfx7Unicode6strlenEPKt>
 800f478:	f1b8 0f00 	cmp.w	r8, #0
 800f47c:	bf0c      	ite	eq
 800f47e:	4684      	moveq	ip, r0
 800f480:	f100 0c01 	addne.w	ip, r0, #1
 800f484:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 800f488:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 800f48c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800f48e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800f490:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 800f494:	9903      	ldr	r1, [sp, #12]
 800f496:	fa1f fc8c 	uxth.w	ip, ip
 800f49a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f49e:	d041      	beq.n	800f524 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800f4a0:	d834      	bhi.n	800f50c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 800f4a2:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800f4a6:	d059      	beq.n	800f55c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 800f4a8:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 800f4ac:	d03a      	beq.n	800f524 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800f4ae:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 800f4b2:	d034      	beq.n	800f51e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800f4b4:	2400      	movs	r4, #0
 800f4b6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800f4ba:	3a01      	subs	r2, #1
 800f4bc:	b169      	cbz	r1, 800f4da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800f4be:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f4c0:	458c      	cmp	ip, r1
 800f4c2:	da09      	bge.n	800f4d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800f4c4:	eba1 010c 	sub.w	r1, r1, ip
 800f4c8:	b289      	uxth	r1, r1
 800f4ca:	b933      	cbnz	r3, 800f4da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800f4cc:	2e00      	cmp	r6, #0
 800f4ce:	d051      	beq.n	800f574 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d04f      	beq.n	800f574 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800f4d4:	440c      	add	r4, r1
 800f4d6:	b2a4      	uxth	r4, r4
 800f4d8:	2100      	movs	r1, #0
 800f4da:	682b      	ldr	r3, [r5, #0]
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	da07      	bge.n	800f4f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800f4e0:	f1b8 0f00 	cmp.w	r8, #0
 800f4e4:	d004      	beq.n	800f4f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800f4e6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 800f4ea:	682b      	ldr	r3, [r5, #0]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	602b      	str	r3, [r5, #0]
 800f4f0:	2730      	movs	r7, #48	@ 0x30
 800f4f2:	2c00      	cmp	r4, #0
 800f4f4:	d04e      	beq.n	800f594 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800f4f6:	682e      	ldr	r6, [r5, #0]
 800f4f8:	3c01      	subs	r4, #1
 800f4fa:	42b2      	cmp	r2, r6
 800f4fc:	b2a4      	uxth	r4, r4
 800f4fe:	dd49      	ble.n	800f594 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800f500:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800f504:	682b      	ldr	r3, [r5, #0]
 800f506:	3301      	adds	r3, #1
 800f508:	602b      	str	r3, [r5, #0]
 800f50a:	e7f2      	b.n	800f4f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 800f50c:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 800f510:	d01d      	beq.n	800f54e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 800f512:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 800f516:	d002      	beq.n	800f51e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800f518:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 800f51c:	e7c9      	b.n	800f4b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 800f51e:	4684      	mov	ip, r0
 800f520:	f04f 0800 	mov.w	r8, #0
 800f524:	2c00      	cmp	r4, #0
 800f526:	d0c6      	beq.n	800f4b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800f528:	b947      	cbnz	r7, 800f53c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800f52a:	2801      	cmp	r0, #1
 800f52c:	d106      	bne.n	800f53c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800f52e:	8814      	ldrh	r4, [r2, #0]
 800f530:	2c30      	cmp	r4, #48	@ 0x30
 800f532:	bf02      	ittt	eq
 800f534:	3202      	addeq	r2, #2
 800f536:	f8cb 2000 	streq.w	r2, [fp]
 800f53a:	4638      	moveq	r0, r7
 800f53c:	45bc      	cmp	ip, r7
 800f53e:	da14      	bge.n	800f56a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 800f540:	b2bf      	uxth	r7, r7
 800f542:	eba7 040c 	sub.w	r4, r7, ip
 800f546:	b2a4      	uxth	r4, r4
 800f548:	46bc      	mov	ip, r7
 800f54a:	2600      	movs	r6, #0
 800f54c:	e7b3      	b.n	800f4b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800f54e:	4684      	mov	ip, r0
 800f550:	b16c      	cbz	r4, 800f56e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 800f552:	42b8      	cmp	r0, r7
 800f554:	dd00      	ble.n	800f558 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 800f556:	b2b8      	uxth	r0, r7
 800f558:	2400      	movs	r4, #0
 800f55a:	e003      	b.n	800f564 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 800f55c:	f04f 0c01 	mov.w	ip, #1
 800f560:	2400      	movs	r4, #0
 800f562:	4660      	mov	r0, ip
 800f564:	4626      	mov	r6, r4
 800f566:	46a0      	mov	r8, r4
 800f568:	e7a5      	b.n	800f4b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800f56a:	2400      	movs	r4, #0
 800f56c:	e7ed      	b.n	800f54a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 800f56e:	4626      	mov	r6, r4
 800f570:	46a0      	mov	r8, r4
 800f572:	e7a0      	b.n	800f4b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800f574:	2900      	cmp	r1, #0
 800f576:	d0b0      	beq.n	800f4da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800f578:	2720      	movs	r7, #32
 800f57a:	682e      	ldr	r6, [r5, #0]
 800f57c:	2900      	cmp	r1, #0
 800f57e:	d0ac      	beq.n	800f4da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800f580:	3901      	subs	r1, #1
 800f582:	4296      	cmp	r6, r2
 800f584:	b289      	uxth	r1, r1
 800f586:	daa7      	bge.n	800f4d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800f588:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800f58c:	682b      	ldr	r3, [r5, #0]
 800f58e:	3301      	adds	r3, #1
 800f590:	602b      	str	r3, [r5, #0]
 800f592:	e7f2      	b.n	800f57a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 800f594:	b188      	cbz	r0, 800f5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800f596:	682b      	ldr	r3, [r5, #0]
 800f598:	3801      	subs	r0, #1
 800f59a:	429a      	cmp	r2, r3
 800f59c:	b280      	uxth	r0, r0
 800f59e:	dd0c      	ble.n	800f5ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800f5a0:	f8db 3000 	ldr.w	r3, [fp]
 800f5a4:	1c9c      	adds	r4, r3, #2
 800f5a6:	f8cb 4000 	str.w	r4, [fp]
 800f5aa:	881c      	ldrh	r4, [r3, #0]
 800f5ac:	682b      	ldr	r3, [r5, #0]
 800f5ae:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 800f5b2:	682b      	ldr	r3, [r5, #0]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	602b      	str	r3, [r5, #0]
 800f5b8:	e7ec      	b.n	800f594 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800f5ba:	2620      	movs	r6, #32
 800f5bc:	b151      	cbz	r1, 800f5d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800f5be:	6828      	ldr	r0, [r5, #0]
 800f5c0:	3901      	subs	r1, #1
 800f5c2:	4282      	cmp	r2, r0
 800f5c4:	b289      	uxth	r1, r1
 800f5c6:	dd05      	ble.n	800f5d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800f5c8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	602b      	str	r3, [r5, #0]
 800f5d2:	e7f3      	b.n	800f5bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 800f5d4:	b005      	add	sp, #20
 800f5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 800f5da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5de:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 800f5e2:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 800f5e6:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 800f5ea:	2400      	movs	r4, #0
 800f5ec:	8014      	strh	r4, [r2, #0]
 800f5ee:	701c      	strb	r4, [r3, #0]
 800f5f0:	f888 4000 	strb.w	r4, [r8]
 800f5f4:	f88c 4000 	strb.w	r4, [ip]
 800f5f8:	f88e 4000 	strb.w	r4, [lr]
 800f5fc:	703c      	strb	r4, [r7, #0]
 800f5fe:	6804      	ldr	r4, [r0, #0]
 800f600:	b1a4      	cbz	r4, 800f62c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 800f602:	8824      	ldrh	r4, [r4, #0]
 800f604:	f04f 0901 	mov.w	r9, #1
 800f608:	b314      	cbz	r4, 800f650 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800f60a:	2c2b      	cmp	r4, #43	@ 0x2b
 800f60c:	d001      	beq.n	800f612 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 800f60e:	2c20      	cmp	r4, #32
 800f610:	d110      	bne.n	800f634 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 800f612:	8014      	strh	r4, [r2, #0]
 800f614:	6804      	ldr	r4, [r0, #0]
 800f616:	b10c      	cbz	r4, 800f61c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 800f618:	3402      	adds	r4, #2
 800f61a:	6004      	str	r4, [r0, #0]
 800f61c:	680c      	ldr	r4, [r1, #0]
 800f61e:	b10c      	cbz	r4, 800f624 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 800f620:	3401      	adds	r4, #1
 800f622:	600c      	str	r4, [r1, #0]
 800f624:	6804      	ldr	r4, [r0, #0]
 800f626:	b17c      	cbz	r4, 800f648 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 800f628:	8824      	ldrh	r4, [r4, #0]
 800f62a:	e7ed      	b.n	800f608 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800f62c:	680c      	ldr	r4, [r1, #0]
 800f62e:	b17c      	cbz	r4, 800f650 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800f630:	7824      	ldrb	r4, [r4, #0]
 800f632:	e7e7      	b.n	800f604 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 800f634:	2c2d      	cmp	r4, #45	@ 0x2d
 800f636:	d102      	bne.n	800f63e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 800f638:	f883 9000 	strb.w	r9, [r3]
 800f63c:	e7ea      	b.n	800f614 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800f63e:	2c23      	cmp	r4, #35	@ 0x23
 800f640:	d107      	bne.n	800f652 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 800f642:	f888 9000 	strb.w	r9, [r8]
 800f646:	e7e5      	b.n	800f614 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800f648:	680c      	ldr	r4, [r1, #0]
 800f64a:	b10c      	cbz	r4, 800f650 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800f64c:	7824      	ldrb	r4, [r4, #0]
 800f64e:	e7db      	b.n	800f608 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800f650:	2400      	movs	r4, #0
 800f652:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800f656:	2b09      	cmp	r3, #9
 800f658:	d901      	bls.n	800f65e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 800f65a:	2c2a      	cmp	r4, #42	@ 0x2a
 800f65c:	d122      	bne.n	800f6a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800f65e:	2301      	movs	r3, #1
 800f660:	2c30      	cmp	r4, #48	@ 0x30
 800f662:	f88e 3000 	strb.w	r3, [lr]
 800f666:	d10d      	bne.n	800f684 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800f668:	f88c 3000 	strb.w	r3, [ip]
 800f66c:	6803      	ldr	r3, [r0, #0]
 800f66e:	b10b      	cbz	r3, 800f674 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 800f670:	3302      	adds	r3, #2
 800f672:	6003      	str	r3, [r0, #0]
 800f674:	680b      	ldr	r3, [r1, #0]
 800f676:	b10b      	cbz	r3, 800f67c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 800f678:	3301      	adds	r3, #1
 800f67a:	600b      	str	r3, [r1, #0]
 800f67c:	6803      	ldr	r3, [r0, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d02f      	beq.n	800f6e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 800f682:	881c      	ldrh	r4, [r3, #0]
 800f684:	2c2a      	cmp	r4, #42	@ 0x2a
 800f686:	d135      	bne.n	800f6f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800f688:	f04f 33ff 	mov.w	r3, #4294967295
 800f68c:	6033      	str	r3, [r6, #0]
 800f68e:	6803      	ldr	r3, [r0, #0]
 800f690:	b10b      	cbz	r3, 800f696 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 800f692:	3302      	adds	r3, #2
 800f694:	6003      	str	r3, [r0, #0]
 800f696:	680b      	ldr	r3, [r1, #0]
 800f698:	b10b      	cbz	r3, 800f69e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 800f69a:	3301      	adds	r3, #1
 800f69c:	600b      	str	r3, [r1, #0]
 800f69e:	6803      	ldr	r3, [r0, #0]
 800f6a0:	b31b      	cbz	r3, 800f6ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 800f6a2:	881c      	ldrh	r4, [r3, #0]
 800f6a4:	2c2e      	cmp	r4, #46	@ 0x2e
 800f6a6:	d11a      	bne.n	800f6de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	703b      	strb	r3, [r7, #0]
 800f6ac:	6803      	ldr	r3, [r0, #0]
 800f6ae:	b10b      	cbz	r3, 800f6b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 800f6b0:	3302      	adds	r3, #2
 800f6b2:	6003      	str	r3, [r0, #0]
 800f6b4:	680b      	ldr	r3, [r1, #0]
 800f6b6:	b10b      	cbz	r3, 800f6bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	600b      	str	r3, [r1, #0]
 800f6bc:	6803      	ldr	r3, [r0, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d036      	beq.n	800f730 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 800f6c2:	881b      	ldrh	r3, [r3, #0]
 800f6c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6c6:	d137      	bne.n	800f738 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800f6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6cc:	602b      	str	r3, [r5, #0]
 800f6ce:	6803      	ldr	r3, [r0, #0]
 800f6d0:	b10b      	cbz	r3, 800f6d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 800f6d2:	3302      	adds	r3, #2
 800f6d4:	6003      	str	r3, [r0, #0]
 800f6d6:	680b      	ldr	r3, [r1, #0]
 800f6d8:	b10b      	cbz	r3, 800f6de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800f6da:	3301      	adds	r3, #1
 800f6dc:	600b      	str	r3, [r1, #0]
 800f6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6e2:	680c      	ldr	r4, [r1, #0]
 800f6e4:	b134      	cbz	r4, 800f6f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800f6e6:	7824      	ldrb	r4, [r4, #0]
 800f6e8:	e7cc      	b.n	800f684 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800f6ea:	680b      	ldr	r3, [r1, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d0f6      	beq.n	800f6de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800f6f0:	781c      	ldrb	r4, [r3, #0]
 800f6f2:	e7d7      	b.n	800f6a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	6033      	str	r3, [r6, #0]
 800f6f8:	220a      	movs	r2, #10
 800f6fa:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f6fe:	fa1f f38c 	uxth.w	r3, ip
 800f702:	2b09      	cmp	r3, #9
 800f704:	d8ce      	bhi.n	800f6a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800f706:	6833      	ldr	r3, [r6, #0]
 800f708:	fb02 c303 	mla	r3, r2, r3, ip
 800f70c:	6033      	str	r3, [r6, #0]
 800f70e:	6803      	ldr	r3, [r0, #0]
 800f710:	b10b      	cbz	r3, 800f716 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 800f712:	3302      	adds	r3, #2
 800f714:	6003      	str	r3, [r0, #0]
 800f716:	680b      	ldr	r3, [r1, #0]
 800f718:	b10b      	cbz	r3, 800f71e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 800f71a:	3301      	adds	r3, #1
 800f71c:	600b      	str	r3, [r1, #0]
 800f71e:	6803      	ldr	r3, [r0, #0]
 800f720:	b10b      	cbz	r3, 800f726 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 800f722:	881c      	ldrh	r4, [r3, #0]
 800f724:	e7e9      	b.n	800f6fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800f726:	680c      	ldr	r4, [r1, #0]
 800f728:	2c00      	cmp	r4, #0
 800f72a:	d0e6      	beq.n	800f6fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800f72c:	7824      	ldrb	r4, [r4, #0]
 800f72e:	e7e4      	b.n	800f6fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800f730:	680b      	ldr	r3, [r1, #0]
 800f732:	b10b      	cbz	r3, 800f738 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	e7c5      	b.n	800f6c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 800f738:	2200      	movs	r2, #0
 800f73a:	602a      	str	r2, [r5, #0]
 800f73c:	240a      	movs	r4, #10
 800f73e:	3b30      	subs	r3, #48	@ 0x30
 800f740:	b29e      	uxth	r6, r3
 800f742:	2e09      	cmp	r6, #9
 800f744:	682a      	ldr	r2, [r5, #0]
 800f746:	d813      	bhi.n	800f770 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 800f748:	fb04 3302 	mla	r3, r4, r2, r3
 800f74c:	602b      	str	r3, [r5, #0]
 800f74e:	6803      	ldr	r3, [r0, #0]
 800f750:	b10b      	cbz	r3, 800f756 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 800f752:	3302      	adds	r3, #2
 800f754:	6003      	str	r3, [r0, #0]
 800f756:	680b      	ldr	r3, [r1, #0]
 800f758:	b10b      	cbz	r3, 800f75e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 800f75a:	3301      	adds	r3, #1
 800f75c:	600b      	str	r3, [r1, #0]
 800f75e:	6803      	ldr	r3, [r0, #0]
 800f760:	b10b      	cbz	r3, 800f766 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	e7eb      	b.n	800f73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800f766:	680b      	ldr	r3, [r1, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d0e8      	beq.n	800f73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	e7e6      	b.n	800f73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800f770:	2a06      	cmp	r2, #6
 800f772:	bfa8      	it	ge
 800f774:	2206      	movge	r2, #6
 800f776:	602a      	str	r2, [r5, #0]
 800f778:	e7b1      	b.n	800f6de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0800f77a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 800f77a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77e:	b0a3      	sub	sp, #140	@ 0x8c
 800f780:	2600      	movs	r6, #0
 800f782:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 800f786:	4607      	mov	r7, r0
 800f788:	4688      	mov	r8, r1
 800f78a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f78e:	4631      	mov	r1, r6
 800f790:	2242      	movs	r2, #66	@ 0x42
 800f792:	4648      	mov	r0, r9
 800f794:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800f796:	960d      	str	r6, [sp, #52]	@ 0x34
 800f798:	f003 facf 	bl	8012d3a <memset>
 800f79c:	b15f      	cbz	r7, 800f7b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 800f79e:	f108 3aff 	add.w	sl, r8, #4294967295
 800f7a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7a6:	b152      	cbz	r2, 800f7be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 800f7a8:	8812      	ldrh	r2, [r2, #0]
 800f7aa:	b10a      	cbz	r2, 800f7b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800f7ac:	459a      	cmp	sl, r3
 800f7ae:	dc2e      	bgt.n	800f80e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800f7b6:	4638      	mov	r0, r7
 800f7b8:	b023      	add	sp, #140	@ 0x8c
 800f7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7be:	9a08      	ldr	r2, [sp, #32]
 800f7c0:	2a00      	cmp	r2, #0
 800f7c2:	d0f5      	beq.n	800f7b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800f7c4:	7812      	ldrb	r2, [r2, #0]
 800f7c6:	e7f0      	b.n	800f7aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 800f7c8:	2d00      	cmp	r5, #0
 800f7ca:	d0ea      	beq.n	800f7a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f7cc:	782a      	ldrb	r2, [r5, #0]
 800f7ce:	b142      	cbz	r2, 800f7e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 800f7d0:	2a25      	cmp	r2, #37	@ 0x25
 800f7d2:	d001      	beq.n	800f7d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 800f7d4:	459a      	cmp	sl, r3
 800f7d6:	dc08      	bgt.n	800f7ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 800f7d8:	f1bb 0f00 	cmp.w	fp, #0
 800f7dc:	d121      	bne.n	800f822 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 800f7de:	2d00      	cmp	r5, #0
 800f7e0:	d0df      	beq.n	800f7a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f7e2:	782a      	ldrb	r2, [r5, #0]
 800f7e4:	f04f 0b00 	mov.w	fp, #0
 800f7e8:	e01d      	b.n	800f826 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 800f7ea:	f1bb 0f00 	cmp.w	fp, #0
 800f7ee:	d078      	beq.n	800f8e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 800f7f0:	f8bb 2000 	ldrh.w	r2, [fp]
 800f7f4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800f7f8:	f1bb 0f00 	cmp.w	fp, #0
 800f7fc:	d002      	beq.n	800f804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 800f7fe:	f10b 0202 	add.w	r2, fp, #2
 800f802:	9209      	str	r2, [sp, #36]	@ 0x24
 800f804:	b10d      	cbz	r5, 800f80a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 800f806:	3501      	adds	r5, #1
 800f808:	9508      	str	r5, [sp, #32]
 800f80a:	3301      	adds	r3, #1
 800f80c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f80e:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 800f812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f814:	f1bb 0f00 	cmp.w	fp, #0
 800f818:	d0d6      	beq.n	800f7c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 800f81a:	f8bb 2000 	ldrh.w	r2, [fp]
 800f81e:	2a00      	cmp	r2, #0
 800f820:	d1d6      	bne.n	800f7d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 800f822:	f8bb 2000 	ldrh.w	r2, [fp]
 800f826:	2a00      	cmp	r2, #0
 800f828:	d0bb      	beq.n	800f7a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f82a:	459a      	cmp	sl, r3
 800f82c:	ddb9      	ble.n	800f7a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f82e:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 800f832:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f836:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 800f83a:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 800f83e:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 800f842:	960e      	str	r6, [sp, #56]	@ 0x38
 800f844:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 800f848:	960f      	str	r6, [sp, #60]	@ 0x3c
 800f84a:	f1bb 0f00 	cmp.w	fp, #0
 800f84e:	d002      	beq.n	800f856 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 800f850:	f10b 0302 	add.w	r3, fp, #2
 800f854:	9309      	str	r3, [sp, #36]	@ 0x24
 800f856:	b10d      	cbz	r5, 800f85c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 800f858:	1c6b      	adds	r3, r5, #1
 800f85a:	9308      	str	r3, [sp, #32]
 800f85c:	ab0f      	add	r3, sp, #60	@ 0x3c
 800f85e:	9305      	str	r3, [sp, #20]
 800f860:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 800f864:	9304      	str	r3, [sp, #16]
 800f866:	ab0e      	add	r3, sp, #56	@ 0x38
 800f868:	9303      	str	r3, [sp, #12]
 800f86a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f86c:	9302      	str	r3, [sp, #8]
 800f86e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f872:	9301      	str	r3, [sp, #4]
 800f874:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f87e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 800f882:	a908      	add	r1, sp, #32
 800f884:	a809      	add	r0, sp, #36	@ 0x24
 800f886:	f7ff fea8 	bl	800f5da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 800f88a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	bfbe      	ittt	lt
 800f890:	6823      	ldrlt	r3, [r4, #0]
 800f892:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800f896:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800f898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f89a:	bfb8      	it	lt
 800f89c:	3404      	addlt	r4, #4
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	bfb8      	it	lt
 800f8a2:	6823      	ldrlt	r3, [r4, #0]
 800f8a4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800f8a8:	bfbe      	ittt	lt
 800f8aa:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800f8ae:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 800f8b0:	3404      	addlt	r4, #4
 800f8b2:	b1d9      	cbz	r1, 800f8ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 800f8b4:	880b      	ldrh	r3, [r1, #0]
 800f8b6:	2b69      	cmp	r3, #105	@ 0x69
 800f8b8:	d01f      	beq.n	800f8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800f8ba:	d82f      	bhi.n	800f91c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 800f8bc:	2b58      	cmp	r3, #88	@ 0x58
 800f8be:	d01c      	beq.n	800f8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800f8c0:	d818      	bhi.n	800f8f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 800f8c2:	2b25      	cmp	r3, #37	@ 0x25
 800f8c4:	d034      	beq.n	800f930 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 800f8c6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 800f8ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8cc:	f1bb 0f00 	cmp.w	fp, #0
 800f8d0:	f000 80b8 	beq.w	800fa44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 800f8d4:	f8bb 5000 	ldrh.w	r5, [fp]
 800f8d8:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	930d      	str	r3, [sp, #52]	@ 0x34
 800f8e0:	e029      	b.n	800f936 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800f8e2:	b10d      	cbz	r5, 800f8e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 800f8e4:	782a      	ldrb	r2, [r5, #0]
 800f8e6:	e785      	b.n	800f7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800f8e8:	462a      	mov	r2, r5
 800f8ea:	e783      	b.n	800f7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800f8ec:	2a00      	cmp	r2, #0
 800f8ee:	d0ea      	beq.n	800f8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800f8f0:	7813      	ldrb	r3, [r2, #0]
 800f8f2:	e7e0      	b.n	800f8b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 800f8f4:	3b63      	subs	r3, #99	@ 0x63
 800f8f6:	2b01      	cmp	r3, #1
 800f8f8:	d8e5      	bhi.n	800f8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800f8fa:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800f8fe:	b329      	cbz	r1, 800f94c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 800f900:	880b      	ldrh	r3, [r1, #0]
 800f902:	2b69      	cmp	r3, #105	@ 0x69
 800f904:	d063      	beq.n	800f9ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800f906:	d825      	bhi.n	800f954 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 800f908:	2b63      	cmp	r3, #99	@ 0x63
 800f90a:	d038      	beq.n	800f97e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 800f90c:	2b64      	cmp	r3, #100	@ 0x64
 800f90e:	d05e      	beq.n	800f9ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800f910:	2b58      	cmp	r3, #88	@ 0x58
 800f912:	d07b      	beq.n	800fa0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 800f914:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 800f918:	4625      	mov	r5, r4
 800f91a:	e036      	b.n	800f98a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800f91c:	2b73      	cmp	r3, #115	@ 0x73
 800f91e:	d0ec      	beq.n	800f8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800f920:	d802      	bhi.n	800f928 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 800f922:	2b6f      	cmp	r3, #111	@ 0x6f
 800f924:	d1cf      	bne.n	800f8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800f926:	e7e8      	b.n	800f8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800f928:	2b75      	cmp	r3, #117	@ 0x75
 800f92a:	d0e6      	beq.n	800f8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800f92c:	2b78      	cmp	r3, #120	@ 0x78
 800f92e:	e7f9      	b.n	800f924 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 800f930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f932:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 800f936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f938:	b10b      	cbz	r3, 800f93e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 800f93a:	3302      	adds	r3, #2
 800f93c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f93e:	9b08      	ldr	r3, [sp, #32]
 800f940:	2b00      	cmp	r3, #0
 800f942:	f43f af2e 	beq.w	800f7a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f946:	3301      	adds	r3, #1
 800f948:	9308      	str	r3, [sp, #32]
 800f94a:	e72a      	b.n	800f7a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f94c:	2a00      	cmp	r2, #0
 800f94e:	d0e1      	beq.n	800f914 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800f950:	7813      	ldrb	r3, [r2, #0]
 800f952:	e7d6      	b.n	800f902 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 800f954:	2b73      	cmp	r3, #115	@ 0x73
 800f956:	d036      	beq.n	800f9c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 800f958:	d807      	bhi.n	800f96a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 800f95a:	2b6f      	cmp	r3, #111	@ 0x6f
 800f95c:	d1da      	bne.n	800f914 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800f95e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f960:	1d25      	adds	r5, r4, #4
 800f962:	eba8 0202 	sub.w	r2, r8, r2
 800f966:	2308      	movs	r3, #8
 800f968:	e04a      	b.n	800fa00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800f96a:	2b75      	cmp	r3, #117	@ 0x75
 800f96c:	d043      	beq.n	800f9f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 800f96e:	2b78      	cmp	r3, #120	@ 0x78
 800f970:	d1d0      	bne.n	800f914 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800f972:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f974:	1d25      	adds	r5, r4, #4
 800f976:	eba8 0202 	sub.w	r2, r8, r2
 800f97a:	2310      	movs	r3, #16
 800f97c:	e040      	b.n	800fa00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800f97e:	6823      	ldr	r3, [r4, #0]
 800f980:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800f984:	1d25      	adds	r5, r4, #4
 800f986:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 800f98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f98c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f990:	2b00      	cmp	r3, #0
 800f992:	d052      	beq.n	800fa3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 800f994:	881a      	ldrh	r2, [r3, #0]
 800f996:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 800f99a:	a80d      	add	r0, sp, #52	@ 0x34
 800f99c:	9005      	str	r0, [sp, #20]
 800f99e:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 800f9a2:	9004      	str	r0, [sp, #16]
 800f9a4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f9a6:	9003      	str	r0, [sp, #12]
 800f9a8:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 800f9ac:	9002      	str	r0, [sp, #8]
 800f9ae:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800f9b0:	9001      	str	r0, [sp, #4]
 800f9b2:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 800f9b6:	9000      	str	r0, [sp, #0]
 800f9b8:	e9cd 8706 	strd	r8, r7, [sp, #24]
 800f9bc:	a810      	add	r0, sp, #64	@ 0x40
 800f9be:	f7ff fd49 	bl	800f454 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 800f9c2:	462c      	mov	r4, r5
 800f9c4:	e7b7      	b.n	800f936 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	1d25      	adds	r5, r4, #4
 800f9ca:	9310      	str	r3, [sp, #64]	@ 0x40
 800f9cc:	e7dd      	b.n	800f98a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800f9ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f9d0:	6820      	ldr	r0, [r4, #0]
 800f9d2:	eba8 0202 	sub.w	r2, r8, r2
 800f9d6:	230a      	movs	r3, #10
 800f9d8:	b292      	uxth	r2, r2
 800f9da:	4649      	mov	r1, r9
 800f9dc:	f7ff fcf0 	bl	800f3c0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 800f9e0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f9e4:	2b2d      	cmp	r3, #45	@ 0x2d
 800f9e6:	f104 0504 	add.w	r5, r4, #4
 800f9ea:	d1ce      	bne.n	800f98a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800f9ec:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800f9f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f9f2:	3302      	adds	r3, #2
 800f9f4:	e7e9      	b.n	800f9ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 800f9f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f9f8:	1d25      	adds	r5, r4, #4
 800f9fa:	eba8 0202 	sub.w	r2, r8, r2
 800f9fe:	230a      	movs	r3, #10
 800fa00:	b292      	uxth	r2, r2
 800fa02:	4649      	mov	r1, r9
 800fa04:	6820      	ldr	r0, [r4, #0]
 800fa06:	f7ff fd07 	bl	800f418 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 800fa0a:	e7be      	b.n	800f98a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fa0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa0e:	6820      	ldr	r0, [r4, #0]
 800fa10:	eba8 0202 	sub.w	r2, r8, r2
 800fa14:	b292      	uxth	r2, r2
 800fa16:	2310      	movs	r3, #16
 800fa18:	4649      	mov	r1, r9
 800fa1a:	f7ff fcfd 	bl	800f418 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 800fa1e:	1d25      	adds	r5, r4, #4
 800fa20:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 800fa24:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d0ae      	beq.n	800f98a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fa2c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 800fa30:	2919      	cmp	r1, #25
 800fa32:	d8f7      	bhi.n	800fa24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800fa34:	3b20      	subs	r3, #32
 800fa36:	8013      	strh	r3, [r2, #0]
 800fa38:	e7f4      	b.n	800fa24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800fa3a:	9a08      	ldr	r2, [sp, #32]
 800fa3c:	2a00      	cmp	r2, #0
 800fa3e:	d0aa      	beq.n	800f996 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800fa40:	7812      	ldrb	r2, [r2, #0]
 800fa42:	e7a8      	b.n	800f996 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800fa44:	2d00      	cmp	r5, #0
 800fa46:	f43f af47 	beq.w	800f8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 800fa4a:	782d      	ldrb	r5, [r5, #0]
 800fa4c:	e744      	b.n	800f8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0800fa4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 800fa4e:	b507      	push	{r0, r1, r2, lr}
 800fa50:	9300      	str	r3, [sp, #0]
 800fa52:	4613      	mov	r3, r2
 800fa54:	2200      	movs	r2, #0
 800fa56:	f7ff fe90 	bl	800f77a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 800fa5a:	b003      	add	sp, #12
 800fa5c:	f85d fb04 	ldr.w	pc, [sp], #4

0800fa60 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 800fa60:	b40c      	push	{r2, r3}
 800fa62:	b507      	push	{r0, r1, r2, lr}
 800fa64:	ab04      	add	r3, sp, #16
 800fa66:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa6a:	9301      	str	r3, [sp, #4]
 800fa6c:	f7ff ffef 	bl	800fa4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 800fa70:	b003      	add	sp, #12
 800fa72:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa76:	b002      	add	sp, #8
 800fa78:	4770      	bx	lr
	...

0800fa7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800fa7c:	4b01      	ldr	r3, [pc, #4]	@ (800fa84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800fa7e:	6018      	str	r0, [r3, #0]
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	20015490 	.word	0x20015490

0800fa88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800fa88:	4b06      	ldr	r3, [pc, #24]	@ (800faa4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800fa8a:	881a      	ldrh	r2, [r3, #0]
 800fa8c:	4282      	cmp	r2, r0
 800fa8e:	d807      	bhi.n	800faa0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800fa90:	4b05      	ldr	r3, [pc, #20]	@ (800faa8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800fa92:	881b      	ldrh	r3, [r3, #0]
 800fa94:	4413      	add	r3, r2
 800fa96:	4298      	cmp	r0, r3
 800fa98:	bfac      	ite	ge
 800fa9a:	2000      	movge	r0, #0
 800fa9c:	2001      	movlt	r0, #1
 800fa9e:	4770      	bx	lr
 800faa0:	2000      	movs	r0, #0
 800faa2:	4770      	bx	lr
 800faa4:	200154b0 	.word	0x200154b0
 800faa8:	200154b4 	.word	0x200154b4

0800faac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800faac:	b508      	push	{r3, lr}
 800faae:	4601      	mov	r1, r0
 800fab0:	f7ff ffea 	bl	800fa88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800fab4:	b118      	cbz	r0, 800fabe <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800fab6:	4b02      	ldr	r3, [pc, #8]	@ (800fac0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800fabe:	bd08      	pop	{r3, pc}
 800fac0:	20015494 	.word	0x20015494

0800fac4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800fac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fac6:	4c24      	ldr	r4, [pc, #144]	@ (800fb58 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d042      	beq.n	800fb54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800face:	4a23      	ldr	r2, [pc, #140]	@ (800fb5c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800fad0:	4d23      	ldr	r5, [pc, #140]	@ (800fb60 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800fad2:	8811      	ldrh	r1, [r2, #0]
 800fad4:	f8b5 c000 	ldrh.w	ip, [r5]
 800fad8:	4822      	ldr	r0, [pc, #136]	@ (800fb64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800fada:	4461      	add	r1, ip
 800fadc:	1c4a      	adds	r2, r1, #1
 800fade:	f022 0201 	bic.w	r2, r2, #1
 800fae2:	008f      	lsls	r7, r1, #2
 800fae4:	0412      	lsls	r2, r2, #16
 800fae6:	19de      	adds	r6, r3, r7
 800fae8:	0c12      	lsrs	r2, r2, #16
 800faea:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800faee:	6006      	str	r6, [r0, #0]
 800faf0:	4e1d      	ldr	r6, [pc, #116]	@ (800fb68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800faf2:	19da      	adds	r2, r3, r7
 800faf4:	6032      	str	r2, [r6, #0]
 800faf6:	220e      	movs	r2, #14
 800faf8:	fb02 f20c 	mul.w	r2, r2, ip
 800fafc:	3203      	adds	r2, #3
 800fafe:	f022 0203 	bic.w	r2, r2, #3
 800fb02:	443a      	add	r2, r7
 800fb04:	4f19      	ldr	r7, [pc, #100]	@ (800fb6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800fb06:	4413      	add	r3, r2
 800fb08:	603b      	str	r3, [r7, #0]
 800fb0a:	4f19      	ldr	r7, [pc, #100]	@ (800fb70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	803b      	strh	r3, [r7, #0]
 800fb10:	4f18      	ldr	r7, [pc, #96]	@ (800fb74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800fb12:	683f      	ldr	r7, [r7, #0]
 800fb14:	1aba      	subs	r2, r7, r2
 800fb16:	4f18      	ldr	r7, [pc, #96]	@ (800fb78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800fb18:	603a      	str	r2, [r7, #0]
 800fb1a:	4a18      	ldr	r2, [pc, #96]	@ (800fb7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800fb1c:	469c      	mov	ip, r3
 800fb1e:	8013      	strh	r3, [r2, #0]
 800fb20:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800fb24:	428b      	cmp	r3, r1
 800fb26:	d10d      	bne.n	800fb44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800fb28:	882d      	ldrh	r5, [r5, #0]
 800fb2a:	6830      	ldr	r0, [r6, #0]
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	240e      	movs	r4, #14
 800fb30:	429d      	cmp	r5, r3
 800fb32:	d90f      	bls.n	800fb54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800fb34:	fb04 0203 	mla	r2, r4, r3, r0
 800fb38:	3301      	adds	r3, #1
 800fb3a:	7b11      	ldrb	r1, [r2, #12]
 800fb3c:	f36f 1145 	bfc	r1, #5, #1
 800fb40:	7311      	strb	r1, [r2, #12]
 800fb42:	e7f5      	b.n	800fb30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800fb44:	6822      	ldr	r2, [r4, #0]
 800fb46:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800fb4a:	6802      	ldr	r2, [r0, #0]
 800fb4c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800fb50:	3301      	adds	r3, #1
 800fb52:	e7e7      	b.n	800fb24 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb56:	bf00      	nop
 800fb58:	20015494 	.word	0x20015494
 800fb5c:	200154b0 	.word	0x200154b0
 800fb60:	200154b4 	.word	0x200154b4
 800fb64:	200154a8 	.word	0x200154a8
 800fb68:	20015498 	.word	0x20015498
 800fb6c:	200154a0 	.word	0x200154a0
 800fb70:	200154b2 	.word	0x200154b2
 800fb74:	2001549c 	.word	0x2001549c
 800fb78:	200154ac 	.word	0x200154ac
 800fb7c:	200154a4 	.word	0x200154a4

0800fb80 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800fb80:	4b06      	ldr	r3, [pc, #24]	@ (800fb9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	b943      	cbnz	r3, 800fb98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800fb86:	b139      	cbz	r1, 800fb98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800fb88:	4b05      	ldr	r3, [pc, #20]	@ (800fba0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800fb8a:	801a      	strh	r2, [r3, #0]
 800fb8c:	4b05      	ldr	r3, [pc, #20]	@ (800fba4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800fb8e:	6019      	str	r1, [r3, #0]
 800fb90:	4b05      	ldr	r3, [pc, #20]	@ (800fba8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800fb92:	6018      	str	r0, [r3, #0]
 800fb94:	f7ff bf96 	b.w	800fac4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	200154a0 	.word	0x200154a0
 800fba0:	200154b4 	.word	0x200154b4
 800fba4:	2001549c 	.word	0x2001549c
 800fba8:	20015494 	.word	0x20015494

0800fbac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800fbac:	b470      	push	{r4, r5, r6}
 800fbae:	4c07      	ldr	r4, [pc, #28]	@ (800fbcc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800fbb0:	6826      	ldr	r6, [r4, #0]
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	4610      	mov	r0, r2
 800fbb6:	9a03      	ldr	r2, [sp, #12]
 800fbb8:	b936      	cbnz	r6, 800fbc8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800fbba:	6025      	str	r5, [r4, #0]
 800fbbc:	4c04      	ldr	r4, [pc, #16]	@ (800fbd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800fbbe:	8021      	strh	r1, [r4, #0]
 800fbc0:	bc70      	pop	{r4, r5, r6}
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	f7ff bfdc 	b.w	800fb80 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800fbc8:	bc70      	pop	{r4, r5, r6}
 800fbca:	4770      	bx	lr
 800fbcc:	200154b8 	.word	0x200154b8
 800fbd0:	200154b0 	.word	0x200154b0

0800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800fbd4:	4a12      	ldr	r2, [pc, #72]	@ (800fc20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800fbd6:	8803      	ldrh	r3, [r0, #0]
 800fbd8:	8812      	ldrh	r2, [r2, #0]
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d207      	bcs.n	800fbee <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800fbde:	4a11      	ldr	r2, [pc, #68]	@ (800fc24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800fbe0:	6812      	ldr	r2, [r2, #0]
 800fbe2:	2114      	movs	r1, #20
 800fbe4:	fb01 2303 	mla	r3, r1, r3, r2
 800fbe8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800fbec:	4770      	bx	lr
 800fbee:	490e      	ldr	r1, [pc, #56]	@ (800fc28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800fbf0:	8809      	ldrh	r1, [r1, #0]
 800fbf2:	4411      	add	r1, r2
 800fbf4:	428b      	cmp	r3, r1
 800fbf6:	da04      	bge.n	800fc02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800fbf8:	1a9b      	subs	r3, r3, r2
 800fbfa:	4a0c      	ldr	r2, [pc, #48]	@ (800fc2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800fbfc:	210e      	movs	r1, #14
 800fbfe:	6812      	ldr	r2, [r2, #0]
 800fc00:	e7f0      	b.n	800fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800fc02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d108      	bne.n	800fc1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800fc0a:	4b09      	ldr	r3, [pc, #36]	@ (800fc30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	b91b      	cbnz	r3, 800fc18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800fc10:	4b08      	ldr	r3, [pc, #32]	@ (800fc34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800fc12:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fc16:	4770      	bx	lr
 800fc18:	4b07      	ldr	r3, [pc, #28]	@ (800fc38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800fc1a:	e7fa      	b.n	800fc12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	4770      	bx	lr
 800fc20:	200154b0 	.word	0x200154b0
 800fc24:	200154b8 	.word	0x200154b8
 800fc28:	200154b4 	.word	0x200154b4
 800fc2c:	20015498 	.word	0x20015498
 800fc30:	20015428 	.word	0x20015428
 800fc34:	2001542a 	.word	0x2001542a
 800fc38:	2001542c 	.word	0x2001542c

0800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800fc3c:	4a12      	ldr	r2, [pc, #72]	@ (800fc88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800fc3e:	8803      	ldrh	r3, [r0, #0]
 800fc40:	8812      	ldrh	r2, [r2, #0]
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d207      	bcs.n	800fc56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800fc46:	4a11      	ldr	r2, [pc, #68]	@ (800fc8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800fc48:	6812      	ldr	r2, [r2, #0]
 800fc4a:	2114      	movs	r1, #20
 800fc4c:	fb01 2303 	mla	r3, r1, r3, r2
 800fc50:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800fc54:	4770      	bx	lr
 800fc56:	490e      	ldr	r1, [pc, #56]	@ (800fc90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800fc58:	8809      	ldrh	r1, [r1, #0]
 800fc5a:	4411      	add	r1, r2
 800fc5c:	428b      	cmp	r3, r1
 800fc5e:	da04      	bge.n	800fc6a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800fc60:	1a9b      	subs	r3, r3, r2
 800fc62:	4a0c      	ldr	r2, [pc, #48]	@ (800fc94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800fc64:	210e      	movs	r1, #14
 800fc66:	6812      	ldr	r2, [r2, #0]
 800fc68:	e7f0      	b.n	800fc4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800fc6a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d108      	bne.n	800fc84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800fc72:	4b09      	ldr	r3, [pc, #36]	@ (800fc98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	b91b      	cbnz	r3, 800fc80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800fc78:	4b08      	ldr	r3, [pc, #32]	@ (800fc9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800fc7a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fc7e:	4770      	bx	lr
 800fc80:	4b07      	ldr	r3, [pc, #28]	@ (800fca0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800fc82:	e7fa      	b.n	800fc7a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800fc84:	2000      	movs	r0, #0
 800fc86:	4770      	bx	lr
 800fc88:	200154b0 	.word	0x200154b0
 800fc8c:	200154b8 	.word	0x200154b8
 800fc90:	200154b4 	.word	0x200154b4
 800fc94:	20015498 	.word	0x20015498
 800fc98:	20015428 	.word	0x20015428
 800fc9c:	2001542c 	.word	0x2001542c
 800fca0:	2001542a 	.word	0x2001542a

0800fca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800fca4:	b530      	push	{r4, r5, lr}
 800fca6:	4a22      	ldr	r2, [pc, #136]	@ (800fd30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800fca8:	880b      	ldrh	r3, [r1, #0]
 800fcaa:	8812      	ldrh	r2, [r2, #0]
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d213      	bcs.n	800fcd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800fcb0:	4a20      	ldr	r2, [pc, #128]	@ (800fd34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800fcb2:	6812      	ldr	r2, [r2, #0]
 800fcb4:	2114      	movs	r1, #20
 800fcb6:	fb01 2303 	mla	r3, r1, r3, r2
 800fcba:	8a1a      	ldrh	r2, [r3, #16]
 800fcbc:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800fcc0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800fcc4:	8a5b      	ldrh	r3, [r3, #18]
 800fcc6:	8004      	strh	r4, [r0, #0]
 800fcc8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800fccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcd0:	8041      	strh	r1, [r0, #2]
 800fcd2:	8082      	strh	r2, [r0, #4]
 800fcd4:	80c3      	strh	r3, [r0, #6]
 800fcd6:	e024      	b.n	800fd22 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 800fcd8:	4917      	ldr	r1, [pc, #92]	@ (800fd38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800fcda:	8809      	ldrh	r1, [r1, #0]
 800fcdc:	4411      	add	r1, r2
 800fcde:	428b      	cmp	r3, r1
 800fce0:	da10      	bge.n	800fd04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 800fce2:	1a9b      	subs	r3, r3, r2
 800fce4:	220e      	movs	r2, #14
 800fce6:	4353      	muls	r3, r2
 800fce8:	4a14      	ldr	r2, [pc, #80]	@ (800fd3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 800fcea:	6811      	ldr	r1, [r2, #0]
 800fcec:	18ca      	adds	r2, r1, r3
 800fcee:	5ecd      	ldrsh	r5, [r1, r3]
 800fcf0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800fcf4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800fcf8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800fcfc:	8005      	strh	r5, [r0, #0]
 800fcfe:	8044      	strh	r4, [r0, #2]
 800fd00:	8081      	strh	r1, [r0, #4]
 800fd02:	e7e7      	b.n	800fcd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800fd04:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d10b      	bne.n	800fd24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 800fd0c:	4b0c      	ldr	r3, [pc, #48]	@ (800fd40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 800fd0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fd12:	4b0c      	ldr	r3, [pc, #48]	@ (800fd44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 800fd14:	8081      	strh	r1, [r0, #4]
 800fd16:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fd1a:	80c2      	strh	r2, [r0, #6]
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	8003      	strh	r3, [r0, #0]
 800fd20:	8043      	strh	r3, [r0, #2]
 800fd22:	bd30      	pop	{r4, r5, pc}
 800fd24:	2300      	movs	r3, #0
 800fd26:	8003      	strh	r3, [r0, #0]
 800fd28:	8043      	strh	r3, [r0, #2]
 800fd2a:	8083      	strh	r3, [r0, #4]
 800fd2c:	e7d2      	b.n	800fcd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800fd2e:	bf00      	nop
 800fd30:	200154b0 	.word	0x200154b0
 800fd34:	200154b8 	.word	0x200154b8
 800fd38:	200154b4 	.word	0x200154b4
 800fd3c:	20015498 	.word	0x20015498
 800fd40:	20015424 	.word	0x20015424
 800fd44:	20015426 	.word	0x20015426

0800fd48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 800fd48:	4a17      	ldr	r2, [pc, #92]	@ (800fda8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 800fd4a:	8803      	ldrh	r3, [r0, #0]
 800fd4c:	8812      	ldrh	r2, [r2, #0]
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d213      	bcs.n	800fd7a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 800fd52:	4a16      	ldr	r2, [pc, #88]	@ (800fdac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800fd54:	6812      	ldr	r2, [r2, #0]
 800fd56:	2114      	movs	r1, #20
 800fd58:	fb01 2303 	mla	r3, r1, r3, r2
 800fd5c:	8a1a      	ldrh	r2, [r3, #16]
 800fd5e:	8919      	ldrh	r1, [r3, #8]
 800fd60:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800fd64:	428a      	cmp	r2, r1
 800fd66:	db1d      	blt.n	800fda4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800fd68:	8a58      	ldrh	r0, [r3, #18]
 800fd6a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800fd6e:	895b      	ldrh	r3, [r3, #10]
 800fd70:	4298      	cmp	r0, r3
 800fd72:	bfac      	ite	ge
 800fd74:	2000      	movge	r0, #0
 800fd76:	2001      	movlt	r0, #1
 800fd78:	4770      	bx	lr
 800fd7a:	490d      	ldr	r1, [pc, #52]	@ (800fdb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 800fd7c:	8809      	ldrh	r1, [r1, #0]
 800fd7e:	4411      	add	r1, r2
 800fd80:	428b      	cmp	r3, r1
 800fd82:	da0d      	bge.n	800fda0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 800fd84:	1a9b      	subs	r3, r3, r2
 800fd86:	4a0b      	ldr	r2, [pc, #44]	@ (800fdb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 800fd88:	6812      	ldr	r2, [r2, #0]
 800fd8a:	210e      	movs	r1, #14
 800fd8c:	fb01 2303 	mla	r3, r1, r3, r2
 800fd90:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800fd94:	891a      	ldrh	r2, [r3, #8]
 800fd96:	4291      	cmp	r1, r2
 800fd98:	db04      	blt.n	800fda4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800fd9a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800fd9e:	e7e6      	b.n	800fd6e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 800fda0:	2000      	movs	r0, #0
 800fda2:	4770      	bx	lr
 800fda4:	2001      	movs	r0, #1
 800fda6:	4770      	bx	lr
 800fda8:	200154b0 	.word	0x200154b0
 800fdac:	200154b8 	.word	0x200154b8
 800fdb0:	200154b4 	.word	0x200154b4
 800fdb4:	20015498 	.word	0x20015498

0800fdb8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800fdb8:	4a12      	ldr	r2, [pc, #72]	@ (800fe04 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800fdba:	8803      	ldrh	r3, [r0, #0]
 800fdbc:	8811      	ldrh	r1, [r2, #0]
 800fdbe:	428b      	cmp	r3, r1
 800fdc0:	d20b      	bcs.n	800fdda <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800fdc2:	4a11      	ldr	r2, [pc, #68]	@ (800fe08 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800fdc4:	6812      	ldr	r2, [r2, #0]
 800fdc6:	b112      	cbz	r2, 800fdce <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800fdc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fdcc:	b9c0      	cbnz	r0, 800fe00 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800fdce:	4a0f      	ldr	r2, [pc, #60]	@ (800fe0c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800fdd0:	6811      	ldr	r1, [r2, #0]
 800fdd2:	2214      	movs	r2, #20
 800fdd4:	4353      	muls	r3, r2
 800fdd6:	58c8      	ldr	r0, [r1, r3]
 800fdd8:	4770      	bx	lr
 800fdda:	4a0d      	ldr	r2, [pc, #52]	@ (800fe10 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800fddc:	8812      	ldrh	r2, [r2, #0]
 800fdde:	440a      	add	r2, r1
 800fde0:	4293      	cmp	r3, r2
 800fde2:	da04      	bge.n	800fdee <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800fde4:	4a08      	ldr	r2, [pc, #32]	@ (800fe08 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800fde6:	6812      	ldr	r2, [r2, #0]
 800fde8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fdec:	4770      	bx	lr
 800fdee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d103      	bne.n	800fdfe <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800fdf6:	4b07      	ldr	r3, [pc, #28]	@ (800fe14 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800fdfc:	4770      	bx	lr
 800fdfe:	2000      	movs	r0, #0
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	200154b0 	.word	0x200154b0
 800fe08:	20015494 	.word	0x20015494
 800fe0c:	200154b8 	.word	0x200154b8
 800fe10:	200154b4 	.word	0x200154b4
 800fe14:	20015430 	.word	0x20015430

0800fe18 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800fe18:	4b24      	ldr	r3, [pc, #144]	@ (800feac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800fe1a:	8802      	ldrh	r2, [r0, #0]
 800fe1c:	8818      	ldrh	r0, [r3, #0]
 800fe1e:	4282      	cmp	r2, r0
 800fe20:	d221      	bcs.n	800fe66 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800fe22:	4b23      	ldr	r3, [pc, #140]	@ (800feb0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800fe24:	6819      	ldr	r1, [r3, #0]
 800fe26:	2314      	movs	r3, #20
 800fe28:	fb03 1302 	mla	r3, r3, r2, r1
 800fe2c:	6858      	ldr	r0, [r3, #4]
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d03a      	beq.n	800fea8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fe32:	4920      	ldr	r1, [pc, #128]	@ (800feb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800fe34:	6809      	ldr	r1, [r1, #0]
 800fe36:	2900      	cmp	r1, #0
 800fe38:	d036      	beq.n	800fea8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fe3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fe3e:	2900      	cmp	r1, #0
 800fe40:	d032      	beq.n	800fea8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800fe42:	891a      	ldrh	r2, [r3, #8]
 800fe44:	8958      	ldrh	r0, [r3, #10]
 800fe46:	4350      	muls	r0, r2
 800fe48:	7c5a      	ldrb	r2, [r3, #17]
 800fe4a:	7cdb      	ldrb	r3, [r3, #19]
 800fe4c:	0952      	lsrs	r2, r2, #5
 800fe4e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fe52:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800fe56:	2b0b      	cmp	r3, #11
 800fe58:	bf18      	it	ne
 800fe5a:	0040      	lslne	r0, r0, #1
 800fe5c:	3003      	adds	r0, #3
 800fe5e:	f020 0003 	bic.w	r0, r0, #3
 800fe62:	4408      	add	r0, r1
 800fe64:	4770      	bx	lr
 800fe66:	4b14      	ldr	r3, [pc, #80]	@ (800feb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800fe68:	881b      	ldrh	r3, [r3, #0]
 800fe6a:	4403      	add	r3, r0
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	da1a      	bge.n	800fea6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fe70:	4b12      	ldr	r3, [pc, #72]	@ (800febc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	1a10      	subs	r0, r2, r0
 800fe76:	210e      	movs	r1, #14
 800fe78:	fb01 3000 	mla	r0, r1, r0, r3
 800fe7c:	7b03      	ldrb	r3, [r0, #12]
 800fe7e:	f003 031f 	and.w	r3, r3, #31
 800fe82:	2b0b      	cmp	r3, #11
 800fe84:	d10b      	bne.n	800fe9e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800fe86:	8903      	ldrh	r3, [r0, #8]
 800fe88:	8940      	ldrh	r0, [r0, #10]
 800fe8a:	4358      	muls	r0, r3
 800fe8c:	4b09      	ldr	r3, [pc, #36]	@ (800feb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800fe8e:	6819      	ldr	r1, [r3, #0]
 800fe90:	3003      	adds	r0, #3
 800fe92:	f020 0303 	bic.w	r3, r0, #3
 800fe96:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800fe9a:	4418      	add	r0, r3
 800fe9c:	4770      	bx	lr
 800fe9e:	2b0d      	cmp	r3, #13
 800fea0:	d101      	bne.n	800fea6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fea2:	300d      	adds	r0, #13
 800fea4:	4770      	bx	lr
 800fea6:	2000      	movs	r0, #0
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	200154b0 	.word	0x200154b0
 800feb0:	200154b8 	.word	0x200154b8
 800feb4:	20015494 	.word	0x20015494
 800feb8:	200154b4 	.word	0x200154b4
 800febc:	20015498 	.word	0x20015498

0800fec0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800fec0:	b510      	push	{r4, lr}
 800fec2:	4b1f      	ldr	r3, [pc, #124]	@ (800ff40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 800fec4:	8802      	ldrh	r2, [r0, #0]
 800fec6:	881b      	ldrh	r3, [r3, #0]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d21a      	bcs.n	800ff02 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 800fecc:	4b1d      	ldr	r3, [pc, #116]	@ (800ff44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	2114      	movs	r1, #20
 800fed2:	fb01 3102 	mla	r1, r1, r2, r3
 800fed6:	7c4b      	ldrb	r3, [r1, #17]
 800fed8:	0958      	lsrs	r0, r3, #5
 800feda:	7ccb      	ldrb	r3, [r1, #19]
 800fedc:	491a      	ldr	r1, [pc, #104]	@ (800ff48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 800fede:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800fee2:	6809      	ldr	r1, [r1, #0]
 800fee4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 800fee8:	b2d8      	uxtb	r0, r3
 800feea:	b149      	cbz	r1, 800ff00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800feec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fef0:	b132      	cbz	r2, 800ff00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800fef2:	2b0e      	cmp	r3, #14
 800fef4:	d021      	beq.n	800ff3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800fef6:	280f      	cmp	r0, #15
 800fef8:	d01d      	beq.n	800ff36 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 800fefa:	2810      	cmp	r0, #16
 800fefc:	bf08      	it	eq
 800fefe:	2002      	moveq	r0, #2
 800ff00:	bd10      	pop	{r4, pc}
 800ff02:	4912      	ldr	r1, [pc, #72]	@ (800ff4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 800ff04:	8809      	ldrh	r1, [r1, #0]
 800ff06:	4419      	add	r1, r3
 800ff08:	428a      	cmp	r2, r1
 800ff0a:	da09      	bge.n	800ff20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 800ff0c:	1ad3      	subs	r3, r2, r3
 800ff0e:	4a10      	ldr	r2, [pc, #64]	@ (800ff50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 800ff10:	6812      	ldr	r2, [r2, #0]
 800ff12:	210e      	movs	r1, #14
 800ff14:	fb01 2303 	mla	r3, r1, r3, r2
 800ff18:	7b18      	ldrb	r0, [r3, #12]
 800ff1a:	f000 001f 	and.w	r0, r0, #31
 800ff1e:	e7ef      	b.n	800ff00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800ff20:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d108      	bne.n	800ff3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800ff28:	f7f9 fd34 	bl	8009994 <_ZN8touchgfx3HAL3lcdEv>
 800ff2c:	6803      	ldr	r3, [r0, #0]
 800ff2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff34:	4718      	bx	r3
 800ff36:	2001      	movs	r0, #1
 800ff38:	e7e2      	b.n	800ff00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	e7e0      	b.n	800ff00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800ff3e:	bf00      	nop
 800ff40:	200154b0 	.word	0x200154b0
 800ff44:	200154b8 	.word	0x200154b8
 800ff48:	20015494 	.word	0x20015494
 800ff4c:	200154b4 	.word	0x200154b4
 800ff50:	20015498 	.word	0x20015498

0800ff54 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 800ff54:	2010      	movs	r0, #16
 800ff56:	4770      	bx	lr

0800ff58 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 800ff58:	2000      	movs	r0, #0
 800ff5a:	4770      	bx	lr

0800ff5c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 800ff5c:	4b02      	ldr	r3, [pc, #8]	@ (800ff68 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 800ff5e:	8818      	ldrh	r0, [r3, #0]
 800ff60:	0040      	lsls	r0, r0, #1
 800ff62:	b280      	uxth	r0, r0
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	2001542a 	.word	0x2001542a

0800ff6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800ff6c:	2bff      	cmp	r3, #255	@ 0xff
 800ff6e:	d05e      	beq.n	801002e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 800ff70:	2a0b      	cmp	r2, #11
 800ff72:	d058      	beq.n	8010026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800ff74:	d80e      	bhi.n	800ff94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 800ff76:	2a03      	cmp	r2, #3
 800ff78:	d04d      	beq.n	8010016 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 800ff7a:	d804      	bhi.n	800ff86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 800ff7c:	2a01      	cmp	r2, #1
 800ff7e:	d04c      	beq.n	801001a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 800ff80:	d94d      	bls.n	801001e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 800ff82:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ff84:	e031      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800ff86:	2a09      	cmp	r2, #9
 800ff88:	d04d      	beq.n	8010026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800ff8a:	d84a      	bhi.n	8010022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800ff8c:	2a08      	cmp	r2, #8
 800ff8e:	d048      	beq.n	8010022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800ff90:	2300      	movs	r3, #0
 800ff92:	e02a      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800ff94:	2a2f      	cmp	r2, #47	@ 0x2f
 800ff96:	d02c      	beq.n	800fff2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800ff98:	d811      	bhi.n	800ffbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 800ff9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ff9c:	d018      	beq.n	800ffd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 800ff9e:	d831      	bhi.n	8010004 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 800ffa0:	2a2c      	cmp	r2, #44	@ 0x2c
 800ffa2:	d1f5      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800ffa4:	684a      	ldr	r2, [r1, #4]
 800ffa6:	7813      	ldrb	r3, [r2, #0]
 800ffa8:	7852      	ldrb	r2, [r2, #1]
 800ffaa:	2a00      	cmp	r2, #0
 800ffac:	d1f0      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d01d      	beq.n	800ffee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d02d      	beq.n	8010012 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 800ffb6:	2b02      	cmp	r3, #2
 800ffb8:	d1ea      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800ffba:	68c3      	ldr	r3, [r0, #12]
 800ffbc:	e015      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800ffbe:	2a31      	cmp	r2, #49	@ 0x31
 800ffc0:	d004      	beq.n	800ffcc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 800ffc2:	d332      	bcc.n	801002a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800ffc4:	2a32      	cmp	r2, #50	@ 0x32
 800ffc6:	d030      	beq.n	801002a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800ffc8:	2a33      	cmp	r2, #51	@ 0x33
 800ffca:	d1e1      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800ffcc:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800ffce:	e00c      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800ffd0:	684a      	ldr	r2, [r1, #4]
 800ffd2:	7813      	ldrb	r3, [r2, #0]
 800ffd4:	7852      	ldrb	r2, [r2, #1]
 800ffd6:	2a00      	cmp	r2, #0
 800ffd8:	d1da      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d004      	beq.n	800ffe8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 800ffde:	d30f      	bcc.n	8010000 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 800ffe0:	2b02      	cmp	r3, #2
 800ffe2:	d1d5      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800ffe4:	6943      	ldr	r3, [r0, #20]
 800ffe6:	e000      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800ffe8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ffea:	4618      	mov	r0, r3
 800ffec:	4770      	bx	lr
 800ffee:	69c3      	ldr	r3, [r0, #28]
 800fff0:	e7fb      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800fff2:	684b      	ldr	r3, [r1, #4]
 800fff4:	781a      	ldrb	r2, [r3, #0]
 800fff6:	785b      	ldrb	r3, [r3, #1]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1c9      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800fffc:	2a00      	cmp	r2, #0
 800fffe:	d1f4      	bne.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010000:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010002:	e7f2      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010004:	684b      	ldr	r3, [r1, #4]
 8010006:	781a      	ldrb	r2, [r3, #0]
 8010008:	785b      	ldrb	r3, [r3, #1]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d1c0      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801000e:	2a00      	cmp	r2, #0
 8010010:	d1eb      	bne.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010012:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010014:	e7e9      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010016:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010018:	e7e7      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801001a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801001c:	e7e5      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801001e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8010020:	e7e3      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010022:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8010024:	e7e1      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010026:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8010028:	e7df      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801002a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801002c:	e7dd      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801002e:	2a0b      	cmp	r2, #11
 8010030:	d059      	beq.n	80100e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010032:	d80e      	bhi.n	8010052 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8010034:	2a03      	cmp	r2, #3
 8010036:	d050      	beq.n	80100da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8010038:	d804      	bhi.n	8010044 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801003a:	2a01      	cmp	r2, #1
 801003c:	d04f      	beq.n	80100de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801003e:	d950      	bls.n	80100e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8010040:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010042:	e7d2      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010044:	2a09      	cmp	r2, #9
 8010046:	d04e      	beq.n	80100e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010048:	d801      	bhi.n	801004e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801004a:	2a08      	cmp	r2, #8
 801004c:	d1a0      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801004e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8010050:	e7cb      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010052:	2a2f      	cmp	r2, #47	@ 0x2f
 8010054:	d02d      	beq.n	80100b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 8010056:	d811      	bhi.n	801007c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8010058:	2a2d      	cmp	r2, #45	@ 0x2d
 801005a:	d018      	beq.n	801008e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801005c:	d833      	bhi.n	80100c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801005e:	2a2c      	cmp	r2, #44	@ 0x2c
 8010060:	d196      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010062:	684a      	ldr	r2, [r1, #4]
 8010064:	7813      	ldrb	r3, [r2, #0]
 8010066:	7852      	ldrb	r2, [r2, #1]
 8010068:	2a00      	cmp	r2, #0
 801006a:	d191      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801006c:	2b01      	cmp	r3, #1
 801006e:	d01e      	beq.n	80100ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8010070:	2b00      	cmp	r3, #0
 8010072:	d030      	beq.n	80100d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8010074:	2b02      	cmp	r3, #2
 8010076:	d18b      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010078:	6903      	ldr	r3, [r0, #16]
 801007a:	e7b6      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801007c:	2a31      	cmp	r2, #49	@ 0x31
 801007e:	d004      	beq.n	801008a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8010080:	d333      	bcc.n	80100ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8010082:	2a32      	cmp	r2, #50	@ 0x32
 8010084:	d031      	beq.n	80100ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8010086:	2a33      	cmp	r2, #51	@ 0x33
 8010088:	d182      	bne.n	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801008a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801008c:	e7ad      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801008e:	684a      	ldr	r2, [r1, #4]
 8010090:	7813      	ldrb	r3, [r2, #0]
 8010092:	7852      	ldrb	r2, [r2, #1]
 8010094:	2a00      	cmp	r2, #0
 8010096:	f47f af7b 	bne.w	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801009a:	2b01      	cmp	r3, #1
 801009c:	d005      	beq.n	80100aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801009e:	d310      	bcc.n	80100c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 80100a0:	2b02      	cmp	r3, #2
 80100a2:	f47f af75 	bne.w	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80100a6:	6983      	ldr	r3, [r0, #24]
 80100a8:	e79f      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100aa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80100ac:	e79d      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100ae:	6a03      	ldr	r3, [r0, #32]
 80100b0:	e79b      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100b2:	684b      	ldr	r3, [r1, #4]
 80100b4:	781a      	ldrb	r2, [r3, #0]
 80100b6:	785b      	ldrb	r3, [r3, #1]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f47f af69 	bne.w	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80100be:	2a00      	cmp	r2, #0
 80100c0:	d193      	bne.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100c2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80100c4:	e791      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100c6:	684b      	ldr	r3, [r1, #4]
 80100c8:	781a      	ldrb	r2, [r3, #0]
 80100ca:	785b      	ldrb	r3, [r3, #1]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f47f af5f 	bne.w	800ff90 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80100d2:	2a00      	cmp	r2, #0
 80100d4:	d189      	bne.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80100d8:	e787      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100da:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80100dc:	e785      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100de:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80100e0:	e783      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100e2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80100e4:	e781      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100e6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80100e8:	e77f      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100ea:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80100ec:	e77d      	b.n	800ffea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

080100ee <_ZN8touchgfx8LCD16bppD1Ev>:
 80100ee:	4770      	bx	lr

080100f0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 80100f0:	4770      	bx	lr

080100f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80100f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100f6:	b088      	sub	sp, #32
 80100f8:	ac08      	add	r4, sp, #32
 80100fa:	4606      	mov	r6, r0
 80100fc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8010100:	4620      	mov	r0, r4
 8010102:	4688      	mov	r8, r1
 8010104:	4691      	mov	r9, r2
 8010106:	f7ff fe57 	bl	800fdb8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801010a:	6833      	ldr	r3, [r6, #0]
 801010c:	4605      	mov	r5, r0
 801010e:	4620      	mov	r0, r4
 8010110:	699f      	ldr	r7, [r3, #24]
 8010112:	f7ff fd5f 	bl	800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010116:	4682      	mov	sl, r0
 8010118:	4620      	mov	r0, r4
 801011a:	f7ff fd8f 	bl	800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801011e:	9500      	str	r5, [sp, #0]
 8010120:	e9cd a001 	strd	sl, r0, [sp, #4]
 8010124:	464b      	mov	r3, r9
 8010126:	a806      	add	r0, sp, #24
 8010128:	4642      	mov	r2, r8
 801012a:	4631      	mov	r1, r6
 801012c:	47b8      	blx	r7
 801012e:	4628      	mov	r0, r5
 8010130:	b008      	add	sp, #32
 8010132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010138 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8010138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801013c:	2300      	movs	r3, #0
 801013e:	9300      	str	r3, [sp, #0]
 8010140:	4b3d      	ldr	r3, [pc, #244]	@ (8010238 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d137      	bne.n	80101b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8010148:	4a3c      	ldr	r2, [pc, #240]	@ (801023c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801014a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801014e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d132      	bne.n	80101bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8010156:	4b3a      	ldr	r3, [pc, #232]	@ (8010240 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8010158:	f9b3 3000 	ldrsh.w	r3, [r3]
 801015c:	6808      	ldr	r0, [r1, #0]
 801015e:	6849      	ldr	r1, [r1, #4]
 8010160:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010164:	ac02      	add	r4, sp, #8
 8010166:	ab02      	add	r3, sp, #8
 8010168:	c303      	stmia	r3!, {r0, r1}
 801016a:	4669      	mov	r1, sp
 801016c:	4620      	mov	r0, r4
 801016e:	f7fc fae1 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010172:	4668      	mov	r0, sp
 8010174:	f7fc fab6 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010178:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801017c:	f8bd 2000 	ldrh.w	r2, [sp]
 8010180:	4d30      	ldr	r5, [pc, #192]	@ (8010244 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8010182:	4413      	add	r3, r2
 8010184:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010188:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801018c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010190:	6828      	ldr	r0, [r5, #0]
 8010192:	4413      	add	r3, r2
 8010194:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010198:	6803      	ldr	r3, [r0, #0]
 801019a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801019c:	4798      	blx	r3
 801019e:	f010 0f01 	tst.w	r0, #1
 80101a2:	462f      	mov	r7, r5
 80101a4:	d00c      	beq.n	80101c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80101a6:	6828      	ldr	r0, [r5, #0]
 80101a8:	6803      	ldr	r3, [r0, #0]
 80101aa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80101ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101b0:	4798      	blx	r3
 80101b2:	b004      	add	sp, #16
 80101b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b8:	4a21      	ldr	r2, [pc, #132]	@ (8010240 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80101ba:	e7c6      	b.n	801014a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80101bc:	4b1f      	ldr	r3, [pc, #124]	@ (801023c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80101be:	e7cb      	b.n	8010158 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80101c0:	6838      	ldr	r0, [r7, #0]
 80101c2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80101c6:	6803      	ldr	r3, [r0, #0]
 80101c8:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80101cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101ce:	4798      	blx	r3
 80101d0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80101d4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80101d8:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80101dc:	fb16 3602 	smlabb	r6, r6, r2, r3
 80101e0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80101e4:	6838      	ldr	r0, [r7, #0]
 80101e6:	6803      	ldr	r3, [r0, #0]
 80101e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ea:	4798      	blx	r3
 80101ec:	4a13      	ldr	r2, [pc, #76]	@ (801023c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80101ee:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80101f2:	8813      	ldrh	r3, [r2, #0]
 80101f4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80101f8:	fb03 1404 	mla	r4, r3, r4, r1
 80101fc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010200:	435d      	muls	r5, r3
 8010202:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010206:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801020a:	4691      	mov	r9, r2
 801020c:	6838      	ldr	r0, [r7, #0]
 801020e:	42ac      	cmp	r4, r5
 8010210:	6803      	ldr	r3, [r0, #0]
 8010212:	d20e      	bcs.n	8010232 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8010214:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 8010218:	4632      	mov	r2, r6
 801021a:	4643      	mov	r3, r8
 801021c:	4621      	mov	r1, r4
 801021e:	47d0      	blx	sl
 8010220:	f8b9 3000 	ldrh.w	r3, [r9]
 8010224:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010228:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801022c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010230:	e7ec      	b.n	801020c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8010232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010234:	4798      	blx	r3
 8010236:	e7bc      	b.n	80101b2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8010238:	20015428 	.word	0x20015428
 801023c:	2001542a 	.word	0x2001542a
 8010240:	2001542c 	.word	0x2001542c
 8010244:	20015430 	.word	0x20015430

08010248 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8010248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024c:	b08b      	sub	sp, #44	@ 0x2c
 801024e:	460f      	mov	r7, r1
 8010250:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8010254:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8010258:	4616      	mov	r6, r2
 801025a:	f1bb 0f00 	cmp.w	fp, #0
 801025e:	d04a      	beq.n	80102f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8010260:	6810      	ldr	r0, [r2, #0]
 8010262:	6851      	ldr	r1, [r2, #4]
 8010264:	ad06      	add	r5, sp, #24
 8010266:	c503      	stmia	r5!, {r0, r1}
 8010268:	6818      	ldr	r0, [r3, #0]
 801026a:	6859      	ldr	r1, [r3, #4]
 801026c:	ad08      	add	r5, sp, #32
 801026e:	c503      	stmia	r5!, {r0, r1}
 8010270:	a806      	add	r0, sp, #24
 8010272:	f7fc fa37 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010276:	4631      	mov	r1, r6
 8010278:	a808      	add	r0, sp, #32
 801027a:	f7fc fa5b 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801027e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8010282:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8010286:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801028a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801028e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8010292:	fb16 2103 	smlabb	r1, r6, r3, r2
 8010296:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801029a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801029e:	4f5f      	ldr	r7, [pc, #380]	@ (801041c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80102a0:	440a      	add	r2, r1
 80102a2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80102a6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80102aa:	6838      	ldr	r0, [r7, #0]
 80102ac:	4413      	add	r3, r2
 80102ae:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80102b2:	6803      	ldr	r3, [r0, #0]
 80102b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b6:	4798      	blx	r3
 80102b8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80102bc:	46b9      	mov	r9, r7
 80102be:	d11d      	bne.n	80102fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80102c0:	b9fc      	cbnz	r4, 8010302 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80102c2:	f010 0f01 	tst.w	r0, #1
 80102c6:	d01c      	beq.n	8010302 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80102c8:	f8d9 0000 	ldr.w	r0, [r9]
 80102cc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80102d0:	6801      	ldr	r1, [r0, #0]
 80102d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80102d6:	2700      	movs	r7, #0
 80102d8:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80102dc:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80102e0:	9402      	str	r4, [sp, #8]
 80102e2:	b2ad      	uxth	r5, r5
 80102e4:	fa1f f488 	uxth.w	r4, r8
 80102e8:	9501      	str	r5, [sp, #4]
 80102ea:	9400      	str	r4, [sp, #0]
 80102ec:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 80102ee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80102f2:	4631      	mov	r1, r6
 80102f4:	47a0      	blx	r4
 80102f6:	b00b      	add	sp, #44	@ 0x2c
 80102f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102fc:	f010 0f04 	tst.w	r0, #4
 8010300:	e7e1      	b.n	80102c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8010302:	f8d9 0000 	ldr.w	r0, [r9]
 8010306:	6803      	ldr	r3, [r0, #0]
 8010308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801030a:	4798      	blx	r3
 801030c:	4b44      	ldr	r3, [pc, #272]	@ (8010420 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801030e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8010312:	881a      	ldrh	r2, [r3, #0]
 8010314:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8010318:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801031c:	fb02 1404 	mla	r4, r2, r4, r1
 8010320:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010324:	469a      	mov	sl, r3
 8010326:	fb05 f502 	mul.w	r5, r5, r2
 801032a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801032e:	d059      	beq.n	80103e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8010330:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8010334:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010338:	fa1f f28b 	uxth.w	r2, fp
 801033c:	fa1f f989 	uxth.w	r9, r9
 8010340:	469e      	mov	lr, r3
 8010342:	42ac      	cmp	r4, r5
 8010344:	d264      	bcs.n	8010410 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010346:	eb04 0a07 	add.w	sl, r4, r7
 801034a:	4554      	cmp	r4, sl
 801034c:	d23d      	bcs.n	80103ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801034e:	8821      	ldrh	r1, [r4, #0]
 8010350:	f836 3b02 	ldrh.w	r3, [r6], #2
 8010354:	1208      	asrs	r0, r1, #8
 8010356:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801035a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801035e:	fb10 f009 	smulbb	r0, r0, r9
 8010362:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8010366:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801036a:	00c9      	lsls	r1, r1, #3
 801036c:	fb0c 0c02 	mla	ip, ip, r2, r0
 8010370:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8010374:	10d8      	asrs	r0, r3, #3
 8010376:	b2c9      	uxtb	r1, r1
 8010378:	00db      	lsls	r3, r3, #3
 801037a:	fa1f fc8c 	uxth.w	ip, ip
 801037e:	fb1b fb09 	smulbb	fp, fp, r9
 8010382:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8010386:	b2db      	uxtb	r3, r3
 8010388:	fb11 f109 	smulbb	r1, r1, r9
 801038c:	fb00 b002 	mla	r0, r0, r2, fp
 8010390:	fb03 1302 	mla	r3, r3, r2, r1
 8010394:	f10c 0b01 	add.w	fp, ip, #1
 8010398:	b29b      	uxth	r3, r3
 801039a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801039e:	b280      	uxth	r0, r0
 80103a0:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 80103a4:	f103 0c01 	add.w	ip, r3, #1
 80103a8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80103ac:	1c43      	adds	r3, r0, #1
 80103ae:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80103b2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80103b6:	0940      	lsrs	r0, r0, #5
 80103b8:	ea4c 0c0b 	orr.w	ip, ip, fp
 80103bc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80103c0:	ea4c 0c00 	orr.w	ip, ip, r0
 80103c4:	f824 cb02 	strh.w	ip, [r4], #2
 80103c8:	e7bf      	b.n	801034a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80103ca:	f8be 3000 	ldrh.w	r3, [lr]
 80103ce:	eba3 0308 	sub.w	r3, r3, r8
 80103d2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80103d6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80103da:	eba3 0308 	sub.w	r3, r3, r8
 80103de:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80103e2:	e7ae      	b.n	8010342 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80103e4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80103e8:	f8d9 0000 	ldr.w	r0, [r9]
 80103ec:	42ac      	cmp	r4, r5
 80103ee:	6803      	ldr	r3, [r0, #0]
 80103f0:	d20e      	bcs.n	8010410 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80103f2:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 80103f6:	4632      	mov	r2, r6
 80103f8:	463b      	mov	r3, r7
 80103fa:	4621      	mov	r1, r4
 80103fc:	47c0      	blx	r8
 80103fe:	f8ba 3000 	ldrh.w	r3, [sl]
 8010402:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010406:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801040a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801040e:	e7eb      	b.n	80103e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8010410:	4b02      	ldr	r3, [pc, #8]	@ (801041c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8010412:	6818      	ldr	r0, [r3, #0]
 8010414:	6803      	ldr	r3, [r0, #0]
 8010416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010418:	4798      	blx	r3
 801041a:	e76c      	b.n	80102f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801041c:	20015430 	.word	0x20015430
 8010420:	2001542a 	.word	0x2001542a

08010424 <_ZN8touchgfx8LCD16bppD0Ev>:
 8010424:	b510      	push	{r4, lr}
 8010426:	218c      	movs	r1, #140	@ 0x8c
 8010428:	4604      	mov	r4, r0
 801042a:	f002 fa51 	bl	80128d0 <_ZdlPvj>
 801042e:	4620      	mov	r0, r4
 8010430:	bd10      	pop	{r4, pc}

08010432 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8010432:	b510      	push	{r4, lr}
 8010434:	2104      	movs	r1, #4
 8010436:	4604      	mov	r4, r0
 8010438:	f002 fa4a 	bl	80128d0 <_ZdlPvj>
 801043c:	4620      	mov	r0, r4
 801043e:	bd10      	pop	{r4, pc}

08010440 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8010440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010444:	b091      	sub	sp, #68	@ 0x44
 8010446:	469b      	mov	fp, r3
 8010448:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801044c:	4616      	mov	r6, r2
 801044e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8010452:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010456:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801045a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801045e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010462:	4604      	mov	r4, r0
 8010464:	460d      	mov	r5, r1
 8010466:	4640      	mov	r0, r8
 8010468:	4659      	mov	r1, fp
 801046a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801046e:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8010472:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8010476:	f7f8 ffb7 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 801047a:	4631      	mov	r1, r6
 801047c:	4640      	mov	r0, r8
 801047e:	f7f8 ffb3 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 8010482:	4b74      	ldr	r3, [pc, #464]	@ (8010654 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8010484:	8818      	ldrh	r0, [r3, #0]
 8010486:	4b74      	ldr	r3, [pc, #464]	@ (8010658 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8010488:	8819      	ldrh	r1, [r3, #0]
 801048a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801048e:	2b00      	cmp	r3, #0
 8010490:	b202      	sxth	r2, r0
 8010492:	b20e      	sxth	r6, r1
 8010494:	da07      	bge.n	80104a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8010496:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801049a:	4463      	add	r3, ip
 801049c:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80104a0:	2300      	movs	r3, #0
 80104a2:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80104a6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80104aa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80104ae:	1ad2      	subs	r2, r2, r3
 80104b0:	4594      	cmp	ip, r2
 80104b2:	bfc4      	itt	gt
 80104b4:	1ac2      	subgt	r2, r0, r3
 80104b6:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 80104ba:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80104be:	2a00      	cmp	r2, #0
 80104c0:	da07      	bge.n	80104d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 80104c2:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 80104c6:	4462      	add	r2, ip
 80104c8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80104cc:	2200      	movs	r2, #0
 80104ce:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80104d2:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 80104d6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80104da:	eba6 060a 	sub.w	r6, r6, sl
 80104de:	42b2      	cmp	r2, r6
 80104e0:	bfc4      	itt	gt
 80104e2:	eba1 020a 	subgt.w	r2, r1, sl
 80104e6:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 80104ea:	4a5c      	ldr	r2, [pc, #368]	@ (801065c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80104ec:	7812      	ldrb	r2, [r2, #0]
 80104ee:	b9a2      	cbnz	r2, 801051a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80104f0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80104f4:	4286      	cmp	r6, r0
 80104f6:	4640      	mov	r0, r8
 80104f8:	9303      	str	r3, [sp, #12]
 80104fa:	bf14      	ite	ne
 80104fc:	2600      	movne	r6, #0
 80104fe:	2601      	moveq	r6, #1
 8010500:	f7f8 ffb5 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010504:	9b03      	ldr	r3, [sp, #12]
 8010506:	b160      	cbz	r0, 8010522 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8010508:	2300      	movs	r3, #0
 801050a:	8023      	strh	r3, [r4, #0]
 801050c:	8063      	strh	r3, [r4, #2]
 801050e:	80a3      	strh	r3, [r4, #4]
 8010510:	4620      	mov	r0, r4
 8010512:	80e3      	strh	r3, [r4, #6]
 8010514:	b011      	add	sp, #68	@ 0x44
 8010516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801051a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801051e:	428e      	cmp	r6, r1
 8010520:	e7e9      	b.n	80104f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8010522:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8010526:	9205      	str	r2, [sp, #20]
 8010528:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801052c:	9206      	str	r2, [sp, #24]
 801052e:	f8bb 2000 	ldrh.w	r2, [fp]
 8010532:	900e      	str	r0, [sp, #56]	@ 0x38
 8010534:	1a9b      	subs	r3, r3, r2
 8010536:	b21b      	sxth	r3, r3
 8010538:	9303      	str	r3, [sp, #12]
 801053a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801053e:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8010542:	ebaa 0a03 	sub.w	sl, sl, r3
 8010546:	fa0f f38a 	sxth.w	r3, sl
 801054a:	9304      	str	r3, [sp, #16]
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8010552:	9b04      	ldr	r3, [sp, #16]
 8010554:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010558:	9b05      	ldr	r3, [sp, #20]
 801055a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801055e:	a90e      	add	r1, sp, #56	@ 0x38
 8010560:	9b06      	ldr	r3, [sp, #24]
 8010562:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010566:	a80c      	add	r0, sp, #48	@ 0x30
 8010568:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 801056c:	f7fc f8e2 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010570:	4640      	mov	r0, r8
 8010572:	f7fc f8b7 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010576:	a80e      	add	r0, sp, #56	@ 0x38
 8010578:	f7fc f8b4 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801057c:	4b38      	ldr	r3, [pc, #224]	@ (8010660 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801057e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8010582:	881b      	ldrh	r3, [r3, #0]
 8010584:	9307      	str	r3, [sp, #28]
 8010586:	682b      	ldr	r3, [r5, #0]
 8010588:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8010664 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801058e:	4628      	mov	r0, r5
 8010590:	4798      	blx	r3
 8010592:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8010596:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801059a:	4681      	mov	r9, r0
 801059c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 80105a0:	f8db 0000 	ldr.w	r0, [fp]
 80105a4:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80105a6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80105aa:	6803      	ldr	r3, [r0, #0]
 80105ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105ae:	4798      	blx	r3
 80105b0:	4607      	mov	r7, r0
 80105b2:	f8db 0000 	ldr.w	r0, [fp]
 80105b6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80105ba:	6803      	ldr	r3, [r0, #0]
 80105bc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80105c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80105c2:	9208      	str	r2, [sp, #32]
 80105c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c6:	4798      	blx	r3
 80105c8:	f010 0f01 	tst.w	r0, #1
 80105cc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80105d0:	d012      	beq.n	80105f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 80105d2:	f8db 0000 	ldr.w	r0, [fp]
 80105d6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80105da:	6803      	ldr	r3, [r0, #0]
 80105dc:	9200      	str	r2, [sp, #0]
 80105de:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80105e0:	e898 0006 	ldmia.w	r8, {r1, r2}
 80105e4:	462b      	mov	r3, r5
 80105e6:	47b0      	blx	r6
 80105e8:	9b03      	ldr	r3, [sp, #12]
 80105ea:	8023      	strh	r3, [r4, #0]
 80105ec:	9b04      	ldr	r3, [sp, #16]
 80105ee:	8063      	strh	r3, [r4, #2]
 80105f0:	9b05      	ldr	r3, [sp, #20]
 80105f2:	80a3      	strh	r3, [r4, #4]
 80105f4:	9b06      	ldr	r3, [sp, #24]
 80105f6:	e78b      	b.n	8010510 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 80105f8:	fb09 f202 	mul.w	r2, r9, r2
 80105fc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010600:	440f      	add	r7, r1
 8010602:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8010606:	b166      	cbz	r6, 8010622 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8010608:	9a07      	ldr	r2, [sp, #28]
 801060a:	4592      	cmp	sl, r2
 801060c:	d109      	bne.n	8010622 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801060e:	f8db 0000 	ldr.w	r0, [fp]
 8010612:	6802      	ldr	r2, [r0, #0]
 8010614:	fb09 f303 	mul.w	r3, r9, r3
 8010618:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 801061a:	4629      	mov	r1, r5
 801061c:	463a      	mov	r2, r7
 801061e:	47b0      	blx	r6
 8010620:	e7e2      	b.n	80105e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8010622:	fb0a f303 	mul.w	r3, sl, r3
 8010626:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8010664 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801062a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801062e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8010632:	4545      	cmp	r5, r8
 8010634:	d2d8      	bcs.n	80105e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8010636:	f8db 0000 	ldr.w	r0, [fp]
 801063a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801063e:	6802      	ldr	r2, [r0, #0]
 8010640:	4629      	mov	r1, r5
 8010642:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8010646:	005b      	lsls	r3, r3, #1
 8010648:	463a      	mov	r2, r7
 801064a:	47d0      	blx	sl
 801064c:	444f      	add	r7, r9
 801064e:	4435      	add	r5, r6
 8010650:	e7ef      	b.n	8010632 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8010652:	bf00      	nop
 8010654:	20015424 	.word	0x20015424
 8010658:	20015426 	.word	0x20015426
 801065c:	20015428 	.word	0x20015428
 8010660:	2001542a 	.word	0x2001542a
 8010664:	20015430 	.word	0x20015430

08010668 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8010668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801066a:	4606      	mov	r6, r0
 801066c:	b087      	sub	sp, #28
 801066e:	460c      	mov	r4, r1
 8010670:	4617      	mov	r7, r2
 8010672:	461d      	mov	r5, r3
 8010674:	b333      	cbz	r3, 80106c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8010676:	4608      	mov	r0, r1
 8010678:	f7f8 fef9 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 801067c:	bb10      	cbnz	r0, 80106c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801067e:	6820      	ldr	r0, [r4, #0]
 8010680:	6861      	ldr	r1, [r4, #4]
 8010682:	4c1c      	ldr	r4, [pc, #112]	@ (80106f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8010684:	ab04      	add	r3, sp, #16
 8010686:	c303      	stmia	r3!, {r0, r1}
 8010688:	a804      	add	r0, sp, #16
 801068a:	f7fc f82b 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801068e:	6820      	ldr	r0, [r4, #0]
 8010690:	6803      	ldr	r3, [r0, #0]
 8010692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010694:	4798      	blx	r3
 8010696:	2dff      	cmp	r5, #255	@ 0xff
 8010698:	d016      	beq.n	80106c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801069a:	f010 0f08 	tst.w	r0, #8
 801069e:	6820      	ldr	r0, [r4, #0]
 80106a0:	d015      	beq.n	80106ce <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80106a2:	2400      	movs	r4, #0
 80106a4:	6801      	ldr	r1, [r0, #0]
 80106a6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80106aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80106ae:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80106b2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80106b6:	9401      	str	r4, [sp, #4]
 80106b8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80106bc:	9400      	str	r4, [sp, #0]
 80106be:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 80106c0:	4639      	mov	r1, r7
 80106c2:	47a0      	blx	r4
 80106c4:	b007      	add	sp, #28
 80106c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106c8:	f010 0f02 	tst.w	r0, #2
 80106cc:	e7e7      	b.n	801069e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80106ce:	6803      	ldr	r3, [r0, #0]
 80106d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106d2:	4798      	blx	r3
 80106d4:	4b08      	ldr	r3, [pc, #32]	@ (80106f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80106d6:	881a      	ldrh	r2, [r3, #0]
 80106d8:	6833      	ldr	r3, [r6, #0]
 80106da:	e9cd 7500 	strd	r7, r5, [sp]
 80106de:	4601      	mov	r1, r0
 80106e0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80106e2:	4630      	mov	r0, r6
 80106e4:	ab04      	add	r3, sp, #16
 80106e6:	47a8      	blx	r5
 80106e8:	6820      	ldr	r0, [r4, #0]
 80106ea:	6803      	ldr	r3, [r0, #0]
 80106ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ee:	4798      	blx	r3
 80106f0:	e7e8      	b.n	80106c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80106f2:	bf00      	nop
 80106f4:	20015430 	.word	0x20015430
 80106f8:	2001542a 	.word	0x2001542a

080106fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80106fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010700:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8010704:	9e08      	ldr	r6, [sp, #32]
 8010706:	4688      	mov	r8, r1
 8010708:	4614      	mov	r4, r2
 801070a:	461d      	mov	r5, r3
 801070c:	2f00      	cmp	r7, #0
 801070e:	f000 80a9 	beq.w	8010864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010712:	4618      	mov	r0, r3
 8010714:	f7f8 feab 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 8010718:	2800      	cmp	r0, #0
 801071a:	f040 80a3 	bne.w	8010864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801071e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010722:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010726:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801072a:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801072e:	fb04 1303 	mla	r3, r4, r3, r1
 8010732:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8010736:	4365      	muls	r5, r4
 8010738:	2fff      	cmp	r7, #255	@ 0xff
 801073a:	eba4 0200 	sub.w	r2, r4, r0
 801073e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8010742:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8010746:	d04a      	beq.n	80107de <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8010748:	b2bc      	uxth	r4, r7
 801074a:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801074e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8010752:	fa5f f788 	uxtb.w	r7, r8
 8010756:	b2f3      	uxtb	r3, r6
 8010758:	0040      	lsls	r0, r0, #1
 801075a:	fb0e fe04 	mul.w	lr, lr, r4
 801075e:	4367      	muls	r7, r4
 8010760:	4363      	muls	r3, r4
 8010762:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8010766:	fa1f fc8c 	uxth.w	ip, ip
 801076a:	42a9      	cmp	r1, r5
 801076c:	d27a      	bcs.n	8010864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801076e:	eb01 0900 	add.w	r9, r1, r0
 8010772:	4549      	cmp	r1, r9
 8010774:	d231      	bcs.n	80107da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8010776:	880a      	ldrh	r2, [r1, #0]
 8010778:	1214      	asrs	r4, r2, #8
 801077a:	10d6      	asrs	r6, r2, #3
 801077c:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8010780:	00d2      	lsls	r2, r2, #3
 8010782:	b2d2      	uxtb	r2, r2
 8010784:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8010788:	fb14 f40c 	smulbb	r4, r4, ip
 801078c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8010790:	4474      	add	r4, lr
 8010792:	fb12 f20c 	smulbb	r2, r2, ip
 8010796:	b2a4      	uxth	r4, r4
 8010798:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801079c:	441a      	add	r2, r3
 801079e:	b292      	uxth	r2, r2
 80107a0:	f104 0a01 	add.w	sl, r4, #1
 80107a4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80107a8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80107ac:	fb16 f60c 	smulbb	r6, r6, ip
 80107b0:	f102 0a01 	add.w	sl, r2, #1
 80107b4:	443e      	add	r6, r7
 80107b6:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80107ba:	b2b6      	uxth	r6, r6
 80107bc:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80107c0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80107c4:	4322      	orrs	r2, r4
 80107c6:	1c74      	adds	r4, r6, #1
 80107c8:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80107cc:	0976      	lsrs	r6, r6, #5
 80107ce:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80107d2:	4332      	orrs	r2, r6
 80107d4:	f821 2b02 	strh.w	r2, [r1], #2
 80107d8:	e7cb      	b.n	8010772 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 80107da:	4441      	add	r1, r8
 80107dc:	e7c5      	b.n	801076a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 80107de:	4f22      	ldr	r7, [pc, #136]	@ (8010868 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 80107e0:	0973      	lsrs	r3, r6, #5
 80107e2:	ea08 0707 	and.w	r7, r8, r7
 80107e6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80107ea:	433b      	orrs	r3, r7
 80107ec:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80107f0:	4333      	orrs	r3, r6
 80107f2:	07e7      	lsls	r7, r4, #31
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	d50b      	bpl.n	8010810 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80107f8:	0040      	lsls	r0, r0, #1
 80107fa:	0052      	lsls	r2, r2, #1
 80107fc:	42a9      	cmp	r1, r5
 80107fe:	d231      	bcs.n	8010864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010800:	180c      	adds	r4, r1, r0
 8010802:	42a1      	cmp	r1, r4
 8010804:	d202      	bcs.n	801080c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8010806:	f821 3b02 	strh.w	r3, [r1], #2
 801080a:	e7fa      	b.n	8010802 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801080c:	4411      	add	r1, r2
 801080e:	e7f5      	b.n	80107fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8010810:	078e      	lsls	r6, r1, #30
 8010812:	d008      	beq.n	8010826 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8010814:	0066      	lsls	r6, r4, #1
 8010816:	460a      	mov	r2, r1
 8010818:	42aa      	cmp	r2, r5
 801081a:	d202      	bcs.n	8010822 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801081c:	8013      	strh	r3, [r2, #0]
 801081e:	4432      	add	r2, r6
 8010820:	e7fa      	b.n	8010818 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8010822:	3102      	adds	r1, #2
 8010824:	3801      	subs	r0, #1
 8010826:	07c2      	lsls	r2, r0, #31
 8010828:	d50b      	bpl.n	8010842 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801082a:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801082e:	3a01      	subs	r2, #1
 8010830:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010834:	0066      	lsls	r6, r4, #1
 8010836:	42aa      	cmp	r2, r5
 8010838:	d202      	bcs.n	8010840 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801083a:	8013      	strh	r3, [r2, #0]
 801083c:	4432      	add	r2, r6
 801083e:	e7fa      	b.n	8010836 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8010840:	3801      	subs	r0, #1
 8010842:	b178      	cbz	r0, 8010864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010844:	1040      	asrs	r0, r0, #1
 8010846:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801084a:	0080      	lsls	r0, r0, #2
 801084c:	0064      	lsls	r4, r4, #1
 801084e:	42a9      	cmp	r1, r5
 8010850:	d208      	bcs.n	8010864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010852:	180e      	adds	r6, r1, r0
 8010854:	460a      	mov	r2, r1
 8010856:	42b2      	cmp	r2, r6
 8010858:	d202      	bcs.n	8010860 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 801085a:	f842 3b04 	str.w	r3, [r2], #4
 801085e:	e7fa      	b.n	8010856 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8010860:	4421      	add	r1, r4
 8010862:	e7f4      	b.n	801084e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8010864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010868:	00fff800 	.word	0x00fff800

0801086c <_ZN8touchgfx8LCD16bppC1Ev>:
 801086c:	2200      	movs	r2, #0
 801086e:	4912      	ldr	r1, [pc, #72]	@ (80108b8 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8010870:	6001      	str	r1, [r0, #0]
 8010872:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8010876:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801087a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801087e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8010882:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8010886:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801088a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801088e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8010892:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8010896:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801089a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801089e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 80108a2:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 80108a6:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 80108aa:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 80108ae:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 80108b2:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 80108b6:	4770      	bx	lr
 80108b8:	0801591c 	.word	0x0801591c

080108bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80108bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c0:	460d      	mov	r5, r1
 80108c2:	b08d      	sub	sp, #52	@ 0x34
 80108c4:	4604      	mov	r4, r0
 80108c6:	6808      	ldr	r0, [r1, #0]
 80108c8:	6849      	ldr	r1, [r1, #4]
 80108ca:	4699      	mov	r9, r3
 80108cc:	ab08      	add	r3, sp, #32
 80108ce:	c303      	stmia	r3!, {r0, r1}
 80108d0:	6810      	ldr	r0, [r2, #0]
 80108d2:	6851      	ldr	r1, [r2, #4]
 80108d4:	ab0a      	add	r3, sp, #40	@ 0x28
 80108d6:	c303      	stmia	r3!, {r0, r1}
 80108d8:	a808      	add	r0, sp, #32
 80108da:	f7fb ff03 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80108de:	4629      	mov	r1, r5
 80108e0:	a80a      	add	r0, sp, #40	@ 0x28
 80108e2:	f7fb ff27 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80108e6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80108ea:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 80108ee:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80108f2:	4d63      	ldr	r5, [pc, #396]	@ (8010a80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80108f4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 80108f8:	6828      	ldr	r0, [r5, #0]
 80108fa:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80108fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010902:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8010906:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801090a:	440a      	add	r2, r1
 801090c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010910:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8010914:	4413      	add	r3, r2
 8010916:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801091a:	6803      	ldr	r3, [r0, #0]
 801091c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801091e:	4798      	blx	r3
 8010920:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010924:	d119      	bne.n	801095a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8010926:	f010 0f20 	tst.w	r0, #32
 801092a:	6828      	ldr	r0, [r5, #0]
 801092c:	d018      	beq.n	8010960 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801092e:	2500      	movs	r5, #0
 8010930:	6801      	ldr	r1, [r0, #0]
 8010932:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8010936:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801093a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801093e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8010942:	9502      	str	r5, [sp, #8]
 8010944:	b2b6      	uxth	r6, r6
 8010946:	fa1f f588 	uxth.w	r5, r8
 801094a:	9601      	str	r6, [sp, #4]
 801094c:	9500      	str	r5, [sp, #0]
 801094e:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8010950:	4621      	mov	r1, r4
 8010952:	47a8      	blx	r5
 8010954:	b00d      	add	sp, #52	@ 0x34
 8010956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801095a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801095e:	e7e4      	b.n	801092a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8010960:	6803      	ldr	r3, [r0, #0]
 8010962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010964:	4798      	blx	r3
 8010966:	4947      	ldr	r1, [pc, #284]	@ (8010a84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8010968:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801096c:	880b      	ldrh	r3, [r1, #0]
 801096e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8010972:	fb03 5202 	mla	r2, r3, r2, r5
 8010976:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801097a:	4373      	muls	r3, r6
 801097c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010980:	9307      	str	r3, [sp, #28]
 8010982:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8010986:	9306      	str	r3, [sp, #24]
 8010988:	468a      	mov	sl, r1
 801098a:	9b07      	ldr	r3, [sp, #28]
 801098c:	4298      	cmp	r0, r3
 801098e:	d270      	bcs.n	8010a72 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8010990:	9b06      	ldr	r3, [sp, #24]
 8010992:	4621      	mov	r1, r4
 8010994:	eb00 0b03 	add.w	fp, r0, r3
 8010998:	4558      	cmp	r0, fp
 801099a:	d25d      	bcs.n	8010a58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801099c:	f851 4b04 	ldr.w	r4, [r1], #4
 80109a0:	0e23      	lsrs	r3, r4, #24
 80109a2:	d014      	beq.n	80109ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80109a4:	2bff      	cmp	r3, #255	@ 0xff
 80109a6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80109aa:	d112      	bne.n	80109d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80109ac:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80109b0:	d10f      	bne.n	80109d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80109b2:	0963      	lsrs	r3, r4, #5
 80109b4:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 80109b8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80109bc:	f02c 0c07 	bic.w	ip, ip, #7
 80109c0:	ea43 0c0c 	orr.w	ip, r3, ip
 80109c4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80109c8:	ea4c 0404 	orr.w	r4, ip, r4
 80109cc:	8004      	strh	r4, [r0, #0]
 80109ce:	3002      	adds	r0, #2
 80109d0:	e7e2      	b.n	8010998 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 80109d2:	fb09 f303 	mul.w	r3, r9, r3
 80109d6:	8807      	ldrh	r7, [r0, #0]
 80109d8:	1c5a      	adds	r2, r3, #1
 80109da:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80109de:	1212      	asrs	r2, r2, #8
 80109e0:	123e      	asrs	r6, r7, #8
 80109e2:	b293      	uxth	r3, r2
 80109e4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80109e8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80109ec:	43d2      	mvns	r2, r2
 80109ee:	b2d2      	uxtb	r2, r2
 80109f0:	10fd      	asrs	r5, r7, #3
 80109f2:	fb1e fe03 	smulbb	lr, lr, r3
 80109f6:	00ff      	lsls	r7, r7, #3
 80109f8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80109fc:	fb06 e602 	mla	r6, r6, r2, lr
 8010a00:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8010a04:	b2ff      	uxtb	r7, r7
 8010a06:	fa5f fc8c 	uxtb.w	ip, ip
 8010a0a:	b2e4      	uxtb	r4, r4
 8010a0c:	b2b6      	uxth	r6, r6
 8010a0e:	fb1c fc03 	smulbb	ip, ip, r3
 8010a12:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8010a16:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8010a1a:	fb14 f403 	smulbb	r4, r4, r3
 8010a1e:	fb05 c502 	mla	r5, r5, r2, ip
 8010a22:	f106 0e01 	add.w	lr, r6, #1
 8010a26:	fb07 4702 	mla	r7, r7, r2, r4
 8010a2a:	b2ad      	uxth	r5, r5
 8010a2c:	b2bf      	uxth	r7, r7
 8010a2e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8010a32:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8010a36:	f105 0c01 	add.w	ip, r5, #1
 8010a3a:	1c7e      	adds	r6, r7, #1
 8010a3c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8010a40:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8010a44:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8010a48:	096d      	lsrs	r5, r5, #5
 8010a4a:	ea46 060e 	orr.w	r6, r6, lr
 8010a4e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8010a52:	432e      	orrs	r6, r5
 8010a54:	8006      	strh	r6, [r0, #0]
 8010a56:	e7ba      	b.n	80109ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8010a58:	f8ba 3000 	ldrh.w	r3, [sl]
 8010a5c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8010a60:	eba3 0308 	sub.w	r3, r3, r8
 8010a64:	eba4 0408 	sub.w	r4, r4, r8
 8010a68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010a6c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8010a70:	e78b      	b.n	801098a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8010a72:	4b03      	ldr	r3, [pc, #12]	@ (8010a80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8010a74:	6818      	ldr	r0, [r3, #0]
 8010a76:	6803      	ldr	r3, [r0, #0]
 8010a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a7a:	4798      	blx	r3
 8010a7c:	e76a      	b.n	8010954 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8010a7e:	bf00      	nop
 8010a80:	20015430 	.word	0x20015430
 8010a84:	2001542a 	.word	0x2001542a

08010a88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8010a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a8c:	460c      	mov	r4, r1
 8010a8e:	b085      	sub	sp, #20
 8010a90:	6810      	ldr	r0, [r2, #0]
 8010a92:	6851      	ldr	r1, [r2, #4]
 8010a94:	466d      	mov	r5, sp
 8010a96:	c503      	stmia	r5!, {r0, r1}
 8010a98:	6818      	ldr	r0, [r3, #0]
 8010a9a:	6859      	ldr	r1, [r3, #4]
 8010a9c:	4616      	mov	r6, r2
 8010a9e:	c503      	stmia	r5!, {r0, r1}
 8010aa0:	4668      	mov	r0, sp
 8010aa2:	f7fb fe1f 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010aa6:	4631      	mov	r1, r6
 8010aa8:	a802      	add	r0, sp, #8
 8010aaa:	f7fb fe43 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010aae:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8010ab2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8010ab6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8010aba:	4d28      	ldr	r5, [pc, #160]	@ (8010b5c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8010abc:	4e28      	ldr	r6, [pc, #160]	@ (8010b60 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8010abe:	6828      	ldr	r0, [r5, #0]
 8010ac0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8010ac4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8010ac8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010acc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8010ad0:	f8bd 1000 	ldrh.w	r1, [sp]
 8010ad4:	440a      	add	r2, r1
 8010ad6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8010ada:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010ade:	4413      	add	r3, r2
 8010ae0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010ae4:	6803      	ldr	r3, [r0, #0]
 8010ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ae8:	4798      	blx	r3
 8010aea:	8833      	ldrh	r3, [r6, #0]
 8010aec:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8010af0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010af4:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8010b64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8010af8:	fb03 1202 	mla	r2, r3, r2, r1
 8010afc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010b00:	fb08 f303 	mul.w	r3, r8, r3
 8010b04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010b08:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8010b0c:	4298      	cmp	r0, r3
 8010b0e:	d21d      	bcs.n	8010b4c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8010b10:	eb00 080c 	add.w	r8, r0, ip
 8010b14:	4540      	cmp	r0, r8
 8010b16:	d20f      	bcs.n	8010b38 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8010b18:	f854 1b04 	ldr.w	r1, [r4], #4
 8010b1c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8010b20:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8010b24:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8010b28:	ea42 0209 	orr.w	r2, r2, r9
 8010b2c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8010b30:	430a      	orrs	r2, r1
 8010b32:	f820 2b02 	strh.w	r2, [r0], #2
 8010b36:	e7ed      	b.n	8010b14 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8010b38:	8832      	ldrh	r2, [r6, #0]
 8010b3a:	1bd2      	subs	r2, r2, r7
 8010b3c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010b40:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010b44:	1bd2      	subs	r2, r2, r7
 8010b46:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8010b4a:	e7df      	b.n	8010b0c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8010b4c:	6828      	ldr	r0, [r5, #0]
 8010b4e:	6803      	ldr	r3, [r0, #0]
 8010b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b52:	4798      	blx	r3
 8010b54:	b005      	add	sp, #20
 8010b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b5a:	bf00      	nop
 8010b5c:	20015430 	.word	0x20015430
 8010b60:	2001542a 	.word	0x2001542a
 8010b64:	fffff800 	.word	0xfffff800

08010b68 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8010b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b6c:	460e      	mov	r6, r1
 8010b6e:	b08e      	sub	sp, #56	@ 0x38
 8010b70:	4604      	mov	r4, r0
 8010b72:	6808      	ldr	r0, [r1, #0]
 8010b74:	6849      	ldr	r1, [r1, #4]
 8010b76:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8010d50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8010b7a:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8010d54 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8010b7e:	461d      	mov	r5, r3
 8010b80:	ab0a      	add	r3, sp, #40	@ 0x28
 8010b82:	c303      	stmia	r3!, {r0, r1}
 8010b84:	6810      	ldr	r0, [r2, #0]
 8010b86:	6851      	ldr	r1, [r2, #4]
 8010b88:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b8a:	c303      	stmia	r3!, {r0, r1}
 8010b8c:	a80a      	add	r0, sp, #40	@ 0x28
 8010b8e:	f7fb fda9 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010b92:	4631      	mov	r1, r6
 8010b94:	a80c      	add	r0, sp, #48	@ 0x30
 8010b96:	f7fb fdcd 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010b9a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8010b9e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8010ba2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8010ba6:	f8d8 0000 	ldr.w	r0, [r8]
 8010baa:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8010bae:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8010bb2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010bb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010bba:	440c      	add	r4, r1
 8010bbc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8010bc0:	440a      	add	r2, r1
 8010bc2:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8010bc6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8010bca:	4413      	add	r3, r2
 8010bcc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010bd0:	6803      	ldr	r3, [r0, #0]
 8010bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bd4:	4798      	blx	r3
 8010bd6:	2dff      	cmp	r5, #255	@ 0xff
 8010bd8:	d124      	bne.n	8010c24 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8010bda:	f010 0f01 	tst.w	r0, #1
 8010bde:	f8d8 0000 	ldr.w	r0, [r8]
 8010be2:	d022      	beq.n	8010c2a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8010be4:	2100      	movs	r1, #0
 8010be6:	f8d0 c000 	ldr.w	ip, [r0]
 8010bea:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8010bee:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8010bf2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8010bf6:	f04f 0e01 	mov.w	lr, #1
 8010bfa:	f8cd e018 	str.w	lr, [sp, #24]
 8010bfe:	f8b9 e000 	ldrh.w	lr, [r9]
 8010c02:	9503      	str	r5, [sp, #12]
 8010c04:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8010c08:	b2b6      	uxth	r6, r6
 8010c0a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8010c0e:	9102      	str	r1, [sp, #8]
 8010c10:	b2bf      	uxth	r7, r7
 8010c12:	9601      	str	r6, [sp, #4]
 8010c14:	9700      	str	r7, [sp, #0]
 8010c16:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8010c1a:	4621      	mov	r1, r4
 8010c1c:	47a8      	blx	r5
 8010c1e:	b00e      	add	sp, #56	@ 0x38
 8010c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c24:	f010 0f04 	tst.w	r0, #4
 8010c28:	e7d9      	b.n	8010bde <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8010c2a:	6803      	ldr	r3, [r0, #0]
 8010c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c2e:	4798      	blx	r3
 8010c30:	f8b9 3000 	ldrh.w	r3, [r9]
 8010c34:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8010c38:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8010c3c:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8010c40:	fb03 1202 	mla	r2, r3, r2, r1
 8010c44:	ebac 0c07 	sub.w	ip, ip, r7
 8010c48:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010c4c:	435e      	muls	r6, r3
 8010c4e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8010c52:	2dff      	cmp	r5, #255	@ 0xff
 8010c54:	eba3 0707 	sub.w	r7, r3, r7
 8010c58:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010c5c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8010c60:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8010c64:	d049      	beq.n	8010cfa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8010c66:	43eb      	mvns	r3, r5
 8010c68:	fa1f f985 	uxth.w	r9, r5
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	42b0      	cmp	r0, r6
 8010c70:	d266      	bcs.n	8010d40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8010c72:	eb00 0a0e 	add.w	sl, r0, lr
 8010c76:	4550      	cmp	r0, sl
 8010c78:	4621      	mov	r1, r4
 8010c7a:	f104 0403 	add.w	r4, r4, #3
 8010c7e:	d25b      	bcs.n	8010d38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8010c80:	8802      	ldrh	r2, [r0, #0]
 8010c82:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8010c86:	ea4f 2822 	mov.w	r8, r2, asr #8
 8010c8a:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8010c8e:	fb11 f109 	smulbb	r1, r1, r9
 8010c92:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8010c96:	10d5      	asrs	r5, r2, #3
 8010c98:	fb08 1803 	mla	r8, r8, r3, r1
 8010c9c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8010ca0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8010ca4:	fb11 f109 	smulbb	r1, r1, r9
 8010ca8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8010cac:	fb05 1503 	mla	r5, r5, r3, r1
 8010cb0:	00d2      	lsls	r2, r2, #3
 8010cb2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010cb6:	b2d2      	uxtb	r2, r2
 8010cb8:	fb11 f109 	smulbb	r1, r1, r9
 8010cbc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8010cc0:	fa1f f888 	uxth.w	r8, r8
 8010cc4:	fb02 1203 	mla	r2, r2, r3, r1
 8010cc8:	b292      	uxth	r2, r2
 8010cca:	f108 0101 	add.w	r1, r8, #1
 8010cce:	b2ad      	uxth	r5, r5
 8010cd0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8010cd4:	1c51      	adds	r1, r2, #1
 8010cd6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010cda:	1c69      	adds	r1, r5, #1
 8010cdc:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8010ce0:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8010ce4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8010ce8:	096d      	lsrs	r5, r5, #5
 8010cea:	ea42 0208 	orr.w	r2, r2, r8
 8010cee:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8010cf2:	432a      	orrs	r2, r5
 8010cf4:	f820 2b02 	strh.w	r2, [r0], #2
 8010cf8:	e7bd      	b.n	8010c76 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8010cfa:	4a14      	ldr	r2, [pc, #80]	@ (8010d4c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8010cfc:	42b0      	cmp	r0, r6
 8010cfe:	d21f      	bcs.n	8010d40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8010d00:	eb00 050e 	add.w	r5, r0, lr
 8010d04:	42a8      	cmp	r0, r5
 8010d06:	4621      	mov	r1, r4
 8010d08:	f104 0403 	add.w	r4, r4, #3
 8010d0c:	d210      	bcs.n	8010d30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8010d0e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8010d12:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8010d16:	00db      	lsls	r3, r3, #3
 8010d18:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8010d1c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010d20:	430b      	orrs	r3, r1
 8010d22:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010d26:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8010d2a:	f820 3b02 	strh.w	r3, [r0], #2
 8010d2e:	e7e9      	b.n	8010d04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8010d30:	4438      	add	r0, r7
 8010d32:	eb01 040c 	add.w	r4, r1, ip
 8010d36:	e7e1      	b.n	8010cfc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8010d38:	4438      	add	r0, r7
 8010d3a:	eb01 040c 	add.w	r4, r1, ip
 8010d3e:	e796      	b.n	8010c6e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8010d40:	4b03      	ldr	r3, [pc, #12]	@ (8010d50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8010d42:	6818      	ldr	r0, [r3, #0]
 8010d44:	6803      	ldr	r3, [r0, #0]
 8010d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d48:	4798      	blx	r3
 8010d4a:	e768      	b.n	8010c1e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8010d4c:	fffff800 	.word	0xfffff800
 8010d50:	20015430 	.word	0x20015430
 8010d54:	2001542a 	.word	0x2001542a

08010d58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8010d58:	b4f0      	push	{r4, r5, r6, r7}
 8010d5a:	4616      	mov	r6, r2
 8010d5c:	2e01      	cmp	r6, #1
 8010d5e:	461c      	mov	r4, r3
 8010d60:	460d      	mov	r5, r1
 8010d62:	9a04      	ldr	r2, [sp, #16]
 8010d64:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010d68:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8010d6c:	d012      	beq.n	8010d94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8010d6e:	d303      	bcc.n	8010d78 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8010d70:	2e02      	cmp	r6, #2
 8010d72:	d00a      	beq.n	8010d8a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8010d74:	bcf0      	pop	{r4, r5, r6, r7}
 8010d76:	4770      	bx	lr
 8010d78:	6805      	ldr	r5, [r0, #0]
 8010d7a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8010d7e:	68ed      	ldr	r5, [r5, #12]
 8010d80:	4613      	mov	r3, r2
 8010d82:	46ac      	mov	ip, r5
 8010d84:	4622      	mov	r2, r4
 8010d86:	bcf0      	pop	{r4, r5, r6, r7}
 8010d88:	4760      	bx	ip
 8010d8a:	4621      	mov	r1, r4
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	bcf0      	pop	{r4, r5, r6, r7}
 8010d90:	f7ff bd94 	b.w	80108bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8010d94:	4621      	mov	r1, r4
 8010d96:	4628      	mov	r0, r5
 8010d98:	bcf0      	pop	{r4, r5, r6, r7}
 8010d9a:	f7ff bee5 	b.w	8010b68 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08010da0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8010da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da4:	4681      	mov	r9, r0
 8010da6:	b093      	sub	sp, #76	@ 0x4c
 8010da8:	6810      	ldr	r0, [r2, #0]
 8010daa:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8010dae:	4f6d      	ldr	r7, [pc, #436]	@ (8010f64 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8010db0:	4688      	mov	r8, r1
 8010db2:	6851      	ldr	r1, [r2, #4]
 8010db4:	ac0e      	add	r4, sp, #56	@ 0x38
 8010db6:	c403      	stmia	r4!, {r0, r1}
 8010db8:	6818      	ldr	r0, [r3, #0]
 8010dba:	6859      	ldr	r1, [r3, #4]
 8010dbc:	ac10      	add	r4, sp, #64	@ 0x40
 8010dbe:	4616      	mov	r6, r2
 8010dc0:	c403      	stmia	r4!, {r0, r1}
 8010dc2:	a80e      	add	r0, sp, #56	@ 0x38
 8010dc4:	f7fb fc8e 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010dc8:	4631      	mov	r1, r6
 8010dca:	a810      	add	r0, sp, #64	@ 0x40
 8010dcc:	f7fb fcb2 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010dd0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8010dd4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8010dd8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8010ddc:	4e62      	ldr	r6, [pc, #392]	@ (8010f68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8010dde:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8010de2:	6830      	ldr	r0, [r6, #0]
 8010de4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8010de8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010dec:	4489      	add	r9, r1
 8010dee:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8010df2:	440a      	add	r2, r1
 8010df4:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010df8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8010dfc:	4413      	add	r3, r2
 8010dfe:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8010e02:	6803      	ldr	r3, [r0, #0]
 8010e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e06:	4798      	blx	r3
 8010e08:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8010e0c:	6830      	ldr	r0, [r6, #0]
 8010e0e:	d01d      	beq.n	8010e4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8010e10:	2200      	movs	r2, #0
 8010e12:	6801      	ldr	r1, [r0, #0]
 8010e14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010e18:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8010e1c:	220b      	movs	r2, #11
 8010e1e:	9207      	str	r2, [sp, #28]
 8010e20:	883a      	ldrh	r2, [r7, #0]
 8010e22:	9206      	str	r2, [sp, #24]
 8010e24:	2201      	movs	r2, #1
 8010e26:	e9cd a204 	strd	sl, r2, [sp, #16]
 8010e2a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8010e2e:	9203      	str	r2, [sp, #12]
 8010e30:	b2a4      	uxth	r4, r4
 8010e32:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010e36:	9200      	str	r2, [sp, #0]
 8010e38:	b2ad      	uxth	r5, r5
 8010e3a:	9502      	str	r5, [sp, #8]
 8010e3c:	9401      	str	r4, [sp, #4]
 8010e3e:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8010e40:	4642      	mov	r2, r8
 8010e42:	4649      	mov	r1, r9
 8010e44:	47a0      	blx	r4
 8010e46:	b013      	add	sp, #76	@ 0x4c
 8010e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4c:	6803      	ldr	r3, [r0, #0]
 8010e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e50:	4798      	blx	r3
 8010e52:	883b      	ldrh	r3, [r7, #0]
 8010e54:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8010e58:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8010e5c:	fb03 1202 	mla	r2, r3, r2, r1
 8010e60:	435d      	muls	r5, r3
 8010e62:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010e66:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8010e6a:	920c      	str	r2, [sp, #48]	@ 0x30
 8010e6c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8010e70:	1b12      	subs	r2, r2, r4
 8010e72:	920d      	str	r2, [sp, #52]	@ 0x34
 8010e74:	0062      	lsls	r2, r4, #1
 8010e76:	1b1c      	subs	r4, r3, r4
 8010e78:	0063      	lsls	r3, r4, #1
 8010e7a:	920a      	str	r2, [sp, #40]	@ 0x28
 8010e7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e7e:	f04f 0e04 	mov.w	lr, #4
 8010e82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e84:	4298      	cmp	r0, r3
 8010e86:	d266      	bcs.n	8010f56 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8010e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e8a:	eb00 0b03 	add.w	fp, r0, r3
 8010e8e:	4558      	cmp	r0, fp
 8010e90:	d25c      	bcs.n	8010f4c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8010e92:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010e96:	fb1e e303 	smlabb	r3, lr, r3, lr
 8010e9a:	f858 2003 	ldr.w	r2, [r8, r3]
 8010e9e:	0e11      	lsrs	r1, r2, #24
 8010ea0:	d012      	beq.n	8010ec8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8010ea2:	29ff      	cmp	r1, #255	@ 0xff
 8010ea4:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8010ea8:	d110      	bne.n	8010ecc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8010eaa:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8010eae:	d10d      	bne.n	8010ecc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8010eb0:	0953      	lsrs	r3, r2, #5
 8010eb2:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8010eb6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010eba:	f027 0707 	bic.w	r7, r7, #7
 8010ebe:	431f      	orrs	r7, r3
 8010ec0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8010ec4:	433a      	orrs	r2, r7
 8010ec6:	8002      	strh	r2, [r0, #0]
 8010ec8:	3002      	adds	r0, #2
 8010eca:	e7e0      	b.n	8010e8e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8010ecc:	fb0a f101 	mul.w	r1, sl, r1
 8010ed0:	8806      	ldrh	r6, [r0, #0]
 8010ed2:	1c4b      	adds	r3, r1, #1
 8010ed4:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8010ed8:	1235      	asrs	r5, r6, #8
 8010eda:	10f4      	asrs	r4, r6, #3
 8010edc:	121b      	asrs	r3, r3, #8
 8010ede:	00f6      	lsls	r6, r6, #3
 8010ee0:	b299      	uxth	r1, r3
 8010ee2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010ee6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8010eea:	b2f6      	uxtb	r6, r6
 8010eec:	43db      	mvns	r3, r3
 8010eee:	b2d2      	uxtb	r2, r2
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	fb1c fc01 	smulbb	ip, ip, r1
 8010ef6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8010efa:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8010efe:	fb12 f201 	smulbb	r2, r2, r1
 8010f02:	fb05 c503 	mla	r5, r5, r3, ip
 8010f06:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8010f0a:	b2ff      	uxtb	r7, r7
 8010f0c:	fb06 2203 	mla	r2, r6, r3, r2
 8010f10:	b2ad      	uxth	r5, r5
 8010f12:	fb17 f701 	smulbb	r7, r7, r1
 8010f16:	b292      	uxth	r2, r2
 8010f18:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8010f1c:	fb04 7403 	mla	r4, r4, r3, r7
 8010f20:	f105 0c01 	add.w	ip, r5, #1
 8010f24:	1c57      	adds	r7, r2, #1
 8010f26:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8010f2a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8010f2e:	b2a4      	uxth	r4, r4
 8010f30:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8010f34:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8010f38:	433d      	orrs	r5, r7
 8010f3a:	1c67      	adds	r7, r4, #1
 8010f3c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8010f40:	0964      	lsrs	r4, r4, #5
 8010f42:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8010f46:	4325      	orrs	r5, r4
 8010f48:	8005      	strh	r5, [r0, #0]
 8010f4a:	e7bd      	b.n	8010ec8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8010f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f4e:	4418      	add	r0, r3
 8010f50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f52:	4499      	add	r9, r3
 8010f54:	e795      	b.n	8010e82 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8010f56:	4b04      	ldr	r3, [pc, #16]	@ (8010f68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8010f58:	6818      	ldr	r0, [r3, #0]
 8010f5a:	6803      	ldr	r3, [r0, #0]
 8010f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f5e:	4798      	blx	r3
 8010f60:	e771      	b.n	8010e46 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8010f62:	bf00      	nop
 8010f64:	2001542a 	.word	0x2001542a
 8010f68:	20015430 	.word	0x20015430

08010f6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8010f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f70:	b087      	sub	sp, #28
 8010f72:	4680      	mov	r8, r0
 8010f74:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 8010f78:	460d      	mov	r5, r1
 8010f7a:	4614      	mov	r4, r2
 8010f7c:	2e00      	cmp	r6, #0
 8010f7e:	f000 80b9 	beq.w	80110f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8010f82:	6810      	ldr	r0, [r2, #0]
 8010f84:	6851      	ldr	r1, [r2, #4]
 8010f86:	af02      	add	r7, sp, #8
 8010f88:	c703      	stmia	r7!, {r0, r1}
 8010f8a:	6818      	ldr	r0, [r3, #0]
 8010f8c:	6859      	ldr	r1, [r3, #4]
 8010f8e:	af04      	add	r7, sp, #16
 8010f90:	c703      	stmia	r7!, {r0, r1}
 8010f92:	a802      	add	r0, sp, #8
 8010f94:	f7fb fba6 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010f98:	4621      	mov	r1, r4
 8010f9a:	a804      	add	r0, sp, #16
 8010f9c:	f7fb fbca 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010fa0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8010fa4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8010fa8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8010fac:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8010fb0:	fb14 2103 	smlabb	r1, r4, r3, r2
 8010fb4:	eb08 0401 	add.w	r4, r8, r1
 8010fb8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8010fbc:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8010fc0:	440a      	add	r2, r1
 8010fc2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8010fc6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010fca:	4413      	add	r3, r2
 8010fcc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80110fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8010fd2:	6818      	ldr	r0, [r3, #0]
 8010fd4:	6803      	ldr	r3, [r0, #0]
 8010fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fd8:	4798      	blx	r3
 8010fda:	4b49      	ldr	r3, [pc, #292]	@ (8011100 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8010fdc:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8010fe0:	881a      	ldrh	r2, [r3, #0]
 8010fe2:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8010fe6:	2eff      	cmp	r6, #255	@ 0xff
 8010fe8:	fb02 c101 	mla	r1, r2, r1, ip
 8010fec:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8010ff0:	fb02 f207 	mul.w	r2, r2, r7
 8010ff4:	f105 0104 	add.w	r1, r5, #4
 8010ff8:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8010ffc:	461d      	mov	r5, r3
 8010ffe:	d05a      	beq.n	80110b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8011000:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8011004:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011008:	b2b6      	uxth	r6, r6
 801100a:	fa1f fe8e 	uxth.w	lr, lr
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	4282      	cmp	r2, r0
 8011012:	d96a      	bls.n	80110ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011014:	eb00 0b0a 	add.w	fp, r0, sl
 8011018:	4583      	cmp	fp, r0
 801101a:	d940      	bls.n	801109e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801101c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011020:	8805      	ldrh	r5, [r0, #0]
 8011022:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011026:	122f      	asrs	r7, r5, #8
 8011028:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801102c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011030:	fb17 f70e 	smulbb	r7, r7, lr
 8011034:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8011038:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801103c:	00ed      	lsls	r5, r5, #3
 801103e:	fb0c 7c06 	mla	ip, ip, r6, r7
 8011042:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8011046:	10df      	asrs	r7, r3, #3
 8011048:	b2ed      	uxtb	r5, r5
 801104a:	00db      	lsls	r3, r3, #3
 801104c:	fa1f fc8c 	uxth.w	ip, ip
 8011050:	fb19 f90e 	smulbb	r9, r9, lr
 8011054:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8011058:	b2db      	uxtb	r3, r3
 801105a:	fb15 f50e 	smulbb	r5, r5, lr
 801105e:	fb07 9706 	mla	r7, r7, r6, r9
 8011062:	fb03 5306 	mla	r3, r3, r6, r5
 8011066:	f10c 0901 	add.w	r9, ip, #1
 801106a:	b29b      	uxth	r3, r3
 801106c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8011070:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8011074:	f103 0c01 	add.w	ip, r3, #1
 8011078:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801107c:	b2bf      	uxth	r7, r7
 801107e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8011082:	ea4c 0c09 	orr.w	ip, ip, r9
 8011086:	f107 0901 	add.w	r9, r7, #1
 801108a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801108e:	097f      	lsrs	r7, r7, #5
 8011090:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8011094:	ea4c 0c07 	orr.w	ip, ip, r7
 8011098:	f820 cb02 	strh.w	ip, [r0], #2
 801109c:	e7bc      	b.n	8011018 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801109e:	9b01      	ldr	r3, [sp, #4]
 80110a0:	881b      	ldrh	r3, [r3, #0]
 80110a2:	eba3 0308 	sub.w	r3, r3, r8
 80110a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80110aa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80110ae:	eba3 0308 	sub.w	r3, r3, r8
 80110b2:	441c      	add	r4, r3
 80110b4:	e7ac      	b.n	8011010 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80110b6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80110ba:	4282      	cmp	r2, r0
 80110bc:	d915      	bls.n	80110ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80110be:	eb00 060a 	add.w	r6, r0, sl
 80110c2:	4286      	cmp	r6, r0
 80110c4:	d906      	bls.n	80110d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80110c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80110ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80110ce:	f820 3b02 	strh.w	r3, [r0], #2
 80110d2:	e7f6      	b.n	80110c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 80110d4:	882b      	ldrh	r3, [r5, #0]
 80110d6:	eba3 0308 	sub.w	r3, r3, r8
 80110da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80110de:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80110e2:	eba3 0308 	sub.w	r3, r3, r8
 80110e6:	441c      	add	r4, r3
 80110e8:	e7e7      	b.n	80110ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 80110ea:	4b04      	ldr	r3, [pc, #16]	@ (80110fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80110ec:	6818      	ldr	r0, [r3, #0]
 80110ee:	6803      	ldr	r3, [r0, #0]
 80110f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110f2:	4798      	blx	r3
 80110f4:	b007      	add	sp, #28
 80110f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fa:	bf00      	nop
 80110fc:	20015430 	.word	0x20015430
 8011100:	2001542a 	.word	0x2001542a

08011104 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011108:	b091      	sub	sp, #68	@ 0x44
 801110a:	4680      	mov	r8, r0
 801110c:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8011110:	460f      	mov	r7, r1
 8011112:	4614      	mov	r4, r2
 8011114:	2d00      	cmp	r5, #0
 8011116:	d051      	beq.n	80111bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8011118:	6810      	ldr	r0, [r2, #0]
 801111a:	6851      	ldr	r1, [r2, #4]
 801111c:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8011320 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8011120:	ae0c      	add	r6, sp, #48	@ 0x30
 8011122:	c603      	stmia	r6!, {r0, r1}
 8011124:	6818      	ldr	r0, [r3, #0]
 8011126:	6859      	ldr	r1, [r3, #4]
 8011128:	ae0e      	add	r6, sp, #56	@ 0x38
 801112a:	c603      	stmia	r6!, {r0, r1}
 801112c:	a80c      	add	r0, sp, #48	@ 0x30
 801112e:	f7fb fad9 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011132:	4621      	mov	r1, r4
 8011134:	a80e      	add	r0, sp, #56	@ 0x38
 8011136:	f7fb fafd 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801113a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801113e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011142:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8011146:	f8d9 0000 	ldr.w	r0, [r9]
 801114a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801114e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8011152:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011156:	eb08 0401 	add.w	r4, r8, r1
 801115a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801115e:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8011324 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8011162:	440a      	add	r2, r1
 8011164:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8011168:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801116c:	4413      	add	r3, r2
 801116e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8011172:	6803      	ldr	r3, [r0, #0]
 8011174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011176:	4798      	blx	r3
 8011178:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801117c:	f8d9 0000 	ldr.w	r0, [r9]
 8011180:	d01f      	beq.n	80111c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8011182:	2200      	movs	r2, #0
 8011184:	6801      	ldr	r1, [r0, #0]
 8011186:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801118a:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801118e:	220b      	movs	r2, #11
 8011190:	9207      	str	r2, [sp, #28]
 8011192:	f8b8 2000 	ldrh.w	r2, [r8]
 8011196:	9206      	str	r2, [sp, #24]
 8011198:	2201      	movs	r2, #1
 801119a:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801119e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80111a2:	9203      	str	r2, [sp, #12]
 80111a4:	fa1f f28a 	uxth.w	r2, sl
 80111a8:	9202      	str	r2, [sp, #8]
 80111aa:	b2b6      	uxth	r6, r6
 80111ac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80111b0:	9200      	str	r2, [sp, #0]
 80111b2:	9601      	str	r6, [sp, #4]
 80111b4:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 80111b6:	463a      	mov	r2, r7
 80111b8:	4621      	mov	r1, r4
 80111ba:	47a8      	blx	r5
 80111bc:	b011      	add	sp, #68	@ 0x44
 80111be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c2:	6803      	ldr	r3, [r0, #0]
 80111c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111c6:	4798      	blx	r3
 80111c8:	f8b8 2000 	ldrh.w	r2, [r8]
 80111cc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80111d0:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80111d4:	2dff      	cmp	r5, #255	@ 0xff
 80111d6:	fb02 1303 	mla	r3, r2, r3, r1
 80111da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80111de:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80111e2:	fb0a fa02 	mul.w	sl, sl, r2
 80111e6:	d062      	beq.n	80112ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80111e8:	ea6f 0c05 	mvn.w	ip, r5
 80111ec:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80111f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80111f2:	b2ad      	uxth	r5, r5
 80111f4:	fa5f fc8c 	uxtb.w	ip, ip
 80111f8:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80111fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111fe:	4298      	cmp	r0, r3
 8011200:	f080 8085 	bcs.w	801130e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011204:	eb00 0b09 	add.w	fp, r0, r9
 8011208:	4558      	cmp	r0, fp
 801120a:	d246      	bcs.n	801129a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801120c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8011210:	2303      	movs	r3, #3
 8011212:	2204      	movs	r2, #4
 8011214:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8011218:	eb07 0a0e 	add.w	sl, r7, lr
 801121c:	8803      	ldrh	r3, [r0, #0]
 801121e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8011222:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011226:	1219      	asrs	r1, r3, #8
 8011228:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801122c:	fb18 f805 	smulbb	r8, r8, r5
 8011230:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8011234:	10da      	asrs	r2, r3, #3
 8011236:	fb01 810c 	mla	r1, r1, ip, r8
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8011240:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8011244:	b2db      	uxtb	r3, r3
 8011246:	fb18 f805 	smulbb	r8, r8, r5
 801124a:	fb1e fe05 	smulbb	lr, lr, r5
 801124e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8011252:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8011256:	b289      	uxth	r1, r1
 8011258:	fb02 820c 	mla	r2, r2, ip, r8
 801125c:	fb03 e30c 	mla	r3, r3, ip, lr
 8011260:	b292      	uxth	r2, r2
 8011262:	b29b      	uxth	r3, r3
 8011264:	f101 0801 	add.w	r8, r1, #1
 8011268:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801126c:	f103 0e01 	add.w	lr, r3, #1
 8011270:	f102 0801 	add.w	r8, r2, #1
 8011274:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8011278:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801127c:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8011280:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8011284:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8011288:	ea4e 0101 	orr.w	r1, lr, r1
 801128c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8011290:	ea41 0108 	orr.w	r1, r1, r8
 8011294:	f820 1b02 	strh.w	r1, [r0], #2
 8011298:	e7b6      	b.n	8011208 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801129a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801129c:	881b      	ldrh	r3, [r3, #0]
 801129e:	1b9b      	subs	r3, r3, r6
 80112a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80112a4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80112a8:	1b9b      	subs	r3, r3, r6
 80112aa:	441c      	add	r4, r3
 80112ac:	e7a6      	b.n	80111fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80112ae:	491b      	ldr	r1, [pc, #108]	@ (801131c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80112b0:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80112b4:	2203      	movs	r2, #3
 80112b6:	2504      	movs	r5, #4
 80112b8:	4550      	cmp	r0, sl
 80112ba:	d228      	bcs.n	801130e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80112bc:	eb00 0c09 	add.w	ip, r0, r9
 80112c0:	4560      	cmp	r0, ip
 80112c2:	4623      	mov	r3, r4
 80112c4:	d219      	bcs.n	80112fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80112c6:	f893 e000 	ldrb.w	lr, [r3]
 80112ca:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80112ce:	eb07 0b0e 	add.w	fp, r7, lr
 80112d2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80112d6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80112da:	f89b b001 	ldrb.w	fp, [fp, #1]
 80112de:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80112e2:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80112e6:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80112ea:	ea43 030b 	orr.w	r3, r3, fp
 80112ee:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80112f2:	3401      	adds	r4, #1
 80112f4:	f820 3b02 	strh.w	r3, [r0], #2
 80112f8:	e7e2      	b.n	80112c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 80112fa:	f8b8 3000 	ldrh.w	r3, [r8]
 80112fe:	1b9b      	subs	r3, r3, r6
 8011300:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011304:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011308:	1b9b      	subs	r3, r3, r6
 801130a:	441c      	add	r4, r3
 801130c:	e7d4      	b.n	80112b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801130e:	4b04      	ldr	r3, [pc, #16]	@ (8011320 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8011310:	6818      	ldr	r0, [r3, #0]
 8011312:	6803      	ldr	r3, [r0, #0]
 8011314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011316:	4798      	blx	r3
 8011318:	e750      	b.n	80111bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801131a:	bf00      	nop
 801131c:	fffff800 	.word	0xfffff800
 8011320:	20015430 	.word	0x20015430
 8011324:	2001542a 	.word	0x2001542a

08011328 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8011328:	b4f0      	push	{r4, r5, r6, r7}
 801132a:	460c      	mov	r4, r1
 801132c:	4611      	mov	r1, r2
 801132e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8011332:	780f      	ldrb	r7, [r1, #0]
 8011334:	784e      	ldrb	r6, [r1, #1]
 8011336:	2f01      	cmp	r7, #1
 8011338:	461a      	mov	r2, r3
 801133a:	9b04      	ldr	r3, [sp, #16]
 801133c:	d038      	beq.n	80113b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 801133e:	d31f      	bcc.n	8011380 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8011340:	2f02      	cmp	r7, #2
 8011342:	d14d      	bne.n	80113e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011344:	2e03      	cmp	r6, #3
 8011346:	d84b      	bhi.n	80113e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011348:	e8df f006 	tbb	[pc, r6]
 801134c:	17140702 	.word	0x17140702
 8011350:	9504      	str	r5, [sp, #16]
 8011352:	4620      	mov	r0, r4
 8011354:	bcf0      	pop	{r4, r5, r6, r7}
 8011356:	f7ff be09 	b.w	8010f6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801135a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801135c:	2800      	cmp	r0, #0
 801135e:	d03f      	beq.n	80113e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011360:	6806      	ldr	r6, [r0, #0]
 8011362:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011366:	68b5      	ldr	r5, [r6, #8]
 8011368:	4613      	mov	r3, r2
 801136a:	46ac      	mov	ip, r5
 801136c:	460a      	mov	r2, r1
 801136e:	4621      	mov	r1, r4
 8011370:	bcf0      	pop	{r4, r5, r6, r7}
 8011372:	4760      	bx	ip
 8011374:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8011378:	e7f0      	b.n	801135c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801137a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801137e:	e7ed      	b.n	801135c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8011380:	2e03      	cmp	r6, #3
 8011382:	d82d      	bhi.n	80113e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011384:	e8df f006 	tbb	[pc, r6]
 8011388:	110e0702 	.word	0x110e0702
 801138c:	9504      	str	r5, [sp, #16]
 801138e:	4620      	mov	r0, r4
 8011390:	bcf0      	pop	{r4, r5, r6, r7}
 8011392:	f7ff bd05 	b.w	8010da0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8011396:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011398:	b310      	cbz	r0, 80113e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801139a:	6806      	ldr	r6, [r0, #0]
 801139c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80113a0:	68f5      	ldr	r5, [r6, #12]
 80113a2:	e7e1      	b.n	8011368 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80113a4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80113a8:	e7f6      	b.n	8011398 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80113aa:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80113ae:	e7f3      	b.n	8011398 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80113b0:	2e03      	cmp	r6, #3
 80113b2:	d815      	bhi.n	80113e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80113b4:	e8df f006 	tbb	[pc, r6]
 80113b8:	110e0702 	.word	0x110e0702
 80113bc:	9504      	str	r5, [sp, #16]
 80113be:	4620      	mov	r0, r4
 80113c0:	bcf0      	pop	{r4, r5, r6, r7}
 80113c2:	f7ff be9f 	b.w	8011104 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80113c6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80113c8:	b150      	cbz	r0, 80113e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80113ca:	6806      	ldr	r6, [r0, #0]
 80113cc:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80113d0:	6935      	ldr	r5, [r6, #16]
 80113d2:	e7c9      	b.n	8011368 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80113d4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80113d8:	e7f6      	b.n	80113c8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 80113da:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80113de:	e7f3      	b.n	80113c8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 80113e0:	bcf0      	pop	{r4, r5, r6, r7}
 80113e2:	4770      	bx	lr

080113e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80113e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113e8:	4604      	mov	r4, r0
 80113ea:	b087      	sub	sp, #28
 80113ec:	6810      	ldr	r0, [r2, #0]
 80113ee:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 80113f2:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 801162c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80113f6:	460e      	mov	r6, r1
 80113f8:	6851      	ldr	r1, [r2, #4]
 80113fa:	ad02      	add	r5, sp, #8
 80113fc:	c503      	stmia	r5!, {r0, r1}
 80113fe:	6818      	ldr	r0, [r3, #0]
 8011400:	6859      	ldr	r1, [r3, #4]
 8011402:	ad04      	add	r5, sp, #16
 8011404:	4617      	mov	r7, r2
 8011406:	c503      	stmia	r5!, {r0, r1}
 8011408:	a802      	add	r0, sp, #8
 801140a:	f7fb f96b 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801140e:	4639      	mov	r1, r7
 8011410:	a804      	add	r0, sp, #16
 8011412:	f7fb f98f 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011416:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801141a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801141e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011422:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011426:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801142a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801142e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8011432:	440e      	add	r6, r1
 8011434:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011438:	440a      	add	r2, r1
 801143a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801143e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011442:	4413      	add	r3, r2
 8011444:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011448:	4b77      	ldr	r3, [pc, #476]	@ (8011628 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801144a:	6818      	ldr	r0, [r3, #0]
 801144c:	6803      	ldr	r3, [r0, #0]
 801144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011450:	4798      	blx	r3
 8011452:	f8b9 b000 	ldrh.w	fp, [r9]
 8011456:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801145a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801145e:	fb0b 2303 	mla	r3, fp, r3, r2
 8011462:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011466:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801146a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801146e:	fb05 f50b 	mul.w	r5, r5, fp
 8011472:	9300      	str	r3, [sp, #0]
 8011474:	d069      	beq.n	801154a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8011476:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801147a:	4558      	cmp	r0, fp
 801147c:	f080 80cc 	bcs.w	8011618 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011480:	9b00      	ldr	r3, [sp, #0]
 8011482:	18c3      	adds	r3, r0, r3
 8011484:	9301      	str	r3, [sp, #4]
 8011486:	4631      	mov	r1, r6
 8011488:	9b01      	ldr	r3, [sp, #4]
 801148a:	4298      	cmp	r0, r3
 801148c:	d24f      	bcs.n	801152e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801148e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011492:	2a00      	cmp	r2, #0
 8011494:	d048      	beq.n	8011528 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8011496:	fb0a f202 	mul.w	r2, sl, r2
 801149a:	1c53      	adds	r3, r2, #1
 801149c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80114a0:	121b      	asrs	r3, r3, #8
 80114a2:	d041      	beq.n	8011528 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80114a4:	8802      	ldrh	r2, [r0, #0]
 80114a6:	f8b4 c000 	ldrh.w	ip, [r4]
 80114aa:	b29e      	uxth	r6, r3
 80114ac:	1215      	asrs	r5, r2, #8
 80114ae:	43db      	mvns	r3, r3
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	ea4f 272c 	mov.w	r7, ip, asr #8
 80114b6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80114ba:	fb15 f503 	smulbb	r5, r5, r3
 80114be:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80114c2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80114c6:	00d2      	lsls	r2, r2, #3
 80114c8:	fb07 5706 	mla	r7, r7, r6, r5
 80114cc:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80114d0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80114d4:	b2d2      	uxtb	r2, r2
 80114d6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80114da:	b2bf      	uxth	r7, r7
 80114dc:	fb1e fe03 	smulbb	lr, lr, r3
 80114e0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80114e4:	fa5f fc8c 	uxtb.w	ip, ip
 80114e8:	fb12 f203 	smulbb	r2, r2, r3
 80114ec:	fb05 e506 	mla	r5, r5, r6, lr
 80114f0:	fb0c 2c06 	mla	ip, ip, r6, r2
 80114f4:	f107 0e01 	add.w	lr, r7, #1
 80114f8:	fa1f fc8c 	uxth.w	ip, ip
 80114fc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011500:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8011504:	f10c 0701 	add.w	r7, ip, #1
 8011508:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801150c:	b2ad      	uxth	r5, r5
 801150e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011512:	ea47 070e 	orr.w	r7, r7, lr
 8011516:	f105 0e01 	add.w	lr, r5, #1
 801151a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801151e:	096d      	lsrs	r5, r5, #5
 8011520:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011524:	432f      	orrs	r7, r5
 8011526:	8007      	strh	r7, [r0, #0]
 8011528:	3002      	adds	r0, #2
 801152a:	3402      	adds	r4, #2
 801152c:	e7ac      	b.n	8011488 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801152e:	f8b9 3000 	ldrh.w	r3, [r9]
 8011532:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011536:	eba3 0308 	sub.w	r3, r3, r8
 801153a:	eba6 0608 	sub.w	r6, r6, r8
 801153e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011542:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011546:	440e      	add	r6, r1
 8011548:	e797      	b.n	801147a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801154a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801154e:	42a8      	cmp	r0, r5
 8011550:	d262      	bcs.n	8011618 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011552:	9b00      	ldr	r3, [sp, #0]
 8011554:	4631      	mov	r1, r6
 8011556:	eb00 0b03 	add.w	fp, r0, r3
 801155a:	4558      	cmp	r0, fp
 801155c:	d24e      	bcs.n	80115fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801155e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011562:	b12b      	cbz	r3, 8011570 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8011564:	2bff      	cmp	r3, #255	@ 0xff
 8011566:	f8b4 e000 	ldrh.w	lr, [r4]
 801156a:	d104      	bne.n	8011576 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801156c:	f8a0 e000 	strh.w	lr, [r0]
 8011570:	3002      	adds	r0, #2
 8011572:	3402      	adds	r4, #2
 8011574:	e7f1      	b.n	801155a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8011576:	8802      	ldrh	r2, [r0, #0]
 8011578:	b29f      	uxth	r7, r3
 801157a:	1216      	asrs	r6, r2, #8
 801157c:	43db      	mvns	r3, r3
 801157e:	b2db      	uxtb	r3, r3
 8011580:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8011584:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011588:	fb16 f603 	smulbb	r6, r6, r3
 801158c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8011590:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011594:	00d2      	lsls	r2, r2, #3
 8011596:	fb0c 6c07 	mla	ip, ip, r7, r6
 801159a:	b2d2      	uxtb	r2, r2
 801159c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80115a0:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80115a4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80115a8:	fb1a fa03 	smulbb	sl, sl, r3
 80115ac:	fa1f fc8c 	uxth.w	ip, ip
 80115b0:	fb12 f303 	smulbb	r3, r2, r3
 80115b4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80115b8:	fa5f fe8e 	uxtb.w	lr, lr
 80115bc:	fb06 a607 	mla	r6, r6, r7, sl
 80115c0:	f10c 0201 	add.w	r2, ip, #1
 80115c4:	fb0e 3307 	mla	r3, lr, r7, r3
 80115c8:	b2b6      	uxth	r6, r6
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80115d0:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 80115d4:	f106 0a01 	add.w	sl, r6, #1
 80115d8:	f103 0c01 	add.w	ip, r3, #1
 80115dc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80115e0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80115e4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80115e8:	0976      	lsrs	r6, r6, #5
 80115ea:	ea4c 0c02 	orr.w	ip, ip, r2
 80115ee:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80115f2:	ea4c 0c06 	orr.w	ip, ip, r6
 80115f6:	f8a0 c000 	strh.w	ip, [r0]
 80115fa:	e7b9      	b.n	8011570 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80115fc:	f8b9 3000 	ldrh.w	r3, [r9]
 8011600:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011604:	eba3 0308 	sub.w	r3, r3, r8
 8011608:	eba6 0608 	sub.w	r6, r6, r8
 801160c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011610:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011614:	440e      	add	r6, r1
 8011616:	e79a      	b.n	801154e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8011618:	4b03      	ldr	r3, [pc, #12]	@ (8011628 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801161a:	6818      	ldr	r0, [r3, #0]
 801161c:	6803      	ldr	r3, [r0, #0]
 801161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011620:	4798      	blx	r3
 8011622:	b007      	add	sp, #28
 8011624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011628:	20015430 	.word	0x20015430
 801162c:	2001542a 	.word	0x2001542a

08011630 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	b089      	sub	sp, #36	@ 0x24
 8011636:	4607      	mov	r7, r0
 8011638:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801163c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801163e:	4688      	mov	r8, r1
 8011640:	4692      	mov	sl, r2
 8011642:	4699      	mov	r9, r3
 8011644:	2e00      	cmp	r6, #0
 8011646:	d048      	beq.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011648:	4608      	mov	r0, r1
 801164a:	f7fe fac3 	bl	800fbd4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801164e:	4605      	mov	r5, r0
 8011650:	4640      	mov	r0, r8
 8011652:	f7fe faf3 	bl	800fc3c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011656:	f8ad 000e 	strh.w	r0, [sp, #14]
 801165a:	4640      	mov	r0, r8
 801165c:	f8ad a008 	strh.w	sl, [sp, #8]
 8011660:	f8ad 500c 	strh.w	r5, [sp, #12]
 8011664:	f8ad 900a 	strh.w	r9, [sp, #10]
 8011668:	f7fe fba6 	bl	800fdb8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801166c:	4605      	mov	r5, r0
 801166e:	4640      	mov	r0, r8
 8011670:	f7fe fbd2 	bl	800fe18 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8011674:	4682      	mov	sl, r0
 8011676:	4640      	mov	r0, r8
 8011678:	f7fe fc22 	bl	800fec0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801167c:	2810      	cmp	r0, #16
 801167e:	d82c      	bhi.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011680:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011684:	00ba00ca 	.word	0x00ba00ca
 8011688:	002b0011 	.word	0x002b0011
 801168c:	002b002b 	.word	0x002b002b
 8011690:	002b002b 	.word	0x002b002b
 8011694:	002b002b 	.word	0x002b002b
 8011698:	00c1002b 	.word	0x00c1002b
 801169c:	002b002b 	.word	0x002b002b
 80116a0:	002b0180 	.word	0x002b0180
 80116a4:	0173      	.short	0x0173
 80116a6:	4bbc      	ldr	r3, [pc, #752]	@ (8011998 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 80116a8:	6818      	ldr	r0, [r3, #0]
 80116aa:	6803      	ldr	r3, [r0, #0]
 80116ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116ae:	4798      	blx	r3
 80116b0:	2eff      	cmp	r6, #255	@ 0xff
 80116b2:	d101      	bne.n	80116b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 80116b4:	0683      	lsls	r3, r0, #26
 80116b6:	d506      	bpl.n	80116c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 80116b8:	4633      	mov	r3, r6
 80116ba:	4622      	mov	r2, r4
 80116bc:	a902      	add	r1, sp, #8
 80116be:	4628      	mov	r0, r5
 80116c0:	f7ff f8fc 	bl	80108bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80116c4:	e009      	b.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80116c6:	4640      	mov	r0, r8
 80116c8:	f7fe fb3e 	bl	800fd48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80116cc:	b940      	cbnz	r0, 80116e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 80116ce:	4623      	mov	r3, r4
 80116d0:	aa02      	add	r2, sp, #8
 80116d2:	4629      	mov	r1, r5
 80116d4:	4638      	mov	r0, r7
 80116d6:	f7ff f9d7 	bl	8010a88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80116da:	b009      	add	sp, #36	@ 0x24
 80116dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e0:	f10d 0918 	add.w	r9, sp, #24
 80116e4:	4641      	mov	r1, r8
 80116e6:	4648      	mov	r0, r9
 80116e8:	f7fe fadc 	bl	800fca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80116ec:	e899 0003 	ldmia.w	r9, {r0, r1}
 80116f0:	f10d 0810 	add.w	r8, sp, #16
 80116f4:	e888 0003 	stmia.w	r8, {r0, r1}
 80116f8:	4640      	mov	r0, r8
 80116fa:	4621      	mov	r1, r4
 80116fc:	f7f7 fe74 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 8011700:	4640      	mov	r0, r8
 8011702:	f7f7 feb4 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011706:	2800      	cmp	r0, #0
 8011708:	d1d6      	bne.n	80116b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801170a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801170e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011712:	4293      	cmp	r3, r2
 8011714:	dd12      	ble.n	801173c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8011716:	1a9b      	subs	r3, r3, r2
 8011718:	f9b4 0000 	ldrsh.w	r0, [r4]
 801171c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011720:	f8ad 0018 	strh.w	r0, [sp, #24]
 8011724:	f8ad 201a 	strh.w	r2, [sp, #26]
 8011728:	f8ad 101c 	strh.w	r1, [sp, #28]
 801172c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011730:	464a      	mov	r2, r9
 8011732:	4633      	mov	r3, r6
 8011734:	a902      	add	r1, sp, #8
 8011736:	4628      	mov	r0, r5
 8011738:	f7ff f8c0 	bl	80108bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801173c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011740:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011744:	4293      	cmp	r3, r2
 8011746:	dd12      	ble.n	801176e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8011748:	1a9b      	subs	r3, r3, r2
 801174a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801174e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8011752:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011756:	f8ad 001a 	strh.w	r0, [sp, #26]
 801175a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801175e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011762:	23ff      	movs	r3, #255	@ 0xff
 8011764:	464a      	mov	r2, r9
 8011766:	a902      	add	r1, sp, #8
 8011768:	4628      	mov	r0, r5
 801176a:	f7ff f8a7 	bl	80108bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801176e:	4643      	mov	r3, r8
 8011770:	aa02      	add	r2, sp, #8
 8011772:	4629      	mov	r1, r5
 8011774:	4638      	mov	r0, r7
 8011776:	f7ff f987 	bl	8010a88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801177a:	88a2      	ldrh	r2, [r4, #4]
 801177c:	8823      	ldrh	r3, [r4, #0]
 801177e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8011782:	4413      	add	r3, r2
 8011784:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011788:	440a      	add	r2, r1
 801178a:	b29b      	uxth	r3, r3
 801178c:	b292      	uxth	r2, r2
 801178e:	b211      	sxth	r1, r2
 8011790:	b218      	sxth	r0, r3
 8011792:	4288      	cmp	r0, r1
 8011794:	dd12      	ble.n	80117bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8011796:	1a9b      	subs	r3, r3, r2
 8011798:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801179c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80117a0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80117a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80117a8:	f8ad 001e 	strh.w	r0, [sp, #30]
 80117ac:	23ff      	movs	r3, #255	@ 0xff
 80117ae:	464a      	mov	r2, r9
 80117b0:	a902      	add	r1, sp, #8
 80117b2:	4628      	mov	r0, r5
 80117b4:	f8ad 601a 	strh.w	r6, [sp, #26]
 80117b8:	f7ff f880 	bl	80108bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80117bc:	88e2      	ldrh	r2, [r4, #6]
 80117be:	8863      	ldrh	r3, [r4, #2]
 80117c0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80117c4:	4413      	add	r3, r2
 80117c6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80117ca:	440a      	add	r2, r1
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	b292      	uxth	r2, r2
 80117d0:	b211      	sxth	r1, r2
 80117d2:	b218      	sxth	r0, r3
 80117d4:	4288      	cmp	r0, r1
 80117d6:	dd80      	ble.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80117d8:	1a9b      	subs	r3, r3, r2
 80117da:	f9b4 6000 	ldrsh.w	r6, [r4]
 80117de:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80117e2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80117e6:	f8ad 6018 	strh.w	r6, [sp, #24]
 80117ea:	f8ad 101a 	strh.w	r1, [sp, #26]
 80117ee:	f8ad 001c 	strh.w	r0, [sp, #28]
 80117f2:	23ff      	movs	r3, #255	@ 0xff
 80117f4:	464a      	mov	r2, r9
 80117f6:	e761      	b.n	80116bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 80117f8:	4633      	mov	r3, r6
 80117fa:	4622      	mov	r2, r4
 80117fc:	a902      	add	r1, sp, #8
 80117fe:	4628      	mov	r0, r5
 8011800:	f7ff f9b2 	bl	8010b68 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8011804:	e769      	b.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011806:	e9cd 4600 	strd	r4, r6, [sp]
 801180a:	ab02      	add	r3, sp, #8
 801180c:	4652      	mov	r2, sl
 801180e:	4629      	mov	r1, r5
 8011810:	4638      	mov	r0, r7
 8011812:	f7ff fd89 	bl	8011328 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8011816:	e760      	b.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011818:	4640      	mov	r0, r8
 801181a:	f7fe fa95 	bl	800fd48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801181e:	b948      	cbnz	r0, 8011834 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	e9cd 6000 	strd	r6, r0, [sp]
 8011826:	aa02      	add	r2, sp, #8
 8011828:	68de      	ldr	r6, [r3, #12]
 801182a:	4629      	mov	r1, r5
 801182c:	4623      	mov	r3, r4
 801182e:	4638      	mov	r0, r7
 8011830:	47b0      	blx	r6
 8011832:	e752      	b.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011834:	f10d 0918 	add.w	r9, sp, #24
 8011838:	4641      	mov	r1, r8
 801183a:	4648      	mov	r0, r9
 801183c:	f7fe fa32 	bl	800fca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011840:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011844:	f10d 0810 	add.w	r8, sp, #16
 8011848:	e888 0003 	stmia.w	r8, {r0, r1}
 801184c:	4640      	mov	r0, r8
 801184e:	4621      	mov	r1, r4
 8011850:	f7f7 fdca 	bl	80093e8 <_ZN8touchgfx4RectaNERKS0_>
 8011854:	4640      	mov	r0, r8
 8011856:	f7f7 fe0a 	bl	800946e <_ZNK8touchgfx4Rect7isEmptyEv>
 801185a:	b138      	cbz	r0, 801186c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 801185c:	9600      	str	r6, [sp, #0]
 801185e:	4623      	mov	r3, r4
 8011860:	aa02      	add	r2, sp, #8
 8011862:	4651      	mov	r1, sl
 8011864:	4628      	mov	r0, r5
 8011866:	f7ff fdbd 	bl	80113e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801186a:	e736      	b.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	e9cd 6000 	strd	r6, r0, [sp]
 8011872:	aa02      	add	r2, sp, #8
 8011874:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8011878:	4629      	mov	r1, r5
 801187a:	4643      	mov	r3, r8
 801187c:	4638      	mov	r0, r7
 801187e:	47d8      	blx	fp
 8011880:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011884:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011888:	4293      	cmp	r3, r2
 801188a:	dd13      	ble.n	80118b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 801188c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011890:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011894:	f8ad 0018 	strh.w	r0, [sp, #24]
 8011898:	1a9b      	subs	r3, r3, r2
 801189a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801189e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80118a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80118a6:	9600      	str	r6, [sp, #0]
 80118a8:	464b      	mov	r3, r9
 80118aa:	aa02      	add	r2, sp, #8
 80118ac:	4651      	mov	r1, sl
 80118ae:	4628      	mov	r0, r5
 80118b0:	f7ff fd98 	bl	80113e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80118b4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80118b8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80118bc:	4293      	cmp	r3, r2
 80118be:	dd13      	ble.n	80118e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 80118c0:	1a9b      	subs	r3, r3, r2
 80118c2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80118c6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80118ca:	f8ad 2018 	strh.w	r2, [sp, #24]
 80118ce:	f8ad 001a 	strh.w	r0, [sp, #26]
 80118d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80118d6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80118da:	9600      	str	r6, [sp, #0]
 80118dc:	464b      	mov	r3, r9
 80118de:	aa02      	add	r2, sp, #8
 80118e0:	4651      	mov	r1, sl
 80118e2:	4628      	mov	r0, r5
 80118e4:	f7ff fd7e 	bl	80113e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80118e8:	88a2      	ldrh	r2, [r4, #4]
 80118ea:	8823      	ldrh	r3, [r4, #0]
 80118ec:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80118f0:	4413      	add	r3, r2
 80118f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80118f6:	440a      	add	r2, r1
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	b292      	uxth	r2, r2
 80118fc:	b211      	sxth	r1, r2
 80118fe:	b218      	sxth	r0, r3
 8011900:	4288      	cmp	r0, r1
 8011902:	dd13      	ble.n	801192c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8011904:	1a9b      	subs	r3, r3, r2
 8011906:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801190a:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801190e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8011912:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011916:	f8ad 001e 	strh.w	r0, [sp, #30]
 801191a:	9600      	str	r6, [sp, #0]
 801191c:	464b      	mov	r3, r9
 801191e:	aa02      	add	r2, sp, #8
 8011920:	4651      	mov	r1, sl
 8011922:	4628      	mov	r0, r5
 8011924:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011928:	f7ff fd5c 	bl	80113e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801192c:	88e2      	ldrh	r2, [r4, #6]
 801192e:	8863      	ldrh	r3, [r4, #2]
 8011930:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8011934:	4413      	add	r3, r2
 8011936:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801193a:	440a      	add	r2, r1
 801193c:	b29b      	uxth	r3, r3
 801193e:	b292      	uxth	r2, r2
 8011940:	b211      	sxth	r1, r2
 8011942:	b218      	sxth	r0, r3
 8011944:	4288      	cmp	r0, r1
 8011946:	f77f aec8 	ble.w	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801194a:	f9b4 7000 	ldrsh.w	r7, [r4]
 801194e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011952:	f8ad 7018 	strh.w	r7, [sp, #24]
 8011956:	1a9b      	subs	r3, r3, r2
 8011958:	f8ad 301e 	strh.w	r3, [sp, #30]
 801195c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8011960:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011964:	9600      	str	r6, [sp, #0]
 8011966:	464b      	mov	r3, r9
 8011968:	e77a      	b.n	8011860 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 801196a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801196e:	2800      	cmp	r0, #0
 8011970:	f43f aeb3 	beq.w	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011974:	6803      	ldr	r3, [r0, #0]
 8011976:	9600      	str	r6, [sp, #0]
 8011978:	68de      	ldr	r6, [r3, #12]
 801197a:	4623      	mov	r3, r4
 801197c:	aa02      	add	r2, sp, #8
 801197e:	4629      	mov	r1, r5
 8011980:	47b0      	blx	r6
 8011982:	e6aa      	b.n	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011984:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8011988:	2800      	cmp	r0, #0
 801198a:	f43f aea6 	beq.w	80116da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801198e:	6803      	ldr	r3, [r0, #0]
 8011990:	9600      	str	r6, [sp, #0]
 8011992:	689e      	ldr	r6, [r3, #8]
 8011994:	e7f1      	b.n	801197a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8011996:	bf00      	nop
 8011998:	20015430 	.word	0x20015430

0801199c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801199c:	b180      	cbz	r0, 80119c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801199e:	2903      	cmp	r1, #3
 80119a0:	d81c      	bhi.n	80119dc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80119a2:	e8df f001 	tbb	[pc, r1]
 80119a6:	1d02      	.short	0x1d02
 80119a8:	1f08      	.short	0x1f08
 80119aa:	4b10      	ldr	r3, [pc, #64]	@ (80119ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80119ac:	8818      	ldrh	r0, [r3, #0]
 80119ae:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80119b2:	4240      	negs	r0, r0
 80119b4:	4770      	bx	lr
 80119b6:	4b0d      	ldr	r3, [pc, #52]	@ (80119ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80119b8:	8818      	ldrh	r0, [r3, #0]
 80119ba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80119be:	4770      	bx	lr
 80119c0:	2903      	cmp	r1, #3
 80119c2:	d80b      	bhi.n	80119dc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80119c4:	a301      	add	r3, pc, #4	@ (adr r3, 80119cc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 80119c6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80119ca:	bf00      	nop
 80119cc:	080119e1 	.word	0x080119e1
 80119d0:	080119b7 	.word	0x080119b7
 80119d4:	080119e5 	.word	0x080119e5
 80119d8:	080119ab 	.word	0x080119ab
 80119dc:	2000      	movs	r0, #0
 80119de:	4770      	bx	lr
 80119e0:	2001      	movs	r0, #1
 80119e2:	4770      	bx	lr
 80119e4:	f04f 30ff 	mov.w	r0, #4294967295
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	2001542a 	.word	0x2001542a

080119f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80119f0:	b180      	cbz	r0, 8011a14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 80119f2:	2903      	cmp	r1, #3
 80119f4:	d81c      	bhi.n	8011a30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80119f6:	e8df f001 	tbb	[pc, r1]
 80119fa:	021d      	.short	0x021d
 80119fc:	071f      	.short	0x071f
 80119fe:	4b10      	ldr	r3, [pc, #64]	@ (8011a40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8011a00:	8818      	ldrh	r0, [r3, #0]
 8011a02:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011a06:	4770      	bx	lr
 8011a08:	4b0d      	ldr	r3, [pc, #52]	@ (8011a40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8011a0a:	8818      	ldrh	r0, [r3, #0]
 8011a0c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011a10:	4240      	negs	r0, r0
 8011a12:	4770      	bx	lr
 8011a14:	2903      	cmp	r1, #3
 8011a16:	d80b      	bhi.n	8011a30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8011a18:	a301      	add	r3, pc, #4	@ (adr r3, 8011a20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8011a1a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011a1e:	bf00      	nop
 8011a20:	080119ff 	.word	0x080119ff
 8011a24:	08011a39 	.word	0x08011a39
 8011a28:	08011a09 	.word	0x08011a09
 8011a2c:	08011a35 	.word	0x08011a35
 8011a30:	2000      	movs	r0, #0
 8011a32:	4770      	bx	lr
 8011a34:	2001      	movs	r0, #1
 8011a36:	4770      	bx	lr
 8011a38:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop
 8011a40:	2001542a 	.word	0x2001542a

08011a44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8011a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a48:	b099      	sub	sp, #100	@ 0x64
 8011a4a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011a4c:	a914      	add	r1, sp, #80	@ 0x50
 8011a4e:	e881 000c 	stmia.w	r1, {r2, r3}
 8011a52:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8011a56:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8011a5a:	f891 900d 	ldrb.w	r9, [r1, #13]
 8011a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a60:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8011a64:	9310      	str	r3, [sp, #64]	@ 0x40
 8011a66:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8011a6a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011a6e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011a70:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 8011a74:	798f      	ldrb	r7, [r1, #6]
 8011a76:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8011a7a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8011a7e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8011a82:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8011a86:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8011a8a:	431f      	orrs	r7, r3
 8011a8c:	f000 8195 	beq.w	8011dba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011a90:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8011a94:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8011a98:	f891 9007 	ldrb.w	r9, [r1, #7]
 8011a9c:	ea59 0903 	orrs.w	r9, r9, r3
 8011aa0:	f000 818b 	beq.w	8011dba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011aa4:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	2d00      	cmp	r5, #0
 8011aac:	f000 812e 	beq.w	8011d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8011ab0:	1aed      	subs	r5, r5, r3
 8011ab2:	b2ad      	uxth	r5, r5
 8011ab4:	042b      	lsls	r3, r5, #16
 8011ab6:	d502      	bpl.n	8011abe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8011ab8:	1b64      	subs	r4, r4, r5
 8011aba:	b224      	sxth	r4, r4
 8011abc:	2500      	movs	r5, #0
 8011abe:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011ac2:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8011ac6:	428c      	cmp	r4, r1
 8011ac8:	b28b      	uxth	r3, r1
 8011aca:	bfbf      	itttt	lt
 8011acc:	18ed      	addlt	r5, r5, r3
 8011ace:	1b2c      	sublt	r4, r5, r4
 8011ad0:	b2a5      	uxthlt	r5, r4
 8011ad2:	460c      	movlt	r4, r1
 8011ad4:	8891      	ldrh	r1, [r2, #4]
 8011ad6:	440b      	add	r3, r1
 8011ad8:	b21b      	sxth	r3, r3
 8011ada:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011adc:	88d3      	ldrh	r3, [r2, #6]
 8011ade:	8852      	ldrh	r2, [r2, #2]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	b21b      	sxth	r3, r3
 8011ae4:	930d      	str	r3, [sp, #52]	@ 0x34
 8011ae6:	4bbe      	ldr	r3, [pc, #760]	@ (8011de0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8011ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011aea:	f893 b000 	ldrb.w	fp, [r3]
 8011aee:	f10b 3cff 	add.w	ip, fp, #4294967295
 8011af2:	f1dc 0300 	rsbs	r3, ip, #0
 8011af6:	eb43 030c 	adc.w	r3, r3, ip
 8011afa:	930e      	str	r3, [sp, #56]	@ 0x38
 8011afc:	4621      	mov	r1, r4
 8011afe:	4653      	mov	r3, sl
 8011b00:	a814      	add	r0, sp, #80	@ 0x50
 8011b02:	f7fa fc64 	bl	800c3ce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8011b06:	4621      	mov	r1, r4
 8011b08:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8011b0c:	4653      	mov	r3, sl
 8011b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b10:	a814      	add	r0, sp, #80	@ 0x50
 8011b12:	f7fa fc79 	bl	800c408 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8011b16:	a918      	add	r1, sp, #96	@ 0x60
 8011b18:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8011b1c:	a817      	add	r0, sp, #92	@ 0x5c
 8011b1e:	f7fa fd9f 	bl	800c660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8011b22:	f1ba 0f00 	cmp.w	sl, #0
 8011b26:	f040 80f4 	bne.w	8011d12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8011b2a:	f1bb 0f01 	cmp.w	fp, #1
 8011b2e:	f040 80f8 	bne.w	8011d22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8011b32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f040 8145 	bne.w	8011dc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8011b3a:	b2ba      	uxth	r2, r7
 8011b3c:	b905      	cbnz	r5, 8011b40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8011b3e:	b16e      	cbz	r6, 8011b5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8011b40:	fb06 5302 	mla	r3, r6, r2, r5
 8011b44:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8011b46:	fb08 f303 	mul.w	r3, r8, r3
 8011b4a:	4631      	mov	r1, r6
 8011b4c:	f003 0607 	and.w	r6, r3, #7
 8011b50:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8011b54:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011b56:	eba9 0301 	sub.w	r3, r9, r1
 8011b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b5c:	4651      	mov	r1, sl
 8011b5e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011b60:	f7ff ff1c 	bl	801199c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8011b64:	4681      	mov	r9, r0
 8011b66:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011b68:	f7ff ff42 	bl	80119f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8011b6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b70:	eba3 0a01 	sub.w	sl, r3, r1
 8011b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b76:	459a      	cmp	sl, r3
 8011b78:	bfa8      	it	ge
 8011b7a:	469a      	movge	sl, r3
 8011b7c:	f1ba 0f00 	cmp.w	sl, #0
 8011b80:	4683      	mov	fp, r0
 8011b82:	f340 811a 	ble.w	8011dba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011b86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b88:	1b64      	subs	r4, r4, r5
 8011b8a:	1b1c      	subs	r4, r3, r4
 8011b8c:	42bc      	cmp	r4, r7
 8011b8e:	bfd4      	ite	le
 8011b90:	ebc5 0504 	rsble	r5, r5, r4
 8011b94:	ebc5 0507 	rsbgt	r5, r5, r7
 8011b98:	2d00      	cmp	r5, #0
 8011b9a:	f340 810e 	ble.w	8011dba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011b9e:	1b52      	subs	r2, r2, r5
 8011ba0:	fb08 f302 	mul.w	r3, r8, r2
 8011ba4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f040 8116 	bne.w	8011dda <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8011bae:	4b8d      	ldr	r3, [pc, #564]	@ (8011de4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8011bb0:	6818      	ldr	r0, [r3, #0]
 8011bb2:	6803      	ldr	r3, [r0, #0]
 8011bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bb6:	4798      	blx	r3
 8011bb8:	2301      	movs	r3, #1
 8011bba:	fa03 f308 	lsl.w	r3, r3, r8
 8011bbe:	4a8a      	ldr	r2, [pc, #552]	@ (8011de8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8011bc0:	3b01      	subs	r3, #1
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	8811      	ldrh	r1, [r2, #0]
 8011bc6:	930e      	str	r3, [sp, #56]	@ 0x38
 8011bc8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8011bcc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8011bd0:	fb01 2303 	mla	r3, r1, r3, r2
 8011bd4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011bd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bda:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011bdc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011be0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011be2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011be4:	0a19      	lsrs	r1, r3, #8
 8011be6:	b2cb      	uxtb	r3, r1
 8011be8:	9312      	str	r3, [sp, #72]	@ 0x48
 8011bea:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011bec:	b2db      	uxtb	r3, r3
 8011bee:	9311      	str	r3, [sp, #68]	@ 0x44
 8011bf0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011bf2:	095a      	lsrs	r2, r3, #5
 8011bf4:	4b7d      	ldr	r3, [pc, #500]	@ (8011dec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8011bf6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8011bfa:	400b      	ands	r3, r1
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8011c00:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8011c04:	4313      	orrs	r3, r2
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c0a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011c0c:	781a      	ldrb	r2, [r3, #0]
 8011c0e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8011c12:	4132      	asrs	r2, r6
 8011c14:	fb05 b919 	mls	r9, r5, r9, fp
 8011c18:	fb03 fb05 	mul.w	fp, r3, r5
 8011c1c:	b2d2      	uxtb	r2, r2
 8011c1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011c20:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8011c24:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8011c28:	f0c0 80f5 	bcc.w	8011e16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8011c2c:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8011c30:	46ae      	mov	lr, r5
 8011c32:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8011c36:	f0c0 80dd 	bcc.w	8011df4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8011c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c3c:	4013      	ands	r3, r2
 8011c3e:	d055      	beq.n	8011cec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8011c40:	20ff      	movs	r0, #255	@ 0xff
 8011c42:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011c44:	fb90 f1f1 	sdiv	r1, r0, r1
 8011c48:	434b      	muls	r3, r1
 8011c4a:	2bfe      	cmp	r3, #254	@ 0xfe
 8011c4c:	dd03      	ble.n	8011c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8011c4e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011c50:	4281      	cmp	r1, r0
 8011c52:	f000 80cd 	beq.w	8011df0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8011c56:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011c58:	f8bc 4000 	ldrh.w	r4, [ip]
 8011c5c:	fb11 f303 	smulbb	r3, r1, r3
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	1c59      	adds	r1, r3, #1
 8011c64:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8011c68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011c6c:	b29f      	uxth	r7, r3
 8011c6e:	43db      	mvns	r3, r3
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011c76:	1220      	asrs	r0, r4, #8
 8011c78:	fb13 f907 	smulbb	r9, r3, r7
 8011c7c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8011c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c82:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8011c86:	fb00 9003 	mla	r0, r0, r3, r9
 8011c8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c8c:	10e1      	asrs	r1, r4, #3
 8011c8e:	fb13 f907 	smulbb	r9, r3, r7
 8011c92:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8011c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c98:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8011c9c:	fb01 9103 	mla	r1, r1, r3, r9
 8011ca0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011ca2:	00e4      	lsls	r4, r4, #3
 8011ca4:	fb13 f707 	smulbb	r7, r3, r7
 8011ca8:	b2e4      	uxtb	r4, r4
 8011caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cac:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8011cb0:	fb04 7403 	mla	r4, r4, r3, r7
 8011cb4:	b280      	uxth	r0, r0
 8011cb6:	b2a4      	uxth	r4, r4
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	f104 0901 	add.w	r9, r4, #1
 8011cbe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8011cc2:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8011cc6:	b289      	uxth	r1, r1
 8011cc8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8011ccc:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8011cd0:	ea49 0000 	orr.w	r0, r9, r0
 8011cd4:	f101 0901 	add.w	r9, r1, #1
 8011cd8:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8011cdc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8011ce0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8011ce4:	ea40 0009 	orr.w	r0, r0, r9
 8011ce8:	f8ac 0000 	strh.w	r0, [ip]
 8011cec:	4446      	add	r6, r8
 8011cee:	b2b6      	uxth	r6, r6
 8011cf0:	2e07      	cmp	r6, #7
 8011cf2:	bf81      	itttt	hi
 8011cf4:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8011cf6:	785a      	ldrbhi	r2, [r3, #1]
 8011cf8:	3301      	addhi	r3, #1
 8011cfa:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8011cfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011cfe:	bf9a      	itte	ls
 8011d00:	fa42 f208 	asrls.w	r2, r2, r8
 8011d04:	b2d2      	uxtbls	r2, r2
 8011d06:	2600      	movhi	r6, #0
 8011d08:	449c      	add	ip, r3
 8011d0a:	e792      	b.n	8011c32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8011d0c:	441c      	add	r4, r3
 8011d0e:	b224      	sxth	r4, r4
 8011d10:	e6d5      	b.n	8011abe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8011d12:	f1ba 0f01 	cmp.w	sl, #1
 8011d16:	f47f af0c 	bne.w	8011b32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011d1a:	f1bb 0f01 	cmp.w	fp, #1
 8011d1e:	f47f af08 	bne.w	8011b32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011d22:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 8011de4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8011d26:	f8db 0000 	ldr.w	r0, [fp]
 8011d2a:	6803      	ldr	r3, [r0, #0]
 8011d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d2e:	4798      	blx	r3
 8011d30:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8011d34:	465a      	mov	r2, fp
 8011d36:	d006      	beq.n	8011d46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8011d38:	f1b8 0f04 	cmp.w	r8, #4
 8011d3c:	d140      	bne.n	8011dc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8011d3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011d40:	3300      	adds	r3, #0
 8011d42:	bf18      	it	ne
 8011d44:	2301      	movne	r3, #1
 8011d46:	0580      	lsls	r0, r0, #22
 8011d48:	d56e      	bpl.n	8011e28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8011d4a:	f1b8 0f08 	cmp.w	r8, #8
 8011d4e:	d16b      	bne.n	8011e28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	bf0c      	ite	eq
 8011d54:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8011d58:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8011d5c:	2d00      	cmp	r5, #0
 8011d5e:	f47f aee8 	bne.w	8011b32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011d62:	2e00      	cmp	r6, #0
 8011d64:	f47f aee5 	bne.w	8011b32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011d68:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8011d6a:	19e3      	adds	r3, r4, r7
 8011d6c:	4283      	cmp	r3, r0
 8011d6e:	f73f aee0 	bgt.w	8011b32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011d76:	444b      	add	r3, r9
 8011d78:	4283      	cmp	r3, r0
 8011d7a:	f73f aeda 	bgt.w	8011b32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011d7e:	6810      	ldr	r0, [r2, #0]
 8011d80:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8011d84:	6804      	ldr	r4, [r0, #0]
 8011d86:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8011d8a:	b2bf      	uxth	r7, r7
 8011d8c:	f1b8 0f08 	cmp.w	r8, #8
 8011d90:	f04f 0500 	mov.w	r5, #0
 8011d94:	bf18      	it	ne
 8011d96:	3701      	addne	r7, #1
 8011d98:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8011d9c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011d9e:	9104      	str	r1, [sp, #16]
 8011da0:	bf18      	it	ne
 8011da2:	f027 0701 	bicne.w	r7, r7, #1
 8011da6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8011da8:	bf18      	it	ne
 8011daa:	b2bf      	uxthne	r7, r7
 8011dac:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8011db0:	e9cd 7900 	strd	r7, r9, [sp]
 8011db4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8011db6:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8011db8:	47a0      	blx	r4
 8011dba:	b019      	add	sp, #100	@ 0x64
 8011dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	e7c0      	b.n	8011d46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8011dc4:	2208      	movs	r2, #8
 8011dc6:	fb92 f3f8 	sdiv	r3, r2, r8
 8011dca:	1e5a      	subs	r2, r3, #1
 8011dcc:	443a      	add	r2, r7
 8011dce:	fb92 f2f3 	sdiv	r2, r2, r3
 8011dd2:	fb12 f203 	smulbb	r2, r2, r3
 8011dd6:	b292      	uxth	r2, r2
 8011dd8:	e6b0      	b.n	8011b3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8011dda:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011ddc:	e6ec      	b.n	8011bb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8011dde:	bf00      	nop
 8011de0:	20015428 	.word	0x20015428
 8011de4:	20015430 	.word	0x20015430
 8011de8:	2001542a 	.word	0x2001542a
 8011dec:	00fff800 	.word	0x00fff800
 8011df0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011df2:	e779      	b.n	8011ce8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8011df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011df6:	b153      	cbz	r3, 8011e0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8011df8:	441e      	add	r6, r3
 8011dfa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011dfc:	b2b6      	uxth	r6, r6
 8011dfe:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8011e02:	f006 0607 	and.w	r6, r6, #7
 8011e06:	781a      	ldrb	r2, [r3, #0]
 8011e08:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011e0a:	4132      	asrs	r2, r6
 8011e0c:	b2d2      	uxtb	r2, r2
 8011e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e10:	445b      	add	r3, fp
 8011e12:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e14:	e706      	b.n	8011c24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8011e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d1ce      	bne.n	8011dba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011e1c:	4b05      	ldr	r3, [pc, #20]	@ (8011e34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8011e1e:	6818      	ldr	r0, [r3, #0]
 8011e20:	6803      	ldr	r3, [r0, #0]
 8011e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e24:	4798      	blx	r3
 8011e26:	e7c8      	b.n	8011dba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	f43f ae82 	beq.w	8011b32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011e2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e32:	e793      	b.n	8011d5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8011e34:	20015430 	.word	0x20015430

08011e38 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8011e38:	b538      	push	{r3, r4, r5, lr}
 8011e3a:	4c0b      	ldr	r4, [pc, #44]	@ (8011e68 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8011e3c:	7823      	ldrb	r3, [r4, #0]
 8011e3e:	f3bf 8f5b 	dmb	ish
 8011e42:	07db      	lsls	r3, r3, #31
 8011e44:	4605      	mov	r5, r0
 8011e46:	d40b      	bmi.n	8011e60 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f000 fd43 	bl	80128d4 <__cxa_guard_acquire>
 8011e4e:	b138      	cbz	r0, 8011e60 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8011e50:	4620      	mov	r0, r4
 8011e52:	f000 fd4b 	bl	80128ec <__cxa_guard_release>
 8011e56:	4a05      	ldr	r2, [pc, #20]	@ (8011e6c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8011e58:	4905      	ldr	r1, [pc, #20]	@ (8011e70 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8011e5a:	4806      	ldr	r0, [pc, #24]	@ (8011e74 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8011e5c:	f000 fd33 	bl	80128c6 <__aeabi_atexit>
 8011e60:	4b04      	ldr	r3, [pc, #16]	@ (8011e74 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8011e62:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8011e64:	bd38      	pop	{r3, r4, r5, pc}
 8011e66:	bf00      	nop
 8011e68:	200154bc 	.word	0x200154bc
 8011e6c:	20000000 	.word	0x20000000
 8011e70:	080100f1 	.word	0x080100f1
 8011e74:	20000088 	.word	0x20000088

08011e78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8011e78:	b570      	push	{r4, r5, r6, lr}
 8011e7a:	1208      	asrs	r0, r1, #8
 8011e7c:	b29e      	uxth	r6, r3
 8011e7e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011e82:	1213      	asrs	r3, r2, #8
 8011e84:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8011e88:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8011e8c:	fb13 f305 	smulbb	r3, r3, r5
 8011e90:	fb10 f006 	smulbb	r0, r0, r6
 8011e94:	4418      	add	r0, r3
 8011e96:	10cc      	asrs	r4, r1, #3
 8011e98:	10d3      	asrs	r3, r2, #3
 8011e9a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8011e9e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8011ea2:	fb13 f305 	smulbb	r3, r3, r5
 8011ea6:	fb14 f406 	smulbb	r4, r4, r6
 8011eaa:	00c9      	lsls	r1, r1, #3
 8011eac:	00d2      	lsls	r2, r2, #3
 8011eae:	441c      	add	r4, r3
 8011eb0:	b2d2      	uxtb	r2, r2
 8011eb2:	b2cb      	uxtb	r3, r1
 8011eb4:	fb12 f205 	smulbb	r2, r2, r5
 8011eb8:	b280      	uxth	r0, r0
 8011eba:	fb13 f306 	smulbb	r3, r3, r6
 8011ebe:	4413      	add	r3, r2
 8011ec0:	1c42      	adds	r2, r0, #1
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8011ec8:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8011ecc:	1c58      	adds	r0, r3, #1
 8011ece:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8011ed2:	b2a4      	uxth	r4, r4
 8011ed4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8011ed8:	4310      	orrs	r0, r2
 8011eda:	1c62      	adds	r2, r4, #1
 8011edc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8011ee0:	0964      	lsrs	r4, r4, #5
 8011ee2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8011ee6:	4320      	orrs	r0, r4
 8011ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011eec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8011eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef0:	b08f      	sub	sp, #60	@ 0x3c
 8011ef2:	461c      	mov	r4, r3
 8011ef4:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8011ef8:	9004      	str	r0, [sp, #16]
 8011efa:	460d      	mov	r5, r1
 8011efc:	4616      	mov	r6, r2
 8011efe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011f00:	2f00      	cmp	r7, #0
 8011f02:	f000 80f6 	beq.w	80120f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8011f06:	6820      	ldr	r0, [r4, #0]
 8011f08:	6861      	ldr	r1, [r4, #4]
 8011f0a:	aa0a      	add	r2, sp, #40	@ 0x28
 8011f0c:	c203      	stmia	r2!, {r0, r1}
 8011f0e:	6818      	ldr	r0, [r3, #0]
 8011f10:	6859      	ldr	r1, [r3, #4]
 8011f12:	aa0c      	add	r2, sp, #48	@ 0x30
 8011f14:	c203      	stmia	r2!, {r0, r1}
 8011f16:	a80a      	add	r0, sp, #40	@ 0x28
 8011f18:	f7fa fbe4 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011f1c:	4621      	mov	r1, r4
 8011f1e:	a80c      	add	r0, sp, #48	@ 0x30
 8011f20:	f7fa fc08 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011f24:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8011f28:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8011f2c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8011f30:	f002 0301 	and.w	r3, r2, #1
 8011f34:	9306      	str	r3, [sp, #24]
 8011f36:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8011f3a:	f003 0101 	and.w	r1, r3, #1
 8011f3e:	9105      	str	r1, [sp, #20]
 8011f40:	9805      	ldr	r0, [sp, #20]
 8011f42:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8011f46:	4403      	add	r3, r0
 8011f48:	fb01 2303 	mla	r3, r1, r3, r2
 8011f4c:	f04f 0802 	mov.w	r8, #2
 8011f50:	fb93 f3f8 	sdiv	r3, r3, r8
 8011f54:	441d      	add	r5, r3
 8011f56:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8011f5a:	441a      	add	r2, r3
 8011f5c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8011f60:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8011f64:	4419      	add	r1, r3
 8011f66:	4b64      	ldr	r3, [pc, #400]	@ (80120f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8011f68:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8011f6c:	6818      	ldr	r0, [r3, #0]
 8011f6e:	6803      	ldr	r3, [r0, #0]
 8011f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f72:	4798      	blx	r3
 8011f74:	4a61      	ldr	r2, [pc, #388]	@ (80120fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8011f76:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8011f7a:	8813      	ldrh	r3, [r2, #0]
 8011f7c:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8011f80:	2fff      	cmp	r7, #255	@ 0xff
 8011f82:	fb03 a404 	mla	r4, r3, r4, sl
 8011f86:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011f8a:	f106 0604 	add.w	r6, r6, #4
 8011f8e:	4611      	mov	r1, r2
 8011f90:	fb03 fb0b 	mul.w	fp, r3, fp
 8011f94:	d06b      	beq.n	801206e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 8011f96:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8011f9a:	9303      	str	r3, [sp, #12]
 8011f9c:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8011fa0:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8011fa4:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8011fa8:	9b07      	ldr	r3, [sp, #28]
 8011faa:	42a3      	cmp	r3, r4
 8011fac:	f240 809c 	bls.w	80120e8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8011fb0:	9b06      	ldr	r3, [sp, #24]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d039      	beq.n	801202a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8011fb6:	782b      	ldrb	r3, [r5, #0]
 8011fb8:	8822      	ldrh	r2, [r4, #0]
 8011fba:	9804      	ldr	r0, [sp, #16]
 8011fbc:	f003 030f 	and.w	r3, r3, #15
 8011fc0:	f105 0801 	add.w	r8, r5, #1
 8011fc4:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8011fc8:	9b03      	ldr	r3, [sp, #12]
 8011fca:	9300      	str	r3, [sp, #0]
 8011fcc:	463b      	mov	r3, r7
 8011fce:	f7ff ff53 	bl	8011e78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8011fd2:	f824 0b02 	strh.w	r0, [r4], #2
 8011fd6:	f109 3bff 	add.w	fp, r9, #4294967295
 8011fda:	f1bb 0f01 	cmp.w	fp, #1
 8011fde:	46a2      	mov	sl, r4
 8011fe0:	f104 0404 	add.w	r4, r4, #4
 8011fe4:	dd24      	ble.n	8012030 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 8011fe6:	f898 3000 	ldrb.w	r3, [r8]
 8011fea:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8011fee:	9804      	ldr	r0, [sp, #16]
 8011ff0:	091b      	lsrs	r3, r3, #4
 8011ff2:	f1ab 0b02 	sub.w	fp, fp, #2
 8011ff6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8011ffa:	9b03      	ldr	r3, [sp, #12]
 8011ffc:	9300      	str	r3, [sp, #0]
 8011ffe:	463b      	mov	r3, r7
 8012000:	f7ff ff3a 	bl	8011e78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012004:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012008:	f818 3b01 	ldrb.w	r3, [r8], #1
 801200c:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012010:	9804      	ldr	r0, [sp, #16]
 8012012:	f003 030f 	and.w	r3, r3, #15
 8012016:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801201a:	9b03      	ldr	r3, [sp, #12]
 801201c:	9300      	str	r3, [sp, #0]
 801201e:	463b      	mov	r3, r7
 8012020:	f7ff ff2a 	bl	8011e78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012024:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012028:	e7d7      	b.n	8011fda <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 801202a:	46a8      	mov	r8, r5
 801202c:	46cb      	mov	fp, r9
 801202e:	e7d4      	b.n	8011fda <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012030:	d10e      	bne.n	8012050 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8012032:	f898 3000 	ldrb.w	r3, [r8]
 8012036:	f8ba 2000 	ldrh.w	r2, [sl]
 801203a:	9804      	ldr	r0, [sp, #16]
 801203c:	091b      	lsrs	r3, r3, #4
 801203e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012042:	9b03      	ldr	r3, [sp, #12]
 8012044:	9300      	str	r3, [sp, #0]
 8012046:	463b      	mov	r3, r7
 8012048:	f7ff ff16 	bl	8011e78 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 801204c:	f82a 0b02 	strh.w	r0, [sl], #2
 8012050:	9b08      	ldr	r3, [sp, #32]
 8012052:	9a05      	ldr	r2, [sp, #20]
 8012054:	881c      	ldrh	r4, [r3, #0]
 8012056:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801205a:	eba4 0409 	sub.w	r4, r4, r9
 801205e:	4413      	add	r3, r2
 8012060:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8012064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012066:	fb93 f3f2 	sdiv	r3, r3, r2
 801206a:	441d      	add	r5, r3
 801206c:	e79c      	b.n	8011fa8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 801206e:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8012072:	45a3      	cmp	fp, r4
 8012074:	d938      	bls.n	80120e8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8012076:	9b06      	ldr	r3, [sp, #24]
 8012078:	b1f3      	cbz	r3, 80120b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 801207a:	782b      	ldrb	r3, [r5, #0]
 801207c:	f003 030f 	and.w	r3, r3, #15
 8012080:	1c6a      	adds	r2, r5, #1
 8012082:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012086:	8023      	strh	r3, [r4, #0]
 8012088:	f109 30ff 	add.w	r0, r9, #4294967295
 801208c:	3402      	adds	r4, #2
 801208e:	2801      	cmp	r0, #1
 8012090:	4623      	mov	r3, r4
 8012092:	f104 0404 	add.w	r4, r4, #4
 8012096:	dd12      	ble.n	80120be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8012098:	7813      	ldrb	r3, [r2, #0]
 801209a:	091b      	lsrs	r3, r3, #4
 801209c:	3802      	subs	r0, #2
 801209e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80120a2:	f824 3c04 	strh.w	r3, [r4, #-4]
 80120a6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80120aa:	f003 030f 	and.w	r3, r3, #15
 80120ae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80120b2:	f824 3c02 	strh.w	r3, [r4, #-2]
 80120b6:	e7ea      	b.n	801208e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80120b8:	462a      	mov	r2, r5
 80120ba:	4648      	mov	r0, r9
 80120bc:	e7e7      	b.n	801208e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80120be:	d106      	bne.n	80120ce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 80120c0:	7812      	ldrb	r2, [r2, #0]
 80120c2:	0912      	lsrs	r2, r2, #4
 80120c4:	3302      	adds	r3, #2
 80120c6:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80120ca:	f823 2c02 	strh.w	r2, [r3, #-2]
 80120ce:	880c      	ldrh	r4, [r1, #0]
 80120d0:	9a05      	ldr	r2, [sp, #20]
 80120d2:	eba4 0409 	sub.w	r4, r4, r9
 80120d6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80120da:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80120de:	4413      	add	r3, r2
 80120e0:	fb93 f3f8 	sdiv	r3, r3, r8
 80120e4:	441d      	add	r5, r3
 80120e6:	e7c4      	b.n	8012072 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 80120e8:	4b03      	ldr	r3, [pc, #12]	@ (80120f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80120ea:	6818      	ldr	r0, [r3, #0]
 80120ec:	6803      	ldr	r3, [r0, #0]
 80120ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120f0:	4798      	blx	r3
 80120f2:	b00f      	add	sp, #60	@ 0x3c
 80120f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120f8:	20015430 	.word	0x20015430
 80120fc:	2001542a 	.word	0x2001542a

08012100 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8012100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012102:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8012106:	2dff      	cmp	r5, #255	@ 0xff
 8012108:	ea4f 2711 	mov.w	r7, r1, lsr #8
 801210c:	d10c      	bne.n	8012128 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 801210e:	2bff      	cmp	r3, #255	@ 0xff
 8012110:	d10a      	bne.n	8012128 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012112:	4b25      	ldr	r3, [pc, #148]	@ (80121a8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8012114:	0948      	lsrs	r0, r1, #5
 8012116:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801211a:	403b      	ands	r3, r7
 801211c:	4318      	orrs	r0, r3
 801211e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8012122:	4308      	orrs	r0, r1
 8012124:	b280      	uxth	r0, r0
 8012126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012128:	fb15 f503 	smulbb	r5, r5, r3
 801212c:	b2ab      	uxth	r3, r5
 801212e:	1c5d      	adds	r5, r3, #1
 8012130:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8012134:	1214      	asrs	r4, r2, #8
 8012136:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801213a:	fa1f fc85 	uxth.w	ip, r5
 801213e:	10d6      	asrs	r6, r2, #3
 8012140:	00d0      	lsls	r0, r2, #3
 8012142:	43ed      	mvns	r5, r5
 8012144:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012148:	f3c1 4207 	ubfx	r2, r1, #16, #8
 801214c:	b2eb      	uxtb	r3, r5
 801214e:	b2c0      	uxtb	r0, r0
 8012150:	fb12 f20c 	smulbb	r2, r2, ip
 8012154:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012158:	fb04 2403 	mla	r4, r4, r3, r2
 801215c:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8012160:	b2c8      	uxtb	r0, r1
 8012162:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8012166:	b2fd      	uxtb	r5, r7
 8012168:	fb10 f00c 	smulbb	r0, r0, ip
 801216c:	b2a4      	uxth	r4, r4
 801216e:	fb02 0003 	mla	r0, r2, r3, r0
 8012172:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8012176:	fb15 f50c 	smulbb	r5, r5, ip
 801217a:	fb06 5503 	mla	r5, r6, r3, r5
 801217e:	b283      	uxth	r3, r0
 8012180:	1c60      	adds	r0, r4, #1
 8012182:	b2ad      	uxth	r5, r5
 8012184:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8012188:	1c58      	adds	r0, r3, #1
 801218a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801218e:	1c6b      	adds	r3, r5, #1
 8012190:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8012194:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8012198:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801219c:	096d      	lsrs	r5, r5, #5
 801219e:	4320      	orrs	r0, r4
 80121a0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80121a4:	4328      	orrs	r0, r5
 80121a6:	e7be      	b.n	8012126 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80121a8:	00fff800 	.word	0x00fff800

080121ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80121ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b0:	461c      	mov	r4, r3
 80121b2:	b08d      	sub	sp, #52	@ 0x34
 80121b4:	460d      	mov	r5, r1
 80121b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80121b8:	6861      	ldr	r1, [r4, #4]
 80121ba:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 80121be:	4680      	mov	r8, r0
 80121c0:	6820      	ldr	r0, [r4, #0]
 80121c2:	4616      	mov	r6, r2
 80121c4:	aa08      	add	r2, sp, #32
 80121c6:	c203      	stmia	r2!, {r0, r1}
 80121c8:	6818      	ldr	r0, [r3, #0]
 80121ca:	6859      	ldr	r1, [r3, #4]
 80121cc:	aa0a      	add	r2, sp, #40	@ 0x28
 80121ce:	c203      	stmia	r2!, {r0, r1}
 80121d0:	a808      	add	r0, sp, #32
 80121d2:	f7fa fa87 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80121d6:	4621      	mov	r1, r4
 80121d8:	a80a      	add	r0, sp, #40	@ 0x28
 80121da:	f7fa faab 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80121de:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80121e2:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 80121e6:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 80121ea:	f002 0301 	and.w	r3, r2, #1
 80121ee:	9303      	str	r3, [sp, #12]
 80121f0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80121f4:	f003 0101 	and.w	r1, r3, #1
 80121f8:	9102      	str	r1, [sp, #8]
 80121fa:	9802      	ldr	r0, [sp, #8]
 80121fc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012200:	4403      	add	r3, r0
 8012202:	fb01 2303 	mla	r3, r1, r3, r2
 8012206:	f04f 0a02 	mov.w	sl, #2
 801220a:	fb93 f3fa 	sdiv	r3, r3, sl
 801220e:	441d      	add	r5, r3
 8012210:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012214:	441a      	add	r2, r3
 8012216:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801221a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801221e:	4a3f      	ldr	r2, [pc, #252]	@ (801231c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8012220:	9205      	str	r2, [sp, #20]
 8012222:	4419      	add	r1, r3
 8012224:	6810      	ldr	r0, [r2, #0]
 8012226:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 801222a:	6803      	ldr	r3, [r0, #0]
 801222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801222e:	4798      	blx	r3
 8012230:	4b3b      	ldr	r3, [pc, #236]	@ (8012320 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8012232:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8012236:	8819      	ldrh	r1, [r3, #0]
 8012238:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 801223c:	fb01 c404 	mla	r4, r1, r4, ip
 8012240:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012244:	434f      	muls	r7, r1
 8012246:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 801224a:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 801224e:	3604      	adds	r6, #4
 8012250:	9204      	str	r2, [sp, #16]
 8012252:	9b04      	ldr	r3, [sp, #16]
 8012254:	429c      	cmp	r4, r3
 8012256:	d258      	bcs.n	801230a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8012258:	9b03      	ldr	r3, [sp, #12]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d034      	beq.n	80122c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801225e:	782b      	ldrb	r3, [r5, #0]
 8012260:	f003 030f 	and.w	r3, r3, #15
 8012264:	1c6f      	adds	r7, r5, #1
 8012266:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801226a:	0e0b      	lsrs	r3, r1, #24
 801226c:	d006      	beq.n	801227c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 801226e:	8822      	ldrh	r2, [r4, #0]
 8012270:	9300      	str	r3, [sp, #0]
 8012272:	4640      	mov	r0, r8
 8012274:	464b      	mov	r3, r9
 8012276:	f7ff ff43 	bl	8012100 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801227a:	8020      	strh	r0, [r4, #0]
 801227c:	3402      	adds	r4, #2
 801227e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8012282:	f1ba 0f01 	cmp.w	sl, #1
 8012286:	dd22      	ble.n	80122ce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8012288:	783b      	ldrb	r3, [r7, #0]
 801228a:	091b      	lsrs	r3, r3, #4
 801228c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012290:	0e0b      	lsrs	r3, r1, #24
 8012292:	d006      	beq.n	80122a2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8012294:	8822      	ldrh	r2, [r4, #0]
 8012296:	9300      	str	r3, [sp, #0]
 8012298:	4640      	mov	r0, r8
 801229a:	464b      	mov	r3, r9
 801229c:	f7ff ff30 	bl	8012100 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80122a0:	8020      	strh	r0, [r4, #0]
 80122a2:	f817 3b01 	ldrb.w	r3, [r7], #1
 80122a6:	f003 030f 	and.w	r3, r3, #15
 80122aa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80122ae:	0e0b      	lsrs	r3, r1, #24
 80122b0:	d006      	beq.n	80122c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 80122b2:	8862      	ldrh	r2, [r4, #2]
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	4640      	mov	r0, r8
 80122b8:	464b      	mov	r3, r9
 80122ba:	f7ff ff21 	bl	8012100 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80122be:	8060      	strh	r0, [r4, #2]
 80122c0:	3404      	adds	r4, #4
 80122c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80122c6:	e7dc      	b.n	8012282 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 80122c8:	462f      	mov	r7, r5
 80122ca:	46da      	mov	sl, fp
 80122cc:	e7d9      	b.n	8012282 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 80122ce:	d10d      	bne.n	80122ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 80122d0:	783b      	ldrb	r3, [r7, #0]
 80122d2:	091b      	lsrs	r3, r3, #4
 80122d4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80122d8:	0e0b      	lsrs	r3, r1, #24
 80122da:	d006      	beq.n	80122ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80122dc:	8822      	ldrh	r2, [r4, #0]
 80122de:	9300      	str	r3, [sp, #0]
 80122e0:	4640      	mov	r0, r8
 80122e2:	464b      	mov	r3, r9
 80122e4:	f7ff ff0c 	bl	8012100 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80122e8:	8020      	strh	r0, [r4, #0]
 80122ea:	3402      	adds	r4, #2
 80122ec:	9b06      	ldr	r3, [sp, #24]
 80122ee:	9a02      	ldr	r2, [sp, #8]
 80122f0:	881b      	ldrh	r3, [r3, #0]
 80122f2:	eba3 030b 	sub.w	r3, r3, fp
 80122f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80122fa:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80122fe:	4413      	add	r3, r2
 8012300:	9a07      	ldr	r2, [sp, #28]
 8012302:	fb93 f3f2 	sdiv	r3, r3, r2
 8012306:	441d      	add	r5, r3
 8012308:	e7a3      	b.n	8012252 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 801230a:	9b05      	ldr	r3, [sp, #20]
 801230c:	6818      	ldr	r0, [r3, #0]
 801230e:	6803      	ldr	r3, [r0, #0]
 8012310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012312:	4798      	blx	r3
 8012314:	b00d      	add	sp, #52	@ 0x34
 8012316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801231a:	bf00      	nop
 801231c:	20015430 	.word	0x20015430
 8012320:	2001542a 	.word	0x2001542a

08012324 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8012324:	b570      	push	{r4, r5, r6, lr}
 8012326:	1214      	asrs	r4, r2, #8
 8012328:	788d      	ldrb	r5, [r1, #2]
 801232a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801232e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012332:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012336:	fb15 f503 	smulbb	r5, r5, r3
 801233a:	fb04 5506 	mla	r5, r4, r6, r5
 801233e:	10d0      	asrs	r0, r2, #3
 8012340:	784c      	ldrb	r4, [r1, #1]
 8012342:	7809      	ldrb	r1, [r1, #0]
 8012344:	00d2      	lsls	r2, r2, #3
 8012346:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801234a:	b2d2      	uxtb	r2, r2
 801234c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8012350:	fb14 f403 	smulbb	r4, r4, r3
 8012354:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8012358:	fb11 f303 	smulbb	r3, r1, r3
 801235c:	fb00 4406 	mla	r4, r0, r6, r4
 8012360:	fb02 3306 	mla	r3, r2, r6, r3
 8012364:	b2ad      	uxth	r5, r5
 8012366:	b29b      	uxth	r3, r3
 8012368:	b2a4      	uxth	r4, r4
 801236a:	1c68      	adds	r0, r5, #1
 801236c:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8012370:	1c62      	adds	r2, r4, #1
 8012372:	1c58      	adds	r0, r3, #1
 8012374:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012378:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801237c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8012380:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012384:	0964      	lsrs	r4, r4, #5
 8012386:	4328      	orrs	r0, r5
 8012388:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801238c:	4320      	orrs	r0, r4
 801238e:	bd70      	pop	{r4, r5, r6, pc}

08012390 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8012390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	b08f      	sub	sp, #60	@ 0x3c
 8012396:	461c      	mov	r4, r3
 8012398:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 801239c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801239e:	4682      	mov	sl, r0
 80123a0:	460e      	mov	r6, r1
 80123a2:	4615      	mov	r5, r2
 80123a4:	2f00      	cmp	r7, #0
 80123a6:	f000 8142 	beq.w	801262e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 80123aa:	6820      	ldr	r0, [r4, #0]
 80123ac:	6861      	ldr	r1, [r4, #4]
 80123ae:	aa0a      	add	r2, sp, #40	@ 0x28
 80123b0:	c203      	stmia	r2!, {r0, r1}
 80123b2:	6818      	ldr	r0, [r3, #0]
 80123b4:	6859      	ldr	r1, [r3, #4]
 80123b6:	aa0c      	add	r2, sp, #48	@ 0x30
 80123b8:	c203      	stmia	r2!, {r0, r1}
 80123ba:	a80a      	add	r0, sp, #40	@ 0x28
 80123bc:	f7fa f992 	bl	800c6e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123c0:	4621      	mov	r1, r4
 80123c2:	a80c      	add	r0, sp, #48	@ 0x30
 80123c4:	f7fa f9b6 	bl	800c734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80123c8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80123cc:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80123d0:	f002 0301 	and.w	r3, r2, #1
 80123d4:	9306      	str	r3, [sp, #24]
 80123d6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80123da:	f003 0101 	and.w	r1, r3, #1
 80123de:	9105      	str	r1, [sp, #20]
 80123e0:	9805      	ldr	r0, [sp, #20]
 80123e2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80123e6:	4403      	add	r3, r0
 80123e8:	fb01 2303 	mla	r3, r1, r3, r2
 80123ec:	f04f 0802 	mov.w	r8, #2
 80123f0:	fb93 f3f8 	sdiv	r3, r3, r8
 80123f4:	441e      	add	r6, r3
 80123f6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80123fa:	441a      	add	r2, r3
 80123fc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8012400:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012404:	4419      	add	r1, r3
 8012406:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801240a:	9303      	str	r3, [sp, #12]
 801240c:	4b89      	ldr	r3, [pc, #548]	@ (8012634 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 801240e:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8012412:	6818      	ldr	r0, [r3, #0]
 8012414:	6803      	ldr	r3, [r0, #0]
 8012416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012418:	4798      	blx	r3
 801241a:	4a87      	ldr	r2, [pc, #540]	@ (8012638 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 801241c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8012420:	8813      	ldrh	r3, [r2, #0]
 8012422:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8012426:	2fff      	cmp	r7, #255	@ 0xff
 8012428:	fb03 9404 	mla	r4, r3, r4, r9
 801242c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012430:	f105 0504 	add.w	r5, r5, #4
 8012434:	4694      	mov	ip, r2
 8012436:	fb03 f30b 	mul.w	r3, r3, fp
 801243a:	d071      	beq.n	8012520 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 801243c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012440:	43f9      	mvns	r1, r7
 8012442:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8012446:	b2c9      	uxtb	r1, r1
 8012448:	9104      	str	r1, [sp, #16]
 801244a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801244e:	9b07      	ldr	r3, [sp, #28]
 8012450:	42a3      	cmp	r3, r4
 8012452:	f240 80e7 	bls.w	8012624 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8012456:	9b06      	ldr	r3, [sp, #24]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d03d      	beq.n	80124d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 801245c:	7831      	ldrb	r1, [r6, #0]
 801245e:	9b04      	ldr	r3, [sp, #16]
 8012460:	8822      	ldrh	r2, [r4, #0]
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	f001 010f 	and.w	r1, r1, #15
 8012468:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801246c:	463b      	mov	r3, r7
 801246e:	4429      	add	r1, r5
 8012470:	4650      	mov	r0, sl
 8012472:	f7ff ff57 	bl	8012324 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012476:	9b03      	ldr	r3, [sp, #12]
 8012478:	f824 0b02 	strh.w	r0, [r4], #2
 801247c:	f106 0801 	add.w	r8, r6, #1
 8012480:	f103 3bff 	add.w	fp, r3, #4294967295
 8012484:	f1bb 0f01 	cmp.w	fp, #1
 8012488:	46a1      	mov	r9, r4
 801248a:	f104 0404 	add.w	r4, r4, #4
 801248e:	dd27      	ble.n	80124e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8012490:	f898 1000 	ldrb.w	r1, [r8]
 8012494:	9b04      	ldr	r3, [sp, #16]
 8012496:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 801249a:	9300      	str	r3, [sp, #0]
 801249c:	0909      	lsrs	r1, r1, #4
 801249e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80124a2:	463b      	mov	r3, r7
 80124a4:	4429      	add	r1, r5
 80124a6:	4650      	mov	r0, sl
 80124a8:	f7ff ff3c 	bl	8012324 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80124ac:	f824 0c04 	strh.w	r0, [r4, #-4]
 80124b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80124b4:	9b04      	ldr	r3, [sp, #16]
 80124b6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	f001 010f 	and.w	r1, r1, #15
 80124c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80124c4:	463b      	mov	r3, r7
 80124c6:	4429      	add	r1, r5
 80124c8:	4650      	mov	r0, sl
 80124ca:	f7ff ff2b 	bl	8012324 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80124ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80124d2:	f824 0c02 	strh.w	r0, [r4, #-2]
 80124d6:	e7d5      	b.n	8012484 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 80124d8:	46b0      	mov	r8, r6
 80124da:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80124de:	e7d1      	b.n	8012484 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 80124e0:	d10f      	bne.n	8012502 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 80124e2:	f898 1000 	ldrb.w	r1, [r8]
 80124e6:	9b04      	ldr	r3, [sp, #16]
 80124e8:	f8b9 2000 	ldrh.w	r2, [r9]
 80124ec:	9300      	str	r3, [sp, #0]
 80124ee:	0909      	lsrs	r1, r1, #4
 80124f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80124f4:	463b      	mov	r3, r7
 80124f6:	4429      	add	r1, r5
 80124f8:	4650      	mov	r0, sl
 80124fa:	f7ff ff13 	bl	8012324 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80124fe:	f829 0b02 	strh.w	r0, [r9], #2
 8012502:	9b08      	ldr	r3, [sp, #32]
 8012504:	9a05      	ldr	r2, [sp, #20]
 8012506:	881c      	ldrh	r4, [r3, #0]
 8012508:	9b03      	ldr	r3, [sp, #12]
 801250a:	1ae4      	subs	r4, r4, r3
 801250c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012510:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8012514:	4413      	add	r3, r2
 8012516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012518:	fb93 f3f2 	sdiv	r3, r3, r2
 801251c:	441e      	add	r6, r3
 801251e:	e796      	b.n	801244e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8012520:	4f46      	ldr	r7, [pc, #280]	@ (801263c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8012522:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012526:	42a3      	cmp	r3, r4
 8012528:	d97c      	bls.n	8012624 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 801252a:	9a06      	ldr	r2, [sp, #24]
 801252c:	2a00      	cmp	r2, #0
 801252e:	d054      	beq.n	80125da <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8012530:	7830      	ldrb	r0, [r6, #0]
 8012532:	f000 000f 	and.w	r0, r0, #15
 8012536:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801253a:	eb05 0e00 	add.w	lr, r5, r0
 801253e:	5c28      	ldrb	r0, [r5, r0]
 8012540:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8012544:	f89e e001 	ldrb.w	lr, [lr, #1]
 8012548:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801254c:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8012550:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8012554:	ea42 020e 	orr.w	r2, r2, lr
 8012558:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 801255c:	f824 2b02 	strh.w	r2, [r4], #2
 8012560:	9a03      	ldr	r2, [sp, #12]
 8012562:	1c71      	adds	r1, r6, #1
 8012564:	f102 3eff 	add.w	lr, r2, #4294967295
 8012568:	f1be 0f01 	cmp.w	lr, #1
 801256c:	4620      	mov	r0, r4
 801256e:	f104 0404 	add.w	r4, r4, #4
 8012572:	dd36      	ble.n	80125e2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8012574:	7808      	ldrb	r0, [r1, #0]
 8012576:	0900      	lsrs	r0, r0, #4
 8012578:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801257c:	eb05 0a00 	add.w	sl, r5, r0
 8012580:	f1ae 0e02 	sub.w	lr, lr, #2
 8012584:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8012588:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801258c:	00d2      	lsls	r2, r2, #3
 801258e:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8012592:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012596:	ea49 0202 	orr.w	r2, r9, r2
 801259a:	f815 9000 	ldrb.w	r9, [r5, r0]
 801259e:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80125a2:	f824 2c04 	strh.w	r2, [r4, #-4]
 80125a6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80125aa:	f000 000f 	and.w	r0, r0, #15
 80125ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80125b2:	eb05 0a00 	add.w	sl, r5, r0
 80125b6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80125ba:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80125be:	00d2      	lsls	r2, r2, #3
 80125c0:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80125c4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80125c8:	ea49 0202 	orr.w	r2, r9, r2
 80125cc:	f815 9000 	ldrb.w	r9, [r5, r0]
 80125d0:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80125d4:	f824 2c02 	strh.w	r2, [r4, #-2]
 80125d8:	e7c6      	b.n	8012568 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 80125da:	4631      	mov	r1, r6
 80125dc:	f8dd e00c 	ldr.w	lr, [sp, #12]
 80125e0:	e7c2      	b.n	8012568 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 80125e2:	d111      	bne.n	8012608 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80125e4:	7809      	ldrb	r1, [r1, #0]
 80125e6:	0909      	lsrs	r1, r1, #4
 80125e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80125ec:	186c      	adds	r4, r5, r1
 80125ee:	5c69      	ldrb	r1, [r5, r1]
 80125f0:	78a2      	ldrb	r2, [r4, #2]
 80125f2:	7864      	ldrb	r4, [r4, #1]
 80125f4:	00e4      	lsls	r4, r4, #3
 80125f6:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80125fa:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80125fe:	4322      	orrs	r2, r4
 8012600:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8012604:	f820 2b02 	strh.w	r2, [r0], #2
 8012608:	9a03      	ldr	r2, [sp, #12]
 801260a:	f8bc 4000 	ldrh.w	r4, [ip]
 801260e:	9905      	ldr	r1, [sp, #20]
 8012610:	1aa4      	subs	r4, r4, r2
 8012612:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8012616:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801261a:	440a      	add	r2, r1
 801261c:	fb92 f2f8 	sdiv	r2, r2, r8
 8012620:	4416      	add	r6, r2
 8012622:	e780      	b.n	8012526 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8012624:	4b03      	ldr	r3, [pc, #12]	@ (8012634 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8012626:	6818      	ldr	r0, [r3, #0]
 8012628:	6803      	ldr	r3, [r0, #0]
 801262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801262c:	4798      	blx	r3
 801262e:	b00f      	add	sp, #60	@ 0x3c
 8012630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012634:	20015430 	.word	0x20015430
 8012638:	2001542a 	.word	0x2001542a
 801263c:	fffff800 	.word	0xfffff800

08012640 <CRC_Lock>:
 8012640:	b530      	push	{r4, r5, lr}
 8012642:	4a2d      	ldr	r2, [pc, #180]	@ (80126f8 <CRC_Lock+0xb8>)
 8012644:	6813      	ldr	r3, [r2, #0]
 8012646:	f023 0301 	bic.w	r3, r3, #1
 801264a:	6013      	str	r3, [r2, #0]
 801264c:	4b2b      	ldr	r3, [pc, #172]	@ (80126fc <CRC_Lock+0xbc>)
 801264e:	681c      	ldr	r4, [r3, #0]
 8012650:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8012654:	4014      	ands	r4, r2
 8012656:	f24c 2540 	movw	r5, #49728	@ 0xc240
 801265a:	42ac      	cmp	r4, r5
 801265c:	d005      	beq.n	801266a <CRC_Lock+0x2a>
 801265e:	681c      	ldr	r4, [r3, #0]
 8012660:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8012664:	4014      	ands	r4, r2
 8012666:	42ac      	cmp	r4, r5
 8012668:	d125      	bne.n	80126b6 <CRC_Lock+0x76>
 801266a:	4b25      	ldr	r3, [pc, #148]	@ (8012700 <CRC_Lock+0xc0>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d139      	bne.n	80126e6 <CRC_Lock+0xa6>
 8012672:	4b24      	ldr	r3, [pc, #144]	@ (8012704 <CRC_Lock+0xc4>)
 8012674:	681a      	ldr	r2, [r3, #0]
 8012676:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801267a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 801267e:	d00d      	beq.n	801269c <CRC_Lock+0x5c>
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	f240 4483 	movw	r4, #1155	@ 0x483
 8012686:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801268a:	42a2      	cmp	r2, r4
 801268c:	d006      	beq.n	801269c <CRC_Lock+0x5c>
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f240 4285 	movw	r2, #1157	@ 0x485
 8012694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012698:	4293      	cmp	r3, r2
 801269a:	d124      	bne.n	80126e6 <CRC_Lock+0xa6>
 801269c:	4b1a      	ldr	r3, [pc, #104]	@ (8012708 <CRC_Lock+0xc8>)
 801269e:	2201      	movs	r2, #1
 80126a0:	601a      	str	r2, [r3, #0]
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	2a00      	cmp	r2, #0
 80126a6:	d1fc      	bne.n	80126a2 <CRC_Lock+0x62>
 80126a8:	4b18      	ldr	r3, [pc, #96]	@ (801270c <CRC_Lock+0xcc>)
 80126aa:	6018      	str	r0, [r3, #0]
 80126ac:	6818      	ldr	r0, [r3, #0]
 80126ae:	1a43      	subs	r3, r0, r1
 80126b0:	4258      	negs	r0, r3
 80126b2:	4158      	adcs	r0, r3
 80126b4:	e00e      	b.n	80126d4 <CRC_Lock+0x94>
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	4013      	ands	r3, r2
 80126ba:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80126be:	4293      	cmp	r3, r2
 80126c0:	d111      	bne.n	80126e6 <CRC_Lock+0xa6>
 80126c2:	4b13      	ldr	r3, [pc, #76]	@ (8012710 <CRC_Lock+0xd0>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f240 4286 	movw	r2, #1158	@ 0x486
 80126ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80126ce:	4293      	cmp	r3, r2
 80126d0:	d001      	beq.n	80126d6 <CRC_Lock+0x96>
 80126d2:	2000      	movs	r0, #0
 80126d4:	bd30      	pop	{r4, r5, pc}
 80126d6:	4b0f      	ldr	r3, [pc, #60]	@ (8012714 <CRC_Lock+0xd4>)
 80126d8:	2201      	movs	r2, #1
 80126da:	601a      	str	r2, [r3, #0]
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	2a00      	cmp	r2, #0
 80126e0:	d1fc      	bne.n	80126dc <CRC_Lock+0x9c>
 80126e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012718 <CRC_Lock+0xd8>)
 80126e4:	e7e1      	b.n	80126aa <CRC_Lock+0x6a>
 80126e6:	4b0d      	ldr	r3, [pc, #52]	@ (801271c <CRC_Lock+0xdc>)
 80126e8:	2201      	movs	r2, #1
 80126ea:	601a      	str	r2, [r3, #0]
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	2a00      	cmp	r2, #0
 80126f0:	d1fc      	bne.n	80126ec <CRC_Lock+0xac>
 80126f2:	4b0b      	ldr	r3, [pc, #44]	@ (8012720 <CRC_Lock+0xe0>)
 80126f4:	e7d9      	b.n	80126aa <CRC_Lock+0x6a>
 80126f6:	bf00      	nop
 80126f8:	e0002000 	.word	0xe0002000
 80126fc:	e000ed00 	.word	0xe000ed00
 8012700:	e0042000 	.word	0xe0042000
 8012704:	5c001000 	.word	0x5c001000
 8012708:	58024c08 	.word	0x58024c08
 801270c:	58024c00 	.word	0x58024c00
 8012710:	46008ff0 	.word	0x46008ff0
 8012714:	46024c08 	.word	0x46024c08
 8012718:	46024c00 	.word	0x46024c00
 801271c:	40023008 	.word	0x40023008
 8012720:	40023000 	.word	0x40023000

08012724 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8012724:	6101      	str	r1, [r0, #16]
 8012726:	4770      	bx	lr

08012728 <_ZN8touchgfx8Gestures4tickEv>:
 8012728:	7b83      	ldrb	r3, [r0, #14]
 801272a:	b14b      	cbz	r3, 8012740 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801272c:	8903      	ldrh	r3, [r0, #8]
 801272e:	3301      	adds	r3, #1
 8012730:	b29b      	uxth	r3, r3
 8012732:	2b07      	cmp	r3, #7
 8012734:	8103      	strh	r3, [r0, #8]
 8012736:	bf81      	itttt	hi
 8012738:	2300      	movhi	r3, #0
 801273a:	8143      	strhhi	r3, [r0, #10]
 801273c:	8183      	strhhi	r3, [r0, #12]
 801273e:	7383      	strbhi	r3, [r0, #14]
 8012740:	4770      	bx	lr
	...

08012744 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8012744:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012748:	4698      	mov	r8, r3
 801274a:	8883      	ldrh	r3, [r0, #4]
 801274c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012750:	eba8 0303 	sub.w	r3, r8, r3
 8012754:	b21b      	sxth	r3, r3
 8012756:	4604      	mov	r4, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	4617      	mov	r7, r2
 801275c:	4a18      	ldr	r2, [pc, #96]	@ (80127c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801275e:	9200      	str	r2, [sp, #0]
 8012760:	bfb8      	it	lt
 8012762:	425b      	neglt	r3, r3
 8012764:	8aa2      	ldrh	r2, [r4, #20]
 8012766:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801276a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801276e:	b21b      	sxth	r3, r3
 8012770:	460e      	mov	r6, r1
 8012772:	4293      	cmp	r3, r2
 8012774:	88c1      	ldrh	r1, [r0, #6]
 8012776:	f8ad 1008 	strh.w	r1, [sp, #8]
 801277a:	f04f 0000 	mov.w	r0, #0
 801277e:	f88d 0004 	strb.w	r0, [sp, #4]
 8012782:	f8ad 500c 	strh.w	r5, [sp, #12]
 8012786:	dc07      	bgt.n	8012798 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8012788:	1a69      	subs	r1, r5, r1
 801278a:	b209      	sxth	r1, r1
 801278c:	2900      	cmp	r1, #0
 801278e:	bfb8      	it	lt
 8012790:	4249      	neglt	r1, r1
 8012792:	b209      	sxth	r1, r1
 8012794:	428a      	cmp	r2, r1
 8012796:	da10      	bge.n	80127ba <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8012798:	6920      	ldr	r0, [r4, #16]
 801279a:	6803      	ldr	r3, [r0, #0]
 801279c:	4669      	mov	r1, sp
 801279e:	685b      	ldr	r3, [r3, #4]
 80127a0:	4798      	blx	r3
 80127a2:	eba8 0606 	sub.w	r6, r8, r6
 80127a6:	2300      	movs	r3, #0
 80127a8:	1bef      	subs	r7, r5, r7
 80127aa:	2001      	movs	r0, #1
 80127ac:	8123      	strh	r3, [r4, #8]
 80127ae:	8166      	strh	r6, [r4, #10]
 80127b0:	81a7      	strh	r7, [r4, #12]
 80127b2:	f8a4 8004 	strh.w	r8, [r4, #4]
 80127b6:	80e5      	strh	r5, [r4, #6]
 80127b8:	73a0      	strb	r0, [r4, #14]
 80127ba:	b004      	add	sp, #16
 80127bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127c0:	080158a4 	.word	0x080158a4

080127c4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80127c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127c6:	461e      	mov	r6, r3
 80127c8:	1e4b      	subs	r3, r1, #1
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	b085      	sub	sp, #20
 80127ce:	4604      	mov	r4, r0
 80127d0:	460d      	mov	r5, r1
 80127d2:	4617      	mov	r7, r2
 80127d4:	d84b      	bhi.n	801286e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80127d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80127da:	1cd3      	adds	r3, r2, #3
 80127dc:	b29b      	uxth	r3, r3
 80127de:	2b06      	cmp	r3, #6
 80127e0:	d916      	bls.n	8012810 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80127e2:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8012884 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80127e6:	f8cd c004 	str.w	ip, [sp, #4]
 80127ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80127ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80127f2:	6900      	ldr	r0, [r0, #16]
 80127f4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80127f8:	f04f 0c00 	mov.w	ip, #0
 80127fc:	f88d c008 	strb.w	ip, [sp, #8]
 8012800:	f8ad 200a 	strh.w	r2, [sp, #10]
 8012804:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012808:	6803      	ldr	r3, [r0, #0]
 801280a:	a901      	add	r1, sp, #4
 801280c:	689b      	ldr	r3, [r3, #8]
 801280e:	4798      	blx	r3
 8012810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012814:	1cd3      	adds	r3, r2, #3
 8012816:	b29b      	uxth	r3, r3
 8012818:	2b06      	cmp	r3, #6
 801281a:	d916      	bls.n	801284a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801281c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8012884 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8012820:	f8cd c004 	str.w	ip, [sp, #4]
 8012824:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012828:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801282c:	6920      	ldr	r0, [r4, #16]
 801282e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8012832:	f04f 0c01 	mov.w	ip, #1
 8012836:	f88d c008 	strb.w	ip, [sp, #8]
 801283a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801283e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012842:	6803      	ldr	r3, [r0, #0]
 8012844:	a901      	add	r1, sp, #4
 8012846:	689b      	ldr	r3, [r3, #8]
 8012848:	4798      	blx	r3
 801284a:	4b0d      	ldr	r3, [pc, #52]	@ (8012880 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801284c:	9301      	str	r3, [sp, #4]
 801284e:	6920      	ldr	r0, [r4, #16]
 8012850:	f88d 5008 	strb.w	r5, [sp, #8]
 8012854:	2300      	movs	r3, #0
 8012856:	f8ad 700a 	strh.w	r7, [sp, #10]
 801285a:	f8ad 600c 	strh.w	r6, [sp, #12]
 801285e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012862:	6803      	ldr	r3, [r0, #0]
 8012864:	a901      	add	r1, sp, #4
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4798      	blx	r3
 801286a:	b005      	add	sp, #20
 801286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801286e:	2900      	cmp	r1, #0
 8012870:	d1eb      	bne.n	801284a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8012872:	80a2      	strh	r2, [r4, #4]
 8012874:	80c6      	strh	r6, [r0, #6]
 8012876:	60a1      	str	r1, [r4, #8]
 8012878:	81a1      	strh	r1, [r4, #12]
 801287a:	73a1      	strb	r1, [r4, #14]
 801287c:	e7e5      	b.n	801284a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801287e:	bf00      	nop
 8012880:	08015890 	.word	0x08015890
 8012884:	080158b8 	.word	0x080158b8

08012888 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8012888:	b570      	push	{r4, r5, r6, lr}
 801288a:	790b      	ldrb	r3, [r1, #4]
 801288c:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012890:	2b00      	cmp	r3, #0
 8012892:	bf0c      	ite	eq
 8012894:	2301      	moveq	r3, #1
 8012896:	2300      	movne	r3, #0
 8012898:	4604      	mov	r4, r0
 801289a:	460e      	mov	r6, r1
 801289c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80128a0:	d109      	bne.n	80128b6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80128a2:	b14d      	cbz	r5, 80128b8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80128a4:	7933      	ldrb	r3, [r6, #4]
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d10c      	bne.n	80128c4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80128aa:	6823      	ldr	r3, [r4, #0]
 80128ac:	4620      	mov	r0, r4
 80128ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128b4:	4718      	bx	r3
 80128b6:	b12d      	cbz	r5, 80128c4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80128b8:	6823      	ldr	r3, [r4, #0]
 80128ba:	4620      	mov	r0, r4
 80128bc:	695b      	ldr	r3, [r3, #20]
 80128be:	4798      	blx	r3
 80128c0:	2d00      	cmp	r5, #0
 80128c2:	d1ef      	bne.n	80128a4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80128c4:	bd70      	pop	{r4, r5, r6, pc}

080128c6 <__aeabi_atexit>:
 80128c6:	460b      	mov	r3, r1
 80128c8:	4601      	mov	r1, r0
 80128ca:	4618      	mov	r0, r3
 80128cc:	f000 b910 	b.w	8012af0 <__cxa_atexit>

080128d0 <_ZdlPvj>:
 80128d0:	f000 b812 	b.w	80128f8 <_ZdlPv>

080128d4 <__cxa_guard_acquire>:
 80128d4:	6802      	ldr	r2, [r0, #0]
 80128d6:	07d2      	lsls	r2, r2, #31
 80128d8:	4603      	mov	r3, r0
 80128da:	d405      	bmi.n	80128e8 <__cxa_guard_acquire+0x14>
 80128dc:	7842      	ldrb	r2, [r0, #1]
 80128de:	b102      	cbz	r2, 80128e2 <__cxa_guard_acquire+0xe>
 80128e0:	deff      	udf	#255	@ 0xff
 80128e2:	2001      	movs	r0, #1
 80128e4:	7058      	strb	r0, [r3, #1]
 80128e6:	4770      	bx	lr
 80128e8:	2000      	movs	r0, #0
 80128ea:	4770      	bx	lr

080128ec <__cxa_guard_release>:
 80128ec:	2301      	movs	r3, #1
 80128ee:	6003      	str	r3, [r0, #0]
 80128f0:	4770      	bx	lr

080128f2 <__cxa_pure_virtual>:
 80128f2:	b508      	push	{r3, lr}
 80128f4:	f000 f80e 	bl	8012914 <_ZSt9terminatev>

080128f8 <_ZdlPv>:
 80128f8:	f000 b844 	b.w	8012984 <free>

080128fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80128fc:	b508      	push	{r3, lr}
 80128fe:	4780      	blx	r0
 8012900:	f000 f80d 	bl	801291e <abort>

08012904 <_ZSt13get_terminatev>:
 8012904:	4b02      	ldr	r3, [pc, #8]	@ (8012910 <_ZSt13get_terminatev+0xc>)
 8012906:	6818      	ldr	r0, [r3, #0]
 8012908:	f3bf 8f5b 	dmb	ish
 801290c:	4770      	bx	lr
 801290e:	bf00      	nop
 8012910:	2000008c 	.word	0x2000008c

08012914 <_ZSt9terminatev>:
 8012914:	b508      	push	{r3, lr}
 8012916:	f7ff fff5 	bl	8012904 <_ZSt13get_terminatev>
 801291a:	f7ff ffef 	bl	80128fc <_ZN10__cxxabiv111__terminateEPFvvE>

0801291e <abort>:
 801291e:	b508      	push	{r3, lr}
 8012920:	2006      	movs	r0, #6
 8012922:	f000 fa3b 	bl	8012d9c <raise>
 8012926:	2001      	movs	r0, #1
 8012928:	f7ee ff7d 	bl	8001826 <_exit>

0801292c <__assert_func>:
 801292c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801292e:	4614      	mov	r4, r2
 8012930:	461a      	mov	r2, r3
 8012932:	4b09      	ldr	r3, [pc, #36]	@ (8012958 <__assert_func+0x2c>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4605      	mov	r5, r0
 8012938:	68d8      	ldr	r0, [r3, #12]
 801293a:	b14c      	cbz	r4, 8012950 <__assert_func+0x24>
 801293c:	4b07      	ldr	r3, [pc, #28]	@ (801295c <__assert_func+0x30>)
 801293e:	9100      	str	r1, [sp, #0]
 8012940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012944:	4906      	ldr	r1, [pc, #24]	@ (8012960 <__assert_func+0x34>)
 8012946:	462b      	mov	r3, r5
 8012948:	f000 f984 	bl	8012c54 <fiprintf>
 801294c:	f7ff ffe7 	bl	801291e <abort>
 8012950:	4b04      	ldr	r3, [pc, #16]	@ (8012964 <__assert_func+0x38>)
 8012952:	461c      	mov	r4, r3
 8012954:	e7f3      	b.n	801293e <__assert_func+0x12>
 8012956:	bf00      	nop
 8012958:	2000009c 	.word	0x2000009c
 801295c:	080147a1 	.word	0x080147a1
 8012960:	080147ae 	.word	0x080147ae
 8012964:	08013b86 	.word	0x08013b86

08012968 <atexit>:
 8012968:	2300      	movs	r3, #0
 801296a:	4601      	mov	r1, r0
 801296c:	461a      	mov	r2, r3
 801296e:	4618      	mov	r0, r3
 8012970:	f000 bac2 	b.w	8012ef8 <__register_exitproc>

08012974 <malloc>:
 8012974:	4b02      	ldr	r3, [pc, #8]	@ (8012980 <malloc+0xc>)
 8012976:	4601      	mov	r1, r0
 8012978:	6818      	ldr	r0, [r3, #0]
 801297a:	f000 b82d 	b.w	80129d8 <_malloc_r>
 801297e:	bf00      	nop
 8012980:	2000009c 	.word	0x2000009c

08012984 <free>:
 8012984:	4b02      	ldr	r3, [pc, #8]	@ (8012990 <free+0xc>)
 8012986:	4601      	mov	r1, r0
 8012988:	6818      	ldr	r0, [r3, #0]
 801298a:	f000 bb11 	b.w	8012fb0 <_free_r>
 801298e:	bf00      	nop
 8012990:	2000009c 	.word	0x2000009c

08012994 <sbrk_aligned>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	4e0f      	ldr	r6, [pc, #60]	@ (80129d4 <sbrk_aligned+0x40>)
 8012998:	460c      	mov	r4, r1
 801299a:	6831      	ldr	r1, [r6, #0]
 801299c:	4605      	mov	r5, r0
 801299e:	b911      	cbnz	r1, 80129a6 <sbrk_aligned+0x12>
 80129a0:	f000 fa4c 	bl	8012e3c <_sbrk_r>
 80129a4:	6030      	str	r0, [r6, #0]
 80129a6:	4621      	mov	r1, r4
 80129a8:	4628      	mov	r0, r5
 80129aa:	f000 fa47 	bl	8012e3c <_sbrk_r>
 80129ae:	1c43      	adds	r3, r0, #1
 80129b0:	d103      	bne.n	80129ba <sbrk_aligned+0x26>
 80129b2:	f04f 34ff 	mov.w	r4, #4294967295
 80129b6:	4620      	mov	r0, r4
 80129b8:	bd70      	pop	{r4, r5, r6, pc}
 80129ba:	1cc4      	adds	r4, r0, #3
 80129bc:	f024 0403 	bic.w	r4, r4, #3
 80129c0:	42a0      	cmp	r0, r4
 80129c2:	d0f8      	beq.n	80129b6 <sbrk_aligned+0x22>
 80129c4:	1a21      	subs	r1, r4, r0
 80129c6:	4628      	mov	r0, r5
 80129c8:	f000 fa38 	bl	8012e3c <_sbrk_r>
 80129cc:	3001      	adds	r0, #1
 80129ce:	d1f2      	bne.n	80129b6 <sbrk_aligned+0x22>
 80129d0:	e7ef      	b.n	80129b2 <sbrk_aligned+0x1e>
 80129d2:	bf00      	nop
 80129d4:	200154c0 	.word	0x200154c0

080129d8 <_malloc_r>:
 80129d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129dc:	1ccd      	adds	r5, r1, #3
 80129de:	f025 0503 	bic.w	r5, r5, #3
 80129e2:	3508      	adds	r5, #8
 80129e4:	2d0c      	cmp	r5, #12
 80129e6:	bf38      	it	cc
 80129e8:	250c      	movcc	r5, #12
 80129ea:	2d00      	cmp	r5, #0
 80129ec:	4606      	mov	r6, r0
 80129ee:	db01      	blt.n	80129f4 <_malloc_r+0x1c>
 80129f0:	42a9      	cmp	r1, r5
 80129f2:	d904      	bls.n	80129fe <_malloc_r+0x26>
 80129f4:	230c      	movs	r3, #12
 80129f6:	6033      	str	r3, [r6, #0]
 80129f8:	2000      	movs	r0, #0
 80129fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ad4 <_malloc_r+0xfc>
 8012a02:	f000 f869 	bl	8012ad8 <__malloc_lock>
 8012a06:	f8d8 3000 	ldr.w	r3, [r8]
 8012a0a:	461c      	mov	r4, r3
 8012a0c:	bb44      	cbnz	r4, 8012a60 <_malloc_r+0x88>
 8012a0e:	4629      	mov	r1, r5
 8012a10:	4630      	mov	r0, r6
 8012a12:	f7ff ffbf 	bl	8012994 <sbrk_aligned>
 8012a16:	1c43      	adds	r3, r0, #1
 8012a18:	4604      	mov	r4, r0
 8012a1a:	d158      	bne.n	8012ace <_malloc_r+0xf6>
 8012a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8012a20:	4627      	mov	r7, r4
 8012a22:	2f00      	cmp	r7, #0
 8012a24:	d143      	bne.n	8012aae <_malloc_r+0xd6>
 8012a26:	2c00      	cmp	r4, #0
 8012a28:	d04b      	beq.n	8012ac2 <_malloc_r+0xea>
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	4639      	mov	r1, r7
 8012a2e:	4630      	mov	r0, r6
 8012a30:	eb04 0903 	add.w	r9, r4, r3
 8012a34:	f000 fa02 	bl	8012e3c <_sbrk_r>
 8012a38:	4581      	cmp	r9, r0
 8012a3a:	d142      	bne.n	8012ac2 <_malloc_r+0xea>
 8012a3c:	6821      	ldr	r1, [r4, #0]
 8012a3e:	1a6d      	subs	r5, r5, r1
 8012a40:	4629      	mov	r1, r5
 8012a42:	4630      	mov	r0, r6
 8012a44:	f7ff ffa6 	bl	8012994 <sbrk_aligned>
 8012a48:	3001      	adds	r0, #1
 8012a4a:	d03a      	beq.n	8012ac2 <_malloc_r+0xea>
 8012a4c:	6823      	ldr	r3, [r4, #0]
 8012a4e:	442b      	add	r3, r5
 8012a50:	6023      	str	r3, [r4, #0]
 8012a52:	f8d8 3000 	ldr.w	r3, [r8]
 8012a56:	685a      	ldr	r2, [r3, #4]
 8012a58:	bb62      	cbnz	r2, 8012ab4 <_malloc_r+0xdc>
 8012a5a:	f8c8 7000 	str.w	r7, [r8]
 8012a5e:	e00f      	b.n	8012a80 <_malloc_r+0xa8>
 8012a60:	6822      	ldr	r2, [r4, #0]
 8012a62:	1b52      	subs	r2, r2, r5
 8012a64:	d420      	bmi.n	8012aa8 <_malloc_r+0xd0>
 8012a66:	2a0b      	cmp	r2, #11
 8012a68:	d917      	bls.n	8012a9a <_malloc_r+0xc2>
 8012a6a:	1961      	adds	r1, r4, r5
 8012a6c:	42a3      	cmp	r3, r4
 8012a6e:	6025      	str	r5, [r4, #0]
 8012a70:	bf18      	it	ne
 8012a72:	6059      	strne	r1, [r3, #4]
 8012a74:	6863      	ldr	r3, [r4, #4]
 8012a76:	bf08      	it	eq
 8012a78:	f8c8 1000 	streq.w	r1, [r8]
 8012a7c:	5162      	str	r2, [r4, r5]
 8012a7e:	604b      	str	r3, [r1, #4]
 8012a80:	4630      	mov	r0, r6
 8012a82:	f000 f82f 	bl	8012ae4 <__malloc_unlock>
 8012a86:	f104 000b 	add.w	r0, r4, #11
 8012a8a:	1d23      	adds	r3, r4, #4
 8012a8c:	f020 0007 	bic.w	r0, r0, #7
 8012a90:	1ac2      	subs	r2, r0, r3
 8012a92:	bf1c      	itt	ne
 8012a94:	1a1b      	subne	r3, r3, r0
 8012a96:	50a3      	strne	r3, [r4, r2]
 8012a98:	e7af      	b.n	80129fa <_malloc_r+0x22>
 8012a9a:	6862      	ldr	r2, [r4, #4]
 8012a9c:	42a3      	cmp	r3, r4
 8012a9e:	bf0c      	ite	eq
 8012aa0:	f8c8 2000 	streq.w	r2, [r8]
 8012aa4:	605a      	strne	r2, [r3, #4]
 8012aa6:	e7eb      	b.n	8012a80 <_malloc_r+0xa8>
 8012aa8:	4623      	mov	r3, r4
 8012aaa:	6864      	ldr	r4, [r4, #4]
 8012aac:	e7ae      	b.n	8012a0c <_malloc_r+0x34>
 8012aae:	463c      	mov	r4, r7
 8012ab0:	687f      	ldr	r7, [r7, #4]
 8012ab2:	e7b6      	b.n	8012a22 <_malloc_r+0x4a>
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	42a3      	cmp	r3, r4
 8012aba:	d1fb      	bne.n	8012ab4 <_malloc_r+0xdc>
 8012abc:	2300      	movs	r3, #0
 8012abe:	6053      	str	r3, [r2, #4]
 8012ac0:	e7de      	b.n	8012a80 <_malloc_r+0xa8>
 8012ac2:	230c      	movs	r3, #12
 8012ac4:	6033      	str	r3, [r6, #0]
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	f000 f80c 	bl	8012ae4 <__malloc_unlock>
 8012acc:	e794      	b.n	80129f8 <_malloc_r+0x20>
 8012ace:	6005      	str	r5, [r0, #0]
 8012ad0:	e7d6      	b.n	8012a80 <_malloc_r+0xa8>
 8012ad2:	bf00      	nop
 8012ad4:	200154c4 	.word	0x200154c4

08012ad8 <__malloc_lock>:
 8012ad8:	4801      	ldr	r0, [pc, #4]	@ (8012ae0 <__malloc_lock+0x8>)
 8012ada:	f000 b9fc 	b.w	8012ed6 <__retarget_lock_acquire_recursive>
 8012ade:	bf00      	nop
 8012ae0:	20015608 	.word	0x20015608

08012ae4 <__malloc_unlock>:
 8012ae4:	4801      	ldr	r0, [pc, #4]	@ (8012aec <__malloc_unlock+0x8>)
 8012ae6:	f000 b9f7 	b.w	8012ed8 <__retarget_lock_release_recursive>
 8012aea:	bf00      	nop
 8012aec:	20015608 	.word	0x20015608

08012af0 <__cxa_atexit>:
 8012af0:	b510      	push	{r4, lr}
 8012af2:	4604      	mov	r4, r0
 8012af4:	4804      	ldr	r0, [pc, #16]	@ (8012b08 <__cxa_atexit+0x18>)
 8012af6:	4613      	mov	r3, r2
 8012af8:	b120      	cbz	r0, 8012b04 <__cxa_atexit+0x14>
 8012afa:	460a      	mov	r2, r1
 8012afc:	2002      	movs	r0, #2
 8012afe:	4621      	mov	r1, r4
 8012b00:	f000 f9fa 	bl	8012ef8 <__register_exitproc>
 8012b04:	bd10      	pop	{r4, pc}
 8012b06:	bf00      	nop
 8012b08:	08012ef9 	.word	0x08012ef9

08012b0c <std>:
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	b510      	push	{r4, lr}
 8012b10:	4604      	mov	r4, r0
 8012b12:	e9c0 3300 	strd	r3, r3, [r0]
 8012b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b1a:	6083      	str	r3, [r0, #8]
 8012b1c:	8181      	strh	r1, [r0, #12]
 8012b1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b20:	81c2      	strh	r2, [r0, #14]
 8012b22:	6183      	str	r3, [r0, #24]
 8012b24:	4619      	mov	r1, r3
 8012b26:	2208      	movs	r2, #8
 8012b28:	305c      	adds	r0, #92	@ 0x5c
 8012b2a:	f000 f906 	bl	8012d3a <memset>
 8012b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b64 <std+0x58>)
 8012b30:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b32:	4b0d      	ldr	r3, [pc, #52]	@ (8012b68 <std+0x5c>)
 8012b34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b36:	4b0d      	ldr	r3, [pc, #52]	@ (8012b6c <std+0x60>)
 8012b38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b70 <std+0x64>)
 8012b3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b74 <std+0x68>)
 8012b40:	6224      	str	r4, [r4, #32]
 8012b42:	429c      	cmp	r4, r3
 8012b44:	d006      	beq.n	8012b54 <std+0x48>
 8012b46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012b4a:	4294      	cmp	r4, r2
 8012b4c:	d002      	beq.n	8012b54 <std+0x48>
 8012b4e:	33d0      	adds	r3, #208	@ 0xd0
 8012b50:	429c      	cmp	r4, r3
 8012b52:	d105      	bne.n	8012b60 <std+0x54>
 8012b54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b5c:	f000 b9ba 	b.w	8012ed4 <__retarget_lock_init_recursive>
 8012b60:	bd10      	pop	{r4, pc}
 8012b62:	bf00      	nop
 8012b64:	08012cb5 	.word	0x08012cb5
 8012b68:	08012cd7 	.word	0x08012cd7
 8012b6c:	08012d0f 	.word	0x08012d0f
 8012b70:	08012d33 	.word	0x08012d33
 8012b74:	200154c8 	.word	0x200154c8

08012b78 <stdio_exit_handler>:
 8012b78:	4a02      	ldr	r2, [pc, #8]	@ (8012b84 <stdio_exit_handler+0xc>)
 8012b7a:	4903      	ldr	r1, [pc, #12]	@ (8012b88 <stdio_exit_handler+0x10>)
 8012b7c:	4803      	ldr	r0, [pc, #12]	@ (8012b8c <stdio_exit_handler+0x14>)
 8012b7e:	f000 b87b 	b.w	8012c78 <_fwalk_sglue>
 8012b82:	bf00      	nop
 8012b84:	20000090 	.word	0x20000090
 8012b88:	080136e9 	.word	0x080136e9
 8012b8c:	200000a0 	.word	0x200000a0

08012b90 <cleanup_stdio>:
 8012b90:	6841      	ldr	r1, [r0, #4]
 8012b92:	4b0c      	ldr	r3, [pc, #48]	@ (8012bc4 <cleanup_stdio+0x34>)
 8012b94:	4299      	cmp	r1, r3
 8012b96:	b510      	push	{r4, lr}
 8012b98:	4604      	mov	r4, r0
 8012b9a:	d001      	beq.n	8012ba0 <cleanup_stdio+0x10>
 8012b9c:	f000 fda4 	bl	80136e8 <_fflush_r>
 8012ba0:	68a1      	ldr	r1, [r4, #8]
 8012ba2:	4b09      	ldr	r3, [pc, #36]	@ (8012bc8 <cleanup_stdio+0x38>)
 8012ba4:	4299      	cmp	r1, r3
 8012ba6:	d002      	beq.n	8012bae <cleanup_stdio+0x1e>
 8012ba8:	4620      	mov	r0, r4
 8012baa:	f000 fd9d 	bl	80136e8 <_fflush_r>
 8012bae:	68e1      	ldr	r1, [r4, #12]
 8012bb0:	4b06      	ldr	r3, [pc, #24]	@ (8012bcc <cleanup_stdio+0x3c>)
 8012bb2:	4299      	cmp	r1, r3
 8012bb4:	d004      	beq.n	8012bc0 <cleanup_stdio+0x30>
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bbc:	f000 bd94 	b.w	80136e8 <_fflush_r>
 8012bc0:	bd10      	pop	{r4, pc}
 8012bc2:	bf00      	nop
 8012bc4:	200154c8 	.word	0x200154c8
 8012bc8:	20015530 	.word	0x20015530
 8012bcc:	20015598 	.word	0x20015598

08012bd0 <global_stdio_init.part.0>:
 8012bd0:	b510      	push	{r4, lr}
 8012bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8012c00 <global_stdio_init.part.0+0x30>)
 8012bd4:	4c0b      	ldr	r4, [pc, #44]	@ (8012c04 <global_stdio_init.part.0+0x34>)
 8012bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8012c08 <global_stdio_init.part.0+0x38>)
 8012bd8:	601a      	str	r2, [r3, #0]
 8012bda:	4620      	mov	r0, r4
 8012bdc:	2200      	movs	r2, #0
 8012bde:	2104      	movs	r1, #4
 8012be0:	f7ff ff94 	bl	8012b0c <std>
 8012be4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012be8:	2201      	movs	r2, #1
 8012bea:	2109      	movs	r1, #9
 8012bec:	f7ff ff8e 	bl	8012b0c <std>
 8012bf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012bf4:	2202      	movs	r2, #2
 8012bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bfa:	2112      	movs	r1, #18
 8012bfc:	f7ff bf86 	b.w	8012b0c <std>
 8012c00:	20015600 	.word	0x20015600
 8012c04:	200154c8 	.word	0x200154c8
 8012c08:	08012b79 	.word	0x08012b79

08012c0c <__sfp_lock_acquire>:
 8012c0c:	4801      	ldr	r0, [pc, #4]	@ (8012c14 <__sfp_lock_acquire+0x8>)
 8012c0e:	f000 b962 	b.w	8012ed6 <__retarget_lock_acquire_recursive>
 8012c12:	bf00      	nop
 8012c14:	2001560a 	.word	0x2001560a

08012c18 <__sfp_lock_release>:
 8012c18:	4801      	ldr	r0, [pc, #4]	@ (8012c20 <__sfp_lock_release+0x8>)
 8012c1a:	f000 b95d 	b.w	8012ed8 <__retarget_lock_release_recursive>
 8012c1e:	bf00      	nop
 8012c20:	2001560a 	.word	0x2001560a

08012c24 <__sinit>:
 8012c24:	b510      	push	{r4, lr}
 8012c26:	4604      	mov	r4, r0
 8012c28:	f7ff fff0 	bl	8012c0c <__sfp_lock_acquire>
 8012c2c:	6a23      	ldr	r3, [r4, #32]
 8012c2e:	b11b      	cbz	r3, 8012c38 <__sinit+0x14>
 8012c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c34:	f7ff bff0 	b.w	8012c18 <__sfp_lock_release>
 8012c38:	4b04      	ldr	r3, [pc, #16]	@ (8012c4c <__sinit+0x28>)
 8012c3a:	6223      	str	r3, [r4, #32]
 8012c3c:	4b04      	ldr	r3, [pc, #16]	@ (8012c50 <__sinit+0x2c>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d1f5      	bne.n	8012c30 <__sinit+0xc>
 8012c44:	f7ff ffc4 	bl	8012bd0 <global_stdio_init.part.0>
 8012c48:	e7f2      	b.n	8012c30 <__sinit+0xc>
 8012c4a:	bf00      	nop
 8012c4c:	08012b91 	.word	0x08012b91
 8012c50:	20015600 	.word	0x20015600

08012c54 <fiprintf>:
 8012c54:	b40e      	push	{r1, r2, r3}
 8012c56:	b503      	push	{r0, r1, lr}
 8012c58:	4601      	mov	r1, r0
 8012c5a:	ab03      	add	r3, sp, #12
 8012c5c:	4805      	ldr	r0, [pc, #20]	@ (8012c74 <fiprintf+0x20>)
 8012c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c62:	6800      	ldr	r0, [r0, #0]
 8012c64:	9301      	str	r3, [sp, #4]
 8012c66:	f000 fa17 	bl	8013098 <_vfiprintf_r>
 8012c6a:	b002      	add	sp, #8
 8012c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c70:	b003      	add	sp, #12
 8012c72:	4770      	bx	lr
 8012c74:	2000009c 	.word	0x2000009c

08012c78 <_fwalk_sglue>:
 8012c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c7c:	4607      	mov	r7, r0
 8012c7e:	4688      	mov	r8, r1
 8012c80:	4614      	mov	r4, r2
 8012c82:	2600      	movs	r6, #0
 8012c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c88:	f1b9 0901 	subs.w	r9, r9, #1
 8012c8c:	d505      	bpl.n	8012c9a <_fwalk_sglue+0x22>
 8012c8e:	6824      	ldr	r4, [r4, #0]
 8012c90:	2c00      	cmp	r4, #0
 8012c92:	d1f7      	bne.n	8012c84 <_fwalk_sglue+0xc>
 8012c94:	4630      	mov	r0, r6
 8012c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c9a:	89ab      	ldrh	r3, [r5, #12]
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d907      	bls.n	8012cb0 <_fwalk_sglue+0x38>
 8012ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	d003      	beq.n	8012cb0 <_fwalk_sglue+0x38>
 8012ca8:	4629      	mov	r1, r5
 8012caa:	4638      	mov	r0, r7
 8012cac:	47c0      	blx	r8
 8012cae:	4306      	orrs	r6, r0
 8012cb0:	3568      	adds	r5, #104	@ 0x68
 8012cb2:	e7e9      	b.n	8012c88 <_fwalk_sglue+0x10>

08012cb4 <__sread>:
 8012cb4:	b510      	push	{r4, lr}
 8012cb6:	460c      	mov	r4, r1
 8012cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cbc:	f000 f898 	bl	8012df0 <_read_r>
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	bfab      	itete	ge
 8012cc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8012cc8:	181b      	addge	r3, r3, r0
 8012cca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012cce:	bfac      	ite	ge
 8012cd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012cd2:	81a3      	strhlt	r3, [r4, #12]
 8012cd4:	bd10      	pop	{r4, pc}

08012cd6 <__swrite>:
 8012cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cda:	461f      	mov	r7, r3
 8012cdc:	898b      	ldrh	r3, [r1, #12]
 8012cde:	05db      	lsls	r3, r3, #23
 8012ce0:	4605      	mov	r5, r0
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	4616      	mov	r6, r2
 8012ce6:	d505      	bpl.n	8012cf4 <__swrite+0x1e>
 8012ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cec:	2302      	movs	r3, #2
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f000 f86c 	bl	8012dcc <_lseek_r>
 8012cf4:	89a3      	ldrh	r3, [r4, #12]
 8012cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012cfe:	81a3      	strh	r3, [r4, #12]
 8012d00:	4632      	mov	r2, r6
 8012d02:	463b      	mov	r3, r7
 8012d04:	4628      	mov	r0, r5
 8012d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0a:	f000 b8a7 	b.w	8012e5c <_write_r>

08012d0e <__sseek>:
 8012d0e:	b510      	push	{r4, lr}
 8012d10:	460c      	mov	r4, r1
 8012d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d16:	f000 f859 	bl	8012dcc <_lseek_r>
 8012d1a:	1c43      	adds	r3, r0, #1
 8012d1c:	89a3      	ldrh	r3, [r4, #12]
 8012d1e:	bf15      	itete	ne
 8012d20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012d22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012d26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012d2a:	81a3      	strheq	r3, [r4, #12]
 8012d2c:	bf18      	it	ne
 8012d2e:	81a3      	strhne	r3, [r4, #12]
 8012d30:	bd10      	pop	{r4, pc}

08012d32 <__sclose>:
 8012d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d36:	f000 b839 	b.w	8012dac <_close_r>

08012d3a <memset>:
 8012d3a:	4402      	add	r2, r0
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	4293      	cmp	r3, r2
 8012d40:	d100      	bne.n	8012d44 <memset+0xa>
 8012d42:	4770      	bx	lr
 8012d44:	f803 1b01 	strb.w	r1, [r3], #1
 8012d48:	e7f9      	b.n	8012d3e <memset+0x4>

08012d4a <_raise_r>:
 8012d4a:	291f      	cmp	r1, #31
 8012d4c:	b538      	push	{r3, r4, r5, lr}
 8012d4e:	4605      	mov	r5, r0
 8012d50:	460c      	mov	r4, r1
 8012d52:	d904      	bls.n	8012d5e <_raise_r+0x14>
 8012d54:	2316      	movs	r3, #22
 8012d56:	6003      	str	r3, [r0, #0]
 8012d58:	f04f 30ff 	mov.w	r0, #4294967295
 8012d5c:	bd38      	pop	{r3, r4, r5, pc}
 8012d5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012d60:	b112      	cbz	r2, 8012d68 <_raise_r+0x1e>
 8012d62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d66:	b94b      	cbnz	r3, 8012d7c <_raise_r+0x32>
 8012d68:	4628      	mov	r0, r5
 8012d6a:	f000 f865 	bl	8012e38 <_getpid_r>
 8012d6e:	4622      	mov	r2, r4
 8012d70:	4601      	mov	r1, r0
 8012d72:	4628      	mov	r0, r5
 8012d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d78:	f000 b84c 	b.w	8012e14 <_kill_r>
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d00a      	beq.n	8012d96 <_raise_r+0x4c>
 8012d80:	1c59      	adds	r1, r3, #1
 8012d82:	d103      	bne.n	8012d8c <_raise_r+0x42>
 8012d84:	2316      	movs	r3, #22
 8012d86:	6003      	str	r3, [r0, #0]
 8012d88:	2001      	movs	r0, #1
 8012d8a:	e7e7      	b.n	8012d5c <_raise_r+0x12>
 8012d8c:	2100      	movs	r1, #0
 8012d8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012d92:	4620      	mov	r0, r4
 8012d94:	4798      	blx	r3
 8012d96:	2000      	movs	r0, #0
 8012d98:	e7e0      	b.n	8012d5c <_raise_r+0x12>
	...

08012d9c <raise>:
 8012d9c:	4b02      	ldr	r3, [pc, #8]	@ (8012da8 <raise+0xc>)
 8012d9e:	4601      	mov	r1, r0
 8012da0:	6818      	ldr	r0, [r3, #0]
 8012da2:	f7ff bfd2 	b.w	8012d4a <_raise_r>
 8012da6:	bf00      	nop
 8012da8:	2000009c 	.word	0x2000009c

08012dac <_close_r>:
 8012dac:	b538      	push	{r3, r4, r5, lr}
 8012dae:	4d06      	ldr	r5, [pc, #24]	@ (8012dc8 <_close_r+0x1c>)
 8012db0:	2300      	movs	r3, #0
 8012db2:	4604      	mov	r4, r0
 8012db4:	4608      	mov	r0, r1
 8012db6:	602b      	str	r3, [r5, #0]
 8012db8:	f7ee fd57 	bl	800186a <_close>
 8012dbc:	1c43      	adds	r3, r0, #1
 8012dbe:	d102      	bne.n	8012dc6 <_close_r+0x1a>
 8012dc0:	682b      	ldr	r3, [r5, #0]
 8012dc2:	b103      	cbz	r3, 8012dc6 <_close_r+0x1a>
 8012dc4:	6023      	str	r3, [r4, #0]
 8012dc6:	bd38      	pop	{r3, r4, r5, pc}
 8012dc8:	20015604 	.word	0x20015604

08012dcc <_lseek_r>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	4d07      	ldr	r5, [pc, #28]	@ (8012dec <_lseek_r+0x20>)
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	4608      	mov	r0, r1
 8012dd4:	4611      	mov	r1, r2
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	602a      	str	r2, [r5, #0]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	f7ee fd4f 	bl	800187e <_lseek>
 8012de0:	1c43      	adds	r3, r0, #1
 8012de2:	d102      	bne.n	8012dea <_lseek_r+0x1e>
 8012de4:	682b      	ldr	r3, [r5, #0]
 8012de6:	b103      	cbz	r3, 8012dea <_lseek_r+0x1e>
 8012de8:	6023      	str	r3, [r4, #0]
 8012dea:	bd38      	pop	{r3, r4, r5, pc}
 8012dec:	20015604 	.word	0x20015604

08012df0 <_read_r>:
 8012df0:	b538      	push	{r3, r4, r5, lr}
 8012df2:	4d07      	ldr	r5, [pc, #28]	@ (8012e10 <_read_r+0x20>)
 8012df4:	4604      	mov	r4, r0
 8012df6:	4608      	mov	r0, r1
 8012df8:	4611      	mov	r1, r2
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	602a      	str	r2, [r5, #0]
 8012dfe:	461a      	mov	r2, r3
 8012e00:	f7ee fd17 	bl	8001832 <_read>
 8012e04:	1c43      	adds	r3, r0, #1
 8012e06:	d102      	bne.n	8012e0e <_read_r+0x1e>
 8012e08:	682b      	ldr	r3, [r5, #0]
 8012e0a:	b103      	cbz	r3, 8012e0e <_read_r+0x1e>
 8012e0c:	6023      	str	r3, [r4, #0]
 8012e0e:	bd38      	pop	{r3, r4, r5, pc}
 8012e10:	20015604 	.word	0x20015604

08012e14 <_kill_r>:
 8012e14:	b538      	push	{r3, r4, r5, lr}
 8012e16:	4d07      	ldr	r5, [pc, #28]	@ (8012e34 <_kill_r+0x20>)
 8012e18:	2300      	movs	r3, #0
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	4608      	mov	r0, r1
 8012e1e:	4611      	mov	r1, r2
 8012e20:	602b      	str	r3, [r5, #0]
 8012e22:	f7ee fcf8 	bl	8001816 <_kill>
 8012e26:	1c43      	adds	r3, r0, #1
 8012e28:	d102      	bne.n	8012e30 <_kill_r+0x1c>
 8012e2a:	682b      	ldr	r3, [r5, #0]
 8012e2c:	b103      	cbz	r3, 8012e30 <_kill_r+0x1c>
 8012e2e:	6023      	str	r3, [r4, #0]
 8012e30:	bd38      	pop	{r3, r4, r5, pc}
 8012e32:	bf00      	nop
 8012e34:	20015604 	.word	0x20015604

08012e38 <_getpid_r>:
 8012e38:	f7ee bceb 	b.w	8001812 <_getpid>

08012e3c <_sbrk_r>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4d06      	ldr	r5, [pc, #24]	@ (8012e58 <_sbrk_r+0x1c>)
 8012e40:	2300      	movs	r3, #0
 8012e42:	4604      	mov	r4, r0
 8012e44:	4608      	mov	r0, r1
 8012e46:	602b      	str	r3, [r5, #0]
 8012e48:	f7ee fd1c 	bl	8001884 <_sbrk>
 8012e4c:	1c43      	adds	r3, r0, #1
 8012e4e:	d102      	bne.n	8012e56 <_sbrk_r+0x1a>
 8012e50:	682b      	ldr	r3, [r5, #0]
 8012e52:	b103      	cbz	r3, 8012e56 <_sbrk_r+0x1a>
 8012e54:	6023      	str	r3, [r4, #0]
 8012e56:	bd38      	pop	{r3, r4, r5, pc}
 8012e58:	20015604 	.word	0x20015604

08012e5c <_write_r>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	4d07      	ldr	r5, [pc, #28]	@ (8012e7c <_write_r+0x20>)
 8012e60:	4604      	mov	r4, r0
 8012e62:	4608      	mov	r0, r1
 8012e64:	4611      	mov	r1, r2
 8012e66:	2200      	movs	r2, #0
 8012e68:	602a      	str	r2, [r5, #0]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	f7ee fcef 	bl	800184e <_write>
 8012e70:	1c43      	adds	r3, r0, #1
 8012e72:	d102      	bne.n	8012e7a <_write_r+0x1e>
 8012e74:	682b      	ldr	r3, [r5, #0]
 8012e76:	b103      	cbz	r3, 8012e7a <_write_r+0x1e>
 8012e78:	6023      	str	r3, [r4, #0]
 8012e7a:	bd38      	pop	{r3, r4, r5, pc}
 8012e7c:	20015604 	.word	0x20015604

08012e80 <__errno>:
 8012e80:	4b01      	ldr	r3, [pc, #4]	@ (8012e88 <__errno+0x8>)
 8012e82:	6818      	ldr	r0, [r3, #0]
 8012e84:	4770      	bx	lr
 8012e86:	bf00      	nop
 8012e88:	2000009c 	.word	0x2000009c

08012e8c <__libc_init_array>:
 8012e8c:	b570      	push	{r4, r5, r6, lr}
 8012e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8012ec4 <__libc_init_array+0x38>)
 8012e90:	4c0d      	ldr	r4, [pc, #52]	@ (8012ec8 <__libc_init_array+0x3c>)
 8012e92:	1b64      	subs	r4, r4, r5
 8012e94:	10a4      	asrs	r4, r4, #2
 8012e96:	2600      	movs	r6, #0
 8012e98:	42a6      	cmp	r6, r4
 8012e9a:	d109      	bne.n	8012eb0 <__libc_init_array+0x24>
 8012e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8012ecc <__libc_init_array+0x40>)
 8012e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8012ed0 <__libc_init_array+0x44>)
 8012ea0:	f000 fd62 	bl	8013968 <_init>
 8012ea4:	1b64      	subs	r4, r4, r5
 8012ea6:	10a4      	asrs	r4, r4, #2
 8012ea8:	2600      	movs	r6, #0
 8012eaa:	42a6      	cmp	r6, r4
 8012eac:	d105      	bne.n	8012eba <__libc_init_array+0x2e>
 8012eae:	bd70      	pop	{r4, r5, r6, pc}
 8012eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012eb4:	4798      	blx	r3
 8012eb6:	3601      	adds	r6, #1
 8012eb8:	e7ee      	b.n	8012e98 <__libc_init_array+0xc>
 8012eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ebe:	4798      	blx	r3
 8012ec0:	3601      	adds	r6, #1
 8012ec2:	e7f2      	b.n	8012eaa <__libc_init_array+0x1e>
 8012ec4:	080efdcc 	.word	0x080efdcc
 8012ec8:	080efdcc 	.word	0x080efdcc
 8012ecc:	080efdcc 	.word	0x080efdcc
 8012ed0:	080efde0 	.word	0x080efde0

08012ed4 <__retarget_lock_init_recursive>:
 8012ed4:	4770      	bx	lr

08012ed6 <__retarget_lock_acquire_recursive>:
 8012ed6:	4770      	bx	lr

08012ed8 <__retarget_lock_release_recursive>:
 8012ed8:	4770      	bx	lr

08012eda <memcpy>:
 8012eda:	440a      	add	r2, r1
 8012edc:	4291      	cmp	r1, r2
 8012ede:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ee2:	d100      	bne.n	8012ee6 <memcpy+0xc>
 8012ee4:	4770      	bx	lr
 8012ee6:	b510      	push	{r4, lr}
 8012ee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ef0:	4291      	cmp	r1, r2
 8012ef2:	d1f9      	bne.n	8012ee8 <memcpy+0xe>
 8012ef4:	bd10      	pop	{r4, pc}
	...

08012ef8 <__register_exitproc>:
 8012ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012efc:	4d27      	ldr	r5, [pc, #156]	@ (8012f9c <__register_exitproc+0xa4>)
 8012efe:	4607      	mov	r7, r0
 8012f00:	6828      	ldr	r0, [r5, #0]
 8012f02:	4691      	mov	r9, r2
 8012f04:	460e      	mov	r6, r1
 8012f06:	4698      	mov	r8, r3
 8012f08:	f7ff ffe5 	bl	8012ed6 <__retarget_lock_acquire_recursive>
 8012f0c:	4a24      	ldr	r2, [pc, #144]	@ (8012fa0 <__register_exitproc+0xa8>)
 8012f0e:	6814      	ldr	r4, [r2, #0]
 8012f10:	b93c      	cbnz	r4, 8012f22 <__register_exitproc+0x2a>
 8012f12:	4b24      	ldr	r3, [pc, #144]	@ (8012fa4 <__register_exitproc+0xac>)
 8012f14:	6013      	str	r3, [r2, #0]
 8012f16:	4a24      	ldr	r2, [pc, #144]	@ (8012fa8 <__register_exitproc+0xb0>)
 8012f18:	b112      	cbz	r2, 8012f20 <__register_exitproc+0x28>
 8012f1a:	6812      	ldr	r2, [r2, #0]
 8012f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8012f20:	4c20      	ldr	r4, [pc, #128]	@ (8012fa4 <__register_exitproc+0xac>)
 8012f22:	6863      	ldr	r3, [r4, #4]
 8012f24:	2b1f      	cmp	r3, #31
 8012f26:	dd06      	ble.n	8012f36 <__register_exitproc+0x3e>
 8012f28:	6828      	ldr	r0, [r5, #0]
 8012f2a:	f7ff ffd5 	bl	8012ed8 <__retarget_lock_release_recursive>
 8012f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f36:	b32f      	cbz	r7, 8012f84 <__register_exitproc+0x8c>
 8012f38:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8012f3c:	b968      	cbnz	r0, 8012f5a <__register_exitproc+0x62>
 8012f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8012fac <__register_exitproc+0xb4>)
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d0f1      	beq.n	8012f28 <__register_exitproc+0x30>
 8012f44:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8012f48:	f7ff fd14 	bl	8012974 <malloc>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	d0eb      	beq.n	8012f28 <__register_exitproc+0x30>
 8012f50:	2300      	movs	r3, #0
 8012f52:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8012f56:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8012f5a:	6863      	ldr	r3, [r4, #4]
 8012f5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8012f60:	2201      	movs	r2, #1
 8012f62:	409a      	lsls	r2, r3
 8012f64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012f68:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8012f72:	2f02      	cmp	r7, #2
 8012f74:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8012f78:	bf02      	ittt	eq
 8012f7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8012f7e:	4313      	orreq	r3, r2
 8012f80:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8012f84:	6863      	ldr	r3, [r4, #4]
 8012f86:	6828      	ldr	r0, [r5, #0]
 8012f88:	1c5a      	adds	r2, r3, #1
 8012f8a:	3302      	adds	r3, #2
 8012f8c:	6062      	str	r2, [r4, #4]
 8012f8e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8012f92:	f7ff ffa1 	bl	8012ed8 <__retarget_lock_release_recursive>
 8012f96:	2000      	movs	r0, #0
 8012f98:	e7cb      	b.n	8012f32 <__register_exitproc+0x3a>
 8012f9a:	bf00      	nop
 8012f9c:	200000ec 	.word	0x200000ec
 8012fa0:	20015698 	.word	0x20015698
 8012fa4:	2001560c 	.word	0x2001560c
 8012fa8:	0801596c 	.word	0x0801596c
 8012fac:	08012975 	.word	0x08012975

08012fb0 <_free_r>:
 8012fb0:	b538      	push	{r3, r4, r5, lr}
 8012fb2:	4605      	mov	r5, r0
 8012fb4:	2900      	cmp	r1, #0
 8012fb6:	d041      	beq.n	801303c <_free_r+0x8c>
 8012fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fbc:	1f0c      	subs	r4, r1, #4
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	bfb8      	it	lt
 8012fc2:	18e4      	addlt	r4, r4, r3
 8012fc4:	f7ff fd88 	bl	8012ad8 <__malloc_lock>
 8012fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8013040 <_free_r+0x90>)
 8012fca:	6813      	ldr	r3, [r2, #0]
 8012fcc:	b933      	cbnz	r3, 8012fdc <_free_r+0x2c>
 8012fce:	6063      	str	r3, [r4, #4]
 8012fd0:	6014      	str	r4, [r2, #0]
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fd8:	f7ff bd84 	b.w	8012ae4 <__malloc_unlock>
 8012fdc:	42a3      	cmp	r3, r4
 8012fde:	d908      	bls.n	8012ff2 <_free_r+0x42>
 8012fe0:	6820      	ldr	r0, [r4, #0]
 8012fe2:	1821      	adds	r1, r4, r0
 8012fe4:	428b      	cmp	r3, r1
 8012fe6:	bf01      	itttt	eq
 8012fe8:	6819      	ldreq	r1, [r3, #0]
 8012fea:	685b      	ldreq	r3, [r3, #4]
 8012fec:	1809      	addeq	r1, r1, r0
 8012fee:	6021      	streq	r1, [r4, #0]
 8012ff0:	e7ed      	b.n	8012fce <_free_r+0x1e>
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	b10b      	cbz	r3, 8012ffc <_free_r+0x4c>
 8012ff8:	42a3      	cmp	r3, r4
 8012ffa:	d9fa      	bls.n	8012ff2 <_free_r+0x42>
 8012ffc:	6811      	ldr	r1, [r2, #0]
 8012ffe:	1850      	adds	r0, r2, r1
 8013000:	42a0      	cmp	r0, r4
 8013002:	d10b      	bne.n	801301c <_free_r+0x6c>
 8013004:	6820      	ldr	r0, [r4, #0]
 8013006:	4401      	add	r1, r0
 8013008:	1850      	adds	r0, r2, r1
 801300a:	4283      	cmp	r3, r0
 801300c:	6011      	str	r1, [r2, #0]
 801300e:	d1e0      	bne.n	8012fd2 <_free_r+0x22>
 8013010:	6818      	ldr	r0, [r3, #0]
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	6053      	str	r3, [r2, #4]
 8013016:	4408      	add	r0, r1
 8013018:	6010      	str	r0, [r2, #0]
 801301a:	e7da      	b.n	8012fd2 <_free_r+0x22>
 801301c:	d902      	bls.n	8013024 <_free_r+0x74>
 801301e:	230c      	movs	r3, #12
 8013020:	602b      	str	r3, [r5, #0]
 8013022:	e7d6      	b.n	8012fd2 <_free_r+0x22>
 8013024:	6820      	ldr	r0, [r4, #0]
 8013026:	1821      	adds	r1, r4, r0
 8013028:	428b      	cmp	r3, r1
 801302a:	bf04      	itt	eq
 801302c:	6819      	ldreq	r1, [r3, #0]
 801302e:	685b      	ldreq	r3, [r3, #4]
 8013030:	6063      	str	r3, [r4, #4]
 8013032:	bf04      	itt	eq
 8013034:	1809      	addeq	r1, r1, r0
 8013036:	6021      	streq	r1, [r4, #0]
 8013038:	6054      	str	r4, [r2, #4]
 801303a:	e7ca      	b.n	8012fd2 <_free_r+0x22>
 801303c:	bd38      	pop	{r3, r4, r5, pc}
 801303e:	bf00      	nop
 8013040:	200154c4 	.word	0x200154c4

08013044 <__sfputc_r>:
 8013044:	6893      	ldr	r3, [r2, #8]
 8013046:	3b01      	subs	r3, #1
 8013048:	2b00      	cmp	r3, #0
 801304a:	b410      	push	{r4}
 801304c:	6093      	str	r3, [r2, #8]
 801304e:	da08      	bge.n	8013062 <__sfputc_r+0x1e>
 8013050:	6994      	ldr	r4, [r2, #24]
 8013052:	42a3      	cmp	r3, r4
 8013054:	db01      	blt.n	801305a <__sfputc_r+0x16>
 8013056:	290a      	cmp	r1, #10
 8013058:	d103      	bne.n	8013062 <__sfputc_r+0x1e>
 801305a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801305e:	f000 bb6b 	b.w	8013738 <__swbuf_r>
 8013062:	6813      	ldr	r3, [r2, #0]
 8013064:	1c58      	adds	r0, r3, #1
 8013066:	6010      	str	r0, [r2, #0]
 8013068:	7019      	strb	r1, [r3, #0]
 801306a:	4608      	mov	r0, r1
 801306c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013070:	4770      	bx	lr

08013072 <__sfputs_r>:
 8013072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013074:	4606      	mov	r6, r0
 8013076:	460f      	mov	r7, r1
 8013078:	4614      	mov	r4, r2
 801307a:	18d5      	adds	r5, r2, r3
 801307c:	42ac      	cmp	r4, r5
 801307e:	d101      	bne.n	8013084 <__sfputs_r+0x12>
 8013080:	2000      	movs	r0, #0
 8013082:	e007      	b.n	8013094 <__sfputs_r+0x22>
 8013084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013088:	463a      	mov	r2, r7
 801308a:	4630      	mov	r0, r6
 801308c:	f7ff ffda 	bl	8013044 <__sfputc_r>
 8013090:	1c43      	adds	r3, r0, #1
 8013092:	d1f3      	bne.n	801307c <__sfputs_r+0xa>
 8013094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013098 <_vfiprintf_r>:
 8013098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309c:	460d      	mov	r5, r1
 801309e:	b09d      	sub	sp, #116	@ 0x74
 80130a0:	4614      	mov	r4, r2
 80130a2:	4698      	mov	r8, r3
 80130a4:	4606      	mov	r6, r0
 80130a6:	b118      	cbz	r0, 80130b0 <_vfiprintf_r+0x18>
 80130a8:	6a03      	ldr	r3, [r0, #32]
 80130aa:	b90b      	cbnz	r3, 80130b0 <_vfiprintf_r+0x18>
 80130ac:	f7ff fdba 	bl	8012c24 <__sinit>
 80130b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130b2:	07d9      	lsls	r1, r3, #31
 80130b4:	d405      	bmi.n	80130c2 <_vfiprintf_r+0x2a>
 80130b6:	89ab      	ldrh	r3, [r5, #12]
 80130b8:	059a      	lsls	r2, r3, #22
 80130ba:	d402      	bmi.n	80130c2 <_vfiprintf_r+0x2a>
 80130bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130be:	f7ff ff0a 	bl	8012ed6 <__retarget_lock_acquire_recursive>
 80130c2:	89ab      	ldrh	r3, [r5, #12]
 80130c4:	071b      	lsls	r3, r3, #28
 80130c6:	d501      	bpl.n	80130cc <_vfiprintf_r+0x34>
 80130c8:	692b      	ldr	r3, [r5, #16]
 80130ca:	b99b      	cbnz	r3, 80130f4 <_vfiprintf_r+0x5c>
 80130cc:	4629      	mov	r1, r5
 80130ce:	4630      	mov	r0, r6
 80130d0:	f000 fb70 	bl	80137b4 <__swsetup_r>
 80130d4:	b170      	cbz	r0, 80130f4 <_vfiprintf_r+0x5c>
 80130d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130d8:	07dc      	lsls	r4, r3, #31
 80130da:	d504      	bpl.n	80130e6 <_vfiprintf_r+0x4e>
 80130dc:	f04f 30ff 	mov.w	r0, #4294967295
 80130e0:	b01d      	add	sp, #116	@ 0x74
 80130e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e6:	89ab      	ldrh	r3, [r5, #12]
 80130e8:	0598      	lsls	r0, r3, #22
 80130ea:	d4f7      	bmi.n	80130dc <_vfiprintf_r+0x44>
 80130ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130ee:	f7ff fef3 	bl	8012ed8 <__retarget_lock_release_recursive>
 80130f2:	e7f3      	b.n	80130dc <_vfiprintf_r+0x44>
 80130f4:	2300      	movs	r3, #0
 80130f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80130f8:	2320      	movs	r3, #32
 80130fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80130fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8013102:	2330      	movs	r3, #48	@ 0x30
 8013104:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80132b4 <_vfiprintf_r+0x21c>
 8013108:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801310c:	f04f 0901 	mov.w	r9, #1
 8013110:	4623      	mov	r3, r4
 8013112:	469a      	mov	sl, r3
 8013114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013118:	b10a      	cbz	r2, 801311e <_vfiprintf_r+0x86>
 801311a:	2a25      	cmp	r2, #37	@ 0x25
 801311c:	d1f9      	bne.n	8013112 <_vfiprintf_r+0x7a>
 801311e:	ebba 0b04 	subs.w	fp, sl, r4
 8013122:	d00b      	beq.n	801313c <_vfiprintf_r+0xa4>
 8013124:	465b      	mov	r3, fp
 8013126:	4622      	mov	r2, r4
 8013128:	4629      	mov	r1, r5
 801312a:	4630      	mov	r0, r6
 801312c:	f7ff ffa1 	bl	8013072 <__sfputs_r>
 8013130:	3001      	adds	r0, #1
 8013132:	f000 80a7 	beq.w	8013284 <_vfiprintf_r+0x1ec>
 8013136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013138:	445a      	add	r2, fp
 801313a:	9209      	str	r2, [sp, #36]	@ 0x24
 801313c:	f89a 3000 	ldrb.w	r3, [sl]
 8013140:	2b00      	cmp	r3, #0
 8013142:	f000 809f 	beq.w	8013284 <_vfiprintf_r+0x1ec>
 8013146:	2300      	movs	r3, #0
 8013148:	f04f 32ff 	mov.w	r2, #4294967295
 801314c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013150:	f10a 0a01 	add.w	sl, sl, #1
 8013154:	9304      	str	r3, [sp, #16]
 8013156:	9307      	str	r3, [sp, #28]
 8013158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801315c:	931a      	str	r3, [sp, #104]	@ 0x68
 801315e:	4654      	mov	r4, sl
 8013160:	2205      	movs	r2, #5
 8013162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013166:	4853      	ldr	r0, [pc, #332]	@ (80132b4 <_vfiprintf_r+0x21c>)
 8013168:	f7ed f842 	bl	80001f0 <memchr>
 801316c:	9a04      	ldr	r2, [sp, #16]
 801316e:	b9d8      	cbnz	r0, 80131a8 <_vfiprintf_r+0x110>
 8013170:	06d1      	lsls	r1, r2, #27
 8013172:	bf44      	itt	mi
 8013174:	2320      	movmi	r3, #32
 8013176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801317a:	0713      	lsls	r3, r2, #28
 801317c:	bf44      	itt	mi
 801317e:	232b      	movmi	r3, #43	@ 0x2b
 8013180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013184:	f89a 3000 	ldrb.w	r3, [sl]
 8013188:	2b2a      	cmp	r3, #42	@ 0x2a
 801318a:	d015      	beq.n	80131b8 <_vfiprintf_r+0x120>
 801318c:	9a07      	ldr	r2, [sp, #28]
 801318e:	4654      	mov	r4, sl
 8013190:	2000      	movs	r0, #0
 8013192:	f04f 0c0a 	mov.w	ip, #10
 8013196:	4621      	mov	r1, r4
 8013198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801319c:	3b30      	subs	r3, #48	@ 0x30
 801319e:	2b09      	cmp	r3, #9
 80131a0:	d94b      	bls.n	801323a <_vfiprintf_r+0x1a2>
 80131a2:	b1b0      	cbz	r0, 80131d2 <_vfiprintf_r+0x13a>
 80131a4:	9207      	str	r2, [sp, #28]
 80131a6:	e014      	b.n	80131d2 <_vfiprintf_r+0x13a>
 80131a8:	eba0 0308 	sub.w	r3, r0, r8
 80131ac:	fa09 f303 	lsl.w	r3, r9, r3
 80131b0:	4313      	orrs	r3, r2
 80131b2:	9304      	str	r3, [sp, #16]
 80131b4:	46a2      	mov	sl, r4
 80131b6:	e7d2      	b.n	801315e <_vfiprintf_r+0xc6>
 80131b8:	9b03      	ldr	r3, [sp, #12]
 80131ba:	1d19      	adds	r1, r3, #4
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	9103      	str	r1, [sp, #12]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	bfbb      	ittet	lt
 80131c4:	425b      	neglt	r3, r3
 80131c6:	f042 0202 	orrlt.w	r2, r2, #2
 80131ca:	9307      	strge	r3, [sp, #28]
 80131cc:	9307      	strlt	r3, [sp, #28]
 80131ce:	bfb8      	it	lt
 80131d0:	9204      	strlt	r2, [sp, #16]
 80131d2:	7823      	ldrb	r3, [r4, #0]
 80131d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80131d6:	d10a      	bne.n	80131ee <_vfiprintf_r+0x156>
 80131d8:	7863      	ldrb	r3, [r4, #1]
 80131da:	2b2a      	cmp	r3, #42	@ 0x2a
 80131dc:	d132      	bne.n	8013244 <_vfiprintf_r+0x1ac>
 80131de:	9b03      	ldr	r3, [sp, #12]
 80131e0:	1d1a      	adds	r2, r3, #4
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	9203      	str	r2, [sp, #12]
 80131e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131ea:	3402      	adds	r4, #2
 80131ec:	9305      	str	r3, [sp, #20]
 80131ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80132c4 <_vfiprintf_r+0x22c>
 80131f2:	7821      	ldrb	r1, [r4, #0]
 80131f4:	2203      	movs	r2, #3
 80131f6:	4650      	mov	r0, sl
 80131f8:	f7ec fffa 	bl	80001f0 <memchr>
 80131fc:	b138      	cbz	r0, 801320e <_vfiprintf_r+0x176>
 80131fe:	9b04      	ldr	r3, [sp, #16]
 8013200:	eba0 000a 	sub.w	r0, r0, sl
 8013204:	2240      	movs	r2, #64	@ 0x40
 8013206:	4082      	lsls	r2, r0
 8013208:	4313      	orrs	r3, r2
 801320a:	3401      	adds	r4, #1
 801320c:	9304      	str	r3, [sp, #16]
 801320e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013212:	4829      	ldr	r0, [pc, #164]	@ (80132b8 <_vfiprintf_r+0x220>)
 8013214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013218:	2206      	movs	r2, #6
 801321a:	f7ec ffe9 	bl	80001f0 <memchr>
 801321e:	2800      	cmp	r0, #0
 8013220:	d03f      	beq.n	80132a2 <_vfiprintf_r+0x20a>
 8013222:	4b26      	ldr	r3, [pc, #152]	@ (80132bc <_vfiprintf_r+0x224>)
 8013224:	bb1b      	cbnz	r3, 801326e <_vfiprintf_r+0x1d6>
 8013226:	9b03      	ldr	r3, [sp, #12]
 8013228:	3307      	adds	r3, #7
 801322a:	f023 0307 	bic.w	r3, r3, #7
 801322e:	3308      	adds	r3, #8
 8013230:	9303      	str	r3, [sp, #12]
 8013232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013234:	443b      	add	r3, r7
 8013236:	9309      	str	r3, [sp, #36]	@ 0x24
 8013238:	e76a      	b.n	8013110 <_vfiprintf_r+0x78>
 801323a:	fb0c 3202 	mla	r2, ip, r2, r3
 801323e:	460c      	mov	r4, r1
 8013240:	2001      	movs	r0, #1
 8013242:	e7a8      	b.n	8013196 <_vfiprintf_r+0xfe>
 8013244:	2300      	movs	r3, #0
 8013246:	3401      	adds	r4, #1
 8013248:	9305      	str	r3, [sp, #20]
 801324a:	4619      	mov	r1, r3
 801324c:	f04f 0c0a 	mov.w	ip, #10
 8013250:	4620      	mov	r0, r4
 8013252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013256:	3a30      	subs	r2, #48	@ 0x30
 8013258:	2a09      	cmp	r2, #9
 801325a:	d903      	bls.n	8013264 <_vfiprintf_r+0x1cc>
 801325c:	2b00      	cmp	r3, #0
 801325e:	d0c6      	beq.n	80131ee <_vfiprintf_r+0x156>
 8013260:	9105      	str	r1, [sp, #20]
 8013262:	e7c4      	b.n	80131ee <_vfiprintf_r+0x156>
 8013264:	fb0c 2101 	mla	r1, ip, r1, r2
 8013268:	4604      	mov	r4, r0
 801326a:	2301      	movs	r3, #1
 801326c:	e7f0      	b.n	8013250 <_vfiprintf_r+0x1b8>
 801326e:	ab03      	add	r3, sp, #12
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	462a      	mov	r2, r5
 8013274:	4b12      	ldr	r3, [pc, #72]	@ (80132c0 <_vfiprintf_r+0x228>)
 8013276:	a904      	add	r1, sp, #16
 8013278:	4630      	mov	r0, r6
 801327a:	f3af 8000 	nop.w
 801327e:	4607      	mov	r7, r0
 8013280:	1c78      	adds	r0, r7, #1
 8013282:	d1d6      	bne.n	8013232 <_vfiprintf_r+0x19a>
 8013284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013286:	07d9      	lsls	r1, r3, #31
 8013288:	d405      	bmi.n	8013296 <_vfiprintf_r+0x1fe>
 801328a:	89ab      	ldrh	r3, [r5, #12]
 801328c:	059a      	lsls	r2, r3, #22
 801328e:	d402      	bmi.n	8013296 <_vfiprintf_r+0x1fe>
 8013290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013292:	f7ff fe21 	bl	8012ed8 <__retarget_lock_release_recursive>
 8013296:	89ab      	ldrh	r3, [r5, #12]
 8013298:	065b      	lsls	r3, r3, #25
 801329a:	f53f af1f 	bmi.w	80130dc <_vfiprintf_r+0x44>
 801329e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80132a0:	e71e      	b.n	80130e0 <_vfiprintf_r+0x48>
 80132a2:	ab03      	add	r3, sp, #12
 80132a4:	9300      	str	r3, [sp, #0]
 80132a6:	462a      	mov	r2, r5
 80132a8:	4b05      	ldr	r3, [pc, #20]	@ (80132c0 <_vfiprintf_r+0x228>)
 80132aa:	a904      	add	r1, sp, #16
 80132ac:	4630      	mov	r0, r6
 80132ae:	f000 f879 	bl	80133a4 <_printf_i>
 80132b2:	e7e4      	b.n	801327e <_vfiprintf_r+0x1e6>
 80132b4:	080147dd 	.word	0x080147dd
 80132b8:	080147e7 	.word	0x080147e7
 80132bc:	00000000 	.word	0x00000000
 80132c0:	08013073 	.word	0x08013073
 80132c4:	080147e3 	.word	0x080147e3

080132c8 <_printf_common>:
 80132c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132cc:	4616      	mov	r6, r2
 80132ce:	4698      	mov	r8, r3
 80132d0:	688a      	ldr	r2, [r1, #8]
 80132d2:	690b      	ldr	r3, [r1, #16]
 80132d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80132d8:	4293      	cmp	r3, r2
 80132da:	bfb8      	it	lt
 80132dc:	4613      	movlt	r3, r2
 80132de:	6033      	str	r3, [r6, #0]
 80132e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80132e4:	4607      	mov	r7, r0
 80132e6:	460c      	mov	r4, r1
 80132e8:	b10a      	cbz	r2, 80132ee <_printf_common+0x26>
 80132ea:	3301      	adds	r3, #1
 80132ec:	6033      	str	r3, [r6, #0]
 80132ee:	6823      	ldr	r3, [r4, #0]
 80132f0:	0699      	lsls	r1, r3, #26
 80132f2:	bf42      	ittt	mi
 80132f4:	6833      	ldrmi	r3, [r6, #0]
 80132f6:	3302      	addmi	r3, #2
 80132f8:	6033      	strmi	r3, [r6, #0]
 80132fa:	6825      	ldr	r5, [r4, #0]
 80132fc:	f015 0506 	ands.w	r5, r5, #6
 8013300:	d106      	bne.n	8013310 <_printf_common+0x48>
 8013302:	f104 0a19 	add.w	sl, r4, #25
 8013306:	68e3      	ldr	r3, [r4, #12]
 8013308:	6832      	ldr	r2, [r6, #0]
 801330a:	1a9b      	subs	r3, r3, r2
 801330c:	42ab      	cmp	r3, r5
 801330e:	dc26      	bgt.n	801335e <_printf_common+0x96>
 8013310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013314:	6822      	ldr	r2, [r4, #0]
 8013316:	3b00      	subs	r3, #0
 8013318:	bf18      	it	ne
 801331a:	2301      	movne	r3, #1
 801331c:	0692      	lsls	r2, r2, #26
 801331e:	d42b      	bmi.n	8013378 <_printf_common+0xb0>
 8013320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013324:	4641      	mov	r1, r8
 8013326:	4638      	mov	r0, r7
 8013328:	47c8      	blx	r9
 801332a:	3001      	adds	r0, #1
 801332c:	d01e      	beq.n	801336c <_printf_common+0xa4>
 801332e:	6823      	ldr	r3, [r4, #0]
 8013330:	6922      	ldr	r2, [r4, #16]
 8013332:	f003 0306 	and.w	r3, r3, #6
 8013336:	2b04      	cmp	r3, #4
 8013338:	bf02      	ittt	eq
 801333a:	68e5      	ldreq	r5, [r4, #12]
 801333c:	6833      	ldreq	r3, [r6, #0]
 801333e:	1aed      	subeq	r5, r5, r3
 8013340:	68a3      	ldr	r3, [r4, #8]
 8013342:	bf0c      	ite	eq
 8013344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013348:	2500      	movne	r5, #0
 801334a:	4293      	cmp	r3, r2
 801334c:	bfc4      	itt	gt
 801334e:	1a9b      	subgt	r3, r3, r2
 8013350:	18ed      	addgt	r5, r5, r3
 8013352:	2600      	movs	r6, #0
 8013354:	341a      	adds	r4, #26
 8013356:	42b5      	cmp	r5, r6
 8013358:	d11a      	bne.n	8013390 <_printf_common+0xc8>
 801335a:	2000      	movs	r0, #0
 801335c:	e008      	b.n	8013370 <_printf_common+0xa8>
 801335e:	2301      	movs	r3, #1
 8013360:	4652      	mov	r2, sl
 8013362:	4641      	mov	r1, r8
 8013364:	4638      	mov	r0, r7
 8013366:	47c8      	blx	r9
 8013368:	3001      	adds	r0, #1
 801336a:	d103      	bne.n	8013374 <_printf_common+0xac>
 801336c:	f04f 30ff 	mov.w	r0, #4294967295
 8013370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013374:	3501      	adds	r5, #1
 8013376:	e7c6      	b.n	8013306 <_printf_common+0x3e>
 8013378:	18e1      	adds	r1, r4, r3
 801337a:	1c5a      	adds	r2, r3, #1
 801337c:	2030      	movs	r0, #48	@ 0x30
 801337e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013382:	4422      	add	r2, r4
 8013384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801338c:	3302      	adds	r3, #2
 801338e:	e7c7      	b.n	8013320 <_printf_common+0x58>
 8013390:	2301      	movs	r3, #1
 8013392:	4622      	mov	r2, r4
 8013394:	4641      	mov	r1, r8
 8013396:	4638      	mov	r0, r7
 8013398:	47c8      	blx	r9
 801339a:	3001      	adds	r0, #1
 801339c:	d0e6      	beq.n	801336c <_printf_common+0xa4>
 801339e:	3601      	adds	r6, #1
 80133a0:	e7d9      	b.n	8013356 <_printf_common+0x8e>
	...

080133a4 <_printf_i>:
 80133a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133a8:	7e0f      	ldrb	r7, [r1, #24]
 80133aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80133ac:	2f78      	cmp	r7, #120	@ 0x78
 80133ae:	4691      	mov	r9, r2
 80133b0:	4680      	mov	r8, r0
 80133b2:	460c      	mov	r4, r1
 80133b4:	469a      	mov	sl, r3
 80133b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80133ba:	d807      	bhi.n	80133cc <_printf_i+0x28>
 80133bc:	2f62      	cmp	r7, #98	@ 0x62
 80133be:	d80a      	bhi.n	80133d6 <_printf_i+0x32>
 80133c0:	2f00      	cmp	r7, #0
 80133c2:	f000 80d1 	beq.w	8013568 <_printf_i+0x1c4>
 80133c6:	2f58      	cmp	r7, #88	@ 0x58
 80133c8:	f000 80b8 	beq.w	801353c <_printf_i+0x198>
 80133cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80133d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80133d4:	e03a      	b.n	801344c <_printf_i+0xa8>
 80133d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80133da:	2b15      	cmp	r3, #21
 80133dc:	d8f6      	bhi.n	80133cc <_printf_i+0x28>
 80133de:	a101      	add	r1, pc, #4	@ (adr r1, 80133e4 <_printf_i+0x40>)
 80133e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80133e4:	0801343d 	.word	0x0801343d
 80133e8:	08013451 	.word	0x08013451
 80133ec:	080133cd 	.word	0x080133cd
 80133f0:	080133cd 	.word	0x080133cd
 80133f4:	080133cd 	.word	0x080133cd
 80133f8:	080133cd 	.word	0x080133cd
 80133fc:	08013451 	.word	0x08013451
 8013400:	080133cd 	.word	0x080133cd
 8013404:	080133cd 	.word	0x080133cd
 8013408:	080133cd 	.word	0x080133cd
 801340c:	080133cd 	.word	0x080133cd
 8013410:	0801354f 	.word	0x0801354f
 8013414:	0801347b 	.word	0x0801347b
 8013418:	08013509 	.word	0x08013509
 801341c:	080133cd 	.word	0x080133cd
 8013420:	080133cd 	.word	0x080133cd
 8013424:	08013571 	.word	0x08013571
 8013428:	080133cd 	.word	0x080133cd
 801342c:	0801347b 	.word	0x0801347b
 8013430:	080133cd 	.word	0x080133cd
 8013434:	080133cd 	.word	0x080133cd
 8013438:	08013511 	.word	0x08013511
 801343c:	6833      	ldr	r3, [r6, #0]
 801343e:	1d1a      	adds	r2, r3, #4
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	6032      	str	r2, [r6, #0]
 8013444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801344c:	2301      	movs	r3, #1
 801344e:	e09c      	b.n	801358a <_printf_i+0x1e6>
 8013450:	6833      	ldr	r3, [r6, #0]
 8013452:	6820      	ldr	r0, [r4, #0]
 8013454:	1d19      	adds	r1, r3, #4
 8013456:	6031      	str	r1, [r6, #0]
 8013458:	0606      	lsls	r6, r0, #24
 801345a:	d501      	bpl.n	8013460 <_printf_i+0xbc>
 801345c:	681d      	ldr	r5, [r3, #0]
 801345e:	e003      	b.n	8013468 <_printf_i+0xc4>
 8013460:	0645      	lsls	r5, r0, #25
 8013462:	d5fb      	bpl.n	801345c <_printf_i+0xb8>
 8013464:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013468:	2d00      	cmp	r5, #0
 801346a:	da03      	bge.n	8013474 <_printf_i+0xd0>
 801346c:	232d      	movs	r3, #45	@ 0x2d
 801346e:	426d      	negs	r5, r5
 8013470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013474:	4858      	ldr	r0, [pc, #352]	@ (80135d8 <_printf_i+0x234>)
 8013476:	230a      	movs	r3, #10
 8013478:	e011      	b.n	801349e <_printf_i+0xfa>
 801347a:	6821      	ldr	r1, [r4, #0]
 801347c:	6833      	ldr	r3, [r6, #0]
 801347e:	0608      	lsls	r0, r1, #24
 8013480:	f853 5b04 	ldr.w	r5, [r3], #4
 8013484:	d402      	bmi.n	801348c <_printf_i+0xe8>
 8013486:	0649      	lsls	r1, r1, #25
 8013488:	bf48      	it	mi
 801348a:	b2ad      	uxthmi	r5, r5
 801348c:	2f6f      	cmp	r7, #111	@ 0x6f
 801348e:	4852      	ldr	r0, [pc, #328]	@ (80135d8 <_printf_i+0x234>)
 8013490:	6033      	str	r3, [r6, #0]
 8013492:	bf14      	ite	ne
 8013494:	230a      	movne	r3, #10
 8013496:	2308      	moveq	r3, #8
 8013498:	2100      	movs	r1, #0
 801349a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801349e:	6866      	ldr	r6, [r4, #4]
 80134a0:	60a6      	str	r6, [r4, #8]
 80134a2:	2e00      	cmp	r6, #0
 80134a4:	db05      	blt.n	80134b2 <_printf_i+0x10e>
 80134a6:	6821      	ldr	r1, [r4, #0]
 80134a8:	432e      	orrs	r6, r5
 80134aa:	f021 0104 	bic.w	r1, r1, #4
 80134ae:	6021      	str	r1, [r4, #0]
 80134b0:	d04b      	beq.n	801354a <_printf_i+0x1a6>
 80134b2:	4616      	mov	r6, r2
 80134b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80134b8:	fb03 5711 	mls	r7, r3, r1, r5
 80134bc:	5dc7      	ldrb	r7, [r0, r7]
 80134be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80134c2:	462f      	mov	r7, r5
 80134c4:	42bb      	cmp	r3, r7
 80134c6:	460d      	mov	r5, r1
 80134c8:	d9f4      	bls.n	80134b4 <_printf_i+0x110>
 80134ca:	2b08      	cmp	r3, #8
 80134cc:	d10b      	bne.n	80134e6 <_printf_i+0x142>
 80134ce:	6823      	ldr	r3, [r4, #0]
 80134d0:	07df      	lsls	r7, r3, #31
 80134d2:	d508      	bpl.n	80134e6 <_printf_i+0x142>
 80134d4:	6923      	ldr	r3, [r4, #16]
 80134d6:	6861      	ldr	r1, [r4, #4]
 80134d8:	4299      	cmp	r1, r3
 80134da:	bfde      	ittt	le
 80134dc:	2330      	movle	r3, #48	@ 0x30
 80134de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80134e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80134e6:	1b92      	subs	r2, r2, r6
 80134e8:	6122      	str	r2, [r4, #16]
 80134ea:	f8cd a000 	str.w	sl, [sp]
 80134ee:	464b      	mov	r3, r9
 80134f0:	aa03      	add	r2, sp, #12
 80134f2:	4621      	mov	r1, r4
 80134f4:	4640      	mov	r0, r8
 80134f6:	f7ff fee7 	bl	80132c8 <_printf_common>
 80134fa:	3001      	adds	r0, #1
 80134fc:	d14a      	bne.n	8013594 <_printf_i+0x1f0>
 80134fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013502:	b004      	add	sp, #16
 8013504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013508:	6823      	ldr	r3, [r4, #0]
 801350a:	f043 0320 	orr.w	r3, r3, #32
 801350e:	6023      	str	r3, [r4, #0]
 8013510:	4832      	ldr	r0, [pc, #200]	@ (80135dc <_printf_i+0x238>)
 8013512:	2778      	movs	r7, #120	@ 0x78
 8013514:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013518:	6823      	ldr	r3, [r4, #0]
 801351a:	6831      	ldr	r1, [r6, #0]
 801351c:	061f      	lsls	r7, r3, #24
 801351e:	f851 5b04 	ldr.w	r5, [r1], #4
 8013522:	d402      	bmi.n	801352a <_printf_i+0x186>
 8013524:	065f      	lsls	r7, r3, #25
 8013526:	bf48      	it	mi
 8013528:	b2ad      	uxthmi	r5, r5
 801352a:	6031      	str	r1, [r6, #0]
 801352c:	07d9      	lsls	r1, r3, #31
 801352e:	bf44      	itt	mi
 8013530:	f043 0320 	orrmi.w	r3, r3, #32
 8013534:	6023      	strmi	r3, [r4, #0]
 8013536:	b11d      	cbz	r5, 8013540 <_printf_i+0x19c>
 8013538:	2310      	movs	r3, #16
 801353a:	e7ad      	b.n	8013498 <_printf_i+0xf4>
 801353c:	4826      	ldr	r0, [pc, #152]	@ (80135d8 <_printf_i+0x234>)
 801353e:	e7e9      	b.n	8013514 <_printf_i+0x170>
 8013540:	6823      	ldr	r3, [r4, #0]
 8013542:	f023 0320 	bic.w	r3, r3, #32
 8013546:	6023      	str	r3, [r4, #0]
 8013548:	e7f6      	b.n	8013538 <_printf_i+0x194>
 801354a:	4616      	mov	r6, r2
 801354c:	e7bd      	b.n	80134ca <_printf_i+0x126>
 801354e:	6833      	ldr	r3, [r6, #0]
 8013550:	6825      	ldr	r5, [r4, #0]
 8013552:	6961      	ldr	r1, [r4, #20]
 8013554:	1d18      	adds	r0, r3, #4
 8013556:	6030      	str	r0, [r6, #0]
 8013558:	062e      	lsls	r6, r5, #24
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	d501      	bpl.n	8013562 <_printf_i+0x1be>
 801355e:	6019      	str	r1, [r3, #0]
 8013560:	e002      	b.n	8013568 <_printf_i+0x1c4>
 8013562:	0668      	lsls	r0, r5, #25
 8013564:	d5fb      	bpl.n	801355e <_printf_i+0x1ba>
 8013566:	8019      	strh	r1, [r3, #0]
 8013568:	2300      	movs	r3, #0
 801356a:	6123      	str	r3, [r4, #16]
 801356c:	4616      	mov	r6, r2
 801356e:	e7bc      	b.n	80134ea <_printf_i+0x146>
 8013570:	6833      	ldr	r3, [r6, #0]
 8013572:	1d1a      	adds	r2, r3, #4
 8013574:	6032      	str	r2, [r6, #0]
 8013576:	681e      	ldr	r6, [r3, #0]
 8013578:	6862      	ldr	r2, [r4, #4]
 801357a:	2100      	movs	r1, #0
 801357c:	4630      	mov	r0, r6
 801357e:	f7ec fe37 	bl	80001f0 <memchr>
 8013582:	b108      	cbz	r0, 8013588 <_printf_i+0x1e4>
 8013584:	1b80      	subs	r0, r0, r6
 8013586:	6060      	str	r0, [r4, #4]
 8013588:	6863      	ldr	r3, [r4, #4]
 801358a:	6123      	str	r3, [r4, #16]
 801358c:	2300      	movs	r3, #0
 801358e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013592:	e7aa      	b.n	80134ea <_printf_i+0x146>
 8013594:	6923      	ldr	r3, [r4, #16]
 8013596:	4632      	mov	r2, r6
 8013598:	4649      	mov	r1, r9
 801359a:	4640      	mov	r0, r8
 801359c:	47d0      	blx	sl
 801359e:	3001      	adds	r0, #1
 80135a0:	d0ad      	beq.n	80134fe <_printf_i+0x15a>
 80135a2:	6823      	ldr	r3, [r4, #0]
 80135a4:	079b      	lsls	r3, r3, #30
 80135a6:	d413      	bmi.n	80135d0 <_printf_i+0x22c>
 80135a8:	68e0      	ldr	r0, [r4, #12]
 80135aa:	9b03      	ldr	r3, [sp, #12]
 80135ac:	4298      	cmp	r0, r3
 80135ae:	bfb8      	it	lt
 80135b0:	4618      	movlt	r0, r3
 80135b2:	e7a6      	b.n	8013502 <_printf_i+0x15e>
 80135b4:	2301      	movs	r3, #1
 80135b6:	4632      	mov	r2, r6
 80135b8:	4649      	mov	r1, r9
 80135ba:	4640      	mov	r0, r8
 80135bc:	47d0      	blx	sl
 80135be:	3001      	adds	r0, #1
 80135c0:	d09d      	beq.n	80134fe <_printf_i+0x15a>
 80135c2:	3501      	adds	r5, #1
 80135c4:	68e3      	ldr	r3, [r4, #12]
 80135c6:	9903      	ldr	r1, [sp, #12]
 80135c8:	1a5b      	subs	r3, r3, r1
 80135ca:	42ab      	cmp	r3, r5
 80135cc:	dcf2      	bgt.n	80135b4 <_printf_i+0x210>
 80135ce:	e7eb      	b.n	80135a8 <_printf_i+0x204>
 80135d0:	2500      	movs	r5, #0
 80135d2:	f104 0619 	add.w	r6, r4, #25
 80135d6:	e7f5      	b.n	80135c4 <_printf_i+0x220>
 80135d8:	080147ee 	.word	0x080147ee
 80135dc:	080147ff 	.word	0x080147ff

080135e0 <__sflush_r>:
 80135e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135e8:	0716      	lsls	r6, r2, #28
 80135ea:	4605      	mov	r5, r0
 80135ec:	460c      	mov	r4, r1
 80135ee:	d454      	bmi.n	801369a <__sflush_r+0xba>
 80135f0:	684b      	ldr	r3, [r1, #4]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	dc02      	bgt.n	80135fc <__sflush_r+0x1c>
 80135f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	dd48      	ble.n	801368e <__sflush_r+0xae>
 80135fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80135fe:	2e00      	cmp	r6, #0
 8013600:	d045      	beq.n	801368e <__sflush_r+0xae>
 8013602:	2300      	movs	r3, #0
 8013604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013608:	682f      	ldr	r7, [r5, #0]
 801360a:	6a21      	ldr	r1, [r4, #32]
 801360c:	602b      	str	r3, [r5, #0]
 801360e:	d030      	beq.n	8013672 <__sflush_r+0x92>
 8013610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013612:	89a3      	ldrh	r3, [r4, #12]
 8013614:	0759      	lsls	r1, r3, #29
 8013616:	d505      	bpl.n	8013624 <__sflush_r+0x44>
 8013618:	6863      	ldr	r3, [r4, #4]
 801361a:	1ad2      	subs	r2, r2, r3
 801361c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801361e:	b10b      	cbz	r3, 8013624 <__sflush_r+0x44>
 8013620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013622:	1ad2      	subs	r2, r2, r3
 8013624:	2300      	movs	r3, #0
 8013626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013628:	6a21      	ldr	r1, [r4, #32]
 801362a:	4628      	mov	r0, r5
 801362c:	47b0      	blx	r6
 801362e:	1c43      	adds	r3, r0, #1
 8013630:	89a3      	ldrh	r3, [r4, #12]
 8013632:	d106      	bne.n	8013642 <__sflush_r+0x62>
 8013634:	6829      	ldr	r1, [r5, #0]
 8013636:	291d      	cmp	r1, #29
 8013638:	d82b      	bhi.n	8013692 <__sflush_r+0xb2>
 801363a:	4a2a      	ldr	r2, [pc, #168]	@ (80136e4 <__sflush_r+0x104>)
 801363c:	40ca      	lsrs	r2, r1
 801363e:	07d6      	lsls	r6, r2, #31
 8013640:	d527      	bpl.n	8013692 <__sflush_r+0xb2>
 8013642:	2200      	movs	r2, #0
 8013644:	6062      	str	r2, [r4, #4]
 8013646:	04d9      	lsls	r1, r3, #19
 8013648:	6922      	ldr	r2, [r4, #16]
 801364a:	6022      	str	r2, [r4, #0]
 801364c:	d504      	bpl.n	8013658 <__sflush_r+0x78>
 801364e:	1c42      	adds	r2, r0, #1
 8013650:	d101      	bne.n	8013656 <__sflush_r+0x76>
 8013652:	682b      	ldr	r3, [r5, #0]
 8013654:	b903      	cbnz	r3, 8013658 <__sflush_r+0x78>
 8013656:	6560      	str	r0, [r4, #84]	@ 0x54
 8013658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801365a:	602f      	str	r7, [r5, #0]
 801365c:	b1b9      	cbz	r1, 801368e <__sflush_r+0xae>
 801365e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013662:	4299      	cmp	r1, r3
 8013664:	d002      	beq.n	801366c <__sflush_r+0x8c>
 8013666:	4628      	mov	r0, r5
 8013668:	f7ff fca2 	bl	8012fb0 <_free_r>
 801366c:	2300      	movs	r3, #0
 801366e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013670:	e00d      	b.n	801368e <__sflush_r+0xae>
 8013672:	2301      	movs	r3, #1
 8013674:	4628      	mov	r0, r5
 8013676:	47b0      	blx	r6
 8013678:	4602      	mov	r2, r0
 801367a:	1c50      	adds	r0, r2, #1
 801367c:	d1c9      	bne.n	8013612 <__sflush_r+0x32>
 801367e:	682b      	ldr	r3, [r5, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d0c6      	beq.n	8013612 <__sflush_r+0x32>
 8013684:	2b1d      	cmp	r3, #29
 8013686:	d001      	beq.n	801368c <__sflush_r+0xac>
 8013688:	2b16      	cmp	r3, #22
 801368a:	d11e      	bne.n	80136ca <__sflush_r+0xea>
 801368c:	602f      	str	r7, [r5, #0]
 801368e:	2000      	movs	r0, #0
 8013690:	e022      	b.n	80136d8 <__sflush_r+0xf8>
 8013692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013696:	b21b      	sxth	r3, r3
 8013698:	e01b      	b.n	80136d2 <__sflush_r+0xf2>
 801369a:	690f      	ldr	r7, [r1, #16]
 801369c:	2f00      	cmp	r7, #0
 801369e:	d0f6      	beq.n	801368e <__sflush_r+0xae>
 80136a0:	0793      	lsls	r3, r2, #30
 80136a2:	680e      	ldr	r6, [r1, #0]
 80136a4:	bf08      	it	eq
 80136a6:	694b      	ldreq	r3, [r1, #20]
 80136a8:	600f      	str	r7, [r1, #0]
 80136aa:	bf18      	it	ne
 80136ac:	2300      	movne	r3, #0
 80136ae:	eba6 0807 	sub.w	r8, r6, r7
 80136b2:	608b      	str	r3, [r1, #8]
 80136b4:	f1b8 0f00 	cmp.w	r8, #0
 80136b8:	dde9      	ble.n	801368e <__sflush_r+0xae>
 80136ba:	6a21      	ldr	r1, [r4, #32]
 80136bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80136be:	4643      	mov	r3, r8
 80136c0:	463a      	mov	r2, r7
 80136c2:	4628      	mov	r0, r5
 80136c4:	47b0      	blx	r6
 80136c6:	2800      	cmp	r0, #0
 80136c8:	dc08      	bgt.n	80136dc <__sflush_r+0xfc>
 80136ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136d2:	81a3      	strh	r3, [r4, #12]
 80136d4:	f04f 30ff 	mov.w	r0, #4294967295
 80136d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136dc:	4407      	add	r7, r0
 80136de:	eba8 0800 	sub.w	r8, r8, r0
 80136e2:	e7e7      	b.n	80136b4 <__sflush_r+0xd4>
 80136e4:	20400001 	.word	0x20400001

080136e8 <_fflush_r>:
 80136e8:	b538      	push	{r3, r4, r5, lr}
 80136ea:	690b      	ldr	r3, [r1, #16]
 80136ec:	4605      	mov	r5, r0
 80136ee:	460c      	mov	r4, r1
 80136f0:	b913      	cbnz	r3, 80136f8 <_fflush_r+0x10>
 80136f2:	2500      	movs	r5, #0
 80136f4:	4628      	mov	r0, r5
 80136f6:	bd38      	pop	{r3, r4, r5, pc}
 80136f8:	b118      	cbz	r0, 8013702 <_fflush_r+0x1a>
 80136fa:	6a03      	ldr	r3, [r0, #32]
 80136fc:	b90b      	cbnz	r3, 8013702 <_fflush_r+0x1a>
 80136fe:	f7ff fa91 	bl	8012c24 <__sinit>
 8013702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d0f3      	beq.n	80136f2 <_fflush_r+0xa>
 801370a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801370c:	07d0      	lsls	r0, r2, #31
 801370e:	d404      	bmi.n	801371a <_fflush_r+0x32>
 8013710:	0599      	lsls	r1, r3, #22
 8013712:	d402      	bmi.n	801371a <_fflush_r+0x32>
 8013714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013716:	f7ff fbde 	bl	8012ed6 <__retarget_lock_acquire_recursive>
 801371a:	4628      	mov	r0, r5
 801371c:	4621      	mov	r1, r4
 801371e:	f7ff ff5f 	bl	80135e0 <__sflush_r>
 8013722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013724:	07da      	lsls	r2, r3, #31
 8013726:	4605      	mov	r5, r0
 8013728:	d4e4      	bmi.n	80136f4 <_fflush_r+0xc>
 801372a:	89a3      	ldrh	r3, [r4, #12]
 801372c:	059b      	lsls	r3, r3, #22
 801372e:	d4e1      	bmi.n	80136f4 <_fflush_r+0xc>
 8013730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013732:	f7ff fbd1 	bl	8012ed8 <__retarget_lock_release_recursive>
 8013736:	e7dd      	b.n	80136f4 <_fflush_r+0xc>

08013738 <__swbuf_r>:
 8013738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801373a:	460e      	mov	r6, r1
 801373c:	4614      	mov	r4, r2
 801373e:	4605      	mov	r5, r0
 8013740:	b118      	cbz	r0, 801374a <__swbuf_r+0x12>
 8013742:	6a03      	ldr	r3, [r0, #32]
 8013744:	b90b      	cbnz	r3, 801374a <__swbuf_r+0x12>
 8013746:	f7ff fa6d 	bl	8012c24 <__sinit>
 801374a:	69a3      	ldr	r3, [r4, #24]
 801374c:	60a3      	str	r3, [r4, #8]
 801374e:	89a3      	ldrh	r3, [r4, #12]
 8013750:	071a      	lsls	r2, r3, #28
 8013752:	d501      	bpl.n	8013758 <__swbuf_r+0x20>
 8013754:	6923      	ldr	r3, [r4, #16]
 8013756:	b943      	cbnz	r3, 801376a <__swbuf_r+0x32>
 8013758:	4621      	mov	r1, r4
 801375a:	4628      	mov	r0, r5
 801375c:	f000 f82a 	bl	80137b4 <__swsetup_r>
 8013760:	b118      	cbz	r0, 801376a <__swbuf_r+0x32>
 8013762:	f04f 37ff 	mov.w	r7, #4294967295
 8013766:	4638      	mov	r0, r7
 8013768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801376a:	6823      	ldr	r3, [r4, #0]
 801376c:	6922      	ldr	r2, [r4, #16]
 801376e:	1a98      	subs	r0, r3, r2
 8013770:	6963      	ldr	r3, [r4, #20]
 8013772:	b2f6      	uxtb	r6, r6
 8013774:	4283      	cmp	r3, r0
 8013776:	4637      	mov	r7, r6
 8013778:	dc05      	bgt.n	8013786 <__swbuf_r+0x4e>
 801377a:	4621      	mov	r1, r4
 801377c:	4628      	mov	r0, r5
 801377e:	f7ff ffb3 	bl	80136e8 <_fflush_r>
 8013782:	2800      	cmp	r0, #0
 8013784:	d1ed      	bne.n	8013762 <__swbuf_r+0x2a>
 8013786:	68a3      	ldr	r3, [r4, #8]
 8013788:	3b01      	subs	r3, #1
 801378a:	60a3      	str	r3, [r4, #8]
 801378c:	6823      	ldr	r3, [r4, #0]
 801378e:	1c5a      	adds	r2, r3, #1
 8013790:	6022      	str	r2, [r4, #0]
 8013792:	701e      	strb	r6, [r3, #0]
 8013794:	6962      	ldr	r2, [r4, #20]
 8013796:	1c43      	adds	r3, r0, #1
 8013798:	429a      	cmp	r2, r3
 801379a:	d004      	beq.n	80137a6 <__swbuf_r+0x6e>
 801379c:	89a3      	ldrh	r3, [r4, #12]
 801379e:	07db      	lsls	r3, r3, #31
 80137a0:	d5e1      	bpl.n	8013766 <__swbuf_r+0x2e>
 80137a2:	2e0a      	cmp	r6, #10
 80137a4:	d1df      	bne.n	8013766 <__swbuf_r+0x2e>
 80137a6:	4621      	mov	r1, r4
 80137a8:	4628      	mov	r0, r5
 80137aa:	f7ff ff9d 	bl	80136e8 <_fflush_r>
 80137ae:	2800      	cmp	r0, #0
 80137b0:	d0d9      	beq.n	8013766 <__swbuf_r+0x2e>
 80137b2:	e7d6      	b.n	8013762 <__swbuf_r+0x2a>

080137b4 <__swsetup_r>:
 80137b4:	b538      	push	{r3, r4, r5, lr}
 80137b6:	4b29      	ldr	r3, [pc, #164]	@ (801385c <__swsetup_r+0xa8>)
 80137b8:	4605      	mov	r5, r0
 80137ba:	6818      	ldr	r0, [r3, #0]
 80137bc:	460c      	mov	r4, r1
 80137be:	b118      	cbz	r0, 80137c8 <__swsetup_r+0x14>
 80137c0:	6a03      	ldr	r3, [r0, #32]
 80137c2:	b90b      	cbnz	r3, 80137c8 <__swsetup_r+0x14>
 80137c4:	f7ff fa2e 	bl	8012c24 <__sinit>
 80137c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137cc:	0719      	lsls	r1, r3, #28
 80137ce:	d422      	bmi.n	8013816 <__swsetup_r+0x62>
 80137d0:	06da      	lsls	r2, r3, #27
 80137d2:	d407      	bmi.n	80137e4 <__swsetup_r+0x30>
 80137d4:	2209      	movs	r2, #9
 80137d6:	602a      	str	r2, [r5, #0]
 80137d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137dc:	81a3      	strh	r3, [r4, #12]
 80137de:	f04f 30ff 	mov.w	r0, #4294967295
 80137e2:	e033      	b.n	801384c <__swsetup_r+0x98>
 80137e4:	0758      	lsls	r0, r3, #29
 80137e6:	d512      	bpl.n	801380e <__swsetup_r+0x5a>
 80137e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137ea:	b141      	cbz	r1, 80137fe <__swsetup_r+0x4a>
 80137ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137f0:	4299      	cmp	r1, r3
 80137f2:	d002      	beq.n	80137fa <__swsetup_r+0x46>
 80137f4:	4628      	mov	r0, r5
 80137f6:	f7ff fbdb 	bl	8012fb0 <_free_r>
 80137fa:	2300      	movs	r3, #0
 80137fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80137fe:	89a3      	ldrh	r3, [r4, #12]
 8013800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013804:	81a3      	strh	r3, [r4, #12]
 8013806:	2300      	movs	r3, #0
 8013808:	6063      	str	r3, [r4, #4]
 801380a:	6923      	ldr	r3, [r4, #16]
 801380c:	6023      	str	r3, [r4, #0]
 801380e:	89a3      	ldrh	r3, [r4, #12]
 8013810:	f043 0308 	orr.w	r3, r3, #8
 8013814:	81a3      	strh	r3, [r4, #12]
 8013816:	6923      	ldr	r3, [r4, #16]
 8013818:	b94b      	cbnz	r3, 801382e <__swsetup_r+0x7a>
 801381a:	89a3      	ldrh	r3, [r4, #12]
 801381c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013824:	d003      	beq.n	801382e <__swsetup_r+0x7a>
 8013826:	4621      	mov	r1, r4
 8013828:	4628      	mov	r0, r5
 801382a:	f000 f83f 	bl	80138ac <__smakebuf_r>
 801382e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013832:	f013 0201 	ands.w	r2, r3, #1
 8013836:	d00a      	beq.n	801384e <__swsetup_r+0x9a>
 8013838:	2200      	movs	r2, #0
 801383a:	60a2      	str	r2, [r4, #8]
 801383c:	6962      	ldr	r2, [r4, #20]
 801383e:	4252      	negs	r2, r2
 8013840:	61a2      	str	r2, [r4, #24]
 8013842:	6922      	ldr	r2, [r4, #16]
 8013844:	b942      	cbnz	r2, 8013858 <__swsetup_r+0xa4>
 8013846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801384a:	d1c5      	bne.n	80137d8 <__swsetup_r+0x24>
 801384c:	bd38      	pop	{r3, r4, r5, pc}
 801384e:	0799      	lsls	r1, r3, #30
 8013850:	bf58      	it	pl
 8013852:	6962      	ldrpl	r2, [r4, #20]
 8013854:	60a2      	str	r2, [r4, #8]
 8013856:	e7f4      	b.n	8013842 <__swsetup_r+0x8e>
 8013858:	2000      	movs	r0, #0
 801385a:	e7f7      	b.n	801384c <__swsetup_r+0x98>
 801385c:	2000009c 	.word	0x2000009c

08013860 <__swhatbuf_r>:
 8013860:	b570      	push	{r4, r5, r6, lr}
 8013862:	460c      	mov	r4, r1
 8013864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013868:	2900      	cmp	r1, #0
 801386a:	b096      	sub	sp, #88	@ 0x58
 801386c:	4615      	mov	r5, r2
 801386e:	461e      	mov	r6, r3
 8013870:	da0d      	bge.n	801388e <__swhatbuf_r+0x2e>
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013878:	f04f 0100 	mov.w	r1, #0
 801387c:	bf14      	ite	ne
 801387e:	2340      	movne	r3, #64	@ 0x40
 8013880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013884:	2000      	movs	r0, #0
 8013886:	6031      	str	r1, [r6, #0]
 8013888:	602b      	str	r3, [r5, #0]
 801388a:	b016      	add	sp, #88	@ 0x58
 801388c:	bd70      	pop	{r4, r5, r6, pc}
 801388e:	466a      	mov	r2, sp
 8013890:	f000 f848 	bl	8013924 <_fstat_r>
 8013894:	2800      	cmp	r0, #0
 8013896:	dbec      	blt.n	8013872 <__swhatbuf_r+0x12>
 8013898:	9901      	ldr	r1, [sp, #4]
 801389a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801389e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80138a2:	4259      	negs	r1, r3
 80138a4:	4159      	adcs	r1, r3
 80138a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80138aa:	e7eb      	b.n	8013884 <__swhatbuf_r+0x24>

080138ac <__smakebuf_r>:
 80138ac:	898b      	ldrh	r3, [r1, #12]
 80138ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138b0:	079d      	lsls	r5, r3, #30
 80138b2:	4606      	mov	r6, r0
 80138b4:	460c      	mov	r4, r1
 80138b6:	d507      	bpl.n	80138c8 <__smakebuf_r+0x1c>
 80138b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80138bc:	6023      	str	r3, [r4, #0]
 80138be:	6123      	str	r3, [r4, #16]
 80138c0:	2301      	movs	r3, #1
 80138c2:	6163      	str	r3, [r4, #20]
 80138c4:	b003      	add	sp, #12
 80138c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c8:	ab01      	add	r3, sp, #4
 80138ca:	466a      	mov	r2, sp
 80138cc:	f7ff ffc8 	bl	8013860 <__swhatbuf_r>
 80138d0:	9f00      	ldr	r7, [sp, #0]
 80138d2:	4605      	mov	r5, r0
 80138d4:	4639      	mov	r1, r7
 80138d6:	4630      	mov	r0, r6
 80138d8:	f7ff f87e 	bl	80129d8 <_malloc_r>
 80138dc:	b948      	cbnz	r0, 80138f2 <__smakebuf_r+0x46>
 80138de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138e2:	059a      	lsls	r2, r3, #22
 80138e4:	d4ee      	bmi.n	80138c4 <__smakebuf_r+0x18>
 80138e6:	f023 0303 	bic.w	r3, r3, #3
 80138ea:	f043 0302 	orr.w	r3, r3, #2
 80138ee:	81a3      	strh	r3, [r4, #12]
 80138f0:	e7e2      	b.n	80138b8 <__smakebuf_r+0xc>
 80138f2:	89a3      	ldrh	r3, [r4, #12]
 80138f4:	6020      	str	r0, [r4, #0]
 80138f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138fa:	81a3      	strh	r3, [r4, #12]
 80138fc:	9b01      	ldr	r3, [sp, #4]
 80138fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013902:	b15b      	cbz	r3, 801391c <__smakebuf_r+0x70>
 8013904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013908:	4630      	mov	r0, r6
 801390a:	f000 f81d 	bl	8013948 <_isatty_r>
 801390e:	b128      	cbz	r0, 801391c <__smakebuf_r+0x70>
 8013910:	89a3      	ldrh	r3, [r4, #12]
 8013912:	f023 0303 	bic.w	r3, r3, #3
 8013916:	f043 0301 	orr.w	r3, r3, #1
 801391a:	81a3      	strh	r3, [r4, #12]
 801391c:	89a3      	ldrh	r3, [r4, #12]
 801391e:	431d      	orrs	r5, r3
 8013920:	81a5      	strh	r5, [r4, #12]
 8013922:	e7cf      	b.n	80138c4 <__smakebuf_r+0x18>

08013924 <_fstat_r>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4d07      	ldr	r5, [pc, #28]	@ (8013944 <_fstat_r+0x20>)
 8013928:	2300      	movs	r3, #0
 801392a:	4604      	mov	r4, r0
 801392c:	4608      	mov	r0, r1
 801392e:	4611      	mov	r1, r2
 8013930:	602b      	str	r3, [r5, #0]
 8013932:	f7ed ff9d 	bl	8001870 <_fstat>
 8013936:	1c43      	adds	r3, r0, #1
 8013938:	d102      	bne.n	8013940 <_fstat_r+0x1c>
 801393a:	682b      	ldr	r3, [r5, #0]
 801393c:	b103      	cbz	r3, 8013940 <_fstat_r+0x1c>
 801393e:	6023      	str	r3, [r4, #0]
 8013940:	bd38      	pop	{r3, r4, r5, pc}
 8013942:	bf00      	nop
 8013944:	20015604 	.word	0x20015604

08013948 <_isatty_r>:
 8013948:	b538      	push	{r3, r4, r5, lr}
 801394a:	4d06      	ldr	r5, [pc, #24]	@ (8013964 <_isatty_r+0x1c>)
 801394c:	2300      	movs	r3, #0
 801394e:	4604      	mov	r4, r0
 8013950:	4608      	mov	r0, r1
 8013952:	602b      	str	r3, [r5, #0]
 8013954:	f7ed ff91 	bl	800187a <_isatty>
 8013958:	1c43      	adds	r3, r0, #1
 801395a:	d102      	bne.n	8013962 <_isatty_r+0x1a>
 801395c:	682b      	ldr	r3, [r5, #0]
 801395e:	b103      	cbz	r3, 8013962 <_isatty_r+0x1a>
 8013960:	6023      	str	r3, [r4, #0]
 8013962:	bd38      	pop	{r3, r4, r5, pc}
 8013964:	20015604 	.word	0x20015604

08013968 <_init>:
 8013968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801396a:	bf00      	nop
 801396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801396e:	bc08      	pop	{r3}
 8013970:	469e      	mov	lr, r3
 8013972:	4770      	bx	lr

08013974 <_fini>:
 8013974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013976:	bf00      	nop
 8013978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801397a:	bc08      	pop	{r3}
 801397c:	469e      	mov	lr, r3
 801397e:	4770      	bx	lr
