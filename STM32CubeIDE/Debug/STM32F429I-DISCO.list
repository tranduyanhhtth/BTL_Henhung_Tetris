
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013df4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc0  08013fa4  08013fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0004289a  08015f64  08015f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000002e8  08058800  08058800  00059800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000096  08058ae8  08058ae8  00059ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 00097838  08058b80  08058b80  00059b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080f03b8  080f03b8  000f20f4  2**0
                  CONTENTS
  8 .ARM          00000008  080f03b8  080f03b8  000f13b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080f03c0  080f03c0  000f20f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080f03c0  080f03c0  000f13c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080f03d4  080f03d4  000f13d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f4  20000000  080f03dc  000f2000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000156c4  200000f4  080f04d0  000f20f4  2**2
                  ALLOC
 14 ._user_heap_stack 00001400  200157b8  080f04d0  000f27b8  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000f20f4  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000f3000  2**2
                  ALLOC
 17 .debug_line   00055a8a  00000000  00000000  000f2124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005d  00000000  00000000  00147bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000ba112  00000000  00000000  00147c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00014dc5  00000000  00000000  00201d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003190  00000000  00000000  00216ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00113661  00000000  00000000  00219c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 0000396b  00000000  00000000  0032d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0001da86  00000000  00000000  00330c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00010ff1  00000000  00000000  0034e6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0035f6bb  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00008d14  00000000  00000000  0035f780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013f8c 	.word	0x08013f8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	08013f8c 	.word	0x08013f8c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c2:	e003      	b.n	80005cc <LoopCopyDataInit>

080005c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ca:	3104      	adds	r1, #4

080005cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d4:	d3f6      	bcc.n	80005c4 <CopyDataInit>
  ldr  r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d8:	e002      	b.n	80005e0 <LoopFillZerobss>

080005da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005dc:	f842 3b04 	str.w	r3, [r2], #4

080005e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e4:	d3f9      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e6:	f004 f9dd 	bl	80049a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f012 ff61 	bl	80134b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f000 fc3d 	bl	8000e6c <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005f8:	080f03dc 	.word	0x080f03dc
  ldr  r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000600:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 8000604:	200000f4 	.word	0x200000f4
  ldr  r3, = _ebss
 8000608:	200157b8 	.word	0x200157b8

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <_ZN12TetrisEngine17generateNextBlockEv>:
    //random khối mới
    spawnBlock();
}

//tạo khối mới
void TetrisEngine::generateNextBlock() {
 8000610:	b538      	push	{r3, r4, r5, lr}
 8000612:	4604      	mov	r4, r0
    nextBlockId = osKernelGetTickCount() % 7;	//lấy next box dựa trên tick hệ thống
 8000614:	f006 fd4e 	bl	80070b4 <osKernelGetTickCount>
 8000618:	2307      	movs	r3, #7
 800061a:	fbb0 f3f3 	udiv	r3, r0, r3
 800061e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000622:	1ac0      	subs	r0, r0, r3
 8000624:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
    nextBlockSize = (nextBlockId == 0) ? 4 : 3;
 8000628:	b310      	cbz	r0, 8000670 <_ZN12TetrisEngine17generateNextBlockEv+0x60>
    nextBlockSize = (nextBlockId == 1) ? 2 : nextBlockSize;
 800062a:	2801      	cmp	r0, #1
 800062c:	bf14      	ite	ne
 800062e:	2303      	movne	r3, #3
 8000630:	2302      	moveq	r3, #2
 8000632:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
    nextBlockColor = osKernelGetTickCount() % 7;
 8000636:	f006 fd3d 	bl	80070b4 <osKernelGetTickCount>
 800063a:	2307      	movs	r3, #7
 800063c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000640:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            nextBlock[i][j] = Tetrominoes[nextBlockId][i][j]; //đánh dấu các ô có thể hiển thị cho next block
 8000644:	f8d4 237c 	ldr.w	r2, [r4, #892]	@ 0x37c
    nextBlockColor = osKernelGetTickCount() % 7;
 8000648:	1ac0      	subs	r0, r0, r3
            nextBlock[i][j] = Tetrominoes[nextBlockId][i][j]; //đánh dấu các ô có thể hiển thị cho next block
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <_ZN12TetrisEngine17generateNextBlockEv+0x64>)
    nextBlockColor = osKernelGetTickCount() % 7;
 800064c:	f8c4 03c4 	str.w	r0, [r4, #964]	@ 0x3c4
            nextBlock[i][j] = Tetrominoes[nextBlockId][i][j]; //đánh dấu các ô có thể hiển thị cho next block
 8000650:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8000654:	f504 7460 	add.w	r4, r4, #896	@ 0x380
 8000658:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 800065c:	461a      	mov	r2, r3
 800065e:	ca03      	ldmia	r2!, {r0, r1}
 8000660:	42aa      	cmp	r2, r5
 8000662:	6020      	str	r0, [r4, #0]
 8000664:	6061      	str	r1, [r4, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	f104 0408 	add.w	r4, r4, #8
 800066c:	d1f6      	bne.n	800065c <_ZN12TetrisEngine17generateNextBlockEv+0x4c>
}
 800066e:	bd38      	pop	{r3, r4, r5, pc}
    nextBlockSize = (nextBlockId == 0) ? 4 : 3;
 8000670:	2304      	movs	r3, #4
 8000672:	e7de      	b.n	8000632 <_ZN12TetrisEngine17generateNextBlockEv+0x22>
 8000674:	08013ff4 	.word	0x08013ff4

08000678 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERiRt>:

//get next block (gán nextBlock và size nextBlock cho tham số truyền vào)
void TetrisEngine::getNextBlock(BlockMatrix& block, int& size, uint16_t& color) const {
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
	block = nextBlock;
 800067a:	f500 7560 	add.w	r5, r0, #896	@ 0x380
void TetrisEngine::getNextBlock(BlockMatrix& block, int& size, uint16_t& color) const {
 800067e:	4606      	mov	r6, r0
 8000680:	4694      	mov	ip, r2
 8000682:	461f      	mov	r7, r3
	block = nextBlock;
 8000684:	460c      	mov	r4, r1
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	size = nextBlockSize;
 800069a:	f8d6 3378 	ldr.w	r3, [r6, #888]	@ 0x378
 800069e:	f8cc 3000 	str.w	r3, [ip]
	color = ColorPallette[nextBlockColor];
 80006a2:	f8d6 23c4 	ldr.w	r2, [r6, #964]	@ 0x3c4
 80006a6:	4b02      	ldr	r3, [pc, #8]	@ (80006b0 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERiRt+0x38>)
 80006a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006ac:	803b      	strh	r3, [r7, #0]
}
 80006ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b0:	08013fe4 	.word	0x08013fe4

080006b4 <_ZN12TetrisEngine10spawnBlockEv>:

//gán khối mới cho khối hiện tại
void TetrisEngine::spawnBlock() {
    if (nextBlockId == -1) generateNextBlock(); // Spawn đầu
 80006b4:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 80006b8:	3301      	adds	r3, #1
void TetrisEngine::spawnBlock() {
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
    if (nextBlockId == -1) generateNextBlock(); // Spawn đầu
 80006be:	d101      	bne.n	80006c4 <_ZN12TetrisEngine10spawnBlockEv+0x10>
 80006c0:	f7ff ffa6 	bl	8000610 <_ZN12TetrisEngine17generateNextBlockEv>
    for (int i = 0; i < 4; ++i)
 80006c4:	4623      	mov	r3, r4
 80006c6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
        for (int j = 0; j < 4; ++j)
            currBlock[i][j] = nextBlock[i][j];	//gán nextBlock cho currBlock
 80006ca:	f8d3 1380 	ldr.w	r1, [r3, #896]	@ 0x380
 80006ce:	f8c3 1320 	str.w	r1, [r3, #800]	@ 0x320
 80006d2:	f8d3 1384 	ldr.w	r1, [r3, #900]	@ 0x384
 80006d6:	f8c3 1324 	str.w	r1, [r3, #804]	@ 0x324
 80006da:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80006de:	f8c3 1328 	str.w	r1, [r3, #808]	@ 0x328
 80006e2:	f8d3 138c 	ldr.w	r1, [r3, #908]	@ 0x38c
 80006e6:	f8c3 132c 	str.w	r1, [r3, #812]	@ 0x32c
    for (int i = 0; i < 4; ++i)
 80006ea:	3310      	adds	r3, #16
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d1ec      	bne.n	80006ca <_ZN12TetrisEngine10spawnBlockEv+0x16>
    blockSize = nextBlockSize;
 80006f0:	f8d4 3378 	ldr.w	r3, [r4, #888]	@ 0x378
 80006f4:	f8c4 3368 	str.w	r3, [r4, #872]	@ 0x368
    currBlockColor = nextBlockColor;

    //bắt đầu rơi tại vị trí giữa trên cùng
    currX = (GRID_WIDTH - blockSize) / 2;
 80006f8:	f1c3 030a 	rsb	r3, r3, #10
 80006fc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000700:	105b      	asrs	r3, r3, #1
    currBlockColor = nextBlockColor;
 8000702:	f8d4 23c4 	ldr.w	r2, [r4, #964]	@ 0x3c4
    currX = (GRID_WIDTH - blockSize) / 2;
 8000706:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    currY = 0;
 800070a:	2300      	movs	r3, #0
    currBlockColor = nextBlockColor;
 800070c:	f8c4 23c0 	str.w	r2, [r4, #960]	@ 0x3c0
    currY = 0;
 8000710:	f8c4 3364 	str.w	r3, [r4, #868]	@ 0x364
    generateNextBlock(); // Tạo khối tiếp theo
 8000714:	4620      	mov	r0, r4
}
 8000716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    generateNextBlock(); // Tạo khối tiếp theo
 800071a:	f7ff bf79 	b.w	8000610 <_ZN12TetrisEngine17generateNextBlockEv>

0800071e <_ZN12TetrisEngine4initEv>:
void TetrisEngine::init() {
 800071e:	b510      	push	{r4, lr}
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 8000720:	4603      	mov	r3, r0
 8000722:	4604      	mov	r4, r0
      { return iterator(data() + _Nm); }
 8000724:	f500 7148 	add.w	r1, r0, #800	@ 0x320
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
 8000728:	2000      	movs	r0, #0
    for (auto& row : grid) row.fill(0);
 800072a:	428b      	cmp	r3, r1
 800072c:	d112      	bne.n	8000754 <_ZN12TetrisEngine4initEv+0x36>
    gameOver = false;
 800072e:	2300      	movs	r3, #0
	nextBlockId = -1;
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
	generateNextBlock();
 8000734:	4620      	mov	r0, r4
    gameOver = false;
 8000736:	f884 336c 	strb.w	r3, [r4, #876]	@ 0x36c
    score = 0;
 800073a:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
	nextBlockId = -1;
 800073e:	f8c4 237c 	str.w	r2, [r4, #892]	@ 0x37c
	nextBlockColor = 0;
 8000742:	f8c4 33c4 	str.w	r3, [r4, #964]	@ 0x3c4
	generateNextBlock();
 8000746:	f7ff ff63 	bl	8000610 <_ZN12TetrisEngine17generateNextBlockEv>
    spawnBlock();
 800074a:	4620      	mov	r0, r4
}
 800074c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spawnBlock();
 8000750:	f7ff bfb0 	b.w	80006b4 <_ZN12TetrisEngine10spawnBlockEv>
      { return static_cast<pointer>(_M_elems); }
 8000754:	461a      	mov	r2, r3
      if (__n <= 0)
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 8000756:	3328      	adds	r3, #40	@ 0x28
      for (; __first != __last; ++__first)
 8000758:	4293      	cmp	r3, r2
 800075a:	d0e6      	beq.n	800072a <_ZN12TetrisEngine4initEv+0xc>
	*__first = __tmp;
 800075c:	f842 0b04 	str.w	r0, [r2], #4
 8000760:	e7fa      	b.n	8000758 <_ZN12TetrisEngine4initEv+0x3a>

08000762 <_ZN12TetrisEngineC1Ev>:
TetrisEngine::TetrisEngine() {
 8000762:	b510      	push	{r4, lr}
 8000764:	4604      	mov	r4, r0
	init();
 8000766:	f7ff ffda 	bl	800071e <_ZN12TetrisEngine4initEv>
}
 800076a:	4620      	mov	r0, r4
 800076c:	bd10      	pop	{r4, pc}

0800076e <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE>:

//xoay block
void TetrisEngine::rotateMatrix(BlockMatrix& mat) {
 800076e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000770:	4605      	mov	r5, r0
 8000772:	b091      	sub	sp, #68	@ 0x44
 8000774:	460c      	mov	r4, r1
    BlockMatrix temp = {};
 8000776:	2240      	movs	r2, #64	@ 0x40
 8000778:	2100      	movs	r1, #0
 800077a:	4668      	mov	r0, sp
 800077c:	f012 fdef 	bl	801335e <memset>
    for (int i = 0; i < blockSize; ++i)
 8000780:	f8d5 2368 	ldr.w	r2, [r5, #872]	@ 0x368
 8000784:	2300      	movs	r3, #0
 8000786:	eb0d 0182 	add.w	r1, sp, r2, lsl #2
 800078a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800078e:	429a      	cmp	r2, r3
 8000790:	dc0c      	bgt.n	80007ac <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x3e>
        for (int j = 0; j < blockSize; ++j)
            temp[j][blockSize - 1 - i] = mat[i][j];
    mat = temp;
 8000792:	466d      	mov	r5, sp
 8000794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80007a8:	b011      	add	sp, #68	@ 0x44
 80007aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ac:	eb04 1503 	add.w	r5, r4, r3, lsl #4
    for (int i = 0; i < blockSize; ++i)
 80007b0:	460e      	mov	r6, r1
            temp[j][blockSize - 1 - i] = mat[i][j];
 80007b2:	f855 7b04 	ldr.w	r7, [r5], #4
 80007b6:	f846 7c04 	str.w	r7, [r6, #-4]
        for (int j = 0; j < blockSize; ++j)
 80007ba:	4285      	cmp	r5, r0
 80007bc:	f106 0610 	add.w	r6, r6, #16
 80007c0:	d1f7      	bne.n	80007b2 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x44>
    for (int i = 0; i < blockSize; ++i)
 80007c2:	3301      	adds	r3, #1
 80007c4:	3904      	subs	r1, #4
 80007c6:	3010      	adds	r0, #16
 80007c8:	e7e1      	b.n	800078e <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x20>

080007ca <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>:

//lấy đường biên của block (hình chữ nhật nhỏ nhất chứa được toàn bộ block)
void TetrisEngine::getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY) {
 80007ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    minX = blockSize; maxX = 0; minY = blockSize; maxY = 0;
 80007cc:	f8d0 4368 	ldr.w	r4, [r0, #872]	@ 0x368
 80007d0:	6014      	str	r4, [r2, #0]
void TetrisEngine::getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY) {
 80007d2:	e9dd 6c05 	ldrd	r6, ip, [sp, #20]
    minX = blockSize; maxX = 0; minY = blockSize; maxY = 0;
 80007d6:	2400      	movs	r4, #0
 80007d8:	601c      	str	r4, [r3, #0]
 80007da:	f8d0 5368 	ldr.w	r5, [r0, #872]	@ 0x368
 80007de:	6035      	str	r5, [r6, #0]
 80007e0:	f8cc 4000 	str.w	r4, [ip]
    for (int i = 0; i < blockSize; ++i)
 80007e4:	f8d0 5368 	ldr.w	r5, [r0, #872]	@ 0x368
 80007e8:	42a5      	cmp	r5, r4
 80007ea:	dd1f      	ble.n	800082c <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x62>
 80007ec:	eb01 1e04 	add.w	lr, r1, r4, lsl #4
        for (int j = 0; j < blockSize; ++j)
 80007f0:	2500      	movs	r5, #0
 80007f2:	e015      	b.n	8000820 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x56>
            if (block[i][j]) {
 80007f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80007f8:	b18f      	cbz	r7, 800081e <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x54>
                if (j < minX) minX = j;
 80007fa:	6817      	ldr	r7, [r2, #0]
 80007fc:	42af      	cmp	r7, r5
 80007fe:	bfc8      	it	gt
 8000800:	6015      	strgt	r5, [r2, #0]
                if (j > maxX) maxX = j;
 8000802:	681f      	ldr	r7, [r3, #0]
 8000804:	42af      	cmp	r7, r5
 8000806:	bfb8      	it	lt
 8000808:	601d      	strlt	r5, [r3, #0]
                if (i < minY) minY = i;
 800080a:	6837      	ldr	r7, [r6, #0]
 800080c:	42a7      	cmp	r7, r4
 800080e:	bfc8      	it	gt
 8000810:	6034      	strgt	r4, [r6, #0]
                if (i > maxY) maxY = i;
 8000812:	f8dc 7000 	ldr.w	r7, [ip]
 8000816:	42a7      	cmp	r7, r4
 8000818:	bfb8      	it	lt
 800081a:	f8cc 4000 	strlt.w	r4, [ip]
        for (int j = 0; j < blockSize; ++j)
 800081e:	3501      	adds	r5, #1
 8000820:	f8d0 7368 	ldr.w	r7, [r0, #872]	@ 0x368
 8000824:	42af      	cmp	r7, r5
 8000826:	dce5      	bgt.n	80007f4 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x2a>
    for (int i = 0; i < blockSize; ++i)
 8000828:	3401      	adds	r4, #1
 800082a:	e7db      	b.n	80007e4 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x1a>
            }
}
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800082e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>:

//kiểm tra va trạm
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 800082e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000832:	b087      	sub	sp, #28
 8000834:	460e      	mov	r6, r1
 8000836:	4619      	mov	r1, r3
    int minX, maxX, minY, maxY;

    //lấy bao ngoài của block
    getBlockBounds(block, minX, maxX, minY, maxY);
 8000838:	ab05      	add	r3, sp, #20
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	ab04      	add	r3, sp, #16
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 800083e:	4614      	mov	r4, r2
    getBlockBounds(block, minX, maxX, minY, maxY);
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	aa02      	add	r2, sp, #8
 8000844:	ab03      	add	r3, sp, #12
 8000846:	f7ff ffc0 	bl	80007ca <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 800084a:	4605      	mov	r5, r0
    for (int i = minY; i <= maxY; ++i)
 800084c:	e9dd 0e04 	ldrd	r0, lr, [sp, #16]
        for (int j = minX; j <= maxX; ++j)
 8000850:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8000854:	1902      	adds	r2, r0, r4
 8000856:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800085a:	f04f 0828 	mov.w	r8, #40	@ 0x28
    for (int i = minY; i <= maxY; ++i)
 800085e:	4586      	cmp	lr, r0
 8000860:	db1c      	blt.n	800089c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x6e>
 8000862:	eb01 1900 	add.w	r9, r1, r0, lsl #4
 8000866:	fb08 5702 	mla	r7, r8, r2, r5
        for (int j = minX; j <= maxX; ++j)
 800086a:	465c      	mov	r4, fp
 800086c:	e00d      	b.n	800088a <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x5c>
            if (block[i][j]) {
 800086e:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 8000872:	b14b      	cbz	r3, 8000888 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x5a>
                int gx = newX + j;
                int gy = newY + i;

                //ra ngoài hoặc ô đã được đặt -> va chạm -> return true
                if (gx < 0 || gx >= GRID_WIDTH || gy < 0 || gy >= GRID_HEIGHT) return true;
 8000874:	eb04 0a06 	add.w	sl, r4, r6
 8000878:	f1ba 0f09 	cmp.w	sl, #9
 800087c:	d80a      	bhi.n	8000894 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
 800087e:	2a13      	cmp	r2, #19
 8000880:	d808      	bhi.n	8000894 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
                if (grid[gy][gx]) return true;
 8000882:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8000886:	b92b      	cbnz	r3, 8000894 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
        for (int j = minX; j <= maxX; ++j)
 8000888:	3401      	adds	r4, #1
 800088a:	45a4      	cmp	ip, r4
 800088c:	daef      	bge.n	800086e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x40>
    for (int i = minY; i <= maxY; ++i)
 800088e:	3001      	adds	r0, #1
 8000890:	3201      	adds	r2, #1
 8000892:	e7e4      	b.n	800085e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x30>
                if (gx < 0 || gx >= GRID_WIDTH || gy < 0 || gy >= GRID_HEIGHT) return true;
 8000894:	2001      	movs	r0, #1
            }
    return false;
}
 8000896:	b007      	add	sp, #28
 8000898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
 800089c:	2000      	movs	r0, #0
 800089e:	e7fa      	b.n	8000896 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x68>

080008a0 <_ZN12TetrisEngine10clearLinesEv>:
    clearLines();
    spawnBlock();
}

//xóa line nếu full
void TetrisEngine::clearLines() {
 80008a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a4:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 80008a8:	4606      	mov	r6, r0
	//kiểm tra các hàng từ dưới lên trên
    for (int y = GRID_HEIGHT - 1; y >= 0; --y) {
 80008aa:	2713      	movs	r7, #19
        bool full = true;
        for (int x = 0; x < GRID_WIDTH; ++x)
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng

        if (full) {
        	takeScore = true; //đánh dấu được tăng điểm -> bật buzzer sau đó
 80008ac:	f04f 0901 	mov.w	r9, #1
 80008b0:	eb00 080e 	add.w	r8, r0, lr
 80008b4:	f04f 0a00 	mov.w	sl, #0
        for (int x = 0; x < GRID_WIDTH; ++x)
 80008b8:	fb0e 6107 	mla	r1, lr, r7, r6
 80008bc:	2200      	movs	r2, #0
        bool full = true;
 80008be:	2301      	movs	r3, #1
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng
 80008c0:	f851 0b04 	ldr.w	r0, [r1], #4
        for (int x = 0; x < GRID_WIDTH; ++x)
 80008c4:	3201      	adds	r2, #1
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng
 80008c6:	2800      	cmp	r0, #0
 80008c8:	bf08      	it	eq
 80008ca:	2300      	moveq	r3, #0
        for (int x = 0; x < GRID_WIDTH; ++x)
 80008cc:	2a0a      	cmp	r2, #10
 80008ce:	d1f7      	bne.n	80008c0 <_ZN12TetrisEngine10clearLinesEv+0x20>
        if (full) {
 80008d0:	b303      	cbz	r3, 8000914 <_ZN12TetrisEngine10clearLinesEv+0x74>
        	score++; //tăng điểm
 80008d2:	f8d6 3370 	ldr.w	r3, [r6, #880]	@ 0x370
        	takeScore = true; //đánh dấu được tăng điểm -> bật buzzer sau đó
 80008d6:	f886 9374 	strb.w	r9, [r6, #884]	@ 0x374
        	score++; //tăng điểm
 80008da:	3301      	adds	r3, #1
 80008dc:	f8c6 3370 	str.w	r3, [r6, #880]	@ 0x370
            for (int row = y; row > 0; --row)
 80008e0:	46bc      	mov	ip, r7
 80008e2:	f1bc 0f00 	cmp.w	ip, #0
 80008e6:	d105      	bne.n	80008f4 <_ZN12TetrisEngine10clearLinesEv+0x54>
 80008e8:	4633      	mov	r3, r6
      for (; __first != __last; ++__first)
 80008ea:	4598      	cmp	r8, r3
 80008ec:	d0e4      	beq.n	80008b8 <_ZN12TetrisEngine10clearLinesEv+0x18>
	*__first = __tmp;
 80008ee:	f843 ab04 	str.w	sl, [r3], #4
 80008f2:	e7fa      	b.n	80008ea <_ZN12TetrisEngine10clearLinesEv+0x4a>
                grid[row] = grid[row - 1];
 80008f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80008f8:	fb0e f40c 	mul.w	r4, lr, ip
 80008fc:	eb08 0504 	add.w	r5, r8, r4
 8000900:	4434      	add	r4, r6
 8000902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800090e:	e885 0003 	stmia.w	r5, {r0, r1}
            for (int row = y; row > 0; --row)
 8000912:	e7e6      	b.n	80008e2 <_ZN12TetrisEngine10clearLinesEv+0x42>
    for (int y = GRID_HEIGHT - 1; y >= 0; --y) {
 8000914:	3f01      	subs	r7, #1
 8000916:	d2cf      	bcs.n	80008b8 <_ZN12TetrisEngine10clearLinesEv+0x18>
            grid[0].fill(0);
            ++y; // re-check this row
        }
    }
}
 8000918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800091c <_ZN12TetrisEngine9lockBlockEv>:
void TetrisEngine::lockBlock() {
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < blockSize; ++i)
 800091e:	f8d0 6368 	ldr.w	r6, [r0, #872]	@ 0x368
void TetrisEngine::lockBlock() {
 8000922:	4604      	mov	r4, r0
 8000924:	f500 7547 	add.w	r5, r0, #796	@ 0x31c
    for (int i = 0; i < blockSize; ++i)
 8000928:	2200      	movs	r2, #0
                    grid[gy][gx] = currBlockColor + 1;
 800092a:	f04f 0c0a 	mov.w	ip, #10
    for (int i = 0; i < blockSize; ++i)
 800092e:	4296      	cmp	r6, r2
 8000930:	dc07      	bgt.n	8000942 <_ZN12TetrisEngine9lockBlockEv+0x26>
    clearLines();
 8000932:	4620      	mov	r0, r4
 8000934:	f7ff ffb4 	bl	80008a0 <_ZN12TetrisEngine10clearLinesEv>
    spawnBlock();
 8000938:	4620      	mov	r0, r4
}
 800093a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    spawnBlock();
 800093e:	f7ff beb9 	b.w	80006b4 <_ZN12TetrisEngine10spawnBlockEv>
 8000942:	462f      	mov	r7, r5
        for (int j = 0; j < blockSize; ++j)
 8000944:	2100      	movs	r1, #0
            if (currBlock[i][j]) {
 8000946:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800094a:	b183      	cbz	r3, 800096e <_ZN12TetrisEngine9lockBlockEv+0x52>
                int gy = currY + i;
 800094c:	f8d4 0364 	ldr.w	r0, [r4, #868]	@ 0x364
 8000950:	4410      	add	r0, r2
                if (gy >= 0 && gy < GRID_HEIGHT && gx >= 0 && gx < GRID_WIDTH)
 8000952:	2813      	cmp	r0, #19
 8000954:	d80b      	bhi.n	800096e <_ZN12TetrisEngine9lockBlockEv+0x52>
                int gx = currX + j;
 8000956:	f8d4 3360 	ldr.w	r3, [r4, #864]	@ 0x360
 800095a:	440b      	add	r3, r1
                if (gy >= 0 && gy < GRID_HEIGHT && gx >= 0 && gx < GRID_WIDTH)
 800095c:	2b09      	cmp	r3, #9
                    grid[gy][gx] = currBlockColor + 1;
 800095e:	bf9f      	itttt	ls
 8000960:	fb0c 3300 	mlals	r3, ip, r0, r3
 8000964:	f8d4 03c0 	ldrls.w	r0, [r4, #960]	@ 0x3c0
 8000968:	3001      	addls	r0, #1
 800096a:	f844 0023 	strls.w	r0, [r4, r3, lsl #2]
        for (int j = 0; j < blockSize; ++j)
 800096e:	3101      	adds	r1, #1
 8000970:	428e      	cmp	r6, r1
 8000972:	d1e8      	bne.n	8000946 <_ZN12TetrisEngine9lockBlockEv+0x2a>
    for (int i = 0; i < blockSize; ++i)
 8000974:	3201      	adds	r2, #1
 8000976:	3510      	adds	r5, #16
 8000978:	e7d9      	b.n	800092e <_ZN12TetrisEngine9lockBlockEv+0x12>

0800097a <_ZN12TetrisEngine6updateEv>:

//check va chạm + khóa khối nếu được
void TetrisEngine::update() {
 800097a:	b538      	push	{r3, r4, r5, lr}
	if(!gameOver){
 800097c:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::update() {
 8000980:	4604      	mov	r4, r0
	if(!gameOver){
 8000982:	b963      	cbnz	r3, 800099e <_ZN12TetrisEngine6updateEv+0x24>
		if (!checkCollision(currX, currY + 1, currBlock))
 8000984:	f8d0 5364 	ldr.w	r5, [r0, #868]	@ 0x364
 8000988:	f8d0 1360 	ldr.w	r1, [r0, #864]	@ 0x360
 800098c:	3501      	adds	r5, #1
 800098e:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 8000992:	462a      	mov	r2, r5
 8000994:	f7ff ff4b 	bl	800082e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000998:	b910      	cbnz	r0, 80009a0 <_ZN12TetrisEngine6updateEv+0x26>
			currY++;
 800099a:	f8c4 5364 	str.w	r5, [r4, #868]	@ 0x364
			for(int i = 0; i < GRID_WIDTH; i++)
				if(grid[0][i]) gameOver = true; //hàng trên cùng có khối -> game over
		}
	}

}
 800099e:	bd38      	pop	{r3, r4, r5, pc}
			lockBlock();
 80009a0:	4620      	mov	r0, r4
 80009a2:	f7ff ffbb 	bl	800091c <_ZN12TetrisEngine9lockBlockEv>
			for(int i = 0; i < GRID_WIDTH; i++)
 80009a6:	1f23      	subs	r3, r4, #4
 80009a8:	f104 0224 	add.w	r2, r4, #36	@ 0x24
				if(grid[0][i]) gameOver = true; //hàng trên cùng có khối -> game over
 80009ac:	2101      	movs	r1, #1
 80009ae:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80009b2:	b108      	cbz	r0, 80009b8 <_ZN12TetrisEngine6updateEv+0x3e>
 80009b4:	f884 136c 	strb.w	r1, [r4, #876]	@ 0x36c
			for(int i = 0; i < GRID_WIDTH; i++)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d1f8      	bne.n	80009ae <_ZN12TetrisEngine6updateEv+0x34>
 80009bc:	e7ef      	b.n	800099e <_ZN12TetrisEngine6updateEv+0x24>

080009be <_ZN12TetrisEngine8moveLeftEv>:

//di chuyển trái
void TetrisEngine::moveLeft() {
 80009be:	b538      	push	{r3, r4, r5, lr}
	if(gameOver) return;
 80009c0:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::moveLeft() {
 80009c4:	4604      	mov	r4, r0
	if(gameOver) return;
 80009c6:	b963      	cbnz	r3, 80009e2 <_ZN12TetrisEngine8moveLeftEv+0x24>
	//kiểm tra trước khi di chuyển
    if (!checkCollision(currX - 1, currY, currBlock)) currX--;
 80009c8:	f8d0 5360 	ldr.w	r5, [r0, #864]	@ 0x360
 80009cc:	f8d0 2364 	ldr.w	r2, [r0, #868]	@ 0x364
 80009d0:	3d01      	subs	r5, #1
 80009d2:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 80009d6:	4629      	mov	r1, r5
 80009d8:	f7ff ff29 	bl	800082e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 80009dc:	b908      	cbnz	r0, 80009e2 <_ZN12TetrisEngine8moveLeftEv+0x24>
 80009de:	f8c4 5360 	str.w	r5, [r4, #864]	@ 0x360
}
 80009e2:	bd38      	pop	{r3, r4, r5, pc}

080009e4 <_ZN12TetrisEngine9moveRightEv>:

//di chuyển phải
void TetrisEngine::moveRight() {
 80009e4:	b538      	push	{r3, r4, r5, lr}
	if(gameOver) return;
 80009e6:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::moveRight() {
 80009ea:	4604      	mov	r4, r0
	if(gameOver) return;
 80009ec:	b963      	cbnz	r3, 8000a08 <_ZN12TetrisEngine9moveRightEv+0x24>
	//kiểm tra trước khi di chuyển
    if (!checkCollision(currX + 1, currY, currBlock)) currX++;
 80009ee:	f8d0 5360 	ldr.w	r5, [r0, #864]	@ 0x360
 80009f2:	f8d0 2364 	ldr.w	r2, [r0, #868]	@ 0x364
 80009f6:	3501      	adds	r5, #1
 80009f8:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 80009fc:	4629      	mov	r1, r5
 80009fe:	f7ff ff16 	bl	800082e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a02:	b908      	cbnz	r0, 8000a08 <_ZN12TetrisEngine9moveRightEv+0x24>
 8000a04:	f8c4 5360 	str.w	r5, [r4, #864]	@ 0x360
}
 8000a08:	bd38      	pop	{r3, r4, r5, pc}

08000a0a <_ZN12TetrisEngine4dropEv>:

//thả block
void TetrisEngine::drop() {
 8000a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(gameOver) return;
 8000a0c:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::drop() {
 8000a10:	4604      	mov	r4, r0
	if(gameOver) return;
 8000a12:	b9ab      	cbnz	r3, 8000a40 <_ZN12TetrisEngine4dropEv+0x36>
	//kiểm tra trước khi di chuyển
    while (!checkCollision(currX, currY + 1, currBlock)) currY++;
 8000a14:	f8d0 6360 	ldr.w	r6, [r0, #864]	@ 0x360
 8000a18:	f500 7748 	add.w	r7, r0, #800	@ 0x320
 8000a1c:	f8d4 5364 	ldr.w	r5, [r4, #868]	@ 0x364
 8000a20:	3501      	adds	r5, #1
 8000a22:	463b      	mov	r3, r7
 8000a24:	462a      	mov	r2, r5
 8000a26:	4631      	mov	r1, r6
 8000a28:	4620      	mov	r0, r4
 8000a2a:	f7ff ff00 	bl	800082e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a2e:	b120      	cbz	r0, 8000a3a <_ZN12TetrisEngine4dropEv+0x30>
    lockBlock();
 8000a30:	4620      	mov	r0, r4
}
 8000a32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lockBlock();
 8000a36:	f7ff bf71 	b.w	800091c <_ZN12TetrisEngine9lockBlockEv>
    while (!checkCollision(currX, currY + 1, currBlock)) currY++;
 8000a3a:	f8c4 5364 	str.w	r5, [r4, #868]	@ 0x364
 8000a3e:	e7ed      	b.n	8000a1c <_ZN12TetrisEngine4dropEv+0x12>
}
 8000a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a42 <_ZN12TetrisEngine6rotateEv>:

//xoay block
void TetrisEngine::rotate() {
 8000a42:	b570      	push	{r4, r5, r6, lr}
	if(gameOver) return;
 8000a44:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::rotate() {
 8000a48:	b090      	sub	sp, #64	@ 0x40
 8000a4a:	4604      	mov	r4, r0
	if(gameOver) return;
 8000a4c:	bb23      	cbnz	r3, 8000a98 <_ZN12TetrisEngine6rotateEv+0x56>
    BlockMatrix temp = currBlock;
 8000a4e:	f500 7648 	add.w	r6, r0, #800	@ 0x320
 8000a52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a54:	466d      	mov	r5, sp
 8000a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    rotateMatrix(temp);
 8000a68:	4620      	mov	r0, r4
 8000a6a:	4669      	mov	r1, sp
 8000a6c:	f7ff fe7f 	bl	800076e <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE>
    //kiểm tra trước khi di chuyển
    if (!checkCollision(currX, currY, temp))
 8000a70:	e9d4 12d8 	ldrd	r1, r2, [r4, #864]	@ 0x360
 8000a74:	4620      	mov	r0, r4
 8000a76:	466b      	mov	r3, sp
 8000a78:	f7ff fed9 	bl	800082e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a7c:	f504 7448 	add.w	r4, r4, #800	@ 0x320
 8000a80:	b950      	cbnz	r0, 8000a98 <_ZN12TetrisEngine6rotateEv+0x56>
        currBlock = temp;
 8000a82:	466d      	mov	r5, sp
 8000a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000a98:	b010      	add	sp, #64	@ 0x40
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}

08000a9c <_ZNK12TetrisEngine20getCurrentBlockColorEv>:

//màu của khối đang rơi
uint16_t TetrisEngine::getCurrentBlockColor() const {
	return ColorPallette[currBlockColor];
 8000a9c:	f8d0 23c0 	ldr.w	r2, [r0, #960]	@ 0x3c0
}
 8000aa0:	4b01      	ldr	r3, [pc, #4]	@ (8000aa8 <_ZNK12TetrisEngine20getCurrentBlockColorEv+0xc>)
 8000aa2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8000aa6:	4770      	bx	lr
 8000aa8:	08013fe4 	.word	0x08013fe4

08000aac <_ZNK12TetrisEngine12getGridColorEii>:

//màu lưới
uint16_t TetrisEngine::getGridColor(int x, int y) const {
	if(grid[y][x] == 0) return 0x0000;
 8000aac:	230a      	movs	r3, #10
 8000aae:	fb03 1102 	mla	r1, r3, r2, r1
 8000ab2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8000ab6:	b118      	cbz	r0, 8000ac0 <_ZNK12TetrisEngine12getGridColorEii+0x14>
	return ColorPallette[grid[y][x] - 1];
 8000ab8:	4b02      	ldr	r3, [pc, #8]	@ (8000ac4 <_ZNK12TetrisEngine12getGridColorEii+0x18>)
 8000aba:	3801      	subs	r0, #1
 8000abc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	08013fe4 	.word	0x08013fe4

08000ac8 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 8000ac8:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <SPI5_Write+0x1c>)
{
 8000acc:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <SPI5_Write+0x20>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f10d 0106 	add.w	r1, sp, #6
 8000ada:	f005 fd45 	bl	8006568 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8000ade:	b003      	add	sp, #12
 8000ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	200001a8 	.word	0x200001a8

08000aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osDelay(10);
 8000aee:	200a      	movs	r0, #10
 8000af0:	f006 fbb8 	bl	8007264 <osDelay>
  for(;;)
 8000af4:	e7fb      	b.n	8000aee <StartDefaultTask+0x2>
	...

08000af8 <MovingTask>:
  }
  /* USER CODE END 5 */
}


void MovingTask(void *argument){
 8000af8:	b538      	push	{r3, r4, r5, lr}

		//chờ cờ 0x01 được set (chờ -> block state)
        uint32_t evt = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
        if (evt & 0x01)
        {
            if (last_button != 0)
 8000afa:	4c0d      	ldr	r4, [pc, #52]	@ (8000b30 <MovingTask+0x38>)
            {
            	if(osMessageQueueGetCount(movingQueueHandle) < 1){
 8000afc:	4d0d      	ldr	r5, [pc, #52]	@ (8000b34 <MovingTask+0x3c>)
        uint32_t evt = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295
 8000b02:	2100      	movs	r1, #0
 8000b04:	2001      	movs	r0, #1
 8000b06:	f006 fb5f 	bl	80071c8 <osThreadFlagsWait>
        if (evt & 0x01)
 8000b0a:	07c3      	lsls	r3, r0, #31
 8000b0c:	d5f7      	bpl.n	8000afe <MovingTask+0x6>
            if (last_button != 0)
 8000b0e:	7823      	ldrb	r3, [r4, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f4      	beq.n	8000afe <MovingTask+0x6>
            	if(osMessageQueueGetCount(movingQueueHandle) < 1){
 8000b14:	6828      	ldr	r0, [r5, #0]
 8000b16:	f006 fcf5 	bl	8007504 <osMessageQueueGetCount>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	b920      	cbnz	r0, 8000b28 <MovingTask+0x30>
            		//nếu queue chưa có phần tử -> gửi nút bấm được bấm gần nhất và queue
            		osMessageQueuePut(movingQueueHandle, &last_button, 0, 10);
 8000b1e:	6828      	ldr	r0, [r5, #0]
 8000b20:	230a      	movs	r3, #10
 8000b22:	4621      	mov	r1, r4
 8000b24:	f006 fc8d 	bl	8007442 <osMessageQueuePut>
            	}
                last_button = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	7023      	strb	r3, [r4, #0]
 8000b2c:	e7e7      	b.n	8000afe <MovingTask+0x6>
 8000b2e:	bf00      	nop
 8000b30:	20000128 	.word	0x20000128
 8000b34:	20000118 	.word	0x20000118

08000b38 <SystemClock_Config>:
{
 8000b38:	b530      	push	{r4, r5, lr}
 8000b3a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	2100      	movs	r1, #0
 8000b40:	a80a      	add	r0, sp, #40	@ 0x28
 8000b42:	f012 fc0c 	bl	801335e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b46:	2214      	movs	r2, #20
 8000b48:	2100      	movs	r1, #0
 8000b4a:	a803      	add	r0, sp, #12
 8000b4c:	f012 fc07 	bl	801335e <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b50:	2400      	movs	r4, #0
 8000b52:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <SystemClock_Config+0x90>)
 8000b54:	9401      	str	r4, [sp, #4]
 8000b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b58:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <SystemClock_Config+0x94>)
 8000b6a:	9402      	str	r4, [sp, #8]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b84:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b88:	2502      	movs	r5, #2
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b8e:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b92:	2108      	movs	r1, #8
 8000b94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b98:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba2:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f004 ffa0 	bl	8005ae8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000baa:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bae:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb6:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bba:	2105      	movs	r1, #5
 8000bbc:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bc0:	f005 f96e 	bl	8005ea0 <HAL_RCC_ClockConfig>
}
 8000bc4:	b015      	add	sp, #84	@ 0x54
 8000bc6:	bd30      	pop	{r4, r5, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <IOE_Init>:
void IOE_Init(void)
 8000bd0:	4770      	bx	lr

08000bd2 <IOE_ITConfig>:
void IOE_ITConfig(void)
 8000bd2:	4770      	bx	lr

08000bd4 <IOE_Write>:
{
 8000bd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <IOE_Write+0x28>)
 8000bd8:	f88d 2017 	strb.w	r2, [sp, #23]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	9302      	str	r3, [sp, #8]
 8000be0:	f10d 0217 	add.w	r2, sp, #23
 8000be4:	2301      	movs	r3, #1
 8000be6:	9200      	str	r2, [sp, #0]
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	460a      	mov	r2, r1
 8000bec:	4601      	mov	r1, r0
 8000bee:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <IOE_Write+0x2c>)
 8000bf0:	f004 fc12 	bl	8005418 <HAL_I2C_Mem_Write>
}
 8000bf4:	b007      	add	sp, #28
 8000bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200002a8 	.word	0x200002a8

08000c04 <IOE_Read>:
{
 8000c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <IOE_Read+0x2c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	9302      	str	r3, [sp, #8]
{
 8000c12:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8000c14:	2301      	movs	r3, #1
 8000c16:	f10d 0117 	add.w	r1, sp, #23
 8000c1a:	9100      	str	r1, [sp, #0]
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	4601      	mov	r1, r0
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <IOE_Read+0x30>)
 8000c22:	f004 fc89 	bl	8005538 <HAL_I2C_Mem_Read>
}
 8000c26:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000c2a:	b007      	add	sp, #28
 8000c2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c30:	20000008 	.word	0x20000008
 8000c34:	200002a8 	.word	0x200002a8

08000c38 <IOE_ReadMultiple>:
{
 8000c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 8000c3a:	4c08      	ldr	r4, [pc, #32]	@ (8000c5c <IOE_ReadMultiple+0x24>)
 8000c3c:	6824      	ldr	r4, [r4, #0]
 8000c3e:	9200      	str	r2, [sp, #0]
 8000c40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000c44:	460a      	mov	r2, r1
 8000c46:	2301      	movs	r3, #1
 8000c48:	4601      	mov	r1, r0
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <IOE_ReadMultiple+0x28>)
 8000c4c:	f004 fc74 	bl	8005538 <HAL_I2C_Mem_Read>
}
 8000c50:	3800      	subs	r0, #0
 8000c52:	bf18      	it	ne
 8000c54:	2001      	movne	r0, #1
 8000c56:	b004      	add	sp, #16
 8000c58:	bd10      	pop	{r4, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	200002a8 	.word	0x200002a8

08000c64 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 8000c64:	f003 bed8 	b.w	8004a18 <HAL_Delay>

08000c68 <LCD_IO_Init>:
{
 8000c68:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c6a:	4c06      	ldr	r4, [pc, #24]	@ (8000c84 <LCD_IO_Init+0x1c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4620      	mov	r0, r4
 8000c70:	2104      	movs	r1, #4
 8000c72:	f004 f92b 	bl	8004ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c76:	4620      	mov	r0, r4
 8000c78:	2201      	movs	r2, #1
}
 8000c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c7e:	2104      	movs	r1, #4
 8000c80:	f004 b924 	b.w	8004ecc <HAL_GPIO_WritePin>
 8000c84:	40020800 	.word	0x40020800

08000c88 <LCD_IO_WriteData>:
{
 8000c88:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c8a:	4d0b      	ldr	r5, [pc, #44]	@ (8000cb8 <LCD_IO_WriteData+0x30>)
{
 8000c8c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	480a      	ldr	r0, [pc, #40]	@ (8000cbc <LCD_IO_WriteData+0x34>)
 8000c92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c96:	f004 f919 	bl	8004ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	f004 f914 	bl	8004ecc <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f7ff ff0f 	bl	8000ac8 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000caa:	4628      	mov	r0, r5
 8000cac:	2201      	movs	r2, #1
}
 8000cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	f004 b90a 	b.w	8004ecc <HAL_GPIO_WritePin>
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <LCD_IO_WriteReg>:
{
 8000cc0:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cc2:	4d0b      	ldr	r5, [pc, #44]	@ (8000cf0 <LCD_IO_WriteReg+0x30>)
{
 8000cc4:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	480a      	ldr	r0, [pc, #40]	@ (8000cf4 <LCD_IO_WriteReg+0x34>)
 8000cca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cce:	f004 f8fd 	bl	8004ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	f004 f8f8 	bl	8004ecc <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff fef3 	bl	8000ac8 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000ce2:	4628      	mov	r0, r5
 8000ce4:	2201      	movs	r2, #1
}
 8000ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000cea:	2104      	movs	r1, #4
 8000cec:	f004 b8ee 	b.w	8004ecc <HAL_GPIO_WritePin>
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <LCD_IO_ReadData>:
{
 8000cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cfa:	4e14      	ldr	r6, [pc, #80]	@ (8000d4c <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfc:	4f14      	ldr	r7, [pc, #80]	@ (8000d50 <LCD_IO_ReadData+0x58>)
{
 8000cfe:	4605      	mov	r5, r0
 8000d00:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d02:	4630      	mov	r0, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	2104      	movs	r1, #4
 8000d08:	f004 f8e0 	bl	8004ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d12:	4638      	mov	r0, r7
 8000d14:	f004 f8da 	bl	8004ecc <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8000d18:	4628      	mov	r0, r5
 8000d1a:	f7ff fed5 	bl	8000ac8 <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <LCD_IO_ReadData+0x5c>)
 8000d20:	480d      	ldr	r0, [pc, #52]	@ (8000d58 <LCD_IO_ReadData+0x60>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4622      	mov	r2, r4
 8000d26:	a901      	add	r1, sp, #4
 8000d28:	f005 fdbb 	bl	80068a2 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d2c:	4638      	mov	r0, r7
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8000d34:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d36:	f004 f8c9 	bl	8004ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2104      	movs	r1, #4
 8000d40:	f004 f8c4 	bl	8004ecc <HAL_GPIO_WritePin>
}
 8000d44:	4620      	mov	r0, r4
 8000d46:	b003      	add	sp, #12
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	20000004 	.word	0x20000004
 8000d58:	200001a8 	.word	0x200001a8

08000d5c <LCD_Delay>:
  HAL_Delay(Delay);
 8000d5c:	f003 be5c 	b.w	8004a18 <HAL_Delay>

08000d60 <SingleBeepTask>:
        }
	}
}

void SingleBeepTask(void *param){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <SingleBeepTask+0x2c>)
void SingleBeepTask(void *param){
 8000d62:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2108      	movs	r1, #8
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f004 f8af 	bl	8004ecc <HAL_GPIO_WritePin>
	osDelay(50);
 8000d6e:	2032      	movs	r0, #50	@ 0x32
 8000d70:	f006 fa78 	bl	8007264 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2108      	movs	r1, #8
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f004 f8a7 	bl	8004ecc <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000d7e:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <SingleBeepTask+0x30>)
 8000d80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d84:	f004 f8a7 	bl	8004ed6 <HAL_GPIO_TogglePin>
	osThreadExit();
 8000d88:	f006 f9df 	bl	800714a <osThreadExit>
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40021800 	.word	0x40021800

08000d94 <DoubleBeepTask>:
}

void DoubleBeepTask(void *param){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d94:	4c10      	ldr	r4, [pc, #64]	@ (8000dd8 <DoubleBeepTask+0x44>)
void DoubleBeepTask(void *param){
 8000d96:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f004 f895 	bl	8004ecc <HAL_GPIO_WritePin>
	osDelay(50);
 8000da2:	2032      	movs	r0, #50	@ 0x32
 8000da4:	f006 fa5e 	bl	8007264 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2108      	movs	r1, #8
 8000dac:	4620      	mov	r0, r4
 8000dae:	f004 f88d 	bl	8004ecc <HAL_GPIO_WritePin>
	osDelay(50);
 8000db2:	2032      	movs	r0, #50	@ 0x32
 8000db4:	f006 fa56 	bl	8007264 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2108      	movs	r1, #8
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f004 f885 	bl	8004ecc <HAL_GPIO_WritePin>
	osDelay(50);
 8000dc2:	2032      	movs	r0, #50	@ 0x32
 8000dc4:	f006 fa4e 	bl	8007264 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2108      	movs	r1, #8
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f004 f87d 	bl	8004ecc <HAL_GPIO_WritePin>
	osThreadExit();
 8000dd2:	f006 f9ba 	bl	800714a <osThreadExit>
 8000dd6:	bf00      	nop
 8000dd8:	40020800 	.word	0x40020800

08000ddc <DF_SendCommand>:
	if(currScreen == 1)	DF_SendCommand(0x0F, 0x02, 0x02);
	else if(currScreen == 2) DF_SendCommand(0x0F, 0x02, 0x01);
	osThreadExit();
}

void DF_SendCommand(uint8_t cmd, uint8_t param1, uint8_t param2){
 8000ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000dde:	f64f 737e 	movw	r3, #65406	@ 0xff7e
 8000de2:	f88d 200a 	strb.w	r2, [sp, #10]
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000de6:	f202 1205 	addw	r2, r2, #261	@ 0x105
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000dea:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000dee:	f88d 1009 	strb.w	r1, [sp, #9]
 8000df2:	2306      	movs	r3, #6
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000df4:	4411      	add	r1, r2
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000df6:	f88d 3006 	strb.w	r3, [sp, #6]
 8000dfa:	f88d 0007 	strb.w	r0, [sp, #7]
 8000dfe:	2300      	movs	r3, #0
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000e00:	4408      	add	r0, r1
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000e02:	f88d 3008 	strb.w	r3, [sp, #8]
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000e06:	4240      	negs	r0, r0
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000e08:	23ef      	movs	r3, #239	@ 0xef
 8000e0a:	f88d 300d 	strb.w	r3, [sp, #13]
	buffer[7] = (checksum >> 8) & 0xFF;
 8000e0e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000e12:	f88d 300b 	strb.w	r3, [sp, #11]
	buffer[8] = checksum & 0xFF;
 8000e16:	f88d 000c 	strb.w	r0, [sp, #12]

	HAL_UART_Transmit(&huart4, buffer, 10, HAL_MAX_DELAY);
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	220a      	movs	r2, #10
 8000e20:	a901      	add	r1, sp, #4
 8000e22:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <DF_SendCommand+0x54>)
 8000e24:	f006 f827 	bl	8006e76 <HAL_UART_Transmit>
}
 8000e28:	b005      	add	sp, #20
 8000e2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e2e:	bf00      	nop
 8000e30:	2000012c 	.word	0x2000012c

08000e34 <GameOverTask>:
void GameOverTask(void *param){
 8000e34:	b508      	push	{r3, lr}
	DF_SendCommand(0x0F, 0x02, 0x03);
 8000e36:	2102      	movs	r1, #2
 8000e38:	2203      	movs	r2, #3
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f7ff ffce 	bl	8000ddc <DF_SendCommand>
	osDelay(2000);
 8000e40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e44:	f006 fa0e 	bl	8007264 <osDelay>
	if(currScreen == 1)	DF_SendCommand(0x0F, 0x02, 0x02);
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <GameOverTask+0x34>)
 8000e4a:	7819      	ldrb	r1, [r3, #0]
 8000e4c:	2901      	cmp	r1, #1
 8000e4e:	d106      	bne.n	8000e5e <GameOverTask+0x2a>
 8000e50:	2202      	movs	r2, #2
 8000e52:	4611      	mov	r1, r2
	else if(currScreen == 2) DF_SendCommand(0x0F, 0x02, 0x01);
 8000e54:	200f      	movs	r0, #15
 8000e56:	f7ff ffc1 	bl	8000ddc <DF_SendCommand>
	osThreadExit();
 8000e5a:	f006 f976 	bl	800714a <osThreadExit>
	else if(currScreen == 2) DF_SendCommand(0x0F, 0x02, 0x01);
 8000e5e:	2902      	cmp	r1, #2
 8000e60:	d1fb      	bne.n	8000e5a <GameOverTask+0x26>
 8000e62:	2201      	movs	r2, #1
 8000e64:	e7f6      	b.n	8000e54 <GameOverTask+0x20>
 8000e66:	bf00      	nop
 8000e68:	2000000c 	.word	0x2000000c

08000e6c <main>:
{
 8000e6c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000e70:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8000e72:	f003 fda5 	bl	80049c0 <HAL_Init>
  SystemClock_Config();
 8000e76:	f7ff fe5f 	bl	8000b38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	2214      	movs	r2, #20
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e80:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f012 fa6c 	bl	801335e <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	4bc9      	ldr	r3, [pc, #804]	@ (80011ac <main+0x340>)
 8000e88:	9400      	str	r4, [sp, #0]
 8000e8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000e8c:	48c8      	ldr	r0, [pc, #800]	@ (80011b0 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	f042 0210 	orr.w	r2, r2, #16
 8000e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e96:	f002 0210 	and.w	r2, r2, #16
 8000e9a:	9200      	str	r2, [sp, #0]
 8000e9c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	9401      	str	r4, [sp, #4]
 8000ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ea2:	f042 0220 	orr.w	r2, r2, #32
 8000ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eaa:	f002 0220 	and.w	r2, r2, #32
 8000eae:	9201      	str	r2, [sp, #4]
 8000eb0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	9402      	str	r4, [sp, #8]
 8000eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eba:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ebe:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000ec2:	9202      	str	r2, [sp, #8]
 8000ec4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	9403      	str	r4, [sp, #12]
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eca:	f042 0204 	orr.w	r2, r2, #4
 8000ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed2:	f002 0204 	and.w	r2, r2, #4
 8000ed6:	9203      	str	r2, [sp, #12]
 8000ed8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	9404      	str	r4, [sp, #16]
 8000edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ede:	f042 0201 	orr.w	r2, r2, #1
 8000ee2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ee6:	f002 0201 	and.w	r2, r2, #1
 8000eea:	9204      	str	r2, [sp, #16]
 8000eec:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	9405      	str	r4, [sp, #20]
 8000ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ef2:	f042 0202 	orr.w	r2, r2, #2
 8000ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000efa:	f002 0202 	and.w	r2, r2, #2
 8000efe:	9205      	str	r2, [sp, #20]
 8000f00:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f02:	9406      	str	r4, [sp, #24]
 8000f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f0e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000f12:	9206      	str	r2, [sp, #24]
 8000f14:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	9407      	str	r4, [sp, #28]
 8000f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f1a:	f042 0208 	orr.w	r2, r2, #8
 8000f1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000f28:	4622      	mov	r2, r4
 8000f2a:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000f2e:	f003 ffcd 	bl	8004ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f32:	48a0      	ldr	r0, [pc, #640]	@ (80011b4 <main+0x348>)
 8000f34:	4622      	mov	r2, r4
 8000f36:	2104      	movs	r1, #4
 8000f38:	f003 ffc8 	bl	8004ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	489e      	ldr	r0, [pc, #632]	@ (80011b8 <main+0x34c>)
 8000f40:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f46:	f003 ffc1 	bl	8004ecc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f50:	4897      	ldr	r0, [pc, #604]	@ (80011b0 <main+0x344>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f56:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f58:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5a:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f64:	f003 fec8 	bl	8004cf8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f68:	4892      	ldr	r0, [pc, #584]	@ (80011b4 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	e9cd 960d 	strd	r9, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f72:	9710      	str	r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f003 fec0 	bl	8004cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f78:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	488e      	ldr	r0, [pc, #568]	@ (80011b8 <main+0x34c>)
 8000f7e:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f80:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8c:	f003 feb4 	bl	8004cf8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	4888      	ldr	r0, [pc, #544]	@ (80011b4 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	e9cd 860d 	strd	r8, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	f003 fead 	bl	8004cf8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f9e:	4622      	mov	r2, r4
 8000fa0:	4641      	mov	r1, r8
 8000fa2:	4884      	ldr	r0, [pc, #528]	@ (80011b4 <main+0x348>)
 8000fa4:	f003 ff92 	bl	8004ecc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa8:	f44f 1588 	mov.w	r5, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fac:	4883      	ldr	r0, [pc, #524]	@ (80011bc <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fae:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb0:	f04f 0b0c 	mov.w	fp, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb4:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb6:	e9cd b50d 	strd	fp, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fba:	f003 fe9d 	bl	8004cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000fbe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	487f      	ldr	r0, [pc, #508]	@ (80011c0 <main+0x354>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc4:	970f      	str	r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc8:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f003 fe94 	bl	8004cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd4:	4879      	ldr	r0, [pc, #484]	@ (80011bc <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd8:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fde:	f003 fe8b 	bl	8004cf8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	4878      	ldr	r0, [pc, #480]	@ (80011c4 <main+0x358>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe4:	970f      	str	r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe8:	e9cd 650d 	strd	r6, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f003 fe84 	bl	8004cf8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 5, 0);
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	2155      	movs	r1, #85	@ 0x55
 8000ff4:	2006      	movs	r0, #6
 8000ff6:	f003 fd35 	bl	8004a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ffa:	2006      	movs	r0, #6
 8000ffc:	f003 fd64 	bl	8004ac8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 5, 0);
 8001000:	4622      	mov	r2, r4
 8001002:	2155      	movs	r1, #85	@ 0x55
 8001004:	2028      	movs	r0, #40	@ 0x28
 8001006:	f003 fd2d 	bl	8004a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100a:	2028      	movs	r0, #40	@ 0x28
 800100c:	f003 fd5c 	bl	8004ac8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 5, 0);
 8001010:	4622      	mov	r2, r4
 8001012:	2155      	movs	r1, #85	@ 0x55
 8001014:	4640      	mov	r0, r8
 8001016:	f003 fd25 	bl	8004a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800101a:	4640      	mov	r0, r8
 800101c:	f003 fd54 	bl	8004ac8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 5, 0);
 8001020:	2155      	movs	r1, #85	@ 0x55
 8001022:	4622      	mov	r2, r4
 8001024:	2009      	movs	r0, #9
 8001026:	f003 fd1d 	bl	8004a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800102a:	2009      	movs	r0, #9
 800102c:	f003 fd4c 	bl	8004ac8 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 8001030:	4865      	ldr	r0, [pc, #404]	@ (80011c8 <main+0x35c>)
 8001032:	4a66      	ldr	r2, [pc, #408]	@ (80011cc <main+0x360>)
  hi2c3.Instance = I2C3;
 8001034:	4d66      	ldr	r5, [pc, #408]	@ (80011d0 <main+0x364>)
  hcrc.Instance = CRC;
 8001036:	6002      	str	r2, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001038:	f003 fd54 	bl	8004ae4 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 800103c:	4b65      	ldr	r3, [pc, #404]	@ (80011d4 <main+0x368>)
 800103e:	4a66      	ldr	r2, [pc, #408]	@ (80011d8 <main+0x36c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001040:	622c      	str	r4, [r5, #32]
  hi2c3.Init.ClockSpeed = 100000;
 8001042:	e9c5 3200 	strd	r3, r2, [r5]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001046:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001048:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	e9c5 2404 	strd	r2, r4, [r5, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8001050:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001054:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001058:	f004 f936 	bl	80052c8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800105c:	2110      	movs	r1, #16
 800105e:	4628      	mov	r0, r5
 8001060:	f004 fb72 	bl	8005748 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001064:	4621      	mov	r1, r4
 8001066:	4628      	mov	r0, r5
 8001068:	f004 fb8d 	bl	8005786 <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 800106c:	485b      	ldr	r0, [pc, #364]	@ (80011dc <main+0x370>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800106e:	495c      	ldr	r1, [pc, #368]	@ (80011e0 <main+0x374>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001070:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001072:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001076:	e9c0 1200 	strd	r1, r2, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800107a:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800107e:	2218      	movs	r2, #24
 8001080:	e9c0 5206 	strd	r5, r2, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8001084:	220a      	movs	r2, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001086:	4d57      	ldr	r5, [pc, #348]	@ (80011e4 <main+0x378>)
  hspi5.Init.CRCPolynomial = 10;
 8001088:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800108a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800108e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001092:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001096:	f005 fa0b 	bl	80064b0 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800109a:	4a53      	ldr	r2, [pc, #332]	@ (80011e8 <main+0x37c>)
  SdramTiming.LoadToActiveDelay = 2;
 800109c:	970d      	str	r7, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800109e:	f04f 0c10 	mov.w	ip, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80010a2:	e9c5 2600 	strd	r2, r6, [r5]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010a6:	2240      	movs	r2, #64	@ 0x40
 80010a8:	e9c5 c204 	strd	ip, r2, [r5, #16]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80010ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010b0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010b4:	e9c5 2406 	strd	r2, r4, [r5, #24]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80010b8:	62ab      	str	r3, [r5, #40]	@ 0x28
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010be:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010c0:	a90d      	add	r1, sp, #52	@ 0x34
 80010c2:	4628      	mov	r0, r5
  SdramTiming.WriteRecoveryTime = 3;
 80010c4:	e9cd 3a10 	strd	r3, sl, [sp, #64]	@ 0x40
  SdramTiming.SelfRefreshTime = 4;
 80010c8:	e9cd 390e 	strd	r3, r9, [sp, #56]	@ 0x38
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80010cc:	e9c5 2408 	strd	r2, r4, [r5, #32]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010d0:	e9c5 4902 	strd	r4, r9, [r5, #8]
  SdramTiming.RCDDelay = 2;
 80010d4:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010d8:	f005 f8e6 	bl	80062a8 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e0:	a909      	add	r1, sp, #36	@ 0x24
 80010e2:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010e4:	e9cd 6809 	strd	r6, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80010e8:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
 __IO uint32_t tmpmrd =0;
 80010ec:	9408      	str	r4, [sp, #32]
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010ee:	f005 f8fb 	bl	80062e8 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 80010f2:	4630      	mov	r0, r6
 80010f4:	f003 fc90 	bl	8004a18 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010fc:	a909      	add	r1, sp, #36	@ 0x24
 80010fe:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001100:	e9cd 7809 	strd	r7, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001104:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001108:	f005 f8ee 	bl	80062e8 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800110c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001110:	a909      	add	r1, sp, #36	@ 0x24
 8001112:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001114:	e9cd a809 	strd	sl, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001118:	e9cd 940b 	strd	r9, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800111c:	f005 f8e4 	bl	80062e8 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001120:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001124:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 8001126:	9b08      	ldr	r3, [sp, #32]
 8001128:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800112a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800112e:	a909      	add	r1, sp, #36	@ 0x24
 8001130:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001132:	e9cd 9809 	strd	r9, r8, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 8001136:	960b      	str	r6, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001138:	f005 f8d6 	bl	80062e8 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800113c:	f240 516a 	movw	r1, #1386	@ 0x56a
 8001140:	4628      	mov	r0, r5
 8001142:	f005 f8ef 	bl	8006324 <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001146:	2234      	movs	r2, #52	@ 0x34
 8001148:	4621      	mov	r1, r4
 800114a:	eb0d 0002 	add.w	r0, sp, r2
 800114e:	f012 f906 	bl	801335e <memset>
  hltdc.Instance = LTDC;
 8001152:	4d26      	ldr	r5, [pc, #152]	@ (80011ec <main+0x380>)
 8001154:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <main+0x384>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001156:	612c      	str	r4, [r5, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001158:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.HorizontalSync = 9;
 800115c:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 800115e:	e9c5 3605 	strd	r3, r6, [r5, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8001162:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8001164:	f240 1e0d 	movw	lr, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 8001168:	e9c5 3a07 	strd	r3, sl, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 800116c:	f240 1343 	movw	r3, #323	@ 0x143
 8001170:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001174:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 327;
 8001176:	f240 1347 	movw	r3, #327	@ 0x147
 800117a:	f240 1817 	movw	r8, #279	@ 0x117
 800117e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001182:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.Backcolor.Blue = 0;
 8001186:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8001188:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800118c:	f004 fb96 	bl	80058bc <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001190:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 8001192:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 8001194:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001198:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 800119c:	2105      	movs	r1, #5
  pLayerCfg.WindowY1 = 320;
 800119e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 80011a2:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011a6:	e9cd a114 	strd	sl, r1, [sp, #80]	@ 0x50
 80011aa:	e023      	b.n	80011f4 <main+0x388>
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021800 	.word	0x40021800
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020000 	.word	0x40020000
 80011c8:	2000033c 	.word	0x2000033c
 80011cc:	40023000 	.word	0x40023000
 80011d0:	200002a8 	.word	0x200002a8
 80011d4:	40005c00 	.word	0x40005c00
 80011d8:	000186a0 	.word	0x000186a0
 80011dc:	200001a8 	.word	0x200001a8
 80011e0:	40015000 	.word	0x40015000
 80011e4:	20000174 	.word	0x20000174
 80011e8:	a0000140 	.word	0xa0000140
 80011ec:	20000200 	.word	0x20000200
 80011f0:	40016800 	.word	0x40016800
  pLayerCfg.ImageWidth = 240;
 80011f4:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011f8:	a90d      	add	r1, sp, #52	@ 0x34
 80011fa:	4622      	mov	r2, r4
 80011fc:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011fe:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 8001202:	4d35      	ldr	r5, [pc, #212]	@ (80012d8 <main+0x46c>)
  pLayerCfg.ImageHeight = 320;
 8001204:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 8001206:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 8001208:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 800120c:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001210:	f004 fc1f 	bl	8005a52 <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 8001214:	4b31      	ldr	r3, [pc, #196]	@ (80012dc <main+0x470>)
 8001216:	602b      	str	r3, [r5, #0]
  LcdDrv->Init();
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4798      	blx	r3
  LcdDrv->DisplayOff();
 800121c:	682b      	ldr	r3, [r5, #0]
  hdma2d.Instance = DMA2D;
 800121e:	4d30      	ldr	r5, [pc, #192]	@ (80012e0 <main+0x474>)
  LcdDrv->DisplayOff();
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 8001224:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <main+0x478>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001226:	4628      	mov	r0, r5
  hdma2d.Init.Mode = DMA2D_M2M;
 8001228:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 800122c:	e9c5 7402 	strd	r7, r4, [r5, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001230:	e9c5 470a 	strd	r4, r7, [r5, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001234:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001238:	f003 fc64 	bl	8004b04 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800123c:	4631      	mov	r1, r6
 800123e:	4628      	mov	r0, r5
 8001240:	f003 fd16 	bl	8004c70 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 8001244:	f000 fbf0 	bl	8001a28 <MX_TouchGFX_Init>
	  huart4.Instance = UART4;
 8001248:	4827      	ldr	r0, [pc, #156]	@ (80012e8 <main+0x47c>)
	  huart4.Init.BaudRate = 9600;
 800124a:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <main+0x480>)
 800124c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001250:	e9c0 2300 	strd	r2, r3, [r0]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001254:	e9c0 4402 	strd	r4, r4, [r0, #8]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001258:	e9c0 4b04 	strd	r4, fp, [r0, #16]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	e9c0 4406 	strd	r4, r4, [r0, #24]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001260:	f005 fdda 	bl	8006e18 <HAL_UART_Init>
  HAL_Delay(1000);
 8001264:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001268:	f003 fbd6 	bl	8004a18 <HAL_Delay>
  DF_SendCommand(0x3F, 0, 0);
 800126c:	4622      	mov	r2, r4
 800126e:	4621      	mov	r1, r4
 8001270:	203f      	movs	r0, #63	@ 0x3f
 8001272:	f7ff fdb3 	bl	8000ddc <DF_SendCommand>
  HAL_Delay(200);
 8001276:	20c8      	movs	r0, #200	@ 0xc8
 8001278:	f003 fbce 	bl	8004a18 <HAL_Delay>
  DF_SendCommand(0x06, 0x00, 15);
 800127c:	220f      	movs	r2, #15
 800127e:	4621      	mov	r1, r4
 8001280:	2006      	movs	r0, #6
 8001282:	f7ff fdab 	bl	8000ddc <DF_SendCommand>
  HAL_Delay(200);
 8001286:	20c8      	movs	r0, #200	@ 0xc8
 8001288:	f003 fbc6 	bl	8004a18 <HAL_Delay>
  DF_SendCommand(0x0F, 0x02, 0x02);
 800128c:	463a      	mov	r2, r7
 800128e:	4639      	mov	r1, r7
 8001290:	200f      	movs	r0, #15
 8001292:	f7ff fda3 	bl	8000ddc <DF_SendCommand>
  osKernelInitialize();
 8001296:	f005 fee1 	bl	800705c <osKernelInitialize>
  movingQueueHandle = osMessageQueueNew(4, sizeof(char), &movingQueue_attributes);
 800129a:	4a15      	ldr	r2, [pc, #84]	@ (80012f0 <main+0x484>)
 800129c:	4631      	mov	r1, r6
 800129e:	4648      	mov	r0, r9
 80012a0:	f006 f894 	bl	80073cc <osMessageQueueNew>
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <main+0x488>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012a6:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <main+0x48c>)
  movingQueueHandle = osMessageQueueNew(4, sizeof(char), &movingQueue_attributes);
 80012a8:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012aa:	4621      	mov	r1, r4
 80012ac:	4813      	ldr	r0, [pc, #76]	@ (80012fc <main+0x490>)
 80012ae:	f005 ff08 	bl	80070c2 <osThreadNew>
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <main+0x494>)
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 80012b4:	4a13      	ldr	r2, [pc, #76]	@ (8001304 <main+0x498>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012b6:	6018      	str	r0, [r3, #0]
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 80012b8:	4621      	mov	r1, r4
 80012ba:	4813      	ldr	r0, [pc, #76]	@ (8001308 <main+0x49c>)
 80012bc:	f005 ff01 	bl	80070c2 <osThreadNew>
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <main+0x4a0>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80012c2:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <main+0x4a4>)
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 80012c4:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80012c6:	4621      	mov	r1, r4
 80012c8:	4812      	ldr	r0, [pc, #72]	@ (8001314 <main+0x4a8>)
 80012ca:	f005 fefa 	bl	80070c2 <osThreadNew>
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <main+0x4ac>)
 80012d0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80012d2:	f005 fed5 	bl	8007080 <osKernelStart>
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <main+0x46a>
 80012d8:	20000114 	.word	0x20000114
 80012dc:	20000018 	.word	0x20000018
 80012e0:	200002fc 	.word	0x200002fc
 80012e4:	4002b000 	.word	0x4002b000
 80012e8:	2000012c 	.word	0x2000012c
 80012ec:	40004c00 	.word	0x40004c00
 80012f0:	08014e40 	.word	0x08014e40
 80012f4:	20000118 	.word	0x20000118
 80012f8:	08014ea0 	.word	0x08014ea0
 80012fc:	08000aed 	.word	0x08000aed
 8001300:	20000124 	.word	0x20000124
 8001304:	08014e7c 	.word	0x08014e7c
 8001308:	08000af9 	.word	0x08000af9
 800130c:	20000120 	.word	0x20000120
 8001310:	08014e58 	.word	0x08014e58
 8001314:	08001a2d 	.word	0x08001a2d
 8001318:	2000011c 	.word	0x2000011c

0800131c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800131c:	6802      	ldr	r2, [r0, #0]
 800131e:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001320:	429a      	cmp	r2, r3
 8001322:	d101      	bne.n	8001328 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001324:	f003 bb66 	b.w	80049f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40001000 	.word	0x40001000

08001330 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	static uint32_t last_time = 0;
	if(GPIO_Pin == GPIO_PIN_0){
 8001330:	2801      	cmp	r0, #1
{
 8001332:	b538      	push	{r3, r4, r5, lr}
 8001334:	4604      	mov	r4, r0
	if(GPIO_Pin == GPIO_PIN_0){
 8001336:	d10b      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x20>
		DF_SendCommand(0x19, 0x00, 0x00);
 8001338:	2200      	movs	r2, #0
 800133a:	4611      	mov	r1, r2
 800133c:	2019      	movs	r0, #25
 800133e:	f7ff fd4d 	bl	8000ddc <DF_SendCommand>
	    }
	    last_button = res;
	    //set cờ 0x01 -> thông báo movingTask (trigger)
	    osThreadFlagsSet(movingTaskHandle, 0x01);
	}
}
 8001342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8001346:	4815      	ldr	r0, [pc, #84]	@ (800139c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001348:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800134c:	f003 bdc3 	b.w	8004ed6 <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - last_time < 200) return;
 8001350:	4d13      	ldr	r5, [pc, #76]	@ (80013a0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001352:	f003 fb5b 	bl	8004a0c <HAL_GetTick>
 8001356:	682b      	ldr	r3, [r5, #0]
 8001358:	1ac0      	subs	r0, r0, r3
 800135a:	28c7      	cmp	r0, #199	@ 0xc7
 800135c:	d90a      	bls.n	8001374 <HAL_GPIO_EXTI_Callback+0x44>
		last_time = HAL_GetTick();
 800135e:	f003 fb55 	bl	8004a0c <HAL_GetTick>
	    switch (GPIO_Pin)
 8001362:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
		last_time = HAL_GetTick();
 8001366:	6028      	str	r0, [r5, #0]
	    switch (GPIO_Pin)
 8001368:	d012      	beq.n	8001390 <HAL_GPIO_EXTI_Callback+0x60>
 800136a:	d804      	bhi.n	8001376 <HAL_GPIO_EXTI_Callback+0x46>
 800136c:	2c04      	cmp	r4, #4
 800136e:	d011      	beq.n	8001394 <HAL_GPIO_EXTI_Callback+0x64>
 8001370:	2c08      	cmp	r4, #8
 8001372:	d011      	beq.n	8001398 <HAL_GPIO_EXTI_Callback+0x68>
}
 8001374:	bd38      	pop	{r3, r4, r5, pc}
	    switch (GPIO_Pin)
 8001376:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 800137a:	d1fb      	bne.n	8001374 <HAL_GPIO_EXTI_Callback+0x44>
 800137c:	2352      	movs	r3, #82	@ 0x52
	    last_button = res;
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001380:	7013      	strb	r3, [r2, #0]
	    osThreadFlagsSet(movingTaskHandle, 0x01);
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001384:	2101      	movs	r1, #1
 8001386:	6818      	ldr	r0, [r3, #0]
}
 8001388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	    osThreadFlagsSet(movingTaskHandle, 0x01);
 800138c:	f005 bee2 	b.w	8007154 <osThreadFlagsSet>
	            res = 'L';	//left
 8001390:	234c      	movs	r3, #76	@ 0x4c
 8001392:	e7f4      	b.n	800137e <HAL_GPIO_EXTI_Callback+0x4e>
	            res = 'T';	//rotate
 8001394:	2354      	movs	r3, #84	@ 0x54
 8001396:	e7f2      	b.n	800137e <HAL_GPIO_EXTI_Callback+0x4e>
	            res = 'D';	//down
 8001398:	2344      	movs	r3, #68	@ 0x44
 800139a:	e7f0      	b.n	800137e <HAL_GPIO_EXTI_Callback+0x4e>
 800139c:	40021800 	.word	0x40021800
 80013a0:	20000110 	.word	0x20000110
 80013a4:	20000128 	.word	0x20000128
 80013a8:	20000120 	.word	0x20000120

080013ac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <HAL_MspInit+0x3c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80013ba:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80013be:	6459      	str	r1, [r3, #68]	@ 0x44
 80013c0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80013c2:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80013c6:	9100      	str	r1, [sp, #0]
 80013c8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	9201      	str	r2, [sp, #4]
 80013cc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80013ce:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80013d2:	6419      	str	r1, [r3, #64]	@ 0x40
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013de:	210f      	movs	r1, #15
 80013e0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e6:	f003 bb3d 	b.w	8004a64 <HAL_NVIC_SetPriority>
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013f0:	6802      	ldr	r2, [r0, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_CRC_MspInit+0x28>)
 80013f4:	429a      	cmp	r2, r3
{
 80013f6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013f8:	d10b      	bne.n	8001412 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <HAL_CRC_MspInit+0x2c>)
 8001400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001402:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001412:	b002      	add	sp, #8
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023000 	.word	0x40023000
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001420:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001422:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_DMA2D_MspInit+0x40>)
 8001424:	6802      	ldr	r2, [r0, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d116      	bne.n	8001458 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800142a:	2200      	movs	r2, #0
 800142c:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001430:	9201      	str	r2, [sp, #4]
 8001432:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001434:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001438:	6319      	str	r1, [r3, #48]	@ 0x30
 800143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001440:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001442:	2105      	movs	r1, #5
 8001444:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001446:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001448:	f003 fb0c 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800144c:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800144e:	b003      	add	sp, #12
 8001450:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001454:	f003 bb38 	b.w	8004ac8 <HAL_NVIC_EnableIRQ>
}
 8001458:	b003      	add	sp, #12
 800145a:	f85d fb04 	ldr.w	pc, [sp], #4
 800145e:	bf00      	nop
 8001460:	4002b000 	.word	0x4002b000

08001464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001468:	4604      	mov	r4, r0
 800146a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	2214      	movs	r2, #20
 800146e:	2100      	movs	r1, #0
 8001470:	a803      	add	r0, sp, #12
 8001472:	f011 ff74 	bl	801335e <memset>
  if(hi2c->Instance==I2C3)
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <HAL_I2C_MspInit+0xa8>)
 800147a:	429a      	cmp	r2, r3
 800147c:	d143      	bne.n	8001506 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	4c24      	ldr	r4, [pc, #144]	@ (8001510 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	4824      	ldr	r0, [pc, #144]	@ (8001514 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	2500      	movs	r5, #0
 8001484:	9500      	str	r5, [sp, #0]
 8001486:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6323      	str	r3, [r4, #48]	@ 0x30
 800148e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	9501      	str	r5, [sp, #4]
 800149a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80014a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	f04f 0912 	mov.w	r9, #18
 80014b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	f04f 0801 	mov.w	r8, #1
 80014b8:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014ba:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014bc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014c6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f003 fc16 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	4811      	ldr	r0, [pc, #68]	@ (8001518 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80014d2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d6:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f003 fc0b 	bl	8004cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014e2:	9502      	str	r5, [sp, #8]
 80014e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014ea:	6423      	str	r3, [r4, #64]	@ 0x40
 80014ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 80014f6:	6a23      	ldr	r3, [r4, #32]
 80014f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014fc:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 80014fe:	6a23      	ldr	r3, [r4, #32]
 8001500:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001504:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001506:	b009      	add	sp, #36	@ 0x24
 8001508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800150c:	40005c00 	.word	0x40005c00
 8001510:	40023800 	.word	0x40023800
 8001514:	40020800 	.word	0x40020800
 8001518:	40020000 	.word	0x40020000

0800151c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151e:	b099      	sub	sp, #100	@ 0x64
 8001520:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	2214      	movs	r2, #20
 8001524:	2100      	movs	r1, #0
 8001526:	a807      	add	r0, sp, #28
 8001528:	f011 ff19 	bl	801335e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800152c:	2230      	movs	r2, #48	@ 0x30
 800152e:	eb0d 0002 	add.w	r0, sp, r2
 8001532:	2100      	movs	r1, #0
 8001534:	f011 ff13 	bl	801335e <memset>
  if(hltdc->Instance==LTDC)
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	4b5e      	ldr	r3, [pc, #376]	@ (80016b4 <HAL_LTDC_MspInit+0x198>)
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 80b7 	bne.w	80016b0 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001542:	2308      	movs	r3, #8
 8001544:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001546:	23c0      	movs	r3, #192	@ 0xc0
 8001548:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154e:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001550:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001554:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001556:	f004 fd7b 	bl	8006050 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	b108      	cbz	r0, 8001560 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 800155c:	f7ff ff26 	bl	80013ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001560:	4b55      	ldr	r3, [pc, #340]	@ (80016b8 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001562:	4856      	ldr	r0, [pc, #344]	@ (80016bc <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001564:	2400      	movs	r4, #0
 8001566:	9400      	str	r4, [sp, #0]
 8001568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800156a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800156e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001572:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001576:	9200      	str	r2, [sp, #0]
 8001578:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800157a:	9401      	str	r4, [sp, #4]
 800157c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800157e:	f042 0220 	orr.w	r2, r2, #32
 8001582:	631a      	str	r2, [r3, #48]	@ 0x30
 8001584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001586:	f002 0220 	and.w	r2, r2, #32
 800158a:	9201      	str	r2, [sp, #4]
 800158c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	9402      	str	r4, [sp, #8]
 8001590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	631a      	str	r2, [r3, #48]	@ 0x30
 8001598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800159a:	f002 0201 	and.w	r2, r2, #1
 800159e:	9202      	str	r2, [sp, #8]
 80015a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	9403      	str	r4, [sp, #12]
 80015a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015a6:	f042 0202 	orr.w	r2, r2, #2
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80015ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015ae:	f002 0202 	and.w	r2, r2, #2
 80015b2:	9203      	str	r2, [sp, #12]
 80015b4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015b6:	9404      	str	r4, [sp, #16]
 80015b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
 80015c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015c2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80015c6:	9204      	str	r2, [sp, #16]
 80015c8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	9405      	str	r4, [sp, #20]
 80015cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015ce:	f042 0204 	orr.w	r2, r2, #4
 80015d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80015d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015d6:	f002 0204 	and.w	r2, r2, #4
 80015da:	9205      	str	r2, [sp, #20]
 80015dc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	9406      	str	r4, [sp, #24]
 80015e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e2:	f042 0208 	orr.w	r2, r2, #8
 80015e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f2:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015fc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001602:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001606:	f003 fb77 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 800160a:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	482c      	ldr	r0, [pc, #176]	@ (80016c0 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001610:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001618:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f003 fb6b 	bl	8004cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001622:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	4827      	ldr	r0, [pc, #156]	@ (80016c4 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001626:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f003 fb61 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001636:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	4822      	ldr	r0, [pc, #136]	@ (80016c4 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800163c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f003 fb56 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800164c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001650:	481d      	ldr	r0, [pc, #116]	@ (80016c8 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001652:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001654:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165e:	f003 fb4b 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001662:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	4819      	ldr	r0, [pc, #100]	@ (80016cc <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001666:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	f003 fb41 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001676:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	4815      	ldr	r0, [pc, #84]	@ (80016d0 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800167a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f003 fb37 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800168a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001690:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001692:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001698:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169c:	f003 fb2c 	bl	8004cf8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80016a0:	2058      	movs	r0, #88	@ 0x58
 80016a2:	4622      	mov	r2, r4
 80016a4:	2105      	movs	r1, #5
 80016a6:	f003 f9dd 	bl	8004a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80016aa:	2058      	movs	r0, #88	@ 0x58
 80016ac:	f003 fa0c 	bl	8004ac8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80016b0:	b019      	add	sp, #100	@ 0x64
 80016b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b4:	40016800 	.word	0x40016800
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40021800 	.word	0x40021800
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00

080016d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d4:	b510      	push	{r4, lr}
 80016d6:	4604      	mov	r4, r0
 80016d8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	2214      	movs	r2, #20
 80016dc:	2100      	movs	r1, #0
 80016de:	a803      	add	r0, sp, #12
 80016e0:	f011 fe3d 	bl	801335e <memset>
  if(hspi->Instance==SPI5)
 80016e4:	6822      	ldr	r2, [r4, #0]
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <HAL_SPI_MspInit+0x64>)
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d123      	bne.n	8001734 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016ec:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 80016f0:	2100      	movs	r1, #0
 80016f2:	9101      	str	r1, [sp, #4]
 80016f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f6:	4811      	ldr	r0, [pc, #68]	@ (800173c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016f8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80016fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001700:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001704:	9201      	str	r2, [sp, #4]
 8001706:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001708:	9102      	str	r1, [sp, #8]
 800170a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800170c:	f042 0220 	orr.w	r2, r2, #32
 8001710:	631a      	str	r2, [r3, #48]	@ 0x30
 8001712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001720:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001722:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001728:	2305      	movs	r3, #5
 800172a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800172e:	a903      	add	r1, sp, #12
 8001730:	f003 fae2 	bl	8004cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001734:	b008      	add	sp, #32
 8001736:	bd10      	pop	{r4, pc}
 8001738:	40015000 	.word	0x40015000
 800173c:	40021400 	.word	0x40021400

08001740 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001744:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001746:	2300      	movs	r3, #0
 8001748:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800174a:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_SDRAM_MspInit+0xb8>)
 800174c:	681c      	ldr	r4, [r3, #0]
 800174e:	2c00      	cmp	r4, #0
 8001750:	d14f      	bne.n	80017f2 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001752:	f04f 0801 	mov.w	r8, #1
 8001756:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 800175a:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <HAL_SDRAM_MspInit+0xbc>)
 800175c:	9400      	str	r4, [sp, #0]
 800175e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001760:	4827      	ldr	r0, [pc, #156]	@ (8001800 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001762:	ea42 0208 	orr.w	r2, r2, r8
 8001766:	639a      	str	r2, [r3, #56]	@ 0x38
 8001768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176a:	ea03 0308 	and.w	r3, r3, r8
 800176e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001772:	2603      	movs	r6, #3
 8001774:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001776:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001778:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800177e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001782:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001786:	f003 fab7 	bl	8004cf8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178a:	481e      	ldr	r0, [pc, #120]	@ (8001804 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800178c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f003 faae 	bl	8004cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800179c:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a0:	4819      	ldr	r0, [pc, #100]	@ (8001808 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ae:	f003 faa3 	bl	8004cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80017b2:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b6:	4815      	ldr	r0, [pc, #84]	@ (800180c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ba:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c4:	f003 fa98 	bl	8004cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80017c8:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	4810      	ldr	r0, [pc, #64]	@ (8001810 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ce:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f003 fa8d 	bl	8004cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017de:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017e2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f003 fa83 	bl	8004cf8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80017f2:	b006      	add	sp, #24
 80017f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f8:	20000344 	.word	0x20000344
 80017fc:	40023800 	.word	0x40023800
 8001800:	40021400 	.word	0x40021400
 8001804:	40020800 	.word	0x40020800
 8001808:	40021800 	.word	0x40021800
 800180c:	40021000 	.word	0x40021000
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40020400 	.word	0x40020400

08001818 <HAL_UART_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	4604      	mov	r4, r0
 800181c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	2214      	movs	r2, #20
 8001820:	2100      	movs	r1, #0
 8001822:	a803      	add	r0, sp, #12
 8001824:	f011 fd9b 	bl	801335e <memset>
  if(huart->Instance==UART4)
 8001828:	6822      	ldr	r2, [r4, #0]
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <HAL_UART_MspInit+0x8c>)
 800182c:	429a      	cmp	r2, r3
 800182e:	d136      	bne.n	800189e <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001830:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8001834:	2400      	movs	r4, #0
 8001836:	9400      	str	r4, [sp, #0]
 8001838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	481b      	ldr	r0, [pc, #108]	@ (80018a8 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800183c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
 8001842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001844:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	9401      	str	r4, [sp, #4]
 800184e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	631a      	str	r2, [r3, #48]	@ 0x30
 8001856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001858:	f002 0201 	and.w	r2, r2, #1
 800185c:	9201      	str	r2, [sp, #4]
 800185e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001860:	9402      	str	r4, [sp, #8]
 8001862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001864:	f042 0204 	orr.w	r2, r2, #4
 8001868:	631a      	str	r2, [r3, #48]	@ 0x30
 800186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001872:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001874:	2703      	movs	r7, #3
 8001876:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	e9cd 5503 	strd	r5, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001880:	e9cd 7606 	strd	r7, r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f003 fa38 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188c:	4807      	ldr	r0, [pc, #28]	@ (80018ac <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800188e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	e9cd 4705 	strd	r4, r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f003 fa2d 	bl	8004cf8 <HAL_GPIO_Init>

    /* USER CODE BEGIN UART4_MspInit 1 */

    /* USER CODE END UART4_MspInit 1 */
  }
}
 800189e:	b009      	add	sp, #36	@ 0x24
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40004c00 	.word	0x40004c00
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020800 	.word	0x40020800

080018b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b530      	push	{r4, r5, lr}
 80018b2:	4601      	mov	r1, r0
 80018b4:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2036      	movs	r0, #54	@ 0x36
 80018ba:	f003 f8d3 	bl	8004a64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018be:	2036      	movs	r0, #54	@ 0x36
 80018c0:	f003 f902 	bl	8004ac8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018c4:	2500      	movs	r5, #0
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <HAL_InitTick+0x6c>)
 80018c8:	9502      	str	r5, [sp, #8]
 80018ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018cc:	4c14      	ldr	r4, [pc, #80]	@ (8001920 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018ce:	f042 0210 	orr.w	r2, r2, #16
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018dc:	a901      	add	r1, sp, #4
 80018de:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018e0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e2:	f004 fb97 	bl	8006014 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018e6:	f004 fb75 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <HAL_InitTick+0x74>)
 80018ec:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018ee:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80018f2:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018f4:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <HAL_InitTick+0x78>)
 80018f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80018fc:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80018fe:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001900:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001902:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001906:	f005 f99b 	bl	8006c40 <HAL_TIM_Base_Init>
 800190a:	b920      	cbnz	r0, 8001916 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800190c:	4620      	mov	r0, r4
 800190e:	f005 f867 	bl	80069e0 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001912:	b009      	add	sp, #36	@ 0x24
 8001914:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001916:	2001      	movs	r0, #1
 8001918:	e7fb      	b.n	8001912 <HAL_InitTick+0x62>
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	20000348 	.word	0x20000348
 8001924:	40001000 	.word	0x40001000
 8001928:	000f4240 	.word	0x000f4240

0800192c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800192c:	4770      	bx	lr

0800192e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler>

08001930 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler>

08001932 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler>

08001934 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler>

08001936 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001936:	4770      	bx	lr

08001938 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001938:	4801      	ldr	r0, [pc, #4]	@ (8001940 <TIM6_DAC_IRQHandler+0x8>)
 800193a:	f005 b88f 	b.w	8006a5c <HAL_TIM_IRQHandler>
 800193e:	bf00      	nop
 8001940:	20000348 	.word	0x20000348

08001944 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001944:	4801      	ldr	r0, [pc, #4]	@ (800194c <LTDC_IRQHandler+0x8>)
 8001946:	f004 b827 	b.w	8005998 <HAL_LTDC_IRQHandler>
 800194a:	bf00      	nop
 800194c:	20000200 	.word	0x20000200

08001950 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001950:	4801      	ldr	r0, [pc, #4]	@ (8001958 <DMA2D_IRQHandler+0x8>)
 8001952:	f003 b903 	b.w	8004b5c <HAL_DMA2D_IRQHandler>
 8001956:	bf00      	nop
 8001958:	200002fc 	.word	0x200002fc

0800195c <EXTI0_IRQHandler>:
/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800195c:	2001      	movs	r0, #1
 800195e:	f003 bac3 	b.w	8004ee8 <HAL_GPIO_EXTI_IRQHandler>

08001962 <EXTI15_10_IRQHandler>:
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}

void EXTI15_10_IRQHandler(void){
 8001962:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001964:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001968:	f003 fabe 	bl	8004ee8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
}
 800196c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001970:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001974:	f003 bab8 	b.w	8004ee8 <HAL_GPIO_EXTI_IRQHandler>

08001978 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001978:	2004      	movs	r0, #4
 800197a:	f003 bab5 	b.w	8004ee8 <HAL_GPIO_EXTI_IRQHandler>

0800197e <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler(void){
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800197e:	2008      	movs	r0, #8
 8001980:	f003 bab2 	b.w	8004ee8 <HAL_GPIO_EXTI_IRQHandler>

08001984 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001984:	2001      	movs	r0, #1
 8001986:	4770      	bx	lr

08001988 <_kill>:

int _kill(int pid, int sig)
{
 8001988:	b508      	push	{r3, lr}
	errno = EINVAL;
 800198a:	f011 fd8b 	bl	80134a4 <__errno>
 800198e:	2316      	movs	r3, #22
 8001990:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001992:	f04f 30ff 	mov.w	r0, #4294967295
 8001996:	bd08      	pop	{r3, pc}

08001998 <_exit>:

void _exit (int status)
{
 8001998:	b508      	push	{r3, lr}
	errno = EINVAL;
 800199a:	f011 fd83 	bl	80134a4 <__errno>
 800199e:	2316      	movs	r3, #22
 80019a0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80019a2:	e7fe      	b.n	80019a2 <_exit+0xa>

080019a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	460d      	mov	r5, r1
 80019a8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	460e      	mov	r6, r1
 80019ac:	1b73      	subs	r3, r6, r5
 80019ae:	429c      	cmp	r4, r3
 80019b0:	dc01      	bgt.n	80019b6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80019b2:	4620      	mov	r0, r4
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80019b6:	f3af 8000 	nop.w
 80019ba:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	e7f5      	b.n	80019ac <_read+0x8>

080019c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	460d      	mov	r5, r1
 80019c4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	460e      	mov	r6, r1
 80019c8:	1b73      	subs	r3, r6, r5
 80019ca:	429c      	cmp	r4, r3
 80019cc:	dc01      	bgt.n	80019d2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80019ce:	4620      	mov	r0, r4
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80019d2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80019d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	e7f5      	b.n	80019c8 <_write+0x8>

080019dc <_close>:

int _close(int file)
{
	return -1;
}
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	4770      	bx	lr

080019e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80019e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80019e8:	2000      	movs	r0, #0
 80019ea:	4770      	bx	lr

080019ec <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019ec:	2001      	movs	r0, #1
 80019ee:	4770      	bx	lr

080019f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019f0:	2000      	movs	r0, #0
 80019f2:	4770      	bx	lr

080019f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <_sbrk+0x2c>)
 80019f6:	6811      	ldr	r1, [r2, #0]
{
 80019f8:	b508      	push	{r3, lr}
 80019fa:	4603      	mov	r3, r0
	if (heap_end == 0)
 80019fc:	b909      	cbnz	r1, 8001a02 <_sbrk+0xe>
		heap_end = &end;
 80019fe:	4909      	ldr	r1, [pc, #36]	@ (8001a24 <_sbrk+0x30>)
 8001a00:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001a02:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001a04:	4669      	mov	r1, sp
 8001a06:	4403      	add	r3, r0
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d906      	bls.n	8001a1a <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001a0c:	f011 fd4a 	bl	80134a4 <__errno>
 8001a10:	230c      	movs	r3, #12
 8001a12:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001a18:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001a1a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001a1c:	e7fc      	b.n	8001a18 <_sbrk+0x24>
 8001a1e:	bf00      	nop
 8001a20:	20000390 	.word	0x20000390
 8001a24:	200157b8 	.word	0x200157b8

08001a28 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001a28:	f000 bcbe 	b.w	80023a8 <touchgfx_init>

08001a2c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001a2c:	f000 bd30 	b.w	8002490 <touchgfx_taskEntry>

08001a30 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a30:	4770      	bx	lr

08001a32 <_ZN20STM32TouchControllerD0Ev>:
 8001a32:	b510      	push	{r4, lr}
 8001a34:	2104      	movs	r1, #4
 8001a36:	4604      	mov	r4, r0
 8001a38:	f011 fa5c 	bl	8012ef4 <_ZdlPvj>
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	bd10      	pop	{r4, pc}

08001a40 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8001a40:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8001a44:	4c0c      	ldr	r4, [pc, #48]	@ (8001a78 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 8001a46:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8001a4a:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 8001a4c:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8001a4e:	6863      	ldr	r3, [r4, #4]
 8001a50:	4798      	blx	r3
 8001a52:	f640 0311 	movw	r3, #2065	@ 0x811
 8001a56:	4298      	cmp	r0, r3
 8001a58:	d10a      	bne.n	8001a70 <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8001a5a:	4d09      	ldr	r5, [pc, #36]	@ (8001a80 <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8001a5c:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 8001a5e:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 8001a60:	2082      	movs	r0, #130	@ 0x82
 8001a62:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	2082      	movs	r0, #130	@ 0x82
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	4798      	blx	r3
 8001a6c:	2000      	movs	r0, #0
    }

    return ret;
}
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 8001a70:	2001      	movs	r0, #1
 8001a72:	e7fc      	b.n	8001a6e <_Z11BSP_TS_Inittt+0x2e>
 8001a74:	2000039e 	.word	0x2000039e
 8001a78:	20000050 	.word	0x20000050
 8001a7c:	2000039c 	.word	0x2000039c
 8001a80:	200003a0 	.word	0x200003a0

08001a84 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 8001a84:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001a88:	20f0      	movs	r0, #240	@ 0xf0
 8001a8a:	f7ff bfd9 	b.w	8001a40 <_Z11BSP_TS_Inittt>
	...

08001a90 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8001a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8001a92:	4d35      	ldr	r5, [pc, #212]	@ (8001b68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 8001a94:	682b      	ldr	r3, [r5, #0]
{
 8001a96:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2082      	movs	r0, #130	@ 0x82
 8001a9c:	4798      	blx	r3
 8001a9e:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d04b      	beq.n	8001b3c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xac>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8001aa4:	682b      	ldr	r3, [r5, #0]
 8001aa6:	f10d 0206 	add.w	r2, sp, #6
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	a901      	add	r1, sp, #4
 8001aae:	2082      	movs	r0, #130	@ 0x82
 8001ab0:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 8001ab2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001ab6:	f640 6274 	movw	r2, #3700	@ 0xe74
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d940      	bls.n	8001b40 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb0>
        {
            y = 3700;
 8001abe:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 8001ac2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001ac6:	1ad2      	subs	r2, r2, r3
 8001ac8:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 8001aca:	2a0a      	cmp	r2, #10
 8001acc:	d93e      	bls.n	8001b4c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        yr = y / 11;
 8001ace:	230b      	movs	r3, #11
 8001ad0:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8001ad4:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d901      	bls.n	8001ae0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 8001ae0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001ae4:	4822      	ldr	r0, [pc, #136]	@ (8001b70 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
 8001ae6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001aea:	428b      	cmp	r3, r1
 8001aec:	d830      	bhi.n	8001b50 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc0>
        {
            x = 3870 - x;
 8001aee:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8001af2:	330e      	adds	r3, #14
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001af4:	6801      	ldr	r1, [r0, #0]
            x = 3870 - x;
 8001af6:	b29b      	uxth	r3, r3
        xr = x / 15;
 8001af8:	250f      	movs	r5, #15
 8001afa:	fbb3 f3f5 	udiv	r3, r3, r5
        else if (xr > TsXBoundary)
 8001afe:	4d1d      	ldr	r5, [pc, #116]	@ (8001b74 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe4>)
 8001b00:	882d      	ldrh	r5, [r5, #0]
 8001b02:	42ab      	cmp	r3, r5
            xr = TsXBoundary - 1;
 8001b04:	bf84      	itt	hi
 8001b06:	f105 35ff 	addhi.w	r5, r5, #4294967295
 8001b0a:	b2ab      	uxthhi	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001b0c:	428b      	cmp	r3, r1
 8001b0e:	461d      	mov	r5, r3
 8001b10:	b28e      	uxth	r6, r1
 8001b12:	d926      	bls.n	8001b62 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd2>
 8001b14:	1b9b      	subs	r3, r3, r6
 8001b16:	b299      	uxth	r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 8001b18:	4e17      	ldr	r6, [pc, #92]	@ (8001b78 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe8>)
 8001b1a:	6837      	ldr	r7, [r6, #0]
 8001b1c:	b2bb      	uxth	r3, r7
 8001b1e:	42ba      	cmp	r2, r7
 8001b20:	bf8c      	ite	hi
 8001b22:	1ad3      	subhi	r3, r2, r3
 8001b24:	1a9b      	subls	r3, r3, r2
 8001b26:	b29b      	uxth	r3, r3

        if (xDiff + yDiff > 5)
 8001b28:	4419      	add	r1, r3
 8001b2a:	2905      	cmp	r1, #5
        {
            _x = x;
 8001b2c:	bfc8      	it	gt
 8001b2e:	6005      	strgt	r5, [r0, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 8001b30:	6803      	ldr	r3, [r0, #0]
            _y = y;
 8001b32:	bfc8      	it	gt
 8001b34:	6032      	strgt	r2, [r6, #0]
        TsState->X = _x;
 8001b36:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8001b38:	6833      	ldr	r3, [r6, #0]
 8001b3a:	80a3      	strh	r3, [r4, #4]
    }
}
 8001b3c:	b003      	add	sp, #12
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 8001b40:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 8001b42:	bf9c      	itt	ls
 8001b44:	23b4      	movls	r3, #180	@ 0xb4
 8001b46:	f8ad 3006 	strhls.w	r3, [sp, #6]
 8001b4a:	e7ba      	b.n	8001ac2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	e7c7      	b.n	8001ae0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 8001b50:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8001b54:	3308      	adds	r3, #8
 8001b56:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8001b58:	2b0e      	cmp	r3, #14
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001b5a:	6801      	ldr	r1, [r0, #0]
        if (xr <= 0)
 8001b5c:	d8cc      	bhi.n	8001af8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x68>
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001b5e:	2500      	movs	r5, #0
            xr = 0;
 8001b60:	462b      	mov	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001b62:	1ac9      	subs	r1, r1, r3
 8001b64:	b289      	uxth	r1, r1
 8001b66:	e7d7      	b.n	8001b18 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x88>
 8001b68:	200003a0 	.word	0x200003a0
 8001b6c:	2000039c 	.word	0x2000039c
 8001b70:	20000398 	.word	0x20000398
 8001b74:	2000039e 	.word	0x2000039e
 8001b78:	20000394 	.word	0x20000394

08001b7c <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8001b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8001b7e:	4668      	mov	r0, sp
{
 8001b80:	460d      	mov	r5, r1
 8001b82:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8001b84:	f7ff ff84 	bl	8001a90 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 8001b88:	f8bd 0000 	ldrh.w	r0, [sp]
 8001b8c:	b130      	cbz	r0, 8001b9c <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8001b8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001b92:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8001b94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001b98:	6023      	str	r3, [r4, #0]
        return true;
 8001b9a:	2001      	movs	r0, #1
}
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bd30      	pop	{r4, r5, pc}

08001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001ba0:	2803      	cmp	r0, #3
 8001ba2:	d821      	bhi.n	8001be8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8001ba4:	e8df f000 	tbb	[pc, r0]
 8001ba8:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	fab2 f282 	clz	r2, r2
 8001bb4:	0952      	lsrs	r2, r2, #5
 8001bb6:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001bb8:	480d      	ldr	r0, [pc, #52]	@ (8001bf0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001bba:	f003 b987 	b.w	8004ecc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	fab2 f282 	clz	r2, r2
 8001bc6:	0952      	lsrs	r2, r2, #5
 8001bc8:	2108      	movs	r1, #8
 8001bca:	e7f5      	b.n	8001bb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	fab2 f282 	clz	r2, r2
 8001bd4:	0952      	lsrs	r2, r2, #5
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	e7ee      	b.n	8001bb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	0952      	lsrs	r2, r2, #5
 8001be4:	2120      	movs	r1, #32
 8001be6:	e7e7      	b.n	8001bb8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200003a4 	.word	0x200003a4
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001bf4:	2803      	cmp	r0, #3
 8001bf6:	d821      	bhi.n	8001c3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 8001bf8:	e8df f000 	tbb	[pc, r0]
 8001bfc:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	3a00      	subs	r2, #0
 8001c06:	bf18      	it	ne
 8001c08:	2201      	movne	r2, #1
 8001c0a:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001c0c:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001c0e:	f003 b95d 	b.w	8004ecc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	3a00      	subs	r2, #0
 8001c18:	bf18      	it	ne
 8001c1a:	2201      	movne	r2, #1
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	e7f5      	b.n	8001c0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	3a00      	subs	r2, #0
 8001c26:	bf18      	it	ne
 8001c28:	2201      	movne	r2, #1
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	e7ee      	b.n	8001c0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	3a00      	subs	r2, #0
 8001c34:	bf18      	it	ne
 8001c36:	2201      	movne	r2, #1
 8001c38:	2120      	movs	r1, #32
 8001c3a:	e7e7      	b.n	8001c0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200003a4 	.word	0x200003a4
 8001c44:	40021000 	.word	0x40021000

08001c48 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001c48:	2803      	cmp	r0, #3
 8001c4a:	d80d      	bhi.n	8001c68 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8001c4c:	e8df f000 	tbb	[pc, r0]
 8001c50:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c54:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c56:	4805      	ldr	r0, [pc, #20]	@ (8001c6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8001c58:	f003 b93d 	b.w	8004ed6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	e7fa      	b.n	8001c56 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c60:	2110      	movs	r1, #16
 8001c62:	e7f8      	b.n	8001c56 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c64:	2120      	movs	r1, #32
 8001c66:	e7f6      	b.n	8001c56 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001c70:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001c72:	2803      	cmp	r0, #3
 8001c74:	d811      	bhi.n	8001c9a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 8001c76:	e8df f000 	tbb	[pc, r0]
 8001c7a:	0a02      	.short	0x0a02
 8001c7c:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c7e:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8001c82:	f003 f91d 	bl	8004ec0 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001c86:	1e43      	subs	r3, r0, #1
 8001c88:	4258      	negs	r0, r3
 8001c8a:	4158      	adcs	r0, r3
 8001c8c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c8e:	2108      	movs	r1, #8
 8001c90:	e7f6      	b.n	8001c80 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c92:	2110      	movs	r1, #16
 8001c94:	e7f4      	b.n	8001c80 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c96:	2120      	movs	r1, #32
 8001c98:	e7f2      	b.n	8001c80 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e7f3      	b.n	8001c86 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <_ZN8touchgfx4GPIO4initEv>:
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	4d08      	ldr	r5, [pc, #32]	@ (8001cc8 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001ca8:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001caa:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001cac:	b2e0      	uxtb	r0, r4
 8001cae:	f7ff ffdf 	bl	8001c70 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001cb2:	b118      	cbz	r0, 8001cbc <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001cb8:	bf18      	it	ne
 8001cba:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001cbc:	3401      	adds	r4, #1
 8001cbe:	2c05      	cmp	r4, #5
 8001cc0:	f105 0504 	add.w	r5, r5, #4
 8001cc4:	d1f2      	bne.n	8001cac <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
 8001cc8:	200003a4 	.word	0x200003a4

08001ccc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001ccc:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001cce:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001cd2:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001cd6:	4770      	bx	lr

08001cd8 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001cd8:	2000      	movs	r0, #0
 8001cda:	4770      	bx	lr

08001cdc <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001cde:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001ce0:	3900      	subs	r1, #0
 8001ce2:	bf18      	it	ne
 8001ce4:	2101      	movne	r1, #1
 8001ce6:	7019      	strb	r1, [r3, #0]
    }
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20015443 	.word	0x20015443

08001cf0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	4770      	bx	lr

08001cf4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001cf4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001cf6:	b10b      	cbz	r3, 8001cfc <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4718      	bx	r3
        }
    }
 8001cfc:	4770      	bx	lr

08001cfe <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001cfe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d02:	4770      	bx	lr

08001d04 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001d04:	6840      	ldr	r0, [r0, #4]
 8001d06:	6803      	ldr	r3, [r0, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	4718      	bx	r3

08001d0c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8001d0c:	4770      	bx	lr

08001d0e <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8001d0e:	4770      	bx	lr

08001d10 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001d10:	4770      	bx	lr
	...

08001d14 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001d18:	f000 fc5a 	bl	80025d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001d22:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 8001d24:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8001d28:	4620      	mov	r0, r4
 8001d2a:	46ac      	mov	ip, r5
}
 8001d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8001d30:	4760      	bx	ip
 8001d32:	bf00      	nop
 8001d34:	d0000000 	.word	0xd0000000

08001d38 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001d38:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001d3a:	6803      	ldr	r3, [r0, #0]
{
 8001d3c:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d42:	4798      	blx	r3
    enableInterrupts();
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	4620      	mov	r0, r4
 8001d48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001d4a:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001d4c:	f000 f8ec 	bl	8001f28 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	4620      	mov	r0, r4
 8001d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d56:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8001d58:	2029      	movs	r0, #41	@ 0x29
 8001d5a:	f7fe ffb1 	bl	8000cc0 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001d5e:	f000 f8e3 	bl	8001f28 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	4620      	mov	r0, r4
 8001d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d68:	4798      	blx	r3
    for (;;)
 8001d6a:	e7f8      	b.n	8001d5e <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08001d6c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001d70:	f008 fcfc 	bl	800a76c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	4620      	mov	r0, r4
 8001d78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001d80:	4718      	bx	r3

08001d82 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d82:	f000 bc17 	b.w	80025b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001d86 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001d86:	f000 bc1b 	b.w	80025c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001d8a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d8a:	f000 bc47 	b.w	800261c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001d8e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d8e:	f000 bbed 	b.w	800256c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001d92 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d92:	f000 bc47 	b.w	8002624 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001d96 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d96:	f000 bc4f 	b.w	8002638 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001d9a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001d9a:	f000 bbf1 	b.w	8002580 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001d9e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001d9e:	f007 bf45 	b.w	8009c2c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001da2 <_ZN11TouchGFXHALD0Ev>:
 8001da2:	b510      	push	{r4, lr}
 8001da4:	217c      	movs	r1, #124	@ 0x7c
 8001da6:	4604      	mov	r4, r0
 8001da8:	f011 f8a4 	bl	8012ef4 <_ZdlPvj>
 8001dac:	4620      	mov	r0, r4
 8001dae:	bd10      	pop	{r4, pc}

08001db0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8001db0:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001db2:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001db6:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8001dbc:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8001dbe:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001dc0:	d009      	beq.n	8001dd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001dc2:	b93a      	cbnz	r2, 8001dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001dc6:	490b      	ldr	r1, [pc, #44]	@ (8001df4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001dc8:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001dca:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8001dcc:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001dce:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8001dd0:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8001dd2:	701a      	strb	r2, [r3, #0]
    }
 8001dd4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001dd6:	2a00      	cmp	r2, #0
 8001dd8:	d0fc      	beq.n	8001dd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ddc:	4905      	ldr	r1, [pc, #20]	@ (8001df4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001dde:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001de0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001de2:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001de4:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001de6:	2200      	movs	r2, #0
 8001de8:	e7f3      	b.n	8001dd2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001dea:	bf00      	nop
 8001dec:	2001543c 	.word	0x2001543c
 8001df0:	20015438 	.word	0x20015438
 8001df4:	2001543a 	.word	0x2001543a

08001df8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001dfe:	b935      	cbnz	r5, 8001e0e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001e02:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001e04:	480a      	ldr	r0, [pc, #40]	@ (8001e30 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001e06:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001e0a:	f011 f8a1 	bl	8012f50 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001e0e:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001e14:	3a00      	subs	r2, #0
 8001e16:	bf18      	it	ne
 8001e18:	2201      	movne	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001e1c:	6803      	ldr	r3, [r0, #0]
    }
 8001e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e26:	4718      	bx	r3
 8001e28:	08014204 	.word	0x08014204
 8001e2c:	0801423c 	.word	0x0801423c
 8001e30:	0801428a 	.word	0x0801428a
 8001e34:	20015442 	.word	0x20015442

08001e38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001e38:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	428b      	cmp	r3, r1
 8001e40:	d803      	bhi.n	8001e4a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d905      	bls.n	8001e56 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001e4a:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001e4c:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001e4e:	4808      	ldr	r0, [pc, #32]	@ (8001e70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001e50:	219e      	movs	r1, #158	@ 0x9e
 8001e52:	f011 f87d 	bl	8012f50 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001e56:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001e58:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001e5c:	801a      	strh	r2, [r3, #0]
    }
 8001e5e:	bd08      	pop	{r3, pc}
 8001e60:	20015438 	.word	0x20015438
 8001e64:	2001543a 	.word	0x2001543a
 8001e68:	080142cf 	.word	0x080142cf
 8001e6c:	08014332 	.word	0x08014332
 8001e70:	0801428a 	.word	0x0801428a
 8001e74:	2001543e 	.word	0x2001543e
 8001e78:	20015440 	.word	0x20015440

08001e7c <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001e7c:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001e7e:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001e82:	b118      	cbz	r0, 8001e8c <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001e84:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001e86:	6803      	ldr	r3, [r0, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4718      	bx	r3
    }
 8001e8c:	4770      	bx	lr
	...

08001e90 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e90:	2101      	movs	r1, #1
{
 8001e92:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e94:	2200      	movs	r2, #0
 8001e96:	4608      	mov	r0, r1
 8001e98:	f005 f9f0 	bl	800727c <osSemaphoreNew>
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e9e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ea0:	b928      	cbnz	r0, 8001eae <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001ea6:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ea8:	480a      	ldr	r0, [pc, #40]	@ (8001ed4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001eaa:	f011 f851 	bl	8012f50 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f005 fa8a 	bl	80073cc <osMessageQueueNew>
 8001eb8:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001eba:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ebc:	b918      	cbnz	r0, 8001ec6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001ec0:	4a03      	ldr	r2, [pc, #12]	@ (8001ed0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001ec2:	212c      	movs	r1, #44	@ 0x2c
 8001ec4:	e7f0      	b.n	8001ea8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001ec6:	bd08      	pop	{r3, pc}
 8001ec8:	200003b8 	.word	0x200003b8
 8001ecc:	08014375 	.word	0x08014375
 8001ed0:	080143be 	.word	0x080143be
 8001ed4:	080143ed 	.word	0x080143ed
 8001ed8:	200003b4 	.word	0x200003b4
 8001edc:	0801443d 	.word	0x0801443d

08001ee0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ee0:	4b02      	ldr	r3, [pc, #8]	@ (8001eec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	f005 ba12 	b.w	8007310 <osSemaphoreAcquire>
 8001eec:	200003b8 	.word	0x200003b8

08001ef0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001ef0:	4b01      	ldr	r3, [pc, #4]	@ (8001ef8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	f005 ba38 	b.w	8007368 <osSemaphoreRelease>
 8001ef8:	200003b8 	.word	0x200003b8

08001efc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001efc:	4b02      	ldr	r3, [pc, #8]	@ (8001f08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001efe:	2100      	movs	r1, #0
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	f005 ba05 	b.w	8007310 <osSemaphoreAcquire>
 8001f06:	bf00      	nop
 8001f08:	200003b8 	.word	0x200003b8

08001f0c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001f0c:	f7ff bff0 	b.w	8001ef0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001f10 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f10:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001f12:	4904      	ldr	r1, [pc, #16]	@ (8001f24 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001f14:	6800      	ldr	r0, [r0, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f005 ba92 	b.w	8007442 <osMessageQueuePut>
 8001f1e:	bf00      	nop
 8001f20:	200003b4 	.word	0x200003b4
 8001f24:	20000010 	.word	0x20000010

08001f28 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f28:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f2a:	4c08      	ldr	r4, [pc, #32]	@ (8001f4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	a901      	add	r1, sp, #4
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	f005 fab6 	bl	80074a4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f38:	6820      	ldr	r0, [r4, #0]
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	2200      	movs	r2, #0
 8001f40:	a901      	add	r1, sp, #4
 8001f42:	f005 faaf 	bl	80074a4 <osMessageQueueGet>
}
 8001f46:	b002      	add	sp, #8
 8001f48:	bd10      	pop	{r4, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200003b4 	.word	0x200003b4

08001f50 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f50:	6803      	ldr	r3, [r0, #0]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f54:	4718      	bx	r3

08001f56 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f56:	2001      	movs	r0, #1
 8001f58:	4770      	bx	lr

08001f5a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f5a:	6803      	ldr	r3, [r0, #0]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	4718      	bx	r3

08001f60 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8001f60:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <_ZN8STM32DMA10initializeEv+0x3c>)
 8001f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f6a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f72:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001f76:	9201      	str	r2, [sp, #4]
 8001f78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f80:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001f88:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <_ZN8STM32DMA10initializeEv+0x40>)
 8001f8c:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <_ZN8STM32DMA10initializeEv+0x44>)
 8001f8e:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <_ZN8STM32DMA10initializeEv+0x48>)
 8001f92:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f96:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001f98:	b002      	add	sp, #8
 8001f9a:	4770      	bx	lr
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	200002fc 	.word	0x200002fc
 8001fa4:	08002239 	.word	0x08002239
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001fac:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001fb0:	4770      	bx	lr
	...

08001fb4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <_ZN8STM32DMAD1Ev+0x18>)
 8001fb6:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <_ZN8STM32DMAD1Ev+0x1c>)
 8001fba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fc6:	f3bf 8f6f 	isb	sy
}
 8001fca:	4770      	bx	lr
 8001fcc:	08014fbc 	.word	0x08014fbc
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001fd4:	b510      	push	{r4, lr}
 8001fd6:	4604      	mov	r4, r0
}
 8001fd8:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001fdc:	f7ff ffea 	bl	8001fb4 <_ZN8STM32DMAD1Ev>
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f010 ff87 	bl	8012ef4 <_ZdlPvj>
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	bd10      	pop	{r4, pc}
	...

08001fec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001fec:	b508      	push	{r3, lr}
    switch (format)
 8001fee:	280a      	cmp	r0, #10
 8001ff0:	d809      	bhi.n	8002006 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001ff2:	e8df f000 	tbb	[pc, r0]
 8001ff6:	1006      	.short	0x1006
 8001ff8:	0808080e 	.word	0x0808080e
 8001ffc:	10101008 	.word	0x10101008
 8002000:	10          	.byte	0x10
 8002001:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002002:	2002      	movs	r0, #2
}
 8002004:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002008:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 800200a:	4806      	ldr	r0, [pc, #24]	@ (8002024 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800200c:	2187      	movs	r1, #135	@ 0x87
 800200e:	f010 ff9f 	bl	8012f50 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002012:	2000      	movs	r0, #0
 8002014:	e7f6      	b.n	8002004 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002016:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002018:	e7f4      	b.n	8002004 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800201a:	bf00      	nop
 800201c:	0801447f 	.word	0x0801447f
 8002020:	0801449a 	.word	0x0801449a
 8002024:	080144e5 	.word	0x080144e5

08002028 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800202c:	7f88      	ldrb	r0, [r1, #30]
 800202e:	f7ff ffdd 	bl	8001fec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002032:	8aa5      	ldrh	r5, [r4, #20]
 8002034:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002038:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800203a:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800203c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002042:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002044:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002046:	1b52      	subs	r2, r2, r5
 8002048:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800204a:	6825      	ldr	r5, [r4, #0]
 800204c:	2d08      	cmp	r5, #8
 800204e:	d10e      	bne.n	800206e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002050:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002052:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002054:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002056:	7f20      	ldrb	r0, [r4, #28]
 8002058:	4a0e      	ldr	r2, [pc, #56]	@ (8002094 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 800205a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800205e:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002060:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002062:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002064:	4a0c      	ldr	r2, [pc, #48]	@ (8002098 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002066:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002068:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800206a:	601a      	str	r2, [r3, #0]
    }
}
 800206c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800206e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002070:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002072:	611a      	str	r2, [r3, #16]
 8002074:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002076:	0a0a      	lsrs	r2, r1, #8
 8002078:	0948      	lsrs	r0, r1, #5
 800207a:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 800207e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8002082:	4302      	orrs	r2, r0
 8002084:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002088:	430a      	orrs	r2, r1
 800208a:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800208c:	4a03      	ldr	r2, [pc, #12]	@ (800209c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 800208e:	e7ec      	b.n	800206a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002090:	4002b000 	.word	0x4002b000
 8002094:	00010009 	.word	0x00010009
 8002098:	00020201 	.word	0x00020201
 800209c:	00030201 	.word	0x00030201

080020a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 80020a0:	b508      	push	{r3, lr}
    switch (format)
 80020a2:	280b      	cmp	r0, #11
 80020a4:	d80b      	bhi.n	80020be <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 80020a6:	e8df f000 	tbb	[pc, r0]
 80020aa:	1206      	.short	0x1206
 80020ac:	0a0a0a10 	.word	0x0a0a0a10
 80020b0:	0808080a 	.word	0x0808080a
 80020b4:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80020b6:	2002      	movs	r0, #2
}
 80020b8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 80020ba:	2005      	movs	r0, #5
        break;
 80020bc:	e7fc      	b.n	80020b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 80020be:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 80020c0:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 80020c2:	4806      	ldr	r0, [pc, #24]	@ (80020dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 80020c4:	2166      	movs	r1, #102	@ 0x66
 80020c6:	f010 ff43 	bl	8012f50 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80020ca:	2000      	movs	r0, #0
 80020cc:	e7f4      	b.n	80020b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 80020ce:	2001      	movs	r0, #1
    return dma2dColorMode;
 80020d0:	e7f2      	b.n	80020b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80020d2:	bf00      	nop
 80020d4:	0801447f 	.word	0x0801447f
 80020d8:	08014533 	.word	0x08014533
 80020dc:	080144e5 	.word	0x080144e5

080020e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 80020e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80020e4:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 80020e8:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80020ea:	4640      	mov	r0, r8
 80020ec:	f7ff ffd8 	bl	80020a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020f0:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80020f2:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020f4:	4638      	mov	r0, r7
 80020f6:	f7ff ffd3 	bl	80020a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 80020fa:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020fc:	4638      	mov	r0, r7
 80020fe:	f7ff ff75 	bl	8001fec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002102:	8aa1      	ldrh	r1, [r4, #20]
 8002104:	8b62      	ldrh	r2, [r4, #26]
 8002106:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002108:	1a52      	subs	r2, r2, r1
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800210c:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800210e:	8b22      	ldrh	r2, [r4, #24]
 8002110:	1a52      	subs	r2, r2, r1
 8002112:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002114:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002116:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002118:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800211e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002120:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002122:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002124:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002126:	6820      	ldr	r0, [r4, #0]
 8002128:	2880      	cmp	r0, #128	@ 0x80
 800212a:	d028      	beq.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 800212c:	7f22      	ldrb	r2, [r4, #28]
 800212e:	d80f      	bhi.n	8002150 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8002130:	2820      	cmp	r0, #32
 8002132:	d067      	beq.n	8002204 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8002134:	2840      	cmp	r0, #64	@ 0x40
 8002136:	d065      	beq.n	8002204 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8002138:	2804      	cmp	r0, #4
 800213a:	d01a      	beq.n	8002172 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800213c:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800213e:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002142:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002146:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002148:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 800214a:	d061      	beq.n	8002210 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800214c:	4a33      	ldr	r2, [pc, #204]	@ (800221c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800214e:	e044      	b.n	80021da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8002150:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8002154:	d004      	beq.n	8002160 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002156:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800215a:	d1ef      	bne.n	800213c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800215c:	4830      	ldr	r0, [pc, #192]	@ (8002220 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800215e:	e000      	b.n	8002162 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002160:	4830      	ldr	r0, [pc, #192]	@ (8002224 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002162:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002166:	61da      	str	r2, [r3, #28]
 8002168:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800216a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800216c:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800216e:	6159      	str	r1, [r3, #20]
 8002170:	e032      	b.n	80021d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002172:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002176:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800217a:	61da      	str	r2, [r3, #28]
 800217c:	e7f6      	b.n	800216c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800217e:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002180:	1d02      	adds	r2, r0, #4
 8002182:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002184:	7f22      	ldrb	r2, [r4, #28]
 8002186:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800218a:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 800218e:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002190:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002192:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002194:	7801      	ldrb	r1, [r0, #0]
 8002196:	b141      	cbz	r1, 80021aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8002198:	2901      	cmp	r1, #1
 800219a:	d021      	beq.n	80021e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 800219c:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800219e:	4a23      	ldr	r2, [pc, #140]	@ (800222c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 80021a0:	4823      	ldr	r0, [pc, #140]	@ (8002230 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 80021a2:	f240 1111 	movw	r1, #273	@ 0x111
 80021a6:	f010 fed3 	bl	8012f50 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	8841      	ldrh	r1, [r0, #2]
 80021ae:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80021b2:	3901      	subs	r1, #1
 80021b4:	f022 0210 	bic.w	r2, r2, #16
 80021b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021bc:	61da      	str	r2, [r3, #28]
            bool blend = true;
 80021be:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80021c0:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80021c2:	69da      	ldr	r2, [r3, #28]
 80021c4:	f042 0220 	orr.w	r2, r2, #32
 80021c8:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	0692      	lsls	r2, r2, #26
 80021ce:	d4fc      	bmi.n	80021ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80021d0:	2210      	movs	r2, #16
 80021d2:	609a      	str	r2, [r3, #8]
            if (blend)
 80021d4:	2900      	cmp	r1, #0
 80021d6:	d0b9      	beq.n	800214c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80021d8:	4a16      	ldr	r2, [pc, #88]	@ (8002234 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 80021e0:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	8840      	ldrh	r0, [r0, #2]
 80021e8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80021ec:	f100 30ff 	add.w	r0, r0, #4294967295
 80021f0:	f022 0210 	bic.w	r2, r2, #16
 80021f4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80021f8:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 80021fc:	bf18      	it	ne
 80021fe:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002200:	61da      	str	r2, [r3, #28]
                break;
 8002202:	e7dd      	b.n	80021c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002204:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800220a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800220e:	e7b4      	b.n	800217a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002210:	f240 2201 	movw	r2, #513	@ 0x201
 8002214:	e7e1      	b.n	80021da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8002216:	bf00      	nop
 8002218:	4002b000 	.word	0x4002b000
 800221c:	00010201 	.word	0x00010201
 8002220:	00020009 	.word	0x00020009
 8002224:	0002000a 	.word	0x0002000a
 8002228:	0801457d 	.word	0x0801457d
 800222c:	08014597 	.word	0x08014597
 8002230:	080144e5 	.word	0x080144e5
 8002234:	00020201 	.word	0x00020201

08002238 <DMA2D_XferCpltCallback>:
        return instance;
 8002238:	4b02      	ldr	r3, [pc, #8]	@ (8002244 <DMA2D_XferCpltCallback+0xc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800223e:	6803      	ldr	r3, [r0, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4718      	bx	r3
 8002244:	20015444 	.word	0x20015444

08002248 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800224c:	4625      	mov	r5, r4
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <_ZN8STM32DMAC1Ev+0x30>)
 8002250:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002252:	2600      	movs	r6, #0
 8002254:	6060      	str	r0, [r4, #4]
 8002256:	7226      	strb	r6, [r4, #8]
 8002258:	7266      	strb	r6, [r4, #9]
 800225a:	f845 3b20 	str.w	r3, [r5], #32
 800225e:	2260      	movs	r2, #96	@ 0x60
 8002260:	4629      	mov	r1, r5
 8002262:	f008 fbc1 	bl	800a9e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002266:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 800226a:	60ee      	str	r6, [r5, #12]
 800226c:	3524      	adds	r5, #36	@ 0x24
 800226e:	429d      	cmp	r5, r3
 8002270:	d1fb      	bne.n	800226a <_ZN8STM32DMAC1Ev+0x22>
}
 8002272:	4620      	mov	r0, r4
 8002274:	bd70      	pop	{r4, r5, r6, pc}
 8002276:	bf00      	nop
 8002278:	08014fbc 	.word	0x08014fbc

0800227c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800227c:	2001      	movs	r0, #1
 800227e:	4770      	bx	lr

08002280 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002280:	2038      	movs	r0, #56	@ 0x38
 8002282:	4770      	bx	lr

08002284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002284:	2338      	movs	r3, #56	@ 0x38
 8002286:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800228a:	3008      	adds	r0, #8
 800228c:	4770      	bx	lr

0800228e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800228e:	2338      	movs	r3, #56	@ 0x38
 8002290:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002294:	3008      	adds	r0, #8
 8002296:	4770      	bx	lr

08002298 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002298:	2001      	movs	r0, #1
 800229a:	4770      	bx	lr

0800229c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800229c:	f243 10d8 	movw	r0, #12760	@ 0x31d8
 80022a0:	4770      	bx	lr

080022a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022a2:	f243 13d8 	movw	r3, #12760	@ 0x31d8
 80022a6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022aa:	3008      	adds	r0, #8
 80022ac:	4770      	bx	lr

080022ae <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ae:	f243 13d8 	movw	r3, #12760	@ 0x31d8
 80022b2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022b6:	3008      	adds	r0, #8
 80022b8:	4770      	bx	lr

080022ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022ba:	2001      	movs	r0, #1
 80022bc:	4770      	bx	lr

080022be <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022be:	2010      	movs	r0, #16
 80022c0:	4770      	bx	lr

080022c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022c2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022c6:	3008      	adds	r0, #8
 80022c8:	4770      	bx	lr

080022ca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ca:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022ce:	3008      	adds	r0, #8
 80022d0:	4770      	bx	lr

080022d2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80022d2:	4608      	mov	r0, r1
 80022d4:	f000 be74 	b.w	8002fc0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080022d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80022d8:	b510      	push	{r4, lr}
 80022da:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 80022dc:	6003      	str	r3, [r0, #0]
 80022de:	4604      	mov	r4, r0
 80022e0:	f007 f9fb 	bl	80096da <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022e4:	4620      	mov	r0, r4
 80022e6:	bd10      	pop	{r4, pc}
 80022e8:	08015074 	.word	0x08015074

080022ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80022ec:	b510      	push	{r4, lr}
 80022ee:	4604      	mov	r4, r0
 80022f0:	f7ff fff2 	bl	80022d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80022f4:	4620      	mov	r0, r4
 80022f6:	2140      	movs	r1, #64	@ 0x40
 80022f8:	f010 fdfc 	bl	8012ef4 <_ZdlPvj>
 80022fc:	4620      	mov	r0, r4
 80022fe:	bd10      	pop	{r4, pc}

08002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002300:	b510      	push	{r4, lr}
 8002302:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002304:	6003      	str	r3, [r0, #0]
 8002306:	4604      	mov	r4, r0
 8002308:	f007 f9e7 	bl	80096da <_ZN8touchgfx17AbstractPartitionD1Ev>
 800230c:	4620      	mov	r0, r4
 800230e:	bd10      	pop	{r4, pc}
 8002310:	08015040 	.word	0x08015040

08002314 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002314:	b510      	push	{r4, lr}
 8002316:	4604      	mov	r4, r0
 8002318:	f7ff fff2 	bl	8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800231c:	4620      	mov	r0, r4
 800231e:	f243 11e0 	movw	r1, #12768	@ 0x31e0
 8002322:	f010 fde7 	bl	8012ef4 <_ZdlPvj>
 8002326:	4620      	mov	r0, r4
 8002328:	bd10      	pop	{r4, pc}
	...

0800232c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800232c:	b510      	push	{r4, lr}
 800232e:	4b03      	ldr	r3, [pc, #12]	@ (800233c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002330:	6003      	str	r3, [r0, #0]
 8002332:	4604      	mov	r4, r0
 8002334:	f007 f9d1 	bl	80096da <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002338:	4620      	mov	r0, r4
 800233a:	bd10      	pop	{r4, pc}
 800233c:	0801500c 	.word	0x0801500c

08002340 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002340:	b510      	push	{r4, lr}
 8002342:	4604      	mov	r4, r0
 8002344:	f7ff fff2 	bl	800232c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002348:	4620      	mov	r0, r4
 800234a:	2118      	movs	r1, #24
 800234c:	f010 fdd2 	bl	8012ef4 <_ZdlPvj>
 8002350:	4620      	mov	r0, r4
 8002352:	bd10      	pop	{r4, pc}

08002354 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002354:	b510      	push	{r4, lr}
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <_ZN12FrontendHeapD1Ev+0x28>)
 8002358:	6003      	str	r3, [r0, #0]
 800235a:	4604      	mov	r4, r0
 800235c:	f500 5048 	add.w	r0, r0, #12800	@ 0x3200
 8002360:	300c      	adds	r0, #12
 8002362:	f7ff ffb9 	bl	80022d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002366:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800236a:	f7ff ffc9 	bl	8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800236e:	f104 0014 	add.w	r0, r4, #20
 8002372:	f7ff ffdb 	bl	800232c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002376:	4620      	mov	r0, r4
 8002378:	bd10      	pop	{r4, pc}
 800237a:	bf00      	nop
 800237c:	080150a8 	.word	0x080150a8

08002380 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002380:	b508      	push	{r3, lr}
 8002382:	4802      	ldr	r0, [pc, #8]	@ (800238c <__tcf_0+0xc>)
 8002384:	f7ff ffe6 	bl	8002354 <_ZN12FrontendHeapD1Ev>
 8002388:	bd08      	pop	{r3, pc}
 800238a:	bf00      	nop
 800238c:	20001270 	.word	0x20001270

08002390 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002390:	b510      	push	{r4, lr}
 8002392:	4604      	mov	r4, r0
 8002394:	f7ff ffde 	bl	8002354 <_ZN12FrontendHeapD1Ev>
 8002398:	4620      	mov	r0, r4
 800239a:	f243 31b8 	movw	r1, #13240	@ 0x33b8
 800239e:	f010 fda9 	bl	8012ef4 <_ZdlPvj>
 80023a2:	4620      	mov	r0, r4
 80023a4:	bd10      	pop	{r4, pc}
	...

080023a8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 80023a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80023ac:	f000 f9a6 	bl	80026fc <_ZN14BitmapDatabase11getInstanceEv>
 80023b0:	4605      	mov	r5, r0
 80023b2:	f000 f9a7 	bl	8002704 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80023b6:	2400      	movs	r4, #0
 80023b8:	4601      	mov	r1, r0
 80023ba:	4623      	mov	r3, r4
 80023bc:	4628      	mov	r0, r5
 80023be:	4622      	mov	r2, r4
 80023c0:	9400      	str	r4, [sp, #0]
 80023c2:	f00d ff05 	bl	80101d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80023c6:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <touchgfx_init+0xb8>)
 80023c8:	4a26      	ldr	r2, [pc, #152]	@ (8002464 <touchgfx_init+0xbc>)
        static FrontendHeap instance;
 80023ca:	4d27      	ldr	r5, [pc, #156]	@ (8002468 <touchgfx_init+0xc0>)
 80023cc:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80023ce:	4620      	mov	r0, r4
 80023d0:	f001 fc3e 	bl	8003c50 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80023d4:	4825      	ldr	r0, [pc, #148]	@ (800246c <touchgfx_init+0xc4>)
 80023d6:	f00d fe63 	bl	80100a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80023da:	682b      	ldr	r3, [r5, #0]
 80023dc:	f3bf 8f5b 	dmb	ish
 80023e0:	07db      	lsls	r3, r3, #31
 80023e2:	d436      	bmi.n	8002452 <touchgfx_init+0xaa>
 80023e4:	4628      	mov	r0, r5
 80023e6:	f010 fd87 	bl	8012ef8 <__cxa_guard_acquire>
 80023ea:	b390      	cbz	r0, 8002452 <touchgfx_init+0xaa>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80023ec:	4c20      	ldr	r4, [pc, #128]	@ (8002470 <touchgfx_init+0xc8>)
          screenStorage(scr),
          transitionStorage(tra),
 80023ee:	4f21      	ldr	r7, [pc, #132]	@ (8002474 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80023f0:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <touchgfx_init+0xd0>)
 80023f2:	6023      	str	r3, [r4, #0]
          frontendApplication(app)
 80023f4:	f107 0650 	add.w	r6, r7, #80	@ 0x50
        : presenterStorage(pres),
 80023f8:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 80023fc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
        : presenterStorage(pres),
 8002400:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002402:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8002406:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002408:	6126      	str	r6, [r4, #16]
 800240a:	f007 f967 	bl	80096dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 800240e:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <touchgfx_init+0xd4>)
 8002410:	6163      	str	r3, [r4, #20]
 8002412:	4640      	mov	r0, r8
 8002414:	f007 f962 	bl	80096dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <touchgfx_init+0xd8>)
 800241a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800241c:	4638      	mov	r0, r7
 800241e:	f007 f95d 	bl	80096dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002422:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8002426:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800242a:	4a16      	ldr	r2, [pc, #88]	@ (8002484 <touchgfx_init+0xdc>)
 800242c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8002430:	f001 fc8a 	bl	8003d48 <_ZN5ModelC1Ev>
 8002434:	4622      	mov	r2, r4
 8002436:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800243a:	4630      	mov	r0, r6
 800243c:	f001 fc7a 	bl	8003d34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002440:	4630      	mov	r0, r6
 8002442:	f000 fdbd 	bl	8002fc0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002446:	4810      	ldr	r0, [pc, #64]	@ (8002488 <touchgfx_init+0xe0>)
 8002448:	f010 fda0 	bl	8012f8c <atexit>
 800244c:	4628      	mov	r0, r5
 800244e:	f010 fd5f 	bl	8012f10 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002452:	480e      	ldr	r0, [pc, #56]	@ (800248c <touchgfx_init+0xe4>)
}
 8002454:	b002      	add	sp, #8
 8002456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800245a:	f7ff bc5b 	b.w	8001d14 <_ZN11TouchGFXHAL10initializeEv>
 800245e:	bf00      	nop
 8002460:	200154a0 	.word	0x200154a0
 8002464:	20000438 	.word	0x20000438
 8002468:	2000126c 	.word	0x2000126c
 800246c:	20000014 	.word	0x20000014
 8002470:	20001270 	.word	0x20001270
 8002474:	2000447c 	.word	0x2000447c
 8002478:	080150a8 	.word	0x080150a8
 800247c:	0801500c 	.word	0x0801500c
 8002480:	08015040 	.word	0x08015040
 8002484:	08015074 	.word	0x08015074
 8002488:	08002381 	.word	0x08002381
 800248c:	200003bc 	.word	0x200003bc

08002490 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002490:	4801      	ldr	r0, [pc, #4]	@ (8002498 <touchgfx_taskEntry+0x8>)
 8002492:	f7ff bc51 	b.w	8001d38 <_ZN11TouchGFXHAL9taskEntryEv>
 8002496:	bf00      	nop
 8002498:	200003bc 	.word	0x200003bc

0800249c <_GLOBAL__sub_I_touchgfx_init>:
}
 800249c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800249e:	4e22      	ldr	r6, [pc, #136]	@ (8002528 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 80024a0:	4c22      	ldr	r4, [pc, #136]	@ (800252c <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 80024a2:	4d23      	ldr	r5, [pc, #140]	@ (8002530 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 80024a4:	4b23      	ldr	r3, [pc, #140]	@ (8002534 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 80024a6:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 80024a8:	4630      	mov	r0, r6
 80024aa:	f7ff fecd 	bl	8002248 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80024ae:	4628      	mov	r0, r5
 80024b0:	f00e fcee 	bl	8010e90 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 80024b4:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80024b6:	4821      	ldr	r0, [pc, #132]	@ (800253c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 80024b8:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 80024ba:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80024bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 80024c0:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 80024c4:	491e      	ldr	r1, [pc, #120]	@ (8002540 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80024c6:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 80024c8:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80024cc:	491d      	ldr	r1, [pc, #116]	@ (8002544 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 80024ce:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 80024d0:	491d      	ldr	r1, [pc, #116]	@ (8002548 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 80024d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 80024d6:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80024d8:	21f0      	movs	r1, #240	@ 0xf0
 80024da:	8001      	strh	r1, [r0, #0]
 80024dc:	481b      	ldr	r0, [pc, #108]	@ (800254c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 80024de:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80024e0:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80024e2:	481b      	ldr	r0, [pc, #108]	@ (8002550 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 80024e4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80024e8:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 80024ec:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80024f0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80024f4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80024f8:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 80024fc:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8002500:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002504:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 8002508:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 800250c:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 800250e:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002512:	8001      	strh	r1, [r0, #0]
 8002514:	480f      	ldr	r0, [pc, #60]	@ (8002554 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8002516:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002518:	490f      	ldr	r1, [pc, #60]	@ (8002558 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 800251a:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002522:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bd70      	pop	{r4, r5, r6, pc}
 8002528:	200004c8 	.word	0x200004c8
 800252c:	20001268 	.word	0x20001268
 8002530:	2000043c 	.word	0x2000043c
 8002534:	08014ecc 	.word	0x08014ecc
 8002538:	200003bc 	.word	0x200003bc
 800253c:	20015438 	.word	0x20015438
 8002540:	01000001 	.word	0x01000001
 8002544:	01010000 	.word	0x01010000
 8002548:	20015444 	.word	0x20015444
 800254c:	2001543e 	.word	0x2001543e
 8002550:	2001543a 	.word	0x2001543a
 8002554:	20015440 	.word	0x20015440
 8002558:	2001543c 	.word	0x2001543c
 800255c:	08014ee4 	.word	0x08014ee4

08002560 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002560:	4801      	ldr	r0, [pc, #4]	@ (8002568 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002562:	f7ff bd27 	b.w	8001fb4 <_ZN8STM32DMAD1Ev>
 8002566:	bf00      	nop
 8002568:	200004c8 	.word	0x200004c8

0800256c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 800256e:	2290      	movs	r2, #144	@ 0x90
 8002570:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 8002574:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100

08002580 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002580:	4a09      	ldr	r2, [pc, #36]	@ (80025a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002582:	490a      	ldr	r1, [pc, #40]	@ (80025ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002584:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002586:	480a      	ldr	r0, [pc, #40]	@ (80025b0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258c:	3b01      	subs	r3, #1
 800258e:	b29b      	uxth	r3, r3
 8002590:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002592:	6911      	ldr	r1, [r2, #16]
 8002594:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002598:	3901      	subs	r1, #1
 800259a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800259c:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800259e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80025a6:	4770      	bx	lr
 80025a8:	40016800 	.word	0x40016800
 80025ac:	2000462a 	.word	0x2000462a
 80025b0:	20004628 	.word	0x20004628

080025b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80025b4:	4b01      	ldr	r3, [pc, #4]	@ (80025bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80025b6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 80025ba:	4770      	bx	lr
 80025bc:	40016800 	.word	0x40016800

080025c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80025c0:	4b02      	ldr	r3, [pc, #8]	@ (80025cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80025c2:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80025c4:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80025ca:	4770      	bx	lr
 80025cc:	40016800 	.word	0x40016800

080025d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	4604      	mov	r4, r0
    HAL::initialize();
 80025d4:	f007 fb7f 	bl	8009cd6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80025dc:	f00a fd2c 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
 80025e0:	4601      	mov	r1, r0
 80025e2:	4620      	mov	r0, r4
 80025e4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80025ea:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80025ee:	4620      	mov	r0, r4
 80025f0:	46ac      	mov	ip, r5
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80025f8:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 80025fc:	4760      	bx	ip
 80025fe:	bf00      	nop
 8002600:	d004b000 	.word	0xd004b000

08002604 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002604:	f007 bb4e 	b.w	8009ca4 <_ZN8touchgfx3HAL10beginFrameEv>

08002608 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002608:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 800260c:	b113      	cbz	r3, 8002614 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 800260e:	4b02      	ldr	r3, [pc, #8]	@ (8002618 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002614:	f007 bb52 	b.w	8009cbc <_ZN8touchgfx3HAL8endFrameEv>
 8002618:	2000462c 	.word	0x2000462c

0800261c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 800261c:	f007 bb0c 	b.w	8009c38 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002620 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002620:	f007 bc6d 	b.w	8009efe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002624 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002626:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100

08002638 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002638:	4b08      	ldr	r3, [pc, #32]	@ (800265c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800263a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800263e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002642:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800264e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002652:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002656:	f3bf 8f6f 	isb	sy
}
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100

08002660 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002660:	b510      	push	{r4, lr}
        return instance;
 8002662:	4c14      	ldr	r4, [pc, #80]	@ (80026b4 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	b323      	cbz	r3, 80026b2 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002668:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <HAL_LTDC_LineEventCallback+0x58>)
 800266a:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <HAL_LTDC_LineEventCallback+0x5c>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	8811      	ldrh	r1, [r2, #0]
 8002670:	428b      	cmp	r3, r1
 8002672:	d113      	bne.n	800269c <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_LTDC_LineEventCallback+0x60>)
 8002676:	8819      	ldrh	r1, [r3, #0]
 8002678:	f003 fa18 	bl	8005aac <HAL_LTDC_ProgramLineEvent>
 800267c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800267e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002682:	3301      	adds	r3, #1
 8002684:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002688:	f7ff fc42 	bl	8001f10 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800268c:	6820      	ldr	r0, [r4, #0]
 800268e:	f008 f86d 	bl	800a76c <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002696:	2000      	movs	r0, #0
 8002698:	f7ff ba82 	b.w	8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800269c:	f003 fa06 	bl	8005aac <HAL_LTDC_ProgramLineEvent>
        return instance;
 80026a0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4798      	blx	r3
    }
 80026a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff baa1 	b.w	8001bf4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80026b2:	bd10      	pop	{r4, pc}
 80026b4:	20015444 	.word	0x20015444
 80026b8:	40016800 	.word	0x40016800
 80026bc:	2000462a 	.word	0x2000462a
 80026c0:	20004628 	.word	0x20004628

080026c4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // arialbd_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // arialbd_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80026c4:	4770      	bx	lr

080026c6 <_ZN23ApplicationFontProviderD0Ev>:
 80026c6:	b510      	push	{r4, lr}
 80026c8:	2104      	movs	r1, #4
 80026ca:	4604      	mov	r4, r0
 80026cc:	f010 fc12 	bl	8012ef4 <_ZdlPvj>
 80026d0:	4620      	mov	r0, r4
 80026d2:	bd10      	pop	{r4, pc}

080026d4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80026d4:	2901      	cmp	r1, #1
{
 80026d6:	b508      	push	{r3, lr}
    switch (typography)
 80026d8:	d006      	beq.n	80026e8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80026da:	2902      	cmp	r1, #2
 80026dc:	d008      	beq.n	80026f0 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80026de:	b959      	cbnz	r1, 80026f8 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // arialbd_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80026e0:	f001 fb02 	bl	8003ce8 <_ZN17TypedTextDatabase8getFontsEv>
 80026e4:	6800      	ldr	r0, [r0, #0]
        // arialbd_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80026e6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80026e8:	f001 fafe 	bl	8003ce8 <_ZN17TypedTextDatabase8getFontsEv>
 80026ec:	6840      	ldr	r0, [r0, #4]
 80026ee:	e7fa      	b.n	80026e6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80026f0:	f001 fafa 	bl	8003ce8 <_ZN17TypedTextDatabase8getFontsEv>
 80026f4:	6880      	ldr	r0, [r0, #8]
 80026f6:	e7f6      	b.n	80026e6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80026f8:	2000      	movs	r0, #0
 80026fa:	e7f4      	b.n	80026e6 <_ZN23ApplicationFontProvider7getFontEt+0x12>

080026fc <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80026fc:	4800      	ldr	r0, [pc, #0]	@ (8002700 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80026fe:	4770      	bx	lr
 8002700:	080150c8 	.word	0x080150c8

08002704 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002704:	2004      	movs	r0, #4
 8002706:	4770      	bx	lr

08002708 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002708:	b513      	push	{r0, r1, r4, lr}
 800270a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800270c:	b151      	cbz	r1, 8002724 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800270e:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8002710:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002712:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002716:	aa01      	add	r2, sp, #4
 8002718:	689c      	ldr	r4, [r3, #8]
 800271a:	f10d 0303 	add.w	r3, sp, #3
 800271e:	47a0      	blx	r4
        return glyph;
    }
 8002720:	b002      	add	sp, #8
 8002722:	bd10      	pop	{r4, pc}
            return 0;
 8002724:	4608      	mov	r0, r1
 8002726:	e7fb      	b.n	8002720 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002728 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002728:	89c0      	ldrh	r0, [r0, #14]
 800272a:	4770      	bx	lr

0800272c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800272c:	8a00      	ldrh	r0, [r0, #16]
 800272e:	4770      	bx	lr

08002730 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002730:	88c0      	ldrh	r0, [r0, #6]
 8002732:	4770      	bx	lr

08002734 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002734:	8880      	ldrh	r0, [r0, #4]
 8002736:	4770      	bx	lr

08002738 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002738:	7a80      	ldrb	r0, [r0, #10]
    }
 800273a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800273e:	4770      	bx	lr

08002740 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002740:	7a80      	ldrb	r0, [r0, #10]
    }
 8002742:	09c0      	lsrs	r0, r0, #7
 8002744:	4770      	bx	lr

08002746 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8002746:	2000      	movs	r0, #0
 8002748:	4770      	bx	lr
	...

0800274c <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 800274c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002754 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	00000000 	.word	0x00000000

08002758 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002758:	4770      	bx	lr

0800275a <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800275a:	b510      	push	{r4, lr}
    }
 800275c:	2108      	movs	r1, #8
    virtual ~TypedText()
 800275e:	4604      	mov	r4, r0
    }
 8002760:	f010 fbc8 	bl	8012ef4 <_ZdlPvj>
 8002764:	4620      	mov	r0, r4
 8002766:	bd10      	pop	{r4, pc}

08002768 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002768:	2000      	movs	r0, #0
 800276a:	4770      	bx	lr

0800276c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800276c:	8081      	strh	r1, [r0, #4]
    }
 800276e:	4770      	bx	lr

08002770 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002770:	80c1      	strh	r1, [r0, #6]
    }
 8002772:	4770      	bx	lr

08002774 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002774:	8101      	strh	r1, [r0, #8]
    }
 8002776:	4770      	bx	lr

08002778 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002778:	8141      	strh	r1, [r0, #10]
    }
 800277a:	4770      	bx	lr

0800277c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800277c:	4770      	bx	lr

0800277e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800277e:	4770      	bx	lr

08002780 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002780:	4770      	bx	lr

08002782 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002782:	4770      	bx	lr

08002784 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002784:	4770      	bx	lr

08002786 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002786:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002788:	88c4      	ldrh	r4, [r0, #6]
 800278a:	6803      	ldr	r3, [r0, #0]
 800278c:	1b12      	subs	r2, r2, r4
 800278e:	8884      	ldrh	r4, [r0, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002792:	1b09      	subs	r1, r1, r4
 8002794:	b212      	sxth	r2, r2
    }
 8002796:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800279a:	b209      	sxth	r1, r1
 800279c:	4718      	bx	r3

0800279e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800279e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027a2:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80027aa:	6813      	ldr	r3, [r2, #0]
 80027ac:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80027ae:	6010      	str	r0, [r2, #0]
    }
 80027b0:	4770      	bx	lr

080027b2 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80027b2:	4770      	bx	lr

080027b4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80027b4:	4770      	bx	lr

080027b6 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80027b6:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 80027ba:	6808      	ldr	r0, [r1, #0]
 80027bc:	6849      	ldr	r1, [r1, #4]
 80027be:	c303      	stmia	r3!, {r0, r1}
    }
 80027c0:	4770      	bx	lr

080027c2 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80027c2:	4770      	bx	lr

080027c4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80027c4:	4770      	bx	lr

080027c6 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80027c6:	6041      	str	r1, [r0, #4]
    }
 80027c8:	4770      	bx	lr

080027ca <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 80027ca:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80027cc:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 80027ce:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80027d2:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80027d6:	8002      	strh	r2, [r0, #0]
 80027d8:	8042      	strh	r2, [r0, #2]
 80027da:	8084      	strh	r4, [r0, #4]
 80027dc:	80c1      	strh	r1, [r0, #6]
        }
 80027de:	bd10      	pop	{r4, pc}

080027e0 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 80027e0:	4770      	bx	lr

080027e2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027e2:	4770      	bx	lr

080027e4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80027e4:	4770      	bx	lr
	...

080027e8 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80027ea:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80027f4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80027f8:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027fc:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	08002aa9 	.word	0x08002aa9

08002808 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002808:	2301      	movs	r3, #1
 800280a:	7203      	strb	r3, [r0, #8]
    }
 800280c:	4770      	bx	lr

0800280e <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 800280e:	4770      	bx	lr

08002810 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 8002810:	4770      	bx	lr

08002812 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 8002812:	4770      	bx	lr

08002814 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002814:	4770      	bx	lr

08002816 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 8002816:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8002818:	6840      	ldr	r0, [r0, #4]
 800281a:	6803      	ldr	r3, [r0, #0]
 800281c:	3110      	adds	r1, #16
 800281e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002820:	4718      	bx	r3

08002822 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 8002822:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8002824:	6840      	ldr	r0, [r0, #4]
 8002826:	6803      	ldr	r3, [r0, #0]
 8002828:	3110      	adds	r1, #16
 800282a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282c:	4718      	bx	r3

0800282e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 800282e:	4770      	bx	lr

08002830 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 8002830:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8002832:	6840      	ldr	r0, [r0, #4]
 8002834:	6803      	ldr	r3, [r0, #0]
 8002836:	3110      	adds	r1, #16
 8002838:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800283a:	4718      	bx	r3

0800283c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8002840:	6840      	ldr	r0, [r0, #4]
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4798      	blx	r3
 8002848:	4604      	mov	r4, r0
        while (d)
 800284a:	b93c      	cbnz	r4, 800285c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 800284c:	6868      	ldr	r0, [r5, #4]
 800284e:	6803      	ldr	r3, [r0, #0]
 8002850:	f105 0110 	add.w	r1, r5, #16
 8002854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    }
 8002856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 800285a:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 800285c:	88a1      	ldrh	r1, [r4, #4]
 800285e:	89ab      	ldrh	r3, [r5, #12]
 8002860:	1ac9      	subs	r1, r1, r3
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	4620      	mov	r0, r4
 8002866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002868:	b209      	sxth	r1, r1
 800286a:	4798      	blx	r3
        return nextSibling;
 800286c:	69a4      	ldr	r4, [r4, #24]
 800286e:	e7ec      	b.n	800284a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

08002870 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Cover transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 8002870:	4770      	bx	lr

08002872 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002872:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002874:	68c2      	ldr	r2, [r0, #12]
 8002876:	6841      	ldr	r1, [r0, #4]
 8002878:	1054      	asrs	r4, r2, #1
    virtual void execute()
 800287a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800287c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002880:	07d2      	lsls	r2, r2, #31
 8002882:	bf48      	it	mi
 8002884:	590a      	ldrmi	r2, [r1, r4]
 8002886:	689b      	ldr	r3, [r3, #8]
    }
 8002888:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800288c:	bf48      	it	mi
 800288e:	58d3      	ldrmi	r3, [r2, r3]
 8002890:	4718      	bx	r3

08002892 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8002892:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8002894:	6840      	ldr	r0, [r0, #4]
 8002896:	b130      	cbz	r0, 80028a6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	b91a      	cbnz	r2, 80028a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800289c:	68d8      	ldr	r0, [r3, #12]
 800289e:	f000 0001 	and.w	r0, r0, #1
 80028a2:	4770      	bx	lr
 80028a4:	2001      	movs	r0, #1
    }
 80028a6:	4770      	bx	lr

080028a8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80028a8:	b510      	push	{r4, lr}
 80028aa:	210c      	movs	r1, #12
 80028ac:	4604      	mov	r4, r0
 80028ae:	f010 fb21 	bl	8012ef4 <_ZdlPvj>
 80028b2:	4620      	mov	r0, r4
 80028b4:	bd10      	pop	{r4, pc}

080028b6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80028b6:	b510      	push	{r4, lr}
 80028b8:	2110      	movs	r1, #16
 80028ba:	4604      	mov	r4, r0
 80028bc:	f010 fb1a 	bl	8012ef4 <_ZdlPvj>
 80028c0:	4620      	mov	r0, r4
 80028c2:	bd10      	pop	{r4, pc}

080028c4 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80028c4:	b510      	push	{r4, lr}
 80028c6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80028ca:	4604      	mov	r4, r0
 80028cc:	f010 fb12 	bl	8012ef4 <_ZdlPvj>
 80028d0:	4620      	mov	r0, r4
 80028d2:	bd10      	pop	{r4, pc}

080028d4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 80028d4:	b510      	push	{r4, lr}
 80028d6:	2138      	movs	r1, #56	@ 0x38
 80028d8:	4604      	mov	r4, r0
 80028da:	f010 fb0b 	bl	8012ef4 <_ZdlPvj>
 80028de:	4620      	mov	r0, r4
 80028e0:	bd10      	pop	{r4, pc}

080028e2 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 80028e2:	b510      	push	{r4, lr}
 80028e4:	2128      	movs	r1, #40	@ 0x28
 80028e6:	4604      	mov	r4, r0
 80028e8:	f010 fb04 	bl	8012ef4 <_ZdlPvj>
 80028ec:	4620      	mov	r0, r4
 80028ee:	bd10      	pop	{r4, pc}

080028f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
class CoverTransition : public Transition
 80028f0:	b510      	push	{r4, lr}
 80028f2:	2138      	movs	r1, #56	@ 0x38
 80028f4:	4604      	mov	r4, r0
 80028f6:	f010 fafd 	bl	8012ef4 <_ZdlPvj>
 80028fa:	4620      	mov	r0, r4
 80028fc:	bd10      	pop	{r4, pc}

080028fe <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80028fe:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8002900:	f00a fb9a 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
 8002904:	6803      	ldr	r3, [r0, #0]
    }
 8002906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	4718      	bx	r3
	...

08002910 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002912:	4605      	mov	r5, r0
        animationCounter++;
 8002914:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 8002916:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 8002918:	3001      	adds	r0, #1
 800291a:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 800291c:	4298      	cmp	r0, r3
        animationCounter++;
 800291e:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 8002920:	d905      	bls.n	800292e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8002922:	2301      	movs	r3, #1
 8002924:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	72ab      	strb	r3, [r5, #10]
    }
 800292a:	b003      	add	sp, #12
 800292c:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800292e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
        const int16_t oldValue = calculatedValue;
 8002932:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002936:	2100      	movs	r1, #0
 8002938:	f00c f876 	bl	800ea28 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 800293c:	07c3      	lsls	r3, r0, #31
 800293e:	d507      	bpl.n	8002950 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002940:	2800      	cmp	r0, #0
 8002942:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002946:	bfc8      	it	gt
 8002948:	2301      	movgt	r3, #1
 800294a:	fa13 f080 	uxtah	r0, r3, r0
 800294e:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8002950:	7aab      	ldrb	r3, [r5, #10]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002952:	81e8      	strh	r0, [r5, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 8002954:	1b04      	subs	r4, r0, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8002956:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 8002958:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800295a:	d106      	bne.n	800296a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
 800295c:	4b17      	ldr	r3, [pc, #92]	@ (80029bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b11b      	cbz	r3, 800296a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002962:	f00a fb69 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
 8002966:	f00a fb6d 	bl	800d044 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800296a:	4a15      	ldr	r2, [pc, #84]	@ (80029c0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
        : x(0), y(0), width(0), height(0)
 800296c:	2300      	movs	r3, #0
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002974:	89eb      	ldrh	r3, [r5, #14]
 8002976:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 8002978:	425b      	negs	r3, r3
 800297a:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 800297e:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8002980:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 800298a:	f00a fb55 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
 800298e:	6803      	ldr	r3, [r0, #0]
 8002990:	aa02      	add	r2, sp, #8
 8002992:	e912 0006 	ldmdb	r2, {r1, r2}
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 800299a:	6868      	ldr	r0, [r5, #4]
 800299c:	6803      	ldr	r3, [r0, #0]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	4798      	blx	r3
 80029a2:	4605      	mov	r5, r0
        while (d)
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	d0c0      	beq.n	800292a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 80029a8:	88a9      	ldrh	r1, [r5, #4]
 80029aa:	682b      	ldr	r3, [r5, #0]
 80029ac:	4421      	add	r1, r4
 80029ae:	4628      	mov	r0, r5
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	b209      	sxth	r1, r1
 80029b4:	4798      	blx	r3
 80029b6:	69ad      	ldr	r5, [r5, #24]
 80029b8:	e7f4      	b.n	80029a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 80029ba:	bf00      	nop
 80029bc:	20015442 	.word	0x20015442
 80029c0:	20015438 	.word	0x20015438
 80029c4:	2001543a 	.word	0x2001543a

080029c8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80029c8:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80029cc:	b112      	cbz	r2, 80029d4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80029ce:	6803      	ldr	r3, [r0, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	4718      	bx	r3
    }
 80029d4:	4770      	bx	lr
	...

080029d8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80029d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029da:	4604      	mov	r4, r0
        animationCounter++;
 80029dc:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 80029de:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 80029e0:	3001      	adds	r0, #1
 80029e2:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80029e4:	4298      	cmp	r0, r3
        animationCounter++;
 80029e6:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 80029e8:	d905      	bls.n	80029f6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80029ea:	2301      	movs	r3, #1
 80029ec:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	72a3      	strb	r3, [r4, #10]
    }
 80029f2:	b003      	add	sp, #12
 80029f4:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80029f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029fa:	2100      	movs	r1, #0
 80029fc:	f00c f814 	bl	800ea28 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8002a00:	07c3      	lsls	r3, r0, #31
 8002a02:	d507      	bpl.n	8002a14 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002a04:	2800      	cmp	r0, #0
 8002a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a0a:	bfc8      	it	gt
 8002a0c:	2301      	movgt	r3, #1
 8002a0e:	fa13 f080 	uxtah	r0, r3, r0
 8002a12:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002a14:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002a16:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002a18:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 8002a1a:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002a1c:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 8002a1e:	4813      	ldr	r0, [pc, #76]	@ (8002a6c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 8002a20:	f9b0 0000 	ldrsh.w	r0, [r0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002a24:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002a28:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 8002a2a:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 8002a2c:	442b      	add	r3, r5
 8002a2e:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002a30:	b212      	sxth	r2, r2
 8002a32:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 8002a36:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 8002a38:	8322      	strh	r2, [r4, #24]
 8002a3a:	f8ad 2000 	strh.w	r2, [sp]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f8ad 2002 	strh.w	r2, [sp, #2]
 8002a46:	4669      	mov	r1, sp
 8002a48:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8002a4a:	7aa3      	ldrb	r3, [r4, #10]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d1d0      	bne.n	80029f2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 8002a50:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0cc      	beq.n	80029f2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002a58:	f00a faee 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002a5c:	b003      	add	sp, #12
 8002a5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002a62:	f00a baef 	b.w	800d044 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 8002a66:	bf00      	nop
 8002a68:	20015438 	.word	0x20015438
 8002a6c:	2001543a 	.word	0x2001543a
 8002a70:	20015442 	.word	0x20015442

08002a74 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002a74:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002a78:	b11a      	cbz	r2, 8002a82 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002a7a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002a7e:	b102      	cbz	r2, 8002a82 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002a80:	6018      	str	r0, [r3, #0]
        }
    }
 8002a82:	4770      	bx	lr

08002a84 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002a84:	b510      	push	{r4, lr}
 8002a86:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002a88:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8002a8c:	b158      	cbz	r0, 8002aa6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4798      	blx	r3
 8002a94:	b138      	cbz	r0, 8002aa6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002a96:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8002a9a:	6803      	ldr	r3, [r0, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8002aa6:	bd10      	pop	{r4, pc}

08002aa8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002aa8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002aac:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002ab0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002ab2:	68b0      	ldr	r0, [r6, #8]
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4798      	blx	r3
 8002aba:	f5b0 7fd2 	cmp.w	r0, #420	@ 0x1a4
 8002abe:	d205      	bcs.n	8002acc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8002ac0:	4b44      	ldr	r3, [pc, #272]	@ (8002bd4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002ac2:	4a45      	ldr	r2, [pc, #276]	@ (8002bd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002ac4:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002ac6:	4845      	ldr	r0, [pc, #276]	@ (8002bdc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002ac8:	f010 fa42 	bl	8012f50 <__assert_func>
 8002acc:	6870      	ldr	r0, [r6, #4]
 8002ace:	6803      	ldr	r3, [r0, #0]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4798      	blx	r3
 8002ad4:	280f      	cmp	r0, #15
 8002ad6:	d803      	bhi.n	8002ae0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8002ad8:	4b41      	ldr	r3, [pc, #260]	@ (8002be0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002ada:	4a3f      	ldr	r2, [pc, #252]	@ (8002bd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002adc:	21a4      	movs	r1, #164	@ 0xa4
 8002ade:	e7f2      	b.n	8002ac6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002ae0:	68f0      	ldr	r0, [r6, #12]
 8002ae2:	6803      	ldr	r3, [r0, #0]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4798      	blx	r3
 8002ae8:	280b      	cmp	r0, #11
 8002aea:	d803      	bhi.n	8002af4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8002aec:	4b3d      	ldr	r3, [pc, #244]	@ (8002be4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002aee:	4a3a      	ldr	r2, [pc, #232]	@ (8002bd8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002af0:	21a5      	movs	r1, #165	@ 0xa5
 8002af2:	e7e8      	b.n	8002ac6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8002af4:	f00a faa0 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002af8:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002bec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002afc:	3004      	adds	r0, #4
 8002afe:	f00a fae8 	bl	800d0d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002b02:	f8d9 0000 	ldr.w	r0, [r9]
 8002b06:	b110      	cbz	r0, 8002b0e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8002b08:	6803      	ldr	r3, [r0, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4798      	blx	r3
    if (*currentTrans)
 8002b0e:	f8d9 0000 	ldr.w	r0, [r9]
 8002b12:	b110      	cbz	r0, 8002b1a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8002b14:	6803      	ldr	r3, [r0, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4798      	blx	r3
    if (*currentScreen)
 8002b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bf0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8002b1e:	f8d8 0000 	ldr.w	r0, [r8]
 8002b22:	b110      	cbz	r0, 8002b2a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8002b24:	6803      	ldr	r3, [r0, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	4798      	blx	r3
    if (*currentPresenter)
 8002b2a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002b2e:	b110      	cbz	r0, 8002b36 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8002b30:	6803      	ldr	r3, [r0, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4798      	blx	r3
    if (*currentScreen)
 8002b36:	f8d8 0000 	ldr.w	r0, [r8]
 8002b3a:	b110      	cbz	r0, 8002b42 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8002b3c:	6803      	ldr	r3, [r0, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4798      	blx	r3
    if (*currentPresenter)
 8002b42:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002b46:	b110      	cbz	r0, 8002b4e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8002b48:	6803      	ldr	r3, [r0, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002b4e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002b50:	6803      	ldr	r3, [r0, #0]
 8002b52:	2100      	movs	r1, #0
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	4798      	blx	r3
        : screenContainer(0), done(false)
 8002b58:	f04f 0b00 	mov.w	fp, #0
 8002b5c:	4b22      	ldr	r3, [pc, #136]	@ (8002be8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002b5e:	f8c0 b004 	str.w	fp, [r0, #4]
 8002b62:	4604      	mov	r4, r0
 8002b64:	f880 b008 	strb.w	fp, [r0, #8]
 8002b68:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002b6a:	68b0      	ldr	r0, [r6, #8]
 8002b6c:	6803      	ldr	r3, [r0, #0]
 8002b6e:	4659      	mov	r1, fp
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	4798      	blx	r3
 8002b74:	4605      	mov	r5, r0
 8002b76:	f001 f92b 	bl	8003dd0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002b7a:	6870      	ldr	r0, [r6, #4]
 8002b7c:	6803      	ldr	r3, [r0, #0]
 8002b7e:	4659      	mov	r1, fp
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	4798      	blx	r3
 8002b84:	4629      	mov	r1, r5
 8002b86:	4606      	mov	r6, r0
 8002b88:	f001 f8fe 	bl	8003d88 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8002b8c:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002b8e:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002b92:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002b96:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002b98:	f8c6 a008 	str.w	sl, [r6, #8]
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002ba0:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002ba4:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002ba8:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002baa:	4798      	blx	r3
    newPresenter->activate();
 8002bac:	6833      	ldr	r3, [r6, #0]
 8002bae:	4630      	mov	r0, r6
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	f00b ff30 	bl	800ea1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	4798      	blx	r3
    newTransition->invalidate();
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	4620      	mov	r0, r4
}
 8002bca:	b001      	add	sp, #4
 8002bcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd0:	4718      	bx	r3
 8002bd2:	bf00      	nop
 8002bd4:	080145d5 	.word	0x080145d5
 8002bd8:	08014663 	.word	0x08014663
 8002bdc:	08014735 	.word	0x08014735
 8002be0:	0801477c 	.word	0x0801477c
 8002be4:	0801481f 	.word	0x0801481f
 8002be8:	08015204 	.word	0x08015204
 8002bec:	20015484 	.word	0x20015484
 8002bf0:	20015480 	.word	0x20015480

08002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf8:	461d      	mov	r5, r3
        setX(x);
 8002bfa:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002bfc:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002c02:	4604      	mov	r4, r0
 8002c04:	4616      	mov	r6, r2
        setX(x);
 8002c06:	4798      	blx	r3
        setY(y);
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	4631      	mov	r1, r6
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c10:	4798      	blx	r3
        setWidth(width);
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	4629      	mov	r1, r5
 8002c16:	4620      	mov	r0, r4
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	4798      	blx	r3
        setHeight(height);
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	4639      	mov	r1, r7
 8002c20:	4620      	mov	r0, r4
 8002c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8002c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8002c28:	4718      	bx	r3
	...

08002c2c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl()
{
 8002c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002c30:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002c34:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002c36:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002c3a:	6803      	ldr	r3, [r0, #0]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4798      	blx	r3
 8002c40:	f5b0 7fd2 	cmp.w	r0, #420	@ 0x1a4
 8002c44:	d205      	bcs.n	8002c52 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x26>
 8002c46:	4b54      	ldr	r3, [pc, #336]	@ (8002d98 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x16c>)
 8002c48:	4a54      	ldr	r2, [pc, #336]	@ (8002d9c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002c4a:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002c4c:	4854      	ldr	r0, [pc, #336]	@ (8002da0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 8002c4e:	f010 f97f 	bl	8012f50 <__assert_func>
 8002c52:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002c56:	6803      	ldr	r3, [r0, #0]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4798      	blx	r3
 8002c5c:	280f      	cmp	r0, #15
 8002c5e:	d803      	bhi.n	8002c68 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3c>
 8002c60:	4b50      	ldr	r3, [pc, #320]	@ (8002da4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 8002c62:	4a4e      	ldr	r2, [pc, #312]	@ (8002d9c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002c64:	21a4      	movs	r1, #164	@ 0xa4
 8002c66:	e7f1      	b.n	8002c4c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002c68:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002c6c:	6803      	ldr	r3, [r0, #0]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4798      	blx	r3
 8002c72:	2837      	cmp	r0, #55	@ 0x37
 8002c74:	d803      	bhi.n	8002c7e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x52>
 8002c76:	4b4c      	ldr	r3, [pc, #304]	@ (8002da8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 8002c78:	4a48      	ldr	r2, [pc, #288]	@ (8002d9c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002c7a:	21a5      	movs	r1, #165	@ 0xa5
 8002c7c:	e7e6      	b.n	8002c4c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8002c7e:	f00a f9db 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002c82:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002dbc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>
 8002c86:	3004      	adds	r0, #4
 8002c88:	f00a fa23 	bl	800d0d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002c8c:	f8d9 0000 	ldr.w	r0, [r9]
 8002c90:	b110      	cbz	r0, 8002c98 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4798      	blx	r3
    if (*currentTrans)
 8002c98:	f8d9 0000 	ldr.w	r0, [r9]
 8002c9c:	b110      	cbz	r0, 8002ca4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8002c9e:	6803      	ldr	r3, [r0, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4798      	blx	r3
    if (*currentScreen)
 8002ca4:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 8002dc0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 8002ca8:	f8d8 0000 	ldr.w	r0, [r8]
 8002cac:	b110      	cbz	r0, 8002cb4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8002cae:	6803      	ldr	r3, [r0, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4798      	blx	r3
    if (*currentPresenter)
 8002cb4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002cb8:	b110      	cbz	r0, 8002cc0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8002cba:	6803      	ldr	r3, [r0, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4798      	blx	r3
    if (*currentScreen)
 8002cc0:	f8d8 0000 	ldr.w	r0, [r8]
 8002cc4:	b110      	cbz	r0, 8002ccc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8002cc6:	6803      	ldr	r3, [r0, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4798      	blx	r3
    if (*currentPresenter)
 8002ccc:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002cd0:	b110      	cbz	r0, 8002cd8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8002cd2:	6803      	ldr	r3, [r0, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002cd8:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002cdc:	6803      	ldr	r3, [r0, #0]
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	4798      	blx	r3
          solid()
 8002ce4:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 8002ce6:	6003      	str	r3, [r0, #0]
 8002ce8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002cec:	8103      	strh	r3, [r0, #8]
 8002cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cf2:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8002db0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 8002cf6:	6103      	str	r3, [r0, #16]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8002db4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
            targetValue = HAL::DISPLAY_WIDTH;
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002cfc:	f9b2 2000 	ldrsh.w	r2, [r2]
            targetValue = HAL::DISPLAY_WIDTH;
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	8183      	strh	r3, [r0, #12]
        : screenContainer(0), done(false)
 8002d06:	2500      	movs	r5, #0
 8002d08:	4604      	mov	r4, r0
 8002d0a:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 8002d0c:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002d0e:	81c5      	strh	r5, [r0, #14]
          solid()
 8002d10:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002d14:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002d18:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002d1c:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002d20:	4629      	mov	r1, r5
 8002d22:	9200      	str	r2, [sp, #0]
 8002d24:	3010      	adds	r0, #16
 8002d26:	462a      	mov	r2, r5
 8002d28:	f7ff ff64 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002d2c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002d30:	6803      	ldr	r3, [r0, #0]
 8002d32:	4629      	mov	r1, r5
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	4798      	blx	r3
 8002d38:	4606      	mov	r6, r0
 8002d3a:	f001 f849 	bl	8003dd0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002d3e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002d42:	6803      	ldr	r3, [r0, #0]
 8002d44:	4629      	mov	r1, r5
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	4798      	blx	r3
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	4605      	mov	r5, r0
 8002d4e:	f001 f81b 	bl	8003d88 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8002d52:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002d54:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002d58:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002d5c:	6833      	ldr	r3, [r6, #0]
 8002d5e:	f8c5 a008 	str.w	sl, [r5, #8]
 8002d62:	4630      	mov	r0, r6
 8002d64:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002d66:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002d6a:	f8c8 6000 	str.w	r6, [r8]
 8002d6e:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8002d70:	4798      	blx	r3
    newPresenter->activate();
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	4628      	mov	r0, r5
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f00b fe4d 	bl	800ea1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	4620      	mov	r0, r4
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	4798      	blx	r3
    newTransition->invalidate();
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4620      	mov	r0, r4
}
 8002d90:	b003      	add	sp, #12
 8002d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d96:	4718      	bx	r3
 8002d98:	080145d5 	.word	0x080145d5
 8002d9c:	080148c2 	.word	0x080148c2
 8002da0:	08014735 	.word	0x08014735
 8002da4:	0801477c 	.word	0x0801477c
 8002da8:	0801481f 	.word	0x0801481f
 8002dac:	0801524c 	.word	0x0801524c
 8002db0:	08015130 	.word	0x08015130
 8002db4:	2001543a 	.word	0x2001543a
 8002db8:	20015438 	.word	0x20015438
 8002dbc:	20015484 	.word	0x20015484
 8002dc0:	20015480 	.word	0x20015480

08002dc4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8002dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002dc8:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002dcc:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002dce:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002dd2:	6803      	ldr	r3, [r0, #0]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4798      	blx	r3
 8002dd8:	f243 13d7 	movw	r3, #12759	@ 0x31d7
 8002ddc:	4298      	cmp	r0, r3
 8002dde:	d805      	bhi.n	8002dec <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x28>
 8002de0:	4b54      	ldr	r3, [pc, #336]	@ (8002f34 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 8002de2:	4a55      	ldr	r2, [pc, #340]	@ (8002f38 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002de4:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002de6:	4855      	ldr	r0, [pc, #340]	@ (8002f3c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 8002de8:	f010 f8b2 	bl	8012f50 <__assert_func>
 8002dec:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002df0:	6803      	ldr	r3, [r0, #0]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4798      	blx	r3
 8002df6:	280f      	cmp	r0, #15
 8002df8:	d803      	bhi.n	8002e02 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3e>
 8002dfa:	4b51      	ldr	r3, [pc, #324]	@ (8002f40 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 8002dfc:	4a4e      	ldr	r2, [pc, #312]	@ (8002f38 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002dfe:	21a4      	movs	r1, #164	@ 0xa4
 8002e00:	e7f1      	b.n	8002de6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002e02:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002e06:	6803      	ldr	r3, [r0, #0]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4798      	blx	r3
 8002e0c:	2837      	cmp	r0, #55	@ 0x37
 8002e0e:	d803      	bhi.n	8002e18 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x54>
 8002e10:	4b4c      	ldr	r3, [pc, #304]	@ (8002f44 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 8002e12:	4a49      	ldr	r2, [pc, #292]	@ (8002f38 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002e14:	21a5      	movs	r1, #165	@ 0xa5
 8002e16:	e7e6      	b.n	8002de6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x22>
    Application::getInstance()->clearAllTimerWidgets();
 8002e18:	f00a f90e 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002e1c:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002f58 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
 8002e20:	3004      	adds	r0, #4
 8002e22:	f00a f956 	bl	800d0d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002e26:	f8d9 0000 	ldr.w	r0, [r9]
 8002e2a:	b110      	cbz	r0, 8002e32 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6e>
        (*currentTrans)->tearDown();
 8002e2c:	6803      	ldr	r3, [r0, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4798      	blx	r3
    if (*currentTrans)
 8002e32:	f8d9 0000 	ldr.w	r0, [r9]
 8002e36:	b110      	cbz	r0, 8002e3e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x7a>
        (*currentTrans)->~Transition();
 8002e38:	6803      	ldr	r3, [r0, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4798      	blx	r3
    if (*currentScreen)
 8002e3e:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8002f5c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 8002e42:	f8d8 0000 	ldr.w	r0, [r8]
 8002e46:	b110      	cbz	r0, 8002e4e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 8002e48:	6803      	ldr	r3, [r0, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	4798      	blx	r3
    if (*currentPresenter)
 8002e4e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002e52:	b110      	cbz	r0, 8002e5a <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x96>
        (*currentPresenter)->deactivate();
 8002e54:	6803      	ldr	r3, [r0, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4798      	blx	r3
    if (*currentScreen)
 8002e5a:	f8d8 0000 	ldr.w	r0, [r8]
 8002e5e:	b110      	cbz	r0, 8002e66 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa2>
        (*currentScreen)->~Screen();
 8002e60:	6803      	ldr	r3, [r0, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4798      	blx	r3
    if (*currentPresenter)
 8002e66:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002e6a:	b110      	cbz	r0, 8002e72 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xae>
        (*currentPresenter)->~Presenter();
 8002e6c:	6803      	ldr	r3, [r0, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002e72:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002e76:	6803      	ldr	r3, [r0, #0]
 8002e78:	2100      	movs	r1, #0
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	4798      	blx	r3
          solid()
 8002e7e:	4b32      	ldr	r3, [pc, #200]	@ (8002f48 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 8002e80:	6003      	str	r3, [r0, #0]
 8002e82:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e86:	8103      	strh	r3, [r0, #8]
 8002e88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e8c:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f4c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 8002e90:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8002e92:	4b2f      	ldr	r3, [pc, #188]	@ (8002f50 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	425a      	negs	r2, r3
 8002e98:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f54 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
        : screenContainer(0), done(false)
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002ea2:	6045      	str	r5, [r0, #4]
 8002ea4:	4604      	mov	r4, r0
          animationCounter(0),
 8002ea6:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002ea8:	81c5      	strh	r5, [r0, #14]
          solid()
 8002eaa:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002eae:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002eb2:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002eb6:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002eba:	4629      	mov	r1, r5
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	3010      	adds	r0, #16
 8002ec4:	f7ff fe96 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002ec8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002ecc:	6803      	ldr	r3, [r0, #0]
 8002ece:	4629      	mov	r1, r5
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	4798      	blx	r3
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	f001 fa09 	bl	80042ec <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002eda:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002ede:	6803      	ldr	r3, [r0, #0]
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	4798      	blx	r3
 8002ee6:	4631      	mov	r1, r6
 8002ee8:	4605      	mov	r5, r0
 8002eea:	f000 ffb3 	bl	8003e54 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 8002eee:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002ef0:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002ef4:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002ef8:	6833      	ldr	r3, [r6, #0]
 8002efa:	f8c5 a008 	str.w	sl, [r5, #8]
 8002efe:	4630      	mov	r0, r6
 8002f00:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002f02:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002f06:	f8c8 6000 	str.w	r6, [r8]
 8002f0a:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8002f0c:	4798      	blx	r3
    newPresenter->activate();
 8002f0e:	682b      	ldr	r3, [r5, #0]
 8002f10:	4628      	mov	r0, r5
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002f16:	4621      	mov	r1, r4
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f00b fd7f 	bl	800ea1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	4620      	mov	r0, r4
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4798      	blx	r3
    newTransition->invalidate();
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4620      	mov	r0, r4
}
 8002f2c:	b003      	add	sp, #12
 8002f2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f32:	4718      	bx	r3
 8002f34:	080145d5 	.word	0x080145d5
 8002f38:	080149a6 	.word	0x080149a6
 8002f3c:	08014735 	.word	0x08014735
 8002f40:	0801477c 	.word	0x0801477c
 8002f44:	0801481f 	.word	0x0801481f
 8002f48:	08015228 	.word	0x08015228
 8002f4c:	08015130 	.word	0x08015130
 8002f50:	20015438 	.word	0x20015438
 8002f54:	2001543a 	.word	0x2001543a
 8002f58:	20015484 	.word	0x20015484
 8002f5c:	20015480 	.word	0x20015480

08002f60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	4604      	mov	r4, r0
 8002f64:	4617      	mov	r7, r2
 8002f66:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002f68:	f00a f950 	bl	800d20c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002f6c:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8002f6e:	2500      	movs	r5, #0
      model(m)
 8002f70:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 8002f74:	4e0f      	ldr	r6, [pc, #60]	@ (8002fb4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 8002f76:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 8002f78:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002f7e:	6830      	ldr	r0, [r6, #0]
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002f84:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8002f88:	6803      	ldr	r3, [r0, #0]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 8002f8e:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8002f92:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 fe5b 	bl	8003c50 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002f9a:	6833      	ldr	r3, [r6, #0]
 8002f9c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002fa0:	b10a      	cbz	r2, 8002fa6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002fa2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002fa4:	b900      	cbnz	r0, 8002fa8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002fa6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 8002fa8:	f00f fa58 	bl	801245c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 8002fac:	4620      	mov	r0, r4
 8002fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb0:	20015490 	.word	0x20015490
 8002fb4:	20015444 	.word	0x20015444
 8002fb8:	080151b0 	.word	0x080151b0
 8002fbc:	08015198 	.word	0x08015198

08002fc0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002fc2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002fcc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002fd0:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002fd4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	08002aa9 	.word	0x08002aa9

08002fe0 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 8002fe2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002fec:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002ff0:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002ff4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	08002c2d 	.word	0x08002c2d

08003000 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 8003002:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003006:	2300      	movs	r3, #0
 8003008:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 800300c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003010:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003014:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	08002dc5 	.word	0x08002dc5

08003020 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003020:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003022:	4770      	bx	lr

08003024 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003024:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003026:	4770      	bx	lr

08003028 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003028:	4770      	bx	lr

0800302a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800302a:	888b      	ldrh	r3, [r1, #4]
 800302c:	69c0      	ldr	r0, [r0, #28]
 800302e:	680a      	ldr	r2, [r1, #0]
 8003030:	0adb      	lsrs	r3, r3, #11
 8003032:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003036:	4410      	add	r0, r2
 8003038:	4770      	bx	lr

0800303a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800303a:	b510      	push	{r4, lr}
 800303c:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 800303e:	b1ba      	cbz	r2, 8003070 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003040:	7b10      	ldrb	r0, [r2, #12]
 8003042:	b168      	cbz	r0, 8003060 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003044:	7b53      	ldrb	r3, [r2, #13]
 8003046:	7ad2      	ldrb	r2, [r2, #11]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800304e:	431a      	orrs	r2, r3
 8003050:	6a23      	ldr	r3, [r4, #32]
 8003052:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003056:	881a      	ldrh	r2, [r3, #0]
 8003058:	428a      	cmp	r2, r1
 800305a:	d102      	bne.n	8003062 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800305c:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003060:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003062:	d805      	bhi.n	8003070 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003064:	3801      	subs	r0, #1
 8003066:	b280      	uxth	r0, r0
 8003068:	3304      	adds	r3, #4
 800306a:	2800      	cmp	r0, #0
 800306c:	d1f3      	bne.n	8003056 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800306e:	e7f7      	b.n	8003060 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003070:	2000      	movs	r0, #0
 8003072:	e7f5      	b.n	8003060 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003074 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003074:	b510      	push	{r4, lr}
 8003076:	212c      	movs	r1, #44	@ 0x2c
 8003078:	4604      	mov	r4, r0
 800307a:	f00f ff3b 	bl	8012ef4 <_ZdlPvj>
 800307e:	4620      	mov	r0, r4
 8003080:	bd10      	pop	{r4, pc}
	...

08003084 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003084:	b530      	push	{r4, r5, lr}
 8003086:	b08b      	sub	sp, #44	@ 0x2c
 8003088:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800308a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800308e:	9508      	str	r5, [sp, #32]
 8003090:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003094:	9507      	str	r5, [sp, #28]
 8003096:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800309a:	9506      	str	r5, [sp, #24]
 800309c:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 80030a0:	9505      	str	r5, [sp, #20]
 80030a2:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80030a6:	9504      	str	r5, [sp, #16]
 80030a8:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80030ac:	9503      	str	r5, [sp, #12]
 80030ae:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80030b2:	9502      	str	r5, [sp, #8]
 80030b4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80030b8:	9501      	str	r5, [sp, #4]
 80030ba:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80030be:	9500      	str	r5, [sp, #0]
 80030c0:	f00b f906 	bl	800e2d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 80030c6:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80030c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80030ca:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80030cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80030ce:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80030d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80030d2:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80030d4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80030d6:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80030d8:	4620      	mov	r0, r4
 80030da:	b00b      	add	sp, #44	@ 0x2c
 80030dc:	bd30      	pop	{r4, r5, pc}
 80030de:	bf00      	nop
 80030e0:	08015270 	.word	0x08015270

080030e4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80030e4:	4770      	bx	lr

080030e6 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80030e6:	4770      	bx	lr

080030e8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80030e8:	4770      	bx	lr

080030ea <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80030ea:	4770      	bx	lr

080030ec <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80030ec:	4770      	bx	lr

080030ee <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80030ee:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80030f0:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80030f2:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80030f4:	466d      	mov	r5, sp
        rect.width = width;
 80030f6:	8101      	strh	r1, [r0, #8]
 80030f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fc:	4601      	mov	r1, r0
    virtual void setWidth(int16_t width)
 80030fe:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8003100:	4628      	mov	r0, r5
 8003102:	4798      	blx	r3
 8003104:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003108:	343c      	adds	r4, #60	@ 0x3c
 800310a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800310e:	b005      	add	sp, #20
 8003110:	bd30      	pop	{r4, r5, pc}

08003112 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8003112:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003114:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003116:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8003118:	466d      	mov	r5, sp
        rect.height = height;
 800311a:	8141      	strh	r1, [r0, #10]
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003120:	4601      	mov	r1, r0
    virtual void setHeight(int16_t height)
 8003122:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8003124:	4628      	mov	r0, r5
 8003126:	4798      	blx	r3
 8003128:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800312c:	343c      	adds	r4, #60	@ 0x3c
 800312e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003132:	b005      	add	sp, #20
 8003134:	bd30      	pop	{r4, r5, pc}

08003136 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003136:	2200      	movs	r2, #0
 8003138:	8002      	strh	r2, [r0, #0]
 800313a:	8042      	strh	r2, [r0, #2]
 800313c:	8082      	strh	r2, [r0, #4]
 800313e:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003140:	4770      	bx	lr

08003142 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003142:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8003146:	4770      	bx	lr

08003148 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003148:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 800314a:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800314c:	4604      	mov	r4, r0
        setX(x);
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003150:	4615      	mov	r5, r2
        setX(x);
 8003152:	4798      	blx	r3
        setBaselineY(baselineY);
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	4629      	mov	r1, r5
 8003158:	4620      	mov	r0, r4
 800315a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 800315c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003160:	4718      	bx	r3

08003162 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003162:	2000      	movs	r0, #0
 8003164:	4770      	bx	lr

08003166 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003166:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003168:	4770      	bx	lr

0800316a <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800316a:	4770      	bx	lr

0800316c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800316c:	4770      	bx	lr

0800316e <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800316e:	4770      	bx	lr

08003170 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003170:	4770      	bx	lr

08003172 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003172:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003174:	68c2      	ldr	r2, [r0, #12]
 8003176:	6844      	ldr	r4, [r0, #4]
 8003178:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 800317a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800317c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003180:	07d2      	lsls	r2, r2, #31
 8003182:	bf48      	it	mi
 8003184:	5962      	ldrmi	r2, [r4, r5]
 8003186:	689b      	ldr	r3, [r3, #8]
    }
 8003188:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800318a:	bf48      	it	mi
 800318c:	58d3      	ldrmi	r3, [r2, r3]
 800318e:	4718      	bx	r3

08003190 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8003190:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8003192:	6840      	ldr	r0, [r0, #4]
 8003194:	b130      	cbz	r0, 80031a4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	b91a      	cbnz	r2, 80031a2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800319a:	68d8      	ldr	r0, [r3, #12]
 800319c:	f000 0001 	and.w	r0, r0, #1
 80031a0:	4770      	bx	lr
 80031a2:	2001      	movs	r0, #1
    }
 80031a4:	4770      	bx	lr

080031a6 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80031a6:	b510      	push	{r4, lr}
 80031a8:	214c      	movs	r1, #76	@ 0x4c
 80031aa:	4604      	mov	r4, r0
 80031ac:	f00f fea2 	bl	8012ef4 <_ZdlPvj>
 80031b0:	4620      	mov	r0, r4
 80031b2:	bd10      	pop	{r4, pc}

080031b4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80031b4:	b510      	push	{r4, lr}
 80031b6:	2110      	movs	r1, #16
 80031b8:	4604      	mov	r4, r0
 80031ba:	f00f fe9b 	bl	8012ef4 <_ZdlPvj>
 80031be:	4620      	mov	r0, r4
 80031c0:	bd10      	pop	{r4, pc}

080031c2 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80031c2:	b510      	push	{r4, lr}
}
 80031c4:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
Screen1ViewBase::~Screen1ViewBase()
 80031c8:	4604      	mov	r4, r0
}
 80031ca:	f00f fe93 	bl	8012ef4 <_ZdlPvj>
 80031ce:	4620      	mov	r0, r4
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80031d2:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80031d4:	f7ff fbf8 	bl	80029c8 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80031d8:	bd08      	pop	{r3, pc}
	...

080031dc <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80031dc:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80031de:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80031e0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80031e2:	4b12      	ldr	r3, [pc, #72]	@ (800322c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80031e4:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 80031e6:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80031e8:	b28d      	uxth	r5, r1
 80031ea:	b92b      	cbnz	r3, 80031f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80031ec:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80031ee:	4a11      	ldr	r2, [pc, #68]	@ (8003234 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80031f0:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80031f2:	4811      	ldr	r0, [pc, #68]	@ (8003238 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80031f4:	f00f feac 	bl	8012f50 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80031f8:	4910      	ldr	r1, [pc, #64]	@ (800323c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80031fa:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80031fc:	8809      	ldrh	r1, [r1, #0]
 80031fe:	4291      	cmp	r1, r2
 8003200:	d803      	bhi.n	800320a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003204:	4a0b      	ldr	r2, [pc, #44]	@ (8003234 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003206:	216d      	movs	r1, #109	@ 0x6d
 8003208:	e7f3      	b.n	80031f2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 800320a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800320e:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003216:	6803      	ldr	r3, [r0, #0]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	4798      	blx	r3
 800321c:	1a29      	subs	r1, r5, r0
 800321e:	4633      	mov	r3, r6
 8003220:	4620      	mov	r0, r4
 8003222:	b209      	sxth	r1, r1
    }
 8003224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003228:	4718      	bx	r3
 800322a:	bf00      	nop
 800322c:	20015494 	.word	0x20015494
 8003230:	08014a8b 	.word	0x08014a8b
 8003234:	08014acd 	.word	0x08014acd
 8003238:	08014b08 	.word	0x08014b08
 800323c:	20015498 	.word	0x20015498
 8003240:	08014b4f 	.word	0x08014b4f
 8003244:	2001549c 	.word	0x2001549c

08003248 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8003248:	306c      	adds	r0, #108	@ 0x6c
 800324a:	4288      	cmp	r0, r1
{
 800324c:	b508      	push	{r3, lr}
    if (&src == &button1)
 800324e:	d105      	bne.n	800325c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003250:	f009 fef2 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 8003254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 8003258:	f7ff bed2 	b.w	8003000 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 800325c:	bd08      	pop	{r3, pc}

0800325e <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800325e:	2200      	movs	r2, #0
 8003260:	f04f 31ff 	mov.w	r1, #4294967295
 8003264:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 8003268:	6082      	str	r2, [r0, #8]
    }
 800326a:	4770      	bx	lr

0800326c <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 800326c:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 800326e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003270:	4604      	mov	r4, r0
        setX(x);
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003274:	4615      	mov	r5, r2
        setX(x);
 8003276:	4798      	blx	r3
        setY(y);
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	4629      	mov	r1, r5
 800327c:	4620      	mov	r0, r4
 800327e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8003280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003284:	4718      	bx	r3
	...

08003288 <_ZN8touchgfx6WidgetC1Ev>:
 8003288:	2200      	movs	r2, #0
 800328a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800328e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003292:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003296:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 800329a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800329e:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80032a0:	4a01      	ldr	r2, [pc, #4]	@ (80032a8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80032a2:	6002      	str	r2, [r0, #0]
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	080152d8 	.word	0x080152d8

080032ac <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 80032ac:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80032ae:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 80032b0:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80032b2:	2100      	movs	r1, #0
 80032b4:	f010 f853 	bl	801335e <memset>
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7ff ffe5 	bl	8003288 <_ZN8touchgfx6WidgetC1Ev>
 80032be:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 80032c0:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 80032c2:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 80032c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032ca:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80032cc:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 80032d0:	2300      	movs	r3, #0
 80032d2:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 80032d6:	8723      	strh	r3, [r4, #56]	@ 0x38
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 80032dc:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 80032e0:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 80032e2:	4620      	mov	r0, r4
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	bf00      	nop
 80032e8:	08015b88 	.word	0x08015b88
 80032ec:	08015120 	.word	0x08015120

080032f0 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80032f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f4:	4604      	mov	r4, r0
 80032f6:	b08b      	sub	sp, #44	@ 0x2c
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80032f8:	46a3      	mov	fp, r4
        : presenter(0)
 80032fa:	2500      	movs	r5, #0
 80032fc:	f00b f9e2 	bl	800e6c4 <_ZN8touchgfx6ScreenC1Ev>
 8003300:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <_ZN15Screen1ViewBaseC1Ev+0x210>)
 8003302:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003304:	f84b 3b40 	str.w	r3, [fp], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003308:	2226      	movs	r2, #38	@ 0x26
 800330a:	4629      	mov	r1, r5
 800330c:	4658      	mov	r0, fp
 800330e:	f010 f826 	bl	801335e <memset>
 8003312:	4658      	mov	r0, fp
 8003314:	f7ff ffb8 	bl	8003288 <_ZN8touchgfx6WidgetC1Ev>
 8003318:	4b7a      	ldr	r3, [pc, #488]	@ (8003504 <_ZN15Screen1ViewBaseC1Ev+0x214>)
 800331a:	6423      	str	r3, [r4, #64]	@ 0x40
 800331c:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 8003320:	23ff      	movs	r3, #255	@ 0xff
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003322:	2226      	movs	r2, #38	@ 0x26
 8003324:	4629      	mov	r1, r5
 8003326:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 800332a:	4630      	mov	r0, r6
        : color(col)
 800332c:	66a5      	str	r5, [r4, #104]	@ 0x68
 800332e:	f010 f816 	bl	801335e <memset>
 8003332:	4630      	mov	r0, r6
 8003334:	f7ff ffa8 	bl	8003288 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8003338:	2301      	movs	r3, #1
 800333a:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800333e:	4b72      	ldr	r3, [pc, #456]	@ (8003508 <_ZN15Screen1ViewBaseC1Ev+0x218>)
 8003340:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8003342:	f104 0aa0 	add.w	sl, r4, #160	@ 0xa0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003346:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800334a:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800334e:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8003352:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
        : TextArea()
 8003356:	f104 09e8 	add.w	r9, r4, #232	@ 0xe8
 800335a:	4650      	mov	r0, sl
 800335c:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8003360:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8003364:	f7ff ffa2 	bl	80032ac <_ZN8touchgfx8TextAreaC1Ev>
 8003368:	4648      	mov	r0, r9
 800336a:	f7ff ff9f 	bl	80032ac <_ZN8touchgfx8TextAreaC1Ev>
 800336e:	f504 789a 	add.w	r8, r4, #308	@ 0x134
        : TextAreaWithWildcardBase(), wc1(0)
 8003372:	4b66      	ldr	r3, [pc, #408]	@ (800350c <_ZN15Screen1ViewBaseC1Ev+0x21c>)
 8003374:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8003378:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800337c:	4640      	mov	r0, r8
 800337e:	f7ff ff95 	bl	80032ac <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8003382:	4b63      	ldr	r3, [pc, #396]	@ (8003510 <_ZN15Screen1ViewBaseC1Ev+0x220>)
 8003384:	e9c4 3464 	strd	r3, r4, [r4, #400]	@ 0x190
 8003388:	4b62      	ldr	r3, [pc, #392]	@ (8003514 <_ZN15Screen1ViewBaseC1Ev+0x224>)
 800338a:	e9c4 3566 	strd	r3, r5, [r4, #408]	@ 0x198
    __background.setPosition(0, 0, 240, 320);
 800338e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003392:	462a      	mov	r2, r5
 8003394:	4658      	mov	r0, fp
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	4629      	mov	r1, r5
 800339a:	23f0      	movs	r3, #240	@ 0xf0
 800339c:	f7ff fc2a 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80033a0:	1d27      	adds	r7, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80033a2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80033a6:	66a3      	str	r3, [r4, #104]	@ 0x68
 80033a8:	4659      	mov	r1, fp
 80033aa:	4638      	mov	r0, r7
 80033ac:	f006 f9a8 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 199);
 80033b0:	4630      	mov	r0, r6
 80033b2:	22c7      	movs	r2, #199	@ 0xc7
 80033b4:	2114      	movs	r1, #20
 80033b6:	f7ff ff59 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
 80033ba:	f04f 0b03 	mov.w	fp, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 80033be:	aa08      	add	r2, sp, #32
 80033c0:	4630      	mov	r0, r6
 80033c2:	a907      	add	r1, sp, #28
 80033c4:	f8ad b01c 	strh.w	fp, [sp, #28]
 80033c8:	f8ad b020 	strh.w	fp, [sp, #32]
 80033cc:	f007 ff04 	bl	800b1d8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80033d0:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80033d4:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80033d8:	4631      	mov	r1, r6
 80033da:	4638      	mov	r0, r7
 80033dc:	f006 f990 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(53, 103);
 80033e0:	2267      	movs	r2, #103	@ 0x67
 80033e2:	4650      	mov	r0, sl
 80033e4:	2135      	movs	r1, #53	@ 0x35
 80033e6:	f7ff ff41 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 80033ea:	ae02      	add	r6, sp, #8
        color = newColor;
 80033ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003518 <_ZN15Screen1ViewBaseC1Ev+0x228>)
 80033ee:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
        boundingArea = calculateBoundingArea();
 80033f2:	4651      	mov	r1, sl
 80033f4:	4630      	mov	r0, r6
        linespace = space;
 80033f6:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
        boundingArea = calculateBoundingArea();
 80033fa:	f007 fbe7 	bl	800abcc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80033fe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003402:	f104 03dc 	add.w	r3, r4, #220	@ 0xdc
 8003406:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800340a:	4b44      	ldr	r3, [pc, #272]	@ (800351c <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 800340c:	9308      	str	r3, [sp, #32]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3G8C));
 800340e:	4650      	mov	r0, sl
 8003410:	f04f 030a 	mov.w	r3, #10
 8003414:	a908      	add	r1, sp, #32
 8003416:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800341a:	f007 fe7f 	bl	800b11c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800341e:	4651      	mov	r1, sl
 8003420:	4638      	mov	r0, r7
 8003422:	f006 f96d 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    highestScore.setPosition(0, 139, 240, 42);
 8003426:	232a      	movs	r3, #42	@ 0x2a
 8003428:	228b      	movs	r2, #139	@ 0x8b
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4629      	mov	r1, r5
 800342e:	23f0      	movs	r3, #240	@ 0xf0
 8003430:	4648      	mov	r0, r9
 8003432:	f7ff fbdf 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003436:	4b3a      	ldr	r3, [pc, #232]	@ (8003520 <_ZN15Screen1ViewBaseC1Ev+0x230>)
 8003438:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
        boundingArea = calculateBoundingArea();
 800343c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
        linespace = space;
 8003440:	f8a4 511c 	strh.w	r5, [r4, #284]	@ 0x11c
        boundingArea = calculateBoundingArea();
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003448:	4649      	mov	r1, r9
 800344a:	4630      	mov	r0, r6
 800344c:	4798      	blx	r3
 800344e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003452:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8003456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800345a:	4b32      	ldr	r3, [pc, #200]	@ (8003524 <_ZN15Screen1ViewBaseC1Ev+0x234>)
 800345c:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(highestScoreBuffer, HIGHESTSCORE_SIZE, "%s", touchgfx::TypedText(T_HSCORET).getText());
 800345e:	f504 7abe 	add.w	sl, r4, #380	@ 0x17c
 8003462:	b92b      	cbnz	r3, 8003470 <_ZN15Screen1ViewBaseC1Ev+0x180>
 8003464:	4b30      	ldr	r3, [pc, #192]	@ (8003528 <_ZN15Screen1ViewBaseC1Ev+0x238>)
 8003466:	4a31      	ldr	r2, [pc, #196]	@ (800352c <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8003468:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800346a:	4831      	ldr	r0, [pc, #196]	@ (8003530 <_ZN15Screen1ViewBaseC1Ev+0x240>)
 800346c:	f00f fd70 	bl	8012f50 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003470:	4b30      	ldr	r3, [pc, #192]	@ (8003534 <_ZN15Screen1ViewBaseC1Ev+0x244>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d803      	bhi.n	8003480 <_ZN15Screen1ViewBaseC1Ev+0x190>
 8003478:	4b2f      	ldr	r3, [pc, #188]	@ (8003538 <_ZN15Screen1ViewBaseC1Ev+0x248>)
 800347a:	4a2c      	ldr	r2, [pc, #176]	@ (800352c <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 800347c:	2161      	movs	r1, #97	@ 0x61
 800347e:	e7f4      	b.n	800346a <_ZN15Screen1ViewBaseC1Ev+0x17a>
        return texts->getText(typedTextId);
 8003480:	4b2e      	ldr	r3, [pc, #184]	@ (800353c <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 8003482:	4659      	mov	r1, fp
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	f000 fc1f 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800348a:	4a2d      	ldr	r2, [pc, #180]	@ (8003540 <_ZN15Screen1ViewBaseC1Ev+0x250>)
 800348c:	4603      	mov	r3, r0
 800348e:	210a      	movs	r1, #10
 8003490:	4650      	mov	r0, sl
 8003492:	f00c fdf7 	bl	8010084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8003496:	4b21      	ldr	r3, [pc, #132]	@ (800351c <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8003498:	9308      	str	r3, [sp, #32]
    highestScore.setTypedText(touchgfx::TypedText(T_HSCORE));
 800349a:	a908      	add	r1, sp, #32
 800349c:	2309      	movs	r3, #9
 800349e:	4648      	mov	r0, r9
        wc1 = value;
 80034a0:	f8c4 a130 	str.w	sl, [r4, #304]	@ 0x130
 80034a4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80034a8:	f007 fe38 	bl	800b11c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80034ac:	4649      	mov	r1, r9
 80034ae:	4638      	mov	r0, r7
 80034b0:	f006 f926 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(7, 14);
 80034b4:	220e      	movs	r2, #14
 80034b6:	4640      	mov	r0, r8
 80034b8:	2107      	movs	r1, #7
 80034ba:	f7ff fed7 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80034be:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <_ZN15Screen1ViewBaseC1Ev+0x254>)
 80034c0:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
 80034c4:	4641      	mov	r1, r8
 80034c6:	4630      	mov	r0, r6
        linespace = space;
 80034c8:	f8a4 5168 	strh.w	r5, [r4, #360]	@ 0x168
        boundingArea = calculateBoundingArea();
 80034cc:	f007 fb7e 	bl	800abcc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80034d0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80034d4:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 80034d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 80034de:	9308      	str	r3, [sp, #32]
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MXSW));
 80034e0:	a908      	add	r1, sp, #32
 80034e2:	2302      	movs	r3, #2
 80034e4:	4640      	mov	r0, r8
 80034e6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80034ea:	f007 fe17 	bl	800b11c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80034ee:	4638      	mov	r0, r7
 80034f0:	4641      	mov	r1, r8
 80034f2:	f006 f905 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80034f6:	4620      	mov	r0, r4
 80034f8:	b00b      	add	sp, #44	@ 0x2c
 80034fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fe:	bf00      	nop
 8003500:	080153e8 	.word	0x080153e8
 8003504:	08015c18 	.word	0x08015c18
 8003508:	08015c80 	.word	0x08015c80
 800350c:	08015340 	.word	0x08015340
 8003510:	080153d0 	.word	0x080153d0
 8003514:	08003249 	.word	0x08003249
 8003518:	fff00a0a 	.word	0xfff00a0a
 800351c:	08015120 	.word	0x08015120
 8003520:	fffc1414 	.word	0xfffc1414
 8003524:	20015494 	.word	0x20015494
 8003528:	08014a8b 	.word	0x08014a8b
 800352c:	08014b8d 	.word	0x08014b8d
 8003530:	08014b08 	.word	0x08014b08
 8003534:	20015498 	.word	0x20015498
 8003538:	08014b4f 	.word	0x08014b4f
 800353c:	200154a0 	.word	0x200154a0
 8003540:	08014bd8 	.word	0x08014bd8
 8003544:	fffce90f 	.word	0xfffce90f

08003548 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8003548:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800354a:	4770      	bx	lr

0800354c <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 800354c:	4770      	bx	lr

0800354e <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 800354e:	4770      	bx	lr

08003550 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003550:	4770      	bx	lr

08003552 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8003552:	4770      	bx	lr

08003554 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8003554:	4770      	bx	lr

08003556 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003556:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003558:	68c2      	ldr	r2, [r0, #12]
 800355a:	6844      	ldr	r4, [r0, #4]
 800355c:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 800355e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003560:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003564:	07d2      	lsls	r2, r2, #31
 8003566:	bf48      	it	mi
 8003568:	5962      	ldrmi	r2, [r4, r5]
 800356a:	689b      	ldr	r3, [r3, #8]
    }
 800356c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800356e:	bf48      	it	mi
 8003570:	58d3      	ldrmi	r3, [r2, r3]
 8003572:	4718      	bx	r3

08003574 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8003574:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8003576:	6840      	ldr	r0, [r0, #4]
 8003578:	b130      	cbz	r0, 8003588 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	b91a      	cbnz	r2, 8003586 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 800357e:	68d8      	ldr	r0, [r3, #12]
 8003580:	f000 0001 	and.w	r0, r0, #1
 8003584:	4770      	bx	lr
 8003586:	2001      	movs	r0, #1
    }
 8003588:	4770      	bx	lr

0800358a <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800358a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800358e:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8003592:	4770      	bx	lr

08003594 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8003594:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8003596:	3038      	adds	r0, #56	@ 0x38
 8003598:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800359c:	b113      	cbz	r3, 80035a4 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 800359e:	3136      	adds	r1, #54	@ 0x36
 80035a0:	f007 bfe8 	b.w	800b574 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80035a4:	3134      	adds	r1, #52	@ 0x34
 80035a6:	e7fb      	b.n	80035a0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

080035a8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 80035a8:	b510      	push	{r4, lr}
 80035aa:	2164      	movs	r1, #100	@ 0x64
 80035ac:	4604      	mov	r4, r0
 80035ae:	f00f fca1 	bl	8012ef4 <_ZdlPvj>
 80035b2:	4620      	mov	r0, r4
 80035b4:	bd10      	pop	{r4, pc}

080035b6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80035b6:	b510      	push	{r4, lr}
 80035b8:	2110      	movs	r1, #16
 80035ba:	4604      	mov	r4, r0
 80035bc:	f00f fc9a 	bl	8012ef4 <_ZdlPvj>
 80035c0:	4620      	mov	r0, r4
 80035c2:	bd10      	pop	{r4, pc}

080035c4 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 80035c4:	b510      	push	{r4, lr}
}
 80035c6:	f44f 710a 	mov.w	r1, #552	@ 0x228
Screen2ViewBase::~Screen2ViewBase()
 80035ca:	4604      	mov	r4, r0
}
 80035cc:	f00f fc92 	bl	8012ef4 <_ZdlPvj>
 80035d0:	4620      	mov	r0, r4
 80035d2:	bd10      	pop	{r4, pc}

080035d4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 80035d4:	b510      	push	{r4, lr}
 80035d6:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 80035d8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80035da:	b150      	cbz	r0, 80035f2 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 80035dc:	6803      	ldr	r3, [r0, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4798      	blx	r3
 80035e2:	b130      	cbz	r0, 80035f2 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 80035e4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80035e6:	6803      	ldr	r3, [r0, #0]
 80035e8:	4621      	mov	r1, r4
 80035ea:	689b      	ldr	r3, [r3, #8]
        }
    }
 80035ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 80035f0:	4718      	bx	r3
    }
 80035f2:	bd10      	pop	{r4, pc}

080035f4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 80035f4:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80035f6:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 80035f8:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 80035fc:	4604      	mov	r4, r0
 80035fe:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8003600:	b90b      	cbnz	r3, 8003606 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8003602:	b116      	cbz	r6, 800360a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8003604:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8003606:	2e00      	cmp	r6, #0
 8003608:	d0fc      	beq.n	8003604 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	4620      	mov	r0, r4
 8003618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800361c:	4798      	blx	r3
            invalidate();
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	4620      	mov	r0, r4
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8003626:	2e00      	cmp	r6, #0
 8003628:	d0ec      	beq.n	8003604 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 800362a:	792b      	ldrb	r3, [r5, #4]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d1e9      	bne.n	8003604 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	4620      	mov	r0, r4
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8003638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 800363c:	4718      	bx	r3

0800363e <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 800363e:	f100 03c4 	add.w	r3, r0, #196	@ 0xc4
 8003642:	428b      	cmp	r3, r1
{
 8003644:	b510      	push	{r4, lr}
 8003646:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8003648:	d109      	bne.n	800365e <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800364a:	f009 fcf5 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 800364e:	f7ff fcc7 	bl	8002fe0 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	4620      	mov	r0, r4
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8003658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 800365c:	4718      	bx	r3
}
 800365e:	bd10      	pop	{r4, pc}

08003660 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 8003660:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8003662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8003666:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8003668:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 800366a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 800366e:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8003670:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8003672:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8003674:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8003676:	f00c fdbf 	bl	80101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800367a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800367e:	4607      	mov	r7, r0
 8003680:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003684:	4640      	mov	r0, r8
 8003686:	f3c3 064f 	ubfx	r6, r3, #1, #16
 800368a:	f00c fde9 	bl	8010260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800368e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003692:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8003696:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800369a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800369e:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 80036a2:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 80036a6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80036aa:	b212      	sxth	r2, r2
 80036ac:	b209      	sxth	r1, r1
 80036ae:	f7ff fddd 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	4620      	mov	r0, r4
 80036b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 80036ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 80036be:	4718      	bx	r3

080036c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 80036c0:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 80036c2:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 80036c4:	4604      	mov	r4, r0
 80036c6:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 80036c8:	2100      	movs	r1, #0
 80036ca:	f00f fe48 	bl	801335e <memset>
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff fdda 	bl	8003288 <_ZN8touchgfx6WidgetC1Ev>
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	882b      	ldrh	r3, [r5, #0]
 80036da:	84e3      	strh	r3, [r4, #38]	@ 0x26
 80036dc:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 80036de:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 80036e0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 80036e4:	4629      	mov	r1, r5
 80036e6:	f007 ff45 	bl	800b574 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80036ea:	4620      	mov	r0, r4
 80036ec:	bd38      	pop	{r3, r4, r5, pc}
 80036ee:	bf00      	nop
 80036f0:	08015d5c 	.word	0x08015d5c

080036f4 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 80036f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f8:	4604      	mov	r4, r0
 80036fa:	b08d      	sub	sp, #52	@ 0x34
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 80036fc:	4627      	mov	r7, r4
 80036fe:	2500      	movs	r5, #0
 8003700:	f00a ffe0 	bl	800e6c4 <_ZN8touchgfx6ScreenC1Ev>
 8003704:	4ba2      	ldr	r3, [pc, #648]	@ (8003990 <_ZN15Screen2ViewBaseC1Ev+0x29c>)
 8003706:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003708:	f847 3b40 	str.w	r3, [r7], #64
        : Widget(), alpha(255), color(0)
 800370c:	2226      	movs	r2, #38	@ 0x26
 800370e:	4629      	mov	r1, r5
 8003710:	4638      	mov	r0, r7
 8003712:	f00f fe24 	bl	801335e <memset>
 8003716:	4638      	mov	r0, r7
 8003718:	f7ff fdb6 	bl	8003288 <_ZN8touchgfx6WidgetC1Ev>
 800371c:	4b9d      	ldr	r3, [pc, #628]	@ (8003994 <_ZN15Screen2ViewBaseC1Ev+0x2a0>)
 800371e:	6423      	str	r3, [r4, #64]	@ 0x40
 8003720:	23ff      	movs	r3, #255	@ 0xff
 8003722:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8003726:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 800372a:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800372e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8003732:	4618      	mov	r0, r3
 8003734:	a90a      	add	r1, sp, #40	@ 0x28
 8003736:	66a5      	str	r5, [r4, #104]	@ 0x68
 8003738:	9303      	str	r3, [sp, #12]
 800373a:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 800373e:	f7ff ffbf 	bl	80036c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003742:	a90a      	add	r1, sp, #40	@ 0x28
 8003744:	4650      	mov	r0, sl
 8003746:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 800374a:	f7ff ffb9 	bl	80036c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pressed(false), alpha(255), action(0)
 800374e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8003752:	f8a4 30f0 	strh.w	r3, [r4, #240]	@ 0xf0
 8003756:	f240 1301 	movw	r3, #257	@ 0x101
 800375a:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
        : T()
 800375e:	4b8e      	ldr	r3, [pc, #568]	@ (8003998 <_ZN15Screen2ViewBaseC1Ev+0x2a4>)
 8003760:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8003764:	f104 06fc 	add.w	r6, r4, #252	@ 0xfc
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
 800376c:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 8003770:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 8003774:	a90a      	add	r1, sp, #40	@ 0x28
 8003776:	4630      	mov	r0, r6
        : x(0), y(0), width(0), height(0)
 8003778:	e9c4 5532 	strd	r5, r5, [r4, #200]	@ 0xc8
 800377c:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
          nextSibling(0),
 8003780:	e9c4 5536 	strd	r5, r5, [r4, #216]	@ 0xd8
          cachedAbsX(0),
 8003784:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
          firstChild(0)
 8003788:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
 800378c:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 8003790:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
        : TextArea()
 8003794:	f504 7894 	add.w	r8, r4, #296	@ 0x128
 8003798:	f7ff ff92 	bl	80036c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 800379c:	4631      	mov	r1, r6
 800379e:	4648      	mov	r0, r9
 80037a0:	f005 ffae 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80037a4:	4640      	mov	r0, r8
 80037a6:	f7ff fd81 	bl	80032ac <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 80037aa:	4b7c      	ldr	r3, [pc, #496]	@ (800399c <_ZN15Screen2ViewBaseC1Ev+0x2a8>)
 80037ac:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 80037b0:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 80037b4:	4618      	mov	r0, r3
 80037b6:	f8c4 5170 	str.w	r5, [r4, #368]	@ 0x170
 80037ba:	f504 7bde 	add.w	fp, r4, #444	@ 0x1bc
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	f7ff fd74 	bl	80032ac <_ZN8touchgfx8TextAreaC1Ev>
 80037c4:	4658      	mov	r0, fp
 80037c6:	f7ff fd71 	bl	80032ac <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80037ca:	4b75      	ldr	r3, [pc, #468]	@ (80039a0 <_ZN15Screen2ViewBaseC1Ev+0x2ac>)
 80037cc:	e9c4 3486 	strd	r3, r4, [r4, #536]	@ 0x218
 80037d0:	4b74      	ldr	r3, [pc, #464]	@ (80039a4 <_ZN15Screen2ViewBaseC1Ev+0x2b0>)
 80037d2:	e9c4 3588 	strd	r3, r5, [r4, #544]	@ 0x220
    __background.setPosition(0, 0, 240, 320);
 80037d6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80037da:	462a      	mov	r2, r5
 80037dc:	4638      	mov	r0, r7
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4629      	mov	r1, r5
 80037e2:	23f0      	movs	r3, #240	@ 0xf0
 80037e4:	f7ff fa06 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80037e8:	1d26      	adds	r6, r4, #4
        color = newColor;
 80037ea:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80037ee:	66a3      	str	r3, [r4, #104]	@ 0x68
 80037f0:	4639      	mov	r1, r7
 80037f2:	4630      	mov	r0, r6
 80037f4:	f005 ff84 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 80037f8:	462a      	mov	r2, r5
 80037fa:	9803      	ldr	r0, [sp, #12]
 80037fc:	4629      	mov	r1, r5
 80037fe:	f7ff fd35 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
    track0.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8003802:	9803      	ldr	r0, [sp, #12]
 8003804:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8003808:	a90a      	add	r1, sp, #40	@ 0x28
 800380a:	f007 feb3 	bl	800b574 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800380e:	9903      	ldr	r1, [sp, #12]
 8003810:	4630      	mov	r0, r6
 8003812:	f005 ff75 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 52);
 8003816:	2234      	movs	r2, #52	@ 0x34
 8003818:	4650      	mov	r0, sl
 800381a:	4629      	mov	r1, r5
 800381c:	f7ff fd26 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
 8003820:	2302      	movs	r3, #2
    track1.setBitmap(touchgfx::Bitmap(BITMAP_GAMEOVER_ID));
 8003822:	4650      	mov	r0, sl
 8003824:	a90a      	add	r1, sp, #40	@ 0x28
 8003826:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800382a:	f007 fea3 	bl	800b574 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800382e:	4651      	mov	r1, sl
 8003830:	4630      	mov	r0, r6
        visible = vis;
 8003832:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8003836:	f005 ff63 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800383a:	2701      	movs	r7, #1
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 800383c:	4648      	mov	r0, r9
 800383e:	aa0a      	add	r2, sp, #40	@ 0x28
 8003840:	a909      	add	r1, sp, #36	@ 0x24
 8003842:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8003846:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800384a:	f7ff ff09 	bl	8003660 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 800384e:	f504 7306 	add.w	r3, r4, #536	@ 0x218
        action = &callback;
 8003852:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
    flexButton1.setPosition(204, 282, 32, 32);
 8003856:	2320      	movs	r3, #32
 8003858:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800385c:	4648      	mov	r0, r9
        rect.x = x;
 800385e:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 8003862:	21cc      	movs	r1, #204	@ 0xcc
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	f7ff f9c5 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
 800386a:	4649      	mov	r1, r9
 800386c:	4630      	mov	r0, r6
 800386e:	f005 ff47 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    score.setPosition(100, 166, 136, 49);
 8003872:	2331      	movs	r3, #49	@ 0x31
 8003874:	22a6      	movs	r2, #166	@ 0xa6
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2164      	movs	r1, #100	@ 0x64
 800387a:	2388      	movs	r3, #136	@ 0x88
 800387c:	4640      	mov	r0, r8
 800387e:	f7ff f9b9 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003882:	4b49      	ldr	r3, [pc, #292]	@ (80039a8 <_ZN15Screen2ViewBaseC1Ev+0x2b4>)
 8003884:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 8003888:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
        linespace = space;
 800388c:	f8a4 515c 	strh.w	r5, [r4, #348]	@ 0x15c
        boundingArea = calculateBoundingArea();
 8003890:	f10d 0910 	add.w	r9, sp, #16
 8003894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003898:	4641      	mov	r1, r8
 800389a:	4648      	mov	r0, r9
 800389c:	4798      	blx	r3
 800389e:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80038a2:	f504 73b2 	add.w	r3, r4, #356	@ 0x164
 80038a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80038aa:	4b40      	ldr	r3, [pc, #256]	@ (80039ac <_ZN15Screen2ViewBaseC1Ev+0x2b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SCORE_T).getText());
 80038ae:	f504 7a01 	add.w	sl, r4, #516	@ 0x204
 80038b2:	b92b      	cbnz	r3, 80038c0 <_ZN15Screen2ViewBaseC1Ev+0x1cc>
 80038b4:	4b3e      	ldr	r3, [pc, #248]	@ (80039b0 <_ZN15Screen2ViewBaseC1Ev+0x2bc>)
 80038b6:	4a3f      	ldr	r2, [pc, #252]	@ (80039b4 <_ZN15Screen2ViewBaseC1Ev+0x2c0>)
 80038b8:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80038ba:	483f      	ldr	r0, [pc, #252]	@ (80039b8 <_ZN15Screen2ViewBaseC1Ev+0x2c4>)
 80038bc:	f00f fb48 	bl	8012f50 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80038c0:	4b3e      	ldr	r3, [pc, #248]	@ (80039bc <_ZN15Screen2ViewBaseC1Ev+0x2c8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	2b05      	cmp	r3, #5
 80038c6:	d803      	bhi.n	80038d0 <_ZN15Screen2ViewBaseC1Ev+0x1dc>
 80038c8:	4b3d      	ldr	r3, [pc, #244]	@ (80039c0 <_ZN15Screen2ViewBaseC1Ev+0x2cc>)
 80038ca:	4a3a      	ldr	r2, [pc, #232]	@ (80039b4 <_ZN15Screen2ViewBaseC1Ev+0x2c0>)
 80038cc:	2161      	movs	r1, #97	@ 0x61
 80038ce:	e7f4      	b.n	80038ba <_ZN15Screen2ViewBaseC1Ev+0x1c6>
        return texts->getText(typedTextId);
 80038d0:	4b3c      	ldr	r3, [pc, #240]	@ (80039c4 <_ZN15Screen2ViewBaseC1Ev+0x2d0>)
 80038d2:	2105      	movs	r1, #5
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	f000 f9f7 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 80038da:	4a3b      	ldr	r2, [pc, #236]	@ (80039c8 <_ZN15Screen2ViewBaseC1Ev+0x2d4>)
 80038dc:	4603      	mov	r3, r0
 80038de:	210a      	movs	r1, #10
 80038e0:	4650      	mov	r0, sl
 80038e2:	f00c fbcf 	bl	8010084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80038e6:	2304      	movs	r3, #4
        wc1 = value;
 80038e8:	f8c4 a170 	str.w	sl, [r4, #368]	@ 0x170
    score.setTypedText(touchgfx::TypedText(T_SCORE));
 80038ec:	a90a      	add	r1, sp, #40	@ 0x28
 80038ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 80039d4 <_ZN15Screen2ViewBaseC1Ev+0x2e0>
 80038f2:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80038f6:	4640      	mov	r0, r8
 80038f8:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80038fc:	f007 fc0e 	bl	800b11c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003900:	4641      	mov	r1, r8
 8003902:	4630      	mov	r0, r6
 8003904:	f005 fefc 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(185, 136);
 8003908:	9802      	ldr	r0, [sp, #8]
 800390a:	2288      	movs	r2, #136	@ 0x88
 800390c:	21b9      	movs	r1, #185	@ 0xb9
 800390e:	f7ff fcad 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003912:	4b2e      	ldr	r3, [pc, #184]	@ (80039cc <_ZN15Screen2ViewBaseC1Ev+0x2d8>)
        boundingArea = calculateBoundingArea();
 8003914:	9902      	ldr	r1, [sp, #8]
        color = newColor;
 8003916:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
        boundingArea = calculateBoundingArea();
 800391a:	4648      	mov	r0, r9
        linespace = space;
 800391c:	f8a4 51a8 	strh.w	r5, [r4, #424]	@ 0x1a8
        boundingArea = calculateBoundingArea();
 8003920:	f007 f954 	bl	800abcc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003924:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003928:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 800392c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1D7L));
 8003930:	9802      	ldr	r0, [sp, #8]
 8003932:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8003936:	a90a      	add	r1, sp, #40	@ 0x28
 8003938:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
 800393c:	f007 fbee 	bl	800b11c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003940:	9902      	ldr	r1, [sp, #8]
 8003942:	4630      	mov	r0, r6
 8003944:	f005 fedc 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(191, 54);
 8003948:	2236      	movs	r2, #54	@ 0x36
 800394a:	4658      	mov	r0, fp
 800394c:	21bf      	movs	r1, #191	@ 0xbf
 800394e:	f7ff fc8d 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003952:	4b1f      	ldr	r3, [pc, #124]	@ (80039d0 <_ZN15Screen2ViewBaseC1Ev+0x2dc>)
 8003954:	f8c4 31ec 	str.w	r3, [r4, #492]	@ 0x1ec
        boundingArea = calculateBoundingArea();
 8003958:	4659      	mov	r1, fp
 800395a:	4648      	mov	r0, r9
        linespace = space;
 800395c:	f8a4 51f0 	strh.w	r5, [r4, #496]	@ 0x1f0
        boundingArea = calculateBoundingArea();
 8003960:	f007 f934 	bl	800abcc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003964:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003968:	f504 73fc 	add.w	r3, r4, #504	@ 0x1f8
 800396c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JK4A));
 8003970:	a90a      	add	r1, sp, #40	@ 0x28
 8003972:	4658      	mov	r0, fp
 8003974:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8003978:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 800397c:	f007 fbce 	bl	800b11c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003980:	4630      	mov	r0, r6
 8003982:	4659      	mov	r1, fp
 8003984:	f005 febc 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003988:	4620      	mov	r0, r4
 800398a:	b00d      	add	sp, #52	@ 0x34
 800398c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003990:	080154d4 	.word	0x080154d4
 8003994:	08015c18 	.word	0x08015c18
 8003998:	0801541c 	.word	0x0801541c
 800399c:	08015340 	.word	0x08015340
 80039a0:	080154bc 	.word	0x080154bc
 80039a4:	0800363f 	.word	0x0800363f
 80039a8:	fff50c0c 	.word	0xfff50c0c
 80039ac:	20015494 	.word	0x20015494
 80039b0:	08014a8b 	.word	0x08014a8b
 80039b4:	08014b8d 	.word	0x08014b8d
 80039b8:	08014b08 	.word	0x08014b08
 80039bc:	20015498 	.word	0x20015498
 80039c0:	08014b4f 	.word	0x08014b4f
 80039c4:	200154a0 	.word	0x200154a0
 80039c8:	08014bd8 	.word	0x08014bd8
 80039cc:	ffb411f5 	.word	0xffb411f5
 80039d0:	ff9e0ff7 	.word	0xff9e0ff7
 80039d4:	08015120 	.word	0x08015120

080039d8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_arialbd_10_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_10_4bpp()
{
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80039d8:	4770      	bx	lr
	...

080039dc <_Z23getFont_arialbd_10_4bppv>:
{
 80039dc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80039de:	4d18      	ldr	r5, [pc, #96]	@ (8003a40 <_Z23getFont_arialbd_10_4bppv+0x64>)
 80039e0:	682c      	ldr	r4, [r5, #0]
 80039e2:	f014 0401 	ands.w	r4, r4, #1
{
 80039e6:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80039e8:	f3bf 8f5b 	dmb	ish
 80039ec:	d124      	bne.n	8003a38 <_Z23getFont_arialbd_10_4bppv+0x5c>
 80039ee:	4628      	mov	r0, r5
 80039f0:	f00f fa82 	bl	8012ef8 <__cxa_guard_acquire>
 80039f4:	b300      	cbz	r0, 8003a38 <_Z23getFont_arialbd_10_4bppv+0x5c>
 80039f6:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <_Z23getFont_arialbd_10_4bppv+0x68>)
 80039f8:	4913      	ldr	r1, [pc, #76]	@ (8003a48 <_Z23getFont_arialbd_10_4bppv+0x6c>)
 80039fa:	4814      	ldr	r0, [pc, #80]	@ (8003a4c <_Z23getFont_arialbd_10_4bppv+0x70>)
 80039fc:	940a      	str	r4, [sp, #40]	@ 0x28
 80039fe:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8003a02:	233f      	movs	r3, #63	@ 0x3f
 8003a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a06:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <_Z23getFont_arialbd_10_4bppv+0x74>)
 8003a08:	9308      	str	r3, [sp, #32]
 8003a0a:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <_Z23getFont_arialbd_10_4bppv+0x78>)
 8003a0c:	9307      	str	r3, [sp, #28]
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	2304      	movs	r3, #4
 8003a18:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8003a1c:	230a      	movs	r3, #10
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	f240 2215 	movw	r2, #533	@ 0x215
 8003a24:	230d      	movs	r3, #13
 8003a26:	9401      	str	r4, [sp, #4]
 8003a28:	f7ff fb2c 	bl	8003084 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003a2c:	480a      	ldr	r0, [pc, #40]	@ (8003a58 <_Z23getFont_arialbd_10_4bppv+0x7c>)
 8003a2e:	f00f faad 	bl	8012f8c <atexit>
 8003a32:	4628      	mov	r0, r5
 8003a34:	f00f fa6c 	bl	8012f10 <__cxa_guard_release>
    return arialbd_10_4bpp;
}
 8003a38:	4804      	ldr	r0, [pc, #16]	@ (8003a4c <_Z23getFont_arialbd_10_4bppv+0x70>)
 8003a3a:	b00f      	add	sp, #60	@ 0x3c
 8003a3c:	bd30      	pop	{r4, r5, pc}
 8003a3e:	bf00      	nop
 8003a40:	20004630 	.word	0x20004630
 8003a44:	08015504 	.word	0x08015504
 8003a48:	08053088 	.word	0x08053088
 8003a4c:	20004634 	.word	0x20004634
 8003a50:	08058800 	.word	0x08058800
 8003a54:	08058adc 	.word	0x08058adc
 8003a58:	080039d9 	.word	0x080039d9

08003a5c <__tcf_0>:
extern const touchgfx::FontContextualFormsTable arialbd_contextualFormsTable;
touchgfx::GeneratedFont& getFont_arialbd_20_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_20_4bpp()
{
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a5c:	4770      	bx	lr
	...

08003a60 <_Z23getFont_arialbd_20_4bppv>:
{
 8003a60:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a62:	4d18      	ldr	r5, [pc, #96]	@ (8003ac4 <_Z23getFont_arialbd_20_4bppv+0x64>)
 8003a64:	682c      	ldr	r4, [r5, #0]
 8003a66:	f014 0401 	ands.w	r4, r4, #1
{
 8003a6a:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a6c:	f3bf 8f5b 	dmb	ish
 8003a70:	d125      	bne.n	8003abe <_Z23getFont_arialbd_20_4bppv+0x5e>
 8003a72:	4628      	mov	r0, r5
 8003a74:	f00f fa40 	bl	8012ef8 <__cxa_guard_acquire>
 8003a78:	b308      	cbz	r0, 8003abe <_Z23getFont_arialbd_20_4bppv+0x5e>
 8003a7a:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <_Z23getFont_arialbd_20_4bppv+0x68>)
 8003a7c:	4913      	ldr	r1, [pc, #76]	@ (8003acc <_Z23getFont_arialbd_20_4bppv+0x6c>)
 8003a7e:	4814      	ldr	r0, [pc, #80]	@ (8003ad0 <_Z23getFont_arialbd_20_4bppv+0x70>)
 8003a80:	940a      	str	r4, [sp, #40]	@ 0x28
 8003a82:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8003a86:	233f      	movs	r3, #63	@ 0x3f
 8003a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ad4 <_Z23getFont_arialbd_20_4bppv+0x74>)
 8003a8c:	9308      	str	r3, [sp, #32]
 8003a8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <_Z23getFont_arialbd_20_4bppv+0x78>)
 8003a90:	9307      	str	r3, [sp, #28]
 8003a92:	2204      	movs	r2, #4
 8003a94:	2302      	movs	r3, #2
 8003a96:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8003aa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003aa4:	2314      	movs	r3, #20
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	f240 2215 	movw	r2, #533	@ 0x215
 8003aac:	231a      	movs	r3, #26
 8003aae:	f7ff fae9 	bl	8003084 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003ab2:	480a      	ldr	r0, [pc, #40]	@ (8003adc <_Z23getFont_arialbd_20_4bppv+0x7c>)
 8003ab4:	f00f fa6a 	bl	8012f8c <atexit>
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f00f fa29 	bl	8012f10 <__cxa_guard_release>
    return arialbd_20_4bpp;
}
 8003abe:	4804      	ldr	r0, [pc, #16]	@ (8003ad0 <_Z23getFont_arialbd_20_4bppv+0x70>)
 8003ac0:	b00f      	add	sp, #60	@ 0x3c
 8003ac2:	bd30      	pop	{r4, r5, pc}
 8003ac4:	20004660 	.word	0x20004660
 8003ac8:	08015504 	.word	0x08015504
 8003acc:	08054db0 	.word	0x08054db0
 8003ad0:	20004664 	.word	0x20004664
 8003ad4:	08058808 	.word	0x08058808
 8003ad8:	08058ae0 	.word	0x08058ae0
 8003adc:	08003a5d 	.word	0x08003a5d

08003ae0 <__tcf_0>:
extern const touchgfx::FontContextualFormsTable arialbd_contextualFormsTable;
touchgfx::GeneratedFont& getFont_arialbd_40_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_40_4bpp()
{
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003ae0:	4770      	bx	lr
	...

08003ae4 <_Z23getFont_arialbd_40_4bppv>:
{
 8003ae4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003ae6:	4d18      	ldr	r5, [pc, #96]	@ (8003b48 <_Z23getFont_arialbd_40_4bppv+0x64>)
 8003ae8:	682c      	ldr	r4, [r5, #0]
 8003aea:	f014 0401 	ands.w	r4, r4, #1
{
 8003aee:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003af0:	f3bf 8f5b 	dmb	ish
 8003af4:	d125      	bne.n	8003b42 <_Z23getFont_arialbd_40_4bppv+0x5e>
 8003af6:	4628      	mov	r0, r5
 8003af8:	f00f f9fe 	bl	8012ef8 <__cxa_guard_acquire>
 8003afc:	b308      	cbz	r0, 8003b42 <_Z23getFont_arialbd_40_4bppv+0x5e>
 8003afe:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <_Z23getFont_arialbd_40_4bppv+0x68>)
 8003b00:	4913      	ldr	r1, [pc, #76]	@ (8003b50 <_Z23getFont_arialbd_40_4bppv+0x6c>)
 8003b02:	4814      	ldr	r0, [pc, #80]	@ (8003b54 <_Z23getFont_arialbd_40_4bppv+0x70>)
 8003b04:	940a      	str	r4, [sp, #40]	@ 0x28
 8003b06:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8003b0a:	233f      	movs	r3, #63	@ 0x3f
 8003b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b0e:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <_Z23getFont_arialbd_40_4bppv+0x74>)
 8003b10:	9308      	str	r3, [sp, #32]
 8003b12:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <_Z23getFont_arialbd_40_4bppv+0x78>)
 8003b14:	9307      	str	r3, [sp, #28]
 8003b16:	2207      	movs	r2, #7
 8003b18:	2304      	movs	r3, #4
 8003b1a:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003b24:	2328      	movs	r3, #40	@ 0x28
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	f240 2215 	movw	r2, #533	@ 0x215
 8003b2c:	2333      	movs	r3, #51	@ 0x33
 8003b2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003b32:	f7ff faa7 	bl	8003084 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003b36:	480a      	ldr	r0, [pc, #40]	@ (8003b60 <_Z23getFont_arialbd_40_4bppv+0x7c>)
 8003b38:	f00f fa28 	bl	8012f8c <atexit>
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f00f f9e7 	bl	8012f10 <__cxa_guard_release>
    return arialbd_40_4bpp;
}
 8003b42:	4804      	ldr	r0, [pc, #16]	@ (8003b54 <_Z23getFont_arialbd_40_4bppv+0x70>)
 8003b44:	b00f      	add	sp, #60	@ 0x3c
 8003b46:	bd30      	pop	{r4, r5, pc}
 8003b48:	20004690 	.word	0x20004690
 8003b4c:	08015504 	.word	0x08015504
 8003b50:	08056ad8 	.word	0x08056ad8
 8003b54:	20004694 	.word	0x20004694
 8003b58:	08058944 	.word	0x08058944
 8003b5c:	08058ae4 	.word	0x08058ae4
 8003b60:	08003ae1 	.word	0x08003ae1

08003b64 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003b64:	2000      	movs	r0, #0
 8003b66:	4770      	bx	lr

08003b68 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003b68:	2000      	movs	r0, #0
 8003b6a:	4770      	bx	lr

08003b6c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003b6c:	b40e      	push	{r1, r2, r3}
 8003b6e:	b503      	push	{r0, r1, lr}
 8003b70:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003b72:	2100      	movs	r1, #0
{
 8003b74:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003b78:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003b7a:	f00a f9d1 	bl	800df20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003b7e:	b002      	add	sp, #8
 8003b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b84:	b003      	add	sp, #12
 8003b86:	4770      	bx	lr

08003b88 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003b88:	b40c      	push	{r2, r3}
 8003b8a:	b507      	push	{r0, r1, r2, lr}
 8003b8c:	ab04      	add	r3, sp, #16
 8003b8e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003b92:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003b94:	f00a f9c4 	bl	800df20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003b98:	b003      	add	sp, #12
 8003b9a:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b9e:	b002      	add	sp, #8
 8003ba0:	4770      	bx	lr
	...

08003ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003ba4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003ba6:	b510      	push	{r4, lr}
 8003ba8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003baa:	b373      	cbz	r3, 8003c0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003bac:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003bae:	b92b      	cbnz	r3, 8003bbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003bb0:	4b18      	ldr	r3, [pc, #96]	@ (8003c14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003bb2:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 8003bb4:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003bb6:	4819      	ldr	r0, [pc, #100]	@ (8003c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003bb8:	f00f f9ca 	bl	8012f50 <__assert_func>
            return buffer[pos];
 8003bbc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003bbe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003bc2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003bc4:	b30b      	cbz	r3, 8003c0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003bc6:	f00b fcb4 	bl	800f532 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003bca:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d803      	bhi.n	8003bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003bd0:	4b13      	ldr	r3, [pc, #76]	@ (8003c20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003bd2:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003bd4:	21cb      	movs	r1, #203	@ 0xcb
 8003bd6:	e7ee      	b.n	8003bb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003bd8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003bda:	1c53      	adds	r3, r2, #1
 8003bdc:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003bde:	2b09      	cmp	r3, #9
 8003be0:	4619      	mov	r1, r3
 8003be2:	bf88      	it	hi
 8003be4:	f1a3 010a 	subhi.w	r1, r3, #10
 8003be8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003bec:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003bf0:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003bf2:	4281      	cmp	r1, r0
 8003bf4:	d109      	bne.n	8003c0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003bf6:	2b0a      	cmp	r3, #10
 8003bf8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003bfc:	bf28      	it	cs
 8003bfe:	2300      	movcs	r3, #0
 8003c00:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003c04:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8003c06:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003c08:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003c0a:	4620      	mov	r0, r4
}
 8003c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003c10:	f00b bb92 	b.w	800f338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003c14:	08014bdb 	.word	0x08014bdb
 8003c18:	08014be4 	.word	0x08014be4
 8003c1c:	08014c8f 	.word	0x08014c8f
 8003c20:	08014cd9 	.word	0x08014cd9
 8003c24:	08014ce7 	.word	0x08014ce7

08003c28 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003c28:	f00b bb4d 	b.w	800f2c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003c2c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	ac02      	add	r4, sp, #8
 8003c32:	e884 0006 	stmia.w	r4, {r1, r2}
 8003c36:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003c38:	ab0a      	add	r3, sp, #40	@ 0x28
 8003c3a:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	4621      	mov	r1, r4
 8003c44:	9b08      	ldr	r3, [sp, #32]
 8003c46:	f008 fd95 	bl	800c774 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003c4a:	b006      	add	sp, #24
 8003c4c:	bd10      	pop	{r4, pc}
	...

08003c50 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003c50:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003c52:	bb18      	cbnz	r0, 8003c9c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003c54:	4b12      	ldr	r3, [pc, #72]	@ (8003ca0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003c56:	4813      	ldr	r0, [pc, #76]	@ (8003ca4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003c58:	681c      	ldr	r4, [r3, #0]
 8003c5a:	4913      	ldr	r1, [pc, #76]	@ (8003ca8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003c5c:	b1b4      	cbz	r4, 8003c8c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	4422      	add	r2, r4
 8003c62:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003c64:	6862      	ldr	r2, [r4, #4]
 8003c66:	4422      	add	r2, r4
 8003c68:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003c6a:	68a2      	ldr	r2, [r4, #8]
 8003c6c:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003c74:	f000 f838 	bl	8003ce8 <_ZN17TypedTextDatabase8getFontsEv>
 8003c78:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003c7a:	f000 f833 	bl	8003ce4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003c80:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003c82:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003c84:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003c86:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003c88:	8018      	strh	r0, [r3, #0]
    }
}
 8003c8a:	e007      	b.n	8003c9c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003c8e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003c90:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003c92:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003c96:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003c98:	2c00      	cmp	r4, #0
 8003c9a:	d1e8      	bne.n	8003c6e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003c9c:	bd38      	pop	{r3, r4, r5, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200046cc 	.word	0x200046cc
 8003ca4:	200046c4 	.word	0x200046c4
 8003ca8:	200046c0 	.word	0x200046c0
 8003cac:	200046c8 	.word	0x200046c8
 8003cb0:	20015494 	.word	0x20015494
 8003cb4:	2001549c 	.word	0x2001549c
 8003cb8:	20015498 	.word	0x20015498
 8003cbc:	08058b14 	.word	0x08058b14
 8003cc0:	08058ae8 	.word	0x08058ae8
 8003cc4:	08058b64 	.word	0x08058b64

08003cc8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003cd0:	4b03      	ldr	r3, [pc, #12]	@ (8003ce0 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	200046c0 	.word	0x200046c0
 8003ce0:	200046c4 	.word	0x200046c4

08003ce4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003ce4:	200b      	movs	r0, #11
 8003ce6:	4770      	bx	lr

08003ce8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003ce8:	4800      	ldr	r0, [pc, #0]	@ (8003cec <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003cea:	4770      	bx	lr
 8003cec:	200046d0 	.word	0x200046d0

08003cf0 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_arialbd_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003cf0:	b510      	push	{r4, lr}
    &(getFont_arialbd_20_4bpp()),
 8003cf2:	f7ff feb5 	bl	8003a60 <_Z23getFont_arialbd_20_4bppv>
};
 8003cf6:	4c04      	ldr	r4, [pc, #16]	@ (8003d08 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003cf8:	6020      	str	r0, [r4, #0]
    &(getFont_arialbd_40_4bpp()),
 8003cfa:	f7ff fef3 	bl	8003ae4 <_Z23getFont_arialbd_40_4bppv>
};
 8003cfe:	6060      	str	r0, [r4, #4]
    &(getFont_arialbd_10_4bpp())
 8003d00:	f7ff fe6c 	bl	80039dc <_Z23getFont_arialbd_10_4bppv>
};
 8003d04:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003d06:	bd10      	pop	{r4, pc}
 8003d08:	200046d0 	.word	0x200046d0

08003d0c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003d0c:	4770      	bx	lr

08003d0e <_ZN19FrontendApplicationD0Ev>:
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003d14:	4604      	mov	r4, r0
 8003d16:	f00f f8ed 	bl	8012ef4 <_ZdlPvj>
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	bd10      	pop	{r4, pc}

08003d1e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	4604      	mov	r4, r0
    {
        model.tick();
 8003d22:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8003d26:	f000 f816 	bl	8003d56 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003d2a:	4620      	mov	r0, r4
    }
 8003d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003d30:	f009 ba2c 	b.w	800d18c <_ZN8touchgfx11Application15handleTickEventEv>

08003d34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003d34:	b510      	push	{r4, lr}
 8003d36:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003d38:	f7ff f912 	bl	8002f60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003d3c:	4b01      	ldr	r3, [pc, #4]	@ (8003d44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8003d3e:	6023      	str	r3, [r4, #0]
{

}
 8003d40:	4620      	mov	r0, r4
 8003d42:	bd10      	pop	{r4, pc}
 8003d44:	08015964 	.word	0x08015964

08003d48 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95), modelListener(0)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	215f      	movs	r1, #95	@ 0x5f
 8003d4c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8003d50:	6002      	str	r2, [r0, #0]
 8003d52:	8081      	strh	r1, [r0, #4]
{
	modelTickCount = 0;
	highestScore = 0;
}
 8003d54:	4770      	bx	lr

08003d56 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8003d56:	6803      	ldr	r3, [r0, #0]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	6003      	str	r3, [r0, #0]
}
 8003d5c:	4770      	bx	lr

08003d5e <_ZNK5Model15getHighestScoreEv>:
	return ImageX;
}

int Model::getHighestScore() const {
	return this->highestScore;
}
 8003d5e:	68c0      	ldr	r0, [r0, #12]
 8003d60:	4770      	bx	lr

08003d62 <_ZN5Model15setHighestScoreEi>:
void Model::setHighestScore(int score){
	if(score > highestScore) highestScore = score;
 8003d62:	68c3      	ldr	r3, [r0, #12]
 8003d64:	428b      	cmp	r3, r1
 8003d66:	bfb8      	it	lt
 8003d68:	60c1      	strlt	r1, [r0, #12]
}
 8003d6a:	4770      	bx	lr

08003d6c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003d6c:	4770      	bx	lr

08003d6e <_ZThn4_N16Screen1PresenterD1Ev>:
 8003d6e:	3804      	subs	r0, #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003d72:	4770      	bx	lr

08003d74 <_ZN16Screen1PresenterD0Ev>:
 8003d74:	b510      	push	{r4, lr}
 8003d76:	2110      	movs	r1, #16
 8003d78:	4604      	mov	r4, r0
 8003d7a:	f00f f8bb 	bl	8012ef4 <_ZdlPvj>
 8003d7e:	4620      	mov	r0, r4
 8003d80:	bd10      	pop	{r4, pc}

08003d82 <_ZThn4_N16Screen1PresenterD0Ev>:
 8003d82:	f1a0 0004 	sub.w	r0, r0, #4
 8003d86:	e7f5      	b.n	8003d74 <_ZN16Screen1PresenterD0Ev>

08003d88 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003d88:	2200      	movs	r2, #0
 8003d8a:	6082      	str	r2, [r0, #8]
    : view(v)
 8003d8c:	4a02      	ldr	r2, [pc, #8]	@ (8003d98 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8003d8e:	6002      	str	r2, [r0, #0]
 8003d90:	3218      	adds	r2, #24
 8003d92:	6042      	str	r2, [r0, #4]
 8003d94:	60c1      	str	r1, [r0, #12]
}
 8003d96:	4770      	bx	lr
 8003d98:	080159b8 	.word	0x080159b8

08003d9c <_ZNK16Screen1Presenter15getHighestScoreEv>:
{

}

int Screen1Presenter::getHighestScore() const{
	return model->getHighestScore();
 8003d9c:	6880      	ldr	r0, [r0, #8]
 8003d9e:	f7ff bfde 	b.w	8003d5e <_ZNK5Model15getHighestScoreEv>

08003da2 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003da2:	4770      	bx	lr

08003da4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003da4:	b510      	push	{r4, lr}
 8003da6:	4b03      	ldr	r3, [pc, #12]	@ (8003db4 <_ZN11Screen1ViewD1Ev+0x10>)
 8003da8:	6003      	str	r3, [r0, #0]
 8003daa:	4604      	mov	r4, r0
 8003dac:	f7ff f9df 	bl	800316e <_ZN15Screen1ViewBaseD1Ev>
 8003db0:	4620      	mov	r0, r4
 8003db2:	bd10      	pop	{r4, pc}
 8003db4:	080159e0 	.word	0x080159e0

08003db8 <_ZN11Screen1ViewD0Ev>:
 8003db8:	b510      	push	{r4, lr}
 8003dba:	4604      	mov	r4, r0
 8003dbc:	f7ff fff2 	bl	8003da4 <_ZN11Screen1ViewD1Ev>
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8003dc6:	f00f f895 	bl	8012ef4 <_ZdlPvj>
 8003dca:	4620      	mov	r0, r4
 8003dcc:	bd10      	pop	{r4, pc}
	...

08003dd0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	f7ff fa8c 	bl	80032f0 <_ZN15Screen1ViewBaseC1Ev>
 8003dd8:	4b07      	ldr	r3, [pc, #28]	@ (8003df8 <_ZN11Screen1ViewC1Ev+0x28>)
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
	currScreen = 1;
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <_ZN11Screen1ViewC1Ev+0x2c>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
    DF_SendCommand(0x0F, 0x02, 0x02);
 8003de8:	2202      	movs	r2, #2
 8003dea:	4611      	mov	r1, r2
 8003dec:	200f      	movs	r0, #15
 8003dee:	f7fc fff5 	bl	8000ddc <DF_SendCommand>
}
 8003df2:	4620      	mov	r0, r4
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	bf00      	nop
 8003df8:	080159e0 	.word	0x080159e0
 8003dfc:	2000000c 	.word	0x2000000c

08003e00 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003e00:	f7ff b9b6 	b.w	8003170 <_ZN15Screen1ViewBase11setupScreenEv>

08003e04 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 8003e04:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
 8003e08:	3301      	adds	r3, #1
{
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	4604      	mov	r4, r0
	tickCounter += 1;
 8003e0e:	f8c0 31a0 	str.w	r3, [r0, #416]	@ 0x1a0
	//hiển thị điểm cao nhất đạt được
	Unicode::snprintf(highestScoreBuffer, HIGHESTSCORE_SIZE, "%d", presenter->getHighestScore());
 8003e12:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003e14:	f7ff ffc2 	bl	8003d9c <_ZNK16Screen1Presenter15getHighestScoreEv>
 8003e18:	4a06      	ldr	r2, [pc, #24]	@ (8003e34 <_ZN11Screen1View15handleTickEventEv+0x30>)
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	210a      	movs	r1, #10
 8003e1e:	f504 70be 	add.w	r0, r4, #380	@ 0x17c
 8003e22:	f00c f92f 	bl	8010084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	highestScore.invalidate();
 8003e26:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
}
 8003e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	highestScore.invalidate();
 8003e2e:	f00a b9a1 	b.w	800e174 <_ZNK8touchgfx8Drawable10invalidateEv>
 8003e32:	bf00      	nop
 8003e34:	08014db9 	.word	0x08014db9

08003e38 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8003e38:	4770      	bx	lr

08003e3a <_ZThn4_N16Screen2PresenterD1Ev>:
 8003e3a:	3804      	subs	r0, #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003e3e:	4770      	bx	lr

08003e40 <_ZN16Screen2PresenterD0Ev>:
 8003e40:	b510      	push	{r4, lr}
 8003e42:	2110      	movs	r1, #16
 8003e44:	4604      	mov	r4, r0
 8003e46:	f00f f855 	bl	8012ef4 <_ZdlPvj>
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	bd10      	pop	{r4, pc}

08003e4e <_ZThn4_N16Screen2PresenterD0Ev>:
 8003e4e:	f1a0 0004 	sub.w	r0, r0, #4
 8003e52:	e7f5      	b.n	8003e40 <_ZN16Screen2PresenterD0Ev>

08003e54 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003e54:	2200      	movs	r2, #0
 8003e56:	6082      	str	r2, [r0, #8]
    : view(v)
 8003e58:	4a02      	ldr	r2, [pc, #8]	@ (8003e64 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003e5a:	6002      	str	r2, [r0, #0]
 8003e5c:	3218      	adds	r2, #24
 8003e5e:	6042      	str	r2, [r0, #4]
 8003e60:	60c1      	str	r1, [r0, #12]
}
 8003e62:	4770      	bx	lr
 8003e64:	08015a14 	.word	0x08015a14

08003e68 <_ZN16Screen2Presenter15setHighestScoreEi>:

int Screen2Presenter::getHighestScore() const{
	return model->getHighestScore();
}
void Screen2Presenter::setHighestScore(int score){
	model->setHighestScore(score);
 8003e68:	6880      	ldr	r0, [r0, #8]
 8003e6a:	f7ff bf7a 	b.w	8003d62 <_ZN5Model15setHighestScoreEi>

08003e6e <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
//    presenter->UpdateImageX(localImageX);
}
 8003e6e:	4770      	bx	lr

08003e70 <_ZN11Screen2View11setupScreenEv>:
{
 8003e70:	b510      	push	{r4, lr}
 8003e72:	4604      	mov	r4, r0
	engine.init();
 8003e74:	f500 700a 	add.w	r0, r0, #552	@ 0x228
 8003e78:	f7fc fc51 	bl	800071e <_ZN12TetrisEngine4initEv>
	tickCount = 0;
 8003e7c:	f504 5240 	add.w	r2, r4, #12288	@ 0x3000
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	track1.invalidate();
 8003e86:	f104 0098 	add.w	r0, r4, #152	@ 0x98
        visible = vis;
 8003e8a:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
}
 8003e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	track1.invalidate();
 8003e92:	f00a b96f 	b.w	800e174 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08003e98 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003e98:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed4 <_ZN11Screen2ViewD1Ev+0x3c>)
 8003e9a:	b570      	push	{r4, r5, r6, lr}
 8003e9c:	4605      	mov	r5, r0
 8003e9e:	6003      	str	r3, [r0, #0]
 8003ea0:	f243 149c 	movw	r4, #12700	@ 0x319c
 8003ea4:	f642 665c 	movw	r6, #11868	@ 0x2e5c
 8003ea8:	42b4      	cmp	r4, r6
 8003eaa:	d10d      	bne.n	8003ec8 <_ZN11Screen2ViewD1Ev+0x30>
 8003eac:	f240 56bc 	movw	r6, #1468	@ 0x5bc
 8003eb0:	592b      	ldr	r3, [r5, r4]
 8003eb2:	1928      	adds	r0, r5, r4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3c34      	subs	r4, #52	@ 0x34
 8003eb8:	4798      	blx	r3
 8003eba:	42b4      	cmp	r4, r6
 8003ebc:	d1f8      	bne.n	8003eb0 <_ZN11Screen2ViewD1Ev+0x18>
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f7ff fb47 	bl	8003552 <_ZN15Screen2ViewBaseD1Ev>
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	592b      	ldr	r3, [r5, r4]
 8003eca:	1928      	adds	r0, r5, r4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4798      	blx	r3
 8003ed0:	3c34      	subs	r4, #52	@ 0x34
 8003ed2:	e7e9      	b.n	8003ea8 <_ZN11Screen2ViewD1Ev+0x10>
 8003ed4:	08015a3c 	.word	0x08015a3c

08003ed8 <_ZN11Screen2ViewD0Ev>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	4604      	mov	r4, r0
 8003edc:	f7ff ffdc 	bl	8003e98 <_ZN11Screen2ViewD1Ev>
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f243 11d8 	movw	r1, #12760	@ 0x31d8
 8003ee6:	f00f f805 	bl	8012ef4 <_ZdlPvj>
 8003eea:	4620      	mov	r0, r4
 8003eec:	bd10      	pop	{r4, pc}
	...

08003ef0 <_ZN8touchgfx3BoxC1Ev>:
        : Widget(), alpha(255), color(0)
 8003ef0:	4a09      	ldr	r2, [pc, #36]	@ (8003f18 <_ZN8touchgfx3BoxC1Ev+0x28>)
 8003ef2:	6002      	str	r2, [r0, #0]
          touchable(false),
 8003ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ef8:	2200      	movs	r2, #0
 8003efa:	8481      	strh	r1, [r0, #36]	@ 0x24
 8003efc:	21ff      	movs	r1, #255	@ 0xff
 8003efe:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003f02:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003f06:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003f0a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003f0e:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : color(col)
 8003f12:	6282      	str	r2, [r0, #40]	@ 0x28
    }
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	08015c18 	.word	0x08015c18

08003f1c <_ZN11Screen2View8drawGridEv>:
        //vẽ lại lưới cho pre block
        drawPreview();
    }
}

void Screen2View::drawGrid(){
 8003f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f20:	b089      	sub	sp, #36	@ 0x24
    void rotate();
    void drop();

	void getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY);
    const Grid& getGrid() const { return grid; }
    const BlockMatrix& getCurrentBlock() const { return currBlock; }
 8003f22:	f500 63a9 	add.w	r3, r0, #1352	@ 0x548
    int getBlockSize() const { return blockSize; }
    int getCurrX() const { return currX; }
 8003f26:	f8d0 8588 	ldr.w	r8, [r0, #1416]	@ 0x588
    int getCurrY() const { return currY; }
 8003f2a:	f8d0 758c 	ldr.w	r7, [r0, #1420]	@ 0x58c
    const BlockMatrix& getCurrentBlock() const { return currBlock; }
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	4605      	mov	r5, r0
    const auto& block = engine.getCurrentBlock();
    int currX = engine.getCurrX();
    int currY = engine.getCurrY();

    //Vẽ lưới chính
    for (int y = 0; y < GRID_HEIGHT; ++y) {
 8003f32:	f04f 0a00 	mov.w	sl, #0
 8003f36:	f44f 7b02 	mov.w	fp, #520	@ 0x208
        for (int x = 0; x < GRID_WIDTH; ++x) {
//            colBoxes[y][x].setColor(grid[y][x] ? Color::getColorFromRGB(255, 0, 255)
//                                               : Color::getColorFromRGB(0, 0, 0));
        	uint16_t gridColor = engine.getGridColor(x, y);
 8003f3a:	f500 760a 	add.w	r6, r0, #552	@ 0x228
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003f3e:	fb0b 540a 	mla	r4, fp, sl, r5
 8003f42:	f04f 0900 	mov.w	r9, #0
        	uint16_t gridColor = engine.getGridColor(x, y);
 8003f46:	4652      	mov	r2, sl
 8003f48:	4649      	mov	r1, r9
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	f7fc fdae 	bl	8000aac <_ZNK12TetrisEngine12getGridColorEii>
			uint8_t r, g, b;
			convertRGB565ToRGB888(gridColor, r, g, b);
			colBoxes[y][x].setColor(gridColor ? Color::getColorFromRGB(r, g, b)
 8003f50:	4603      	mov	r3, r0
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d04c      	beq.n	8003ff0 <_ZN11Screen2View8drawGridEv+0xd4>
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003f56:	ea4f 2c03 	mov.w	ip, r3, lsl #8
 8003f5a:	0140      	lsls	r0, r0, #5
 8003f5c:	f400 407c 	and.w	r0, r0, #64512	@ 0xfc00
 8003f60:	f40c 0c78 	and.w	ip, ip, #16252928	@ 0xf80000
    b = (rgb565 & 0x1F) << 3;         // 5-bit blue => 8-bit
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	ea40 000c 	orr.w	r0, r0, ip
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4318      	orrs	r0, r3
 8003f6e:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295
 8003f76:	f884 3616 	strb.w	r3, [r4, #1558]	@ 0x616
											 : Color::getColorFromRGB(0, 0, 0));
			colBoxes[y][x].setAlpha(255);
            colBoxes[y][x].invalidate();
 8003f7a:	f8d4 35f0 	ldr.w	r3, [r4, #1520]	@ 0x5f0
        color = newColor;
 8003f7e:	f8c4 0618 	str.w	r0, [r4, #1560]	@ 0x618
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f504 60be 	add.w	r0, r4, #1520	@ 0x5f0
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003f88:	f109 0901 	add.w	r9, r9, #1
            colBoxes[y][x].invalidate();
 8003f8c:	4798      	blx	r3
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003f8e:	f1b9 0f0a 	cmp.w	r9, #10
 8003f92:	f104 0434 	add.w	r4, r4, #52	@ 0x34
 8003f96:	d1d6      	bne.n	8003f46 <_ZN11Screen2View8drawGridEv+0x2a>
    for (int y = 0; y < GRID_HEIGHT; ++y) {
 8003f98:	f10a 0a01 	add.w	sl, sl, #1
 8003f9c:	f1ba 0f14 	cmp.w	sl, #20
 8003fa0:	d1cd      	bne.n	8003f3e <_ZN11Screen2View8drawGridEv+0x22>
        }
    }

    // Vẽ block đang rơi
    uint16_t blockColor = engine.getCurrentBlockColor();
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7fc fd7a 	bl	8000a9c <_ZNK12TetrisEngine20getCurrentBlockColorEv>
	uint8_t r, g, b;
	convertRGB565ToRGB888(blockColor, r, g, b);

	//lấy bound của block (hình chữ nhật nhỏ nhất mà chứa được toàn bộ block)
    int minX, maxX, minY, maxY;
    engine.getBlockBounds(block, minX, maxX, minY, maxY);
 8003fa8:	ab07      	add	r3, sp, #28
    r = ((rgb565 >> 11) & 0x1F) << 3; // 5-bit red => 8-bit
 8003faa:	ea4f 2b10 	mov.w	fp, r0, lsr #8
    g = ((rgb565 >> 5) & 0x3F) << 2;  // 6-bit green => 8-bit
 8003fae:	08c4      	lsrs	r4, r0, #3
    engine.getBlockBounds(block, minX, maxX, minY, maxY);
 8003fb0:	9301      	str	r3, [sp, #4]
    b = (rgb565 & 0x1F) << 3;         // 5-bit blue => 8-bit
 8003fb2:	00c0      	lsls	r0, r0, #3
    engine.getBlockBounds(block, minX, maxX, minY, maxY);
 8003fb4:	ab06      	add	r3, sp, #24
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	9903      	ldr	r1, [sp, #12]
 8003fba:	ab05      	add	r3, sp, #20
    b = (rgb565 & 0x1F) << 3;         // 5-bit blue => 8-bit
 8003fbc:	fa5f fa80 	uxtb.w	sl, r0
    engine.getBlockBounds(block, minX, maxX, minY, maxY);
 8003fc0:	aa04      	add	r2, sp, #16
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7fc fc01 	bl	80007ca <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
 8003fc8:	9e06      	ldr	r6, [sp, #24]
    g = ((rgb565 >> 5) & 0x3F) << 2;  // 6-bit green => 8-bit
 8003fca:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8003fce:	eb05 1906 	add.w	r9, r5, r6, lsl #4
    r = ((rgb565 >> 11) & 0x1F) << 3; // 5-bit red => 8-bit
 8003fd2:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8003fd6:	0224      	lsls	r4, r4, #8
 8003fd8:	f509 69a9 	add.w	r9, r9, #1352	@ 0x548
 8003fdc:	443e      	add	r6, r7
 8003fde:	ea44 430b 	orr.w	r3, r4, fp, lsl #16
    for (int i = minY; i <= maxY; ++i)
 8003fe2:	9a07      	ldr	r2, [sp, #28]
 8003fe4:	1bf1      	subs	r1, r6, r7
 8003fe6:	428a      	cmp	r2, r1
 8003fe8:	da05      	bge.n	8003ff6 <_ZN11Screen2View8drawGridEv+0xda>
                    colBoxes[gy][gx].setColor(Color::getColorFromRGB(r, g, b));
                    colBoxes[gy][gx].setAlpha(255);
                    colBoxes[gy][gx].invalidate();
                }
            }
}
 8003fea:	b009      	add	sp, #36	@ 0x24
 8003fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003ff4:	e7bd      	b.n	8003f72 <_ZN11Screen2View8drawGridEv+0x56>
        for (int j = minX; j <= maxX; ++j)
 8003ff6:	f8dd b010 	ldr.w	fp, [sp, #16]
 8003ffa:	f44f 7402 	mov.w	r4, #520	@ 0x208
 8003ffe:	eb0b 0208 	add.w	r2, fp, r8
 8004002:	4374      	muls	r4, r6
 8004004:	2134      	movs	r1, #52	@ 0x34
 8004006:	fb01 4402 	mla	r4, r1, r2, r4
 800400a:	442c      	add	r4, r5
 800400c:	9a05      	ldr	r2, [sp, #20]
 800400e:	455a      	cmp	r2, fp
 8004010:	da03      	bge.n	800401a <_ZN11Screen2View8drawGridEv+0xfe>
    for (int i = minY; i <= maxY; ++i)
 8004012:	f109 0910 	add.w	r9, r9, #16
 8004016:	3601      	adds	r6, #1
 8004018:	e7e3      	b.n	8003fe2 <_ZN11Screen2View8drawGridEv+0xc6>
            if (block[i][j]) {
 800401a:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
 800401e:	b1b2      	cbz	r2, 800404e <_ZN11Screen2View8drawGridEv+0x132>
                if (gx >= 0 && gx < GRID_WIDTH && gy >= 0 && gy < GRID_HEIGHT) {
 8004020:	eb08 020b 	add.w	r2, r8, fp
 8004024:	2a09      	cmp	r2, #9
 8004026:	d812      	bhi.n	800404e <_ZN11Screen2View8drawGridEv+0x132>
 8004028:	2e13      	cmp	r6, #19
 800402a:	d810      	bhi.n	800404e <_ZN11Screen2View8drawGridEv+0x132>
 800402c:	ea43 020a 	orr.w	r2, r3, sl
 8004030:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 8004034:	f8c4 2618 	str.w	r2, [r4, #1560]	@ 0x618
        alpha = newAlpha;
 8004038:	22ff      	movs	r2, #255	@ 0xff
 800403a:	f884 2616 	strb.w	r2, [r4, #1558]	@ 0x616
                    colBoxes[gy][gx].invalidate();
 800403e:	f8d4 25f0 	ldr.w	r2, [r4, #1520]	@ 0x5f0
 8004042:	9303      	str	r3, [sp, #12]
 8004044:	6952      	ldr	r2, [r2, #20]
 8004046:	f504 60be 	add.w	r0, r4, #1520	@ 0x5f0
 800404a:	4790      	blx	r2
 800404c:	9b03      	ldr	r3, [sp, #12]
        for (int j = minX; j <= maxX; ++j)
 800404e:	f10b 0b01 	add.w	fp, fp, #1
 8004052:	3434      	adds	r4, #52	@ 0x34
 8004054:	e7da      	b.n	800400c <_ZN11Screen2View8drawGridEv+0xf0>

08004056 <_ZN11Screen2View11drawPreviewEv>:

void Screen2View::drawPreview() {
 8004056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Lấy khối tiếp theo
    TetrisEngine::BlockMatrix nextBlock;
    int nextBlockSize;
    uint16_t nextBlockColor;
    engine.getNextBlock(nextBlock, nextBlockSize, nextBlockColor);
 800405a:	f500 770a 	add.w	r7, r0, #552	@ 0x228
void Screen2View::drawPreview() {
 800405e:	b098      	sub	sp, #96	@ 0x60
 8004060:	4605      	mov	r5, r0
    engine.getNextBlock(nextBlock, nextBlockSize, nextBlockColor);
 8004062:	f10d 030a 	add.w	r3, sp, #10
 8004066:	aa03      	add	r2, sp, #12
 8004068:	a908      	add	r1, sp, #32
 800406a:	4638      	mov	r0, r7
 800406c:	f7fc fb04 	bl	8000678 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERiRt>
 8004070:	2600      	movs	r6, #0
 8004072:	f505 593a 	add.w	r9, r5, #11904	@ 0x2e80
 8004076:	f109 0910 	add.w	r9, r9, #16
 800407a:	46b2      	mov	sl, r6

    // Đặt lại previewBox trước về trạng thái trong suốt
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
 800407c:	eb09 0406 	add.w	r4, r9, r6
 8004080:	f04f 0800 	mov.w	r8, #0
			previewBoxes[i][j].setAlpha(0);
			previewBoxes[i][j].invalidate();
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	f884 a026 	strb.w	sl, [r4, #38]	@ 0x26
 800408a:	4620      	mov	r0, r4
 800408c:	695b      	ldr	r3, [r3, #20]
		for (int j = 0; j < 4; ++j) {
 800408e:	f108 0801 	add.w	r8, r8, #1
			previewBoxes[i][j].invalidate();
 8004092:	4798      	blx	r3
		for (int j = 0; j < 4; ++j) {
 8004094:	f1b8 0f04 	cmp.w	r8, #4
 8004098:	f104 0434 	add.w	r4, r4, #52	@ 0x34
 800409c:	d1f2      	bne.n	8004084 <_ZN11Screen2View11drawPreviewEv+0x2e>
	for (int i = 0; i < 4; ++i) {
 800409e:	36d0      	adds	r6, #208	@ 0xd0
 80040a0:	f5b6 7f50 	cmp.w	r6, #832	@ 0x340
 80040a4:	d1ea      	bne.n	800407c <_ZN11Screen2View11drawPreviewEv+0x26>
		}
	}

	// Vẽ preview block
	uint8_t r, g, b;
	convertRGB565ToRGB888(nextBlockColor, r, g, b);
 80040a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    r = ((rgb565 >> 11) & 0x1F) << 3; // 5-bit red => 8-bit
 80040aa:	ea4f 28d3 	mov.w	r8, r3, lsr #11
    g = ((rgb565 >> 5) & 0x3F) << 2;  // 6-bit green => 8-bit
 80040ae:	08dc      	lsrs	r4, r3, #3
    b = (rgb565 & 0x1F) << 3;         // 5-bit blue => 8-bit
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	b2de      	uxtb	r6, r3

	int minX, maxX, minY, maxY;
	engine.getBlockBounds(nextBlock, minX, maxX, minY, maxY);
 80040b4:	ab07      	add	r3, sp, #28
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	ab06      	add	r3, sp, #24
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	4638      	mov	r0, r7
 80040be:	ab05      	add	r3, sp, #20
 80040c0:	aa04      	add	r2, sp, #16
 80040c2:	a908      	add	r1, sp, #32
    g = ((rgb565 >> 5) & 0x3F) << 2;  // 6-bit green => 8-bit
 80040c4:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
	engine.getBlockBounds(nextBlock, minX, maxX, minY, maxY);
 80040c8:	f7fc fb7f 	bl	80007ca <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
    r = ((rgb565 >> 11) & 0x1F) << 3; // 5-bit red => 8-bit
 80040cc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80040d0:	0224      	lsls	r4, r4, #8

	for (int i = 0; i < 4; i++) {
 80040d2:	2700      	movs	r7, #0
 80040d4:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
		for (int j = 0; j < 4; j++) {
 80040d8:	ab08      	add	r3, sp, #32
 80040da:	eb03 1907 	add.w	r9, r3, r7, lsl #4
 80040de:	f04f 0800 	mov.w	r8, #0
			if (nextBlock[i][j]) {
 80040e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80040e6:	b323      	cbz	r3, 8004132 <_ZN11Screen2View11drawPreviewEv+0xdc>
				int px = j - minX;
 80040e8:	9a04      	ldr	r2, [sp, #16]
 80040ea:	eba8 0202 	sub.w	r2, r8, r2
				int py = i - minY;
				if (px < 4 && py < 4) {
 80040ee:	2a03      	cmp	r2, #3
 80040f0:	dc1f      	bgt.n	8004132 <_ZN11Screen2View11drawPreviewEv+0xdc>
				int py = i - minY;
 80040f2:	9b06      	ldr	r3, [sp, #24]
 80040f4:	1afb      	subs	r3, r7, r3
				if (px < 4 && py < 4) {
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	dc1b      	bgt.n	8004132 <_ZN11Screen2View11drawPreviewEv+0xdc>
        color = newColor;
 80040fa:	2134      	movs	r1, #52	@ 0x34
 80040fc:	434a      	muls	r2, r1
 80040fe:	21d0      	movs	r1, #208	@ 0xd0
 8004100:	434b      	muls	r3, r1
 8004102:	18d1      	adds	r1, r2, r3
 8004104:	4429      	add	r1, r5
 8004106:	f642 6cb8 	movw	ip, #11960	@ 0x2eb8
 800410a:	ea44 0006 	orr.w	r0, r4, r6
 800410e:	f040 407f 	orr.w	r0, r0, #4278190080	@ 0xff000000
 8004112:	f841 000c 	str.w	r0, [r1, ip]
        alpha = newAlpha;
 8004116:	f642 60b6 	movw	r0, #11958	@ 0x2eb6
 800411a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800411e:	f801 c000 	strb.w	ip, [r1, r0]
					previewBoxes[py][px].setColor(Color::getColorFromRGB(r, g, b));
					previewBoxes[py][px].setAlpha(255);
					previewBoxes[py][px].invalidate();
 8004122:	f642 6090 	movw	r0, #11920	@ 0x2e90
 8004126:	4403      	add	r3, r0
 8004128:	4413      	add	r3, r2
 800412a:	580a      	ldr	r2, [r1, r0]
 800412c:	18e8      	adds	r0, r5, r3
 800412e:	6952      	ldr	r2, [r2, #20]
 8004130:	4790      	blx	r2
		for (int j = 0; j < 4; j++) {
 8004132:	f108 0801 	add.w	r8, r8, #1
 8004136:	f1b8 0f04 	cmp.w	r8, #4
 800413a:	d1d2      	bne.n	80040e2 <_ZN11Screen2View11drawPreviewEv+0x8c>
	for (int i = 0; i < 4; i++) {
 800413c:	3701      	adds	r7, #1
 800413e:	2f04      	cmp	r7, #4
 8004140:	d1ca      	bne.n	80040d8 <_ZN11Screen2View11drawPreviewEv+0x82>
				}
			}
		}
	}
}
 8004142:	b018      	add	sp, #96	@ 0x60
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004148 <_ZN11Screen2View15handleTickEventEv>:
{
 8004148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (++tickCount % 20 == 0) {
 800414c:	f500 5640 	add.w	r6, r0, #12288	@ 0x3000
 8004150:	2314      	movs	r3, #20
 8004152:	f8d6 51d0 	ldr.w	r5, [r6, #464]	@ 0x1d0
 8004156:	3501      	adds	r5, #1
 8004158:	f8c6 51d0 	str.w	r5, [r6, #464]	@ 0x1d0
 800415c:	fb95 f2f3 	sdiv	r2, r5, r3
 8004160:	fb03 5512 	mls	r5, r3, r2, r5
{
 8004164:	4604      	mov	r4, r0
    if (++tickCount % 20 == 0) {
 8004166:	2d00      	cmp	r5, #0
 8004168:	f040 80b3 	bne.w	80042d2 <_ZN11Screen2View15handleTickEventEv+0x18a>
		if(engine.isGameOver()) {	//kiểm tra gameover
 800416c:	f890 8594 	ldrb.w	r8, [r0, #1428]	@ 0x594
 8004170:	f1b8 0f00 	cmp.w	r8, #0
 8004174:	d154      	bne.n	8004220 <_ZN11Screen2View15handleTickEventEv+0xd8>
    	if(osMessageQueueGetCount(movingQueueHandle) > 0){
 8004176:	4f58      	ldr	r7, [pc, #352]	@ (80042d8 <_ZN11Screen2View15handleTickEventEv+0x190>)
 8004178:	6838      	ldr	r0, [r7, #0]
 800417a:	f003 f9c3 	bl	8007504 <osMessageQueueGetCount>
 800417e:	f504 750a 	add.w	r5, r4, #552	@ 0x228
 8004182:	b1c0      	cbz	r0, 80041b6 <_ZN11Screen2View15handleTickEventEv+0x6e>
    		osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 8004184:	230a      	movs	r3, #10
 8004186:	6838      	ldr	r0, [r7, #0]
 8004188:	4642      	mov	r2, r8
 800418a:	f10d 0107 	add.w	r1, sp, #7
 800418e:	f003 f989 	bl	80074a4 <osMessageQueueGet>
    		if(res == 'L') engine.moveLeft();
 8004192:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004196:	2b52      	cmp	r3, #82	@ 0x52
 8004198:	f000 8093 	beq.w	80042c2 <_ZN11Screen2View15handleTickEventEv+0x17a>
 800419c:	f200 8086 	bhi.w	80042ac <_ZN11Screen2View15handleTickEventEv+0x164>
 80041a0:	2b44      	cmp	r3, #68	@ 0x44
 80041a2:	f000 8092 	beq.w	80042ca <_ZN11Screen2View15handleTickEventEv+0x182>
 80041a6:	2b4c      	cmp	r3, #76	@ 0x4c
 80041a8:	f000 8087 	beq.w	80042ba <_ZN11Screen2View15handleTickEventEv+0x172>
    		osThreadNew(SingleBeepTask, NULL, NULL);
 80041ac:	2200      	movs	r2, #0
 80041ae:	484b      	ldr	r0, [pc, #300]	@ (80042dc <_ZN11Screen2View15handleTickEventEv+0x194>)
 80041b0:	4611      	mov	r1, r2
 80041b2:	f002 ff86 	bl	80070c2 <osThreadNew>
        engine.update();
 80041b6:	4628      	mov	r0, r5
 80041b8:	f7fc fbdf 	bl	800097a <_ZN12TetrisEngine6updateEv>
        Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", engine.getScore());
 80041bc:	f8d4 3598 	ldr.w	r3, [r4, #1432]	@ 0x598
 80041c0:	4a47      	ldr	r2, [pc, #284]	@ (80042e0 <_ZN11Screen2View15handleTickEventEv+0x198>)
 80041c2:	210a      	movs	r1, #10
 80041c4:	f504 7001 	add.w	r0, r4, #516	@ 0x204
 80041c8:	f00b ff5c 	bl	8010084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        score.invalidate();
 80041cc:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 80041d0:	f009 ffd0 	bl	800e174 <_ZNK8touchgfx8Drawable10invalidateEv>
        presenter->setHighestScore(engine.getScore());
 80041d4:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
 80041d8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80041da:	f7ff fe45 	bl	8003e68 <_ZN16Screen2Presenter15setHighestScoreEi>
        if(engine.getTakeScore()){	//nếu ghi được điểm -> tạo tiếng beep - beep
 80041de:	f894 359c 	ldrb.w	r3, [r4, #1436]	@ 0x59c
 80041e2:	b13b      	cbz	r3, 80041f4 <_ZN11Screen2View15handleTickEventEv+0xac>
        	osThreadNew(DoubleBeepTask, NULL, NULL);
 80041e4:	2200      	movs	r2, #0
 80041e6:	483f      	ldr	r0, [pc, #252]	@ (80042e4 <_ZN11Screen2View15handleTickEventEv+0x19c>)
 80041e8:	4611      	mov	r1, r2
 80041ea:	f002 ff6a 	bl	80070c2 <osThreadNew>
    int getScore() const { return score; } 
    void setTakeScore(bool param) { takeScore = param; }
 80041ee:	2300      	movs	r3, #0
 80041f0:	f884 359c 	strb.w	r3, [r4, #1436]	@ 0x59c
        if(engine.isGameOver() && musicGameOver == false){ //game over -> bật nhạc game over
 80041f4:	f894 3594 	ldrb.w	r3, [r4, #1428]	@ 0x594
 80041f8:	b14b      	cbz	r3, 800420e <_ZN11Screen2View15handleTickEventEv+0xc6>
 80041fa:	f896 21d4 	ldrb.w	r2, [r6, #468]	@ 0x1d4
 80041fe:	b932      	cbnz	r2, 800420e <_ZN11Screen2View15handleTickEventEv+0xc6>
        	musicGameOver = true;
 8004200:	2301      	movs	r3, #1
        	osThreadNew(GameOverTask, NULL, NULL);
 8004202:	4839      	ldr	r0, [pc, #228]	@ (80042e8 <_ZN11Screen2View15handleTickEventEv+0x1a0>)
        	musicGameOver = true;
 8004204:	f886 31d4 	strb.w	r3, [r6, #468]	@ 0x1d4
        	osThreadNew(GameOverTask, NULL, NULL);
 8004208:	4611      	mov	r1, r2
 800420a:	f002 ff5a 	bl	80070c2 <osThreadNew>
        drawGrid();
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff fe84 	bl	8003f1c <_ZN11Screen2View8drawGridEv>
        drawPreview();
 8004214:	4620      	mov	r0, r4
}
 8004216:	b003      	add	sp, #12
 8004218:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawPreview();
 800421c:	f7ff bf1b 	b.w	8004056 <_ZN11Screen2View11drawPreviewEv>
        visible = vis;
 8004220:	46a8      	mov	r8, r5
			for(int y = 0; y < GRID_HEIGHT; y++) {
 8004222:	f642 09a0 	movw	r9, #10400	@ 0x28a0
				for(int x = 0; x < GRID_WIDTH; x++) {
 8004226:	192e      	adds	r6, r5, r4
 8004228:	2700      	movs	r7, #0
					colBoxes[y][x].invalidate();
 800422a:	f8d6 35f0 	ldr.w	r3, [r6, #1520]	@ 0x5f0
 800422e:	f886 8615 	strb.w	r8, [r6, #1557]	@ 0x615
 8004232:	f506 60be 	add.w	r0, r6, #1520	@ 0x5f0
 8004236:	695b      	ldr	r3, [r3, #20]
				for(int x = 0; x < GRID_WIDTH; x++) {
 8004238:	3701      	adds	r7, #1
					colBoxes[y][x].invalidate();
 800423a:	4798      	blx	r3
				for(int x = 0; x < GRID_WIDTH; x++) {
 800423c:	2f0a      	cmp	r7, #10
 800423e:	f106 0634 	add.w	r6, r6, #52	@ 0x34
 8004242:	d1f2      	bne.n	800422a <_ZN11Screen2View15handleTickEventEv+0xe2>
			for(int y = 0; y < GRID_HEIGHT; y++) {
 8004244:	f505 7502 	add.w	r5, r5, #520	@ 0x208
 8004248:	454d      	cmp	r5, r9
 800424a:	d1ec      	bne.n	8004226 <_ZN11Screen2View15handleTickEventEv+0xde>
 800424c:	2600      	movs	r6, #0
 800424e:	f504 593a 	add.w	r9, r4, #11904	@ 0x2e80
 8004252:	f109 0910 	add.w	r9, r9, #16
 8004256:	4637      	mov	r7, r6
				for (int x = 0; x < 4; x++) {
 8004258:	eb09 0506 	add.w	r5, r9, r6
 800425c:	f04f 0800 	mov.w	r8, #0
					previewBoxes[y][x].invalidate();
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	f885 7025 	strb.w	r7, [r5, #37]	@ 0x25
 8004266:	4628      	mov	r0, r5
 8004268:	695b      	ldr	r3, [r3, #20]
				for (int x = 0; x < 4; x++) {
 800426a:	f108 0801 	add.w	r8, r8, #1
					previewBoxes[y][x].invalidate();
 800426e:	4798      	blx	r3
				for (int x = 0; x < 4; x++) {
 8004270:	f1b8 0f04 	cmp.w	r8, #4
 8004274:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8004278:	d1f2      	bne.n	8004260 <_ZN11Screen2View15handleTickEventEv+0x118>
			for (int y = 0; y < 4; y++) {
 800427a:	36d0      	adds	r6, #208	@ 0xd0
 800427c:	f5b6 7f50 	cmp.w	r6, #832	@ 0x340
 8004280:	d1ea      	bne.n	8004258 <_ZN11Screen2View15handleTickEventEv+0x110>
 8004282:	2301      	movs	r3, #1
			track1.invalidate();
 8004284:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 8004288:	f884 7199 	strb.w	r7, [r4, #409]	@ 0x199
 800428c:	f884 71e1 	strb.w	r7, [r4, #481]	@ 0x1e1
 8004290:	f884 714d 	strb.w	r7, [r4, #333]	@ 0x14d
 8004294:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
 8004298:	f009 ff6c 	bl	800e174 <_ZNK8touchgfx8Drawable10invalidateEv>
			presenter->setHighestScore(engine.getScore());	//cập nhật highest score
 800429c:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
 80042a0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
}
 80042a2:	b003      	add	sp, #12
 80042a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			presenter->setHighestScore(engine.getScore());	//cập nhật highest score
 80042a8:	f7ff bdde 	b.w	8003e68 <_ZN16Screen2Presenter15setHighestScoreEi>
 80042ac:	2b54      	cmp	r3, #84	@ 0x54
 80042ae:	f47f af7d 	bne.w	80041ac <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'T') engine.rotate();
 80042b2:	4628      	mov	r0, r5
 80042b4:	f7fc fbc5 	bl	8000a42 <_ZN12TetrisEngine6rotateEv>
 80042b8:	e778      	b.n	80041ac <_ZN11Screen2View15handleTickEventEv+0x64>
    		if(res == 'L') engine.moveLeft();
 80042ba:	4628      	mov	r0, r5
 80042bc:	f7fc fb7f 	bl	80009be <_ZN12TetrisEngine8moveLeftEv>
 80042c0:	e774      	b.n	80041ac <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'R') engine.moveRight();
 80042c2:	4628      	mov	r0, r5
 80042c4:	f7fc fb8e 	bl	80009e4 <_ZN12TetrisEngine9moveRightEv>
 80042c8:	e770      	b.n	80041ac <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'D') engine.drop();
 80042ca:	4628      	mov	r0, r5
 80042cc:	f7fc fb9d 	bl	8000a0a <_ZN12TetrisEngine4dropEv>
 80042d0:	e76c      	b.n	80041ac <_ZN11Screen2View15handleTickEventEv+0x64>
}
 80042d2:	b003      	add	sp, #12
 80042d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042d8:	20000118 	.word	0x20000118
 80042dc:	08000d61 	.word	0x08000d61
 80042e0:	08014db9 	.word	0x08014db9
 80042e4:	08000d95 	.word	0x08000d95
 80042e8:	08000e35 	.word	0x08000e35

080042ec <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80042ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f0:	4604      	mov	r4, r0
 80042f2:	b089      	sub	sp, #36	@ 0x24
 80042f4:	f7ff f9fe 	bl	80036f4 <_ZN15Screen2ViewBaseC1Ev>
 80042f8:	f504 553a 	add.w	r5, r4, #11904	@ 0x2e80
 80042fc:	4b55      	ldr	r3, [pc, #340]	@ (8004454 <_ZN11Screen2ViewC1Ev+0x168>)
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8004304:	3510      	adds	r5, #16
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8004306:	f8df 8158 	ldr.w	r8, [pc, #344]	@ 8004460 <_ZN11Screen2ViewC1Ev+0x174>
 800430a:	f7fc fa2a 	bl	8000762 <_ZN12TetrisEngineC1Ev>
 800430e:	f504 67be 	add.w	r7, r4, #1520	@ 0x5f0
 8004312:	9503      	str	r5, [sp, #12]
 8004314:	f04f 0900 	mov.w	r9, #0
 8004318:	463e      	mov	r6, r7
 800431a:	4630      	mov	r0, r6
 800431c:	f7ff fde8 	bl	8003ef0 <_ZN8touchgfx3BoxC1Ev>
 8004320:	3634      	adds	r6, #52	@ 0x34
 8004322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004326:	f846 8c34 	str.w	r8, [r6, #-52]
 800432a:	f846 9c08 	str.w	r9, [r6, #-8]
 800432e:	f826 9c04 	strh.w	r9, [r6, #-4]
 8004332:	429e      	cmp	r6, r3
 8004334:	d1f1      	bne.n	800431a <_ZN11Screen2ViewC1Ev+0x2e>
 8004336:	42ae      	cmp	r6, r5
 8004338:	4637      	mov	r7, r6
 800433a:	d1ed      	bne.n	8004318 <_ZN11Screen2ViewC1Ev+0x2c>
 800433c:	f504 5647 	add.w	r6, r4, #12736	@ 0x31c0
 8004340:	3610      	adds	r6, #16
 8004342:	2700      	movs	r7, #0
 8004344:	f105 09d0 	add.w	r9, r5, #208	@ 0xd0
 8004348:	4628      	mov	r0, r5
 800434a:	f7ff fdd1 	bl	8003ef0 <_ZN8touchgfx3BoxC1Ev>
 800434e:	3534      	adds	r5, #52	@ 0x34
 8004350:	f845 8c34 	str.w	r8, [r5, #-52]
 8004354:	f845 7c08 	str.w	r7, [r5, #-8]
 8004358:	f825 7c04 	strh.w	r7, [r5, #-4]
 800435c:	454d      	cmp	r5, r9
 800435e:	d1f3      	bne.n	8004348 <_ZN11Screen2ViewC1Ev+0x5c>
 8004360:	42b5      	cmp	r5, r6
 8004362:	d1ef      	bne.n	8004344 <_ZN11Screen2ViewC1Ev+0x58>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 8004364:	2700      	movs	r7, #0
 8004366:	f44f 7a02 	mov.w	sl, #520	@ 0x208
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 800436a:	f04f 4b7f 	mov.w	fp, #4278190080	@ 0xff000000
            colBoxes[y][x].setPosition(px, py, 16, 16);
 800436e:	013a      	lsls	r2, r7, #4
 8004370:	b212      	sxth	r2, r2
 8004372:	fb0a 4607 	mla	r6, sl, r7, r4
 8004376:	2500      	movs	r5, #0
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8004378:	f04f 0901 	mov.w	r9, #1
 800437c:	2310      	movs	r3, #16
 800437e:	f506 60be 	add.w	r0, r6, #1520	@ 0x5f0
        borderColor = colorBorder;
 8004382:	f8c6 b61c 	str.w	fp, [r6, #1564]	@ 0x61c
        borderSize = size;
 8004386:	f8a6 9620 	strh.w	r9, [r6, #1568]	@ 0x620
 800438a:	b229      	sxth	r1, r5
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	9205      	str	r2, [sp, #20]
 8004390:	9004      	str	r0, [sp, #16]
 8004392:	f7fe fc2f 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004396:	9804      	ldr	r0, [sp, #16]
 8004398:	f886 9615 	strb.w	r9, [r6, #1557]	@ 0x615
 800439c:	f104 0804 	add.w	r8, r4, #4
        for (int x = 0; x < GRID_WIDTH; x++) {
 80043a0:	3510      	adds	r5, #16
 80043a2:	4601      	mov	r1, r0
 80043a4:	b2ad      	uxth	r5, r5
 80043a6:	4640      	mov	r0, r8
 80043a8:	f005 f9aa 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80043ac:	2da0      	cmp	r5, #160	@ 0xa0
 80043ae:	9a05      	ldr	r2, [sp, #20]
 80043b0:	f106 0634 	add.w	r6, r6, #52	@ 0x34
 80043b4:	d1e2      	bne.n	800437c <_ZN11Screen2ViewC1Ev+0x90>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 80043b6:	3701      	adds	r7, #1
 80043b8:	2f14      	cmp	r7, #20
 80043ba:	d1d8      	bne.n	800436e <_ZN11Screen2ViewC1Ev+0x82>
 80043bc:	2700      	movs	r7, #0
 80043be:	f04f 095a 	mov.w	r9, #90	@ 0x5a
 80043c2:	46ba      	mov	sl, r7
 80043c4:	f04f 0b01 	mov.w	fp, #1
		for (int x = 0; x < 4; x++) {
 80043c8:	9b03      	ldr	r3, [sp, #12]
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 80043ca:	fa0f f289 	sxth.w	r2, r9
 80043ce:	19dd      	adds	r5, r3, r7
 80043d0:	26c8      	movs	r6, #200	@ 0xc8
 80043d2:	2308      	movs	r3, #8
 80043d4:	f885 a026 	strb.w	sl, [r5, #38]	@ 0x26
 80043d8:	f8a5 b030 	strh.w	fp, [r5, #48]	@ 0x30
 80043dc:	b231      	sxth	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	9300      	str	r3, [sp, #0]
		for (int x = 0; x < 4; x++) {
 80043e2:	3608      	adds	r6, #8
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 80043e4:	9204      	str	r2, [sp, #16]
		for (int x = 0; x < 4; x++) {
 80043e6:	b2b6      	uxth	r6, r6
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 80043e8:	f7fe fc04 	bl	8002bf4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80043ec:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80043f0:	4629      	mov	r1, r5
 80043f2:	4640      	mov	r0, r8
 80043f4:	f005 f984 	bl	8009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>
		for (int x = 0; x < 4; x++) {
 80043f8:	2ee8      	cmp	r6, #232	@ 0xe8
 80043fa:	9a04      	ldr	r2, [sp, #16]
 80043fc:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8004400:	d1e7      	bne.n	80043d2 <_ZN11Screen2ViewC1Ev+0xe6>
	for (int y = 0; y < 4; y++) {
 8004402:	37d0      	adds	r7, #208	@ 0xd0
 8004404:	f109 0908 	add.w	r9, r9, #8
 8004408:	f5b7 7f50 	cmp.w	r7, #832	@ 0x340
 800440c:	fa1f f989 	uxth.w	r9, r9
 8004410:	d1da      	bne.n	80043c8 <_ZN11Screen2ViewC1Ev+0xdc>
	currScreen = 2;
 8004412:	4b11      	ldr	r3, [pc, #68]	@ (8004458 <_ZN11Screen2ViewC1Ev+0x16c>)
 8004414:	f884 a0bd 	strb.w	sl, [r4, #189]	@ 0xbd
 8004418:	2102      	movs	r1, #2
 800441a:	7019      	strb	r1, [r3, #0]
	musicGameOver = false;
 800441c:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
    DF_SendCommand(0x0F, 0x02, 0x01);
 8004420:	2201      	movs	r2, #1
	musicGameOver = false;
 8004422:	f883 a1d4 	strb.w	sl, [r3, #468]	@ 0x1d4
    DF_SendCommand(0x0F, 0x02, 0x01);
 8004426:	200f      	movs	r0, #15
 8004428:	f7fc fcd8 	bl	8000ddc <DF_SendCommand>
    while(osMessageQueueGetCount(movingQueueHandle) > 0){
 800442c:	4d0b      	ldr	r5, [pc, #44]	@ (800445c <_ZN11Screen2ViewC1Ev+0x170>)
    	char res = 'a';
 800442e:	2661      	movs	r6, #97	@ 0x61
    while(osMessageQueueGetCount(movingQueueHandle) > 0){
 8004430:	6828      	ldr	r0, [r5, #0]
 8004432:	f003 f867 	bl	8007504 <osMessageQueueGetCount>
 8004436:	b918      	cbnz	r0, 8004440 <_ZN11Screen2ViewC1Ev+0x154>
}
 8004438:	4620      	mov	r0, r4
 800443a:	b009      	add	sp, #36	@ 0x24
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 8004440:	6828      	ldr	r0, [r5, #0]
    	char res = 'a';
 8004442:	f88d 601f 	strb.w	r6, [sp, #31]
    	osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 8004446:	230a      	movs	r3, #10
 8004448:	2200      	movs	r2, #0
 800444a:	f10d 011f 	add.w	r1, sp, #31
 800444e:	f003 f829 	bl	80074a4 <osMessageQueueGet>
 8004452:	e7ed      	b.n	8004430 <_ZN11Screen2ViewC1Ev+0x144>
 8004454:	08015a3c 	.word	0x08015a3c
 8004458:	2000000c 	.word	0x2000000c
 800445c:	20000118 	.word	0x20000118
 8004460:	08015cf4 	.word	0x08015cf4

08004464 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8004464:	20f0      	movs	r0, #240	@ 0xf0
 8004466:	4770      	bx	lr

08004468 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8004468:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800446c:	4770      	bx	lr

0800446e <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 800446e:	2029      	movs	r0, #41	@ 0x29
 8004470:	f7fc bc26 	b.w	8000cc0 <LCD_IO_WriteReg>

08004474 <ili9341_DisplayOff>:
 8004474:	2028      	movs	r0, #40	@ 0x28
 8004476:	f7fc bc23 	b.w	8000cc0 <LCD_IO_WriteReg>

0800447a <ili9341_Init>:
{
 800447a:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800447c:	f7fc fbf4 	bl	8000c68 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8004480:	20ca      	movs	r0, #202	@ 0xca
 8004482:	f7fc fc1d 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004486:	20c3      	movs	r0, #195	@ 0xc3
 8004488:	f7fc fbfe 	bl	8000c88 <LCD_IO_WriteData>
 800448c:	2008      	movs	r0, #8
 800448e:	f7fc fbfb 	bl	8000c88 <LCD_IO_WriteData>
 8004492:	2050      	movs	r0, #80	@ 0x50
 8004494:	f7fc fbf8 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004498:	20cf      	movs	r0, #207	@ 0xcf
 800449a:	f7fc fc11 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800449e:	2000      	movs	r0, #0
 80044a0:	f7fc fbf2 	bl	8000c88 <LCD_IO_WriteData>
 80044a4:	20c1      	movs	r0, #193	@ 0xc1
 80044a6:	f7fc fbef 	bl	8000c88 <LCD_IO_WriteData>
 80044aa:	2030      	movs	r0, #48	@ 0x30
 80044ac:	f7fc fbec 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044b0:	20ed      	movs	r0, #237	@ 0xed
 80044b2:	f7fc fc05 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044b6:	2064      	movs	r0, #100	@ 0x64
 80044b8:	f7fc fbe6 	bl	8000c88 <LCD_IO_WriteData>
 80044bc:	2003      	movs	r0, #3
 80044be:	f7fc fbe3 	bl	8000c88 <LCD_IO_WriteData>
 80044c2:	2012      	movs	r0, #18
 80044c4:	f7fc fbe0 	bl	8000c88 <LCD_IO_WriteData>
 80044c8:	2081      	movs	r0, #129	@ 0x81
 80044ca:	f7fc fbdd 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044ce:	20e8      	movs	r0, #232	@ 0xe8
 80044d0:	f7fc fbf6 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044d4:	2085      	movs	r0, #133	@ 0x85
 80044d6:	f7fc fbd7 	bl	8000c88 <LCD_IO_WriteData>
 80044da:	2000      	movs	r0, #0
 80044dc:	f7fc fbd4 	bl	8000c88 <LCD_IO_WriteData>
 80044e0:	2078      	movs	r0, #120	@ 0x78
 80044e2:	f7fc fbd1 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044e6:	20cb      	movs	r0, #203	@ 0xcb
 80044e8:	f7fc fbea 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044ec:	2039      	movs	r0, #57	@ 0x39
 80044ee:	f7fc fbcb 	bl	8000c88 <LCD_IO_WriteData>
 80044f2:	202c      	movs	r0, #44	@ 0x2c
 80044f4:	f7fc fbc8 	bl	8000c88 <LCD_IO_WriteData>
 80044f8:	2000      	movs	r0, #0
 80044fa:	f7fc fbc5 	bl	8000c88 <LCD_IO_WriteData>
 80044fe:	2034      	movs	r0, #52	@ 0x34
 8004500:	f7fc fbc2 	bl	8000c88 <LCD_IO_WriteData>
 8004504:	2002      	movs	r0, #2
 8004506:	f7fc fbbf 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800450a:	20f7      	movs	r0, #247	@ 0xf7
 800450c:	f7fc fbd8 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004510:	2020      	movs	r0, #32
 8004512:	f7fc fbb9 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004516:	20ea      	movs	r0, #234	@ 0xea
 8004518:	f7fc fbd2 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800451c:	2000      	movs	r0, #0
 800451e:	f7fc fbb3 	bl	8000c88 <LCD_IO_WriteData>
 8004522:	2000      	movs	r0, #0
 8004524:	f7fc fbb0 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004528:	20b1      	movs	r0, #177	@ 0xb1
 800452a:	f7fc fbc9 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800452e:	2000      	movs	r0, #0
 8004530:	f7fc fbaa 	bl	8000c88 <LCD_IO_WriteData>
 8004534:	201b      	movs	r0, #27
 8004536:	f7fc fba7 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800453a:	20b6      	movs	r0, #182	@ 0xb6
 800453c:	f7fc fbc0 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004540:	200a      	movs	r0, #10
 8004542:	f7fc fba1 	bl	8000c88 <LCD_IO_WriteData>
 8004546:	20a2      	movs	r0, #162	@ 0xa2
 8004548:	f7fc fb9e 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800454c:	20c0      	movs	r0, #192	@ 0xc0
 800454e:	f7fc fbb7 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004552:	2010      	movs	r0, #16
 8004554:	f7fc fb98 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004558:	20c1      	movs	r0, #193	@ 0xc1
 800455a:	f7fc fbb1 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800455e:	2010      	movs	r0, #16
 8004560:	f7fc fb92 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004564:	20c5      	movs	r0, #197	@ 0xc5
 8004566:	f7fc fbab 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800456a:	2045      	movs	r0, #69	@ 0x45
 800456c:	f7fc fb8c 	bl	8000c88 <LCD_IO_WriteData>
 8004570:	2015      	movs	r0, #21
 8004572:	f7fc fb89 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004576:	20c7      	movs	r0, #199	@ 0xc7
 8004578:	f7fc fba2 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800457c:	2090      	movs	r0, #144	@ 0x90
 800457e:	f7fc fb83 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004582:	2036      	movs	r0, #54	@ 0x36
 8004584:	f7fc fb9c 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004588:	20c8      	movs	r0, #200	@ 0xc8
 800458a:	f7fc fb7d 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800458e:	20f2      	movs	r0, #242	@ 0xf2
 8004590:	f7fc fb96 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004594:	2000      	movs	r0, #0
 8004596:	f7fc fb77 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800459a:	20b0      	movs	r0, #176	@ 0xb0
 800459c:	f7fc fb90 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80045a0:	20c2      	movs	r0, #194	@ 0xc2
 80045a2:	f7fc fb71 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80045a6:	20b6      	movs	r0, #182	@ 0xb6
 80045a8:	f7fc fb8a 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80045ac:	200a      	movs	r0, #10
 80045ae:	f7fc fb6b 	bl	8000c88 <LCD_IO_WriteData>
 80045b2:	20a7      	movs	r0, #167	@ 0xa7
 80045b4:	f7fc fb68 	bl	8000c88 <LCD_IO_WriteData>
 80045b8:	2027      	movs	r0, #39	@ 0x27
 80045ba:	f7fc fb65 	bl	8000c88 <LCD_IO_WriteData>
 80045be:	2004      	movs	r0, #4
 80045c0:	f7fc fb62 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80045c4:	202a      	movs	r0, #42	@ 0x2a
 80045c6:	f7fc fb7b 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7fc fb5c 	bl	8000c88 <LCD_IO_WriteData>
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7fc fb59 	bl	8000c88 <LCD_IO_WriteData>
 80045d6:	2000      	movs	r0, #0
 80045d8:	f7fc fb56 	bl	8000c88 <LCD_IO_WriteData>
 80045dc:	20ef      	movs	r0, #239	@ 0xef
 80045de:	f7fc fb53 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80045e2:	202b      	movs	r0, #43	@ 0x2b
 80045e4:	f7fc fb6c 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80045e8:	2000      	movs	r0, #0
 80045ea:	f7fc fb4d 	bl	8000c88 <LCD_IO_WriteData>
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7fc fb4a 	bl	8000c88 <LCD_IO_WriteData>
 80045f4:	2001      	movs	r0, #1
 80045f6:	f7fc fb47 	bl	8000c88 <LCD_IO_WriteData>
 80045fa:	203f      	movs	r0, #63	@ 0x3f
 80045fc:	f7fc fb44 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004600:	20f6      	movs	r0, #246	@ 0xf6
 8004602:	f7fc fb5d 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004606:	2001      	movs	r0, #1
 8004608:	f7fc fb3e 	bl	8000c88 <LCD_IO_WriteData>
 800460c:	2000      	movs	r0, #0
 800460e:	f7fc fb3b 	bl	8000c88 <LCD_IO_WriteData>
 8004612:	2006      	movs	r0, #6
 8004614:	f7fc fb38 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004618:	202c      	movs	r0, #44	@ 0x2c
 800461a:	f7fc fb51 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800461e:	20c8      	movs	r0, #200	@ 0xc8
 8004620:	f7fc fb9c 	bl	8000d5c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8004624:	2026      	movs	r0, #38	@ 0x26
 8004626:	f7fc fb4b 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800462a:	2001      	movs	r0, #1
 800462c:	f7fc fb2c 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004630:	20e0      	movs	r0, #224	@ 0xe0
 8004632:	f7fc fb45 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004636:	200f      	movs	r0, #15
 8004638:	f7fc fb26 	bl	8000c88 <LCD_IO_WriteData>
 800463c:	2029      	movs	r0, #41	@ 0x29
 800463e:	f7fc fb23 	bl	8000c88 <LCD_IO_WriteData>
 8004642:	2024      	movs	r0, #36	@ 0x24
 8004644:	f7fc fb20 	bl	8000c88 <LCD_IO_WriteData>
 8004648:	200c      	movs	r0, #12
 800464a:	f7fc fb1d 	bl	8000c88 <LCD_IO_WriteData>
 800464e:	200e      	movs	r0, #14
 8004650:	f7fc fb1a 	bl	8000c88 <LCD_IO_WriteData>
 8004654:	2009      	movs	r0, #9
 8004656:	f7fc fb17 	bl	8000c88 <LCD_IO_WriteData>
 800465a:	204e      	movs	r0, #78	@ 0x4e
 800465c:	f7fc fb14 	bl	8000c88 <LCD_IO_WriteData>
 8004660:	2078      	movs	r0, #120	@ 0x78
 8004662:	f7fc fb11 	bl	8000c88 <LCD_IO_WriteData>
 8004666:	203c      	movs	r0, #60	@ 0x3c
 8004668:	f7fc fb0e 	bl	8000c88 <LCD_IO_WriteData>
 800466c:	2009      	movs	r0, #9
 800466e:	f7fc fb0b 	bl	8000c88 <LCD_IO_WriteData>
 8004672:	2013      	movs	r0, #19
 8004674:	f7fc fb08 	bl	8000c88 <LCD_IO_WriteData>
 8004678:	2005      	movs	r0, #5
 800467a:	f7fc fb05 	bl	8000c88 <LCD_IO_WriteData>
 800467e:	2017      	movs	r0, #23
 8004680:	f7fc fb02 	bl	8000c88 <LCD_IO_WriteData>
 8004684:	2011      	movs	r0, #17
 8004686:	f7fc faff 	bl	8000c88 <LCD_IO_WriteData>
 800468a:	2000      	movs	r0, #0
 800468c:	f7fc fafc 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004690:	20e1      	movs	r0, #225	@ 0xe1
 8004692:	f7fc fb15 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004696:	2000      	movs	r0, #0
 8004698:	f7fc faf6 	bl	8000c88 <LCD_IO_WriteData>
 800469c:	2016      	movs	r0, #22
 800469e:	f7fc faf3 	bl	8000c88 <LCD_IO_WriteData>
 80046a2:	201b      	movs	r0, #27
 80046a4:	f7fc faf0 	bl	8000c88 <LCD_IO_WriteData>
 80046a8:	2004      	movs	r0, #4
 80046aa:	f7fc faed 	bl	8000c88 <LCD_IO_WriteData>
 80046ae:	2011      	movs	r0, #17
 80046b0:	f7fc faea 	bl	8000c88 <LCD_IO_WriteData>
 80046b4:	2007      	movs	r0, #7
 80046b6:	f7fc fae7 	bl	8000c88 <LCD_IO_WriteData>
 80046ba:	2031      	movs	r0, #49	@ 0x31
 80046bc:	f7fc fae4 	bl	8000c88 <LCD_IO_WriteData>
 80046c0:	2033      	movs	r0, #51	@ 0x33
 80046c2:	f7fc fae1 	bl	8000c88 <LCD_IO_WriteData>
 80046c6:	2042      	movs	r0, #66	@ 0x42
 80046c8:	f7fc fade 	bl	8000c88 <LCD_IO_WriteData>
 80046cc:	2005      	movs	r0, #5
 80046ce:	f7fc fadb 	bl	8000c88 <LCD_IO_WriteData>
 80046d2:	200c      	movs	r0, #12
 80046d4:	f7fc fad8 	bl	8000c88 <LCD_IO_WriteData>
 80046d8:	200a      	movs	r0, #10
 80046da:	f7fc fad5 	bl	8000c88 <LCD_IO_WriteData>
 80046de:	2028      	movs	r0, #40	@ 0x28
 80046e0:	f7fc fad2 	bl	8000c88 <LCD_IO_WriteData>
 80046e4:	202f      	movs	r0, #47	@ 0x2f
 80046e6:	f7fc facf 	bl	8000c88 <LCD_IO_WriteData>
 80046ea:	200f      	movs	r0, #15
 80046ec:	f7fc facc 	bl	8000c88 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80046f0:	2011      	movs	r0, #17
 80046f2:	f7fc fae5 	bl	8000cc0 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80046f6:	20c8      	movs	r0, #200	@ 0xc8
 80046f8:	f7fc fb30 	bl	8000d5c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80046fc:	2029      	movs	r0, #41	@ 0x29
 80046fe:	f7fc fadf 	bl	8000cc0 <LCD_IO_WriteReg>
}
 8004702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8004706:	202c      	movs	r0, #44	@ 0x2c
 8004708:	f7fc bada 	b.w	8000cc0 <LCD_IO_WriteReg>

0800470c <ili9341_ReadID>:
{
 800470c:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800470e:	f7fc faab 	bl	8000c68 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8004712:	2103      	movs	r1, #3
 8004714:	20d3      	movs	r0, #211	@ 0xd3
 8004716:	f7fc faef 	bl	8000cf8 <LCD_IO_ReadData>
}
 800471a:	b280      	uxth	r0, r0
 800471c:	bd08      	pop	{r3, pc}

0800471e <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800471e:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8004720:	b2c4      	uxtb	r4, r0
 8004722:	2202      	movs	r2, #2
 8004724:	2103      	movs	r1, #3
 8004726:	4620      	mov	r0, r4
 8004728:	f7fc fa54 	bl	8000bd4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 800472c:	200a      	movs	r0, #10
 800472e:	f7fc fa99 	bl	8000c64 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8004732:	4620      	mov	r0, r4
 8004734:	2200      	movs	r2, #0
 8004736:	2103      	movs	r1, #3
 8004738:	f7fc fa4c 	bl	8000bd4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 800473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8004740:	2002      	movs	r0, #2
 8004742:	f7fc ba8f 	b.w	8000c64 <IOE_Delay>

08004746 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8004746:	b538      	push	{r3, r4, r5, lr}
 8004748:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800474a:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 800474c:	f7fc fa40 	bl	8000bd0 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004750:	2100      	movs	r1, #0
 8004752:	4620      	mov	r0, r4
 8004754:	f7fc fa56 	bl	8000c04 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004758:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800475a:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800475c:	4620      	mov	r0, r4
 800475e:	f7fc fa51 	bl	8000c04 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004762:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8004766:	b280      	uxth	r0, r0
 8004768:	bd38      	pop	{r3, r4, r5, pc}

0800476a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800476a:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800476c:	b2c4      	uxtb	r4, r0
 800476e:	2140      	movs	r1, #64	@ 0x40
 8004770:	4620      	mov	r0, r4
 8004772:	f7fc fa47 	bl	8000c04 <IOE_Read>
  
  if(state > 0)
 8004776:	0603      	lsls	r3, r0, #24
 8004778:	d507      	bpl.n	800478a <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800477a:	214c      	movs	r1, #76	@ 0x4c
 800477c:	4620      	mov	r0, r4
 800477e:	f7fc fa41 	bl	8000c04 <IOE_Read>
 8004782:	3800      	subs	r0, #0
 8004784:	bf18      	it	ne
 8004786:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8004788:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800478a:	2201      	movs	r2, #1
 800478c:	214b      	movs	r1, #75	@ 0x4b
 800478e:	4620      	mov	r0, r4
 8004790:	f7fc fa20 	bl	8000bd4 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004794:	4620      	mov	r0, r4
 8004796:	2200      	movs	r2, #0
 8004798:	214b      	movs	r1, #75	@ 0x4b
 800479a:	f7fc fa1b 	bl	8000bd4 <IOE_Write>
  uint8_t ret = 0;
 800479e:	2000      	movs	r0, #0
 80047a0:	e7f2      	b.n	8004788 <stmpe811_TS_DetectTouch+0x1e>

080047a2 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80047a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80047a4:	2304      	movs	r3, #4
 80047a6:	b2c4      	uxtb	r4, r0
{
 80047a8:	460e      	mov	r6, r1
 80047aa:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80047ac:	21d7      	movs	r1, #215	@ 0xd7
 80047ae:	eb0d 0203 	add.w	r2, sp, r3
 80047b2:	4620      	mov	r0, r4
 80047b4:	f7fc fa40 	bl	8000c38 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80047b8:	9b01      	ldr	r3, [sp, #4]
 80047ba:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80047bc:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80047be:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80047c2:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80047c4:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80047c6:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80047c8:	2201      	movs	r2, #1
 80047ca:	214b      	movs	r1, #75	@ 0x4b
 80047cc:	f7fc fa02 	bl	8000bd4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80047d0:	2200      	movs	r2, #0
 80047d2:	214b      	movs	r1, #75	@ 0x4b
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7fc f9fd 	bl	8000bd4 <IOE_Write>
}
 80047da:	b002      	add	sp, #8
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080047e0 <stmpe811_Init>:
{
 80047e0:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 80047e2:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <stmpe811_Init+0x2c>)
 80047e4:	7813      	ldrb	r3, [r2, #0]
 80047e6:	4298      	cmp	r0, r3
{
 80047e8:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 80047ea:	d00d      	beq.n	8004808 <stmpe811_Init+0x28>
 80047ec:	7851      	ldrb	r1, [r2, #1]
 80047ee:	4288      	cmp	r0, r1
 80047f0:	d00a      	beq.n	8004808 <stmpe811_Init+0x28>
 80047f2:	b10b      	cbz	r3, 80047f8 <stmpe811_Init+0x18>
 80047f4:	b941      	cbnz	r1, 8004808 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80047f6:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 80047f8:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 80047fa:	f7fc f9e9 	bl	8000bd0 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 80047fe:	4620      	mov	r0, r4
}
 8004800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8004804:	f7ff bf8b 	b.w	800471e <stmpe811_Reset>
}
 8004808:	bd10      	pop	{r4, pc}
 800480a:	bf00      	nop
 800480c:	200046dc 	.word	0x200046dc

08004810 <stmpe811_EnableGlobalIT>:
{
 8004810:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004812:	b2c4      	uxtb	r4, r0
 8004814:	2109      	movs	r1, #9
 8004816:	4620      	mov	r0, r4
 8004818:	f7fc f9f4 	bl	8000c04 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800481c:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	4620      	mov	r0, r4
 8004824:	2109      	movs	r1, #9
}
 8004826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800482a:	f7fc b9d3 	b.w	8000bd4 <IOE_Write>

0800482e <stmpe811_DisableGlobalIT>:
{
 800482e:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004830:	b2c4      	uxtb	r4, r0
 8004832:	2109      	movs	r1, #9
 8004834:	4620      	mov	r0, r4
 8004836:	f7fc f9e5 	bl	8000c04 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800483a:	2109      	movs	r1, #9
 800483c:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8004840:	4620      	mov	r0, r4
}
 8004842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004846:	f7fc b9c5 	b.w	8000bd4 <IOE_Write>

0800484a <stmpe811_EnableITSource>:
{
 800484a:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800484c:	b2c4      	uxtb	r4, r0
{
 800484e:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004850:	4620      	mov	r0, r4
 8004852:	210a      	movs	r1, #10
 8004854:	f7fc f9d6 	bl	8000c04 <IOE_Read>
  tmp |= Source; 
 8004858:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	4620      	mov	r0, r4
 8004860:	210a      	movs	r1, #10
}
 8004862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004866:	f7fc b9b5 	b.w	8000bd4 <IOE_Write>

0800486a <stmpe811_TS_EnableIT>:
{
 800486a:	b510      	push	{r4, lr}
 800486c:	4604      	mov	r4, r0
  IOE_ITConfig();
 800486e:	f7fc f9b0 	bl	8000bd2 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004872:	4620      	mov	r0, r4
 8004874:	211f      	movs	r1, #31
 8004876:	f7ff ffe8 	bl	800484a <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 800487a:	4620      	mov	r0, r4
}
 800487c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004880:	f7ff bfc6 	b.w	8004810 <stmpe811_EnableGlobalIT>

08004884 <stmpe811_DisableITSource>:
{
 8004884:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004886:	b2c4      	uxtb	r4, r0
{
 8004888:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800488a:	4620      	mov	r0, r4
 800488c:	210a      	movs	r1, #10
 800488e:	f7fc f9b9 	bl	8000c04 <IOE_Read>
  tmp &= ~Source; 
 8004892:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	4620      	mov	r0, r4
 800489a:	210a      	movs	r1, #10
}
 800489c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80048a0:	f7fc b998 	b.w	8000bd4 <IOE_Write>

080048a4 <stmpe811_TS_DisableIT>:
{
 80048a4:	b510      	push	{r4, lr}
 80048a6:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 80048a8:	f7ff ffc1 	bl	800482e <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80048ac:	4620      	mov	r0, r4
 80048ae:	211f      	movs	r1, #31
}
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80048b4:	f7ff bfe6 	b.w	8004884 <stmpe811_DisableITSource>

080048b8 <stmpe811_ReadGITStatus>:
{
 80048b8:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80048ba:	b2c0      	uxtb	r0, r0
{
 80048bc:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80048be:	210b      	movs	r1, #11
 80048c0:	f7fc f9a0 	bl	8000c04 <IOE_Read>
}
 80048c4:	4020      	ands	r0, r4
 80048c6:	bd10      	pop	{r4, pc}

080048c8 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80048c8:	211f      	movs	r1, #31
 80048ca:	f7ff bff5 	b.w	80048b8 <stmpe811_ReadGITStatus>

080048ce <stmpe811_ClearGlobalIT>:
{
 80048ce:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80048d0:	b2c0      	uxtb	r0, r0
 80048d2:	210b      	movs	r1, #11
 80048d4:	f7fc b97e 	b.w	8000bd4 <IOE_Write>

080048d8 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80048d8:	211f      	movs	r1, #31
 80048da:	f7ff bff8 	b.w	80048ce <stmpe811_ClearGlobalIT>

080048de <stmpe811_IO_EnableAF>:
{
 80048de:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80048e0:	b2c4      	uxtb	r4, r0
{
 80048e2:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80048e4:	4620      	mov	r0, r4
 80048e6:	2117      	movs	r1, #23
 80048e8:	f7fc f98c 	bl	8000c04 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 80048ec:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	4620      	mov	r0, r4
 80048f4:	2117      	movs	r1, #23
}
 80048f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80048fa:	f7fc b96b 	b.w	8000bd4 <IOE_Write>

080048fe <stmpe811_TS_Start>:
{
 80048fe:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004900:	b2c4      	uxtb	r4, r0
{
 8004902:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004904:	2104      	movs	r1, #4
 8004906:	4620      	mov	r0, r4
 8004908:	f7fc f97c 	bl	8000c04 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800490c:	2104      	movs	r1, #4
 800490e:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004912:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004914:	4620      	mov	r0, r4
 8004916:	f7fc f95d 	bl	8000bd4 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800491a:	4630      	mov	r0, r6
 800491c:	21f0      	movs	r1, #240	@ 0xf0
 800491e:	f7ff ffde 	bl	80048de <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004922:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 8004926:	4620      	mov	r0, r4
 8004928:	2104      	movs	r1, #4
 800492a:	f7fc f953 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800492e:	2249      	movs	r2, #73	@ 0x49
 8004930:	2120      	movs	r1, #32
 8004932:	4620      	mov	r0, r4
 8004934:	f7fc f94e 	bl	8000bd4 <IOE_Write>
  IOE_Delay(2); 
 8004938:	2002      	movs	r0, #2
 800493a:	f7fc f993 	bl	8000c64 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800493e:	4620      	mov	r0, r4
 8004940:	2201      	movs	r2, #1
 8004942:	2121      	movs	r1, #33	@ 0x21
 8004944:	f7fc f946 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8004948:	4620      	mov	r0, r4
 800494a:	229a      	movs	r2, #154	@ 0x9a
 800494c:	2141      	movs	r1, #65	@ 0x41
 800494e:	f7fc f941 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8004952:	4620      	mov	r0, r4
 8004954:	2201      	movs	r2, #1
 8004956:	214a      	movs	r1, #74	@ 0x4a
 8004958:	f7fc f93c 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800495c:	4620      	mov	r0, r4
 800495e:	2201      	movs	r2, #1
 8004960:	214b      	movs	r1, #75	@ 0x4b
 8004962:	f7fc f937 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004966:	4620      	mov	r0, r4
 8004968:	2200      	movs	r2, #0
 800496a:	214b      	movs	r1, #75	@ 0x4b
 800496c:	f7fc f932 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8004970:	4620      	mov	r0, r4
 8004972:	2201      	movs	r2, #1
 8004974:	2156      	movs	r1, #86	@ 0x56
 8004976:	f7fc f92d 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800497a:	4620      	mov	r0, r4
 800497c:	2201      	movs	r2, #1
 800497e:	2158      	movs	r1, #88	@ 0x58
 8004980:	f7fc f928 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8004984:	4620      	mov	r0, r4
 8004986:	2201      	movs	r2, #1
 8004988:	2140      	movs	r1, #64	@ 0x40
 800498a:	f7fc f923 	bl	8000bd4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800498e:	4620      	mov	r0, r4
 8004990:	22ff      	movs	r2, #255	@ 0xff
 8004992:	210b      	movs	r1, #11
 8004994:	f7fc f91e 	bl	8000bd4 <IOE_Write>
}
 8004998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 800499c:	2002      	movs	r0, #2
 800499e:	f7fc b961 	b.w	8000c64 <IOE_Delay>
	...

080049a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049a4:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <SystemInit+0x18>)
 80049a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80049aa:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80049ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80049b6:	609a      	str	r2, [r3, #8]
#endif
}
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049c0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_Init+0x30>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ca:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049d2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049dc:	2003      	movs	r0, #3
 80049de:	f000 f82f 	bl	8004a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7fc ff64 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049e8:	f7fc fce2 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80049ec:	2000      	movs	r0, #0
 80049ee:	bd08      	pop	{r3, pc}
 80049f0:	40023c00 	.word	0x40023c00

080049f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80049f4:	4a03      	ldr	r2, [pc, #12]	@ (8004a04 <HAL_IncTick+0x10>)
 80049f6:	4b04      	ldr	r3, [pc, #16]	@ (8004a08 <HAL_IncTick+0x14>)
 80049f8:	6811      	ldr	r1, [r2, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	440b      	add	r3, r1
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	200046e0 	.word	0x200046e0
 8004a08:	2000007c 	.word	0x2000007c

08004a0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a0c:	4b01      	ldr	r3, [pc, #4]	@ (8004a14 <HAL_GetTick+0x8>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	200046e0 	.word	0x200046e0

08004a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a1c:	f7ff fff6 	bl	8004a0c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a20:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004a22:	bf1c      	itt	ne
 8004a24:	4b05      	ldrne	r3, [pc, #20]	@ (8004a3c <HAL_Delay+0x24>)
 8004a26:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004a28:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004a2a:	bf18      	it	ne
 8004a2c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a2e:	f7ff ffed 	bl	8004a0c <HAL_GetTick>
 8004a32:	1b43      	subs	r3, r0, r5
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d3fa      	bcc.n	8004a2e <HAL_Delay+0x16>
  {
  }
}
 8004a38:	bd38      	pop	{r3, r4, r5, pc}
 8004a3a:	bf00      	nop
 8004a3c:	2000007c 	.word	0x2000007c

08004a40 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a40:	4907      	ldr	r1, [pc, #28]	@ (8004a60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004a42:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a48:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004a5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004a5e:	4770      	bx	lr
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a64:	4b16      	ldr	r3, [pc, #88]	@ (8004ac0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a66:	b530      	push	{r4, r5, lr}
 8004a68:	68dc      	ldr	r4, [r3, #12]
 8004a6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a6e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a72:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	bf28      	it	cs
 8004a78:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a7c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a80:	bf8c      	ite	hi
 8004a82:	3c03      	subhi	r4, #3
 8004a84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a86:	fa05 f303 	lsl.w	r3, r5, r3
 8004a8a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a8e:	40a5      	lsls	r5, r4
 8004a90:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a94:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8004a96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a98:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9c:	bfac      	ite	ge
 8004a9e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa2:	4a08      	ldrlt	r2, [pc, #32]	@ (8004ac4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa8:	bfb8      	it	lt
 8004aaa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	bfaa      	itet	ge
 8004ab2:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004abc:	bd30      	pop	{r4, r5, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00
 8004ac4:	e000ed14 	.word	0xe000ed14

08004ac8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	db07      	blt.n	8004adc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004acc:	0941      	lsrs	r1, r0, #5
 8004ace:	4a04      	ldr	r2, [pc, #16]	@ (8004ae0 <HAL_NVIC_EnableIRQ+0x18>)
 8004ad0:	f000 001f 	and.w	r0, r0, #31
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4083      	lsls	r3, r0
 8004ad8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	e000e100 	.word	0xe000e100

08004ae4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ae4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	b150      	cbz	r0, 8004b00 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004aea:	7943      	ldrb	r3, [r0, #5]
 8004aec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004af0:	b913      	cbnz	r3, 8004af8 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004af2:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004af4:	f7fc fc7c 	bl	80013f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004af8:	2301      	movs	r3, #1
 8004afa:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8004afc:	2000      	movs	r0, #0
}
 8004afe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b00:	2001      	movs	r0, #1
 8004b02:	e7fc      	b.n	8004afe <HAL_CRC_Init+0x1a>

08004b04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004b04:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004b06:	4604      	mov	r4, r0
 8004b08:	b320      	cbz	r0, 8004b54 <HAL_DMA2D_Init+0x50>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004b0a:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8004b0e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004b12:	b91b      	cbnz	r3, 8004b1c <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004b14:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004b18:	f7fc fc82 	bl	8001420 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	6861      	ldr	r1, [r4, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b32:	68a1      	ldr	r1, [r4, #8]
 8004b34:	f022 0207 	bic.w	r2, r2, #7
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b3e:	68e1      	ldr	r1, [r4, #12]
 8004b40:	f36f 020d 	bfc	r2, #0, #14
 8004b44:	430a      	orrs	r2, r1
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b48:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b4a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b4c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b4e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8004b52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b54:	2001      	movs	r0, #1
 8004b56:	e7fc      	b.n	8004b52 <HAL_DMA2D_Init+0x4e>

08004b58 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8004b58:	4770      	bx	lr

08004b5a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8004b5a:	4770      	bx	lr

08004b5c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b5c:	6803      	ldr	r3, [r0, #0]
{
 8004b5e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b60:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004b62:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b64:	07f2      	lsls	r2, r6, #31
{
 8004b66:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b68:	d514      	bpl.n	8004b94 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004b6a:	05e9      	lsls	r1, r5, #23
 8004b6c:	d512      	bpl.n	8004b94 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b74:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004b7e:	2201      	movs	r2, #1
 8004b80:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b82:	2304      	movs	r3, #4
 8004b84:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004b8e:	6943      	ldr	r3, [r0, #20]
 8004b90:	b103      	cbz	r3, 8004b94 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004b92:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b94:	06b2      	lsls	r2, r6, #26
 8004b96:	d516      	bpl.n	8004bc6 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004b98:	04ab      	lsls	r3, r5, #18
 8004b9a:	d514      	bpl.n	8004bc6 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ba4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004baa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004bbe:	6963      	ldr	r3, [r4, #20]
 8004bc0:	b10b      	cbz	r3, 8004bc6 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004bc6:	0730      	lsls	r0, r6, #28
 8004bc8:	d516      	bpl.n	8004bf8 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004bca:	0529      	lsls	r1, r5, #20
 8004bcc:	d514      	bpl.n	8004bf8 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004bd8:	2208      	movs	r2, #8
 8004bda:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004bdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004be4:	2304      	movs	r3, #4
 8004be6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004bea:	2300      	movs	r3, #0
 8004bec:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004bf0:	6963      	ldr	r3, [r4, #20]
 8004bf2:	b10b      	cbz	r3, 8004bf8 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004bf8:	0772      	lsls	r2, r6, #29
 8004bfa:	d50b      	bpl.n	8004c14 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004bfc:	056b      	lsls	r3, r5, #21
 8004bfe:	d509      	bpl.n	8004c14 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c08:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f7ff ffa2 	bl	8004b58 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004c14:	07b0      	lsls	r0, r6, #30
 8004c16:	d514      	bpl.n	8004c42 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004c18:	05a9      	lsls	r1, r5, #22
 8004c1a:	d512      	bpl.n	8004c42 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c24:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004c26:	2202      	movs	r2, #2
 8004c28:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c2a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004c2c:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004c34:	2300      	movs	r3, #0
 8004c36:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004c3a:	6923      	ldr	r3, [r4, #16]
 8004c3c:	b10b      	cbz	r3, 8004c42 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004c42:	06f2      	lsls	r2, r6, #27
 8004c44:	d513      	bpl.n	8004c6e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004c46:	04eb      	lsls	r3, r5, #19
 8004c48:	d511      	bpl.n	8004c6e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c52:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004c54:	2210      	movs	r2, #16
 8004c56:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004c5a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004c62:	2300      	movs	r3, #0
 8004c64:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7ff ff76 	bl	8004b5a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}

08004c70 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004c70:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c72:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8004c76:	2a01      	cmp	r2, #1
{
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8004c7e:	d02b      	beq.n	8004cd8 <HAL_DMA2D_ConfigLayer+0x68>
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c86:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004c8a:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8004c8e:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8004c92:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8004c94:	4f17      	ldr	r7, [pc, #92]	@ (8004cf4 <HAL_DMA2D_ConfigLayer+0x84>)
 8004c96:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c9a:	3c09      	subs	r4, #9
 8004c9c:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c9e:	bf9c      	itt	ls
 8004ca0:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8004ca4:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004ca6:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004caa:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004cac:	bf88      	it	hi
 8004cae:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004cb2:	b991      	cbnz	r1, 8004cda <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004cb4:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8004cb6:	4039      	ands	r1, r7
 8004cb8:	4301      	orrs	r1, r0
 8004cba:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cbc:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004cbe:	6999      	ldr	r1, [r3, #24]
 8004cc0:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004cc2:	d803      	bhi.n	8004ccc <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004cc4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004cc6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004cca:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ccc:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004cce:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cd0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8004cd4:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8004cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004cda:	69d1      	ldr	r1, [r2, #28]
 8004cdc:	4039      	ands	r1, r7
 8004cde:	4301      	orrs	r1, r0
 8004ce0:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004ce2:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ce4:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004ce6:	6989      	ldr	r1, [r1, #24]
 8004ce8:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004cea:	bf9c      	itt	ls
 8004cec:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 8004cf0:	6215      	strls	r5, [r2, #32]
 8004cf2:	e7eb      	b.n	8004ccc <HAL_DMA2D_ConfigLayer+0x5c>
 8004cf4:	00fcfff0 	.word	0x00fcfff0

08004cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cfc:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004ebc <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d00:	4a6c      	ldr	r2, [pc, #432]	@ (8004eb4 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d02:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d04:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8004d06:	2401      	movs	r4, #1
 8004d08:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d0a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8004d0e:	43ac      	bics	r4, r5
 8004d10:	f040 80b7 	bne.w	8004e82 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d14:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d16:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d18:	f005 0403 	and.w	r4, r5, #3
 8004d1c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d20:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d24:	1e67      	subs	r7, r4, #1
 8004d26:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d28:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2c:	d834      	bhi.n	8004d98 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8004d2e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d30:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d34:	68cf      	ldr	r7, [r1, #12]
 8004d36:	fa07 f708 	lsl.w	r7, r7, r8
 8004d3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004d3e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004d40:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d42:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d46:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004d4a:	409f      	lsls	r7, r3
 8004d4c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004d50:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004d52:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d54:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d58:	688f      	ldr	r7, [r1, #8]
 8004d5a:	fa07 f708 	lsl.w	r7, r7, r8
 8004d5e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d62:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8004d64:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d66:	d119      	bne.n	8004d9c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8004d68:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8004d6c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d70:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004d74:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d78:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004d7c:	f04f 0e0f 	mov.w	lr, #15
 8004d80:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004d84:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d88:	690f      	ldr	r7, [r1, #16]
 8004d8a:	fa07 f70b 	lsl.w	r7, r7, fp
 8004d8e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004d92:	f8ca 7020 	str.w	r7, [sl, #32]
 8004d96:	e001      	b.n	8004d9c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d98:	2c03      	cmp	r4, #3
 8004d9a:	d1da      	bne.n	8004d52 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004d9c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d9e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004da2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004da6:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004da8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004dac:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dae:	d068      	beq.n	8004e82 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db0:	2400      	movs	r4, #0
 8004db2:	9401      	str	r4, [sp, #4]
 8004db4:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004db8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004dbc:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8004dc0:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004dc4:	f023 0703 	bic.w	r7, r3, #3
 8004dc8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004dcc:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8004dd0:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8004dd4:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dd6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dda:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004ddc:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004de0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004de4:	240f      	movs	r4, #15
 8004de6:	fa04 f40c 	lsl.w	r4, r4, ip
 8004dea:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dee:	4c32      	ldr	r4, [pc, #200]	@ (8004eb8 <HAL_GPIO_Init+0x1c0>)
 8004df0:	42a0      	cmp	r0, r4
 8004df2:	d04d      	beq.n	8004e90 <HAL_GPIO_Init+0x198>
 8004df4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004df8:	42a0      	cmp	r0, r4
 8004dfa:	d04b      	beq.n	8004e94 <HAL_GPIO_Init+0x19c>
 8004dfc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d049      	beq.n	8004e98 <HAL_GPIO_Init+0x1a0>
 8004e04:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d047      	beq.n	8004e9c <HAL_GPIO_Init+0x1a4>
 8004e0c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d045      	beq.n	8004ea0 <HAL_GPIO_Init+0x1a8>
 8004e14:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d043      	beq.n	8004ea4 <HAL_GPIO_Init+0x1ac>
 8004e1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004e20:	42a0      	cmp	r0, r4
 8004e22:	d041      	beq.n	8004ea8 <HAL_GPIO_Init+0x1b0>
 8004e24:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004e28:	42a0      	cmp	r0, r4
 8004e2a:	d03f      	beq.n	8004eac <HAL_GPIO_Init+0x1b4>
 8004e2c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	d03d      	beq.n	8004eb0 <HAL_GPIO_Init+0x1b8>
 8004e34:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	bf14      	ite	ne
 8004e3c:	240a      	movne	r4, #10
 8004e3e:	2409      	moveq	r4, #9
 8004e40:	fa04 f40c 	lsl.w	r4, r4, ip
 8004e44:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e48:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8004e4a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004e4c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e4e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004e52:	bf0c      	ite	eq
 8004e54:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004e56:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8004e58:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004e5a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e5c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004e60:	bf0c      	ite	eq
 8004e62:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004e64:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8004e66:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8004e68:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e6a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004e6e:	bf0c      	ite	eq
 8004e70:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004e72:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8004e74:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e76:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e78:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8004e7a:	bf54      	ite	pl
 8004e7c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004e7e:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004e80:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e82:	3301      	adds	r3, #1
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	f47f af3d 	bne.w	8004d04 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004e8a:	b003      	add	sp, #12
 8004e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e90:	2400      	movs	r4, #0
 8004e92:	e7d5      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004e94:	2401      	movs	r4, #1
 8004e96:	e7d3      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004e98:	2402      	movs	r4, #2
 8004e9a:	e7d1      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004e9c:	2403      	movs	r4, #3
 8004e9e:	e7cf      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004ea0:	2404      	movs	r4, #4
 8004ea2:	e7cd      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004ea4:	2405      	movs	r4, #5
 8004ea6:	e7cb      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004ea8:	2406      	movs	r4, #6
 8004eaa:	e7c9      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004eac:	2407      	movs	r4, #7
 8004eae:	e7c7      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004eb0:	2408      	movs	r4, #8
 8004eb2:	e7c5      	b.n	8004e40 <HAL_GPIO_Init+0x148>
 8004eb4:	40013c00 	.word	0x40013c00
 8004eb8:	40020000 	.word	0x40020000
 8004ebc:	40023800 	.word	0x40023800

08004ec0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ec0:	6903      	ldr	r3, [r0, #16]
 8004ec2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004ec4:	bf14      	ite	ne
 8004ec6:	2001      	movne	r0, #1
 8004ec8:	2000      	moveq	r0, #0
 8004eca:	4770      	bx	lr

08004ecc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ecc:	b10a      	cbz	r2, 8004ed2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ece:	6181      	str	r1, [r0, #24]
  }
}
 8004ed0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ed2:	0409      	lsls	r1, r1, #16
 8004ed4:	e7fb      	b.n	8004ece <HAL_GPIO_WritePin+0x2>

08004ed6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ed6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ed8:	ea01 0203 	and.w	r2, r1, r3
 8004edc:	ea21 0103 	bic.w	r1, r1, r3
 8004ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ee4:	6181      	str	r1, [r0, #24]
}
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ee8:	4a04      	ldr	r2, [pc, #16]	@ (8004efc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004eea:	6951      	ldr	r1, [r2, #20]
 8004eec:	4201      	tst	r1, r0
{
 8004eee:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ef0:	d002      	beq.n	8004ef8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ef2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ef4:	f7fc fa1c 	bl	8001330 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ef8:	bd08      	pop	{r3, pc}
 8004efa:	bf00      	nop
 8004efc:	40013c00 	.word	0x40013c00

08004f00 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f00:	6801      	ldr	r1, [r0, #0]
 8004f02:	694b      	ldr	r3, [r1, #20]
 8004f04:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	d010      	beq.n	8004f30 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0e:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004f12:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f16:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f18:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1c:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f20:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f22:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	4770      	bx	lr
  }
  return HAL_OK;
 8004f30:	4618      	mov	r0, r3
}
 8004f32:	4770      	bx	lr

08004f34 <I2C_WaitOnFlagUntilTimeout>:
{
 8004f34:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004f38:	4606      	mov	r6, r0
 8004f3a:	460f      	mov	r7, r1
 8004f3c:	4691      	mov	r9, r2
 8004f3e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	f1ba 0f01 	cmp.w	sl, #1
 8004f4a:	bf0c      	ite	eq
 8004f4c:	695c      	ldreq	r4, [r3, #20]
 8004f4e:	699c      	ldrne	r4, [r3, #24]
 8004f50:	ea27 0404 	bic.w	r4, r7, r4
 8004f54:	b2a4      	uxth	r4, r4
 8004f56:	fab4 f484 	clz	r4, r4
 8004f5a:	0964      	lsrs	r4, r4, #5
 8004f5c:	45a1      	cmp	r9, r4
 8004f5e:	d001      	beq.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004f60:	2000      	movs	r0, #0
 8004f62:	e017      	b.n	8004f94 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8004f64:	1c6a      	adds	r2, r5, #1
 8004f66:	d0ee      	beq.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f68:	f7ff fd50 	bl	8004a0c <HAL_GetTick>
 8004f6c:	9b08      	ldr	r3, [sp, #32]
 8004f6e:	1ac0      	subs	r0, r0, r3
 8004f70:	42a8      	cmp	r0, r5
 8004f72:	d801      	bhi.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	d1e5      	bne.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f78:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f7a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f7c:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f7e:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f82:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004f88:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f8c:	f042 0220 	orr.w	r2, r2, #32
 8004f90:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8004f92:	2001      	movs	r0, #1
}
 8004f94:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	460f      	mov	r7, r1
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fa4:	6825      	ldr	r5, [r4, #0]
 8004fa6:	6968      	ldr	r0, [r5, #20]
 8004fa8:	ea27 0000 	bic.w	r0, r7, r0
 8004fac:	b280      	uxth	r0, r0
 8004fae:	b1c0      	cbz	r0, 8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb0:	696b      	ldr	r3, [r5, #20]
 8004fb2:	055a      	lsls	r2, r3, #21
 8004fb4:	d517      	bpl.n	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb6:	682b      	ldr	r3, [r5, #0]
 8004fb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fbc:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbe:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004fc2:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fc4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fca:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fd4:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd8:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004fe0:	2001      	movs	r0, #1
}
 8004fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004fe6:	1c73      	adds	r3, r6, #1
 8004fe8:	d0dd      	beq.n	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7ff fd0f 	bl	8004a0c <HAL_GetTick>
 8004fee:	eba0 0008 	sub.w	r0, r0, r8
 8004ff2:	42b0      	cmp	r0, r6
 8004ff4:	d909      	bls.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff6:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffa:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ffc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005004:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005006:	4313      	orrs	r3, r2
 8005008:	e7e6      	b.n	8004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500a:	2e00      	cmp	r6, #0
 800500c:	d1ca      	bne.n	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 800500e:	e7f2      	b.n	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08005010 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4604      	mov	r4, r0
 8005014:	460d      	mov	r5, r1
 8005016:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	061b      	lsls	r3, r3, #24
 800501e:	d501      	bpl.n	8005024 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005020:	2000      	movs	r0, #0
 8005022:	e018      	b.n	8005056 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005024:	4620      	mov	r0, r4
 8005026:	f7ff ff6b 	bl	8004f00 <I2C_IsAcknowledgeFailed>
 800502a:	b998      	cbnz	r0, 8005054 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 800502c:	1c6a      	adds	r2, r5, #1
 800502e:	d0f3      	beq.n	8005018 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005030:	f7ff fcec 	bl	8004a0c <HAL_GetTick>
 8005034:	1b80      	subs	r0, r0, r6
 8005036:	42a8      	cmp	r0, r5
 8005038:	d90e      	bls.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800503a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800503c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005040:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005044:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005048:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800504a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800504e:	f042 0220 	orr.w	r2, r2, #32
 8005052:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005054:	2001      	movs	r0, #1
}
 8005056:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	2d00      	cmp	r5, #0
 800505a:	d1dd      	bne.n	8005018 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800505c:	e7ed      	b.n	800503a <I2C_WaitOnTXEFlagUntilTimeout+0x2a>
	...

08005060 <I2C_RequestMemoryWrite>:
{
 8005060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005064:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005066:	6802      	ldr	r2, [r0, #0]
{
 8005068:	b085      	sub	sp, #20
 800506a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 800506e:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005076:	6013      	str	r3, [r2, #0]
{
 8005078:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800507a:	463b      	mov	r3, r7
 800507c:	f8cd 8000 	str.w	r8, [sp]
 8005080:	2200      	movs	r2, #0
 8005082:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8005086:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005088:	f7ff ff54 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	b138      	cbz	r0, 80050a0 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	05db      	lsls	r3, r3, #23
 8005094:	d502      	bpl.n	800509c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800509a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800509c:	2603      	movs	r6, #3
 800509e:	e020      	b.n	80050e2 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050a0:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80050a4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050a6:	491a      	ldr	r1, [pc, #104]	@ (8005110 <I2C_RequestMemoryWrite+0xb0>)
 80050a8:	4643      	mov	r3, r8
 80050aa:	463a      	mov	r2, r7
 80050ac:	4620      	mov	r0, r4
 80050ae:	f7ff ff73 	bl	8004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b2:	b9a8      	cbnz	r0, 80050e0 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	9003      	str	r0, [sp, #12]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	9203      	str	r2, [sp, #12]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c0:	4642      	mov	r2, r8
 80050c2:	4639      	mov	r1, r7
 80050c4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c8:	f7ff ffa2 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 80050cc:	4606      	mov	r6, r0
 80050ce:	b160      	cbz	r0, 80050ea <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050d2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d4:	bf01      	itttt	eq
 80050d6:	6822      	ldreq	r2, [r4, #0]
 80050d8:	6813      	ldreq	r3, [r2, #0]
 80050da:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80050de:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80050e0:	2601      	movs	r6, #1
}
 80050e2:	4630      	mov	r0, r6
 80050e4:	b005      	add	sp, #20
 80050e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ea:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050f0:	d102      	bne.n	80050f8 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050f2:	b2ed      	uxtb	r5, r5
 80050f4:	611d      	str	r5, [r3, #16]
 80050f6:	e7f4      	b.n	80050e2 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050f8:	0a2a      	lsrs	r2, r5, #8
 80050fa:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fc:	4639      	mov	r1, r7
 80050fe:	4642      	mov	r2, r8
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff ff85 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 8005106:	2800      	cmp	r0, #0
 8005108:	d1e2      	bne.n	80050d0 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	e7f1      	b.n	80050f2 <I2C_RequestMemoryWrite+0x92>
 800510e:	bf00      	nop
 8005110:	00010002 	.word	0x00010002

08005114 <I2C_RequestMemoryRead>:
{
 8005114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	6803      	ldr	r3, [r0, #0]
{
 800511c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005124:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005126:	681a      	ldr	r2, [r3, #0]
{
 8005128:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800512c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005130:	601a      	str	r2, [r3, #0]
{
 8005132:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005134:	463b      	mov	r3, r7
 8005136:	f8cd 8000 	str.w	r8, [sp]
 800513a:	2200      	movs	r2, #0
 800513c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8005140:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005142:	f7ff fef7 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	b138      	cbz	r0, 800515a <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800514a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800514c:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514e:	bf44      	itt	mi
 8005150:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8005154:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005156:	2003      	movs	r0, #3
 8005158:	e021      	b.n	800519e <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800515a:	fa5f f986 	uxtb.w	r9, r6
 800515e:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8005162:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005164:	492b      	ldr	r1, [pc, #172]	@ (8005214 <I2C_RequestMemoryRead+0x100>)
 8005166:	4643      	mov	r3, r8
 8005168:	463a      	mov	r2, r7
 800516a:	4620      	mov	r0, r4
 800516c:	f7ff ff14 	bl	8004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005170:	b9a0      	cbnz	r0, 800519c <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	9003      	str	r0, [sp, #12]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	9203      	str	r2, [sp, #12]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517e:	4642      	mov	r2, r8
 8005180:	4639      	mov	r1, r7
 8005182:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005184:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005186:	f7ff ff43 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 800518a:	b158      	cbz	r0, 80051a4 <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800518e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005190:	bf01      	itttt	eq
 8005192:	6822      	ldreq	r2, [r4, #0]
 8005194:	6813      	ldreq	r3, [r2, #0]
 8005196:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800519a:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 800519c:	2001      	movs	r0, #1
}
 800519e:	b004      	add	sp, #16
 80051a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051a4:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051aa:	d11a      	bne.n	80051e2 <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ac:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ae:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b2:	4639      	mov	r1, r7
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7ff ff2b 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ba:	4602      	mov	r2, r0
 80051bc:	2800      	cmp	r0, #0
 80051be:	d1e5      	bne.n	800518c <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	680b      	ldr	r3, [r1, #0]
 80051c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c8:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ca:	4620      	mov	r0, r4
 80051cc:	f8cd 8000 	str.w	r8, [sp]
 80051d0:	463b      	mov	r3, r7
 80051d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051d6:	f7ff fead 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	b160      	cbz	r0, 80051f8 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	e7b4      	b.n	800514c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051e2:	0a2a      	lsrs	r2, r5, #8
 80051e4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e6:	4639      	mov	r1, r7
 80051e8:	4642      	mov	r2, r8
 80051ea:	4620      	mov	r0, r4
 80051ec:	f7ff ff10 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d1cb      	bne.n	800518c <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	e7d9      	b.n	80051ac <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051f8:	f049 0301 	orr.w	r3, r9, #1
 80051fc:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051fe:	4905      	ldr	r1, [pc, #20]	@ (8005214 <I2C_RequestMemoryRead+0x100>)
 8005200:	4643      	mov	r3, r8
 8005202:	463a      	mov	r2, r7
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff fec7 	bl	8004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800520a:	3800      	subs	r0, #0
 800520c:	bf18      	it	ne
 800520e:	2001      	movne	r0, #1
 8005210:	e7c5      	b.n	800519e <I2C_RequestMemoryRead+0x8a>
 8005212:	bf00      	nop
 8005214:	00010002 	.word	0x00010002

08005218 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	075b      	lsls	r3, r3, #29
 8005226:	d501      	bpl.n	800522c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005228:	2000      	movs	r0, #0
 800522a:	e018      	b.n	800525e <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800522c:	4620      	mov	r0, r4
 800522e:	f7ff fe67 	bl	8004f00 <I2C_IsAcknowledgeFailed>
 8005232:	b998      	cbnz	r0, 800525c <I2C_WaitOnBTFFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8005234:	1c6a      	adds	r2, r5, #1
 8005236:	d0f3      	beq.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005238:	f7ff fbe8 	bl	8004a0c <HAL_GetTick>
 800523c:	1b80      	subs	r0, r0, r6
 800523e:	42a8      	cmp	r0, r5
 8005240:	d90e      	bls.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005242:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005244:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005246:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005248:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005250:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005252:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005256:	f042 0220 	orr.w	r2, r2, #32
 800525a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800525c:	2001      	movs	r0, #1
}
 800525e:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005260:	2d00      	cmp	r5, #0
 8005262:	d1dd      	bne.n	8005220 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8005264:	e7ed      	b.n	8005242 <I2C_WaitOnBTFFlagUntilTimeout+0x2a>

08005266 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005266:	b570      	push	{r4, r5, r6, lr}
 8005268:	4604      	mov	r4, r0
 800526a:	460d      	mov	r5, r1
 800526c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800526e:	6821      	ldr	r1, [r4, #0]
 8005270:	694b      	ldr	r3, [r1, #20]
 8005272:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8005276:	d001      	beq.n	800527c <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005278:	2000      	movs	r0, #0
 800527a:	e011      	b.n	80052a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800527c:	694a      	ldr	r2, [r1, #20]
 800527e:	06d2      	lsls	r2, r2, #27
 8005280:	d50f      	bpl.n	80052a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005282:	f06f 0210 	mvn.w	r2, #16
 8005286:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005288:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800528c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005290:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005296:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8005298:	2300      	movs	r3, #0
 800529a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800529e:	2001      	movs	r0, #1
}
 80052a0:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7ff fbb3 	bl	8004a0c <HAL_GetTick>
 80052a6:	1b80      	subs	r0, r0, r6
 80052a8:	42a8      	cmp	r0, r5
 80052aa:	d909      	bls.n	80052c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ac:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80052ae:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052b0:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052b2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052bc:	4313      	orrs	r3, r2
 80052be:	e7ea      	b.n	8005296 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	d1d4      	bne.n	800526e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80052c4:	e7f2      	b.n	80052ac <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
	...

080052c8 <HAL_I2C_Init>:
{
 80052c8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80052ca:	4604      	mov	r4, r0
 80052cc:	b908      	cbnz	r0, 80052d2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80052ce:	2001      	movs	r0, #1
}
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052d2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80052d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80052da:	b91b      	cbnz	r3, 80052e4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80052dc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80052e0:	f7fc f8c0 	bl	8001464 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80052e4:	2324      	movs	r3, #36	@ 0x24
 80052e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005302:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005304:	f000 fe66 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005308:	4b3f      	ldr	r3, [pc, #252]	@ (8005408 <HAL_I2C_Init+0x140>)
 800530a:	6865      	ldr	r5, [r4, #4]
 800530c:	429d      	cmp	r5, r3
 800530e:	bf94      	ite	ls
 8005310:	4b3e      	ldrls	r3, [pc, #248]	@ (800540c <HAL_I2C_Init+0x144>)
 8005312:	4b3f      	ldrhi	r3, [pc, #252]	@ (8005410 <HAL_I2C_Init+0x148>)
 8005314:	4298      	cmp	r0, r3
 8005316:	bf8c      	ite	hi
 8005318:	2300      	movhi	r3, #0
 800531a:	2301      	movls	r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1d6      	bne.n	80052ce <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005320:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005322:	4e39      	ldr	r6, [pc, #228]	@ (8005408 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005324:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005326:	4b3b      	ldr	r3, [pc, #236]	@ (8005414 <HAL_I2C_Init+0x14c>)
 8005328:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800532c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005330:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005332:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005334:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005336:	bf88      	it	hi
 8005338:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 800533c:	6a11      	ldr	r1, [r2, #32]
 800533e:	bf88      	it	hi
 8005340:	4373      	mulhi	r3, r6
 8005342:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005346:	bf84      	itt	hi
 8005348:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 800534c:	fbb3 f3f6 	udivhi	r3, r3, r6
 8005350:	3301      	adds	r3, #1
 8005352:	430b      	orrs	r3, r1
 8005354:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005356:	69d1      	ldr	r1, [r2, #28]
 8005358:	1e43      	subs	r3, r0, #1
 800535a:	482b      	ldr	r0, [pc, #172]	@ (8005408 <HAL_I2C_Init+0x140>)
 800535c:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8005360:	4285      	cmp	r5, r0
 8005362:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005366:	d832      	bhi.n	80053ce <HAL_I2C_Init+0x106>
 8005368:	006d      	lsls	r5, r5, #1
 800536a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800536e:	fbb3 f3f5 	udiv	r3, r3, r5
 8005372:	3301      	adds	r3, #1
 8005374:	4203      	tst	r3, r0
 8005376:	d042      	beq.n	80053fe <HAL_I2C_Init+0x136>
 8005378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537c:	4319      	orrs	r1, r3
 800537e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005380:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005384:	6811      	ldr	r1, [r2, #0]
 8005386:	4303      	orrs	r3, r0
 8005388:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800538c:	430b      	orrs	r3, r1
 800538e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005390:	6891      	ldr	r1, [r2, #8]
 8005392:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005396:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800539a:	4303      	orrs	r3, r0
 800539c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80053a0:	430b      	orrs	r3, r1
 80053a2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053a4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80053a8:	68d1      	ldr	r1, [r2, #12]
 80053aa:	4303      	orrs	r3, r0
 80053ac:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80053b0:	430b      	orrs	r3, r1
 80053b2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053bc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80053be:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c0:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053c6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 80053cc:	e780      	b.n	80052d0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053ce:	68a0      	ldr	r0, [r4, #8]
 80053d0:	b950      	cbnz	r0, 80053e8 <HAL_I2C_Init+0x120>
 80053d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053d6:	fbb3 f3f5 	udiv	r3, r3, r5
 80053da:	3301      	adds	r3, #1
 80053dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e0:	b17b      	cbz	r3, 8005402 <HAL_I2C_Init+0x13a>
 80053e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e6:	e7c9      	b.n	800537c <HAL_I2C_Init+0xb4>
 80053e8:	2019      	movs	r0, #25
 80053ea:	4368      	muls	r0, r5
 80053ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80053f0:	3301      	adds	r3, #1
 80053f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f6:	b123      	cbz	r3, 8005402 <HAL_I2C_Init+0x13a>
 80053f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053fc:	e7be      	b.n	800537c <HAL_I2C_Init+0xb4>
 80053fe:	2304      	movs	r3, #4
 8005400:	e7bc      	b.n	800537c <HAL_I2C_Init+0xb4>
 8005402:	2301      	movs	r3, #1
 8005404:	e7ba      	b.n	800537c <HAL_I2C_Init+0xb4>
 8005406:	bf00      	nop
 8005408:	000186a0 	.word	0x000186a0
 800540c:	001e847f 	.word	0x001e847f
 8005410:	003d08ff 	.word	0x003d08ff
 8005414:	000f4240 	.word	0x000f4240

08005418 <HAL_I2C_Mem_Write>:
{
 8005418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800541c:	4604      	mov	r4, r0
 800541e:	4699      	mov	r9, r3
 8005420:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005422:	460f      	mov	r7, r1
 8005424:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005426:	f7ff faf1 	bl	8004a0c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800542a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800542e:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005430:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005432:	d003      	beq.n	800543c <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8005434:	2002      	movs	r0, #2
}
 8005436:	b003      	add	sp, #12
 8005438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800543c:	9000      	str	r0, [sp, #0]
 800543e:	493c      	ldr	r1, [pc, #240]	@ (8005530 <HAL_I2C_Mem_Write+0x118>)
 8005440:	2319      	movs	r3, #25
 8005442:	2201      	movs	r2, #1
 8005444:	4620      	mov	r0, r4
 8005446:	f7ff fd75 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 800544a:	2800      	cmp	r0, #0
 800544c:	d1f2      	bne.n	8005434 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800544e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d0ee      	beq.n	8005434 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005456:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005458:	2301      	movs	r3, #1
 800545a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800545e:	6803      	ldr	r3, [r0, #0]
 8005460:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005462:	bf5e      	ittt	pl
 8005464:	6803      	ldrpl	r3, [r0, #0]
 8005466:	f043 0301 	orrpl.w	r3, r3, #1
 800546a:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800546c:	6803      	ldr	r3, [r0, #0]
 800546e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005472:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005474:	2321      	movs	r3, #33	@ 0x21
 8005476:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800547a:	2340      	movs	r3, #64	@ 0x40
 800547c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005480:	2300      	movs	r3, #0
 8005482:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005486:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005488:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800548c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800548e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005490:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005492:	4b28      	ldr	r3, [pc, #160]	@ (8005534 <HAL_I2C_Mem_Write+0x11c>)
 8005494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005496:	4642      	mov	r2, r8
 8005498:	e9cd 6500 	strd	r6, r5, [sp]
 800549c:	464b      	mov	r3, r9
 800549e:	4639      	mov	r1, r7
 80054a0:	4620      	mov	r0, r4
 80054a2:	f7ff fddd 	bl	8005060 <I2C_RequestMemoryWrite>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d02a      	beq.n	8005500 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80054aa:	2001      	movs	r0, #1
 80054ac:	e7c3      	b.n	8005436 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ae:	f7ff fdaf 	bl	8005010 <I2C_WaitOnTXEFlagUntilTimeout>
 80054b2:	b140      	cbz	r0, 80054c6 <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054b6:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	bf01      	itttt	eq
 80054ba:	6822      	ldreq	r2, [r4, #0]
 80054bc:	6813      	ldreq	r3, [r2, #0]
 80054be:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80054c2:	6013      	streq	r3, [r2, #0]
 80054c4:	e7f1      	b.n	80054aa <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80054c8:	6827      	ldr	r7, [r4, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80054d0:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80054d2:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80054d4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80054d6:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80054d8:	3a01      	subs	r2, #1
 80054da:	b292      	uxth	r2, r2
 80054dc:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054de:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80054e0:	1e48      	subs	r0, r1, #1
 80054e2:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054e4:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80054e6:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054e8:	d50a      	bpl.n	8005500 <HAL_I2C_Mem_Write+0xe8>
 80054ea:	b148      	cbz	r0, 8005500 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ec:	785a      	ldrb	r2, [r3, #1]
 80054ee:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80054f0:	3302      	adds	r3, #2
 80054f2:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80054f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80054f6:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80054f8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80054fa:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80054fc:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80054fe:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005500:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005502:	462a      	mov	r2, r5
 8005504:	4631      	mov	r1, r6
 8005506:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1d0      	bne.n	80054ae <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800550c:	f7ff fe84 	bl	8005218 <I2C_WaitOnBTFFlagUntilTimeout>
 8005510:	2800      	cmp	r0, #0
 8005512:	d1cf      	bne.n	80054b4 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	6813      	ldr	r3, [r2, #0]
 8005518:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800551c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800551e:	2320      	movs	r3, #32
 8005520:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005524:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005528:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 800552c:	e783      	b.n	8005436 <HAL_I2C_Mem_Write+0x1e>
 800552e:	bf00      	nop
 8005530:	00100002 	.word	0x00100002
 8005534:	ffff0000 	.word	0xffff0000

08005538 <HAL_I2C_Mem_Read>:
{
 8005538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	b087      	sub	sp, #28
 8005540:	4699      	mov	r9, r3
 8005542:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8005544:	460d      	mov	r5, r1
 8005546:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005548:	f7ff fa60 	bl	8004a0c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800554c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005550:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005552:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005554:	d004      	beq.n	8005560 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 8005556:	2502      	movs	r5, #2
}
 8005558:	4628      	mov	r0, r5
 800555a:	b007      	add	sp, #28
 800555c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005560:	9000      	str	r0, [sp, #0]
 8005562:	4976      	ldr	r1, [pc, #472]	@ (800573c <HAL_I2C_Mem_Read+0x204>)
 8005564:	2319      	movs	r3, #25
 8005566:	2201      	movs	r2, #1
 8005568:	4620      	mov	r0, r4
 800556a:	f7ff fce3 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 800556e:	2800      	cmp	r0, #0
 8005570:	d1f1      	bne.n	8005556 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8005572:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d0ed      	beq.n	8005556 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800557a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800557c:	2301      	movs	r3, #1
 800557e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005582:	6803      	ldr	r3, [r0, #0]
 8005584:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005586:	bf5e      	ittt	pl
 8005588:	6803      	ldrpl	r3, [r0, #0]
 800558a:	f043 0301 	orrpl.w	r3, r3, #1
 800558e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005590:	6803      	ldr	r3, [r0, #0]
 8005592:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005596:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005598:	2322      	movs	r3, #34	@ 0x22
 800559a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800559e:	2340      	movs	r3, #64	@ 0x40
 80055a0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80055a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055aa:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055ac:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80055b0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80055b4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b6:	4b62      	ldr	r3, [pc, #392]	@ (8005740 <HAL_I2C_Mem_Read+0x208>)
 80055b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055ba:	4629      	mov	r1, r5
 80055bc:	e9cd 7600 	strd	r7, r6, [sp]
 80055c0:	464b      	mov	r3, r9
 80055c2:	4642      	mov	r2, r8
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7ff fda5 	bl	8005114 <I2C_RequestMemoryRead>
 80055ca:	4605      	mov	r5, r0
 80055cc:	b108      	cbz	r0, 80055d2 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 80055ce:	2501      	movs	r5, #1
 80055d0:	e7c2      	b.n	8005558 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 80055d2:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d4:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80055d6:	b9b2      	cbnz	r2, 8005606 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d8:	9002      	str	r0, [sp, #8]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	9202      	str	r2, [sp, #8]
 80055de:	699a      	ldr	r2, [r3, #24]
 80055e0:	9202      	str	r2, [sp, #8]
 80055e2:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ea:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ec:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8005744 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80055f0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d12c      	bne.n	8005650 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	2220      	movs	r2, #32
 80055f8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80055fc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005600:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8005604:	e7a8      	b.n	8005558 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8005606:	2a01      	cmp	r2, #1
 8005608:	d10a      	bne.n	8005620 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005610:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005612:	9003      	str	r0, [sp, #12]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	9203      	str	r2, [sp, #12]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	9203      	str	r2, [sp, #12]
 800561c:	9a03      	ldr	r2, [sp, #12]
 800561e:	e7e1      	b.n	80055e4 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8005620:	2a02      	cmp	r2, #2
 8005622:	d10e      	bne.n	8005642 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800562a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005632:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005634:	9004      	str	r0, [sp, #16]
 8005636:	695a      	ldr	r2, [r3, #20]
 8005638:	9204      	str	r2, [sp, #16]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	e7d4      	b.n	80055ec <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005642:	9005      	str	r0, [sp, #20]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	9205      	str	r2, [sp, #20]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	9b05      	ldr	r3, [sp, #20]
 800564e:	e7cd      	b.n	80055ec <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8005650:	2b03      	cmp	r3, #3
 8005652:	d856      	bhi.n	8005702 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8005654:	2b01      	cmp	r3, #1
 8005656:	d115      	bne.n	8005684 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005658:	4632      	mov	r2, r6
 800565a:	4639      	mov	r1, r7
 800565c:	4620      	mov	r0, r4
 800565e:	f7ff fe02 	bl	8005266 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005662:	2800      	cmp	r0, #0
 8005664:	d1b3      	bne.n	80055ce <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800566c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800566e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005670:	3301      	adds	r3, #1
 8005672:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005674:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005676:	3b01      	subs	r3, #1
 8005678:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800567a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800567c:	3b01      	subs	r3, #1
 800567e:	b29b      	uxth	r3, r3
 8005680:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005682:	e7b5      	b.n	80055f0 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8005684:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005686:	9600      	str	r6, [sp, #0]
 8005688:	463b      	mov	r3, r7
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	4641      	mov	r1, r8
 8005690:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8005692:	d119      	bne.n	80056c8 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005694:	f7ff fc4e 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8005698:	2800      	cmp	r0, #0
 800569a:	d198      	bne.n	80055ce <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056aa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80056ac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80056ae:	1c53      	adds	r3, r2, #1
 80056b0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80056b2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80056b4:	3b01      	subs	r3, #1
 80056b6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80056b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	7053      	strb	r3, [r2, #1]
 80056c6:	e7d2      	b.n	800566e <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056c8:	f7ff fc34 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 80056cc:	4602      	mov	r2, r0
 80056ce:	2800      	cmp	r0, #0
 80056d0:	f47f af7d 	bne.w	80055ce <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	6819      	ldr	r1, [r3, #0]
 80056d8:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80056dc:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056de:	6919      	ldr	r1, [r3, #16]
 80056e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056e2:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80056e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056e6:	3301      	adds	r3, #1
 80056e8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80056ea:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80056ec:	3b01      	subs	r3, #1
 80056ee:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80056f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056f8:	4641      	mov	r1, r8
 80056fa:	9600      	str	r6, [sp, #0]
 80056fc:	463b      	mov	r3, r7
 80056fe:	4620      	mov	r0, r4
 8005700:	e7c8      	b.n	8005694 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005702:	4632      	mov	r2, r6
 8005704:	4639      	mov	r1, r7
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff fdad 	bl	8005266 <I2C_WaitOnRXNEFlagUntilTimeout>
 800570c:	2800      	cmp	r0, #0
 800570e:	f47f af5e 	bne.w	80055ce <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005718:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800571a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800571c:	1c53      	adds	r3, r2, #1
 800571e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8005720:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8005726:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005728:	3b01      	subs	r3, #1
 800572a:	b29b      	uxth	r3, r3
 800572c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	6959      	ldr	r1, [r3, #20]
 8005732:	0749      	lsls	r1, r1, #29
 8005734:	f57f af5c 	bpl.w	80055f0 <HAL_I2C_Mem_Read+0xb8>
 8005738:	e7c3      	b.n	80056c2 <HAL_I2C_Mem_Read+0x18a>
 800573a:	bf00      	nop
 800573c:	00100002 	.word	0x00100002
 8005740:	ffff0000 	.word	0xffff0000
 8005744:	00010004 	.word	0x00010004

08005748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005748:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800574e:	2b20      	cmp	r3, #32
 8005750:	b2dc      	uxtb	r4, r3
 8005752:	d116      	bne.n	8005782 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005754:	2324      	movs	r3, #36	@ 0x24
 8005756:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800575a:	6803      	ldr	r3, [r0, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005766:	f022 0210 	bic.w	r2, r2, #16
 800576a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800576c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576e:	4311      	orrs	r1, r2
 8005770:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	f042 0201 	orr.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800577a:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 800577e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005780:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005782:	2002      	movs	r0, #2
 8005784:	e7fc      	b.n	8005780 <HAL_I2CEx_ConfigAnalogFilter+0x38>

08005786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005786:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005788:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800578c:	2b20      	cmp	r3, #32
 800578e:	b2dc      	uxtb	r4, r3
 8005790:	d116      	bne.n	80057c0 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005792:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005794:	2324      	movs	r3, #36	@ 0x24
 8005796:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800579a:	6813      	ldr	r3, [r2, #0]
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80057a2:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80057a4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80057a8:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80057aa:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057b0:	6813      	ldr	r3, [r2, #0]
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b8:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 80057bc:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80057be:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 80057c0:	2002      	movs	r0, #2
 80057c2:	e7fc      	b.n	80057be <HAL_I2CEx_ConfigDigitalFilter+0x38>

080057c4 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80057c4:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057c6:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80057ca:	01d2      	lsls	r2, r2, #7
 80057cc:	3284      	adds	r2, #132	@ 0x84
 80057ce:	1883      	adds	r3, r0, r2
{
 80057d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80057d4:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80057d6:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80057d8:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80057da:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80057de:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80057e2:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80057e4:	68c5      	ldr	r5, [r0, #12]
 80057e6:	f10c 0701 	add.w	r7, ip, #1
 80057ea:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80057ee:	f3c6 460b 	ubfx	r6, r6, #16, #12
 80057f2:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80057f4:	443d      	add	r5, r7
 80057f6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057fa:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80057fc:	68c6      	ldr	r6, [r0, #12]
 80057fe:	68cd      	ldr	r5, [r1, #12]
 8005800:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005804:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005806:	689d      	ldr	r5, [r3, #8]
 8005808:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800580c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800580e:	68c7      	ldr	r7, [r0, #12]
 8005810:	688d      	ldr	r5, [r1, #8]
 8005812:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005816:	3501      	adds	r5, #1
 8005818:	443d      	add	r5, r7
 800581a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 800581e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005820:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005822:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005824:	f025 0507 	bic.w	r5, r5, #7
 8005828:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800582a:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800582e:	611e      	str	r6, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005830:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005834:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005836:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800583a:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800583e:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8005842:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005846:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800584a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800584e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005850:	695d      	ldr	r5, [r3, #20]
 8005852:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8005856:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005858:	694d      	ldr	r5, [r1, #20]
 800585a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800585c:	69dd      	ldr	r5, [r3, #28]
 800585e:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8005862:	f025 0507 	bic.w	r5, r5, #7
 8005866:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005868:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800586c:	433d      	orrs	r5, r7
 800586e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005870:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005872:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005874:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005878:	2e07      	cmp	r6, #7
 800587a:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800587c:	bf9c      	itt	ls
 800587e:	4d0e      	ldrls	r5, [pc, #56]	@ (80058b8 <LTDC_SetConfig+0xf4>)
 8005880:	5dae      	ldrbls	r6, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005882:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8005884:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 8005888:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800588a:	bf88      	it	hi
 800588c:	2601      	movhi	r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800588e:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005890:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005892:	eba4 040c 	sub.w	r4, r4, ip
 8005896:	4374      	muls	r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005898:	4375      	muls	r5, r6
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800589a:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800589c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80058a0:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80058a2:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80058a4:	f36f 040a 	bfc	r4, #0, #11
 80058a8:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80058aa:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80058ac:	5883      	ldr	r3, [r0, r2]
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	5083      	str	r3, [r0, r2]
}
 80058b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058b8:	08015a84 	.word	0x08015a84

080058bc <HAL_LTDC_Init>:
{
 80058bc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80058be:	4604      	mov	r4, r0
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d063      	beq.n	800598c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80058c4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80058c8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80058cc:	b91b      	cbnz	r3, 80058d6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80058ce:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80058d2:	f7fb fe23 	bl	800151c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058d6:	2302      	movs	r3, #2
 80058d8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80058e4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058e6:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80058ea:	4302      	orrs	r2, r0
 80058ec:	68e0      	ldr	r0, [r4, #12]
 80058ee:	6999      	ldr	r1, [r3, #24]
 80058f0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058f2:	6920      	ldr	r0, [r4, #16]
 80058f4:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058f6:	430a      	orrs	r2, r1
 80058f8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	4924      	ldr	r1, [pc, #144]	@ (8005990 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80058fe:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005900:	400a      	ands	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800590a:	69a0      	ldr	r0, [r4, #24]
 800590c:	4302      	orrs	r2, r0
 800590e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005910:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005912:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005914:	400a      	ands	r2, r1
 8005916:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800591e:	6a20      	ldr	r0, [r4, #32]
 8005920:	4302      	orrs	r2, r0
 8005922:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005924:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005926:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005928:	400a      	ands	r2, r1
 800592a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005932:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005934:	4302      	orrs	r2, r0
 8005936:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	400a      	ands	r2, r1
 800593c:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800593e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005940:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005942:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005946:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005948:	430a      	orrs	r2, r1
 800594a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800594c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800594e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005952:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005956:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800595a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800595c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800595e:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8005962:	432a      	orrs	r2, r5
 8005964:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005968:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800596c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800596e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005970:	f042 0206 	orr.w	r2, r2, #6
 8005974:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800597e:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8005980:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005982:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005986:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800598a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800598c:	2001      	movs	r0, #1
 800598e:	e7fc      	b.n	800598a <HAL_LTDC_Init+0xce>
 8005990:	f000f800 	.word	0xf000f800

08005994 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8005994:	4770      	bx	lr

08005996 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8005996:	4770      	bx	lr

08005998 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005998:	6803      	ldr	r3, [r0, #0]
{
 800599a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800599c:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800599e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80059a0:	0772      	lsls	r2, r6, #29
{
 80059a2:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80059a4:	d514      	bpl.n	80059d0 <HAL_LTDC_IRQHandler+0x38>
 80059a6:	0769      	lsls	r1, r5, #29
 80059a8:	d512      	bpl.n	80059d0 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80059aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ac:	f022 0204 	bic.w	r2, r2, #4
 80059b0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80059b2:	2204      	movs	r2, #4
 80059b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80059b6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80059c2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80059c4:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80059c8:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80059cc:	f7ff ffe2 	bl	8005994 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80059d0:	07b2      	lsls	r2, r6, #30
 80059d2:	d516      	bpl.n	8005a02 <HAL_LTDC_IRQHandler+0x6a>
 80059d4:	07ab      	lsls	r3, r5, #30
 80059d6:	d514      	bpl.n	8005a02 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059dc:	f022 0202 	bic.w	r2, r2, #2
 80059e0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80059e2:	2202      	movs	r2, #2
 80059e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80059e6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80059f0:	2304      	movs	r3, #4
 80059f2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80059f6:	2300      	movs	r3, #0
 80059f8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80059fc:	4620      	mov	r0, r4
 80059fe:	f7ff ffc9 	bl	8005994 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005a02:	07f0      	lsls	r0, r6, #31
 8005a04:	d510      	bpl.n	8005a28 <HAL_LTDC_IRQHandler+0x90>
 8005a06:	07e9      	lsls	r1, r5, #31
 8005a08:	d50e      	bpl.n	8005a28 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005a14:	2201      	movs	r2, #1
 8005a16:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8005a18:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005a1a:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005a1e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7fc fe1c 	bl	8002660 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005a28:	0732      	lsls	r2, r6, #28
 8005a2a:	d511      	bpl.n	8005a50 <HAL_LTDC_IRQHandler+0xb8>
 8005a2c:	072b      	lsls	r3, r5, #28
 8005a2e:	d50f      	bpl.n	8005a50 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a34:	f022 0208 	bic.w	r2, r2, #8
 8005a38:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005a44:	2300      	movs	r3, #0
 8005a46:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff ffa3 	bl	8005996 <HAL_LTDC_ReloadEventCallback>
}
 8005a50:	bd70      	pop	{r4, r5, r6, pc}

08005a52 <HAL_LTDC_ConfigLayer>:
{
 8005a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005a56:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8005a5a:	2b01      	cmp	r3, #1
{
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	4694      	mov	ip, r2
 8005a62:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8005a66:	d01f      	beq.n	8005aa8 <HAL_LTDC_ConfigLayer+0x56>
 8005a68:	f04f 0801 	mov.w	r8, #1
 8005a6c:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a70:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a74:	2434      	movs	r4, #52	@ 0x34
 8005a76:	460d      	mov	r5, r1
 8005a78:	fb04 6402 	mla	r4, r4, r2, r6
 8005a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a7e:	3438      	adds	r4, #56	@ 0x38
 8005a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a8a:	682b      	ldr	r3, [r5, #0]
 8005a8c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a8e:	4630      	mov	r0, r6
 8005a90:	4662      	mov	r2, ip
 8005a92:	4639      	mov	r1, r7
 8005a94:	f7ff fe96 	bl	80057c4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a98:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005a9a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a9c:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005aa0:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8005aa4:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8005aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005aac <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005aac:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 8005ab0:	2a01      	cmp	r2, #1
{
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8005ab8:	d012      	beq.n	8005ae0 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005aba:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005abc:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ac0:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8005ac2:	f020 0001 	bic.w	r0, r0, #1
 8005ac6:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005ac8:	4806      	ldr	r0, [pc, #24]	@ (8005ae4 <HAL_LTDC_ProgramLineEvent+0x38>)
 8005aca:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005acc:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8005ace:	f041 0101 	orr.w	r1, r1, #1
 8005ad2:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 8005ad4:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8005adc:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40016800 	.word	0x40016800

08005ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005aec:	4604      	mov	r4, r0
 8005aee:	b340      	cbz	r0, 8005b42 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af0:	6803      	ldr	r3, [r0, #0]
 8005af2:	07de      	lsls	r6, r3, #31
 8005af4:	d410      	bmi.n	8005b18 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	079d      	lsls	r5, r3, #30
 8005afa:	d45b      	bmi.n	8005bb4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	0719      	lsls	r1, r3, #28
 8005b00:	f100 809d 	bmi.w	8005c3e <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	075a      	lsls	r2, r3, #29
 8005b08:	f100 80bd 	bmi.w	8005c86 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0c:	69a3      	ldr	r3, [r4, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 8124 	bne.w	8005d5c <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005b14:	2000      	movs	r0, #0
 8005b16:	e02c      	b.n	8005b72 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b18:	4b8d      	ldr	r3, [pc, #564]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	f002 020c 	and.w	r2, r2, #12
 8005b20:	2a04      	cmp	r2, #4
 8005b22:	d007      	beq.n	8005b34 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b2a:	2a08      	cmp	r2, #8
 8005b2c:	d10b      	bne.n	8005b46 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	0259      	lsls	r1, r3, #9
 8005b32:	d508      	bpl.n	8005b46 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	4b86      	ldr	r3, [pc, #536]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	039a      	lsls	r2, r3, #14
 8005b3a:	d5dc      	bpl.n	8005af6 <HAL_RCC_OscConfig+0xe>
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1d9      	bne.n	8005af6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8005b42:	2001      	movs	r0, #1
 8005b44:	e015      	b.n	8005b72 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b46:	6863      	ldr	r3, [r4, #4]
 8005b48:	4d81      	ldr	r5, [pc, #516]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
 8005b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b4e:	d113      	bne.n	8005b78 <HAL_RCC_OscConfig+0x90>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005b58:	f7fe ff58 	bl	8004a0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5c:	4e7c      	ldr	r6, [pc, #496]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005b5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	039b      	lsls	r3, r3, #14
 8005b64:	d4c7      	bmi.n	8005af6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b66:	f7fe ff51 	bl	8004a0c <HAL_GetTick>
 8005b6a:	1b40      	subs	r0, r0, r5
 8005b6c:	2864      	cmp	r0, #100	@ 0x64
 8005b6e:	d9f7      	bls.n	8005b60 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8005b70:	2003      	movs	r0, #3
}
 8005b72:	b002      	add	sp, #8
 8005b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b7c:	d104      	bne.n	8005b88 <HAL_RCC_OscConfig+0xa0>
 8005b7e:	682b      	ldr	r3, [r5, #0]
 8005b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	e7e3      	b.n	8005b50 <HAL_RCC_OscConfig+0x68>
 8005b88:	682a      	ldr	r2, [r5, #0]
 8005b8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b8e:	602a      	str	r2, [r5, #0]
 8005b90:	682a      	ldr	r2, [r5, #0]
 8005b92:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b96:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1dd      	bne.n	8005b58 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8005b9c:	f7fe ff36 	bl	8004a0c <HAL_GetTick>
 8005ba0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba2:	682b      	ldr	r3, [r5, #0]
 8005ba4:	039f      	lsls	r7, r3, #14
 8005ba6:	d5a6      	bpl.n	8005af6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba8:	f7fe ff30 	bl	8004a0c <HAL_GetTick>
 8005bac:	1b80      	subs	r0, r0, r6
 8005bae:	2864      	cmp	r0, #100	@ 0x64
 8005bb0:	d9f7      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xba>
 8005bb2:	e7dd      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bb4:	4b66      	ldr	r3, [pc, #408]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	f012 0f0c 	tst.w	r2, #12
 8005bbc:	d007      	beq.n	8005bce <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bc4:	2a08      	cmp	r2, #8
 8005bc6:	d111      	bne.n	8005bec <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	025d      	lsls	r5, r3, #9
 8005bcc:	d40e      	bmi.n	8005bec <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bce:	4a60      	ldr	r2, [pc, #384]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	0799      	lsls	r1, r3, #30
 8005bd4:	d502      	bpl.n	8005bdc <HAL_RCC_OscConfig+0xf4>
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d1b2      	bne.n	8005b42 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bdc:	6813      	ldr	r3, [r2, #0]
 8005bde:	6921      	ldr	r1, [r4, #16]
 8005be0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005be4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005be8:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bea:	e787      	b.n	8005afc <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bec:	68e2      	ldr	r2, [r4, #12]
 8005bee:	4b59      	ldr	r3, [pc, #356]	@ (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	b1b2      	cbz	r2, 8005c20 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005bf6:	f7fe ff09 	bl	8004a0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfa:	4d55      	ldr	r5, [pc, #340]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005bfc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfe:	682b      	ldr	r3, [r5, #0]
 8005c00:	079b      	lsls	r3, r3, #30
 8005c02:	d507      	bpl.n	8005c14 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	6922      	ldr	r2, [r4, #16]
 8005c08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005c0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005c10:	602b      	str	r3, [r5, #0]
 8005c12:	e773      	b.n	8005afc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c14:	f7fe fefa 	bl	8004a0c <HAL_GetTick>
 8005c18:	1b80      	subs	r0, r0, r6
 8005c1a:	2802      	cmp	r0, #2
 8005c1c:	d9ef      	bls.n	8005bfe <HAL_RCC_OscConfig+0x116>
 8005c1e:	e7a7      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005c20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005c22:	f7fe fef3 	bl	8004a0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c26:	4e4a      	ldr	r6, [pc, #296]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005c28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2a:	6833      	ldr	r3, [r6, #0]
 8005c2c:	079f      	lsls	r7, r3, #30
 8005c2e:	f57f af65 	bpl.w	8005afc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c32:	f7fe feeb 	bl	8004a0c <HAL_GetTick>
 8005c36:	1b40      	subs	r0, r0, r5
 8005c38:	2802      	cmp	r0, #2
 8005c3a:	d9f6      	bls.n	8005c2a <HAL_RCC_OscConfig+0x142>
 8005c3c:	e798      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c3e:	6962      	ldr	r2, [r4, #20]
 8005c40:	4b44      	ldr	r3, [pc, #272]	@ (8005d54 <HAL_RCC_OscConfig+0x26c>)
 8005c42:	b182      	cbz	r2, 8005c66 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8005c44:	2201      	movs	r2, #1
 8005c46:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005c4a:	f7fe fedf 	bl	8004a0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4e:	4e40      	ldr	r6, [pc, #256]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005c50:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c52:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005c54:	079b      	lsls	r3, r3, #30
 8005c56:	f53f af55 	bmi.w	8005b04 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fe fed7 	bl	8004a0c <HAL_GetTick>
 8005c5e:	1b40      	subs	r0, r0, r5
 8005c60:	2802      	cmp	r0, #2
 8005c62:	d9f6      	bls.n	8005c52 <HAL_RCC_OscConfig+0x16a>
 8005c64:	e784      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8005c66:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005c6a:	f7fe fecf 	bl	8004a0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c6e:	4e38      	ldr	r6, [pc, #224]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005c70:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c72:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005c74:	079f      	lsls	r7, r3, #30
 8005c76:	f57f af45 	bpl.w	8005b04 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c7a:	f7fe fec7 	bl	8004a0c <HAL_GetTick>
 8005c7e:	1b40      	subs	r0, r0, r5
 8005c80:	2802      	cmp	r0, #2
 8005c82:	d9f6      	bls.n	8005c72 <HAL_RCC_OscConfig+0x18a>
 8005c84:	e774      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c86:	4b32      	ldr	r3, [pc, #200]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
 8005c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c8a:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8005c8e:	d128      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c90:	9201      	str	r2, [sp, #4]
 8005c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c94:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005c98:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca0:	9301      	str	r3, [sp, #4]
 8005ca2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005ca4:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca6:	4d2c      	ldr	r5, [pc, #176]	@ (8005d58 <HAL_RCC_OscConfig+0x270>)
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	05d8      	lsls	r0, r3, #23
 8005cac:	d51b      	bpl.n	8005ce6 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	4d27      	ldr	r5, [pc, #156]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d127      	bne.n	8005d06 <HAL_RCC_OscConfig+0x21e>
 8005cb6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005cbe:	f7fe fea5 	bl	8004a0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc2:	4e23      	ldr	r6, [pc, #140]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005cc4:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cca:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005ccc:	079a      	lsls	r2, r3, #30
 8005cce:	d539      	bpl.n	8005d44 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8005cd0:	2f00      	cmp	r7, #0
 8005cd2:	f43f af1b 	beq.w	8005b0c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d50 <HAL_RCC_OscConfig+0x268>)
 8005cd8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ce0:	e714      	b.n	8005b0c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005ce2:	2700      	movs	r7, #0
 8005ce4:	e7df      	b.n	8005ca6 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ce6:	682b      	ldr	r3, [r5, #0]
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005cee:	f7fe fe8d 	bl	8004a0c <HAL_GetTick>
 8005cf2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	05d9      	lsls	r1, r3, #23
 8005cf8:	d4d9      	bmi.n	8005cae <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cfa:	f7fe fe87 	bl	8004a0c <HAL_GetTick>
 8005cfe:	1b80      	subs	r0, r0, r6
 8005d00:	2802      	cmp	r0, #2
 8005d02:	d9f7      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x20c>
 8005d04:	e734      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d104      	bne.n	8005d14 <HAL_RCC_OscConfig+0x22c>
 8005d0a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005d0c:	f043 0304 	orr.w	r3, r3, #4
 8005d10:	672b      	str	r3, [r5, #112]	@ 0x70
 8005d12:	e7d0      	b.n	8005cb6 <HAL_RCC_OscConfig+0x1ce>
 8005d14:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	672a      	str	r2, [r5, #112]	@ 0x70
 8005d1c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005d1e:	f022 0204 	bic.w	r2, r2, #4
 8005d22:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1ca      	bne.n	8005cbe <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005d28:	f7fe fe70 	bl	8004a0c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d2c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005d30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d32:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005d34:	079b      	lsls	r3, r3, #30
 8005d36:	d5cb      	bpl.n	8005cd0 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fe fe68 	bl	8004a0c <HAL_GetTick>
 8005d3c:	1b80      	subs	r0, r0, r6
 8005d3e:	4540      	cmp	r0, r8
 8005d40:	d9f7      	bls.n	8005d32 <HAL_RCC_OscConfig+0x24a>
 8005d42:	e715      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d44:	f7fe fe62 	bl	8004a0c <HAL_GetTick>
 8005d48:	1b40      	subs	r0, r0, r5
 8005d4a:	4540      	cmp	r0, r8
 8005d4c:	d9bd      	bls.n	8005cca <HAL_RCC_OscConfig+0x1e2>
 8005d4e:	e70f      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
 8005d50:	40023800 	.word	0x40023800
 8005d54:	42470000 	.word	0x42470000
 8005d58:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d5c:	4d37      	ldr	r5, [pc, #220]	@ (8005e3c <HAL_RCC_OscConfig+0x354>)
 8005d5e:	68aa      	ldr	r2, [r5, #8]
 8005d60:	f002 020c 	and.w	r2, r2, #12
 8005d64:	2a08      	cmp	r2, #8
 8005d66:	d03e      	beq.n	8005de6 <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	4b35      	ldr	r3, [pc, #212]	@ (8005e40 <HAL_RCC_OscConfig+0x358>)
 8005d6c:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8005d70:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d72:	d12b      	bne.n	8005dcc <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8005d74:	f7fe fe4a 	bl	8004a0c <HAL_GetTick>
 8005d78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7a:	682b      	ldr	r3, [r5, #0]
 8005d7c:	0199      	lsls	r1, r3, #6
 8005d7e:	d41f      	bmi.n	8005dc0 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d80:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005d88:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005d8c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005d8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d92:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005d94:	0852      	lsrs	r2, r2, #1
 8005d96:	3a01      	subs	r2, #1
 8005d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d9c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005d9e:	4b28      	ldr	r3, [pc, #160]	@ (8005e40 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da0:	4d26      	ldr	r5, [pc, #152]	@ (8005e3c <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8005da2:	2201      	movs	r2, #1
 8005da4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005da6:	f7fe fe31 	bl	8004a0c <HAL_GetTick>
 8005daa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	019a      	lsls	r2, r3, #6
 8005db0:	f53f aeb0 	bmi.w	8005b14 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db4:	f7fe fe2a 	bl	8004a0c <HAL_GetTick>
 8005db8:	1b00      	subs	r0, r0, r4
 8005dba:	2802      	cmp	r0, #2
 8005dbc:	d9f6      	bls.n	8005dac <HAL_RCC_OscConfig+0x2c4>
 8005dbe:	e6d7      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc0:	f7fe fe24 	bl	8004a0c <HAL_GetTick>
 8005dc4:	1b80      	subs	r0, r0, r6
 8005dc6:	2802      	cmp	r0, #2
 8005dc8:	d9d7      	bls.n	8005d7a <HAL_RCC_OscConfig+0x292>
 8005dca:	e6d1      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8005dcc:	f7fe fe1e 	bl	8004a0c <HAL_GetTick>
 8005dd0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	019b      	lsls	r3, r3, #6
 8005dd6:	f57f ae9d 	bpl.w	8005b14 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dda:	f7fe fe17 	bl	8004a0c <HAL_GetTick>
 8005dde:	1b00      	subs	r0, r0, r4
 8005de0:	2802      	cmp	r0, #2
 8005de2:	d9f6      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x2ea>
 8005de4:	e6c4      	b.n	8005b70 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	f43f aeab 	beq.w	8005b42 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8005dec:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dee:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df4:	4291      	cmp	r1, r2
 8005df6:	f47f aea4 	bne.w	8005b42 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfa:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dfc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e00:	428a      	cmp	r2, r1
 8005e02:	f47f ae9e 	bne.w	8005b42 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e06:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e08:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005e0c:	401a      	ands	r2, r3
 8005e0e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005e12:	f47f ae96 	bne.w	8005b42 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e16:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005e18:	0852      	lsrs	r2, r2, #1
 8005e1a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005e1e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e20:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005e24:	f47f ae8d 	bne.w	8005b42 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e28:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005e2a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e2e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005e32:	bf14      	ite	ne
 8005e34:	2001      	movne	r0, #1
 8005e36:	2000      	moveq	r0, #0
 8005e38:	e69b      	b.n	8005b72 <HAL_RCC_OscConfig+0x8a>
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	42470000 	.word	0x42470000

08005e44 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e44:	4913      	ldr	r1, [pc, #76]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005e46:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e48:	688b      	ldr	r3, [r1, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d01c      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0x48>
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d11c      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e56:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e58:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e5a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e5c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e60:	bf14      	ite	ne
 8005e62:	480d      	ldrne	r0, [pc, #52]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e64:	480d      	ldreq	r0, [pc, #52]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e66:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005e6a:	bf18      	it	ne
 8005e6c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e6e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e72:	fba1 0100 	umull	r0, r1, r1, r0
 8005e76:	f7fa fa0b 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e7a:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x50>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005e82:	3301      	adds	r3, #1
 8005e84:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005e86:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005e8a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e8c:	4802      	ldr	r0, [pc, #8]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x54>)
 8005e8e:	e7fc      	b.n	8005e8a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8005e90:	4802      	ldr	r0, [pc, #8]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005e92:	e7fa      	b.n	8005e8a <HAL_RCC_GetSysClockFreq+0x46>
 8005e94:	40023800 	.word	0x40023800
 8005e98:	007a1200 	.word	0x007a1200
 8005e9c:	00f42400 	.word	0x00f42400

08005ea0 <HAL_RCC_ClockConfig>:
{
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	b910      	cbnz	r0, 8005eb0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005eaa:	2001      	movs	r0, #1
}
 8005eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb0:	4b43      	ldr	r3, [pc, #268]	@ (8005fc0 <HAL_RCC_ClockConfig+0x120>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	f002 020f 	and.w	r2, r2, #15
 8005eb8:	428a      	cmp	r2, r1
 8005eba:	d328      	bcc.n	8005f0e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ebc:	6821      	ldr	r1, [r4, #0]
 8005ebe:	078f      	lsls	r7, r1, #30
 8005ec0:	d42d      	bmi.n	8005f1e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ec2:	07c8      	lsls	r0, r1, #31
 8005ec4:	d440      	bmi.n	8005f48 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc0 <HAL_RCC_ClockConfig+0x120>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	f002 020f 	and.w	r2, r2, #15
 8005ece:	42aa      	cmp	r2, r5
 8005ed0:	d865      	bhi.n	8005f9e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	0751      	lsls	r1, r2, #29
 8005ed6:	d46b      	bmi.n	8005fb0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed8:	0713      	lsls	r3, r2, #28
 8005eda:	d507      	bpl.n	8005eec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005edc:	4a39      	ldr	r2, [pc, #228]	@ (8005fc4 <HAL_RCC_ClockConfig+0x124>)
 8005ede:	6921      	ldr	r1, [r4, #16]
 8005ee0:	6893      	ldr	r3, [r2, #8]
 8005ee2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005ee6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005eea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eec:	f7ff ffaa 	bl	8005e44 <HAL_RCC_GetSysClockFreq>
 8005ef0:	4b34      	ldr	r3, [pc, #208]	@ (8005fc4 <HAL_RCC_ClockConfig+0x124>)
 8005ef2:	4a35      	ldr	r2, [pc, #212]	@ (8005fc8 <HAL_RCC_ClockConfig+0x128>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005efa:	5cd3      	ldrb	r3, [r2, r3]
 8005efc:	40d8      	lsrs	r0, r3
 8005efe:	4b33      	ldr	r3, [pc, #204]	@ (8005fcc <HAL_RCC_ClockConfig+0x12c>)
 8005f00:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005f02:	4b33      	ldr	r3, [pc, #204]	@ (8005fd0 <HAL_RCC_ClockConfig+0x130>)
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f7fb fcd3 	bl	80018b0 <HAL_InitTick>
  return HAL_OK;
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e7ce      	b.n	8005eac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0e:	b2ca      	uxtb	r2, r1
 8005f10:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	428b      	cmp	r3, r1
 8005f1a:	d1c6      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xa>
 8005f1c:	e7ce      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1e:	4b29      	ldr	r3, [pc, #164]	@ (8005fc4 <HAL_RCC_ClockConfig+0x124>)
 8005f20:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f24:	bf1e      	ittt	ne
 8005f26:	689a      	ldrne	r2, [r3, #8]
 8005f28:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8005f2c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f30:	bf42      	ittt	mi
 8005f32:	689a      	ldrmi	r2, [r3, #8]
 8005f34:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005f38:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	68a0      	ldr	r0, [r4, #8]
 8005f3e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005f42:	4302      	orrs	r2, r0
 8005f44:	609a      	str	r2, [r3, #8]
 8005f46:	e7bc      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f48:	6862      	ldr	r2, [r4, #4]
 8005f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fc4 <HAL_RCC_ClockConfig+0x124>)
 8005f4c:	2a01      	cmp	r2, #1
 8005f4e:	d11c      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f56:	d0a8      	beq.n	8005eaa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f58:	4e1a      	ldr	r6, [pc, #104]	@ (8005fc4 <HAL_RCC_ClockConfig+0x124>)
 8005f5a:	68b3      	ldr	r3, [r6, #8]
 8005f5c:	f023 0303 	bic.w	r3, r3, #3
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005f64:	f7fe fd52 	bl	8004a0c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f68:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005f6c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6e:	68b3      	ldr	r3, [r6, #8]
 8005f70:	6862      	ldr	r2, [r4, #4]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005f7a:	d0a4      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f7c:	f7fe fd46 	bl	8004a0c <HAL_GetTick>
 8005f80:	1bc0      	subs	r0, r0, r7
 8005f82:	4540      	cmp	r0, r8
 8005f84:	d9f3      	bls.n	8005f6e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8005f86:	2003      	movs	r0, #3
 8005f88:	e790      	b.n	8005eac <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f8a:	1e91      	subs	r1, r2, #2
 8005f8c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f90:	d802      	bhi.n	8005f98 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f92:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005f96:	e7de      	b.n	8005f56 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f98:	f013 0f02 	tst.w	r3, #2
 8005f9c:	e7db      	b.n	8005f56 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f9e:	b2ea      	uxtb	r2, r5
 8005fa0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	42ab      	cmp	r3, r5
 8005faa:	f47f af7e 	bne.w	8005eaa <HAL_RCC_ClockConfig+0xa>
 8005fae:	e790      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fb0:	4904      	ldr	r1, [pc, #16]	@ (8005fc4 <HAL_RCC_ClockConfig+0x124>)
 8005fb2:	68e0      	ldr	r0, [r4, #12]
 8005fb4:	688b      	ldr	r3, [r1, #8]
 8005fb6:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005fba:	4303      	orrs	r3, r0
 8005fbc:	608b      	str	r3, [r1, #8]
 8005fbe:	e78b      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x38>
 8005fc0:	40023c00 	.word	0x40023c00
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	08015a74 	.word	0x08015a74
 8005fcc:	20000078 	.word	0x20000078
 8005fd0:	20000080 	.word	0x20000080

08005fd4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fd4:	4b04      	ldr	r3, [pc, #16]	@ (8005fe8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005fd6:	4a05      	ldr	r2, [pc, #20]	@ (8005fec <HAL_RCC_GetPCLK1Freq+0x18>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005fde:	5cd3      	ldrb	r3, [r2, r3]
 8005fe0:	4a03      	ldr	r2, [pc, #12]	@ (8005ff0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005fe2:	6810      	ldr	r0, [r2, #0]
}
 8005fe4:	40d8      	lsrs	r0, r3
 8005fe6:	4770      	bx	lr
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	08015a6c 	.word	0x08015a6c
 8005ff0:	20000078 	.word	0x20000078

08005ff4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ff4:	4b04      	ldr	r3, [pc, #16]	@ (8006008 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005ff6:	4a05      	ldr	r2, [pc, #20]	@ (800600c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005ffe:	5cd3      	ldrb	r3, [r2, r3]
 8006000:	4a03      	ldr	r2, [pc, #12]	@ (8006010 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006002:	6810      	ldr	r0, [r2, #0]
}
 8006004:	40d8      	lsrs	r0, r3
 8006006:	4770      	bx	lr
 8006008:	40023800 	.word	0x40023800
 800600c:	08015a6c 	.word	0x08015a6c
 8006010:	20000078 	.word	0x20000078

08006014 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006014:	230f      	movs	r3, #15
 8006016:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006018:	4b0b      	ldr	r3, [pc, #44]	@ (8006048 <HAL_RCC_GetClockConfig+0x34>)
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	f002 0203 	and.w	r2, r2, #3
 8006020:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8006028:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8006030:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	08db      	lsrs	r3, r3, #3
 8006036:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800603a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800603c:	4b03      	ldr	r3, [pc, #12]	@ (800604c <HAL_RCC_GetClockConfig+0x38>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	600b      	str	r3, [r1, #0]
}
 8006046:	4770      	bx	lr
 8006048:	40023800 	.word	0x40023800
 800604c:	40023c00 	.word	0x40023c00

08006050 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006050:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006052:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8006056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006058:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800605a:	f040 8088 	bne.w	800616e <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	f013 0f0c 	tst.w	r3, #12
 8006064:	d045      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006066:	4b8c      	ldr	r3, [pc, #560]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006068:	4d8c      	ldr	r5, [pc, #560]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 800606a:	2200      	movs	r2, #0
 800606c:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 800606e:	f7fe fccd 	bl	8004a0c <HAL_GetTick>
 8006072:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	0099      	lsls	r1, r3, #2
 8006078:	f100 80cb 	bmi.w	8006212 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800607c:	6821      	ldr	r1, [r4, #0]
 800607e:	074a      	lsls	r2, r1, #29
 8006080:	d515      	bpl.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006082:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006086:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800608a:	061b      	lsls	r3, r3, #24
 800608c:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8006090:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800609a:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800609e:	6a22      	ldr	r2, [r4, #32]
 80060a0:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80060a4:	3a01      	subs	r2, #1
 80060a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060aa:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060ae:	070b      	lsls	r3, r1, #28
 80060b0:	d514      	bpl.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060b2:	4a7a      	ldr	r2, [pc, #488]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060b4:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060b6:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060ba:	6920      	ldr	r0, [r4, #16]
 80060bc:	071b      	lsls	r3, r3, #28
 80060be:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80060c2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80060c6:	430b      	orrs	r3, r1
 80060c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060cc:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80060d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80060d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80060d6:	430b      	orrs	r3, r1
 80060d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80060dc:	4b6e      	ldr	r3, [pc, #440]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060de:	4e6f      	ldr	r6, [pc, #444]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 80060e0:	2201      	movs	r2, #1
 80060e2:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 80060e4:	f7fe fc92 	bl	8004a0c <HAL_GetTick>
 80060e8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060ea:	6833      	ldr	r3, [r6, #0]
 80060ec:	009f      	lsls	r7, r3, #2
 80060ee:	f140 8097 	bpl.w	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	0698      	lsls	r0, r3, #26
 80060f6:	d534      	bpl.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060f8:	2300      	movs	r3, #0
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	4b67      	ldr	r3, [pc, #412]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060fe:	4d68      	ldr	r5, [pc, #416]	@ (80062a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006102:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006106:	641a      	str	r2, [r3, #64]	@ 0x40
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006118:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800611a:	f7fe fc77 	bl	8004a0c <HAL_GetTick>
 800611e:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	05d8      	lsls	r0, r3, #23
 8006124:	f140 8083 	bpl.w	800622e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006128:	4d5c      	ldr	r5, [pc, #368]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800612a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800612c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800612e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006132:	f040 8083 	bne.w	800623c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006136:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006138:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800613c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8006140:	4a56      	ldr	r2, [pc, #344]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006142:	f040 809e 	bne.w	8006282 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8006146:	6891      	ldr	r1, [r2, #8]
 8006148:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 800614c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8006150:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8006154:	4301      	orrs	r1, r0
 8006156:	6091      	str	r1, [r2, #8]
 8006158:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800615a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800615e:	430b      	orrs	r3, r1
 8006160:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	06db      	lsls	r3, r3, #27
 8006166:	f100 8090 	bmi.w	800628a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 800616a:	2000      	movs	r0, #0
 800616c:	e04f      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 800616e:	4b4a      	ldr	r3, [pc, #296]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006170:	4e4a      	ldr	r6, [pc, #296]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8006172:	2200      	movs	r2, #0
 8006174:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8006176:	f7fe fc49 	bl	8004a0c <HAL_GetTick>
 800617a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	011f      	lsls	r7, r3, #4
 8006180:	d43f      	bmi.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006186:	bf41      	itttt	mi
 8006188:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 800618c:	071b      	lslmi	r3, r3, #28
 800618e:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8006192:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006196:	078a      	lsls	r2, r1, #30
 8006198:	d515      	bpl.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800619a:	4a40      	ldr	r2, [pc, #256]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800619c:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800619e:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80061a2:	6865      	ldr	r5, [r4, #4]
 80061a4:	061b      	lsls	r3, r3, #24
 80061a6:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80061aa:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80061ae:	4303      	orrs	r3, r0
 80061b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061b4:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 80061b8:	69e3      	ldr	r3, [r4, #28]
 80061ba:	f020 001f 	bic.w	r0, r0, #31
 80061be:	3b01      	subs	r3, #1
 80061c0:	4303      	orrs	r3, r0
 80061c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061c6:	064b      	lsls	r3, r1, #25
 80061c8:	d50a      	bpl.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80061ca:	68e3      	ldr	r3, [r4, #12]
 80061cc:	6862      	ldr	r2, [r4, #4]
 80061ce:	061b      	lsls	r3, r3, #24
 80061d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80061d4:	68a2      	ldr	r2, [r4, #8]
 80061d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80061da:	4a30      	ldr	r2, [pc, #192]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80061dc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80061e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e2:	4e2e      	ldr	r6, [pc, #184]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 80061e4:	2201      	movs	r2, #1
 80061e6:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80061e8:	f7fe fc10 	bl	8004a0c <HAL_GetTick>
 80061ec:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061ee:	6833      	ldr	r3, [r6, #0]
 80061f0:	011f      	lsls	r7, r3, #4
 80061f2:	f53f af34 	bmi.w	800605e <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061f6:	f7fe fc09 	bl	8004a0c <HAL_GetTick>
 80061fa:	1b40      	subs	r0, r0, r5
 80061fc:	2802      	cmp	r0, #2
 80061fe:	d9f6      	bls.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006200:	e004      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006202:	f7fe fc03 	bl	8004a0c <HAL_GetTick>
 8006206:	1b40      	subs	r0, r0, r5
 8006208:	2802      	cmp	r0, #2
 800620a:	d9b7      	bls.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 800620c:	2003      	movs	r0, #3
}
 800620e:	b003      	add	sp, #12
 8006210:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006212:	f7fe fbfb 	bl	8004a0c <HAL_GetTick>
 8006216:	1b80      	subs	r0, r0, r6
 8006218:	2802      	cmp	r0, #2
 800621a:	f67f af2b 	bls.w	8006074 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800621e:	e7f5      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006220:	f7fe fbf4 	bl	8004a0c <HAL_GetTick>
 8006224:	1b40      	subs	r0, r0, r5
 8006226:	2802      	cmp	r0, #2
 8006228:	f67f af5f 	bls.w	80060ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800622c:	e7ee      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800622e:	f7fe fbed 	bl	8004a0c <HAL_GetTick>
 8006232:	1b80      	subs	r0, r0, r6
 8006234:	2802      	cmp	r0, #2
 8006236:	f67f af73 	bls.w	8006120 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800623a:	e7e7      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800623c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8006240:	4293      	cmp	r3, r2
 8006242:	f43f af78 	beq.w	8006136 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006246:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006248:	4a13      	ldr	r2, [pc, #76]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800624a:	2101      	movs	r1, #1
 800624c:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006254:	2100      	movs	r1, #0
 8006256:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 800625a:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800625c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	f57f af69 	bpl.w	8006136 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8006264:	f7fe fbd2 	bl	8004a0c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800626c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800626e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006270:	079a      	lsls	r2, r3, #30
 8006272:	f53f af60 	bmi.w	8006136 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fe fbc9 	bl	8004a0c <HAL_GetTick>
 800627a:	1b80      	subs	r0, r0, r6
 800627c:	42b8      	cmp	r0, r7
 800627e:	d9f6      	bls.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006280:	e7c4      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006282:	6891      	ldr	r1, [r2, #8]
 8006284:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8006288:	e765      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800628a:	4b06      	ldr	r3, [pc, #24]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800628c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8006290:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8006294:	e769      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8006296:	bf00      	nop
 8006298:	42470000 	.word	0x42470000
 800629c:	40023800 	.word	0x40023800
 80062a0:	40007000 	.word	0x40007000
 80062a4:	42471000 	.word	0x42471000

080062a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80062ac:	4604      	mov	r4, r0
 80062ae:	b1c8      	cbz	r0, 80062e4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80062b0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80062b4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80062b8:	b91b      	cbnz	r3, 80062c2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80062ba:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80062be:	f7fb fa3f 	bl	8001740 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062c2:	2302      	movs	r3, #2
 80062c4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80062c8:	1d21      	adds	r1, r4, #4
 80062ca:	6820      	ldr	r0, [r4, #0]
 80062cc:	f000 fe21 	bl	8006f12 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80062d0:	6862      	ldr	r2, [r4, #4]
 80062d2:	6820      	ldr	r0, [r4, #0]
 80062d4:	4629      	mov	r1, r5
 80062d6:	f000 fe52 	bl	8006f7e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80062da:	2301      	movs	r3, #1
 80062dc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 80062e0:	2000      	movs	r0, #0
}
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80062e4:	2001      	movs	r0, #1
 80062e6:	e7fc      	b.n	80062e2 <HAL_SDRAM_Init+0x3a>

080062e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80062e8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80062ea:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80062ee:	2b02      	cmp	r3, #2
{
 80062f0:	4605      	mov	r5, r0
 80062f2:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80062f4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80062f6:	d012      	beq.n	800631e <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80062f8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80062fc:	2c01      	cmp	r4, #1
 80062fe:	d10f      	bne.n	8006320 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006300:	2302      	movs	r3, #2
 8006302:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006306:	6828      	ldr	r0, [r5, #0]
 8006308:	f000 fe6f 	bl	8006fea <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800630c:	6833      	ldr	r3, [r6, #0]
 800630e:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006310:	bf06      	itte	eq
 8006312:	2305      	moveq	r3, #5
 8006314:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006318:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800631c:	2000      	movs	r0, #0
}
 800631e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006320:	2001      	movs	r0, #1
 8006322:	e7fc      	b.n	800631e <HAL_SDRAM_SendCommand+0x36>

08006324 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006324:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006326:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800632a:	2b02      	cmp	r3, #2
{
 800632c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800632e:	b2d8      	uxtb	r0, r3
 8006330:	d00d      	beq.n	800634e <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006332:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8006336:	2b01      	cmp	r3, #1
 8006338:	b2dd      	uxtb	r5, r3
 800633a:	d109      	bne.n	8006350 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800633c:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800633e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006340:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006344:	f000 fe75 	bl	8007032 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006348:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800634c:	2000      	movs	r0, #0
}
 800634e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006350:	2001      	movs	r0, #1
 8006352:	e7fc      	b.n	800634e <HAL_SDRAM_ProgramRefreshRate+0x2a>

08006354 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006358:	461c      	mov	r4, r3
 800635a:	4616      	mov	r6, r2
 800635c:	460f      	mov	r7, r1
 800635e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006360:	f7fe fb54 	bl	8004a0c <HAL_GetTick>
 8006364:	4434      	add	r4, r6
 8006366:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006368:	f7fe fb50 	bl	8004a0c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800636c:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006374:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006376:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006378:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800637a:	682a      	ldr	r2, [r5, #0]
 800637c:	6893      	ldr	r3, [r2, #8]
 800637e:	ea37 0303 	bics.w	r3, r7, r3
 8006382:	d001      	beq.n	8006388 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 8006384:	2000      	movs	r0, #0
 8006386:	e02e      	b.n	80063e6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8006388:	1c73      	adds	r3, r6, #1
 800638a:	d0f7      	beq.n	800637c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800638c:	f7fe fb3e 	bl	8004a0c <HAL_GetTick>
 8006390:	eba0 0008 	sub.w	r0, r0, r8
 8006394:	42a0      	cmp	r0, r4
 8006396:	d329      	bcc.n	80063ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063a0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a2:	686a      	ldr	r2, [r5, #4]
 80063a4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80063a8:	d10a      	bne.n	80063c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80063aa:	68aa      	ldr	r2, [r5, #8]
 80063ac:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80063b0:	d002      	beq.n	80063b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063b2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80063b6:	d103      	bne.n	80063c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063be:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063c0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80063c2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80063c6:	d107      	bne.n	80063d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063d6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80063d8:	2301      	movs	r3, #1
 80063da:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80063de:	2300      	movs	r3, #0
 80063e0:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 80063e4:	2003      	movs	r0, #3
}
 80063e6:	b002      	add	sp, #8
 80063e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 80063ec:	9a01      	ldr	r2, [sp, #4]
      count--;
 80063ee:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80063f0:	2a00      	cmp	r2, #0
      count--;
 80063f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	bf08      	it	eq
 80063fa:	4614      	moveq	r4, r2
 80063fc:	e7bd      	b.n	800637a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 80063fe:	bf00      	nop
 8006400:	20000078 	.word	0x20000078

08006404 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006408:	6842      	ldr	r2, [r0, #4]
 800640a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 800640e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006410:	d006      	beq.n	8006420 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006412:	460a      	mov	r2, r1
 8006414:	2101      	movs	r1, #1
 8006416:	f7ff ff9d 	bl	8006354 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800641a:	b9b8      	cbnz	r0, 800644c <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800641c:	2000      	movs	r0, #0
}
 800641e:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006420:	6882      	ldr	r2, [r0, #8]
 8006422:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006426:	d002      	beq.n	800642e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006428:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800642c:	d107      	bne.n	800643e <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 800642e:	6825      	ldr	r5, [r4, #0]
 8006430:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006432:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 8006436:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800643a:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800643c:	d003      	beq.n	8006446 <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800643e:	460a      	mov	r2, r1
 8006440:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006442:	4620      	mov	r0, r4
 8006444:	e7e7      	b.n	8006416 <SPI_EndRxTransaction+0x12>
 8006446:	460a      	mov	r2, r1
 8006448:	2101      	movs	r1, #1
 800644a:	e7fa      	b.n	8006442 <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800644e:	f043 0320 	orr.w	r3, r3, #32
 8006452:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006454:	2003      	movs	r0, #3
 8006456:	e7e2      	b.n	800641e <SPI_EndRxTransaction+0x1a>

08006458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800645a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800645c:	4a12      	ldr	r2, [pc, #72]	@ (80064a8 <SPI_EndRxTxTransaction+0x50>)
 800645e:	6815      	ldr	r5, [r2, #0]
 8006460:	4a12      	ldr	r2, [pc, #72]	@ (80064ac <SPI_EndRxTxTransaction+0x54>)
 8006462:	fbb5 f5f2 	udiv	r5, r5, r2
 8006466:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800646a:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800646c:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800646e:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006470:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8006474:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006476:	d10b      	bne.n	8006490 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006478:	460a      	mov	r2, r1
 800647a:	2180      	movs	r1, #128	@ 0x80
 800647c:	f7ff ff6a 	bl	8006354 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006480:	b178      	cbz	r0, 80064a2 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006482:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006484:	f043 0320 	orr.w	r3, r3, #32
 8006488:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 800648a:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 800648c:	b003      	add	sp, #12
 800648e:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8006490:	9b01      	ldr	r3, [sp, #4]
 8006492:	b133      	cbz	r3, 80064a2 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	3b01      	subs	r3, #1
 8006498:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	061b      	lsls	r3, r3, #24
 80064a0:	d4f6      	bmi.n	8006490 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80064a2:	2000      	movs	r0, #0
 80064a4:	e7f2      	b.n	800648c <SPI_EndRxTxTransaction+0x34>
 80064a6:	bf00      	nop
 80064a8:	20000078 	.word	0x20000078
 80064ac:	016e3600 	.word	0x016e3600

080064b0 <HAL_SPI_Init>:
{
 80064b0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80064b2:	4604      	mov	r4, r0
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d055      	beq.n	8006564 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d14e      	bne.n	800655c <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064be:	6842      	ldr	r2, [r0, #4]
 80064c0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80064c4:	d000      	beq.n	80064c8 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064c6:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064c8:	2300      	movs	r3, #0
 80064ca:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80064cc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80064d0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80064d4:	b923      	cbnz	r3, 80064e0 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80064d6:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80064da:	4620      	mov	r0, r4
 80064dc:	f7fb f8fa 	bl	80016d4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80064e0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064e2:	68a0      	ldr	r0, [r4, #8]
 80064e4:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80064e6:	2302      	movs	r3, #2
 80064e8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80064ec:	680b      	ldr	r3, [r1, #0]
 80064ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064f2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80064fa:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80064fe:	4303      	orrs	r3, r0
 8006500:	68e0      	ldr	r0, [r4, #12]
 8006502:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8006506:	4303      	orrs	r3, r0
 8006508:	6920      	ldr	r0, [r4, #16]
 800650a:	f000 0002 	and.w	r0, r0, #2
 800650e:	4303      	orrs	r3, r0
 8006510:	6960      	ldr	r0, [r4, #20]
 8006512:	f000 0001 	and.w	r0, r0, #1
 8006516:	4303      	orrs	r3, r0
 8006518:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 800651c:	4303      	orrs	r3, r0
 800651e:	69e0      	ldr	r0, [r4, #28]
 8006520:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8006524:	4303      	orrs	r3, r0
 8006526:	6a20      	ldr	r0, [r4, #32]
 8006528:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 800652c:	4303      	orrs	r3, r0
 800652e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006530:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8006534:	4303      	orrs	r3, r0
 8006536:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006538:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800653a:	0c12      	lsrs	r2, r2, #16
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	f002 0204 	and.w	r2, r2, #4
 8006544:	431a      	orrs	r2, r3
 8006546:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006548:	69cb      	ldr	r3, [r1, #28]
 800654a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800654e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006550:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006552:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006554:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006556:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 800655a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800655c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800655e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006562:	e7b1      	b.n	80064c8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8006564:	2001      	movs	r0, #1
 8006566:	e7f8      	b.n	800655a <HAL_SPI_Init+0xaa>

08006568 <HAL_SPI_Transmit>:
{
 8006568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800656c:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800656e:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8006572:	2b01      	cmp	r3, #1
{
 8006574:	4604      	mov	r4, r0
 8006576:	460d      	mov	r5, r1
 8006578:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800657a:	f000 80a0 	beq.w	80066be <HAL_SPI_Transmit+0x156>
 800657e:	2301      	movs	r3, #1
 8006580:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8006584:	f7fe fa42 	bl	8004a0c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006588:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800658c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800658e:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006590:	b2d8      	uxtb	r0, r3
 8006592:	f040 8092 	bne.w	80066ba <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8006596:	2d00      	cmp	r5, #0
 8006598:	d061      	beq.n	800665e <HAL_SPI_Transmit+0xf6>
 800659a:	f1b8 0f00 	cmp.w	r8, #0
 800659e:	d05e      	beq.n	800665e <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065a0:	2303      	movs	r3, #3
 80065a2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 80065aa:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 80065ae:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065b2:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80065b4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80065b6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b8:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80065ba:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065bc:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80065c2:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c6:	d107      	bne.n	80065d8 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80065c8:	6833      	ldr	r3, [r6, #0]
 80065ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ce:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80065d0:	6833      	ldr	r3, [r6, #0]
 80065d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065d6:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065d8:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065da:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065dc:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80065de:	bf5e      	ittt	pl
 80065e0:	6833      	ldrpl	r3, [r6, #0]
 80065e2:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80065e6:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065e8:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ec:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065ee:	d13f      	bne.n	8006670 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065f0:	b113      	cbz	r3, 80065f8 <HAL_SPI_Transmit+0x90>
 80065f2:	f1b8 0f01 	cmp.w	r8, #1
 80065f6:	d107      	bne.n	8006608 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065f8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80065fc:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065fe:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006600:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006602:	3b01      	subs	r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006608:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800660a:	b29b      	uxth	r3, r3
 800660c:	b9a3      	cbnz	r3, 8006638 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800660e:	464a      	mov	r2, r9
 8006610:	4639      	mov	r1, r7
 8006612:	4620      	mov	r0, r4
 8006614:	f7ff ff20 	bl	8006458 <SPI_EndRxTxTransaction>
 8006618:	2800      	cmp	r0, #0
 800661a:	d14b      	bne.n	80066b4 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800661c:	68a3      	ldr	r3, [r4, #8]
 800661e:	b933      	cbnz	r3, 800662e <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	9201      	str	r2, [sp, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800662e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006630:	3800      	subs	r0, #0
 8006632:	bf18      	it	ne
 8006634:	2001      	movne	r0, #1
error:
 8006636:	e012      	b.n	800665e <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	6893      	ldr	r3, [r2, #8]
 800663c:	0798      	lsls	r0, r3, #30
 800663e:	d505      	bpl.n	800664c <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006640:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006642:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006646:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006648:	6323      	str	r3, [r4, #48]	@ 0x30
 800664a:	e7d9      	b.n	8006600 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800664c:	f7fe f9de 	bl	8004a0c <HAL_GetTick>
 8006650:	eba0 0009 	sub.w	r0, r0, r9
 8006654:	42b8      	cmp	r0, r7
 8006656:	d3d7      	bcc.n	8006608 <HAL_SPI_Transmit+0xa0>
 8006658:	1c79      	adds	r1, r7, #1
 800665a:	d0d5      	beq.n	8006608 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 800665c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800665e:	2301      	movs	r3, #1
 8006660:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006664:	2300      	movs	r3, #0
 8006666:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800666a:	b003      	add	sp, #12
 800666c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006670:	b113      	cbz	r3, 8006678 <HAL_SPI_Transmit+0x110>
 8006672:	f1b8 0f01 	cmp.w	r8, #1
 8006676:	d108      	bne.n	800668a <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006678:	782b      	ldrb	r3, [r5, #0]
 800667a:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800667c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800667e:	3301      	adds	r3, #1
 8006680:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006682:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006684:	3b01      	subs	r3, #1
 8006686:	b29b      	uxth	r3, r3
 8006688:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800668a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0bd      	beq.n	800660e <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	0792      	lsls	r2, r2, #30
 8006698:	d503      	bpl.n	80066a2 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800669a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	731a      	strb	r2, [r3, #12]
 80066a0:	e7ec      	b.n	800667c <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066a2:	f7fe f9b3 	bl	8004a0c <HAL_GetTick>
 80066a6:	eba0 0009 	sub.w	r0, r0, r9
 80066aa:	42b8      	cmp	r0, r7
 80066ac:	d3ed      	bcc.n	800668a <HAL_SPI_Transmit+0x122>
 80066ae:	1c7b      	adds	r3, r7, #1
 80066b0:	d0eb      	beq.n	800668a <HAL_SPI_Transmit+0x122>
 80066b2:	e7d3      	b.n	800665c <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066b4:	2320      	movs	r3, #32
 80066b6:	6563      	str	r3, [r4, #84]	@ 0x54
 80066b8:	e7b0      	b.n	800661c <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 80066ba:	2002      	movs	r0, #2
 80066bc:	e7cf      	b.n	800665e <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 80066be:	2002      	movs	r0, #2
 80066c0:	e7d3      	b.n	800666a <HAL_SPI_Transmit+0x102>

080066c2 <HAL_SPI_TransmitReceive>:
{
 80066c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066c6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80066c8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 80066cc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 80066d0:	2b01      	cmp	r3, #1
{
 80066d2:	4604      	mov	r4, r0
 80066d4:	460d      	mov	r5, r1
 80066d6:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80066d8:	f000 80e1 	beq.w	800689e <HAL_SPI_TransmitReceive+0x1dc>
 80066dc:	2301      	movs	r3, #1
 80066de:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80066e2:	f7fe f993 	bl	8004a0c <HAL_GetTick>
  tmp_state           = hspi->State;
 80066e6:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 80066ea:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066ec:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80066ee:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 80066f0:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066f2:	d00a      	beq.n	800670a <HAL_SPI_TransmitReceive+0x48>
 80066f4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80066f8:	f040 80cf 	bne.w	800689a <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f040 80cb 	bne.w	800689a <HAL_SPI_TransmitReceive+0x1d8>
 8006704:	2904      	cmp	r1, #4
 8006706:	f040 80c8 	bne.w	800689a <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800670a:	b115      	cbz	r5, 8006712 <HAL_SPI_TransmitReceive+0x50>
 800670c:	f1b9 0f00 	cmp.w	r9, #0
 8006710:	d109      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 8006712:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 8006714:	2301      	movs	r3, #1
 8006716:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800671a:	2300      	movs	r3, #0
 800671c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006720:	b003      	add	sp, #12
 8006722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006726:	2e00      	cmp	r6, #0
 8006728:	d0f3      	beq.n	8006712 <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800672a:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800672e:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006732:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006734:	bf1c      	itt	ne
 8006736:	2305      	movne	r3, #5
 8006738:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800673c:	2300      	movs	r3, #0
 800673e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8006740:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006744:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006746:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8006748:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800674a:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 800674c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800674e:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8006750:	bf58      	it	pl
 8006752:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006754:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8006756:	bf58      	it	pl
 8006758:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 800675c:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 800675e:	bf58      	it	pl
 8006760:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006762:	68e1      	ldr	r1, [r4, #12]
 8006764:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006768:	d148      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800676a:	b10a      	cbz	r2, 8006770 <HAL_SPI_TransmitReceive+0xae>
 800676c:	2e01      	cmp	r6, #1
 800676e:	d107      	bne.n	8006780 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006770:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006774:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006776:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006778:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800677a:	3b01      	subs	r3, #1
 800677c:	b29b      	uxth	r3, r3
 800677e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006780:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006782:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006784:	b29b      	uxth	r3, r3
 8006786:	b963      	cbnz	r3, 80067a2 <HAL_SPI_TransmitReceive+0xe0>
 8006788:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800678a:	b29b      	uxth	r3, r3
 800678c:	b94b      	cbnz	r3, 80067a2 <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800678e:	463a      	mov	r2, r7
 8006790:	4641      	mov	r1, r8
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff fe60 	bl	8006458 <SPI_EndRxTxTransaction>
 8006798:	2800      	cmp	r0, #0
 800679a:	d072      	beq.n	8006882 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800679c:	2320      	movs	r3, #32
 800679e:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 80067a0:	e7b7      	b.n	8006712 <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067a2:	6821      	ldr	r1, [r4, #0]
 80067a4:	688b      	ldr	r3, [r1, #8]
 80067a6:	079a      	lsls	r2, r3, #30
 80067a8:	d50d      	bpl.n	80067c6 <HAL_SPI_TransmitReceive+0x104>
 80067aa:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	b153      	cbz	r3, 80067c6 <HAL_SPI_TransmitReceive+0x104>
 80067b0:	b145      	cbz	r5, 80067c4 <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80067b4:	f833 2b02 	ldrh.w	r2, [r3], #2
 80067b8:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ba:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80067bc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 80067c4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067c6:	688a      	ldr	r2, [r1, #8]
 80067c8:	f012 0201 	ands.w	r2, r2, #1
 80067cc:	d00c      	beq.n	80067e8 <HAL_SPI_TransmitReceive+0x126>
 80067ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	b14b      	cbz	r3, 80067e8 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80067d6:	68c9      	ldr	r1, [r1, #12]
 80067d8:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067dc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80067de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80067e6:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067e8:	f7fe f910 	bl	8004a0c <HAL_GetTick>
 80067ec:	1bc0      	subs	r0, r0, r7
 80067ee:	4540      	cmp	r0, r8
 80067f0:	d3c7      	bcc.n	8006782 <HAL_SPI_TransmitReceive+0xc0>
 80067f2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80067f6:	d0c4      	beq.n	8006782 <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 80067f8:	2003      	movs	r0, #3
 80067fa:	e78b      	b.n	8006714 <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067fc:	b10a      	cbz	r2, 8006802 <HAL_SPI_TransmitReceive+0x140>
 80067fe:	2e01      	cmp	r6, #1
 8006800:	d108      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006802:	782a      	ldrb	r2, [r5, #0]
 8006804:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006806:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006808:	3301      	adds	r3, #1
 800680a:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800680c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800680e:	3b01      	subs	r3, #1
 8006810:	b29b      	uxth	r3, r3
 8006812:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006814:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006816:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006818:	b29b      	uxth	r3, r3
 800681a:	b91b      	cbnz	r3, 8006824 <HAL_SPI_TransmitReceive+0x162>
 800681c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0b4      	beq.n	800678e <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	6893      	ldr	r3, [r2, #8]
 8006828:	079b      	lsls	r3, r3, #30
 800682a:	d50e      	bpl.n	800684a <HAL_SPI_TransmitReceive+0x188>
 800682c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800682e:	b29b      	uxth	r3, r3
 8006830:	b15b      	cbz	r3, 800684a <HAL_SPI_TransmitReceive+0x188>
 8006832:	b14d      	cbz	r5, 8006848 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006834:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800683a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800683c:	3301      	adds	r3, #1
 800683e:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006840:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006842:	3b01      	subs	r3, #1
 8006844:	b29b      	uxth	r3, r3
 8006846:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006848:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	6891      	ldr	r1, [r2, #8]
 800684e:	f011 0101 	ands.w	r1, r1, #1
 8006852:	d00d      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x1ae>
 8006854:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006856:	b29b      	uxth	r3, r3
 8006858:	b153      	cbz	r3, 8006870 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800685a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800685c:	68d2      	ldr	r2, [r2, #12]
 800685e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006860:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006862:	3301      	adds	r3, #1
 8006864:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006866:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006868:	3b01      	subs	r3, #1
 800686a:	b29b      	uxth	r3, r3
 800686c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800686e:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006870:	f7fe f8cc 	bl	8004a0c <HAL_GetTick>
 8006874:	1bc0      	subs	r0, r0, r7
 8006876:	4540      	cmp	r0, r8
 8006878:	d3cd      	bcc.n	8006816 <HAL_SPI_TransmitReceive+0x154>
 800687a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800687e:	d0ca      	beq.n	8006816 <HAL_SPI_TransmitReceive+0x154>
 8006880:	e7ba      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f47f af45 	bne.w	8006714 <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	9001      	str	r0, [sp, #4]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	9201      	str	r2, [sp, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	e73c      	b.n	8006714 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 800689a:	2002      	movs	r0, #2
 800689c:	e73a      	b.n	8006714 <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 800689e:	2002      	movs	r0, #2
 80068a0:	e73e      	b.n	8006720 <HAL_SPI_TransmitReceive+0x5e>

080068a2 <HAL_SPI_Receive>:
{
 80068a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068a6:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068a8:	6843      	ldr	r3, [r0, #4]
 80068aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80068ae:	4604      	mov	r4, r0
 80068b0:	4689      	mov	r9, r1
 80068b2:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068b4:	d10c      	bne.n	80068d0 <HAL_SPI_Receive+0x2e>
 80068b6:	6883      	ldr	r3, [r0, #8]
 80068b8:	b953      	cbnz	r3, 80068d0 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068ba:	2304      	movs	r3, #4
 80068bc:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068c0:	4613      	mov	r3, r2
 80068c2:	9500      	str	r5, [sp, #0]
 80068c4:	460a      	mov	r2, r1
 80068c6:	f7ff fefc 	bl	80066c2 <HAL_SPI_TransmitReceive>
}
 80068ca:	b003      	add	sp, #12
 80068cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80068d0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d07f      	beq.n	80069d8 <HAL_SPI_Receive+0x136>
 80068d8:	2301      	movs	r3, #1
 80068da:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80068de:	f7fe f895 	bl	8004a0c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80068e2:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80068e6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80068e8:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80068ea:	b2d8      	uxtb	r0, r3
 80068ec:	d172      	bne.n	80069d4 <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 80068ee:	f1b9 0f00 	cmp.w	r9, #0
 80068f2:	d05c      	beq.n	80069ae <HAL_SPI_Receive+0x10c>
 80068f4:	2f00      	cmp	r7, #0
 80068f6:	d05a      	beq.n	80069ae <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f8:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068fa:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068fe:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006900:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006902:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006906:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 800690a:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800690e:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 8006910:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006912:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006914:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006916:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006918:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800691a:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691c:	d107      	bne.n	800692e <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800692c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006932:	bf5e      	ittt	pl
 8006934:	681a      	ldrpl	r2, [r3, #0]
 8006936:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 800693a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800693c:	68e3      	ldr	r3, [r4, #12]
 800693e:	b1f3      	cbz	r3, 800697e <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8006940:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006942:	b29b      	uxth	r3, r3
 8006944:	b1fb      	cbz	r3, 8006986 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	07d2      	lsls	r2, r2, #31
 800694c:	d536      	bpl.n	80069bc <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006952:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006956:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006958:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800695a:	3b01      	subs	r3, #1
 800695c:	b29b      	uxth	r3, r3
 800695e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006960:	e7ee      	b.n	8006940 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	07d0      	lsls	r0, r2, #31
 8006968:	d518      	bpl.n	800699c <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800696a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800696c:	7b1b      	ldrb	r3, [r3, #12]
 800696e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006970:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006972:	3301      	adds	r3, #1
 8006974:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006976:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006978:	3b01      	subs	r3, #1
 800697a:	b29b      	uxth	r3, r3
 800697c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800697e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1ed      	bne.n	8006962 <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006986:	4642      	mov	r2, r8
 8006988:	4629      	mov	r1, r5
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff fd3a 	bl	8006404 <SPI_EndRxTransaction>
 8006990:	b9e8      	cbnz	r0, 80069ce <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006992:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006994:	3800      	subs	r0, #0
 8006996:	bf18      	it	ne
 8006998:	2001      	movne	r0, #1
error :
 800699a:	e008      	b.n	80069ae <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800699c:	f7fe f836 	bl	8004a0c <HAL_GetTick>
 80069a0:	eba0 0008 	sub.w	r0, r0, r8
 80069a4:	42a8      	cmp	r0, r5
 80069a6:	d3ea      	bcc.n	800697e <HAL_SPI_Receive+0xdc>
 80069a8:	1c69      	adds	r1, r5, #1
 80069aa:	d0e8      	beq.n	800697e <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 80069ac:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80069b4:	2300      	movs	r3, #0
 80069b6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 80069ba:	e786      	b.n	80068ca <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069bc:	f7fe f826 	bl	8004a0c <HAL_GetTick>
 80069c0:	eba0 0008 	sub.w	r0, r0, r8
 80069c4:	42a8      	cmp	r0, r5
 80069c6:	d3bb      	bcc.n	8006940 <HAL_SPI_Receive+0x9e>
 80069c8:	1c6b      	adds	r3, r5, #1
 80069ca:	d0b9      	beq.n	8006940 <HAL_SPI_Receive+0x9e>
 80069cc:	e7ee      	b.n	80069ac <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069ce:	2320      	movs	r3, #32
 80069d0:	6563      	str	r3, [r4, #84]	@ 0x54
 80069d2:	e7de      	b.n	8006992 <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 80069d4:	2002      	movs	r0, #2
 80069d6:	e7ea      	b.n	80069ae <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 80069d8:	2002      	movs	r0, #2
 80069da:	e776      	b.n	80068ca <HAL_SPI_Receive+0x28>

080069dc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069dc:	4770      	bx	lr
	...

080069e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069e0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d130      	bne.n	8006a4a <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	2302      	movs	r3, #2
 80069ea:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069ee:	6803      	ldr	r3, [r0, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f8:	4a15      	ldr	r2, [pc, #84]	@ (8006a50 <HAL_TIM_Base_Start_IT+0x70>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d01a      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x54>
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a02:	d017      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x54>
 8006a04:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d013      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x54>
 8006a0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00f      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x54>
 8006a14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00b      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x54>
 8006a1c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x54>
 8006a24:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x54>
 8006a2c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3a:	2a06      	cmp	r2, #6
 8006a3c:	d003      	beq.n	8006a46 <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	f042 0201 	orr.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8006a46:	2000      	movs	r0, #0
 8006a48:	4770      	bx	lr
    return HAL_ERROR;
 8006a4a:	2001      	movs	r0, #1
}
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000

08006a54 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006a54:	4770      	bx	lr

08006a56 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a5c:	6803      	ldr	r3, [r0, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	0791      	lsls	r1, r2, #30
{
 8006a62:	b510      	push	{r4, lr}
 8006a64:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a66:	d50e      	bpl.n	8006a86 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	0792      	lsls	r2, r2, #30
 8006a6c:	d50b      	bpl.n	8006a86 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a6e:	f06f 0202 	mvn.w	r2, #2
 8006a72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a74:	2201      	movs	r2, #1
 8006a76:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	079b      	lsls	r3, r3, #30
 8006a7c:	d077      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8006a7e:	f7ff ffea 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	2300      	movs	r3, #0
 8006a84:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	0750      	lsls	r0, r2, #29
 8006a8c:	d510      	bpl.n	8006ab0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	0751      	lsls	r1, r2, #29
 8006a92:	d50d      	bpl.n	8006ab0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a94:	f06f 0204 	mvn.w	r2, #4
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa6:	d068      	beq.n	8006b7a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa8:	f7ff ffd5 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aac:	2300      	movs	r3, #0
 8006aae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	0712      	lsls	r2, r2, #28
 8006ab6:	d50f      	bpl.n	8006ad8 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	0710      	lsls	r0, r2, #28
 8006abc:	d50c      	bpl.n	8006ad8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006abe:	f06f 0208 	mvn.w	r2, #8
 8006ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006acc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ace:	d05a      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad0:	f7ff ffc1 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	06d2      	lsls	r2, r2, #27
 8006ade:	d510      	bpl.n	8006b02 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	06d0      	lsls	r0, r2, #27
 8006ae4:	d50d      	bpl.n	8006b02 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ae6:	f06f 0210 	mvn.w	r2, #16
 8006aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aec:	2208      	movs	r2, #8
 8006aee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006af6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006af8:	d04b      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	f7ff ffac 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afe:	2300      	movs	r3, #0
 8006b00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	07d1      	lsls	r1, r2, #31
 8006b08:	d508      	bpl.n	8006b1c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	07d2      	lsls	r2, r2, #31
 8006b0e:	d505      	bpl.n	8006b1c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b10:	f06f 0201 	mvn.w	r2, #1
 8006b14:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7fa fc00 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	0610      	lsls	r0, r2, #24
 8006b22:	d508      	bpl.n	8006b36 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	0611      	lsls	r1, r2, #24
 8006b28:	d505      	bpl.n	8006b36 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b2a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 f8b2 	bl	8006c9a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	0652      	lsls	r2, r2, #25
 8006b3c:	d508      	bpl.n	8006b50 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	0650      	lsls	r0, r2, #25
 8006b42:	d505      	bpl.n	8006b50 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b48:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7ff ff85 	bl	8006a5a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	0691      	lsls	r1, r2, #26
 8006b56:	d522      	bpl.n	8006b9e <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	0692      	lsls	r2, r2, #26
 8006b5c:	d51f      	bpl.n	8006b9e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b5e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006b62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b64:	611a      	str	r2, [r3, #16]
}
 8006b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006b6a:	f000 b895 	b.w	8006c98 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	f7ff ff71 	bl	8006a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7ff ff70 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b78:	e783      	b.n	8006a82 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7a:	f7ff ff6b 	bl	8006a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f7ff ff6a 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b84:	e792      	b.n	8006aac <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	f7ff ff65 	bl	8006a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7ff ff64 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b90:	e7a0      	b.n	8006ad4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	f7ff ff5f 	bl	8006a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b96:	4620      	mov	r0, r4
 8006b98:	f7ff ff5e 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b9c:	e7af      	b.n	8006afe <HAL_TIM_IRQHandler+0xa2>
}
 8006b9e:	bd10      	pop	{r4, pc}

08006ba0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba0:	4a25      	ldr	r2, [pc, #148]	@ (8006c38 <TIM_Base_SetConfig+0x98>)
  tmpcr1 = TIMx->CR1;
 8006ba2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba4:	4290      	cmp	r0, r2
 8006ba6:	d012      	beq.n	8006bce <TIM_Base_SetConfig+0x2e>
 8006ba8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006bac:	d00f      	beq.n	8006bce <TIM_Base_SetConfig+0x2e>
 8006bae:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006bb2:	4290      	cmp	r0, r2
 8006bb4:	d00b      	beq.n	8006bce <TIM_Base_SetConfig+0x2e>
 8006bb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bba:	4290      	cmp	r0, r2
 8006bbc:	d007      	beq.n	8006bce <TIM_Base_SetConfig+0x2e>
 8006bbe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bc2:	4290      	cmp	r0, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_Base_SetConfig+0x2e>
 8006bc6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006bca:	4290      	cmp	r0, r2
 8006bcc:	d108      	bne.n	8006be0 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006bce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006bd4:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bd6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	e016      	b.n	8006c0e <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006be0:	4a16      	ldr	r2, [pc, #88]	@ (8006c3c <TIM_Base_SetConfig+0x9c>)
 8006be2:	4290      	cmp	r0, r2
 8006be4:	d0f7      	beq.n	8006bd6 <TIM_Base_SetConfig+0x36>
 8006be6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bea:	4290      	cmp	r0, r2
 8006bec:	d0f3      	beq.n	8006bd6 <TIM_Base_SetConfig+0x36>
 8006bee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bf2:	4290      	cmp	r0, r2
 8006bf4:	d0ef      	beq.n	8006bd6 <TIM_Base_SetConfig+0x36>
 8006bf6:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8006bfa:	4290      	cmp	r0, r2
 8006bfc:	d0eb      	beq.n	8006bd6 <TIM_Base_SetConfig+0x36>
 8006bfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c02:	4290      	cmp	r0, r2
 8006c04:	d0e7      	beq.n	8006bd6 <TIM_Base_SetConfig+0x36>
 8006c06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c0a:	4290      	cmp	r0, r2
 8006c0c:	d0e3      	beq.n	8006bd6 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c0e:	694a      	ldr	r2, [r1, #20]
 8006c10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c14:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006c16:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c18:	688b      	ldr	r3, [r1, #8]
 8006c1a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c1c:	680b      	ldr	r3, [r1, #0]
 8006c1e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c20:	4b05      	ldr	r3, [pc, #20]	@ (8006c38 <TIM_Base_SetConfig+0x98>)
 8006c22:	4298      	cmp	r0, r3
 8006c24:	d003      	beq.n	8006c2e <TIM_Base_SetConfig+0x8e>
 8006c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c2a:	4298      	cmp	r0, r3
 8006c2c:	d101      	bne.n	8006c32 <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c2e:	690b      	ldr	r3, [r1, #16]
 8006c30:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c32:	2301      	movs	r3, #1
 8006c34:	6143      	str	r3, [r0, #20]
}
 8006c36:	4770      	bx	lr
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40014000 	.word	0x40014000

08006c40 <HAL_TIM_Base_Init>:
{
 8006c40:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006c42:	4604      	mov	r4, r0
 8006c44:	b330      	cbz	r0, 8006c94 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006c46:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006c4a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006c4e:	b91b      	cbnz	r3, 8006c58 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006c50:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006c54:	f7ff fec2 	bl	80069dc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c5a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c60:	1d21      	adds	r1, r4, #4
 8006c62:	f7ff ff9d 	bl	8006ba0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8006c6c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006c72:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006c76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006c7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c86:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006c8a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006c8e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006c92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006c94:	2001      	movs	r0, #1
 8006c96:	e7fc      	b.n	8006c92 <HAL_TIM_Base_Init+0x52>

08006c98 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006c98:	4770      	bx	lr

08006c9a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006c9a:	4770      	bx	lr

08006c9c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	f102 030c 	add.w	r3, r2, #12
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	320c      	adds	r2, #12
 8006cac:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006cb0:	6802      	ldr	r2, [r0, #0]
 8006cb2:	2900      	cmp	r1, #0
 8006cb4:	d1f2      	bne.n	8006c9c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	f102 0314 	add.w	r3, r2, #20
 8006cba:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	f102 0c14 	add.w	ip, r2, #20
 8006cc6:	e84c 3100 	strex	r1, r3, [ip]
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	d1f3      	bne.n	8006cb6 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10b      	bne.n	8006cec <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	f102 030c 	add.w	r3, r2, #12
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	f102 0c0c 	add.w	ip, r2, #12
 8006ce4:	e84c 3100 	strex	r1, r3, [ip]
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	d1f3      	bne.n	8006cd4 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cec:	2320      	movs	r3, #32
 8006cee:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8006cf6:	4770      	bx	lr

08006cf8 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cf8:	6802      	ldr	r2, [r0, #0]
 8006cfa:	68c1      	ldr	r1, [r0, #12]
{
 8006cfc:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cfe:	6913      	ldr	r3, [r2, #16]
 8006d00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6113      	str	r3, [r2, #16]
{
 8006d08:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d0a:	6883      	ldr	r3, [r0, #8]
 8006d0c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006d0e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d10:	4303      	orrs	r3, r0
 8006d12:	6968      	ldr	r0, [r5, #20]
 8006d14:	4303      	orrs	r3, r0
 8006d16:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006d18:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8006d1c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d20:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8006d22:	430b      	orrs	r3, r1
 8006d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d26:	6953      	ldr	r3, [r2, #20]
 8006d28:	69a9      	ldr	r1, [r5, #24]
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d32:	4b1f      	ldr	r3, [pc, #124]	@ (8006db0 <UART_SetConfig+0xb8>)
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d003      	beq.n	8006d40 <UART_SetConfig+0x48>
 8006d38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d124      	bne.n	8006d8a <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d40:	f7ff f958 	bl	8005ff4 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d44:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d46:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d48:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d4c:	e9d5 4300 	ldrd	r4, r3, [r5]
 8006d50:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d54:	d11c      	bne.n	8006d90 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d56:	18da      	adds	r2, r3, r3
 8006d58:	f04f 0500 	mov.w	r5, #0
 8006d5c:	eb45 0305 	adc.w	r3, r5, r5
 8006d60:	f7f9 fa96 	bl	8000290 <__aeabi_uldivmod>
 8006d64:	2264      	movs	r2, #100	@ 0x64
 8006d66:	fbb0 f1f2 	udiv	r1, r0, r2
 8006d6a:	fb02 0311 	mls	r3, r2, r1, r0
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	3332      	adds	r3, #50	@ 0x32
 8006d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d76:	f003 0207 	and.w	r2, r3, #7
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006d80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d84:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d86:	60a3      	str	r3, [r4, #8]
  }
}
 8006d88:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d8a:	f7ff f923 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 8006d8e:	e7d9      	b.n	8006d44 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d90:	009a      	lsls	r2, r3, #2
 8006d92:	0f9b      	lsrs	r3, r3, #30
 8006d94:	f7f9 fa7c 	bl	8000290 <__aeabi_uldivmod>
 8006d98:	2264      	movs	r2, #100	@ 0x64
 8006d9a:	fbb0 f1f2 	udiv	r1, r0, r2
 8006d9e:	fb02 0311 	mls	r3, r2, r1, r0
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	3332      	adds	r3, #50	@ 0x32
 8006da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006daa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006dae:	e7ea      	b.n	8006d86 <UART_SetConfig+0x8e>
 8006db0:	40011000 	.word	0x40011000

08006db4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8006db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006db6:	4605      	mov	r5, r0
 8006db8:	460c      	mov	r4, r1
 8006dba:	4617      	mov	r7, r2
 8006dbc:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbe:	682a      	ldr	r2, [r5, #0]
 8006dc0:	6813      	ldr	r3, [r2, #0]
 8006dc2:	ea34 0303 	bics.w	r3, r4, r3
 8006dc6:	d101      	bne.n	8006dcc <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e021      	b.n	8006e10 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006dcc:	1c70      	adds	r0, r6, #1
 8006dce:	d0f7      	beq.n	8006dc0 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd0:	f7fd fe1c 	bl	8004a0c <HAL_GetTick>
 8006dd4:	1bc0      	subs	r0, r0, r7
 8006dd6:	4286      	cmp	r6, r0
 8006dd8:	d31c      	bcc.n	8006e14 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8006dda:	b1de      	cbz	r6, 8006e14 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	0751      	lsls	r1, r2, #29
 8006de2:	d5ec      	bpl.n	8006dbe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006de4:	2c80      	cmp	r4, #128	@ 0x80
 8006de6:	d0ea      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006de8:	2c40      	cmp	r4, #64	@ 0x40
 8006dea:	d0e8      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	0712      	lsls	r2, r2, #28
 8006df0:	d5e5      	bpl.n	8006dbe <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006df2:	2400      	movs	r4, #0
 8006df4:	9401      	str	r4, [sp, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	9201      	str	r2, [sp, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006dfe:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e00:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006e02:	f7ff ff4b 	bl	8006c9c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e06:	2308      	movs	r3, #8
 8006e08:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8006e0a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8006e0e:	2001      	movs	r0, #1
}
 8006e10:	b003      	add	sp, #12
 8006e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006e14:	2003      	movs	r0, #3
 8006e16:	e7fb      	b.n	8006e10 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08006e18 <HAL_UART_Init>:
{
 8006e18:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	b348      	cbz	r0, 8006e72 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006e22:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006e26:	b91b      	cbnz	r3, 8006e30 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006e28:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8006e2c:	f7fa fcf4 	bl	8001818 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006e30:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006e32:	2324      	movs	r3, #36	@ 0x24
 8006e34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8006e38:	68d3      	ldr	r3, [r2, #12]
 8006e3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e3e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7ff ff59 	bl	8006cf8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	691a      	ldr	r2, [r3, #16]
 8006e4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e56:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e5e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e60:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006e62:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e64:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e66:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e6a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e6e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8006e70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006e72:	2001      	movs	r0, #1
 8006e74:	e7fc      	b.n	8006e70 <HAL_UART_Init+0x58>

08006e76 <HAL_UART_Transmit>:
{
 8006e76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e7a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006e7c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006e80:	2b20      	cmp	r3, #32
{
 8006e82:	4604      	mov	r4, r0
 8006e84:	460e      	mov	r6, r1
 8006e86:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006e88:	d13f      	bne.n	8006f0a <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	d03f      	beq.n	8006f0e <HAL_UART_Transmit+0x98>
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	d03d      	beq.n	8006f0e <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e92:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	2500      	movs	r5, #0
 8006e96:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e98:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8006e9c:	f7fd fdb6 	bl	8004a0c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8006ea2:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8006ea8:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8006eaa:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eac:	d103      	bne.n	8006eb6 <HAL_UART_Transmit+0x40>
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	b90b      	cbnz	r3, 8006eb6 <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 8006eb2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006eb4:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8006eb6:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	b953      	cbnz	r3, 8006ed2 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ebc:	4643      	mov	r3, r8
 8006ebe:	464a      	mov	r2, r9
 8006ec0:	2140      	movs	r1, #64	@ 0x40
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff ff76 	bl	8006db4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006ec8:	2320      	movs	r3, #32
 8006eca:	b950      	cbnz	r0, 8006ee2 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8006ecc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8006ed0:	e00a      	b.n	8006ee8 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ed2:	4643      	mov	r3, r8
 8006ed4:	464a      	mov	r2, r9
 8006ed6:	2180      	movs	r1, #128	@ 0x80
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f7ff ff6b 	bl	8006db4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006ede:	b128      	cbz	r0, 8006eec <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8006ee6:	2003      	movs	r0, #3
}
 8006ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eec:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8006eee:	b94e      	cbnz	r6, 8006f04 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ef0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ef8:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8006efa:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8006efc:	3901      	subs	r1, #1
 8006efe:	b289      	uxth	r1, r1
 8006f00:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8006f02:	e7d8      	b.n	8006eb6 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f04:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006f08:	e7f6      	b.n	8006ef8 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8006f0a:	2002      	movs	r0, #2
 8006f0c:	e7ec      	b.n	8006ee8 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8006f0e:	2001      	movs	r0, #1
 8006f10:	e7ea      	b.n	8006ee8 <HAL_UART_Transmit+0x72>

08006f12 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f16:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8006f1a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8006f1e:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8006f22:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 8006f26:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006f2a:	6809      	ldr	r1, [r1, #0]
 8006f2c:	ea43 0308 	orr.w	r3, r3, r8
 8006f30:	b981      	cbnz	r1, 8006f54 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f32:	ea43 030e 	orr.w	r3, r3, lr
 8006f36:	4313      	orrs	r3, r2
 8006f38:	ea43 030c 	orr.w	r3, r3, ip
 8006f3c:	433b      	orrs	r3, r7
 8006f3e:	6801      	ldr	r1, [r0, #0]
 8006f40:	4333      	orrs	r3, r6
 8006f42:	432b      	orrs	r3, r5
 8006f44:	4323      	orrs	r3, r4
 8006f46:	f36f 010e 	bfc	r1, #0, #15
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f54:	6801      	ldr	r1, [r0, #0]
 8006f56:	ea43 030e 	orr.w	r3, r3, lr
 8006f5a:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006f62:	ea42 030c 	orr.w	r3, r2, ip
 8006f66:	6841      	ldr	r1, [r0, #4]
 8006f68:	433b      	orrs	r3, r7
 8006f6a:	4333      	orrs	r3, r6
 8006f6c:	432b      	orrs	r3, r5
 8006f6e:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8006f72:	4323      	orrs	r3, r4
 8006f74:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	6043      	str	r3, [r0, #4]
 8006f7c:	e7e7      	b.n	8006f4e <FMC_SDRAM_Init+0x3c>

08006f7e <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f7e:	68cb      	ldr	r3, [r1, #12]
 8006f80:	f103 3cff 	add.w	ip, r3, #4294967295
 8006f84:	694b      	ldr	r3, [r1, #20]
{
 8006f86:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f88:	684c      	ldr	r4, [r1, #4]
 8006f8a:	688f      	ldr	r7, [r1, #8]
 8006f8c:	690e      	ldr	r6, [r1, #16]
 8006f8e:	698d      	ldr	r5, [r1, #24]
 8006f90:	6809      	ldr	r1, [r1, #0]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	051b      	lsls	r3, r3, #20
 8006f96:	3c01      	subs	r4, #1
 8006f98:	3f01      	subs	r7, #1
 8006f9a:	3e01      	subs	r6, #1
 8006f9c:	3d01      	subs	r5, #1
 8006f9e:	0124      	lsls	r4, r4, #4
 8006fa0:	023f      	lsls	r7, r7, #8
 8006fa2:	0436      	lsls	r6, r6, #16
 8006fa4:	062d      	lsls	r5, r5, #24
 8006fa6:	3901      	subs	r1, #1
 8006fa8:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006fac:	b95a      	cbnz	r2, 8006fc6 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	4323      	orrs	r3, r4
 8006fb2:	6882      	ldr	r2, [r0, #8]
 8006fb4:	433b      	orrs	r3, r7
 8006fb6:	4333      	orrs	r3, r6
 8006fb8:	432b      	orrs	r3, r5
 8006fba:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006fc6:	6882      	ldr	r2, [r0, #8]
 8006fc8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006fcc:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006fd4:	ea44 0307 	orr.w	r3, r4, r7
 8006fd8:	68c2      	ldr	r2, [r0, #12]
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	4333      	orrs	r3, r6
 8006fde:	432b      	orrs	r3, r5
 8006fe0:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60c3      	str	r3, [r0, #12]
 8006fe8:	e7eb      	b.n	8006fc2 <FMC_SDRAM_Timing_Init+0x44>

08006fea <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006fea:	b570      	push	{r4, r5, r6, lr}
 8006fec:	4604      	mov	r4, r0
 8006fee:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006ff0:	6902      	ldr	r2, [r0, #16]
 8006ff2:	e9d1 3000 	ldrd	r3, r0, [r1]
 8006ff6:	4303      	orrs	r3, r0
 8006ff8:	68c8      	ldr	r0, [r1, #12]
 8006ffa:	f36f 0215 	bfc	r2, #0, #22
 8006ffe:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8007002:	4313      	orrs	r3, r2
 8007004:	688a      	ldr	r2, [r1, #8]
 8007006:	3a01      	subs	r2, #1
 8007008:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800700c:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800700e:	f7fd fcfd 	bl	8004a0c <HAL_GetTick>
 8007012:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007014:	69a0      	ldr	r0, [r4, #24]
 8007016:	f010 0020 	ands.w	r0, r0, #32
 800701a:	d003      	beq.n	8007024 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701c:	1c6b      	adds	r3, r5, #1
 800701e:	d0f9      	beq.n	8007014 <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007020:	b90d      	cbnz	r5, 8007026 <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8007022:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 8007024:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007026:	f7fd fcf1 	bl	8004a0c <HAL_GetTick>
 800702a:	1b80      	subs	r0, r0, r6
 800702c:	42a8      	cmp	r0, r5
 800702e:	d9f1      	bls.n	8007014 <FMC_SDRAM_SendCommand+0x2a>
 8007030:	e7f7      	b.n	8007022 <FMC_SDRAM_SendCommand+0x38>

08007032 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007032:	6943      	ldr	r3, [r0, #20]
 8007034:	f36f 034d 	bfc	r3, #1, #13
 8007038:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800703c:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800703e:	2000      	movs	r0, #0
 8007040:	4770      	bx	lr

08007042 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007042:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8007044:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007048:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800704a:	f001 ff0f 	bl	8008e6c <xTaskGetSchedulerState>
 800704e:	2801      	cmp	r0, #1
 8007050:	d003      	beq.n	800705a <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8007052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8007056:	f000 bc7d 	b.w	8007954 <xPortSysTickHandler>
}
 800705a:	bd08      	pop	{r3, pc}

0800705c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800705c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007060:	b92b      	cbnz	r3, 800706e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8007062:	4b06      	ldr	r3, [pc, #24]	@ (800707c <osKernelInitialize+0x20>)
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	b928      	cbnz	r0, 8007074 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800706c:	4770      	bx	lr
    stat = osErrorISR;
 800706e:	f06f 0005 	mvn.w	r0, #5
 8007072:	4770      	bx	lr
    } else {
      stat = osError;
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20004da4 	.word	0x20004da4

08007080 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007080:	b510      	push	{r4, lr}
 8007082:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007086:	b95c      	cbnz	r4, 80070a0 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8007088:	4b08      	ldr	r3, [pc, #32]	@ (80070ac <osKernelStart+0x2c>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	2a01      	cmp	r2, #1
 800708e:	d10a      	bne.n	80070a6 <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007090:	4a07      	ldr	r2, [pc, #28]	@ (80070b0 <osKernelStart+0x30>)
 8007092:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007094:	2202      	movs	r2, #2
 8007096:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007098:	f001 fc5e 	bl	8008958 <vTaskStartScheduler>
      stat = osOK;
 800709c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800709e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80070a0:	f06f 0005 	mvn.w	r0, #5
 80070a4:	e7fb      	b.n	800709e <osKernelStart+0x1e>
      stat = osError;
 80070a6:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80070aa:	e7f8      	b.n	800709e <osKernelStart+0x1e>
 80070ac:	20004da4 	.word	0x20004da4
 80070b0:	e000ed00 	.word	0xe000ed00

080070b4 <osKernelGetTickCount>:
 80070b4:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 80070b8:	b10b      	cbz	r3, 80070be <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 80070ba:	f001 bca1 	b.w	8008a00 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 80070be:	f001 bc99 	b.w	80089f4 <xTaskGetTickCount>

080070c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c4:	b087      	sub	sp, #28
 80070c6:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070c8:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070ca:	460b      	mov	r3, r1
  hTask = NULL;
 80070cc:	9205      	str	r2, [sp, #20]
 80070ce:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80070d2:	b9fa      	cbnz	r2, 8007114 <osThreadNew+0x52>
 80070d4:	b1f0      	cbz	r0, 8007114 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80070d6:	b354      	cbz	r4, 800712e <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80070d8:	69a5      	ldr	r5, [r4, #24]
 80070da:	b125      	cbz	r5, 80070e6 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070dc:	1e69      	subs	r1, r5, #1
 80070de:	2937      	cmp	r1, #55	@ 0x37
 80070e0:	d902      	bls.n	80070e8 <osThreadNew+0x26>
        return (NULL);
 80070e2:	2000      	movs	r0, #0
 80070e4:	e017      	b.n	8007116 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 80070e6:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070e8:	6862      	ldr	r2, [r4, #4]
 80070ea:	07d2      	lsls	r2, r2, #31
 80070ec:	d4f9      	bmi.n	80070e2 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 80070ee:	6966      	ldr	r6, [r4, #20]
 80070f0:	b19e      	cbz	r6, 800711a <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070f2:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070f4:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 80070f8:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070fa:	b187      	cbz	r7, 800711e <osThreadNew+0x5c>
 80070fc:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 8007100:	d908      	bls.n	8007114 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007102:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007104:	b134      	cbz	r4, 8007114 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007106:	b12e      	cbz	r6, 8007114 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007108:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800710c:	9500      	str	r5, [sp, #0]
 800710e:	f001 fb64 	bl	80087da <xTaskCreateStatic>
 8007112:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007114:	9805      	ldr	r0, [sp, #20]
}
 8007116:	b007      	add	sp, #28
 8007118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800711a:	2280      	movs	r2, #128	@ 0x80
 800711c:	e7ea      	b.n	80070f4 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800711e:	f1bc 0f00 	cmp.w	ip, #0
 8007122:	d1f7      	bne.n	8007114 <osThreadNew+0x52>
 8007124:	6924      	ldr	r4, [r4, #16]
 8007126:	2c00      	cmp	r4, #0
 8007128:	d1f4      	bne.n	8007114 <osThreadNew+0x52>
 800712a:	460c      	mov	r4, r1
 800712c:	e001      	b.n	8007132 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800712e:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8007130:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007132:	a905      	add	r1, sp, #20
 8007134:	e9cd 5100 	strd	r5, r1, [sp]
 8007138:	b292      	uxth	r2, r2
 800713a:	4621      	mov	r1, r4
 800713c:	f001 fb85 	bl	800884a <xTaskCreate>
 8007140:	2801      	cmp	r0, #1
            hTask = NULL;
 8007142:	bf1c      	itt	ne
 8007144:	2300      	movne	r3, #0
 8007146:	9305      	strne	r3, [sp, #20]
 8007148:	e7e4      	b.n	8007114 <osThreadNew+0x52>

0800714a <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800714a:	b508      	push	{r3, lr}
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800714c:	2000      	movs	r0, #0
 800714e:	f001 fbab 	bl	80088a8 <vTaskDelete>
#endif
  for (;;);
 8007152:	e7fe      	b.n	8007152 <osThreadExit+0x8>

08007154 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007154:	b530      	push	{r4, r5, lr}
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007156:	4604      	mov	r4, r0
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007158:	b085      	sub	sp, #20
  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800715a:	b108      	cbz	r0, 8007160 <osThreadFlagsSet+0xc>
 800715c:	2900      	cmp	r1, #0
 800715e:	da05      	bge.n	800716c <osThreadFlagsSet+0x18>
    rflags = (uint32_t)osErrorParameter;
 8007160:	f06f 0303 	mvn.w	r3, #3
 8007164:	9302      	str	r3, [sp, #8]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8007166:	9802      	ldr	r0, [sp, #8]
 8007168:	b005      	add	sp, #20
 800716a:	bd30      	pop	{r4, r5, pc}
    rflags = (uint32_t)osError;
 800716c:	f04f 33ff 	mov.w	r3, #4294967295
 8007170:	9302      	str	r3, [sp, #8]
 8007172:	f3ef 8505 	mrs	r5, IPSR
    if (IS_IRQ()) {
 8007176:	b1e5      	cbz	r5, 80071b2 <osThreadFlagsSet+0x5e>
      yield = pdFALSE;
 8007178:	2500      	movs	r5, #0
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800717a:	ab03      	add	r3, sp, #12
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	462b      	mov	r3, r5
      yield = pdFALSE;
 8007182:	9503      	str	r5, [sp, #12]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007184:	f002 f814 	bl	80091b0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007188:	ab02      	add	r3, sp, #8
 800718a:	9500      	str	r5, [sp, #0]
 800718c:	462a      	mov	r2, r5
 800718e:	4629      	mov	r1, r5
 8007190:	4620      	mov	r0, r4
 8007192:	f002 f80d 	bl	80091b0 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0e4      	beq.n	8007166 <osThreadFlagsSet+0x12>
 800719c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	e7d9      	b.n	8007166 <osThreadFlagsSet+0x12>
      (void)xTaskNotify (hTask, flags, eSetBits);
 80071b2:	462b      	mov	r3, r5
 80071b4:	2201      	movs	r2, #1
 80071b6:	f001 ff89 	bl	80090cc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80071ba:	ab02      	add	r3, sp, #8
 80071bc:	462a      	mov	r2, r5
 80071be:	4629      	mov	r1, r5
 80071c0:	4620      	mov	r0, r4
 80071c2:	f001 ff83 	bl	80090cc <xTaskGenericNotify>
 80071c6:	e7ce      	b.n	8007166 <osThreadFlagsSet+0x12>

080071c8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80071c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80071cc:	4606      	mov	r6, r0
 80071ce:	460f      	mov	r7, r1
 80071d0:	4690      	mov	r8, r2
 80071d2:	f3ef 8405 	mrs	r4, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80071d6:	2c00      	cmp	r4, #0
 80071d8:	d13c      	bne.n	8007254 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80071da:	2800      	cmp	r0, #0
 80071dc:	db3d      	blt.n	800725a <osThreadFlagsWait+0x92>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
      clear = 0U;
 80071de:	f011 0f02 	tst.w	r1, #2
 80071e2:	bf0c      	ite	eq
 80071e4:	4682      	moveq	sl, r0
 80071e6:	f04f 0a00 	movne.w	sl, #0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 80071ea:	f001 fc03 	bl	80089f4 <xTaskGetTickCount>
    tout   = timeout;
 80071ee:	4645      	mov	r5, r8
    t0 = xTaskGetTickCount();
 80071f0:	4681      	mov	r9, r0

      if (rval == pdPASS) {
        rflags &= flags;
        rflags |= nval;

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80071f2:	f007 0701 	and.w	r7, r7, #1
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80071f6:	462b      	mov	r3, r5
 80071f8:	aa01      	add	r2, sp, #4
 80071fa:	4651      	mov	r1, sl
 80071fc:	2000      	movs	r0, #0
 80071fe:	f001 ff1f 	bl	8009040 <xTaskNotifyWait>
      if (rval == pdPASS) {
 8007202:	2801      	cmp	r0, #1
 8007204:	d11c      	bne.n	8007240 <osThreadFlagsWait+0x78>
        rflags |= nval;
 8007206:	9b01      	ldr	r3, [sp, #4]
        rflags &= flags;
 8007208:	4034      	ands	r4, r6
        rflags |= nval;
 800720a:	431c      	orrs	r4, r3
          if ((flags & rflags) == flags) {
 800720c:	ea06 0304 	and.w	r3, r6, r4
        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007210:	b13f      	cbz	r7, 8007222 <osThreadFlagsWait+0x5a>
          if ((flags & rflags) == flags) {
 8007212:	429e      	cmp	r6, r3
 8007214:	d007      	beq.n	8007226 <osThreadFlagsWait+0x5e>
            break;
          } else {
            if (timeout == 0U) {
 8007216:	f1b8 0f00 	cmp.w	r8, #0
 800721a:	d108      	bne.n	800722e <osThreadFlagsWait+0x66>
              rflags = (uint32_t)osErrorResource;
 800721c:	f06f 0402 	mvn.w	r4, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8007220:	e001      	b.n	8007226 <osThreadFlagsWait+0x5e>
          if ((flags & rflags) != 0) {
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0f7      	beq.n	8007216 <osThreadFlagsWait+0x4e>
}
 8007226:	4620      	mov	r0, r4
 8007228:	b002      	add	sp, #8
 800722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        td = xTaskGetTickCount() - t0;
 800722e:	f001 fbe1 	bl	80089f4 <xTaskGetTickCount>
 8007232:	eba0 0309 	sub.w	r3, r0, r9
        if (td > tout) {
 8007236:	429d      	cmp	r5, r3
 8007238:	d312      	bcc.n	8007260 <osThreadFlagsWait+0x98>
          tout -= td;
 800723a:	444d      	add	r5, r9
 800723c:	1a2d      	subs	r5, r5, r0
 800723e:	e7da      	b.n	80071f6 <osThreadFlagsWait+0x2e>
          rflags = (uint32_t)osErrorResource;
 8007240:	f1b8 0f00 	cmp.w	r8, #0
 8007244:	bf14      	ite	ne
 8007246:	f06f 0401 	mvnne.w	r4, #1
 800724a:	f06f 0402 	mvneq.w	r4, #2
    while (rval != pdFAIL);
 800724e:	2800      	cmp	r0, #0
 8007250:	d1d1      	bne.n	80071f6 <osThreadFlagsWait+0x2e>
 8007252:	e7e8      	b.n	8007226 <osThreadFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8007254:	f06f 0405 	mvn.w	r4, #5
 8007258:	e7e5      	b.n	8007226 <osThreadFlagsWait+0x5e>
    rflags = (uint32_t)osErrorParameter;
 800725a:	f06f 0403 	mvn.w	r4, #3
 800725e:	e7e2      	b.n	8007226 <osThreadFlagsWait+0x5e>
          tout  = 0;
 8007260:	2500      	movs	r5, #0
    while (rval != pdFAIL);
 8007262:	e7c8      	b.n	80071f6 <osThreadFlagsWait+0x2e>

08007264 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007264:	b508      	push	{r3, lr}
 8007266:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800726a:	b922      	cbnz	r2, 8007276 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800726c:	b108      	cbz	r0, 8007272 <osDelay+0xe>
      vTaskDelay(ticks);
 800726e:	f001 fcd9 	bl	8008c24 <vTaskDelay>
    stat = osOK;
 8007272:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8007274:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8007276:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 800727a:	e7fb      	b.n	8007274 <osDelay+0x10>

0800727c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800727c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800727e:	4604      	mov	r4, r0
 8007280:	460e      	mov	r6, r1
 8007282:	4615      	mov	r5, r2
 8007284:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007288:	b942      	cbnz	r2, 800729c <osSemaphoreNew+0x20>
 800728a:	b138      	cbz	r0, 800729c <osSemaphoreNew+0x20>
 800728c:	4288      	cmp	r0, r1
 800728e:	d305      	bcc.n	800729c <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8007290:	b155      	cbz	r5, 80072a8 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007292:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8007296:	b12b      	cbz	r3, 80072a4 <osSemaphoreNew+0x28>
 8007298:	2f4f      	cmp	r7, #79	@ 0x4f
 800729a:	d822      	bhi.n	80072e2 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800729c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800729e:	4620      	mov	r0, r4
 80072a0:	b003      	add	sp, #12
 80072a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80072a4:	2f00      	cmp	r7, #0
 80072a6:	d1f9      	bne.n	800729c <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 80072a8:	2c01      	cmp	r4, #1
 80072aa:	d00c      	beq.n	80072c6 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80072ac:	4620      	mov	r0, r4
 80072ae:	4631      	mov	r1, r6
 80072b0:	f000 fd88 	bl	8007dc4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80072b4:	4604      	mov	r4, r0
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d0f0      	beq.n	800729c <osSemaphoreNew+0x20>
        if (attr != NULL) {
 80072ba:	b985      	cbnz	r5, 80072de <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 80072bc:	4629      	mov	r1, r5
 80072be:	4620      	mov	r0, r4
 80072c0:	f001 f8c6 	bl	8008450 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80072c4:	e7eb      	b.n	800729e <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 80072c6:	2203      	movs	r2, #3
 80072c8:	2100      	movs	r1, #0
 80072ca:	2001      	movs	r0, #1
 80072cc:	f000 fd31 	bl	8007d32 <xQueueGenericCreate>
 80072d0:	e00e      	b.n	80072f0 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80072d2:	461a      	mov	r2, r3
 80072d4:	f000 fd54 	bl	8007d80 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80072d8:	4604      	mov	r4, r0
 80072da:	2800      	cmp	r0, #0
 80072dc:	d0de      	beq.n	800729c <osSemaphoreNew+0x20>
          name = attr->name;
 80072de:	682d      	ldr	r5, [r5, #0]
 80072e0:	e7ec      	b.n	80072bc <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 80072e2:	2801      	cmp	r0, #1
 80072e4:	d1f5      	bne.n	80072d2 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80072e6:	2103      	movs	r1, #3
 80072e8:	9100      	str	r1, [sp, #0]
 80072ea:	4611      	mov	r1, r2
 80072ec:	f000 fcd3 	bl	8007c96 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 80072f0:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d0d2      	beq.n	800729c <osSemaphoreNew+0x20>
 80072f6:	2e00      	cmp	r6, #0
 80072f8:	d0df      	beq.n	80072ba <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80072fa:	2300      	movs	r3, #0
 80072fc:	461a      	mov	r2, r3
 80072fe:	4619      	mov	r1, r3
 8007300:	f000 fd7e 	bl	8007e00 <xQueueGenericSend>
 8007304:	2801      	cmp	r0, #1
 8007306:	d0d8      	beq.n	80072ba <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8007308:	4620      	mov	r0, r4
 800730a:	f001 f8cb 	bl	80084a4 <vQueueDelete>
      if (hSemaphore != NULL) {
 800730e:	e7c5      	b.n	800729c <osSemaphoreNew+0x20>

08007310 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007310:	b513      	push	{r0, r1, r4, lr}
 8007312:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007314:	b328      	cbz	r0, 8007362 <osSemaphoreAcquire+0x52>
 8007316:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800731a:	b1cb      	cbz	r3, 8007350 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800731c:	bb09      	cbnz	r1, 8007362 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800731e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007320:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007322:	f001 f828 	bl	8008376 <xQueueReceiveFromISR>
 8007326:	2801      	cmp	r0, #1
 8007328:	d003      	beq.n	8007332 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800732a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800732e:	b002      	add	sp, #8
 8007330:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	b90b      	cbnz	r3, 800733a <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8007336:	2000      	movs	r0, #0
 8007338:	e7f9      	b.n	800732e <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800733a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800733e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007342:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	e7f2      	b.n	8007336 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007350:	f000 ff54 	bl	80081fc <xQueueSemaphoreTake>
 8007354:	2801      	cmp	r0, #1
 8007356:	d0ee      	beq.n	8007336 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8007358:	2c00      	cmp	r4, #0
 800735a:	d0e6      	beq.n	800732a <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800735c:	f06f 0001 	mvn.w	r0, #1
 8007360:	e7e5      	b.n	800732e <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8007362:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007366:	e7e2      	b.n	800732e <osSemaphoreAcquire+0x1e>

08007368 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007368:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800736a:	b318      	cbz	r0, 80073b4 <osSemaphoreRelease+0x4c>
 800736c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007370:	b1cb      	cbz	r3, 80073a6 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8007372:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007374:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8007376:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007378:	f000 fe51 	bl	800801e <xQueueGiveFromISR>
 800737c:	2801      	cmp	r0, #1
 800737e:	d004      	beq.n	800738a <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8007380:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8007384:	b003      	add	sp, #12
 8007386:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800738a:	9b01      	ldr	r3, [sp, #4]
 800738c:	b14b      	cbz	r3, 80073a2 <osSemaphoreRelease+0x3a>
 800738e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007396:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80073a2:	2000      	movs	r0, #0
 80073a4:	e7ee      	b.n	8007384 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80073a6:	461a      	mov	r2, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	f000 fd29 	bl	8007e00 <xQueueGenericSend>
 80073ae:	2801      	cmp	r0, #1
 80073b0:	d0f7      	beq.n	80073a2 <osSemaphoreRelease+0x3a>
 80073b2:	e7e5      	b.n	8007380 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 80073b4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80073b8:	e7e4      	b.n	8007384 <osSemaphoreRelease+0x1c>

080073ba <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 80073ba:	b130      	cbz	r0, 80073ca <osSemaphoreGetCount+0x10>
 80073bc:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 80073c0:	b10b      	cbz	r3, 80073c6 <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80073c2:	f001 b838 	b.w	8008436 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80073c6:	f001 b823 	b.w	8008410 <uxQueueMessagesWaiting>
  }

  return (count);
}
 80073ca:	4770      	bx	lr

080073cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80073cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ce:	4605      	mov	r5, r0
 80073d0:	460e      	mov	r6, r1
 80073d2:	4614      	mov	r4, r2
 80073d4:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80073d8:	b11f      	cbz	r7, 80073e2 <osMessageQueueNew+0x16>
  hQueue = NULL;
 80073da:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80073dc:	4628      	mov	r0, r5
 80073de:	b003      	add	sp, #12
 80073e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d0f9      	beq.n	80073da <osMessageQueueNew+0xe>
 80073e6:	2900      	cmp	r1, #0
 80073e8:	d0f7      	beq.n	80073da <osMessageQueueNew+0xe>
    if (attr != NULL) {
 80073ea:	b1da      	cbz	r2, 8007424 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80073ec:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 80073f0:	b183      	cbz	r3, 8007414 <osMessageQueueNew+0x48>
 80073f2:	2a4f      	cmp	r2, #79	@ 0x4f
 80073f4:	d9f1      	bls.n	80073da <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80073f6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80073f8:	2a00      	cmp	r2, #0
 80073fa:	d0ee      	beq.n	80073da <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80073fc:	6966      	ldr	r6, [r4, #20]
 80073fe:	434d      	muls	r5, r1
 8007400:	42ae      	cmp	r6, r5
 8007402:	d3ea      	bcc.n	80073da <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007404:	9700      	str	r7, [sp, #0]
 8007406:	f000 fc46 	bl	8007c96 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800740a:	4605      	mov	r5, r0
 800740c:	2800      	cmp	r0, #0
 800740e:	d0e4      	beq.n	80073da <osMessageQueueNew+0xe>
        name = attr->name;
 8007410:	6824      	ldr	r4, [r4, #0]
 8007412:	e011      	b.n	8007438 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007414:	2a00      	cmp	r2, #0
 8007416:	d1e0      	bne.n	80073da <osMessageQueueNew+0xe>
 8007418:	6923      	ldr	r3, [r4, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1dd      	bne.n	80073da <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800741e:	6963      	ldr	r3, [r4, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1da      	bne.n	80073da <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8007424:	4628      	mov	r0, r5
 8007426:	2200      	movs	r2, #0
 8007428:	4631      	mov	r1, r6
 800742a:	f000 fc82 	bl	8007d32 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800742e:	4605      	mov	r5, r0
 8007430:	2800      	cmp	r0, #0
 8007432:	d0d2      	beq.n	80073da <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8007434:	2c00      	cmp	r4, #0
 8007436:	d1eb      	bne.n	8007410 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8007438:	4621      	mov	r1, r4
 800743a:	4628      	mov	r0, r5
 800743c:	f001 f808 	bl	8008450 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007440:	e7cc      	b.n	80073dc <osMessageQueueNew+0x10>

08007442 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007444:	461c      	mov	r4, r3
 8007446:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800744a:	b1de      	cbz	r6, 8007484 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800744c:	b338      	cbz	r0, 800749e <osMessageQueuePut+0x5c>
 800744e:	b331      	cbz	r1, 800749e <osMessageQueuePut+0x5c>
 8007450:	bb2b      	cbnz	r3, 800749e <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007452:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007454:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007456:	f000 fd85 	bl	8007f64 <xQueueGenericSendFromISR>
 800745a:	2801      	cmp	r0, #1
 800745c:	d003      	beq.n	8007466 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800745e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8007462:	b002      	add	sp, #8
 8007464:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	b90b      	cbnz	r3, 800746e <osMessageQueuePut+0x2c>
  stat = osOK;
 800746a:	2000      	movs	r0, #0
 800746c:	e7f9      	b.n	8007462 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800746e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007476:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	e7f2      	b.n	800746a <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007484:	b158      	cbz	r0, 800749e <osMessageQueuePut+0x5c>
 8007486:	b151      	cbz	r1, 800749e <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007488:	4633      	mov	r3, r6
 800748a:	4622      	mov	r2, r4
 800748c:	f000 fcb8 	bl	8007e00 <xQueueGenericSend>
 8007490:	2801      	cmp	r0, #1
 8007492:	d0ea      	beq.n	800746a <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8007494:	2c00      	cmp	r4, #0
 8007496:	d0e2      	beq.n	800745e <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8007498:	f06f 0001 	mvn.w	r0, #1
 800749c:	e7e1      	b.n	8007462 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800749e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80074a2:	e7de      	b.n	8007462 <osMessageQueuePut+0x20>

080074a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80074a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074a6:	461c      	mov	r4, r3
 80074a8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80074ac:	b1db      	cbz	r3, 80074e6 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074ae:	b330      	cbz	r0, 80074fe <osMessageQueueGet+0x5a>
 80074b0:	b329      	cbz	r1, 80074fe <osMessageQueueGet+0x5a>
 80074b2:	bb24      	cbnz	r4, 80074fe <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80074b4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80074b6:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80074b8:	f000 ff5d 	bl	8008376 <xQueueReceiveFromISR>
 80074bc:	2801      	cmp	r0, #1
 80074be:	d003      	beq.n	80074c8 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 80074c0:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80074c4:	b003      	add	sp, #12
 80074c6:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 80074c8:	9b01      	ldr	r3, [sp, #4]
 80074ca:	b90b      	cbnz	r3, 80074d0 <osMessageQueueGet+0x2c>
  stat = osOK;
 80074cc:	2000      	movs	r0, #0
 80074ce:	e7f9      	b.n	80074c4 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 80074d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80074d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	e7f2      	b.n	80074cc <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80074e6:	b150      	cbz	r0, 80074fe <osMessageQueueGet+0x5a>
 80074e8:	b149      	cbz	r1, 80074fe <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80074ea:	4622      	mov	r2, r4
 80074ec:	f000 fde8 	bl	80080c0 <xQueueReceive>
 80074f0:	2801      	cmp	r0, #1
 80074f2:	d0eb      	beq.n	80074cc <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 80074f4:	2c00      	cmp	r4, #0
 80074f6:	d0e3      	beq.n	80074c0 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 80074f8:	f06f 0001 	mvn.w	r0, #1
 80074fc:	e7e2      	b.n	80074c4 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 80074fe:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007502:	e7df      	b.n	80074c4 <osMessageQueueGet+0x20>

08007504 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007504:	f7ff bf59 	b.w	80073ba <osSemaphoreGetCount>

08007508 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007508:	4b03      	ldr	r3, [pc, #12]	@ (8007518 <vApplicationGetIdleTaskMemory+0x10>)
 800750a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800750c:	4b03      	ldr	r3, [pc, #12]	@ (800751c <vApplicationGetIdleTaskMemory+0x14>)
 800750e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007510:	2380      	movs	r3, #128	@ 0x80
 8007512:	6013      	str	r3, [r2, #0]
}
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20004d44 	.word	0x20004d44
 800751c:	20004b44 	.word	0x20004b44

08007520 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007520:	4b03      	ldr	r3, [pc, #12]	@ (8007530 <vApplicationGetTimerTaskMemory+0x10>)
 8007522:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007524:	4b03      	ldr	r3, [pc, #12]	@ (8007534 <vApplicationGetTimerTaskMemory+0x14>)
 8007526:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800752c:	6013      	str	r3, [r2, #0]
}
 800752e:	4770      	bx	lr
 8007530:	20004ae4 	.word	0x20004ae4
 8007534:	200046e4 	.word	0x200046e4

08007538 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007538:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800753a:	4b10      	ldr	r3, [pc, #64]	@ (800757c <prvInsertBlockIntoFreeList+0x44>)
 800753c:	461a      	mov	r2, r3
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4283      	cmp	r3, r0
 8007542:	d3fb      	bcc.n	800753c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007544:	6854      	ldr	r4, [r2, #4]
 8007546:	1911      	adds	r1, r2, r4
 8007548:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800754a:	bf01      	itttt	eq
 800754c:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800754e:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007550:	1909      	addeq	r1, r1, r4
 8007552:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007554:	6844      	ldr	r4, [r0, #4]
 8007556:	1901      	adds	r1, r0, r4
 8007558:	428b      	cmp	r3, r1
 800755a:	d10c      	bne.n	8007576 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800755c:	4908      	ldr	r1, [pc, #32]	@ (8007580 <prvInsertBlockIntoFreeList+0x48>)
 800755e:	6809      	ldr	r1, [r1, #0]
 8007560:	428b      	cmp	r3, r1
 8007562:	d003      	beq.n	800756c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007564:	6859      	ldr	r1, [r3, #4]
 8007566:	4421      	add	r1, r4
 8007568:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800756a:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800756c:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800756e:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007570:	bf18      	it	ne
 8007572:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007574:	bd10      	pop	{r4, pc}
 8007576:	4619      	mov	r1, r3
 8007578:	e7f8      	b.n	800756c <prvInsertBlockIntoFreeList+0x34>
 800757a:	bf00      	nop
 800757c:	20004dc0 	.word	0x20004dc0
 8007580:	20004dbc 	.word	0x20004dbc

08007584 <pvPortMalloc>:
{
 8007584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800758a:	f001 fa2b 	bl	80089e4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800758e:	4942      	ldr	r1, [pc, #264]	@ (8007698 <pvPortMalloc+0x114>)
 8007590:	4d42      	ldr	r5, [pc, #264]	@ (800769c <pvPortMalloc+0x118>)
 8007592:	680b      	ldr	r3, [r1, #0]
 8007594:	bb0b      	cbnz	r3, 80075da <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8007596:	4a42      	ldr	r2, [pc, #264]	@ (80076a0 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007598:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800759a:	bf1f      	itttt	ne
 800759c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800759e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075a2:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 80075a6:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075a8:	bf0c      	ite	eq
 80075aa:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075ae:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075b0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075b2:	4e3c      	ldr	r6, [pc, #240]	@ (80076a4 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 80075b4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075b6:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80075ba:	2000      	movs	r0, #0
 80075bc:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075be:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80075c0:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075c4:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075c6:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 80075ca:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075cc:	4b36      	ldr	r3, [pc, #216]	@ (80076a8 <pvPortMalloc+0x124>)
 80075ce:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075d0:	4b36      	ldr	r3, [pc, #216]	@ (80076ac <pvPortMalloc+0x128>)
 80075d2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80075d8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075da:	682e      	ldr	r6, [r5, #0]
 80075dc:	4226      	tst	r6, r4
 80075de:	d155      	bne.n	800768c <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 80075e0:	2c00      	cmp	r4, #0
 80075e2:	d046      	beq.n	8007672 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 80075e4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075e8:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ea:	bf1c      	itt	ne
 80075ec:	f023 0307 	bicne.w	r3, r3, #7
 80075f0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d04a      	beq.n	800768c <pvPortMalloc+0x108>
 80075f6:	4f2d      	ldr	r7, [pc, #180]	@ (80076ac <pvPortMalloc+0x128>)
 80075f8:	683c      	ldr	r4, [r7, #0]
 80075fa:	429c      	cmp	r4, r3
 80075fc:	d346      	bcc.n	800768c <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 80075fe:	4a29      	ldr	r2, [pc, #164]	@ (80076a4 <pvPortMalloc+0x120>)
 8007600:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007602:	6868      	ldr	r0, [r5, #4]
 8007604:	4298      	cmp	r0, r3
 8007606:	d204      	bcs.n	8007612 <pvPortMalloc+0x8e>
 8007608:	f8d5 c000 	ldr.w	ip, [r5]
 800760c:	f1bc 0f00 	cmp.w	ip, #0
 8007610:	d115      	bne.n	800763e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8007612:	6809      	ldr	r1, [r1, #0]
 8007614:	42a9      	cmp	r1, r5
 8007616:	d039      	beq.n	800768c <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007618:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800761a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800761e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007620:	1ac2      	subs	r2, r0, r3
 8007622:	2a10      	cmp	r2, #16
 8007624:	d912      	bls.n	800764c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007626:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007628:	0741      	lsls	r1, r0, #29
 800762a:	d00b      	beq.n	8007644 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	e7fe      	b.n	800763c <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 800763e:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8007640:	4665      	mov	r5, ip
 8007642:	e7de      	b.n	8007602 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007644:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007646:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007648:	f7ff ff76 	bl	8007538 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800764c:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800764e:	4916      	ldr	r1, [pc, #88]	@ (80076a8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007650:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007652:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8007654:	4a16      	ldr	r2, [pc, #88]	@ (80076b0 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007656:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007658:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800765e:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007660:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007662:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8007664:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007668:	bf38      	it	cc
 800766a:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800766c:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800766e:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8007672:	f001 fa63 	bl	8008b3c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007676:	0763      	lsls	r3, r4, #29
 8007678:	d00a      	beq.n	8007690 <pvPortMalloc+0x10c>
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	e7fe      	b.n	800768a <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800768c:	2400      	movs	r4, #0
 800768e:	e7f0      	b.n	8007672 <pvPortMalloc+0xee>
}
 8007690:	4620      	mov	r0, r4
 8007692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007696:	bf00      	nop
 8007698:	20004dbc 	.word	0x20004dbc
 800769c:	20004da8 	.word	0x20004da8
 80076a0:	20004dc8 	.word	0x20004dc8
 80076a4:	20004dc0 	.word	0x20004dc0
 80076a8:	20004db4 	.word	0x20004db4
 80076ac:	20004db8 	.word	0x20004db8
 80076b0:	20004db0 	.word	0x20004db0

080076b4 <vPortFree>:
{
 80076b4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80076b6:	4604      	mov	r4, r0
 80076b8:	b390      	cbz	r0, 8007720 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007724 <vPortFree+0x70>)
 80076bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	4213      	tst	r3, r2
 80076c4:	d108      	bne.n	80076d8 <vPortFree+0x24>
 80076c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	e7fe      	b.n	80076d6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076d8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80076dc:	b141      	cbz	r1, 80076f0 <vPortFree+0x3c>
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	e7fe      	b.n	80076ee <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076f0:	ea23 0302 	bic.w	r3, r3, r2
 80076f4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80076f8:	f001 f974 	bl	80089e4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007728 <vPortFree+0x74>)
 80076fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007702:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007704:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007708:	440b      	add	r3, r1
 800770a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800770c:	f7ff ff14 	bl	8007538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007710:	4a06      	ldr	r2, [pc, #24]	@ (800772c <vPortFree+0x78>)
 8007712:	6813      	ldr	r3, [r2, #0]
}
 8007714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8007718:	3301      	adds	r3, #1
 800771a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800771c:	f001 ba0e 	b.w	8008b3c <xTaskResumeAll>
}
 8007720:	bd10      	pop	{r4, pc}
 8007722:	bf00      	nop
 8007724:	20004da8 	.word	0x20004da8
 8007728:	20004db8 	.word	0x20004db8
 800772c:	20004dac 	.word	0x20004dac

08007730 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007730:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007734:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007738:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800773c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800773e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007744:	4770      	bx	lr

08007746 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800774a:	4770      	bx	lr

0800774c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800774c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800774e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007754:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007756:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007758:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800775a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800775c:	3301      	adds	r3, #1
 800775e:	6003      	str	r3, [r0, #0]
}
 8007760:	4770      	bx	lr

08007762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007762:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007764:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007766:	1c63      	adds	r3, r4, #1
 8007768:	d10a      	bne.n	8007780 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800776a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007770:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007772:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007774:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007776:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007778:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800777a:	3301      	adds	r3, #1
 800777c:	6003      	str	r3, [r0, #0]
}
 800777e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007780:	f100 0208 	add.w	r2, r0, #8
 8007784:	4613      	mov	r3, r2
 8007786:	6852      	ldr	r2, [r2, #4]
 8007788:	6815      	ldr	r5, [r2, #0]
 800778a:	42a5      	cmp	r5, r4
 800778c:	d9fa      	bls.n	8007784 <vListInsert+0x22>
 800778e:	e7ed      	b.n	800776c <vListInsert+0xa>

08007790 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007790:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8007794:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007796:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007798:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800779a:	6859      	ldr	r1, [r3, #4]
 800779c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800779e:	bf08      	it	eq
 80077a0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077a2:	2200      	movs	r2, #0
 80077a4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	3a01      	subs	r2, #1
 80077aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077ac:	6818      	ldr	r0, [r3, #0]
}
 80077ae:	4770      	bx	lr

080077b0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077b0:	4808      	ldr	r0, [pc, #32]	@ (80077d4 <prvPortStartFirstTask+0x24>)
 80077b2:	6800      	ldr	r0, [r0, #0]
 80077b4:	6800      	ldr	r0, [r0, #0]
 80077b6:	f380 8808 	msr	MSP, r0
 80077ba:	f04f 0000 	mov.w	r0, #0
 80077be:	f380 8814 	msr	CONTROL, r0
 80077c2:	b662      	cpsie	i
 80077c4:	b661      	cpsie	f
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	df00      	svc	0
 80077d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077d2:	0000      	.short	0x0000
 80077d4:	e000ed08 	.word	0xe000ed08

080077d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077e8 <vPortEnableVFP+0x10>
 80077dc:	6801      	ldr	r1, [r0, #0]
 80077de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077e2:	6001      	str	r1, [r0, #0]
 80077e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077e6:	0000      	.short	0x0000
 80077e8:	e000ed88 	.word	0xe000ed88

080077ec <prvTaskExitError>:
{
 80077ec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80077f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007828 <prvTaskExitError+0x3c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	d008      	beq.n	800780c <prvTaskExitError+0x20>
 80077fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	e7fe      	b.n	800780a <prvTaskExitError+0x1e>
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800781c:	9b01      	ldr	r3, [sp, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0fc      	beq.n	800781c <prvTaskExitError+0x30>
}
 8007822:	b002      	add	sp, #8
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	20000084 	.word	0x20000084

0800782c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800782c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007830:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007834:	4b07      	ldr	r3, [pc, #28]	@ (8007854 <pxPortInitialiseStack+0x28>)
 8007836:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800783a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800783e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007842:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007846:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800784a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800784e:	3844      	subs	r0, #68	@ 0x44
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	080077ed 	.word	0x080077ed
	...

08007860 <SVC_Handler>:
	__asm volatile (
 8007860:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <pxCurrentTCBConst2>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6808      	ldr	r0, [r1, #0]
 8007866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	f380 8809 	msr	PSP, r0
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	4770      	bx	lr
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst2>:
 8007880:	20015308 	.word	0x20015308

08007884 <vPortEnterCritical>:
 8007884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007894:	4a0a      	ldr	r2, [pc, #40]	@ (80078c0 <vPortEnterCritical+0x3c>)
 8007896:	6813      	ldr	r3, [r2, #0]
 8007898:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800789a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800789c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800789e:	d10e      	bne.n	80078be <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80078a4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	b143      	cbz	r3, 80078be <vPortEnterCritical+0x3a>
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	e7fe      	b.n	80078bc <vPortEnterCritical+0x38>
}
 80078be:	4770      	bx	lr
 80078c0:	20000084 	.word	0x20000084

080078c4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80078c4:	4a08      	ldr	r2, [pc, #32]	@ (80078e8 <vPortExitCritical+0x24>)
 80078c6:	6813      	ldr	r3, [r2, #0]
 80078c8:	b943      	cbnz	r3, 80078dc <vPortExitCritical+0x18>
 80078ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	e7fe      	b.n	80078da <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80078dc:	3b01      	subs	r3, #1
 80078de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078e0:	b90b      	cbnz	r3, 80078e6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078e2:	f383 8811 	msr	BASEPRI, r3
}
 80078e6:	4770      	bx	lr
 80078e8:	20000084 	.word	0x20000084
 80078ec:	00000000 	.word	0x00000000

080078f0 <PendSV_Handler>:
	__asm volatile
 80078f0:	f3ef 8009 	mrs	r0, PSP
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	4b15      	ldr	r3, [pc, #84]	@ (8007950 <pxCurrentTCBConst>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	f01e 0f10 	tst.w	lr, #16
 8007900:	bf08      	it	eq
 8007902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	6010      	str	r0, [r2, #0]
 800790c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007910:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007914:	f380 8811 	msr	BASEPRI, r0
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f001 f9a4 	bl	8008c6c <vTaskSwitchContext>
 8007924:	f04f 0000 	mov.w	r0, #0
 8007928:	f380 8811 	msr	BASEPRI, r0
 800792c:	bc09      	pop	{r0, r3}
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	6808      	ldr	r0, [r1, #0]
 8007932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007936:	f01e 0f10 	tst.w	lr, #16
 800793a:	bf08      	it	eq
 800793c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007940:	f380 8809 	msr	PSP, r0
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	f3af 8000 	nop.w

08007950 <pxCurrentTCBConst>:
 8007950:	20015308 	.word	0x20015308

08007954 <xPortSysTickHandler>:
{
 8007954:	b508      	push	{r3, lr}
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007966:	f001 f853 	bl	8008a10 <xTaskIncrementTick>
 800796a:	b128      	cbz	r0, 8007978 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800796c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007974:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007978:	2300      	movs	r3, #0
 800797a:	f383 8811 	msr	BASEPRI, r3
}
 800797e:	bd08      	pop	{r3, pc}

08007980 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007980:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007984:	2300      	movs	r3, #0
 8007986:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007988:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800798a:	4b05      	ldr	r3, [pc, #20]	@ (80079a0 <vPortSetupTimerInterrupt+0x20>)
 800798c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	fbb3 f3f1 	udiv	r3, r3, r1
 8007996:	3b01      	subs	r3, #1
 8007998:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800799a:	2307      	movs	r3, #7
 800799c:	6113      	str	r3, [r2, #16]
}
 800799e:	4770      	bx	lr
 80079a0:	20000078 	.word	0x20000078

080079a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80079a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80079ae:	4a38      	ldr	r2, [pc, #224]	@ (8007a90 <xPortStartScheduler+0xec>)
 80079b0:	4291      	cmp	r1, r2
 80079b2:	d108      	bne.n	80079c6 <xPortStartScheduler+0x22>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	e7fe      	b.n	80079c4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80079ca:	4b32      	ldr	r3, [pc, #200]	@ (8007a94 <xPortStartScheduler+0xf0>)
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d108      	bne.n	80079e2 <xPortStartScheduler+0x3e>
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	e7fe      	b.n	80079e0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007a98 <xPortStartScheduler+0xf4>)
 80079e4:	781a      	ldrb	r2, [r3, #0]
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079ea:	22ff      	movs	r2, #255	@ 0xff
 80079ec:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079ee:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079f0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a9c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a00:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a02:	4a27      	ldr	r2, [pc, #156]	@ (8007aa0 <xPortStartScheduler+0xfc>)
 8007a04:	2307      	movs	r3, #7
 8007a06:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a08:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8007a0c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a0e:	0609      	lsls	r1, r1, #24
 8007a10:	d40a      	bmi.n	8007a28 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d011      	beq.n	8007a3a <xPortStartScheduler+0x96>
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	e7fe      	b.n	8007a26 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f88d 3003 	strb.w	r3, [sp, #3]
 8007a38:	e7e6      	b.n	8007a08 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007a3e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a40:	9b01      	ldr	r3, [sp, #4]
 8007a42:	4a15      	ldr	r2, [pc, #84]	@ (8007a98 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a44:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a4c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a54:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a58:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007a5c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a60:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007a64:	f7ff ff8c 	bl	8007980 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007a68:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa4 <xPortStartScheduler+0x100>)
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007a6e:	f7ff feb3 	bl	80077d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a72:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007a76:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a7a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8007a7e:	f7ff fe97 	bl	80077b0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007a82:	f001 f8f3 	bl	8008c6c <vTaskSwitchContext>
	prvTaskExitError();
 8007a86:	f7ff feb1 	bl	80077ec <prvTaskExitError>
}
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	b003      	add	sp, #12
 8007a8e:	bd30      	pop	{r4, r5, pc}
 8007a90:	410fc271 	.word	0x410fc271
 8007a94:	410fc270 	.word	0x410fc270
 8007a98:	e000e400 	.word	0xe000e400
 8007a9c:	20014dcc 	.word	0x20014dcc
 8007aa0:	20014dc8 	.word	0x20014dc8
 8007aa4:	20000084 	.word	0x20000084

08007aa8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aa8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007aac:	2b0f      	cmp	r3, #15
 8007aae:	d90e      	bls.n	8007ace <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ab0:	4a11      	ldr	r2, [pc, #68]	@ (8007af8 <vPortValidateInterruptPriority+0x50>)
 8007ab2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ab4:	4a11      	ldr	r2, [pc, #68]	@ (8007afc <vPortValidateInterruptPriority+0x54>)
 8007ab6:	7812      	ldrb	r2, [r2, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d908      	bls.n	8007ace <vPortValidateInterruptPriority+0x26>
 8007abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	e7fe      	b.n	8007acc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ace:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8007b00 <vPortValidateInterruptPriority+0x58>)
 8007ad4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d908      	bls.n	8007af4 <vPortValidateInterruptPriority+0x4c>
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	e7fe      	b.n	8007af2 <vPortValidateInterruptPriority+0x4a>
	}
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	e000e3f0 	.word	0xe000e3f0
 8007afc:	20014dcc 	.word	0x20014dcc
 8007b00:	20014dc8 	.word	0x20014dc8

08007b04 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b04:	b510      	push	{r4, lr}
 8007b06:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b08:	f7ff febc 	bl	8007884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b0c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007b0e:	f7ff fed9 	bl	80078c4 <vPortExitCritical>

	return xReturn;
}
 8007b12:	fab4 f084 	clz	r0, r4
 8007b16:	0940      	lsrs	r0, r0, #5
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <prvCopyDataToQueue>:
{
 8007b1a:	b570      	push	{r4, r5, r6, lr}
 8007b1c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b1e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b20:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8007b22:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b24:	b942      	cbnz	r2, 8007b38 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b26:	6806      	ldr	r6, [r0, #0]
 8007b28:	b99e      	cbnz	r6, 8007b52 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b2a:	6880      	ldr	r0, [r0, #8]
 8007b2c:	f001 f9ec 	bl	8008f08 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b30:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b32:	3501      	adds	r5, #1
 8007b34:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007b38:	b96e      	cbnz	r6, 8007b56 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b3a:	6840      	ldr	r0, [r0, #4]
 8007b3c:	f00b fcdf 	bl	80134fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b40:	6863      	ldr	r3, [r4, #4]
 8007b42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007b44:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b46:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b48:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b4a:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b4c:	bf24      	itt	cs
 8007b4e:	6823      	ldrcs	r3, [r4, #0]
 8007b50:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007b52:	2000      	movs	r0, #0
 8007b54:	e7ed      	b.n	8007b32 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b56:	68c0      	ldr	r0, [r0, #12]
 8007b58:	f00b fcd1 	bl	80134fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b5c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007b5e:	68e3      	ldr	r3, [r4, #12]
 8007b60:	4251      	negs	r1, r2
 8007b62:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b64:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b66:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b68:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b6a:	bf3e      	ittt	cc
 8007b6c:	68a3      	ldrcc	r3, [r4, #8]
 8007b6e:	185b      	addcc	r3, r3, r1
 8007b70:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007b72:	2e02      	cmp	r6, #2
 8007b74:	d1ed      	bne.n	8007b52 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b76:	b10d      	cbz	r5, 8007b7c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007b78:	3d01      	subs	r5, #1
 8007b7a:	e7ea      	b.n	8007b52 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	e7d8      	b.n	8007b32 <prvCopyDataToQueue+0x18>

08007b80 <prvCopyDataFromQueue>:
{
 8007b80:	4603      	mov	r3, r0
 8007b82:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007b86:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b88:	b16a      	cbz	r2, 8007ba6 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b8a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b8c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b8e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b90:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b92:	bf28      	it	cs
 8007b94:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b96:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b98:	bf28      	it	cs
 8007b9a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b9c:	68d9      	ldr	r1, [r3, #12]
}
 8007b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ba2:	f00b bcac 	b.w	80134fe <memcpy>
}
 8007ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <prvUnlockQueue>:
{
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007bb0:	f7ff fe68 	bl	8007884 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007bb4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007bbc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	dd01      	ble.n	8007bc6 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007bc4:	b9b3      	cbnz	r3, 8007bf4 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8007bc6:	23ff      	movs	r3, #255	@ 0xff
 8007bc8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007bcc:	f7ff fe7a 	bl	80078c4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007bd0:	f7ff fe58 	bl	8007884 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007bd4:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd8:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007bdc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bde:	2d00      	cmp	r5, #0
 8007be0:	dd01      	ble.n	8007be6 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007be2:	6923      	ldr	r3, [r4, #16]
 8007be4:	b97b      	cbnz	r3, 8007c06 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8007be6:	23ff      	movs	r3, #255	@ 0xff
 8007be8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8007bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007bf0:	f7ff be68 	b.w	80078c4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f001 f8ab 	bl	8008d50 <xTaskRemoveFromEventList>
 8007bfa:	b108      	cbz	r0, 8007c00 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8007bfc:	f001 f930 	bl	8008e60 <vTaskMissedYield>
			--cTxLock;
 8007c00:	3d01      	subs	r5, #1
 8007c02:	b26d      	sxtb	r5, r5
 8007c04:	e7db      	b.n	8007bbe <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c06:	4630      	mov	r0, r6
 8007c08:	f001 f8a2 	bl	8008d50 <xTaskRemoveFromEventList>
 8007c0c:	b108      	cbz	r0, 8007c12 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8007c0e:	f001 f927 	bl	8008e60 <vTaskMissedYield>
				--cRxLock;
 8007c12:	3d01      	subs	r5, #1
 8007c14:	b26d      	sxtb	r5, r5
 8007c16:	e7e2      	b.n	8007bde <prvUnlockQueue+0x32>

08007c18 <xQueueGenericReset>:
{
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	b940      	cbnz	r0, 8007c32 <xQueueGenericReset+0x1a>
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	e7fe      	b.n	8007c30 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007c32:	f7ff fe27 	bl	8007884 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c36:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8007c3a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c3c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c3e:	434b      	muls	r3, r1
 8007c40:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c42:	1a5b      	subs	r3, r3, r1
 8007c44:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c46:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c48:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c4e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c50:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c54:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007c58:	b9a5      	cbnz	r5, 8007c84 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	b173      	cbz	r3, 8007c7c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c5e:	f104 0010 	add.w	r0, r4, #16
 8007c62:	f001 f875 	bl	8008d50 <xTaskRemoveFromEventList>
 8007c66:	b148      	cbz	r0, 8007c7c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007c68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c70:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007c7c:	f7ff fe22 	bl	80078c4 <vPortExitCritical>
}
 8007c80:	2001      	movs	r0, #1
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c84:	f104 0010 	add.w	r0, r4, #16
 8007c88:	f7ff fd52 	bl	8007730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c8c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007c90:	f7ff fd4e 	bl	8007730 <vListInitialise>
 8007c94:	e7f2      	b.n	8007c7c <xQueueGenericReset+0x64>

08007c96 <xQueueGenericCreateStatic>:
	{
 8007c96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c98:	460d      	mov	r5, r1
 8007c9a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c9c:	b940      	cbnz	r0, 8007cb0 <xQueueGenericCreateStatic+0x1a>
 8007c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	e7fe      	b.n	8007cae <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007cb0:	b943      	cbnz	r3, 8007cc4 <xQueueGenericCreateStatic+0x2e>
 8007cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	e7fe      	b.n	8007cc2 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cc4:	b14a      	cbz	r2, 8007cda <xQueueGenericCreateStatic+0x44>
 8007cc6:	b991      	cbnz	r1, 8007cee <xQueueGenericCreateStatic+0x58>
 8007cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	e7fe      	b.n	8007cd8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cda:	b141      	cbz	r1, 8007cee <xQueueGenericCreateStatic+0x58>
 8007cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	e7fe      	b.n	8007cec <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cee:	2350      	movs	r3, #80	@ 0x50
 8007cf0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cf2:	9b01      	ldr	r3, [sp, #4]
 8007cf4:	2b50      	cmp	r3, #80	@ 0x50
 8007cf6:	d008      	beq.n	8007d0a <xQueueGenericCreateStatic+0x74>
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	e7fe      	b.n	8007d08 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d0a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d0c:	2d00      	cmp	r5, #0
 8007d0e:	bf08      	it	eq
 8007d10:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007d12:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d16:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8007d1a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d1c:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d1e:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d20:	f7ff ff7a 	bl	8007c18 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007d24:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007d28:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	b003      	add	sp, #12
 8007d30:	bd30      	pop	{r4, r5, pc}

08007d32 <xQueueGenericCreate>:
	{
 8007d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d34:	460d      	mov	r5, r1
 8007d36:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d38:	4606      	mov	r6, r0
 8007d3a:	b940      	cbnz	r0, 8007d4e <xQueueGenericCreate+0x1c>
 8007d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	e7fe      	b.n	8007d4c <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d4e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d50:	3050      	adds	r0, #80	@ 0x50
 8007d52:	f7ff fc17 	bl	8007584 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007d56:	4604      	mov	r4, r0
 8007d58:	b170      	cbz	r0, 8007d78 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d60:	b165      	cbz	r5, 8007d7c <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d62:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8007d66:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8007d6a:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7ff ff52 	bl	8007c18 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007d74:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8007d78:	4620      	mov	r0, r4
 8007d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	e7f2      	b.n	8007d66 <xQueueGenericCreate+0x34>

08007d80 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007d80:	b513      	push	{r0, r1, r4, lr}
 8007d82:	4613      	mov	r3, r2
 8007d84:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007d86:	b940      	cbnz	r0, 8007d9a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8007d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	e7fe      	b.n	8007d98 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d9a:	4288      	cmp	r0, r1
 8007d9c:	d208      	bcs.n	8007db0 <xQueueCreateCountingSemaphoreStatic+0x30>
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	e7fe      	b.n	8007dae <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007db0:	2202      	movs	r2, #2
 8007db2:	9200      	str	r2, [sp, #0]
 8007db4:	2200      	movs	r2, #0
 8007db6:	4611      	mov	r1, r2
 8007db8:	f7ff ff6d 	bl	8007c96 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007dbc:	b100      	cbz	r0, 8007dc0 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007dbe:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007dc0:	b002      	add	sp, #8
 8007dc2:	bd10      	pop	{r4, pc}

08007dc4 <xQueueCreateCountingSemaphore>:
	{
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007dc8:	b940      	cbnz	r0, 8007ddc <xQueueCreateCountingSemaphore+0x18>
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	e7fe      	b.n	8007dda <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ddc:	4288      	cmp	r0, r1
 8007dde:	d208      	bcs.n	8007df2 <xQueueCreateCountingSemaphore+0x2e>
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	e7fe      	b.n	8007df0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007df2:	2202      	movs	r2, #2
 8007df4:	2100      	movs	r1, #0
 8007df6:	f7ff ff9c 	bl	8007d32 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007dfa:	b100      	cbz	r0, 8007dfe <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007dfc:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007dfe:	bd10      	pop	{r4, pc}

08007e00 <xQueueGenericSend>:
{
 8007e00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007e04:	460f      	mov	r7, r1
 8007e06:	9201      	str	r2, [sp, #4]
 8007e08:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	b940      	cbnz	r0, 8007e20 <xQueueGenericSend+0x20>
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	e7fe      	b.n	8007e1e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e20:	b951      	cbnz	r1, 8007e38 <xQueueGenericSend+0x38>
 8007e22:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007e24:	b143      	cbz	r3, 8007e38 <xQueueGenericSend+0x38>
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	e7fe      	b.n	8007e36 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e38:	2e02      	cmp	r6, #2
 8007e3a:	d10b      	bne.n	8007e54 <xQueueGenericSend+0x54>
 8007e3c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d008      	beq.n	8007e54 <xQueueGenericSend+0x54>
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	e7fe      	b.n	8007e52 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e54:	f001 f80a 	bl	8008e6c <xTaskGetSchedulerState>
 8007e58:	4605      	mov	r5, r0
 8007e5a:	b320      	cbz	r0, 8007ea6 <xQueueGenericSend+0xa6>
 8007e5c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007e5e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007e62:	f7ff fd0f 	bl	8007884 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e66:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007e68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d227      	bcs.n	8007ebe <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e6e:	4632      	mov	r2, r6
 8007e70:	4639      	mov	r1, r7
 8007e72:	4620      	mov	r0, r4
 8007e74:	f7ff fe51 	bl	8007b1a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e7a:	b11b      	cbz	r3, 8007e84 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e7c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e80:	f000 ff66 	bl	8008d50 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007e84:	b148      	cbz	r0, 8007e9a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8007e86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007e9a:	f7ff fd13 	bl	80078c4 <vPortExitCritical>
				return pdPASS;
 8007e9e:	2001      	movs	r0, #1
}
 8007ea0:	b004      	add	sp, #16
 8007ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ea6:	9b01      	ldr	r3, [sp, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0d8      	beq.n	8007e5e <xQueueGenericSend+0x5e>
 8007eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	e7fe      	b.n	8007ebc <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ebe:	2e02      	cmp	r6, #2
 8007ec0:	d0d5      	beq.n	8007e6e <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ec2:	9b01      	ldr	r3, [sp, #4]
 8007ec4:	b91b      	cbnz	r3, 8007ece <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007ec6:	f7ff fcfd 	bl	80078c4 <vPortExitCritical>
					return errQUEUE_FULL;
 8007eca:	2000      	movs	r0, #0
 8007ecc:	e7e8      	b.n	8007ea0 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 8007ece:	b915      	cbnz	r5, 8007ed6 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ed0:	a802      	add	r0, sp, #8
 8007ed2:	f000 ff7d 	bl	8008dd0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007ed6:	f7ff fcf5 	bl	80078c4 <vPortExitCritical>
		vTaskSuspendAll();
 8007eda:	f000 fd83 	bl	80089e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ede:	f7ff fcd1 	bl	8007884 <vPortEnterCritical>
 8007ee2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007ee6:	2bff      	cmp	r3, #255	@ 0xff
 8007ee8:	bf08      	it	eq
 8007eea:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007eee:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007ef2:	2bff      	cmp	r3, #255	@ 0xff
 8007ef4:	bf08      	it	eq
 8007ef6:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007efa:	f7ff fce3 	bl	80078c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007efe:	a901      	add	r1, sp, #4
 8007f00:	a802      	add	r0, sp, #8
 8007f02:	f000 ff71 	bl	8008de8 <xTaskCheckForTimeOut>
 8007f06:	bb38      	cbnz	r0, 8007f58 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f08:	f7ff fcbc 	bl	8007884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f0c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007f0e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d10e      	bne.n	8007f32 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007f14:	f7ff fcd6 	bl	80078c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f18:	9901      	ldr	r1, [sp, #4]
 8007f1a:	f104 0010 	add.w	r0, r4, #16
 8007f1e:	f000 fedf 	bl	8008ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7ff fe42 	bl	8007bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f28:	f000 fe08 	bl	8008b3c <xTaskResumeAll>
 8007f2c:	b148      	cbz	r0, 8007f42 <xQueueGenericSend+0x142>
 8007f2e:	2501      	movs	r5, #1
 8007f30:	e797      	b.n	8007e62 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007f32:	f7ff fcc7 	bl	80078c4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007f36:	4620      	mov	r0, r4
 8007f38:	f7ff fe38 	bl	8007bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f3c:	f000 fdfe 	bl	8008b3c <xTaskResumeAll>
 8007f40:	e7f5      	b.n	8007f2e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007f42:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	e7ea      	b.n	8007f2e <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f7ff fe27 	bl	8007bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f5e:	f000 fded 	bl	8008b3c <xTaskResumeAll>
			return errQUEUE_FULL;
 8007f62:	e7b2      	b.n	8007eca <xQueueGenericSend+0xca>

08007f64 <xQueueGenericSendFromISR>:
{
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4689      	mov	r9, r1
 8007f6a:	4617      	mov	r7, r2
 8007f6c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007f6e:	4604      	mov	r4, r0
 8007f70:	b940      	cbnz	r0, 8007f84 <xQueueGenericSendFromISR+0x20>
 8007f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	e7fe      	b.n	8007f82 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f84:	b951      	cbnz	r1, 8007f9c <xQueueGenericSendFromISR+0x38>
 8007f86:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f88:	b143      	cbz	r3, 8007f9c <xQueueGenericSendFromISR+0x38>
 8007f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	e7fe      	b.n	8007f9a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f9c:	2e02      	cmp	r6, #2
 8007f9e:	d10b      	bne.n	8007fb8 <xQueueGenericSendFromISR+0x54>
 8007fa0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d008      	beq.n	8007fb8 <xQueueGenericSendFromISR+0x54>
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	e7fe      	b.n	8007fb6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fb8:	f7ff fd76 	bl	8007aa8 <vPortValidateInterruptPriority>
	__asm volatile
 8007fbc:	f3ef 8811 	mrs	r8, BASEPRI
 8007fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fd0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007fd2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d301      	bcc.n	8007fdc <xQueueGenericSendFromISR+0x78>
 8007fd8:	2e02      	cmp	r6, #2
 8007fda:	d11e      	bne.n	800801a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fdc:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fe0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fe2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f7ff fd96 	bl	8007b1a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007fee:	1c6b      	adds	r3, r5, #1
 8007ff0:	d10e      	bne.n	8008010 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ff2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ff4:	b13b      	cbz	r3, 8008006 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007ffa:	f000 fea9 	bl	8008d50 <xTaskRemoveFromEventList>
 8007ffe:	b110      	cbz	r0, 8008006 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8008000:	b10f      	cbz	r7, 8008006 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008002:	2301      	movs	r3, #1
 8008004:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8008006:	2001      	movs	r0, #1
	__asm volatile
 8008008:	f388 8811 	msr	BASEPRI, r8
}
 800800c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008010:	3501      	adds	r5, #1
 8008012:	b26d      	sxtb	r5, r5
 8008014:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8008018:	e7f5      	b.n	8008006 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800801a:	2000      	movs	r0, #0
 800801c:	e7f4      	b.n	8008008 <xQueueGenericSendFromISR+0xa4>

0800801e <xQueueGiveFromISR>:
{
 800801e:	b570      	push	{r4, r5, r6, lr}
 8008020:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008022:	4604      	mov	r4, r0
 8008024:	b940      	cbnz	r0, 8008038 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	e7fe      	b.n	8008036 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008038:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800803a:	b143      	cbz	r3, 800804e <xQueueGiveFromISR+0x30>
 800803c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	e7fe      	b.n	800804c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800804e:	6803      	ldr	r3, [r0, #0]
 8008050:	b953      	cbnz	r3, 8008068 <xQueueGiveFromISR+0x4a>
 8008052:	6883      	ldr	r3, [r0, #8]
 8008054:	b143      	cbz	r3, 8008068 <xQueueGiveFromISR+0x4a>
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	e7fe      	b.n	8008066 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008068:	f7ff fd1e 	bl	8007aa8 <vPortValidateInterruptPriority>
	__asm volatile
 800806c:	f3ef 8611 	mrs	r6, BASEPRI
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008080:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008082:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008084:	4293      	cmp	r3, r2
 8008086:	d919      	bls.n	80080bc <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800808c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800808e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008090:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008092:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8008094:	d10d      	bne.n	80080b2 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008096:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008098:	b13b      	cbz	r3, 80080aa <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800809a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800809e:	f000 fe57 	bl	8008d50 <xTaskRemoveFromEventList>
 80080a2:	b110      	cbz	r0, 80080aa <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80080a4:	b10d      	cbz	r5, 80080aa <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 80080aa:	2001      	movs	r0, #1
	__asm volatile
 80080ac:	f386 8811 	msr	BASEPRI, r6
}
 80080b0:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080b2:	3301      	adds	r3, #1
 80080b4:	b25b      	sxtb	r3, r3
 80080b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80080ba:	e7f6      	b.n	80080aa <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80080bc:	2000      	movs	r0, #0
 80080be:	e7f5      	b.n	80080ac <xQueueGiveFromISR+0x8e>

080080c0 <xQueueReceive>:
{
 80080c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80080c4:	460e      	mov	r6, r1
 80080c6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80080c8:	4604      	mov	r4, r0
 80080ca:	b940      	cbnz	r0, 80080de <xQueueReceive+0x1e>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	e7fe      	b.n	80080dc <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080de:	b951      	cbnz	r1, 80080f6 <xQueueReceive+0x36>
 80080e0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80080e2:	b143      	cbz	r3, 80080f6 <xQueueReceive+0x36>
 80080e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	e7fe      	b.n	80080f4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080f6:	f000 feb9 	bl	8008e6c <xTaskGetSchedulerState>
 80080fa:	4605      	mov	r5, r0
 80080fc:	b318      	cbz	r0, 8008146 <xQueueReceive+0x86>
 80080fe:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008100:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008104:	f7ff fbbe 	bl	8007884 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008108:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800810a:	b347      	cbz	r7, 800815e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800810c:	4631      	mov	r1, r6
 800810e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008110:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008112:	f7ff fd35 	bl	8007b80 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008116:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	b173      	cbz	r3, 800813a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800811c:	f104 0010 	add.w	r0, r4, #16
 8008120:	f000 fe16 	bl	8008d50 <xTaskRemoveFromEventList>
 8008124:	b148      	cbz	r0, 800813a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8008126:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800812a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800812e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800813a:	f7ff fbc3 	bl	80078c4 <vPortExitCritical>
				return pdPASS;
 800813e:	2001      	movs	r0, #1
}
 8008140:	b004      	add	sp, #16
 8008142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008146:	9b01      	ldr	r3, [sp, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0d9      	beq.n	8008100 <xQueueReceive+0x40>
 800814c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	e7fe      	b.n	800815c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	b91b      	cbnz	r3, 800816a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8008162:	f7ff fbaf 	bl	80078c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008166:	2000      	movs	r0, #0
 8008168:	e7ea      	b.n	8008140 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800816a:	b915      	cbnz	r5, 8008172 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800816c:	a802      	add	r0, sp, #8
 800816e:	f000 fe2f 	bl	8008dd0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008172:	f7ff fba7 	bl	80078c4 <vPortExitCritical>
		vTaskSuspendAll();
 8008176:	f000 fc35 	bl	80089e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800817a:	f7ff fb83 	bl	8007884 <vPortEnterCritical>
 800817e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008182:	2bff      	cmp	r3, #255	@ 0xff
 8008184:	bf08      	it	eq
 8008186:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800818a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800818e:	2bff      	cmp	r3, #255	@ 0xff
 8008190:	bf08      	it	eq
 8008192:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008196:	f7ff fb95 	bl	80078c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800819a:	a901      	add	r1, sp, #4
 800819c:	a802      	add	r0, sp, #8
 800819e:	f000 fe23 	bl	8008de8 <xTaskCheckForTimeOut>
 80081a2:	bb00      	cbnz	r0, 80081e6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081a4:	4620      	mov	r0, r4
 80081a6:	f7ff fcad 	bl	8007b04 <prvIsQueueEmpty>
 80081aa:	b1b0      	cbz	r0, 80081da <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081ac:	9901      	ldr	r1, [sp, #4]
 80081ae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80081b2:	f000 fd95 	bl	8008ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7ff fcf8 	bl	8007bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081bc:	f000 fcbe 	bl	8008b3c <xTaskResumeAll>
 80081c0:	b948      	cbnz	r0, 80081d6 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80081c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80081c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	2501      	movs	r5, #1
 80081d8:	e794      	b.n	8008104 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff fce6 	bl	8007bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081e0:	f000 fcac 	bl	8008b3c <xTaskResumeAll>
 80081e4:	e7f7      	b.n	80081d6 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 80081e6:	4620      	mov	r0, r4
 80081e8:	f7ff fce0 	bl	8007bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081ec:	f000 fca6 	bl	8008b3c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081f0:	4620      	mov	r0, r4
 80081f2:	f7ff fc87 	bl	8007b04 <prvIsQueueEmpty>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d0ed      	beq.n	80081d6 <xQueueReceive+0x116>
 80081fa:	e7b4      	b.n	8008166 <xQueueReceive+0xa6>

080081fc <xQueueSemaphoreTake>:
{
 80081fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fe:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008200:	4604      	mov	r4, r0
{
 8008202:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008204:	b940      	cbnz	r0, 8008218 <xQueueSemaphoreTake+0x1c>
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	e7fe      	b.n	8008216 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008218:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800821a:	b145      	cbz	r5, 800822e <xQueueSemaphoreTake+0x32>
 800821c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	e7fe      	b.n	800822c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800822e:	f000 fe1d 	bl	8008e6c <xTaskGetSchedulerState>
 8008232:	4606      	mov	r6, r0
 8008234:	b320      	cbz	r0, 8008280 <xQueueSemaphoreTake+0x84>
 8008236:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008238:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800823a:	f7ff fb23 	bl	8007884 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800823e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008240:	b353      	cbz	r3, 8008298 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008242:	3b01      	subs	r3, #1
 8008244:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	b913      	cbnz	r3, 8008250 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800824a:	f000 feed 	bl	8009028 <pvTaskIncrementMutexHeldCount>
 800824e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	b173      	cbz	r3, 8008272 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008254:	f104 0010 	add.w	r0, r4, #16
 8008258:	f000 fd7a 	bl	8008d50 <xTaskRemoveFromEventList>
 800825c:	b148      	cbz	r0, 8008272 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800825e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008266:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008272:	f7ff fb27 	bl	80078c4 <vPortExitCritical>
				return pdPASS;
 8008276:	2001      	movs	r0, #1
}
 8008278:	b005      	add	sp, #20
 800827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827c:	4635      	mov	r5, r6
 800827e:	e7db      	b.n	8008238 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0fa      	beq.n	800827c <xQueueSemaphoreTake+0x80>
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	e7fe      	b.n	8008296 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	b953      	cbnz	r3, 80082b2 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800829c:	2d00      	cmp	r5, #0
 800829e:	d066      	beq.n	800836e <xQueueSemaphoreTake+0x172>
 80082a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	e7fe      	b.n	80082b0 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 80082b2:	b916      	cbnz	r6, 80082ba <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082b4:	a802      	add	r0, sp, #8
 80082b6:	f000 fd8b 	bl	8008dd0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80082ba:	f7ff fb03 	bl	80078c4 <vPortExitCritical>
		vTaskSuspendAll();
 80082be:	f000 fb91 	bl	80089e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082c2:	f7ff fadf 	bl	8007884 <vPortEnterCritical>
 80082c6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80082ca:	2bff      	cmp	r3, #255	@ 0xff
 80082cc:	bf08      	it	eq
 80082ce:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 80082d2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80082d6:	2bff      	cmp	r3, #255	@ 0xff
 80082d8:	bf08      	it	eq
 80082da:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 80082de:	f7ff faf1 	bl	80078c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082e2:	a901      	add	r1, sp, #4
 80082e4:	a802      	add	r0, sp, #8
 80082e6:	f000 fd7f 	bl	8008de8 <xTaskCheckForTimeOut>
 80082ea:	bb50      	cbnz	r0, 8008342 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7ff fc09 	bl	8007b04 <prvIsQueueEmpty>
 80082f2:	b300      	cbz	r0, 8008336 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	b93b      	cbnz	r3, 8008308 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 80082f8:	f7ff fac4 	bl	8007884 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082fc:	68a0      	ldr	r0, [r4, #8]
 80082fe:	f000 fdc5 	bl	8008e8c <xTaskPriorityInherit>
 8008302:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008304:	f7ff fade 	bl	80078c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008308:	9901      	ldr	r1, [sp, #4]
 800830a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800830e:	f000 fce7 	bl	8008ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008312:	4620      	mov	r0, r4
 8008314:	f7ff fc4a 	bl	8007bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008318:	f000 fc10 	bl	8008b3c <xTaskResumeAll>
 800831c:	b948      	cbnz	r0, 8008332 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800831e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008326:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	2601      	movs	r6, #1
 8008334:	e781      	b.n	800823a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff fc38 	bl	8007bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800833c:	f000 fbfe 	bl	8008b3c <xTaskResumeAll>
 8008340:	e7f7      	b.n	8008332 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8008342:	4620      	mov	r0, r4
 8008344:	f7ff fc32 	bl	8007bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008348:	f000 fbf8 	bl	8008b3c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800834c:	4620      	mov	r0, r4
 800834e:	f7ff fbd9 	bl	8007b04 <prvIsQueueEmpty>
 8008352:	2800      	cmp	r0, #0
 8008354:	d0ed      	beq.n	8008332 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8008356:	b165      	cbz	r5, 8008372 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8008358:	f7ff fa94 	bl	8007884 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800835c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800835e:	b119      	cbz	r1, 8008368 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008360:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008362:	6819      	ldr	r1, [r3, #0]
 8008364:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008368:	68a0      	ldr	r0, [r4, #8]
 800836a:	f000 fe0f 	bl	8008f8c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800836e:	f7ff faa9 	bl	80078c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008372:	2000      	movs	r0, #0
 8008374:	e780      	b.n	8008278 <xQueueSemaphoreTake+0x7c>

08008376 <xQueueReceiveFromISR>:
{
 8008376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800837a:	4689      	mov	r9, r1
 800837c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800837e:	4604      	mov	r4, r0
 8008380:	b940      	cbnz	r0, 8008394 <xQueueReceiveFromISR+0x1e>
 8008382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	e7fe      	b.n	8008392 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008394:	b951      	cbnz	r1, 80083ac <xQueueReceiveFromISR+0x36>
 8008396:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008398:	b143      	cbz	r3, 80083ac <xQueueReceiveFromISR+0x36>
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	e7fe      	b.n	80083aa <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083ac:	f7ff fb7c 	bl	8007aa8 <vPortValidateInterruptPriority>
	__asm volatile
 80083b0:	f3ef 8711 	mrs	r7, BASEPRI
 80083b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083c4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083c6:	b30d      	cbz	r5, 800840c <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80083c8:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083cc:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80083ce:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083d0:	4620      	mov	r0, r4
 80083d2:	f7ff fbd5 	bl	8007b80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083d6:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80083d8:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083da:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80083dc:	d111      	bne.n	8008402 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	b153      	cbz	r3, 80083f8 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e2:	f104 0010 	add.w	r0, r4, #16
 80083e6:	f000 fcb3 	bl	8008d50 <xTaskRemoveFromEventList>
 80083ea:	b128      	cbz	r0, 80083f8 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 80083ec:	f1b8 0f00 	cmp.w	r8, #0
 80083f0:	d002      	beq.n	80083f8 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 80083f8:	2001      	movs	r0, #1
	__asm volatile
 80083fa:	f387 8811 	msr	BASEPRI, r7
}
 80083fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008402:	3601      	adds	r6, #1
 8008404:	b276      	sxtb	r6, r6
 8008406:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800840a:	e7f5      	b.n	80083f8 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800840c:	4628      	mov	r0, r5
 800840e:	e7f4      	b.n	80083fa <xQueueReceiveFromISR+0x84>

08008410 <uxQueueMessagesWaiting>:
{
 8008410:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8008412:	4604      	mov	r4, r0
 8008414:	b940      	cbnz	r0, 8008428 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	e7fe      	b.n	8008426 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8008428:	f7ff fa2c 	bl	8007884 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800842c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 800842e:	f7ff fa49 	bl	80078c4 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008432:	4620      	mov	r0, r4
 8008434:	bd10      	pop	{r4, pc}

08008436 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8008436:	b940      	cbnz	r0, 800844a <uxQueueMessagesWaitingFromISR+0x14>
 8008438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	e7fe      	b.n	8008448 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 800844a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800844c:	4770      	bx	lr
	...

08008450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008450:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008452:	4a07      	ldr	r2, [pc, #28]	@ (8008470 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008454:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008456:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800845a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800845e:	b91d      	cbnz	r5, 8008468 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008460:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008464:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008466:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008468:	3301      	adds	r3, #1
 800846a:	2b08      	cmp	r3, #8
 800846c:	d1f3      	bne.n	8008456 <vQueueAddToRegistry+0x6>
 800846e:	e7fa      	b.n	8008466 <vQueueAddToRegistry+0x16>
 8008470:	20014dd0 	.word	0x20014dd0

08008474 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008474:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008476:	4a09      	ldr	r2, [pc, #36]	@ (800849c <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008478:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800847a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800847e:	4281      	cmp	r1, r0
 8008480:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8008484:	d106      	bne.n	8008494 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008486:	4a06      	ldr	r2, [pc, #24]	@ (80084a0 <vQueueUnregisterQueue+0x2c>)
 8008488:	2100      	movs	r1, #0
 800848a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800848e:	4422      	add	r2, r4
 8008490:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008492:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008494:	3301      	adds	r3, #1
 8008496:	2b08      	cmp	r3, #8
 8008498:	d1ef      	bne.n	800847a <vQueueUnregisterQueue+0x6>
 800849a:	e7fa      	b.n	8008492 <vQueueUnregisterQueue+0x1e>
 800849c:	20014dd4 	.word	0x20014dd4
 80084a0:	20014dd0 	.word	0x20014dd0

080084a4 <vQueueDelete>:
{
 80084a4:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80084a6:	b940      	cbnz	r0, 80084ba <vQueueDelete+0x16>
 80084a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	e7fe      	b.n	80084b8 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 80084ba:	f7ff ffdb 	bl	8008474 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80084be:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80084c2:	b91b      	cbnz	r3, 80084cc <vQueueDelete+0x28>
}
 80084c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80084c8:	f7ff b8f4 	b.w	80076b4 <vPortFree>
}
 80084cc:	bd10      	pop	{r4, pc}

080084ce <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084ce:	b570      	push	{r4, r5, r6, lr}
 80084d0:	4604      	mov	r4, r0
 80084d2:	460d      	mov	r5, r1
 80084d4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084d6:	f7ff f9d5 	bl	8007884 <vPortEnterCritical>
 80084da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80084de:	2bff      	cmp	r3, #255	@ 0xff
 80084e0:	bf04      	itt	eq
 80084e2:	2300      	moveq	r3, #0
 80084e4:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80084e8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80084ec:	2bff      	cmp	r3, #255	@ 0xff
 80084ee:	bf04      	itt	eq
 80084f0:	2300      	moveq	r3, #0
 80084f2:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80084f6:	f7ff f9e5 	bl	80078c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80084fc:	b92b      	cbnz	r3, 800850a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084fe:	4632      	mov	r2, r6
 8008500:	4629      	mov	r1, r5
 8008502:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008506:	f000 fc05 	bl	8008d14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800850a:	4620      	mov	r0, r4
	}
 800850c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008510:	f7ff bb4c 	b.w	8007bac <prvUnlockQueue>

08008514 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008518:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800851a:	f7ff f9b3 	bl	8007884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800851e:	4b30      	ldr	r3, [pc, #192]	@ (80085e0 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8008520:	4e30      	ldr	r6, [pc, #192]	@ (80085e4 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4f30      	ldr	r7, [pc, #192]	@ (80085e8 <prvAddNewTaskToReadyList+0xd4>)
 8008526:	3201      	adds	r2, #1
 8008528:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800852a:	6835      	ldr	r5, [r6, #0]
 800852c:	2d00      	cmp	r5, #0
 800852e:	d14b      	bne.n	80085c8 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008530:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d11f      	bne.n	8008578 <prvAddNewTaskToReadyList+0x64>
 8008538:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800853a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800853c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800853e:	f7ff f8f7 	bl	8007730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008542:	2d38      	cmp	r5, #56	@ 0x38
 8008544:	f108 0814 	add.w	r8, r8, #20
 8008548:	d1f7      	bne.n	800853a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800854a:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8008610 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 800854e:	4d27      	ldr	r5, [pc, #156]	@ (80085ec <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008550:	4640      	mov	r0, r8
 8008552:	f7ff f8ed 	bl	8007730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008556:	4628      	mov	r0, r5
 8008558:	f7ff f8ea 	bl	8007730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800855c:	4824      	ldr	r0, [pc, #144]	@ (80085f0 <prvAddNewTaskToReadyList+0xdc>)
 800855e:	f7ff f8e7 	bl	8007730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008562:	4824      	ldr	r0, [pc, #144]	@ (80085f4 <prvAddNewTaskToReadyList+0xe0>)
 8008564:	f7ff f8e4 	bl	8007730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008568:	4823      	ldr	r0, [pc, #140]	@ (80085f8 <prvAddNewTaskToReadyList+0xe4>)
 800856a:	f7ff f8e1 	bl	8007730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800856e:	4b23      	ldr	r3, [pc, #140]	@ (80085fc <prvAddNewTaskToReadyList+0xe8>)
 8008570:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008574:	4b22      	ldr	r3, [pc, #136]	@ (8008600 <prvAddNewTaskToReadyList+0xec>)
 8008576:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008578:	4a22      	ldr	r2, [pc, #136]	@ (8008604 <prvAddNewTaskToReadyList+0xf0>)
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	3301      	adds	r3, #1
 800857e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008580:	4a21      	ldr	r2, [pc, #132]	@ (8008608 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008582:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008584:	6811      	ldr	r1, [r2, #0]
 8008586:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008588:	2014      	movs	r0, #20
 800858a:	428b      	cmp	r3, r1
 800858c:	fb00 7003 	mla	r0, r0, r3, r7
 8008590:	f104 0104 	add.w	r1, r4, #4
 8008594:	bf88      	it	hi
 8008596:	6013      	strhi	r3, [r2, #0]
 8008598:	f7ff f8d8 	bl	800774c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800859c:	f7ff f992 	bl	80078c4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80085a0:	4b1a      	ldr	r3, [pc, #104]	@ (800860c <prvAddNewTaskToReadyList+0xf8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	b173      	cbz	r3, 80085c4 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085a6:	6833      	ldr	r3, [r6, #0]
 80085a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d209      	bcs.n	80085c4 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80085b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80085b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	f3bf 8f6f 	isb	sy
}
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80085c8:	4b10      	ldr	r3, [pc, #64]	@ (800860c <prvAddNewTaskToReadyList+0xf8>)
 80085ca:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80085ce:	2a00      	cmp	r2, #0
 80085d0:	d1d2      	bne.n	8008578 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085d2:	6832      	ldr	r2, [r6, #0]
 80085d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80085d6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80085d8:	bf98      	it	ls
 80085da:	6034      	strls	r4, [r6, #0]
 80085dc:	e7cc      	b.n	8008578 <prvAddNewTaskToReadyList+0x64>
 80085de:	bf00      	nop
 80085e0:	20014e34 	.word	0x20014e34
 80085e4:	20015308 	.word	0x20015308
 80085e8:	20014ea8 	.word	0x20014ea8
 80085ec:	20014e80 	.word	0x20014e80
 80085f0:	20014e64 	.word	0x20014e64
 80085f4:	20014e50 	.word	0x20014e50
 80085f8:	20014e38 	.word	0x20014e38
 80085fc:	20014e7c 	.word	0x20014e7c
 8008600:	20014e78 	.word	0x20014e78
 8008604:	20014e18 	.word	0x20014e18
 8008608:	20014e2c 	.word	0x20014e2c
 800860c:	20014e28 	.word	0x20014e28
 8008610:	20014e94 	.word	0x20014e94

08008614 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008616:	4b15      	ldr	r3, [pc, #84]	@ (800866c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008618:	4d15      	ldr	r5, [pc, #84]	@ (8008670 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800861a:	681c      	ldr	r4, [r3, #0]
{
 800861c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800861e:	6828      	ldr	r0, [r5, #0]
 8008620:	3004      	adds	r0, #4
{
 8008622:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008624:	f7ff f8b4 	bl	8007790 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008628:	1c73      	adds	r3, r6, #1
 800862a:	d107      	bne.n	800863c <prvAddCurrentTaskToDelayedList+0x28>
 800862c:	b137      	cbz	r7, 800863c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800862e:	6829      	ldr	r1, [r5, #0]
 8008630:	4810      	ldr	r0, [pc, #64]	@ (8008674 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008636:	3104      	adds	r1, #4
 8008638:	f7ff b888 	b.w	800774c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	19a4      	adds	r4, r4, r6
 8008640:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008642:	d307      	bcc.n	8008654 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008644:	4b0c      	ldr	r3, [pc, #48]	@ (8008678 <prvAddCurrentTaskToDelayedList+0x64>)
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	6829      	ldr	r1, [r5, #0]
}
 800864a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800864e:	3104      	adds	r1, #4
 8008650:	f7ff b887 	b.w	8007762 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008654:	4b09      	ldr	r3, [pc, #36]	@ (800867c <prvAddCurrentTaskToDelayedList+0x68>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	6829      	ldr	r1, [r5, #0]
 800865a:	3104      	adds	r1, #4
 800865c:	f7ff f881 	bl	8007762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008660:	4b07      	ldr	r3, [pc, #28]	@ (8008680 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008666:	bf88      	it	hi
 8008668:	601c      	strhi	r4, [r3, #0]
}
 800866a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800866c:	20014e30 	.word	0x20014e30
 8008670:	20015308 	.word	0x20015308
 8008674:	20014e38 	.word	0x20014e38
 8008678:	20014e78 	.word	0x20014e78
 800867c:	20014e7c 	.word	0x20014e7c
 8008680:	20014e14 	.word	0x20014e14

08008684 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008684:	4a06      	ldr	r2, [pc, #24]	@ (80086a0 <prvResetNextTaskUnblockTime+0x1c>)
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	6819      	ldr	r1, [r3, #0]
 800868a:	4b06      	ldr	r3, [pc, #24]	@ (80086a4 <prvResetNextTaskUnblockTime+0x20>)
 800868c:	b919      	cbnz	r1, 8008696 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008692:	601a      	str	r2, [r3, #0]
}
 8008694:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008696:	6812      	ldr	r2, [r2, #0]
 8008698:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800869a:	68d2      	ldr	r2, [r2, #12]
 800869c:	6852      	ldr	r2, [r2, #4]
 800869e:	e7f8      	b.n	8008692 <prvResetNextTaskUnblockTime+0xe>
 80086a0:	20014e7c 	.word	0x20014e7c
 80086a4:	20014e14 	.word	0x20014e14

080086a8 <prvDeleteTCB>:
	{
 80086a8:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086aa:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 80086ae:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086b0:	b93b      	cbnz	r3, 80086c2 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80086b2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80086b4:	f7fe fffe 	bl	80076b4 <vPortFree>
				vPortFree( pxTCB );
 80086b8:	4620      	mov	r0, r4
	}
 80086ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80086be:	f7fe bff9 	b.w	80076b4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d0f9      	beq.n	80086ba <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d008      	beq.n	80086dc <prvDeleteTCB+0x34>
 80086ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	e7fe      	b.n	80086da <prvDeleteTCB+0x32>
	}
 80086dc:	bd10      	pop	{r4, pc}
	...

080086e0 <prvIdleTask>:
{
 80086e0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086e2:	4c13      	ldr	r4, [pc, #76]	@ (8008730 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e4:	4f13      	ldr	r7, [pc, #76]	@ (8008734 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80086e6:	4d14      	ldr	r5, [pc, #80]	@ (8008738 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	b973      	cbnz	r3, 800870a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086ec:	4b13      	ldr	r3, [pc, #76]	@ (800873c <prvIdleTask+0x5c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d9f8      	bls.n	80086e6 <prvIdleTask+0x6>
				taskYIELD();
 80086f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80086f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	e7ed      	b.n	80086e6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800870a:	f7ff f8bb 	bl	8007884 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008712:	1d30      	adds	r0, r6, #4
 8008714:	f7ff f83c 	bl	8007790 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	3b01      	subs	r3, #1
 800871c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	3b01      	subs	r3, #1
 8008722:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008724:	f7ff f8ce 	bl	80078c4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff ffbd 	bl	80086a8 <prvDeleteTCB>
 800872e:	e7db      	b.n	80086e8 <prvIdleTask+0x8>
 8008730:	20014e4c 	.word	0x20014e4c
 8008734:	20014e50 	.word	0x20014e50
 8008738:	20014e34 	.word	0x20014e34
 800873c:	20014ea8 	.word	0x20014ea8

08008740 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008748:	0096      	lsls	r6, r2, #2
 800874a:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800874c:	4607      	mov	r7, r0
 800874e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008750:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008752:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008754:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008756:	f00a fe02 	bl	801335e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800875a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800875c:	3e04      	subs	r6, #4
 800875e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008760:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008764:	b3b5      	cbz	r5, 80087d4 <prvInitialiseNewTask.constprop.0+0x94>
 8008766:	1e6b      	subs	r3, r5, #1
 8008768:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800876c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800876e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008772:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008776:	b109      	cbz	r1, 800877c <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008778:	42ab      	cmp	r3, r5
 800877a:	d1f8      	bne.n	800876e <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800877c:	2300      	movs	r3, #0
 800877e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008782:	9d08      	ldr	r5, [sp, #32]
 8008784:	2d37      	cmp	r5, #55	@ 0x37
 8008786:	bf28      	it	cs
 8008788:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800878a:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800878e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008790:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008792:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008794:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008798:	f7fe ffd5 	bl	8007746 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087a0:	f104 0018 	add.w	r0, r4, #24
 80087a4:	f7fe ffcf 	bl	8007746 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80087a8:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087ac:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ae:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087b0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 80087b2:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087b6:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087ba:	4642      	mov	r2, r8
 80087bc:	4639      	mov	r1, r7
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff f834 	bl	800782c <pxPortInitialiseStack>
 80087c4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80087c6:	f1b9 0f00 	cmp.w	r9, #0
 80087ca:	d001      	beq.n	80087d0 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087cc:	f8c9 4000 	str.w	r4, [r9]
}
 80087d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087d4:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80087d8:	e7d3      	b.n	8008782 <prvInitialiseNewTask.constprop.0+0x42>

080087da <xTaskCreateStatic>:
	{
 80087da:	b570      	push	{r4, r5, r6, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80087e2:	b945      	cbnz	r5, 80087f6 <xTaskCreateStatic+0x1c>
 80087e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	e7fe      	b.n	80087f4 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80087f6:	b944      	cbnz	r4, 800880a <xTaskCreateStatic+0x30>
 80087f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	e7fe      	b.n	8008808 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800880a:	2660      	movs	r6, #96	@ 0x60
 800880c:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800880e:	9e05      	ldr	r6, [sp, #20]
 8008810:	2e60      	cmp	r6, #96	@ 0x60
 8008812:	d008      	beq.n	8008826 <xTaskCreateStatic+0x4c>
 8008814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	e7fe      	b.n	8008824 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008826:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008828:	2502      	movs	r5, #2
 800882a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800882e:	ad04      	add	r5, sp, #16
 8008830:	9501      	str	r5, [sp, #4]
 8008832:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008834:	9402      	str	r4, [sp, #8]
 8008836:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008838:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800883a:	f7ff ff81 	bl	8008740 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800883e:	4620      	mov	r0, r4
 8008840:	f7ff fe68 	bl	8008514 <prvAddNewTaskToReadyList>
	}
 8008844:	9804      	ldr	r0, [sp, #16]
 8008846:	b006      	add	sp, #24
 8008848:	bd70      	pop	{r4, r5, r6, pc}

0800884a <xTaskCreate>:
	{
 800884a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800884e:	4607      	mov	r7, r0
 8008850:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008852:	0090      	lsls	r0, r2, #2
	{
 8008854:	4688      	mov	r8, r1
 8008856:	4616      	mov	r6, r2
 8008858:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800885a:	f7fe fe93 	bl	8007584 <pvPortMalloc>
			if( pxStack != NULL )
 800885e:	4605      	mov	r5, r0
 8008860:	b920      	cbnz	r0, 800886c <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008862:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008866:	b005      	add	sp, #20
 8008868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800886c:	2060      	movs	r0, #96	@ 0x60
 800886e:	f7fe fe89 	bl	8007584 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008872:	4604      	mov	r4, r0
 8008874:	b198      	cbz	r0, 800889e <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008876:	2300      	movs	r3, #0
 8008878:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800887c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 800887e:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008884:	9002      	str	r0, [sp, #8]
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	4632      	mov	r2, r6
 800888a:	464b      	mov	r3, r9
 800888c:	4641      	mov	r1, r8
 800888e:	4638      	mov	r0, r7
 8008890:	f7ff ff56 	bl	8008740 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008894:	4620      	mov	r0, r4
 8008896:	f7ff fe3d 	bl	8008514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800889a:	2001      	movs	r0, #1
 800889c:	e7e3      	b.n	8008866 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800889e:	4628      	mov	r0, r5
 80088a0:	f7fe ff08 	bl	80076b4 <vPortFree>
		if( pxNewTCB != NULL )
 80088a4:	e7dd      	b.n	8008862 <xTaskCreate+0x18>
	...

080088a8 <vTaskDelete>:
	{
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4604      	mov	r4, r0
 80088ac:	4d23      	ldr	r5, [pc, #140]	@ (800893c <vTaskDelete+0x94>)
		taskENTER_CRITICAL();
 80088ae:	f7fe ffe9 	bl	8007884 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80088b2:	b904      	cbnz	r4, 80088b6 <vTaskDelete+0xe>
 80088b4:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088b6:	1d26      	adds	r6, r4, #4
 80088b8:	4630      	mov	r0, r6
 80088ba:	f7fe ff69 	bl	8007790 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088c0:	b11b      	cbz	r3, 80088ca <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088c2:	f104 0018 	add.w	r0, r4, #24
 80088c6:	f7fe ff63 	bl	8007790 <uxListRemove>
			uxTaskNumber++;
 80088ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008940 <vTaskDelete+0x98>)
 80088cc:	6813      	ldr	r3, [r2, #0]
 80088ce:	3301      	adds	r3, #1
 80088d0:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 80088d2:	682b      	ldr	r3, [r5, #0]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d11b      	bne.n	8008910 <vTaskDelete+0x68>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80088d8:	481a      	ldr	r0, [pc, #104]	@ (8008944 <vTaskDelete+0x9c>)
 80088da:	4631      	mov	r1, r6
 80088dc:	f7fe ff36 	bl	800774c <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80088e0:	4a19      	ldr	r2, [pc, #100]	@ (8008948 <vTaskDelete+0xa0>)
 80088e2:	6813      	ldr	r3, [r2, #0]
 80088e4:	3301      	adds	r3, #1
 80088e6:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 80088e8:	f7fe ffec 	bl	80078c4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80088ec:	4b17      	ldr	r3, [pc, #92]	@ (800894c <vTaskDelete+0xa4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	b313      	cbz	r3, 8008938 <vTaskDelete+0x90>
			if( pxTCB == pxCurrentTCB )
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	d11f      	bne.n	8008938 <vTaskDelete+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 80088f8:	4b15      	ldr	r3, [pc, #84]	@ (8008950 <vTaskDelete+0xa8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	b193      	cbz	r3, 8008924 <vTaskDelete+0x7c>
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	e7fe      	b.n	800890e <vTaskDelete+0x66>
				--uxCurrentNumberOfTasks;
 8008910:	4a10      	ldr	r2, [pc, #64]	@ (8008954 <vTaskDelete+0xac>)
 8008912:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008914:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8008916:	3b01      	subs	r3, #1
 8008918:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800891a:	f7ff fec5 	bl	80086a8 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800891e:	f7ff feb1 	bl	8008684 <prvResetNextTaskUnblockTime>
 8008922:	e7e1      	b.n	80088e8 <vTaskDelete+0x40>
				portYIELD_WITHIN_API();
 8008924:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800892c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	f3bf 8f6f 	isb	sy
	}
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	bf00      	nop
 800893c:	20015308 	.word	0x20015308
 8008940:	20014e18 	.word	0x20014e18
 8008944:	20014e50 	.word	0x20014e50
 8008948:	20014e4c 	.word	0x20014e4c
 800894c:	20014e28 	.word	0x20014e28
 8008950:	20014e10 	.word	0x20014e10
 8008954:	20014e34 	.word	0x20014e34

08008958 <vTaskStartScheduler>:
{
 8008958:	b510      	push	{r4, lr}
 800895a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800895c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800895e:	aa07      	add	r2, sp, #28
 8008960:	a906      	add	r1, sp, #24
 8008962:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008964:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008968:	f7fe fdce 	bl	8007508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800896c:	9b05      	ldr	r3, [sp, #20]
 800896e:	9302      	str	r3, [sp, #8]
 8008970:	9b06      	ldr	r3, [sp, #24]
 8008972:	9a07      	ldr	r2, [sp, #28]
 8008974:	4916      	ldr	r1, [pc, #88]	@ (80089d0 <vTaskStartScheduler+0x78>)
 8008976:	4817      	ldr	r0, [pc, #92]	@ (80089d4 <vTaskStartScheduler+0x7c>)
 8008978:	e9cd 4300 	strd	r4, r3, [sp]
 800897c:	4623      	mov	r3, r4
 800897e:	f7ff ff2c 	bl	80087da <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008982:	b318      	cbz	r0, 80089cc <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8008984:	f000 fcf0 	bl	8009368 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008988:	2801      	cmp	r0, #1
 800898a:	d114      	bne.n	80089b6 <vTaskStartScheduler+0x5e>
 800898c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800899c:	4b0e      	ldr	r3, [pc, #56]	@ (80089d8 <vTaskStartScheduler+0x80>)
 800899e:	f04f 32ff 	mov.w	r2, #4294967295
 80089a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089a4:	4b0d      	ldr	r3, [pc, #52]	@ (80089dc <vTaskStartScheduler+0x84>)
 80089a6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089a8:	4b0d      	ldr	r3, [pc, #52]	@ (80089e0 <vTaskStartScheduler+0x88>)
 80089aa:	601c      	str	r4, [r3, #0]
}
 80089ac:	b008      	add	sp, #32
 80089ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80089b2:	f7fe bff7 	b.w	80079a4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089b6:	3001      	adds	r0, #1
 80089b8:	d108      	bne.n	80089cc <vTaskStartScheduler+0x74>
 80089ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	e7fe      	b.n	80089ca <vTaskStartScheduler+0x72>
}
 80089cc:	b008      	add	sp, #32
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	08014dbc 	.word	0x08014dbc
 80089d4:	080086e1 	.word	0x080086e1
 80089d8:	20014e14 	.word	0x20014e14
 80089dc:	20014e28 	.word	0x20014e28
 80089e0:	20014e30 	.word	0x20014e30

080089e4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80089e4:	4a02      	ldr	r2, [pc, #8]	@ (80089f0 <vTaskSuspendAll+0xc>)
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	3301      	adds	r3, #1
 80089ea:	6013      	str	r3, [r2, #0]
}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20014e10 	.word	0x20014e10

080089f4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80089f4:	4b01      	ldr	r3, [pc, #4]	@ (80089fc <xTaskGetTickCount+0x8>)
 80089f6:	6818      	ldr	r0, [r3, #0]
}
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20014e30 	.word	0x20014e30

08008a00 <xTaskGetTickCountFromISR>:
{
 8008a00:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a02:	f7ff f851 	bl	8007aa8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8008a06:	4b01      	ldr	r3, [pc, #4]	@ (8008a0c <xTaskGetTickCountFromISR+0xc>)
 8008a08:	6818      	ldr	r0, [r3, #0]
}
 8008a0a:	bd08      	pop	{r3, pc}
 8008a0c:	20014e30 	.word	0x20014e30

08008a10 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a10:	4b3f      	ldr	r3, [pc, #252]	@ (8008b10 <xTaskIncrementTick+0x100>)
 8008a12:	681b      	ldr	r3, [r3, #0]
{
 8008a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d172      	bne.n	8008b02 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8008b14 <xTaskIncrementTick+0x104>)
 8008a1e:	681c      	ldr	r4, [r3, #0]
 8008a20:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008a22:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a24:	b9bc      	cbnz	r4, 8008a56 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008a26:	4b3c      	ldr	r3, [pc, #240]	@ (8008b18 <xTaskIncrementTick+0x108>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	6812      	ldr	r2, [r2, #0]
 8008a2c:	b142      	cbz	r2, 8008a40 <xTaskIncrementTick+0x30>
 8008a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	e7fe      	b.n	8008a3e <xTaskIncrementTick+0x2e>
 8008a40:	4a36      	ldr	r2, [pc, #216]	@ (8008b1c <xTaskIncrementTick+0x10c>)
 8008a42:	6819      	ldr	r1, [r3, #0]
 8008a44:	6810      	ldr	r0, [r2, #0]
 8008a46:	6018      	str	r0, [r3, #0]
 8008a48:	6011      	str	r1, [r2, #0]
 8008a4a:	4a35      	ldr	r2, [pc, #212]	@ (8008b20 <xTaskIncrementTick+0x110>)
 8008a4c:	6813      	ldr	r3, [r2, #0]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	f7ff fe17 	bl	8008684 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a56:	4d33      	ldr	r5, [pc, #204]	@ (8008b24 <xTaskIncrementTick+0x114>)
 8008a58:	4e33      	ldr	r6, [pc, #204]	@ (8008b28 <xTaskIncrementTick+0x118>)
 8008a5a:	682b      	ldr	r3, [r5, #0]
 8008a5c:	4f33      	ldr	r7, [pc, #204]	@ (8008b2c <xTaskIncrementTick+0x11c>)
 8008a5e:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8008a60:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a64:	d212      	bcs.n	8008a8c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008a6a:	2114      	movs	r1, #20
 8008a6c:	434a      	muls	r2, r1
 8008a6e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8008a70:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8008a72:	4a2f      	ldr	r2, [pc, #188]	@ (8008b30 <xTaskIncrementTick+0x120>)
 8008a74:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8008a76:	bf28      	it	cs
 8008a78:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	bf18      	it	ne
 8008a80:	f04f 0b01 	movne.w	fp, #1
}
 8008a84:	4658      	mov	r0, fp
 8008a86:	b003      	add	sp, #12
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a8c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8008b18 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8008a90:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8008b38 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a94:	f8d9 2000 	ldr.w	r2, [r9]
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	b91a      	cbnz	r2, 8008aa4 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa0:	602a      	str	r2, [r5, #0]
					break;
 8008aa2:	e7e0      	b.n	8008a66 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8008aa8:	68d2      	ldr	r2, [r2, #12]
 8008aaa:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008aae:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8008ab2:	428c      	cmp	r4, r1
 8008ab4:	d201      	bcs.n	8008aba <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8008ab6:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ab8:	e7d5      	b.n	8008a66 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aba:	f108 0304 	add.w	r3, r8, #4
 8008abe:	4618      	mov	r0, r3
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f7fe fe65 	bl	8007790 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ac6:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8008aca:	b119      	cbz	r1, 8008ad4 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008acc:	f108 0018 	add.w	r0, r8, #24
 8008ad0:	f7fe fe5e 	bl	8007790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ad4:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8008ad8:	f8da 1000 	ldr.w	r1, [sl]
 8008adc:	2314      	movs	r3, #20
 8008ade:	4288      	cmp	r0, r1
 8008ae0:	bf88      	it	hi
 8008ae2:	f8ca 0000 	strhi.w	r0, [sl]
 8008ae6:	9901      	ldr	r1, [sp, #4]
 8008ae8:	fb03 6000 	mla	r0, r3, r0, r6
 8008aec:	f7fe fe2e 	bl	800774c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008af0:	6838      	ldr	r0, [r7, #0]
 8008af2:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008af6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008af8:	4291      	cmp	r1, r2
 8008afa:	bf28      	it	cs
 8008afc:	f04f 0b01 	movcs.w	fp, #1
 8008b00:	e7c8      	b.n	8008a94 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8008b02:	4a0c      	ldr	r2, [pc, #48]	@ (8008b34 <xTaskIncrementTick+0x124>)
 8008b04:	6813      	ldr	r3, [r2, #0]
 8008b06:	3301      	adds	r3, #1
 8008b08:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008b0a:	f04f 0b00 	mov.w	fp, #0
 8008b0e:	e7b9      	b.n	8008a84 <xTaskIncrementTick+0x74>
 8008b10:	20014e10 	.word	0x20014e10
 8008b14:	20014e30 	.word	0x20014e30
 8008b18:	20014e7c 	.word	0x20014e7c
 8008b1c:	20014e78 	.word	0x20014e78
 8008b20:	20014e1c 	.word	0x20014e1c
 8008b24:	20014e14 	.word	0x20014e14
 8008b28:	20014ea8 	.word	0x20014ea8
 8008b2c:	20015308 	.word	0x20015308
 8008b30:	20014e20 	.word	0x20014e20
 8008b34:	20014e24 	.word	0x20014e24
 8008b38:	20014e2c 	.word	0x20014e2c

08008b3c <xTaskResumeAll>:
{
 8008b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008b40:	4c30      	ldr	r4, [pc, #192]	@ (8008c04 <xTaskResumeAll+0xc8>)
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	b943      	cbnz	r3, 8008b58 <xTaskResumeAll+0x1c>
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	e7fe      	b.n	8008b56 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008b58:	f7fe fe94 	bl	8007884 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b62:	6824      	ldr	r4, [r4, #0]
 8008b64:	b12c      	cbz	r4, 8008b72 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008b66:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008b68:	f7fe feac 	bl	80078c4 <vPortExitCritical>
}
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b72:	4b25      	ldr	r3, [pc, #148]	@ (8008c08 <xTaskResumeAll+0xcc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0f5      	beq.n	8008b66 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b7a:	4d24      	ldr	r5, [pc, #144]	@ (8008c0c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8008b7c:	4e24      	ldr	r6, [pc, #144]	@ (8008c10 <xTaskResumeAll+0xd4>)
 8008b7e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8008c20 <xTaskResumeAll+0xe4>
 8008b82:	e01d      	b.n	8008bc0 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b84:	68eb      	ldr	r3, [r5, #12]
 8008b86:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b88:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b8a:	f104 0018 	add.w	r0, r4, #24
 8008b8e:	f7fe fdff 	bl	8007790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b92:	4638      	mov	r0, r7
 8008b94:	f7fe fdfc 	bl	8007790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008b9a:	6832      	ldr	r2, [r6, #0]
 8008b9c:	2014      	movs	r0, #20
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	fb00 8003 	mla	r0, r0, r3, r8
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	bf88      	it	hi
 8008ba8:	6033      	strhi	r3, [r6, #0]
 8008baa:	f7fe fdcf 	bl	800774c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bae:	4b19      	ldr	r3, [pc, #100]	@ (8008c14 <xTaskResumeAll+0xd8>)
 8008bb0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d302      	bcc.n	8008bc0 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8008bba:	4b17      	ldr	r3, [pc, #92]	@ (8008c18 <xTaskResumeAll+0xdc>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1de      	bne.n	8008b84 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008bc6:	b10c      	cbz	r4, 8008bcc <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8008bc8:	f7ff fd5c 	bl	8008684 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bcc:	4d13      	ldr	r5, [pc, #76]	@ (8008c1c <xTaskResumeAll+0xe0>)
 8008bce:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008bd0:	b144      	cbz	r4, 8008be4 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8008bd2:	4e11      	ldr	r6, [pc, #68]	@ (8008c18 <xTaskResumeAll+0xdc>)
 8008bd4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008bd6:	f7ff ff1b 	bl	8008a10 <xTaskIncrementTick>
 8008bda:	b100      	cbz	r0, 8008bde <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8008bdc:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bde:	3c01      	subs	r4, #1
 8008be0:	d1f9      	bne.n	8008bd6 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8008be2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008be4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c18 <xTaskResumeAll+0xdc>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0bc      	beq.n	8008b66 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008bec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008bf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008c00:	2401      	movs	r4, #1
 8008c02:	e7b1      	b.n	8008b68 <xTaskResumeAll+0x2c>
 8008c04:	20014e10 	.word	0x20014e10
 8008c08:	20014e34 	.word	0x20014e34
 8008c0c:	20014e64 	.word	0x20014e64
 8008c10:	20014e2c 	.word	0x20014e2c
 8008c14:	20015308 	.word	0x20015308
 8008c18:	20014e20 	.word	0x20014e20
 8008c1c:	20014e24 	.word	0x20014e24
 8008c20:	20014ea8 	.word	0x20014ea8

08008c24 <vTaskDelay>:
	{
 8008c24:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c26:	b950      	cbnz	r0, 8008c3e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008c28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c30:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	f3bf 8f6f 	isb	sy
	}
 8008c3c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c68 <vTaskDelay+0x44>)
 8008c40:	6819      	ldr	r1, [r3, #0]
 8008c42:	b141      	cbz	r1, 8008c56 <vTaskDelay+0x32>
 8008c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	e7fe      	b.n	8008c54 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008c56:	f7ff fec5 	bl	80089e4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c5a:	f7ff fcdb 	bl	8008614 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008c5e:	f7ff ff6d 	bl	8008b3c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d0e0      	beq.n	8008c28 <vTaskDelay+0x4>
 8008c66:	e7e9      	b.n	8008c3c <vTaskDelay+0x18>
 8008c68:	20014e10 	.word	0x20014e10

08008c6c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c6c:	4b17      	ldr	r3, [pc, #92]	@ (8008ccc <vTaskSwitchContext+0x60>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	4b17      	ldr	r3, [pc, #92]	@ (8008cd0 <vTaskSwitchContext+0x64>)
{
 8008c72:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c74:	b112      	cbz	r2, 8008c7c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008c76:	2201      	movs	r2, #1
 8008c78:	601a      	str	r2, [r3, #0]
}
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7c:	4d15      	ldr	r5, [pc, #84]	@ (8008cd4 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8008c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c80:	682a      	ldr	r2, [r5, #0]
 8008c82:	4915      	ldr	r1, [pc, #84]	@ (8008cd8 <vTaskSwitchContext+0x6c>)
 8008c84:	2614      	movs	r6, #20
 8008c86:	fb06 f302 	mul.w	r3, r6, r2
 8008c8a:	18c8      	adds	r0, r1, r3
 8008c8c:	58cc      	ldr	r4, [r1, r3]
 8008c8e:	b18c      	cbz	r4, 8008cb4 <vTaskSwitchContext+0x48>
 8008c90:	6844      	ldr	r4, [r0, #4]
 8008c92:	3308      	adds	r3, #8
 8008c94:	6864      	ldr	r4, [r4, #4]
 8008c96:	6044      	str	r4, [r0, #4]
 8008c98:	440b      	add	r3, r1
 8008c9a:	429c      	cmp	r4, r3
 8008c9c:	bf04      	itt	eq
 8008c9e:	6863      	ldreq	r3, [r4, #4]
 8008ca0:	6043      	streq	r3, [r0, #4]
 8008ca2:	2314      	movs	r3, #20
 8008ca4:	fb03 1102 	mla	r1, r3, r2, r1
 8008ca8:	684b      	ldr	r3, [r1, #4]
 8008caa:	68d9      	ldr	r1, [r3, #12]
 8008cac:	4b0b      	ldr	r3, [pc, #44]	@ (8008cdc <vTaskSwitchContext+0x70>)
 8008cae:	6019      	str	r1, [r3, #0]
 8008cb0:	602a      	str	r2, [r5, #0]
}
 8008cb2:	e7e2      	b.n	8008c7a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb4:	b942      	cbnz	r2, 8008cc8 <vTaskSwitchContext+0x5c>
 8008cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	e7fe      	b.n	8008cc6 <vTaskSwitchContext+0x5a>
 8008cc8:	3a01      	subs	r2, #1
 8008cca:	e7dc      	b.n	8008c86 <vTaskSwitchContext+0x1a>
 8008ccc:	20014e10 	.word	0x20014e10
 8008cd0:	20014e20 	.word	0x20014e20
 8008cd4:	20014e2c 	.word	0x20014e2c
 8008cd8:	20014ea8 	.word	0x20014ea8
 8008cdc:	20015308 	.word	0x20015308

08008ce0 <vTaskPlaceOnEventList>:
{
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008ce4:	b940      	cbnz	r0, 8008cf8 <vTaskPlaceOnEventList+0x18>
 8008ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	e7fe      	b.n	8008cf6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cf8:	4b05      	ldr	r3, [pc, #20]	@ (8008d10 <vTaskPlaceOnEventList+0x30>)
 8008cfa:	6819      	ldr	r1, [r3, #0]
 8008cfc:	3118      	adds	r1, #24
 8008cfe:	f7fe fd30 	bl	8007762 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d02:	4620      	mov	r0, r4
 8008d04:	2101      	movs	r1, #1
}
 8008d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d0a:	f7ff bc83 	b.w	8008614 <prvAddCurrentTaskToDelayedList>
 8008d0e:	bf00      	nop
 8008d10:	20015308 	.word	0x20015308

08008d14 <vTaskPlaceOnEventListRestricted>:
	{
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	460d      	mov	r5, r1
 8008d18:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008d1a:	b940      	cbnz	r0, 8008d2e <vTaskPlaceOnEventListRestricted+0x1a>
 8008d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	e7fe      	b.n	8008d2c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d2e:	4b07      	ldr	r3, [pc, #28]	@ (8008d4c <vTaskPlaceOnEventListRestricted+0x38>)
 8008d30:	6819      	ldr	r1, [r3, #0]
 8008d32:	3118      	adds	r1, #24
 8008d34:	f7fe fd0a 	bl	800774c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008d38:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	bf0c      	ite	eq
 8008d3e:	4628      	moveq	r0, r5
 8008d40:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d48:	f7ff bc64 	b.w	8008614 <prvAddCurrentTaskToDelayedList>
 8008d4c:	20015308 	.word	0x20015308

08008d50 <xTaskRemoveFromEventList>:
{
 8008d50:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d52:	68c3      	ldr	r3, [r0, #12]
 8008d54:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008d56:	b944      	cbnz	r4, 8008d6a <xTaskRemoveFromEventList+0x1a>
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	e7fe      	b.n	8008d68 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d6a:	f104 0518 	add.w	r5, r4, #24
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f7fe fd0e 	bl	8007790 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d74:	4b10      	ldr	r3, [pc, #64]	@ (8008db8 <xTaskRemoveFromEventList+0x68>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	b9db      	cbnz	r3, 8008db2 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d7a:	1d25      	adds	r5, r4, #4
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f7fe fd07 	bl	8007790 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d82:	4a0e      	ldr	r2, [pc, #56]	@ (8008dbc <xTaskRemoveFromEventList+0x6c>)
 8008d84:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008d86:	6811      	ldr	r1, [r2, #0]
 8008d88:	428b      	cmp	r3, r1
 8008d8a:	bf88      	it	hi
 8008d8c:	6013      	strhi	r3, [r2, #0]
 8008d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008dc0 <xTaskRemoveFromEventList+0x70>)
 8008d90:	2014      	movs	r0, #20
 8008d92:	4629      	mov	r1, r5
 8008d94:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d98:	f7fe fcd8 	bl	800774c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d9c:	4b09      	ldr	r3, [pc, #36]	@ (8008dc4 <xTaskRemoveFromEventList+0x74>)
 8008d9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008da6:	bf83      	ittte	hi
 8008da8:	4b07      	ldrhi	r3, [pc, #28]	@ (8008dc8 <xTaskRemoveFromEventList+0x78>)
 8008daa:	2001      	movhi	r0, #1
 8008dac:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8008dae:	2000      	movls	r0, #0
}
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008db2:	4806      	ldr	r0, [pc, #24]	@ (8008dcc <xTaskRemoveFromEventList+0x7c>)
 8008db4:	4629      	mov	r1, r5
 8008db6:	e7ef      	b.n	8008d98 <xTaskRemoveFromEventList+0x48>
 8008db8:	20014e10 	.word	0x20014e10
 8008dbc:	20014e2c 	.word	0x20014e2c
 8008dc0:	20014ea8 	.word	0x20014ea8
 8008dc4:	20015308 	.word	0x20015308
 8008dc8:	20014e20 	.word	0x20014e20
 8008dcc:	20014e64 	.word	0x20014e64

08008dd0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dd0:	4b03      	ldr	r3, [pc, #12]	@ (8008de0 <vTaskInternalSetTimeOutState+0x10>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dd6:	4b03      	ldr	r3, [pc, #12]	@ (8008de4 <vTaskInternalSetTimeOutState+0x14>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6043      	str	r3, [r0, #4]
}
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20014e1c 	.word	0x20014e1c
 8008de4:	20014e30 	.word	0x20014e30

08008de8 <xTaskCheckForTimeOut>:
{
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008dec:	4605      	mov	r5, r0
 8008dee:	b940      	cbnz	r0, 8008e02 <xTaskCheckForTimeOut+0x1a>
 8008df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	e7fe      	b.n	8008e00 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008e02:	b941      	cbnz	r1, 8008e16 <xTaskCheckForTimeOut+0x2e>
 8008e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	e7fe      	b.n	8008e14 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008e16:	f7fe fd35 	bl	8007884 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e58 <xTaskCheckForTimeOut+0x70>)
 8008e1c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	d010      	beq.n	8008e46 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e24:	480d      	ldr	r0, [pc, #52]	@ (8008e5c <xTaskCheckForTimeOut+0x74>)
 8008e26:	682e      	ldr	r6, [r5, #0]
 8008e28:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e2a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e2c:	4286      	cmp	r6, r0
 8008e2e:	d001      	beq.n	8008e34 <xTaskCheckForTimeOut+0x4c>
 8008e30:	428a      	cmp	r2, r1
 8008e32:	d90f      	bls.n	8008e54 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e34:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e36:	4283      	cmp	r3, r0
 8008e38:	d90a      	bls.n	8008e50 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008e3a:	1a5b      	subs	r3, r3, r1
 8008e3c:	4413      	add	r3, r2
 8008e3e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e40:	4628      	mov	r0, r5
 8008e42:	f7ff ffc5 	bl	8008dd0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008e46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008e48:	f7fe fd3c 	bl	80078c4 <vPortExitCritical>
}
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008e54:	2401      	movs	r4, #1
 8008e56:	e7f7      	b.n	8008e48 <xTaskCheckForTimeOut+0x60>
 8008e58:	20014e30 	.word	0x20014e30
 8008e5c:	20014e1c 	.word	0x20014e1c

08008e60 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008e60:	4b01      	ldr	r3, [pc, #4]	@ (8008e68 <vTaskMissedYield+0x8>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	601a      	str	r2, [r3, #0]
}
 8008e66:	4770      	bx	lr
 8008e68:	20014e20 	.word	0x20014e20

08008e6c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008e6c:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <xTaskGetSchedulerState+0x18>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	b133      	cbz	r3, 8008e80 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e72:	4b05      	ldr	r3, [pc, #20]	@ (8008e88 <xTaskGetSchedulerState+0x1c>)
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	fab0 f080 	clz	r0, r0
 8008e7a:	0940      	lsrs	r0, r0, #5
 8008e7c:	0040      	lsls	r0, r0, #1
 8008e7e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e80:	2001      	movs	r0, #1
	}
 8008e82:	4770      	bx	lr
 8008e84:	20014e28 	.word	0x20014e28
 8008e88:	20014e10 	.word	0x20014e10

08008e8c <xTaskPriorityInherit>:
	{
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008e8e:	4604      	mov	r4, r0
 8008e90:	b338      	cbz	r0, 8008ee2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e92:	4d1a      	ldr	r5, [pc, #104]	@ (8008efc <xTaskPriorityInherit+0x70>)
 8008e94:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008e96:	682a      	ldr	r2, [r5, #0]
 8008e98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d226      	bcs.n	8008eec <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e9e:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ea0:	4e17      	ldr	r6, [pc, #92]	@ (8008f00 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ea2:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea4:	bfa1      	itttt	ge
 8008ea6:	682a      	ldrge	r2, [r5, #0]
 8008ea8:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8008eaa:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8008eae:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008eb0:	2214      	movs	r2, #20
 8008eb2:	fb02 6303 	mla	r3, r2, r3, r6
 8008eb6:	6942      	ldr	r2, [r0, #20]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d113      	bne.n	8008ee4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ebc:	1d07      	adds	r7, r0, #4
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	f7fe fc66 	bl	8007790 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ec4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8008f04 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008eca:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ece:	2014      	movs	r0, #20
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	fb00 6003 	mla	r0, r0, r3, r6
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	bf88      	it	hi
 8008eda:	6013      	strhi	r3, [r2, #0]
 8008edc:	f7fe fc36 	bl	800774c <vListInsertEnd>
				xReturn = pdTRUE;
 8008ee0:	2001      	movs	r0, #1
	}
 8008ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee8:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8008eea:	e7f9      	b.n	8008ee0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef2:	4298      	cmp	r0, r3
 8008ef4:	bf2c      	ite	cs
 8008ef6:	2000      	movcs	r0, #0
 8008ef8:	2001      	movcc	r0, #1
 8008efa:	e7f2      	b.n	8008ee2 <xTaskPriorityInherit+0x56>
 8008efc:	20015308 	.word	0x20015308
 8008f00:	20014ea8 	.word	0x20014ea8
 8008f04:	20014e2c 	.word	0x20014e2c

08008f08 <xTaskPriorityDisinherit>:
	{
 8008f08:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008f0a:	b908      	cbnz	r0, 8008f10 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008f0c:	2000      	movs	r0, #0
	}
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008f10:	4b1b      	ldr	r3, [pc, #108]	@ (8008f80 <xTaskPriorityDisinherit+0x78>)
 8008f12:	681c      	ldr	r4, [r3, #0]
 8008f14:	4284      	cmp	r4, r0
 8008f16:	d008      	beq.n	8008f2a <xTaskPriorityDisinherit+0x22>
 8008f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	e7fe      	b.n	8008f28 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f2a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008f2c:	b943      	cbnz	r3, 8008f40 <xTaskPriorityDisinherit+0x38>
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	e7fe      	b.n	8008f3e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f40:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008f42:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008f44:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f46:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008f48:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f4a:	d0df      	beq.n	8008f0c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1dd      	bne.n	8008f0c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f50:	1d25      	adds	r5, r4, #4
 8008f52:	4628      	mov	r0, r5
 8008f54:	f7fe fc1c 	bl	8007790 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f58:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008f5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f60:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f62:	4a08      	ldr	r2, [pc, #32]	@ (8008f84 <xTaskPriorityDisinherit+0x7c>)
 8008f64:	6811      	ldr	r1, [r2, #0]
 8008f66:	428b      	cmp	r3, r1
 8008f68:	bf88      	it	hi
 8008f6a:	6013      	strhi	r3, [r2, #0]
 8008f6c:	4a06      	ldr	r2, [pc, #24]	@ (8008f88 <xTaskPriorityDisinherit+0x80>)
 8008f6e:	2014      	movs	r0, #20
 8008f70:	fb00 2003 	mla	r0, r0, r3, r2
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7fe fbe9 	bl	800774c <vListInsertEnd>
					xReturn = pdTRUE;
 8008f7a:	2001      	movs	r0, #1
		return xReturn;
 8008f7c:	e7c7      	b.n	8008f0e <xTaskPriorityDisinherit+0x6>
 8008f7e:	bf00      	nop
 8008f80:	20015308 	.word	0x20015308
 8008f84:	20014e2c 	.word	0x20014e2c
 8008f88:	20014ea8 	.word	0x20014ea8

08008f8c <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008f8c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008f8e:	4604      	mov	r4, r0
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d041      	beq.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f94:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008f96:	b942      	cbnz	r2, 8008faa <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	e7fe      	b.n	8008fa8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008faa:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008fac:	4299      	cmp	r1, r3
 8008fae:	bf38      	it	cc
 8008fb0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008fb2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008fb4:	428b      	cmp	r3, r1
 8008fb6:	d02f      	beq.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fb8:	2a01      	cmp	r2, #1
 8008fba:	d12d      	bne.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8008fbc:	4a17      	ldr	r2, [pc, #92]	@ (800901c <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8008fbe:	6812      	ldr	r2, [r2, #0]
 8008fc0:	4282      	cmp	r2, r0
 8008fc2:	d108      	bne.n	8008fd6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	e7fe      	b.n	8008fd4 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fd6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fd8:	4d11      	ldr	r5, [pc, #68]	@ (8009020 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 8008fda:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fdc:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fde:	f04f 0214 	mov.w	r2, #20
 8008fe2:	fb02 5303 	mla	r3, r2, r3, r5
 8008fe6:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe8:	bfa4      	itt	ge
 8008fea:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 8008fee:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d111      	bne.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ff4:	1d06      	adds	r6, r0, #4
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7fe fbca 	bl	8007790 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008ffc:	4a09      	ldr	r2, [pc, #36]	@ (8009024 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008ffe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009000:	6811      	ldr	r1, [r2, #0]
 8009002:	2014      	movs	r0, #20
 8009004:	428b      	cmp	r3, r1
 8009006:	fb00 5003 	mla	r0, r0, r3, r5
 800900a:	4631      	mov	r1, r6
	}
 800900c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8009010:	bf88      	it	hi
 8009012:	6013      	strhi	r3, [r2, #0]
 8009014:	f7fe bb9a 	b.w	800774c <vListInsertEnd>
	}
 8009018:	bd70      	pop	{r4, r5, r6, pc}
 800901a:	bf00      	nop
 800901c:	20015308 	.word	0x20015308
 8009020:	20014ea8 	.word	0x20014ea8
 8009024:	20014e2c 	.word	0x20014e2c

08009028 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009028:	4b04      	ldr	r3, [pc, #16]	@ (800903c <pvTaskIncrementMutexHeldCount+0x14>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	b11a      	cbz	r2, 8009036 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8009032:	3201      	adds	r2, #1
 8009034:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8009036:	6818      	ldr	r0, [r3, #0]
	}
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20015308 	.word	0x20015308

08009040 <xTaskNotifyWait>:
	{
 8009040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009044:	4c20      	ldr	r4, [pc, #128]	@ (80090c8 <xTaskNotifyWait+0x88>)
	{
 8009046:	461e      	mov	r6, r3
 8009048:	4680      	mov	r8, r0
 800904a:	460f      	mov	r7, r1
 800904c:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 800904e:	f7fe fc19 	bl	8007884 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009058:	2b02      	cmp	r3, #2
 800905a:	d016      	beq.n	800908a <xTaskNotifyWait+0x4a>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009060:	ea23 0308 	bic.w	r3, r3, r8
 8009064:	6593      	str	r3, [r2, #88]	@ 0x58
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	2101      	movs	r1, #1
 800906a:	f883 105c 	strb.w	r1, [r3, #92]	@ 0x5c
				if( xTicksToWait > ( TickType_t ) 0 )
 800906e:	b166      	cbz	r6, 800908a <xTaskNotifyWait+0x4a>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009070:	4630      	mov	r0, r6
 8009072:	f7ff facf 	bl	8008614 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009076:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800907a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800907e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800908a:	f7fe fc1b 	bl	80078c4 <vPortExitCritical>
		taskENTER_CRITICAL();
 800908e:	f7fe fbf9 	bl	8007884 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009092:	b115      	cbz	r5, 800909a <xTaskNotifyWait+0x5a>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009098:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80090a0:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80090a2:	bf01      	itttt	eq
 80090a4:	6822      	ldreq	r2, [r4, #0]
 80090a6:	6d93      	ldreq	r3, [r2, #88]	@ 0x58
 80090a8:	43bb      	biceq	r3, r7
 80090aa:	6593      	streq	r3, [r2, #88]	@ 0x58
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 80090b2:	bf0c      	ite	eq
 80090b4:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 80090b6:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		taskEXIT_CRITICAL();
 80090bc:	f7fe fc02 	bl	80078c4 <vPortExitCritical>
	}
 80090c0:	4628      	mov	r0, r5
 80090c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c6:	bf00      	nop
 80090c8:	20015308 	.word	0x20015308

080090cc <xTaskGenericNotify>:
	{
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	460d      	mov	r5, r1
 80090d0:	4616      	mov	r6, r2
 80090d2:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 80090d4:	4604      	mov	r4, r0
 80090d6:	b940      	cbnz	r0, 80090ea <xTaskGenericNotify+0x1e>
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	e7fe      	b.n	80090e8 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 80090ea:	f7fe fbcb 	bl	8007884 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80090ee:	b10f      	cbz	r7, 80090f4 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80090f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090f2:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80090f4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80090f8:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80090fa:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80090fc:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
			switch( eAction )
 8009100:	2e04      	cmp	r6, #4
 8009102:	d82c      	bhi.n	800915e <xTaskGenericNotify+0x92>
 8009104:	e8df f006 	tbb	[pc, r6]
 8009108:	29240306 	.word	0x29240306
 800910c:	27          	.byte	0x27
 800910d:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800910e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009110:	432a      	orrs	r2, r5
					( pxTCB->ulNotifiedValue )++;
 8009112:	65a2      	str	r2, [r4, #88]	@ 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009114:	2b01      	cmp	r3, #1
 8009116:	d13e      	bne.n	8009196 <xTaskGenericNotify+0xca>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009118:	1d25      	adds	r5, r4, #4
 800911a:	4628      	mov	r0, r5
 800911c:	f7fe fb38 	bl	8007790 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009120:	4a20      	ldr	r2, [pc, #128]	@ (80091a4 <xTaskGenericNotify+0xd8>)
 8009122:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009124:	6811      	ldr	r1, [r2, #0]
 8009126:	428b      	cmp	r3, r1
 8009128:	bf88      	it	hi
 800912a:	6013      	strhi	r3, [r2, #0]
 800912c:	4a1e      	ldr	r2, [pc, #120]	@ (80091a8 <xTaskGenericNotify+0xdc>)
 800912e:	2014      	movs	r0, #20
 8009130:	fb00 2003 	mla	r0, r0, r3, r2
 8009134:	4629      	mov	r1, r5
 8009136:	f7fe fb09 	bl	800774c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800913a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800913c:	b1db      	cbz	r3, 8009176 <xTaskGenericNotify+0xaa>
 800913e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	e7fe      	b.n	800914e <xTaskGenericNotify+0x82>
					( pxTCB->ulNotifiedValue )++;
 8009150:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009152:	3201      	adds	r2, #1
 8009154:	e7dd      	b.n	8009112 <xTaskGenericNotify+0x46>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009156:	2b02      	cmp	r3, #2
 8009158:	d022      	beq.n	80091a0 <xTaskGenericNotify+0xd4>
						pxTCB->ulNotifiedValue = ulValue;
 800915a:	65a5      	str	r5, [r4, #88]	@ 0x58
 800915c:	e7da      	b.n	8009114 <xTaskGenericNotify+0x48>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800915e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009160:	3201      	adds	r2, #1
 8009162:	d0d7      	beq.n	8009114 <xTaskGenericNotify+0x48>
 8009164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	e7fe      	b.n	8009174 <xTaskGenericNotify+0xa8>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009176:	4b0d      	ldr	r3, [pc, #52]	@ (80091ac <xTaskGenericNotify+0xe0>)
 8009178:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917e:	429a      	cmp	r2, r3
 8009180:	d909      	bls.n	8009196 <xTaskGenericNotify+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8009182:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800918a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	f3bf 8f6f 	isb	sy
	{
 8009196:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8009198:	f7fe fb94 	bl	80078c4 <vPortExitCritical>
	}
 800919c:	4620      	mov	r0, r4
 800919e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 80091a0:	2400      	movs	r4, #0
 80091a2:	e7f9      	b.n	8009198 <xTaskGenericNotify+0xcc>
 80091a4:	20014e2c 	.word	0x20014e2c
 80091a8:	20014ea8 	.word	0x20014ea8
 80091ac:	20015308 	.word	0x20015308

080091b0 <xTaskGenericNotifyFromISR>:
	{
 80091b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091b8:	460d      	mov	r5, r1
 80091ba:	4616      	mov	r6, r2
 80091bc:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 80091be:	4604      	mov	r4, r0
 80091c0:	b940      	cbnz	r0, 80091d4 <xTaskGenericNotifyFromISR+0x24>
 80091c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	e7fe      	b.n	80091d2 <xTaskGenericNotifyFromISR+0x22>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091d4:	f7fe fc68 	bl	8007aa8 <vPortValidateInterruptPriority>
	__asm volatile
 80091d8:	f3ef 8911 	mrs	r9, BASEPRI
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 80091ec:	b10f      	cbz	r7, 80091f2 <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80091ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091f0:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80091f2:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80091f6:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80091f8:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80091fa:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
			switch( eAction )
 80091fe:	2e04      	cmp	r6, #4
 8009200:	d81b      	bhi.n	800923a <xTaskGenericNotifyFromISR+0x8a>
 8009202:	e8df f006 	tbb	[pc, r6]
 8009206:	0306      	.short	0x0306
 8009208:	1813      	.short	0x1813
 800920a:	16          	.byte	0x16
 800920b:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800920c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800920e:	432a      	orrs	r2, r5
					( pxTCB->ulNotifiedValue )++;
 8009210:	65a2      	str	r2, [r4, #88]	@ 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009212:	2b01      	cmp	r3, #1
 8009214:	d13f      	bne.n	8009296 <xTaskGenericNotifyFromISR+0xe6>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009216:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009218:	b1db      	cbz	r3, 8009252 <xTaskGenericNotifyFromISR+0xa2>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	e7fe      	b.n	800922a <xTaskGenericNotifyFromISR+0x7a>
					( pxTCB->ulNotifiedValue )++;
 800922c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800922e:	3201      	adds	r2, #1
 8009230:	e7ee      	b.n	8009210 <xTaskGenericNotifyFromISR+0x60>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009232:	2b02      	cmp	r3, #2
 8009234:	d038      	beq.n	80092a8 <xTaskGenericNotifyFromISR+0xf8>
						pxTCB->ulNotifiedValue = ulValue;
 8009236:	65a5      	str	r5, [r4, #88]	@ 0x58
 8009238:	e7eb      	b.n	8009212 <xTaskGenericNotifyFromISR+0x62>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800923a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800923c:	3201      	adds	r2, #1
 800923e:	d0e8      	beq.n	8009212 <xTaskGenericNotifyFromISR+0x62>
 8009240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	e7fe      	b.n	8009250 <xTaskGenericNotifyFromISR+0xa0>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009252:	4b16      	ldr	r3, [pc, #88]	@ (80092ac <xTaskGenericNotifyFromISR+0xfc>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	bb1b      	cbnz	r3, 80092a0 <xTaskGenericNotifyFromISR+0xf0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009258:	1d25      	adds	r5, r4, #4
 800925a:	4628      	mov	r0, r5
 800925c:	f7fe fa98 	bl	8007790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009260:	4a13      	ldr	r2, [pc, #76]	@ (80092b0 <xTaskGenericNotifyFromISR+0x100>)
 8009262:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009264:	6811      	ldr	r1, [r2, #0]
 8009266:	428b      	cmp	r3, r1
 8009268:	bf88      	it	hi
 800926a:	6013      	strhi	r3, [r2, #0]
 800926c:	4a11      	ldr	r2, [pc, #68]	@ (80092b4 <xTaskGenericNotifyFromISR+0x104>)
 800926e:	2014      	movs	r0, #20
 8009270:	4629      	mov	r1, r5
 8009272:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009276:	f7fe fa69 	bl	800774c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800927a:	4b0f      	ldr	r3, [pc, #60]	@ (80092b8 <xTaskGenericNotifyFromISR+0x108>)
 800927c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009282:	429a      	cmp	r2, r3
 8009284:	d907      	bls.n	8009296 <xTaskGenericNotifyFromISR+0xe6>
					if( pxHigherPriorityTaskWoken != NULL )
 8009286:	2301      	movs	r3, #1
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	d001      	beq.n	8009292 <xTaskGenericNotifyFromISR+0xe2>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800928e:	f8c8 3000 	str.w	r3, [r8]
					xYieldPending = pdTRUE;
 8009292:	4a0a      	ldr	r2, [pc, #40]	@ (80092bc <xTaskGenericNotifyFromISR+0x10c>)
 8009294:	6013      	str	r3, [r2, #0]
	{
 8009296:	2001      	movs	r0, #1
	__asm volatile
 8009298:	f389 8811 	msr	BASEPRI, r9
	}
 800929c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80092a0:	4807      	ldr	r0, [pc, #28]	@ (80092c0 <xTaskGenericNotifyFromISR+0x110>)
 80092a2:	f104 0118 	add.w	r1, r4, #24
 80092a6:	e7e6      	b.n	8009276 <xTaskGenericNotifyFromISR+0xc6>
						xReturn = pdFAIL;
 80092a8:	2000      	movs	r0, #0
 80092aa:	e7f5      	b.n	8009298 <xTaskGenericNotifyFromISR+0xe8>
 80092ac:	20014e10 	.word	0x20014e10
 80092b0:	20014e2c 	.word	0x20014e2c
 80092b4:	20014ea8 	.word	0x20014ea8
 80092b8:	20015308 	.word	0x20015308
 80092bc:	20014e20 	.word	0x20014e20
 80092c0:	20014e64 	.word	0x20014e64

080092c4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80092c4:	4291      	cmp	r1, r2
{
 80092c6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80092c8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092ca:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80092cc:	d80a      	bhi.n	80092e4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ce:	1ad2      	subs	r2, r2, r3
 80092d0:	6983      	ldr	r3, [r0, #24]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d20d      	bcs.n	80092f2 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092d6:	4b08      	ldr	r3, [pc, #32]	@ (80092f8 <prvInsertTimerInActiveList+0x34>)
 80092d8:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	f7fe fa41 	bl	8007762 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80092e0:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80092e2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d201      	bcs.n	80092ec <prvInsertTimerInActiveList+0x28>
 80092e8:	4299      	cmp	r1, r3
 80092ea:	d202      	bcs.n	80092f2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092ec:	4b03      	ldr	r3, [pc, #12]	@ (80092fc <prvInsertTimerInActiveList+0x38>)
 80092ee:	1d01      	adds	r1, r0, #4
 80092f0:	e7f3      	b.n	80092da <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80092f2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80092f4:	e7f5      	b.n	80092e2 <prvInsertTimerInActiveList+0x1e>
 80092f6:	bf00      	nop
 80092f8:	20015408 	.word	0x20015408
 80092fc:	2001540c 	.word	0x2001540c

08009300 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009302:	4c11      	ldr	r4, [pc, #68]	@ (8009348 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009304:	f7fe fabe 	bl	8007884 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009308:	6825      	ldr	r5, [r4, #0]
 800930a:	b9bd      	cbnz	r5, 800933c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800930c:	4f0f      	ldr	r7, [pc, #60]	@ (800934c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800930e:	4e10      	ldr	r6, [pc, #64]	@ (8009350 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009310:	4638      	mov	r0, r7
 8009312:	f7fe fa0d 	bl	8007730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009316:	4630      	mov	r0, r6
 8009318:	f7fe fa0a 	bl	8007730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800931c:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800931e:	4a0e      	ldr	r2, [pc, #56]	@ (8009358 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8009320:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009322:	4b0e      	ldr	r3, [pc, #56]	@ (800935c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009324:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8009326:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009328:	200a      	movs	r0, #10
 800932a:	4b0d      	ldr	r3, [pc, #52]	@ (8009360 <prvCheckForValidListAndQueue+0x60>)
 800932c:	9500      	str	r5, [sp, #0]
 800932e:	f7fe fcb2 	bl	8007c96 <xQueueGenericCreateStatic>
 8009332:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009334:	b110      	cbz	r0, 800933c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009336:	490b      	ldr	r1, [pc, #44]	@ (8009364 <prvCheckForValidListAndQueue+0x64>)
 8009338:	f7ff f88a 	bl	8008450 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800933c:	b003      	add	sp, #12
 800933e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009342:	f7fe babf 	b.w	80078c4 <vPortExitCritical>
 8009346:	bf00      	nop
 8009348:	20015404 	.word	0x20015404
 800934c:	20015424 	.word	0x20015424
 8009350:	20015410 	.word	0x20015410
 8009354:	2001540c 	.word	0x2001540c
 8009358:	2001535c 	.word	0x2001535c
 800935c:	20015408 	.word	0x20015408
 8009360:	2001530c 	.word	0x2001530c
 8009364:	08014dc1 	.word	0x08014dc1

08009368 <xTimerCreateTimerTask>:
{
 8009368:	b510      	push	{r4, lr}
 800936a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800936c:	f7ff ffc8 	bl	8009300 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009370:	4b12      	ldr	r3, [pc, #72]	@ (80093bc <xTimerCreateTimerTask+0x54>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	b1b3      	cbz	r3, 80093a4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009376:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009378:	aa07      	add	r2, sp, #28
 800937a:	a906      	add	r1, sp, #24
 800937c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800937e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009382:	f7fe f8cd 	bl	8007520 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009386:	9b05      	ldr	r3, [sp, #20]
 8009388:	9302      	str	r3, [sp, #8]
 800938a:	9b06      	ldr	r3, [sp, #24]
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	2302      	movs	r3, #2
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	9a07      	ldr	r2, [sp, #28]
 8009394:	490a      	ldr	r1, [pc, #40]	@ (80093c0 <xTimerCreateTimerTask+0x58>)
 8009396:	480b      	ldr	r0, [pc, #44]	@ (80093c4 <xTimerCreateTimerTask+0x5c>)
 8009398:	4623      	mov	r3, r4
 800939a:	f7ff fa1e 	bl	80087da <xTaskCreateStatic>
 800939e:	4b0a      	ldr	r3, [pc, #40]	@ (80093c8 <xTimerCreateTimerTask+0x60>)
 80093a0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80093a2:	b940      	cbnz	r0, 80093b6 <xTimerCreateTimerTask+0x4e>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80093b4:	e7fe      	b.n	80093b4 <xTimerCreateTimerTask+0x4c>
}
 80093b6:	2001      	movs	r0, #1
 80093b8:	b008      	add	sp, #32
 80093ba:	bd10      	pop	{r4, pc}
 80093bc:	20015404 	.word	0x20015404
 80093c0:	08014dc6 	.word	0x08014dc6
 80093c4:	080094c9 	.word	0x080094c9
 80093c8:	20015400 	.word	0x20015400

080093cc <xTimerGenericCommand>:
{
 80093cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80093ce:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80093d0:	4604      	mov	r4, r0
{
 80093d2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80093d4:	b940      	cbnz	r0, 80093e8 <xTimerGenericCommand+0x1c>
 80093d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	e7fe      	b.n	80093e6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80093e8:	4d0d      	ldr	r5, [pc, #52]	@ (8009420 <xTimerGenericCommand+0x54>)
 80093ea:	6828      	ldr	r0, [r5, #0]
 80093ec:	b180      	cbz	r0, 8009410 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093ee:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093f0:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093f4:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093f6:	dc0d      	bgt.n	8009414 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093f8:	f7ff fd38 	bl	8008e6c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093fc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093fe:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009400:	bf08      	it	eq
 8009402:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009404:	6828      	ldr	r0, [r5, #0]
 8009406:	bf18      	it	ne
 8009408:	461a      	movne	r2, r3
 800940a:	4669      	mov	r1, sp
 800940c:	f7fe fcf8 	bl	8007e00 <xQueueGenericSend>
}
 8009410:	b004      	add	sp, #16
 8009412:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009414:	2300      	movs	r3, #0
 8009416:	4669      	mov	r1, sp
 8009418:	f7fe fda4 	bl	8007f64 <xQueueGenericSendFromISR>
 800941c:	e7f8      	b.n	8009410 <xTimerGenericCommand+0x44>
 800941e:	bf00      	nop
 8009420:	20015404 	.word	0x20015404

08009424 <prvSampleTimeNow>:
{
 8009424:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009428:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80094c4 <prvSampleTimeNow+0xa0>
{
 800942c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800942e:	f7ff fae1 	bl	80089f4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009432:	f8d8 3000 	ldr.w	r3, [r8]
 8009436:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8009438:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800943a:	d909      	bls.n	8009450 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800943c:	4f1f      	ldr	r7, [pc, #124]	@ (80094bc <prvSampleTimeNow+0x98>)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	b96a      	cbnz	r2, 8009460 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009444:	4a1e      	ldr	r2, [pc, #120]	@ (80094c0 <prvSampleTimeNow+0x9c>)
 8009446:	6811      	ldr	r1, [r2, #0]
 8009448:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800944a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <prvSampleTimeNow+0x2e>
 8009450:	2300      	movs	r3, #0
}
 8009452:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009454:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009456:	f8c8 5000 	str.w	r5, [r8]
}
 800945a:	b002      	add	sp, #8
 800945c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009460:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009462:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009464:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009468:	f104 0a04 	add.w	sl, r4, #4
 800946c:	4650      	mov	r0, sl
 800946e:	f7fe f98f 	bl	8007790 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009472:	6a23      	ldr	r3, [r4, #32]
 8009474:	4620      	mov	r0, r4
 8009476:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009478:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800947c:	075b      	lsls	r3, r3, #29
 800947e:	d5de      	bpl.n	800943e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009480:	69a3      	ldr	r3, [r4, #24]
 8009482:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8009484:	4599      	cmp	r9, r3
 8009486:	d206      	bcs.n	8009496 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009488:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800948a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800948c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800948e:	4651      	mov	r1, sl
 8009490:	f7fe f967 	bl	8007762 <vListInsert>
 8009494:	e7d3      	b.n	800943e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009496:	2300      	movs	r3, #0
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	464a      	mov	r2, r9
 800949c:	4619      	mov	r1, r3
 800949e:	4620      	mov	r0, r4
 80094a0:	f7ff ff94 	bl	80093cc <xTimerGenericCommand>
				configASSERT( xResult );
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d1ca      	bne.n	800943e <prvSampleTimeNow+0x1a>
 80094a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	e7fe      	b.n	80094b8 <prvSampleTimeNow+0x94>
 80094ba:	bf00      	nop
 80094bc:	2001540c 	.word	0x2001540c
 80094c0:	20015408 	.word	0x20015408
 80094c4:	200153fc 	.word	0x200153fc

080094c8 <prvTimerTask>:
{
 80094c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094cc:	4d6e      	ldr	r5, [pc, #440]	@ (8009688 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094ce:	4e6f      	ldr	r6, [pc, #444]	@ (800968c <prvTimerTask+0x1c4>)
{
 80094d0:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	f8d3 8000 	ldr.w	r8, [r3]
 80094d8:	f1b8 0f00 	cmp.w	r8, #0
 80094dc:	d035      	beq.n	800954a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094e4:	2400      	movs	r4, #0
	vTaskSuspendAll();
 80094e6:	f7ff fa7d 	bl	80089e4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ea:	a804      	add	r0, sp, #16
 80094ec:	f7ff ff9a 	bl	8009424 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80094f0:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094f2:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d169      	bne.n	80095cc <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094f8:	2c00      	cmp	r4, #0
 80094fa:	d14c      	bne.n	8009596 <prvTimerTask+0xce>
 80094fc:	4540      	cmp	r0, r8
 80094fe:	d350      	bcc.n	80095a2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8009500:	f7ff fb1c 	bl	8008b3c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800950a:	1d38      	adds	r0, r7, #4
 800950c:	f7fe f940 	bl	8007790 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009510:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009514:	0758      	lsls	r0, r3, #29
 8009516:	d51a      	bpl.n	800954e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009518:	69b9      	ldr	r1, [r7, #24]
 800951a:	4643      	mov	r3, r8
 800951c:	464a      	mov	r2, r9
 800951e:	4441      	add	r1, r8
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff fecf 	bl	80092c4 <prvInsertTimerInActiveList>
 8009526:	b1b0      	cbz	r0, 8009556 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009528:	9400      	str	r4, [sp, #0]
 800952a:	4623      	mov	r3, r4
 800952c:	4642      	mov	r2, r8
 800952e:	4621      	mov	r1, r4
 8009530:	4638      	mov	r0, r7
 8009532:	f7ff ff4b 	bl	80093cc <xTimerGenericCommand>
			configASSERT( xResult );
 8009536:	b970      	cbnz	r0, 8009556 <prvTimerTask+0x8e>
 8009538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	e7fe      	b.n	8009548 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800954a:	2401      	movs	r4, #1
 800954c:	e7cb      	b.n	80094e6 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800954e:	f023 0301 	bic.w	r3, r3, #1
 8009552:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	4638      	mov	r0, r7
 800955a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800955c:	6830      	ldr	r0, [r6, #0]
 800955e:	2200      	movs	r2, #0
 8009560:	a904      	add	r1, sp, #16
 8009562:	f7fe fdad 	bl	80080c0 <xQueueReceive>
 8009566:	2800      	cmp	r0, #0
 8009568:	d0b3      	beq.n	80094d2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800956a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800956c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800956e:	2b00      	cmp	r3, #0
 8009570:	db2f      	blt.n	80095d2 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009572:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009574:	6963      	ldr	r3, [r4, #20]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d132      	bne.n	80095e0 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800957a:	a803      	add	r0, sp, #12
 800957c:	f7ff ff52 	bl	8009424 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009580:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009582:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009584:	2b09      	cmp	r3, #9
 8009586:	d8e9      	bhi.n	800955c <prvTimerTask+0x94>
 8009588:	e8df f003 	tbb	[pc, r3]
 800958c:	572e2e2e 	.word	0x572e2e2e
 8009590:	2e2e765e 	.word	0x2e2e765e
 8009594:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009596:	4b3e      	ldr	r3, [pc, #248]	@ (8009690 <prvTimerTask+0x1c8>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681c      	ldr	r4, [r3, #0]
 800959c:	fab4 f484 	clz	r4, r4
 80095a0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095a2:	6830      	ldr	r0, [r6, #0]
 80095a4:	4622      	mov	r2, r4
 80095a6:	eba8 0109 	sub.w	r1, r8, r9
 80095aa:	f7fe ff90 	bl	80084ce <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095ae:	f7ff fac5 	bl	8008b3c <xTaskResumeAll>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d1d2      	bne.n	800955c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80095b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80095ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	e7c7      	b.n	800955c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80095cc:	f7ff fab6 	bl	8008b3c <xTaskResumeAll>
}
 80095d0:	e7c4      	b.n	800955c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095d2:	9b05      	ldr	r3, [sp, #20]
 80095d4:	9907      	ldr	r1, [sp, #28]
 80095d6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095d8:	9b04      	ldr	r3, [sp, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	dbbe      	blt.n	800955c <prvTimerTask+0x94>
 80095de:	e7c8      	b.n	8009572 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095e0:	1d20      	adds	r0, r4, #4
 80095e2:	f7fe f8d5 	bl	8007790 <uxListRemove>
 80095e6:	e7c8      	b.n	800957a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095e8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095ec:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095ee:	f043 0301 	orr.w	r3, r3, #1
 80095f2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095f6:	9b05      	ldr	r3, [sp, #20]
 80095f8:	4620      	mov	r0, r4
 80095fa:	4419      	add	r1, r3
 80095fc:	f7ff fe62 	bl	80092c4 <prvInsertTimerInActiveList>
 8009600:	2800      	cmp	r0, #0
 8009602:	d0ab      	beq.n	800955c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009604:	6a23      	ldr	r3, [r4, #32]
 8009606:	4620      	mov	r0, r4
 8009608:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800960a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800960e:	0759      	lsls	r1, r3, #29
 8009610:	d5a4      	bpl.n	800955c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009612:	69a2      	ldr	r2, [r4, #24]
 8009614:	9905      	ldr	r1, [sp, #20]
 8009616:	2300      	movs	r3, #0
 8009618:	440a      	add	r2, r1
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4619      	mov	r1, r3
 800961e:	4620      	mov	r0, r4
 8009620:	f7ff fed4 	bl	80093cc <xTimerGenericCommand>
							configASSERT( xResult );
 8009624:	2800      	cmp	r0, #0
 8009626:	d199      	bne.n	800955c <prvTimerTask+0x94>
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	e7fe      	b.n	8009638 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800963a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800963e:	f023 0301 	bic.w	r3, r3, #1
 8009642:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8009646:	e789      	b.n	800955c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009648:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800964c:	f043 0301 	orr.w	r3, r3, #1
 8009650:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009654:	9905      	ldr	r1, [sp, #20]
 8009656:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009658:	b941      	cbnz	r1, 800966c <prvTimerTask+0x1a4>
 800965a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	e7fe      	b.n	800966a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800966c:	4603      	mov	r3, r0
 800966e:	4401      	add	r1, r0
 8009670:	4620      	mov	r0, r4
 8009672:	f7ff fe27 	bl	80092c4 <prvInsertTimerInActiveList>
					break;
 8009676:	e771      	b.n	800955c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009678:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800967c:	079a      	lsls	r2, r3, #30
 800967e:	d4de      	bmi.n	800963e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8009680:	4620      	mov	r0, r4
 8009682:	f7fe f817 	bl	80076b4 <vPortFree>
 8009686:	e769      	b.n	800955c <prvTimerTask+0x94>
 8009688:	2001540c 	.word	0x2001540c
 800968c:	20015404 	.word	0x20015404
 8009690:	20015408 	.word	0x20015408

08009694 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8009694:	8880      	ldrh	r0, [r0, #4]
 8009696:	4770      	bx	lr

08009698 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8009698:	b570      	push	{r4, r5, r6, lr}
 800969a:	6803      	ldr	r3, [r0, #0]
 800969c:	4605      	mov	r5, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a2:	2100      	movs	r1, #0
 80096a4:	4798      	blx	r3
 80096a6:	682b      	ldr	r3, [r5, #0]
 80096a8:	4606      	mov	r6, r0
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	4628      	mov	r0, r5
 80096ae:	4798      	blx	r3
 80096b0:	1ba4      	subs	r4, r4, r6
 80096b2:	b2a4      	uxth	r4, r4
 80096b4:	fbb4 f0f0 	udiv	r0, r4, r0
 80096b8:	bd70      	pop	{r4, r5, r6, pc}

080096ba <_ZN8touchgfx17AbstractPartition5clearEv>:
 80096ba:	2300      	movs	r3, #0
 80096bc:	8083      	strh	r3, [r0, #4]
 80096be:	4770      	bx	lr

080096c0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80096c0:	b510      	push	{r4, lr}
 80096c2:	6803      	ldr	r3, [r0, #0]
 80096c4:	8881      	ldrh	r1, [r0, #4]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c8:	4604      	mov	r4, r0
 80096ca:	4798      	blx	r3
 80096cc:	88a3      	ldrh	r3, [r4, #4]
 80096ce:	3301      	adds	r3, #1
 80096d0:	80a3      	strh	r3, [r4, #4]
 80096d2:	bd10      	pop	{r4, pc}

080096d4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80096d4:	6803      	ldr	r3, [r0, #0]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d8:	4718      	bx	r3

080096da <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80096da:	4770      	bx	lr

080096dc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80096dc:	4a02      	ldr	r2, [pc, #8]	@ (80096e8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80096de:	6002      	str	r2, [r0, #0]
 80096e0:	2200      	movs	r2, #0
 80096e2:	8082      	strh	r2, [r0, #4]
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	08015a94 	.word	0x08015a94

080096ec <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80096ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096ee:	2000      	movs	r0, #0
 80096f0:	b12b      	cbz	r3, 80096fe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80096f2:	b920      	cbnz	r0, 80096fe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80096f4:	1a5a      	subs	r2, r3, r1
 80096f6:	4250      	negs	r0, r2
 80096f8:	4150      	adcs	r0, r2
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	e7f8      	b.n	80096f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80096fe:	4770      	bx	lr

08009700 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8009700:	2300      	movs	r3, #0
 8009702:	6148      	str	r0, [r1, #20]
 8009704:	618b      	str	r3, [r1, #24]
 8009706:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009708:	b913      	cbnz	r3, 8009710 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800970a:	6281      	str	r1, [r0, #40]	@ 0x28
 800970c:	4770      	bx	lr
 800970e:	4613      	mov	r3, r2
 8009710:	699a      	ldr	r2, [r3, #24]
 8009712:	2a00      	cmp	r2, #0
 8009714:	d1fb      	bne.n	800970e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8009716:	6199      	str	r1, [r3, #24]
 8009718:	4770      	bx	lr

0800971a <_ZN8touchgfx9Container9removeAllEv>:
 800971a:	2200      	movs	r2, #0
 800971c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800971e:	b123      	cbz	r3, 800972a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8009720:	6999      	ldr	r1, [r3, #24]
 8009722:	6281      	str	r1, [r0, #40]	@ 0x28
 8009724:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8009728:	e7f8      	b.n	800971c <_ZN8touchgfx9Container9removeAllEv+0x2>
 800972a:	4770      	bx	lr

0800972c <_ZN8touchgfx9Container6unlinkEv>:
 800972c:	2300      	movs	r3, #0
 800972e:	6283      	str	r3, [r0, #40]	@ 0x28
 8009730:	4770      	bx	lr

08009732 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8009732:	2200      	movs	r2, #0
 8009734:	8002      	strh	r2, [r0, #0]
 8009736:	8042      	strh	r2, [r0, #2]
 8009738:	8082      	strh	r2, [r0, #4]
 800973a:	80c2      	strh	r2, [r0, #6]
 800973c:	4770      	bx	lr

0800973e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800973e:	b570      	push	{r4, r5, r6, lr}
 8009740:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009742:	460d      	mov	r5, r1
 8009744:	4616      	mov	r6, r2
 8009746:	b13c      	cbz	r4, 8009758 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	4620      	mov	r0, r4
 800974c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974e:	4632      	mov	r2, r6
 8009750:	4629      	mov	r1, r5
 8009752:	4798      	blx	r3
 8009754:	69a4      	ldr	r4, [r4, #24]
 8009756:	e7f6      	b.n	8009746 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8009758:	bd70      	pop	{r4, r5, r6, pc}

0800975a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800975a:	b538      	push	{r3, r4, r5, lr}
 800975c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800975e:	460d      	mov	r5, r1
 8009760:	b134      	cbz	r4, 8009770 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	4621      	mov	r1, r4
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	4628      	mov	r0, r5
 800976a:	4798      	blx	r3
 800976c:	69a4      	ldr	r4, [r4, #24]
 800976e:	e7f7      	b.n	8009760 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8009770:	bd38      	pop	{r3, r4, r5, pc}

08009772 <_ZN8touchgfx9ContainerD1Ev>:
 8009772:	4770      	bx	lr

08009774 <_ZN8touchgfx9ContainerD0Ev>:
 8009774:	b510      	push	{r4, lr}
 8009776:	212c      	movs	r1, #44	@ 0x2c
 8009778:	4604      	mov	r4, r0
 800977a:	f009 fbbb 	bl	8012ef4 <_ZdlPvj>
 800977e:	4620      	mov	r0, r4
 8009780:	bd10      	pop	{r4, pc}

08009782 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8009782:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009784:	b19b      	cbz	r3, 80097ae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8009786:	428b      	cmp	r3, r1
 8009788:	d109      	bne.n	800979e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800978a:	699a      	ldr	r2, [r3, #24]
 800978c:	2100      	movs	r1, #0
 800978e:	6159      	str	r1, [r3, #20]
 8009790:	6282      	str	r2, [r0, #40]	@ 0x28
 8009792:	b902      	cbnz	r2, 8009796 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8009794:	4770      	bx	lr
 8009796:	6199      	str	r1, [r3, #24]
 8009798:	4770      	bx	lr
 800979a:	4613      	mov	r3, r2
 800979c:	b13a      	cbz	r2, 80097ae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800979e:	699a      	ldr	r2, [r3, #24]
 80097a0:	428a      	cmp	r2, r1
 80097a2:	d1fa      	bne.n	800979a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80097a4:	698a      	ldr	r2, [r1, #24]
 80097a6:	619a      	str	r2, [r3, #24]
 80097a8:	2300      	movs	r3, #0
 80097aa:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80097ae:	4770      	bx	lr

080097b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80097b0:	b410      	push	{r4}
 80097b2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80097b4:	4604      	mov	r4, r0
 80097b6:	b92b      	cbnz	r3, 80097c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80097b8:	6803      	ldr	r3, [r0, #0]
 80097ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097c0:	4611      	mov	r1, r2
 80097c2:	4718      	bx	r3
 80097c4:	b941      	cbnz	r1, 80097d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80097c6:	6193      	str	r3, [r2, #24]
 80097c8:	6282      	str	r2, [r0, #40]	@ 0x28
 80097ca:	6154      	str	r4, [r2, #20]
 80097cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	4603      	mov	r3, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d0f9      	beq.n	80097cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80097d8:	4299      	cmp	r1, r3
 80097da:	6998      	ldr	r0, [r3, #24]
 80097dc:	d1f9      	bne.n	80097d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80097de:	6190      	str	r0, [r2, #24]
 80097e0:	618a      	str	r2, [r1, #24]
 80097e2:	e7f2      	b.n	80097ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080097e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80097e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e8:	461f      	mov	r7, r3
 80097ea:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80097ee:	460d      	mov	r5, r1
 80097f0:	4616      	mov	r6, r2
 80097f2:	b103      	cbz	r3, 80097f6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80097f4:	6038      	str	r0, [r7, #0]
 80097f6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80097f8:	b314      	cbz	r4, 8009840 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80097fa:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80097fe:	b1eb      	cbz	r3, 800983c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009800:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8009804:	428d      	cmp	r5, r1
 8009806:	db19      	blt.n	800983c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009808:	8923      	ldrh	r3, [r4, #8]
 800980a:	b289      	uxth	r1, r1
 800980c:	440b      	add	r3, r1
 800980e:	b21b      	sxth	r3, r3
 8009810:	429d      	cmp	r5, r3
 8009812:	da13      	bge.n	800983c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009814:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009818:	4296      	cmp	r6, r2
 800981a:	db0f      	blt.n	800983c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800981c:	8963      	ldrh	r3, [r4, #10]
 800981e:	b292      	uxth	r2, r2
 8009820:	4413      	add	r3, r2
 8009822:	b21b      	sxth	r3, r3
 8009824:	429e      	cmp	r6, r3
 8009826:	da09      	bge.n	800983c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	1ab2      	subs	r2, r6, r2
 800982c:	1a69      	subs	r1, r5, r1
 800982e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8009832:	b212      	sxth	r2, r2
 8009834:	463b      	mov	r3, r7
 8009836:	b209      	sxth	r1, r1
 8009838:	4620      	mov	r0, r4
 800983a:	47c0      	blx	r8
 800983c:	69a4      	ldr	r4, [r4, #24]
 800983e:	e7db      	b.n	80097f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8009840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009844 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8009844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	4c6e      	ldr	r4, [pc, #440]	@ (8009a04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800984a:	b0a1      	sub	sp, #132	@ 0x84
 800984c:	6824      	ldr	r4, [r4, #0]
 800984e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8009850:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	2400      	movs	r4, #0
 8009858:	802c      	strh	r4, [r5, #0]
 800985a:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800985c:	802c      	strh	r4, [r5, #0]
 800985e:	601c      	str	r4, [r3, #0]
 8009860:	4606      	mov	r6, r0
 8009862:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009866:	f7ff ffbd 	bl	80097e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800986a:	f1b9 0f03 	cmp.w	r9, #3
 800986e:	f340 80c2 	ble.w	80099f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8009872:	4631      	mov	r1, r6
 8009874:	a80c      	add	r0, sp, #48	@ 0x30
 8009876:	f004 fd19 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800987a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800987e:	9306      	str	r3, [sp, #24]
 8009880:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8009884:	9307      	str	r3, [sp, #28]
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	f8d3 a000 	ldr.w	sl, [r3]
 800988c:	f1ba 0f00 	cmp.w	sl, #0
 8009890:	f000 80b4 	beq.w	80099fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8009894:	4651      	mov	r1, sl
 8009896:	a810      	add	r0, sp, #64	@ 0x40
 8009898:	f004 fd08 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800989c:	9b01      	ldr	r3, [sp, #4]
 800989e:	9a06      	ldr	r2, [sp, #24]
 80098a0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80098a4:	189d      	adds	r5, r3, r2
 80098a6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80098aa:	9a07      	ldr	r2, [sp, #28]
 80098ac:	2002      	movs	r0, #2
 80098ae:	fb91 f1f0 	sdiv	r1, r1, r0
 80098b2:	4419      	add	r1, r3
 80098b4:	1a6d      	subs	r5, r5, r1
 80098b6:	9b02      	ldr	r3, [sp, #8]
 80098b8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80098bc:	4413      	add	r3, r2
 80098be:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80098c2:	fb92 f2f0 	sdiv	r2, r2, r0
 80098c6:	440a      	add	r2, r1
 80098c8:	1a9b      	subs	r3, r3, r2
 80098ca:	435b      	muls	r3, r3
 80098cc:	fb05 3505 	mla	r5, r5, r5, r3
 80098d0:	4f4d      	ldr	r7, [pc, #308]	@ (8009a08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 80098d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80098d4:	ac10      	add	r4, sp, #64	@ 0x40
 80098d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80098da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80098de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098e0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80098e4:	f1b9 0f0c 	cmp.w	r9, #12
 80098e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80098ec:	f04f 0303 	mov.w	r3, #3
 80098f0:	bfc8      	it	gt
 80098f2:	4698      	movgt	r8, r3
 80098f4:	f8cd 9000 	str.w	r9, [sp]
 80098f8:	f04f 0400 	mov.w	r4, #0
 80098fc:	bfdc      	itt	le
 80098fe:	f109 32ff 	addle.w	r2, r9, #4294967295
 8009902:	fb92 f8f3 	sdivle	r8, r2, r3
 8009906:	1c63      	adds	r3, r4, #1
 8009908:	aa10      	add	r2, sp, #64	@ 0x40
 800990a:	f004 0401 	and.w	r4, r4, #1
 800990e:	9308      	str	r3, [sp, #32]
 8009910:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8009914:	9b00      	ldr	r3, [sp, #0]
 8009916:	fb93 f3f8 	sdiv	r3, r3, r8
 800991a:	b29b      	uxth	r3, r3
 800991c:	3404      	adds	r4, #4
 800991e:	f04f 0b00 	mov.w	fp, #0
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	9a04      	ldr	r2, [sp, #16]
 8009926:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800992a:	fb13 f302 	smulbb	r3, r3, r2
 800992e:	9a01      	ldr	r2, [sp, #4]
 8009930:	b29b      	uxth	r3, r3
 8009932:	1899      	adds	r1, r3, r2
 8009934:	9305      	str	r3, [sp, #20]
 8009936:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800993a:	b209      	sxth	r1, r1
 800993c:	4299      	cmp	r1, r3
 800993e:	db4d      	blt.n	80099dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009940:	8932      	ldrh	r2, [r6, #8]
 8009942:	4413      	add	r3, r2
 8009944:	b21b      	sxth	r3, r3
 8009946:	4299      	cmp	r1, r3
 8009948:	da48      	bge.n	80099dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	6827      	ldr	r7, [r4, #0]
 800994e:	fb17 f703 	smulbb	r7, r7, r3
 8009952:	9b02      	ldr	r3, [sp, #8]
 8009954:	b2bf      	uxth	r7, r7
 8009956:	18fa      	adds	r2, r7, r3
 8009958:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800995c:	b212      	sxth	r2, r2
 800995e:	429a      	cmp	r2, r3
 8009960:	db3c      	blt.n	80099dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009962:	8970      	ldrh	r0, [r6, #10]
 8009964:	4403      	add	r3, r0
 8009966:	b21b      	sxth	r3, r3
 8009968:	429a      	cmp	r2, r3
 800996a:	da37      	bge.n	80099dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800996c:	2300      	movs	r3, #0
 800996e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009970:	4630      	mov	r0, r6
 8009972:	ab0b      	add	r3, sp, #44	@ 0x2c
 8009974:	f7ff ff36 	bl	80097e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009978:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800997a:	b37a      	cbz	r2, 80099dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800997c:	4552      	cmp	r2, sl
 800997e:	d02d      	beq.n	80099dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009980:	4611      	mov	r1, r2
 8009982:	a80e      	add	r0, sp, #56	@ 0x38
 8009984:	9209      	str	r2, [sp, #36]	@ 0x24
 8009986:	f004 fc91 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800998a:	9a06      	ldr	r2, [sp, #24]
 800998c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8009990:	9b01      	ldr	r3, [sp, #4]
 8009992:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8009996:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800999a:	4413      	add	r3, r2
 800999c:	f04f 0e02 	mov.w	lr, #2
 80099a0:	fb91 f1fe 	sdiv	r1, r1, lr
 80099a4:	4401      	add	r1, r0
 80099a6:	1a58      	subs	r0, r3, r1
 80099a8:	9a07      	ldr	r2, [sp, #28]
 80099aa:	9b02      	ldr	r3, [sp, #8]
 80099ac:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80099b0:	fb9c fcfe 	sdiv	ip, ip, lr
 80099b4:	4413      	add	r3, r2
 80099b6:	448c      	add	ip, r1
 80099b8:	eba3 030c 	sub.w	r3, r3, ip
 80099bc:	435b      	muls	r3, r3
 80099be:	fb00 3300 	mla	r3, r0, r0, r3
 80099c2:	42ab      	cmp	r3, r5
 80099c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099c6:	d208      	bcs.n	80099da <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80099c8:	9803      	ldr	r0, [sp, #12]
 80099ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099cc:	6001      	str	r1, [r0, #0]
 80099ce:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80099d0:	9805      	ldr	r0, [sp, #20]
 80099d2:	8008      	strh	r0, [r1, #0]
 80099d4:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80099d6:	461d      	mov	r5, r3
 80099d8:	800f      	strh	r7, [r1, #0]
 80099da:	4692      	mov	sl, r2
 80099dc:	f10b 0b01 	add.w	fp, fp, #1
 80099e0:	f1bb 0f04 	cmp.w	fp, #4
 80099e4:	f104 0408 	add.w	r4, r4, #8
 80099e8:	d19c      	bne.n	8009924 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80099ea:	9b00      	ldr	r3, [sp, #0]
 80099ec:	9c08      	ldr	r4, [sp, #32]
 80099ee:	444b      	add	r3, r9
 80099f0:	4544      	cmp	r4, r8
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	d187      	bne.n	8009906 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80099f6:	b021      	add	sp, #132	@ 0x84
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009a00:	e766      	b.n	80098d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8009a02:	bf00      	nop
 8009a04:	20015444 	.word	0x20015444
 8009a08:	08013fa4 	.word	0x08013fa4

08009a0c <_ZN8touchgfx4RectaNERKS0_>:
 8009a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a10:	f9b1 7000 	ldrsh.w	r7, [r1]
 8009a14:	888c      	ldrh	r4, [r1, #4]
 8009a16:	f9b0 9000 	ldrsh.w	r9, [r0]
 8009a1a:	443c      	add	r4, r7
 8009a1c:	b2a4      	uxth	r4, r4
 8009a1e:	fa0f f884 	sxth.w	r8, r4
 8009a22:	45c1      	cmp	r9, r8
 8009a24:	da2f      	bge.n	8009a86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009a26:	8882      	ldrh	r2, [r0, #4]
 8009a28:	444a      	add	r2, r9
 8009a2a:	b292      	uxth	r2, r2
 8009a2c:	fa0f fe82 	sxth.w	lr, r2
 8009a30:	4577      	cmp	r7, lr
 8009a32:	da28      	bge.n	8009a86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009a34:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009a38:	88cb      	ldrh	r3, [r1, #6]
 8009a3a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8009a3e:	442b      	add	r3, r5
 8009a40:	b21b      	sxth	r3, r3
 8009a42:	429e      	cmp	r6, r3
 8009a44:	da1f      	bge.n	8009a86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009a46:	88c3      	ldrh	r3, [r0, #6]
 8009a48:	4433      	add	r3, r6
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	fa0f fc83 	sxth.w	ip, r3
 8009a50:	4565      	cmp	r5, ip
 8009a52:	da18      	bge.n	8009a86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009a54:	454f      	cmp	r7, r9
 8009a56:	bfb8      	it	lt
 8009a58:	464f      	movlt	r7, r9
 8009a5a:	42b5      	cmp	r5, r6
 8009a5c:	bfb8      	it	lt
 8009a5e:	4635      	movlt	r5, r6
 8009a60:	45f0      	cmp	r8, lr
 8009a62:	bfd8      	it	le
 8009a64:	4622      	movle	r2, r4
 8009a66:	1bd2      	subs	r2, r2, r7
 8009a68:	8082      	strh	r2, [r0, #4]
 8009a6a:	884a      	ldrh	r2, [r1, #2]
 8009a6c:	88c9      	ldrh	r1, [r1, #6]
 8009a6e:	8007      	strh	r7, [r0, #0]
 8009a70:	440a      	add	r2, r1
 8009a72:	b292      	uxth	r2, r2
 8009a74:	b211      	sxth	r1, r2
 8009a76:	458c      	cmp	ip, r1
 8009a78:	bfa8      	it	ge
 8009a7a:	4613      	movge	r3, r2
 8009a7c:	1b5b      	subs	r3, r3, r5
 8009a7e:	80c3      	strh	r3, [r0, #6]
 8009a80:	8045      	strh	r5, [r0, #2]
 8009a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a86:	2300      	movs	r3, #0
 8009a88:	8003      	strh	r3, [r0, #0]
 8009a8a:	8043      	strh	r3, [r0, #2]
 8009a8c:	8083      	strh	r3, [r0, #4]
 8009a8e:	80c3      	strh	r3, [r0, #6]
 8009a90:	e7f7      	b.n	8009a82 <_ZN8touchgfx4RectaNERKS0_+0x76>

08009a92 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8009a92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dd06      	ble.n	8009aa8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8009a9a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	bfcc      	ite	gt
 8009aa2:	2000      	movgt	r0, #0
 8009aa4:	2001      	movle	r0, #1
 8009aa6:	4770      	bx	lr
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	4770      	bx	lr

08009aac <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8009ab4:	8003      	strh	r3, [r0, #0]
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	8043      	strh	r3, [r0, #2]
 8009aba:	8083      	strh	r3, [r0, #4]
 8009abc:	80c3      	strh	r3, [r0, #6]
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	d040      	beq.n	8009b44 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8009ac2:	1d28      	adds	r0, r5, #4
 8009ac4:	f7ff ffe5 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009ac8:	b988      	cbnz	r0, 8009aee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009aca:	4620      	mov	r0, r4
 8009acc:	f7ff ffe1 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009ad0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009ad4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009ad8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8009adc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8009ae0:	b138      	cbz	r0, 8009af2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8009ae2:	8022      	strh	r2, [r4, #0]
 8009ae4:	8063      	strh	r3, [r4, #2]
 8009ae6:	f8a4 e004 	strh.w	lr, [r4, #4]
 8009aea:	f8a4 c006 	strh.w	ip, [r4, #6]
 8009aee:	69ad      	ldr	r5, [r5, #24]
 8009af0:	e7e5      	b.n	8009abe <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8009af2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009af6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009afa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8009afe:	4290      	cmp	r0, r2
 8009b00:	4607      	mov	r7, r0
 8009b02:	bfa8      	it	ge
 8009b04:	4617      	movge	r7, r2
 8009b06:	4472      	add	r2, lr
 8009b08:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8009b0c:	8027      	strh	r7, [r4, #0]
 8009b0e:	4299      	cmp	r1, r3
 8009b10:	460e      	mov	r6, r1
 8009b12:	4440      	add	r0, r8
 8009b14:	bfa8      	it	ge
 8009b16:	461e      	movge	r6, r3
 8009b18:	4471      	add	r1, lr
 8009b1a:	4463      	add	r3, ip
 8009b1c:	b200      	sxth	r0, r0
 8009b1e:	b212      	sxth	r2, r2
 8009b20:	b209      	sxth	r1, r1
 8009b22:	b21b      	sxth	r3, r3
 8009b24:	4290      	cmp	r0, r2
 8009b26:	bfac      	ite	ge
 8009b28:	ebc7 0200 	rsbge	r2, r7, r0
 8009b2c:	ebc7 0202 	rsblt	r2, r7, r2
 8009b30:	4299      	cmp	r1, r3
 8009b32:	bfac      	ite	ge
 8009b34:	ebc6 0301 	rsbge	r3, r6, r1
 8009b38:	ebc6 0303 	rsblt	r3, r6, r3
 8009b3c:	8066      	strh	r6, [r4, #2]
 8009b3e:	80a2      	strh	r2, [r4, #4]
 8009b40:	80e3      	strh	r3, [r4, #6]
 8009b42:	e7d4      	b.n	8009aee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009b44:	4620      	mov	r0, r4
 8009b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b4a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8009b4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b4e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009b52:	b383      	cbz	r3, 8009bb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009b54:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009b56:	b374      	cbz	r4, 8009bb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009b58:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009b5c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8009b60:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009b64:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8009b68:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009b6c:	b303      	cbz	r3, 8009bb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009b6e:	4668      	mov	r0, sp
 8009b70:	1d21      	adds	r1, r4, #4
 8009b72:	f8ad 5000 	strh.w	r5, [sp]
 8009b76:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009b7a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8009b7e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8009b82:	f7ff ff43 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 8009b86:	4668      	mov	r0, sp
 8009b88:	f7ff ff83 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009b8c:	b980      	cbnz	r0, 8009bb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009b8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b92:	88a2      	ldrh	r2, [r4, #4]
 8009b94:	1a9b      	subs	r3, r3, r2
 8009b96:	f8ad 3000 	strh.w	r3, [sp]
 8009b9a:	88e2      	ldrh	r2, [r4, #6]
 8009b9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009ba0:	1a9b      	subs	r3, r3, r2
 8009ba2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	4669      	mov	r1, sp
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	4620      	mov	r0, r4
 8009bae:	4798      	blx	r3
 8009bb0:	69a4      	ldr	r4, [r4, #24]
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	d1d8      	bne.n	8009b68 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009bb6:	b002      	add	sp, #8
 8009bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bbc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8009bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bbe:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	b323      	cbz	r3, 8009c12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009bc8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009bca:	b314      	cbz	r4, 8009c12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009bcc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009bd0:	b1eb      	cbz	r3, 8009c0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009bd2:	6828      	ldr	r0, [r5, #0]
 8009bd4:	6869      	ldr	r1, [r5, #4]
 8009bd6:	466b      	mov	r3, sp
 8009bd8:	c303      	stmia	r3!, {r0, r1}
 8009bda:	4668      	mov	r0, sp
 8009bdc:	1d21      	adds	r1, r4, #4
 8009bde:	f7ff ff15 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 8009be2:	4668      	mov	r0, sp
 8009be4:	f7ff ff55 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009be8:	b988      	cbnz	r0, 8009c0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009bea:	f8bd 3000 	ldrh.w	r3, [sp]
 8009bee:	88a2      	ldrh	r2, [r4, #4]
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	f8ad 3000 	strh.w	r3, [sp]
 8009bf6:	88e2      	ldrh	r2, [r4, #6]
 8009bf8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009bfc:	1a9b      	subs	r3, r3, r2
 8009bfe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	4632      	mov	r2, r6
 8009c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c08:	4669      	mov	r1, sp
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4798      	blx	r3
 8009c0e:	69a4      	ldr	r4, [r4, #24]
 8009c10:	e7db      	b.n	8009bca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8009c12:	b002      	add	sp, #8
 8009c14:	bd70      	pop	{r4, r5, r6, pc}

08009c16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8009c16:	b513      	push	{r0, r1, r4, lr}
 8009c18:	6803      	ldr	r3, [r0, #0]
 8009c1a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e9cd 3300 	strd	r3, r3, [sp]
 8009c24:	466b      	mov	r3, sp
 8009c26:	47a0      	blx	r4
 8009c28:	b002      	add	sp, #8
 8009c2a:	bd10      	pop	{r4, pc}

08009c2c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8009c32:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009c36:	4770      	bx	lr

08009c38 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8009c3e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009c42:	4770      	bx	lr

08009c44 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8009c44:	6843      	ldr	r3, [r0, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	725a      	strb	r2, [r3, #9]
 8009c4a:	6840      	ldr	r0, [r0, #4]
 8009c4c:	6803      	ldr	r3, [r0, #0]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	4718      	bx	r3

08009c52 <_ZN8touchgfx3HAL8flushDMAEv>:
 8009c52:	6840      	ldr	r0, [r0, #4]
 8009c54:	6803      	ldr	r3, [r0, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	4718      	bx	r3

08009c5a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8009c5a:	b530      	push	{r4, r5, lr}
 8009c5c:	b08b      	sub	sp, #44	@ 0x2c
 8009c5e:	6804      	ldr	r4, [r0, #0]
 8009c60:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8009c64:	9509      	str	r5, [sp, #36]	@ 0x24
 8009c66:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8009c6a:	9508      	str	r5, [sp, #32]
 8009c6c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8009c70:	9507      	str	r5, [sp, #28]
 8009c72:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8009c76:	9506      	str	r5, [sp, #24]
 8009c78:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8009c7c:	9505      	str	r5, [sp, #20]
 8009c7e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8009c82:	9504      	str	r5, [sp, #16]
 8009c84:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8009c88:	9503      	str	r5, [sp, #12]
 8009c8a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8009c8e:	9502      	str	r5, [sp, #8]
 8009c90:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8009c94:	e9cd 3500 	strd	r3, r5, [sp]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	47a0      	blx	r4
 8009ca0:	b00b      	add	sp, #44	@ 0x2c
 8009ca2:	bd30      	pop	{r4, r5, pc}

08009ca4 <_ZN8touchgfx3HAL10beginFrameEv>:
 8009ca4:	4b04      	ldr	r3, [pc, #16]	@ (8009cb8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	b123      	cbz	r3, 8009cb4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8009caa:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8009cae:	f080 0001 	eor.w	r0, r0, #1
 8009cb2:	4770      	bx	lr
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	4770      	bx	lr
 8009cb8:	20015442 	.word	0x20015442

08009cbc <_ZN8touchgfx3HAL8endFrameEv>:
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	6840      	ldr	r0, [r0, #4]
 8009cc2:	6803      	ldr	r3, [r0, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	4798      	blx	r3
 8009cc8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8009ccc:	b113      	cbz	r3, 8009cd4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009cd4:	bd10      	pop	{r4, pc}

08009cd6 <_ZN8touchgfx3HAL10initializeEv>:
 8009cd6:	b510      	push	{r4, lr}
 8009cd8:	4604      	mov	r4, r0
 8009cda:	f7f8 f8d9 	bl	8001e90 <_ZN8touchgfx10OSWrappers10initializeEv>
 8009cde:	f7f7 ffe1 	bl	8001ca4 <_ZN8touchgfx4GPIO4initEv>
 8009ce2:	6860      	ldr	r0, [r4, #4]
 8009ce4:	6803      	ldr	r3, [r0, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	4798      	blx	r3
 8009cea:	68e0      	ldr	r0, [r4, #12]
 8009cec:	6803      	ldr	r3, [r0, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	4798      	blx	r3
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cfc:	4718      	bx	r3
	...

08009d00 <_ZN8touchgfx3HAL4tickEv>:
 8009d00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009d02:	6803      	ldr	r3, [r0, #0]
 8009d04:	4d5b      	ldr	r5, [pc, #364]	@ (8009e74 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8009d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4798      	blx	r3
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f000 8095 	beq.w	8009e3e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8009d14:	2001      	movs	r0, #1
 8009d16:	f7f7 ff43 	bl	8001ba0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8009d1a:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8009d1e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009d22:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8009d26:	2600      	movs	r6, #0
 8009d28:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8009d2c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8009d30:	b133      	cbz	r3, 8009d40 <_ZN8touchgfx3HAL4tickEv+0x40>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	4620      	mov	r0, r4
 8009d36:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009d3a:	4798      	blx	r3
 8009d3c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8009d40:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8009d44:	6862      	ldr	r2, [r4, #4]
 8009d46:	f083 0301 	eor.w	r3, r3, #1
 8009d4a:	7253      	strb	r3, [r2, #9]
 8009d4c:	2601      	movs	r6, #1
 8009d4e:	702e      	strb	r6, [r5, #0]
 8009d50:	f003 f972 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
 8009d54:	6803      	ldr	r3, [r0, #0]
 8009d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d58:	4798      	blx	r3
 8009d5a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8009d5e:	b90b      	cbnz	r3, 8009d64 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009d60:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8009d64:	f003 f968 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
 8009d68:	6803      	ldr	r3, [r0, #0]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	4798      	blx	r3
 8009d6e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009d70:	6803      	ldr	r3, [r0, #0]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	4798      	blx	r3
 8009d76:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8009d7a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009d86:	b10a      	cbz	r2, 8009d8c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1eb      	bne.n	8009d64 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8009e78 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8009d8e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8009d92:	7813      	ldrb	r3, [r2, #0]
 8009d94:	3301      	adds	r3, #1
 8009d96:	b25b      	sxtb	r3, r3
 8009d98:	4299      	cmp	r1, r3
 8009d9a:	7013      	strb	r3, [r2, #0]
 8009d9c:	dc10      	bgt.n	8009dc0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8009d9e:	68e0      	ldr	r0, [r4, #12]
 8009da0:	2300      	movs	r3, #0
 8009da2:	7013      	strb	r3, [r2, #0]
 8009da4:	6803      	ldr	r3, [r0, #0]
 8009da6:	aa03      	add	r2, sp, #12
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	a902      	add	r1, sp, #8
 8009dac:	4798      	blx	r3
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d050      	beq.n	8009e56 <_ZN8touchgfx3HAL4tickEv+0x156>
 8009db4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009db8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4798      	blx	r3
 8009dc0:	6960      	ldr	r0, [r4, #20]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f88d 3007 	strb.w	r3, [sp, #7]
 8009dc8:	b158      	cbz	r0, 8009de2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009dca:	6803      	ldr	r3, [r0, #0]
 8009dcc:	f10d 0107 	add.w	r1, sp, #7
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	4798      	blx	r3
 8009dd4:	b128      	cbz	r0, 8009de2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009dd6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009dd8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009ddc:	6803      	ldr	r3, [r0, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	4798      	blx	r3
 8009de2:	f104 001c 	add.w	r0, r4, #28
 8009de6:	f008 ffb1 	bl	8012d4c <_ZN8touchgfx8Gestures4tickEv>
 8009dea:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8009dee:	b30b      	cbz	r3, 8009e34 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009df0:	6920      	ldr	r0, [r4, #16]
 8009df2:	6803      	ldr	r3, [r0, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	4798      	blx	r3
 8009df8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	b903      	cbnz	r3, 8009e00 <_ZN8touchgfx3HAL4tickEv+0x100>
 8009dfe:	6760      	str	r0, [r4, #116]	@ 0x74
 8009e00:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009e02:	4a1e      	ldr	r2, [pc, #120]	@ (8009e7c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8009e04:	1af3      	subs	r3, r6, r3
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d914      	bls.n	8009e34 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009e0a:	6920      	ldr	r0, [r4, #16]
 8009e0c:	6803      	ldr	r3, [r0, #0]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	4798      	blx	r3
 8009e12:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009e14:	2264      	movs	r2, #100	@ 0x64
 8009e16:	1af3      	subs	r3, r6, r3
 8009e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009e20:	2800      	cmp	r0, #0
 8009e22:	dc1d      	bgt.n	8009e60 <_ZN8touchgfx3HAL4tickEv+0x160>
 8009e24:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8009e28:	6920      	ldr	r0, [r4, #16]
 8009e2a:	6803      	ldr	r3, [r0, #0]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	4798      	blx	r3
 8009e32:	6766      	str	r6, [r4, #116]	@ 0x74
 8009e34:	f003 f900 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
 8009e38:	6803      	ldr	r3, [r0, #0]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3c:	4798      	blx	r3
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	4620      	mov	r0, r4
 8009e42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009e46:	4798      	blx	r3
 8009e48:	2001      	movs	r0, #1
 8009e4a:	f7f7 fed3 	bl	8001bf4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	702b      	strb	r3, [r5, #0]
 8009e52:	b004      	add	sp, #16
 8009e54:	bd70      	pop	{r4, r5, r6, pc}
 8009e56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	4798      	blx	r3
 8009e5e:	e7af      	b.n	8009dc0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8009e60:	2863      	cmp	r0, #99	@ 0x63
 8009e62:	bfcb      	itete	gt
 8009e64:	2300      	movgt	r3, #0
 8009e66:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8009e6a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8009e6e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8009e72:	e7d9      	b.n	8009e28 <_ZN8touchgfx3HAL4tickEv+0x128>
 8009e74:	20015448 	.word	0x20015448
 8009e78:	20015449 	.word	0x20015449
 8009e7c:	05f5e100 	.word	0x05f5e100

08009e80 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	4604      	mov	r4, r0
 8009e84:	f7f8 f834 	bl	8001ef0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8009e88:	6863      	ldr	r3, [r4, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	729a      	strb	r2, [r3, #10]
 8009e8e:	bd10      	pop	{r4, pc}

08009e90 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8009e90:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8009e92:	301c      	adds	r0, #28
 8009e94:	f008 bf58 	b.w	8012d48 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08009e98 <_ZN8touchgfx3HAL5touchEll>:
 8009e98:	b530      	push	{r4, r5, lr}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	a804      	add	r0, sp, #16
 8009ea0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009ea4:	f002 feb0 	bl	800cc08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8009ea8:	9b04      	ldr	r3, [sp, #16]
 8009eaa:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009eae:	a906      	add	r1, sp, #24
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8009eb6:	a803      	add	r0, sp, #12
 8009eb8:	f002 fef8 	bl	800ccac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8009ebc:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8009ec0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009ec4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009ec8:	f104 001c 	add.w	r0, r4, #28
 8009ecc:	b189      	cbz	r1, 8009ef2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8009ece:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8009ed8:	4613      	mov	r3, r2
 8009eda:	462a      	mov	r2, r5
 8009edc:	f008 ff44 	bl	8012d68 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8009ee0:	b128      	cbz	r0, 8009eee <_ZN8touchgfx3HAL5touchEll+0x56>
 8009ee2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8009ee6:	6623      	str	r3, [r4, #96]	@ 0x60
 8009ee8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8009eec:	6663      	str	r3, [r4, #100]	@ 0x64
 8009eee:	b007      	add	sp, #28
 8009ef0:	bd30      	pop	{r4, r5, pc}
 8009ef2:	f008 ff79 	bl	8012de8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009efc:	e7f1      	b.n	8009ee2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08009efe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8009efe:	b510      	push	{r4, lr}
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d046      	beq.n	8009f92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009f04:	ea81 0002 	eor.w	r0, r1, r2
 8009f08:	07c4      	lsls	r4, r0, #31
 8009f0a:	d508      	bpl.n	8009f1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8009f0c:	440b      	add	r3, r1
 8009f0e:	3a01      	subs	r2, #1
 8009f10:	428b      	cmp	r3, r1
 8009f12:	d93e      	bls.n	8009f92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009f14:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009f18:	f801 0b01 	strb.w	r0, [r1], #1
 8009f1c:	e7f8      	b.n	8009f10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8009f1e:	07d0      	lsls	r0, r2, #31
 8009f20:	bf42      	ittt	mi
 8009f22:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8009f26:	f801 0b01 	strbmi.w	r0, [r1], #1
 8009f2a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d911      	bls.n	8009f56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009f32:	ea81 0402 	eor.w	r4, r1, r2
 8009f36:	07a4      	lsls	r4, r4, #30
 8009f38:	4610      	mov	r0, r2
 8009f3a:	d022      	beq.n	8009f82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8009f3c:	f023 0401 	bic.w	r4, r3, #1
 8009f40:	440c      	add	r4, r1
 8009f42:	428c      	cmp	r4, r1
 8009f44:	4602      	mov	r2, r0
 8009f46:	d904      	bls.n	8009f52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8009f48:	8812      	ldrh	r2, [r2, #0]
 8009f4a:	f821 2b02 	strh.w	r2, [r1], #2
 8009f4e:	3002      	adds	r0, #2
 8009f50:	e7f7      	b.n	8009f42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	f023 0003 	bic.w	r0, r3, #3
 8009f5a:	4408      	add	r0, r1
 8009f5c:	4288      	cmp	r0, r1
 8009f5e:	4614      	mov	r4, r2
 8009f60:	d904      	bls.n	8009f6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8009f62:	6824      	ldr	r4, [r4, #0]
 8009f64:	f841 4b04 	str.w	r4, [r1], #4
 8009f68:	3204      	adds	r2, #4
 8009f6a:	e7f7      	b.n	8009f5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8009f6c:	f003 0303 	and.w	r3, r3, #3
 8009f70:	440b      	add	r3, r1
 8009f72:	3a01      	subs	r2, #1
 8009f74:	428b      	cmp	r3, r1
 8009f76:	d90c      	bls.n	8009f92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009f78:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009f7c:	f801 0b01 	strb.w	r0, [r1], #1
 8009f80:	e7f8      	b.n	8009f74 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8009f82:	0790      	lsls	r0, r2, #30
 8009f84:	d0e7      	beq.n	8009f56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009f86:	f832 0b02 	ldrh.w	r0, [r2], #2
 8009f8a:	f821 0b02 	strh.w	r0, [r1], #2
 8009f8e:	3b02      	subs	r3, #2
 8009f90:	e7e1      	b.n	8009f56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009f92:	2001      	movs	r0, #1
 8009f94:	bd10      	pop	{r4, pc}

08009f96 <_ZN8touchgfx3HAL7noTouchEv>:
 8009f96:	b510      	push	{r4, lr}
 8009f98:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	b153      	cbz	r3, 8009fb6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8009fa0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8009fa4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8009fa8:	2101      	movs	r1, #1
 8009faa:	301c      	adds	r0, #28
 8009fac:	f008 ff1c 	bl	8012de8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009fb6:	bd10      	pop	{r4, pc}

08009fb8 <_ZN8touchgfx3HAL3lcdEv>:
 8009fb8:	4b04      	ldr	r3, [pc, #16]	@ (8009fcc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009fc0:	b10a      	cbz	r2, 8009fc6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8009fc2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009fc4:	b900      	cbnz	r0, 8009fc8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8009fc6:	6898      	ldr	r0, [r3, #8]
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20015444 	.word	0x20015444

08009fd0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8009fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	ad04      	add	r5, sp, #16
 8009fd8:	4604      	mov	r4, r0
 8009fda:	2000      	movs	r0, #0
 8009fdc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009fe0:	69a0      	ldr	r0, [r4, #24]
 8009fe2:	6806      	ldr	r6, [r0, #0]
 8009fe4:	9501      	str	r5, [sp, #4]
 8009fe6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8009fea:	9500      	str	r5, [sp, #0]
 8009fec:	6835      	ldr	r5, [r6, #0]
 8009fee:	4699      	mov	r9, r3
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	4690      	mov	r8, r2
 8009ff4:	47a8      	blx	r5
 8009ff6:	4d10      	ldr	r5, [pc, #64]	@ (800a038 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	f8a5 9000 	strh.w	r9, [r5]
 8009ffe:	f7ff ffdb 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a002:	6803      	ldr	r3, [r0, #0]
 800a004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a006:	4798      	blx	r3
 800a008:	b128      	cbz	r0, 800a016 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800a00a:	2801      	cmp	r0, #1
 800a00c:	d00b      	beq.n	800a026 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800a00e:	4630      	mov	r0, r6
 800a010:	b005      	add	sp, #20
 800a012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a016:	882b      	ldrh	r3, [r5, #0]
 800a018:	fb08 7203 	mla	r2, r8, r3, r7
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800a022:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a024:	e7f3      	b.n	800a00e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800a026:	882a      	ldrh	r2, [r5, #0]
 800a028:	9b03      	ldr	r3, [sp, #12]
 800a02a:	fb08 7202 	mla	r2, r8, r2, r7
 800a02e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a032:	1a9a      	subs	r2, r3, r2
 800a034:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800a036:	e7ea      	b.n	800a00e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800a038:	2001543e 	.word	0x2001543e

0800a03c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a03e:	b08b      	sub	sp, #44	@ 0x2c
 800a040:	4617      	mov	r7, r2
 800a042:	4604      	mov	r4, r0
 800a044:	460e      	mov	r6, r1
 800a046:	461d      	mov	r5, r3
 800a048:	f7ff ffb6 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a04c:	6803      	ldr	r3, [r0, #0]
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	4798      	blx	r3
 800a052:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a056:	9007      	str	r0, [sp, #28]
 800a058:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a05c:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	9306      	str	r3, [sp, #24]
 800a064:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800a068:	9305      	str	r3, [sp, #20]
 800a06a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800a06e:	9304      	str	r3, [sp, #16]
 800a070:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a074:	9303      	str	r3, [sp, #12]
 800a076:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a07a:	9302      	str	r3, [sp, #8]
 800a07c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a080:	e9cd 5300 	strd	r5, r3, [sp]
 800a084:	4631      	mov	r1, r6
 800a086:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800a088:	463b      	mov	r3, r7
 800a08a:	2200      	movs	r2, #0
 800a08c:	4620      	mov	r0, r4
 800a08e:	47a8      	blx	r5
 800a090:	b00b      	add	sp, #44	@ 0x2c
 800a092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a094:	2001543e 	.word	0x2001543e

0800a098 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800a098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a09c:	4698      	mov	r8, r3
 800a09e:	6803      	ldr	r3, [r0, #0]
 800a0a0:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800a0a2:	4b15      	ldr	r3, [pc, #84]	@ (800a0f8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800a0a4:	b08b      	sub	sp, #44	@ 0x2c
 800a0a6:	4617      	mov	r7, r2
 800a0a8:	f8b3 9000 	ldrh.w	r9, [r3]
 800a0ac:	460e      	mov	r6, r1
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	f7ff ff82 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a0b4:	6803      	ldr	r3, [r0, #0]
 800a0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b8:	4798      	blx	r3
 800a0ba:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800a0be:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	9305      	str	r3, [sp, #20]
 800a0cc:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a0d0:	9304      	str	r3, [sp, #16]
 800a0d2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800a0d6:	9303      	str	r3, [sp, #12]
 800a0d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a0dc:	9302      	str	r3, [sp, #8]
 800a0de:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	e9cd 8300 	strd	r8, r3, [sp]
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	47a8      	blx	r5
 800a0f0:	b00b      	add	sp, #44	@ 0x2c
 800a0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f6:	bf00      	nop
 800a0f8:	2001543e 	.word	0x2001543e

0800a0fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800a0fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a100:	4698      	mov	r8, r3
 800a102:	6803      	ldr	r3, [r0, #0]
 800a104:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800a106:	4b11      	ldr	r3, [pc, #68]	@ (800a14c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800a108:	b087      	sub	sp, #28
 800a10a:	f8b3 9000 	ldrh.w	r9, [r3]
 800a10e:	460e      	mov	r6, r1
 800a110:	4617      	mov	r7, r2
 800a112:	4604      	mov	r4, r0
 800a114:	f7ff ff50 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a118:	6803      	ldr	r3, [r0, #0]
 800a11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11c:	4798      	blx	r3
 800a11e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800a122:	f8cd 900c 	str.w	r9, [sp, #12]
 800a126:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800a12a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800a12e:	9302      	str	r3, [sp, #8]
 800a130:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	463a      	mov	r2, r7
 800a13e:	4643      	mov	r3, r8
 800a140:	4631      	mov	r1, r6
 800a142:	4620      	mov	r0, r4
 800a144:	47a8      	blx	r5
 800a146:	b007      	add	sp, #28
 800a148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a14c:	2001543e 	.word	0x2001543e

0800a150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4604      	mov	r4, r0
 800a156:	b08f      	sub	sp, #60	@ 0x3c
 800a158:	4610      	mov	r0, r2
 800a15a:	460d      	mov	r5, r1
 800a15c:	4691      	mov	r9, r2
 800a15e:	461e      	mov	r6, r3
 800a160:	f005 ffb6 	bl	80100d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a164:	2800      	cmp	r0, #0
 800a166:	f000 809d 	beq.w	800a2a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800a308 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800a170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a172:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800a30c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800a176:	4f61      	ldr	r7, [pc, #388]	@ (800a2fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a178:	4620      	mov	r0, r4
 800a17a:	4798      	blx	r3
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	4620      	mov	r0, r4
 800a180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a182:	4798      	blx	r3
 800a184:	f8bb 3000 	ldrh.w	r3, [fp]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800a18e:	f8ba 3000 	ldrh.w	r3, [sl]
 800a192:	9302      	str	r3, [sp, #8]
 800a194:	883b      	ldrh	r3, [r7, #0]
 800a196:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	4b58      	ldr	r3, [pc, #352]	@ (800a300 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	881a      	ldrh	r2, [r3, #0]
 800a1a2:	9204      	str	r2, [sp, #16]
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	f006 f827 	bl	80101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a1aa:	8038      	strh	r0, [r7, #0]
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	f006 f857 	bl	8010260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a1b2:	9b05      	ldr	r3, [sp, #20]
 800a1b4:	b280      	uxth	r0, r0
 800a1b6:	8018      	strh	r0, [r3, #0]
 800a1b8:	4b52      	ldr	r3, [pc, #328]	@ (800a304 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d174      	bne.n	800a2aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800a1c0:	883b      	ldrh	r3, [r7, #0]
 800a1c2:	f8ab 3000 	strh.w	r3, [fp]
 800a1c6:	f8aa 0000 	strh.w	r0, [sl]
 800a1ca:	4648      	mov	r0, r9
 800a1cc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800a1d0:	f005 ff7e 	bl	80100d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a1d4:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800a1e2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800a1e6:	f7f9 f841 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800a1f0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a1f4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dd5c      	ble.n	800a2b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800a1fc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800a200:	2b00      	cmp	r3, #0
 800a202:	dd58      	ble.n	800a2b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800a204:	462a      	mov	r2, r5
 800a206:	ab0a      	add	r3, sp, #40	@ 0x28
 800a208:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a20c:	6851      	ldr	r1, [r2, #4]
 800a20e:	c303      	stmia	r3!, {r0, r1}
 800a210:	4631      	mov	r1, r6
 800a212:	a80a      	add	r0, sp, #40	@ 0x28
 800a214:	f7ff fbfa 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800a218:	4b38      	ldr	r3, [pc, #224]	@ (800a2fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a21a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a21e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800a222:	2100      	movs	r1, #0
 800a224:	aa0a      	add	r2, sp, #40	@ 0x28
 800a226:	4b36      	ldr	r3, [pc, #216]	@ (800a300 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a228:	910c      	str	r1, [sp, #48]	@ 0x30
 800a22a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a22e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a232:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800a236:	ab08      	add	r3, sp, #32
 800a238:	e883 0003 	stmia.w	r3, {r0, r1}
 800a23c:	4618      	mov	r0, r3
 800a23e:	a90c      	add	r1, sp, #48	@ 0x30
 800a240:	f7ff fbe4 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800a244:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d13c      	bne.n	800a2c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800a24a:	2000      	movs	r0, #0
 800a24c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800a250:	2600      	movs	r6, #0
 800a252:	682a      	ldr	r2, [r5, #0]
 800a254:	696b      	ldr	r3, [r5, #20]
 800a256:	616e      	str	r6, [r5, #20]
 800a258:	9305      	str	r3, [sp, #20]
 800a25a:	6892      	ldr	r2, [r2, #8]
 800a25c:	a908      	add	r1, sp, #32
 800a25e:	4628      	mov	r0, r5
 800a260:	4790      	blx	r2
 800a262:	9b05      	ldr	r3, [sp, #20]
 800a264:	616b      	str	r3, [r5, #20]
 800a266:	4652      	mov	r2, sl
 800a268:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800a26c:	4649      	mov	r1, r9
 800a26e:	4628      	mov	r0, r5
 800a270:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800a274:	f7f8 fffa 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
 800a278:	4b23      	ldr	r3, [pc, #140]	@ (800a308 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800a27a:	9a01      	ldr	r2, [sp, #4]
 800a27c:	801a      	strh	r2, [r3, #0]
 800a27e:	4b23      	ldr	r3, [pc, #140]	@ (800a30c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800a280:	9a02      	ldr	r2, [sp, #8]
 800a282:	801a      	strh	r2, [r3, #0]
 800a284:	4b1d      	ldr	r3, [pc, #116]	@ (800a2fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a286:	9a03      	ldr	r2, [sp, #12]
 800a288:	801a      	strh	r2, [r3, #0]
 800a28a:	4b1d      	ldr	r3, [pc, #116]	@ (800a300 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a28c:	9a04      	ldr	r2, [sp, #16]
 800a28e:	801a      	strh	r2, [r3, #0]
 800a290:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	4620      	mov	r0, r4
 800a298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29a:	4798      	blx	r3
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a2:	4798      	blx	r3
 800a2a4:	b00f      	add	sp, #60	@ 0x3c
 800a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2aa:	883b      	ldrh	r3, [r7, #0]
 800a2ac:	f8ab 0000 	strh.w	r0, [fp]
 800a2b0:	f8aa 3000 	strh.w	r3, [sl]
 800a2b4:	e789      	b.n	800a1ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a2ba:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a2be:	6851      	ldr	r1, [r2, #4]
 800a2c0:	c303      	stmia	r3!, {r0, r1}
 800a2c2:	e7a9      	b.n	800a218 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800a2c4:	a807      	add	r0, sp, #28
 800a2c6:	f006 f90d 	bl	80104e4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a2ce:	6803      	ldr	r3, [r0, #0]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d2:	4798      	blx	r3
 800a2d4:	4286      	cmp	r6, r0
 800a2d6:	d1b8      	bne.n	800a24a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800a2d8:	f7ff fe6e 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a2dc:	6803      	ldr	r3, [r0, #0]
 800a2de:	4606      	mov	r6, r0
 800a2e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2e2:	9305      	str	r3, [sp, #20]
 800a2e4:	a807      	add	r0, sp, #28
 800a2e6:	f006 f8fd 	bl	80104e4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a2ea:	9b05      	ldr	r3, [sp, #20]
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	4798      	blx	r3
 800a2f2:	f080 0001 	eor.w	r0, r0, #1
 800a2f6:	b2c0      	uxtb	r0, r0
 800a2f8:	e7a8      	b.n	800a24c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800a2fa:	bf00      	nop
 800a2fc:	20015438 	.word	0x20015438
 800a300:	2001543a 	.word	0x2001543a
 800a304:	2001543c 	.word	0x2001543c
 800a308:	2001543e 	.word	0x2001543e
 800a30c:	20015440 	.word	0x20015440

0800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800a310:	b510      	push	{r4, lr}
 800a312:	4b07      	ldr	r3, [pc, #28]	@ (800a330 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	4604      	mov	r4, r0
 800a318:	b13b      	cbz	r3, 800a32a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a31a:	6803      	ldr	r3, [r0, #0]
 800a31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a31e:	4798      	blx	r3
 800a320:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a322:	4283      	cmp	r3, r0
 800a324:	d101      	bne.n	800a32a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a326:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a32c:	e7fc      	b.n	800a328 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800a32e:	bf00      	nop
 800a330:	20015442 	.word	0x20015442

0800a334 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800a334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a338:	b08a      	sub	sp, #40	@ 0x28
 800a33a:	461d      	mov	r5, r3
 800a33c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a340:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a344:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a348:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a34c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a350:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a354:	2400      	movs	r4, #0
 800a356:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a35a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800a35e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a362:	4690      	mov	r8, r2
 800a364:	4607      	mov	r7, r0
 800a366:	9404      	str	r4, [sp, #16]
 800a368:	f88d 4020 	strb.w	r4, [sp, #32]
 800a36c:	f7ff ffd0 	bl	800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a370:	fb06 8505 	mla	r5, r6, r5, r8
 800a374:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	9505      	str	r5, [sp, #20]
 800a37c:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a380:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a384:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800a388:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800a38c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800a390:	6803      	ldr	r3, [r0, #0]
 800a392:	a901      	add	r1, sp, #4
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	4798      	blx	r3
 800a398:	b00a      	add	sp, #40	@ 0x28
 800a39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a39e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800a39e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3a2:	b08b      	sub	sp, #44	@ 0x2c
 800a3a4:	2400      	movs	r4, #0
 800a3a6:	461d      	mov	r5, r3
 800a3a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a3ac:	4688      	mov	r8, r1
 800a3ae:	4691      	mov	r9, r2
 800a3b0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800a3b4:	9404      	str	r4, [sp, #16]
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3bc:	f7ff ffa8 	bl	800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a3c0:	fb06 9505 	mla	r5, r6, r5, r9
 800a3c4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a3c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a3cc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a3d0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	9505      	str	r5, [sp, #20]
 800a3d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a3dc:	f8ad 401c 	strh.w	r4, [sp, #28]
 800a3e0:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a3e4:	f8cd 8010 	str.w	r8, [sp, #16]
 800a3e8:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a3ec:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a3f0:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800a3f4:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800a3f8:	6803      	ldr	r3, [r0, #0]
 800a3fa:	a901      	add	r1, sp, #4
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	4798      	blx	r3
 800a400:	b00b      	add	sp, #44	@ 0x2c
 800a402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a408 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	b08a      	sub	sp, #40	@ 0x28
 800a40e:	4698      	mov	r8, r3
 800a410:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800a414:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800a418:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800a41c:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800a420:	2300      	movs	r3, #0
 800a422:	2d0b      	cmp	r5, #11
 800a424:	4606      	mov	r6, r0
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800a42c:	d138      	bne.n	800a4a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 800a42e:	2380      	movs	r3, #128	@ 0x80
 800a430:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a434:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a438:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a43c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a440:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a444:	f88d 0020 	strb.w	r0, [sp, #32]
 800a448:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a44c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a450:	4630      	mov	r0, r6
 800a452:	9203      	str	r2, [sp, #12]
 800a454:	f7ff ff5c 	bl	800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a458:	2c0b      	cmp	r4, #11
 800a45a:	bf98      	it	ls
 800a45c:	4b1b      	ldrls	r3, [pc, #108]	@ (800a4cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800a45e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800a462:	bf98      	it	ls
 800a464:	5d19      	ldrbls	r1, [r3, r4]
 800a466:	f8ad 701e 	strh.w	r7, [sp, #30]
 800a46a:	bf88      	it	hi
 800a46c:	2100      	movhi	r1, #0
 800a46e:	fb02 8307 	mla	r3, r2, r7, r8
 800a472:	10c9      	asrs	r1, r1, #3
 800a474:	fb01 0003 	mla	r0, r1, r3, r0
 800a478:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800a47c:	9005      	str	r0, [sp, #20]
 800a47e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800a482:	6870      	ldr	r0, [r6, #4]
 800a484:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800a488:	2300      	movs	r3, #0
 800a48a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a48e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a492:	6803      	ldr	r3, [r0, #0]
 800a494:	a901      	add	r1, sp, #4
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	4798      	blx	r3
 800a49a:	b00a      	add	sp, #40	@ 0x28
 800a49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a0:	2d02      	cmp	r5, #2
 800a4a2:	d109      	bne.n	800a4b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 800a4a4:	28ff      	cmp	r0, #255	@ 0xff
 800a4a6:	d105      	bne.n	800a4b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 800a4a8:	f1bc 0f00 	cmp.w	ip, #0
 800a4ac:	bf14      	ite	ne
 800a4ae:	2340      	movne	r3, #64	@ 0x40
 800a4b0:	2320      	moveq	r3, #32
 800a4b2:	e7bd      	b.n	800a430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a4b4:	2340      	movs	r3, #64	@ 0x40
 800a4b6:	e7bb      	b.n	800a430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a4b8:	28ff      	cmp	r0, #255	@ 0xff
 800a4ba:	d105      	bne.n	800a4c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 800a4bc:	f1bc 0f00 	cmp.w	ip, #0
 800a4c0:	bf14      	ite	ne
 800a4c2:	2304      	movne	r3, #4
 800a4c4:	2301      	moveq	r3, #1
 800a4c6:	e7b3      	b.n	800a430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a4c8:	2304      	movs	r3, #4
 800a4ca:	e7b1      	b.n	800a430 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a4cc:	08015b50 	.word	0x08015b50

0800a4d0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	b08b      	sub	sp, #44	@ 0x2c
 800a4d6:	461d      	mov	r5, r3
 800a4d8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800a4dc:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800a4e0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800a4e4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800a4e8:	bf14      	ite	ne
 800a4ea:	2308      	movne	r3, #8
 800a4ec:	2302      	moveq	r3, #2
 800a4ee:	2400      	movs	r4, #0
 800a4f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4f4:	4688      	mov	r8, r1
 800a4f6:	4693      	mov	fp, r2
 800a4f8:	9404      	str	r4, [sp, #16]
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	f7ff ff08 	bl	800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a500:	2e0b      	cmp	r6, #11
 800a502:	bf98      	it	ls
 800a504:	4b15      	ldrls	r3, [pc, #84]	@ (800a55c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800a506:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800a50a:	bf98      	it	ls
 800a50c:	5d9c      	ldrbls	r4, [r3, r6]
 800a50e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800a512:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a516:	fb05 b50a 	mla	r5, r5, sl, fp
 800a51a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800a51e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a522:	10e4      	asrs	r4, r4, #3
 800a524:	fb04 0405 	mla	r4, r4, r5, r0
 800a528:	2300      	movs	r3, #0
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	9405      	str	r4, [sp, #20]
 800a52e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a532:	f8ad a01e 	strh.w	sl, [sp, #30]
 800a536:	f8cd 8010 	str.w	r8, [sp, #16]
 800a53a:	f88d 9020 	strb.w	r9, [sp, #32]
 800a53e:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800a542:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a546:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800a54a:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800a54e:	6803      	ldr	r3, [r0, #0]
 800a550:	a901      	add	r1, sp, #4
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	4798      	blx	r3
 800a556:	b00b      	add	sp, #44	@ 0x2c
 800a558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55c:	08015b50 	.word	0x08015b50

0800a560 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800a560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a564:	461e      	mov	r6, r3
 800a566:	4b0a      	ldr	r3, [pc, #40]	@ (800a590 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800a568:	460f      	mov	r7, r1
 800a56a:	881d      	ldrh	r5, [r3, #0]
 800a56c:	4690      	mov	r8, r2
 800a56e:	f7ff fd23 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a572:	6803      	ldr	r3, [r0, #0]
 800a574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a576:	4798      	blx	r3
 800a578:	280b      	cmp	r0, #11
 800a57a:	bf9a      	itte	ls
 800a57c:	4b05      	ldrls	r3, [pc, #20]	@ (800a594 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800a57e:	5c1c      	ldrbls	r4, [r3, r0]
 800a580:	2400      	movhi	r4, #0
 800a582:	fb08 7005 	mla	r0, r8, r5, r7
 800a586:	10e4      	asrs	r4, r4, #3
 800a588:	fb04 6000 	mla	r0, r4, r0, r6
 800a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a590:	2001543e 	.word	0x2001543e
 800a594:	08015b50 	.word	0x08015b50

0800a598 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800a598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a59a:	b08b      	sub	sp, #44	@ 0x2c
 800a59c:	461f      	mov	r7, r3
 800a59e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800a5a2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a5a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a5aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a5ae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a5b2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a5b6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a5ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a5be:	2500      	movs	r5, #0
 800a5c0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800a5c4:	f88d 3020 	strb.w	r3, [sp, #32]
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	4616      	mov	r6, r2
 800a5cc:	9504      	str	r5, [sp, #16]
 800a5ce:	f7ff fe9f 	bl	800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7ff ffc1 	bl	800a560 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a5de:	4b0e      	ldr	r3, [pc, #56]	@ (800a618 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800a5e0:	9005      	str	r0, [sp, #20]
 800a5e2:	881b      	ldrh	r3, [r3, #0]
 800a5e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a5e8:	f7ff fce6 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a5ec:	6803      	ldr	r3, [r0, #0]
 800a5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f0:	4798      	blx	r3
 800a5f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5f4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800a5f8:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	6860      	ldr	r0, [r4, #4]
 800a600:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800a604:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800a608:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800a60c:	6803      	ldr	r3, [r0, #0]
 800a60e:	a901      	add	r1, sp, #4
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	4798      	blx	r3
 800a614:	b00b      	add	sp, #44	@ 0x2c
 800a616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a618:	2001543e 	.word	0x2001543e

0800a61c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800a61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61e:	b08d      	sub	sp, #52	@ 0x34
 800a620:	466b      	mov	r3, sp
 800a622:	e883 0006 	stmia.w	r3, {r1, r2}
 800a626:	2300      	movs	r3, #0
 800a628:	9306      	str	r3, [sp, #24]
 800a62a:	6803      	ldr	r3, [r0, #0]
 800a62c:	f8bd 6000 	ldrh.w	r6, [sp]
 800a630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a632:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800a636:	2501      	movs	r5, #1
 800a638:	9503      	str	r5, [sp, #12]
 800a63a:	4604      	mov	r4, r0
 800a63c:	4798      	blx	r3
 800a63e:	463a      	mov	r2, r7
 800a640:	4631      	mov	r1, r6
 800a642:	4603      	mov	r3, r0
 800a644:	4620      	mov	r0, r4
 800a646:	f7ff ff8b 	bl	800a560 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a64a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a64c:	9307      	str	r3, [sp, #28]
 800a64e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a652:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a656:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a65a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a65e:	4b0f      	ldr	r3, [pc, #60]	@ (800a69c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800a660:	9004      	str	r0, [sp, #16]
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a668:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a66c:	f7ff fca4 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a670:	6803      	ldr	r3, [r0, #0]
 800a672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a674:	4798      	blx	r3
 800a676:	23ff      	movs	r3, #255	@ 0xff
 800a678:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a67c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a680:	6860      	ldr	r0, [r4, #4]
 800a682:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a686:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a68a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a68e:	6803      	ldr	r3, [r0, #0]
 800a690:	a903      	add	r1, sp, #12
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	4798      	blx	r3
 800a696:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a698:	b00d      	add	sp, #52	@ 0x34
 800a69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a69c:	2001543e 	.word	0x2001543e

0800a6a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800a6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a4:	b08c      	sub	sp, #48	@ 0x30
 800a6a6:	461e      	mov	r6, r3
 800a6a8:	466d      	mov	r5, sp
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e885 0006 	stmia.w	r5, {r1, r2}
 800a6b0:	9306      	str	r3, [sp, #24]
 800a6b2:	6803      	ldr	r3, [r0, #0]
 800a6b4:	f8bd 7000 	ldrh.w	r7, [sp]
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ba:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800a6be:	2501      	movs	r5, #1
 800a6c0:	9503      	str	r5, [sp, #12]
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	4798      	blx	r3
 800a6c6:	4642      	mov	r2, r8
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f7ff ff47 	bl	800a560 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a6d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a6d6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a6da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a6de:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a6e2:	4b11      	ldr	r3, [pc, #68]	@ (800a728 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800a6e4:	9004      	str	r0, [sp, #16]
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a6ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6ee:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a6f2:	9607      	str	r6, [sp, #28]
 800a6f4:	f7ff fc60 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800a6f8:	6803      	ldr	r3, [r0, #0]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fc:	4798      	blx	r3
 800a6fe:	23ff      	movs	r3, #255	@ 0xff
 800a700:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a704:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a708:	6860      	ldr	r0, [r4, #4]
 800a70a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a70e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a712:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a716:	6803      	ldr	r3, [r0, #0]
 800a718:	a903      	add	r1, sp, #12
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	4798      	blx	r3
 800a71e:	4630      	mov	r0, r6
 800a720:	b00c      	add	sp, #48	@ 0x30
 800a722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a726:	bf00      	nop
 800a728:	2001543e 	.word	0x2001543e

0800a72c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a72e:	b085      	sub	sp, #20
 800a730:	ac02      	add	r4, sp, #8
 800a732:	e884 0006 	stmia.w	r4, {r1, r2}
 800a736:	4605      	mov	r5, r0
 800a738:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800a73c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800a740:	f7ff fde6 	bl	800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a744:	463a      	mov	r2, r7
 800a746:	4603      	mov	r3, r0
 800a748:	4631      	mov	r1, r6
 800a74a:	4628      	mov	r0, r5
 800a74c:	f7ff ff08 	bl	800a560 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a750:	4a05      	ldr	r2, [pc, #20]	@ (800a768 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	8812      	ldrh	r2, [r2, #0]
 800a756:	9200      	str	r2, [sp, #0]
 800a758:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800a75a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800a75e:	4603      	mov	r3, r0
 800a760:	4628      	mov	r0, r5
 800a762:	47b0      	blx	r6
 800a764:	b005      	add	sp, #20
 800a766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a768:	2001543e 	.word	0x2001543e

0800a76c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800a772:	4604      	mov	r4, r0
 800a774:	b19b      	cbz	r3, 800a79e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800a776:	2002      	movs	r0, #2
 800a778:	f7f7 fa66 	bl	8001c48 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800a77c:	2300      	movs	r3, #0
 800a77e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800a782:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	4620      	mov	r0, r4
 800a78a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800a78e:	f7ff fdbf 	bl	800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a792:	462b      	mov	r3, r5
 800a794:	4601      	mov	r1, r0
 800a796:	4620      	mov	r0, r4
 800a798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a79c:	4718      	bx	r3
 800a79e:	bd70      	pop	{r4, r5, r6, pc}

0800a7a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a7a6:	428b      	cmp	r3, r1
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	d006      	beq.n	800a7bc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800a7ae:	6803      	ldr	r3, [r0, #0]
 800a7b0:	b929      	cbnz	r1, 800a7be <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800a7b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a7b6:	4798      	blx	r3
 800a7b8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
 800a7be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a7c2:	e7f8      	b.n	800a7b6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800a7c4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a7fc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	b95b      	cbnz	r3, 800a7e6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a7ce:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d007      	beq.n	800a7e6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a7d6:	6840      	ldr	r0, [r0, #4]
 800a7d8:	f000 f912 	bl	800aa00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800a7dc:	b118      	cbz	r0, 800a7e6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a7de:	6862      	ldr	r2, [r4, #4]
 800a7e0:	7a53      	ldrb	r3, [r2, #9]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d0fc      	beq.n	800a7e0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800a7e6:	f7f7 fb7b 	bl	8001ee0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	f7ff ffd7 	bl	800a7a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7ff fd8c 	bl	800a310 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a7f8:	bd10      	pop	{r4, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20015442 	.word	0x20015442

0800a800 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800a800:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800a804:	1a13      	subs	r3, r2, r0
 800a806:	4258      	negs	r0, r3
 800a808:	4158      	adcs	r0, r3
 800a80a:	4770      	bx	lr

0800a80c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800a80c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	2b00      	cmp	r3, #0
 800a814:	bfdc      	itt	le
 800a816:	6882      	ldrle	r2, [r0, #8]
 800a818:	189b      	addle	r3, r3, r2
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	bfcc      	ite	gt
 800a81e:	2000      	movgt	r0, #0
 800a820:	2001      	movle	r0, #1
 800a822:	4770      	bx	lr

0800a824 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800a824:	6902      	ldr	r2, [r0, #16]
 800a826:	6843      	ldr	r3, [r0, #4]
 800a828:	2024      	movs	r0, #36	@ 0x24
 800a82a:	fb00 3002 	mla	r0, r0, r2, r3
 800a82e:	4770      	bx	lr

0800a830 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800a830:	6803      	ldr	r3, [r0, #0]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	4718      	bx	r3

0800a836 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800a836:	b570      	push	{r4, r5, r6, lr}
 800a838:	2301      	movs	r3, #1
 800a83a:	7203      	strb	r3, [r0, #8]
 800a83c:	4604      	mov	r4, r0
 800a83e:	6840      	ldr	r0, [r0, #4]
 800a840:	6803      	ldr	r3, [r0, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	4798      	blx	r3
 800a846:	6803      	ldr	r3, [r0, #0]
 800a848:	2b40      	cmp	r3, #64	@ 0x40
 800a84a:	4605      	mov	r5, r0
 800a84c:	d00c      	beq.n	800a868 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a84e:	d810      	bhi.n	800a872 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800a850:	2b04      	cmp	r3, #4
 800a852:	d01d      	beq.n	800a890 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800a854:	d804      	bhi.n	800a860 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800a856:	2b01      	cmp	r3, #1
 800a858:	d006      	beq.n	800a868 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d02c      	beq.n	800a8b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800a85e:	bd70      	pop	{r4, r5, r6, pc}
 800a860:	2b08      	cmp	r3, #8
 800a862:	d01d      	beq.n	800a8a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800a864:	2b20      	cmp	r3, #32
 800a866:	d1fa      	bne.n	800a85e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	4620      	mov	r0, r4
 800a86c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a86e:	4798      	blx	r3
 800a870:	e013      	b.n	800a89a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800a872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a876:	d0f7      	beq.n	800a868 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a878:	d804      	bhi.n	800a884 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800a87a:	2b80      	cmp	r3, #128	@ 0x80
 800a87c:	d0f4      	beq.n	800a868 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a87e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a882:	e7f0      	b.n	800a866 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800a884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a888:	d0ee      	beq.n	800a868 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a88a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a88e:	e7e5      	b.n	800a85c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	7f01      	ldrb	r1, [r0, #28]
 800a894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a896:	4620      	mov	r0, r4
 800a898:	4798      	blx	r3
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a89e:	e006      	b.n	800a8ae <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	7f01      	ldrb	r1, [r0, #28]
 800a8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	4798      	blx	r3
 800a8aa:	6823      	ldr	r3, [r4, #0]
 800a8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8b6:	4718      	bx	r3
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8be:	4798      	blx	r3
 800a8c0:	e7f3      	b.n	800a8aa <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800a8c2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800a8c2:	4770      	bx	lr

0800a8c4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800a8c4:	4770      	bx	lr

0800a8c6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800a8c6:	4770      	bx	lr

0800a8c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800a8c8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800a8cc:	1ad2      	subs	r2, r2, r3
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	bfdc      	itt	le
 800a8d4:	6884      	ldrle	r4, [r0, #8]
 800a8d6:	1912      	addle	r2, r2, r4
 800a8d8:	2a01      	cmp	r2, #1
 800a8da:	dd16      	ble.n	800a90a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800a8dc:	6842      	ldr	r2, [r0, #4]
 800a8de:	2424      	movs	r4, #36	@ 0x24
 800a8e0:	fb04 2303 	mla	r3, r4, r3, r2
 800a8e4:	f101 0220 	add.w	r2, r1, #32
 800a8e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a8ec:	f843 4b04 	str.w	r4, [r3], #4
 800a8f0:	4291      	cmp	r1, r2
 800a8f2:	d1f9      	bne.n	800a8e8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800a8f4:	780a      	ldrb	r2, [r1, #0]
 800a8f6:	701a      	strb	r2, [r3, #0]
 800a8f8:	68c3      	ldr	r3, [r0, #12]
 800a8fa:	6882      	ldr	r2, [r0, #8]
 800a8fc:	f3bf 8f5b 	dmb	ish
 800a900:	3301      	adds	r3, #1
 800a902:	429a      	cmp	r2, r3
 800a904:	bfd8      	it	le
 800a906:	1a9b      	suble	r3, r3, r2
 800a908:	60c3      	str	r3, [r0, #12]
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800a90c:	6903      	ldr	r3, [r0, #16]
 800a90e:	6882      	ldr	r2, [r0, #8]
 800a910:	f3bf 8f5b 	dmb	ish
 800a914:	3301      	adds	r3, #1
 800a916:	429a      	cmp	r2, r3
 800a918:	bfd8      	it	le
 800a91a:	1a9b      	suble	r3, r3, r2
 800a91c:	6103      	str	r3, [r0, #16]
 800a91e:	4770      	bx	lr

0800a920 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	4604      	mov	r4, r0
 800a924:	460e      	mov	r6, r1
 800a926:	6860      	ldr	r0, [r4, #4]
 800a928:	6803      	ldr	r3, [r0, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	4798      	blx	r3
 800a92e:	2800      	cmp	r0, #0
 800a930:	d1f9      	bne.n	800a926 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800a932:	4d0d      	ldr	r5, [pc, #52]	@ (800a968 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800a934:	6828      	ldr	r0, [r5, #0]
 800a936:	6803      	ldr	r3, [r0, #0]
 800a938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a93a:	4798      	blx	r3
 800a93c:	f7f7 fade 	bl	8001efc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800a940:	6828      	ldr	r0, [r5, #0]
 800a942:	2101      	movs	r1, #1
 800a944:	f7ff ff2c 	bl	800a7a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a948:	6860      	ldr	r0, [r4, #4]
 800a94a:	6803      	ldr	r3, [r0, #0]
 800a94c:	4631      	mov	r1, r6
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	4798      	blx	r3
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	4620      	mov	r0, r4
 800a956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a958:	4798      	blx	r3
 800a95a:	6828      	ldr	r0, [r5, #0]
 800a95c:	6803      	ldr	r3, [r0, #0]
 800a95e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a962:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a964:	4718      	bx	r3
 800a966:	bf00      	nop
 800a968:	20015444 	.word	0x20015444

0800a96c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800a96c:	b508      	push	{r3, lr}
 800a96e:	f7f7 fab7 	bl	8001ee0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a976:	f7f7 babb 	b.w	8001ef0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800a97a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800a97a:	b510      	push	{r4, lr}
 800a97c:	2114      	movs	r1, #20
 800a97e:	4604      	mov	r4, r0
 800a980:	f008 fab8 	bl	8012ef4 <_ZdlPvj>
 800a984:	4620      	mov	r0, r4
 800a986:	bd10      	pop	{r4, pc}

0800a988 <_ZN8touchgfx13DMA_Interface5startEv>:
 800a988:	b510      	push	{r4, lr}
 800a98a:	4604      	mov	r4, r0
 800a98c:	6840      	ldr	r0, [r0, #4]
 800a98e:	6803      	ldr	r3, [r0, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4798      	blx	r3
 800a994:	b948      	cbnz	r0, 800a9aa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a996:	7a63      	ldrb	r3, [r4, #9]
 800a998:	b13b      	cbz	r3, 800a9aa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a99a:	7a23      	ldrb	r3, [r4, #8]
 800a99c:	b92b      	cbnz	r3, 800a9aa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a8:	4718      	bx	r3
 800a9aa:	bd10      	pop	{r4, pc}

0800a9ac <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	6840      	ldr	r0, [r0, #4]
 800a9b2:	6803      	ldr	r3, [r0, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4798      	blx	r3
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	b930      	cbnz	r0, 800a9ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800a9bc:	7a23      	ldrb	r3, [r4, #8]
 800a9be:	b123      	cbz	r3, 800a9ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800a9c0:	6860      	ldr	r0, [r4, #4]
 800a9c2:	6803      	ldr	r3, [r0, #0]
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	4798      	blx	r3
 800a9c8:	7225      	strb	r5, [r4, #8]
 800a9ca:	6860      	ldr	r0, [r4, #4]
 800a9cc:	6803      	ldr	r3, [r0, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4798      	blx	r3
 800a9d2:	b928      	cbnz	r0, 800a9e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9de:	4718      	bx	r3
 800a9e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9e4:	f7f7 ba92 	b.w	8001f0c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800a9e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	4c04      	ldr	r4, [pc, #16]	@ (800a9fc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800a9ec:	6082      	str	r2, [r0, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	e9c0 4100 	strd	r4, r1, [r0]
 800a9f4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	bf00      	nop
 800a9fc:	08015b64 	.word	0x08015b64

0800aa00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800aa00:	6840      	ldr	r0, [r0, #4]
 800aa02:	6803      	ldr	r3, [r0, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4718      	bx	r3

0800aa08 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800aa08:	2000      	movs	r0, #0
 800aa0a:	4770      	bx	lr

0800aa0c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800aa0c:	4b07      	ldr	r3, [pc, #28]	@ (800aa2c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800aa0e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	4293      	cmp	r3, r2
 800aa14:	bf81      	itttt	hi
 800aa16:	4b06      	ldrhi	r3, [pc, #24]	@ (800aa30 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800aa18:	681b      	ldrhi	r3, [r3, #0]
 800aa1a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800aa1e:	7858      	ldrbhi	r0, [r3, #1]
 800aa20:	bf8c      	ite	hi
 800aa22:	f000 0003 	andhi.w	r0, r0, #3
 800aa26:	2000      	movls	r0, #0
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	20015498 	.word	0x20015498
 800aa30:	20015494 	.word	0x20015494

0800aa34 <_ZN8touchgfx8TextAreaD1Ev>:
 800aa34:	4770      	bx	lr
	...

0800aa38 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800aa38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3c:	4b10      	ldr	r3, [pc, #64]	@ (800aa80 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800aa3e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	428b      	cmp	r3, r1
 800aa44:	4604      	mov	r4, r0
 800aa46:	d918      	bls.n	800aa7a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800aa48:	6803      	ldr	r3, [r0, #0]
 800aa4a:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800aa4e:	6818      	ldr	r0, [r3, #0]
 800aa50:	f7f9 f93a 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	4606      	mov	r6, r0
 800aa58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4798      	blx	r3
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	4607      	mov	r7, r0
 800aa62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa66:	4620      	mov	r0, r4
 800aa68:	4798      	blx	r3
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	4631      	mov	r1, r6
 800aa70:	4620      	mov	r0, r4
 800aa72:	46ac      	mov	ip, r5
 800aa74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa78:	4760      	bx	ip
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa80:	20015498 	.word	0x20015498
 800aa84:	200154a0 	.word	0x200154a0

0800aa88 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800aa88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa8c:	4b17      	ldr	r3, [pc, #92]	@ (800aaec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800aa8e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	428b      	cmp	r3, r1
 800aa94:	4604      	mov	r4, r0
 800aa96:	d926      	bls.n	800aae6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800aa98:	4b15      	ldr	r3, [pc, #84]	@ (800aaf0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800aaa0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800aaa4:	4b13      	ldr	r3, [pc, #76]	@ (800aaf4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800aaa6:	7855      	ldrb	r5, [r2, #1]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800aaae:	6833      	ldr	r3, [r6, #0]
 800aab0:	69df      	ldr	r7, [r3, #28]
 800aab2:	4b11      	ldr	r3, [pc, #68]	@ (800aaf8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	f7f9 f907 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	4680      	mov	r8, r0
 800aabe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aac0:	4620      	mov	r0, r4
 800aac2:	4798      	blx	r3
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	4681      	mov	r9, r0
 800aac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aacc:	4620      	mov	r0, r4
 800aace:	4798      	blx	r3
 800aad0:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800aad4:	9000      	str	r0, [sp, #0]
 800aad6:	464b      	mov	r3, r9
 800aad8:	4642      	mov	r2, r8
 800aada:	4629      	mov	r1, r5
 800aadc:	4630      	mov	r0, r6
 800aade:	47b8      	blx	r7
 800aae0:	b003      	add	sp, #12
 800aae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae6:	2000      	movs	r0, #0
 800aae8:	e7fa      	b.n	800aae0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800aaea:	bf00      	nop
 800aaec:	20015498 	.word	0x20015498
 800aaf0:	20015494 	.word	0x20015494
 800aaf4:	2001549c 	.word	0x2001549c
 800aaf8:	200154a0 	.word	0x200154a0

0800aafc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800aafc:	b40e      	push	{r1, r2, r3}
 800aafe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab02:	4b2f      	ldr	r3, [pc, #188]	@ (800abc0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800ab04:	881a      	ldrh	r2, [r3, #0]
 800ab06:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	b09d      	sub	sp, #116	@ 0x74
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	d954      	bls.n	800abba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800ab10:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800abc4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800ab14:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800abc8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800ab18:	aa26      	add	r2, sp, #152	@ 0x98
 800ab1a:	9202      	str	r2, [sp, #8]
 800ab1c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab20:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800ab24:	f8d8 3000 	ldr.w	r3, [r8]
 800ab28:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	4628      	mov	r0, r5
 800ab30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab32:	4798      	blx	r3
 800ab34:	b207      	sxth	r7, r0
 800ab36:	4606      	mov	r6, r0
 800ab38:	a803      	add	r0, sp, #12
 800ab3a:	f003 ffa8 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	4628      	mov	r0, r5
 800ab42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab44:	4798      	blx	r3
 800ab46:	682b      	ldr	r3, [r5, #0]
 800ab48:	4682      	mov	sl, r0
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	4798      	blx	r3
 800ab50:	4653      	mov	r3, sl
 800ab52:	9000      	str	r0, [sp, #0]
 800ab54:	9a02      	ldr	r2, [sp, #8]
 800ab56:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800ab58:	a803      	add	r0, sp, #12
 800ab5a:	f003 fff3 	bl	800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ab5e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800ab60:	f8d9 3000 	ldr.w	r3, [r9]
 800ab64:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800ab68:	8925      	ldrh	r5, [r4, #8]
 800ab6a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800ab6e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800ab72:	eba5 050c 	sub.w	r5, r5, ip
 800ab76:	784a      	ldrb	r2, [r1, #1]
 800ab78:	f8d8 3000 	ldr.w	r3, [r8]
 800ab7c:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800ab80:	b22d      	sxth	r5, r5
 800ab82:	9500      	str	r5, [sp, #0]
 800ab84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ab88:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800ab8c:	a803      	add	r0, sp, #12
 800ab8e:	f001 fdc1 	bl	800c714 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800ab92:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800ab96:	18b9      	adds	r1, r7, r2
 800ab98:	2900      	cmp	r1, #0
 800ab9a:	b203      	sxth	r3, r0
 800ab9c:	dd0b      	ble.n	800abb6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	fb13 f302 	smulbb	r3, r3, r2
 800aba4:	fb16 3300 	smlabb	r3, r6, r0, r3
 800aba8:	b21f      	sxth	r7, r3
 800abaa:	4638      	mov	r0, r7
 800abac:	b01d      	add	sp, #116	@ 0x74
 800abae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb2:	b003      	add	sp, #12
 800abb4:	4770      	bx	lr
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	dcf7      	bgt.n	800abaa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800abba:	2700      	movs	r7, #0
 800abbc:	e7f5      	b.n	800abaa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800abbe:	bf00      	nop
 800abc0:	20015498 	.word	0x20015498
 800abc4:	20015494 	.word	0x20015494
 800abc8:	2001549c 	.word	0x2001549c

0800abcc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	4bbc      	ldr	r3, [pc, #752]	@ (800aec4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800abd2:	460c      	mov	r4, r1
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800abd8:	428b      	cmp	r3, r1
 800abda:	b0a9      	sub	sp, #164	@ 0xa4
 800abdc:	4680      	mov	r8, r0
 800abde:	d809      	bhi.n	800abf4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800abe0:	2300      	movs	r3, #0
 800abe2:	f04f 32ff 	mov.w	r2, #4294967295
 800abe6:	e9c0 3200 	strd	r3, r2, [r0]
 800abea:	6083      	str	r3, [r0, #8]
 800abec:	4640      	mov	r0, r8
 800abee:	b029      	add	sp, #164	@ 0xa4
 800abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf4:	4eb4      	ldr	r6, [pc, #720]	@ (800aec8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800abf6:	6833      	ldr	r3, [r6, #0]
 800abf8:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800abfc:	4bb3      	ldr	r3, [pc, #716]	@ (800aecc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ac04:	4bb2      	ldr	r3, [pc, #712]	@ (800aed0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	f7f9 f85e 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	4681      	mov	r9, r0
 800ac10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac12:	4628      	mov	r0, r5
 800ac14:	4798      	blx	r3
 800ac16:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800ac18:	b203      	sxth	r3, r0
 800ac1a:	4407      	add	r7, r0
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	b2bb      	uxth	r3, r7
 800ac20:	9303      	str	r3, [sp, #12]
 800ac22:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800ac26:	4682      	mov	sl, r0
 800ac28:	a80f      	add	r0, sp, #60	@ 0x3c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f040 80a6 	bne.w	800ad7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800ac30:	f003 ff2d 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	4628      	mov	r0, r5
 800ac38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac3a:	4798      	blx	r3
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	4606      	mov	r6, r0
 800ac40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac42:	4628      	mov	r0, r5
 800ac44:	4798      	blx	r3
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	4607      	mov	r7, r0
 800ac4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4798      	blx	r3
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	4683      	mov	fp, r0
 800ac54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac58:	4620      	mov	r0, r4
 800ac5a:	4798      	blx	r3
 800ac5c:	463b      	mov	r3, r7
 800ac5e:	e9cd b000 	strd	fp, r0, [sp]
 800ac62:	4649      	mov	r1, r9
 800ac64:	4632      	mov	r2, r6
 800ac66:	a80f      	add	r0, sp, #60	@ 0x3c
 800ac68:	f003 ff81 	bl	800eb6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800ac6c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800ac70:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800aec8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800ac74:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800ac78:	f04f 0600 	mov.w	r6, #0
 800ac7c:	bf0c      	ite	eq
 800ac7e:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800ac82:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800ac86:	4637      	mov	r7, r6
 800ac88:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800ac8a:	f8db 3000 	ldr.w	r3, [fp]
 800ac8e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800ac92:	4629      	mov	r1, r5
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ac9a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ac9e:	a80f      	add	r0, sp, #60	@ 0x3c
 800aca0:	f001 fa3f 	bl	800c122 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	4286      	cmp	r6, r0
 800aca8:	bfb8      	it	lt
 800acaa:	4606      	movlt	r6, r0
 800acac:	3701      	adds	r7, #1
 800acae:	eba9 0903 	sub.w	r9, r9, r3
 800acb2:	a80f      	add	r0, sp, #60	@ 0x3c
 800acb4:	b236      	sxth	r6, r6
 800acb6:	b2bf      	uxth	r7, r7
 800acb8:	fa0f f989 	sxth.w	r9, r9
 800acbc:	f003 ff0e 	bl	800eadc <_ZN8touchgfx12TextProvider11endOfStringEv>
 800acc0:	b918      	cbnz	r0, 800acca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800acc2:	7a2b      	ldrb	r3, [r5, #8]
 800acc4:	444b      	add	r3, r9
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dcde      	bgt.n	800ac88 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	9a04      	ldr	r2, [sp, #16]
 800acce:	f895 9009 	ldrb.w	r9, [r5, #9]
 800acd2:	fb13 f707 	smulbb	r7, r3, r7
 800acd6:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800acd8:	1aff      	subs	r7, r7, r3
 800acda:	b2bf      	uxth	r7, r7
 800acdc:	b23b      	sxth	r3, r7
 800acde:	429a      	cmp	r2, r3
 800ace0:	bfa8      	it	ge
 800ace2:	4657      	movge	r7, sl
 800ace4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800ace8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	bf08      	it	eq
 800acf0:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800acf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acf6:	bf18      	it	ne
 800acf8:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800acfc:	4620      	mov	r0, r4
 800acfe:	4798      	blx	r3
 800ad00:	444f      	add	r7, r9
 800ad02:	fa1f f987 	uxth.w	r9, r7
 800ad06:	2801      	cmp	r0, #1
 800ad08:	fa0f f789 	sxth.w	r7, r9
 800ad0c:	b2b3      	uxth	r3, r6
 800ad0e:	f000 80e1 	beq.w	800aed4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800ad12:	2802      	cmp	r0, #2
 800ad14:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800ad18:	f000 80e2 	beq.w	800aee0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800ad1c:	7aea      	ldrb	r2, [r5, #11]
 800ad1e:	7b2d      	ldrb	r5, [r5, #12]
 800ad20:	b236      	sxth	r6, r6
 800ad22:	1ab6      	subs	r6, r6, r2
 800ad24:	442a      	add	r2, r5
 800ad26:	4413      	add	r3, r2
 800ad28:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800ad2c:	fa1f fa86 	uxth.w	sl, r6
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	2a02      	cmp	r2, #2
 800ad34:	fa0f fb8a 	sxth.w	fp, sl
 800ad38:	b21e      	sxth	r6, r3
 800ad3a:	f000 80d5 	beq.w	800aee8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800ad3e:	2a03      	cmp	r2, #3
 800ad40:	f000 80dd 	beq.w	800aefe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800ad44:	2a01      	cmp	r2, #1
 800ad46:	f040 80e5 	bne.w	800af14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800ad4a:	8925      	ldrh	r5, [r4, #8]
 800ad4c:	4633      	mov	r3, r6
 800ad4e:	eba5 0909 	sub.w	r9, r5, r9
 800ad52:	463e      	mov	r6, r7
 800ad54:	465d      	mov	r5, fp
 800ad56:	461f      	mov	r7, r3
 800ad58:	fa0f fb89 	sxth.w	fp, r9
 800ad5c:	4b5c      	ldr	r3, [pc, #368]	@ (800aed0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800ad5e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	f7f8 ffb1 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800ad66:	f8a8 b000 	strh.w	fp, [r8]
 800ad6a:	f8a8 5002 	strh.w	r5, [r8, #2]
 800ad6e:	f8a8 6004 	strh.w	r6, [r8, #4]
 800ad72:	f8a8 7006 	strh.w	r7, [r8, #6]
 800ad76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad7a:	e737      	b.n	800abec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800ad7c:	f003 fe87 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	4628      	mov	r0, r5
 800ad84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad86:	4798      	blx	r3
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	4607      	mov	r7, r0
 800ad8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad8e:	4628      	mov	r0, r5
 800ad90:	4798      	blx	r3
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	4683      	mov	fp, r0
 800ad96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad98:	4620      	mov	r0, r4
 800ad9a:	4798      	blx	r3
 800ad9c:	6822      	ldr	r2, [r4, #0]
 800ad9e:	9005      	str	r0, [sp, #20]
 800ada0:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ada4:	4620      	mov	r0, r4
 800ada6:	4790      	blx	r2
 800ada8:	9b05      	ldr	r3, [sp, #20]
 800adaa:	9001      	str	r0, [sp, #4]
 800adac:	463a      	mov	r2, r7
 800adae:	4649      	mov	r1, r9
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	a80f      	add	r0, sp, #60	@ 0x3c
 800adb4:	465b      	mov	r3, fp
 800adb6:	f003 feda 	bl	800eb6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800adba:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800adbe:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800adc2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800adc4:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800adc8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800adcc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800add0:	bf0a      	itet	eq
 800add2:	464a      	moveq	r2, r9
 800add4:	461a      	movne	r2, r3
 800add6:	4699      	moveq	r9, r3
 800add8:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800addc:	1ad2      	subs	r2, r2, r3
 800adde:	6833      	ldr	r3, [r6, #0]
 800ade0:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800ade4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ade8:	af0f      	add	r7, sp, #60	@ 0x3c
 800adea:	7859      	ldrb	r1, [r3, #1]
 800adec:	9707      	str	r7, [sp, #28]
 800adee:	2300      	movs	r3, #0
 800adf0:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800adf4:	f8ad 3018 	strh.w	r3, [sp, #24]
 800adf8:	f88d 1020 	strb.w	r1, [sp, #32]
 800adfc:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800ae00:	9509      	str	r5, [sp, #36]	@ 0x24
 800ae02:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800ae06:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800ae0a:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800ae0e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800ae12:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800ae16:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800ae1a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800ae1e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800ae22:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800ae26:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ae2a:	b350      	cbz	r0, 800ae82 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	4628      	mov	r0, r5
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	4798      	blx	r3
 800ae34:	4607      	mov	r7, r0
 800ae36:	b320      	cbz	r0, 800ae82 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800ae38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae3a:	6803      	ldr	r3, [r0, #0]
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	4798      	blx	r3
 800ae42:	4606      	mov	r6, r0
 800ae44:	b1e8      	cbz	r0, 800ae82 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800ae46:	7b43      	ldrb	r3, [r0, #13]
 800ae48:	7a82      	ldrb	r2, [r0, #10]
 800ae4a:	005b      	lsls	r3, r3, #1
 800ae4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae50:	4313      	orrs	r3, r2
 800ae52:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800ae56:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800ae5a:	2b06      	cmp	r3, #6
 800ae5c:	d111      	bne.n	800ae82 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800ae5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae60:	6803      	ldr	r3, [r0, #0]
 800ae62:	4632      	mov	r2, r6
 800ae64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae66:	4639      	mov	r1, r7
 800ae68:	4798      	blx	r3
 800ae6a:	7b73      	ldrb	r3, [r6, #13]
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ae72:	7ab3      	ldrb	r3, [r6, #10]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	4418      	add	r0, r3
 800ae78:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800ae7c:	4418      	add	r0, r3
 800ae7e:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800ae82:	2600      	movs	r6, #0
 800ae84:	4637      	mov	r7, r6
 800ae86:	a806      	add	r0, sp, #24
 800ae88:	f001 fb40 	bl	800c50c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800ae8c:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	4286      	cmp	r6, r0
 800ae94:	eba9 0903 	sub.w	r9, r9, r3
 800ae98:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800ae9c:	bfb8      	it	lt
 800ae9e:	4606      	movlt	r6, r0
 800aea0:	3701      	adds	r7, #1
 800aea2:	b236      	sxth	r6, r6
 800aea4:	b2bf      	uxth	r7, r7
 800aea6:	fa0f f989 	sxth.w	r9, r9
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f43f af0d 	beq.w	800acca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800aeb0:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f47f af08 	bne.w	800acca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800aeba:	7a2b      	ldrb	r3, [r5, #8]
 800aebc:	444b      	add	r3, r9
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	dce1      	bgt.n	800ae86 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800aec2:	e702      	b.n	800acca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800aec4:	20015498 	.word	0x20015498
 800aec8:	20015494 	.word	0x20015494
 800aecc:	2001549c 	.word	0x2001549c
 800aed0:	200154a0 	.word	0x200154a0
 800aed4:	ebaa 0606 	sub.w	r6, sl, r6
 800aed8:	2002      	movs	r0, #2
 800aeda:	fb96 f6f0 	sdiv	r6, r6, r0
 800aede:	e71d      	b.n	800ad1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800aee0:	441e      	add	r6, r3
 800aee2:	ebaa 0606 	sub.w	r6, sl, r6
 800aee6:	e719      	b.n	800ad1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800aee8:	8925      	ldrh	r5, [r4, #8]
 800aeea:	1aed      	subs	r5, r5, r3
 800aeec:	eba5 050a 	sub.w	r5, r5, sl
 800aef0:	fa0f fb85 	sxth.w	fp, r5
 800aef4:	8965      	ldrh	r5, [r4, #10]
 800aef6:	eba5 0509 	sub.w	r5, r5, r9
 800aefa:	b22d      	sxth	r5, r5
 800aefc:	e72e      	b.n	800ad5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800aefe:	8965      	ldrh	r5, [r4, #10]
 800af00:	1aed      	subs	r5, r5, r3
 800af02:	eba5 050a 	sub.w	r5, r5, sl
 800af06:	4633      	mov	r3, r6
 800af08:	b22d      	sxth	r5, r5
 800af0a:	463e      	mov	r6, r7
 800af0c:	f04f 0b00 	mov.w	fp, #0
 800af10:	461f      	mov	r7, r3
 800af12:	e723      	b.n	800ad5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800af14:	2500      	movs	r5, #0
 800af16:	e721      	b.n	800ad5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800af18 <_ZN8touchgfx8TextAreaD0Ev>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	2148      	movs	r1, #72	@ 0x48
 800af1c:	4604      	mov	r4, r0
 800af1e:	f007 ffe9 	bl	8012ef4 <_ZdlPvj>
 800af22:	4620      	mov	r0, r4
 800af24:	bd10      	pop	{r4, pc}
	...

0800af28 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800af28:	b513      	push	{r0, r1, r4, lr}
 800af2a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800af2e:	4604      	mov	r4, r0
 800af30:	b1fb      	cbz	r3, 800af72 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800af32:	4b16      	ldr	r3, [pc, #88]	@ (800af8c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800af34:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	428b      	cmp	r3, r1
 800af3a:	d91a      	bls.n	800af72 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800af3c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800af40:	2b00      	cmp	r3, #0
 800af42:	dd16      	ble.n	800af72 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800af44:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	dd12      	ble.n	800af72 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800af4c:	4b10      	ldr	r3, [pc, #64]	@ (800af90 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	f7f8 feba 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800af54:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800af58:	6822      	ldr	r2, [r4, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	db06      	blt.n	800af6c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800af5e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	db02      	blt.n	800af6c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800af66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800af68:	4298      	cmp	r0, r3
 800af6a:	d004      	beq.n	800af76 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800af6c:	6953      	ldr	r3, [r2, #20]
 800af6e:	4620      	mov	r0, r4
 800af70:	4798      	blx	r3
 800af72:	b002      	add	sp, #8
 800af74:	bd10      	pop	{r4, pc}
 800af76:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800af7a:	c903      	ldmia	r1, {r0, r1}
 800af7c:	466b      	mov	r3, sp
 800af7e:	e883 0003 	stmia.w	r3, {r0, r1}
 800af82:	6912      	ldr	r2, [r2, #16]
 800af84:	4619      	mov	r1, r3
 800af86:	4620      	mov	r0, r4
 800af88:	4790      	blx	r2
 800af8a:	e7f2      	b.n	800af72 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800af8c:	20015498 	.word	0x20015498
 800af90:	200154a0 	.word	0x200154a0

0800af94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800af94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af98:	4b44      	ldr	r3, [pc, #272]	@ (800b0ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800af9a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	4293      	cmp	r3, r2
 800afa0:	b08e      	sub	sp, #56	@ 0x38
 800afa2:	4604      	mov	r4, r0
 800afa4:	d97e      	bls.n	800b0a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800afa6:	6808      	ldr	r0, [r1, #0]
 800afa8:	4d41      	ldr	r5, [pc, #260]	@ (800b0b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800afaa:	6849      	ldr	r1, [r1, #4]
 800afac:	ab05      	add	r3, sp, #20
 800afae:	c303      	stmia	r3!, {r0, r1}
 800afb0:	4611      	mov	r1, r2
 800afb2:	6828      	ldr	r0, [r5, #0]
 800afb4:	f7f8 fe88 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800afb8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	db11      	blt.n	800afe4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800afc0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	db0d      	blt.n	800afe4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800afc8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800afca:	4298      	cmp	r0, r3
 800afcc:	d10a      	bne.n	800afe4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800afce:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800afd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800afd6:	ab09      	add	r3, sp, #36	@ 0x24
 800afd8:	e883 0003 	stmia.w	r3, {r0, r1}
 800afdc:	4619      	mov	r1, r3
 800afde:	a805      	add	r0, sp, #20
 800afe0:	f7fe fd14 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800afe4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	dd5b      	ble.n	800b0a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800afec:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dd57      	ble.n	800b0a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800aff4:	4f2f      	ldr	r7, [pc, #188]	@ (800b0b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800aff6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800affe:	4b2e      	ldr	r3, [pc, #184]	@ (800b0b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b006:	2e00      	cmp	r6, #0
 800b008:	d04c      	beq.n	800b0a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800b010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b012:	4620      	mov	r0, r4
 800b014:	4798      	blx	r3
 800b016:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800b01e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800b022:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800b026:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b028:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800b02c:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800b030:	785b      	ldrb	r3, [r3, #1]
 800b032:	9609      	str	r6, [sp, #36]	@ 0x24
 800b034:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b03c:	4b1f      	ldr	r3, [pc, #124]	@ (800b0bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800b03e:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800b048:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b04a:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800b04e:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800b052:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800b056:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800b05a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b05e:	b10a      	cbz	r2, 800b064 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800b060:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800b062:	b906      	cbnz	r6, 800b066 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800b064:	689e      	ldr	r6, [r3, #8]
 800b066:	af07      	add	r7, sp, #28
 800b068:	4621      	mov	r1, r4
 800b06a:	4638      	mov	r0, r7
 800b06c:	f003 f91e 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b070:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800b072:	6828      	ldr	r0, [r5, #0]
 800b074:	f7f8 fe28 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	4605      	mov	r5, r0
 800b07c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b07e:	4620      	mov	r0, r4
 800b080:	4798      	blx	r3
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	4680      	mov	r8, r0
 800b086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b08a:	4620      	mov	r0, r4
 800b08c:	4798      	blx	r3
 800b08e:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800b092:	ab09      	add	r3, sp, #36	@ 0x24
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	9501      	str	r5, [sp, #4]
 800b098:	ab05      	add	r3, sp, #20
 800b09a:	e897 0006 	ldmia.w	r7, {r1, r2}
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7f8 fdc4 	bl	8003c2c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800b0a4:	b00e      	add	sp, #56	@ 0x38
 800b0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20015498 	.word	0x20015498
 800b0b0:	200154a0 	.word	0x200154a0
 800b0b4:	20015494 	.word	0x20015494
 800b0b8:	2001549c 	.word	0x2001549c
 800b0bc:	20015444 	.word	0x20015444

0800b0c0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800b0c0:	b570      	push	{r4, r5, r6, lr}
 800b0c2:	6803      	ldr	r3, [r0, #0]
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c8:	4615      	mov	r5, r2
 800b0ca:	4798      	blx	r3
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0d8:	4718      	bx	r3
	...

0800b0dc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4b0e      	ldr	r3, [pc, #56]	@ (800b118 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800b0e0:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	d214      	bcs.n	800b114 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800b0ea:	6803      	ldr	r3, [r0, #0]
 800b0ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0ee:	4798      	blx	r3
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	4798      	blx	r3
 800b0fa:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800b0fe:	b22d      	sxth	r5, r5
 800b100:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800b104:	4601      	mov	r1, r0
 800b106:	bf06      	itte	eq
 800b108:	4602      	moveq	r2, r0
 800b10a:	4629      	moveq	r1, r5
 800b10c:	462a      	movne	r2, r5
 800b10e:	4620      	mov	r0, r4
 800b110:	f7ff ffd6 	bl	800b0c0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800b114:	bd38      	pop	{r3, r4, r5, pc}
 800b116:	bf00      	nop
 800b118:	20015498 	.word	0x20015498

0800b11c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800b11c:	b530      	push	{r4, r5, lr}
 800b11e:	888b      	ldrh	r3, [r1, #4]
 800b120:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800b122:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800b126:	b085      	sub	sp, #20
 800b128:	4604      	mov	r4, r0
 800b12a:	b923      	cbnz	r3, 800b136 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800b12c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800b130:	b90b      	cbnz	r3, 800b136 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800b132:	f7ff ffd3 	bl	800b0dc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	466d      	mov	r5, sp
 800b13a:	4621      	mov	r1, r4
 800b13c:	4628      	mov	r0, r5
 800b13e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b142:	4798      	blx	r3
 800b144:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b148:	343c      	adds	r4, #60	@ 0x3c
 800b14a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b14e:	b005      	add	sp, #20
 800b150:	bd30      	pop	{r4, r5, pc}

0800b152 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800b152:	2300      	movs	r3, #0
 800b154:	8083      	strh	r3, [r0, #4]
 800b156:	80c3      	strh	r3, [r0, #6]
 800b158:	8003      	strh	r3, [r0, #0]
 800b15a:	8043      	strh	r3, [r0, #2]
 800b15c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800b160:	2bff      	cmp	r3, #255	@ 0xff
 800b162:	bf01      	itttt	eq
 800b164:	890b      	ldrheq	r3, [r1, #8]
 800b166:	8083      	strheq	r3, [r0, #4]
 800b168:	894b      	ldrheq	r3, [r1, #10]
 800b16a:	80c3      	strheq	r3, [r0, #6]
 800b16c:	4770      	bx	lr
	...

0800b170 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800b170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b172:	4604      	mov	r4, r0
 800b174:	6808      	ldr	r0, [r1, #0]
 800b176:	6849      	ldr	r1, [r1, #4]
 800b178:	466b      	mov	r3, sp
 800b17a:	c303      	stmia	r3!, {r0, r1}
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	4669      	mov	r1, sp
 800b180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b182:	4620      	mov	r0, r4
 800b184:	4798      	blx	r3
 800b186:	4b08      	ldr	r3, [pc, #32]	@ (800b1a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b18e:	b10a      	cbz	r2, 800b194 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800b190:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b192:	b900      	cbnz	r0, 800b196 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800b194:	6898      	ldr	r0, [r3, #8]
 800b196:	6803      	ldr	r3, [r0, #0]
 800b198:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b19a:	6a1d      	ldr	r5, [r3, #32]
 800b19c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b1a0:	4669      	mov	r1, sp
 800b1a2:	47a8      	blx	r5
 800b1a4:	b003      	add	sp, #12
 800b1a6:	bd30      	pop	{r4, r5, pc}
 800b1a8:	20015444 	.word	0x20015444

0800b1ac <_ZN8touchgfx3BoxD1Ev>:
 800b1ac:	4770      	bx	lr

0800b1ae <_ZN8touchgfx3BoxD0Ev>:
 800b1ae:	b510      	push	{r4, lr}
 800b1b0:	212c      	movs	r1, #44	@ 0x2c
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	f007 fe9e 	bl	8012ef4 <_ZdlPvj>
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	bd10      	pop	{r4, pc}

0800b1bc <_ZNK8touchgfx3Box17invalidateContentEv>:
 800b1bc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800b1c0:	b12a      	cbz	r2, 800b1ce <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800b1c2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800b1c6:	b112      	cbz	r2, 800b1ce <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800b1c8:	6803      	ldr	r3, [r0, #0]
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	4718      	bx	r3
 800b1ce:	4770      	bx	lr

0800b1d0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800b1d0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800b1d4:	4770      	bx	lr

0800b1d6 <_ZN8touchgfx6ButtonD1Ev>:
 800b1d6:	4770      	bx	lr

0800b1d8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	880b      	ldrh	r3, [r1, #0]
 800b1dc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800b1de:	4605      	mov	r5, r0
 800b1e0:	8813      	ldrh	r3, [r2, #0]
 800b1e2:	f825 3f30 	strh.w	r3, [r5, #48]!
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f005 f805 	bl	80101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f005 f835 	bl	8010260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b200:	4798      	blx	r3
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	4629      	mov	r1, r5
 800b206:	4620      	mov	r0, r4
 800b208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b20a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b20e:	4718      	bx	r3

0800b210 <_ZN8touchgfx6ButtonD0Ev>:
 800b210:	b510      	push	{r4, lr}
 800b212:	2134      	movs	r1, #52	@ 0x34
 800b214:	4604      	mov	r4, r0
 800b216:	f007 fe6d 	bl	8012ef4 <_ZdlPvj>
 800b21a:	4620      	mov	r0, r4
 800b21c:	bd10      	pop	{r4, pc}

0800b21e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800b21e:	b510      	push	{r4, lr}
 800b220:	4604      	mov	r4, r0
 800b222:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800b224:	b150      	cbz	r0, 800b23c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800b226:	6803      	ldr	r3, [r0, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	4798      	blx	r3
 800b22c:	b130      	cbz	r0, 800b23c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800b22e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b230:	6803      	ldr	r3, [r0, #0]
 800b232:	4621      	mov	r1, r4
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b23a:	4718      	bx	r3
 800b23c:	bd10      	pop	{r4, pc}

0800b23e <_ZNK8touchgfx6Button12getSolidRectEv>:
 800b23e:	b510      	push	{r4, lr}
 800b240:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800b244:	2bff      	cmp	r3, #255	@ 0xff
 800b246:	4604      	mov	r4, r0
 800b248:	d006      	beq.n	800b258 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800b24a:	2300      	movs	r3, #0
 800b24c:	8003      	strh	r3, [r0, #0]
 800b24e:	8043      	strh	r3, [r0, #2]
 800b250:	8083      	strh	r3, [r0, #4]
 800b252:	80c3      	strh	r3, [r0, #6]
 800b254:	4620      	mov	r0, r4
 800b256:	bd10      	pop	{r4, pc}
 800b258:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800b25c:	b11b      	cbz	r3, 800b266 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800b25e:	3130      	adds	r1, #48	@ 0x30
 800b260:	f005 f832 	bl	80102c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b264:	e7f6      	b.n	800b254 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800b266:	312e      	adds	r1, #46	@ 0x2e
 800b268:	e7fa      	b.n	800b260 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800b26c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800b26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b270:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b274:	b08a      	sub	sp, #40	@ 0x28
 800b276:	4604      	mov	r4, r0
 800b278:	4688      	mov	r8, r1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d066      	beq.n	800b34c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800b27e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b280:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b284:	a805      	add	r0, sp, #20
 800b286:	f004 ffb7 	bl	80101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b28a:	4607      	mov	r7, r0
 800b28c:	a805      	add	r0, sp, #20
 800b28e:	f004 ffe7 	bl	8010260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b292:	f9b8 6000 	ldrsh.w	r6, [r8]
 800b296:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800b29a:	4432      	add	r2, r6
 800b29c:	b292      	uxth	r2, r2
 800b29e:	2300      	movs	r3, #0
 800b2a0:	fa0f fc82 	sxth.w	ip, r2
 800b2a4:	459c      	cmp	ip, r3
 800b2a6:	9306      	str	r3, [sp, #24]
 800b2a8:	dd52      	ble.n	800b350 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800b2aa:	42b7      	cmp	r7, r6
 800b2ac:	dd50      	ble.n	800b350 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800b2ae:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800b2b2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800b2b6:	442b      	add	r3, r5
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	b219      	sxth	r1, r3
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	dd47      	ble.n	800b350 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800b2c0:	42a8      	cmp	r0, r5
 800b2c2:	dd45      	ble.n	800b350 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800b2c4:	4567      	cmp	r7, ip
 800b2c6:	bfb8      	it	lt
 800b2c8:	b2ba      	uxthlt	r2, r7
 800b2ca:	4288      	cmp	r0, r1
 800b2cc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800b2d0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800b2d4:	bfb8      	it	lt
 800b2d6:	b283      	uxthlt	r3, r0
 800b2d8:	1b92      	subs	r2, r2, r6
 800b2da:	1b5b      	subs	r3, r3, r5
 800b2dc:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b2e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b2e4:	f8ad 6018 	strh.w	r6, [sp, #24]
 800b2e8:	f8ad 501a 	strh.w	r5, [sp, #26]
 800b2ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800b2f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d026      	beq.n	800b346 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800b2f8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dd22      	ble.n	800b346 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800b300:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800b304:	2b00      	cmp	r3, #0
 800b306:	dd1e      	ble.n	800b346 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800b308:	2300      	movs	r3, #0
 800b30a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	a908      	add	r1, sp, #32
 800b312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b314:	4620      	mov	r0, r4
 800b316:	4798      	blx	r3
 800b318:	4b0f      	ldr	r3, [pc, #60]	@ (800b358 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b320:	b10a      	cbz	r2, 800b326 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800b322:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b324:	b900      	cbnz	r0, 800b328 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800b326:	6898      	ldr	r0, [r3, #8]
 800b328:	6801      	ldr	r1, [r0, #0]
 800b32a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800b32e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800b332:	2501      	movs	r5, #1
 800b334:	9502      	str	r5, [sp, #8]
 800b336:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800b33a:	9401      	str	r4, [sp, #4]
 800b33c:	ac06      	add	r4, sp, #24
 800b33e:	9400      	str	r4, [sp, #0]
 800b340:	688c      	ldr	r4, [r1, #8]
 800b342:	a905      	add	r1, sp, #20
 800b344:	47a0      	blx	r4
 800b346:	b00a      	add	sp, #40	@ 0x28
 800b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800b34e:	e797      	b.n	800b280 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800b350:	2300      	movs	r3, #0
 800b352:	9307      	str	r3, [sp, #28]
 800b354:	e7ca      	b.n	800b2ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800b356:	bf00      	nop
 800b358:	20015444 	.word	0x20015444

0800b35c <_ZNK8touchgfx6Button17invalidateContentEv>:
 800b35c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800b360:	b12a      	cbz	r2, 800b36e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800b362:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800b366:	b112      	cbz	r2, 800b36e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800b368:	6803      	ldr	r3, [r0, #0]
 800b36a:	695b      	ldr	r3, [r3, #20]
 800b36c:	4718      	bx	r3
 800b36e:	4770      	bx	lr

0800b370 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800b370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b374:	4b2f      	ldr	r3, [pc, #188]	@ (800b434 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800b376:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	4293      	cmp	r3, r2
 800b37c:	b08d      	sub	sp, #52	@ 0x34
 800b37e:	4604      	mov	r4, r0
 800b380:	460f      	mov	r7, r1
 800b382:	d954      	bls.n	800b42e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800b384:	4b2c      	ldr	r3, [pc, #176]	@ (800b438 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800b386:	6819      	ldr	r1, [r3, #0]
 800b388:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800b38c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800b390:	4a2a      	ldr	r2, [pc, #168]	@ (800b43c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800b392:	6812      	ldr	r2, [r2, #0]
 800b394:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800b398:	2900      	cmp	r1, #0
 800b39a:	d048      	beq.n	800b42e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800b39c:	785a      	ldrb	r2, [r3, #1]
 800b39e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800b3a2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800b3a6:	4b26      	ldr	r3, [pc, #152]	@ (800b440 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800b3a8:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800b3ac:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800b3b0:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800b3b4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800b3b6:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800b3ba:	9107      	str	r1, [sp, #28]
 800b3bc:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800b3c0:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800b3c4:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	f88d 8020 	strb.w	r8, [sp, #32]
 800b3ce:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800b3d2:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800b3d6:	9609      	str	r6, [sp, #36]	@ 0x24
 800b3d8:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800b3dc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800b3e0:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800b3e4:	b10b      	cbz	r3, 800b3ea <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800b3e6:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800b3e8:	b905      	cbnz	r5, 800b3ec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800b3ea:	6895      	ldr	r5, [r2, #8]
 800b3ec:	ae05      	add	r6, sp, #20
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f002 ff5b 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b3f6:	4b13      	ldr	r3, [pc, #76]	@ (800b444 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800b3f8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800b3fa:	6818      	ldr	r0, [r3, #0]
 800b3fc:	f7f8 fc64 	bl	8003cc8 <_ZNK8touchgfx5Texts7getTextEt>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	4680      	mov	r8, r0
 800b404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b406:	4620      	mov	r0, r4
 800b408:	4798      	blx	r3
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	4681      	mov	r9, r0
 800b40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b412:	4620      	mov	r0, r4
 800b414:	4798      	blx	r3
 800b416:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800b41a:	ab07      	add	r3, sp, #28
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	f8cd 8004 	str.w	r8, [sp, #4]
 800b422:	463b      	mov	r3, r7
 800b424:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b428:	4628      	mov	r0, r5
 800b42a:	f7f8 fbff 	bl	8003c2c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800b42e:	b00d      	add	sp, #52	@ 0x34
 800b430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b434:	20015498 	.word	0x20015498
 800b438:	20015494 	.word	0x20015494
 800b43c:	2001549c 	.word	0x2001549c
 800b440:	20015444 	.word	0x20015444
 800b444:	200154a0 	.word	0x200154a0

0800b448 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800b448:	4770      	bx	lr

0800b44a <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800b44a:	b510      	push	{r4, lr}
 800b44c:	2134      	movs	r1, #52	@ 0x34
 800b44e:	4604      	mov	r4, r0
 800b450:	f007 fd50 	bl	8012ef4 <_ZdlPvj>
 800b454:	4620      	mov	r0, r4
 800b456:	bd10      	pop	{r4, pc}

0800b458 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800b458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45c:	4604      	mov	r4, r0
 800b45e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b460:	8962      	ldrh	r2, [r4, #10]
 800b462:	b218      	sxth	r0, r3
 800b464:	460e      	mov	r6, r1
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	8921      	ldrh	r1, [r4, #8]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	1ac9      	subs	r1, r1, r3
 800b46e:	b08e      	sub	sp, #56	@ 0x38
 800b470:	b209      	sxth	r1, r1
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	b21b      	sxth	r3, r3
 800b476:	2900      	cmp	r1, #0
 800b478:	f8ad 0000 	strh.w	r0, [sp]
 800b47c:	f8ad 0002 	strh.w	r0, [sp, #2]
 800b480:	f8ad 1004 	strh.w	r1, [sp, #4]
 800b484:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b488:	dd5e      	ble.n	800b548 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	dd5c      	ble.n	800b548 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800b48e:	6830      	ldr	r0, [r6, #0]
 800b490:	6871      	ldr	r1, [r6, #4]
 800b492:	ab02      	add	r3, sp, #8
 800b494:	c303      	stmia	r3!, {r0, r1}
 800b496:	4669      	mov	r1, sp
 800b498:	a802      	add	r0, sp, #8
 800b49a:	f7fe fab7 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800b49e:	4620      	mov	r0, r4
 800b4a0:	a902      	add	r1, sp, #8
 800b4a2:	f7ff fe65 	bl	800b170 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800b4a6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d05f      	beq.n	800b56c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800b4ac:	8963      	ldrh	r3, [r4, #10]
 800b4ae:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b4b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b4b6:	1a1f      	subs	r7, r3, r0
 800b4b8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800b4bc:	b202      	sxth	r2, r0
 800b4be:	2500      	movs	r5, #0
 800b4c0:	b21b      	sxth	r3, r3
 800b4c2:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 800b4c6:	1a09      	subs	r1, r1, r0
 800b4c8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800b4cc:	9506      	str	r5, [sp, #24]
 800b4ce:	f8ad 201e 	strh.w	r2, [sp, #30]
 800b4d2:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b4d6:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 800b4da:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 800b4de:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800b4e2:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800b4e6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800b4ea:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 800b4ee:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800b4f2:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800b4f6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800b4fa:	af04      	add	r7, sp, #16
 800b4fc:	ab06      	add	r3, sp, #24
 800b4fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b502:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b506:	e887 0003 	stmia.w	r7, {r0, r1}
 800b50a:	4631      	mov	r1, r6
 800b50c:	4638      	mov	r0, r7
 800b50e:	f7fe fa7d 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800b512:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800b516:	2b00      	cmp	r3, #0
 800b518:	dd12      	ble.n	800b540 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800b51a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	dd0e      	ble.n	800b540 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	4639      	mov	r1, r7
 800b526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b528:	4620      	mov	r0, r4
 800b52a:	4798      	blx	r3
 800b52c:	f7fe fd44 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800b530:	6803      	ldr	r3, [r0, #0]
 800b532:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b534:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800b538:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b53c:	4639      	mov	r1, r7
 800b53e:	47c0      	blx	r8
 800b540:	3501      	adds	r5, #1
 800b542:	2d04      	cmp	r5, #4
 800b544:	d1da      	bne.n	800b4fc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800b546:	e011      	b.n	800b56c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800b548:	6830      	ldr	r0, [r6, #0]
 800b54a:	6871      	ldr	r1, [r6, #4]
 800b54c:	ab06      	add	r3, sp, #24
 800b54e:	c303      	stmia	r3!, {r0, r1}
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	a906      	add	r1, sp, #24
 800b554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b556:	4620      	mov	r0, r4
 800b558:	4798      	blx	r3
 800b55a:	f7fe fd2d 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 800b55e:	6803      	ldr	r3, [r0, #0]
 800b560:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b562:	6a1d      	ldr	r5, [r3, #32]
 800b564:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b568:	a906      	add	r1, sp, #24
 800b56a:	47a8      	blx	r5
 800b56c:	b00e      	add	sp, #56	@ 0x38
 800b56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b572 <_ZN8touchgfx5ImageD1Ev>:
 800b572:	4770      	bx	lr

0800b574 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	880b      	ldrh	r3, [r1, #0]
 800b578:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800b57a:	4604      	mov	r4, r0
 800b57c:	4608      	mov	r0, r1
 800b57e:	460d      	mov	r5, r1
 800b580:	f004 fe3a 	bl	80101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b584:	4606      	mov	r6, r0
 800b586:	4628      	mov	r0, r5
 800b588:	f004 fe6a 	bl	8010260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	4605      	mov	r5, r0
 800b590:	4631      	mov	r1, r6
 800b592:	4620      	mov	r0, r4
 800b594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b596:	4798      	blx	r3
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	4629      	mov	r1, r5
 800b59c:	4620      	mov	r0, r4
 800b59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5a4:	4718      	bx	r3

0800b5a6 <_ZN8touchgfx5ImageD0Ev>:
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	212c      	movs	r1, #44	@ 0x2c
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	f007 fca2 	bl	8012ef4 <_ZdlPvj>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	bd10      	pop	{r4, pc}

0800b5b4 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800b5b4:	b510      	push	{r4, lr}
 800b5b6:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800b5ba:	2bff      	cmp	r3, #255	@ 0xff
 800b5bc:	4604      	mov	r4, r0
 800b5be:	d006      	beq.n	800b5ce <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	8003      	strh	r3, [r0, #0]
 800b5c4:	8043      	strh	r3, [r0, #2]
 800b5c6:	8083      	strh	r3, [r0, #4]
 800b5c8:	80c3      	strh	r3, [r0, #6]
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	bd10      	pop	{r4, pc}
 800b5ce:	3126      	adds	r1, #38	@ 0x26
 800b5d0:	f004 fe7a 	bl	80102c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b5d4:	e7f9      	b.n	800b5ca <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800b5d6 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800b5d6:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800b5da:	b12a      	cbz	r2, 800b5e8 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800b5dc:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800b5e0:	b112      	cbz	r2, 800b5e8 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800b5e2:	6803      	ldr	r3, [r0, #0]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	4718      	bx	r3
 800b5e8:	4770      	bx	lr
	...

0800b5ec <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800b5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	f854 3b26 	ldr.w	r3, [r4], #38
 800b5f8:	2500      	movs	r5, #0
 800b5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b602:	a904      	add	r1, sp, #16
 800b604:	4606      	mov	r6, r0
 800b606:	4798      	blx	r3
 800b608:	4620      	mov	r0, r4
 800b60a:	f004 fdf5 	bl	80101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b60e:	4680      	mov	r8, r0
 800b610:	4620      	mov	r0, r4
 800b612:	f004 fe25 	bl	8010260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b616:	9506      	str	r5, [sp, #24]
 800b618:	ad06      	add	r5, sp, #24
 800b61a:	f8ad 001e 	strh.w	r0, [sp, #30]
 800b61e:	4639      	mov	r1, r7
 800b620:	4628      	mov	r0, r5
 800b622:	f8ad 801c 	strh.w	r8, [sp, #28]
 800b626:	f7fe f9f1 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800b62a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	dd19      	ble.n	800b666 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b632:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800b636:	2b00      	cmp	r3, #0
 800b638:	dd15      	ble.n	800b666 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b63a:	4b0c      	ldr	r3, [pc, #48]	@ (800b66c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b642:	b10a      	cbz	r2, 800b648 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800b644:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b646:	b900      	cbnz	r0, 800b64a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800b648:	6898      	ldr	r0, [r3, #8]
 800b64a:	6801      	ldr	r1, [r0, #0]
 800b64c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800b650:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800b654:	2701      	movs	r7, #1
 800b656:	9702      	str	r7, [sp, #8]
 800b658:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800b65c:	e9cd 5600 	strd	r5, r6, [sp]
 800b660:	688d      	ldr	r5, [r1, #8]
 800b662:	4621      	mov	r1, r4
 800b664:	47a8      	blx	r5
 800b666:	b008      	add	sp, #32
 800b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66c:	20015444 	.word	0x20015444

0800b670 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800b670:	b510      	push	{r4, lr}
 800b672:	6803      	ldr	r3, [r0, #0]
 800b674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b676:	460c      	mov	r4, r1
 800b678:	4798      	blx	r3
 800b67a:	1b03      	subs	r3, r0, r4
 800b67c:	4258      	negs	r0, r3
 800b67e:	4158      	adcs	r0, r3
 800b680:	bd10      	pop	{r4, pc}
	...

0800b684 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800b684:	4b01      	ldr	r3, [pc, #4]	@ (800b68c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800b686:	6019      	str	r1, [r3, #0]
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	2001544c 	.word	0x2001544c

0800b690 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	4696      	mov	lr, r2
 800b696:	4605      	mov	r5, r0
 800b698:	4614      	mov	r4, r2
 800b69a:	460e      	mov	r6, r1
 800b69c:	461f      	mov	r7, r3
 800b69e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b6a2:	b097      	sub	sp, #92	@ 0x5c
 800b6a4:	f10d 0c1c 	add.w	ip, sp, #28
 800b6a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b6ac:	f8de 3000 	ldr.w	r3, [lr]
 800b6b0:	f8cc 3000 	str.w	r3, [ip]
 800b6b4:	f104 0e14 	add.w	lr, r4, #20
 800b6b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b6bc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b6c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b6c4:	f8de 3000 	ldr.w	r3, [lr]
 800b6c8:	f8cc 3000 	str.w	r3, [ip]
 800b6cc:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b6d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b6d4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b6d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b6dc:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800b6e0:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800b6e4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800b6e8:	f8de 3000 	ldr.w	r3, [lr]
 800b6ec:	f8cc 3000 	str.w	r3, [ip]
 800b6f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b6f2:	682b      	ldr	r3, [r5, #0]
 800b6f4:	9201      	str	r2, [sp, #4]
 800b6f6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b6fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b6fc:	9200      	str	r2, [sp, #0]
 800b6fe:	f8cd 8008 	str.w	r8, [sp, #8]
 800b702:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800b706:	aa07      	add	r2, sp, #28
 800b708:	463b      	mov	r3, r7
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	47d8      	blx	fp
 800b710:	46a6      	mov	lr, r4
 800b712:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b716:	f10d 0c1c 	add.w	ip, sp, #28
 800b71a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b71e:	f8de 3000 	ldr.w	r3, [lr]
 800b722:	f8cc 3000 	str.w	r3, [ip]
 800b726:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b72a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b72e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b732:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b736:	343c      	adds	r4, #60	@ 0x3c
 800b738:	f8de 3000 	ldr.w	r3, [lr]
 800b73c:	f8cc 3000 	str.w	r3, [ip]
 800b740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b742:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	f8cc 3000 	str.w	r3, [ip]
 800b750:	682b      	ldr	r3, [r5, #0]
 800b752:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b756:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b758:	9201      	str	r2, [sp, #4]
 800b75a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b75c:	9200      	str	r2, [sp, #0]
 800b75e:	f8cd 8008 	str.w	r8, [sp, #8]
 800b762:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800b764:	aa07      	add	r2, sp, #28
 800b766:	463b      	mov	r3, r7
 800b768:	4631      	mov	r1, r6
 800b76a:	4628      	mov	r0, r5
 800b76c:	47a0      	blx	r4
 800b76e:	b017      	add	sp, #92	@ 0x5c
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b774 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	b08d      	sub	sp, #52	@ 0x34
 800b77a:	4688      	mov	r8, r1
 800b77c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b77e:	f8d3 c000 	ldr.w	ip, [r3]
 800b782:	680f      	ldr	r7, [r1, #0]
 800b784:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800b788:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800b78c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800b790:	edd3 6a07 	vldr	s13, [r3, #28]
 800b794:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b796:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800b79a:	f9b1 9000 	ldrsh.w	r9, [r1]
 800b79e:	f9ba 1000 	ldrsh.w	r1, [sl]
 800b7a2:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800b7a6:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800b7aa:	eba7 070c 	sub.w	r7, r7, ip
 800b7ae:	42bc      	cmp	r4, r7
 800b7b0:	bfa8      	it	ge
 800b7b2:	463c      	movge	r4, r7
 800b7b4:	ee07 4a90 	vmov	s15, r4
 800b7b8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800b7bc:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800b7c0:	ee25 4a04 	vmul.f32	s8, s10, s8
 800b7c4:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b7c8:	ee25 5a27 	vmul.f32	s10, s10, s15
 800b7cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b7d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b7d4:	eb09 0e0c 	add.w	lr, r9, ip
 800b7d8:	4571      	cmp	r1, lr
 800b7da:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800b7de:	ee32 1a05 	vadd.f32	s2, s4, s10
 800b7e2:	ee36 0a84 	vadd.f32	s0, s13, s8
 800b7e6:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b7ea:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b7ee:	f340 808d 	ble.w	800b90c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800b7f2:	eba1 060e 	sub.w	r6, r1, lr
 800b7f6:	fb96 f5f4 	sdiv	r5, r6, r4
 800b7fa:	ee07 5a10 	vmov	s14, r5
 800b7fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b802:	2d00      	cmp	r5, #0
 800b804:	fb04 6615 	mls	r6, r4, r5, r6
 800b808:	eea7 0a04 	vfma.f32	s0, s14, s8
 800b80c:	eee7 0a24 	vfma.f32	s1, s14, s9
 800b810:	eea7 1a05 	vfma.f32	s2, s14, s10
 800b814:	dd13      	ble.n	800b83e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800b816:	ee70 6a44 	vsub.f32	s13, s0, s8
 800b81a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800b81e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b826:	bf18      	it	ne
 800b828:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800b82c:	ee31 2a45 	vsub.f32	s4, s2, s10
 800b830:	bf08      	it	eq
 800b832:	eeb0 7a67 	vmoveq.f32	s14, s15
 800b836:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b83a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b83e:	fb05 f204 	mul.w	r2, r5, r4
 800b842:	1abf      	subs	r7, r7, r2
 800b844:	4494      	add	ip, r2
 800b846:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800b84a:	4411      	add	r1, r2
 800b84c:	eb09 020c 	add.w	r2, r9, ip
 800b850:	443a      	add	r2, r7
 800b852:	b209      	sxth	r1, r1
 800b854:	428a      	cmp	r2, r1
 800b856:	bfc4      	itt	gt
 800b858:	eba1 0209 	subgt.w	r2, r1, r9
 800b85c:	eba2 070c 	subgt.w	r7, r2, ip
 800b860:	2f00      	cmp	r7, #0
 800b862:	dd50      	ble.n	800b906 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800b864:	fb97 f1f4 	sdiv	r1, r7, r4
 800b868:	fb04 7211 	mls	r2, r4, r1, r7
 800b86c:	b90a      	cbnz	r2, 800b872 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800b86e:	3901      	subs	r1, #1
 800b870:	4622      	mov	r2, r4
 800b872:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800b876:	6840      	ldr	r0, [r0, #4]
 800b878:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b87a:	f8d0 a000 	ldr.w	sl, [r0]
 800b87e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b880:	9008      	str	r0, [sp, #32]
 800b882:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800b886:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b888:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b88c:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b894:	445b      	add	r3, fp
 800b896:	eef0 6a42 	vmov.f32	s13, s4
 800b89a:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800b89e:	ee21 3a23 	vmul.f32	s6, s2, s7
 800b8a2:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800b8a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800b8aa:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b8ae:	9307      	str	r3, [sp, #28]
 800b8b0:	ee17 7a90 	vmov	r7, s15
 800b8b4:	ee73 7a42 	vsub.f32	s15, s6, s4
 800b8b8:	eeb0 7a61 	vmov.f32	s14, s3
 800b8bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b8c0:	ee16 3a90 	vmov	r3, s13
 800b8c4:	fb97 f7f4 	sdiv	r7, r7, r4
 800b8c8:	ee17 ca90 	vmov	ip, s15
 800b8cc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800b8d0:	fb9c fcf4 	sdiv	ip, ip, r4
 800b8d4:	fb0c 3306 	mla	r3, ip, r6, r3
 800b8d8:	9302      	str	r3, [sp, #8]
 800b8da:	ee17 3a10 	vmov	r3, s14
 800b8de:	44b6      	add	lr, r6
 800b8e0:	fb04 e505 	mla	r5, r4, r5, lr
 800b8e4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800b8e8:	fb07 3706 	mla	r7, r7, r6, r3
 800b8ec:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800b8f0:	e9cd 4700 	strd	r4, r7, [sp]
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	bfcc      	ite	gt
 800b8f8:	46a1      	movgt	r9, r4
 800b8fa:	4691      	movle	r9, r2
 800b8fc:	eba9 0306 	sub.w	r3, r9, r6
 800b900:	f8da 4008 	ldr.w	r4, [sl, #8]
 800b904:	47a0      	blx	r4
 800b906:	b00d      	add	sp, #52	@ 0x34
 800b908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90c:	2500      	movs	r5, #0
 800b90e:	462e      	mov	r6, r5
 800b910:	e799      	b.n	800b846 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800b914 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	b0db      	sub	sp, #364	@ 0x16c
 800b91a:	461d      	mov	r5, r3
 800b91c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800b920:	930a      	str	r3, [sp, #40]	@ 0x28
 800b922:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800b926:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b928:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800b92c:	9310      	str	r3, [sp, #64]	@ 0x40
 800b92e:	6803      	ldr	r3, [r0, #0]
 800b930:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b932:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800b934:	9009      	str	r0, [sp, #36]	@ 0x24
 800b936:	4614      	mov	r4, r2
 800b938:	4629      	mov	r1, r5
 800b93a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b93e:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800b942:	47b8      	blx	r7
 800b944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b946:	6058      	str	r0, [r3, #4]
 800b948:	2800      	cmp	r0, #0
 800b94a:	f000 83a1 	beq.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b94e:	682b      	ldr	r3, [r5, #0]
 800b950:	9314      	str	r3, [sp, #80]	@ 0x50
 800b952:	686b      	ldr	r3, [r5, #4]
 800b954:	9315      	str	r3, [sp, #84]	@ 0x54
 800b956:	4bc4      	ldr	r3, [pc, #784]	@ (800bc68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800b958:	ed94 7a02 	vldr	s14, [r4, #8]
 800b95c:	7819      	ldrb	r1, [r3, #0]
 800b95e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b962:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800b966:	2900      	cmp	r1, #0
 800b968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b96c:	bf16      	itet	ne
 800b96e:	4619      	movne	r1, r3
 800b970:	4611      	moveq	r1, r2
 800b972:	4613      	movne	r3, r2
 800b974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b978:	9116      	str	r1, [sp, #88]	@ 0x58
 800b97a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800b97e:	f240 8387 	bls.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b982:	ed94 7a07 	vldr	s14, [r4, #28]
 800b986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98e:	f240 837f 	bls.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b992:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800b996:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b99e:	f240 8377 	bls.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b9a2:	6822      	ldr	r2, [r4, #0]
 800b9a4:	4bb1      	ldr	r3, [pc, #708]	@ (800bc6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	f2c0 8372 	blt.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b9ac:	49b0      	ldr	r1, [pc, #704]	@ (800bc70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800b9ae:	6963      	ldr	r3, [r4, #20]
 800b9b0:	428a      	cmp	r2, r1
 800b9b2:	f300 836d 	bgt.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b9b6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b9ba:	48ae      	ldr	r0, [pc, #696]	@ (800bc74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800b9bc:	33ff      	adds	r3, #255	@ 0xff
 800b9be:	4283      	cmp	r3, r0
 800b9c0:	f200 8366 	bhi.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b9c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b9c6:	4dac      	ldr	r5, [pc, #688]	@ (800bc78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800b9c8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b9cc:	33ff      	adds	r3, #255	@ 0xff
 800b9ce:	42ab      	cmp	r3, r5
 800b9d0:	f200 835e 	bhi.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b9d4:	6862      	ldr	r2, [r4, #4]
 800b9d6:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800b9da:	33ff      	adds	r3, #255	@ 0xff
 800b9dc:	4283      	cmp	r3, r0
 800b9de:	f200 8357 	bhi.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b9e2:	69a1      	ldr	r1, [r4, #24]
 800b9e4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800b9e8:	33ff      	adds	r3, #255	@ 0xff
 800b9ea:	4283      	cmp	r3, r0
 800b9ec:	f200 8350 	bhi.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b9f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b9f2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800b9f6:	30ff      	adds	r0, #255	@ 0xff
 800b9f8:	42a8      	cmp	r0, r5
 800b9fa:	f200 8349 	bhi.w	800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b9fe:	428a      	cmp	r2, r1
 800ba00:	f280 8110 	bge.w	800bc24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800ba04:	429a      	cmp	r2, r3
 800ba06:	f300 8119 	bgt.w	800bc3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800ba0a:	4299      	cmp	r1, r3
 800ba0c:	f280 811d 	bge.w	800bc4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800ba10:	2502      	movs	r5, #2
 800ba12:	2701      	movs	r7, #1
 800ba14:	46a9      	mov	r9, r5
 800ba16:	46b8      	mov	r8, r7
 800ba18:	f04f 0a00 	mov.w	sl, #0
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	a849      	add	r0, sp, #292	@ 0x124
 800ba20:	f003 fda6 	bl	800f570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800ba24:	4622      	mov	r2, r4
 800ba26:	4653      	mov	r3, sl
 800ba28:	a949      	add	r1, sp, #292	@ 0x124
 800ba2a:	f8cd 9000 	str.w	r9, [sp]
 800ba2e:	a819      	add	r0, sp, #100	@ 0x64
 800ba30:	f003 fece 	bl	800f7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ba34:	4622      	mov	r2, r4
 800ba36:	4653      	mov	r3, sl
 800ba38:	a949      	add	r1, sp, #292	@ 0x124
 800ba3a:	f8cd 8000 	str.w	r8, [sp]
 800ba3e:	a829      	add	r0, sp, #164	@ 0xa4
 800ba40:	f003 fec6 	bl	800f7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ba44:	4643      	mov	r3, r8
 800ba46:	4622      	mov	r2, r4
 800ba48:	a949      	add	r1, sp, #292	@ 0x124
 800ba4a:	f8cd 9000 	str.w	r9, [sp]
 800ba4e:	a839      	add	r0, sp, #228	@ 0xe4
 800ba50:	f003 febe 	bl	800f7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ba54:	42af      	cmp	r7, r5
 800ba56:	bfb5      	itete	lt
 800ba58:	2300      	movlt	r3, #0
 800ba5a:	2301      	movge	r3, #1
 800ba5c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800ba5e:	930e      	strge	r3, [sp, #56]	@ 0x38
 800ba60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba62:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba66:	af12      	add	r7, sp, #72	@ 0x48
 800ba68:	bfb9      	ittee	lt
 800ba6a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800ba6c:	ac19      	addlt	r4, sp, #100	@ 0x64
 800ba6e:	ad19      	addge	r5, sp, #100	@ 0x64
 800ba70:	ac29      	addge	r4, sp, #164	@ 0xa4
 800ba72:	e887 0003 	stmia.w	r7, {r0, r1}
 800ba76:	b928      	cbnz	r0, 800ba84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800ba78:	4b80      	ldr	r3, [pc, #512]	@ (800bc7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800ba7a:	6818      	ldr	r0, [r3, #0]
 800ba7c:	6803      	ldr	r3, [r0, #0]
 800ba7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba80:	4798      	blx	r3
 800ba82:	6038      	str	r0, [r7, #0]
 800ba84:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ba86:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800ba8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba8e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba92:	6963      	ldr	r3, [r4, #20]
 800ba94:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800ba96:	440b      	add	r3, r1
 800ba98:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800ba9c:	4408      	add	r0, r1
 800ba9e:	b200      	sxth	r0, r0
 800baa0:	4283      	cmp	r3, r0
 800baa2:	900d      	str	r0, [sp, #52]	@ 0x34
 800baa4:	f280 80dd 	bge.w	800bc62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800baa8:	428b      	cmp	r3, r1
 800baaa:	da08      	bge.n	800babe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800baac:	2a00      	cmp	r2, #0
 800baae:	dd06      	ble.n	800babe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800bab0:	1acb      	subs	r3, r1, r3
 800bab2:	429a      	cmp	r2, r3
 800bab4:	f2c0 80e4 	blt.w	800bc80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f300 80e2 	bgt.w	800bc82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800babe:	6967      	ldr	r7, [r4, #20]
 800bac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bac2:	443b      	add	r3, r7
 800bac4:	461f      	mov	r7, r3
 800bac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bac8:	1bdf      	subs	r7, r3, r7
 800baca:	4297      	cmp	r7, r2
 800bacc:	bfa8      	it	ge
 800bace:	4617      	movge	r7, r2
 800bad0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800bad4:	2f00      	cmp	r7, #0
 800bad6:	f340 8166 	ble.w	800bda6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800bada:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800badc:	6829      	ldr	r1, [r5, #0]
 800bade:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bae2:	f9bb 3000 	ldrsh.w	r3, [fp]
 800bae6:	6820      	ldr	r0, [r4, #0]
 800bae8:	4411      	add	r1, r2
 800baea:	4299      	cmp	r1, r3
 800baec:	dd1a      	ble.n	800bb24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800baee:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800baf2:	440b      	add	r3, r1
 800baf4:	4402      	add	r2, r0
 800baf6:	b21b      	sxth	r3, r3
 800baf8:	429a      	cmp	r2, r3
 800bafa:	dc13      	bgt.n	800bb24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800bafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	9206      	str	r2, [sp, #24]
 800bb04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb06:	9205      	str	r2, [sp, #20]
 800bb08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb0a:	9500      	str	r5, [sp, #0]
 800bb0c:	e9cd b203 	strd	fp, r2, [sp, #12]
 800bb10:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800bb12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb14:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800bb18:	a912      	add	r1, sp, #72	@ 0x48
 800bb1a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800bb1e:	aa49      	add	r2, sp, #292	@ 0x124
 800bb20:	4623      	mov	r3, r4
 800bb22:	47c8      	blx	r9
 800bb24:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb28:	441a      	add	r2, r3
 800bb2a:	6963      	ldr	r3, [r4, #20]
 800bb2c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800bb30:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800bb34:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800bb38:	68a1      	ldr	r1, [r4, #8]
 800bb3a:	ed94 6a08 	vldr	s12, [r4, #32]
 800bb3e:	6022      	str	r2, [r4, #0]
 800bb40:	3301      	adds	r3, #1
 800bb42:	6163      	str	r3, [r4, #20]
 800bb44:	69a3      	ldr	r3, [r4, #24]
 800bb46:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800bb50:	61a3      	str	r3, [r4, #24]
 800bb52:	6923      	ldr	r3, [r4, #16]
 800bb54:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800bb58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb5c:	edd4 6a07 	vldr	s13, [r4, #28]
 800bb60:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800bb64:	440b      	add	r3, r1
 800bb66:	68e1      	ldr	r1, [r4, #12]
 800bb68:	6123      	str	r3, [r4, #16]
 800bb6a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bb6e:	428b      	cmp	r3, r1
 800bb70:	edc4 6a07 	vstr	s13, [r4, #28]
 800bb74:	db15      	blt.n	800bba2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800bb76:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800bb7a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bb7e:	3201      	adds	r2, #1
 800bb80:	edc4 6a07 	vstr	s13, [r4, #28]
 800bb84:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800bb88:	6022      	str	r2, [r4, #0]
 800bb8a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bb8e:	1a5b      	subs	r3, r3, r1
 800bb90:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800bb94:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800bb98:	6123      	str	r3, [r4, #16]
 800bb9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb9e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800bba2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bba6:	441a      	add	r2, r3
 800bba8:	696b      	ldr	r3, [r5, #20]
 800bbaa:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800bbae:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800bbb2:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800bbb6:	68a9      	ldr	r1, [r5, #8]
 800bbb8:	ed95 6a08 	vldr	s12, [r5, #32]
 800bbbc:	602a      	str	r2, [r5, #0]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	616b      	str	r3, [r5, #20]
 800bbc2:	69ab      	ldr	r3, [r5, #24]
 800bbc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800bbce:	61ab      	str	r3, [r5, #24]
 800bbd0:	692b      	ldr	r3, [r5, #16]
 800bbd2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800bbd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbda:	edd5 6a07 	vldr	s13, [r5, #28]
 800bbde:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bbe2:	440b      	add	r3, r1
 800bbe4:	68e9      	ldr	r1, [r5, #12]
 800bbe6:	612b      	str	r3, [r5, #16]
 800bbe8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bbec:	428b      	cmp	r3, r1
 800bbee:	edc5 6a07 	vstr	s13, [r5, #28]
 800bbf2:	db15      	blt.n	800bc20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800bbf4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800bbf8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bbfc:	3201      	adds	r2, #1
 800bbfe:	edc5 6a07 	vstr	s13, [r5, #28]
 800bc02:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800bc06:	602a      	str	r2, [r5, #0]
 800bc08:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bc0c:	1a5b      	subs	r3, r3, r1
 800bc0e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800bc12:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800bc16:	612b      	str	r3, [r5, #16]
 800bc18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc1c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bc20:	3f01      	subs	r7, #1
 800bc22:	e757      	b.n	800bad4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800bc24:	4299      	cmp	r1, r3
 800bc26:	dc13      	bgt.n	800bc50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	da14      	bge.n	800bc56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800bc2c:	2502      	movs	r5, #2
 800bc2e:	2703      	movs	r7, #3
 800bc30:	46a9      	mov	r9, r5
 800bc32:	f04f 0800 	mov.w	r8, #0
 800bc36:	f04f 0a01 	mov.w	sl, #1
 800bc3a:	e6ef      	b.n	800ba1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800bc3c:	2501      	movs	r5, #1
 800bc3e:	2700      	movs	r7, #0
 800bc40:	46a9      	mov	r9, r5
 800bc42:	46b8      	mov	r8, r7
 800bc44:	f04f 0a02 	mov.w	sl, #2
 800bc48:	e6e8      	b.n	800ba1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800bc4a:	2501      	movs	r5, #1
 800bc4c:	2702      	movs	r7, #2
 800bc4e:	e6e1      	b.n	800ba14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800bc50:	2500      	movs	r5, #0
 800bc52:	2701      	movs	r7, #1
 800bc54:	e7f4      	b.n	800bc40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800bc56:	2702      	movs	r7, #2
 800bc58:	2503      	movs	r5, #3
 800bc5a:	f04f 0900 	mov.w	r9, #0
 800bc5e:	46b8      	mov	r8, r7
 800bc60:	e7e9      	b.n	800bc36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800bc62:	4613      	mov	r3, r2
 800bc64:	e728      	b.n	800bab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800bc66:	bf00      	nop
 800bc68:	2001543c 	.word	0x2001543c
 800bc6c:	fffd8f01 	.word	0xfffd8f01
 800bc70:	00027100 	.word	0x00027100
 800bc74:	0004e1ff 	.word	0x0004e1ff
 800bc78:	0004e1fe 	.word	0x0004e1fe
 800bc7c:	20015444 	.word	0x20015444
 800bc80:	4613      	mov	r3, r2
 800bc82:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800bc84:	9111      	str	r1, [sp, #68]	@ 0x44
 800bc86:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800bc8a:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800bc8e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800bc90:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800bc94:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800bc98:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800bc9c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800bca0:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800bca4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bca8:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800bcac:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800bcb0:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800bcb4:	469e      	mov	lr, r3
 800bcb6:	469c      	mov	ip, r3
 800bcb8:	f04f 0900 	mov.w	r9, #0
 800bcbc:	f1bc 0f00 	cmp.w	ip, #0
 800bcc0:	d147      	bne.n	800bd52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800bcc2:	eb03 0c07 	add.w	ip, r3, r7
 800bcc6:	1ad7      	subs	r7, r2, r3
 800bcc8:	f1b9 0f00 	cmp.w	r9, #0
 800bccc:	d009      	beq.n	800bce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800bcce:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800bcd2:	9029      	str	r0, [sp, #164]	@ 0xa4
 800bcd4:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800bcd8:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800bcdc:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800bce0:	912d      	str	r1, [sp, #180]	@ 0xb4
 800bce2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bce4:	9111      	str	r1, [sp, #68]	@ 0x44
 800bce6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800bcea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800bcee:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800bcf2:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800bcf6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800bcfa:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800bcfe:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800bd02:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800bd06:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800bd0a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800bd0e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800bd12:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800bd16:	f04f 0800 	mov.w	r8, #0
 800bd1a:	f1be 0f00 	cmp.w	lr, #0
 800bd1e:	d031      	beq.n	800bd84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800bd20:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bd22:	4431      	add	r1, r6
 800bd24:	4549      	cmp	r1, r9
 800bd26:	4450      	add	r0, sl
 800bd28:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bd2c:	ee37 7a04 	vadd.f32	s14, s14, s8
 800bd30:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bd34:	db08      	blt.n	800bd48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800bd36:	ee77 7a85 	vadd.f32	s15, s15, s10
 800bd3a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bd3e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bd42:	3001      	adds	r0, #1
 800bd44:	eba1 0109 	sub.w	r1, r1, r9
 800bd48:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bd4c:	f04f 0801 	mov.w	r8, #1
 800bd50:	e7e3      	b.n	800bd1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800bd52:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bd54:	4431      	add	r1, r6
 800bd56:	4541      	cmp	r1, r8
 800bd58:	4450      	add	r0, sl
 800bd5a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bd5e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bd62:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800bd66:	db08      	blt.n	800bd7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800bd68:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bd6c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bd70:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bd74:	3001      	adds	r0, #1
 800bd76:	eba1 0108 	sub.w	r1, r1, r8
 800bd7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd7e:	f04f 0901 	mov.w	r9, #1
 800bd82:	e79b      	b.n	800bcbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800bd84:	449c      	add	ip, r3
 800bd86:	1aff      	subs	r7, r7, r3
 800bd88:	f1b8 0f00 	cmp.w	r8, #0
 800bd8c:	d009      	beq.n	800bda2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800bd8e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800bd92:	9019      	str	r0, [sp, #100]	@ 0x64
 800bd94:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800bd98:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800bd9c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800bda0:	911d      	str	r1, [sp, #116]	@ 0x74
 800bda2:	1ad2      	subs	r2, r2, r3
 800bda4:	e68b      	b.n	800babe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800bda6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bda8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80d1 	beq.w	800bf52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800bdb0:	ad19      	add	r5, sp, #100	@ 0x64
 800bdb2:	ac39      	add	r4, sp, #228	@ 0xe4
 800bdb4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800bdb6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800bdba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bdbe:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bdc2:	6963      	ldr	r3, [r4, #20]
 800bdc4:	440b      	add	r3, r1
 800bdc6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800bdca:	4408      	add	r0, r1
 800bdcc:	b200      	sxth	r0, r0
 800bdce:	4283      	cmp	r3, r0
 800bdd0:	900d      	str	r0, [sp, #52]	@ 0x34
 800bdd2:	f280 80c1 	bge.w	800bf58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800bdd6:	428b      	cmp	r3, r1
 800bdd8:	da08      	bge.n	800bdec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bdda:	2a00      	cmp	r2, #0
 800bddc:	dd06      	ble.n	800bdec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bdde:	1acb      	subs	r3, r1, r3
 800bde0:	429a      	cmp	r2, r3
 800bde2:	f2c0 80bb 	blt.w	800bf5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f300 80b9 	bgt.w	800bf5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800bdec:	6967      	ldr	r7, [r4, #20]
 800bdee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdf0:	443b      	add	r3, r7
 800bdf2:	461f      	mov	r7, r3
 800bdf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdf6:	1bdf      	subs	r7, r3, r7
 800bdf8:	4297      	cmp	r7, r2
 800bdfa:	bfa8      	it	ge
 800bdfc:	4617      	movge	r7, r2
 800bdfe:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800be02:	2f00      	cmp	r7, #0
 800be04:	f340 813c 	ble.w	800c080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800be08:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800be0a:	6829      	ldr	r1, [r5, #0]
 800be0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800be10:	f9bb 3000 	ldrsh.w	r3, [fp]
 800be14:	6820      	ldr	r0, [r4, #0]
 800be16:	4411      	add	r1, r2
 800be18:	4299      	cmp	r1, r3
 800be1a:	dd1a      	ble.n	800be52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800be1c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800be20:	440b      	add	r3, r1
 800be22:	4402      	add	r2, r0
 800be24:	b21b      	sxth	r3, r3
 800be26:	429a      	cmp	r2, r3
 800be28:	dc13      	bgt.n	800be52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800be2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be2c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	9206      	str	r2, [sp, #24]
 800be32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be34:	9205      	str	r2, [sp, #20]
 800be36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be38:	9500      	str	r5, [sp, #0]
 800be3a:	e9cd b203 	strd	fp, r2, [sp, #12]
 800be3e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800be40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be42:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800be46:	a912      	add	r1, sp, #72	@ 0x48
 800be48:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800be4c:	aa49      	add	r2, sp, #292	@ 0x124
 800be4e:	4623      	mov	r3, r4
 800be50:	47c8      	blx	r9
 800be52:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be56:	441a      	add	r2, r3
 800be58:	6963      	ldr	r3, [r4, #20]
 800be5a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800be5e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800be62:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800be66:	68a1      	ldr	r1, [r4, #8]
 800be68:	ed94 6a08 	vldr	s12, [r4, #32]
 800be6c:	6022      	str	r2, [r4, #0]
 800be6e:	3301      	adds	r3, #1
 800be70:	6163      	str	r3, [r4, #20]
 800be72:	69a3      	ldr	r3, [r4, #24]
 800be74:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be78:	3b01      	subs	r3, #1
 800be7a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800be7e:	61a3      	str	r3, [r4, #24]
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800be86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be8a:	edd4 6a07 	vldr	s13, [r4, #28]
 800be8e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800be92:	440b      	add	r3, r1
 800be94:	68e1      	ldr	r1, [r4, #12]
 800be96:	6123      	str	r3, [r4, #16]
 800be98:	ee76 6a86 	vadd.f32	s13, s13, s12
 800be9c:	428b      	cmp	r3, r1
 800be9e:	edc4 6a07 	vstr	s13, [r4, #28]
 800bea2:	db15      	blt.n	800bed0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800bea4:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800bea8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800beac:	3201      	adds	r2, #1
 800beae:	edc4 6a07 	vstr	s13, [r4, #28]
 800beb2:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800beb6:	6022      	str	r2, [r4, #0]
 800beb8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bebc:	1a5b      	subs	r3, r3, r1
 800bebe:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800bec2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800bec6:	6123      	str	r3, [r4, #16]
 800bec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800becc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800bed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bed4:	441a      	add	r2, r3
 800bed6:	696b      	ldr	r3, [r5, #20]
 800bed8:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800bedc:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800bee0:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800bee4:	68a9      	ldr	r1, [r5, #8]
 800bee6:	ed95 6a08 	vldr	s12, [r5, #32]
 800beea:	602a      	str	r2, [r5, #0]
 800beec:	3301      	adds	r3, #1
 800beee:	616b      	str	r3, [r5, #20]
 800bef0:	69ab      	ldr	r3, [r5, #24]
 800bef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bef6:	3b01      	subs	r3, #1
 800bef8:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800befc:	61ab      	str	r3, [r5, #24]
 800befe:	692b      	ldr	r3, [r5, #16]
 800bf00:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800bf04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf08:	edd5 6a07 	vldr	s13, [r5, #28]
 800bf0c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bf10:	440b      	add	r3, r1
 800bf12:	68e9      	ldr	r1, [r5, #12]
 800bf14:	612b      	str	r3, [r5, #16]
 800bf16:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bf1a:	428b      	cmp	r3, r1
 800bf1c:	edc5 6a07 	vstr	s13, [r5, #28]
 800bf20:	db15      	blt.n	800bf4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800bf22:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800bf26:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bf2a:	3201      	adds	r2, #1
 800bf2c:	edc5 6a07 	vstr	s13, [r5, #28]
 800bf30:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800bf34:	602a      	str	r2, [r5, #0]
 800bf36:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bf3a:	1a5b      	subs	r3, r3, r1
 800bf3c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800bf40:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800bf44:	612b      	str	r3, [r5, #16]
 800bf46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf4a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bf4e:	3f01      	subs	r7, #1
 800bf50:	e757      	b.n	800be02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800bf52:	ad39      	add	r5, sp, #228	@ 0xe4
 800bf54:	ac19      	add	r4, sp, #100	@ 0x64
 800bf56:	e72d      	b.n	800bdb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800bf58:	4613      	mov	r3, r2
 800bf5a:	e744      	b.n	800bde6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800bf62:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800bf64:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800bf68:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800bf6c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800bf70:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800bf74:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800bf78:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800bf7c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800bf80:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800bf82:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800bf86:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800bf8a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800bf8e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800bf92:	960e      	str	r6, [sp, #56]	@ 0x38
 800bf94:	469e      	mov	lr, r3
 800bf96:	461f      	mov	r7, r3
 800bf98:	f04f 0900 	mov.w	r9, #0
 800bf9c:	2f00      	cmp	r7, #0
 800bf9e:	d146      	bne.n	800c02e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800bfa0:	449c      	add	ip, r3
 800bfa2:	1ad7      	subs	r7, r2, r3
 800bfa4:	f1b9 0f00 	cmp.w	r9, #0
 800bfa8:	d009      	beq.n	800bfbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800bfaa:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800bfae:	9039      	str	r0, [sp, #228]	@ 0xe4
 800bfb0:	913d      	str	r1, [sp, #244]	@ 0xf4
 800bfb2:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800bfb6:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800bfba:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800bfbe:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bfc0:	910e      	str	r1, [sp, #56]	@ 0x38
 800bfc2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800bfc6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800bfca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800bfce:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800bfd2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800bfd6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800bfda:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800bfde:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800bfe2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800bfe6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800bfea:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800bfee:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800bff2:	f04f 0800 	mov.w	r8, #0
 800bff6:	f1be 0f00 	cmp.w	lr, #0
 800bffa:	d030      	beq.n	800c05e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800bffc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bffe:	4431      	add	r1, r6
 800c000:	4549      	cmp	r1, r9
 800c002:	4450      	add	r0, sl
 800c004:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c008:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c00c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800c010:	db08      	blt.n	800c024 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800c012:	ee77 7a85 	vadd.f32	s15, s15, s10
 800c016:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c01a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c01e:	3001      	adds	r0, #1
 800c020:	eba1 0109 	sub.w	r1, r1, r9
 800c024:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c028:	f04f 0801 	mov.w	r8, #1
 800c02c:	e7e3      	b.n	800bff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800c02e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800c030:	4431      	add	r1, r6
 800c032:	4541      	cmp	r1, r8
 800c034:	4450      	add	r0, sl
 800c036:	ee37 7a24 	vadd.f32	s14, s14, s9
 800c03a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800c03e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800c042:	db08      	blt.n	800c056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800c044:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c048:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c04c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c050:	3001      	adds	r0, #1
 800c052:	eba1 0108 	sub.w	r1, r1, r8
 800c056:	3f01      	subs	r7, #1
 800c058:	f04f 0901 	mov.w	r9, #1
 800c05c:	e79e      	b.n	800bf9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800c05e:	449c      	add	ip, r3
 800c060:	1aff      	subs	r7, r7, r3
 800c062:	f1b8 0f00 	cmp.w	r8, #0
 800c066:	d009      	beq.n	800c07c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800c068:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800c06c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c06e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800c072:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800c076:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800c07a:	911d      	str	r1, [sp, #116]	@ 0x74
 800c07c:	1ad2      	subs	r2, r2, r3
 800c07e:	e6b5      	b.n	800bdec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800c080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	b923      	cbnz	r3, 800c090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c086:	4b04      	ldr	r3, [pc, #16]	@ (800c098 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800c088:	6818      	ldr	r0, [r3, #0]
 800c08a:	6803      	ldr	r3, [r0, #0]
 800c08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c08e:	4798      	blx	r3
 800c090:	b05b      	add	sp, #364	@ 0x16c
 800c092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c096:	bf00      	nop
 800c098:	20015444 	.word	0x20015444

0800c09c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800c09c:	b570      	push	{r4, r5, r6, lr}
 800c09e:	4604      	mov	r4, r0
 800c0a0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800c0a4:	9805      	ldr	r0, [sp, #20]
 800c0a6:	6061      	str	r1, [r4, #4]
 800c0a8:	2500      	movs	r5, #0
 800c0aa:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800c0ae:	8263      	strh	r3, [r4, #18]
 800c0b0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800c0b4:	8025      	strh	r5, [r4, #0]
 800c0b6:	7221      	strb	r1, [r4, #8]
 800c0b8:	7266      	strb	r6, [r4, #9]
 800c0ba:	60e0      	str	r0, [r4, #12]
 800c0bc:	8222      	strh	r2, [r4, #16]
 800c0be:	82a3      	strh	r3, [r4, #20]
 800c0c0:	82e5      	strh	r5, [r4, #22]
 800c0c2:	8325      	strh	r5, [r4, #24]
 800c0c4:	8365      	strh	r5, [r4, #26]
 800c0c6:	83a5      	strh	r5, [r4, #28]
 800c0c8:	83e5      	strh	r5, [r4, #30]
 800c0ca:	8425      	strh	r5, [r4, #32]
 800c0cc:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800c0d0:	b32e      	cbz	r6, 800c11e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c0d2:	6803      	ldr	r3, [r0, #0]
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	4798      	blx	r3
 800c0d8:	4606      	mov	r6, r0
 800c0da:	b300      	cbz	r0, 800c11e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c0dc:	68e0      	ldr	r0, [r4, #12]
 800c0de:	6803      	ldr	r3, [r0, #0]
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	4798      	blx	r3
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	b1c8      	cbz	r0, 800c11e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c0ea:	7b43      	ldrb	r3, [r0, #13]
 800c0ec:	7a82      	ldrb	r2, [r0, #10]
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	8423      	strh	r3, [r4, #32]
 800c0f8:	7a63      	ldrb	r3, [r4, #9]
 800c0fa:	2b06      	cmp	r3, #6
 800c0fc:	d10f      	bne.n	800c11e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c0fe:	68e0      	ldr	r0, [r4, #12]
 800c100:	6803      	ldr	r3, [r0, #0]
 800c102:	462a      	mov	r2, r5
 800c104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c106:	4631      	mov	r1, r6
 800c108:	4798      	blx	r3
 800c10a:	7b6b      	ldrb	r3, [r5, #13]
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c112:	7aab      	ldrb	r3, [r5, #10]
 800c114:	4313      	orrs	r3, r2
 800c116:	4418      	add	r0, r3
 800c118:	8c23      	ldrh	r3, [r4, #32]
 800c11a:	4418      	add	r0, r3
 800c11c:	8420      	strh	r0, [r4, #32]
 800c11e:	4620      	mov	r0, r4
 800c120:	bd70      	pop	{r4, r5, r6, pc}

0800c122 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800c122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c126:	2400      	movs	r4, #0
 800c128:	b085      	sub	sp, #20
 800c12a:	4681      	mov	r9, r0
 800c12c:	4688      	mov	r8, r1
 800c12e:	4692      	mov	sl, r2
 800c130:	469b      	mov	fp, r3
 800c132:	4627      	mov	r7, r4
 800c134:	4625      	mov	r5, r4
 800c136:	4626      	mov	r6, r4
 800c138:	4554      	cmp	r4, sl
 800c13a:	da2a      	bge.n	800c192 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c13c:	2300      	movs	r3, #0
 800c13e:	9303      	str	r3, [sp, #12]
 800c140:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c144:	429d      	cmp	r5, r3
 800c146:	d004      	beq.n	800c152 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800c148:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c14c:	429d      	cmp	r5, r3
 800c14e:	bf18      	it	ne
 800c150:	462f      	movne	r7, r5
 800c152:	ab03      	add	r3, sp, #12
 800c154:	4642      	mov	r2, r8
 800c156:	4659      	mov	r1, fp
 800c158:	4648      	mov	r0, r9
 800c15a:	f003 f81f 	bl	800f19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c15e:	4605      	mov	r5, r0
 800c160:	b1b8      	cbz	r0, 800c192 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c162:	280a      	cmp	r0, #10
 800c164:	d015      	beq.n	800c192 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c166:	9a03      	ldr	r2, [sp, #12]
 800c168:	b18a      	cbz	r2, 800c18e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800c16a:	7b50      	ldrb	r0, [r2, #13]
 800c16c:	7a93      	ldrb	r3, [r2, #10]
 800c16e:	8895      	ldrh	r5, [r2, #4]
 800c170:	0040      	lsls	r0, r0, #1
 800c172:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800c176:	4303      	orrs	r3, r0
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	f8d8 3000 	ldr.w	r3, [r8]
 800c17e:	4639      	mov	r1, r7
 800c180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c182:	4640      	mov	r0, r8
 800c184:	4798      	blx	r3
 800c186:	9b01      	ldr	r3, [sp, #4]
 800c188:	4418      	add	r0, r3
 800c18a:	4406      	add	r6, r0
 800c18c:	b2b6      	uxth	r6, r6
 800c18e:	3401      	adds	r4, #1
 800c190:	e7d2      	b.n	800c138 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800c192:	4630      	mov	r0, r6
 800c194:	b005      	add	sp, #20
 800c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c19a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800c19a:	2a02      	cmp	r2, #2
 800c19c:	b530      	push	{r4, r5, lr}
 800c19e:	d011      	beq.n	800c1c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800c1a0:	2a03      	cmp	r2, #3
 800c1a2:	d01c      	beq.n	800c1de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800c1a4:	2a01      	cmp	r2, #1
 800c1a6:	d10c      	bne.n	800c1c2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800c1a8:	888b      	ldrh	r3, [r1, #4]
 800c1aa:	8801      	ldrh	r1, [r0, #0]
 800c1ac:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c1b0:	8844      	ldrh	r4, [r0, #2]
 800c1b2:	8004      	strh	r4, [r0, #0]
 800c1b4:	1a5b      	subs	r3, r3, r1
 800c1b6:	1a9b      	subs	r3, r3, r2
 800c1b8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c1bc:	8043      	strh	r3, [r0, #2]
 800c1be:	8081      	strh	r1, [r0, #4]
 800c1c0:	80c2      	strh	r2, [r0, #6]
 800c1c2:	bd30      	pop	{r4, r5, pc}
 800c1c4:	88cb      	ldrh	r3, [r1, #6]
 800c1c6:	8842      	ldrh	r2, [r0, #2]
 800c1c8:	1a9b      	subs	r3, r3, r2
 800c1ca:	88c2      	ldrh	r2, [r0, #6]
 800c1cc:	1a9b      	subs	r3, r3, r2
 800c1ce:	888a      	ldrh	r2, [r1, #4]
 800c1d0:	8801      	ldrh	r1, [r0, #0]
 800c1d2:	8043      	strh	r3, [r0, #2]
 800c1d4:	1a52      	subs	r2, r2, r1
 800c1d6:	8881      	ldrh	r1, [r0, #4]
 800c1d8:	1a52      	subs	r2, r2, r1
 800c1da:	8002      	strh	r2, [r0, #0]
 800c1dc:	e7f1      	b.n	800c1c2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800c1de:	88cb      	ldrh	r3, [r1, #6]
 800c1e0:	8841      	ldrh	r1, [r0, #2]
 800c1e2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800c1e6:	f9b0 5000 	ldrsh.w	r5, [r0]
 800c1ea:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c1ee:	8045      	strh	r5, [r0, #2]
 800c1f0:	1a5b      	subs	r3, r3, r1
 800c1f2:	1a9b      	subs	r3, r3, r2
 800c1f4:	8003      	strh	r3, [r0, #0]
 800c1f6:	8082      	strh	r2, [r0, #4]
 800c1f8:	80c4      	strh	r4, [r0, #6]
 800c1fa:	e7e2      	b.n	800c1c2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800c1fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c200:	b09f      	sub	sp, #124	@ 0x7c
 800c202:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c204:	9312      	str	r3, [sp, #72]	@ 0x48
 800c206:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c208:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c20a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800c20c:	8812      	ldrh	r2, [r2, #0]
 800c20e:	889b      	ldrh	r3, [r3, #4]
 800c210:	900e      	str	r0, [sp, #56]	@ 0x38
 800c212:	4413      	add	r3, r2
 800c214:	6828      	ldr	r0, [r5, #0]
 800c216:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c218:	b21b      	sxth	r3, r3
 800c21a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c21c:	6803      	ldr	r3, [r0, #0]
 800c21e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800c222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c224:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800c228:	4798      	blx	r3
 800c22a:	682b      	ldr	r3, [r5, #0]
 800c22c:	9013      	str	r0, [sp, #76]	@ 0x4c
 800c22e:	7b1a      	ldrb	r2, [r3, #12]
 800c230:	7adb      	ldrb	r3, [r3, #11]
 800c232:	9215      	str	r2, [sp, #84]	@ 0x54
 800c234:	9316      	str	r3, [sp, #88]	@ 0x58
 800c236:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800c23a:	2c00      	cmp	r4, #0
 800c23c:	d067      	beq.n	800c30e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800c23e:	7c2b      	ldrb	r3, [r5, #16]
 800c240:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800c242:	2b06      	cmp	r3, #6
 800c244:	bf14      	ite	ne
 800c246:	2301      	movne	r3, #1
 800c248:	2302      	moveq	r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	f04f 0900 	mov.w	r9, #0
 800c250:	9310      	str	r3, [sp, #64]	@ 0x40
 800c252:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800c256:	464c      	mov	r4, r9
 800c258:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800c25c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c25e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c260:	4293      	cmp	r3, r2
 800c262:	f280 808b 	bge.w	800c37c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800c266:	2300      	movs	r3, #0
 800c268:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800c26c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800c270:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c274:	429c      	cmp	r4, r3
 800c276:	d006      	beq.n	800c286 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800c278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c27a:	f242 020b 	movw	r2, #8203	@ 0x200b
 800c27e:	4294      	cmp	r4, r2
 800c280:	bf18      	it	ne
 800c282:	4623      	movne	r3, r4
 800c284:	930c      	str	r3, [sp, #48]	@ 0x30
 800c286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c288:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800c28a:	682a      	ldr	r2, [r5, #0]
 800c28c:	428b      	cmp	r3, r1
 800c28e:	db40      	blt.n	800c312 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800c290:	6813      	ldr	r3, [r2, #0]
 800c292:	4610      	mov	r0, r2
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	4798      	blx	r3
 800c298:	4604      	mov	r4, r0
 800c29a:	6828      	ldr	r0, [r5, #0]
 800c29c:	6803      	ldr	r3, [r0, #0]
 800c29e:	aa1d      	add	r2, sp, #116	@ 0x74
 800c2a0:	689f      	ldr	r7, [r3, #8]
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800c2a8:	47b8      	blx	r7
 800c2aa:	901c      	str	r0, [sp, #112]	@ 0x70
 800c2ac:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c2b0:	429c      	cmp	r4, r3
 800c2b2:	f000 80ea 	beq.w	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c2b6:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c2ba:	429c      	cmp	r4, r3
 800c2bc:	f000 80e5 	beq.w	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c2c0:	2c00      	cmp	r4, #0
 800c2c2:	f000 810c 	beq.w	800c4de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c2c6:	2c0a      	cmp	r4, #10
 800c2c8:	d05e      	beq.n	800c388 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800c2ca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c2cc:	b36a      	cbz	r2, 800c32a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800c2ce:	8894      	ldrh	r4, [r2, #4]
 800c2d0:	f1bb 0f00 	cmp.w	fp, #0
 800c2d4:	d03a      	beq.n	800c34c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800c2d6:	f892 900d 	ldrb.w	r9, [r2, #13]
 800c2da:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800c2de:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800c2e2:	f892 900a 	ldrb.w	r9, [r2, #10]
 800c2e6:	f1bb 0f01 	cmp.w	fp, #1
 800c2ea:	ea49 0903 	orr.w	r9, r9, r3
 800c2ee:	d133      	bne.n	800c358 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800c2f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2f2:	eba6 0609 	sub.w	r6, r6, r9
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d14d      	bne.n	800c396 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800c2fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c2fc:	eb09 0306 	add.w	r3, r9, r6
 800c300:	4413      	add	r3, r2
 800c302:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c304:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c308:	4293      	cmp	r3, r2
 800c30a:	da4e      	bge.n	800c3aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800c30c:	e036      	b.n	800c37c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800c30e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c310:	e79c      	b.n	800c24c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800c312:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	ab1d      	add	r3, sp, #116	@ 0x74
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	4659      	mov	r1, fp
 800c31e:	ab1c      	add	r3, sp, #112	@ 0x70
 800c320:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800c322:	f002 ff84 	bl	800f22e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800c326:	4604      	mov	r4, r0
 800c328:	e7c0      	b.n	800c2ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800c32a:	6828      	ldr	r0, [r5, #0]
 800c32c:	6803      	ldr	r3, [r0, #0]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	4798      	blx	r3
 800c332:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c336:	4298      	cmp	r0, r3
 800c338:	f000 80a7 	beq.w	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c33c:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c340:	4298      	cmp	r0, r3
 800c342:	f000 80a2 	beq.w	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c346:	f1bb 0f00 	cmp.w	fp, #0
 800c34a:	d100      	bne.n	800c34e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800c34c:	444e      	add	r6, r9
 800c34e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c350:	2a00      	cmp	r2, #0
 800c352:	d1c0      	bne.n	800c2d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800c354:	4691      	mov	r9, r2
 800c356:	e098      	b.n	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f000 80c1 	beq.w	800c4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800c360:	f1bb 0f00 	cmp.w	fp, #0
 800c364:	d117      	bne.n	800c396 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800c366:	6828      	ldr	r0, [r5, #0]
 800c368:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c36a:	6803      	ldr	r3, [r0, #0]
 800c36c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c36e:	4798      	blx	r3
 800c370:	4406      	add	r6, r0
 800c372:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c374:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c376:	1af3      	subs	r3, r6, r3
 800c378:	4293      	cmp	r3, r2
 800c37a:	dd16      	ble.n	800c3aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800c37c:	2c00      	cmp	r4, #0
 800c37e:	f000 80ae 	beq.w	800c4de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c382:	2c0a      	cmp	r4, #10
 800c384:	f040 809c 	bne.w	800c4c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800c388:	240a      	movs	r4, #10
 800c38a:	fab4 f084 	clz	r0, r4
 800c38e:	0940      	lsrs	r0, r0, #5
 800c390:	b01f      	add	sp, #124	@ 0x7c
 800c392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c396:	6828      	ldr	r0, [r5, #0]
 800c398:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c39a:	6803      	ldr	r3, [r0, #0]
 800c39c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c39e:	4798      	blx	r3
 800c3a0:	f1bb 0f01 	cmp.w	fp, #1
 800c3a4:	eba6 0600 	sub.w	r6, r6, r0
 800c3a8:	d0a7      	beq.n	800c2fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800c3aa:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800c3ac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c3ae:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800c3b2:	f9b3 8000 	ldrsh.w	r8, [r3]
 800c3b6:	7b43      	ldrb	r3, [r0, #13]
 800c3b8:	015b      	lsls	r3, r3, #5
 800c3ba:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c3be:	7983      	ldrb	r3, [r0, #6]
 800c3c0:	4431      	add	r1, r6
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	440b      	add	r3, r1
 800c3c6:	4543      	cmp	r3, r8
 800c3c8:	db5f      	blt.n	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c3ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	da5c      	bge.n	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c3d0:	6828      	ldr	r0, [r5, #0]
 800c3d2:	6803      	ldr	r3, [r0, #0]
 800c3d4:	45b0      	cmp	r8, r6
 800c3d6:	bfc8      	it	gt
 800c3d8:	eba8 0806 	subgt.w	r8, r8, r6
 800c3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3de:	bfcc      	ite	gt
 800c3e0:	fa1f f888 	uxthgt.w	r8, r8
 800c3e4:	f04f 0800 	movle.w	r8, #0
 800c3e8:	4798      	blx	r3
 800c3ea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c3ec:	7b53      	ldrb	r3, [r2, #13]
 800c3ee:	00d9      	lsls	r1, r3, #3
 800c3f0:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800c3f4:	7a11      	ldrb	r1, [r2, #8]
 800c3f6:	4339      	orrs	r1, r7
 800c3f8:	065f      	lsls	r7, r3, #25
 800c3fa:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c3fc:	bf44      	itt	mi
 800c3fe:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800c402:	b209      	sxthmi	r1, r1
 800c404:	19c7      	adds	r7, r0, r7
 800c406:	1a7f      	subs	r7, r7, r1
 800c408:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800c40a:	b2bf      	uxth	r7, r7
 800c40c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800c410:	fa0f fa87 	sxth.w	sl, r7
 800c414:	4551      	cmp	r1, sl
 800c416:	dd3c      	ble.n	800c492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800c418:	011b      	lsls	r3, r3, #4
 800c41a:	79d0      	ldrb	r0, [r2, #7]
 800c41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c420:	4303      	orrs	r3, r0
 800c422:	449a      	add	sl, r3
 800c424:	4551      	cmp	r1, sl
 800c426:	dc30      	bgt.n	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c428:	1bcf      	subs	r7, r1, r7
 800c42a:	b23f      	sxth	r7, r7
 800c42c:	468a      	mov	sl, r1
 800c42e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c430:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c432:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c434:	6828      	ldr	r0, [r5, #0]
 800c436:	2a00      	cmp	r2, #0
 800c438:	d12d      	bne.n	800c496 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800c43a:	9318      	str	r3, [sp, #96]	@ 0x60
 800c43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c43e:	6819      	ldr	r1, [r3, #0]
 800c440:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800c442:	6801      	ldr	r1, [r0, #0]
 800c444:	9314      	str	r3, [sp, #80]	@ 0x50
 800c446:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c448:	4788      	blx	r1
 800c44a:	79a9      	ldrb	r1, [r5, #6]
 800c44c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c44e:	7ba9      	ldrb	r1, [r5, #14]
 800c450:	910a      	str	r1, [sp, #40]	@ 0x28
 800c452:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800c456:	9109      	str	r1, [sp, #36]	@ 0x24
 800c458:	68a9      	ldr	r1, [r5, #8]
 800c45a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c45c:	9306      	str	r3, [sp, #24]
 800c45e:	b2bf      	uxth	r7, r7
 800c460:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800c464:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c466:	9304      	str	r3, [sp, #16]
 800c468:	44b0      	add	r8, r6
 800c46a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800c46e:	fa0f f388 	sxth.w	r3, r8
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c478:	9205      	str	r2, [sp, #20]
 800c47a:	f8cd a004 	str.w	sl, [sp, #4]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c486:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800c488:	47b8      	blx	r7
 800c48a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c48c:	3301      	adds	r3, #1
 800c48e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c490:	e6e4      	b.n	800c25c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800c492:	2700      	movs	r7, #0
 800c494:	e7cb      	b.n	800c42e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800c496:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c498:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c49c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c49e:	f8dc 1000 	ldr.w	r1, [ip]
 800c4a2:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800c4a6:	79aa      	ldrb	r2, [r5, #6]
 800c4a8:	9203      	str	r2, [sp, #12]
 800c4aa:	7baa      	ldrb	r2, [r5, #14]
 800c4ac:	9202      	str	r2, [sp, #8]
 800c4ae:	68aa      	ldr	r2, [r5, #8]
 800c4b0:	e9cd 0200 	strd	r0, r2, [sp]
 800c4b4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c4b6:	688f      	ldr	r7, [r1, #8]
 800c4b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c4ba:	4660      	mov	r0, ip
 800c4bc:	47b8      	blx	r7
 800c4be:	e7e4      	b.n	800c48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c4c0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c4c2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c4c4:	3501      	adds	r5, #1
 800c4c6:	429d      	cmp	r5, r3
 800c4c8:	f6bf af5f 	bge.w	800c38a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800c4cc:	4659      	mov	r1, fp
 800c4ce:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800c4d0:	f7f7 fb68 	bl	8003ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	b110      	cbz	r0, 800c4de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c4d8:	280a      	cmp	r0, #10
 800c4da:	d1f2      	bne.n	800c4c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800c4dc:	e754      	b.n	800c388 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800c4de:	2400      	movs	r4, #0
 800c4e0:	e753      	b.n	800c38a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800c4e2:	f1bb 0f00 	cmp.w	fp, #0
 800c4e6:	f43f af44 	beq.w	800c372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800c4ea:	e75e      	b.n	800c3aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800c4ec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800c4ec:	b530      	push	{r4, r5, lr}
 800c4ee:	8ac4      	ldrh	r4, [r0, #22]
 800c4f0:	8b45      	ldrh	r5, [r0, #26]
 800c4f2:	8343      	strh	r3, [r0, #26]
 800c4f4:	442c      	add	r4, r5
 800c4f6:	1ae4      	subs	r4, r4, r3
 800c4f8:	82c4      	strh	r4, [r0, #22]
 800c4fa:	8b83      	ldrh	r3, [r0, #28]
 800c4fc:	8b04      	ldrh	r4, [r0, #24]
 800c4fe:	4422      	add	r2, r4
 800c500:	440c      	add	r4, r1
 800c502:	1a59      	subs	r1, r3, r1
 800c504:	83c2      	strh	r2, [r0, #30]
 800c506:	8304      	strh	r4, [r0, #24]
 800c508:	8381      	strh	r1, [r0, #28]
 800c50a:	bd30      	pop	{r4, r5, pc}

0800c50c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800c50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c510:	4604      	mov	r4, r0
 800c512:	8a47      	ldrh	r7, [r0, #18]
 800c514:	68c0      	ldr	r0, [r0, #12]
 800c516:	6803      	ldr	r3, [r0, #0]
 800c518:	b085      	sub	sp, #20
 800c51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c51c:	4798      	blx	r3
 800c51e:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800c522:	7a63      	ldrb	r3, [r4, #9]
 800c524:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800c528:	42b7      	cmp	r7, r6
 800c52a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c52e:	bfac      	ite	ge
 800c530:	f04f 0900 	movge.w	r9, #0
 800c534:	f04f 0901 	movlt.w	r9, #1
 800c538:	2b05      	cmp	r3, #5
 800c53a:	d804      	bhi.n	800c546 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800c53c:	e8df f003 	tbb	[pc, r3]
 800c540:	470e0854 	.word	0x470e0854
 800c544:	4c4c      	.short	0x4c4c
 800c546:	2500      	movs	r5, #0
 800c548:	46a9      	mov	r9, r5
 800c54a:	462e      	mov	r6, r5
 800c54c:	462f      	mov	r7, r5
 800c54e:	e00d      	b.n	800c56c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c550:	42b7      	cmp	r7, r6
 800c552:	bfb4      	ite	lt
 800c554:	2600      	movlt	r6, #0
 800c556:	2601      	movge	r6, #1
 800c558:	2500      	movs	r5, #0
 800c55a:	e7f7      	b.n	800c54c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c55c:	42b7      	cmp	r7, r6
 800c55e:	464d      	mov	r5, r9
 800c560:	f04f 0900 	mov.w	r9, #0
 800c564:	bfb4      	ite	lt
 800c566:	2600      	movlt	r6, #0
 800c568:	2601      	movge	r6, #1
 800c56a:	464f      	mov	r7, r9
 800c56c:	f04f 0800 	mov.w	r8, #0
 800c570:	f8a4 8016 	strh.w	r8, [r4, #22]
 800c574:	f8a4 8018 	strh.w	r8, [r4, #24]
 800c578:	f8cd 8004 	str.w	r8, [sp, #4]
 800c57c:	2300      	movs	r3, #0
 800c57e:	9303      	str	r3, [sp, #12]
 800c580:	8823      	ldrh	r3, [r4, #0]
 800c582:	2b20      	cmp	r3, #32
 800c584:	d034      	beq.n	800c5f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800c586:	f242 010b 	movw	r1, #8203	@ 0x200b
 800c58a:	1a5a      	subs	r2, r3, r1
 800c58c:	f1d2 0a00 	rsbs	sl, r2, #0
 800c590:	eb4a 0a02 	adc.w	sl, sl, r2
 800c594:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800c598:	4293      	cmp	r3, r2
 800c59a:	d009      	beq.n	800c5b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c59c:	428b      	cmp	r3, r1
 800c59e:	9a01      	ldr	r2, [sp, #4]
 800c5a0:	bf18      	it	ne
 800c5a2:	461a      	movne	r2, r3
 800c5a4:	9201      	str	r2, [sp, #4]
 800c5a6:	bf0c      	ite	eq
 800c5a8:	f04f 0a01 	moveq.w	sl, #1
 800c5ac:	f04f 0a00 	movne.w	sl, #0
 800c5b0:	ab03      	add	r3, sp, #12
 800c5b2:	68e2      	ldr	r2, [r4, #12]
 800c5b4:	7a21      	ldrb	r1, [r4, #8]
 800c5b6:	6860      	ldr	r0, [r4, #4]
 800c5b8:	f002 fdf0 	bl	800f19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c5bc:	8020      	strh	r0, [r4, #0]
 800c5be:	b9d8      	cbnz	r0, 800c5f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800c5c0:	8ba2      	ldrh	r2, [r4, #28]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f7ff ff90 	bl	800c4ec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c5cc:	e06e      	b.n	800c6ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c5ce:	2500      	movs	r5, #0
 800c5d0:	46a9      	mov	r9, r5
 800c5d2:	462e      	mov	r6, r5
 800c5d4:	2701      	movs	r7, #1
 800c5d6:	e7c9      	b.n	800c56c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c5d8:	42b7      	cmp	r7, r6
 800c5da:	f04f 0500 	mov.w	r5, #0
 800c5de:	bfb4      	ite	lt
 800c5e0:	2700      	movlt	r7, #0
 800c5e2:	2701      	movge	r7, #1
 800c5e4:	462e      	mov	r6, r5
 800c5e6:	e7c1      	b.n	800c56c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c5e8:	2500      	movs	r5, #0
 800c5ea:	46a9      	mov	r9, r5
 800c5ec:	2601      	movs	r6, #1
 800c5ee:	e7ad      	b.n	800c54c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c5f0:	9301      	str	r3, [sp, #4]
 800c5f2:	f04f 0a01 	mov.w	sl, #1
 800c5f6:	e7db      	b.n	800c5b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c5f8:	8b63      	ldrh	r3, [r4, #26]
 800c5fa:	280a      	cmp	r0, #10
 800c5fc:	f103 0301 	add.w	r3, r3, #1
 800c600:	8363      	strh	r3, [r4, #26]
 800c602:	d0dd      	beq.n	800c5c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800c604:	9a03      	ldr	r2, [sp, #12]
 800c606:	bb62      	cbnz	r2, 800c662 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800c608:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c60c:	4298      	cmp	r0, r3
 800c60e:	d003      	beq.n	800c618 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c610:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c614:	4298      	cmp	r0, r3
 800c616:	d1b1      	bne.n	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c618:	8823      	ldrh	r3, [r4, #0]
 800c61a:	8ba1      	ldrh	r1, [r4, #28]
 800c61c:	2b20      	cmp	r3, #32
 800c61e:	d003      	beq.n	800c628 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800c620:	f242 000b 	movw	r0, #8203	@ 0x200b
 800c624:	4283      	cmp	r3, r0
 800c626:	d131      	bne.n	800c68c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800c628:	f1ba 0f00 	cmp.w	sl, #0
 800c62c:	bf0a      	itet	eq
 800c62e:	4688      	moveq	r8, r1
 800c630:	4650      	movne	r0, sl
 800c632:	2001      	moveq	r0, #1
 800c634:	440a      	add	r2, r1
 800c636:	8b23      	ldrh	r3, [r4, #24]
 800c638:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800c63c:	b292      	uxth	r2, r2
 800c63e:	83a2      	strh	r2, [r4, #28]
 800c640:	4413      	add	r3, r2
 800c642:	f1b9 0f00 	cmp.w	r9, #0
 800c646:	d102      	bne.n	800c64e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800c648:	2d00      	cmp	r5, #0
 800c64a:	d042      	beq.n	800c6d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800c64c:	b300      	cbz	r0, 800c690 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800c64e:	8c21      	ldrh	r1, [r4, #32]
 800c650:	4419      	add	r1, r3
 800c652:	458c      	cmp	ip, r1
 800c654:	da37      	bge.n	800c6c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c656:	8ae1      	ldrh	r1, [r4, #22]
 800c658:	2900      	cmp	r1, #0
 800c65a:	d034      	beq.n	800c6c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c65c:	4563      	cmp	r3, ip
 800c65e:	dd8d      	ble.n	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c660:	e01d      	b.n	800c69e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800c662:	8893      	ldrh	r3, [r2, #4]
 800c664:	8023      	strh	r3, [r4, #0]
 800c666:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800c66a:	9901      	ldr	r1, [sp, #4]
 800c66c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c670:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800c674:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800c678:	ea4b 0b00 	orr.w	fp, fp, r0
 800c67c:	68e0      	ldr	r0, [r4, #12]
 800c67e:	6803      	ldr	r3, [r0, #0]
 800c680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c682:	4798      	blx	r3
 800c684:	eb0b 0200 	add.w	r2, fp, r0
 800c688:	b292      	uxth	r2, r2
 800c68a:	e7c5      	b.n	800c618 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c68c:	2000      	movs	r0, #0
 800c68e:	e7d1      	b.n	800c634 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800c690:	4563      	cmp	r3, ip
 800c692:	f77f af73 	ble.w	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c696:	8ae3      	ldrh	r3, [r4, #22]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f43f af6f 	beq.w	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800c6a4:	8c22      	ldrh	r2, [r4, #32]
 800c6a6:	8be3      	ldrh	r3, [r4, #30]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	83e3      	strh	r3, [r4, #30]
 800c6ac:	68e0      	ldr	r0, [r4, #12]
 800c6ae:	6803      	ldr	r3, [r0, #0]
 800c6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6b2:	4798      	blx	r3
 800c6b4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800c6b8:	4418      	add	r0, r3
 800c6ba:	8a63      	ldrh	r3, [r4, #18]
 800c6bc:	1a18      	subs	r0, r3, r0
 800c6be:	8260      	strh	r0, [r4, #18]
 800c6c0:	b005      	add	sp, #20
 800c6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f7ff ff0e 	bl	800c4ec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c6d0:	e754      	b.n	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c6d2:	4563      	cmp	r3, ip
 800c6d4:	dd14      	ble.n	800c700 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800c6d6:	b117      	cbz	r7, 800c6de <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	460a      	mov	r2, r1
 800c6dc:	e772      	b.n	800c5c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800c6de:	2e00      	cmp	r6, #0
 800c6e0:	f43f af4c 	beq.w	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	f47f af49 	bne.w	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c6ea:	f1ba 0f00 	cmp.w	sl, #0
 800c6ee:	d002      	beq.n	800c6f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	4642      	mov	r2, r8
 800c6f4:	e767      	b.n	800c5c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800c6f6:	8ae3      	ldrh	r3, [r4, #22]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f43f af3f 	beq.w	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c6fe:	e7d5      	b.n	800c6ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c700:	2800      	cmp	r0, #0
 800c702:	f47f af3b 	bne.w	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c706:	f1ba 0f00 	cmp.w	sl, #0
 800c70a:	f43f af37 	beq.w	800c57c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c70e:	2301      	movs	r3, #1
 800c710:	4642      	mov	r2, r8
 800c712:	e7da      	b.n	800c6ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800c714 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800c714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c716:	4605      	mov	r5, r0
 800c718:	b08f      	sub	sp, #60	@ 0x3c
 800c71a:	4617      	mov	r7, r2
 800c71c:	461c      	mov	r4, r3
 800c71e:	460e      	mov	r6, r1
 800c720:	b1d1      	cbz	r1, 800c758 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4620      	mov	r0, r4
 800c726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c728:	4798      	blx	r3
 800c72a:	4240      	negs	r0, r0
 800c72c:	b200      	sxth	r0, r0
 800c72e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c732:	9603      	str	r6, [sp, #12]
 800c734:	9700      	str	r7, [sp, #0]
 800c736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c73a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800c73e:	4629      	mov	r1, r5
 800c740:	a805      	add	r0, sp, #20
 800c742:	f7ff fcab 	bl	800c09c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c746:	2401      	movs	r4, #1
 800c748:	a805      	add	r0, sp, #20
 800c74a:	f7ff fedf 	bl	800c50c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c74e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c752:	b163      	cbz	r3, 800c76e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800c754:	3401      	adds	r4, #1
 800c756:	e7f7      	b.n	800c748 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800c758:	f002 fdee 	bl	800f338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c75c:	2401      	movs	r4, #1
 800c75e:	280a      	cmp	r0, #10
 800c760:	4628      	mov	r0, r5
 800c762:	bf08      	it	eq
 800c764:	3401      	addeq	r4, #1
 800c766:	f002 fde7 	bl	800f338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d1f7      	bne.n	800c75e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800c76e:	b2a0      	uxth	r0, r4
 800c770:	b00f      	add	sp, #60	@ 0x3c
 800c772:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c774 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800c774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c778:	b0e3      	sub	sp, #396	@ 0x18c
 800c77a:	461c      	mov	r4, r3
 800c77c:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 800c77e:	4683      	mov	fp, r0
 800c780:	4688      	mov	r8, r1
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 8112 	beq.w	800c9ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f000 810e 	beq.w	800c9ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c790:	7ba3      	ldrb	r3, [r4, #14]
 800c792:	2b00      	cmp	r3, #0
 800c794:	f000 810a 	beq.w	800c9ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c798:	6810      	ldr	r0, [r2, #0]
 800c79a:	6851      	ldr	r1, [r2, #4]
 800c79c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800c7a0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800c7a4:	ad0a      	add	r5, sp, #40	@ 0x28
 800c7a6:	462b      	mov	r3, r5
 800c7a8:	c303      	stmia	r3!, {r0, r1}
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800c7b0:	910c      	str	r1, [sp, #48]	@ 0x30
 800c7b2:	79a2      	ldrb	r2, [r4, #6]
 800c7b4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c7b8:	a90c      	add	r1, sp, #48	@ 0x30
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f7ff fced 	bl	800c19a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c7c0:	a90c      	add	r1, sp, #48	@ 0x30
 800c7c2:	4608      	mov	r0, r1
 800c7c4:	79a2      	ldrb	r2, [r4, #6]
 800c7c6:	f7ff fce8 	bl	800c19a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c7ca:	a817      	add	r0, sp, #92	@ 0x5c
 800c7cc:	f002 f95f 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800c7d0:	6820      	ldr	r0, [r4, #0]
 800c7d2:	6803      	ldr	r3, [r0, #0]
 800c7d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7d6:	4798      	blx	r3
 800c7d8:	4606      	mov	r6, r0
 800c7da:	6820      	ldr	r0, [r4, #0]
 800c7dc:	6803      	ldr	r3, [r0, #0]
 800c7de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7e0:	4798      	blx	r3
 800c7e2:	4633      	mov	r3, r6
 800c7e4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800c7e6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800c7e8:	9000      	str	r0, [sp, #0]
 800c7ea:	a817      	add	r0, sp, #92	@ 0x5c
 800c7ec:	f002 f9aa 	bl	800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c7f0:	6820      	ldr	r0, [r4, #0]
 800c7f2:	f894 a004 	ldrb.w	sl, [r4, #4]
 800c7f6:	6803      	ldr	r3, [r0, #0]
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7fa:	4798      	blx	r3
 800c7fc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	4607      	mov	r7, r0
 800c804:	4406      	add	r6, r0
 800c806:	a830      	add	r0, sp, #192	@ 0xc0
 800c808:	f893 9009 	ldrb.w	r9, [r3, #9]
 800c80c:	f002 f93f 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800c810:	7c23      	ldrb	r3, [r4, #16]
 800c812:	b17b      	cbz	r3, 800c834 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 800c814:	6820      	ldr	r0, [r4, #0]
 800c816:	6803      	ldr	r3, [r0, #0]
 800c818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c81a:	4798      	blx	r3
 800c81c:	9009      	str	r0, [sp, #36]	@ 0x24
 800c81e:	6820      	ldr	r0, [r4, #0]
 800c820:	6802      	ldr	r2, [r0, #0]
 800c822:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c824:	4790      	blx	r2
 800c826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c828:	9000      	str	r0, [sp, #0]
 800c82a:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800c82c:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800c82e:	a830      	add	r0, sp, #192	@ 0xc0
 800c830:	f002 f988 	bl	800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c834:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800c838:	7be2      	ldrb	r2, [r4, #15]
 800c83a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c83e:	1a8a      	subs	r2, r1, r2
 800c840:	7c21      	ldrb	r1, [r4, #16]
 800c842:	9103      	str	r1, [sp, #12]
 800c844:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800c848:	9102      	str	r1, [sp, #8]
 800c84a:	6821      	ldr	r1, [r4, #0]
 800c84c:	9101      	str	r1, [sp, #4]
 800c84e:	7961      	ldrb	r1, [r4, #5]
 800c850:	9100      	str	r1, [sp, #0]
 800c852:	b292      	uxth	r2, r2
 800c854:	a930      	add	r1, sp, #192	@ 0xc0
 800c856:	a80e      	add	r0, sp, #56	@ 0x38
 800c858:	f7ff fc20 	bl	800c09c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c85c:	2e00      	cmp	r6, #0
 800c85e:	dc5b      	bgt.n	800c918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c860:	af17      	add	r7, sp, #92	@ 0x5c
 800c862:	f04f 0900 	mov.w	r9, #0
 800c866:	7c23      	ldrb	r3, [r4, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f000 80b1 	beq.w	800c9d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800c86e:	a80e      	add	r0, sp, #56	@ 0x38
 800c870:	f7ff fe4c 	bl	800c50c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c874:	f1ba 0f00 	cmp.w	sl, #0
 800c878:	f000 80a5 	beq.w	800c9c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800c87c:	7c23      	ldrb	r3, [r4, #16]
 800c87e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c880:	2264      	movs	r2, #100	@ 0x64
 800c882:	4639      	mov	r1, r7
 800c884:	a849      	add	r0, sp, #292	@ 0x124
 800c886:	f006 fe3a 	bl	80134fe <memcpy>
 800c88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 80a7 	beq.w	800c9e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800c892:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800c896:	7922      	ldrb	r2, [r4, #4]
 800c898:	2a01      	cmp	r2, #1
 800c89a:	f040 808a 	bne.w	800c9b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 800c89e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 800c8a2:	1ac0      	subs	r0, r0, r3
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	fb90 f0f3 	sdiv	r0, r0, r3
 800c8aa:	b200      	sxth	r0, r0
 800c8ac:	7c23      	ldrb	r3, [r4, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f000 808b 	beq.w	800c9ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800c8b4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 800c8b8:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 800c8bc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c8c0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800c8c4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800c8c8:	4410      	add	r0, r2
 800c8ca:	b200      	sxth	r0, r0
 800c8cc:	9000      	str	r0, [sp, #0]
 800c8ce:	e9cd 9703 	strd	r9, r7, [sp, #12]
 800c8d2:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800c8d6:	4642      	mov	r2, r8
 800c8d8:	2100      	movs	r1, #0
 800c8da:	4658      	mov	r0, fp
 800c8dc:	f7ff fc8e 	bl	800c1fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d163      	bne.n	800c9ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c8e4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c8e8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800c8ec:	b2b2      	uxth	r2, r6
 800c8ee:	4413      	add	r3, r2
 800c8f0:	1a8a      	subs	r2, r1, r2
 800c8f2:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800c8f6:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 800c8fa:	b21b      	sxth	r3, r3
 800c8fc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c900:	2a00      	cmp	r2, #0
 800c902:	d153      	bne.n	800c9ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c904:	6822      	ldr	r2, [r4, #0]
 800c906:	8869      	ldrh	r1, [r5, #2]
 800c908:	7a12      	ldrb	r2, [r2, #8]
 800c90a:	1a9b      	subs	r3, r3, r2
 800c90c:	88ea      	ldrh	r2, [r5, #6]
 800c90e:	440a      	add	r2, r1
 800c910:	b212      	sxth	r2, r2
 800c912:	4293      	cmp	r3, r2
 800c914:	dda7      	ble.n	800c866 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 800c916:	e049      	b.n	800c9ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c918:	7c23      	ldrb	r3, [r4, #16]
 800c91a:	444f      	add	r7, r9
 800c91c:	b1c3      	cbz	r3, 800c950 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 800c91e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800c922:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c926:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c92a:	443b      	add	r3, r7
 800c92c:	4293      	cmp	r3, r2
 800c92e:	da97      	bge.n	800c860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800c930:	a80e      	add	r0, sp, #56	@ 0x38
 800c932:	f7ff fdeb 	bl	800c50c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c936:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 800c93a:	3b01      	subs	r3, #1
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	454b      	cmp	r3, r9
 800c940:	9309      	str	r3, [sp, #36]	@ 0x24
 800c942:	d021      	beq.n	800c988 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 800c944:	7961      	ldrb	r1, [r4, #5]
 800c946:	a817      	add	r0, sp, #92	@ 0x5c
 800c948:	f7f7 f92c 	bl	8003ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c94e:	e7f4      	b.n	800c93a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 800c950:	fa1f f986 	uxth.w	r9, r6
 800c954:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c958:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c95c:	443b      	add	r3, r7
 800c95e:	4293      	cmp	r3, r2
 800c960:	f6bf af7e 	bge.w	800c860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800c964:	a817      	add	r0, sp, #92	@ 0x5c
 800c966:	f002 fce7 	bl	800f338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c96a:	b1f8      	cbz	r0, 800c9ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c96c:	280a      	cmp	r0, #10
 800c96e:	d1f1      	bne.n	800c954 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800c970:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c974:	444b      	add	r3, r9
 800c976:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c97a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c97e:	eba3 0309 	sub.w	r3, r3, r9
 800c982:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c986:	e7e5      	b.n	800c954 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800c988:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800c98c:	b2b3      	uxth	r3, r6
 800c98e:	441a      	add	r2, r3
 800c990:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800c994:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c99e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800c9a2:	b11b      	cbz	r3, 800c9ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c9a4:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d0ba      	beq.n	800c922 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 800c9ac:	b063      	add	sp, #396	@ 0x18c
 800c9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b2:	2a02      	cmp	r2, #2
 800c9b4:	d105      	bne.n	800c9c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 800c9b6:	7be2      	ldrb	r2, [r4, #15]
 800c9b8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800c9bc:	1a80      	subs	r0, r0, r2
 800c9be:	1ac0      	subs	r0, r0, r3
 800c9c0:	e773      	b.n	800c8aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	e772      	b.n	800c8ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800c9c6:	7be0      	ldrb	r0, [r4, #15]
 800c9c8:	e770      	b.n	800c8ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800c9ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c9ce:	e773      	b.n	800c8b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 800c9d0:	f1ba 0f00 	cmp.w	sl, #0
 800c9d4:	d0f7      	beq.n	800c9c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800c9d6:	2264      	movs	r2, #100	@ 0x64
 800c9d8:	4639      	mov	r1, r7
 800c9da:	a849      	add	r0, sp, #292	@ 0x124
 800c9dc:	f006 fd8f 	bl	80134fe <memcpy>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c9e6:	6821      	ldr	r1, [r4, #0]
 800c9e8:	a849      	add	r0, sp, #292	@ 0x124
 800c9ea:	f7ff fb9a 	bl	800c122 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800c9ee:	b203      	sxth	r3, r0
 800c9f0:	e751      	b.n	800c896 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0800c9f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800c9f2:	2b03      	cmp	r3, #3
 800c9f4:	d818      	bhi.n	800ca28 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800c9f6:	e8df f003 	tbb	[pc, r3]
 800c9fa:	0602      	.short	0x0602
 800c9fc:	130d      	.short	0x130d
 800c9fe:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ca02:	1850      	adds	r0, r2, r1
 800ca04:	4770      	bx	lr
 800ca06:	8803      	ldrh	r3, [r0, #0]
 800ca08:	8880      	ldrh	r0, [r0, #4]
 800ca0a:	4418      	add	r0, r3
 800ca0c:	b200      	sxth	r0, r0
 800ca0e:	1a80      	subs	r0, r0, r2
 800ca10:	3801      	subs	r0, #1
 800ca12:	4770      	bx	lr
 800ca14:	8803      	ldrh	r3, [r0, #0]
 800ca16:	8880      	ldrh	r0, [r0, #4]
 800ca18:	4418      	add	r0, r3
 800ca1a:	b200      	sxth	r0, r0
 800ca1c:	1a40      	subs	r0, r0, r1
 800ca1e:	e7f7      	b.n	800ca10 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800ca20:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ca24:	4410      	add	r0, r2
 800ca26:	4770      	bx	lr
 800ca28:	2000      	movs	r0, #0
 800ca2a:	4770      	bx	lr

0800ca2c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800ca2c:	2b03      	cmp	r3, #3
 800ca2e:	d817      	bhi.n	800ca60 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800ca30:	e8df f003 	tbb	[pc, r3]
 800ca34:	10090602 	.word	0x10090602
 800ca38:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800ca3c:	1850      	adds	r0, r2, r1
 800ca3e:	4770      	bx	lr
 800ca40:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ca44:	e7fa      	b.n	800ca3c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800ca46:	8843      	ldrh	r3, [r0, #2]
 800ca48:	88c0      	ldrh	r0, [r0, #6]
 800ca4a:	4418      	add	r0, r3
 800ca4c:	b200      	sxth	r0, r0
 800ca4e:	1a80      	subs	r0, r0, r2
 800ca50:	3801      	subs	r0, #1
 800ca52:	4770      	bx	lr
 800ca54:	8843      	ldrh	r3, [r0, #2]
 800ca56:	88c0      	ldrh	r0, [r0, #6]
 800ca58:	4418      	add	r0, r3
 800ca5a:	b200      	sxth	r0, r0
 800ca5c:	1a40      	subs	r0, r0, r1
 800ca5e:	e7f7      	b.n	800ca50 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800ca60:	2000      	movs	r0, #0
 800ca62:	4770      	bx	lr

0800ca64 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800ca64:	4b01      	ldr	r3, [pc, #4]	@ (800ca6c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	601a      	str	r2, [r3, #0]
 800ca6a:	4770      	bx	lr
 800ca6c:	2001544c 	.word	0x2001544c

0800ca70 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800ca70:	4603      	mov	r3, r0
 800ca72:	b1c8      	cbz	r0, 800caa8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800ca74:	0c02      	lsrs	r2, r0, #16
 800ca76:	0412      	lsls	r2, r2, #16
 800ca78:	b9a2      	cbnz	r2, 800caa4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800ca7a:	0403      	lsls	r3, r0, #16
 800ca7c:	2010      	movs	r0, #16
 800ca7e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800ca82:	bf04      	itt	eq
 800ca84:	021b      	lsleq	r3, r3, #8
 800ca86:	3008      	addeq	r0, #8
 800ca88:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800ca8c:	bf04      	itt	eq
 800ca8e:	011b      	lsleq	r3, r3, #4
 800ca90:	3004      	addeq	r0, #4
 800ca92:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800ca96:	bf04      	itt	eq
 800ca98:	009b      	lsleq	r3, r3, #2
 800ca9a:	3002      	addeq	r0, #2
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	db04      	blt.n	800caaa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800caa0:	3001      	adds	r0, #1
 800caa2:	4770      	bx	lr
 800caa4:	2000      	movs	r0, #0
 800caa6:	e7ea      	b.n	800ca7e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800caa8:	2020      	movs	r0, #32
 800caaa:	4770      	bx	lr

0800caac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800caac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab0:	b087      	sub	sp, #28
 800cab2:	460d      	mov	r5, r1
 800cab4:	4616      	mov	r6, r2
 800cab6:	4698      	mov	r8, r3
 800cab8:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800cabc:	4601      	mov	r1, r0
 800cabe:	b120      	cbz	r0, 800caca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800cac0:	b11a      	cbz	r2, 800caca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800cac2:	2d1f      	cmp	r5, #31
 800cac4:	d801      	bhi.n	800caca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800cac6:	2b1f      	cmp	r3, #31
 800cac8:	d904      	bls.n	800cad4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800caca:	2000      	movs	r0, #0
 800cacc:	6038      	str	r0, [r7, #0]
 800cace:	b007      	add	sp, #28
 800cad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad4:	b97d      	cbnz	r5, 800caf6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800cad6:	b143      	cbz	r3, 800caea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800cad8:	4602      	mov	r2, r0
 800cada:	e9cd 4700 	strd	r4, r7, [sp]
 800cade:	462b      	mov	r3, r5
 800cae0:	4641      	mov	r1, r8
 800cae2:	4630      	mov	r0, r6
 800cae4:	f7ff ffe2 	bl	800caac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cae8:	e7f1      	b.n	800cace <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800caea:	f04f 33ff 	mov.w	r3, #4294967295
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800caf4:	e7eb      	b.n	800cace <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800caf6:	fa32 fa05 	lsrs.w	sl, r2, r5
 800cafa:	d106      	bne.n	800cb0a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800cafc:	4346      	muls	r6, r0
 800cafe:	fbb6 f0f4 	udiv	r0, r6, r4
 800cb02:	fb04 6610 	mls	r6, r4, r0, r6
 800cb06:	603e      	str	r6, [r7, #0]
 800cb08:	e7e1      	b.n	800cace <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	40aa      	lsls	r2, r5
 800cb0e:	3a01      	subs	r2, #1
 800cb10:	4016      	ands	r6, r2
 800cb12:	fa00 fb05 	lsl.w	fp, r0, r5
 800cb16:	4630      	mov	r0, r6
 800cb18:	fbbb f9f4 	udiv	r9, fp, r4
 800cb1c:	fb0a f309 	mul.w	r3, sl, r9
 800cb20:	9303      	str	r3, [sp, #12]
 800cb22:	f7ff ffa5 	bl	800ca70 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cb26:	462b      	mov	r3, r5
 800cb28:	460a      	mov	r2, r1
 800cb2a:	e9cd 4700 	strd	r4, r7, [sp]
 800cb2e:	4601      	mov	r1, r0
 800cb30:	4630      	mov	r0, r6
 800cb32:	f7ff ffbb 	bl	800caac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb36:	fb04 b919 	mls	r9, r4, r9, fp
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	4648      	mov	r0, r9
 800cb3e:	eb05 0108 	add.w	r1, r5, r8
 800cb42:	f7ff ff95 	bl	800ca70 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cb46:	ab05      	add	r3, sp, #20
 800cb48:	e9cd 4300 	strd	r4, r3, [sp]
 800cb4c:	464a      	mov	r2, r9
 800cb4e:	4603      	mov	r3, r0
 800cb50:	4650      	mov	r0, sl
 800cb52:	f7ff ffab 	bl	800caac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	9a05      	ldr	r2, [sp, #20]
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	4411      	add	r1, r2
 800cb5e:	fbb1 f2f4 	udiv	r2, r1, r4
 800cb62:	18d3      	adds	r3, r2, r3
 800cb64:	441e      	add	r6, r3
 800cb66:	fb04 1412 	mls	r4, r4, r2, r1
 800cb6a:	4430      	add	r0, r6
 800cb6c:	603c      	str	r4, [r7, #0]
 800cb6e:	e7ae      	b.n	800cace <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800cb70 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800cb70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb74:	b085      	sub	sp, #20
 800cb76:	f1b0 0900 	subs.w	r9, r0, #0
 800cb7a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800cb7c:	461d      	mov	r5, r3
 800cb7e:	bfbf      	itttt	lt
 800cb80:	6823      	ldrlt	r3, [r4, #0]
 800cb82:	425b      	neglt	r3, r3
 800cb84:	f1c9 0900 	rsblt	r9, r9, #0
 800cb88:	6023      	strlt	r3, [r4, #0]
 800cb8a:	bfb4      	ite	lt
 800cb8c:	f04f 36ff 	movlt.w	r6, #4294967295
 800cb90:	2601      	movge	r6, #1
 800cb92:	2a00      	cmp	r2, #0
 800cb94:	4617      	mov	r7, r2
 800cb96:	da04      	bge.n	800cba2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800cb98:	6823      	ldr	r3, [r4, #0]
 800cb9a:	425b      	negs	r3, r3
 800cb9c:	4257      	negs	r7, r2
 800cb9e:	4276      	negs	r6, r6
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	4638      	mov	r0, r7
 800cba6:	bfba      	itte	lt
 800cba8:	426d      	neglt	r5, r5
 800cbaa:	f04f 38ff 	movlt.w	r8, #4294967295
 800cbae:	f04f 0801 	movge.w	r8, #1
 800cbb2:	f7ff ff5d 	bl	800ca70 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cbb6:	ab03      	add	r3, sp, #12
 800cbb8:	e9cd 5300 	strd	r5, r3, [sp]
 800cbbc:	463a      	mov	r2, r7
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	4648      	mov	r0, r9
 800cbc2:	f7ff ff73 	bl	800caac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	9a03      	ldr	r2, [sp, #12]
 800cbca:	4546      	cmp	r6, r8
 800cbcc:	441a      	add	r2, r3
 800cbce:	fb92 f3f5 	sdiv	r3, r2, r5
 800cbd2:	4418      	add	r0, r3
 800cbd4:	bf18      	it	ne
 800cbd6:	4240      	negne	r0, r0
 800cbd8:	fb05 2313 	mls	r3, r5, r3, r2
 800cbdc:	1c72      	adds	r2, r6, #1
 800cbde:	6023      	str	r3, [r4, #0]
 800cbe0:	d105      	bne.n	800cbee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f1c3 0200 	rsb	r2, r3, #0
 800cbe8:	db0b      	blt.n	800cc02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800cbea:	6022      	str	r2, [r4, #0]
 800cbec:	e006      	b.n	800cbfc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cbee:	2e01      	cmp	r6, #1
 800cbf0:	d104      	bne.n	800cbfc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	da02      	bge.n	800cbfc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cbf6:	442b      	add	r3, r5
 800cbf8:	3801      	subs	r0, #1
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	b005      	add	sp, #20
 800cbfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc02:	3801      	subs	r0, #1
 800cc04:	1b52      	subs	r2, r2, r5
 800cc06:	e7f0      	b.n	800cbea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800cc08 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800cc08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cc0c:	4c1c      	ldr	r4, [pc, #112]	@ (800cc80 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800cc0e:	6807      	ldr	r7, [r0, #0]
 800cc10:	69a3      	ldr	r3, [r4, #24]
 800cc12:	4605      	mov	r5, r0
 800cc14:	b92b      	cbnz	r3, 800cc22 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800cc16:	6840      	ldr	r0, [r0, #4]
 800cc18:	e9c5 7000 	strd	r7, r0, [r5]
 800cc1c:	b004      	add	sp, #16
 800cc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc22:	68a2      	ldr	r2, [r4, #8]
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	ae04      	add	r6, sp, #16
 800cc28:	f04f 0802 	mov.w	r8, #2
 800cc2c:	fb93 f1f8 	sdiv	r1, r3, r8
 800cc30:	440a      	add	r2, r1
 800cc32:	f846 2d04 	str.w	r2, [r6, #-4]!
 800cc36:	69e1      	ldr	r1, [r4, #28]
 800cc38:	9600      	str	r6, [sp, #0]
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	f7ff ff98 	bl	800cb70 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc40:	69a3      	ldr	r3, [r4, #24]
 800cc42:	686a      	ldr	r2, [r5, #4]
 800cc44:	6a21      	ldr	r1, [r4, #32]
 800cc46:	9600      	str	r6, [sp, #0]
 800cc48:	4607      	mov	r7, r0
 800cc4a:	6860      	ldr	r0, [r4, #4]
 800cc4c:	f7ff ff90 	bl	800cb70 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc50:	6962      	ldr	r2, [r4, #20]
 800cc52:	69a3      	ldr	r3, [r4, #24]
 800cc54:	fb93 f8f8 	sdiv	r8, r3, r8
 800cc58:	4442      	add	r2, r8
 800cc5a:	9203      	str	r2, [sp, #12]
 800cc5c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cc5e:	682a      	ldr	r2, [r5, #0]
 800cc60:	9600      	str	r6, [sp, #0]
 800cc62:	4407      	add	r7, r0
 800cc64:	68e0      	ldr	r0, [r4, #12]
 800cc66:	f7ff ff83 	bl	800cb70 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc6a:	9600      	str	r6, [sp, #0]
 800cc6c:	4680      	mov	r8, r0
 800cc6e:	69a3      	ldr	r3, [r4, #24]
 800cc70:	686a      	ldr	r2, [r5, #4]
 800cc72:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800cc74:	6920      	ldr	r0, [r4, #16]
 800cc76:	f7ff ff7b 	bl	800cb70 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cc7a:	4440      	add	r0, r8
 800cc7c:	e7cc      	b.n	800cc18 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800cc7e:	bf00      	nop
 800cc80:	20015450 	.word	0x20015450

0800cc84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800cc84:	4b07      	ldr	r3, [pc, #28]	@ (800cca4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d109      	bne.n	800cca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800cc8c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800cc90:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cc94:	8003      	strh	r3, [r0, #0]
 800cc96:	4b04      	ldr	r3, [pc, #16]	@ (800cca8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	1a9b      	subs	r3, r3, r2
 800cc9e:	800b      	strh	r3, [r1, #0]
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	2001543c 	.word	0x2001543c
 800cca8:	20015438 	.word	0x20015438

0800ccac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800ccac:	b510      	push	{r4, lr}
 800ccae:	4b07      	ldr	r3, [pc, #28]	@ (800cccc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d108      	bne.n	800ccc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800ccb6:	4b06      	ldr	r3, [pc, #24]	@ (800ccd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800ccb8:	880c      	ldrh	r4, [r1, #0]
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	1b1b      	subs	r3, r3, r4
 800ccc4:	8003      	strh	r3, [r0, #0]
 800ccc6:	800a      	strh	r2, [r1, #0]
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	bf00      	nop
 800cccc:	2001543c 	.word	0x2001543c
 800ccd0:	20015438 	.word	0x20015438

0800ccd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	4b0a      	ldr	r3, [pc, #40]	@ (800cd00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d10e      	bne.n	800ccfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800ccde:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800cce2:	8843      	ldrh	r3, [r0, #2]
 800cce4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cce8:	8044      	strh	r4, [r0, #2]
 800ccea:	18ca      	adds	r2, r1, r3
 800ccec:	4b05      	ldr	r3, [pc, #20]	@ (800cd04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	1a9b      	subs	r3, r3, r2
 800ccf2:	8003      	strh	r3, [r0, #0]
 800ccf4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ccf8:	80c3      	strh	r3, [r0, #6]
 800ccfa:	8081      	strh	r1, [r0, #4]
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	bf00      	nop
 800cd00:	2001543c 	.word	0x2001543c
 800cd04:	20015438 	.word	0x20015438

0800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800cd08:	4b08      	ldr	r3, [pc, #32]	@ (800cd2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d10c      	bne.n	800cd2a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800cd10:	8803      	ldrh	r3, [r0, #0]
 800cd12:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800cd16:	8842      	ldrh	r2, [r0, #2]
 800cd18:	8002      	strh	r2, [r0, #0]
 800cd1a:	185a      	adds	r2, r3, r1
 800cd1c:	4b04      	ldr	r3, [pc, #16]	@ (800cd30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800cd1e:	881b      	ldrh	r3, [r3, #0]
 800cd20:	1a9b      	subs	r3, r3, r2
 800cd22:	8043      	strh	r3, [r0, #2]
 800cd24:	88c3      	ldrh	r3, [r0, #6]
 800cd26:	8083      	strh	r3, [r0, #4]
 800cd28:	80c1      	strh	r1, [r0, #6]
 800cd2a:	4770      	bx	lr
 800cd2c:	2001543c 	.word	0x2001543c
 800cd30:	20015438 	.word	0x20015438

0800cd34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800cd34:	b510      	push	{r4, lr}
 800cd36:	4b07      	ldr	r3, [pc, #28]	@ (800cd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d108      	bne.n	800cd50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800cd3e:	f9b1 3000 	ldrsh.w	r3, [r1]
 800cd42:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cd46:	8003      	strh	r3, [r0, #0]
 800cd48:	8893      	ldrh	r3, [r2, #4]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	1b1b      	subs	r3, r3, r4
 800cd4e:	800b      	strh	r3, [r1, #0]
 800cd50:	bd10      	pop	{r4, pc}
 800cd52:	bf00      	nop
 800cd54:	2001543c 	.word	0x2001543c

0800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800cd58:	b510      	push	{r4, lr}
 800cd5a:	4b0a      	ldr	r3, [pc, #40]	@ (800cd84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	460a      	mov	r2, r1
 800cd62:	d10d      	bne.n	800cd80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800cd64:	8881      	ldrh	r1, [r0, #4]
 800cd66:	8803      	ldrh	r3, [r0, #0]
 800cd68:	440b      	add	r3, r1
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	f821 3b02 	strh.w	r3, [r1], #2
 800cd72:	f7ff ffdf 	bl	800cd34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800cd76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cd7a:	88c2      	ldrh	r2, [r0, #6]
 800cd7c:	8082      	strh	r2, [r0, #4]
 800cd7e:	80c3      	strh	r3, [r0, #6]
 800cd80:	bd10      	pop	{r4, pc}
 800cd82:	bf00      	nop
 800cd84:	2001543c 	.word	0x2001543c

0800cd88 <_ZN8touchgfx11Application13requestRedrawEv>:
 800cd88:	4b06      	ldr	r3, [pc, #24]	@ (800cda4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800cd8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cd8e:	4b06      	ldr	r3, [pc, #24]	@ (800cda8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800cd90:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800cd94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd98:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800cda2:	4770      	bx	lr
 800cda4:	20015438 	.word	0x20015438
 800cda8:	2001543a 	.word	0x2001543a

0800cdac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800cdac:	4b03      	ldr	r3, [pc, #12]	@ (800cdbc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800cdae:	6818      	ldr	r0, [r3, #0]
 800cdb0:	b110      	cbz	r0, 800cdb8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800cdb2:	6803      	ldr	r3, [r0, #0]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	4718      	bx	r3
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	20015480 	.word	0x20015480

0800cdc0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <_ZN8touchgfx11Application4drawEv>:
 800cdc4:	b507      	push	{r0, r1, r2, lr}
 800cdc6:	4b09      	ldr	r3, [pc, #36]	@ (800cdec <_ZN8touchgfx11Application4drawEv+0x28>)
 800cdc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cdcc:	4b08      	ldr	r3, [pc, #32]	@ (800cdf0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800cdce:	f8ad 2004 	strh.w	r2, [sp, #4]
 800cdd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdd6:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cdda:	6803      	ldr	r3, [r0, #0]
 800cddc:	2100      	movs	r1, #0
 800cdde:	9100      	str	r1, [sp, #0]
 800cde0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cde2:	4669      	mov	r1, sp
 800cde4:	4798      	blx	r3
 800cde6:	b003      	add	sp, #12
 800cde8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdec:	20015438 	.word	0x20015438
 800cdf0:	2001543a 	.word	0x2001543a

0800cdf4 <_ZN8touchgfx11Application10invalidateEv>:
 800cdf4:	4b09      	ldr	r3, [pc, #36]	@ (800ce1c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800cdf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cdfa:	4b09      	ldr	r3, [pc, #36]	@ (800ce20 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800cdfc:	b082      	sub	sp, #8
 800cdfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce02:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ce06:	2100      	movs	r1, #0
 800ce08:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ce0c:	9100      	str	r1, [sp, #0]
 800ce0e:	6803      	ldr	r3, [r0, #0]
 800ce10:	aa02      	add	r2, sp, #8
 800ce12:	e912 0006 	ldmdb	r2, {r1, r2}
 800ce16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce18:	b002      	add	sp, #8
 800ce1a:	4718      	bx	r3
 800ce1c:	20015438 	.word	0x20015438
 800ce20:	2001543a 	.word	0x2001543a

0800ce24 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800ce24:	4b03      	ldr	r3, [pc, #12]	@ (800ce34 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	b110      	cbz	r0, 800ce30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800ce2a:	6803      	ldr	r3, [r0, #0]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	4718      	bx	r3
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	20015480 	.word	0x20015480

0800ce38 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800ce38:	4b03      	ldr	r3, [pc, #12]	@ (800ce48 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800ce3a:	6818      	ldr	r0, [r3, #0]
 800ce3c:	b110      	cbz	r0, 800ce44 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800ce3e:	6803      	ldr	r3, [r0, #0]
 800ce40:	6a1b      	ldr	r3, [r3, #32]
 800ce42:	4718      	bx	r3
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	20015480 	.word	0x20015480

0800ce4c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800ce52:	4770      	bx	lr

0800ce54 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800ce54:	4b03      	ldr	r3, [pc, #12]	@ (800ce64 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800ce56:	6818      	ldr	r0, [r3, #0]
 800ce58:	b110      	cbz	r0, 800ce60 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800ce5a:	6803      	ldr	r3, [r0, #0]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce5e:	4718      	bx	r3
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	20015480 	.word	0x20015480

0800ce68 <_ZN8touchgfx11ApplicationD1Ev>:
 800ce68:	4770      	bx	lr

0800ce6a <_ZN8touchgfx11ApplicationD0Ev>:
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800ce70:	4604      	mov	r4, r0
 800ce72:	f006 f83f 	bl	8012ef4 <_ZdlPvj>
 800ce76:	4620      	mov	r0, r4
 800ce78:	bd10      	pop	{r4, pc}

0800ce7a <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800ce7a:	b510      	push	{r4, lr}
 800ce7c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ce80:	888a      	ldrh	r2, [r1, #4]
 800ce82:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ce86:	4422      	add	r2, r4
 800ce88:	b212      	sxth	r2, r2
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	da15      	bge.n	800ceba <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ce8e:	8882      	ldrh	r2, [r0, #4]
 800ce90:	4413      	add	r3, r2
 800ce92:	b21b      	sxth	r3, r3
 800ce94:	429c      	cmp	r4, r3
 800ce96:	da10      	bge.n	800ceba <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ce98:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ce9c:	88c9      	ldrh	r1, [r1, #6]
 800ce9e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cea2:	4419      	add	r1, r3
 800cea4:	b209      	sxth	r1, r1
 800cea6:	428a      	cmp	r2, r1
 800cea8:	da07      	bge.n	800ceba <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ceaa:	88c0      	ldrh	r0, [r0, #6]
 800ceac:	4410      	add	r0, r2
 800ceae:	b200      	sxth	r0, r0
 800ceb0:	4283      	cmp	r3, r0
 800ceb2:	bfac      	ite	ge
 800ceb4:	2000      	movge	r0, #0
 800ceb6:	2001      	movlt	r0, #1
 800ceb8:	bd10      	pop	{r4, pc}
 800ceba:	2000      	movs	r0, #0
 800cebc:	e7fc      	b.n	800ceb8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800cebe <_ZN8touchgfx4Rect10restrictToEss>:
 800cebe:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	b510      	push	{r4, lr}
 800cec6:	da04      	bge.n	800ced2 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800cec8:	8884      	ldrh	r4, [r0, #4]
 800ceca:	4423      	add	r3, r4
 800cecc:	8083      	strh	r3, [r0, #4]
 800cece:	2300      	movs	r3, #0
 800ced0:	8003      	strh	r3, [r0, #0]
 800ced2:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ced6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ceda:	1b09      	subs	r1, r1, r4
 800cedc:	428b      	cmp	r3, r1
 800cede:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800cee2:	bfc8      	it	gt
 800cee4:	8081      	strhgt	r1, [r0, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	da04      	bge.n	800cef4 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800ceea:	88c1      	ldrh	r1, [r0, #6]
 800ceec:	440b      	add	r3, r1
 800ceee:	80c3      	strh	r3, [r0, #6]
 800cef0:	2300      	movs	r3, #0
 800cef2:	8043      	strh	r3, [r0, #2]
 800cef4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800cef8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800cefc:	1a52      	subs	r2, r2, r1
 800cefe:	4293      	cmp	r3, r2
 800cf00:	bfc8      	it	gt
 800cf02:	80c2      	strhgt	r2, [r0, #6]
 800cf04:	bd10      	pop	{r4, pc}
	...

0800cf08 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4b10      	ldr	r3, [pc, #64]	@ (800cf4c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800cf0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cf10:	4b0f      	ldr	r3, [pc, #60]	@ (800cf50 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800cf12:	460c      	mov	r4, r1
 800cf14:	4620      	mov	r0, r4
 800cf16:	f9b3 1000 	ldrsh.w	r1, [r3]
 800cf1a:	f7ff ffd0 	bl	800cebe <_ZN8touchgfx4Rect10restrictToEss>
 800cf1e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	b190      	cbz	r0, 800cf4a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800cf24:	6803      	ldr	r3, [r0, #0]
 800cf26:	4621      	mov	r1, r4
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	4798      	blx	r3
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	b118      	cbz	r0, 800cf3a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800cf32:	6803      	ldr	r3, [r0, #0]
 800cf34:	4621      	mov	r1, r4
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	4798      	blx	r3
 800cf3a:	4b08      	ldr	r3, [pc, #32]	@ (800cf5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800cf3c:	6818      	ldr	r0, [r3, #0]
 800cf3e:	6803      	ldr	r3, [r0, #0]
 800cf40:	4621      	mov	r1, r4
 800cf42:	69db      	ldr	r3, [r3, #28]
 800cf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf48:	4718      	bx	r3
 800cf4a:	bd10      	pop	{r4, pc}
 800cf4c:	2001543a 	.word	0x2001543a
 800cf50:	20015438 	.word	0x20015438
 800cf54:	20015480 	.word	0x20015480
 800cf58:	2001547c 	.word	0x2001547c
 800cf5c:	20015444 	.word	0x20015444

0800cf60 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	4606      	mov	r6, r0
 800cf64:	4608      	mov	r0, r1
 800cf66:	460f      	mov	r7, r1
 800cf68:	f7fc fd93 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cf6c:	b9e8      	cbnz	r0, 800cfaa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cf6e:	f9b7 5000 	ldrsh.w	r5, [r7]
 800cf72:	f9b6 4000 	ldrsh.w	r4, [r6]
 800cf76:	42a5      	cmp	r5, r4
 800cf78:	db17      	blt.n	800cfaa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cf7a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cf7e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	db11      	blt.n	800cfaa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cf86:	88b9      	ldrh	r1, [r7, #4]
 800cf88:	440d      	add	r5, r1
 800cf8a:	88b1      	ldrh	r1, [r6, #4]
 800cf8c:	440c      	add	r4, r1
 800cf8e:	b22d      	sxth	r5, r5
 800cf90:	b224      	sxth	r4, r4
 800cf92:	42a5      	cmp	r5, r4
 800cf94:	dc09      	bgt.n	800cfaa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cf96:	88f8      	ldrh	r0, [r7, #6]
 800cf98:	4410      	add	r0, r2
 800cf9a:	88f2      	ldrh	r2, [r6, #6]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	b200      	sxth	r0, r0
 800cfa0:	b21b      	sxth	r3, r3
 800cfa2:	4298      	cmp	r0, r3
 800cfa4:	bfcc      	ite	gt
 800cfa6:	2000      	movgt	r0, #0
 800cfa8:	2001      	movle	r0, #1
 800cfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfac <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800cfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfae:	4604      	mov	r4, r0
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	460d      	mov	r5, r1
 800cfb4:	f7fc fd6d 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cfb8:	b978      	cbnz	r0, 800cfda <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f7fc fd69 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cfc0:	f9b5 6000 	ldrsh.w	r6, [r5]
 800cfc4:	b150      	cbz	r0, 800cfdc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800cfc6:	8026      	strh	r6, [r4, #0]
 800cfc8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800cfcc:	8063      	strh	r3, [r4, #2]
 800cfce:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800cfd2:	80a3      	strh	r3, [r4, #4]
 800cfd4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cfd8:	80e3      	strh	r3, [r4, #6]
 800cfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfdc:	f9b4 1000 	ldrsh.w	r1, [r4]
 800cfe0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800cfe4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800cfe8:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800cfec:	88ed      	ldrh	r5, [r5, #6]
 800cfee:	42b1      	cmp	r1, r6
 800cff0:	460f      	mov	r7, r1
 800cff2:	bfa8      	it	ge
 800cff4:	4637      	movge	r7, r6
 800cff6:	4293      	cmp	r3, r2
 800cff8:	4618      	mov	r0, r3
 800cffa:	4466      	add	r6, ip
 800cffc:	bfa8      	it	ge
 800cffe:	4610      	movge	r0, r2
 800d000:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d004:	8027      	strh	r7, [r4, #0]
 800d006:	442a      	add	r2, r5
 800d008:	88e5      	ldrh	r5, [r4, #6]
 800d00a:	8060      	strh	r0, [r4, #2]
 800d00c:	4461      	add	r1, ip
 800d00e:	442b      	add	r3, r5
 800d010:	b236      	sxth	r6, r6
 800d012:	b209      	sxth	r1, r1
 800d014:	b212      	sxth	r2, r2
 800d016:	b21b      	sxth	r3, r3
 800d018:	428e      	cmp	r6, r1
 800d01a:	bfac      	ite	ge
 800d01c:	ebc7 0106 	rsbge	r1, r7, r6
 800d020:	ebc7 0101 	rsblt	r1, r7, r1
 800d024:	429a      	cmp	r2, r3
 800d026:	bfac      	ite	ge
 800d028:	ebc0 0202 	rsbge	r2, r0, r2
 800d02c:	ebc0 0203 	rsblt	r2, r0, r3
 800d030:	80a1      	strh	r1, [r4, #4]
 800d032:	80e2      	strh	r2, [r4, #6]
 800d034:	e7d1      	b.n	800cfda <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800d038 <_ZN8touchgfx11Application11getInstanceEv>:
 800d038:	4b01      	ldr	r3, [pc, #4]	@ (800d040 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800d03a:	6818      	ldr	r0, [r3, #0]
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	20015490 	.word	0x20015490

0800d044 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d046:	4b10      	ldr	r3, [pc, #64]	@ (800d088 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	4605      	mov	r5, r0
 800d04c:	b1d3      	cbz	r3, 800d084 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800d04e:	4b0f      	ldr	r3, [pc, #60]	@ (800d08c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800d050:	4f0f      	ldr	r7, [pc, #60]	@ (800d090 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800d052:	881c      	ldrh	r4, [r3, #0]
 800d054:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800d058:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800d05c:	42a3      	cmp	r3, r4
 800d05e:	d90e      	bls.n	800d07e <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800d066:	b10a      	cbz	r2, 800d06c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800d068:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800d06a:	b900      	cbnz	r0, 800d06e <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800d06c:	6898      	ldr	r0, [r3, #8]
 800d06e:	6803      	ldr	r3, [r0, #0]
 800d070:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800d074:	69db      	ldr	r3, [r3, #28]
 800d076:	3401      	adds	r4, #1
 800d078:	4798      	blx	r3
 800d07a:	b2a4      	uxth	r4, r4
 800d07c:	e7ec      	b.n	800d058 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800d07e:	2300      	movs	r3, #0
 800d080:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800d084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d086:	bf00      	nop
 800d088:	20015442 	.word	0x20015442
 800d08c:	20000088 	.word	0x20000088
 800d090:	20015444 	.word	0x20015444

0800d094 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800d094:	b510      	push	{r4, lr}
 800d096:	2300      	movs	r3, #0
 800d098:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800d09c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800d0a0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800d0a4:	4604      	mov	r4, r0
 800d0a6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800d0aa:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d90e      	bls.n	800d0d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800d0b2:	18e2      	adds	r2, r4, r3
 800d0b4:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800d0b8:	b122      	cbz	r2, 800d0c4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800d0ba:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800d0be:	6803      	ldr	r3, [r0, #0]
 800d0c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0c2:	4798      	blx	r3
 800d0c4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d0ce:	e7ea      	b.n	800d0a6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800d0d0:	bd10      	pop	{r4, pc}

0800d0d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800d0d8:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800d0dc:	30a4      	adds	r0, #164	@ 0xa4
 800d0de:	f802 3b01 	strb.w	r3, [r2], #1
 800d0e2:	4282      	cmp	r2, r0
 800d0e4:	d1fb      	bne.n	800d0de <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800d0e6:	4770      	bx	lr

0800d0e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800d0e8:	b570      	push	{r4, r5, r6, lr}
 800d0ea:	4c0b      	ldr	r4, [pc, #44]	@ (800d118 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800d0ec:	4605      	mov	r5, r0
 800d0ee:	6820      	ldr	r0, [r4, #0]
 800d0f0:	460e      	mov	r6, r1
 800d0f2:	b110      	cbz	r0, 800d0fa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800d0f4:	6803      	ldr	r3, [r0, #0]
 800d0f6:	695b      	ldr	r3, [r3, #20]
 800d0f8:	4798      	blx	r3
 800d0fa:	1d28      	adds	r0, r5, #4
 800d0fc:	f7ff ffe9 	bl	800d0d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800d100:	6026      	str	r6, [r4, #0]
 800d102:	6833      	ldr	r3, [r6, #0]
 800d104:	4630      	mov	r0, r6
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	4798      	blx	r3
 800d10a:	682b      	ldr	r3, [r5, #0]
 800d10c:	4628      	mov	r0, r5
 800d10e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d114:	4718      	bx	r3
 800d116:	bf00      	nop
 800d118:	20015480 	.word	0x20015480

0800d11c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800d11c:	2300      	movs	r3, #0
 800d11e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800d122:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800d126:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d128:	461a      	mov	r2, r3
 800d12a:	461c      	mov	r4, r3
 800d12c:	461d      	mov	r5, r3
 800d12e:	459c      	cmp	ip, r3
 800d130:	dd1a      	ble.n	800d168 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800d132:	18c6      	adds	r6, r0, r3
 800d134:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800d138:	b16e      	cbz	r6, 800d156 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d008      	beq.n	800d150 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800d13e:	fa1f fe82 	uxth.w	lr, r2
 800d142:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800d146:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800d14a:	1887      	adds	r7, r0, r2
 800d14c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800d150:	3201      	adds	r2, #1
 800d152:	3301      	adds	r3, #1
 800d154:	e7eb      	b.n	800d12e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800d156:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800d15a:	4299      	cmp	r1, r3
 800d15c:	bfa8      	it	ge
 800d15e:	3501      	addge	r5, #1
 800d160:	429e      	cmp	r6, r3
 800d162:	bfc8      	it	gt
 800d164:	3401      	addgt	r4, #1
 800d166:	e7f4      	b.n	800d152 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800d168:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800d16c:	1b49      	subs	r1, r1, r5
 800d16e:	1b1b      	subs	r3, r3, r4
 800d170:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800d174:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800d178:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800d17c:	4293      	cmp	r3, r2
 800d17e:	dd03      	ble.n	800d188 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800d180:	3b01      	subs	r3, #1
 800d182:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800d186:	e7f7      	b.n	800d178 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800d188:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d18c <_ZN8touchgfx11Application15handleTickEventEv>:
 800d18c:	b570      	push	{r4, r5, r6, lr}
 800d18e:	4d16      	ldr	r5, [pc, #88]	@ (800d1e8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800d190:	4604      	mov	r4, r0
 800d192:	6828      	ldr	r0, [r5, #0]
 800d194:	b140      	cbz	r0, 800d1a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800d196:	7a03      	ldrb	r3, [r0, #8]
 800d198:	b933      	cbnz	r3, 800d1a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800d19a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800d19e:	6803      	ldr	r3, [r0, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1a6:	4718      	bx	r3
 800d1a8:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800d1ac:	4e0f      	ldr	r6, [pc, #60]	@ (800d1ec <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800d1ae:	b973      	cbnz	r3, 800d1ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d1b0:	b168      	cbz	r0, 800d1ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d1b2:	7a03      	ldrb	r3, [r0, #8]
 800d1b4:	b15b      	cbz	r3, 800d1ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d1b6:	6830      	ldr	r0, [r6, #0]
 800d1b8:	b110      	cbz	r0, 800d1c0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800d1ba:	6803      	ldr	r3, [r0, #0]
 800d1bc:	691b      	ldr	r3, [r3, #16]
 800d1be:	4798      	blx	r3
 800d1c0:	6828      	ldr	r0, [r5, #0]
 800d1c2:	6803      	ldr	r3, [r0, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	4798      	blx	r3
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800d1ce:	3404      	adds	r4, #4
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f7ff ff5f 	bl	800d094 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f7ff ffa0 	bl	800d11c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800d1dc:	6830      	ldr	r0, [r6, #0]
 800d1de:	b110      	cbz	r0, 800d1e6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800d1e0:	6803      	ldr	r3, [r0, #0]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e4:	e7dd      	b.n	800d1a2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}
 800d1e8:	20015484 	.word	0x20015484
 800d1ec:	20015480 	.word	0x20015480

0800d1f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	801a      	strh	r2, [r3, #0]
 800d1fa:	805a      	strh	r2, [r3, #2]
 800d1fc:	809a      	strh	r2, [r3, #4]
 800d1fe:	80da      	strh	r2, [r3, #6]
 800d200:	3308      	adds	r3, #8
 800d202:	428b      	cmp	r3, r1
 800d204:	d1f8      	bne.n	800d1f8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800d206:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800d20a:	4770      	bx	lr

0800d20c <_ZN8touchgfx11ApplicationC1Ev>:
 800d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20e:	4606      	mov	r6, r0
 800d210:	4b1c      	ldr	r3, [pc, #112]	@ (800d284 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800d212:	f846 3b04 	str.w	r3, [r6], #4
 800d216:	4604      	mov	r4, r0
 800d218:	2500      	movs	r5, #0
 800d21a:	22a8      	movs	r2, #168	@ 0xa8
 800d21c:	2100      	movs	r1, #0
 800d21e:	4630      	mov	r0, r6
 800d220:	f006 f89d 	bl	801335e <memset>
 800d224:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800d228:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d22c:	f7ff ffe0 	bl	800d1f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d230:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800d234:	f7ff ffdc 	bl	800d1f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d238:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800d23c:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800d240:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800d244:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800d248:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800d24c:	490e      	ldr	r1, [pc, #56]	@ (800d288 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800d24e:	480f      	ldr	r0, [pc, #60]	@ (800d28c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800d250:	4f0f      	ldr	r7, [pc, #60]	@ (800d290 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800d252:	f005 fd07 	bl	8012c64 <CRC_Lock>
 800d256:	4b0f      	ldr	r3, [pc, #60]	@ (800d294 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800d258:	b158      	cbz	r0, 800d272 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800d25a:	801d      	strh	r5, [r3, #0]
 800d25c:	4a0e      	ldr	r2, [pc, #56]	@ (800d298 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800d25e:	2300      	movs	r3, #0
 800d260:	6013      	str	r3, [r2, #0]
 800d262:	4a0e      	ldr	r2, [pc, #56]	@ (800d29c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800d264:	603b      	str	r3, [r7, #0]
 800d266:	4630      	mov	r0, r6
 800d268:	6013      	str	r3, [r2, #0]
 800d26a:	f7ff ff32 	bl	800d0d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800d26e:	4620      	mov	r0, r4
 800d270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d276:	2002      	movs	r0, #2
 800d278:	801a      	strh	r2, [r3, #0]
 800d27a:	6038      	str	r0, [r7, #0]
 800d27c:	f001 fa5a 	bl	800e734 <_ZN8touchgfx6Screen4drawEv>
 800d280:	e7ec      	b.n	800d25c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800d282:	bf00      	nop
 800d284:	08015dc8 	.word	0x08015dc8
 800d288:	b5e8b5cd 	.word	0xb5e8b5cd
 800d28c:	f407a5c2 	.word	0xf407a5c2
 800d290:	20015480 	.word	0x20015480
 800d294:	20000088 	.word	0x20000088
 800d298:	20015490 	.word	0x20015490
 800d29c:	20015484 	.word	0x20015484

0800d2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800d2a0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	428b      	cmp	r3, r1
 800d2aa:	b510      	push	{r4, lr}
 800d2ac:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800d2b0:	d908      	bls.n	800d2c4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800d2b2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d2b6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800d2c0:	685a      	ldr	r2, [r3, #4]
 800d2c2:	6062      	str	r2, [r4, #4]
 800d2c4:	bd10      	pop	{r4, pc}
	...

0800d2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	4b8f      	ldr	r3, [pc, #572]	@ (800d50c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800d2ce:	b08f      	sub	sp, #60	@ 0x3c
 800d2d0:	ac0a      	add	r4, sp, #40	@ 0x28
 800d2d2:	e884 0006 	stmia.w	r4, {r1, r2}
 800d2d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d2da:	4b8d      	ldr	r3, [pc, #564]	@ (800d510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800d2dc:	4683      	mov	fp, r0
 800d2de:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f7ff fdeb 	bl	800cebe <_ZN8touchgfx4Rect10restrictToEss>
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f7fc fbd2 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d16a      	bne.n	800d3c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d2f2:	9403      	str	r4, [sp, #12]
 800d2f4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d2f8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d2fc:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800d300:	35a4      	adds	r5, #164	@ 0xa4
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	b15c      	cbz	r4, 800d31e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800d306:	4629      	mov	r1, r5
 800d308:	9803      	ldr	r0, [sp, #12]
 800d30a:	f7ff fe29 	bl	800cf60 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d30e:	3c01      	subs	r4, #1
 800d310:	b118      	cbz	r0, 800d31a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800d312:	b2a1      	uxth	r1, r4
 800d314:	9801      	ldr	r0, [sp, #4]
 800d316:	f7ff ffc3 	bl	800d2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d31a:	3d08      	subs	r5, #8
 800d31c:	e7f2      	b.n	800d304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800d31e:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800d322:	f8cd a010 	str.w	sl, [sp, #16]
 800d326:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d32a:	9302      	str	r3, [sp, #8]
 800d32c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d330:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800d334:	9306      	str	r3, [sp, #24]
 800d336:	445c      	add	r4, fp
 800d338:	2500      	movs	r5, #0
 800d33a:	4626      	mov	r6, r4
 800d33c:	f8cd a014 	str.w	sl, [sp, #20]
 800d340:	462f      	mov	r7, r5
 800d342:	9b05      	ldr	r3, [sp, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d073      	beq.n	800d430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d348:	9903      	ldr	r1, [sp, #12]
 800d34a:	4630      	mov	r0, r6
 800d34c:	f7ff fd95 	bl	800ce7a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d350:	b350      	cbz	r0, 800d3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d352:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800d356:	f9b6 c000 	ldrsh.w	ip, [r6]
 800d35a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800d35e:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800d362:	45e6      	cmp	lr, ip
 800d364:	db33      	blt.n	800d3ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d366:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d36a:	88b3      	ldrh	r3, [r6, #4]
 800d36c:	4472      	add	r2, lr
 800d36e:	4463      	add	r3, ip
 800d370:	b212      	sxth	r2, r2
 800d372:	b21b      	sxth	r3, r3
 800d374:	429a      	cmp	r2, r3
 800d376:	dc2a      	bgt.n	800d3ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d378:	88f3      	ldrh	r3, [r6, #6]
 800d37a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d37e:	fa1f f289 	uxth.w	r2, r9
 800d382:	4413      	add	r3, r2
 800d384:	b29b      	uxth	r3, r3
 800d386:	45c8      	cmp	r8, r9
 800d388:	fa1f fc88 	uxth.w	ip, r8
 800d38c:	fa0f fe83 	sxth.w	lr, r3
 800d390:	db0f      	blt.n	800d3b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800d392:	eba3 030c 	sub.w	r3, r3, ip
 800d396:	1ac9      	subs	r1, r1, r3
 800d398:	b209      	sxth	r1, r1
 800d39a:	2900      	cmp	r1, #0
 800d39c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d3a0:	dd12      	ble.n	800d3c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d3a2:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	9b05      	ldr	r3, [sp, #20]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	9305      	str	r3, [sp, #20]
 800d3ae:	3e08      	subs	r6, #8
 800d3b0:	e7c7      	b.n	800d342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800d3b2:	4461      	add	r1, ip
 800d3b4:	b209      	sxth	r1, r1
 800d3b6:	4571      	cmp	r1, lr
 800d3b8:	dc38      	bgt.n	800d42c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d3ba:	eba2 020c 	sub.w	r2, r2, ip
 800d3be:	b212      	sxth	r2, r2
 800d3c0:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800d3c4:	2a00      	cmp	r2, #0
 800d3c6:	dcee      	bgt.n	800d3a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d3c8:	b00f      	add	sp, #60	@ 0x3c
 800d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ce:	45c8      	cmp	r8, r9
 800d3d0:	db2c      	blt.n	800d42c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d3d2:	88f3      	ldrh	r3, [r6, #6]
 800d3d4:	4499      	add	r9, r3
 800d3d6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800d3da:	4498      	add	r8, r3
 800d3dc:	fa0f f989 	sxth.w	r9, r9
 800d3e0:	fa0f f888 	sxth.w	r8, r8
 800d3e4:	45c1      	cmp	r9, r8
 800d3e6:	db21      	blt.n	800d42c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d3e8:	88b3      	ldrh	r3, [r6, #4]
 800d3ea:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800d3ee:	fa1f f28c 	uxth.w	r2, ip
 800d3f2:	4413      	add	r3, r2
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	45e6      	cmp	lr, ip
 800d3f8:	fa1f f88e 	uxth.w	r8, lr
 800d3fc:	fa0f f983 	sxth.w	r9, r3
 800d400:	db0a      	blt.n	800d418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800d402:	eba3 0308 	sub.w	r3, r3, r8
 800d406:	1ac9      	subs	r1, r1, r3
 800d408:	b209      	sxth	r1, r1
 800d40a:	2900      	cmp	r1, #0
 800d40c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800d410:	ddda      	ble.n	800d3c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d412:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d416:	e7c6      	b.n	800d3a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d418:	4441      	add	r1, r8
 800d41a:	b209      	sxth	r1, r1
 800d41c:	4549      	cmp	r1, r9
 800d41e:	dc05      	bgt.n	800d42c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d420:	eba2 0208 	sub.w	r2, r2, r8
 800d424:	b212      	sxth	r2, r2
 800d426:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800d42a:	e7cb      	b.n	800d3c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800d42c:	4607      	mov	r7, r0
 800d42e:	e7bb      	b.n	800d3a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d430:	2d00      	cmp	r5, #0
 800d432:	d181      	bne.n	800d338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800d434:	2f00      	cmp	r7, #0
 800d436:	f000 81dd 	beq.w	800d7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d43a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800d43e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800d442:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800d446:	b2b3      	uxth	r3, r6
 800d448:	9305      	str	r3, [sp, #20]
 800d44a:	9a05      	ldr	r2, [sp, #20]
 800d44c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800d450:	4413      	add	r3, r2
 800d452:	b2ba      	uxth	r2, r7
 800d454:	4492      	add	sl, r2
 800d456:	b29b      	uxth	r3, r3
 800d458:	fa1f fa8a 	uxth.w	sl, sl
 800d45c:	fa0f f883 	sxth.w	r8, r3
 800d460:	fa0f f98a 	sxth.w	r9, sl
 800d464:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800d468:	9b04      	ldr	r3, [sp, #16]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d052      	beq.n	800d514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800d46e:	9903      	ldr	r1, [sp, #12]
 800d470:	4620      	mov	r0, r4
 800d472:	f7ff fd02 	bl	800ce7a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d476:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d47a:	b1c0      	cbz	r0, 800d4ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d47c:	f9b4 e000 	ldrsh.w	lr, [r4]
 800d480:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d484:	4576      	cmp	r6, lr
 800d486:	dc22      	bgt.n	800d4ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800d488:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d48c:	44f4      	add	ip, lr
 800d48e:	fa0f fc8c 	sxth.w	ip, ip
 800d492:	45e0      	cmp	r8, ip
 800d494:	db1b      	blt.n	800d4ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800d496:	428f      	cmp	r7, r1
 800d498:	fa1f fc81 	uxth.w	ip, r1
 800d49c:	88e1      	ldrh	r1, [r4, #6]
 800d49e:	dc0d      	bgt.n	800d4bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800d4a0:	ebaa 0c0c 	sub.w	ip, sl, ip
 800d4a4:	eba1 010c 	sub.w	r1, r1, ip
 800d4a8:	f8a4 9002 	strh.w	r9, [r4, #2]
 800d4ac:	80e1      	strh	r1, [r4, #6]
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	9904      	ldr	r1, [sp, #16]
 800d4b2:	3901      	subs	r1, #1
 800d4b4:	9104      	str	r1, [sp, #16]
 800d4b6:	3c08      	subs	r4, #8
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	e7d3      	b.n	800d464 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800d4bc:	4461      	add	r1, ip
 800d4be:	b209      	sxth	r1, r1
 800d4c0:	4549      	cmp	r1, r9
 800d4c2:	dcf5      	bgt.n	800d4b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d4c4:	eba2 0c0c 	sub.w	ip, r2, ip
 800d4c8:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d4cc:	e7ef      	b.n	800d4ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d4ce:	428f      	cmp	r7, r1
 800d4d0:	dcee      	bgt.n	800d4b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d4d2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800d4d6:	4461      	add	r1, ip
 800d4d8:	b209      	sxth	r1, r1
 800d4da:	4589      	cmp	r9, r1
 800d4dc:	dbe8      	blt.n	800d4b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d4de:	4576      	cmp	r6, lr
 800d4e0:	fa1f fc8e 	uxth.w	ip, lr
 800d4e4:	88a1      	ldrh	r1, [r4, #4]
 800d4e6:	dc07      	bgt.n	800d4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800d4e8:	eba3 0c0c 	sub.w	ip, r3, ip
 800d4ec:	eba1 010c 	sub.w	r1, r1, ip
 800d4f0:	f8a4 8000 	strh.w	r8, [r4]
 800d4f4:	80a1      	strh	r1, [r4, #4]
 800d4f6:	e7da      	b.n	800d4ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d4f8:	4461      	add	r1, ip
 800d4fa:	b209      	sxth	r1, r1
 800d4fc:	4588      	cmp	r8, r1
 800d4fe:	dbd7      	blt.n	800d4b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d500:	9905      	ldr	r1, [sp, #20]
 800d502:	eba1 0c0c 	sub.w	ip, r1, ip
 800d506:	f8a4 c004 	strh.w	ip, [r4, #4]
 800d50a:	e7d0      	b.n	800d4ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d50c:	2001543a 	.word	0x2001543a
 800d510:	20015438 	.word	0x20015438
 800d514:	2d00      	cmp	r5, #0
 800d516:	f000 816d 	beq.w	800d7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d51a:	9b06      	ldr	r3, [sp, #24]
 800d51c:	445b      	add	r3, fp
 800d51e:	461c      	mov	r4, r3
 800d520:	9b02      	ldr	r3, [sp, #8]
 800d522:	3301      	adds	r3, #1
 800d524:	f000 8166 	beq.w	800d7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d528:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800d52c:	4629      	mov	r1, r5
 800d52e:	9803      	ldr	r0, [sp, #12]
 800d530:	f7ff fd16 	bl	800cf60 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d534:	b120      	cbz	r0, 800d540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800d536:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d53a:	9801      	ldr	r0, [sp, #4]
 800d53c:	f7ff feb0 	bl	800d2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d540:	9903      	ldr	r1, [sp, #12]
 800d542:	4628      	mov	r0, r5
 800d544:	f7ff fc99 	bl	800ce7a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d548:	2800      	cmp	r0, #0
 800d54a:	f000 809c 	beq.w	800d686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d54e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800d552:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d556:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d55c:	fa1f f189 	uxth.w	r1, r9
 800d560:	eb01 0c03 	add.w	ip, r1, r3
 800d564:	fa1f fa8c 	uxth.w	sl, ip
 800d568:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800d56c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800d570:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800d574:	b283      	uxth	r3, r0
 800d576:	eb03 050c 	add.w	r5, r3, ip
 800d57a:	b2ad      	uxth	r5, r5
 800d57c:	9505      	str	r5, [sp, #20]
 800d57e:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800d582:	9504      	str	r5, [sp, #16]
 800d584:	4548      	cmp	r0, r9
 800d586:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800d58a:	f340 8099 	ble.w	800d6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800d58e:	1a5b      	subs	r3, r3, r1
 800d590:	b29b      	uxth	r3, r3
 800d592:	4596      	cmp	lr, r2
 800d594:	fa0f f08a 	sxth.w	r0, sl
 800d598:	b21e      	sxth	r6, r3
 800d59a:	dd2e      	ble.n	800d5fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800d59c:	9f02      	ldr	r7, [sp, #8]
 800d59e:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800d5a2:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d5a6:	9f04      	ldr	r7, [sp, #16]
 800d5a8:	1a3f      	subs	r7, r7, r0
 800d5aa:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800d5ae:	fa1f fe8e 	uxth.w	lr, lr
 800d5b2:	b292      	uxth	r2, r2
 800d5b4:	ebae 0102 	sub.w	r1, lr, r2
 800d5b8:	44a6      	add	lr, r4
 800d5ba:	4402      	add	r2, r0
 800d5bc:	b289      	uxth	r1, r1
 800d5be:	fa0f fe8e 	sxth.w	lr, lr
 800d5c2:	b212      	sxth	r2, r2
 800d5c4:	b20d      	sxth	r5, r1
 800d5c6:	ebae 0202 	sub.w	r2, lr, r2
 800d5ca:	436f      	muls	r7, r5
 800d5cc:	4372      	muls	r2, r6
 800d5ce:	4297      	cmp	r7, r2
 800d5d0:	db09      	blt.n	800d5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800d5d2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800d5d6:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800d5da:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d5de:	449c      	add	ip, r3
 800d5e0:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d5e4:	e686      	b.n	800d2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d5e6:	4421      	add	r1, r4
 800d5e8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800d5ec:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800d5f0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d5f4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d5f8:	e67c      	b.n	800d2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d5fa:	9f04      	ldr	r7, [sp, #16]
 800d5fc:	42b8      	cmp	r0, r7
 800d5fe:	da27      	bge.n	800d650 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800d600:	9902      	ldr	r1, [sp, #8]
 800d602:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800d606:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800d60a:	eb05 010e 	add.w	r1, r5, lr
 800d60e:	fa1f f881 	uxth.w	r8, r1
 800d612:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800d616:	4411      	add	r1, r2
 800d618:	eba1 0108 	sub.w	r1, r1, r8
 800d61c:	b289      	uxth	r1, r1
 800d61e:	fa0f f988 	sxth.w	r9, r8
 800d622:	eba2 020e 	sub.w	r2, r2, lr
 800d626:	fa0f f881 	sxth.w	r8, r1
 800d62a:	1a3f      	subs	r7, r7, r0
 800d62c:	4372      	muls	r2, r6
 800d62e:	fb08 f707 	mul.w	r7, r8, r7
 800d632:	42ba      	cmp	r2, r7
 800d634:	dc06      	bgt.n	800d644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800d636:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800d63a:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800d63e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800d642:	e7ca      	b.n	800d5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800d644:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800d648:	4429      	add	r1, r5
 800d64a:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d64e:	e651      	b.n	800d2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d650:	9805      	ldr	r0, [sp, #20]
 800d652:	ebaa 0000 	sub.w	r0, sl, r0
 800d656:	b280      	uxth	r0, r0
 800d658:	2d06      	cmp	r5, #6
 800d65a:	fa0f fe80 	sxth.w	lr, r0
 800d65e:	d817      	bhi.n	800d690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800d660:	9b04      	ldr	r3, [sp, #16]
 800d662:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d666:	1c6b      	adds	r3, r5, #1
 800d668:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800d66c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800d670:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d674:	9b01      	ldr	r3, [sp, #4]
 800d676:	9801      	ldr	r0, [sp, #4]
 800d678:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d67c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800d680:	805a      	strh	r2, [r3, #2]
 800d682:	809e      	strh	r6, [r3, #4]
 800d684:	80d9      	strh	r1, [r3, #6]
 800d686:	9b02      	ldr	r3, [sp, #8]
 800d688:	3b01      	subs	r3, #1
 800d68a:	9302      	str	r3, [sp, #8]
 800d68c:	3c08      	subs	r4, #8
 800d68e:	e747      	b.n	800d520 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800d690:	9a02      	ldr	r2, [sp, #8]
 800d692:	45b6      	cmp	lr, r6
 800d694:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d698:	db0d      	blt.n	800d6b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800d69a:	449c      	add	ip, r3
 800d69c:	fa1f fc8c 	uxth.w	ip, ip
 800d6a0:	445a      	add	r2, fp
 800d6a2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d6a6:	448c      	add	ip, r1
 800d6a8:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d6ac:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800d6b0:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800d6b4:	e61e      	b.n	800d2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d6b6:	445a      	add	r2, fp
 800d6b8:	4484      	add	ip, r0
 800d6ba:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800d6be:	e78f      	b.n	800d5e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d6c0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800d6c4:	fa1f f18e 	uxth.w	r1, lr
 800d6c8:	eb01 0806 	add.w	r8, r1, r6
 800d6cc:	b293      	uxth	r3, r2
 800d6ce:	fa1f f888 	uxth.w	r8, r8
 800d6d2:	9306      	str	r3, [sp, #24]
 800d6d4:	fa0f f388 	sxth.w	r3, r8
 800d6d8:	9307      	str	r3, [sp, #28]
 800d6da:	9f06      	ldr	r7, [sp, #24]
 800d6dc:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d6e0:	443b      	add	r3, r7
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	4596      	cmp	lr, r2
 800d6e6:	9308      	str	r3, [sp, #32]
 800d6e8:	da24      	bge.n	800d734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800d6ea:	9905      	ldr	r1, [sp, #20]
 800d6ec:	eba3 0308 	sub.w	r3, r3, r8
 800d6f0:	ebaa 0401 	sub.w	r4, sl, r1
 800d6f4:	b2a4      	uxth	r4, r4
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	b225      	sxth	r5, r4
 800d6fa:	b219      	sxth	r1, r3
 800d6fc:	eba2 020e 	sub.w	r2, r2, lr
 800d700:	eba9 0000 	sub.w	r0, r9, r0
 800d704:	436a      	muls	r2, r5
 800d706:	4348      	muls	r0, r1
 800d708:	4282      	cmp	r2, r0
 800d70a:	9a02      	ldr	r2, [sp, #8]
 800d70c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d710:	445a      	add	r2, fp
 800d712:	dc06      	bgt.n	800d722 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800d714:	9b07      	ldr	r3, [sp, #28]
 800d716:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800d71a:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800d71e:	44a4      	add	ip, r4
 800d720:	e75e      	b.n	800d5e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d722:	9904      	ldr	r1, [sp, #16]
 800d724:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800d728:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800d72c:	4433      	add	r3, r6
 800d72e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d732:	e5df      	b.n	800d2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d734:	9f06      	ldr	r7, [sp, #24]
 800d736:	9b04      	ldr	r3, [sp, #16]
 800d738:	1bc9      	subs	r1, r1, r7
 800d73a:	fa0f f78a 	sxth.w	r7, sl
 800d73e:	b289      	uxth	r1, r1
 800d740:	429f      	cmp	r7, r3
 800d742:	fa0f fe81 	sxth.w	lr, r1
 800d746:	dd23      	ble.n	800d790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800d748:	9a05      	ldr	r2, [sp, #20]
 800d74a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d74e:	9d07      	ldr	r5, [sp, #28]
 800d750:	ebaa 0202 	sub.w	r2, sl, r2
 800d754:	b292      	uxth	r2, r2
 800d756:	eba5 0a03 	sub.w	sl, r5, r3
 800d75a:	b214      	sxth	r4, r2
 800d75c:	eba9 0000 	sub.w	r0, r9, r0
 800d760:	9b02      	ldr	r3, [sp, #8]
 800d762:	fb0e f000 	mul.w	r0, lr, r0
 800d766:	fb04 fa0a 	mul.w	sl, r4, sl
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	4550      	cmp	r0, sl
 800d76e:	445b      	add	r3, fp
 800d770:	db03      	blt.n	800d77a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800d772:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800d776:	4494      	add	ip, r2
 800d778:	e732      	b.n	800d5e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d77a:	9a04      	ldr	r2, [sp, #16]
 800d77c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800d780:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800d784:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800d788:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d78c:	4431      	add	r1, r6
 800d78e:	e75c      	b.n	800d64a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800d790:	9b08      	ldr	r3, [sp, #32]
 800d792:	eba3 0308 	sub.w	r3, r3, r8
 800d796:	b29b      	uxth	r3, r3
 800d798:	2d06      	cmp	r5, #6
 800d79a:	b218      	sxth	r0, r3
 800d79c:	d813      	bhi.n	800d7c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800d79e:	9b07      	ldr	r3, [sp, #28]
 800d7a0:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800d7a4:	1c6b      	adds	r3, r5, #1
 800d7a6:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800d7aa:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d7ae:	9b01      	ldr	r3, [sp, #4]
 800d7b0:	9901      	ldr	r1, [sp, #4]
 800d7b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d7b6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800d7ba:	805a      	strh	r2, [r3, #2]
 800d7bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7be:	809a      	strh	r2, [r3, #4]
 800d7c0:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d7c4:	e75f      	b.n	800d686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d7c6:	9c02      	ldr	r4, [sp, #8]
 800d7c8:	4570      	cmp	r0, lr
 800d7ca:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d7ce:	db0d      	blt.n	800d7ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800d7d0:	4431      	add	r1, r6
 800d7d2:	9b06      	ldr	r3, [sp, #24]
 800d7d4:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d7d8:	b289      	uxth	r1, r1
 800d7da:	445c      	add	r4, fp
 800d7dc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d7e0:	4419      	add	r1, r3
 800d7e2:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800d7e6:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800d7ea:	e583      	b.n	800d2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d7ec:	445c      	add	r4, fp
 800d7ee:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800d7f2:	e79b      	b.n	800d72c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800d7f4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d7f8:	1e65      	subs	r5, r4, #1
 800d7fa:	b2ad      	uxth	r5, r5
 800d7fc:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d800:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800d804:	42b5      	cmp	r5, r6
 800d806:	d044      	beq.n	800d892 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800d808:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d80c:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800d810:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800d814:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800d818:	4282      	cmp	r2, r0
 800d81a:	d11f      	bne.n	800d85c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d81c:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800d820:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d824:	459c      	cmp	ip, r3
 800d826:	d119      	bne.n	800d85c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d828:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800d82c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d830:	19d8      	adds	r0, r3, r7
 800d832:	b200      	sxth	r0, r0
 800d834:	4288      	cmp	r0, r1
 800d836:	d109      	bne.n	800d84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800d838:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800d83c:	4413      	add	r3, r2
 800d83e:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d842:	4629      	mov	r1, r5
 800d844:	9801      	ldr	r0, [sp, #4]
 800d846:	f7ff fd2b 	bl	800d2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d84a:	e003      	b.n	800d854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d84c:	4411      	add	r1, r2
 800d84e:	b209      	sxth	r1, r1
 800d850:	42b9      	cmp	r1, r7
 800d852:	d0f3      	beq.n	800d83c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800d854:	3d01      	subs	r5, #1
 800d856:	b2ad      	uxth	r5, r5
 800d858:	3c08      	subs	r4, #8
 800d85a:	e7d3      	b.n	800d804 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d85c:	42b9      	cmp	r1, r7
 800d85e:	d1f9      	bne.n	800d854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d860:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800d864:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d868:	4299      	cmp	r1, r3
 800d86a:	d1f3      	bne.n	800d854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d86c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d870:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d874:	181f      	adds	r7, r3, r0
 800d876:	b23f      	sxth	r7, r7
 800d878:	42ba      	cmp	r2, r7
 800d87a:	d105      	bne.n	800d888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800d87c:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800d880:	440b      	add	r3, r1
 800d882:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d886:	e7dc      	b.n	800d842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800d888:	440a      	add	r2, r1
 800d88a:	b212      	sxth	r2, r2
 800d88c:	4290      	cmp	r0, r2
 800d88e:	d1e1      	bne.n	800d854 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d890:	e7f6      	b.n	800d880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800d892:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800d896:	2e07      	cmp	r6, #7
 800d898:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d89c:	d812      	bhi.n	800d8c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d89e:	1c75      	adds	r5, r6, #1
 800d8a0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800d8a4:	9d01      	ldr	r5, [sp, #4]
 800d8a6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d8aa:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800d8ae:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800d8b2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800d8b6:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d8ba:	442c      	add	r4, r5
 800d8bc:	8061      	strh	r1, [r4, #2]
 800d8be:	80a2      	strh	r2, [r4, #4]
 800d8c0:	80e3      	strh	r3, [r4, #6]
 800d8c2:	e581      	b.n	800d3c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d8c4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d8c8:	3e01      	subs	r6, #1
 800d8ca:	445c      	add	r4, fp
 800d8cc:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800d8d0:	f04f 37ff 	mov.w	r7, #4294967295
 800d8d4:	2500      	movs	r5, #0
 800d8d6:	9305      	str	r3, [sp, #20]
 800d8d8:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d8dc:	9302      	str	r3, [sp, #8]
 800d8de:	1e72      	subs	r2, r6, #1
 800d8e0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d8e4:	9304      	str	r3, [sp, #16]
 800d8e6:	4691      	mov	r9, r2
 800d8e8:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800d8ec:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d8f0:	bf14      	ite	ne
 800d8f2:	9905      	ldrne	r1, [sp, #20]
 800d8f4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d8f8:	6818      	ldr	r0, [r3, #0]
 800d8fa:	9207      	str	r2, [sp, #28]
 800d8fc:	bf18      	it	ne
 800d8fe:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d902:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d906:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d90a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d90e:	9306      	str	r3, [sp, #24]
 800d910:	fb18 f801 	smulbb	r8, r8, r1
 800d914:	6859      	ldr	r1, [r3, #4]
 800d916:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d91a:	4671      	mov	r1, lr
 800d91c:	a80c      	add	r0, sp, #48	@ 0x30
 800d91e:	f7ff fb45 	bl	800cfac <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d922:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800d926:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800d92a:	9b04      	ldr	r3, [sp, #16]
 800d92c:	9a02      	ldr	r2, [sp, #8]
 800d92e:	fb10 f001 	smulbb	r0, r0, r1
 800d932:	fb02 8803 	mla	r8, r2, r3, r8
 800d936:	eba0 0108 	sub.w	r1, r0, r8
 800d93a:	f04f 0c08 	mov.w	ip, #8
 800d93e:	fb90 f0fc 	sdiv	r0, r0, ip
 800d942:	4288      	cmp	r0, r1
 800d944:	dc20      	bgt.n	800d988 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d946:	4551      	cmp	r1, sl
 800d948:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d94c:	da03      	bge.n	800d956 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800d94e:	b1d9      	cbz	r1, 800d988 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d950:	468a      	mov	sl, r1
 800d952:	464f      	mov	r7, r9
 800d954:	4635      	mov	r5, r6
 800d956:	f109 39ff 	add.w	r9, r9, #4294967295
 800d95a:	f119 0f02 	cmn.w	r9, #2
 800d95e:	d1c5      	bne.n	800d8ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d960:	4616      	mov	r6, r2
 800d962:	3201      	adds	r2, #1
 800d964:	f1a4 0408 	sub.w	r4, r4, #8
 800d968:	d1b6      	bne.n	800d8d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d96a:	9b01      	ldr	r3, [sp, #4]
 800d96c:	b2ac      	uxth	r4, r5
 800d96e:	00ed      	lsls	r5, r5, #3
 800d970:	1958      	adds	r0, r3, r5
 800d972:	1c7b      	adds	r3, r7, #1
 800d974:	d10b      	bne.n	800d98e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800d976:	4601      	mov	r1, r0
 800d978:	9803      	ldr	r0, [sp, #12]
 800d97a:	f7ff fb17 	bl	800cfac <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d97e:	4621      	mov	r1, r4
 800d980:	9801      	ldr	r0, [sp, #4]
 800d982:	f7ff fc8d 	bl	800d2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d986:	e4b5      	b.n	800d2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d988:	464f      	mov	r7, r9
 800d98a:	4635      	mov	r5, r6
 800d98c:	e7ed      	b.n	800d96a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	00ff      	lsls	r7, r7, #3
 800d992:	19d9      	adds	r1, r3, r7
 800d994:	f7ff fb0a 	bl	800cfac <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d998:	9b03      	ldr	r3, [sp, #12]
 800d99a:	cb03      	ldmia	r3!, {r0, r1}
 800d99c:	445f      	add	r7, fp
 800d99e:	445d      	add	r5, fp
 800d9a0:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d9a4:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800d9a8:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	6869      	ldr	r1, [r5, #4]
 800d9b0:	c303      	stmia	r3!, {r0, r1}
 800d9b2:	e7e4      	b.n	800d97e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800d9b4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800d9bc:	b09b      	sub	sp, #108	@ 0x6c
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	f7fc f866 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	b948      	cbnz	r0, 800d9de <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800d9ca:	6823      	ldr	r3, [r4, #0]
 800d9cc:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	4798      	blx	r3
 800d9d6:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800d9da:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800d9de:	4bc6      	ldr	r3, [pc, #792]	@ (800dcf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d03f      	beq.n	800da66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d9e6:	4dc5      	ldr	r5, [pc, #788]	@ (800dcfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	f7fc f852 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	d138      	bne.n	800da66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f7ff f96d 	bl	800ccd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d9fa:	6823      	ldr	r3, [r4, #0]
 800d9fc:	6829      	ldr	r1, [r5, #0]
 800d9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da00:	686a      	ldr	r2, [r5, #4]
 800da02:	4620      	mov	r0, r4
 800da04:	4798      	blx	r3
 800da06:	802e      	strh	r6, [r5, #0]
 800da08:	806e      	strh	r6, [r5, #2]
 800da0a:	80ae      	strh	r6, [r5, #4]
 800da0c:	80ee      	strh	r6, [r5, #6]
 800da0e:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800da12:	4dbb      	ldr	r5, [pc, #748]	@ (800dd00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800da14:	4640      	mov	r0, r8
 800da16:	f7ff fbeb 	bl	800d1f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800da1a:	882e      	ldrh	r6, [r5, #0]
 800da1c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800da20:	4633      	mov	r3, r6
 800da22:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800da26:	42bb      	cmp	r3, r7
 800da28:	d224      	bcs.n	800da74 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800da2a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800da2e:	2907      	cmp	r1, #7
 800da30:	d816      	bhi.n	800da60 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800da32:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800da36:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800da3a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800da3e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800da42:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800da46:	1c4a      	adds	r2, r1, #1
 800da48:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800da4c:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800da50:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800da54:	f8a2 a002 	strh.w	sl, [r2, #2]
 800da58:	f8a2 e004 	strh.w	lr, [r2, #4]
 800da5c:	f8a2 c006 	strh.w	ip, [r2, #6]
 800da60:	3301      	adds	r3, #1
 800da62:	b29b      	uxth	r3, r3
 800da64:	e7df      	b.n	800da26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800da66:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1cf      	bne.n	800da0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800da6e:	b01b      	add	sp, #108	@ 0x6c
 800da70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da74:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800da78:	42b3      	cmp	r3, r6
 800da7a:	d90c      	bls.n	800da96 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800da7c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800da80:	6822      	ldr	r2, [r4, #0]
 800da82:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800da86:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800da88:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800da8c:	4620      	mov	r0, r4
 800da8e:	3601      	adds	r6, #1
 800da90:	47b8      	blx	r7
 800da92:	b2b6      	uxth	r6, r6
 800da94:	e7ee      	b.n	800da74 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800da96:	4a9b      	ldr	r2, [pc, #620]	@ (800dd04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800da98:	6813      	ldr	r3, [r2, #0]
 800da9a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	4691      	mov	r9, r2
 800daa2:	f040 80e2 	bne.w	800dc6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800daa6:	8829      	ldrh	r1, [r5, #0]
 800daa8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800daac:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800dab0:	33ae      	adds	r3, #174	@ 0xae
 800dab2:	2600      	movs	r6, #0
 800dab4:	428f      	cmp	r7, r1
 800dab6:	f103 0308 	add.w	r3, r3, #8
 800daba:	dd0a      	ble.n	800dad2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800dabc:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800dac0:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800dac4:	4402      	add	r2, r0
 800dac6:	b212      	sxth	r2, r2
 800dac8:	4296      	cmp	r6, r2
 800daca:	bfb8      	it	lt
 800dacc:	4616      	movlt	r6, r2
 800dace:	3101      	adds	r1, #1
 800dad0:	e7f0      	b.n	800dab4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800dad2:	4b8d      	ldr	r3, [pc, #564]	@ (800dd08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800dad4:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800dd04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	2b0f      	cmp	r3, #15
 800dadc:	bf88      	it	hi
 800dade:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800dae2:	f04f 0300 	mov.w	r3, #0
 800dae6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800daea:	bf98      	it	ls
 800daec:	f04f 0b01 	movls.w	fp, #1
 800daf0:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800daf4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800daf8:	4b82      	ldr	r3, [pc, #520]	@ (800dd04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800dafa:	4438      	add	r0, r7
 800dafc:	b207      	sxth	r7, r0
 800dafe:	6818      	ldr	r0, [r3, #0]
 800db00:	42b7      	cmp	r7, r6
 800db02:	6803      	ldr	r3, [r0, #0]
 800db04:	f280 8083 	bge.w	800dc0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800db08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800db0c:	4798      	blx	r3
 800db0e:	eb07 030b 	add.w	r3, r7, fp
 800db12:	4298      	cmp	r0, r3
 800db14:	da07      	bge.n	800db26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800db16:	42b0      	cmp	r0, r6
 800db18:	da05      	bge.n	800db26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800db1a:	4287      	cmp	r7, r0
 800db1c:	dd6c      	ble.n	800dbf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800db1e:	2f00      	cmp	r7, #0
 800db20:	dd6a      	ble.n	800dbf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800db22:	4630      	mov	r0, r6
 800db24:	e004      	b.n	800db30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800db26:	4287      	cmp	r7, r0
 800db28:	dcfb      	bgt.n	800db22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800db2a:	42b0      	cmp	r0, r6
 800db2c:	bfa8      	it	ge
 800db2e:	4630      	movge	r0, r6
 800db30:	4b76      	ldr	r3, [pc, #472]	@ (800dd0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800db32:	f8ad 7016 	strh.w	r7, [sp, #22]
 800db36:	1bc0      	subs	r0, r0, r7
 800db38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db3c:	882f      	ldrh	r7, [r5, #0]
 800db3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800db42:	2200      	movs	r2, #0
 800db44:	f8ad 2014 	strh.w	r2, [sp, #20]
 800db48:	f8ad 001a 	strh.w	r0, [sp, #26]
 800db4c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800db50:	42bb      	cmp	r3, r7
 800db52:	d9cd      	bls.n	800daf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800db54:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800db58:	ab07      	add	r3, sp, #28
 800db5a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800db5e:	6851      	ldr	r1, [r2, #4]
 800db60:	c303      	stmia	r3!, {r0, r1}
 800db62:	a905      	add	r1, sp, #20
 800db64:	a807      	add	r0, sp, #28
 800db66:	f7ff f988 	bl	800ce7a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d04c      	beq.n	800dc08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800db6e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800db72:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800db76:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800db7a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800db7e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800db82:	9302      	str	r3, [sp, #8]
 800db84:	4686      	mov	lr, r0
 800db86:	4290      	cmp	r0, r2
 800db88:	4450      	add	r0, sl
 800db8a:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800db8e:	bfb8      	it	lt
 800db90:	4696      	movlt	lr, r2
 800db92:	4452      	add	r2, sl
 800db94:	4299      	cmp	r1, r3
 800db96:	b280      	uxth	r0, r0
 800db98:	b292      	uxth	r2, r2
 800db9a:	468c      	mov	ip, r1
 800db9c:	fa0f fa82 	sxth.w	sl, r2
 800dba0:	bfb8      	it	lt
 800dba2:	469c      	movlt	ip, r3
 800dba4:	b203      	sxth	r3, r0
 800dba6:	4553      	cmp	r3, sl
 800dba8:	bfb8      	it	lt
 800dbaa:	4602      	movlt	r2, r0
 800dbac:	eba2 020e 	sub.w	r2, r2, lr
 800dbb0:	f8ad 2020 	strh.w	r2, [sp, #32]
 800dbb4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800dbb8:	9b02      	ldr	r3, [sp, #8]
 800dbba:	f8ad e01c 	strh.w	lr, [sp, #28]
 800dbbe:	4411      	add	r1, r2
 800dbc0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800dbc4:	f8ad c01e 	strh.w	ip, [sp, #30]
 800dbc8:	4413      	add	r3, r2
 800dbca:	b289      	uxth	r1, r1
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	b208      	sxth	r0, r1
 800dbd0:	b21a      	sxth	r2, r3
 800dbd2:	4290      	cmp	r0, r2
 800dbd4:	bfb8      	it	lt
 800dbd6:	460b      	movlt	r3, r1
 800dbd8:	eba3 030c 	sub.w	r3, r3, ip
 800dbdc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800dbe0:	a807      	add	r0, sp, #28
 800dbe2:	f7fb ff56 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dbe6:	b920      	cbnz	r0, 800dbf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	a907      	add	r1, sp, #28
 800dbec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dbee:	4620      	mov	r0, r4
 800dbf0:	4798      	blx	r3
 800dbf2:	3701      	adds	r7, #1
 800dbf4:	b2bf      	uxth	r7, r7
 800dbf6:	e7a9      	b.n	800db4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800dbf8:	f8d9 0000 	ldr.w	r0, [r9]
 800dbfc:	6803      	ldr	r3, [r0, #0]
 800dbfe:	2101      	movs	r1, #1
 800dc00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc04:	4798      	blx	r3
 800dc06:	e773      	b.n	800daf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800dc08:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800dc0c:	e7e8      	b.n	800dbe0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc10:	4798      	blx	r3
 800dc12:	4b3f      	ldr	r3, [pc, #252]	@ (800dd10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f43f af29 	beq.w	800da6e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800dc22:	882b      	ldrh	r3, [r5, #0]
 800dc24:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800dc28:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800dc2c:	42ab      	cmp	r3, r5
 800dc2e:	f4bf af1e 	bcs.w	800da6e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800dc32:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800dc36:	2907      	cmp	r1, #7
 800dc38:	d814      	bhi.n	800dc64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800dc3a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800dc3e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800dc42:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800dc46:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800dc4a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800dc4e:	1c4a      	adds	r2, r1, #1
 800dc50:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800dc54:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800dc58:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800dc5c:	f8a2 c002 	strh.w	ip, [r2, #2]
 800dc60:	8097      	strh	r7, [r2, #4]
 800dc62:	80d6      	strh	r6, [r2, #6]
 800dc64:	3301      	adds	r3, #1
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	e7e0      	b.n	800dc2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	f040 8133 	bne.w	800ded6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800dc70:	4b28      	ldr	r3, [pc, #160]	@ (800dd14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800dc7a:	f000 8098 	beq.w	800ddae <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800dc7e:	882a      	ldrh	r2, [r5, #0]
 800dc80:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800dc84:	3201      	adds	r2, #1
 800dc86:	b292      	uxth	r2, r2
 800dc88:	2900      	cmp	r1, #0
 800dc8a:	d0c2      	beq.n	800dc12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800dc8c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800dc90:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800dc94:	441e      	add	r6, r3
 800dc96:	b236      	sxth	r6, r6
 800dc98:	4694      	mov	ip, r2
 800dc9a:	f04f 0900 	mov.w	r9, #0
 800dc9e:	fa1f f38c 	uxth.w	r3, ip
 800dca2:	4299      	cmp	r1, r3
 800dca4:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800dca8:	f240 80bf 	bls.w	800de2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800dcac:	4427      	add	r7, r4
 800dcae:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800dcb2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800dcb6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800dcba:	4283      	cmp	r3, r0
 800dcbc:	f340 80a1 	ble.w	800de02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800dcc0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800dcc4:	4406      	add	r6, r0
 800dcc6:	b236      	sxth	r6, r6
 800dcc8:	429e      	cmp	r6, r3
 800dcca:	bfa8      	it	ge
 800dccc:	461e      	movge	r6, r3
 800dcce:	46e1      	mov	r9, ip
 800dcd0:	f10c 0c01 	add.w	ip, ip, #1
 800dcd4:	e7e3      	b.n	800dc9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800dcd6:	d10a      	bne.n	800dcee <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800dcd8:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800dcdc:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800dce0:	4562      	cmp	r2, ip
 800dce2:	bfb8      	it	lt
 800dce4:	4662      	movlt	r2, ip
 800dce6:	4288      	cmp	r0, r1
 800dce8:	bfb8      	it	lt
 800dcea:	461f      	movlt	r7, r3
 800dcec:	e087      	b.n	800ddfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800dcee:	428a      	cmp	r2, r1
 800dcf0:	bfb8      	it	lt
 800dcf2:	460a      	movlt	r2, r1
 800dcf4:	e083      	b.n	800ddfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800dcf6:	bf00      	nop
 800dcf8:	2001547c 	.word	0x2001547c
 800dcfc:	20015488 	.word	0x20015488
 800dd00:	20000088 	.word	0x20000088
 800dd04:	20015444 	.word	0x20015444
 800dd08:	2001543a 	.word	0x2001543a
 800dd0c:	20015438 	.word	0x20015438
 800dd10:	20015442 	.word	0x20015442
 800dd14:	2001543c 	.word	0x2001543c
 800dd18:	19a1      	adds	r1, r4, r6
 800dd1a:	ab07      	add	r3, sp, #28
 800dd1c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800dd20:	6849      	ldr	r1, [r1, #4]
 800dd22:	c303      	stmia	r3!, {r0, r1}
 800dd24:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800dd28:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dd2c:	2b13      	cmp	r3, #19
 800dd2e:	bfd8      	it	le
 800dd30:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800dd34:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dd38:	440b      	add	r3, r1
 800dd3a:	1a9b      	subs	r3, r3, r2
 800dd3c:	a807      	add	r0, sp, #28
 800dd3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dd42:	f7fe ffe1 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dd46:	a807      	add	r0, sp, #28
 800dd48:	f7fb fea3 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dd4c:	bb78      	cbnz	r0, 800ddae <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800dd4e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800dd52:	f8d9 0000 	ldr.w	r0, [r9]
 800dd56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800dd5a:	f8d0 e000 	ldr.w	lr, [r0]
 800dd5e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dd62:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dd66:	f1bc 0f14 	cmp.w	ip, #20
 800dd6a:	bfa8      	it	ge
 800dd6c:	f04f 0c14 	movge.w	ip, #20
 800dd70:	fa1f fc8c 	uxth.w	ip, ip
 800dd74:	f8cd c000 	str.w	ip, [sp]
 800dd78:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800dd7c:	47d8      	blx	fp
 800dd7e:	4683      	mov	fp, r0
 800dd80:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800dd84:	a807      	add	r0, sp, #28
 800dd86:	f7fe ffa5 	bl	800ccd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	4426      	add	r6, r4
 800dd8e:	4620      	mov	r0, r4
 800dd90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd92:	a907      	add	r1, sp, #28
 800dd94:	4798      	blx	r3
 800dd96:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800dd9a:	eba0 000b 	sub.w	r0, r0, fp
 800dd9e:	b200      	sxth	r0, r0
 800dda0:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800dda4:	b918      	cbnz	r0, 800ddae <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800dda6:	b2b9      	uxth	r1, r7
 800dda8:	4650      	mov	r0, sl
 800ddaa:	f7ff fa79 	bl	800d2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ddae:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800ddb2:	f1bb 0f00 	cmp.w	fp, #0
 800ddb6:	f43f af2c 	beq.w	800dc12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800ddba:	882b      	ldrh	r3, [r5, #0]
 800ddbc:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	2700      	movs	r7, #0
 800ddc6:	b299      	uxth	r1, r3
 800ddc8:	458b      	cmp	fp, r1
 800ddca:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800ddce:	d9a3      	bls.n	800dd18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800ddd0:	4426      	add	r6, r4
 800ddd2:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800ddd6:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800ddda:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800ddde:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800dde2:	4408      	add	r0, r1
 800dde4:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800dde8:	4461      	add	r1, ip
 800ddea:	b200      	sxth	r0, r0
 800ddec:	b209      	sxth	r1, r1
 800ddee:	4288      	cmp	r0, r1
 800ddf0:	f6bf af71 	bge.w	800dcd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800ddf4:	4584      	cmp	ip, r0
 800ddf6:	4662      	mov	r2, ip
 800ddf8:	461f      	mov	r7, r3
 800ddfa:	bfb8      	it	lt
 800ddfc:	4602      	movlt	r2, r0
 800ddfe:	3301      	adds	r3, #1
 800de00:	e7e1      	b.n	800ddc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800de02:	d10e      	bne.n	800de22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800de04:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800de08:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800de0c:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800de10:	4473      	add	r3, lr
 800de12:	b21b      	sxth	r3, r3
 800de14:	429e      	cmp	r6, r3
 800de16:	bfa8      	it	ge
 800de18:	461e      	movge	r6, r3
 800de1a:	4287      	cmp	r7, r0
 800de1c:	bfb8      	it	lt
 800de1e:	46e1      	movlt	r9, ip
 800de20:	e756      	b.n	800dcd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800de22:	4286      	cmp	r6, r0
 800de24:	bfa8      	it	ge
 800de26:	4606      	movge	r6, r0
 800de28:	e752      	b.n	800dcd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800de2a:	eb0a 0007 	add.w	r0, sl, r7
 800de2e:	4427      	add	r7, r4
 800de30:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800de34:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800de38:	f1bb 0f13 	cmp.w	fp, #19
 800de3c:	bfde      	ittt	le
 800de3e:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800de42:	445e      	addle	r6, fp
 800de44:	b236      	sxthle	r6, r6
 800de46:	f7fb fe24 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800de4a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de4e:	2800      	cmp	r0, #0
 800de50:	f47f af1a 	bne.w	800dc88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800de54:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800de58:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800de5c:	482a      	ldr	r0, [pc, #168]	@ (800df08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800de5e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800de62:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800de66:	6800      	ldr	r0, [r0, #0]
 800de68:	f8ad 101c 	strh.w	r1, [sp, #28]
 800de6c:	1ab6      	subs	r6, r6, r2
 800de6e:	2e14      	cmp	r6, #20
 800de70:	f8ad 201e 	strh.w	r2, [sp, #30]
 800de74:	f8ad 3020 	strh.w	r3, [sp, #32]
 800de78:	bfa8      	it	ge
 800de7a:	2614      	movge	r6, #20
 800de7c:	f8d0 c000 	ldr.w	ip, [r0]
 800de80:	b2b6      	uxth	r6, r6
 800de82:	fa1f fb8b 	uxth.w	fp, fp
 800de86:	455e      	cmp	r6, fp
 800de88:	bf94      	ite	ls
 800de8a:	9600      	strls	r6, [sp, #0]
 800de8c:	f8cd b000 	strhi.w	fp, [sp]
 800de90:	b292      	uxth	r2, r2
 800de92:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800de96:	b29b      	uxth	r3, r3
 800de98:	b289      	uxth	r1, r1
 800de9a:	47b0      	blx	r6
 800de9c:	6823      	ldr	r3, [r4, #0]
 800de9e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800dea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dea4:	a907      	add	r1, sp, #28
 800dea6:	4620      	mov	r0, r4
 800dea8:	4798      	blx	r3
 800deaa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800deae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800deb2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800deb6:	1a5b      	subs	r3, r3, r1
 800deb8:	440a      	add	r2, r1
 800deba:	b21b      	sxth	r3, r3
 800debc:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800dec0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f47f aeda 	bne.w	800dc7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800deca:	fa1f f189 	uxth.w	r1, r9
 800dece:	4650      	mov	r0, sl
 800ded0:	f7ff f9e6 	bl	800d2a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ded4:	e6d3      	b.n	800dc7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ded6:	882e      	ldrh	r6, [r5, #0]
 800ded8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800dedc:	42b3      	cmp	r3, r6
 800dede:	f67f ae98 	bls.w	800dc12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800dee2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800dee6:	ab07      	add	r3, sp, #28
 800dee8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800deec:	6851      	ldr	r1, [r2, #4]
 800deee:	c303      	stmia	r3!, {r0, r1}
 800def0:	a807      	add	r0, sp, #28
 800def2:	f7fb fdce 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 800def6:	b920      	cbnz	r0, 800df02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800def8:	6823      	ldr	r3, [r4, #0]
 800defa:	a907      	add	r1, sp, #28
 800defc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800defe:	4620      	mov	r0, r4
 800df00:	4798      	blx	r3
 800df02:	3601      	adds	r6, #1
 800df04:	b2b6      	uxth	r6, r6
 800df06:	e7e7      	b.n	800ded8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800df08:	20015444 	.word	0x20015444

0800df0c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800df0c:	4b03      	ldr	r3, [pc, #12]	@ (800df1c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800df0e:	2200      	movs	r2, #0
 800df10:	801a      	strh	r2, [r3, #0]
 800df12:	805a      	strh	r2, [r3, #2]
 800df14:	809a      	strh	r2, [r3, #4]
 800df16:	80da      	strh	r2, [r3, #6]
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	20015488 	.word	0x20015488

0800df20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	4606      	mov	r6, r0
 800df26:	b09d      	sub	sp, #116	@ 0x74
 800df28:	a803      	add	r0, sp, #12
 800df2a:	4614      	mov	r4, r2
 800df2c:	468a      	mov	sl, r1
 800df2e:	461d      	mov	r5, r3
 800df30:	f000 fdad 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800df34:	6833      	ldr	r3, [r6, #0]
 800df36:	4630      	mov	r0, r6
 800df38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df3a:	4798      	blx	r3
 800df3c:	6833      	ldr	r3, [r6, #0]
 800df3e:	4607      	mov	r7, r0
 800df40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df42:	4630      	mov	r0, r6
 800df44:	4798      	blx	r3
 800df46:	462a      	mov	r2, r5
 800df48:	9000      	str	r0, [sp, #0]
 800df4a:	4621      	mov	r1, r4
 800df4c:	463b      	mov	r3, r7
 800df4e:	a803      	add	r0, sp, #12
 800df50:	f000 fdf8 	bl	800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800df54:	2500      	movs	r5, #0
 800df56:	462c      	mov	r4, r5
 800df58:	46a9      	mov	r9, r5
 800df5a:	46a8      	mov	r8, r5
 800df5c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800df60:	2300      	movs	r3, #0
 800df62:	9302      	str	r3, [sp, #8]
 800df64:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800df68:	429c      	cmp	r4, r3
 800df6a:	d002      	beq.n	800df72 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800df6c:	455c      	cmp	r4, fp
 800df6e:	bf18      	it	ne
 800df70:	4625      	movne	r5, r4
 800df72:	ab02      	add	r3, sp, #8
 800df74:	4632      	mov	r2, r6
 800df76:	4651      	mov	r1, sl
 800df78:	a803      	add	r0, sp, #12
 800df7a:	f001 f90f 	bl	800f19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df7e:	4604      	mov	r4, r0
 800df80:	b108      	cbz	r0, 800df86 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800df82:	280a      	cmp	r0, #10
 800df84:	d10a      	bne.n	800df9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800df86:	45c1      	cmp	r9, r8
 800df88:	bf38      	it	cc
 800df8a:	46c1      	movcc	r9, r8
 800df8c:	f04f 0800 	mov.w	r8, #0
 800df90:	2c00      	cmp	r4, #0
 800df92:	d1e5      	bne.n	800df60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800df94:	4648      	mov	r0, r9
 800df96:	b01d      	add	sp, #116	@ 0x74
 800df98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9c:	9a02      	ldr	r2, [sp, #8]
 800df9e:	2a00      	cmp	r2, #0
 800dfa0:	d0de      	beq.n	800df60 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800dfa2:	7b57      	ldrb	r7, [r2, #13]
 800dfa4:	6833      	ldr	r3, [r6, #0]
 800dfa6:	8894      	ldrh	r4, [r2, #4]
 800dfa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfaa:	007f      	lsls	r7, r7, #1
 800dfac:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800dfb0:	7a97      	ldrb	r7, [r2, #10]
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	4307      	orrs	r7, r0
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	4798      	blx	r3
 800dfba:	4438      	add	r0, r7
 800dfbc:	4480      	add	r8, r0
 800dfbe:	fa1f f888 	uxth.w	r8, r8
 800dfc2:	e7e5      	b.n	800df90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800dfc4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800dfc4:	b508      	push	{r3, lr}
 800dfc6:	6803      	ldr	r3, [r0, #0]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	4798      	blx	r3
 800dfcc:	b128      	cbz	r0, 800dfda <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800dfce:	7b43      	ldrb	r3, [r0, #13]
 800dfd0:	7a80      	ldrb	r0, [r0, #10]
 800dfd2:	005b      	lsls	r3, r3, #1
 800dfd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfd8:	4318      	orrs	r0, r3
 800dfda:	bd08      	pop	{r3, pc}

0800dfdc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800dfdc:	b40e      	push	{r1, r2, r3}
 800dfde:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe0:	b09e      	sub	sp, #120	@ 0x78
 800dfe2:	ab23      	add	r3, sp, #140	@ 0x8c
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	f853 4b04 	ldr.w	r4, [r3], #4
 800dfea:	9303      	str	r3, [sp, #12]
 800dfec:	a805      	add	r0, sp, #20
 800dfee:	f000 fd4e 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800dff2:	682b      	ldr	r3, [r5, #0]
 800dff4:	4628      	mov	r0, r5
 800dff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dff8:	4798      	blx	r3
 800dffa:	682b      	ldr	r3, [r5, #0]
 800dffc:	4606      	mov	r6, r0
 800dffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e000:	4628      	mov	r0, r5
 800e002:	4798      	blx	r3
 800e004:	4633      	mov	r3, r6
 800e006:	ae1e      	add	r6, sp, #120	@ 0x78
 800e008:	4621      	mov	r1, r4
 800e00a:	9000      	str	r0, [sp, #0]
 800e00c:	9a03      	ldr	r2, [sp, #12]
 800e00e:	2400      	movs	r4, #0
 800e010:	a805      	add	r0, sp, #20
 800e012:	f000 fd97 	bl	800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e016:	f846 4d68 	str.w	r4, [r6, #-104]!
 800e01a:	462a      	mov	r2, r5
 800e01c:	4633      	mov	r3, r6
 800e01e:	4621      	mov	r1, r4
 800e020:	a805      	add	r0, sp, #20
 800e022:	f001 f8bb 	bl	800f19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e026:	b1f0      	cbz	r0, 800e066 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800e028:	280a      	cmp	r0, #10
 800e02a:	d018      	beq.n	800e05e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800e02c:	9f04      	ldr	r7, [sp, #16]
 800e02e:	b1b7      	cbz	r7, 800e05e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800e030:	7b78      	ldrb	r0, [r7, #13]
 800e032:	7a3b      	ldrb	r3, [r7, #8]
 800e034:	88ea      	ldrh	r2, [r5, #6]
 800e036:	00c1      	lsls	r1, r0, #3
 800e038:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e03c:	4319      	orrs	r1, r3
 800e03e:	0643      	lsls	r3, r0, #25
 800e040:	bf44      	itt	mi
 800e042:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800e046:	b219      	sxthmi	r1, r3
 800e048:	0100      	lsls	r0, r0, #4
 800e04a:	79fb      	ldrb	r3, [r7, #7]
 800e04c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800e050:	4303      	orrs	r3, r0
 800e052:	4413      	add	r3, r2
 800e054:	1a5b      	subs	r3, r3, r1
 800e056:	b21b      	sxth	r3, r3
 800e058:	429c      	cmp	r4, r3
 800e05a:	bfb8      	it	lt
 800e05c:	461c      	movlt	r4, r3
 800e05e:	4633      	mov	r3, r6
 800e060:	462a      	mov	r2, r5
 800e062:	2100      	movs	r1, #0
 800e064:	e7dc      	b.n	800e020 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800e066:	b2a0      	uxth	r0, r4
 800e068:	b01e      	add	sp, #120	@ 0x78
 800e06a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e06e:	b003      	add	sp, #12
 800e070:	4770      	bx	lr

0800e072 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800e072:	7a43      	ldrb	r3, [r0, #9]
 800e074:	8880      	ldrh	r0, [r0, #4]
 800e076:	4418      	add	r0, r3
 800e078:	b280      	uxth	r0, r0
 800e07a:	4770      	bx	lr

0800e07c <_ZNK8touchgfx4Font13getFontHeightEv>:
 800e07c:	6803      	ldr	r3, [r0, #0]
 800e07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e080:	4718      	bx	r3

0800e082 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800e082:	b40e      	push	{r1, r2, r3}
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	b09d      	sub	sp, #116	@ 0x74
 800e088:	ab21      	add	r3, sp, #132	@ 0x84
 800e08a:	4604      	mov	r4, r0
 800e08c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e090:	9302      	str	r3, [sp, #8]
 800e092:	a803      	add	r0, sp, #12
 800e094:	f000 fcfb 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	4620      	mov	r0, r4
 800e09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e09e:	4798      	blx	r3
 800e0a0:	6823      	ldr	r3, [r4, #0]
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	4798      	blx	r3
 800e0aa:	4633      	mov	r3, r6
 800e0ac:	9000      	str	r0, [sp, #0]
 800e0ae:	9a02      	ldr	r2, [sp, #8]
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	a803      	add	r0, sp, #12
 800e0b4:	f000 fd46 	bl	800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e0b8:	a803      	add	r0, sp, #12
 800e0ba:	f001 f93d 	bl	800f338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e0be:	2401      	movs	r4, #1
 800e0c0:	b2a3      	uxth	r3, r4
 800e0c2:	b140      	cbz	r0, 800e0d6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800e0c4:	280a      	cmp	r0, #10
 800e0c6:	bf08      	it	eq
 800e0c8:	3301      	addeq	r3, #1
 800e0ca:	a803      	add	r0, sp, #12
 800e0cc:	bf08      	it	eq
 800e0ce:	b21c      	sxtheq	r4, r3
 800e0d0:	f001 f932 	bl	800f338 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e0d4:	e7f4      	b.n	800e0c0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	b01d      	add	sp, #116	@ 0x74
 800e0da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0de:	b003      	add	sp, #12
 800e0e0:	4770      	bx	lr

0800e0e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800e0e2:	b40e      	push	{r1, r2, r3}
 800e0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0e6:	b09e      	sub	sp, #120	@ 0x78
 800e0e8:	ab23      	add	r3, sp, #140	@ 0x8c
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0f0:	9303      	str	r3, [sp, #12]
 800e0f2:	a805      	add	r0, sp, #20
 800e0f4:	f000 fccb 	bl	800ea8e <_ZN8touchgfx12TextProviderC1Ev>
 800e0f8:	6823      	ldr	r3, [r4, #0]
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0fe:	4798      	blx	r3
 800e100:	6823      	ldr	r3, [r4, #0]
 800e102:	4606      	mov	r6, r0
 800e104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e106:	4620      	mov	r0, r4
 800e108:	4798      	blx	r3
 800e10a:	4633      	mov	r3, r6
 800e10c:	4629      	mov	r1, r5
 800e10e:	9000      	str	r0, [sp, #0]
 800e110:	9a03      	ldr	r2, [sp, #12]
 800e112:	a805      	add	r0, sp, #20
 800e114:	ad1e      	add	r5, sp, #120	@ 0x78
 800e116:	f000 fd15 	bl	800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e11a:	2100      	movs	r1, #0
 800e11c:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e120:	4622      	mov	r2, r4
 800e122:	462b      	mov	r3, r5
 800e124:	a805      	add	r0, sp, #20
 800e126:	f001 f839 	bl	800f19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e12a:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800e12e:	b1d8      	cbz	r0, 800e168 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800e130:	280a      	cmp	r0, #10
 800e132:	d012      	beq.n	800e15a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e134:	9804      	ldr	r0, [sp, #16]
 800e136:	b180      	cbz	r0, 800e15a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e138:	7b47      	ldrb	r7, [r0, #13]
 800e13a:	88e2      	ldrh	r2, [r4, #6]
 800e13c:	00fb      	lsls	r3, r7, #3
 800e13e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e142:	7a03      	ldrb	r3, [r0, #8]
 800e144:	430b      	orrs	r3, r1
 800e146:	0679      	lsls	r1, r7, #25
 800e148:	bf44      	itt	mi
 800e14a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e14e:	b21b      	sxthmi	r3, r3
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	b21b      	sxth	r3, r3
 800e154:	429e      	cmp	r6, r3
 800e156:	bfa8      	it	ge
 800e158:	461e      	movge	r6, r3
 800e15a:	462b      	mov	r3, r5
 800e15c:	4622      	mov	r2, r4
 800e15e:	2100      	movs	r1, #0
 800e160:	a805      	add	r0, sp, #20
 800e162:	f001 f81b 	bl	800f19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e166:	e7e2      	b.n	800e12e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800e168:	4630      	mov	r0, r6
 800e16a:	b01e      	add	sp, #120	@ 0x78
 800e16c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e170:	b003      	add	sp, #12
 800e172:	4770      	bx	lr

0800e174 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800e174:	b513      	push	{r0, r1, r4, lr}
 800e176:	6803      	ldr	r3, [r0, #0]
 800e178:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e17c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e180:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e184:	2400      	movs	r4, #0
 800e186:	9400      	str	r4, [sp, #0]
 800e188:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	4669      	mov	r1, sp
 800e190:	4798      	blx	r3
 800e192:	b002      	add	sp, #8
 800e194:	bd10      	pop	{r4, pc}

0800e196 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800e196:	b538      	push	{r3, r4, r5, lr}
 800e198:	680b      	ldr	r3, [r1, #0]
 800e19a:	460c      	mov	r4, r1
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	4605      	mov	r5, r0
 800e1a0:	4798      	blx	r3
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	4798      	blx	r3
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}

0800e1b0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800e1b0:	b410      	push	{r4}
 800e1b2:	880a      	ldrh	r2, [r1, #0]
 800e1b4:	8884      	ldrh	r4, [r0, #4]
 800e1b6:	4422      	add	r2, r4
 800e1b8:	800a      	strh	r2, [r1, #0]
 800e1ba:	88c4      	ldrh	r4, [r0, #6]
 800e1bc:	884a      	ldrh	r2, [r1, #2]
 800e1be:	4422      	add	r2, r4
 800e1c0:	804a      	strh	r2, [r1, #2]
 800e1c2:	6940      	ldr	r0, [r0, #20]
 800e1c4:	b120      	cbz	r0, 800e1d0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800e1c6:	6803      	ldr	r3, [r0, #0]
 800e1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ce:	4718      	bx	r3
 800e1d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800e1d6:	b570      	push	{r4, r5, r6, lr}
 800e1d8:	8882      	ldrh	r2, [r0, #4]
 800e1da:	880b      	ldrh	r3, [r1, #0]
 800e1dc:	4413      	add	r3, r2
 800e1de:	800b      	strh	r3, [r1, #0]
 800e1e0:	88c2      	ldrh	r2, [r0, #6]
 800e1e2:	884b      	ldrh	r3, [r1, #2]
 800e1e4:	460c      	mov	r4, r1
 800e1e6:	4413      	add	r3, r2
 800e1e8:	804b      	strh	r3, [r1, #2]
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	1d01      	adds	r1, r0, #4
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f7fb fc0c 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800e1f4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	dd0b      	ble.n	800e214 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e1fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e200:	2b00      	cmp	r3, #0
 800e202:	dd07      	ble.n	800e214 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e204:	6968      	ldr	r0, [r5, #20]
 800e206:	b128      	cbz	r0, 800e214 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e208:	6803      	ldr	r3, [r0, #0]
 800e20a:	4621      	mov	r1, r4
 800e20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e212:	4718      	bx	r3
 800e214:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e218 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800e218:	b570      	push	{r4, r5, r6, lr}
 800e21a:	8882      	ldrh	r2, [r0, #4]
 800e21c:	880b      	ldrh	r3, [r1, #0]
 800e21e:	4413      	add	r3, r2
 800e220:	800b      	strh	r3, [r1, #0]
 800e222:	88c2      	ldrh	r2, [r0, #6]
 800e224:	884b      	ldrh	r3, [r1, #2]
 800e226:	460c      	mov	r4, r1
 800e228:	4413      	add	r3, r2
 800e22a:	804b      	strh	r3, [r1, #2]
 800e22c:	4605      	mov	r5, r0
 800e22e:	1d01      	adds	r1, r0, #4
 800e230:	4620      	mov	r0, r4
 800e232:	f7fb fbeb 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800e236:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	dd19      	ble.n	800e272 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e23e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e242:	2b00      	cmp	r3, #0
 800e244:	dd15      	ble.n	800e272 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e246:	6968      	ldr	r0, [r5, #20]
 800e248:	b128      	cbz	r0, 800e256 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800e24a:	6803      	ldr	r3, [r0, #0]
 800e24c:	4621      	mov	r1, r4
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e254:	4718      	bx	r3
 800e256:	4b07      	ldr	r3, [pc, #28]	@ (800e274 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3304      	adds	r3, #4
 800e25c:	429d      	cmp	r5, r3
 800e25e:	d108      	bne.n	800e272 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e260:	f7fe feea 	bl	800d038 <_ZN8touchgfx11Application11getInstanceEv>
 800e264:	6803      	ldr	r3, [r0, #0]
 800e266:	6821      	ldr	r1, [r4, #0]
 800e268:	6862      	ldr	r2, [r4, #4]
 800e26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e26c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e270:	4718      	bx	r3
 800e272:	bd70      	pop	{r4, r5, r6, pc}
 800e274:	20015480 	.word	0x20015480

0800e278 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800e278:	b570      	push	{r4, r5, r6, lr}
 800e27a:	4604      	mov	r4, r0
 800e27c:	4616      	mov	r6, r2
 800e27e:	460d      	mov	r5, r1
 800e280:	b901      	cbnz	r1, 800e284 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800e282:	b192      	cbz	r2, 800e2aa <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	4620      	mov	r0, r4
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	4798      	blx	r3
 800e28c:	88e2      	ldrh	r2, [r4, #6]
 800e28e:	88a1      	ldrh	r1, [r4, #4]
 800e290:	4432      	add	r2, r6
 800e292:	4429      	add	r1, r5
 800e294:	4620      	mov	r0, r4
 800e296:	b212      	sxth	r2, r2
 800e298:	b209      	sxth	r1, r1
 800e29a:	f7f4 ffe7 	bl	800326c <_ZN8touchgfx8Drawable5setXYEss>
 800e29e:	6823      	ldr	r3, [r4, #0]
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	699b      	ldr	r3, [r3, #24]
 800e2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2a8:	4718      	bx	r3
 800e2aa:	bd70      	pop	{r4, r5, r6, pc}

0800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	4608      	mov	r0, r1
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	8023      	strh	r3, [r4, #0]
 800e2b6:	8063      	strh	r3, [r4, #2]
 800e2b8:	6803      	ldr	r3, [r0, #0]
 800e2ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e2be:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800e2c2:	80a1      	strh	r1, [r4, #4]
 800e2c4:	80e2      	strh	r2, [r4, #6]
 800e2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	4798      	blx	r3
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	bd10      	pop	{r4, pc}

0800e2d0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800e2d0:	b530      	push	{r4, r5, lr}
 800e2d2:	8083      	strh	r3, [r0, #4]
 800e2d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e2d8:	80c3      	strh	r3, [r0, #6]
 800e2da:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e2de:	7203      	strb	r3, [r0, #8]
 800e2e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e2e4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e2e8:	7243      	strb	r3, [r0, #9]
 800e2ea:	7a83      	ldrb	r3, [r0, #10]
 800e2ec:	6141      	str	r1, [r0, #20]
 800e2ee:	f365 0306 	bfi	r3, r5, #0, #7
 800e2f2:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800e2f6:	8302      	strh	r2, [r0, #24]
 800e2f8:	f365 13c7 	bfi	r3, r5, #7, #1
 800e2fc:	7283      	strb	r3, [r0, #10]
 800e2fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800e302:	72c3      	strb	r3, [r0, #11]
 800e304:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e308:	7303      	strb	r3, [r0, #12]
 800e30a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800e30e:	81c3      	strh	r3, [r0, #14]
 800e310:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800e314:	8203      	strh	r3, [r0, #16]
 800e316:	4b01      	ldr	r3, [pc, #4]	@ (800e31c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800e318:	6003      	str	r3, [r0, #0]
 800e31a:	bd30      	pop	{r4, r5, pc}
 800e31c:	08015e1c 	.word	0x08015e1c

0800e320 <_ZNK8touchgfx9ConstFont4findEt>:
 800e320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e322:	6944      	ldr	r4, [r0, #20]
 800e324:	b3bc      	cbz	r4, 800e396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e326:	88a3      	ldrh	r3, [r4, #4]
 800e328:	8b02      	ldrh	r2, [r0, #24]
 800e32a:	1acb      	subs	r3, r1, r3
 800e32c:	f102 32ff 	add.w	r2, r2, #4294967295
 800e330:	d431      	bmi.n	800e396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e332:	4293      	cmp	r3, r2
 800e334:	dd0c      	ble.n	800e350 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e336:	230e      	movs	r3, #14
 800e338:	fb03 4302 	mla	r3, r3, r2, r4
 800e33c:	889b      	ldrh	r3, [r3, #4]
 800e33e:	1a5b      	subs	r3, r3, r1
 800e340:	1ad3      	subs	r3, r2, r3
 800e342:	429a      	cmp	r2, r3
 800e344:	db27      	blt.n	800e396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e346:	2b00      	cmp	r3, #0
 800e348:	bfbc      	itt	lt
 800e34a:	2302      	movlt	r3, #2
 800e34c:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e350:	2500      	movs	r5, #0
 800e352:	260e      	movs	r6, #14
 800e354:	4295      	cmp	r5, r2
 800e356:	dc1e      	bgt.n	800e396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e358:	fb06 4003 	mla	r0, r6, r3, r4
 800e35c:	8887      	ldrh	r7, [r0, #4]
 800e35e:	42b9      	cmp	r1, r7
 800e360:	d01a      	beq.n	800e398 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e362:	d20d      	bcs.n	800e380 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e364:	1e5a      	subs	r2, r3, #1
 800e366:	4295      	cmp	r5, r2
 800e368:	dc15      	bgt.n	800e396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e36a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e36e:	1a5b      	subs	r3, r3, r1
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	429a      	cmp	r2, r3
 800e374:	db0f      	blt.n	800e396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e376:	429d      	cmp	r5, r3
 800e378:	ddec      	ble.n	800e354 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e37a:	1953      	adds	r3, r2, r5
 800e37c:	105b      	asrs	r3, r3, #1
 800e37e:	e7e9      	b.n	800e354 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e380:	1c5d      	adds	r5, r3, #1
 800e382:	42aa      	cmp	r2, r5
 800e384:	db07      	blt.n	800e396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e386:	8a43      	ldrh	r3, [r0, #18]
 800e388:	1acb      	subs	r3, r1, r3
 800e38a:	442b      	add	r3, r5
 800e38c:	429d      	cmp	r5, r3
 800e38e:	dc02      	bgt.n	800e396 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e390:	429a      	cmp	r2, r3
 800e392:	dadf      	bge.n	800e354 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e394:	e7f1      	b.n	800e37a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e396:	2000      	movs	r0, #0
 800e398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e39a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39c:	4604      	mov	r4, r0
 800e39e:	4617      	mov	r7, r2
 800e3a0:	461e      	mov	r6, r3
 800e3a2:	b911      	cbnz	r1, 800e3aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e3a4:	2500      	movs	r5, #0
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3aa:	290a      	cmp	r1, #10
 800e3ac:	d0fa      	beq.n	800e3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e3ae:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800e3b2:	4291      	cmp	r1, r2
 800e3b4:	d0f6      	beq.n	800e3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e3b6:	f242 020b 	movw	r2, #8203	@ 0x200b
 800e3ba:	4291      	cmp	r1, r2
 800e3bc:	d0f2      	beq.n	800e3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e3be:	f7ff ffaf 	bl	800e320 <_ZNK8touchgfx9ConstFont4findEt>
 800e3c2:	4605      	mov	r5, r0
 800e3c4:	b950      	cbnz	r0, 800e3dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e3c6:	6823      	ldr	r3, [r4, #0]
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	691b      	ldr	r3, [r3, #16]
 800e3cc:	4798      	blx	r3
 800e3ce:	4601      	mov	r1, r0
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f7ff ffa5 	bl	800e320 <_ZNK8touchgfx9ConstFont4findEt>
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d0e3      	beq.n	800e3a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	4629      	mov	r1, r5
 800e3e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	4798      	blx	r3
 800e3e6:	6038      	str	r0, [r7, #0]
 800e3e8:	6823      	ldr	r3, [r4, #0]
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3ee:	4798      	blx	r3
 800e3f0:	7030      	strb	r0, [r6, #0]
 800e3f2:	e7d8      	b.n	800e3a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e3f4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	4770      	bx	lr

0800e3f8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800e3f8:	2001      	movs	r0, #1
 800e3fa:	4770      	bx	lr

0800e3fc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800e3fc:	2002      	movs	r0, #2
 800e3fe:	4770      	bx	lr

0800e400 <_ZN8touchgfx6ScreenD1Ev>:
 800e400:	4770      	bx	lr

0800e402 <_ZN8touchgfx12GestureEventD1Ev>:
 800e402:	4770      	bx	lr

0800e404 <_ZN8touchgfx9DragEventD1Ev>:
 800e404:	4770      	bx	lr

0800e406 <_ZN8touchgfx10ClickEventD1Ev>:
 800e406:	4770      	bx	lr

0800e408 <_ZN8touchgfx10ClickEventD0Ev>:
 800e408:	b510      	push	{r4, lr}
 800e40a:	210c      	movs	r1, #12
 800e40c:	4604      	mov	r4, r0
 800e40e:	f004 fd71 	bl	8012ef4 <_ZdlPvj>
 800e412:	4620      	mov	r0, r4
 800e414:	bd10      	pop	{r4, pc}

0800e416 <_ZN8touchgfx9DragEventD0Ev>:
 800e416:	b510      	push	{r4, lr}
 800e418:	2110      	movs	r1, #16
 800e41a:	4604      	mov	r4, r0
 800e41c:	f004 fd6a 	bl	8012ef4 <_ZdlPvj>
 800e420:	4620      	mov	r0, r4
 800e422:	bd10      	pop	{r4, pc}

0800e424 <_ZN8touchgfx12GestureEventD0Ev>:
 800e424:	b510      	push	{r4, lr}
 800e426:	210c      	movs	r1, #12
 800e428:	4604      	mov	r4, r0
 800e42a:	f004 fd63 	bl	8012ef4 <_ZdlPvj>
 800e42e:	4620      	mov	r0, r4
 800e430:	bd10      	pop	{r4, pc}

0800e432 <_ZN8touchgfx6ScreenD0Ev>:
 800e432:	b510      	push	{r4, lr}
 800e434:	213c      	movs	r1, #60	@ 0x3c
 800e436:	4604      	mov	r4, r0
 800e438:	f004 fd5c 	bl	8012ef4 <_ZdlPvj>
 800e43c:	4620      	mov	r0, r4
 800e43e:	bd10      	pop	{r4, pc}

0800e440 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800e440:	b530      	push	{r4, r5, lr}
 800e442:	460d      	mov	r5, r1
 800e444:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e446:	b087      	sub	sp, #28
 800e448:	4604      	mov	r4, r0
 800e44a:	b301      	cbz	r1, 800e48e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800e44c:	a801      	add	r0, sp, #4
 800e44e:	f7ff ff2d 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e452:	892a      	ldrh	r2, [r5, #8]
 800e454:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e458:	7928      	ldrb	r0, [r5, #4]
 800e45a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800e45e:	f88d 0010 	strb.w	r0, [sp, #16]
 800e462:	1ad2      	subs	r2, r2, r3
 800e464:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e466:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e468:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e46c:	441a      	add	r2, r3
 800e46e:	896b      	ldrh	r3, [r5, #10]
 800e470:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e474:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e478:	1b5b      	subs	r3, r3, r5
 800e47a:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800e47c:	442b      	add	r3, r5
 800e47e:	4d05      	ldr	r5, [pc, #20]	@ (800e494 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800e480:	9503      	str	r5, [sp, #12]
 800e482:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e486:	6803      	ldr	r3, [r0, #0]
 800e488:	a903      	add	r1, sp, #12
 800e48a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e48c:	4798      	blx	r3
 800e48e:	b007      	add	sp, #28
 800e490:	bd30      	pop	{r4, r5, pc}
 800e492:	bf00      	nop
 800e494:	08015eac 	.word	0x08015eac

0800e498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e49e:	b08a      	sub	sp, #40	@ 0x28
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	b113      	cbz	r3, 800e4ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800e4a6:	790b      	ldrb	r3, [r1, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d044      	beq.n	800e536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e4ac:	f104 0804 	add.w	r8, r4, #4
 800e4b0:	4641      	mov	r1, r8
 800e4b2:	a803      	add	r0, sp, #12
 800e4b4:	f7ff fefa 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e4b8:	792b      	ldrb	r3, [r5, #4]
 800e4ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e4be:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800e4c2:	b983      	cbnz	r3, 800e4e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800e4c4:	892a      	ldrh	r2, [r5, #8]
 800e4c6:	88e9      	ldrh	r1, [r5, #6]
 800e4c8:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800e4cc:	1b92      	subs	r2, r2, r6
 800e4ce:	1bc9      	subs	r1, r1, r7
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800e4d6:	9300      	str	r3, [sp, #0]
 800e4d8:	b212      	sxth	r2, r2
 800e4da:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800e4de:	b209      	sxth	r1, r1
 800e4e0:	4640      	mov	r0, r8
 800e4e2:	f7fb f9af 	bl	8009844 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e4e6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e4e8:	b329      	cbz	r1, 800e536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e4ea:	a805      	add	r0, sp, #20
 800e4ec:	f7ff fede 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e4f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e4f4:	792b      	ldrb	r3, [r5, #4]
 800e4f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e4f8:	f88d 3020 	strb.w	r3, [sp, #32]
 800e4fc:	1abf      	subs	r7, r7, r2
 800e4fe:	88ea      	ldrh	r2, [r5, #6]
 800e500:	4417      	add	r7, r2
 800e502:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800e504:	4417      	add	r7, r2
 800e506:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e50a:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800e50e:	1ab6      	subs	r6, r6, r2
 800e510:	892a      	ldrh	r2, [r5, #8]
 800e512:	4416      	add	r6, r2
 800e514:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e516:	4416      	add	r6, r2
 800e518:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800e51c:	4a07      	ldr	r2, [pc, #28]	@ (800e53c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e51e:	9207      	str	r2, [sp, #28]
 800e520:	2600      	movs	r6, #0
 800e522:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800e526:	6803      	ldr	r3, [r0, #0]
 800e528:	a907      	add	r1, sp, #28
 800e52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e52c:	4798      	blx	r3
 800e52e:	792b      	ldrb	r3, [r5, #4]
 800e530:	b10b      	cbz	r3, 800e536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e532:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800e536:	b00a      	add	sp, #40	@ 0x28
 800e538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e53c:	08015e84 	.word	0x08015e84

0800e540 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e544:	460c      	mov	r4, r1
 800e546:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e548:	b088      	sub	sp, #32
 800e54a:	4605      	mov	r5, r0
 800e54c:	2900      	cmp	r1, #0
 800e54e:	d06d      	beq.n	800e62c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e550:	4668      	mov	r0, sp
 800e552:	f7ff feab 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e556:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800e558:	88e3      	ldrh	r3, [r4, #6]
 800e55a:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e55e:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e562:	440b      	add	r3, r1
 800e564:	b21b      	sxth	r3, r3
 800e566:	4543      	cmp	r3, r8
 800e568:	db31      	blt.n	800e5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e56a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e56e:	44c4      	add	ip, r8
 800e570:	fa0f fc8c 	sxth.w	ip, ip
 800e574:	4563      	cmp	r3, ip
 800e576:	da2a      	bge.n	800e5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e578:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800e57a:	8926      	ldrh	r6, [r4, #8]
 800e57c:	4416      	add	r6, r2
 800e57e:	b236      	sxth	r6, r6
 800e580:	42be      	cmp	r6, r7
 800e582:	db24      	blt.n	800e5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e584:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e588:	4438      	add	r0, r7
 800e58a:	b200      	sxth	r0, r0
 800e58c:	4286      	cmp	r6, r0
 800e58e:	da1e      	bge.n	800e5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e590:	8963      	ldrh	r3, [r4, #10]
 800e592:	4419      	add	r1, r3
 800e594:	b209      	sxth	r1, r1
 800e596:	4541      	cmp	r1, r8
 800e598:	db08      	blt.n	800e5ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e59a:	4561      	cmp	r1, ip
 800e59c:	da06      	bge.n	800e5ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e59e:	89a3      	ldrh	r3, [r4, #12]
 800e5a0:	441a      	add	r2, r3
 800e5a2:	b212      	sxth	r2, r2
 800e5a4:	42ba      	cmp	r2, r7
 800e5a6:	db01      	blt.n	800e5ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e5a8:	4282      	cmp	r2, r0
 800e5aa:	db10      	blt.n	800e5ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e5ac:	4b21      	ldr	r3, [pc, #132]	@ (800e634 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e5ae:	9304      	str	r3, [sp, #16]
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	f88d 3014 	strb.w	r3, [sp, #20]
 800e5b6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e5be:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e5c2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e5c6:	6803      	ldr	r3, [r0, #0]
 800e5c8:	a904      	add	r1, sp, #16
 800e5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5cc:	4798      	blx	r3
 800e5ce:	1d29      	adds	r1, r5, #4
 800e5d0:	a802      	add	r0, sp, #8
 800e5d2:	f7ff fe6b 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e5da:	88e0      	ldrh	r0, [r4, #6]
 800e5dc:	7921      	ldrb	r1, [r4, #4]
 800e5de:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800e5e2:	8922      	ldrh	r2, [r4, #8]
 800e5e4:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800e5e6:	f88d 1014 	strb.w	r1, [sp, #20]
 800e5ea:	eba3 0808 	sub.w	r8, r3, r8
 800e5ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e5f2:	1bdf      	subs	r7, r3, r7
 800e5f4:	b2bb      	uxth	r3, r7
 800e5f6:	fa1f f888 	uxth.w	r8, r8
 800e5fa:	8967      	ldrh	r7, [r4, #10]
 800e5fc:	89a4      	ldrh	r4, [r4, #12]
 800e5fe:	4440      	add	r0, r8
 800e600:	4460      	add	r0, ip
 800e602:	441a      	add	r2, r3
 800e604:	44b8      	add	r8, r7
 800e606:	4423      	add	r3, r4
 800e608:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e60c:	4433      	add	r3, r6
 800e60e:	4432      	add	r2, r6
 800e610:	44e0      	add	r8, ip
 800e612:	4c09      	ldr	r4, [pc, #36]	@ (800e638 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e614:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e616:	9404      	str	r4, [sp, #16]
 800e618:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e61c:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e620:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e624:	6803      	ldr	r3, [r0, #0]
 800e626:	a904      	add	r1, sp, #16
 800e628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e62a:	4798      	blx	r3
 800e62c:	b008      	add	sp, #32
 800e62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e632:	bf00      	nop
 800e634:	08015e84 	.word	0x08015e84
 800e638:	08015e98 	.word	0x08015e98

0800e63c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e63e:	4604      	mov	r4, r0
 800e640:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e644:	3201      	adds	r2, #1
 800e646:	d112      	bne.n	800e66e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e648:	6803      	ldr	r3, [r0, #0]
 800e64a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e64e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e652:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e656:	2500      	movs	r5, #0
 800e658:	9500      	str	r5, [sp, #0]
 800e65a:	466d      	mov	r5, sp
 800e65c:	4629      	mov	r1, r5
 800e65e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e664:	4798      	blx	r3
 800e666:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e66a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e66e:	4620      	mov	r0, r4
 800e670:	b003      	add	sp, #12
 800e672:	bd30      	pop	{r4, r5, pc}

0800e674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e674:	b513      	push	{r0, r1, r4, lr}
 800e676:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e67a:	3301      	adds	r3, #1
 800e67c:	4604      	mov	r4, r0
 800e67e:	d109      	bne.n	800e694 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e680:	4601      	mov	r1, r0
 800e682:	4668      	mov	r0, sp
 800e684:	f7ff fe12 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e688:	f8bd 3000 	ldrh.w	r3, [sp]
 800e68c:	8423      	strh	r3, [r4, #32]
 800e68e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e692:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e694:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e698:	b002      	add	sp, #8
 800e69a:	bd10      	pop	{r4, pc}

0800e69c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e69c:	b513      	push	{r0, r1, r4, lr}
 800e69e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	d109      	bne.n	800e6bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e6a8:	4601      	mov	r1, r0
 800e6aa:	4668      	mov	r0, sp
 800e6ac:	f7ff fdfe 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e6b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e6b4:	8423      	strh	r3, [r4, #32]
 800e6b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e6ba:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e6bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800e6c0:	b002      	add	sp, #8
 800e6c2:	bd10      	pop	{r4, pc}

0800e6c4 <_ZN8touchgfx6ScreenC1Ev>:
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	4b16      	ldr	r3, [pc, #88]	@ (800e724 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e6ca:	f845 3b04 	str.w	r3, [r5], #4
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	8103      	strh	r3, [r0, #8]
 800e6d2:	8143      	strh	r3, [r0, #10]
 800e6d4:	8183      	strh	r3, [r0, #12]
 800e6d6:	81c3      	strh	r3, [r0, #14]
 800e6d8:	8203      	strh	r3, [r0, #16]
 800e6da:	8243      	strh	r3, [r0, #18]
 800e6dc:	8283      	strh	r3, [r0, #20]
 800e6de:	82c3      	strh	r3, [r0, #22]
 800e6e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e6e4:	6203      	str	r3, [r0, #32]
 800e6e6:	8483      	strh	r3, [r0, #36]	@ 0x24
 800e6e8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e6ea:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800e6ee:	4a0e      	ldr	r2, [pc, #56]	@ (800e728 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e6f0:	6343      	str	r3, [r0, #52]	@ 0x34
 800e6f2:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800e6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e72c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e6f8:	6042      	str	r2, [r0, #4]
 800e6fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e6fe:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e700:	4a0b      	ldr	r2, [pc, #44]	@ (800e730 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e702:	4604      	mov	r4, r0
 800e704:	2101      	movs	r1, #1
 800e706:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800e70a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e70e:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e712:	4628      	mov	r0, r5
 800e714:	4798      	blx	r3
 800e716:	6863      	ldr	r3, [r4, #4]
 800e718:	4628      	mov	r0, r5
 800e71a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e71c:	4631      	mov	r1, r6
 800e71e:	4798      	blx	r3
 800e720:	4620      	mov	r0, r4
 800e722:	bd70      	pop	{r4, r5, r6, pc}
 800e724:	08015ec0 	.word	0x08015ec0
 800e728:	08015ac8 	.word	0x08015ac8
 800e72c:	2001543a 	.word	0x2001543a
 800e730:	20015438 	.word	0x20015438

0800e734 <_ZN8touchgfx6Screen4drawEv>:
 800e734:	b507      	push	{r0, r1, r2, lr}
 800e736:	4b09      	ldr	r3, [pc, #36]	@ (800e75c <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e738:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e73c:	4b08      	ldr	r3, [pc, #32]	@ (800e760 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e73e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e742:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e746:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e74a:	6803      	ldr	r3, [r0, #0]
 800e74c:	2100      	movs	r1, #0
 800e74e:	9100      	str	r1, [sp, #0]
 800e750:	689b      	ldr	r3, [r3, #8]
 800e752:	4669      	mov	r1, sp
 800e754:	4798      	blx	r3
 800e756:	b003      	add	sp, #12
 800e758:	f85d fb04 	ldr.w	pc, [sp], #4
 800e75c:	20015438 	.word	0x20015438
 800e760:	2001543a 	.word	0x2001543a

0800e764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e768:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	b089      	sub	sp, #36	@ 0x24
 800e770:	4680      	mov	r8, r0
 800e772:	460c      	mov	r4, r1
 800e774:	4615      	mov	r5, r2
 800e776:	dd0e      	ble.n	800e796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e778:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	dd0a      	ble.n	800e796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e780:	4628      	mov	r0, r5
 800e782:	f7ff ff5b 	bl	800e63c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e786:	4621      	mov	r1, r4
 800e788:	f7fe fb77 	bl	800ce7a <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e78c:	69eb      	ldr	r3, [r5, #28]
 800e78e:	b928      	cbnz	r0, 800e79c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e790:	461d      	mov	r5, r3
 800e792:	2b00      	cmp	r3, #0
 800e794:	d1f4      	bne.n	800e780 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e796:	b009      	add	sp, #36	@ 0x24
 800e798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79c:	ae04      	add	r6, sp, #16
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	f000 80b5 	beq.w	800e90e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e7a4:	682b      	ldr	r3, [r5, #0]
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	a802      	add	r0, sp, #8
 800e7ac:	4798      	blx	r3
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f7ff ff60 	bl	800e674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e7b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e7b8:	4407      	add	r7, r0
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	f7ff ff6e 	bl	800e69c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e7c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e7c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e7c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e7cc:	4418      	add	r0, r3
 800e7ce:	4621      	mov	r1, r4
 800e7d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e7d4:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e7d8:	b23f      	sxth	r7, r7
 800e7da:	4630      	mov	r0, r6
 800e7dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e7e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e7e4:	f7fb f912 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff ff27 	bl	800e63c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e7f4:	ab06      	add	r3, sp, #24
 800e7f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800e7fa:	4611      	mov	r1, r2
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fb f905 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800e802:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e806:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e80a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e80e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e812:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e816:	4299      	cmp	r1, r3
 800e818:	d10b      	bne.n	800e832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e81a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e81e:	4552      	cmp	r2, sl
 800e820:	d107      	bne.n	800e832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e822:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e826:	455a      	cmp	r2, fp
 800e828:	d103      	bne.n	800e832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e82a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e82e:	454a      	cmp	r2, r9
 800e830:	d06d      	beq.n	800e90e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e832:	f1bb 0f00 	cmp.w	fp, #0
 800e836:	dd65      	ble.n	800e904 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e838:	f1b9 0f00 	cmp.w	r9, #0
 800e83c:	dd62      	ble.n	800e904 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e83e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e842:	fa1f f08a 	uxth.w	r0, sl
 800e846:	4552      	cmp	r2, sl
 800e848:	9000      	str	r0, [sp, #0]
 800e84a:	da12      	bge.n	800e872 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e84c:	9301      	str	r3, [sp, #4]
 800e84e:	9b00      	ldr	r3, [sp, #0]
 800e850:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e854:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e858:	1a9a      	subs	r2, r3, r2
 800e85a:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e85e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e862:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e866:	69ea      	ldr	r2, [r5, #28]
 800e868:	4631      	mov	r1, r6
 800e86a:	4640      	mov	r0, r8
 800e86c:	f7ff ff7a 	bl	800e764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e870:	9b01      	ldr	r3, [sp, #4]
 800e872:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e876:	429a      	cmp	r2, r3
 800e878:	b29f      	uxth	r7, r3
 800e87a:	da0d      	bge.n	800e898 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e87c:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e880:	1aba      	subs	r2, r7, r2
 800e882:	f8ad a012 	strh.w	sl, [sp, #18]
 800e886:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e88a:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e88e:	69ea      	ldr	r2, [r5, #28]
 800e890:	4631      	mov	r1, r6
 800e892:	4640      	mov	r0, r8
 800e894:	f7ff ff66 	bl	800e764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e898:	8822      	ldrh	r2, [r4, #0]
 800e89a:	88a3      	ldrh	r3, [r4, #4]
 800e89c:	445f      	add	r7, fp
 800e89e:	4413      	add	r3, r2
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	b2bf      	uxth	r7, r7
 800e8a4:	b23a      	sxth	r2, r7
 800e8a6:	b219      	sxth	r1, r3
 800e8a8:	4291      	cmp	r1, r2
 800e8aa:	dd0d      	ble.n	800e8c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e8ac:	1bdb      	subs	r3, r3, r7
 800e8ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e8b2:	f8ad a012 	strh.w	sl, [sp, #18]
 800e8b6:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e8ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e8be:	69ea      	ldr	r2, [r5, #28]
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	f7ff ff4e 	bl	800e764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e8c8:	88e2      	ldrh	r2, [r4, #6]
 800e8ca:	8863      	ldrh	r3, [r4, #2]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	9a00      	ldr	r2, [sp, #0]
 800e8d0:	444a      	add	r2, r9
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	fa1f f982 	uxth.w	r9, r2
 800e8d8:	fa0f f289 	sxth.w	r2, r9
 800e8dc:	b219      	sxth	r1, r3
 800e8de:	428a      	cmp	r2, r1
 800e8e0:	da15      	bge.n	800e90e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e8e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e8e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e8ea:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e8ee:	eba3 0309 	sub.w	r3, r3, r9
 800e8f2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e8f6:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e8fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e8fe:	69ea      	ldr	r2, [r5, #28]
 800e900:	4631      	mov	r1, r6
 800e902:	e001      	b.n	800e908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e904:	69ea      	ldr	r2, [r5, #28]
 800e906:	4621      	mov	r1, r4
 800e908:	4640      	mov	r0, r8
 800e90a:	f7ff ff2b 	bl	800e764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e90e:	4628      	mov	r0, r5
 800e910:	f7ff fe94 	bl	800e63c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e914:	6861      	ldr	r1, [r4, #4]
 800e916:	4602      	mov	r2, r0
 800e918:	6820      	ldr	r0, [r4, #0]
 800e91a:	4633      	mov	r3, r6
 800e91c:	c303      	stmia	r3!, {r0, r1}
 800e91e:	4611      	mov	r1, r2
 800e920:	4630      	mov	r0, r6
 800e922:	f7fb f873 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800e926:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	f77f af33 	ble.w	800e796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e930:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e934:	2b00      	cmp	r3, #0
 800e936:	f77f af2e 	ble.w	800e796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e93a:	4628      	mov	r0, r5
 800e93c:	f7ff fe9a 	bl	800e674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e940:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e944:	1a18      	subs	r0, r3, r0
 800e946:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e94a:	4628      	mov	r0, r5
 800e94c:	f7ff fea6 	bl	800e69c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e950:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e954:	1a18      	subs	r0, r3, r0
 800e956:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e95a:	682b      	ldr	r3, [r5, #0]
 800e95c:	4631      	mov	r1, r6
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	4628      	mov	r0, r5
 800e962:	4798      	blx	r3
 800e964:	e717      	b.n	800e796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e966 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e966:	b570      	push	{r4, r5, r6, lr}
 800e968:	460c      	mov	r4, r1
 800e96a:	b086      	sub	sp, #24
 800e96c:	1d06      	adds	r6, r0, #4
 800e96e:	2300      	movs	r3, #0
 800e970:	4631      	mov	r1, r6
 800e972:	4605      	mov	r5, r0
 800e974:	a802      	add	r0, sp, #8
 800e976:	9301      	str	r3, [sp, #4]
 800e978:	f7ff fc98 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e97c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e980:	8822      	ldrh	r2, [r4, #0]
 800e982:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e986:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e98a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e98e:	1ad2      	subs	r2, r2, r3
 800e990:	8863      	ldrh	r3, [r4, #2]
 800e992:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e996:	1a5b      	subs	r3, r3, r1
 800e998:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e99c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e9a0:	aa01      	add	r2, sp, #4
 800e9a2:	a904      	add	r1, sp, #16
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e9aa:	f7fb f907 	bl	8009bbc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e9ae:	9a01      	ldr	r2, [sp, #4]
 800e9b0:	b11a      	cbz	r2, 800e9ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e9b2:	4621      	mov	r1, r4
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	f7ff fed5 	bl	800e764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e9ba:	b006      	add	sp, #24
 800e9bc:	bd70      	pop	{r4, r5, r6, pc}

0800e9be <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e9be:	b530      	push	{r4, r5, lr}
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e9c8:	b085      	sub	sp, #20
 800e9ca:	460d      	mov	r5, r1
 800e9cc:	6851      	ldr	r1, [r2, #4]
 800e9ce:	466b      	mov	r3, sp
 800e9d0:	c303      	stmia	r3!, {r0, r1}
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	4668      	mov	r0, sp
 800e9d6:	f7fb f819 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 800e9da:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e9de:	b12b      	cbz	r3, 800e9ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e9e0:	4669      	mov	r1, sp
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f7ff ffbf 	bl	800e966 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e9e8:	b005      	add	sp, #20
 800e9ea:	bd30      	pop	{r4, r5, pc}
 800e9ec:	3404      	adds	r4, #4
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	a802      	add	r0, sp, #8
 800e9f2:	f7ff fc5b 	bl	800e2ac <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e9f6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e9fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e9fe:	1a9b      	subs	r3, r3, r2
 800ea00:	f8ad 3000 	strh.w	r3, [sp]
 800ea04:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800ea08:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ea0c:	4669      	mov	r1, sp
 800ea0e:	1a9b      	subs	r3, r3, r2
 800ea10:	4620      	mov	r0, r4
 800ea12:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ea16:	f7fb f898 	bl	8009b4a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800ea1a:	e7e5      	b.n	800e9e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800ea1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800ea1c:	680a      	ldr	r2, [r1, #0]
 800ea1e:	460b      	mov	r3, r1
 800ea20:	6992      	ldr	r2, [r2, #24]
 800ea22:	1d01      	adds	r1, r0, #4
 800ea24:	4618      	mov	r0, r3
 800ea26:	4710      	bx	r2

0800ea28 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800ea28:	4298      	cmp	r0, r3
 800ea2a:	d200      	bcs.n	800ea2e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800ea2c:	b913      	cbnz	r3, 800ea34 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800ea2e:	440a      	add	r2, r1
 800ea30:	b210      	sxth	r0, r2
 800ea32:	4770      	bx	lr
 800ea34:	ee07 0a90 	vmov	s15, r0
 800ea38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea3c:	ee07 3a90 	vmov	s15, r3
 800ea40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ea4c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ea50:	ee07 2a90 	vmov	s15, r2
 800ea54:	ee67 5a07 	vmul.f32	s11, s14, s14
 800ea58:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800ea5c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800ea60:	ee07 1a90 	vmov	s15, r1
 800ea64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ea6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ea70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ea74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea78:	bfcc      	ite	gt
 800ea7a:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800ea7e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800ea82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea86:	ee17 3a90 	vmov	r3, s15
 800ea8a:	b218      	sxth	r0, r3
 800ea8c:	4770      	bx	lr

0800ea8e <_ZN8touchgfx12TextProviderC1Ev>:
 800ea8e:	b538      	push	{r3, r4, r5, lr}
 800ea90:	2500      	movs	r5, #0
 800ea92:	2302      	movs	r3, #2
 800ea94:	4604      	mov	r4, r0
 800ea96:	e9c0 5500 	strd	r5, r5, [r0]
 800ea9a:	7403      	strb	r3, [r0, #16]
 800ea9c:	6145      	str	r5, [r0, #20]
 800ea9e:	7605      	strb	r5, [r0, #24]
 800eaa0:	83c5      	strh	r5, [r0, #30]
 800eaa2:	8405      	strh	r5, [r0, #32]
 800eaa4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800eaa6:	8705      	strh	r5, [r0, #56]	@ 0x38
 800eaa8:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800eaaa:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800eaae:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800eab2:	220e      	movs	r2, #14
 800eab4:	4629      	mov	r1, r5
 800eab6:	304c      	adds	r0, #76	@ 0x4c
 800eab8:	f004 fc51 	bl	801335e <memset>
 800eabc:	2301      	movs	r3, #1
 800eabe:	4620      	mov	r0, r4
 800eac0:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800eac4:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800eac8:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800eacc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800ead0:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800ead4:	f7f5 f8a8 	bl	8003c28 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800ead8:	4620      	mov	r0, r4
 800eada:	bd38      	pop	{r3, r4, r5, pc}

0800eadc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800eadc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800eade:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800eae2:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800eae4:	fab0 f080 	clz	r0, r0
 800eae8:	0940      	lsrs	r0, r0, #5
 800eaea:	4770      	bx	lr

0800eaec <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800eaec:	b530      	push	{r4, r5, lr}
 800eaee:	2500      	movs	r5, #0
 800eaf0:	2401      	movs	r4, #1
 800eaf2:	6843      	ldr	r3, [r0, #4]
 800eaf4:	b913      	cbnz	r3, 800eafc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800eaf6:	6803      	ldr	r3, [r0, #0]
 800eaf8:	b313      	cbz	r3, 800eb40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800eafa:	6043      	str	r3, [r0, #4]
 800eafc:	7e03      	ldrb	r3, [r0, #24]
 800eafe:	b143      	cbz	r3, 800eb12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800eb00:	6943      	ldr	r3, [r0, #20]
 800eb02:	b12b      	cbz	r3, 800eb10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800eb04:	881a      	ldrh	r2, [r3, #0]
 800eb06:	b11a      	cbz	r2, 800eb10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800eb08:	1c9a      	adds	r2, r3, #2
 800eb0a:	6142      	str	r2, [r0, #20]
 800eb0c:	8818      	ldrh	r0, [r3, #0]
 800eb0e:	bd30      	pop	{r4, r5, pc}
 800eb10:	7605      	strb	r5, [r0, #24]
 800eb12:	6843      	ldr	r3, [r0, #4]
 800eb14:	8819      	ldrh	r1, [r3, #0]
 800eb16:	b199      	cbz	r1, 800eb40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800eb18:	1c9a      	adds	r2, r3, #2
 800eb1a:	2902      	cmp	r1, #2
 800eb1c:	6042      	str	r2, [r0, #4]
 800eb1e:	d1f5      	bne.n	800eb0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800eb20:	7c03      	ldrb	r3, [r0, #16]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d8e5      	bhi.n	800eaf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800eb26:	1c5a      	adds	r2, r3, #1
 800eb28:	3302      	adds	r3, #2
 800eb2a:	7402      	strb	r2, [r0, #16]
 800eb2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800eb30:	6143      	str	r3, [r0, #20]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d0dd      	beq.n	800eaf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d0da      	beq.n	800eaf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800eb3c:	7604      	strb	r4, [r0, #24]
 800eb3e:	e7d8      	b.n	800eaf2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800eb40:	2000      	movs	r0, #0
 800eb42:	e7e4      	b.n	800eb0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800eb44:	b430      	push	{r4, r5}
 800eb46:	6001      	str	r1, [r0, #0]
 800eb48:	2100      	movs	r1, #0
 800eb4a:	6041      	str	r1, [r0, #4]
 800eb4c:	6815      	ldr	r5, [r2, #0]
 800eb4e:	6085      	str	r5, [r0, #8]
 800eb50:	6852      	ldr	r2, [r2, #4]
 800eb52:	6443      	str	r3, [r0, #68]	@ 0x44
 800eb54:	9b02      	ldr	r3, [sp, #8]
 800eb56:	60c2      	str	r2, [r0, #12]
 800eb58:	7401      	strb	r1, [r0, #16]
 800eb5a:	6141      	str	r1, [r0, #20]
 800eb5c:	7601      	strb	r1, [r0, #24]
 800eb5e:	8701      	strh	r1, [r0, #56]	@ 0x38
 800eb60:	8401      	strh	r1, [r0, #32]
 800eb62:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800eb66:	6483      	str	r3, [r0, #72]	@ 0x48
 800eb68:	bc30      	pop	{r4, r5}
 800eb6a:	f7f5 b85d 	b.w	8003c28 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800eb6e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800eb6e:	b408      	push	{r3}
 800eb70:	b510      	push	{r4, lr}
 800eb72:	b085      	sub	sp, #20
 800eb74:	ac07      	add	r4, sp, #28
 800eb76:	f854 3b04 	ldr.w	r3, [r4], #4
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	4622      	mov	r2, r4
 800eb80:	9403      	str	r4, [sp, #12]
 800eb82:	f7ff ffdf 	bl	800eb44 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800eb86:	b005      	add	sp, #20
 800eb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb8c:	b001      	add	sp, #4
 800eb8e:	4770      	bx	lr

0800eb90 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800eb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb92:	4605      	mov	r5, r0
 800eb94:	4608      	mov	r0, r1
 800eb96:	b1e9      	cbz	r1, 800ebd4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800eb98:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	f101 0708 	add.w	r7, r1, #8
 800eba2:	4622      	mov	r2, r4
 800eba4:	6818      	ldr	r0, [r3, #0]
 800eba6:	6859      	ldr	r1, [r3, #4]
 800eba8:	4626      	mov	r6, r4
 800ebaa:	c603      	stmia	r6!, {r0, r1}
 800ebac:	3308      	adds	r3, #8
 800ebae:	42bb      	cmp	r3, r7
 800ebb0:	4634      	mov	r4, r6
 800ebb2:	d1f7      	bne.n	800eba4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800ebb4:	6818      	ldr	r0, [r3, #0]
 800ebb6:	6030      	str	r0, [r6, #0]
 800ebb8:	889b      	ldrh	r3, [r3, #4]
 800ebba:	80b3      	strh	r3, [r6, #4]
 800ebbc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800ebc0:	015b      	lsls	r3, r3, #5
 800ebc2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800ebc6:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	425b      	negs	r3, r3
 800ebce:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800ebd2:	4610      	mov	r0, r2
 800ebd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebd6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800ebd6:	b538      	push	{r3, r4, r5, lr}
 800ebd8:	460c      	mov	r4, r1
 800ebda:	6811      	ldr	r1, [r2, #0]
 800ebdc:	4610      	mov	r0, r2
 800ebde:	68cd      	ldr	r5, [r1, #12]
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	47a8      	blx	r5
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	bf08      	it	eq
 800ebe8:	4620      	moveq	r0, r4
 800ebea:	bd38      	pop	{r3, r4, r5, pc}

0800ebec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800ebec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf0:	468c      	mov	ip, r1
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	4614      	mov	r4, r2
 800ebf6:	b942      	cbnz	r2, 800ec0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800ebf8:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800ebfc:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800ec00:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800ec04:	4620      	mov	r0, r4
 800ec06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0a:	7b50      	ldrb	r0, [r2, #13]
 800ec0c:	8893      	ldrh	r3, [r2, #4]
 800ec0e:	0106      	lsls	r6, r0, #4
 800ec10:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800ec14:	79e6      	ldrb	r6, [r4, #7]
 800ec16:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800ec1a:	4316      	orrs	r6, r2
 800ec1c:	185a      	adds	r2, r3, r1
 800ec1e:	b291      	uxth	r1, r2
 800ec20:	291d      	cmp	r1, #29
 800ec22:	b2b7      	uxth	r7, r6
 800ec24:	d87e      	bhi.n	800ed24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800ec26:	2201      	movs	r2, #1
 800ec28:	408a      	lsls	r2, r1
 800ec2a:	498a      	ldr	r1, [pc, #552]	@ (800ee54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 800ec2c:	420a      	tst	r2, r1
 800ec2e:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800ec32:	d12d      	bne.n	800ec90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800ec34:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800ec38:	d074      	beq.n	800ed24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800ec3a:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800ec3e:	4623      	mov	r3, r4
 800ec40:	f104 0e08 	add.w	lr, r4, #8
 800ec44:	4614      	mov	r4, r2
 800ec46:	6818      	ldr	r0, [r3, #0]
 800ec48:	6859      	ldr	r1, [r3, #4]
 800ec4a:	4694      	mov	ip, r2
 800ec4c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800ec50:	3308      	adds	r3, #8
 800ec52:	4573      	cmp	r3, lr
 800ec54:	4662      	mov	r2, ip
 800ec56:	d1f6      	bne.n	800ec46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800ec58:	6818      	ldr	r0, [r3, #0]
 800ec5a:	f8cc 0000 	str.w	r0, [ip]
 800ec5e:	889b      	ldrh	r3, [r3, #4]
 800ec60:	f8ac 3004 	strh.w	r3, [ip, #4]
 800ec64:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800ec68:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800ec6c:	b2b3      	uxth	r3, r6
 800ec6e:	1aca      	subs	r2, r1, r3
 800ec70:	b292      	uxth	r2, r2
 800ec72:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800ec76:	10d2      	asrs	r2, r2, #3
 800ec78:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800ec7c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800ec80:	4302      	orrs	r2, r0
 800ec82:	1bcf      	subs	r7, r1, r7
 800ec84:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800ec88:	1afb      	subs	r3, r7, r3
 800ec8a:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800ec8e:	e7b9      	b.n	800ec04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800ec90:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800ec94:	4623      	mov	r3, r4
 800ec96:	f104 0808 	add.w	r8, r4, #8
 800ec9a:	4614      	mov	r4, r2
 800ec9c:	6818      	ldr	r0, [r3, #0]
 800ec9e:	6859      	ldr	r1, [r3, #4]
 800eca0:	4696      	mov	lr, r2
 800eca2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800eca6:	3308      	adds	r3, #8
 800eca8:	4543      	cmp	r3, r8
 800ecaa:	4672      	mov	r2, lr
 800ecac:	d1f6      	bne.n	800ec9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800ecae:	6818      	ldr	r0, [r3, #0]
 800ecb0:	f8ce 0000 	str.w	r0, [lr]
 800ecb4:	889b      	ldrh	r3, [r3, #4]
 800ecb6:	f8ae 3004 	strh.w	r3, [lr, #4]
 800ecba:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800ecbc:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ecc0:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800ecc2:	f640 6333 	movw	r3, #3635	@ 0xe33
 800ecc6:	4299      	cmp	r1, r3
 800ecc8:	d111      	bne.n	800ecee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800ecca:	f8dc 3000 	ldr.w	r3, [ip]
 800ecce:	4660      	mov	r0, ip
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	4798      	blx	r3
 800ecd4:	7b41      	ldrb	r1, [r0, #13]
 800ecd6:	00cb      	lsls	r3, r1, #3
 800ecd8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ecdc:	7a03      	ldrb	r3, [r0, #8]
 800ecde:	4313      	orrs	r3, r2
 800ece0:	064a      	lsls	r2, r1, #25
 800ece2:	bf44      	itt	mi
 800ece4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ece8:	b21b      	sxthmi	r3, r3
 800ecea:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800ecee:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800ecf2:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800ecf6:	443b      	add	r3, r7
 800ecf8:	4433      	add	r3, r6
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800ed00:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800ed04:	10db      	asrs	r3, r3, #3
 800ed06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ed0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800ed14:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800ed18:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800ed1c:	1a9b      	subs	r3, r3, r2
 800ed1e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800ed22:	e76f      	b.n	800ec04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800ed24:	f023 0204 	bic.w	r2, r3, #4
 800ed28:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800ed2c:	428a      	cmp	r2, r1
 800ed2e:	d003      	beq.n	800ed38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800ed30:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d137      	bne.n	800eda8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 800ed38:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800ed3c:	4622      	mov	r2, r4
 800ed3e:	f104 0808 	add.w	r8, r4, #8
 800ed42:	4634      	mov	r4, r6
 800ed44:	6810      	ldr	r0, [r2, #0]
 800ed46:	6851      	ldr	r1, [r2, #4]
 800ed48:	46b6      	mov	lr, r6
 800ed4a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ed4e:	3208      	adds	r2, #8
 800ed50:	4542      	cmp	r2, r8
 800ed52:	4676      	mov	r6, lr
 800ed54:	d1f6      	bne.n	800ed44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800ed56:	6810      	ldr	r0, [r2, #0]
 800ed58:	f8ce 0000 	str.w	r0, [lr]
 800ed5c:	8892      	ldrh	r2, [r2, #4]
 800ed5e:	f8ae 2004 	strh.w	r2, [lr, #4]
 800ed62:	3b01      	subs	r3, #1
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	4662      	mov	r2, ip
 800ed68:	4621      	mov	r1, r4
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f7ff ff33 	bl	800ebd6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800ed70:	7b41      	ldrb	r1, [r0, #13]
 800ed72:	00cb      	lsls	r3, r1, #3
 800ed74:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ed78:	7a03      	ldrb	r3, [r0, #8]
 800ed7a:	0648      	lsls	r0, r1, #25
 800ed7c:	ea43 0302 	orr.w	r3, r3, r2
 800ed80:	bf44      	itt	mi
 800ed82:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ed86:	b21b      	sxthmi	r3, r3
 800ed88:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800ed8c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800ed90:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800ed94:	005b      	lsls	r3, r3, #1
 800ed96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	115a      	asrs	r2, r3, #5
 800ed9e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800eda2:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800eda6:	e046      	b.n	800ee36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 800eda8:	00c2      	lsls	r2, r0, #3
 800edaa:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800edae:	7a22      	ldrb	r2, [r4, #8]
 800edb0:	430a      	orrs	r2, r1
 800edb2:	0641      	lsls	r1, r0, #25
 800edb4:	bf44      	itt	mi
 800edb6:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800edba:	b212      	sxthmi	r2, r2
 800edbc:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800edc0:	f640 6109 	movw	r1, #3593	@ 0xe09
 800edc4:	f023 0210 	bic.w	r2, r3, #16
 800edc8:	428a      	cmp	r2, r1
 800edca:	d003      	beq.n	800edd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 800edcc:	f640 6213 	movw	r2, #3603	@ 0xe13
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d13d      	bne.n	800ee50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 800edd4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800edd8:	f104 0808 	add.w	r8, r4, #8
 800eddc:	4696      	mov	lr, r2
 800edde:	6820      	ldr	r0, [r4, #0]
 800ede0:	6861      	ldr	r1, [r4, #4]
 800ede2:	4616      	mov	r6, r2
 800ede4:	c603      	stmia	r6!, {r0, r1}
 800ede6:	3408      	adds	r4, #8
 800ede8:	4544      	cmp	r4, r8
 800edea:	4632      	mov	r2, r6
 800edec:	d1f7      	bne.n	800edde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 800edee:	6820      	ldr	r0, [r4, #0]
 800edf0:	6030      	str	r0, [r6, #0]
 800edf2:	88a1      	ldrh	r1, [r4, #4]
 800edf4:	80b1      	strh	r1, [r6, #4]
 800edf6:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800edfa:	0076      	lsls	r6, r6, #1
 800edfc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800ee00:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800ee04:	4316      	orrs	r6, r2
 800ee06:	f640 6213 	movw	r2, #3603	@ 0xe13
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	bf1a      	itte	ne
 800ee0e:	f103 33ff 	addne.w	r3, r3, #4294967295
 800ee12:	b29b      	uxthne	r3, r3
 800ee14:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800ee18:	4662      	mov	r2, ip
 800ee1a:	4671      	mov	r1, lr
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	4674      	mov	r4, lr
 800ee20:	f7ff fed9 	bl	800ebd6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800ee24:	7b43      	ldrb	r3, [r0, #13]
 800ee26:	7a82      	ldrb	r2, [r0, #10]
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	1af6      	subs	r6, r6, r3
 800ee32:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800ee36:	7b61      	ldrb	r1, [r4, #13]
 800ee38:	00cb      	lsls	r3, r1, #3
 800ee3a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ee3e:	7a23      	ldrb	r3, [r4, #8]
 800ee40:	4313      	orrs	r3, r2
 800ee42:	064a      	lsls	r2, r1, #25
 800ee44:	bf44      	itt	mi
 800ee46:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ee4a:	b21b      	sxthmi	r3, r3
 800ee4c:	1bdb      	subs	r3, r3, r7
 800ee4e:	e71c      	b.n	800ec8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800ee50:	2300      	movs	r3, #0
 800ee52:	e7a6      	b.n	800eda2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 800ee54:	3fc00079 	.word	0x3fc00079

0800ee58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800ee58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	b942      	cbnz	r2, 800ee72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800ee60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee64:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800ee68:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800ee6c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800ee70:	e047      	b.n	800ef02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ee72:	7b51      	ldrb	r1, [r2, #13]
 800ee74:	8893      	ldrh	r3, [r2, #4]
 800ee76:	010d      	lsls	r5, r1, #4
 800ee78:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800ee7c:	79d5      	ldrb	r5, [r2, #7]
 800ee7e:	4305      	orrs	r5, r0
 800ee80:	2d04      	cmp	r5, #4
 800ee82:	bfcc      	ite	gt
 800ee84:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800ee88:	f04f 0e01 	movle.w	lr, #1
 800ee8c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800ee90:	f200 80ab 	bhi.w	800efea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800ee94:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800ee98:	4283      	cmp	r3, r0
 800ee9a:	d216      	bcs.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee9c:	f240 605b 	movw	r0, #1627	@ 0x65b
 800eea0:	4283      	cmp	r3, r0
 800eea2:	d859      	bhi.n	800ef58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800eea4:	f240 6057 	movw	r0, #1623	@ 0x657
 800eea8:	4283      	cmp	r3, r0
 800eeaa:	d20e      	bcs.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eeac:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800eeb0:	d24a      	bcs.n	800ef48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800eeb2:	f240 604e 	movw	r0, #1614	@ 0x64e
 800eeb6:	4283      	cmp	r3, r0
 800eeb8:	d207      	bcs.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eeba:	f240 601a 	movw	r0, #1562	@ 0x61a
 800eebe:	4283      	cmp	r3, r0
 800eec0:	d02a      	beq.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eec2:	d821      	bhi.n	800ef08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800eec4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800eec8:	d35b      	bcc.n	800ef82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800eeca:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800eece:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800eed2:	f040 80d0 	bne.w	800f076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800eed6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800eeda:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800eede:	f040 80ca 	bne.w	800f076 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800eee2:	00cb      	lsls	r3, r1, #3
 800eee4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800eee8:	7a13      	ldrb	r3, [r2, #8]
 800eeea:	0649      	lsls	r1, r1, #25
 800eeec:	ea43 0300 	orr.w	r3, r3, r0
 800eef0:	bf44      	itt	mi
 800eef2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eef6:	b21b      	sxthmi	r3, r3
 800eef8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eefc:	1b5d      	subs	r5, r3, r5
 800eefe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ef02:	4610      	mov	r0, r2
 800ef04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef08:	f240 604b 	movw	r0, #1611	@ 0x64b
 800ef0c:	4283      	cmp	r3, r0
 800ef0e:	d338      	bcc.n	800ef82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ef10:	f240 604c 	movw	r0, #1612	@ 0x64c
 800ef14:	4283      	cmp	r3, r0
 800ef16:	d9d8      	bls.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef18:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800ef1c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800ef20:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ef24:	f040 80f2 	bne.w	800f10c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800ef28:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ef2c:	f040 80ee 	bne.w	800f10c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800ef30:	00cb      	lsls	r3, r1, #3
 800ef32:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ef36:	7a13      	ldrb	r3, [r2, #8]
 800ef38:	064e      	lsls	r6, r1, #25
 800ef3a:	ea43 0300 	orr.w	r3, r3, r0
 800ef3e:	bf44      	itt	mi
 800ef40:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ef44:	b21b      	sxthmi	r3, r3
 800ef46:	e7d9      	b.n	800eefc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800ef48:	f240 6054 	movw	r0, #1620	@ 0x654
 800ef4c:	4283      	cmp	r3, r0
 800ef4e:	d8e3      	bhi.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef50:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800ef54:	d9e0      	bls.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef56:	e7b8      	b.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef58:	f240 6074 	movw	r0, #1652	@ 0x674
 800ef5c:	4283      	cmp	r3, r0
 800ef5e:	d0b4      	beq.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef60:	d82d      	bhi.n	800efbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800ef62:	f240 605e 	movw	r0, #1630	@ 0x65e
 800ef66:	4283      	cmp	r3, r0
 800ef68:	d804      	bhi.n	800ef74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800ef6a:	f240 605d 	movw	r0, #1629	@ 0x65d
 800ef6e:	4283      	cmp	r3, r0
 800ef70:	d3d2      	bcc.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef72:	e7aa      	b.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef74:	f240 605f 	movw	r0, #1631	@ 0x65f
 800ef78:	4283      	cmp	r3, r0
 800ef7a:	d0cd      	beq.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef7c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800ef80:	d0a3      	beq.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef82:	00cb      	lsls	r3, r1, #3
 800ef84:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ef88:	7a13      	ldrb	r3, [r2, #8]
 800ef8a:	0649      	lsls	r1, r1, #25
 800ef8c:	ea43 0300 	orr.w	r3, r3, r0
 800ef90:	bf44      	itt	mi
 800ef92:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ef96:	b21b      	sxthmi	r3, r3
 800ef98:	1b5d      	subs	r5, r3, r5
 800ef9a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ef9e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800efa2:	7b53      	ldrb	r3, [r2, #13]
 800efa4:	015b      	lsls	r3, r3, #5
 800efa6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800efaa:	7993      	ldrb	r3, [r2, #6]
 800efac:	430b      	orrs	r3, r1
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	2105      	movs	r1, #5
 800efb2:	fb93 f3f1 	sdiv	r3, r3, r1
 800efb6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800efba:	440b      	add	r3, r1
 800efbc:	e756      	b.n	800ee6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800efbe:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800efc2:	4283      	cmp	r3, r0
 800efc4:	d809      	bhi.n	800efda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800efc6:	f240 60df 	movw	r0, #1759	@ 0x6df
 800efca:	4283      	cmp	r3, r0
 800efcc:	f4bf af7d 	bcs.w	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800efd0:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800efd4:	2b05      	cmp	r3, #5
 800efd6:	d8d4      	bhi.n	800ef82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800efd8:	e777      	b.n	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800efda:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800efde:	4283      	cmp	r3, r0
 800efe0:	d09a      	beq.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800efe2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800efe6:	4283      	cmp	r3, r0
 800efe8:	e7ca      	b.n	800ef80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800efea:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800efee:	d22b      	bcs.n	800f048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800eff0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800eff4:	4283      	cmp	r3, r0
 800eff6:	d28f      	bcs.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eff8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800effc:	4283      	cmp	r3, r0
 800effe:	d816      	bhi.n	800f02e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800f000:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800f004:	4283      	cmp	r3, r0
 800f006:	f4bf af60 	bcs.w	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f00a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800f00e:	4283      	cmp	r3, r0
 800f010:	d80a      	bhi.n	800f028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800f012:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800f016:	4283      	cmp	r3, r0
 800f018:	f4bf af57 	bcs.w	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f01c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800f020:	4283      	cmp	r3, r0
 800f022:	f43f af79 	beq.w	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f026:	e7ac      	b.n	800ef82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f028:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800f02c:	e7f8      	b.n	800f020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800f02e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800f032:	4283      	cmp	r3, r0
 800f034:	d802      	bhi.n	800f03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800f036:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800f03a:	e798      	b.n	800ef6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800f03c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800f040:	4283      	cmp	r3, r0
 800f042:	f47f af42 	bne.w	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f046:	e767      	b.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f048:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800f04c:	4283      	cmp	r3, r0
 800f04e:	f43f af63 	beq.w	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f052:	d802      	bhi.n	800f05a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800f054:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800f058:	e7f2      	b.n	800f040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800f05a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800f05e:	4283      	cmp	r3, r0
 800f060:	d805      	bhi.n	800f06e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800f062:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800f066:	4283      	cmp	r3, r0
 800f068:	f4ff af2f 	bcc.w	800eeca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f06c:	e754      	b.n	800ef18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f06e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800f072:	4283      	cmp	r3, r0
 800f074:	e7af      	b.n	800efd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800f076:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f07a:	4617      	mov	r7, r2
 800f07c:	f102 0808 	add.w	r8, r2, #8
 800f080:	4666      	mov	r6, ip
 800f082:	6838      	ldr	r0, [r7, #0]
 800f084:	6879      	ldr	r1, [r7, #4]
 800f086:	46e6      	mov	lr, ip
 800f088:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800f08c:	3708      	adds	r7, #8
 800f08e:	4547      	cmp	r7, r8
 800f090:	46f4      	mov	ip, lr
 800f092:	d1f6      	bne.n	800f082 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800f094:	6838      	ldr	r0, [r7, #0]
 800f096:	f8ce 0000 	str.w	r0, [lr]
 800f09a:	88b9      	ldrh	r1, [r7, #4]
 800f09c:	f8ae 1004 	strh.w	r1, [lr, #4]
 800f0a0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f0a4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f0a8:	d009      	beq.n	800f0be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800f0aa:	7b51      	ldrb	r1, [r2, #13]
 800f0ac:	7992      	ldrb	r2, [r2, #6]
 800f0ae:	0149      	lsls	r1, r1, #5
 800f0b0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f0b4:	4311      	orrs	r1, r2
 800f0b6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f0ba:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f0be:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f0c2:	b2ad      	uxth	r5, r5
 800f0c4:	d00d      	beq.n	800f0e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800f0c6:	442b      	add	r3, r5
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f0ce:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f0d2:	10db      	asrs	r3, r3, #3
 800f0d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f0d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f0e2:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f0e6:	00cb      	lsls	r3, r1, #3
 800f0e8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f0ec:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f0f0:	064f      	lsls	r7, r1, #25
 800f0f2:	ea43 0302 	orr.w	r3, r3, r2
 800f0f6:	bf44      	itt	mi
 800f0f8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f0fc:	b21b      	sxthmi	r3, r3
 800f0fe:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f102:	1b5b      	subs	r3, r3, r5
 800f104:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800f108:	4632      	mov	r2, r6
 800f10a:	e6fa      	b.n	800ef02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800f10c:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f110:	4617      	mov	r7, r2
 800f112:	f102 0908 	add.w	r9, r2, #8
 800f116:	4666      	mov	r6, ip
 800f118:	6838      	ldr	r0, [r7, #0]
 800f11a:	6879      	ldr	r1, [r7, #4]
 800f11c:	46e0      	mov	r8, ip
 800f11e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800f122:	3708      	adds	r7, #8
 800f124:	454f      	cmp	r7, r9
 800f126:	46c4      	mov	ip, r8
 800f128:	d1f6      	bne.n	800f118 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800f12a:	6838      	ldr	r0, [r7, #0]
 800f12c:	f8c8 0000 	str.w	r0, [r8]
 800f130:	88b9      	ldrh	r1, [r7, #4]
 800f132:	f8a8 1004 	strh.w	r1, [r8, #4]
 800f136:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f13a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f13e:	d009      	beq.n	800f154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800f140:	7b51      	ldrb	r1, [r2, #13]
 800f142:	7992      	ldrb	r2, [r2, #6]
 800f144:	0149      	lsls	r1, r1, #5
 800f146:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f14a:	4311      	orrs	r1, r2
 800f14c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f150:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f154:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f158:	d00e      	beq.n	800f178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800f15a:	eba3 030e 	sub.w	r3, r3, lr
 800f15e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f162:	b29b      	uxth	r3, r3
 800f164:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f168:	10db      	asrs	r3, r3, #3
 800f16a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f16e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f172:	4313      	orrs	r3, r2
 800f174:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f178:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f17c:	00cb      	lsls	r3, r1, #3
 800f17e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f182:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f186:	0648      	lsls	r0, r1, #25
 800f188:	ea43 0302 	orr.w	r3, r3, r2
 800f18c:	bf44      	itt	mi
 800f18e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f192:	b21b      	sxthmi	r3, r3
 800f194:	1b5d      	subs	r5, r3, r5
 800f196:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f19a:	e7b5      	b.n	800f108 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800f19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800f19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a0:	461e      	mov	r6, r3
 800f1a2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f1a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	4617      	mov	r7, r2
 800f1ac:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f1b0:	f7f4 fcf8 	bl	8003ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f1b4:	4605      	mov	r5, r0
 800f1b6:	b918      	cbnz	r0, 800f1c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800f1b8:	6030      	str	r0, [r6, #0]
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	4601      	mov	r1, r0
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	4638      	mov	r0, r7
 800f1c8:	4798      	blx	r3
 800f1ca:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f1ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	6030      	str	r0, [r6, #0]
 800f1d6:	d213      	bcs.n	800f200 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800f1d8:	4643      	mov	r3, r8
 800f1da:	4639      	mov	r1, r7
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f7ff fe3b 	bl	800ee58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f1e2:	6030      	str	r0, [r6, #0]
 800f1e4:	6833      	ldr	r3, [r6, #0]
 800f1e6:	b143      	cbz	r3, 800f1fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800f1e8:	7b5a      	ldrb	r2, [r3, #13]
 800f1ea:	7a9b      	ldrb	r3, [r3, #10]
 800f1ec:	0052      	lsls	r2, r2, #1
 800f1ee:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	bf0c      	ite	eq
 800f1f6:	2301      	moveq	r3, #1
 800f1f8:	2300      	movne	r3, #0
 800f1fa:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f1fe:	e7dc      	b.n	800f1ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800f200:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f204:	b29b      	uxth	r3, r3
 800f206:	2b7f      	cmp	r3, #127	@ 0x7f
 800f208:	d804      	bhi.n	800f214 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800f20a:	4639      	mov	r1, r7
 800f20c:	4620      	mov	r0, r4
 800f20e:	f7ff fced 	bl	800ebec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f212:	e7e6      	b.n	800f1e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800f214:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d0e3      	beq.n	800f1e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f21c:	f640 1302 	movw	r3, #2306	@ 0x902
 800f220:	429d      	cmp	r5, r3
 800f222:	d1df      	bne.n	800f1e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f224:	4601      	mov	r1, r0
 800f226:	4620      	mov	r0, r4
 800f228:	f7ff fcb2 	bl	800eb90 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f22c:	e7d9      	b.n	800f1e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800f22e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800f22e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f232:	461e      	mov	r6, r3
 800f234:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f236:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f23a:	4604      	mov	r4, r0
 800f23c:	4617      	mov	r7, r2
 800f23e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f242:	f7f4 fcaf 	bl	8003ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f246:	4605      	mov	r5, r0
 800f248:	b918      	cbnz	r0, 800f252 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800f24a:	6030      	str	r0, [r6, #0]
 800f24c:	4628      	mov	r0, r5
 800f24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	4601      	mov	r1, r0
 800f256:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f25a:	4638      	mov	r0, r7
 800f25c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f260:	47c8      	blx	r9
 800f262:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f26a:	4602      	mov	r2, r0
 800f26c:	6030      	str	r0, [r6, #0]
 800f26e:	d213      	bcs.n	800f298 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800f270:	4643      	mov	r3, r8
 800f272:	4639      	mov	r1, r7
 800f274:	4620      	mov	r0, r4
 800f276:	f7ff fdef 	bl	800ee58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f27a:	6030      	str	r0, [r6, #0]
 800f27c:	6833      	ldr	r3, [r6, #0]
 800f27e:	b143      	cbz	r3, 800f292 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800f280:	7b5a      	ldrb	r2, [r3, #13]
 800f282:	7a9b      	ldrb	r3, [r3, #10]
 800f284:	0052      	lsls	r2, r2, #1
 800f286:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f28a:	4313      	orrs	r3, r2
 800f28c:	bf0c      	ite	eq
 800f28e:	2301      	moveq	r3, #1
 800f290:	2300      	movne	r3, #0
 800f292:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f296:	e7d9      	b.n	800f24c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800f298:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f2a0:	d804      	bhi.n	800f2ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800f2a2:	4639      	mov	r1, r7
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f7ff fca1 	bl	800ebec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f2aa:	e7e6      	b.n	800f27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800f2ac:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d0e3      	beq.n	800f27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800f2b4:	f640 1302 	movw	r3, #2306	@ 0x902
 800f2b8:	429d      	cmp	r5, r3
 800f2ba:	d1df      	bne.n	800f27c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800f2bc:	4601      	mov	r1, r0
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f7ff fc66 	bl	800eb90 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f2c4:	e7d9      	b.n	800f27a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800f2c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800f2c6:	b510      	push	{r4, lr}
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800f2ce:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f2d0:	b1f1      	cbz	r1, 800f310 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800f2d2:	2b0a      	cmp	r3, #10
 800f2d4:	d02f      	beq.n	800f336 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800f2d6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800f2d8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800f2dc:	3901      	subs	r1, #1
 800f2de:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800f2e0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800f2e4:	1c51      	adds	r1, r2, #1
 800f2e6:	b289      	uxth	r1, r1
 800f2e8:	2901      	cmp	r1, #1
 800f2ea:	bf84      	itt	hi
 800f2ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f2f0:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800f2f2:	f103 0201 	add.w	r2, r3, #1
 800f2f6:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f2f8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f2fa:	bf98      	it	ls
 800f2fc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800f2fe:	4413      	add	r3, r2
 800f300:	b29b      	uxth	r3, r3
 800f302:	2b09      	cmp	r3, #9
 800f304:	bf88      	it	hi
 800f306:	3b0a      	subhi	r3, #10
 800f308:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f30c:	8458      	strh	r0, [r3, #34]	@ 0x22
 800f30e:	e7dc      	b.n	800f2ca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800f310:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f312:	2b0a      	cmp	r3, #10
 800f314:	d00f      	beq.n	800f336 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800f316:	4620      	mov	r0, r4
 800f318:	f7ff fbe8 	bl	800eaec <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800f31c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f31e:	1c5a      	adds	r2, r3, #1
 800f320:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f322:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f324:	4413      	add	r3, r2
 800f326:	b29b      	uxth	r3, r3
 800f328:	2b09      	cmp	r3, #9
 800f32a:	bf88      	it	hi
 800f32c:	3b0a      	subhi	r3, #10
 800f32e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f332:	8458      	strh	r0, [r3, #34]	@ 0x22
 800f334:	e7ec      	b.n	800f310 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800f336:	bd10      	pop	{r4, pc}

0800f338 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f33c:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800f340:	4604      	mov	r4, r0
 800f342:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800f344:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800f346:	3a01      	subs	r2, #1
 800f348:	8702      	strh	r2, [r0, #56]	@ 0x38
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	b292      	uxth	r2, r2
 800f34e:	2a09      	cmp	r2, #9
 800f350:	bf86      	itte	hi
 800f352:	3b09      	subhi	r3, #9
 800f354:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800f356:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800f358:	f7ff ffb5 	bl	800f2c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800f35c:	8c23      	ldrh	r3, [r4, #32]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	bf9c      	itt	ls
 800f362:	3301      	addls	r3, #1
 800f364:	8423      	strhls	r3, [r4, #32]
 800f366:	8be3      	ldrh	r3, [r4, #30]
 800f368:	b90b      	cbnz	r3, 800f36e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800f36a:	2302      	movs	r3, #2
 800f36c:	83e3      	strh	r3, [r4, #30]
 800f36e:	8be3      	ldrh	r3, [r4, #30]
 800f370:	3b01      	subs	r3, #1
 800f372:	b29b      	uxth	r3, r3
 800f374:	83e3      	strh	r3, [r4, #30]
 800f376:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f37a:	4628      	mov	r0, r5
 800f37c:	8365      	strh	r5, [r4, #26]
 800f37e:	bd38      	pop	{r3, r4, r5, pc}

0800f380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800f380:	428a      	cmp	r2, r1
 800f382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f386:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800f388:	d931      	bls.n	800f3ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800f38a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800f38c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800f390:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800f394:	19ee      	adds	r6, r5, r7
 800f396:	1a54      	subs	r4, r2, r1
 800f398:	3e01      	subs	r6, #1
 800f39a:	fa1f fe84 	uxth.w	lr, r4
 800f39e:	b2b4      	uxth	r4, r6
 800f3a0:	eba4 090e 	sub.w	r9, r4, lr
 800f3a4:	fa1f f989 	uxth.w	r9, r9
 800f3a8:	2c09      	cmp	r4, #9
 800f3aa:	4626      	mov	r6, r4
 800f3ac:	bf88      	it	hi
 800f3ae:	f1a4 060a 	subhi.w	r6, r4, #10
 800f3b2:	f1bc 0f00 	cmp.w	ip, #0
 800f3b6:	bf08      	it	eq
 800f3b8:	f04f 0c02 	moveq.w	ip, #2
 800f3bc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f3c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f3c4:	fa1f fc8c 	uxth.w	ip, ip
 800f3c8:	3c01      	subs	r4, #1
 800f3ca:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800f3ce:	b2a4      	uxth	r4, r4
 800f3d0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800f3d4:	454c      	cmp	r4, r9
 800f3d6:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800f3da:	d1e5      	bne.n	800f3a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800f3dc:	eba5 050e 	sub.w	r5, r5, lr
 800f3e0:	eb0e 0408 	add.w	r4, lr, r8
 800f3e4:	8705      	strh	r5, [r0, #56]	@ 0x38
 800f3e6:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800f3ea:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800f3ee:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800f3f0:	1a64      	subs	r4, r4, r1
 800f3f2:	4439      	add	r1, r7
 800f3f4:	b289      	uxth	r1, r1
 800f3f6:	2909      	cmp	r1, #9
 800f3f8:	bf88      	it	hi
 800f3fa:	390a      	subhi	r1, #10
 800f3fc:	8704      	strh	r4, [r0, #56]	@ 0x38
 800f3fe:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f400:	250a      	movs	r5, #10
 800f402:	b18a      	cbz	r2, 800f428 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800f404:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800f406:	3a01      	subs	r2, #1
 800f408:	b292      	uxth	r2, r2
 800f40a:	3101      	adds	r1, #1
 800f40c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800f410:	8701      	strh	r1, [r0, #56]	@ 0x38
 800f412:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f414:	b901      	cbnz	r1, 800f418 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800f416:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800f418:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f41a:	3901      	subs	r1, #1
 800f41c:	b289      	uxth	r1, r1
 800f41e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f420:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f424:	844c      	strh	r4, [r1, #34]	@ 0x22
 800f426:	e7ec      	b.n	800f402 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800f428:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f42c:	f7ff bf4b 	b.w	800f2c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800f430 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800f430:	b570      	push	{r4, r5, r6, lr}
 800f432:	2500      	movs	r5, #0
 800f434:	4295      	cmp	r5, r2
 800f436:	d011      	beq.n	800f45c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800f438:	8bc4      	ldrh	r4, [r0, #30]
 800f43a:	f831 6b02 	ldrh.w	r6, [r1], #2
 800f43e:	4414      	add	r4, r2
 800f440:	3c01      	subs	r4, #1
 800f442:	1b64      	subs	r4, r4, r5
 800f444:	b2a4      	uxth	r4, r4
 800f446:	2c01      	cmp	r4, #1
 800f448:	bf88      	it	hi
 800f44a:	3c02      	subhi	r4, #2
 800f44c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f450:	8b64      	ldrh	r4, [r4, #26]
 800f452:	42b4      	cmp	r4, r6
 800f454:	d117      	bne.n	800f486 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800f456:	3501      	adds	r5, #1
 800f458:	b2ad      	uxth	r5, r5
 800f45a:	e7eb      	b.n	800f434 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800f45c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f460:	2400      	movs	r4, #0
 800f462:	4413      	add	r3, r2
 800f464:	b2a2      	uxth	r2, r4
 800f466:	429a      	cmp	r2, r3
 800f468:	da0f      	bge.n	800f48a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800f46a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800f46c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800f470:	4432      	add	r2, r6
 800f472:	b292      	uxth	r2, r2
 800f474:	2a09      	cmp	r2, #9
 800f476:	bf88      	it	hi
 800f478:	3a0a      	subhi	r2, #10
 800f47a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f47e:	3401      	adds	r4, #1
 800f480:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800f482:	42aa      	cmp	r2, r5
 800f484:	d0ee      	beq.n	800f464 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800f486:	2000      	movs	r0, #0
 800f488:	bd70      	pop	{r4, r5, r6, pc}
 800f48a:	2001      	movs	r0, #1
 800f48c:	e7fc      	b.n	800f488 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800f48e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800f48e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f492:	4605      	mov	r5, r0
 800f494:	4616      	mov	r6, r2
 800f496:	1c8c      	adds	r4, r1, #2
 800f498:	8809      	ldrh	r1, [r1, #0]
 800f49a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800f49e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800f4a2:	42b3      	cmp	r3, r6
 800f4a4:	d124      	bne.n	800f4f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800f4a6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800f4aa:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800f4ae:	f001 070f 	and.w	r7, r1, #15
 800f4b2:	f8cd 8000 	str.w	r8, [sp]
 800f4b6:	464b      	mov	r3, r9
 800f4b8:	4652      	mov	r2, sl
 800f4ba:	4621      	mov	r1, r4
 800f4bc:	4628      	mov	r0, r5
 800f4be:	f7ff ffb7 	bl	800f430 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800f4c2:	4683      	mov	fp, r0
 800f4c4:	b168      	cbz	r0, 800f4e2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800f4c6:	eb0a 0109 	add.w	r1, sl, r9
 800f4ca:	4441      	add	r1, r8
 800f4cc:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800f4d0:	463a      	mov	r2, r7
 800f4d2:	4649      	mov	r1, r9
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f7ff ff53 	bl	800f380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f4da:	4658      	mov	r0, fp
 800f4dc:	b003      	add	sp, #12
 800f4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e2:	eb07 010a 	add.w	r1, r7, sl
 800f4e6:	4449      	add	r1, r9
 800f4e8:	4441      	add	r1, r8
 800f4ea:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f4ee:	e7d2      	b.n	800f496 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f4f0:	f04f 0b00 	mov.w	fp, #0
 800f4f4:	e7f1      	b.n	800f4da <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f4f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f4f6:	b570      	push	{r4, r5, r6, lr}
 800f4f8:	8810      	ldrh	r0, [r2, #0]
 800f4fa:	4298      	cmp	r0, r3
 800f4fc:	d817      	bhi.n	800f52e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f4fe:	1e48      	subs	r0, r1, #1
 800f500:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f504:	4298      	cmp	r0, r3
 800f506:	d312      	bcc.n	800f52e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f508:	2400      	movs	r4, #0
 800f50a:	428c      	cmp	r4, r1
 800f50c:	d20f      	bcs.n	800f52e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f50e:	1860      	adds	r0, r4, r1
 800f510:	1040      	asrs	r0, r0, #1
 800f512:	0085      	lsls	r5, r0, #2
 800f514:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f518:	42b3      	cmp	r3, r6
 800f51a:	d902      	bls.n	800f522 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f51c:	3001      	adds	r0, #1
 800f51e:	b284      	uxth	r4, r0
 800f520:	e7f3      	b.n	800f50a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f522:	d201      	bcs.n	800f528 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f524:	b281      	uxth	r1, r0
 800f526:	e7f0      	b.n	800f50a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f528:	442a      	add	r2, r5
 800f52a:	8850      	ldrh	r0, [r2, #2]
 800f52c:	bd70      	pop	{r4, r5, r6, pc}
 800f52e:	2000      	movs	r0, #0
 800f530:	e7fc      	b.n	800f52c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f532 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f536:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f538:	886f      	ldrh	r7, [r5, #2]
 800f53a:	4604      	mov	r4, r0
 800f53c:	087f      	lsrs	r7, r7, #1
 800f53e:	260b      	movs	r6, #11
 800f540:	3e01      	subs	r6, #1
 800f542:	d013      	beq.n	800f56c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f544:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f546:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f54a:	462a      	mov	r2, r5
 800f54c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f550:	4639      	mov	r1, r7
 800f552:	4643      	mov	r3, r8
 800f554:	4620      	mov	r0, r4
 800f556:	f7ff ffce 	bl	800f4f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f55a:	b138      	cbz	r0, 800f56c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f55c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f560:	4642      	mov	r2, r8
 800f562:	4620      	mov	r0, r4
 800f564:	f7ff ff93 	bl	800f48e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f568:	2800      	cmp	r0, #0
 800f56a:	d1e9      	bne.n	800f540 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800f570:	b570      	push	{r4, r5, r6, lr}
 800f572:	694a      	ldr	r2, [r1, #20]
 800f574:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800f576:	684b      	ldr	r3, [r1, #4]
 800f578:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800f57a:	1b54      	subs	r4, r2, r5
 800f57c:	f000 8106 	beq.w	800f78c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800f580:	1b9b      	subs	r3, r3, r6
 800f582:	d003      	beq.n	800f58c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f584:	4363      	muls	r3, r4
 800f586:	2210      	movs	r2, #16
 800f588:	fb93 f3f2 	sdiv	r3, r3, r2
 800f58c:	680c      	ldr	r4, [r1, #0]
 800f58e:	698a      	ldr	r2, [r1, #24]
 800f590:	1b65      	subs	r5, r4, r5
 800f592:	f000 80fd 	beq.w	800f790 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800f596:	1b92      	subs	r2, r2, r6
 800f598:	d003      	beq.n	800f5a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f59a:	436a      	muls	r2, r5
 800f59c:	2410      	movs	r4, #16
 800f59e:	fb92 f2f4 	sdiv	r2, r2, r4
 800f5a2:	1a9b      	subs	r3, r3, r2
 800f5a4:	ee07 3a90 	vmov	s15, r3
 800f5a8:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800f7cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800f5ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f5b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f5b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f5b8:	460a      	mov	r2, r1
 800f5ba:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800f5be:	4603      	mov	r3, r0
 800f5c0:	f100 040c 	add.w	r4, r0, #12
 800f5c4:	eeb1 6a43 	vneg.f32	s12, s6
 800f5c8:	edd2 7a02 	vldr	s15, [r2, #8]
 800f5cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f5d0:	3214      	adds	r2, #20
 800f5d2:	ece3 6a01 	vstmia	r3!, {s13}
 800f5d6:	ed52 7a02 	vldr	s15, [r2, #-8]
 800f5da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f5de:	429c      	cmp	r4, r3
 800f5e0:	edc3 7a02 	vstr	s15, [r3, #8]
 800f5e4:	ed52 7a01 	vldr	s15, [r2, #-4]
 800f5e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f5ec:	edc3 7a05 	vstr	s15, [r3, #20]
 800f5f0:	d1ea      	bne.n	800f5c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800f5f2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f5f4:	698b      	ldr	r3, [r1, #24]
 800f5f6:	edd0 4a02 	vldr	s9, [r0, #8]
 800f5fa:	edd0 3a00 	vldr	s7, [r0]
 800f5fe:	edd0 6a01 	vldr	s13, [r0, #4]
 800f602:	ed90 5a05 	vldr	s10, [r0, #20]
 800f606:	ed90 2a03 	vldr	s4, [r0, #12]
 800f60a:	edd0 5a04 	vldr	s11, [r0, #16]
 800f60e:	ed90 1a07 	vldr	s2, [r0, #28]
 800f612:	edd0 2a06 	vldr	s5, [r0, #24]
 800f616:	1a9b      	subs	r3, r3, r2
 800f618:	ee07 3a90 	vmov	s15, r3
 800f61c:	684b      	ldr	r3, [r1, #4]
 800f61e:	1a9b      	subs	r3, r3, r2
 800f620:	ee07 3a10 	vmov	s14, r3
 800f624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f628:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f62c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f630:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800f634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f638:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800f63c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f640:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f644:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f648:	ee32 5a45 	vsub.f32	s10, s4, s10
 800f64c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f650:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800f654:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f656:	694a      	ldr	r2, [r1, #20]
 800f658:	1b13      	subs	r3, r2, r4
 800f65a:	ee07 3a10 	vmov	s14, r3
 800f65e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f662:	680b      	ldr	r3, [r1, #0]
 800f664:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f668:	1b1b      	subs	r3, r3, r4
 800f66a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800f66e:	ee07 3a10 	vmov	s14, r3
 800f672:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f676:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f67a:	eee6 4a87 	vfma.f32	s9, s13, s14
 800f67e:	ee64 4a86 	vmul.f32	s9, s9, s12
 800f682:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800f686:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f688:	698b      	ldr	r3, [r1, #24]
 800f68a:	1a9b      	subs	r3, r3, r2
 800f68c:	ee06 3a90 	vmov	s13, r3
 800f690:	684b      	ldr	r3, [r1, #4]
 800f692:	1a9b      	subs	r3, r3, r2
 800f694:	ee07 3a10 	vmov	s14, r3
 800f698:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f69c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f6a0:	ee66 6a84 	vmul.f32	s13, s13, s8
 800f6a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f6a8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800f6ac:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f6b0:	ee66 6a83 	vmul.f32	s13, s13, s6
 800f6b4:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800f6b8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f6ba:	694a      	ldr	r2, [r1, #20]
 800f6bc:	1b13      	subs	r3, r2, r4
 800f6be:	ee07 3a10 	vmov	s14, r3
 800f6c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f6c6:	680b      	ldr	r3, [r1, #0]
 800f6c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f6cc:	1b1b      	subs	r3, r3, r4
 800f6ce:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800f6d2:	ee07 3a10 	vmov	s14, r3
 800f6d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f6da:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f6de:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f6e2:	edd0 5a08 	vldr	s11, [r0, #32]
 800f6e6:	ee25 5a06 	vmul.f32	s10, s10, s12
 800f6ea:	ee31 1a65 	vsub.f32	s2, s2, s11
 800f6ee:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800f6f2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f6f4:	698b      	ldr	r3, [r1, #24]
 800f6f6:	1a9b      	subs	r3, r3, r2
 800f6f8:	ee07 3a10 	vmov	s14, r3
 800f6fc:	684b      	ldr	r3, [r1, #4]
 800f6fe:	1a9b      	subs	r3, r3, r2
 800f700:	ee01 3a90 	vmov	s3, r3
 800f704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f708:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800f70c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f710:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800f714:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800f718:	ee61 1a84 	vmul.f32	s3, s3, s8
 800f71c:	eea1 7a21 	vfma.f32	s14, s2, s3
 800f720:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f724:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800f728:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f72a:	694a      	ldr	r2, [r1, #20]
 800f72c:	1b13      	subs	r3, r2, r4
 800f72e:	ee03 3a10 	vmov	s6, r3
 800f732:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f736:	680b      	ldr	r3, [r1, #0]
 800f738:	ee23 3a04 	vmul.f32	s6, s6, s8
 800f73c:	1b1b      	subs	r3, r3, r4
 800f73e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800f742:	ee03 3a10 	vmov	s6, r3
 800f746:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f74a:	ee23 4a04 	vmul.f32	s8, s6, s8
 800f74e:	eee1 5a04 	vfma.f32	s11, s2, s8
 800f752:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f756:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800f75a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800f75e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800f762:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76a:	dd13      	ble.n	800f794 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800f76c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f770:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800f774:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800f776:	eee3 7a87 	vfma.f32	s15, s7, s14
 800f77a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f782:	dd15      	ble.n	800f7b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800f784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f788:	6403      	str	r3, [r0, #64]	@ 0x40
 800f78a:	bd70      	pop	{r4, r5, r6, pc}
 800f78c:	4623      	mov	r3, r4
 800f78e:	e6fd      	b.n	800f58c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f790:	462a      	mov	r2, r5
 800f792:	e706      	b.n	800f5a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f794:	d502      	bpl.n	800f79c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800f796:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800f79a:	e7e9      	b.n	800f770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800f79c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800f7a0:	eea3 2a85 	vfma.f32	s4, s7, s10
 800f7a4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800f7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ac:	dade      	bge.n	800f76c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800f7ae:	e7f2      	b.n	800f796 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800f7b0:	d502      	bpl.n	800f7b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800f7b2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800f7b6:	e7e7      	b.n	800f788 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800f7b8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800f7bc:	eee3 4a86 	vfma.f32	s9, s7, s12
 800f7c0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800f7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c8:	dadc      	bge.n	800f784 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800f7ca:	e7f2      	b.n	800f7b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800f7cc:	3d800000 	.word	0x3d800000

0800f7d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800f7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d4:	2714      	movs	r7, #20
 800f7d6:	435f      	muls	r7, r3
 800f7d8:	eb02 0c07 	add.w	ip, r2, r7
 800f7dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800f7e0:	f115 0e0f 	adds.w	lr, r5, #15
 800f7e4:	f100 80a2 	bmi.w	800f92c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800f7e8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800f7ec:	9c08      	ldr	r4, [sp, #32]
 800f7ee:	f8c0 e014 	str.w	lr, [r0, #20]
 800f7f2:	2614      	movs	r6, #20
 800f7f4:	4366      	muls	r6, r4
 800f7f6:	eb02 0806 	add.w	r8, r2, r6
 800f7fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f7fe:	f115 040f 	adds.w	r4, r5, #15
 800f802:	f100 809f 	bmi.w	800f944 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800f806:	1124      	asrs	r4, r4, #4
 800f808:	eba4 040e 	sub.w	r4, r4, lr
 800f80c:	6184      	str	r4, [r0, #24]
 800f80e:	2c00      	cmp	r4, #0
 800f810:	f000 808a 	beq.w	800f928 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800f814:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800f818:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f81c:	5995      	ldr	r5, [r2, r6]
 800f81e:	eba4 0809 	sub.w	r8, r4, r9
 800f822:	59d4      	ldr	r4, [r2, r7]
 800f824:	eba5 0a04 	sub.w	sl, r5, r4
 800f828:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800f82c:	fb0e fe05 	mul.w	lr, lr, r5
 800f830:	fb0a ee19 	mls	lr, sl, r9, lr
 800f834:	fb08 e404 	mla	r4, r8, r4, lr
 800f838:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800f83c:	3c01      	subs	r4, #1
 800f83e:	19a4      	adds	r4, r4, r6
 800f840:	f100 808c 	bmi.w	800f95c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800f844:	fb94 fef6 	sdiv	lr, r4, r6
 800f848:	f8c0 e000 	str.w	lr, [r0]
 800f84c:	fb06 441e 	mls	r4, r6, lr, r4
 800f850:	6104      	str	r4, [r0, #16]
 800f852:	2d00      	cmp	r5, #0
 800f854:	f2c0 8095 	blt.w	800f982 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800f858:	fb95 f4f6 	sdiv	r4, r5, r6
 800f85c:	6044      	str	r4, [r0, #4]
 800f85e:	fb06 5514 	mls	r5, r6, r4, r5
 800f862:	6085      	str	r5, [r0, #8]
 800f864:	60c6      	str	r6, [r0, #12]
 800f866:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f86a:	6945      	ldr	r5, [r0, #20]
 800f86c:	59d2      	ldr	r2, [r2, r7]
 800f86e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800f9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800f872:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800f876:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800f87a:	ee07 4a10 	vmov	s14, r4
 800f87e:	6804      	ldr	r4, [r0, #0]
 800f880:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800f884:	ee07 2a90 	vmov	s15, r2
 800f888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f88c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f890:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f894:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f89c:	edd3 6a00 	vldr	s13, [r3]
 800f8a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f8a4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800f8a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f8ac:	edc0 6a07 	vstr	s13, [r0, #28]
 800f8b0:	edd0 6a01 	vldr	s13, [r0, #4]
 800f8b4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800f8b8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800f8bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f8c0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f8c4:	ed80 6a08 	vstr	s12, [r0, #32]
 800f8c8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800f8ca:	6242      	str	r2, [r0, #36]	@ 0x24
 800f8cc:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800f8d0:	ed93 6a03 	vldr	s12, [r3, #12]
 800f8d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f8d8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800f8dc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f8e0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800f8e4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800f8e8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800f8ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f8f0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800f8f4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f8f6:	6302      	str	r2, [r0, #48]	@ 0x30
 800f8f8:	ed93 6a06 	vldr	s12, [r3, #24]
 800f8fc:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800f900:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f904:	eeb0 7a46 	vmov.f32	s14, s12
 800f908:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800f90c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f910:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800f914:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800f918:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800f91c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f920:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800f924:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800f926:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800f928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f92c:	f1c5 0501 	rsb	r5, r5, #1
 800f930:	f015 050f 	ands.w	r5, r5, #15
 800f934:	bf18      	it	ne
 800f936:	2501      	movne	r5, #1
 800f938:	2410      	movs	r4, #16
 800f93a:	fb9e fef4 	sdiv	lr, lr, r4
 800f93e:	ebae 0e05 	sub.w	lr, lr, r5
 800f942:	e753      	b.n	800f7ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800f944:	f1c5 0501 	rsb	r5, r5, #1
 800f948:	f015 050f 	ands.w	r5, r5, #15
 800f94c:	bf18      	it	ne
 800f94e:	2501      	movne	r5, #1
 800f950:	f04f 0910 	mov.w	r9, #16
 800f954:	fb94 f4f9 	sdiv	r4, r4, r9
 800f958:	1b64      	subs	r4, r4, r5
 800f95a:	e755      	b.n	800f808 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800f95c:	4264      	negs	r4, r4
 800f95e:	fb94 fef6 	sdiv	lr, r4, r6
 800f962:	f1ce 0800 	rsb	r8, lr, #0
 800f966:	fb06 441e 	mls	r4, r6, lr, r4
 800f96a:	f8c0 8000 	str.w	r8, [r0]
 800f96e:	6104      	str	r4, [r0, #16]
 800f970:	2c00      	cmp	r4, #0
 800f972:	f43f af6e 	beq.w	800f852 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800f976:	ea6f 0e0e 	mvn.w	lr, lr
 800f97a:	f8c0 e000 	str.w	lr, [r0]
 800f97e:	1b34      	subs	r4, r6, r4
 800f980:	e766      	b.n	800f850 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800f982:	426d      	negs	r5, r5
 800f984:	fb95 f4f6 	sdiv	r4, r5, r6
 800f988:	f1c4 0e00 	rsb	lr, r4, #0
 800f98c:	fb06 5514 	mls	r5, r6, r4, r5
 800f990:	f8c0 e004 	str.w	lr, [r0, #4]
 800f994:	6085      	str	r5, [r0, #8]
 800f996:	2d00      	cmp	r5, #0
 800f998:	f43f af64 	beq.w	800f864 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800f99c:	43e4      	mvns	r4, r4
 800f99e:	6044      	str	r4, [r0, #4]
 800f9a0:	1b75      	subs	r5, r6, r5
 800f9a2:	e75e      	b.n	800f862 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800f9a4:	3d800000 	.word	0x3d800000

0800f9a8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	b148      	cbz	r0, 800f9c0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	b298      	uxth	r0, r3
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800f9b6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 800f9ba:	2900      	cmp	r1, #0
 800f9bc:	d1f7      	bne.n	800f9ae <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 800f9be:	4770      	bx	lr
 800f9c0:	4770      	bx	lr

0800f9c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 800f9c2:	b530      	push	{r4, r5, lr}
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	b159      	cbz	r1, 800f9e0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 800f9c8:	b148      	cbz	r0, 800f9de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	b298      	uxth	r0, r3
 800f9ce:	4282      	cmp	r2, r0
 800f9d0:	d905      	bls.n	800f9de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800f9d2:	5ccd      	ldrb	r5, [r1, r3]
 800f9d4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	2d00      	cmp	r5, #0
 800f9dc:	d1f6      	bne.n	800f9cc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 800f9de:	bd30      	pop	{r4, r5, pc}
 800f9e0:	4608      	mov	r0, r1
 800f9e2:	e7fc      	b.n	800f9de <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0800f9e4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 800f9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9e6:	b08b      	sub	sp, #44	@ 0x2c
 800f9e8:	468c      	mov	ip, r1
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f9f0:	4604      	mov	r4, r0
 800f9f2:	261f      	movs	r6, #31
 800f9f4:	af01      	add	r7, sp, #4
 800f9f6:	fb94 fef3 	sdiv	lr, r4, r3
 800f9fa:	fb03 441e 	mls	r4, r3, lr, r4
 800f9fe:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800fa02:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 800fa06:	b2ec      	uxtb	r4, r5
 800fa08:	2d09      	cmp	r5, #9
 800fa0a:	bfd4      	ite	le
 800fa0c:	3430      	addle	r4, #48	@ 0x30
 800fa0e:	3457      	addgt	r4, #87	@ 0x57
 800fa10:	b2e4      	uxtb	r4, r4
 800fa12:	55bc      	strb	r4, [r7, r6]
 800fa14:	4674      	mov	r4, lr
 800fa16:	1e71      	subs	r1, r6, #1
 800fa18:	b974      	cbnz	r4, 800fa38 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	da05      	bge.n	800fa2a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 800fa1e:	ab0a      	add	r3, sp, #40	@ 0x28
 800fa20:	4419      	add	r1, r3
 800fa22:	232d      	movs	r3, #45	@ 0x2d
 800fa24:	f801 3c24 	strb.w	r3, [r1, #-36]
 800fa28:	1eb1      	subs	r1, r6, #2
 800fa2a:	3101      	adds	r1, #1
 800fa2c:	4439      	add	r1, r7
 800fa2e:	4660      	mov	r0, ip
 800fa30:	f7ff ffc7 	bl	800f9c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800fa34:	b00b      	add	sp, #44	@ 0x2c
 800fa36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa38:	460e      	mov	r6, r1
 800fa3a:	e7dc      	b.n	800f9f6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0800fa3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 800fa3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa3e:	b08b      	sub	sp, #44	@ 0x2c
 800fa40:	468c      	mov	ip, r1
 800fa42:	2100      	movs	r1, #0
 800fa44:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800fa48:	ae01      	add	r6, sp, #4
 800fa4a:	211f      	movs	r1, #31
 800fa4c:	fbb0 f7f3 	udiv	r7, r0, r3
 800fa50:	fb03 0517 	mls	r5, r3, r7, r0
 800fa54:	b2ec      	uxtb	r4, r5
 800fa56:	2d09      	cmp	r5, #9
 800fa58:	bfd4      	ite	le
 800fa5a:	3430      	addle	r4, #48	@ 0x30
 800fa5c:	3457      	addgt	r4, #87	@ 0x57
 800fa5e:	b2e4      	uxtb	r4, r4
 800fa60:	558c      	strb	r4, [r1, r6]
 800fa62:	4638      	mov	r0, r7
 800fa64:	1e4c      	subs	r4, r1, #1
 800fa66:	b92f      	cbnz	r7, 800fa74 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 800fa68:	4431      	add	r1, r6
 800fa6a:	4660      	mov	r0, ip
 800fa6c:	f7ff ffa9 	bl	800f9c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800fa70:	b00b      	add	sp, #44	@ 0x2c
 800fa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa74:	4621      	mov	r1, r4
 800fa76:	e7e9      	b.n	800fa4c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0800fa78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 800fa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7c:	4691      	mov	r9, r2
 800fa7e:	b085      	sub	sp, #20
 800fa80:	6802      	ldr	r2, [r0, #0]
 800fa82:	9201      	str	r2, [sp, #4]
 800fa84:	4688      	mov	r8, r1
 800fa86:	4683      	mov	fp, r0
 800fa88:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800fa8c:	9103      	str	r1, [sp, #12]
 800fa8e:	4610      	mov	r0, r2
 800fa90:	461c      	mov	r4, r3
 800fa92:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800fa96:	9302      	str	r3, [sp, #8]
 800fa98:	f7ff ff86 	bl	800f9a8 <_ZN8touchgfx7Unicode6strlenEPKt>
 800fa9c:	f1b8 0f00 	cmp.w	r8, #0
 800faa0:	bf0c      	ite	eq
 800faa2:	4684      	moveq	ip, r0
 800faa4:	f100 0c01 	addne.w	ip, r0, #1
 800faa8:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 800faac:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 800fab0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800fab2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800fab4:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 800fab8:	9903      	ldr	r1, [sp, #12]
 800faba:	fa1f fc8c 	uxth.w	ip, ip
 800fabe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fac2:	d041      	beq.n	800fb48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800fac4:	d834      	bhi.n	800fb30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 800fac6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800faca:	d059      	beq.n	800fb80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 800facc:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 800fad0:	d03a      	beq.n	800fb48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800fad2:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 800fad6:	d034      	beq.n	800fb42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800fad8:	2400      	movs	r4, #0
 800fada:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800fade:	3a01      	subs	r2, #1
 800fae0:	b169      	cbz	r1, 800fafe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800fae2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fae4:	458c      	cmp	ip, r1
 800fae6:	da09      	bge.n	800fafc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800fae8:	eba1 010c 	sub.w	r1, r1, ip
 800faec:	b289      	uxth	r1, r1
 800faee:	b933      	cbnz	r3, 800fafe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800faf0:	2e00      	cmp	r6, #0
 800faf2:	d051      	beq.n	800fb98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d04f      	beq.n	800fb98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800faf8:	440c      	add	r4, r1
 800fafa:	b2a4      	uxth	r4, r4
 800fafc:	2100      	movs	r1, #0
 800fafe:	682b      	ldr	r3, [r5, #0]
 800fb00:	4293      	cmp	r3, r2
 800fb02:	da07      	bge.n	800fb14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800fb04:	f1b8 0f00 	cmp.w	r8, #0
 800fb08:	d004      	beq.n	800fb14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800fb0a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 800fb0e:	682b      	ldr	r3, [r5, #0]
 800fb10:	3301      	adds	r3, #1
 800fb12:	602b      	str	r3, [r5, #0]
 800fb14:	2730      	movs	r7, #48	@ 0x30
 800fb16:	2c00      	cmp	r4, #0
 800fb18:	d04e      	beq.n	800fbb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800fb1a:	682e      	ldr	r6, [r5, #0]
 800fb1c:	3c01      	subs	r4, #1
 800fb1e:	42b2      	cmp	r2, r6
 800fb20:	b2a4      	uxth	r4, r4
 800fb22:	dd49      	ble.n	800fbb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800fb24:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800fb28:	682b      	ldr	r3, [r5, #0]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	602b      	str	r3, [r5, #0]
 800fb2e:	e7f2      	b.n	800fb16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 800fb30:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 800fb34:	d01d      	beq.n	800fb72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 800fb36:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 800fb3a:	d002      	beq.n	800fb42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800fb3c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 800fb40:	e7c9      	b.n	800fad6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 800fb42:	4684      	mov	ip, r0
 800fb44:	f04f 0800 	mov.w	r8, #0
 800fb48:	2c00      	cmp	r4, #0
 800fb4a:	d0c6      	beq.n	800fada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800fb4c:	b947      	cbnz	r7, 800fb60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800fb4e:	2801      	cmp	r0, #1
 800fb50:	d106      	bne.n	800fb60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800fb52:	8814      	ldrh	r4, [r2, #0]
 800fb54:	2c30      	cmp	r4, #48	@ 0x30
 800fb56:	bf02      	ittt	eq
 800fb58:	3202      	addeq	r2, #2
 800fb5a:	f8cb 2000 	streq.w	r2, [fp]
 800fb5e:	4638      	moveq	r0, r7
 800fb60:	45bc      	cmp	ip, r7
 800fb62:	da14      	bge.n	800fb8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 800fb64:	b2bf      	uxth	r7, r7
 800fb66:	eba7 040c 	sub.w	r4, r7, ip
 800fb6a:	b2a4      	uxth	r4, r4
 800fb6c:	46bc      	mov	ip, r7
 800fb6e:	2600      	movs	r6, #0
 800fb70:	e7b3      	b.n	800fada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800fb72:	4684      	mov	ip, r0
 800fb74:	b16c      	cbz	r4, 800fb92 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 800fb76:	42b8      	cmp	r0, r7
 800fb78:	dd00      	ble.n	800fb7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 800fb7a:	b2b8      	uxth	r0, r7
 800fb7c:	2400      	movs	r4, #0
 800fb7e:	e003      	b.n	800fb88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 800fb80:	f04f 0c01 	mov.w	ip, #1
 800fb84:	2400      	movs	r4, #0
 800fb86:	4660      	mov	r0, ip
 800fb88:	4626      	mov	r6, r4
 800fb8a:	46a0      	mov	r8, r4
 800fb8c:	e7a5      	b.n	800fada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800fb8e:	2400      	movs	r4, #0
 800fb90:	e7ed      	b.n	800fb6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 800fb92:	4626      	mov	r6, r4
 800fb94:	46a0      	mov	r8, r4
 800fb96:	e7a0      	b.n	800fada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800fb98:	2900      	cmp	r1, #0
 800fb9a:	d0b0      	beq.n	800fafe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800fb9c:	2720      	movs	r7, #32
 800fb9e:	682e      	ldr	r6, [r5, #0]
 800fba0:	2900      	cmp	r1, #0
 800fba2:	d0ac      	beq.n	800fafe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800fba4:	3901      	subs	r1, #1
 800fba6:	4296      	cmp	r6, r2
 800fba8:	b289      	uxth	r1, r1
 800fbaa:	daa7      	bge.n	800fafc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800fbac:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800fbb0:	682b      	ldr	r3, [r5, #0]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	602b      	str	r3, [r5, #0]
 800fbb6:	e7f2      	b.n	800fb9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 800fbb8:	b188      	cbz	r0, 800fbde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800fbba:	682b      	ldr	r3, [r5, #0]
 800fbbc:	3801      	subs	r0, #1
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	b280      	uxth	r0, r0
 800fbc2:	dd0c      	ble.n	800fbde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800fbc4:	f8db 3000 	ldr.w	r3, [fp]
 800fbc8:	1c9c      	adds	r4, r3, #2
 800fbca:	f8cb 4000 	str.w	r4, [fp]
 800fbce:	881c      	ldrh	r4, [r3, #0]
 800fbd0:	682b      	ldr	r3, [r5, #0]
 800fbd2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 800fbd6:	682b      	ldr	r3, [r5, #0]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	602b      	str	r3, [r5, #0]
 800fbdc:	e7ec      	b.n	800fbb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800fbde:	2620      	movs	r6, #32
 800fbe0:	b151      	cbz	r1, 800fbf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800fbe2:	6828      	ldr	r0, [r5, #0]
 800fbe4:	3901      	subs	r1, #1
 800fbe6:	4282      	cmp	r2, r0
 800fbe8:	b289      	uxth	r1, r1
 800fbea:	dd05      	ble.n	800fbf8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800fbec:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 800fbf0:	682b      	ldr	r3, [r5, #0]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	602b      	str	r3, [r5, #0]
 800fbf6:	e7f3      	b.n	800fbe0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 800fbf8:	b005      	add	sp, #20
 800fbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 800fbfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc02:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 800fc06:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 800fc0a:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 800fc0e:	2400      	movs	r4, #0
 800fc10:	8014      	strh	r4, [r2, #0]
 800fc12:	701c      	strb	r4, [r3, #0]
 800fc14:	f888 4000 	strb.w	r4, [r8]
 800fc18:	f88c 4000 	strb.w	r4, [ip]
 800fc1c:	f88e 4000 	strb.w	r4, [lr]
 800fc20:	703c      	strb	r4, [r7, #0]
 800fc22:	6804      	ldr	r4, [r0, #0]
 800fc24:	b1a4      	cbz	r4, 800fc50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 800fc26:	8824      	ldrh	r4, [r4, #0]
 800fc28:	f04f 0901 	mov.w	r9, #1
 800fc2c:	b314      	cbz	r4, 800fc74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800fc2e:	2c2b      	cmp	r4, #43	@ 0x2b
 800fc30:	d001      	beq.n	800fc36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 800fc32:	2c20      	cmp	r4, #32
 800fc34:	d110      	bne.n	800fc58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 800fc36:	8014      	strh	r4, [r2, #0]
 800fc38:	6804      	ldr	r4, [r0, #0]
 800fc3a:	b10c      	cbz	r4, 800fc40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 800fc3c:	3402      	adds	r4, #2
 800fc3e:	6004      	str	r4, [r0, #0]
 800fc40:	680c      	ldr	r4, [r1, #0]
 800fc42:	b10c      	cbz	r4, 800fc48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 800fc44:	3401      	adds	r4, #1
 800fc46:	600c      	str	r4, [r1, #0]
 800fc48:	6804      	ldr	r4, [r0, #0]
 800fc4a:	b17c      	cbz	r4, 800fc6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 800fc4c:	8824      	ldrh	r4, [r4, #0]
 800fc4e:	e7ed      	b.n	800fc2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800fc50:	680c      	ldr	r4, [r1, #0]
 800fc52:	b17c      	cbz	r4, 800fc74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800fc54:	7824      	ldrb	r4, [r4, #0]
 800fc56:	e7e7      	b.n	800fc28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 800fc58:	2c2d      	cmp	r4, #45	@ 0x2d
 800fc5a:	d102      	bne.n	800fc62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 800fc5c:	f883 9000 	strb.w	r9, [r3]
 800fc60:	e7ea      	b.n	800fc38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800fc62:	2c23      	cmp	r4, #35	@ 0x23
 800fc64:	d107      	bne.n	800fc76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 800fc66:	f888 9000 	strb.w	r9, [r8]
 800fc6a:	e7e5      	b.n	800fc38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800fc6c:	680c      	ldr	r4, [r1, #0]
 800fc6e:	b10c      	cbz	r4, 800fc74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800fc70:	7824      	ldrb	r4, [r4, #0]
 800fc72:	e7db      	b.n	800fc2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800fc74:	2400      	movs	r4, #0
 800fc76:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800fc7a:	2b09      	cmp	r3, #9
 800fc7c:	d901      	bls.n	800fc82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 800fc7e:	2c2a      	cmp	r4, #42	@ 0x2a
 800fc80:	d122      	bne.n	800fcc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800fc82:	2301      	movs	r3, #1
 800fc84:	2c30      	cmp	r4, #48	@ 0x30
 800fc86:	f88e 3000 	strb.w	r3, [lr]
 800fc8a:	d10d      	bne.n	800fca8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800fc8c:	f88c 3000 	strb.w	r3, [ip]
 800fc90:	6803      	ldr	r3, [r0, #0]
 800fc92:	b10b      	cbz	r3, 800fc98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 800fc94:	3302      	adds	r3, #2
 800fc96:	6003      	str	r3, [r0, #0]
 800fc98:	680b      	ldr	r3, [r1, #0]
 800fc9a:	b10b      	cbz	r3, 800fca0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	600b      	str	r3, [r1, #0]
 800fca0:	6803      	ldr	r3, [r0, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d02f      	beq.n	800fd06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 800fca6:	881c      	ldrh	r4, [r3, #0]
 800fca8:	2c2a      	cmp	r4, #42	@ 0x2a
 800fcaa:	d135      	bne.n	800fd18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800fcac:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb0:	6033      	str	r3, [r6, #0]
 800fcb2:	6803      	ldr	r3, [r0, #0]
 800fcb4:	b10b      	cbz	r3, 800fcba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 800fcb6:	3302      	adds	r3, #2
 800fcb8:	6003      	str	r3, [r0, #0]
 800fcba:	680b      	ldr	r3, [r1, #0]
 800fcbc:	b10b      	cbz	r3, 800fcc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	600b      	str	r3, [r1, #0]
 800fcc2:	6803      	ldr	r3, [r0, #0]
 800fcc4:	b31b      	cbz	r3, 800fd0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 800fcc6:	881c      	ldrh	r4, [r3, #0]
 800fcc8:	2c2e      	cmp	r4, #46	@ 0x2e
 800fcca:	d11a      	bne.n	800fd02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800fccc:	2301      	movs	r3, #1
 800fcce:	703b      	strb	r3, [r7, #0]
 800fcd0:	6803      	ldr	r3, [r0, #0]
 800fcd2:	b10b      	cbz	r3, 800fcd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 800fcd4:	3302      	adds	r3, #2
 800fcd6:	6003      	str	r3, [r0, #0]
 800fcd8:	680b      	ldr	r3, [r1, #0]
 800fcda:	b10b      	cbz	r3, 800fce0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 800fcdc:	3301      	adds	r3, #1
 800fcde:	600b      	str	r3, [r1, #0]
 800fce0:	6803      	ldr	r3, [r0, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d036      	beq.n	800fd54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 800fce6:	881b      	ldrh	r3, [r3, #0]
 800fce8:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcea:	d137      	bne.n	800fd5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800fcec:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf0:	602b      	str	r3, [r5, #0]
 800fcf2:	6803      	ldr	r3, [r0, #0]
 800fcf4:	b10b      	cbz	r3, 800fcfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 800fcf6:	3302      	adds	r3, #2
 800fcf8:	6003      	str	r3, [r0, #0]
 800fcfa:	680b      	ldr	r3, [r1, #0]
 800fcfc:	b10b      	cbz	r3, 800fd02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800fcfe:	3301      	adds	r3, #1
 800fd00:	600b      	str	r3, [r1, #0]
 800fd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd06:	680c      	ldr	r4, [r1, #0]
 800fd08:	b134      	cbz	r4, 800fd18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800fd0a:	7824      	ldrb	r4, [r4, #0]
 800fd0c:	e7cc      	b.n	800fca8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800fd0e:	680b      	ldr	r3, [r1, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d0f6      	beq.n	800fd02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800fd14:	781c      	ldrb	r4, [r3, #0]
 800fd16:	e7d7      	b.n	800fcc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	6033      	str	r3, [r6, #0]
 800fd1c:	220a      	movs	r2, #10
 800fd1e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fd22:	fa1f f38c 	uxth.w	r3, ip
 800fd26:	2b09      	cmp	r3, #9
 800fd28:	d8ce      	bhi.n	800fcc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800fd2a:	6833      	ldr	r3, [r6, #0]
 800fd2c:	fb02 c303 	mla	r3, r2, r3, ip
 800fd30:	6033      	str	r3, [r6, #0]
 800fd32:	6803      	ldr	r3, [r0, #0]
 800fd34:	b10b      	cbz	r3, 800fd3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 800fd36:	3302      	adds	r3, #2
 800fd38:	6003      	str	r3, [r0, #0]
 800fd3a:	680b      	ldr	r3, [r1, #0]
 800fd3c:	b10b      	cbz	r3, 800fd42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 800fd3e:	3301      	adds	r3, #1
 800fd40:	600b      	str	r3, [r1, #0]
 800fd42:	6803      	ldr	r3, [r0, #0]
 800fd44:	b10b      	cbz	r3, 800fd4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 800fd46:	881c      	ldrh	r4, [r3, #0]
 800fd48:	e7e9      	b.n	800fd1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800fd4a:	680c      	ldr	r4, [r1, #0]
 800fd4c:	2c00      	cmp	r4, #0
 800fd4e:	d0e6      	beq.n	800fd1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800fd50:	7824      	ldrb	r4, [r4, #0]
 800fd52:	e7e4      	b.n	800fd1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800fd54:	680b      	ldr	r3, [r1, #0]
 800fd56:	b10b      	cbz	r3, 800fd5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	e7c5      	b.n	800fce8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	602a      	str	r2, [r5, #0]
 800fd60:	240a      	movs	r4, #10
 800fd62:	3b30      	subs	r3, #48	@ 0x30
 800fd64:	b29e      	uxth	r6, r3
 800fd66:	2e09      	cmp	r6, #9
 800fd68:	682a      	ldr	r2, [r5, #0]
 800fd6a:	d813      	bhi.n	800fd94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 800fd6c:	fb04 3302 	mla	r3, r4, r2, r3
 800fd70:	602b      	str	r3, [r5, #0]
 800fd72:	6803      	ldr	r3, [r0, #0]
 800fd74:	b10b      	cbz	r3, 800fd7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 800fd76:	3302      	adds	r3, #2
 800fd78:	6003      	str	r3, [r0, #0]
 800fd7a:	680b      	ldr	r3, [r1, #0]
 800fd7c:	b10b      	cbz	r3, 800fd82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 800fd7e:	3301      	adds	r3, #1
 800fd80:	600b      	str	r3, [r1, #0]
 800fd82:	6803      	ldr	r3, [r0, #0]
 800fd84:	b10b      	cbz	r3, 800fd8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	e7eb      	b.n	800fd62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800fd8a:	680b      	ldr	r3, [r1, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d0e8      	beq.n	800fd62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	e7e6      	b.n	800fd62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800fd94:	2a06      	cmp	r2, #6
 800fd96:	bfa8      	it	ge
 800fd98:	2206      	movge	r2, #6
 800fd9a:	602a      	str	r2, [r5, #0]
 800fd9c:	e7b1      	b.n	800fd02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0800fd9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 800fd9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda2:	b0a3      	sub	sp, #140	@ 0x8c
 800fda4:	2600      	movs	r6, #0
 800fda6:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 800fdaa:	4607      	mov	r7, r0
 800fdac:	4688      	mov	r8, r1
 800fdae:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	2242      	movs	r2, #66	@ 0x42
 800fdb6:	4648      	mov	r0, r9
 800fdb8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800fdba:	960d      	str	r6, [sp, #52]	@ 0x34
 800fdbc:	f003 facf 	bl	801335e <memset>
 800fdc0:	b15f      	cbz	r7, 800fdda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 800fdc2:	f108 3aff 	add.w	sl, r8, #4294967295
 800fdc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fdca:	b152      	cbz	r2, 800fde2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 800fdcc:	8812      	ldrh	r2, [r2, #0]
 800fdce:	b10a      	cbz	r2, 800fdd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800fdd0:	459a      	cmp	sl, r3
 800fdd2:	dc2e      	bgt.n	800fe32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800fdda:	4638      	mov	r0, r7
 800fddc:	b023      	add	sp, #140	@ 0x8c
 800fdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde2:	9a08      	ldr	r2, [sp, #32]
 800fde4:	2a00      	cmp	r2, #0
 800fde6:	d0f5      	beq.n	800fdd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800fde8:	7812      	ldrb	r2, [r2, #0]
 800fdea:	e7f0      	b.n	800fdce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 800fdec:	2d00      	cmp	r5, #0
 800fdee:	d0ea      	beq.n	800fdc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fdf0:	782a      	ldrb	r2, [r5, #0]
 800fdf2:	b142      	cbz	r2, 800fe06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 800fdf4:	2a25      	cmp	r2, #37	@ 0x25
 800fdf6:	d001      	beq.n	800fdfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 800fdf8:	459a      	cmp	sl, r3
 800fdfa:	dc08      	bgt.n	800fe0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 800fdfc:	f1bb 0f00 	cmp.w	fp, #0
 800fe00:	d121      	bne.n	800fe46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 800fe02:	2d00      	cmp	r5, #0
 800fe04:	d0df      	beq.n	800fdc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fe06:	782a      	ldrb	r2, [r5, #0]
 800fe08:	f04f 0b00 	mov.w	fp, #0
 800fe0c:	e01d      	b.n	800fe4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 800fe0e:	f1bb 0f00 	cmp.w	fp, #0
 800fe12:	d078      	beq.n	800ff06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 800fe14:	f8bb 2000 	ldrh.w	r2, [fp]
 800fe18:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800fe1c:	f1bb 0f00 	cmp.w	fp, #0
 800fe20:	d002      	beq.n	800fe28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 800fe22:	f10b 0202 	add.w	r2, fp, #2
 800fe26:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe28:	b10d      	cbz	r5, 800fe2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 800fe2a:	3501      	adds	r5, #1
 800fe2c:	9508      	str	r5, [sp, #32]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	930d      	str	r3, [sp, #52]	@ 0x34
 800fe32:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 800fe36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe38:	f1bb 0f00 	cmp.w	fp, #0
 800fe3c:	d0d6      	beq.n	800fdec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 800fe3e:	f8bb 2000 	ldrh.w	r2, [fp]
 800fe42:	2a00      	cmp	r2, #0
 800fe44:	d1d6      	bne.n	800fdf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 800fe46:	f8bb 2000 	ldrh.w	r2, [fp]
 800fe4a:	2a00      	cmp	r2, #0
 800fe4c:	d0bb      	beq.n	800fdc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fe4e:	459a      	cmp	sl, r3
 800fe50:	ddb9      	ble.n	800fdc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fe52:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 800fe56:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800fe5a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 800fe5e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 800fe62:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 800fe66:	960e      	str	r6, [sp, #56]	@ 0x38
 800fe68:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 800fe6c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800fe6e:	f1bb 0f00 	cmp.w	fp, #0
 800fe72:	d002      	beq.n	800fe7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 800fe74:	f10b 0302 	add.w	r3, fp, #2
 800fe78:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe7a:	b10d      	cbz	r5, 800fe80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 800fe7c:	1c6b      	adds	r3, r5, #1
 800fe7e:	9308      	str	r3, [sp, #32]
 800fe80:	ab0f      	add	r3, sp, #60	@ 0x3c
 800fe82:	9305      	str	r3, [sp, #20]
 800fe84:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 800fe88:	9304      	str	r3, [sp, #16]
 800fe8a:	ab0e      	add	r3, sp, #56	@ 0x38
 800fe8c:	9303      	str	r3, [sp, #12]
 800fe8e:	ab0c      	add	r3, sp, #48	@ 0x30
 800fe90:	9302      	str	r3, [sp, #8]
 800fe92:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800fe96:	9301      	str	r3, [sp, #4]
 800fe98:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800fea2:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 800fea6:	a908      	add	r1, sp, #32
 800fea8:	a809      	add	r0, sp, #36	@ 0x24
 800feaa:	f7ff fea8 	bl	800fbfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 800feae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	bfbe      	ittt	lt
 800feb4:	6823      	ldrlt	r3, [r4, #0]
 800feb6:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800feba:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800febc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800febe:	bfb8      	it	lt
 800fec0:	3404      	addlt	r4, #4
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	bfb8      	it	lt
 800fec6:	6823      	ldrlt	r3, [r4, #0]
 800fec8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800fecc:	bfbe      	ittt	lt
 800fece:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800fed2:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 800fed4:	3404      	addlt	r4, #4
 800fed6:	b1d9      	cbz	r1, 800ff10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 800fed8:	880b      	ldrh	r3, [r1, #0]
 800feda:	2b69      	cmp	r3, #105	@ 0x69
 800fedc:	d01f      	beq.n	800ff1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fede:	d82f      	bhi.n	800ff40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 800fee0:	2b58      	cmp	r3, #88	@ 0x58
 800fee2:	d01c      	beq.n	800ff1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fee4:	d818      	bhi.n	800ff18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 800fee6:	2b25      	cmp	r3, #37	@ 0x25
 800fee8:	d034      	beq.n	800ff54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 800feea:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 800feee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fef0:	f1bb 0f00 	cmp.w	fp, #0
 800fef4:	f000 80b8 	beq.w	8010068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 800fef8:	f8bb 5000 	ldrh.w	r5, [fp]
 800fefc:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 800ff00:	3301      	adds	r3, #1
 800ff02:	930d      	str	r3, [sp, #52]	@ 0x34
 800ff04:	e029      	b.n	800ff5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800ff06:	b10d      	cbz	r5, 800ff0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 800ff08:	782a      	ldrb	r2, [r5, #0]
 800ff0a:	e785      	b.n	800fe18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800ff0c:	462a      	mov	r2, r5
 800ff0e:	e783      	b.n	800fe18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800ff10:	2a00      	cmp	r2, #0
 800ff12:	d0ea      	beq.n	800feea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800ff14:	7813      	ldrb	r3, [r2, #0]
 800ff16:	e7e0      	b.n	800feda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 800ff18:	3b63      	subs	r3, #99	@ 0x63
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d8e5      	bhi.n	800feea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800ff1e:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800ff22:	b329      	cbz	r1, 800ff70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 800ff24:	880b      	ldrh	r3, [r1, #0]
 800ff26:	2b69      	cmp	r3, #105	@ 0x69
 800ff28:	d063      	beq.n	800fff2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800ff2a:	d825      	bhi.n	800ff78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 800ff2c:	2b63      	cmp	r3, #99	@ 0x63
 800ff2e:	d038      	beq.n	800ffa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 800ff30:	2b64      	cmp	r3, #100	@ 0x64
 800ff32:	d05e      	beq.n	800fff2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800ff34:	2b58      	cmp	r3, #88	@ 0x58
 800ff36:	d07b      	beq.n	8010030 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 800ff38:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 800ff3c:	4625      	mov	r5, r4
 800ff3e:	e036      	b.n	800ffae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800ff40:	2b73      	cmp	r3, #115	@ 0x73
 800ff42:	d0ec      	beq.n	800ff1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800ff44:	d802      	bhi.n	800ff4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 800ff46:	2b6f      	cmp	r3, #111	@ 0x6f
 800ff48:	d1cf      	bne.n	800feea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800ff4a:	e7e8      	b.n	800ff1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800ff4c:	2b75      	cmp	r3, #117	@ 0x75
 800ff4e:	d0e6      	beq.n	800ff1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800ff50:	2b78      	cmp	r3, #120	@ 0x78
 800ff52:	e7f9      	b.n	800ff48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 800ff54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff56:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 800ff5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff5c:	b10b      	cbz	r3, 800ff62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 800ff5e:	3302      	adds	r3, #2
 800ff60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff62:	9b08      	ldr	r3, [sp, #32]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f43f af2e 	beq.w	800fdc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800ff6a:	3301      	adds	r3, #1
 800ff6c:	9308      	str	r3, [sp, #32]
 800ff6e:	e72a      	b.n	800fdc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800ff70:	2a00      	cmp	r2, #0
 800ff72:	d0e1      	beq.n	800ff38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800ff74:	7813      	ldrb	r3, [r2, #0]
 800ff76:	e7d6      	b.n	800ff26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 800ff78:	2b73      	cmp	r3, #115	@ 0x73
 800ff7a:	d036      	beq.n	800ffea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 800ff7c:	d807      	bhi.n	800ff8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 800ff7e:	2b6f      	cmp	r3, #111	@ 0x6f
 800ff80:	d1da      	bne.n	800ff38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800ff82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff84:	1d25      	adds	r5, r4, #4
 800ff86:	eba8 0202 	sub.w	r2, r8, r2
 800ff8a:	2308      	movs	r3, #8
 800ff8c:	e04a      	b.n	8010024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800ff8e:	2b75      	cmp	r3, #117	@ 0x75
 800ff90:	d043      	beq.n	801001a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 800ff92:	2b78      	cmp	r3, #120	@ 0x78
 800ff94:	d1d0      	bne.n	800ff38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800ff96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff98:	1d25      	adds	r5, r4, #4
 800ff9a:	eba8 0202 	sub.w	r2, r8, r2
 800ff9e:	2310      	movs	r3, #16
 800ffa0:	e040      	b.n	8010024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800ffa2:	6823      	ldr	r3, [r4, #0]
 800ffa4:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800ffa8:	1d25      	adds	r5, r4, #4
 800ffaa:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 800ffae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffb0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d052      	beq.n	801005e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 800ffb8:	881a      	ldrh	r2, [r3, #0]
 800ffba:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 800ffbe:	a80d      	add	r0, sp, #52	@ 0x34
 800ffc0:	9005      	str	r0, [sp, #20]
 800ffc2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 800ffc6:	9004      	str	r0, [sp, #16]
 800ffc8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ffca:	9003      	str	r0, [sp, #12]
 800ffcc:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 800ffd0:	9002      	str	r0, [sp, #8]
 800ffd2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ffd4:	9001      	str	r0, [sp, #4]
 800ffd6:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 800ffda:	9000      	str	r0, [sp, #0]
 800ffdc:	e9cd 8706 	strd	r8, r7, [sp, #24]
 800ffe0:	a810      	add	r0, sp, #64	@ 0x40
 800ffe2:	f7ff fd49 	bl	800fa78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 800ffe6:	462c      	mov	r4, r5
 800ffe8:	e7b7      	b.n	800ff5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800ffea:	6823      	ldr	r3, [r4, #0]
 800ffec:	1d25      	adds	r5, r4, #4
 800ffee:	9310      	str	r3, [sp, #64]	@ 0x40
 800fff0:	e7dd      	b.n	800ffae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fff2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fff4:	6820      	ldr	r0, [r4, #0]
 800fff6:	eba8 0202 	sub.w	r2, r8, r2
 800fffa:	230a      	movs	r3, #10
 800fffc:	b292      	uxth	r2, r2
 800fffe:	4649      	mov	r1, r9
 8010000:	f7ff fcf0 	bl	800f9e4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8010004:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010008:	2b2d      	cmp	r3, #45	@ 0x2d
 801000a:	f104 0504 	add.w	r5, r4, #4
 801000e:	d1ce      	bne.n	800ffae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010010:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010014:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010016:	3302      	adds	r3, #2
 8010018:	e7e9      	b.n	800ffee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801001a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801001c:	1d25      	adds	r5, r4, #4
 801001e:	eba8 0202 	sub.w	r2, r8, r2
 8010022:	230a      	movs	r3, #10
 8010024:	b292      	uxth	r2, r2
 8010026:	4649      	mov	r1, r9
 8010028:	6820      	ldr	r0, [r4, #0]
 801002a:	f7ff fd07 	bl	800fa3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801002e:	e7be      	b.n	800ffae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010032:	6820      	ldr	r0, [r4, #0]
 8010034:	eba8 0202 	sub.w	r2, r8, r2
 8010038:	b292      	uxth	r2, r2
 801003a:	2310      	movs	r3, #16
 801003c:	4649      	mov	r1, r9
 801003e:	f7ff fcfd 	bl	800fa3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8010042:	1d25      	adds	r5, r4, #4
 8010044:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8010048:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801004c:	2b00      	cmp	r3, #0
 801004e:	d0ae      	beq.n	800ffae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010050:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8010054:	2919      	cmp	r1, #25
 8010056:	d8f7      	bhi.n	8010048 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8010058:	3b20      	subs	r3, #32
 801005a:	8013      	strh	r3, [r2, #0]
 801005c:	e7f4      	b.n	8010048 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801005e:	9a08      	ldr	r2, [sp, #32]
 8010060:	2a00      	cmp	r2, #0
 8010062:	d0aa      	beq.n	800ffba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8010064:	7812      	ldrb	r2, [r2, #0]
 8010066:	e7a8      	b.n	800ffba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8010068:	2d00      	cmp	r5, #0
 801006a:	f43f af47 	beq.w	800fefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801006e:	782d      	ldrb	r5, [r5, #0]
 8010070:	e744      	b.n	800fefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08010072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8010072:	b507      	push	{r0, r1, r2, lr}
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	4613      	mov	r3, r2
 8010078:	2200      	movs	r2, #0
 801007a:	f7ff fe90 	bl	800fd9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801007e:	b003      	add	sp, #12
 8010080:	f85d fb04 	ldr.w	pc, [sp], #4

08010084 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8010084:	b40c      	push	{r2, r3}
 8010086:	b507      	push	{r0, r1, r2, lr}
 8010088:	ab04      	add	r3, sp, #16
 801008a:	f853 2b04 	ldr.w	r2, [r3], #4
 801008e:	9301      	str	r3, [sp, #4]
 8010090:	f7ff ffef 	bl	8010072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8010094:	b003      	add	sp, #12
 8010096:	f85d eb04 	ldr.w	lr, [sp], #4
 801009a:	b002      	add	sp, #8
 801009c:	4770      	bx	lr
	...

080100a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80100a0:	4b01      	ldr	r3, [pc, #4]	@ (80100a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80100a2:	6018      	str	r0, [r3, #0]
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	200154a4 	.word	0x200154a4

080100ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80100ac:	4b06      	ldr	r3, [pc, #24]	@ (80100c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80100ae:	881a      	ldrh	r2, [r3, #0]
 80100b0:	4282      	cmp	r2, r0
 80100b2:	d807      	bhi.n	80100c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80100b4:	4b05      	ldr	r3, [pc, #20]	@ (80100cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80100b6:	881b      	ldrh	r3, [r3, #0]
 80100b8:	4413      	add	r3, r2
 80100ba:	4298      	cmp	r0, r3
 80100bc:	bfac      	ite	ge
 80100be:	2000      	movge	r0, #0
 80100c0:	2001      	movlt	r0, #1
 80100c2:	4770      	bx	lr
 80100c4:	2000      	movs	r0, #0
 80100c6:	4770      	bx	lr
 80100c8:	200154c4 	.word	0x200154c4
 80100cc:	200154c8 	.word	0x200154c8

080100d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80100d0:	b508      	push	{r3, lr}
 80100d2:	4601      	mov	r1, r0
 80100d4:	f7ff ffea 	bl	80100ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80100d8:	b118      	cbz	r0, 80100e2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80100da:	4b02      	ldr	r3, [pc, #8]	@ (80100e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80100e2:	bd08      	pop	{r3, pc}
 80100e4:	200154a8 	.word	0x200154a8

080100e8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80100e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ea:	4c24      	ldr	r4, [pc, #144]	@ (801017c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80100ec:	6823      	ldr	r3, [r4, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d042      	beq.n	8010178 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80100f2:	4a23      	ldr	r2, [pc, #140]	@ (8010180 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80100f4:	4d23      	ldr	r5, [pc, #140]	@ (8010184 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80100f6:	8811      	ldrh	r1, [r2, #0]
 80100f8:	f8b5 c000 	ldrh.w	ip, [r5]
 80100fc:	4822      	ldr	r0, [pc, #136]	@ (8010188 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80100fe:	4461      	add	r1, ip
 8010100:	1c4a      	adds	r2, r1, #1
 8010102:	f022 0201 	bic.w	r2, r2, #1
 8010106:	008f      	lsls	r7, r1, #2
 8010108:	0412      	lsls	r2, r2, #16
 801010a:	19de      	adds	r6, r3, r7
 801010c:	0c12      	lsrs	r2, r2, #16
 801010e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8010112:	6006      	str	r6, [r0, #0]
 8010114:	4e1d      	ldr	r6, [pc, #116]	@ (801018c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8010116:	19da      	adds	r2, r3, r7
 8010118:	6032      	str	r2, [r6, #0]
 801011a:	220e      	movs	r2, #14
 801011c:	fb02 f20c 	mul.w	r2, r2, ip
 8010120:	3203      	adds	r2, #3
 8010122:	f022 0203 	bic.w	r2, r2, #3
 8010126:	443a      	add	r2, r7
 8010128:	4f19      	ldr	r7, [pc, #100]	@ (8010190 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801012a:	4413      	add	r3, r2
 801012c:	603b      	str	r3, [r7, #0]
 801012e:	4f19      	ldr	r7, [pc, #100]	@ (8010194 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010130:	2300      	movs	r3, #0
 8010132:	803b      	strh	r3, [r7, #0]
 8010134:	4f18      	ldr	r7, [pc, #96]	@ (8010198 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8010136:	683f      	ldr	r7, [r7, #0]
 8010138:	1aba      	subs	r2, r7, r2
 801013a:	4f18      	ldr	r7, [pc, #96]	@ (801019c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801013c:	603a      	str	r2, [r7, #0]
 801013e:	4a18      	ldr	r2, [pc, #96]	@ (80101a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010140:	469c      	mov	ip, r3
 8010142:	8013      	strh	r3, [r2, #0]
 8010144:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8010148:	428b      	cmp	r3, r1
 801014a:	d10d      	bne.n	8010168 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801014c:	882d      	ldrh	r5, [r5, #0]
 801014e:	6830      	ldr	r0, [r6, #0]
 8010150:	2300      	movs	r3, #0
 8010152:	240e      	movs	r4, #14
 8010154:	429d      	cmp	r5, r3
 8010156:	d90f      	bls.n	8010178 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010158:	fb04 0203 	mla	r2, r4, r3, r0
 801015c:	3301      	adds	r3, #1
 801015e:	7b11      	ldrb	r1, [r2, #12]
 8010160:	f36f 1145 	bfc	r1, #5, #1
 8010164:	7311      	strb	r1, [r2, #12]
 8010166:	e7f5      	b.n	8010154 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8010168:	6822      	ldr	r2, [r4, #0]
 801016a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801016e:	6802      	ldr	r2, [r0, #0]
 8010170:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8010174:	3301      	adds	r3, #1
 8010176:	e7e7      	b.n	8010148 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8010178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801017a:	bf00      	nop
 801017c:	200154a8 	.word	0x200154a8
 8010180:	200154c4 	.word	0x200154c4
 8010184:	200154c8 	.word	0x200154c8
 8010188:	200154bc 	.word	0x200154bc
 801018c:	200154ac 	.word	0x200154ac
 8010190:	200154b4 	.word	0x200154b4
 8010194:	200154c6 	.word	0x200154c6
 8010198:	200154b0 	.word	0x200154b0
 801019c:	200154c0 	.word	0x200154c0
 80101a0:	200154b8 	.word	0x200154b8

080101a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80101a4:	4b06      	ldr	r3, [pc, #24]	@ (80101c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	b943      	cbnz	r3, 80101bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80101aa:	b139      	cbz	r1, 80101bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80101ac:	4b05      	ldr	r3, [pc, #20]	@ (80101c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80101ae:	801a      	strh	r2, [r3, #0]
 80101b0:	4b05      	ldr	r3, [pc, #20]	@ (80101c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80101b2:	6019      	str	r1, [r3, #0]
 80101b4:	4b05      	ldr	r3, [pc, #20]	@ (80101cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80101b6:	6018      	str	r0, [r3, #0]
 80101b8:	f7ff bf96 	b.w	80100e8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	200154b4 	.word	0x200154b4
 80101c4:	200154c8 	.word	0x200154c8
 80101c8:	200154b0 	.word	0x200154b0
 80101cc:	200154a8 	.word	0x200154a8

080101d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80101d0:	b470      	push	{r4, r5, r6}
 80101d2:	4c07      	ldr	r4, [pc, #28]	@ (80101f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80101d4:	6826      	ldr	r6, [r4, #0]
 80101d6:	4605      	mov	r5, r0
 80101d8:	4610      	mov	r0, r2
 80101da:	9a03      	ldr	r2, [sp, #12]
 80101dc:	b936      	cbnz	r6, 80101ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80101de:	6025      	str	r5, [r4, #0]
 80101e0:	4c04      	ldr	r4, [pc, #16]	@ (80101f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80101e2:	8021      	strh	r1, [r4, #0]
 80101e4:	bc70      	pop	{r4, r5, r6}
 80101e6:	4619      	mov	r1, r3
 80101e8:	f7ff bfdc 	b.w	80101a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80101ec:	bc70      	pop	{r4, r5, r6}
 80101ee:	4770      	bx	lr
 80101f0:	200154cc 	.word	0x200154cc
 80101f4:	200154c4 	.word	0x200154c4

080101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80101f8:	4a12      	ldr	r2, [pc, #72]	@ (8010244 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80101fa:	8803      	ldrh	r3, [r0, #0]
 80101fc:	8812      	ldrh	r2, [r2, #0]
 80101fe:	4293      	cmp	r3, r2
 8010200:	d207      	bcs.n	8010212 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8010202:	4a11      	ldr	r2, [pc, #68]	@ (8010248 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8010204:	6812      	ldr	r2, [r2, #0]
 8010206:	2114      	movs	r1, #20
 8010208:	fb01 2303 	mla	r3, r1, r3, r2
 801020c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8010210:	4770      	bx	lr
 8010212:	490e      	ldr	r1, [pc, #56]	@ (801024c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8010214:	8809      	ldrh	r1, [r1, #0]
 8010216:	4411      	add	r1, r2
 8010218:	428b      	cmp	r3, r1
 801021a:	da04      	bge.n	8010226 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801021c:	1a9b      	subs	r3, r3, r2
 801021e:	4a0c      	ldr	r2, [pc, #48]	@ (8010250 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8010220:	210e      	movs	r1, #14
 8010222:	6812      	ldr	r2, [r2, #0]
 8010224:	e7f0      	b.n	8010208 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8010226:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801022a:	4293      	cmp	r3, r2
 801022c:	d108      	bne.n	8010240 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801022e:	4b09      	ldr	r3, [pc, #36]	@ (8010254 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	b91b      	cbnz	r3, 801023c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8010234:	4b08      	ldr	r3, [pc, #32]	@ (8010258 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8010236:	f9b3 0000 	ldrsh.w	r0, [r3]
 801023a:	4770      	bx	lr
 801023c:	4b07      	ldr	r3, [pc, #28]	@ (801025c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801023e:	e7fa      	b.n	8010236 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8010240:	2000      	movs	r0, #0
 8010242:	4770      	bx	lr
 8010244:	200154c4 	.word	0x200154c4
 8010248:	200154cc 	.word	0x200154cc
 801024c:	200154c8 	.word	0x200154c8
 8010250:	200154ac 	.word	0x200154ac
 8010254:	2001543c 	.word	0x2001543c
 8010258:	2001543e 	.word	0x2001543e
 801025c:	20015440 	.word	0x20015440

08010260 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8010260:	4a12      	ldr	r2, [pc, #72]	@ (80102ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8010262:	8803      	ldrh	r3, [r0, #0]
 8010264:	8812      	ldrh	r2, [r2, #0]
 8010266:	4293      	cmp	r3, r2
 8010268:	d207      	bcs.n	801027a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801026a:	4a11      	ldr	r2, [pc, #68]	@ (80102b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801026c:	6812      	ldr	r2, [r2, #0]
 801026e:	2114      	movs	r1, #20
 8010270:	fb01 2303 	mla	r3, r1, r3, r2
 8010274:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8010278:	4770      	bx	lr
 801027a:	490e      	ldr	r1, [pc, #56]	@ (80102b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801027c:	8809      	ldrh	r1, [r1, #0]
 801027e:	4411      	add	r1, r2
 8010280:	428b      	cmp	r3, r1
 8010282:	da04      	bge.n	801028e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8010284:	1a9b      	subs	r3, r3, r2
 8010286:	4a0c      	ldr	r2, [pc, #48]	@ (80102b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8010288:	210e      	movs	r1, #14
 801028a:	6812      	ldr	r2, [r2, #0]
 801028c:	e7f0      	b.n	8010270 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801028e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010292:	4293      	cmp	r3, r2
 8010294:	d108      	bne.n	80102a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8010296:	4b09      	ldr	r3, [pc, #36]	@ (80102bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	b91b      	cbnz	r3, 80102a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801029c:	4b08      	ldr	r3, [pc, #32]	@ (80102c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801029e:	f9b3 0000 	ldrsh.w	r0, [r3]
 80102a2:	4770      	bx	lr
 80102a4:	4b07      	ldr	r3, [pc, #28]	@ (80102c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80102a6:	e7fa      	b.n	801029e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80102a8:	2000      	movs	r0, #0
 80102aa:	4770      	bx	lr
 80102ac:	200154c4 	.word	0x200154c4
 80102b0:	200154cc 	.word	0x200154cc
 80102b4:	200154c8 	.word	0x200154c8
 80102b8:	200154ac 	.word	0x200154ac
 80102bc:	2001543c 	.word	0x2001543c
 80102c0:	20015440 	.word	0x20015440
 80102c4:	2001543e 	.word	0x2001543e

080102c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80102c8:	b530      	push	{r4, r5, lr}
 80102ca:	4a22      	ldr	r2, [pc, #136]	@ (8010354 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80102cc:	880b      	ldrh	r3, [r1, #0]
 80102ce:	8812      	ldrh	r2, [r2, #0]
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d213      	bcs.n	80102fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80102d4:	4a20      	ldr	r2, [pc, #128]	@ (8010358 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80102d6:	6812      	ldr	r2, [r2, #0]
 80102d8:	2114      	movs	r1, #20
 80102da:	fb01 2303 	mla	r3, r1, r3, r2
 80102de:	8a1a      	ldrh	r2, [r3, #16]
 80102e0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80102e4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80102e8:	8a5b      	ldrh	r3, [r3, #18]
 80102ea:	8004      	strh	r4, [r0, #0]
 80102ec:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80102f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80102f4:	8041      	strh	r1, [r0, #2]
 80102f6:	8082      	strh	r2, [r0, #4]
 80102f8:	80c3      	strh	r3, [r0, #6]
 80102fa:	e024      	b.n	8010346 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80102fc:	4917      	ldr	r1, [pc, #92]	@ (801035c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80102fe:	8809      	ldrh	r1, [r1, #0]
 8010300:	4411      	add	r1, r2
 8010302:	428b      	cmp	r3, r1
 8010304:	da10      	bge.n	8010328 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8010306:	1a9b      	subs	r3, r3, r2
 8010308:	220e      	movs	r2, #14
 801030a:	4353      	muls	r3, r2
 801030c:	4a14      	ldr	r2, [pc, #80]	@ (8010360 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801030e:	6811      	ldr	r1, [r2, #0]
 8010310:	18ca      	adds	r2, r1, r3
 8010312:	5ecd      	ldrsh	r5, [r1, r3]
 8010314:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8010318:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801031c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010320:	8005      	strh	r5, [r0, #0]
 8010322:	8044      	strh	r4, [r0, #2]
 8010324:	8081      	strh	r1, [r0, #4]
 8010326:	e7e7      	b.n	80102f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010328:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801032c:	4293      	cmp	r3, r2
 801032e:	d10b      	bne.n	8010348 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8010330:	4b0c      	ldr	r3, [pc, #48]	@ (8010364 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8010332:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010336:	4b0c      	ldr	r3, [pc, #48]	@ (8010368 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8010338:	8081      	strh	r1, [r0, #4]
 801033a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801033e:	80c2      	strh	r2, [r0, #6]
 8010340:	2300      	movs	r3, #0
 8010342:	8003      	strh	r3, [r0, #0]
 8010344:	8043      	strh	r3, [r0, #2]
 8010346:	bd30      	pop	{r4, r5, pc}
 8010348:	2300      	movs	r3, #0
 801034a:	8003      	strh	r3, [r0, #0]
 801034c:	8043      	strh	r3, [r0, #2]
 801034e:	8083      	strh	r3, [r0, #4]
 8010350:	e7d2      	b.n	80102f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010352:	bf00      	nop
 8010354:	200154c4 	.word	0x200154c4
 8010358:	200154cc 	.word	0x200154cc
 801035c:	200154c8 	.word	0x200154c8
 8010360:	200154ac 	.word	0x200154ac
 8010364:	20015438 	.word	0x20015438
 8010368:	2001543a 	.word	0x2001543a

0801036c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801036c:	4a17      	ldr	r2, [pc, #92]	@ (80103cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801036e:	8803      	ldrh	r3, [r0, #0]
 8010370:	8812      	ldrh	r2, [r2, #0]
 8010372:	4293      	cmp	r3, r2
 8010374:	d213      	bcs.n	801039e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8010376:	4a16      	ldr	r2, [pc, #88]	@ (80103d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8010378:	6812      	ldr	r2, [r2, #0]
 801037a:	2114      	movs	r1, #20
 801037c:	fb01 2303 	mla	r3, r1, r3, r2
 8010380:	8a1a      	ldrh	r2, [r3, #16]
 8010382:	8919      	ldrh	r1, [r3, #8]
 8010384:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010388:	428a      	cmp	r2, r1
 801038a:	db1d      	blt.n	80103c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801038c:	8a58      	ldrh	r0, [r3, #18]
 801038e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010392:	895b      	ldrh	r3, [r3, #10]
 8010394:	4298      	cmp	r0, r3
 8010396:	bfac      	ite	ge
 8010398:	2000      	movge	r0, #0
 801039a:	2001      	movlt	r0, #1
 801039c:	4770      	bx	lr
 801039e:	490d      	ldr	r1, [pc, #52]	@ (80103d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80103a0:	8809      	ldrh	r1, [r1, #0]
 80103a2:	4411      	add	r1, r2
 80103a4:	428b      	cmp	r3, r1
 80103a6:	da0d      	bge.n	80103c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80103a8:	1a9b      	subs	r3, r3, r2
 80103aa:	4a0b      	ldr	r2, [pc, #44]	@ (80103d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80103ac:	6812      	ldr	r2, [r2, #0]
 80103ae:	210e      	movs	r1, #14
 80103b0:	fb01 2303 	mla	r3, r1, r3, r2
 80103b4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80103b8:	891a      	ldrh	r2, [r3, #8]
 80103ba:	4291      	cmp	r1, r2
 80103bc:	db04      	blt.n	80103c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80103be:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80103c2:	e7e6      	b.n	8010392 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80103c4:	2000      	movs	r0, #0
 80103c6:	4770      	bx	lr
 80103c8:	2001      	movs	r0, #1
 80103ca:	4770      	bx	lr
 80103cc:	200154c4 	.word	0x200154c4
 80103d0:	200154cc 	.word	0x200154cc
 80103d4:	200154c8 	.word	0x200154c8
 80103d8:	200154ac 	.word	0x200154ac

080103dc <_ZNK8touchgfx6Bitmap7getDataEv>:
 80103dc:	4a12      	ldr	r2, [pc, #72]	@ (8010428 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80103de:	8803      	ldrh	r3, [r0, #0]
 80103e0:	8811      	ldrh	r1, [r2, #0]
 80103e2:	428b      	cmp	r3, r1
 80103e4:	d20b      	bcs.n	80103fe <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80103e6:	4a11      	ldr	r2, [pc, #68]	@ (801042c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80103e8:	6812      	ldr	r2, [r2, #0]
 80103ea:	b112      	cbz	r2, 80103f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80103ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80103f0:	b9c0      	cbnz	r0, 8010424 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80103f2:	4a0f      	ldr	r2, [pc, #60]	@ (8010430 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80103f4:	6811      	ldr	r1, [r2, #0]
 80103f6:	2214      	movs	r2, #20
 80103f8:	4353      	muls	r3, r2
 80103fa:	58c8      	ldr	r0, [r1, r3]
 80103fc:	4770      	bx	lr
 80103fe:	4a0d      	ldr	r2, [pc, #52]	@ (8010434 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010400:	8812      	ldrh	r2, [r2, #0]
 8010402:	440a      	add	r2, r1
 8010404:	4293      	cmp	r3, r2
 8010406:	da04      	bge.n	8010412 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8010408:	4a08      	ldr	r2, [pc, #32]	@ (801042c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801040a:	6812      	ldr	r2, [r2, #0]
 801040c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010410:	4770      	bx	lr
 8010412:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010416:	4293      	cmp	r3, r2
 8010418:	d103      	bne.n	8010422 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801041a:	4b07      	ldr	r3, [pc, #28]	@ (8010438 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8010420:	4770      	bx	lr
 8010422:	2000      	movs	r0, #0
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop
 8010428:	200154c4 	.word	0x200154c4
 801042c:	200154a8 	.word	0x200154a8
 8010430:	200154cc 	.word	0x200154cc
 8010434:	200154c8 	.word	0x200154c8
 8010438:	20015444 	.word	0x20015444

0801043c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801043c:	4b24      	ldr	r3, [pc, #144]	@ (80104d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801043e:	8802      	ldrh	r2, [r0, #0]
 8010440:	8818      	ldrh	r0, [r3, #0]
 8010442:	4282      	cmp	r2, r0
 8010444:	d221      	bcs.n	801048a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8010446:	4b23      	ldr	r3, [pc, #140]	@ (80104d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8010448:	6819      	ldr	r1, [r3, #0]
 801044a:	2314      	movs	r3, #20
 801044c:	fb03 1302 	mla	r3, r3, r2, r1
 8010450:	6858      	ldr	r0, [r3, #4]
 8010452:	2800      	cmp	r0, #0
 8010454:	d03a      	beq.n	80104cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010456:	4920      	ldr	r1, [pc, #128]	@ (80104d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010458:	6809      	ldr	r1, [r1, #0]
 801045a:	2900      	cmp	r1, #0
 801045c:	d036      	beq.n	80104cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801045e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010462:	2900      	cmp	r1, #0
 8010464:	d032      	beq.n	80104cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010466:	891a      	ldrh	r2, [r3, #8]
 8010468:	8958      	ldrh	r0, [r3, #10]
 801046a:	4350      	muls	r0, r2
 801046c:	7c5a      	ldrb	r2, [r3, #17]
 801046e:	7cdb      	ldrb	r3, [r3, #19]
 8010470:	0952      	lsrs	r2, r2, #5
 8010472:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010476:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801047a:	2b0b      	cmp	r3, #11
 801047c:	bf18      	it	ne
 801047e:	0040      	lslne	r0, r0, #1
 8010480:	3003      	adds	r0, #3
 8010482:	f020 0003 	bic.w	r0, r0, #3
 8010486:	4408      	add	r0, r1
 8010488:	4770      	bx	lr
 801048a:	4b14      	ldr	r3, [pc, #80]	@ (80104dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	4403      	add	r3, r0
 8010490:	429a      	cmp	r2, r3
 8010492:	da1a      	bge.n	80104ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010494:	4b12      	ldr	r3, [pc, #72]	@ (80104e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	1a10      	subs	r0, r2, r0
 801049a:	210e      	movs	r1, #14
 801049c:	fb01 3000 	mla	r0, r1, r0, r3
 80104a0:	7b03      	ldrb	r3, [r0, #12]
 80104a2:	f003 031f 	and.w	r3, r3, #31
 80104a6:	2b0b      	cmp	r3, #11
 80104a8:	d10b      	bne.n	80104c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80104aa:	8903      	ldrh	r3, [r0, #8]
 80104ac:	8940      	ldrh	r0, [r0, #10]
 80104ae:	4358      	muls	r0, r3
 80104b0:	4b09      	ldr	r3, [pc, #36]	@ (80104d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80104b2:	6819      	ldr	r1, [r3, #0]
 80104b4:	3003      	adds	r0, #3
 80104b6:	f020 0303 	bic.w	r3, r0, #3
 80104ba:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80104be:	4418      	add	r0, r3
 80104c0:	4770      	bx	lr
 80104c2:	2b0d      	cmp	r3, #13
 80104c4:	d101      	bne.n	80104ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80104c6:	300d      	adds	r0, #13
 80104c8:	4770      	bx	lr
 80104ca:	2000      	movs	r0, #0
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	200154c4 	.word	0x200154c4
 80104d4:	200154cc 	.word	0x200154cc
 80104d8:	200154a8 	.word	0x200154a8
 80104dc:	200154c8 	.word	0x200154c8
 80104e0:	200154ac 	.word	0x200154ac

080104e4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80104e4:	b510      	push	{r4, lr}
 80104e6:	4b1f      	ldr	r3, [pc, #124]	@ (8010564 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80104e8:	8802      	ldrh	r2, [r0, #0]
 80104ea:	881b      	ldrh	r3, [r3, #0]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d21a      	bcs.n	8010526 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 80104f0:	4b1d      	ldr	r3, [pc, #116]	@ (8010568 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2114      	movs	r1, #20
 80104f6:	fb01 3102 	mla	r1, r1, r2, r3
 80104fa:	7c4b      	ldrb	r3, [r1, #17]
 80104fc:	0958      	lsrs	r0, r3, #5
 80104fe:	7ccb      	ldrb	r3, [r1, #19]
 8010500:	491a      	ldr	r1, [pc, #104]	@ (801056c <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8010502:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010506:	6809      	ldr	r1, [r1, #0]
 8010508:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801050c:	b2d8      	uxtb	r0, r3
 801050e:	b149      	cbz	r1, 8010524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010510:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010514:	b132      	cbz	r2, 8010524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010516:	2b0e      	cmp	r3, #14
 8010518:	d021      	beq.n	801055e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801051a:	280f      	cmp	r0, #15
 801051c:	d01d      	beq.n	801055a <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801051e:	2810      	cmp	r0, #16
 8010520:	bf08      	it	eq
 8010522:	2002      	moveq	r0, #2
 8010524:	bd10      	pop	{r4, pc}
 8010526:	4912      	ldr	r1, [pc, #72]	@ (8010570 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8010528:	8809      	ldrh	r1, [r1, #0]
 801052a:	4419      	add	r1, r3
 801052c:	428a      	cmp	r2, r1
 801052e:	da09      	bge.n	8010544 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8010530:	1ad3      	subs	r3, r2, r3
 8010532:	4a10      	ldr	r2, [pc, #64]	@ (8010574 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8010534:	6812      	ldr	r2, [r2, #0]
 8010536:	210e      	movs	r1, #14
 8010538:	fb01 2303 	mla	r3, r1, r3, r2
 801053c:	7b18      	ldrb	r0, [r3, #12]
 801053e:	f000 001f 	and.w	r0, r0, #31
 8010542:	e7ef      	b.n	8010524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010544:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8010548:	429a      	cmp	r2, r3
 801054a:	d108      	bne.n	801055e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801054c:	f7f9 fd34 	bl	8009fb8 <_ZN8touchgfx3HAL3lcdEv>
 8010550:	6803      	ldr	r3, [r0, #0]
 8010552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010558:	4718      	bx	r3
 801055a:	2001      	movs	r0, #1
 801055c:	e7e2      	b.n	8010524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801055e:	2000      	movs	r0, #0
 8010560:	e7e0      	b.n	8010524 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010562:	bf00      	nop
 8010564:	200154c4 	.word	0x200154c4
 8010568:	200154cc 	.word	0x200154cc
 801056c:	200154a8 	.word	0x200154a8
 8010570:	200154c8 	.word	0x200154c8
 8010574:	200154ac 	.word	0x200154ac

08010578 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8010578:	2010      	movs	r0, #16
 801057a:	4770      	bx	lr

0801057c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801057c:	2000      	movs	r0, #0
 801057e:	4770      	bx	lr

08010580 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8010580:	4b02      	ldr	r3, [pc, #8]	@ (801058c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8010582:	8818      	ldrh	r0, [r3, #0]
 8010584:	0040      	lsls	r0, r0, #1
 8010586:	b280      	uxth	r0, r0
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	2001543e 	.word	0x2001543e

08010590 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8010590:	2bff      	cmp	r3, #255	@ 0xff
 8010592:	d05e      	beq.n	8010652 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 8010594:	2a0b      	cmp	r2, #11
 8010596:	d058      	beq.n	801064a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8010598:	d80e      	bhi.n	80105b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801059a:	2a03      	cmp	r2, #3
 801059c:	d04d      	beq.n	801063a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801059e:	d804      	bhi.n	80105aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80105a0:	2a01      	cmp	r2, #1
 80105a2:	d04c      	beq.n	801063e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 80105a4:	d94d      	bls.n	8010642 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 80105a6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80105a8:	e031      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80105aa:	2a09      	cmp	r2, #9
 80105ac:	d04d      	beq.n	801064a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80105ae:	d84a      	bhi.n	8010646 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80105b0:	2a08      	cmp	r2, #8
 80105b2:	d048      	beq.n	8010646 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80105b4:	2300      	movs	r3, #0
 80105b6:	e02a      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80105b8:	2a2f      	cmp	r2, #47	@ 0x2f
 80105ba:	d02c      	beq.n	8010616 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80105bc:	d811      	bhi.n	80105e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80105be:	2a2d      	cmp	r2, #45	@ 0x2d
 80105c0:	d018      	beq.n	80105f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 80105c2:	d831      	bhi.n	8010628 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 80105c4:	2a2c      	cmp	r2, #44	@ 0x2c
 80105c6:	d1f5      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105c8:	684a      	ldr	r2, [r1, #4]
 80105ca:	7813      	ldrb	r3, [r2, #0]
 80105cc:	7852      	ldrb	r2, [r2, #1]
 80105ce:	2a00      	cmp	r2, #0
 80105d0:	d1f0      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d01d      	beq.n	8010612 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d02d      	beq.n	8010636 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d1ea      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105de:	68c3      	ldr	r3, [r0, #12]
 80105e0:	e015      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80105e2:	2a31      	cmp	r2, #49	@ 0x31
 80105e4:	d004      	beq.n	80105f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 80105e6:	d332      	bcc.n	801064e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80105e8:	2a32      	cmp	r2, #50	@ 0x32
 80105ea:	d030      	beq.n	801064e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80105ec:	2a33      	cmp	r2, #51	@ 0x33
 80105ee:	d1e1      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105f0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80105f2:	e00c      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80105f4:	684a      	ldr	r2, [r1, #4]
 80105f6:	7813      	ldrb	r3, [r2, #0]
 80105f8:	7852      	ldrb	r2, [r2, #1]
 80105fa:	2a00      	cmp	r2, #0
 80105fc:	d1da      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d004      	beq.n	801060c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 8010602:	d30f      	bcc.n	8010624 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 8010604:	2b02      	cmp	r3, #2
 8010606:	d1d5      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010608:	6943      	ldr	r3, [r0, #20]
 801060a:	e000      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801060c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801060e:	4618      	mov	r0, r3
 8010610:	4770      	bx	lr
 8010612:	69c3      	ldr	r3, [r0, #28]
 8010614:	e7fb      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010616:	684b      	ldr	r3, [r1, #4]
 8010618:	781a      	ldrb	r2, [r3, #0]
 801061a:	785b      	ldrb	r3, [r3, #1]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1c9      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010620:	2a00      	cmp	r2, #0
 8010622:	d1f4      	bne.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010624:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010626:	e7f2      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010628:	684b      	ldr	r3, [r1, #4]
 801062a:	781a      	ldrb	r2, [r3, #0]
 801062c:	785b      	ldrb	r3, [r3, #1]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1c0      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010632:	2a00      	cmp	r2, #0
 8010634:	d1eb      	bne.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010636:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010638:	e7e9      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801063a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801063c:	e7e7      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801063e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8010640:	e7e5      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010642:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8010644:	e7e3      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010646:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8010648:	e7e1      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801064a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801064c:	e7df      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801064e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8010650:	e7dd      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010652:	2a0b      	cmp	r2, #11
 8010654:	d059      	beq.n	801070a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010656:	d80e      	bhi.n	8010676 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8010658:	2a03      	cmp	r2, #3
 801065a:	d050      	beq.n	80106fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801065c:	d804      	bhi.n	8010668 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801065e:	2a01      	cmp	r2, #1
 8010660:	d04f      	beq.n	8010702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8010662:	d950      	bls.n	8010706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8010664:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010666:	e7d2      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010668:	2a09      	cmp	r2, #9
 801066a:	d04e      	beq.n	801070a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801066c:	d801      	bhi.n	8010672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801066e:	2a08      	cmp	r2, #8
 8010670:	d1a0      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010672:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8010674:	e7cb      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010676:	2a2f      	cmp	r2, #47	@ 0x2f
 8010678:	d02d      	beq.n	80106d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801067a:	d811      	bhi.n	80106a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801067c:	2a2d      	cmp	r2, #45	@ 0x2d
 801067e:	d018      	beq.n	80106b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8010680:	d833      	bhi.n	80106ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8010682:	2a2c      	cmp	r2, #44	@ 0x2c
 8010684:	d196      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010686:	684a      	ldr	r2, [r1, #4]
 8010688:	7813      	ldrb	r3, [r2, #0]
 801068a:	7852      	ldrb	r2, [r2, #1]
 801068c:	2a00      	cmp	r2, #0
 801068e:	d191      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010690:	2b01      	cmp	r3, #1
 8010692:	d01e      	beq.n	80106d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8010694:	2b00      	cmp	r3, #0
 8010696:	d030      	beq.n	80106fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8010698:	2b02      	cmp	r3, #2
 801069a:	d18b      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801069c:	6903      	ldr	r3, [r0, #16]
 801069e:	e7b6      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106a0:	2a31      	cmp	r2, #49	@ 0x31
 80106a2:	d004      	beq.n	80106ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 80106a4:	d333      	bcc.n	801070e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 80106a6:	2a32      	cmp	r2, #50	@ 0x32
 80106a8:	d031      	beq.n	801070e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 80106aa:	2a33      	cmp	r2, #51	@ 0x33
 80106ac:	d182      	bne.n	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80106ae:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80106b0:	e7ad      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106b2:	684a      	ldr	r2, [r1, #4]
 80106b4:	7813      	ldrb	r3, [r2, #0]
 80106b6:	7852      	ldrb	r2, [r2, #1]
 80106b8:	2a00      	cmp	r2, #0
 80106ba:	f47f af7b 	bne.w	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d005      	beq.n	80106ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80106c2:	d310      	bcc.n	80106e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	f47f af75 	bne.w	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80106ca:	6983      	ldr	r3, [r0, #24]
 80106cc:	e79f      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80106d0:	e79d      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106d2:	6a03      	ldr	r3, [r0, #32]
 80106d4:	e79b      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106d6:	684b      	ldr	r3, [r1, #4]
 80106d8:	781a      	ldrb	r2, [r3, #0]
 80106da:	785b      	ldrb	r3, [r3, #1]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	f47f af69 	bne.w	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80106e2:	2a00      	cmp	r2, #0
 80106e4:	d193      	bne.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80106e8:	e791      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106ea:	684b      	ldr	r3, [r1, #4]
 80106ec:	781a      	ldrb	r2, [r3, #0]
 80106ee:	785b      	ldrb	r3, [r3, #1]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f47f af5f 	bne.w	80105b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80106f6:	2a00      	cmp	r2, #0
 80106f8:	d189      	bne.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80106fc:	e787      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80106fe:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010700:	e785      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010702:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8010704:	e783      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010706:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8010708:	e781      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801070a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801070c:	e77f      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801070e:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8010710:	e77d      	b.n	801060e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

08010712 <_ZN8touchgfx8LCD16bppD1Ev>:
 8010712:	4770      	bx	lr

08010714 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8010714:	4770      	bx	lr

08010716 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8010716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801071a:	b088      	sub	sp, #32
 801071c:	ac08      	add	r4, sp, #32
 801071e:	4606      	mov	r6, r0
 8010720:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8010724:	4620      	mov	r0, r4
 8010726:	4688      	mov	r8, r1
 8010728:	4691      	mov	r9, r2
 801072a:	f7ff fe57 	bl	80103dc <_ZNK8touchgfx6Bitmap7getDataEv>
 801072e:	6833      	ldr	r3, [r6, #0]
 8010730:	4605      	mov	r5, r0
 8010732:	4620      	mov	r0, r4
 8010734:	699f      	ldr	r7, [r3, #24]
 8010736:	f7ff fd5f 	bl	80101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801073a:	4682      	mov	sl, r0
 801073c:	4620      	mov	r0, r4
 801073e:	f7ff fd8f 	bl	8010260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010742:	9500      	str	r5, [sp, #0]
 8010744:	e9cd a001 	strd	sl, r0, [sp, #4]
 8010748:	464b      	mov	r3, r9
 801074a:	a806      	add	r0, sp, #24
 801074c:	4642      	mov	r2, r8
 801074e:	4631      	mov	r1, r6
 8010750:	47b8      	blx	r7
 8010752:	4628      	mov	r0, r5
 8010754:	b008      	add	sp, #32
 8010756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801075c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801075c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010760:	2300      	movs	r3, #0
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	4b3d      	ldr	r3, [pc, #244]	@ (801085c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d137      	bne.n	80107dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801076c:	4a3c      	ldr	r2, [pc, #240]	@ (8010860 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801076e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010772:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d132      	bne.n	80107e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801077a:	4b3a      	ldr	r3, [pc, #232]	@ (8010864 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801077c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010780:	6808      	ldr	r0, [r1, #0]
 8010782:	6849      	ldr	r1, [r1, #4]
 8010784:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010788:	ac02      	add	r4, sp, #8
 801078a:	ab02      	add	r3, sp, #8
 801078c:	c303      	stmia	r3!, {r0, r1}
 801078e:	4669      	mov	r1, sp
 8010790:	4620      	mov	r0, r4
 8010792:	f7fc fae1 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010796:	4668      	mov	r0, sp
 8010798:	f7fc fab6 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801079c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80107a0:	f8bd 2000 	ldrh.w	r2, [sp]
 80107a4:	4d30      	ldr	r5, [pc, #192]	@ (8010868 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80107a6:	4413      	add	r3, r2
 80107a8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80107ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80107b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80107b4:	6828      	ldr	r0, [r5, #0]
 80107b6:	4413      	add	r3, r2
 80107b8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80107bc:	6803      	ldr	r3, [r0, #0]
 80107be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107c0:	4798      	blx	r3
 80107c2:	f010 0f01 	tst.w	r0, #1
 80107c6:	462f      	mov	r7, r5
 80107c8:	d00c      	beq.n	80107e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80107ca:	6828      	ldr	r0, [r5, #0]
 80107cc:	6803      	ldr	r3, [r0, #0]
 80107ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80107d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80107d4:	4798      	blx	r3
 80107d6:	b004      	add	sp, #16
 80107d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107dc:	4a21      	ldr	r2, [pc, #132]	@ (8010864 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80107de:	e7c6      	b.n	801076e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80107e0:	4b1f      	ldr	r3, [pc, #124]	@ (8010860 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80107e2:	e7cb      	b.n	801077c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80107e4:	6838      	ldr	r0, [r7, #0]
 80107e6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80107ea:	6803      	ldr	r3, [r0, #0]
 80107ec:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80107f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107f2:	4798      	blx	r3
 80107f4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80107f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80107fc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8010800:	fb16 3602 	smlabb	r6, r6, r2, r3
 8010804:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010808:	6838      	ldr	r0, [r7, #0]
 801080a:	6803      	ldr	r3, [r0, #0]
 801080c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801080e:	4798      	blx	r3
 8010810:	4a13      	ldr	r2, [pc, #76]	@ (8010860 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010812:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8010816:	8813      	ldrh	r3, [r2, #0]
 8010818:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801081c:	fb03 1404 	mla	r4, r3, r4, r1
 8010820:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010824:	435d      	muls	r5, r3
 8010826:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801082a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801082e:	4691      	mov	r9, r2
 8010830:	6838      	ldr	r0, [r7, #0]
 8010832:	42ac      	cmp	r4, r5
 8010834:	6803      	ldr	r3, [r0, #0]
 8010836:	d20e      	bcs.n	8010856 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8010838:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 801083c:	4632      	mov	r2, r6
 801083e:	4643      	mov	r3, r8
 8010840:	4621      	mov	r1, r4
 8010842:	47d0      	blx	sl
 8010844:	f8b9 3000 	ldrh.w	r3, [r9]
 8010848:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801084c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010850:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010854:	e7ec      	b.n	8010830 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8010856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010858:	4798      	blx	r3
 801085a:	e7bc      	b.n	80107d6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801085c:	2001543c 	.word	0x2001543c
 8010860:	2001543e 	.word	0x2001543e
 8010864:	20015440 	.word	0x20015440
 8010868:	20015444 	.word	0x20015444

0801086c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010870:	b08b      	sub	sp, #44	@ 0x2c
 8010872:	460f      	mov	r7, r1
 8010874:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8010878:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801087c:	4616      	mov	r6, r2
 801087e:	f1bb 0f00 	cmp.w	fp, #0
 8010882:	d04a      	beq.n	801091a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8010884:	6810      	ldr	r0, [r2, #0]
 8010886:	6851      	ldr	r1, [r2, #4]
 8010888:	ad06      	add	r5, sp, #24
 801088a:	c503      	stmia	r5!, {r0, r1}
 801088c:	6818      	ldr	r0, [r3, #0]
 801088e:	6859      	ldr	r1, [r3, #4]
 8010890:	ad08      	add	r5, sp, #32
 8010892:	c503      	stmia	r5!, {r0, r1}
 8010894:	a806      	add	r0, sp, #24
 8010896:	f7fc fa37 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801089a:	4631      	mov	r1, r6
 801089c:	a808      	add	r0, sp, #32
 801089e:	f7fc fa5b 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80108a2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80108a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80108aa:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80108ae:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80108b2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80108b6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80108ba:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80108be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80108c2:	4f5f      	ldr	r7, [pc, #380]	@ (8010a40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80108c4:	440a      	add	r2, r1
 80108c6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80108ca:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80108ce:	6838      	ldr	r0, [r7, #0]
 80108d0:	4413      	add	r3, r2
 80108d2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80108d6:	6803      	ldr	r3, [r0, #0]
 80108d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108da:	4798      	blx	r3
 80108dc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80108e0:	46b9      	mov	r9, r7
 80108e2:	d11d      	bne.n	8010920 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80108e4:	b9fc      	cbnz	r4, 8010926 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80108e6:	f010 0f01 	tst.w	r0, #1
 80108ea:	d01c      	beq.n	8010926 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80108ec:	f8d9 0000 	ldr.w	r0, [r9]
 80108f0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80108f4:	6801      	ldr	r1, [r0, #0]
 80108f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80108fa:	2700      	movs	r7, #0
 80108fc:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8010900:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8010904:	9402      	str	r4, [sp, #8]
 8010906:	b2ad      	uxth	r5, r5
 8010908:	fa1f f488 	uxth.w	r4, r8
 801090c:	9501      	str	r5, [sp, #4]
 801090e:	9400      	str	r4, [sp, #0]
 8010910:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8010912:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8010916:	4631      	mov	r1, r6
 8010918:	47a0      	blx	r4
 801091a:	b00b      	add	sp, #44	@ 0x2c
 801091c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010920:	f010 0f04 	tst.w	r0, #4
 8010924:	e7e1      	b.n	80108ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8010926:	f8d9 0000 	ldr.w	r0, [r9]
 801092a:	6803      	ldr	r3, [r0, #0]
 801092c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801092e:	4798      	blx	r3
 8010930:	4b44      	ldr	r3, [pc, #272]	@ (8010a44 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8010932:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8010936:	881a      	ldrh	r2, [r3, #0]
 8010938:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801093c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8010940:	fb02 1404 	mla	r4, r2, r4, r1
 8010944:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010948:	469a      	mov	sl, r3
 801094a:	fb05 f502 	mul.w	r5, r5, r2
 801094e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8010952:	d059      	beq.n	8010a08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8010954:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8010958:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801095c:	fa1f f28b 	uxth.w	r2, fp
 8010960:	fa1f f989 	uxth.w	r9, r9
 8010964:	469e      	mov	lr, r3
 8010966:	42ac      	cmp	r4, r5
 8010968:	d264      	bcs.n	8010a34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801096a:	eb04 0a07 	add.w	sl, r4, r7
 801096e:	4554      	cmp	r4, sl
 8010970:	d23d      	bcs.n	80109ee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8010972:	8821      	ldrh	r1, [r4, #0]
 8010974:	f836 3b02 	ldrh.w	r3, [r6], #2
 8010978:	1208      	asrs	r0, r1, #8
 801097a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801097e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8010982:	fb10 f009 	smulbb	r0, r0, r9
 8010986:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801098a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801098e:	00c9      	lsls	r1, r1, #3
 8010990:	fb0c 0c02 	mla	ip, ip, r2, r0
 8010994:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8010998:	10d8      	asrs	r0, r3, #3
 801099a:	b2c9      	uxtb	r1, r1
 801099c:	00db      	lsls	r3, r3, #3
 801099e:	fa1f fc8c 	uxth.w	ip, ip
 80109a2:	fb1b fb09 	smulbb	fp, fp, r9
 80109a6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	fb11 f109 	smulbb	r1, r1, r9
 80109b0:	fb00 b002 	mla	r0, r0, r2, fp
 80109b4:	fb03 1302 	mla	r3, r3, r2, r1
 80109b8:	f10c 0b01 	add.w	fp, ip, #1
 80109bc:	b29b      	uxth	r3, r3
 80109be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80109c2:	b280      	uxth	r0, r0
 80109c4:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 80109c8:	f103 0c01 	add.w	ip, r3, #1
 80109cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80109d0:	1c43      	adds	r3, r0, #1
 80109d2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80109d6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80109da:	0940      	lsrs	r0, r0, #5
 80109dc:	ea4c 0c0b 	orr.w	ip, ip, fp
 80109e0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80109e4:	ea4c 0c00 	orr.w	ip, ip, r0
 80109e8:	f824 cb02 	strh.w	ip, [r4], #2
 80109ec:	e7bf      	b.n	801096e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80109ee:	f8be 3000 	ldrh.w	r3, [lr]
 80109f2:	eba3 0308 	sub.w	r3, r3, r8
 80109f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80109fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80109fe:	eba3 0308 	sub.w	r3, r3, r8
 8010a02:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010a06:	e7ae      	b.n	8010966 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8010a08:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010a0c:	f8d9 0000 	ldr.w	r0, [r9]
 8010a10:	42ac      	cmp	r4, r5
 8010a12:	6803      	ldr	r3, [r0, #0]
 8010a14:	d20e      	bcs.n	8010a34 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010a16:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8010a1a:	4632      	mov	r2, r6
 8010a1c:	463b      	mov	r3, r7
 8010a1e:	4621      	mov	r1, r4
 8010a20:	47c0      	blx	r8
 8010a22:	f8ba 3000 	ldrh.w	r3, [sl]
 8010a26:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010a2a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010a2e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010a32:	e7eb      	b.n	8010a0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8010a34:	4b02      	ldr	r3, [pc, #8]	@ (8010a40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8010a36:	6818      	ldr	r0, [r3, #0]
 8010a38:	6803      	ldr	r3, [r0, #0]
 8010a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a3c:	4798      	blx	r3
 8010a3e:	e76c      	b.n	801091a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8010a40:	20015444 	.word	0x20015444
 8010a44:	2001543e 	.word	0x2001543e

08010a48 <_ZN8touchgfx8LCD16bppD0Ev>:
 8010a48:	b510      	push	{r4, lr}
 8010a4a:	218c      	movs	r1, #140	@ 0x8c
 8010a4c:	4604      	mov	r4, r0
 8010a4e:	f002 fa51 	bl	8012ef4 <_ZdlPvj>
 8010a52:	4620      	mov	r0, r4
 8010a54:	bd10      	pop	{r4, pc}

08010a56 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8010a56:	b510      	push	{r4, lr}
 8010a58:	2104      	movs	r1, #4
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	f002 fa4a 	bl	8012ef4 <_ZdlPvj>
 8010a60:	4620      	mov	r0, r4
 8010a62:	bd10      	pop	{r4, pc}

08010a64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8010a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a68:	b091      	sub	sp, #68	@ 0x44
 8010a6a:	469b      	mov	fp, r3
 8010a6c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8010a70:	4616      	mov	r6, r2
 8010a72:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8010a76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010a7a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8010a7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a82:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010a86:	4604      	mov	r4, r0
 8010a88:	460d      	mov	r5, r1
 8010a8a:	4640      	mov	r0, r8
 8010a8c:	4659      	mov	r1, fp
 8010a8e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010a92:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8010a96:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8010a9a:	f7f8 ffb7 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 8010a9e:	4631      	mov	r1, r6
 8010aa0:	4640      	mov	r0, r8
 8010aa2:	f7f8 ffb3 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 8010aa6:	4b74      	ldr	r3, [pc, #464]	@ (8010c78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8010aa8:	8818      	ldrh	r0, [r3, #0]
 8010aaa:	4b74      	ldr	r3, [pc, #464]	@ (8010c7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8010aac:	8819      	ldrh	r1, [r3, #0]
 8010aae:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	b202      	sxth	r2, r0
 8010ab6:	b20e      	sxth	r6, r1
 8010ab8:	da07      	bge.n	8010aca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8010aba:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8010abe:	4463      	add	r3, ip
 8010ac0:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8010aca:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8010ace:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8010ad2:	1ad2      	subs	r2, r2, r3
 8010ad4:	4594      	cmp	ip, r2
 8010ad6:	bfc4      	itt	gt
 8010ad8:	1ac2      	subgt	r2, r0, r3
 8010ada:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8010ade:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010ae2:	2a00      	cmp	r2, #0
 8010ae4:	da07      	bge.n	8010af6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8010ae6:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8010aea:	4462      	add	r2, ip
 8010aec:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8010af0:	2200      	movs	r2, #0
 8010af2:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8010af6:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8010afa:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8010afe:	eba6 060a 	sub.w	r6, r6, sl
 8010b02:	42b2      	cmp	r2, r6
 8010b04:	bfc4      	itt	gt
 8010b06:	eba1 020a 	subgt.w	r2, r1, sl
 8010b0a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8010b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8010c80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8010b10:	7812      	ldrb	r2, [r2, #0]
 8010b12:	b9a2      	cbnz	r2, 8010b3e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8010b14:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8010b18:	4286      	cmp	r6, r0
 8010b1a:	4640      	mov	r0, r8
 8010b1c:	9303      	str	r3, [sp, #12]
 8010b1e:	bf14      	ite	ne
 8010b20:	2600      	movne	r6, #0
 8010b22:	2601      	moveq	r6, #1
 8010b24:	f7f8 ffb5 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010b28:	9b03      	ldr	r3, [sp, #12]
 8010b2a:	b160      	cbz	r0, 8010b46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	8023      	strh	r3, [r4, #0]
 8010b30:	8063      	strh	r3, [r4, #2]
 8010b32:	80a3      	strh	r3, [r4, #4]
 8010b34:	4620      	mov	r0, r4
 8010b36:	80e3      	strh	r3, [r4, #6]
 8010b38:	b011      	add	sp, #68	@ 0x44
 8010b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8010b42:	428e      	cmp	r6, r1
 8010b44:	e7e9      	b.n	8010b1a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8010b46:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8010b4a:	9205      	str	r2, [sp, #20]
 8010b4c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8010b50:	9206      	str	r2, [sp, #24]
 8010b52:	f8bb 2000 	ldrh.w	r2, [fp]
 8010b56:	900e      	str	r0, [sp, #56]	@ 0x38
 8010b58:	1a9b      	subs	r3, r3, r2
 8010b5a:	b21b      	sxth	r3, r3
 8010b5c:	9303      	str	r3, [sp, #12]
 8010b5e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8010b62:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8010b66:	ebaa 0a03 	sub.w	sl, sl, r3
 8010b6a:	fa0f f38a 	sxth.w	r3, sl
 8010b6e:	9304      	str	r3, [sp, #16]
 8010b70:	9b03      	ldr	r3, [sp, #12]
 8010b72:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8010b76:	9b04      	ldr	r3, [sp, #16]
 8010b78:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010b7c:	9b05      	ldr	r3, [sp, #20]
 8010b7e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010b82:	a90e      	add	r1, sp, #56	@ 0x38
 8010b84:	9b06      	ldr	r3, [sp, #24]
 8010b86:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010b8a:	a80c      	add	r0, sp, #48	@ 0x30
 8010b8c:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8010b90:	f7fc f8e2 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010b94:	4640      	mov	r0, r8
 8010b96:	f7fc f8b7 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010b9a:	a80e      	add	r0, sp, #56	@ 0x38
 8010b9c:	f7fc f8b4 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010ba0:	4b38      	ldr	r3, [pc, #224]	@ (8010c84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8010ba2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8010ba6:	881b      	ldrh	r3, [r3, #0]
 8010ba8:	9307      	str	r3, [sp, #28]
 8010baa:	682b      	ldr	r3, [r5, #0]
 8010bac:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8010c88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8010bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	4798      	blx	r3
 8010bb6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8010bba:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8010bbe:	4681      	mov	r9, r0
 8010bc0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8010bc4:	f8db 0000 	ldr.w	r0, [fp]
 8010bc8:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8010bca:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8010bce:	6803      	ldr	r3, [r0, #0]
 8010bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bd2:	4798      	blx	r3
 8010bd4:	4607      	mov	r7, r0
 8010bd6:	f8db 0000 	ldr.w	r0, [fp]
 8010bda:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8010bde:	6803      	ldr	r3, [r0, #0]
 8010be0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010be4:	9109      	str	r1, [sp, #36]	@ 0x24
 8010be6:	9208      	str	r2, [sp, #32]
 8010be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bea:	4798      	blx	r3
 8010bec:	f010 0f01 	tst.w	r0, #1
 8010bf0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8010bf4:	d012      	beq.n	8010c1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8010bf6:	f8db 0000 	ldr.w	r0, [fp]
 8010bfa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8010bfe:	6803      	ldr	r3, [r0, #0]
 8010c00:	9200      	str	r2, [sp, #0]
 8010c02:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8010c04:	e898 0006 	ldmia.w	r8, {r1, r2}
 8010c08:	462b      	mov	r3, r5
 8010c0a:	47b0      	blx	r6
 8010c0c:	9b03      	ldr	r3, [sp, #12]
 8010c0e:	8023      	strh	r3, [r4, #0]
 8010c10:	9b04      	ldr	r3, [sp, #16]
 8010c12:	8063      	strh	r3, [r4, #2]
 8010c14:	9b05      	ldr	r3, [sp, #20]
 8010c16:	80a3      	strh	r3, [r4, #4]
 8010c18:	9b06      	ldr	r3, [sp, #24]
 8010c1a:	e78b      	b.n	8010b34 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8010c1c:	fb09 f202 	mul.w	r2, r9, r2
 8010c20:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010c24:	440f      	add	r7, r1
 8010c26:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8010c2a:	b166      	cbz	r6, 8010c46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8010c2c:	9a07      	ldr	r2, [sp, #28]
 8010c2e:	4592      	cmp	sl, r2
 8010c30:	d109      	bne.n	8010c46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8010c32:	f8db 0000 	ldr.w	r0, [fp]
 8010c36:	6802      	ldr	r2, [r0, #0]
 8010c38:	fb09 f303 	mul.w	r3, r9, r3
 8010c3c:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8010c3e:	4629      	mov	r1, r5
 8010c40:	463a      	mov	r2, r7
 8010c42:	47b0      	blx	r6
 8010c44:	e7e2      	b.n	8010c0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8010c46:	fb0a f303 	mul.w	r3, sl, r3
 8010c4a:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8010c88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8010c4e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8010c52:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8010c56:	4545      	cmp	r5, r8
 8010c58:	d2d8      	bcs.n	8010c0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8010c5a:	f8db 0000 	ldr.w	r0, [fp]
 8010c5e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8010c62:	6802      	ldr	r2, [r0, #0]
 8010c64:	4629      	mov	r1, r5
 8010c66:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8010c6a:	005b      	lsls	r3, r3, #1
 8010c6c:	463a      	mov	r2, r7
 8010c6e:	47d0      	blx	sl
 8010c70:	444f      	add	r7, r9
 8010c72:	4435      	add	r5, r6
 8010c74:	e7ef      	b.n	8010c56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8010c76:	bf00      	nop
 8010c78:	20015438 	.word	0x20015438
 8010c7c:	2001543a 	.word	0x2001543a
 8010c80:	2001543c 	.word	0x2001543c
 8010c84:	2001543e 	.word	0x2001543e
 8010c88:	20015444 	.word	0x20015444

08010c8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8010c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c8e:	4606      	mov	r6, r0
 8010c90:	b087      	sub	sp, #28
 8010c92:	460c      	mov	r4, r1
 8010c94:	4617      	mov	r7, r2
 8010c96:	461d      	mov	r5, r3
 8010c98:	b333      	cbz	r3, 8010ce8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8010c9a:	4608      	mov	r0, r1
 8010c9c:	f7f8 fef9 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010ca0:	bb10      	cbnz	r0, 8010ce8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8010ca2:	6820      	ldr	r0, [r4, #0]
 8010ca4:	6861      	ldr	r1, [r4, #4]
 8010ca6:	4c1c      	ldr	r4, [pc, #112]	@ (8010d18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8010ca8:	ab04      	add	r3, sp, #16
 8010caa:	c303      	stmia	r3!, {r0, r1}
 8010cac:	a804      	add	r0, sp, #16
 8010cae:	f7fc f82b 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010cb2:	6820      	ldr	r0, [r4, #0]
 8010cb4:	6803      	ldr	r3, [r0, #0]
 8010cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cb8:	4798      	blx	r3
 8010cba:	2dff      	cmp	r5, #255	@ 0xff
 8010cbc:	d016      	beq.n	8010cec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8010cbe:	f010 0f08 	tst.w	r0, #8
 8010cc2:	6820      	ldr	r0, [r4, #0]
 8010cc4:	d015      	beq.n	8010cf2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8010cc6:	2400      	movs	r4, #0
 8010cc8:	6801      	ldr	r1, [r0, #0]
 8010cca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010cce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010cd2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8010cd6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8010cda:	9401      	str	r4, [sp, #4]
 8010cdc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8010ce0:	9400      	str	r4, [sp, #0]
 8010ce2:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	47a0      	blx	r4
 8010ce8:	b007      	add	sp, #28
 8010cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cec:	f010 0f02 	tst.w	r0, #2
 8010cf0:	e7e7      	b.n	8010cc2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8010cf2:	6803      	ldr	r3, [r0, #0]
 8010cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cf6:	4798      	blx	r3
 8010cf8:	4b08      	ldr	r3, [pc, #32]	@ (8010d1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8010cfa:	881a      	ldrh	r2, [r3, #0]
 8010cfc:	6833      	ldr	r3, [r6, #0]
 8010cfe:	e9cd 7500 	strd	r7, r5, [sp]
 8010d02:	4601      	mov	r1, r0
 8010d04:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010d06:	4630      	mov	r0, r6
 8010d08:	ab04      	add	r3, sp, #16
 8010d0a:	47a8      	blx	r5
 8010d0c:	6820      	ldr	r0, [r4, #0]
 8010d0e:	6803      	ldr	r3, [r0, #0]
 8010d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d12:	4798      	blx	r3
 8010d14:	e7e8      	b.n	8010ce8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8010d16:	bf00      	nop
 8010d18:	20015444 	.word	0x20015444
 8010d1c:	2001543e 	.word	0x2001543e

08010d20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8010d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d24:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8010d28:	9e08      	ldr	r6, [sp, #32]
 8010d2a:	4688      	mov	r8, r1
 8010d2c:	4614      	mov	r4, r2
 8010d2e:	461d      	mov	r5, r3
 8010d30:	2f00      	cmp	r7, #0
 8010d32:	f000 80a9 	beq.w	8010e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7f8 feab 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	f040 80a3 	bne.w	8010e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010d42:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010d46:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010d4a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8010d4e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8010d52:	fb04 1303 	mla	r3, r4, r3, r1
 8010d56:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8010d5a:	4365      	muls	r5, r4
 8010d5c:	2fff      	cmp	r7, #255	@ 0xff
 8010d5e:	eba4 0200 	sub.w	r2, r4, r0
 8010d62:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8010d66:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8010d6a:	d04a      	beq.n	8010e02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8010d6c:	b2bc      	uxth	r4, r7
 8010d6e:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8010d72:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8010d76:	fa5f f788 	uxtb.w	r7, r8
 8010d7a:	b2f3      	uxtb	r3, r6
 8010d7c:	0040      	lsls	r0, r0, #1
 8010d7e:	fb0e fe04 	mul.w	lr, lr, r4
 8010d82:	4367      	muls	r7, r4
 8010d84:	4363      	muls	r3, r4
 8010d86:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8010d8a:	fa1f fc8c 	uxth.w	ip, ip
 8010d8e:	42a9      	cmp	r1, r5
 8010d90:	d27a      	bcs.n	8010e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010d92:	eb01 0900 	add.w	r9, r1, r0
 8010d96:	4549      	cmp	r1, r9
 8010d98:	d231      	bcs.n	8010dfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8010d9a:	880a      	ldrh	r2, [r1, #0]
 8010d9c:	1214      	asrs	r4, r2, #8
 8010d9e:	10d6      	asrs	r6, r2, #3
 8010da0:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8010da4:	00d2      	lsls	r2, r2, #3
 8010da6:	b2d2      	uxtb	r2, r2
 8010da8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8010dac:	fb14 f40c 	smulbb	r4, r4, ip
 8010db0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8010db4:	4474      	add	r4, lr
 8010db6:	fb12 f20c 	smulbb	r2, r2, ip
 8010dba:	b2a4      	uxth	r4, r4
 8010dbc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8010dc0:	441a      	add	r2, r3
 8010dc2:	b292      	uxth	r2, r2
 8010dc4:	f104 0a01 	add.w	sl, r4, #1
 8010dc8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8010dcc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8010dd0:	fb16 f60c 	smulbb	r6, r6, ip
 8010dd4:	f102 0a01 	add.w	sl, r2, #1
 8010dd8:	443e      	add	r6, r7
 8010dda:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8010dde:	b2b6      	uxth	r6, r6
 8010de0:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8010de4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8010de8:	4322      	orrs	r2, r4
 8010dea:	1c74      	adds	r4, r6, #1
 8010dec:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8010df0:	0976      	lsrs	r6, r6, #5
 8010df2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8010df6:	4332      	orrs	r2, r6
 8010df8:	f821 2b02 	strh.w	r2, [r1], #2
 8010dfc:	e7cb      	b.n	8010d96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8010dfe:	4441      	add	r1, r8
 8010e00:	e7c5      	b.n	8010d8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8010e02:	4f22      	ldr	r7, [pc, #136]	@ (8010e8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8010e04:	0973      	lsrs	r3, r6, #5
 8010e06:	ea08 0707 	and.w	r7, r8, r7
 8010e0a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010e0e:	433b      	orrs	r3, r7
 8010e10:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8010e14:	4333      	orrs	r3, r6
 8010e16:	07e7      	lsls	r7, r4, #31
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	d50b      	bpl.n	8010e34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8010e1c:	0040      	lsls	r0, r0, #1
 8010e1e:	0052      	lsls	r2, r2, #1
 8010e20:	42a9      	cmp	r1, r5
 8010e22:	d231      	bcs.n	8010e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010e24:	180c      	adds	r4, r1, r0
 8010e26:	42a1      	cmp	r1, r4
 8010e28:	d202      	bcs.n	8010e30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8010e2a:	f821 3b02 	strh.w	r3, [r1], #2
 8010e2e:	e7fa      	b.n	8010e26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8010e30:	4411      	add	r1, r2
 8010e32:	e7f5      	b.n	8010e20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8010e34:	078e      	lsls	r6, r1, #30
 8010e36:	d008      	beq.n	8010e4a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8010e38:	0066      	lsls	r6, r4, #1
 8010e3a:	460a      	mov	r2, r1
 8010e3c:	42aa      	cmp	r2, r5
 8010e3e:	d202      	bcs.n	8010e46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8010e40:	8013      	strh	r3, [r2, #0]
 8010e42:	4432      	add	r2, r6
 8010e44:	e7fa      	b.n	8010e3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8010e46:	3102      	adds	r1, #2
 8010e48:	3801      	subs	r0, #1
 8010e4a:	07c2      	lsls	r2, r0, #31
 8010e4c:	d50b      	bpl.n	8010e66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8010e4e:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8010e52:	3a01      	subs	r2, #1
 8010e54:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010e58:	0066      	lsls	r6, r4, #1
 8010e5a:	42aa      	cmp	r2, r5
 8010e5c:	d202      	bcs.n	8010e64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8010e5e:	8013      	strh	r3, [r2, #0]
 8010e60:	4432      	add	r2, r6
 8010e62:	e7fa      	b.n	8010e5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8010e64:	3801      	subs	r0, #1
 8010e66:	b178      	cbz	r0, 8010e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010e68:	1040      	asrs	r0, r0, #1
 8010e6a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8010e6e:	0080      	lsls	r0, r0, #2
 8010e70:	0064      	lsls	r4, r4, #1
 8010e72:	42a9      	cmp	r1, r5
 8010e74:	d208      	bcs.n	8010e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010e76:	180e      	adds	r6, r1, r0
 8010e78:	460a      	mov	r2, r1
 8010e7a:	42b2      	cmp	r2, r6
 8010e7c:	d202      	bcs.n	8010e84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8010e7e:	f842 3b04 	str.w	r3, [r2], #4
 8010e82:	e7fa      	b.n	8010e7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8010e84:	4421      	add	r1, r4
 8010e86:	e7f4      	b.n	8010e72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8010e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e8c:	00fff800 	.word	0x00fff800

08010e90 <_ZN8touchgfx8LCD16bppC1Ev>:
 8010e90:	2200      	movs	r2, #0
 8010e92:	4912      	ldr	r1, [pc, #72]	@ (8010edc <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8010e94:	6001      	str	r1, [r0, #0]
 8010e96:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8010e9a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010e9e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010ea2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8010ea6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8010eaa:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8010eae:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8010eb2:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8010eb6:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8010eba:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8010ebe:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8010ec2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8010ec6:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8010eca:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8010ece:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8010ed2:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8010ed6:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8010eda:	4770      	bx	lr
 8010edc:	08015f10 	.word	0x08015f10

08010ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8010ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee4:	460d      	mov	r5, r1
 8010ee6:	b08d      	sub	sp, #52	@ 0x34
 8010ee8:	4604      	mov	r4, r0
 8010eea:	6808      	ldr	r0, [r1, #0]
 8010eec:	6849      	ldr	r1, [r1, #4]
 8010eee:	4699      	mov	r9, r3
 8010ef0:	ab08      	add	r3, sp, #32
 8010ef2:	c303      	stmia	r3!, {r0, r1}
 8010ef4:	6810      	ldr	r0, [r2, #0]
 8010ef6:	6851      	ldr	r1, [r2, #4]
 8010ef8:	ab0a      	add	r3, sp, #40	@ 0x28
 8010efa:	c303      	stmia	r3!, {r0, r1}
 8010efc:	a808      	add	r0, sp, #32
 8010efe:	f7fb ff03 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010f02:	4629      	mov	r1, r5
 8010f04:	a80a      	add	r0, sp, #40	@ 0x28
 8010f06:	f7fb ff27 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010f0a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8010f0e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8010f12:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8010f16:	4d63      	ldr	r5, [pc, #396]	@ (80110a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8010f18:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8010f1c:	6828      	ldr	r0, [r5, #0]
 8010f1e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8010f22:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010f26:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8010f2a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8010f2e:	440a      	add	r2, r1
 8010f30:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010f34:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8010f38:	4413      	add	r3, r2
 8010f3a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010f3e:	6803      	ldr	r3, [r0, #0]
 8010f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f42:	4798      	blx	r3
 8010f44:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010f48:	d119      	bne.n	8010f7e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8010f4a:	f010 0f20 	tst.w	r0, #32
 8010f4e:	6828      	ldr	r0, [r5, #0]
 8010f50:	d018      	beq.n	8010f84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8010f52:	2500      	movs	r5, #0
 8010f54:	6801      	ldr	r1, [r0, #0]
 8010f56:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8010f5a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8010f5e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8010f62:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8010f66:	9502      	str	r5, [sp, #8]
 8010f68:	b2b6      	uxth	r6, r6
 8010f6a:	fa1f f588 	uxth.w	r5, r8
 8010f6e:	9601      	str	r6, [sp, #4]
 8010f70:	9500      	str	r5, [sp, #0]
 8010f72:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8010f74:	4621      	mov	r1, r4
 8010f76:	47a8      	blx	r5
 8010f78:	b00d      	add	sp, #52	@ 0x34
 8010f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8010f82:	e7e4      	b.n	8010f4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8010f84:	6803      	ldr	r3, [r0, #0]
 8010f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f88:	4798      	blx	r3
 8010f8a:	4947      	ldr	r1, [pc, #284]	@ (80110a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8010f8c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010f90:	880b      	ldrh	r3, [r1, #0]
 8010f92:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8010f96:	fb03 5202 	mla	r2, r3, r2, r5
 8010f9a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010f9e:	4373      	muls	r3, r6
 8010fa0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010fa4:	9307      	str	r3, [sp, #28]
 8010fa6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8010faa:	9306      	str	r3, [sp, #24]
 8010fac:	468a      	mov	sl, r1
 8010fae:	9b07      	ldr	r3, [sp, #28]
 8010fb0:	4298      	cmp	r0, r3
 8010fb2:	d270      	bcs.n	8011096 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8010fb4:	9b06      	ldr	r3, [sp, #24]
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	eb00 0b03 	add.w	fp, r0, r3
 8010fbc:	4558      	cmp	r0, fp
 8010fbe:	d25d      	bcs.n	801107c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8010fc0:	f851 4b04 	ldr.w	r4, [r1], #4
 8010fc4:	0e23      	lsrs	r3, r4, #24
 8010fc6:	d014      	beq.n	8010ff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8010fc8:	2bff      	cmp	r3, #255	@ 0xff
 8010fca:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8010fce:	d112      	bne.n	8010ff6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8010fd0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010fd4:	d10f      	bne.n	8010ff6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8010fd6:	0963      	lsrs	r3, r4, #5
 8010fd8:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8010fdc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010fe0:	f02c 0c07 	bic.w	ip, ip, #7
 8010fe4:	ea43 0c0c 	orr.w	ip, r3, ip
 8010fe8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8010fec:	ea4c 0404 	orr.w	r4, ip, r4
 8010ff0:	8004      	strh	r4, [r0, #0]
 8010ff2:	3002      	adds	r0, #2
 8010ff4:	e7e2      	b.n	8010fbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8010ff6:	fb09 f303 	mul.w	r3, r9, r3
 8010ffa:	8807      	ldrh	r7, [r0, #0]
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8011002:	1212      	asrs	r2, r2, #8
 8011004:	123e      	asrs	r6, r7, #8
 8011006:	b293      	uxth	r3, r2
 8011008:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801100c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011010:	43d2      	mvns	r2, r2
 8011012:	b2d2      	uxtb	r2, r2
 8011014:	10fd      	asrs	r5, r7, #3
 8011016:	fb1e fe03 	smulbb	lr, lr, r3
 801101a:	00ff      	lsls	r7, r7, #3
 801101c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011020:	fb06 e602 	mla	r6, r6, r2, lr
 8011024:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8011028:	b2ff      	uxtb	r7, r7
 801102a:	fa5f fc8c 	uxtb.w	ip, ip
 801102e:	b2e4      	uxtb	r4, r4
 8011030:	b2b6      	uxth	r6, r6
 8011032:	fb1c fc03 	smulbb	ip, ip, r3
 8011036:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801103a:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801103e:	fb14 f403 	smulbb	r4, r4, r3
 8011042:	fb05 c502 	mla	r5, r5, r2, ip
 8011046:	f106 0e01 	add.w	lr, r6, #1
 801104a:	fb07 4702 	mla	r7, r7, r2, r4
 801104e:	b2ad      	uxth	r5, r5
 8011050:	b2bf      	uxth	r7, r7
 8011052:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8011056:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801105a:	f105 0c01 	add.w	ip, r5, #1
 801105e:	1c7e      	adds	r6, r7, #1
 8011060:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8011064:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8011068:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801106c:	096d      	lsrs	r5, r5, #5
 801106e:	ea46 060e 	orr.w	r6, r6, lr
 8011072:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011076:	432e      	orrs	r6, r5
 8011078:	8006      	strh	r6, [r0, #0]
 801107a:	e7ba      	b.n	8010ff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801107c:	f8ba 3000 	ldrh.w	r3, [sl]
 8011080:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8011084:	eba3 0308 	sub.w	r3, r3, r8
 8011088:	eba4 0408 	sub.w	r4, r4, r8
 801108c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011090:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8011094:	e78b      	b.n	8010fae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8011096:	4b03      	ldr	r3, [pc, #12]	@ (80110a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8011098:	6818      	ldr	r0, [r3, #0]
 801109a:	6803      	ldr	r3, [r0, #0]
 801109c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801109e:	4798      	blx	r3
 80110a0:	e76a      	b.n	8010f78 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80110a2:	bf00      	nop
 80110a4:	20015444 	.word	0x20015444
 80110a8:	2001543e 	.word	0x2001543e

080110ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80110ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110b0:	460c      	mov	r4, r1
 80110b2:	b085      	sub	sp, #20
 80110b4:	6810      	ldr	r0, [r2, #0]
 80110b6:	6851      	ldr	r1, [r2, #4]
 80110b8:	466d      	mov	r5, sp
 80110ba:	c503      	stmia	r5!, {r0, r1}
 80110bc:	6818      	ldr	r0, [r3, #0]
 80110be:	6859      	ldr	r1, [r3, #4]
 80110c0:	4616      	mov	r6, r2
 80110c2:	c503      	stmia	r5!, {r0, r1}
 80110c4:	4668      	mov	r0, sp
 80110c6:	f7fb fe1f 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80110ca:	4631      	mov	r1, r6
 80110cc:	a802      	add	r0, sp, #8
 80110ce:	f7fb fe43 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80110d2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80110d6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80110da:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80110de:	4d28      	ldr	r5, [pc, #160]	@ (8011180 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 80110e0:	4e28      	ldr	r6, [pc, #160]	@ (8011184 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80110e2:	6828      	ldr	r0, [r5, #0]
 80110e4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80110e8:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80110ec:	fb11 2103 	smlabb	r1, r1, r3, r2
 80110f0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80110f4:	f8bd 1000 	ldrh.w	r1, [sp]
 80110f8:	440a      	add	r2, r1
 80110fa:	f8ad 2008 	strh.w	r2, [sp, #8]
 80110fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011102:	4413      	add	r3, r2
 8011104:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011108:	6803      	ldr	r3, [r0, #0]
 801110a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801110c:	4798      	blx	r3
 801110e:	8833      	ldrh	r3, [r6, #0]
 8011110:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8011114:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8011118:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8011188 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801111c:	fb03 1202 	mla	r2, r3, r2, r1
 8011120:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011124:	fb08 f303 	mul.w	r3, r8, r3
 8011128:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801112c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8011130:	4298      	cmp	r0, r3
 8011132:	d21d      	bcs.n	8011170 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8011134:	eb00 080c 	add.w	r8, r0, ip
 8011138:	4540      	cmp	r0, r8
 801113a:	d20f      	bcs.n	801115c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801113c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011140:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8011144:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8011148:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801114c:	ea42 0209 	orr.w	r2, r2, r9
 8011150:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8011154:	430a      	orrs	r2, r1
 8011156:	f820 2b02 	strh.w	r2, [r0], #2
 801115a:	e7ed      	b.n	8011138 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801115c:	8832      	ldrh	r2, [r6, #0]
 801115e:	1bd2      	subs	r2, r2, r7
 8011160:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011164:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8011168:	1bd2      	subs	r2, r2, r7
 801116a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801116e:	e7df      	b.n	8011130 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8011170:	6828      	ldr	r0, [r5, #0]
 8011172:	6803      	ldr	r3, [r0, #0]
 8011174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011176:	4798      	blx	r3
 8011178:	b005      	add	sp, #20
 801117a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801117e:	bf00      	nop
 8011180:	20015444 	.word	0x20015444
 8011184:	2001543e 	.word	0x2001543e
 8011188:	fffff800 	.word	0xfffff800

0801118c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011190:	460e      	mov	r6, r1
 8011192:	b08e      	sub	sp, #56	@ 0x38
 8011194:	4604      	mov	r4, r0
 8011196:	6808      	ldr	r0, [r1, #0]
 8011198:	6849      	ldr	r1, [r1, #4]
 801119a:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8011374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801119e:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8011378 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80111a2:	461d      	mov	r5, r3
 80111a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80111a6:	c303      	stmia	r3!, {r0, r1}
 80111a8:	6810      	ldr	r0, [r2, #0]
 80111aa:	6851      	ldr	r1, [r2, #4]
 80111ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80111ae:	c303      	stmia	r3!, {r0, r1}
 80111b0:	a80a      	add	r0, sp, #40	@ 0x28
 80111b2:	f7fb fda9 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80111b6:	4631      	mov	r1, r6
 80111b8:	a80c      	add	r0, sp, #48	@ 0x30
 80111ba:	f7fb fdcd 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80111be:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80111c2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80111c6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80111ca:	f8d8 0000 	ldr.w	r0, [r8]
 80111ce:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 80111d2:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80111d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80111da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80111de:	440c      	add	r4, r1
 80111e0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80111e4:	440a      	add	r2, r1
 80111e6:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80111ea:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80111ee:	4413      	add	r3, r2
 80111f0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80111f4:	6803      	ldr	r3, [r0, #0]
 80111f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111f8:	4798      	blx	r3
 80111fa:	2dff      	cmp	r5, #255	@ 0xff
 80111fc:	d124      	bne.n	8011248 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80111fe:	f010 0f01 	tst.w	r0, #1
 8011202:	f8d8 0000 	ldr.w	r0, [r8]
 8011206:	d022      	beq.n	801124e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8011208:	2100      	movs	r1, #0
 801120a:	f8d0 c000 	ldr.w	ip, [r0]
 801120e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8011212:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8011216:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801121a:	f04f 0e01 	mov.w	lr, #1
 801121e:	f8cd e018 	str.w	lr, [sp, #24]
 8011222:	f8b9 e000 	ldrh.w	lr, [r9]
 8011226:	9503      	str	r5, [sp, #12]
 8011228:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801122c:	b2b6      	uxth	r6, r6
 801122e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8011232:	9102      	str	r1, [sp, #8]
 8011234:	b2bf      	uxth	r7, r7
 8011236:	9601      	str	r6, [sp, #4]
 8011238:	9700      	str	r7, [sp, #0]
 801123a:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 801123e:	4621      	mov	r1, r4
 8011240:	47a8      	blx	r5
 8011242:	b00e      	add	sp, #56	@ 0x38
 8011244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011248:	f010 0f04 	tst.w	r0, #4
 801124c:	e7d9      	b.n	8011202 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801124e:	6803      	ldr	r3, [r0, #0]
 8011250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011252:	4798      	blx	r3
 8011254:	f8b9 3000 	ldrh.w	r3, [r9]
 8011258:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801125c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8011260:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8011264:	fb03 1202 	mla	r2, r3, r2, r1
 8011268:	ebac 0c07 	sub.w	ip, ip, r7
 801126c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011270:	435e      	muls	r6, r3
 8011272:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8011276:	2dff      	cmp	r5, #255	@ 0xff
 8011278:	eba3 0707 	sub.w	r7, r3, r7
 801127c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8011280:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8011284:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8011288:	d049      	beq.n	801131e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801128a:	43eb      	mvns	r3, r5
 801128c:	fa1f f985 	uxth.w	r9, r5
 8011290:	b2db      	uxtb	r3, r3
 8011292:	42b0      	cmp	r0, r6
 8011294:	d266      	bcs.n	8011364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8011296:	eb00 0a0e 	add.w	sl, r0, lr
 801129a:	4550      	cmp	r0, sl
 801129c:	4621      	mov	r1, r4
 801129e:	f104 0403 	add.w	r4, r4, #3
 80112a2:	d25b      	bcs.n	801135c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80112a4:	8802      	ldrh	r2, [r0, #0]
 80112a6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80112aa:	ea4f 2822 	mov.w	r8, r2, asr #8
 80112ae:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80112b2:	fb11 f109 	smulbb	r1, r1, r9
 80112b6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80112ba:	10d5      	asrs	r5, r2, #3
 80112bc:	fb08 1803 	mla	r8, r8, r3, r1
 80112c0:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80112c4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80112c8:	fb11 f109 	smulbb	r1, r1, r9
 80112cc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80112d0:	fb05 1503 	mla	r5, r5, r3, r1
 80112d4:	00d2      	lsls	r2, r2, #3
 80112d6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80112da:	b2d2      	uxtb	r2, r2
 80112dc:	fb11 f109 	smulbb	r1, r1, r9
 80112e0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80112e4:	fa1f f888 	uxth.w	r8, r8
 80112e8:	fb02 1203 	mla	r2, r2, r3, r1
 80112ec:	b292      	uxth	r2, r2
 80112ee:	f108 0101 	add.w	r1, r8, #1
 80112f2:	b2ad      	uxth	r5, r5
 80112f4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80112f8:	1c51      	adds	r1, r2, #1
 80112fa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80112fe:	1c69      	adds	r1, r5, #1
 8011300:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8011304:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8011308:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801130c:	096d      	lsrs	r5, r5, #5
 801130e:	ea42 0208 	orr.w	r2, r2, r8
 8011312:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011316:	432a      	orrs	r2, r5
 8011318:	f820 2b02 	strh.w	r2, [r0], #2
 801131c:	e7bd      	b.n	801129a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801131e:	4a14      	ldr	r2, [pc, #80]	@ (8011370 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8011320:	42b0      	cmp	r0, r6
 8011322:	d21f      	bcs.n	8011364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8011324:	eb00 050e 	add.w	r5, r0, lr
 8011328:	42a8      	cmp	r0, r5
 801132a:	4621      	mov	r1, r4
 801132c:	f104 0403 	add.w	r4, r4, #3
 8011330:	d210      	bcs.n	8011354 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8011332:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8011336:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801133a:	00db      	lsls	r3, r3, #3
 801133c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8011340:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011344:	430b      	orrs	r3, r1
 8011346:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801134a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801134e:	f820 3b02 	strh.w	r3, [r0], #2
 8011352:	e7e9      	b.n	8011328 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8011354:	4438      	add	r0, r7
 8011356:	eb01 040c 	add.w	r4, r1, ip
 801135a:	e7e1      	b.n	8011320 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801135c:	4438      	add	r0, r7
 801135e:	eb01 040c 	add.w	r4, r1, ip
 8011362:	e796      	b.n	8011292 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8011364:	4b03      	ldr	r3, [pc, #12]	@ (8011374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8011366:	6818      	ldr	r0, [r3, #0]
 8011368:	6803      	ldr	r3, [r0, #0]
 801136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801136c:	4798      	blx	r3
 801136e:	e768      	b.n	8011242 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8011370:	fffff800 	.word	0xfffff800
 8011374:	20015444 	.word	0x20015444
 8011378:	2001543e 	.word	0x2001543e

0801137c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801137c:	b4f0      	push	{r4, r5, r6, r7}
 801137e:	4616      	mov	r6, r2
 8011380:	2e01      	cmp	r6, #1
 8011382:	461c      	mov	r4, r3
 8011384:	460d      	mov	r5, r1
 8011386:	9a04      	ldr	r2, [sp, #16]
 8011388:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801138c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8011390:	d012      	beq.n	80113b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8011392:	d303      	bcc.n	801139c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8011394:	2e02      	cmp	r6, #2
 8011396:	d00a      	beq.n	80113ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8011398:	bcf0      	pop	{r4, r5, r6, r7}
 801139a:	4770      	bx	lr
 801139c:	6805      	ldr	r5, [r0, #0]
 801139e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80113a2:	68ed      	ldr	r5, [r5, #12]
 80113a4:	4613      	mov	r3, r2
 80113a6:	46ac      	mov	ip, r5
 80113a8:	4622      	mov	r2, r4
 80113aa:	bcf0      	pop	{r4, r5, r6, r7}
 80113ac:	4760      	bx	ip
 80113ae:	4621      	mov	r1, r4
 80113b0:	4628      	mov	r0, r5
 80113b2:	bcf0      	pop	{r4, r5, r6, r7}
 80113b4:	f7ff bd94 	b.w	8010ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80113b8:	4621      	mov	r1, r4
 80113ba:	4628      	mov	r0, r5
 80113bc:	bcf0      	pop	{r4, r5, r6, r7}
 80113be:	f7ff bee5 	b.w	801118c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080113c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80113c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c8:	4681      	mov	r9, r0
 80113ca:	b093      	sub	sp, #76	@ 0x4c
 80113cc:	6810      	ldr	r0, [r2, #0]
 80113ce:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 80113d2:	4f6d      	ldr	r7, [pc, #436]	@ (8011588 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80113d4:	4688      	mov	r8, r1
 80113d6:	6851      	ldr	r1, [r2, #4]
 80113d8:	ac0e      	add	r4, sp, #56	@ 0x38
 80113da:	c403      	stmia	r4!, {r0, r1}
 80113dc:	6818      	ldr	r0, [r3, #0]
 80113de:	6859      	ldr	r1, [r3, #4]
 80113e0:	ac10      	add	r4, sp, #64	@ 0x40
 80113e2:	4616      	mov	r6, r2
 80113e4:	c403      	stmia	r4!, {r0, r1}
 80113e6:	a80e      	add	r0, sp, #56	@ 0x38
 80113e8:	f7fb fc8e 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80113ec:	4631      	mov	r1, r6
 80113ee:	a810      	add	r0, sp, #64	@ 0x40
 80113f0:	f7fb fcb2 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80113f4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80113f8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80113fc:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8011400:	4e62      	ldr	r6, [pc, #392]	@ (801158c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8011402:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8011406:	6830      	ldr	r0, [r6, #0]
 8011408:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801140c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011410:	4489      	add	r9, r1
 8011412:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8011416:	440a      	add	r2, r1
 8011418:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801141c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011420:	4413      	add	r3, r2
 8011422:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8011426:	6803      	ldr	r3, [r0, #0]
 8011428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801142a:	4798      	blx	r3
 801142c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011430:	6830      	ldr	r0, [r6, #0]
 8011432:	d01d      	beq.n	8011470 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8011434:	2200      	movs	r2, #0
 8011436:	6801      	ldr	r1, [r0, #0]
 8011438:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801143c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8011440:	220b      	movs	r2, #11
 8011442:	9207      	str	r2, [sp, #28]
 8011444:	883a      	ldrh	r2, [r7, #0]
 8011446:	9206      	str	r2, [sp, #24]
 8011448:	2201      	movs	r2, #1
 801144a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801144e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8011452:	9203      	str	r2, [sp, #12]
 8011454:	b2a4      	uxth	r4, r4
 8011456:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801145a:	9200      	str	r2, [sp, #0]
 801145c:	b2ad      	uxth	r5, r5
 801145e:	9502      	str	r5, [sp, #8]
 8011460:	9401      	str	r4, [sp, #4]
 8011462:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8011464:	4642      	mov	r2, r8
 8011466:	4649      	mov	r1, r9
 8011468:	47a0      	blx	r4
 801146a:	b013      	add	sp, #76	@ 0x4c
 801146c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011470:	6803      	ldr	r3, [r0, #0]
 8011472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011474:	4798      	blx	r3
 8011476:	883b      	ldrh	r3, [r7, #0]
 8011478:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801147c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8011480:	fb03 1202 	mla	r2, r3, r2, r1
 8011484:	435d      	muls	r5, r3
 8011486:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801148a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801148e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011490:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8011494:	1b12      	subs	r2, r2, r4
 8011496:	920d      	str	r2, [sp, #52]	@ 0x34
 8011498:	0062      	lsls	r2, r4, #1
 801149a:	1b1c      	subs	r4, r3, r4
 801149c:	0063      	lsls	r3, r4, #1
 801149e:	920a      	str	r2, [sp, #40]	@ 0x28
 80114a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114a2:	f04f 0e04 	mov.w	lr, #4
 80114a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114a8:	4298      	cmp	r0, r3
 80114aa:	d266      	bcs.n	801157a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80114ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114ae:	eb00 0b03 	add.w	fp, r0, r3
 80114b2:	4558      	cmp	r0, fp
 80114b4:	d25c      	bcs.n	8011570 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80114b6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80114ba:	fb1e e303 	smlabb	r3, lr, r3, lr
 80114be:	f858 2003 	ldr.w	r2, [r8, r3]
 80114c2:	0e11      	lsrs	r1, r2, #24
 80114c4:	d012      	beq.n	80114ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80114c6:	29ff      	cmp	r1, #255	@ 0xff
 80114c8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80114cc:	d110      	bne.n	80114f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80114ce:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80114d2:	d10d      	bne.n	80114f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80114d4:	0953      	lsrs	r3, r2, #5
 80114d6:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 80114da:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80114de:	f027 0707 	bic.w	r7, r7, #7
 80114e2:	431f      	orrs	r7, r3
 80114e4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80114e8:	433a      	orrs	r2, r7
 80114ea:	8002      	strh	r2, [r0, #0]
 80114ec:	3002      	adds	r0, #2
 80114ee:	e7e0      	b.n	80114b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80114f0:	fb0a f101 	mul.w	r1, sl, r1
 80114f4:	8806      	ldrh	r6, [r0, #0]
 80114f6:	1c4b      	adds	r3, r1, #1
 80114f8:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80114fc:	1235      	asrs	r5, r6, #8
 80114fe:	10f4      	asrs	r4, r6, #3
 8011500:	121b      	asrs	r3, r3, #8
 8011502:	00f6      	lsls	r6, r6, #3
 8011504:	b299      	uxth	r1, r3
 8011506:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801150a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801150e:	b2f6      	uxtb	r6, r6
 8011510:	43db      	mvns	r3, r3
 8011512:	b2d2      	uxtb	r2, r2
 8011514:	b2db      	uxtb	r3, r3
 8011516:	fb1c fc01 	smulbb	ip, ip, r1
 801151a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801151e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011522:	fb12 f201 	smulbb	r2, r2, r1
 8011526:	fb05 c503 	mla	r5, r5, r3, ip
 801152a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801152e:	b2ff      	uxtb	r7, r7
 8011530:	fb06 2203 	mla	r2, r6, r3, r2
 8011534:	b2ad      	uxth	r5, r5
 8011536:	fb17 f701 	smulbb	r7, r7, r1
 801153a:	b292      	uxth	r2, r2
 801153c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8011540:	fb04 7403 	mla	r4, r4, r3, r7
 8011544:	f105 0c01 	add.w	ip, r5, #1
 8011548:	1c57      	adds	r7, r2, #1
 801154a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801154e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8011552:	b2a4      	uxth	r4, r4
 8011554:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011558:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801155c:	433d      	orrs	r5, r7
 801155e:	1c67      	adds	r7, r4, #1
 8011560:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8011564:	0964      	lsrs	r4, r4, #5
 8011566:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801156a:	4325      	orrs	r5, r4
 801156c:	8005      	strh	r5, [r0, #0]
 801156e:	e7bd      	b.n	80114ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011572:	4418      	add	r0, r3
 8011574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011576:	4499      	add	r9, r3
 8011578:	e795      	b.n	80114a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801157a:	4b04      	ldr	r3, [pc, #16]	@ (801158c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801157c:	6818      	ldr	r0, [r3, #0]
 801157e:	6803      	ldr	r3, [r0, #0]
 8011580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011582:	4798      	blx	r3
 8011584:	e771      	b.n	801146a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8011586:	bf00      	nop
 8011588:	2001543e 	.word	0x2001543e
 801158c:	20015444 	.word	0x20015444

08011590 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8011590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011594:	b087      	sub	sp, #28
 8011596:	4680      	mov	r8, r0
 8011598:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 801159c:	460d      	mov	r5, r1
 801159e:	4614      	mov	r4, r2
 80115a0:	2e00      	cmp	r6, #0
 80115a2:	f000 80b9 	beq.w	8011718 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80115a6:	6810      	ldr	r0, [r2, #0]
 80115a8:	6851      	ldr	r1, [r2, #4]
 80115aa:	af02      	add	r7, sp, #8
 80115ac:	c703      	stmia	r7!, {r0, r1}
 80115ae:	6818      	ldr	r0, [r3, #0]
 80115b0:	6859      	ldr	r1, [r3, #4]
 80115b2:	af04      	add	r7, sp, #16
 80115b4:	c703      	stmia	r7!, {r0, r1}
 80115b6:	a802      	add	r0, sp, #8
 80115b8:	f7fb fba6 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80115bc:	4621      	mov	r1, r4
 80115be:	a804      	add	r0, sp, #16
 80115c0:	f7fb fbca 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80115c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80115c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80115cc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80115d0:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80115d4:	fb14 2103 	smlabb	r1, r4, r3, r2
 80115d8:	eb08 0401 	add.w	r4, r8, r1
 80115dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80115e0:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80115e4:	440a      	add	r2, r1
 80115e6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80115ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80115ee:	4413      	add	r3, r2
 80115f0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80115f4:	4b4a      	ldr	r3, [pc, #296]	@ (8011720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80115f6:	6818      	ldr	r0, [r3, #0]
 80115f8:	6803      	ldr	r3, [r0, #0]
 80115fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115fc:	4798      	blx	r3
 80115fe:	4b49      	ldr	r3, [pc, #292]	@ (8011724 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8011600:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011604:	881a      	ldrh	r2, [r3, #0]
 8011606:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801160a:	2eff      	cmp	r6, #255	@ 0xff
 801160c:	fb02 c101 	mla	r1, r2, r1, ip
 8011610:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011614:	fb02 f207 	mul.w	r2, r2, r7
 8011618:	f105 0104 	add.w	r1, r5, #4
 801161c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8011620:	461d      	mov	r5, r3
 8011622:	d05a      	beq.n	80116da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8011624:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8011628:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801162c:	b2b6      	uxth	r6, r6
 801162e:	fa1f fe8e 	uxth.w	lr, lr
 8011632:	9301      	str	r3, [sp, #4]
 8011634:	4282      	cmp	r2, r0
 8011636:	d96a      	bls.n	801170e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011638:	eb00 0b0a 	add.w	fp, r0, sl
 801163c:	4583      	cmp	fp, r0
 801163e:	d940      	bls.n	80116c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8011640:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011644:	8805      	ldrh	r5, [r0, #0]
 8011646:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801164a:	122f      	asrs	r7, r5, #8
 801164c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8011650:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011654:	fb17 f70e 	smulbb	r7, r7, lr
 8011658:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801165c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011660:	00ed      	lsls	r5, r5, #3
 8011662:	fb0c 7c06 	mla	ip, ip, r6, r7
 8011666:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801166a:	10df      	asrs	r7, r3, #3
 801166c:	b2ed      	uxtb	r5, r5
 801166e:	00db      	lsls	r3, r3, #3
 8011670:	fa1f fc8c 	uxth.w	ip, ip
 8011674:	fb19 f90e 	smulbb	r9, r9, lr
 8011678:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801167c:	b2db      	uxtb	r3, r3
 801167e:	fb15 f50e 	smulbb	r5, r5, lr
 8011682:	fb07 9706 	mla	r7, r7, r6, r9
 8011686:	fb03 5306 	mla	r3, r3, r6, r5
 801168a:	f10c 0901 	add.w	r9, ip, #1
 801168e:	b29b      	uxth	r3, r3
 8011690:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8011694:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8011698:	f103 0c01 	add.w	ip, r3, #1
 801169c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80116a0:	b2bf      	uxth	r7, r7
 80116a2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80116a6:	ea4c 0c09 	orr.w	ip, ip, r9
 80116aa:	f107 0901 	add.w	r9, r7, #1
 80116ae:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80116b2:	097f      	lsrs	r7, r7, #5
 80116b4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80116b8:	ea4c 0c07 	orr.w	ip, ip, r7
 80116bc:	f820 cb02 	strh.w	ip, [r0], #2
 80116c0:	e7bc      	b.n	801163c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80116c2:	9b01      	ldr	r3, [sp, #4]
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	eba3 0308 	sub.w	r3, r3, r8
 80116ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80116ce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80116d2:	eba3 0308 	sub.w	r3, r3, r8
 80116d6:	441c      	add	r4, r3
 80116d8:	e7ac      	b.n	8011634 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80116da:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80116de:	4282      	cmp	r2, r0
 80116e0:	d915      	bls.n	801170e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80116e2:	eb00 060a 	add.w	r6, r0, sl
 80116e6:	4286      	cmp	r6, r0
 80116e8:	d906      	bls.n	80116f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80116ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80116ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80116f2:	f820 3b02 	strh.w	r3, [r0], #2
 80116f6:	e7f6      	b.n	80116e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 80116f8:	882b      	ldrh	r3, [r5, #0]
 80116fa:	eba3 0308 	sub.w	r3, r3, r8
 80116fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011702:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011706:	eba3 0308 	sub.w	r3, r3, r8
 801170a:	441c      	add	r4, r3
 801170c:	e7e7      	b.n	80116de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801170e:	4b04      	ldr	r3, [pc, #16]	@ (8011720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011710:	6818      	ldr	r0, [r3, #0]
 8011712:	6803      	ldr	r3, [r0, #0]
 8011714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011716:	4798      	blx	r3
 8011718:	b007      	add	sp, #28
 801171a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171e:	bf00      	nop
 8011720:	20015444 	.word	0x20015444
 8011724:	2001543e 	.word	0x2001543e

08011728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172c:	b091      	sub	sp, #68	@ 0x44
 801172e:	4680      	mov	r8, r0
 8011730:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8011734:	460f      	mov	r7, r1
 8011736:	4614      	mov	r4, r2
 8011738:	2d00      	cmp	r5, #0
 801173a:	d051      	beq.n	80117e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801173c:	6810      	ldr	r0, [r2, #0]
 801173e:	6851      	ldr	r1, [r2, #4]
 8011740:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8011944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8011744:	ae0c      	add	r6, sp, #48	@ 0x30
 8011746:	c603      	stmia	r6!, {r0, r1}
 8011748:	6818      	ldr	r0, [r3, #0]
 801174a:	6859      	ldr	r1, [r3, #4]
 801174c:	ae0e      	add	r6, sp, #56	@ 0x38
 801174e:	c603      	stmia	r6!, {r0, r1}
 8011750:	a80c      	add	r0, sp, #48	@ 0x30
 8011752:	f7fb fad9 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011756:	4621      	mov	r1, r4
 8011758:	a80e      	add	r0, sp, #56	@ 0x38
 801175a:	f7fb fafd 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801175e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8011762:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011766:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801176a:	f8d9 0000 	ldr.w	r0, [r9]
 801176e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8011772:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8011776:	fb11 2103 	smlabb	r1, r1, r3, r2
 801177a:	eb08 0401 	add.w	r4, r8, r1
 801177e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8011782:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8011948 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8011786:	440a      	add	r2, r1
 8011788:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801178c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8011790:	4413      	add	r3, r2
 8011792:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8011796:	6803      	ldr	r3, [r0, #0]
 8011798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801179a:	4798      	blx	r3
 801179c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80117a0:	f8d9 0000 	ldr.w	r0, [r9]
 80117a4:	d01f      	beq.n	80117e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80117a6:	2200      	movs	r2, #0
 80117a8:	6801      	ldr	r1, [r0, #0]
 80117aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80117ae:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80117b2:	220b      	movs	r2, #11
 80117b4:	9207      	str	r2, [sp, #28]
 80117b6:	f8b8 2000 	ldrh.w	r2, [r8]
 80117ba:	9206      	str	r2, [sp, #24]
 80117bc:	2201      	movs	r2, #1
 80117be:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80117c2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80117c6:	9203      	str	r2, [sp, #12]
 80117c8:	fa1f f28a 	uxth.w	r2, sl
 80117cc:	9202      	str	r2, [sp, #8]
 80117ce:	b2b6      	uxth	r6, r6
 80117d0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80117d4:	9200      	str	r2, [sp, #0]
 80117d6:	9601      	str	r6, [sp, #4]
 80117d8:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 80117da:	463a      	mov	r2, r7
 80117dc:	4621      	mov	r1, r4
 80117de:	47a8      	blx	r5
 80117e0:	b011      	add	sp, #68	@ 0x44
 80117e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e6:	6803      	ldr	r3, [r0, #0]
 80117e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117ea:	4798      	blx	r3
 80117ec:	f8b8 2000 	ldrh.w	r2, [r8]
 80117f0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80117f4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80117f8:	2dff      	cmp	r5, #255	@ 0xff
 80117fa:	fb02 1303 	mla	r3, r2, r3, r1
 80117fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011802:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8011806:	fb0a fa02 	mul.w	sl, sl, r2
 801180a:	d062      	beq.n	80118d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801180c:	ea6f 0c05 	mvn.w	ip, r5
 8011810:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8011814:	930a      	str	r3, [sp, #40]	@ 0x28
 8011816:	b2ad      	uxth	r5, r5
 8011818:	fa5f fc8c 	uxtb.w	ip, ip
 801181c:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8011820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011822:	4298      	cmp	r0, r3
 8011824:	f080 8085 	bcs.w	8011932 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011828:	eb00 0b09 	add.w	fp, r0, r9
 801182c:	4558      	cmp	r0, fp
 801182e:	d246      	bcs.n	80118be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8011830:	f814 eb01 	ldrb.w	lr, [r4], #1
 8011834:	2303      	movs	r3, #3
 8011836:	2204      	movs	r2, #4
 8011838:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801183c:	eb07 0a0e 	add.w	sl, r7, lr
 8011840:	8803      	ldrh	r3, [r0, #0]
 8011842:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8011846:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801184a:	1219      	asrs	r1, r3, #8
 801184c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8011850:	fb18 f805 	smulbb	r8, r8, r5
 8011854:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8011858:	10da      	asrs	r2, r3, #3
 801185a:	fb01 810c 	mla	r1, r1, ip, r8
 801185e:	00db      	lsls	r3, r3, #3
 8011860:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8011864:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8011868:	b2db      	uxtb	r3, r3
 801186a:	fb18 f805 	smulbb	r8, r8, r5
 801186e:	fb1e fe05 	smulbb	lr, lr, r5
 8011872:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8011876:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801187a:	b289      	uxth	r1, r1
 801187c:	fb02 820c 	mla	r2, r2, ip, r8
 8011880:	fb03 e30c 	mla	r3, r3, ip, lr
 8011884:	b292      	uxth	r2, r2
 8011886:	b29b      	uxth	r3, r3
 8011888:	f101 0801 	add.w	r8, r1, #1
 801188c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011890:	f103 0e01 	add.w	lr, r3, #1
 8011894:	f102 0801 	add.w	r8, r2, #1
 8011898:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801189c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80118a0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80118a4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80118a8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80118ac:	ea4e 0101 	orr.w	r1, lr, r1
 80118b0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80118b4:	ea41 0108 	orr.w	r1, r1, r8
 80118b8:	f820 1b02 	strh.w	r1, [r0], #2
 80118bc:	e7b6      	b.n	801182c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80118be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118c0:	881b      	ldrh	r3, [r3, #0]
 80118c2:	1b9b      	subs	r3, r3, r6
 80118c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80118c8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80118cc:	1b9b      	subs	r3, r3, r6
 80118ce:	441c      	add	r4, r3
 80118d0:	e7a6      	b.n	8011820 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80118d2:	491b      	ldr	r1, [pc, #108]	@ (8011940 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80118d4:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80118d8:	2203      	movs	r2, #3
 80118da:	2504      	movs	r5, #4
 80118dc:	4550      	cmp	r0, sl
 80118de:	d228      	bcs.n	8011932 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80118e0:	eb00 0c09 	add.w	ip, r0, r9
 80118e4:	4560      	cmp	r0, ip
 80118e6:	4623      	mov	r3, r4
 80118e8:	d219      	bcs.n	801191e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80118ea:	f893 e000 	ldrb.w	lr, [r3]
 80118ee:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80118f2:	eb07 0b0e 	add.w	fp, r7, lr
 80118f6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80118fa:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80118fe:	f89b b001 	ldrb.w	fp, [fp, #1]
 8011902:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011906:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801190a:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801190e:	ea43 030b 	orr.w	r3, r3, fp
 8011912:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8011916:	3401      	adds	r4, #1
 8011918:	f820 3b02 	strh.w	r3, [r0], #2
 801191c:	e7e2      	b.n	80118e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801191e:	f8b8 3000 	ldrh.w	r3, [r8]
 8011922:	1b9b      	subs	r3, r3, r6
 8011924:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011928:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801192c:	1b9b      	subs	r3, r3, r6
 801192e:	441c      	add	r4, r3
 8011930:	e7d4      	b.n	80118dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8011932:	4b04      	ldr	r3, [pc, #16]	@ (8011944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8011934:	6818      	ldr	r0, [r3, #0]
 8011936:	6803      	ldr	r3, [r0, #0]
 8011938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801193a:	4798      	blx	r3
 801193c:	e750      	b.n	80117e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801193e:	bf00      	nop
 8011940:	fffff800 	.word	0xfffff800
 8011944:	20015444 	.word	0x20015444
 8011948:	2001543e 	.word	0x2001543e

0801194c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801194c:	b4f0      	push	{r4, r5, r6, r7}
 801194e:	460c      	mov	r4, r1
 8011950:	4611      	mov	r1, r2
 8011952:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8011956:	780f      	ldrb	r7, [r1, #0]
 8011958:	784e      	ldrb	r6, [r1, #1]
 801195a:	2f01      	cmp	r7, #1
 801195c:	461a      	mov	r2, r3
 801195e:	9b04      	ldr	r3, [sp, #16]
 8011960:	d038      	beq.n	80119d4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8011962:	d31f      	bcc.n	80119a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8011964:	2f02      	cmp	r7, #2
 8011966:	d14d      	bne.n	8011a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011968:	2e03      	cmp	r6, #3
 801196a:	d84b      	bhi.n	8011a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801196c:	e8df f006 	tbb	[pc, r6]
 8011970:	17140702 	.word	0x17140702
 8011974:	9504      	str	r5, [sp, #16]
 8011976:	4620      	mov	r0, r4
 8011978:	bcf0      	pop	{r4, r5, r6, r7}
 801197a:	f7ff be09 	b.w	8011590 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801197e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011980:	2800      	cmp	r0, #0
 8011982:	d03f      	beq.n	8011a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011984:	6806      	ldr	r6, [r0, #0]
 8011986:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801198a:	68b5      	ldr	r5, [r6, #8]
 801198c:	4613      	mov	r3, r2
 801198e:	46ac      	mov	ip, r5
 8011990:	460a      	mov	r2, r1
 8011992:	4621      	mov	r1, r4
 8011994:	bcf0      	pop	{r4, r5, r6, r7}
 8011996:	4760      	bx	ip
 8011998:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801199c:	e7f0      	b.n	8011980 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801199e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80119a2:	e7ed      	b.n	8011980 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80119a4:	2e03      	cmp	r6, #3
 80119a6:	d82d      	bhi.n	8011a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80119a8:	e8df f006 	tbb	[pc, r6]
 80119ac:	110e0702 	.word	0x110e0702
 80119b0:	9504      	str	r5, [sp, #16]
 80119b2:	4620      	mov	r0, r4
 80119b4:	bcf0      	pop	{r4, r5, r6, r7}
 80119b6:	f7ff bd05 	b.w	80113c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80119ba:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80119bc:	b310      	cbz	r0, 8011a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80119be:	6806      	ldr	r6, [r0, #0]
 80119c0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80119c4:	68f5      	ldr	r5, [r6, #12]
 80119c6:	e7e1      	b.n	801198c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80119c8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80119cc:	e7f6      	b.n	80119bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80119ce:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80119d2:	e7f3      	b.n	80119bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80119d4:	2e03      	cmp	r6, #3
 80119d6:	d815      	bhi.n	8011a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80119d8:	e8df f006 	tbb	[pc, r6]
 80119dc:	110e0702 	.word	0x110e0702
 80119e0:	9504      	str	r5, [sp, #16]
 80119e2:	4620      	mov	r0, r4
 80119e4:	bcf0      	pop	{r4, r5, r6, r7}
 80119e6:	f7ff be9f 	b.w	8011728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80119ea:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80119ec:	b150      	cbz	r0, 8011a04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80119ee:	6806      	ldr	r6, [r0, #0]
 80119f0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80119f4:	6935      	ldr	r5, [r6, #16]
 80119f6:	e7c9      	b.n	801198c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80119f8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80119fc:	e7f6      	b.n	80119ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 80119fe:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011a02:	e7f3      	b.n	80119ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8011a04:	bcf0      	pop	{r4, r5, r6, r7}
 8011a06:	4770      	bx	lr

08011a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8011a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a0c:	4604      	mov	r4, r0
 8011a0e:	b087      	sub	sp, #28
 8011a10:	6810      	ldr	r0, [r2, #0]
 8011a12:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8011a16:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 8011c50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8011a1a:	460e      	mov	r6, r1
 8011a1c:	6851      	ldr	r1, [r2, #4]
 8011a1e:	ad02      	add	r5, sp, #8
 8011a20:	c503      	stmia	r5!, {r0, r1}
 8011a22:	6818      	ldr	r0, [r3, #0]
 8011a24:	6859      	ldr	r1, [r3, #4]
 8011a26:	ad04      	add	r5, sp, #16
 8011a28:	4617      	mov	r7, r2
 8011a2a:	c503      	stmia	r5!, {r0, r1}
 8011a2c:	a802      	add	r0, sp, #8
 8011a2e:	f7fb f96b 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011a32:	4639      	mov	r1, r7
 8011a34:	a804      	add	r0, sp, #16
 8011a36:	f7fb f98f 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011a3a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011a3e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011a42:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011a46:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011a4a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8011a4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011a52:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8011a56:	440e      	add	r6, r1
 8011a58:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011a5c:	440a      	add	r2, r1
 8011a5e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011a62:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011a66:	4413      	add	r3, r2
 8011a68:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011a6c:	4b77      	ldr	r3, [pc, #476]	@ (8011c4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8011a6e:	6818      	ldr	r0, [r3, #0]
 8011a70:	6803      	ldr	r3, [r0, #0]
 8011a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a74:	4798      	blx	r3
 8011a76:	f8b9 b000 	ldrh.w	fp, [r9]
 8011a7a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011a7e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011a82:	fb0b 2303 	mla	r3, fp, r3, r2
 8011a86:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011a8a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011a8e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8011a92:	fb05 f50b 	mul.w	r5, r5, fp
 8011a96:	9300      	str	r3, [sp, #0]
 8011a98:	d069      	beq.n	8011b6e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8011a9a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8011a9e:	4558      	cmp	r0, fp
 8011aa0:	f080 80cc 	bcs.w	8011c3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011aa4:	9b00      	ldr	r3, [sp, #0]
 8011aa6:	18c3      	adds	r3, r0, r3
 8011aa8:	9301      	str	r3, [sp, #4]
 8011aaa:	4631      	mov	r1, r6
 8011aac:	9b01      	ldr	r3, [sp, #4]
 8011aae:	4298      	cmp	r0, r3
 8011ab0:	d24f      	bcs.n	8011b52 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8011ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ab6:	2a00      	cmp	r2, #0
 8011ab8:	d048      	beq.n	8011b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8011aba:	fb0a f202 	mul.w	r2, sl, r2
 8011abe:	1c53      	adds	r3, r2, #1
 8011ac0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8011ac4:	121b      	asrs	r3, r3, #8
 8011ac6:	d041      	beq.n	8011b4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8011ac8:	8802      	ldrh	r2, [r0, #0]
 8011aca:	f8b4 c000 	ldrh.w	ip, [r4]
 8011ace:	b29e      	uxth	r6, r3
 8011ad0:	1215      	asrs	r5, r2, #8
 8011ad2:	43db      	mvns	r3, r3
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	ea4f 272c 	mov.w	r7, ip, asr #8
 8011ada:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8011ade:	fb15 f503 	smulbb	r5, r5, r3
 8011ae2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8011ae6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011aea:	00d2      	lsls	r2, r2, #3
 8011aec:	fb07 5706 	mla	r7, r7, r6, r5
 8011af0:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8011af4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8011af8:	b2d2      	uxtb	r2, r2
 8011afa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8011afe:	b2bf      	uxth	r7, r7
 8011b00:	fb1e fe03 	smulbb	lr, lr, r3
 8011b04:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8011b08:	fa5f fc8c 	uxtb.w	ip, ip
 8011b0c:	fb12 f203 	smulbb	r2, r2, r3
 8011b10:	fb05 e506 	mla	r5, r5, r6, lr
 8011b14:	fb0c 2c06 	mla	ip, ip, r6, r2
 8011b18:	f107 0e01 	add.w	lr, r7, #1
 8011b1c:	fa1f fc8c 	uxth.w	ip, ip
 8011b20:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011b24:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8011b28:	f10c 0701 	add.w	r7, ip, #1
 8011b2c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8011b30:	b2ad      	uxth	r5, r5
 8011b32:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011b36:	ea47 070e 	orr.w	r7, r7, lr
 8011b3a:	f105 0e01 	add.w	lr, r5, #1
 8011b3e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8011b42:	096d      	lsrs	r5, r5, #5
 8011b44:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011b48:	432f      	orrs	r7, r5
 8011b4a:	8007      	strh	r7, [r0, #0]
 8011b4c:	3002      	adds	r0, #2
 8011b4e:	3402      	adds	r4, #2
 8011b50:	e7ac      	b.n	8011aac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8011b52:	f8b9 3000 	ldrh.w	r3, [r9]
 8011b56:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011b5a:	eba3 0308 	sub.w	r3, r3, r8
 8011b5e:	eba6 0608 	sub.w	r6, r6, r8
 8011b62:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011b66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011b6a:	440e      	add	r6, r1
 8011b6c:	e797      	b.n	8011a9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8011b6e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011b72:	42a8      	cmp	r0, r5
 8011b74:	d262      	bcs.n	8011c3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011b76:	9b00      	ldr	r3, [sp, #0]
 8011b78:	4631      	mov	r1, r6
 8011b7a:	eb00 0b03 	add.w	fp, r0, r3
 8011b7e:	4558      	cmp	r0, fp
 8011b80:	d24e      	bcs.n	8011c20 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8011b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b86:	b12b      	cbz	r3, 8011b94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8011b88:	2bff      	cmp	r3, #255	@ 0xff
 8011b8a:	f8b4 e000 	ldrh.w	lr, [r4]
 8011b8e:	d104      	bne.n	8011b9a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8011b90:	f8a0 e000 	strh.w	lr, [r0]
 8011b94:	3002      	adds	r0, #2
 8011b96:	3402      	adds	r4, #2
 8011b98:	e7f1      	b.n	8011b7e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8011b9a:	8802      	ldrh	r2, [r0, #0]
 8011b9c:	b29f      	uxth	r7, r3
 8011b9e:	1216      	asrs	r6, r2, #8
 8011ba0:	43db      	mvns	r3, r3
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8011ba8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011bac:	fb16 f603 	smulbb	r6, r6, r3
 8011bb0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8011bb4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011bb8:	00d2      	lsls	r2, r2, #3
 8011bba:	fb0c 6c07 	mla	ip, ip, r7, r6
 8011bbe:	b2d2      	uxtb	r2, r2
 8011bc0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8011bc4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8011bc8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8011bcc:	fb1a fa03 	smulbb	sl, sl, r3
 8011bd0:	fa1f fc8c 	uxth.w	ip, ip
 8011bd4:	fb12 f303 	smulbb	r3, r2, r3
 8011bd8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8011bdc:	fa5f fe8e 	uxtb.w	lr, lr
 8011be0:	fb06 a607 	mla	r6, r6, r7, sl
 8011be4:	f10c 0201 	add.w	r2, ip, #1
 8011be8:	fb0e 3307 	mla	r3, lr, r7, r3
 8011bec:	b2b6      	uxth	r6, r6
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8011bf4:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8011bf8:	f106 0a01 	add.w	sl, r6, #1
 8011bfc:	f103 0c01 	add.w	ip, r3, #1
 8011c00:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8011c04:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8011c08:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8011c0c:	0976      	lsrs	r6, r6, #5
 8011c0e:	ea4c 0c02 	orr.w	ip, ip, r2
 8011c12:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8011c16:	ea4c 0c06 	orr.w	ip, ip, r6
 8011c1a:	f8a0 c000 	strh.w	ip, [r0]
 8011c1e:	e7b9      	b.n	8011b94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8011c20:	f8b9 3000 	ldrh.w	r3, [r9]
 8011c24:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011c28:	eba3 0308 	sub.w	r3, r3, r8
 8011c2c:	eba6 0608 	sub.w	r6, r6, r8
 8011c30:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011c34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011c38:	440e      	add	r6, r1
 8011c3a:	e79a      	b.n	8011b72 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8011c3c:	4b03      	ldr	r3, [pc, #12]	@ (8011c4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8011c3e:	6818      	ldr	r0, [r3, #0]
 8011c40:	6803      	ldr	r3, [r0, #0]
 8011c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c44:	4798      	blx	r3
 8011c46:	b007      	add	sp, #28
 8011c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4c:	20015444 	.word	0x20015444
 8011c50:	2001543e 	.word	0x2001543e

08011c54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8011c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c58:	b089      	sub	sp, #36	@ 0x24
 8011c5a:	4607      	mov	r7, r0
 8011c5c:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8011c60:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8011c62:	4688      	mov	r8, r1
 8011c64:	4692      	mov	sl, r2
 8011c66:	4699      	mov	r9, r3
 8011c68:	2e00      	cmp	r6, #0
 8011c6a:	d048      	beq.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011c6c:	4608      	mov	r0, r1
 8011c6e:	f7fe fac3 	bl	80101f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011c72:	4605      	mov	r5, r0
 8011c74:	4640      	mov	r0, r8
 8011c76:	f7fe faf3 	bl	8010260 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011c7a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011c7e:	4640      	mov	r0, r8
 8011c80:	f8ad a008 	strh.w	sl, [sp, #8]
 8011c84:	f8ad 500c 	strh.w	r5, [sp, #12]
 8011c88:	f8ad 900a 	strh.w	r9, [sp, #10]
 8011c8c:	f7fe fba6 	bl	80103dc <_ZNK8touchgfx6Bitmap7getDataEv>
 8011c90:	4605      	mov	r5, r0
 8011c92:	4640      	mov	r0, r8
 8011c94:	f7fe fbd2 	bl	801043c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8011c98:	4682      	mov	sl, r0
 8011c9a:	4640      	mov	r0, r8
 8011c9c:	f7fe fc22 	bl	80104e4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011ca0:	2810      	cmp	r0, #16
 8011ca2:	d82c      	bhi.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011ca4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011ca8:	00ba00ca 	.word	0x00ba00ca
 8011cac:	002b0011 	.word	0x002b0011
 8011cb0:	002b002b 	.word	0x002b002b
 8011cb4:	002b002b 	.word	0x002b002b
 8011cb8:	002b002b 	.word	0x002b002b
 8011cbc:	00c1002b 	.word	0x00c1002b
 8011cc0:	002b002b 	.word	0x002b002b
 8011cc4:	002b0180 	.word	0x002b0180
 8011cc8:	0173      	.short	0x0173
 8011cca:	4bbc      	ldr	r3, [pc, #752]	@ (8011fbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8011ccc:	6818      	ldr	r0, [r3, #0]
 8011cce:	6803      	ldr	r3, [r0, #0]
 8011cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cd2:	4798      	blx	r3
 8011cd4:	2eff      	cmp	r6, #255	@ 0xff
 8011cd6:	d101      	bne.n	8011cdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8011cd8:	0683      	lsls	r3, r0, #26
 8011cda:	d506      	bpl.n	8011cea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8011cdc:	4633      	mov	r3, r6
 8011cde:	4622      	mov	r2, r4
 8011ce0:	a902      	add	r1, sp, #8
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	f7ff f8fc 	bl	8010ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011ce8:	e009      	b.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011cea:	4640      	mov	r0, r8
 8011cec:	f7fe fb3e 	bl	801036c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8011cf0:	b940      	cbnz	r0, 8011d04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8011cf2:	4623      	mov	r3, r4
 8011cf4:	aa02      	add	r2, sp, #8
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	4638      	mov	r0, r7
 8011cfa:	f7ff f9d7 	bl	80110ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8011cfe:	b009      	add	sp, #36	@ 0x24
 8011d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d04:	f10d 0918 	add.w	r9, sp, #24
 8011d08:	4641      	mov	r1, r8
 8011d0a:	4648      	mov	r0, r9
 8011d0c:	f7fe fadc 	bl	80102c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011d10:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011d14:	f10d 0810 	add.w	r8, sp, #16
 8011d18:	e888 0003 	stmia.w	r8, {r0, r1}
 8011d1c:	4640      	mov	r0, r8
 8011d1e:	4621      	mov	r1, r4
 8011d20:	f7f7 fe74 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 8011d24:	4640      	mov	r0, r8
 8011d26:	f7f7 feb4 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	d1d6      	bne.n	8011cdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8011d2e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011d32:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011d36:	4293      	cmp	r3, r2
 8011d38:	dd12      	ble.n	8011d60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8011d3a:	1a9b      	subs	r3, r3, r2
 8011d3c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011d40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011d44:	f8ad 0018 	strh.w	r0, [sp, #24]
 8011d48:	f8ad 201a 	strh.w	r2, [sp, #26]
 8011d4c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011d50:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011d54:	464a      	mov	r2, r9
 8011d56:	4633      	mov	r3, r6
 8011d58:	a902      	add	r1, sp, #8
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f7ff f8c0 	bl	8010ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011d60:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011d64:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	dd12      	ble.n	8011d92 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8011d6c:	1a9b      	subs	r3, r3, r2
 8011d6e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8011d72:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8011d76:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011d7a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011d7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011d82:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011d86:	23ff      	movs	r3, #255	@ 0xff
 8011d88:	464a      	mov	r2, r9
 8011d8a:	a902      	add	r1, sp, #8
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f7ff f8a7 	bl	8010ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011d92:	4643      	mov	r3, r8
 8011d94:	aa02      	add	r2, sp, #8
 8011d96:	4629      	mov	r1, r5
 8011d98:	4638      	mov	r0, r7
 8011d9a:	f7ff f987 	bl	80110ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8011d9e:	88a2      	ldrh	r2, [r4, #4]
 8011da0:	8823      	ldrh	r3, [r4, #0]
 8011da2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8011da6:	4413      	add	r3, r2
 8011da8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011dac:	440a      	add	r2, r1
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	b292      	uxth	r2, r2
 8011db2:	b211      	sxth	r1, r2
 8011db4:	b218      	sxth	r0, r3
 8011db6:	4288      	cmp	r0, r1
 8011db8:	dd12      	ble.n	8011de0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8011dba:	1a9b      	subs	r3, r3, r2
 8011dbc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8011dc0:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8011dc4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8011dc8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011dcc:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011dd0:	23ff      	movs	r3, #255	@ 0xff
 8011dd2:	464a      	mov	r2, r9
 8011dd4:	a902      	add	r1, sp, #8
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	f8ad 601a 	strh.w	r6, [sp, #26]
 8011ddc:	f7ff f880 	bl	8010ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011de0:	88e2      	ldrh	r2, [r4, #6]
 8011de2:	8863      	ldrh	r3, [r4, #2]
 8011de4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8011de8:	4413      	add	r3, r2
 8011dea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011dee:	440a      	add	r2, r1
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	b292      	uxth	r2, r2
 8011df4:	b211      	sxth	r1, r2
 8011df6:	b218      	sxth	r0, r3
 8011df8:	4288      	cmp	r0, r1
 8011dfa:	dd80      	ble.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011dfc:	1a9b      	subs	r3, r3, r2
 8011dfe:	f9b4 6000 	ldrsh.w	r6, [r4]
 8011e02:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011e06:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011e0a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011e0e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8011e12:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011e16:	23ff      	movs	r3, #255	@ 0xff
 8011e18:	464a      	mov	r2, r9
 8011e1a:	e761      	b.n	8011ce0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8011e1c:	4633      	mov	r3, r6
 8011e1e:	4622      	mov	r2, r4
 8011e20:	a902      	add	r1, sp, #8
 8011e22:	4628      	mov	r0, r5
 8011e24:	f7ff f9b2 	bl	801118c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8011e28:	e769      	b.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011e2a:	e9cd 4600 	strd	r4, r6, [sp]
 8011e2e:	ab02      	add	r3, sp, #8
 8011e30:	4652      	mov	r2, sl
 8011e32:	4629      	mov	r1, r5
 8011e34:	4638      	mov	r0, r7
 8011e36:	f7ff fd89 	bl	801194c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8011e3a:	e760      	b.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011e3c:	4640      	mov	r0, r8
 8011e3e:	f7fe fa95 	bl	801036c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8011e42:	b948      	cbnz	r0, 8011e58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	e9cd 6000 	strd	r6, r0, [sp]
 8011e4a:	aa02      	add	r2, sp, #8
 8011e4c:	68de      	ldr	r6, [r3, #12]
 8011e4e:	4629      	mov	r1, r5
 8011e50:	4623      	mov	r3, r4
 8011e52:	4638      	mov	r0, r7
 8011e54:	47b0      	blx	r6
 8011e56:	e752      	b.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011e58:	f10d 0918 	add.w	r9, sp, #24
 8011e5c:	4641      	mov	r1, r8
 8011e5e:	4648      	mov	r0, r9
 8011e60:	f7fe fa32 	bl	80102c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011e64:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011e68:	f10d 0810 	add.w	r8, sp, #16
 8011e6c:	e888 0003 	stmia.w	r8, {r0, r1}
 8011e70:	4640      	mov	r0, r8
 8011e72:	4621      	mov	r1, r4
 8011e74:	f7f7 fdca 	bl	8009a0c <_ZN8touchgfx4RectaNERKS0_>
 8011e78:	4640      	mov	r0, r8
 8011e7a:	f7f7 fe0a 	bl	8009a92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011e7e:	b138      	cbz	r0, 8011e90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8011e80:	9600      	str	r6, [sp, #0]
 8011e82:	4623      	mov	r3, r4
 8011e84:	aa02      	add	r2, sp, #8
 8011e86:	4651      	mov	r1, sl
 8011e88:	4628      	mov	r0, r5
 8011e8a:	f7ff fdbd 	bl	8011a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011e8e:	e736      	b.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	e9cd 6000 	strd	r6, r0, [sp]
 8011e96:	aa02      	add	r2, sp, #8
 8011e98:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8011e9c:	4629      	mov	r1, r5
 8011e9e:	4643      	mov	r3, r8
 8011ea0:	4638      	mov	r0, r7
 8011ea2:	47d8      	blx	fp
 8011ea4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011ea8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011eac:	4293      	cmp	r3, r2
 8011eae:	dd13      	ble.n	8011ed8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8011eb0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011eb4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011eb8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8011ebc:	1a9b      	subs	r3, r3, r2
 8011ebe:	f8ad 201a 	strh.w	r2, [sp, #26]
 8011ec2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011ec6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011eca:	9600      	str	r6, [sp, #0]
 8011ecc:	464b      	mov	r3, r9
 8011ece:	aa02      	add	r2, sp, #8
 8011ed0:	4651      	mov	r1, sl
 8011ed2:	4628      	mov	r0, r5
 8011ed4:	f7ff fd98 	bl	8011a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011ed8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011edc:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	dd13      	ble.n	8011f0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8011ee4:	1a9b      	subs	r3, r3, r2
 8011ee6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8011eea:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8011eee:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011ef2:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011ef6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011efa:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011efe:	9600      	str	r6, [sp, #0]
 8011f00:	464b      	mov	r3, r9
 8011f02:	aa02      	add	r2, sp, #8
 8011f04:	4651      	mov	r1, sl
 8011f06:	4628      	mov	r0, r5
 8011f08:	f7ff fd7e 	bl	8011a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011f0c:	88a2      	ldrh	r2, [r4, #4]
 8011f0e:	8823      	ldrh	r3, [r4, #0]
 8011f10:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8011f14:	4413      	add	r3, r2
 8011f16:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011f1a:	440a      	add	r2, r1
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	b292      	uxth	r2, r2
 8011f20:	b211      	sxth	r1, r2
 8011f22:	b218      	sxth	r0, r3
 8011f24:	4288      	cmp	r0, r1
 8011f26:	dd13      	ble.n	8011f50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8011f28:	1a9b      	subs	r3, r3, r2
 8011f2a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8011f2e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8011f32:	f8ad 1018 	strh.w	r1, [sp, #24]
 8011f36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011f3a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011f3e:	9600      	str	r6, [sp, #0]
 8011f40:	464b      	mov	r3, r9
 8011f42:	aa02      	add	r2, sp, #8
 8011f44:	4651      	mov	r1, sl
 8011f46:	4628      	mov	r0, r5
 8011f48:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011f4c:	f7ff fd5c 	bl	8011a08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011f50:	88e2      	ldrh	r2, [r4, #6]
 8011f52:	8863      	ldrh	r3, [r4, #2]
 8011f54:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8011f58:	4413      	add	r3, r2
 8011f5a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011f5e:	440a      	add	r2, r1
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	b292      	uxth	r2, r2
 8011f64:	b211      	sxth	r1, r2
 8011f66:	b218      	sxth	r0, r3
 8011f68:	4288      	cmp	r0, r1
 8011f6a:	f77f aec8 	ble.w	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011f6e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8011f72:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011f76:	f8ad 7018 	strh.w	r7, [sp, #24]
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011f80:	f8ad 101a 	strh.w	r1, [sp, #26]
 8011f84:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011f88:	9600      	str	r6, [sp, #0]
 8011f8a:	464b      	mov	r3, r9
 8011f8c:	e77a      	b.n	8011e84 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8011f8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8011f92:	2800      	cmp	r0, #0
 8011f94:	f43f aeb3 	beq.w	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011f98:	6803      	ldr	r3, [r0, #0]
 8011f9a:	9600      	str	r6, [sp, #0]
 8011f9c:	68de      	ldr	r6, [r3, #12]
 8011f9e:	4623      	mov	r3, r4
 8011fa0:	aa02      	add	r2, sp, #8
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	47b0      	blx	r6
 8011fa6:	e6aa      	b.n	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011fa8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8011fac:	2800      	cmp	r0, #0
 8011fae:	f43f aea6 	beq.w	8011cfe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011fb2:	6803      	ldr	r3, [r0, #0]
 8011fb4:	9600      	str	r6, [sp, #0]
 8011fb6:	689e      	ldr	r6, [r3, #8]
 8011fb8:	e7f1      	b.n	8011f9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8011fba:	bf00      	nop
 8011fbc:	20015444 	.word	0x20015444

08011fc0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8011fc0:	b180      	cbz	r0, 8011fe4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8011fc2:	2903      	cmp	r1, #3
 8011fc4:	d81c      	bhi.n	8012000 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8011fc6:	e8df f001 	tbb	[pc, r1]
 8011fca:	1d02      	.short	0x1d02
 8011fcc:	1f08      	.short	0x1f08
 8011fce:	4b10      	ldr	r3, [pc, #64]	@ (8012010 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8011fd0:	8818      	ldrh	r0, [r3, #0]
 8011fd2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011fd6:	4240      	negs	r0, r0
 8011fd8:	4770      	bx	lr
 8011fda:	4b0d      	ldr	r3, [pc, #52]	@ (8012010 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8011fdc:	8818      	ldrh	r0, [r3, #0]
 8011fde:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011fe2:	4770      	bx	lr
 8011fe4:	2903      	cmp	r1, #3
 8011fe6:	d80b      	bhi.n	8012000 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8011fe8:	a301      	add	r3, pc, #4	@ (adr r3, 8011ff0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8011fea:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011fee:	bf00      	nop
 8011ff0:	08012005 	.word	0x08012005
 8011ff4:	08011fdb 	.word	0x08011fdb
 8011ff8:	08012009 	.word	0x08012009
 8011ffc:	08011fcf 	.word	0x08011fcf
 8012000:	2000      	movs	r0, #0
 8012002:	4770      	bx	lr
 8012004:	2001      	movs	r0, #1
 8012006:	4770      	bx	lr
 8012008:	f04f 30ff 	mov.w	r0, #4294967295
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	2001543e 	.word	0x2001543e

08012014 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8012014:	b180      	cbz	r0, 8012038 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8012016:	2903      	cmp	r1, #3
 8012018:	d81c      	bhi.n	8012054 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801201a:	e8df f001 	tbb	[pc, r1]
 801201e:	021d      	.short	0x021d
 8012020:	071f      	.short	0x071f
 8012022:	4b10      	ldr	r3, [pc, #64]	@ (8012064 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012024:	8818      	ldrh	r0, [r3, #0]
 8012026:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801202a:	4770      	bx	lr
 801202c:	4b0d      	ldr	r3, [pc, #52]	@ (8012064 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801202e:	8818      	ldrh	r0, [r3, #0]
 8012030:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012034:	4240      	negs	r0, r0
 8012036:	4770      	bx	lr
 8012038:	2903      	cmp	r1, #3
 801203a:	d80b      	bhi.n	8012054 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801203c:	a301      	add	r3, pc, #4	@ (adr r3, 8012044 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801203e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012042:	bf00      	nop
 8012044:	08012023 	.word	0x08012023
 8012048:	0801205d 	.word	0x0801205d
 801204c:	0801202d 	.word	0x0801202d
 8012050:	08012059 	.word	0x08012059
 8012054:	2000      	movs	r0, #0
 8012056:	4770      	bx	lr
 8012058:	2001      	movs	r0, #1
 801205a:	4770      	bx	lr
 801205c:	f04f 30ff 	mov.w	r0, #4294967295
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	2001543e 	.word	0x2001543e

08012068 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8012068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206c:	b099      	sub	sp, #100	@ 0x64
 801206e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012070:	a914      	add	r1, sp, #80	@ 0x50
 8012072:	e881 000c 	stmia.w	r1, {r2, r3}
 8012076:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 801207a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 801207e:	f891 900d 	ldrb.w	r9, [r1, #13]
 8012082:	9309      	str	r3, [sp, #36]	@ 0x24
 8012084:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8012088:	9310      	str	r3, [sp, #64]	@ 0x40
 801208a:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801208e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8012092:	930c      	str	r3, [sp, #48]	@ 0x30
 8012094:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 8012098:	798f      	ldrb	r7, [r1, #6]
 801209a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 801209e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 80120a2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 80120a6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 80120aa:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 80120ae:	431f      	orrs	r7, r3
 80120b0:	f000 8195 	beq.w	80123de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80120b4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80120b8:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 80120bc:	f891 9007 	ldrb.w	r9, [r1, #7]
 80120c0:	ea59 0903 	orrs.w	r9, r9, r3
 80120c4:	f000 818b 	beq.w	80123de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80120c8:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	2d00      	cmp	r5, #0
 80120d0:	f000 812e 	beq.w	8012330 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 80120d4:	1aed      	subs	r5, r5, r3
 80120d6:	b2ad      	uxth	r5, r5
 80120d8:	042b      	lsls	r3, r5, #16
 80120da:	d502      	bpl.n	80120e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80120dc:	1b64      	subs	r4, r4, r5
 80120de:	b224      	sxth	r4, r4
 80120e0:	2500      	movs	r5, #0
 80120e2:	f9b2 1000 	ldrsh.w	r1, [r2]
 80120e6:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80120ea:	428c      	cmp	r4, r1
 80120ec:	b28b      	uxth	r3, r1
 80120ee:	bfbf      	itttt	lt
 80120f0:	18ed      	addlt	r5, r5, r3
 80120f2:	1b2c      	sublt	r4, r5, r4
 80120f4:	b2a5      	uxthlt	r5, r4
 80120f6:	460c      	movlt	r4, r1
 80120f8:	8891      	ldrh	r1, [r2, #4]
 80120fa:	440b      	add	r3, r1
 80120fc:	b21b      	sxth	r3, r3
 80120fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012100:	88d3      	ldrh	r3, [r2, #6]
 8012102:	8852      	ldrh	r2, [r2, #2]
 8012104:	4413      	add	r3, r2
 8012106:	b21b      	sxth	r3, r3
 8012108:	930d      	str	r3, [sp, #52]	@ 0x34
 801210a:	4bbe      	ldr	r3, [pc, #760]	@ (8012404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801210c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801210e:	f893 b000 	ldrb.w	fp, [r3]
 8012112:	f10b 3cff 	add.w	ip, fp, #4294967295
 8012116:	f1dc 0300 	rsbs	r3, ip, #0
 801211a:	eb43 030c 	adc.w	r3, r3, ip
 801211e:	930e      	str	r3, [sp, #56]	@ 0x38
 8012120:	4621      	mov	r1, r4
 8012122:	4653      	mov	r3, sl
 8012124:	a814      	add	r0, sp, #80	@ 0x50
 8012126:	f7fa fc64 	bl	800c9f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801212a:	4621      	mov	r1, r4
 801212c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8012130:	4653      	mov	r3, sl
 8012132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012134:	a814      	add	r0, sp, #80	@ 0x50
 8012136:	f7fa fc79 	bl	800ca2c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801213a:	a918      	add	r1, sp, #96	@ 0x60
 801213c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8012140:	a817      	add	r0, sp, #92	@ 0x5c
 8012142:	f7fa fd9f 	bl	800cc84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8012146:	f1ba 0f00 	cmp.w	sl, #0
 801214a:	f040 80f4 	bne.w	8012336 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801214e:	f1bb 0f01 	cmp.w	fp, #1
 8012152:	f040 80f8 	bne.w	8012346 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8012156:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012158:	2b00      	cmp	r3, #0
 801215a:	f040 8145 	bne.w	80123e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801215e:	b2ba      	uxth	r2, r7
 8012160:	b905      	cbnz	r5, 8012164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8012162:	b16e      	cbz	r6, 8012180 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8012164:	fb06 5302 	mla	r3, r6, r2, r5
 8012168:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801216a:	fb08 f303 	mul.w	r3, r8, r3
 801216e:	4631      	mov	r1, r6
 8012170:	f003 0607 	and.w	r6, r3, #7
 8012174:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8012178:	9328      	str	r3, [sp, #160]	@ 0xa0
 801217a:	eba9 0301 	sub.w	r3, r9, r1
 801217e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012180:	4651      	mov	r1, sl
 8012182:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8012184:	f7ff ff1c 	bl	8011fc0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8012188:	4681      	mov	r9, r0
 801218a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801218c:	f7ff ff42 	bl	8012014 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8012190:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012194:	eba3 0a01 	sub.w	sl, r3, r1
 8012198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801219a:	459a      	cmp	sl, r3
 801219c:	bfa8      	it	ge
 801219e:	469a      	movge	sl, r3
 80121a0:	f1ba 0f00 	cmp.w	sl, #0
 80121a4:	4683      	mov	fp, r0
 80121a6:	f340 811a 	ble.w	80123de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80121aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121ac:	1b64      	subs	r4, r4, r5
 80121ae:	1b1c      	subs	r4, r3, r4
 80121b0:	42bc      	cmp	r4, r7
 80121b2:	bfd4      	ite	le
 80121b4:	ebc5 0504 	rsble	r5, r5, r4
 80121b8:	ebc5 0507 	rsbgt	r5, r5, r7
 80121bc:	2d00      	cmp	r5, #0
 80121be:	f340 810e 	ble.w	80123de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80121c2:	1b52      	subs	r2, r2, r5
 80121c4:	fb08 f302 	mul.w	r3, r8, r2
 80121c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80121ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f040 8116 	bne.w	80123fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80121d2:	4b8d      	ldr	r3, [pc, #564]	@ (8012408 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 80121d4:	6818      	ldr	r0, [r3, #0]
 80121d6:	6803      	ldr	r3, [r0, #0]
 80121d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121da:	4798      	blx	r3
 80121dc:	2301      	movs	r3, #1
 80121de:	fa03 f308 	lsl.w	r3, r3, r8
 80121e2:	4a8a      	ldr	r2, [pc, #552]	@ (801240c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80121e4:	3b01      	subs	r3, #1
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	8811      	ldrh	r1, [r2, #0]
 80121ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80121ec:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 80121f0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 80121f4:	fb01 2303 	mla	r3, r1, r3, r2
 80121f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80121fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80121fe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012200:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8012204:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012206:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012208:	0a19      	lsrs	r1, r3, #8
 801220a:	b2cb      	uxtb	r3, r1
 801220c:	9312      	str	r3, [sp, #72]	@ 0x48
 801220e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012210:	b2db      	uxtb	r3, r3
 8012212:	9311      	str	r3, [sp, #68]	@ 0x44
 8012214:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012216:	095a      	lsrs	r2, r3, #5
 8012218:	4b7d      	ldr	r3, [pc, #500]	@ (8012410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801221a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801221e:	400b      	ands	r3, r1
 8012220:	4313      	orrs	r3, r2
 8012222:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8012224:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8012228:	4313      	orrs	r3, r2
 801222a:	b29b      	uxth	r3, r3
 801222c:	9310      	str	r3, [sp, #64]	@ 0x40
 801222e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012230:	781a      	ldrb	r2, [r3, #0]
 8012232:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8012236:	4132      	asrs	r2, r6
 8012238:	fb05 b919 	mls	r9, r5, r9, fp
 801223c:	fb03 fb05 	mul.w	fp, r3, r5
 8012240:	b2d2      	uxtb	r2, r2
 8012242:	930d      	str	r3, [sp, #52]	@ 0x34
 8012244:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8012248:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801224c:	f0c0 80f5 	bcc.w	801243a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8012250:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8012254:	46ae      	mov	lr, r5
 8012256:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801225a:	f0c0 80dd 	bcc.w	8012418 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801225e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012260:	4013      	ands	r3, r2
 8012262:	d055      	beq.n	8012310 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8012264:	20ff      	movs	r0, #255	@ 0xff
 8012266:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012268:	fb90 f1f1 	sdiv	r1, r0, r1
 801226c:	434b      	muls	r3, r1
 801226e:	2bfe      	cmp	r3, #254	@ 0xfe
 8012270:	dd03      	ble.n	801227a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8012272:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012274:	4281      	cmp	r1, r0
 8012276:	f000 80cd 	beq.w	8012414 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801227a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801227c:	f8bc 4000 	ldrh.w	r4, [ip]
 8012280:	fb11 f303 	smulbb	r3, r1, r3
 8012284:	b29b      	uxth	r3, r3
 8012286:	1c59      	adds	r1, r3, #1
 8012288:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801228c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012290:	b29f      	uxth	r7, r3
 8012292:	43db      	mvns	r3, r3
 8012294:	b2db      	uxtb	r3, r3
 8012296:	9309      	str	r3, [sp, #36]	@ 0x24
 8012298:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801229a:	1220      	asrs	r0, r4, #8
 801229c:	fb13 f907 	smulbb	r9, r3, r7
 80122a0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80122a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122a6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80122aa:	fb00 9003 	mla	r0, r0, r3, r9
 80122ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80122b0:	10e1      	asrs	r1, r4, #3
 80122b2:	fb13 f907 	smulbb	r9, r3, r7
 80122b6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80122ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122bc:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80122c0:	fb01 9103 	mla	r1, r1, r3, r9
 80122c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80122c6:	00e4      	lsls	r4, r4, #3
 80122c8:	fb13 f707 	smulbb	r7, r3, r7
 80122cc:	b2e4      	uxtb	r4, r4
 80122ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122d0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80122d4:	fb04 7403 	mla	r4, r4, r3, r7
 80122d8:	b280      	uxth	r0, r0
 80122da:	b2a4      	uxth	r4, r4
 80122dc:	1c43      	adds	r3, r0, #1
 80122de:	f104 0901 	add.w	r9, r4, #1
 80122e2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80122e6:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80122ea:	b289      	uxth	r1, r1
 80122ec:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80122f0:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80122f4:	ea49 0000 	orr.w	r0, r9, r0
 80122f8:	f101 0901 	add.w	r9, r1, #1
 80122fc:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8012300:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012304:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8012308:	ea40 0009 	orr.w	r0, r0, r9
 801230c:	f8ac 0000 	strh.w	r0, [ip]
 8012310:	4446      	add	r6, r8
 8012312:	b2b6      	uxth	r6, r6
 8012314:	2e07      	cmp	r6, #7
 8012316:	bf81      	itttt	hi
 8012318:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 801231a:	785a      	ldrbhi	r2, [r3, #1]
 801231c:	3301      	addhi	r3, #1
 801231e:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8012320:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012322:	bf9a      	itte	ls
 8012324:	fa42 f208 	asrls.w	r2, r2, r8
 8012328:	b2d2      	uxtbls	r2, r2
 801232a:	2600      	movhi	r6, #0
 801232c:	449c      	add	ip, r3
 801232e:	e792      	b.n	8012256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8012330:	441c      	add	r4, r3
 8012332:	b224      	sxth	r4, r4
 8012334:	e6d5      	b.n	80120e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8012336:	f1ba 0f01 	cmp.w	sl, #1
 801233a:	f47f af0c 	bne.w	8012156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801233e:	f1bb 0f01 	cmp.w	fp, #1
 8012342:	f47f af08 	bne.w	8012156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012346:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 8012408 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801234a:	f8db 0000 	ldr.w	r0, [fp]
 801234e:	6803      	ldr	r3, [r0, #0]
 8012350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012352:	4798      	blx	r3
 8012354:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8012358:	465a      	mov	r2, fp
 801235a:	d006      	beq.n	801236a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801235c:	f1b8 0f04 	cmp.w	r8, #4
 8012360:	d140      	bne.n	80123e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8012362:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012364:	3300      	adds	r3, #0
 8012366:	bf18      	it	ne
 8012368:	2301      	movne	r3, #1
 801236a:	0580      	lsls	r0, r0, #22
 801236c:	d56e      	bpl.n	801244c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801236e:	f1b8 0f08 	cmp.w	r8, #8
 8012372:	d16b      	bne.n	801244c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8012374:	2b00      	cmp	r3, #0
 8012376:	bf0c      	ite	eq
 8012378:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801237c:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8012380:	2d00      	cmp	r5, #0
 8012382:	f47f aee8 	bne.w	8012156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012386:	2e00      	cmp	r6, #0
 8012388:	f47f aee5 	bne.w	8012156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801238c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801238e:	19e3      	adds	r3, r4, r7
 8012390:	4283      	cmp	r3, r0
 8012392:	f73f aee0 	bgt.w	8012156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012398:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801239a:	444b      	add	r3, r9
 801239c:	4283      	cmp	r3, r0
 801239e:	f73f aeda 	bgt.w	8012156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80123a2:	6810      	ldr	r0, [r2, #0]
 80123a4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 80123a8:	6804      	ldr	r4, [r0, #0]
 80123aa:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80123ae:	b2bf      	uxth	r7, r7
 80123b0:	f1b8 0f08 	cmp.w	r8, #8
 80123b4:	f04f 0500 	mov.w	r5, #0
 80123b8:	bf18      	it	ne
 80123ba:	3701      	addne	r7, #1
 80123bc:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80123c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80123c2:	9104      	str	r1, [sp, #16]
 80123c4:	bf18      	it	ne
 80123c6:	f027 0701 	bicne.w	r7, r7, #1
 80123ca:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80123cc:	bf18      	it	ne
 80123ce:	b2bf      	uxthne	r7, r7
 80123d0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80123d4:	e9cd 7900 	strd	r7, r9, [sp]
 80123d8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80123da:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 80123dc:	47a0      	blx	r4
 80123de:	b019      	add	sp, #100	@ 0x64
 80123e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e4:	2300      	movs	r3, #0
 80123e6:	e7c0      	b.n	801236a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80123e8:	2208      	movs	r2, #8
 80123ea:	fb92 f3f8 	sdiv	r3, r2, r8
 80123ee:	1e5a      	subs	r2, r3, #1
 80123f0:	443a      	add	r2, r7
 80123f2:	fb92 f2f3 	sdiv	r2, r2, r3
 80123f6:	fb12 f203 	smulbb	r2, r2, r3
 80123fa:	b292      	uxth	r2, r2
 80123fc:	e6b0      	b.n	8012160 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 80123fe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012400:	e6ec      	b.n	80121dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8012402:	bf00      	nop
 8012404:	2001543c 	.word	0x2001543c
 8012408:	20015444 	.word	0x20015444
 801240c:	2001543e 	.word	0x2001543e
 8012410:	00fff800 	.word	0x00fff800
 8012414:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012416:	e779      	b.n	801230c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8012418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801241a:	b153      	cbz	r3, 8012432 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801241c:	441e      	add	r6, r3
 801241e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012420:	b2b6      	uxth	r6, r6
 8012422:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8012426:	f006 0607 	and.w	r6, r6, #7
 801242a:	781a      	ldrb	r2, [r3, #0]
 801242c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801242e:	4132      	asrs	r2, r6
 8012430:	b2d2      	uxtb	r2, r2
 8012432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012434:	445b      	add	r3, fp
 8012436:	930a      	str	r3, [sp, #40]	@ 0x28
 8012438:	e706      	b.n	8012248 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801243a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1ce      	bne.n	80123de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012440:	4b05      	ldr	r3, [pc, #20]	@ (8012458 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8012442:	6818      	ldr	r0, [r3, #0]
 8012444:	6803      	ldr	r3, [r0, #0]
 8012446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012448:	4798      	blx	r3
 801244a:	e7c8      	b.n	80123de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801244c:	2b00      	cmp	r3, #0
 801244e:	f43f ae82 	beq.w	8012156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012452:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012456:	e793      	b.n	8012380 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8012458:	20015444 	.word	0x20015444

0801245c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801245c:	b538      	push	{r3, r4, r5, lr}
 801245e:	4c0b      	ldr	r4, [pc, #44]	@ (801248c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8012460:	7823      	ldrb	r3, [r4, #0]
 8012462:	f3bf 8f5b 	dmb	ish
 8012466:	07db      	lsls	r3, r3, #31
 8012468:	4605      	mov	r5, r0
 801246a:	d40b      	bmi.n	8012484 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801246c:	4620      	mov	r0, r4
 801246e:	f000 fd43 	bl	8012ef8 <__cxa_guard_acquire>
 8012472:	b138      	cbz	r0, 8012484 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8012474:	4620      	mov	r0, r4
 8012476:	f000 fd4b 	bl	8012f10 <__cxa_guard_release>
 801247a:	4a05      	ldr	r2, [pc, #20]	@ (8012490 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801247c:	4905      	ldr	r1, [pc, #20]	@ (8012494 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801247e:	4806      	ldr	r0, [pc, #24]	@ (8012498 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8012480:	f000 fd33 	bl	8012eea <__aeabi_atexit>
 8012484:	4b04      	ldr	r3, [pc, #16]	@ (8012498 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8012486:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8012488:	bd38      	pop	{r3, r4, r5, pc}
 801248a:	bf00      	nop
 801248c:	200154d0 	.word	0x200154d0
 8012490:	20000000 	.word	0x20000000
 8012494:	08010715 	.word	0x08010715
 8012498:	2000008c 	.word	0x2000008c

0801249c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 801249c:	b570      	push	{r4, r5, r6, lr}
 801249e:	1208      	asrs	r0, r1, #8
 80124a0:	b29e      	uxth	r6, r3
 80124a2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80124a6:	1213      	asrs	r3, r2, #8
 80124a8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80124ac:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80124b0:	fb13 f305 	smulbb	r3, r3, r5
 80124b4:	fb10 f006 	smulbb	r0, r0, r6
 80124b8:	4418      	add	r0, r3
 80124ba:	10cc      	asrs	r4, r1, #3
 80124bc:	10d3      	asrs	r3, r2, #3
 80124be:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80124c2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80124c6:	fb13 f305 	smulbb	r3, r3, r5
 80124ca:	fb14 f406 	smulbb	r4, r4, r6
 80124ce:	00c9      	lsls	r1, r1, #3
 80124d0:	00d2      	lsls	r2, r2, #3
 80124d2:	441c      	add	r4, r3
 80124d4:	b2d2      	uxtb	r2, r2
 80124d6:	b2cb      	uxtb	r3, r1
 80124d8:	fb12 f205 	smulbb	r2, r2, r5
 80124dc:	b280      	uxth	r0, r0
 80124de:	fb13 f306 	smulbb	r3, r3, r6
 80124e2:	4413      	add	r3, r2
 80124e4:	1c42      	adds	r2, r0, #1
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80124ec:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 80124f0:	1c58      	adds	r0, r3, #1
 80124f2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80124f6:	b2a4      	uxth	r4, r4
 80124f8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80124fc:	4310      	orrs	r0, r2
 80124fe:	1c62      	adds	r2, r4, #1
 8012500:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8012504:	0964      	lsrs	r4, r4, #5
 8012506:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801250a:	4320      	orrs	r0, r4
 801250c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012510 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8012510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	b08f      	sub	sp, #60	@ 0x3c
 8012516:	461c      	mov	r4, r3
 8012518:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 801251c:	9004      	str	r0, [sp, #16]
 801251e:	460d      	mov	r5, r1
 8012520:	4616      	mov	r6, r2
 8012522:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012524:	2f00      	cmp	r7, #0
 8012526:	f000 80f6 	beq.w	8012716 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801252a:	6820      	ldr	r0, [r4, #0]
 801252c:	6861      	ldr	r1, [r4, #4]
 801252e:	aa0a      	add	r2, sp, #40	@ 0x28
 8012530:	c203      	stmia	r2!, {r0, r1}
 8012532:	6818      	ldr	r0, [r3, #0]
 8012534:	6859      	ldr	r1, [r3, #4]
 8012536:	aa0c      	add	r2, sp, #48	@ 0x30
 8012538:	c203      	stmia	r2!, {r0, r1}
 801253a:	a80a      	add	r0, sp, #40	@ 0x28
 801253c:	f7fa fbe4 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012540:	4621      	mov	r1, r4
 8012542:	a80c      	add	r0, sp, #48	@ 0x30
 8012544:	f7fa fc08 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012548:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801254c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012550:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8012554:	f002 0301 	and.w	r3, r2, #1
 8012558:	9306      	str	r3, [sp, #24]
 801255a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801255e:	f003 0101 	and.w	r1, r3, #1
 8012562:	9105      	str	r1, [sp, #20]
 8012564:	9805      	ldr	r0, [sp, #20]
 8012566:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801256a:	4403      	add	r3, r0
 801256c:	fb01 2303 	mla	r3, r1, r3, r2
 8012570:	f04f 0802 	mov.w	r8, #2
 8012574:	fb93 f3f8 	sdiv	r3, r3, r8
 8012578:	441d      	add	r5, r3
 801257a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801257e:	441a      	add	r2, r3
 8012580:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8012584:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012588:	4419      	add	r1, r3
 801258a:	4b64      	ldr	r3, [pc, #400]	@ (801271c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 801258c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8012590:	6818      	ldr	r0, [r3, #0]
 8012592:	6803      	ldr	r3, [r0, #0]
 8012594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012596:	4798      	blx	r3
 8012598:	4a61      	ldr	r2, [pc, #388]	@ (8012720 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 801259a:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801259e:	8813      	ldrh	r3, [r2, #0]
 80125a0:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 80125a4:	2fff      	cmp	r7, #255	@ 0xff
 80125a6:	fb03 a404 	mla	r4, r3, r4, sl
 80125aa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80125ae:	f106 0604 	add.w	r6, r6, #4
 80125b2:	4611      	mov	r1, r2
 80125b4:	fb03 fb0b 	mul.w	fp, r3, fp
 80125b8:	d06b      	beq.n	8012692 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 80125ba:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 80125be:	9303      	str	r3, [sp, #12]
 80125c0:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 80125c4:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80125c8:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80125cc:	9b07      	ldr	r3, [sp, #28]
 80125ce:	42a3      	cmp	r3, r4
 80125d0:	f240 809c 	bls.w	801270c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 80125d4:	9b06      	ldr	r3, [sp, #24]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d039      	beq.n	801264e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 80125da:	782b      	ldrb	r3, [r5, #0]
 80125dc:	8822      	ldrh	r2, [r4, #0]
 80125de:	9804      	ldr	r0, [sp, #16]
 80125e0:	f003 030f 	and.w	r3, r3, #15
 80125e4:	f105 0801 	add.w	r8, r5, #1
 80125e8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80125ec:	9b03      	ldr	r3, [sp, #12]
 80125ee:	9300      	str	r3, [sp, #0]
 80125f0:	463b      	mov	r3, r7
 80125f2:	f7ff ff53 	bl	801249c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80125f6:	f824 0b02 	strh.w	r0, [r4], #2
 80125fa:	f109 3bff 	add.w	fp, r9, #4294967295
 80125fe:	f1bb 0f01 	cmp.w	fp, #1
 8012602:	46a2      	mov	sl, r4
 8012604:	f104 0404 	add.w	r4, r4, #4
 8012608:	dd24      	ble.n	8012654 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 801260a:	f898 3000 	ldrb.w	r3, [r8]
 801260e:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8012612:	9804      	ldr	r0, [sp, #16]
 8012614:	091b      	lsrs	r3, r3, #4
 8012616:	f1ab 0b02 	sub.w	fp, fp, #2
 801261a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801261e:	9b03      	ldr	r3, [sp, #12]
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	463b      	mov	r3, r7
 8012624:	f7ff ff3a 	bl	801249c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012628:	f824 0c04 	strh.w	r0, [r4, #-4]
 801262c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012630:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012634:	9804      	ldr	r0, [sp, #16]
 8012636:	f003 030f 	and.w	r3, r3, #15
 801263a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801263e:	9b03      	ldr	r3, [sp, #12]
 8012640:	9300      	str	r3, [sp, #0]
 8012642:	463b      	mov	r3, r7
 8012644:	f7ff ff2a 	bl	801249c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012648:	f824 0c02 	strh.w	r0, [r4, #-2]
 801264c:	e7d7      	b.n	80125fe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 801264e:	46a8      	mov	r8, r5
 8012650:	46cb      	mov	fp, r9
 8012652:	e7d4      	b.n	80125fe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012654:	d10e      	bne.n	8012674 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8012656:	f898 3000 	ldrb.w	r3, [r8]
 801265a:	f8ba 2000 	ldrh.w	r2, [sl]
 801265e:	9804      	ldr	r0, [sp, #16]
 8012660:	091b      	lsrs	r3, r3, #4
 8012662:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012666:	9b03      	ldr	r3, [sp, #12]
 8012668:	9300      	str	r3, [sp, #0]
 801266a:	463b      	mov	r3, r7
 801266c:	f7ff ff16 	bl	801249c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012670:	f82a 0b02 	strh.w	r0, [sl], #2
 8012674:	9b08      	ldr	r3, [sp, #32]
 8012676:	9a05      	ldr	r2, [sp, #20]
 8012678:	881c      	ldrh	r4, [r3, #0]
 801267a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801267e:	eba4 0409 	sub.w	r4, r4, r9
 8012682:	4413      	add	r3, r2
 8012684:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8012688:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801268a:	fb93 f3f2 	sdiv	r3, r3, r2
 801268e:	441d      	add	r5, r3
 8012690:	e79c      	b.n	80125cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8012692:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8012696:	45a3      	cmp	fp, r4
 8012698:	d938      	bls.n	801270c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 801269a:	9b06      	ldr	r3, [sp, #24]
 801269c:	b1f3      	cbz	r3, 80126dc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 801269e:	782b      	ldrb	r3, [r5, #0]
 80126a0:	f003 030f 	and.w	r3, r3, #15
 80126a4:	1c6a      	adds	r2, r5, #1
 80126a6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80126aa:	8023      	strh	r3, [r4, #0]
 80126ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80126b0:	3402      	adds	r4, #2
 80126b2:	2801      	cmp	r0, #1
 80126b4:	4623      	mov	r3, r4
 80126b6:	f104 0404 	add.w	r4, r4, #4
 80126ba:	dd12      	ble.n	80126e2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 80126bc:	7813      	ldrb	r3, [r2, #0]
 80126be:	091b      	lsrs	r3, r3, #4
 80126c0:	3802      	subs	r0, #2
 80126c2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80126c6:	f824 3c04 	strh.w	r3, [r4, #-4]
 80126ca:	f812 3b01 	ldrb.w	r3, [r2], #1
 80126ce:	f003 030f 	and.w	r3, r3, #15
 80126d2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80126d6:	f824 3c02 	strh.w	r3, [r4, #-2]
 80126da:	e7ea      	b.n	80126b2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80126dc:	462a      	mov	r2, r5
 80126de:	4648      	mov	r0, r9
 80126e0:	e7e7      	b.n	80126b2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80126e2:	d106      	bne.n	80126f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 80126e4:	7812      	ldrb	r2, [r2, #0]
 80126e6:	0912      	lsrs	r2, r2, #4
 80126e8:	3302      	adds	r3, #2
 80126ea:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80126ee:	f823 2c02 	strh.w	r2, [r3, #-2]
 80126f2:	880c      	ldrh	r4, [r1, #0]
 80126f4:	9a05      	ldr	r2, [sp, #20]
 80126f6:	eba4 0409 	sub.w	r4, r4, r9
 80126fa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80126fe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012702:	4413      	add	r3, r2
 8012704:	fb93 f3f8 	sdiv	r3, r3, r8
 8012708:	441d      	add	r5, r3
 801270a:	e7c4      	b.n	8012696 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 801270c:	4b03      	ldr	r3, [pc, #12]	@ (801271c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 801270e:	6818      	ldr	r0, [r3, #0]
 8012710:	6803      	ldr	r3, [r0, #0]
 8012712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012714:	4798      	blx	r3
 8012716:	b00f      	add	sp, #60	@ 0x3c
 8012718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801271c:	20015444 	.word	0x20015444
 8012720:	2001543e 	.word	0x2001543e

08012724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8012724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012726:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801272a:	2dff      	cmp	r5, #255	@ 0xff
 801272c:	ea4f 2711 	mov.w	r7, r1, lsr #8
 8012730:	d10c      	bne.n	801274c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012732:	2bff      	cmp	r3, #255	@ 0xff
 8012734:	d10a      	bne.n	801274c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012736:	4b25      	ldr	r3, [pc, #148]	@ (80127cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8012738:	0948      	lsrs	r0, r1, #5
 801273a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801273e:	403b      	ands	r3, r7
 8012740:	4318      	orrs	r0, r3
 8012742:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8012746:	4308      	orrs	r0, r1
 8012748:	b280      	uxth	r0, r0
 801274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801274c:	fb15 f503 	smulbb	r5, r5, r3
 8012750:	b2ab      	uxth	r3, r5
 8012752:	1c5d      	adds	r5, r3, #1
 8012754:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8012758:	1214      	asrs	r4, r2, #8
 801275a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801275e:	fa1f fc85 	uxth.w	ip, r5
 8012762:	10d6      	asrs	r6, r2, #3
 8012764:	00d0      	lsls	r0, r2, #3
 8012766:	43ed      	mvns	r5, r5
 8012768:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801276c:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8012770:	b2eb      	uxtb	r3, r5
 8012772:	b2c0      	uxtb	r0, r0
 8012774:	fb12 f20c 	smulbb	r2, r2, ip
 8012778:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801277c:	fb04 2403 	mla	r4, r4, r3, r2
 8012780:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8012784:	b2c8      	uxtb	r0, r1
 8012786:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801278a:	b2fd      	uxtb	r5, r7
 801278c:	fb10 f00c 	smulbb	r0, r0, ip
 8012790:	b2a4      	uxth	r4, r4
 8012792:	fb02 0003 	mla	r0, r2, r3, r0
 8012796:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801279a:	fb15 f50c 	smulbb	r5, r5, ip
 801279e:	fb06 5503 	mla	r5, r6, r3, r5
 80127a2:	b283      	uxth	r3, r0
 80127a4:	1c60      	adds	r0, r4, #1
 80127a6:	b2ad      	uxth	r5, r5
 80127a8:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80127ac:	1c58      	adds	r0, r3, #1
 80127ae:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80127b2:	1c6b      	adds	r3, r5, #1
 80127b4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80127b8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80127bc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80127c0:	096d      	lsrs	r5, r5, #5
 80127c2:	4320      	orrs	r0, r4
 80127c4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80127c8:	4328      	orrs	r0, r5
 80127ca:	e7be      	b.n	801274a <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80127cc:	00fff800 	.word	0x00fff800

080127d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80127d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d4:	461c      	mov	r4, r3
 80127d6:	b08d      	sub	sp, #52	@ 0x34
 80127d8:	460d      	mov	r5, r1
 80127da:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80127dc:	6861      	ldr	r1, [r4, #4]
 80127de:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 80127e2:	4680      	mov	r8, r0
 80127e4:	6820      	ldr	r0, [r4, #0]
 80127e6:	4616      	mov	r6, r2
 80127e8:	aa08      	add	r2, sp, #32
 80127ea:	c203      	stmia	r2!, {r0, r1}
 80127ec:	6818      	ldr	r0, [r3, #0]
 80127ee:	6859      	ldr	r1, [r3, #4]
 80127f0:	aa0a      	add	r2, sp, #40	@ 0x28
 80127f2:	c203      	stmia	r2!, {r0, r1}
 80127f4:	a808      	add	r0, sp, #32
 80127f6:	f7fa fa87 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80127fa:	4621      	mov	r1, r4
 80127fc:	a80a      	add	r0, sp, #40	@ 0x28
 80127fe:	f7fa faab 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012802:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8012806:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 801280a:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 801280e:	f002 0301 	and.w	r3, r2, #1
 8012812:	9303      	str	r3, [sp, #12]
 8012814:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012818:	f003 0101 	and.w	r1, r3, #1
 801281c:	9102      	str	r1, [sp, #8]
 801281e:	9802      	ldr	r0, [sp, #8]
 8012820:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012824:	4403      	add	r3, r0
 8012826:	fb01 2303 	mla	r3, r1, r3, r2
 801282a:	f04f 0a02 	mov.w	sl, #2
 801282e:	fb93 f3fa 	sdiv	r3, r3, sl
 8012832:	441d      	add	r5, r3
 8012834:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012838:	441a      	add	r2, r3
 801283a:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801283e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8012842:	4a3f      	ldr	r2, [pc, #252]	@ (8012940 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8012844:	9205      	str	r2, [sp, #20]
 8012846:	4419      	add	r1, r3
 8012848:	6810      	ldr	r0, [r2, #0]
 801284a:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 801284e:	6803      	ldr	r3, [r0, #0]
 8012850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012852:	4798      	blx	r3
 8012854:	4b3b      	ldr	r3, [pc, #236]	@ (8012944 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8012856:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 801285a:	8819      	ldrh	r1, [r3, #0]
 801285c:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8012860:	fb01 c404 	mla	r4, r1, r4, ip
 8012864:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012868:	434f      	muls	r7, r1
 801286a:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 801286e:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8012872:	3604      	adds	r6, #4
 8012874:	9204      	str	r2, [sp, #16]
 8012876:	9b04      	ldr	r3, [sp, #16]
 8012878:	429c      	cmp	r4, r3
 801287a:	d258      	bcs.n	801292e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 801287c:	9b03      	ldr	r3, [sp, #12]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d034      	beq.n	80128ec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8012882:	782b      	ldrb	r3, [r5, #0]
 8012884:	f003 030f 	and.w	r3, r3, #15
 8012888:	1c6f      	adds	r7, r5, #1
 801288a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801288e:	0e0b      	lsrs	r3, r1, #24
 8012890:	d006      	beq.n	80128a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8012892:	8822      	ldrh	r2, [r4, #0]
 8012894:	9300      	str	r3, [sp, #0]
 8012896:	4640      	mov	r0, r8
 8012898:	464b      	mov	r3, r9
 801289a:	f7ff ff43 	bl	8012724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801289e:	8020      	strh	r0, [r4, #0]
 80128a0:	3402      	adds	r4, #2
 80128a2:	f10b 3aff 	add.w	sl, fp, #4294967295
 80128a6:	f1ba 0f01 	cmp.w	sl, #1
 80128aa:	dd22      	ble.n	80128f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80128ac:	783b      	ldrb	r3, [r7, #0]
 80128ae:	091b      	lsrs	r3, r3, #4
 80128b0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80128b4:	0e0b      	lsrs	r3, r1, #24
 80128b6:	d006      	beq.n	80128c6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 80128b8:	8822      	ldrh	r2, [r4, #0]
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	4640      	mov	r0, r8
 80128be:	464b      	mov	r3, r9
 80128c0:	f7ff ff30 	bl	8012724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80128c4:	8020      	strh	r0, [r4, #0]
 80128c6:	f817 3b01 	ldrb.w	r3, [r7], #1
 80128ca:	f003 030f 	and.w	r3, r3, #15
 80128ce:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80128d2:	0e0b      	lsrs	r3, r1, #24
 80128d4:	d006      	beq.n	80128e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 80128d6:	8862      	ldrh	r2, [r4, #2]
 80128d8:	9300      	str	r3, [sp, #0]
 80128da:	4640      	mov	r0, r8
 80128dc:	464b      	mov	r3, r9
 80128de:	f7ff ff21 	bl	8012724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80128e2:	8060      	strh	r0, [r4, #2]
 80128e4:	3404      	adds	r4, #4
 80128e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80128ea:	e7dc      	b.n	80128a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 80128ec:	462f      	mov	r7, r5
 80128ee:	46da      	mov	sl, fp
 80128f0:	e7d9      	b.n	80128a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 80128f2:	d10d      	bne.n	8012910 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 80128f4:	783b      	ldrb	r3, [r7, #0]
 80128f6:	091b      	lsrs	r3, r3, #4
 80128f8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80128fc:	0e0b      	lsrs	r3, r1, #24
 80128fe:	d006      	beq.n	801290e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8012900:	8822      	ldrh	r2, [r4, #0]
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	4640      	mov	r0, r8
 8012906:	464b      	mov	r3, r9
 8012908:	f7ff ff0c 	bl	8012724 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801290c:	8020      	strh	r0, [r4, #0]
 801290e:	3402      	adds	r4, #2
 8012910:	9b06      	ldr	r3, [sp, #24]
 8012912:	9a02      	ldr	r2, [sp, #8]
 8012914:	881b      	ldrh	r3, [r3, #0]
 8012916:	eba3 030b 	sub.w	r3, r3, fp
 801291a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801291e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012922:	4413      	add	r3, r2
 8012924:	9a07      	ldr	r2, [sp, #28]
 8012926:	fb93 f3f2 	sdiv	r3, r3, r2
 801292a:	441d      	add	r5, r3
 801292c:	e7a3      	b.n	8012876 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 801292e:	9b05      	ldr	r3, [sp, #20]
 8012930:	6818      	ldr	r0, [r3, #0]
 8012932:	6803      	ldr	r3, [r0, #0]
 8012934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012936:	4798      	blx	r3
 8012938:	b00d      	add	sp, #52	@ 0x34
 801293a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801293e:	bf00      	nop
 8012940:	20015444 	.word	0x20015444
 8012944:	2001543e 	.word	0x2001543e

08012948 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8012948:	b570      	push	{r4, r5, r6, lr}
 801294a:	1214      	asrs	r4, r2, #8
 801294c:	788d      	ldrb	r5, [r1, #2]
 801294e:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8012952:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012956:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801295a:	fb15 f503 	smulbb	r5, r5, r3
 801295e:	fb04 5506 	mla	r5, r4, r6, r5
 8012962:	10d0      	asrs	r0, r2, #3
 8012964:	784c      	ldrb	r4, [r1, #1]
 8012966:	7809      	ldrb	r1, [r1, #0]
 8012968:	00d2      	lsls	r2, r2, #3
 801296a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801296e:	b2d2      	uxtb	r2, r2
 8012970:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8012974:	fb14 f403 	smulbb	r4, r4, r3
 8012978:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801297c:	fb11 f303 	smulbb	r3, r1, r3
 8012980:	fb00 4406 	mla	r4, r0, r6, r4
 8012984:	fb02 3306 	mla	r3, r2, r6, r3
 8012988:	b2ad      	uxth	r5, r5
 801298a:	b29b      	uxth	r3, r3
 801298c:	b2a4      	uxth	r4, r4
 801298e:	1c68      	adds	r0, r5, #1
 8012990:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8012994:	1c62      	adds	r2, r4, #1
 8012996:	1c58      	adds	r0, r3, #1
 8012998:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801299c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80129a0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80129a4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80129a8:	0964      	lsrs	r4, r4, #5
 80129aa:	4328      	orrs	r0, r5
 80129ac:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80129b0:	4320      	orrs	r0, r4
 80129b2:	bd70      	pop	{r4, r5, r6, pc}

080129b4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80129b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b8:	b08f      	sub	sp, #60	@ 0x3c
 80129ba:	461c      	mov	r4, r3
 80129bc:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80129c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80129c2:	4682      	mov	sl, r0
 80129c4:	460e      	mov	r6, r1
 80129c6:	4615      	mov	r5, r2
 80129c8:	2f00      	cmp	r7, #0
 80129ca:	f000 8142 	beq.w	8012c52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 80129ce:	6820      	ldr	r0, [r4, #0]
 80129d0:	6861      	ldr	r1, [r4, #4]
 80129d2:	aa0a      	add	r2, sp, #40	@ 0x28
 80129d4:	c203      	stmia	r2!, {r0, r1}
 80129d6:	6818      	ldr	r0, [r3, #0]
 80129d8:	6859      	ldr	r1, [r3, #4]
 80129da:	aa0c      	add	r2, sp, #48	@ 0x30
 80129dc:	c203      	stmia	r2!, {r0, r1}
 80129de:	a80a      	add	r0, sp, #40	@ 0x28
 80129e0:	f7fa f992 	bl	800cd08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80129e4:	4621      	mov	r1, r4
 80129e6:	a80c      	add	r0, sp, #48	@ 0x30
 80129e8:	f7fa f9b6 	bl	800cd58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80129ec:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80129f0:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80129f4:	f002 0301 	and.w	r3, r2, #1
 80129f8:	9306      	str	r3, [sp, #24]
 80129fa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80129fe:	f003 0101 	and.w	r1, r3, #1
 8012a02:	9105      	str	r1, [sp, #20]
 8012a04:	9805      	ldr	r0, [sp, #20]
 8012a06:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8012a0a:	4403      	add	r3, r0
 8012a0c:	fb01 2303 	mla	r3, r1, r3, r2
 8012a10:	f04f 0802 	mov.w	r8, #2
 8012a14:	fb93 f3f8 	sdiv	r3, r3, r8
 8012a18:	441e      	add	r6, r3
 8012a1a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8012a1e:	441a      	add	r2, r3
 8012a20:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8012a24:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012a28:	4419      	add	r1, r3
 8012a2a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8012a2e:	9303      	str	r3, [sp, #12]
 8012a30:	4b89      	ldr	r3, [pc, #548]	@ (8012c58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8012a32:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8012a36:	6818      	ldr	r0, [r3, #0]
 8012a38:	6803      	ldr	r3, [r0, #0]
 8012a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a3c:	4798      	blx	r3
 8012a3e:	4a87      	ldr	r2, [pc, #540]	@ (8012c5c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8012a40:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8012a44:	8813      	ldrh	r3, [r2, #0]
 8012a46:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8012a4a:	2fff      	cmp	r7, #255	@ 0xff
 8012a4c:	fb03 9404 	mla	r4, r3, r4, r9
 8012a50:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012a54:	f105 0504 	add.w	r5, r5, #4
 8012a58:	4694      	mov	ip, r2
 8012a5a:	fb03 f30b 	mul.w	r3, r3, fp
 8012a5e:	d071      	beq.n	8012b44 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8012a60:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012a64:	43f9      	mvns	r1, r7
 8012a66:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8012a6a:	b2c9      	uxtb	r1, r1
 8012a6c:	9104      	str	r1, [sp, #16]
 8012a6e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012a72:	9b07      	ldr	r3, [sp, #28]
 8012a74:	42a3      	cmp	r3, r4
 8012a76:	f240 80e7 	bls.w	8012c48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8012a7a:	9b06      	ldr	r3, [sp, #24]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d03d      	beq.n	8012afc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8012a80:	7831      	ldrb	r1, [r6, #0]
 8012a82:	9b04      	ldr	r3, [sp, #16]
 8012a84:	8822      	ldrh	r2, [r4, #0]
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	f001 010f 	and.w	r1, r1, #15
 8012a8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012a90:	463b      	mov	r3, r7
 8012a92:	4429      	add	r1, r5
 8012a94:	4650      	mov	r0, sl
 8012a96:	f7ff ff57 	bl	8012948 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012a9a:	9b03      	ldr	r3, [sp, #12]
 8012a9c:	f824 0b02 	strh.w	r0, [r4], #2
 8012aa0:	f106 0801 	add.w	r8, r6, #1
 8012aa4:	f103 3bff 	add.w	fp, r3, #4294967295
 8012aa8:	f1bb 0f01 	cmp.w	fp, #1
 8012aac:	46a1      	mov	r9, r4
 8012aae:	f104 0404 	add.w	r4, r4, #4
 8012ab2:	dd27      	ble.n	8012b04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8012ab4:	f898 1000 	ldrb.w	r1, [r8]
 8012ab8:	9b04      	ldr	r3, [sp, #16]
 8012aba:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	0909      	lsrs	r1, r1, #4
 8012ac2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012ac6:	463b      	mov	r3, r7
 8012ac8:	4429      	add	r1, r5
 8012aca:	4650      	mov	r0, sl
 8012acc:	f7ff ff3c 	bl	8012948 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012ad0:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012ad4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012ad8:	9b04      	ldr	r3, [sp, #16]
 8012ada:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012ade:	9300      	str	r3, [sp, #0]
 8012ae0:	f001 010f 	and.w	r1, r1, #15
 8012ae4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012ae8:	463b      	mov	r3, r7
 8012aea:	4429      	add	r1, r5
 8012aec:	4650      	mov	r0, sl
 8012aee:	f7ff ff2b 	bl	8012948 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012af2:	f1ab 0b02 	sub.w	fp, fp, #2
 8012af6:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012afa:	e7d5      	b.n	8012aa8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012afc:	46b0      	mov	r8, r6
 8012afe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012b02:	e7d1      	b.n	8012aa8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012b04:	d10f      	bne.n	8012b26 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8012b06:	f898 1000 	ldrb.w	r1, [r8]
 8012b0a:	9b04      	ldr	r3, [sp, #16]
 8012b0c:	f8b9 2000 	ldrh.w	r2, [r9]
 8012b10:	9300      	str	r3, [sp, #0]
 8012b12:	0909      	lsrs	r1, r1, #4
 8012b14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012b18:	463b      	mov	r3, r7
 8012b1a:	4429      	add	r1, r5
 8012b1c:	4650      	mov	r0, sl
 8012b1e:	f7ff ff13 	bl	8012948 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012b22:	f829 0b02 	strh.w	r0, [r9], #2
 8012b26:	9b08      	ldr	r3, [sp, #32]
 8012b28:	9a05      	ldr	r2, [sp, #20]
 8012b2a:	881c      	ldrh	r4, [r3, #0]
 8012b2c:	9b03      	ldr	r3, [sp, #12]
 8012b2e:	1ae4      	subs	r4, r4, r3
 8012b30:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012b34:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8012b38:	4413      	add	r3, r2
 8012b3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b40:	441e      	add	r6, r3
 8012b42:	e796      	b.n	8012a72 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8012b44:	4f46      	ldr	r7, [pc, #280]	@ (8012c60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8012b46:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012b4a:	42a3      	cmp	r3, r4
 8012b4c:	d97c      	bls.n	8012c48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8012b4e:	9a06      	ldr	r2, [sp, #24]
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	d054      	beq.n	8012bfe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8012b54:	7830      	ldrb	r0, [r6, #0]
 8012b56:	f000 000f 	and.w	r0, r0, #15
 8012b5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012b5e:	eb05 0e00 	add.w	lr, r5, r0
 8012b62:	5c28      	ldrb	r0, [r5, r0]
 8012b64:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8012b68:	f89e e001 	ldrb.w	lr, [lr, #1]
 8012b6c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012b70:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8012b74:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8012b78:	ea42 020e 	orr.w	r2, r2, lr
 8012b7c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8012b80:	f824 2b02 	strh.w	r2, [r4], #2
 8012b84:	9a03      	ldr	r2, [sp, #12]
 8012b86:	1c71      	adds	r1, r6, #1
 8012b88:	f102 3eff 	add.w	lr, r2, #4294967295
 8012b8c:	f1be 0f01 	cmp.w	lr, #1
 8012b90:	4620      	mov	r0, r4
 8012b92:	f104 0404 	add.w	r4, r4, #4
 8012b96:	dd36      	ble.n	8012c06 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8012b98:	7808      	ldrb	r0, [r1, #0]
 8012b9a:	0900      	lsrs	r0, r0, #4
 8012b9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012ba0:	eb05 0a00 	add.w	sl, r5, r0
 8012ba4:	f1ae 0e02 	sub.w	lr, lr, #2
 8012ba8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8012bac:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012bb0:	00d2      	lsls	r2, r2, #3
 8012bb2:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8012bb6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012bba:	ea49 0202 	orr.w	r2, r9, r2
 8012bbe:	f815 9000 	ldrb.w	r9, [r5, r0]
 8012bc2:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8012bc6:	f824 2c04 	strh.w	r2, [r4, #-4]
 8012bca:	f811 0b01 	ldrb.w	r0, [r1], #1
 8012bce:	f000 000f 	and.w	r0, r0, #15
 8012bd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012bd6:	eb05 0a00 	add.w	sl, r5, r0
 8012bda:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8012bde:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012be2:	00d2      	lsls	r2, r2, #3
 8012be4:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8012be8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012bec:	ea49 0202 	orr.w	r2, r9, r2
 8012bf0:	f815 9000 	ldrb.w	r9, [r5, r0]
 8012bf4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8012bf8:	f824 2c02 	strh.w	r2, [r4, #-2]
 8012bfc:	e7c6      	b.n	8012b8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8012bfe:	4631      	mov	r1, r6
 8012c00:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8012c04:	e7c2      	b.n	8012b8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8012c06:	d111      	bne.n	8012c2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8012c08:	7809      	ldrb	r1, [r1, #0]
 8012c0a:	0909      	lsrs	r1, r1, #4
 8012c0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012c10:	186c      	adds	r4, r5, r1
 8012c12:	5c69      	ldrb	r1, [r5, r1]
 8012c14:	78a2      	ldrb	r2, [r4, #2]
 8012c16:	7864      	ldrb	r4, [r4, #1]
 8012c18:	00e4      	lsls	r4, r4, #3
 8012c1a:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8012c1e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8012c22:	4322      	orrs	r2, r4
 8012c24:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8012c28:	f820 2b02 	strh.w	r2, [r0], #2
 8012c2c:	9a03      	ldr	r2, [sp, #12]
 8012c2e:	f8bc 4000 	ldrh.w	r4, [ip]
 8012c32:	9905      	ldr	r1, [sp, #20]
 8012c34:	1aa4      	subs	r4, r4, r2
 8012c36:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8012c3a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012c3e:	440a      	add	r2, r1
 8012c40:	fb92 f2f8 	sdiv	r2, r2, r8
 8012c44:	4416      	add	r6, r2
 8012c46:	e780      	b.n	8012b4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8012c48:	4b03      	ldr	r3, [pc, #12]	@ (8012c58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8012c4a:	6818      	ldr	r0, [r3, #0]
 8012c4c:	6803      	ldr	r3, [r0, #0]
 8012c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c50:	4798      	blx	r3
 8012c52:	b00f      	add	sp, #60	@ 0x3c
 8012c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c58:	20015444 	.word	0x20015444
 8012c5c:	2001543e 	.word	0x2001543e
 8012c60:	fffff800 	.word	0xfffff800

08012c64 <CRC_Lock>:
 8012c64:	b530      	push	{r4, r5, lr}
 8012c66:	4a2d      	ldr	r2, [pc, #180]	@ (8012d1c <CRC_Lock+0xb8>)
 8012c68:	6813      	ldr	r3, [r2, #0]
 8012c6a:	f023 0301 	bic.w	r3, r3, #1
 8012c6e:	6013      	str	r3, [r2, #0]
 8012c70:	4b2b      	ldr	r3, [pc, #172]	@ (8012d20 <CRC_Lock+0xbc>)
 8012c72:	681c      	ldr	r4, [r3, #0]
 8012c74:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8012c78:	4014      	ands	r4, r2
 8012c7a:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8012c7e:	42ac      	cmp	r4, r5
 8012c80:	d005      	beq.n	8012c8e <CRC_Lock+0x2a>
 8012c82:	681c      	ldr	r4, [r3, #0]
 8012c84:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8012c88:	4014      	ands	r4, r2
 8012c8a:	42ac      	cmp	r4, r5
 8012c8c:	d125      	bne.n	8012cda <CRC_Lock+0x76>
 8012c8e:	4b25      	ldr	r3, [pc, #148]	@ (8012d24 <CRC_Lock+0xc0>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d139      	bne.n	8012d0a <CRC_Lock+0xa6>
 8012c96:	4b24      	ldr	r3, [pc, #144]	@ (8012d28 <CRC_Lock+0xc4>)
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8012c9e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8012ca2:	d00d      	beq.n	8012cc0 <CRC_Lock+0x5c>
 8012ca4:	681a      	ldr	r2, [r3, #0]
 8012ca6:	f240 4483 	movw	r4, #1155	@ 0x483
 8012caa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8012cae:	42a2      	cmp	r2, r4
 8012cb0:	d006      	beq.n	8012cc0 <CRC_Lock+0x5c>
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f240 4285 	movw	r2, #1157	@ 0x485
 8012cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d124      	bne.n	8012d0a <CRC_Lock+0xa6>
 8012cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8012d2c <CRC_Lock+0xc8>)
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	2a00      	cmp	r2, #0
 8012cca:	d1fc      	bne.n	8012cc6 <CRC_Lock+0x62>
 8012ccc:	4b18      	ldr	r3, [pc, #96]	@ (8012d30 <CRC_Lock+0xcc>)
 8012cce:	6018      	str	r0, [r3, #0]
 8012cd0:	6818      	ldr	r0, [r3, #0]
 8012cd2:	1a43      	subs	r3, r0, r1
 8012cd4:	4258      	negs	r0, r3
 8012cd6:	4158      	adcs	r0, r3
 8012cd8:	e00e      	b.n	8012cf8 <CRC_Lock+0x94>
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4013      	ands	r3, r2
 8012cde:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8012ce2:	4293      	cmp	r3, r2
 8012ce4:	d111      	bne.n	8012d0a <CRC_Lock+0xa6>
 8012ce6:	4b13      	ldr	r3, [pc, #76]	@ (8012d34 <CRC_Lock+0xd0>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	f240 4286 	movw	r2, #1158	@ 0x486
 8012cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012cf2:	4293      	cmp	r3, r2
 8012cf4:	d001      	beq.n	8012cfa <CRC_Lock+0x96>
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	bd30      	pop	{r4, r5, pc}
 8012cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8012d38 <CRC_Lock+0xd4>)
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	601a      	str	r2, [r3, #0]
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	2a00      	cmp	r2, #0
 8012d04:	d1fc      	bne.n	8012d00 <CRC_Lock+0x9c>
 8012d06:	4b0d      	ldr	r3, [pc, #52]	@ (8012d3c <CRC_Lock+0xd8>)
 8012d08:	e7e1      	b.n	8012cce <CRC_Lock+0x6a>
 8012d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8012d40 <CRC_Lock+0xdc>)
 8012d0c:	2201      	movs	r2, #1
 8012d0e:	601a      	str	r2, [r3, #0]
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	2a00      	cmp	r2, #0
 8012d14:	d1fc      	bne.n	8012d10 <CRC_Lock+0xac>
 8012d16:	4b0b      	ldr	r3, [pc, #44]	@ (8012d44 <CRC_Lock+0xe0>)
 8012d18:	e7d9      	b.n	8012cce <CRC_Lock+0x6a>
 8012d1a:	bf00      	nop
 8012d1c:	e0002000 	.word	0xe0002000
 8012d20:	e000ed00 	.word	0xe000ed00
 8012d24:	e0042000 	.word	0xe0042000
 8012d28:	5c001000 	.word	0x5c001000
 8012d2c:	58024c08 	.word	0x58024c08
 8012d30:	58024c00 	.word	0x58024c00
 8012d34:	46008ff0 	.word	0x46008ff0
 8012d38:	46024c08 	.word	0x46024c08
 8012d3c:	46024c00 	.word	0x46024c00
 8012d40:	40023008 	.word	0x40023008
 8012d44:	40023000 	.word	0x40023000

08012d48 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8012d48:	6101      	str	r1, [r0, #16]
 8012d4a:	4770      	bx	lr

08012d4c <_ZN8touchgfx8Gestures4tickEv>:
 8012d4c:	7b83      	ldrb	r3, [r0, #14]
 8012d4e:	b14b      	cbz	r3, 8012d64 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8012d50:	8903      	ldrh	r3, [r0, #8]
 8012d52:	3301      	adds	r3, #1
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	2b07      	cmp	r3, #7
 8012d58:	8103      	strh	r3, [r0, #8]
 8012d5a:	bf81      	itttt	hi
 8012d5c:	2300      	movhi	r3, #0
 8012d5e:	8143      	strhhi	r3, [r0, #10]
 8012d60:	8183      	strhhi	r3, [r0, #12]
 8012d62:	7383      	strbhi	r3, [r0, #14]
 8012d64:	4770      	bx	lr
	...

08012d68 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8012d68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012d6c:	4698      	mov	r8, r3
 8012d6e:	8883      	ldrh	r3, [r0, #4]
 8012d70:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012d74:	eba8 0303 	sub.w	r3, r8, r3
 8012d78:	b21b      	sxth	r3, r3
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	4617      	mov	r7, r2
 8012d80:	4a18      	ldr	r2, [pc, #96]	@ (8012de4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8012d82:	9200      	str	r2, [sp, #0]
 8012d84:	bfb8      	it	lt
 8012d86:	425b      	neglt	r3, r3
 8012d88:	8aa2      	ldrh	r2, [r4, #20]
 8012d8a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8012d8e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8012d92:	b21b      	sxth	r3, r3
 8012d94:	460e      	mov	r6, r1
 8012d96:	4293      	cmp	r3, r2
 8012d98:	88c1      	ldrh	r1, [r0, #6]
 8012d9a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012d9e:	f04f 0000 	mov.w	r0, #0
 8012da2:	f88d 0004 	strb.w	r0, [sp, #4]
 8012da6:	f8ad 500c 	strh.w	r5, [sp, #12]
 8012daa:	dc07      	bgt.n	8012dbc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8012dac:	1a69      	subs	r1, r5, r1
 8012dae:	b209      	sxth	r1, r1
 8012db0:	2900      	cmp	r1, #0
 8012db2:	bfb8      	it	lt
 8012db4:	4249      	neglt	r1, r1
 8012db6:	b209      	sxth	r1, r1
 8012db8:	428a      	cmp	r2, r1
 8012dba:	da10      	bge.n	8012dde <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8012dbc:	6920      	ldr	r0, [r4, #16]
 8012dbe:	6803      	ldr	r3, [r0, #0]
 8012dc0:	4669      	mov	r1, sp
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	4798      	blx	r3
 8012dc6:	eba8 0606 	sub.w	r6, r8, r6
 8012dca:	2300      	movs	r3, #0
 8012dcc:	1bef      	subs	r7, r5, r7
 8012dce:	2001      	movs	r0, #1
 8012dd0:	8123      	strh	r3, [r4, #8]
 8012dd2:	8166      	strh	r6, [r4, #10]
 8012dd4:	81a7      	strh	r7, [r4, #12]
 8012dd6:	f8a4 8004 	strh.w	r8, [r4, #4]
 8012dda:	80e5      	strh	r5, [r4, #6]
 8012ddc:	73a0      	strb	r0, [r4, #14]
 8012dde:	b004      	add	sp, #16
 8012de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de4:	08015e98 	.word	0x08015e98

08012de8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8012de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dea:	461e      	mov	r6, r3
 8012dec:	1e4b      	subs	r3, r1, #1
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	b085      	sub	sp, #20
 8012df2:	4604      	mov	r4, r0
 8012df4:	460d      	mov	r5, r1
 8012df6:	4617      	mov	r7, r2
 8012df8:	d84b      	bhi.n	8012e92 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8012dfa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012dfe:	1cd3      	adds	r3, r2, #3
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	2b06      	cmp	r3, #6
 8012e04:	d916      	bls.n	8012e34 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8012e06:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8012ea8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8012e0a:	f8cd c004 	str.w	ip, [sp, #4]
 8012e0e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012e12:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012e16:	6900      	ldr	r0, [r0, #16]
 8012e18:	f8ad 100c 	strh.w	r1, [sp, #12]
 8012e1c:	f04f 0c00 	mov.w	ip, #0
 8012e20:	f88d c008 	strb.w	ip, [sp, #8]
 8012e24:	f8ad 200a 	strh.w	r2, [sp, #10]
 8012e28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012e2c:	6803      	ldr	r3, [r0, #0]
 8012e2e:	a901      	add	r1, sp, #4
 8012e30:	689b      	ldr	r3, [r3, #8]
 8012e32:	4798      	blx	r3
 8012e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e38:	1cd3      	adds	r3, r2, #3
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	2b06      	cmp	r3, #6
 8012e3e:	d916      	bls.n	8012e6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8012e40:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8012ea8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8012e44:	f8cd c004 	str.w	ip, [sp, #4]
 8012e48:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012e4c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012e50:	6920      	ldr	r0, [r4, #16]
 8012e52:	f8ad 100c 	strh.w	r1, [sp, #12]
 8012e56:	f04f 0c01 	mov.w	ip, #1
 8012e5a:	f88d c008 	strb.w	ip, [sp, #8]
 8012e5e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8012e62:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012e66:	6803      	ldr	r3, [r0, #0]
 8012e68:	a901      	add	r1, sp, #4
 8012e6a:	689b      	ldr	r3, [r3, #8]
 8012e6c:	4798      	blx	r3
 8012e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ea4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8012e70:	9301      	str	r3, [sp, #4]
 8012e72:	6920      	ldr	r0, [r4, #16]
 8012e74:	f88d 5008 	strb.w	r5, [sp, #8]
 8012e78:	2300      	movs	r3, #0
 8012e7a:	f8ad 700a 	strh.w	r7, [sp, #10]
 8012e7e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8012e82:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012e86:	6803      	ldr	r3, [r0, #0]
 8012e88:	a901      	add	r1, sp, #4
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	4798      	blx	r3
 8012e8e:	b005      	add	sp, #20
 8012e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e92:	2900      	cmp	r1, #0
 8012e94:	d1eb      	bne.n	8012e6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8012e96:	80a2      	strh	r2, [r4, #4]
 8012e98:	80c6      	strh	r6, [r0, #6]
 8012e9a:	60a1      	str	r1, [r4, #8]
 8012e9c:	81a1      	strh	r1, [r4, #12]
 8012e9e:	73a1      	strb	r1, [r4, #14]
 8012ea0:	e7e5      	b.n	8012e6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8012ea2:	bf00      	nop
 8012ea4:	08015e84 	.word	0x08015e84
 8012ea8:	08015eac 	.word	0x08015eac

08012eac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8012eac:	b570      	push	{r4, r5, r6, lr}
 8012eae:	790b      	ldrb	r3, [r1, #4]
 8012eb0:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	bf0c      	ite	eq
 8012eb8:	2301      	moveq	r3, #1
 8012eba:	2300      	movne	r3, #0
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	460e      	mov	r6, r1
 8012ec0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8012ec4:	d109      	bne.n	8012eda <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8012ec6:	b14d      	cbz	r5, 8012edc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8012ec8:	7933      	ldrb	r3, [r6, #4]
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	d10c      	bne.n	8012ee8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012ece:	6823      	ldr	r3, [r4, #0]
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ed8:	4718      	bx	r3
 8012eda:	b12d      	cbz	r5, 8012ee8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012edc:	6823      	ldr	r3, [r4, #0]
 8012ede:	4620      	mov	r0, r4
 8012ee0:	695b      	ldr	r3, [r3, #20]
 8012ee2:	4798      	blx	r3
 8012ee4:	2d00      	cmp	r5, #0
 8012ee6:	d1ef      	bne.n	8012ec8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8012ee8:	bd70      	pop	{r4, r5, r6, pc}

08012eea <__aeabi_atexit>:
 8012eea:	460b      	mov	r3, r1
 8012eec:	4601      	mov	r1, r0
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f000 b910 	b.w	8013114 <__cxa_atexit>

08012ef4 <_ZdlPvj>:
 8012ef4:	f000 b812 	b.w	8012f1c <_ZdlPv>

08012ef8 <__cxa_guard_acquire>:
 8012ef8:	6802      	ldr	r2, [r0, #0]
 8012efa:	07d2      	lsls	r2, r2, #31
 8012efc:	4603      	mov	r3, r0
 8012efe:	d405      	bmi.n	8012f0c <__cxa_guard_acquire+0x14>
 8012f00:	7842      	ldrb	r2, [r0, #1]
 8012f02:	b102      	cbz	r2, 8012f06 <__cxa_guard_acquire+0xe>
 8012f04:	deff      	udf	#255	@ 0xff
 8012f06:	2001      	movs	r0, #1
 8012f08:	7058      	strb	r0, [r3, #1]
 8012f0a:	4770      	bx	lr
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	4770      	bx	lr

08012f10 <__cxa_guard_release>:
 8012f10:	2301      	movs	r3, #1
 8012f12:	6003      	str	r3, [r0, #0]
 8012f14:	4770      	bx	lr

08012f16 <__cxa_pure_virtual>:
 8012f16:	b508      	push	{r3, lr}
 8012f18:	f000 f80e 	bl	8012f38 <_ZSt9terminatev>

08012f1c <_ZdlPv>:
 8012f1c:	f000 b844 	b.w	8012fa8 <free>

08012f20 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012f20:	b508      	push	{r3, lr}
 8012f22:	4780      	blx	r0
 8012f24:	f000 f80d 	bl	8012f42 <abort>

08012f28 <_ZSt13get_terminatev>:
 8012f28:	4b02      	ldr	r3, [pc, #8]	@ (8012f34 <_ZSt13get_terminatev+0xc>)
 8012f2a:	6818      	ldr	r0, [r3, #0]
 8012f2c:	f3bf 8f5b 	dmb	ish
 8012f30:	4770      	bx	lr
 8012f32:	bf00      	nop
 8012f34:	20000090 	.word	0x20000090

08012f38 <_ZSt9terminatev>:
 8012f38:	b508      	push	{r3, lr}
 8012f3a:	f7ff fff5 	bl	8012f28 <_ZSt13get_terminatev>
 8012f3e:	f7ff ffef 	bl	8012f20 <_ZN10__cxxabiv111__terminateEPFvvE>

08012f42 <abort>:
 8012f42:	b508      	push	{r3, lr}
 8012f44:	2006      	movs	r0, #6
 8012f46:	f000 fa3b 	bl	80133c0 <raise>
 8012f4a:	2001      	movs	r0, #1
 8012f4c:	f7ee fd24 	bl	8001998 <_exit>

08012f50 <__assert_func>:
 8012f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f52:	4614      	mov	r4, r2
 8012f54:	461a      	mov	r2, r3
 8012f56:	4b09      	ldr	r3, [pc, #36]	@ (8012f7c <__assert_func+0x2c>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4605      	mov	r5, r0
 8012f5c:	68d8      	ldr	r0, [r3, #12]
 8012f5e:	b14c      	cbz	r4, 8012f74 <__assert_func+0x24>
 8012f60:	4b07      	ldr	r3, [pc, #28]	@ (8012f80 <__assert_func+0x30>)
 8012f62:	9100      	str	r1, [sp, #0]
 8012f64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f68:	4906      	ldr	r1, [pc, #24]	@ (8012f84 <__assert_func+0x34>)
 8012f6a:	462b      	mov	r3, r5
 8012f6c:	f000 f984 	bl	8013278 <fiprintf>
 8012f70:	f7ff ffe7 	bl	8012f42 <abort>
 8012f74:	4b04      	ldr	r3, [pc, #16]	@ (8012f88 <__assert_func+0x38>)
 8012f76:	461c      	mov	r4, r3
 8012f78:	e7f3      	b.n	8012f62 <__assert_func+0x12>
 8012f7a:	bf00      	nop
 8012f7c:	200000a0 	.word	0x200000a0
 8012f80:	08014dce 	.word	0x08014dce
 8012f84:	08014ddb 	.word	0x08014ddb
 8012f88:	08014e09 	.word	0x08014e09

08012f8c <atexit>:
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	4601      	mov	r1, r0
 8012f90:	461a      	mov	r2, r3
 8012f92:	4618      	mov	r0, r3
 8012f94:	f000 bac2 	b.w	801351c <__register_exitproc>

08012f98 <malloc>:
 8012f98:	4b02      	ldr	r3, [pc, #8]	@ (8012fa4 <malloc+0xc>)
 8012f9a:	4601      	mov	r1, r0
 8012f9c:	6818      	ldr	r0, [r3, #0]
 8012f9e:	f000 b82d 	b.w	8012ffc <_malloc_r>
 8012fa2:	bf00      	nop
 8012fa4:	200000a0 	.word	0x200000a0

08012fa8 <free>:
 8012fa8:	4b02      	ldr	r3, [pc, #8]	@ (8012fb4 <free+0xc>)
 8012faa:	4601      	mov	r1, r0
 8012fac:	6818      	ldr	r0, [r3, #0]
 8012fae:	f000 bb11 	b.w	80135d4 <_free_r>
 8012fb2:	bf00      	nop
 8012fb4:	200000a0 	.word	0x200000a0

08012fb8 <sbrk_aligned>:
 8012fb8:	b570      	push	{r4, r5, r6, lr}
 8012fba:	4e0f      	ldr	r6, [pc, #60]	@ (8012ff8 <sbrk_aligned+0x40>)
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	6831      	ldr	r1, [r6, #0]
 8012fc0:	4605      	mov	r5, r0
 8012fc2:	b911      	cbnz	r1, 8012fca <sbrk_aligned+0x12>
 8012fc4:	f000 fa4c 	bl	8013460 <_sbrk_r>
 8012fc8:	6030      	str	r0, [r6, #0]
 8012fca:	4621      	mov	r1, r4
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f000 fa47 	bl	8013460 <_sbrk_r>
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	d103      	bne.n	8012fde <sbrk_aligned+0x26>
 8012fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8012fda:	4620      	mov	r0, r4
 8012fdc:	bd70      	pop	{r4, r5, r6, pc}
 8012fde:	1cc4      	adds	r4, r0, #3
 8012fe0:	f024 0403 	bic.w	r4, r4, #3
 8012fe4:	42a0      	cmp	r0, r4
 8012fe6:	d0f8      	beq.n	8012fda <sbrk_aligned+0x22>
 8012fe8:	1a21      	subs	r1, r4, r0
 8012fea:	4628      	mov	r0, r5
 8012fec:	f000 fa38 	bl	8013460 <_sbrk_r>
 8012ff0:	3001      	adds	r0, #1
 8012ff2:	d1f2      	bne.n	8012fda <sbrk_aligned+0x22>
 8012ff4:	e7ef      	b.n	8012fd6 <sbrk_aligned+0x1e>
 8012ff6:	bf00      	nop
 8012ff8:	200154d4 	.word	0x200154d4

08012ffc <_malloc_r>:
 8012ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013000:	1ccd      	adds	r5, r1, #3
 8013002:	f025 0503 	bic.w	r5, r5, #3
 8013006:	3508      	adds	r5, #8
 8013008:	2d0c      	cmp	r5, #12
 801300a:	bf38      	it	cc
 801300c:	250c      	movcc	r5, #12
 801300e:	2d00      	cmp	r5, #0
 8013010:	4606      	mov	r6, r0
 8013012:	db01      	blt.n	8013018 <_malloc_r+0x1c>
 8013014:	42a9      	cmp	r1, r5
 8013016:	d904      	bls.n	8013022 <_malloc_r+0x26>
 8013018:	230c      	movs	r3, #12
 801301a:	6033      	str	r3, [r6, #0]
 801301c:	2000      	movs	r0, #0
 801301e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80130f8 <_malloc_r+0xfc>
 8013026:	f000 f869 	bl	80130fc <__malloc_lock>
 801302a:	f8d8 3000 	ldr.w	r3, [r8]
 801302e:	461c      	mov	r4, r3
 8013030:	bb44      	cbnz	r4, 8013084 <_malloc_r+0x88>
 8013032:	4629      	mov	r1, r5
 8013034:	4630      	mov	r0, r6
 8013036:	f7ff ffbf 	bl	8012fb8 <sbrk_aligned>
 801303a:	1c43      	adds	r3, r0, #1
 801303c:	4604      	mov	r4, r0
 801303e:	d158      	bne.n	80130f2 <_malloc_r+0xf6>
 8013040:	f8d8 4000 	ldr.w	r4, [r8]
 8013044:	4627      	mov	r7, r4
 8013046:	2f00      	cmp	r7, #0
 8013048:	d143      	bne.n	80130d2 <_malloc_r+0xd6>
 801304a:	2c00      	cmp	r4, #0
 801304c:	d04b      	beq.n	80130e6 <_malloc_r+0xea>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	4639      	mov	r1, r7
 8013052:	4630      	mov	r0, r6
 8013054:	eb04 0903 	add.w	r9, r4, r3
 8013058:	f000 fa02 	bl	8013460 <_sbrk_r>
 801305c:	4581      	cmp	r9, r0
 801305e:	d142      	bne.n	80130e6 <_malloc_r+0xea>
 8013060:	6821      	ldr	r1, [r4, #0]
 8013062:	1a6d      	subs	r5, r5, r1
 8013064:	4629      	mov	r1, r5
 8013066:	4630      	mov	r0, r6
 8013068:	f7ff ffa6 	bl	8012fb8 <sbrk_aligned>
 801306c:	3001      	adds	r0, #1
 801306e:	d03a      	beq.n	80130e6 <_malloc_r+0xea>
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	442b      	add	r3, r5
 8013074:	6023      	str	r3, [r4, #0]
 8013076:	f8d8 3000 	ldr.w	r3, [r8]
 801307a:	685a      	ldr	r2, [r3, #4]
 801307c:	bb62      	cbnz	r2, 80130d8 <_malloc_r+0xdc>
 801307e:	f8c8 7000 	str.w	r7, [r8]
 8013082:	e00f      	b.n	80130a4 <_malloc_r+0xa8>
 8013084:	6822      	ldr	r2, [r4, #0]
 8013086:	1b52      	subs	r2, r2, r5
 8013088:	d420      	bmi.n	80130cc <_malloc_r+0xd0>
 801308a:	2a0b      	cmp	r2, #11
 801308c:	d917      	bls.n	80130be <_malloc_r+0xc2>
 801308e:	1961      	adds	r1, r4, r5
 8013090:	42a3      	cmp	r3, r4
 8013092:	6025      	str	r5, [r4, #0]
 8013094:	bf18      	it	ne
 8013096:	6059      	strne	r1, [r3, #4]
 8013098:	6863      	ldr	r3, [r4, #4]
 801309a:	bf08      	it	eq
 801309c:	f8c8 1000 	streq.w	r1, [r8]
 80130a0:	5162      	str	r2, [r4, r5]
 80130a2:	604b      	str	r3, [r1, #4]
 80130a4:	4630      	mov	r0, r6
 80130a6:	f000 f82f 	bl	8013108 <__malloc_unlock>
 80130aa:	f104 000b 	add.w	r0, r4, #11
 80130ae:	1d23      	adds	r3, r4, #4
 80130b0:	f020 0007 	bic.w	r0, r0, #7
 80130b4:	1ac2      	subs	r2, r0, r3
 80130b6:	bf1c      	itt	ne
 80130b8:	1a1b      	subne	r3, r3, r0
 80130ba:	50a3      	strne	r3, [r4, r2]
 80130bc:	e7af      	b.n	801301e <_malloc_r+0x22>
 80130be:	6862      	ldr	r2, [r4, #4]
 80130c0:	42a3      	cmp	r3, r4
 80130c2:	bf0c      	ite	eq
 80130c4:	f8c8 2000 	streq.w	r2, [r8]
 80130c8:	605a      	strne	r2, [r3, #4]
 80130ca:	e7eb      	b.n	80130a4 <_malloc_r+0xa8>
 80130cc:	4623      	mov	r3, r4
 80130ce:	6864      	ldr	r4, [r4, #4]
 80130d0:	e7ae      	b.n	8013030 <_malloc_r+0x34>
 80130d2:	463c      	mov	r4, r7
 80130d4:	687f      	ldr	r7, [r7, #4]
 80130d6:	e7b6      	b.n	8013046 <_malloc_r+0x4a>
 80130d8:	461a      	mov	r2, r3
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	42a3      	cmp	r3, r4
 80130de:	d1fb      	bne.n	80130d8 <_malloc_r+0xdc>
 80130e0:	2300      	movs	r3, #0
 80130e2:	6053      	str	r3, [r2, #4]
 80130e4:	e7de      	b.n	80130a4 <_malloc_r+0xa8>
 80130e6:	230c      	movs	r3, #12
 80130e8:	6033      	str	r3, [r6, #0]
 80130ea:	4630      	mov	r0, r6
 80130ec:	f000 f80c 	bl	8013108 <__malloc_unlock>
 80130f0:	e794      	b.n	801301c <_malloc_r+0x20>
 80130f2:	6005      	str	r5, [r0, #0]
 80130f4:	e7d6      	b.n	80130a4 <_malloc_r+0xa8>
 80130f6:	bf00      	nop
 80130f8:	200154d8 	.word	0x200154d8

080130fc <__malloc_lock>:
 80130fc:	4801      	ldr	r0, [pc, #4]	@ (8013104 <__malloc_lock+0x8>)
 80130fe:	f000 b9fc 	b.w	80134fa <__retarget_lock_acquire_recursive>
 8013102:	bf00      	nop
 8013104:	2001561c 	.word	0x2001561c

08013108 <__malloc_unlock>:
 8013108:	4801      	ldr	r0, [pc, #4]	@ (8013110 <__malloc_unlock+0x8>)
 801310a:	f000 b9f7 	b.w	80134fc <__retarget_lock_release_recursive>
 801310e:	bf00      	nop
 8013110:	2001561c 	.word	0x2001561c

08013114 <__cxa_atexit>:
 8013114:	b510      	push	{r4, lr}
 8013116:	4604      	mov	r4, r0
 8013118:	4804      	ldr	r0, [pc, #16]	@ (801312c <__cxa_atexit+0x18>)
 801311a:	4613      	mov	r3, r2
 801311c:	b120      	cbz	r0, 8013128 <__cxa_atexit+0x14>
 801311e:	460a      	mov	r2, r1
 8013120:	2002      	movs	r0, #2
 8013122:	4621      	mov	r1, r4
 8013124:	f000 f9fa 	bl	801351c <__register_exitproc>
 8013128:	bd10      	pop	{r4, pc}
 801312a:	bf00      	nop
 801312c:	0801351d 	.word	0x0801351d

08013130 <std>:
 8013130:	2300      	movs	r3, #0
 8013132:	b510      	push	{r4, lr}
 8013134:	4604      	mov	r4, r0
 8013136:	e9c0 3300 	strd	r3, r3, [r0]
 801313a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801313e:	6083      	str	r3, [r0, #8]
 8013140:	8181      	strh	r1, [r0, #12]
 8013142:	6643      	str	r3, [r0, #100]	@ 0x64
 8013144:	81c2      	strh	r2, [r0, #14]
 8013146:	6183      	str	r3, [r0, #24]
 8013148:	4619      	mov	r1, r3
 801314a:	2208      	movs	r2, #8
 801314c:	305c      	adds	r0, #92	@ 0x5c
 801314e:	f000 f906 	bl	801335e <memset>
 8013152:	4b0d      	ldr	r3, [pc, #52]	@ (8013188 <std+0x58>)
 8013154:	6263      	str	r3, [r4, #36]	@ 0x24
 8013156:	4b0d      	ldr	r3, [pc, #52]	@ (801318c <std+0x5c>)
 8013158:	62a3      	str	r3, [r4, #40]	@ 0x28
 801315a:	4b0d      	ldr	r3, [pc, #52]	@ (8013190 <std+0x60>)
 801315c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801315e:	4b0d      	ldr	r3, [pc, #52]	@ (8013194 <std+0x64>)
 8013160:	6323      	str	r3, [r4, #48]	@ 0x30
 8013162:	4b0d      	ldr	r3, [pc, #52]	@ (8013198 <std+0x68>)
 8013164:	6224      	str	r4, [r4, #32]
 8013166:	429c      	cmp	r4, r3
 8013168:	d006      	beq.n	8013178 <std+0x48>
 801316a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801316e:	4294      	cmp	r4, r2
 8013170:	d002      	beq.n	8013178 <std+0x48>
 8013172:	33d0      	adds	r3, #208	@ 0xd0
 8013174:	429c      	cmp	r4, r3
 8013176:	d105      	bne.n	8013184 <std+0x54>
 8013178:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801317c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013180:	f000 b9ba 	b.w	80134f8 <__retarget_lock_init_recursive>
 8013184:	bd10      	pop	{r4, pc}
 8013186:	bf00      	nop
 8013188:	080132d9 	.word	0x080132d9
 801318c:	080132fb 	.word	0x080132fb
 8013190:	08013333 	.word	0x08013333
 8013194:	08013357 	.word	0x08013357
 8013198:	200154dc 	.word	0x200154dc

0801319c <stdio_exit_handler>:
 801319c:	4a02      	ldr	r2, [pc, #8]	@ (80131a8 <stdio_exit_handler+0xc>)
 801319e:	4903      	ldr	r1, [pc, #12]	@ (80131ac <stdio_exit_handler+0x10>)
 80131a0:	4803      	ldr	r0, [pc, #12]	@ (80131b0 <stdio_exit_handler+0x14>)
 80131a2:	f000 b87b 	b.w	801329c <_fwalk_sglue>
 80131a6:	bf00      	nop
 80131a8:	20000094 	.word	0x20000094
 80131ac:	08013d0d 	.word	0x08013d0d
 80131b0:	200000a4 	.word	0x200000a4

080131b4 <cleanup_stdio>:
 80131b4:	6841      	ldr	r1, [r0, #4]
 80131b6:	4b0c      	ldr	r3, [pc, #48]	@ (80131e8 <cleanup_stdio+0x34>)
 80131b8:	4299      	cmp	r1, r3
 80131ba:	b510      	push	{r4, lr}
 80131bc:	4604      	mov	r4, r0
 80131be:	d001      	beq.n	80131c4 <cleanup_stdio+0x10>
 80131c0:	f000 fda4 	bl	8013d0c <_fflush_r>
 80131c4:	68a1      	ldr	r1, [r4, #8]
 80131c6:	4b09      	ldr	r3, [pc, #36]	@ (80131ec <cleanup_stdio+0x38>)
 80131c8:	4299      	cmp	r1, r3
 80131ca:	d002      	beq.n	80131d2 <cleanup_stdio+0x1e>
 80131cc:	4620      	mov	r0, r4
 80131ce:	f000 fd9d 	bl	8013d0c <_fflush_r>
 80131d2:	68e1      	ldr	r1, [r4, #12]
 80131d4:	4b06      	ldr	r3, [pc, #24]	@ (80131f0 <cleanup_stdio+0x3c>)
 80131d6:	4299      	cmp	r1, r3
 80131d8:	d004      	beq.n	80131e4 <cleanup_stdio+0x30>
 80131da:	4620      	mov	r0, r4
 80131dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131e0:	f000 bd94 	b.w	8013d0c <_fflush_r>
 80131e4:	bd10      	pop	{r4, pc}
 80131e6:	bf00      	nop
 80131e8:	200154dc 	.word	0x200154dc
 80131ec:	20015544 	.word	0x20015544
 80131f0:	200155ac 	.word	0x200155ac

080131f4 <global_stdio_init.part.0>:
 80131f4:	b510      	push	{r4, lr}
 80131f6:	4b0b      	ldr	r3, [pc, #44]	@ (8013224 <global_stdio_init.part.0+0x30>)
 80131f8:	4c0b      	ldr	r4, [pc, #44]	@ (8013228 <global_stdio_init.part.0+0x34>)
 80131fa:	4a0c      	ldr	r2, [pc, #48]	@ (801322c <global_stdio_init.part.0+0x38>)
 80131fc:	601a      	str	r2, [r3, #0]
 80131fe:	4620      	mov	r0, r4
 8013200:	2200      	movs	r2, #0
 8013202:	2104      	movs	r1, #4
 8013204:	f7ff ff94 	bl	8013130 <std>
 8013208:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801320c:	2201      	movs	r2, #1
 801320e:	2109      	movs	r1, #9
 8013210:	f7ff ff8e 	bl	8013130 <std>
 8013214:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013218:	2202      	movs	r2, #2
 801321a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801321e:	2112      	movs	r1, #18
 8013220:	f7ff bf86 	b.w	8013130 <std>
 8013224:	20015614 	.word	0x20015614
 8013228:	200154dc 	.word	0x200154dc
 801322c:	0801319d 	.word	0x0801319d

08013230 <__sfp_lock_acquire>:
 8013230:	4801      	ldr	r0, [pc, #4]	@ (8013238 <__sfp_lock_acquire+0x8>)
 8013232:	f000 b962 	b.w	80134fa <__retarget_lock_acquire_recursive>
 8013236:	bf00      	nop
 8013238:	2001561e 	.word	0x2001561e

0801323c <__sfp_lock_release>:
 801323c:	4801      	ldr	r0, [pc, #4]	@ (8013244 <__sfp_lock_release+0x8>)
 801323e:	f000 b95d 	b.w	80134fc <__retarget_lock_release_recursive>
 8013242:	bf00      	nop
 8013244:	2001561e 	.word	0x2001561e

08013248 <__sinit>:
 8013248:	b510      	push	{r4, lr}
 801324a:	4604      	mov	r4, r0
 801324c:	f7ff fff0 	bl	8013230 <__sfp_lock_acquire>
 8013250:	6a23      	ldr	r3, [r4, #32]
 8013252:	b11b      	cbz	r3, 801325c <__sinit+0x14>
 8013254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013258:	f7ff bff0 	b.w	801323c <__sfp_lock_release>
 801325c:	4b04      	ldr	r3, [pc, #16]	@ (8013270 <__sinit+0x28>)
 801325e:	6223      	str	r3, [r4, #32]
 8013260:	4b04      	ldr	r3, [pc, #16]	@ (8013274 <__sinit+0x2c>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d1f5      	bne.n	8013254 <__sinit+0xc>
 8013268:	f7ff ffc4 	bl	80131f4 <global_stdio_init.part.0>
 801326c:	e7f2      	b.n	8013254 <__sinit+0xc>
 801326e:	bf00      	nop
 8013270:	080131b5 	.word	0x080131b5
 8013274:	20015614 	.word	0x20015614

08013278 <fiprintf>:
 8013278:	b40e      	push	{r1, r2, r3}
 801327a:	b503      	push	{r0, r1, lr}
 801327c:	4601      	mov	r1, r0
 801327e:	ab03      	add	r3, sp, #12
 8013280:	4805      	ldr	r0, [pc, #20]	@ (8013298 <fiprintf+0x20>)
 8013282:	f853 2b04 	ldr.w	r2, [r3], #4
 8013286:	6800      	ldr	r0, [r0, #0]
 8013288:	9301      	str	r3, [sp, #4]
 801328a:	f000 fa17 	bl	80136bc <_vfiprintf_r>
 801328e:	b002      	add	sp, #8
 8013290:	f85d eb04 	ldr.w	lr, [sp], #4
 8013294:	b003      	add	sp, #12
 8013296:	4770      	bx	lr
 8013298:	200000a0 	.word	0x200000a0

0801329c <_fwalk_sglue>:
 801329c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132a0:	4607      	mov	r7, r0
 80132a2:	4688      	mov	r8, r1
 80132a4:	4614      	mov	r4, r2
 80132a6:	2600      	movs	r6, #0
 80132a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80132ac:	f1b9 0901 	subs.w	r9, r9, #1
 80132b0:	d505      	bpl.n	80132be <_fwalk_sglue+0x22>
 80132b2:	6824      	ldr	r4, [r4, #0]
 80132b4:	2c00      	cmp	r4, #0
 80132b6:	d1f7      	bne.n	80132a8 <_fwalk_sglue+0xc>
 80132b8:	4630      	mov	r0, r6
 80132ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132be:	89ab      	ldrh	r3, [r5, #12]
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d907      	bls.n	80132d4 <_fwalk_sglue+0x38>
 80132c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80132c8:	3301      	adds	r3, #1
 80132ca:	d003      	beq.n	80132d4 <_fwalk_sglue+0x38>
 80132cc:	4629      	mov	r1, r5
 80132ce:	4638      	mov	r0, r7
 80132d0:	47c0      	blx	r8
 80132d2:	4306      	orrs	r6, r0
 80132d4:	3568      	adds	r5, #104	@ 0x68
 80132d6:	e7e9      	b.n	80132ac <_fwalk_sglue+0x10>

080132d8 <__sread>:
 80132d8:	b510      	push	{r4, lr}
 80132da:	460c      	mov	r4, r1
 80132dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132e0:	f000 f898 	bl	8013414 <_read_r>
 80132e4:	2800      	cmp	r0, #0
 80132e6:	bfab      	itete	ge
 80132e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80132ea:	89a3      	ldrhlt	r3, [r4, #12]
 80132ec:	181b      	addge	r3, r3, r0
 80132ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80132f2:	bfac      	ite	ge
 80132f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80132f6:	81a3      	strhlt	r3, [r4, #12]
 80132f8:	bd10      	pop	{r4, pc}

080132fa <__swrite>:
 80132fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132fe:	461f      	mov	r7, r3
 8013300:	898b      	ldrh	r3, [r1, #12]
 8013302:	05db      	lsls	r3, r3, #23
 8013304:	4605      	mov	r5, r0
 8013306:	460c      	mov	r4, r1
 8013308:	4616      	mov	r6, r2
 801330a:	d505      	bpl.n	8013318 <__swrite+0x1e>
 801330c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013310:	2302      	movs	r3, #2
 8013312:	2200      	movs	r2, #0
 8013314:	f000 f86c 	bl	80133f0 <_lseek_r>
 8013318:	89a3      	ldrh	r3, [r4, #12]
 801331a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801331e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013322:	81a3      	strh	r3, [r4, #12]
 8013324:	4632      	mov	r2, r6
 8013326:	463b      	mov	r3, r7
 8013328:	4628      	mov	r0, r5
 801332a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801332e:	f000 b8a7 	b.w	8013480 <_write_r>

08013332 <__sseek>:
 8013332:	b510      	push	{r4, lr}
 8013334:	460c      	mov	r4, r1
 8013336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801333a:	f000 f859 	bl	80133f0 <_lseek_r>
 801333e:	1c43      	adds	r3, r0, #1
 8013340:	89a3      	ldrh	r3, [r4, #12]
 8013342:	bf15      	itete	ne
 8013344:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013346:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801334a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801334e:	81a3      	strheq	r3, [r4, #12]
 8013350:	bf18      	it	ne
 8013352:	81a3      	strhne	r3, [r4, #12]
 8013354:	bd10      	pop	{r4, pc}

08013356 <__sclose>:
 8013356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801335a:	f000 b839 	b.w	80133d0 <_close_r>

0801335e <memset>:
 801335e:	4402      	add	r2, r0
 8013360:	4603      	mov	r3, r0
 8013362:	4293      	cmp	r3, r2
 8013364:	d100      	bne.n	8013368 <memset+0xa>
 8013366:	4770      	bx	lr
 8013368:	f803 1b01 	strb.w	r1, [r3], #1
 801336c:	e7f9      	b.n	8013362 <memset+0x4>

0801336e <_raise_r>:
 801336e:	291f      	cmp	r1, #31
 8013370:	b538      	push	{r3, r4, r5, lr}
 8013372:	4605      	mov	r5, r0
 8013374:	460c      	mov	r4, r1
 8013376:	d904      	bls.n	8013382 <_raise_r+0x14>
 8013378:	2316      	movs	r3, #22
 801337a:	6003      	str	r3, [r0, #0]
 801337c:	f04f 30ff 	mov.w	r0, #4294967295
 8013380:	bd38      	pop	{r3, r4, r5, pc}
 8013382:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013384:	b112      	cbz	r2, 801338c <_raise_r+0x1e>
 8013386:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801338a:	b94b      	cbnz	r3, 80133a0 <_raise_r+0x32>
 801338c:	4628      	mov	r0, r5
 801338e:	f000 f865 	bl	801345c <_getpid_r>
 8013392:	4622      	mov	r2, r4
 8013394:	4601      	mov	r1, r0
 8013396:	4628      	mov	r0, r5
 8013398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801339c:	f000 b84c 	b.w	8013438 <_kill_r>
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	d00a      	beq.n	80133ba <_raise_r+0x4c>
 80133a4:	1c59      	adds	r1, r3, #1
 80133a6:	d103      	bne.n	80133b0 <_raise_r+0x42>
 80133a8:	2316      	movs	r3, #22
 80133aa:	6003      	str	r3, [r0, #0]
 80133ac:	2001      	movs	r0, #1
 80133ae:	e7e7      	b.n	8013380 <_raise_r+0x12>
 80133b0:	2100      	movs	r1, #0
 80133b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80133b6:	4620      	mov	r0, r4
 80133b8:	4798      	blx	r3
 80133ba:	2000      	movs	r0, #0
 80133bc:	e7e0      	b.n	8013380 <_raise_r+0x12>
	...

080133c0 <raise>:
 80133c0:	4b02      	ldr	r3, [pc, #8]	@ (80133cc <raise+0xc>)
 80133c2:	4601      	mov	r1, r0
 80133c4:	6818      	ldr	r0, [r3, #0]
 80133c6:	f7ff bfd2 	b.w	801336e <_raise_r>
 80133ca:	bf00      	nop
 80133cc:	200000a0 	.word	0x200000a0

080133d0 <_close_r>:
 80133d0:	b538      	push	{r3, r4, r5, lr}
 80133d2:	4d06      	ldr	r5, [pc, #24]	@ (80133ec <_close_r+0x1c>)
 80133d4:	2300      	movs	r3, #0
 80133d6:	4604      	mov	r4, r0
 80133d8:	4608      	mov	r0, r1
 80133da:	602b      	str	r3, [r5, #0]
 80133dc:	f7ee fafe 	bl	80019dc <_close>
 80133e0:	1c43      	adds	r3, r0, #1
 80133e2:	d102      	bne.n	80133ea <_close_r+0x1a>
 80133e4:	682b      	ldr	r3, [r5, #0]
 80133e6:	b103      	cbz	r3, 80133ea <_close_r+0x1a>
 80133e8:	6023      	str	r3, [r4, #0]
 80133ea:	bd38      	pop	{r3, r4, r5, pc}
 80133ec:	20015618 	.word	0x20015618

080133f0 <_lseek_r>:
 80133f0:	b538      	push	{r3, r4, r5, lr}
 80133f2:	4d07      	ldr	r5, [pc, #28]	@ (8013410 <_lseek_r+0x20>)
 80133f4:	4604      	mov	r4, r0
 80133f6:	4608      	mov	r0, r1
 80133f8:	4611      	mov	r1, r2
 80133fa:	2200      	movs	r2, #0
 80133fc:	602a      	str	r2, [r5, #0]
 80133fe:	461a      	mov	r2, r3
 8013400:	f7ee faf6 	bl	80019f0 <_lseek>
 8013404:	1c43      	adds	r3, r0, #1
 8013406:	d102      	bne.n	801340e <_lseek_r+0x1e>
 8013408:	682b      	ldr	r3, [r5, #0]
 801340a:	b103      	cbz	r3, 801340e <_lseek_r+0x1e>
 801340c:	6023      	str	r3, [r4, #0]
 801340e:	bd38      	pop	{r3, r4, r5, pc}
 8013410:	20015618 	.word	0x20015618

08013414 <_read_r>:
 8013414:	b538      	push	{r3, r4, r5, lr}
 8013416:	4d07      	ldr	r5, [pc, #28]	@ (8013434 <_read_r+0x20>)
 8013418:	4604      	mov	r4, r0
 801341a:	4608      	mov	r0, r1
 801341c:	4611      	mov	r1, r2
 801341e:	2200      	movs	r2, #0
 8013420:	602a      	str	r2, [r5, #0]
 8013422:	461a      	mov	r2, r3
 8013424:	f7ee fabe 	bl	80019a4 <_read>
 8013428:	1c43      	adds	r3, r0, #1
 801342a:	d102      	bne.n	8013432 <_read_r+0x1e>
 801342c:	682b      	ldr	r3, [r5, #0]
 801342e:	b103      	cbz	r3, 8013432 <_read_r+0x1e>
 8013430:	6023      	str	r3, [r4, #0]
 8013432:	bd38      	pop	{r3, r4, r5, pc}
 8013434:	20015618 	.word	0x20015618

08013438 <_kill_r>:
 8013438:	b538      	push	{r3, r4, r5, lr}
 801343a:	4d07      	ldr	r5, [pc, #28]	@ (8013458 <_kill_r+0x20>)
 801343c:	2300      	movs	r3, #0
 801343e:	4604      	mov	r4, r0
 8013440:	4608      	mov	r0, r1
 8013442:	4611      	mov	r1, r2
 8013444:	602b      	str	r3, [r5, #0]
 8013446:	f7ee fa9f 	bl	8001988 <_kill>
 801344a:	1c43      	adds	r3, r0, #1
 801344c:	d102      	bne.n	8013454 <_kill_r+0x1c>
 801344e:	682b      	ldr	r3, [r5, #0]
 8013450:	b103      	cbz	r3, 8013454 <_kill_r+0x1c>
 8013452:	6023      	str	r3, [r4, #0]
 8013454:	bd38      	pop	{r3, r4, r5, pc}
 8013456:	bf00      	nop
 8013458:	20015618 	.word	0x20015618

0801345c <_getpid_r>:
 801345c:	f7ee ba92 	b.w	8001984 <_getpid>

08013460 <_sbrk_r>:
 8013460:	b538      	push	{r3, r4, r5, lr}
 8013462:	4d06      	ldr	r5, [pc, #24]	@ (801347c <_sbrk_r+0x1c>)
 8013464:	2300      	movs	r3, #0
 8013466:	4604      	mov	r4, r0
 8013468:	4608      	mov	r0, r1
 801346a:	602b      	str	r3, [r5, #0]
 801346c:	f7ee fac2 	bl	80019f4 <_sbrk>
 8013470:	1c43      	adds	r3, r0, #1
 8013472:	d102      	bne.n	801347a <_sbrk_r+0x1a>
 8013474:	682b      	ldr	r3, [r5, #0]
 8013476:	b103      	cbz	r3, 801347a <_sbrk_r+0x1a>
 8013478:	6023      	str	r3, [r4, #0]
 801347a:	bd38      	pop	{r3, r4, r5, pc}
 801347c:	20015618 	.word	0x20015618

08013480 <_write_r>:
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	4d07      	ldr	r5, [pc, #28]	@ (80134a0 <_write_r+0x20>)
 8013484:	4604      	mov	r4, r0
 8013486:	4608      	mov	r0, r1
 8013488:	4611      	mov	r1, r2
 801348a:	2200      	movs	r2, #0
 801348c:	602a      	str	r2, [r5, #0]
 801348e:	461a      	mov	r2, r3
 8013490:	f7ee fa96 	bl	80019c0 <_write>
 8013494:	1c43      	adds	r3, r0, #1
 8013496:	d102      	bne.n	801349e <_write_r+0x1e>
 8013498:	682b      	ldr	r3, [r5, #0]
 801349a:	b103      	cbz	r3, 801349e <_write_r+0x1e>
 801349c:	6023      	str	r3, [r4, #0]
 801349e:	bd38      	pop	{r3, r4, r5, pc}
 80134a0:	20015618 	.word	0x20015618

080134a4 <__errno>:
 80134a4:	4b01      	ldr	r3, [pc, #4]	@ (80134ac <__errno+0x8>)
 80134a6:	6818      	ldr	r0, [r3, #0]
 80134a8:	4770      	bx	lr
 80134aa:	bf00      	nop
 80134ac:	200000a0 	.word	0x200000a0

080134b0 <__libc_init_array>:
 80134b0:	b570      	push	{r4, r5, r6, lr}
 80134b2:	4d0d      	ldr	r5, [pc, #52]	@ (80134e8 <__libc_init_array+0x38>)
 80134b4:	4c0d      	ldr	r4, [pc, #52]	@ (80134ec <__libc_init_array+0x3c>)
 80134b6:	1b64      	subs	r4, r4, r5
 80134b8:	10a4      	asrs	r4, r4, #2
 80134ba:	2600      	movs	r6, #0
 80134bc:	42a6      	cmp	r6, r4
 80134be:	d109      	bne.n	80134d4 <__libc_init_array+0x24>
 80134c0:	4d0b      	ldr	r5, [pc, #44]	@ (80134f0 <__libc_init_array+0x40>)
 80134c2:	4c0c      	ldr	r4, [pc, #48]	@ (80134f4 <__libc_init_array+0x44>)
 80134c4:	f000 fd62 	bl	8013f8c <_init>
 80134c8:	1b64      	subs	r4, r4, r5
 80134ca:	10a4      	asrs	r4, r4, #2
 80134cc:	2600      	movs	r6, #0
 80134ce:	42a6      	cmp	r6, r4
 80134d0:	d105      	bne.n	80134de <__libc_init_array+0x2e>
 80134d2:	bd70      	pop	{r4, r5, r6, pc}
 80134d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80134d8:	4798      	blx	r3
 80134da:	3601      	adds	r6, #1
 80134dc:	e7ee      	b.n	80134bc <__libc_init_array+0xc>
 80134de:	f855 3b04 	ldr.w	r3, [r5], #4
 80134e2:	4798      	blx	r3
 80134e4:	3601      	adds	r6, #1
 80134e6:	e7f2      	b.n	80134ce <__libc_init_array+0x1e>
 80134e8:	080f03c0 	.word	0x080f03c0
 80134ec:	080f03c0 	.word	0x080f03c0
 80134f0:	080f03c0 	.word	0x080f03c0
 80134f4:	080f03d4 	.word	0x080f03d4

080134f8 <__retarget_lock_init_recursive>:
 80134f8:	4770      	bx	lr

080134fa <__retarget_lock_acquire_recursive>:
 80134fa:	4770      	bx	lr

080134fc <__retarget_lock_release_recursive>:
 80134fc:	4770      	bx	lr

080134fe <memcpy>:
 80134fe:	440a      	add	r2, r1
 8013500:	4291      	cmp	r1, r2
 8013502:	f100 33ff 	add.w	r3, r0, #4294967295
 8013506:	d100      	bne.n	801350a <memcpy+0xc>
 8013508:	4770      	bx	lr
 801350a:	b510      	push	{r4, lr}
 801350c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013514:	4291      	cmp	r1, r2
 8013516:	d1f9      	bne.n	801350c <memcpy+0xe>
 8013518:	bd10      	pop	{r4, pc}
	...

0801351c <__register_exitproc>:
 801351c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013520:	4d27      	ldr	r5, [pc, #156]	@ (80135c0 <__register_exitproc+0xa4>)
 8013522:	4607      	mov	r7, r0
 8013524:	6828      	ldr	r0, [r5, #0]
 8013526:	4691      	mov	r9, r2
 8013528:	460e      	mov	r6, r1
 801352a:	4698      	mov	r8, r3
 801352c:	f7ff ffe5 	bl	80134fa <__retarget_lock_acquire_recursive>
 8013530:	4a24      	ldr	r2, [pc, #144]	@ (80135c4 <__register_exitproc+0xa8>)
 8013532:	6814      	ldr	r4, [r2, #0]
 8013534:	b93c      	cbnz	r4, 8013546 <__register_exitproc+0x2a>
 8013536:	4b24      	ldr	r3, [pc, #144]	@ (80135c8 <__register_exitproc+0xac>)
 8013538:	6013      	str	r3, [r2, #0]
 801353a:	4a24      	ldr	r2, [pc, #144]	@ (80135cc <__register_exitproc+0xb0>)
 801353c:	b112      	cbz	r2, 8013544 <__register_exitproc+0x28>
 801353e:	6812      	ldr	r2, [r2, #0]
 8013540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013544:	4c20      	ldr	r4, [pc, #128]	@ (80135c8 <__register_exitproc+0xac>)
 8013546:	6863      	ldr	r3, [r4, #4]
 8013548:	2b1f      	cmp	r3, #31
 801354a:	dd06      	ble.n	801355a <__register_exitproc+0x3e>
 801354c:	6828      	ldr	r0, [r5, #0]
 801354e:	f7ff ffd5 	bl	80134fc <__retarget_lock_release_recursive>
 8013552:	f04f 30ff 	mov.w	r0, #4294967295
 8013556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801355a:	b32f      	cbz	r7, 80135a8 <__register_exitproc+0x8c>
 801355c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8013560:	b968      	cbnz	r0, 801357e <__register_exitproc+0x62>
 8013562:	4b1b      	ldr	r3, [pc, #108]	@ (80135d0 <__register_exitproc+0xb4>)
 8013564:	2b00      	cmp	r3, #0
 8013566:	d0f1      	beq.n	801354c <__register_exitproc+0x30>
 8013568:	f44f 7084 	mov.w	r0, #264	@ 0x108
 801356c:	f7ff fd14 	bl	8012f98 <malloc>
 8013570:	2800      	cmp	r0, #0
 8013572:	d0eb      	beq.n	801354c <__register_exitproc+0x30>
 8013574:	2300      	movs	r3, #0
 8013576:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 801357a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 801357e:	6863      	ldr	r3, [r4, #4]
 8013580:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8013584:	2201      	movs	r2, #1
 8013586:	409a      	lsls	r2, r3
 8013588:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801358c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8013590:	4313      	orrs	r3, r2
 8013592:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8013596:	2f02      	cmp	r7, #2
 8013598:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 801359c:	bf02      	ittt	eq
 801359e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80135a2:	4313      	orreq	r3, r2
 80135a4:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80135a8:	6863      	ldr	r3, [r4, #4]
 80135aa:	6828      	ldr	r0, [r5, #0]
 80135ac:	1c5a      	adds	r2, r3, #1
 80135ae:	3302      	adds	r3, #2
 80135b0:	6062      	str	r2, [r4, #4]
 80135b2:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80135b6:	f7ff ffa1 	bl	80134fc <__retarget_lock_release_recursive>
 80135ba:	2000      	movs	r0, #0
 80135bc:	e7cb      	b.n	8013556 <__register_exitproc+0x3a>
 80135be:	bf00      	nop
 80135c0:	200000f0 	.word	0x200000f0
 80135c4:	200156ac 	.word	0x200156ac
 80135c8:	20015620 	.word	0x20015620
 80135cc:	08015f60 	.word	0x08015f60
 80135d0:	08012f99 	.word	0x08012f99

080135d4 <_free_r>:
 80135d4:	b538      	push	{r3, r4, r5, lr}
 80135d6:	4605      	mov	r5, r0
 80135d8:	2900      	cmp	r1, #0
 80135da:	d041      	beq.n	8013660 <_free_r+0x8c>
 80135dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135e0:	1f0c      	subs	r4, r1, #4
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	bfb8      	it	lt
 80135e6:	18e4      	addlt	r4, r4, r3
 80135e8:	f7ff fd88 	bl	80130fc <__malloc_lock>
 80135ec:	4a1d      	ldr	r2, [pc, #116]	@ (8013664 <_free_r+0x90>)
 80135ee:	6813      	ldr	r3, [r2, #0]
 80135f0:	b933      	cbnz	r3, 8013600 <_free_r+0x2c>
 80135f2:	6063      	str	r3, [r4, #4]
 80135f4:	6014      	str	r4, [r2, #0]
 80135f6:	4628      	mov	r0, r5
 80135f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135fc:	f7ff bd84 	b.w	8013108 <__malloc_unlock>
 8013600:	42a3      	cmp	r3, r4
 8013602:	d908      	bls.n	8013616 <_free_r+0x42>
 8013604:	6820      	ldr	r0, [r4, #0]
 8013606:	1821      	adds	r1, r4, r0
 8013608:	428b      	cmp	r3, r1
 801360a:	bf01      	itttt	eq
 801360c:	6819      	ldreq	r1, [r3, #0]
 801360e:	685b      	ldreq	r3, [r3, #4]
 8013610:	1809      	addeq	r1, r1, r0
 8013612:	6021      	streq	r1, [r4, #0]
 8013614:	e7ed      	b.n	80135f2 <_free_r+0x1e>
 8013616:	461a      	mov	r2, r3
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	b10b      	cbz	r3, 8013620 <_free_r+0x4c>
 801361c:	42a3      	cmp	r3, r4
 801361e:	d9fa      	bls.n	8013616 <_free_r+0x42>
 8013620:	6811      	ldr	r1, [r2, #0]
 8013622:	1850      	adds	r0, r2, r1
 8013624:	42a0      	cmp	r0, r4
 8013626:	d10b      	bne.n	8013640 <_free_r+0x6c>
 8013628:	6820      	ldr	r0, [r4, #0]
 801362a:	4401      	add	r1, r0
 801362c:	1850      	adds	r0, r2, r1
 801362e:	4283      	cmp	r3, r0
 8013630:	6011      	str	r1, [r2, #0]
 8013632:	d1e0      	bne.n	80135f6 <_free_r+0x22>
 8013634:	6818      	ldr	r0, [r3, #0]
 8013636:	685b      	ldr	r3, [r3, #4]
 8013638:	6053      	str	r3, [r2, #4]
 801363a:	4408      	add	r0, r1
 801363c:	6010      	str	r0, [r2, #0]
 801363e:	e7da      	b.n	80135f6 <_free_r+0x22>
 8013640:	d902      	bls.n	8013648 <_free_r+0x74>
 8013642:	230c      	movs	r3, #12
 8013644:	602b      	str	r3, [r5, #0]
 8013646:	e7d6      	b.n	80135f6 <_free_r+0x22>
 8013648:	6820      	ldr	r0, [r4, #0]
 801364a:	1821      	adds	r1, r4, r0
 801364c:	428b      	cmp	r3, r1
 801364e:	bf04      	itt	eq
 8013650:	6819      	ldreq	r1, [r3, #0]
 8013652:	685b      	ldreq	r3, [r3, #4]
 8013654:	6063      	str	r3, [r4, #4]
 8013656:	bf04      	itt	eq
 8013658:	1809      	addeq	r1, r1, r0
 801365a:	6021      	streq	r1, [r4, #0]
 801365c:	6054      	str	r4, [r2, #4]
 801365e:	e7ca      	b.n	80135f6 <_free_r+0x22>
 8013660:	bd38      	pop	{r3, r4, r5, pc}
 8013662:	bf00      	nop
 8013664:	200154d8 	.word	0x200154d8

08013668 <__sfputc_r>:
 8013668:	6893      	ldr	r3, [r2, #8]
 801366a:	3b01      	subs	r3, #1
 801366c:	2b00      	cmp	r3, #0
 801366e:	b410      	push	{r4}
 8013670:	6093      	str	r3, [r2, #8]
 8013672:	da08      	bge.n	8013686 <__sfputc_r+0x1e>
 8013674:	6994      	ldr	r4, [r2, #24]
 8013676:	42a3      	cmp	r3, r4
 8013678:	db01      	blt.n	801367e <__sfputc_r+0x16>
 801367a:	290a      	cmp	r1, #10
 801367c:	d103      	bne.n	8013686 <__sfputc_r+0x1e>
 801367e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013682:	f000 bb6b 	b.w	8013d5c <__swbuf_r>
 8013686:	6813      	ldr	r3, [r2, #0]
 8013688:	1c58      	adds	r0, r3, #1
 801368a:	6010      	str	r0, [r2, #0]
 801368c:	7019      	strb	r1, [r3, #0]
 801368e:	4608      	mov	r0, r1
 8013690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013694:	4770      	bx	lr

08013696 <__sfputs_r>:
 8013696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013698:	4606      	mov	r6, r0
 801369a:	460f      	mov	r7, r1
 801369c:	4614      	mov	r4, r2
 801369e:	18d5      	adds	r5, r2, r3
 80136a0:	42ac      	cmp	r4, r5
 80136a2:	d101      	bne.n	80136a8 <__sfputs_r+0x12>
 80136a4:	2000      	movs	r0, #0
 80136a6:	e007      	b.n	80136b8 <__sfputs_r+0x22>
 80136a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136ac:	463a      	mov	r2, r7
 80136ae:	4630      	mov	r0, r6
 80136b0:	f7ff ffda 	bl	8013668 <__sfputc_r>
 80136b4:	1c43      	adds	r3, r0, #1
 80136b6:	d1f3      	bne.n	80136a0 <__sfputs_r+0xa>
 80136b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080136bc <_vfiprintf_r>:
 80136bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c0:	460d      	mov	r5, r1
 80136c2:	b09d      	sub	sp, #116	@ 0x74
 80136c4:	4614      	mov	r4, r2
 80136c6:	4698      	mov	r8, r3
 80136c8:	4606      	mov	r6, r0
 80136ca:	b118      	cbz	r0, 80136d4 <_vfiprintf_r+0x18>
 80136cc:	6a03      	ldr	r3, [r0, #32]
 80136ce:	b90b      	cbnz	r3, 80136d4 <_vfiprintf_r+0x18>
 80136d0:	f7ff fdba 	bl	8013248 <__sinit>
 80136d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80136d6:	07d9      	lsls	r1, r3, #31
 80136d8:	d405      	bmi.n	80136e6 <_vfiprintf_r+0x2a>
 80136da:	89ab      	ldrh	r3, [r5, #12]
 80136dc:	059a      	lsls	r2, r3, #22
 80136de:	d402      	bmi.n	80136e6 <_vfiprintf_r+0x2a>
 80136e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80136e2:	f7ff ff0a 	bl	80134fa <__retarget_lock_acquire_recursive>
 80136e6:	89ab      	ldrh	r3, [r5, #12]
 80136e8:	071b      	lsls	r3, r3, #28
 80136ea:	d501      	bpl.n	80136f0 <_vfiprintf_r+0x34>
 80136ec:	692b      	ldr	r3, [r5, #16]
 80136ee:	b99b      	cbnz	r3, 8013718 <_vfiprintf_r+0x5c>
 80136f0:	4629      	mov	r1, r5
 80136f2:	4630      	mov	r0, r6
 80136f4:	f000 fb70 	bl	8013dd8 <__swsetup_r>
 80136f8:	b170      	cbz	r0, 8013718 <_vfiprintf_r+0x5c>
 80136fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80136fc:	07dc      	lsls	r4, r3, #31
 80136fe:	d504      	bpl.n	801370a <_vfiprintf_r+0x4e>
 8013700:	f04f 30ff 	mov.w	r0, #4294967295
 8013704:	b01d      	add	sp, #116	@ 0x74
 8013706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801370a:	89ab      	ldrh	r3, [r5, #12]
 801370c:	0598      	lsls	r0, r3, #22
 801370e:	d4f7      	bmi.n	8013700 <_vfiprintf_r+0x44>
 8013710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013712:	f7ff fef3 	bl	80134fc <__retarget_lock_release_recursive>
 8013716:	e7f3      	b.n	8013700 <_vfiprintf_r+0x44>
 8013718:	2300      	movs	r3, #0
 801371a:	9309      	str	r3, [sp, #36]	@ 0x24
 801371c:	2320      	movs	r3, #32
 801371e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013722:	f8cd 800c 	str.w	r8, [sp, #12]
 8013726:	2330      	movs	r3, #48	@ 0x30
 8013728:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80138d8 <_vfiprintf_r+0x21c>
 801372c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013730:	f04f 0901 	mov.w	r9, #1
 8013734:	4623      	mov	r3, r4
 8013736:	469a      	mov	sl, r3
 8013738:	f813 2b01 	ldrb.w	r2, [r3], #1
 801373c:	b10a      	cbz	r2, 8013742 <_vfiprintf_r+0x86>
 801373e:	2a25      	cmp	r2, #37	@ 0x25
 8013740:	d1f9      	bne.n	8013736 <_vfiprintf_r+0x7a>
 8013742:	ebba 0b04 	subs.w	fp, sl, r4
 8013746:	d00b      	beq.n	8013760 <_vfiprintf_r+0xa4>
 8013748:	465b      	mov	r3, fp
 801374a:	4622      	mov	r2, r4
 801374c:	4629      	mov	r1, r5
 801374e:	4630      	mov	r0, r6
 8013750:	f7ff ffa1 	bl	8013696 <__sfputs_r>
 8013754:	3001      	adds	r0, #1
 8013756:	f000 80a7 	beq.w	80138a8 <_vfiprintf_r+0x1ec>
 801375a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801375c:	445a      	add	r2, fp
 801375e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013760:	f89a 3000 	ldrb.w	r3, [sl]
 8013764:	2b00      	cmp	r3, #0
 8013766:	f000 809f 	beq.w	80138a8 <_vfiprintf_r+0x1ec>
 801376a:	2300      	movs	r3, #0
 801376c:	f04f 32ff 	mov.w	r2, #4294967295
 8013770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013774:	f10a 0a01 	add.w	sl, sl, #1
 8013778:	9304      	str	r3, [sp, #16]
 801377a:	9307      	str	r3, [sp, #28]
 801377c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013780:	931a      	str	r3, [sp, #104]	@ 0x68
 8013782:	4654      	mov	r4, sl
 8013784:	2205      	movs	r2, #5
 8013786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801378a:	4853      	ldr	r0, [pc, #332]	@ (80138d8 <_vfiprintf_r+0x21c>)
 801378c:	f7ec fd30 	bl	80001f0 <memchr>
 8013790:	9a04      	ldr	r2, [sp, #16]
 8013792:	b9d8      	cbnz	r0, 80137cc <_vfiprintf_r+0x110>
 8013794:	06d1      	lsls	r1, r2, #27
 8013796:	bf44      	itt	mi
 8013798:	2320      	movmi	r3, #32
 801379a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801379e:	0713      	lsls	r3, r2, #28
 80137a0:	bf44      	itt	mi
 80137a2:	232b      	movmi	r3, #43	@ 0x2b
 80137a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80137a8:	f89a 3000 	ldrb.w	r3, [sl]
 80137ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80137ae:	d015      	beq.n	80137dc <_vfiprintf_r+0x120>
 80137b0:	9a07      	ldr	r2, [sp, #28]
 80137b2:	4654      	mov	r4, sl
 80137b4:	2000      	movs	r0, #0
 80137b6:	f04f 0c0a 	mov.w	ip, #10
 80137ba:	4621      	mov	r1, r4
 80137bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80137c0:	3b30      	subs	r3, #48	@ 0x30
 80137c2:	2b09      	cmp	r3, #9
 80137c4:	d94b      	bls.n	801385e <_vfiprintf_r+0x1a2>
 80137c6:	b1b0      	cbz	r0, 80137f6 <_vfiprintf_r+0x13a>
 80137c8:	9207      	str	r2, [sp, #28]
 80137ca:	e014      	b.n	80137f6 <_vfiprintf_r+0x13a>
 80137cc:	eba0 0308 	sub.w	r3, r0, r8
 80137d0:	fa09 f303 	lsl.w	r3, r9, r3
 80137d4:	4313      	orrs	r3, r2
 80137d6:	9304      	str	r3, [sp, #16]
 80137d8:	46a2      	mov	sl, r4
 80137da:	e7d2      	b.n	8013782 <_vfiprintf_r+0xc6>
 80137dc:	9b03      	ldr	r3, [sp, #12]
 80137de:	1d19      	adds	r1, r3, #4
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	9103      	str	r1, [sp, #12]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	bfbb      	ittet	lt
 80137e8:	425b      	neglt	r3, r3
 80137ea:	f042 0202 	orrlt.w	r2, r2, #2
 80137ee:	9307      	strge	r3, [sp, #28]
 80137f0:	9307      	strlt	r3, [sp, #28]
 80137f2:	bfb8      	it	lt
 80137f4:	9204      	strlt	r2, [sp, #16]
 80137f6:	7823      	ldrb	r3, [r4, #0]
 80137f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80137fa:	d10a      	bne.n	8013812 <_vfiprintf_r+0x156>
 80137fc:	7863      	ldrb	r3, [r4, #1]
 80137fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8013800:	d132      	bne.n	8013868 <_vfiprintf_r+0x1ac>
 8013802:	9b03      	ldr	r3, [sp, #12]
 8013804:	1d1a      	adds	r2, r3, #4
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	9203      	str	r2, [sp, #12]
 801380a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801380e:	3402      	adds	r4, #2
 8013810:	9305      	str	r3, [sp, #20]
 8013812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80138e8 <_vfiprintf_r+0x22c>
 8013816:	7821      	ldrb	r1, [r4, #0]
 8013818:	2203      	movs	r2, #3
 801381a:	4650      	mov	r0, sl
 801381c:	f7ec fce8 	bl	80001f0 <memchr>
 8013820:	b138      	cbz	r0, 8013832 <_vfiprintf_r+0x176>
 8013822:	9b04      	ldr	r3, [sp, #16]
 8013824:	eba0 000a 	sub.w	r0, r0, sl
 8013828:	2240      	movs	r2, #64	@ 0x40
 801382a:	4082      	lsls	r2, r0
 801382c:	4313      	orrs	r3, r2
 801382e:	3401      	adds	r4, #1
 8013830:	9304      	str	r3, [sp, #16]
 8013832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013836:	4829      	ldr	r0, [pc, #164]	@ (80138dc <_vfiprintf_r+0x220>)
 8013838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801383c:	2206      	movs	r2, #6
 801383e:	f7ec fcd7 	bl	80001f0 <memchr>
 8013842:	2800      	cmp	r0, #0
 8013844:	d03f      	beq.n	80138c6 <_vfiprintf_r+0x20a>
 8013846:	4b26      	ldr	r3, [pc, #152]	@ (80138e0 <_vfiprintf_r+0x224>)
 8013848:	bb1b      	cbnz	r3, 8013892 <_vfiprintf_r+0x1d6>
 801384a:	9b03      	ldr	r3, [sp, #12]
 801384c:	3307      	adds	r3, #7
 801384e:	f023 0307 	bic.w	r3, r3, #7
 8013852:	3308      	adds	r3, #8
 8013854:	9303      	str	r3, [sp, #12]
 8013856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013858:	443b      	add	r3, r7
 801385a:	9309      	str	r3, [sp, #36]	@ 0x24
 801385c:	e76a      	b.n	8013734 <_vfiprintf_r+0x78>
 801385e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013862:	460c      	mov	r4, r1
 8013864:	2001      	movs	r0, #1
 8013866:	e7a8      	b.n	80137ba <_vfiprintf_r+0xfe>
 8013868:	2300      	movs	r3, #0
 801386a:	3401      	adds	r4, #1
 801386c:	9305      	str	r3, [sp, #20]
 801386e:	4619      	mov	r1, r3
 8013870:	f04f 0c0a 	mov.w	ip, #10
 8013874:	4620      	mov	r0, r4
 8013876:	f810 2b01 	ldrb.w	r2, [r0], #1
 801387a:	3a30      	subs	r2, #48	@ 0x30
 801387c:	2a09      	cmp	r2, #9
 801387e:	d903      	bls.n	8013888 <_vfiprintf_r+0x1cc>
 8013880:	2b00      	cmp	r3, #0
 8013882:	d0c6      	beq.n	8013812 <_vfiprintf_r+0x156>
 8013884:	9105      	str	r1, [sp, #20]
 8013886:	e7c4      	b.n	8013812 <_vfiprintf_r+0x156>
 8013888:	fb0c 2101 	mla	r1, ip, r1, r2
 801388c:	4604      	mov	r4, r0
 801388e:	2301      	movs	r3, #1
 8013890:	e7f0      	b.n	8013874 <_vfiprintf_r+0x1b8>
 8013892:	ab03      	add	r3, sp, #12
 8013894:	9300      	str	r3, [sp, #0]
 8013896:	462a      	mov	r2, r5
 8013898:	4b12      	ldr	r3, [pc, #72]	@ (80138e4 <_vfiprintf_r+0x228>)
 801389a:	a904      	add	r1, sp, #16
 801389c:	4630      	mov	r0, r6
 801389e:	f3af 8000 	nop.w
 80138a2:	4607      	mov	r7, r0
 80138a4:	1c78      	adds	r0, r7, #1
 80138a6:	d1d6      	bne.n	8013856 <_vfiprintf_r+0x19a>
 80138a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138aa:	07d9      	lsls	r1, r3, #31
 80138ac:	d405      	bmi.n	80138ba <_vfiprintf_r+0x1fe>
 80138ae:	89ab      	ldrh	r3, [r5, #12]
 80138b0:	059a      	lsls	r2, r3, #22
 80138b2:	d402      	bmi.n	80138ba <_vfiprintf_r+0x1fe>
 80138b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138b6:	f7ff fe21 	bl	80134fc <__retarget_lock_release_recursive>
 80138ba:	89ab      	ldrh	r3, [r5, #12]
 80138bc:	065b      	lsls	r3, r3, #25
 80138be:	f53f af1f 	bmi.w	8013700 <_vfiprintf_r+0x44>
 80138c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80138c4:	e71e      	b.n	8013704 <_vfiprintf_r+0x48>
 80138c6:	ab03      	add	r3, sp, #12
 80138c8:	9300      	str	r3, [sp, #0]
 80138ca:	462a      	mov	r2, r5
 80138cc:	4b05      	ldr	r3, [pc, #20]	@ (80138e4 <_vfiprintf_r+0x228>)
 80138ce:	a904      	add	r1, sp, #16
 80138d0:	4630      	mov	r0, r6
 80138d2:	f000 f879 	bl	80139c8 <_printf_i>
 80138d6:	e7e4      	b.n	80138a2 <_vfiprintf_r+0x1e6>
 80138d8:	08014e0a 	.word	0x08014e0a
 80138dc:	08014e14 	.word	0x08014e14
 80138e0:	00000000 	.word	0x00000000
 80138e4:	08013697 	.word	0x08013697
 80138e8:	08014e10 	.word	0x08014e10

080138ec <_printf_common>:
 80138ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138f0:	4616      	mov	r6, r2
 80138f2:	4698      	mov	r8, r3
 80138f4:	688a      	ldr	r2, [r1, #8]
 80138f6:	690b      	ldr	r3, [r1, #16]
 80138f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80138fc:	4293      	cmp	r3, r2
 80138fe:	bfb8      	it	lt
 8013900:	4613      	movlt	r3, r2
 8013902:	6033      	str	r3, [r6, #0]
 8013904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013908:	4607      	mov	r7, r0
 801390a:	460c      	mov	r4, r1
 801390c:	b10a      	cbz	r2, 8013912 <_printf_common+0x26>
 801390e:	3301      	adds	r3, #1
 8013910:	6033      	str	r3, [r6, #0]
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	0699      	lsls	r1, r3, #26
 8013916:	bf42      	ittt	mi
 8013918:	6833      	ldrmi	r3, [r6, #0]
 801391a:	3302      	addmi	r3, #2
 801391c:	6033      	strmi	r3, [r6, #0]
 801391e:	6825      	ldr	r5, [r4, #0]
 8013920:	f015 0506 	ands.w	r5, r5, #6
 8013924:	d106      	bne.n	8013934 <_printf_common+0x48>
 8013926:	f104 0a19 	add.w	sl, r4, #25
 801392a:	68e3      	ldr	r3, [r4, #12]
 801392c:	6832      	ldr	r2, [r6, #0]
 801392e:	1a9b      	subs	r3, r3, r2
 8013930:	42ab      	cmp	r3, r5
 8013932:	dc26      	bgt.n	8013982 <_printf_common+0x96>
 8013934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013938:	6822      	ldr	r2, [r4, #0]
 801393a:	3b00      	subs	r3, #0
 801393c:	bf18      	it	ne
 801393e:	2301      	movne	r3, #1
 8013940:	0692      	lsls	r2, r2, #26
 8013942:	d42b      	bmi.n	801399c <_printf_common+0xb0>
 8013944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013948:	4641      	mov	r1, r8
 801394a:	4638      	mov	r0, r7
 801394c:	47c8      	blx	r9
 801394e:	3001      	adds	r0, #1
 8013950:	d01e      	beq.n	8013990 <_printf_common+0xa4>
 8013952:	6823      	ldr	r3, [r4, #0]
 8013954:	6922      	ldr	r2, [r4, #16]
 8013956:	f003 0306 	and.w	r3, r3, #6
 801395a:	2b04      	cmp	r3, #4
 801395c:	bf02      	ittt	eq
 801395e:	68e5      	ldreq	r5, [r4, #12]
 8013960:	6833      	ldreq	r3, [r6, #0]
 8013962:	1aed      	subeq	r5, r5, r3
 8013964:	68a3      	ldr	r3, [r4, #8]
 8013966:	bf0c      	ite	eq
 8013968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801396c:	2500      	movne	r5, #0
 801396e:	4293      	cmp	r3, r2
 8013970:	bfc4      	itt	gt
 8013972:	1a9b      	subgt	r3, r3, r2
 8013974:	18ed      	addgt	r5, r5, r3
 8013976:	2600      	movs	r6, #0
 8013978:	341a      	adds	r4, #26
 801397a:	42b5      	cmp	r5, r6
 801397c:	d11a      	bne.n	80139b4 <_printf_common+0xc8>
 801397e:	2000      	movs	r0, #0
 8013980:	e008      	b.n	8013994 <_printf_common+0xa8>
 8013982:	2301      	movs	r3, #1
 8013984:	4652      	mov	r2, sl
 8013986:	4641      	mov	r1, r8
 8013988:	4638      	mov	r0, r7
 801398a:	47c8      	blx	r9
 801398c:	3001      	adds	r0, #1
 801398e:	d103      	bne.n	8013998 <_printf_common+0xac>
 8013990:	f04f 30ff 	mov.w	r0, #4294967295
 8013994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013998:	3501      	adds	r5, #1
 801399a:	e7c6      	b.n	801392a <_printf_common+0x3e>
 801399c:	18e1      	adds	r1, r4, r3
 801399e:	1c5a      	adds	r2, r3, #1
 80139a0:	2030      	movs	r0, #48	@ 0x30
 80139a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80139a6:	4422      	add	r2, r4
 80139a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80139ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80139b0:	3302      	adds	r3, #2
 80139b2:	e7c7      	b.n	8013944 <_printf_common+0x58>
 80139b4:	2301      	movs	r3, #1
 80139b6:	4622      	mov	r2, r4
 80139b8:	4641      	mov	r1, r8
 80139ba:	4638      	mov	r0, r7
 80139bc:	47c8      	blx	r9
 80139be:	3001      	adds	r0, #1
 80139c0:	d0e6      	beq.n	8013990 <_printf_common+0xa4>
 80139c2:	3601      	adds	r6, #1
 80139c4:	e7d9      	b.n	801397a <_printf_common+0x8e>
	...

080139c8 <_printf_i>:
 80139c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139cc:	7e0f      	ldrb	r7, [r1, #24]
 80139ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80139d0:	2f78      	cmp	r7, #120	@ 0x78
 80139d2:	4691      	mov	r9, r2
 80139d4:	4680      	mov	r8, r0
 80139d6:	460c      	mov	r4, r1
 80139d8:	469a      	mov	sl, r3
 80139da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80139de:	d807      	bhi.n	80139f0 <_printf_i+0x28>
 80139e0:	2f62      	cmp	r7, #98	@ 0x62
 80139e2:	d80a      	bhi.n	80139fa <_printf_i+0x32>
 80139e4:	2f00      	cmp	r7, #0
 80139e6:	f000 80d1 	beq.w	8013b8c <_printf_i+0x1c4>
 80139ea:	2f58      	cmp	r7, #88	@ 0x58
 80139ec:	f000 80b8 	beq.w	8013b60 <_printf_i+0x198>
 80139f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80139f8:	e03a      	b.n	8013a70 <_printf_i+0xa8>
 80139fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80139fe:	2b15      	cmp	r3, #21
 8013a00:	d8f6      	bhi.n	80139f0 <_printf_i+0x28>
 8013a02:	a101      	add	r1, pc, #4	@ (adr r1, 8013a08 <_printf_i+0x40>)
 8013a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a08:	08013a61 	.word	0x08013a61
 8013a0c:	08013a75 	.word	0x08013a75
 8013a10:	080139f1 	.word	0x080139f1
 8013a14:	080139f1 	.word	0x080139f1
 8013a18:	080139f1 	.word	0x080139f1
 8013a1c:	080139f1 	.word	0x080139f1
 8013a20:	08013a75 	.word	0x08013a75
 8013a24:	080139f1 	.word	0x080139f1
 8013a28:	080139f1 	.word	0x080139f1
 8013a2c:	080139f1 	.word	0x080139f1
 8013a30:	080139f1 	.word	0x080139f1
 8013a34:	08013b73 	.word	0x08013b73
 8013a38:	08013a9f 	.word	0x08013a9f
 8013a3c:	08013b2d 	.word	0x08013b2d
 8013a40:	080139f1 	.word	0x080139f1
 8013a44:	080139f1 	.word	0x080139f1
 8013a48:	08013b95 	.word	0x08013b95
 8013a4c:	080139f1 	.word	0x080139f1
 8013a50:	08013a9f 	.word	0x08013a9f
 8013a54:	080139f1 	.word	0x080139f1
 8013a58:	080139f1 	.word	0x080139f1
 8013a5c:	08013b35 	.word	0x08013b35
 8013a60:	6833      	ldr	r3, [r6, #0]
 8013a62:	1d1a      	adds	r2, r3, #4
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	6032      	str	r2, [r6, #0]
 8013a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013a70:	2301      	movs	r3, #1
 8013a72:	e09c      	b.n	8013bae <_printf_i+0x1e6>
 8013a74:	6833      	ldr	r3, [r6, #0]
 8013a76:	6820      	ldr	r0, [r4, #0]
 8013a78:	1d19      	adds	r1, r3, #4
 8013a7a:	6031      	str	r1, [r6, #0]
 8013a7c:	0606      	lsls	r6, r0, #24
 8013a7e:	d501      	bpl.n	8013a84 <_printf_i+0xbc>
 8013a80:	681d      	ldr	r5, [r3, #0]
 8013a82:	e003      	b.n	8013a8c <_printf_i+0xc4>
 8013a84:	0645      	lsls	r5, r0, #25
 8013a86:	d5fb      	bpl.n	8013a80 <_printf_i+0xb8>
 8013a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013a8c:	2d00      	cmp	r5, #0
 8013a8e:	da03      	bge.n	8013a98 <_printf_i+0xd0>
 8013a90:	232d      	movs	r3, #45	@ 0x2d
 8013a92:	426d      	negs	r5, r5
 8013a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a98:	4858      	ldr	r0, [pc, #352]	@ (8013bfc <_printf_i+0x234>)
 8013a9a:	230a      	movs	r3, #10
 8013a9c:	e011      	b.n	8013ac2 <_printf_i+0xfa>
 8013a9e:	6821      	ldr	r1, [r4, #0]
 8013aa0:	6833      	ldr	r3, [r6, #0]
 8013aa2:	0608      	lsls	r0, r1, #24
 8013aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013aa8:	d402      	bmi.n	8013ab0 <_printf_i+0xe8>
 8013aaa:	0649      	lsls	r1, r1, #25
 8013aac:	bf48      	it	mi
 8013aae:	b2ad      	uxthmi	r5, r5
 8013ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013ab2:	4852      	ldr	r0, [pc, #328]	@ (8013bfc <_printf_i+0x234>)
 8013ab4:	6033      	str	r3, [r6, #0]
 8013ab6:	bf14      	ite	ne
 8013ab8:	230a      	movne	r3, #10
 8013aba:	2308      	moveq	r3, #8
 8013abc:	2100      	movs	r1, #0
 8013abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ac2:	6866      	ldr	r6, [r4, #4]
 8013ac4:	60a6      	str	r6, [r4, #8]
 8013ac6:	2e00      	cmp	r6, #0
 8013ac8:	db05      	blt.n	8013ad6 <_printf_i+0x10e>
 8013aca:	6821      	ldr	r1, [r4, #0]
 8013acc:	432e      	orrs	r6, r5
 8013ace:	f021 0104 	bic.w	r1, r1, #4
 8013ad2:	6021      	str	r1, [r4, #0]
 8013ad4:	d04b      	beq.n	8013b6e <_printf_i+0x1a6>
 8013ad6:	4616      	mov	r6, r2
 8013ad8:	fbb5 f1f3 	udiv	r1, r5, r3
 8013adc:	fb03 5711 	mls	r7, r3, r1, r5
 8013ae0:	5dc7      	ldrb	r7, [r0, r7]
 8013ae2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013ae6:	462f      	mov	r7, r5
 8013ae8:	42bb      	cmp	r3, r7
 8013aea:	460d      	mov	r5, r1
 8013aec:	d9f4      	bls.n	8013ad8 <_printf_i+0x110>
 8013aee:	2b08      	cmp	r3, #8
 8013af0:	d10b      	bne.n	8013b0a <_printf_i+0x142>
 8013af2:	6823      	ldr	r3, [r4, #0]
 8013af4:	07df      	lsls	r7, r3, #31
 8013af6:	d508      	bpl.n	8013b0a <_printf_i+0x142>
 8013af8:	6923      	ldr	r3, [r4, #16]
 8013afa:	6861      	ldr	r1, [r4, #4]
 8013afc:	4299      	cmp	r1, r3
 8013afe:	bfde      	ittt	le
 8013b00:	2330      	movle	r3, #48	@ 0x30
 8013b02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b0a:	1b92      	subs	r2, r2, r6
 8013b0c:	6122      	str	r2, [r4, #16]
 8013b0e:	f8cd a000 	str.w	sl, [sp]
 8013b12:	464b      	mov	r3, r9
 8013b14:	aa03      	add	r2, sp, #12
 8013b16:	4621      	mov	r1, r4
 8013b18:	4640      	mov	r0, r8
 8013b1a:	f7ff fee7 	bl	80138ec <_printf_common>
 8013b1e:	3001      	adds	r0, #1
 8013b20:	d14a      	bne.n	8013bb8 <_printf_i+0x1f0>
 8013b22:	f04f 30ff 	mov.w	r0, #4294967295
 8013b26:	b004      	add	sp, #16
 8013b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b2c:	6823      	ldr	r3, [r4, #0]
 8013b2e:	f043 0320 	orr.w	r3, r3, #32
 8013b32:	6023      	str	r3, [r4, #0]
 8013b34:	4832      	ldr	r0, [pc, #200]	@ (8013c00 <_printf_i+0x238>)
 8013b36:	2778      	movs	r7, #120	@ 0x78
 8013b38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013b3c:	6823      	ldr	r3, [r4, #0]
 8013b3e:	6831      	ldr	r1, [r6, #0]
 8013b40:	061f      	lsls	r7, r3, #24
 8013b42:	f851 5b04 	ldr.w	r5, [r1], #4
 8013b46:	d402      	bmi.n	8013b4e <_printf_i+0x186>
 8013b48:	065f      	lsls	r7, r3, #25
 8013b4a:	bf48      	it	mi
 8013b4c:	b2ad      	uxthmi	r5, r5
 8013b4e:	6031      	str	r1, [r6, #0]
 8013b50:	07d9      	lsls	r1, r3, #31
 8013b52:	bf44      	itt	mi
 8013b54:	f043 0320 	orrmi.w	r3, r3, #32
 8013b58:	6023      	strmi	r3, [r4, #0]
 8013b5a:	b11d      	cbz	r5, 8013b64 <_printf_i+0x19c>
 8013b5c:	2310      	movs	r3, #16
 8013b5e:	e7ad      	b.n	8013abc <_printf_i+0xf4>
 8013b60:	4826      	ldr	r0, [pc, #152]	@ (8013bfc <_printf_i+0x234>)
 8013b62:	e7e9      	b.n	8013b38 <_printf_i+0x170>
 8013b64:	6823      	ldr	r3, [r4, #0]
 8013b66:	f023 0320 	bic.w	r3, r3, #32
 8013b6a:	6023      	str	r3, [r4, #0]
 8013b6c:	e7f6      	b.n	8013b5c <_printf_i+0x194>
 8013b6e:	4616      	mov	r6, r2
 8013b70:	e7bd      	b.n	8013aee <_printf_i+0x126>
 8013b72:	6833      	ldr	r3, [r6, #0]
 8013b74:	6825      	ldr	r5, [r4, #0]
 8013b76:	6961      	ldr	r1, [r4, #20]
 8013b78:	1d18      	adds	r0, r3, #4
 8013b7a:	6030      	str	r0, [r6, #0]
 8013b7c:	062e      	lsls	r6, r5, #24
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	d501      	bpl.n	8013b86 <_printf_i+0x1be>
 8013b82:	6019      	str	r1, [r3, #0]
 8013b84:	e002      	b.n	8013b8c <_printf_i+0x1c4>
 8013b86:	0668      	lsls	r0, r5, #25
 8013b88:	d5fb      	bpl.n	8013b82 <_printf_i+0x1ba>
 8013b8a:	8019      	strh	r1, [r3, #0]
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	6123      	str	r3, [r4, #16]
 8013b90:	4616      	mov	r6, r2
 8013b92:	e7bc      	b.n	8013b0e <_printf_i+0x146>
 8013b94:	6833      	ldr	r3, [r6, #0]
 8013b96:	1d1a      	adds	r2, r3, #4
 8013b98:	6032      	str	r2, [r6, #0]
 8013b9a:	681e      	ldr	r6, [r3, #0]
 8013b9c:	6862      	ldr	r2, [r4, #4]
 8013b9e:	2100      	movs	r1, #0
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	f7ec fb25 	bl	80001f0 <memchr>
 8013ba6:	b108      	cbz	r0, 8013bac <_printf_i+0x1e4>
 8013ba8:	1b80      	subs	r0, r0, r6
 8013baa:	6060      	str	r0, [r4, #4]
 8013bac:	6863      	ldr	r3, [r4, #4]
 8013bae:	6123      	str	r3, [r4, #16]
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bb6:	e7aa      	b.n	8013b0e <_printf_i+0x146>
 8013bb8:	6923      	ldr	r3, [r4, #16]
 8013bba:	4632      	mov	r2, r6
 8013bbc:	4649      	mov	r1, r9
 8013bbe:	4640      	mov	r0, r8
 8013bc0:	47d0      	blx	sl
 8013bc2:	3001      	adds	r0, #1
 8013bc4:	d0ad      	beq.n	8013b22 <_printf_i+0x15a>
 8013bc6:	6823      	ldr	r3, [r4, #0]
 8013bc8:	079b      	lsls	r3, r3, #30
 8013bca:	d413      	bmi.n	8013bf4 <_printf_i+0x22c>
 8013bcc:	68e0      	ldr	r0, [r4, #12]
 8013bce:	9b03      	ldr	r3, [sp, #12]
 8013bd0:	4298      	cmp	r0, r3
 8013bd2:	bfb8      	it	lt
 8013bd4:	4618      	movlt	r0, r3
 8013bd6:	e7a6      	b.n	8013b26 <_printf_i+0x15e>
 8013bd8:	2301      	movs	r3, #1
 8013bda:	4632      	mov	r2, r6
 8013bdc:	4649      	mov	r1, r9
 8013bde:	4640      	mov	r0, r8
 8013be0:	47d0      	blx	sl
 8013be2:	3001      	adds	r0, #1
 8013be4:	d09d      	beq.n	8013b22 <_printf_i+0x15a>
 8013be6:	3501      	adds	r5, #1
 8013be8:	68e3      	ldr	r3, [r4, #12]
 8013bea:	9903      	ldr	r1, [sp, #12]
 8013bec:	1a5b      	subs	r3, r3, r1
 8013bee:	42ab      	cmp	r3, r5
 8013bf0:	dcf2      	bgt.n	8013bd8 <_printf_i+0x210>
 8013bf2:	e7eb      	b.n	8013bcc <_printf_i+0x204>
 8013bf4:	2500      	movs	r5, #0
 8013bf6:	f104 0619 	add.w	r6, r4, #25
 8013bfa:	e7f5      	b.n	8013be8 <_printf_i+0x220>
 8013bfc:	08014e1b 	.word	0x08014e1b
 8013c00:	08014e2c 	.word	0x08014e2c

08013c04 <__sflush_r>:
 8013c04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c0c:	0716      	lsls	r6, r2, #28
 8013c0e:	4605      	mov	r5, r0
 8013c10:	460c      	mov	r4, r1
 8013c12:	d454      	bmi.n	8013cbe <__sflush_r+0xba>
 8013c14:	684b      	ldr	r3, [r1, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	dc02      	bgt.n	8013c20 <__sflush_r+0x1c>
 8013c1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	dd48      	ble.n	8013cb2 <__sflush_r+0xae>
 8013c20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c22:	2e00      	cmp	r6, #0
 8013c24:	d045      	beq.n	8013cb2 <__sflush_r+0xae>
 8013c26:	2300      	movs	r3, #0
 8013c28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013c2c:	682f      	ldr	r7, [r5, #0]
 8013c2e:	6a21      	ldr	r1, [r4, #32]
 8013c30:	602b      	str	r3, [r5, #0]
 8013c32:	d030      	beq.n	8013c96 <__sflush_r+0x92>
 8013c34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013c36:	89a3      	ldrh	r3, [r4, #12]
 8013c38:	0759      	lsls	r1, r3, #29
 8013c3a:	d505      	bpl.n	8013c48 <__sflush_r+0x44>
 8013c3c:	6863      	ldr	r3, [r4, #4]
 8013c3e:	1ad2      	subs	r2, r2, r3
 8013c40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013c42:	b10b      	cbz	r3, 8013c48 <__sflush_r+0x44>
 8013c44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013c46:	1ad2      	subs	r2, r2, r3
 8013c48:	2300      	movs	r3, #0
 8013c4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c4c:	6a21      	ldr	r1, [r4, #32]
 8013c4e:	4628      	mov	r0, r5
 8013c50:	47b0      	blx	r6
 8013c52:	1c43      	adds	r3, r0, #1
 8013c54:	89a3      	ldrh	r3, [r4, #12]
 8013c56:	d106      	bne.n	8013c66 <__sflush_r+0x62>
 8013c58:	6829      	ldr	r1, [r5, #0]
 8013c5a:	291d      	cmp	r1, #29
 8013c5c:	d82b      	bhi.n	8013cb6 <__sflush_r+0xb2>
 8013c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8013d08 <__sflush_r+0x104>)
 8013c60:	40ca      	lsrs	r2, r1
 8013c62:	07d6      	lsls	r6, r2, #31
 8013c64:	d527      	bpl.n	8013cb6 <__sflush_r+0xb2>
 8013c66:	2200      	movs	r2, #0
 8013c68:	6062      	str	r2, [r4, #4]
 8013c6a:	04d9      	lsls	r1, r3, #19
 8013c6c:	6922      	ldr	r2, [r4, #16]
 8013c6e:	6022      	str	r2, [r4, #0]
 8013c70:	d504      	bpl.n	8013c7c <__sflush_r+0x78>
 8013c72:	1c42      	adds	r2, r0, #1
 8013c74:	d101      	bne.n	8013c7a <__sflush_r+0x76>
 8013c76:	682b      	ldr	r3, [r5, #0]
 8013c78:	b903      	cbnz	r3, 8013c7c <__sflush_r+0x78>
 8013c7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8013c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013c7e:	602f      	str	r7, [r5, #0]
 8013c80:	b1b9      	cbz	r1, 8013cb2 <__sflush_r+0xae>
 8013c82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013c86:	4299      	cmp	r1, r3
 8013c88:	d002      	beq.n	8013c90 <__sflush_r+0x8c>
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	f7ff fca2 	bl	80135d4 <_free_r>
 8013c90:	2300      	movs	r3, #0
 8013c92:	6363      	str	r3, [r4, #52]	@ 0x34
 8013c94:	e00d      	b.n	8013cb2 <__sflush_r+0xae>
 8013c96:	2301      	movs	r3, #1
 8013c98:	4628      	mov	r0, r5
 8013c9a:	47b0      	blx	r6
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	1c50      	adds	r0, r2, #1
 8013ca0:	d1c9      	bne.n	8013c36 <__sflush_r+0x32>
 8013ca2:	682b      	ldr	r3, [r5, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d0c6      	beq.n	8013c36 <__sflush_r+0x32>
 8013ca8:	2b1d      	cmp	r3, #29
 8013caa:	d001      	beq.n	8013cb0 <__sflush_r+0xac>
 8013cac:	2b16      	cmp	r3, #22
 8013cae:	d11e      	bne.n	8013cee <__sflush_r+0xea>
 8013cb0:	602f      	str	r7, [r5, #0]
 8013cb2:	2000      	movs	r0, #0
 8013cb4:	e022      	b.n	8013cfc <__sflush_r+0xf8>
 8013cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cba:	b21b      	sxth	r3, r3
 8013cbc:	e01b      	b.n	8013cf6 <__sflush_r+0xf2>
 8013cbe:	690f      	ldr	r7, [r1, #16]
 8013cc0:	2f00      	cmp	r7, #0
 8013cc2:	d0f6      	beq.n	8013cb2 <__sflush_r+0xae>
 8013cc4:	0793      	lsls	r3, r2, #30
 8013cc6:	680e      	ldr	r6, [r1, #0]
 8013cc8:	bf08      	it	eq
 8013cca:	694b      	ldreq	r3, [r1, #20]
 8013ccc:	600f      	str	r7, [r1, #0]
 8013cce:	bf18      	it	ne
 8013cd0:	2300      	movne	r3, #0
 8013cd2:	eba6 0807 	sub.w	r8, r6, r7
 8013cd6:	608b      	str	r3, [r1, #8]
 8013cd8:	f1b8 0f00 	cmp.w	r8, #0
 8013cdc:	dde9      	ble.n	8013cb2 <__sflush_r+0xae>
 8013cde:	6a21      	ldr	r1, [r4, #32]
 8013ce0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013ce2:	4643      	mov	r3, r8
 8013ce4:	463a      	mov	r2, r7
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	47b0      	blx	r6
 8013cea:	2800      	cmp	r0, #0
 8013cec:	dc08      	bgt.n	8013d00 <__sflush_r+0xfc>
 8013cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cf6:	81a3      	strh	r3, [r4, #12]
 8013cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d00:	4407      	add	r7, r0
 8013d02:	eba8 0800 	sub.w	r8, r8, r0
 8013d06:	e7e7      	b.n	8013cd8 <__sflush_r+0xd4>
 8013d08:	20400001 	.word	0x20400001

08013d0c <_fflush_r>:
 8013d0c:	b538      	push	{r3, r4, r5, lr}
 8013d0e:	690b      	ldr	r3, [r1, #16]
 8013d10:	4605      	mov	r5, r0
 8013d12:	460c      	mov	r4, r1
 8013d14:	b913      	cbnz	r3, 8013d1c <_fflush_r+0x10>
 8013d16:	2500      	movs	r5, #0
 8013d18:	4628      	mov	r0, r5
 8013d1a:	bd38      	pop	{r3, r4, r5, pc}
 8013d1c:	b118      	cbz	r0, 8013d26 <_fflush_r+0x1a>
 8013d1e:	6a03      	ldr	r3, [r0, #32]
 8013d20:	b90b      	cbnz	r3, 8013d26 <_fflush_r+0x1a>
 8013d22:	f7ff fa91 	bl	8013248 <__sinit>
 8013d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d0f3      	beq.n	8013d16 <_fflush_r+0xa>
 8013d2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013d30:	07d0      	lsls	r0, r2, #31
 8013d32:	d404      	bmi.n	8013d3e <_fflush_r+0x32>
 8013d34:	0599      	lsls	r1, r3, #22
 8013d36:	d402      	bmi.n	8013d3e <_fflush_r+0x32>
 8013d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d3a:	f7ff fbde 	bl	80134fa <__retarget_lock_acquire_recursive>
 8013d3e:	4628      	mov	r0, r5
 8013d40:	4621      	mov	r1, r4
 8013d42:	f7ff ff5f 	bl	8013c04 <__sflush_r>
 8013d46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d48:	07da      	lsls	r2, r3, #31
 8013d4a:	4605      	mov	r5, r0
 8013d4c:	d4e4      	bmi.n	8013d18 <_fflush_r+0xc>
 8013d4e:	89a3      	ldrh	r3, [r4, #12]
 8013d50:	059b      	lsls	r3, r3, #22
 8013d52:	d4e1      	bmi.n	8013d18 <_fflush_r+0xc>
 8013d54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d56:	f7ff fbd1 	bl	80134fc <__retarget_lock_release_recursive>
 8013d5a:	e7dd      	b.n	8013d18 <_fflush_r+0xc>

08013d5c <__swbuf_r>:
 8013d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d5e:	460e      	mov	r6, r1
 8013d60:	4614      	mov	r4, r2
 8013d62:	4605      	mov	r5, r0
 8013d64:	b118      	cbz	r0, 8013d6e <__swbuf_r+0x12>
 8013d66:	6a03      	ldr	r3, [r0, #32]
 8013d68:	b90b      	cbnz	r3, 8013d6e <__swbuf_r+0x12>
 8013d6a:	f7ff fa6d 	bl	8013248 <__sinit>
 8013d6e:	69a3      	ldr	r3, [r4, #24]
 8013d70:	60a3      	str	r3, [r4, #8]
 8013d72:	89a3      	ldrh	r3, [r4, #12]
 8013d74:	071a      	lsls	r2, r3, #28
 8013d76:	d501      	bpl.n	8013d7c <__swbuf_r+0x20>
 8013d78:	6923      	ldr	r3, [r4, #16]
 8013d7a:	b943      	cbnz	r3, 8013d8e <__swbuf_r+0x32>
 8013d7c:	4621      	mov	r1, r4
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f000 f82a 	bl	8013dd8 <__swsetup_r>
 8013d84:	b118      	cbz	r0, 8013d8e <__swbuf_r+0x32>
 8013d86:	f04f 37ff 	mov.w	r7, #4294967295
 8013d8a:	4638      	mov	r0, r7
 8013d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d8e:	6823      	ldr	r3, [r4, #0]
 8013d90:	6922      	ldr	r2, [r4, #16]
 8013d92:	1a98      	subs	r0, r3, r2
 8013d94:	6963      	ldr	r3, [r4, #20]
 8013d96:	b2f6      	uxtb	r6, r6
 8013d98:	4283      	cmp	r3, r0
 8013d9a:	4637      	mov	r7, r6
 8013d9c:	dc05      	bgt.n	8013daa <__swbuf_r+0x4e>
 8013d9e:	4621      	mov	r1, r4
 8013da0:	4628      	mov	r0, r5
 8013da2:	f7ff ffb3 	bl	8013d0c <_fflush_r>
 8013da6:	2800      	cmp	r0, #0
 8013da8:	d1ed      	bne.n	8013d86 <__swbuf_r+0x2a>
 8013daa:	68a3      	ldr	r3, [r4, #8]
 8013dac:	3b01      	subs	r3, #1
 8013dae:	60a3      	str	r3, [r4, #8]
 8013db0:	6823      	ldr	r3, [r4, #0]
 8013db2:	1c5a      	adds	r2, r3, #1
 8013db4:	6022      	str	r2, [r4, #0]
 8013db6:	701e      	strb	r6, [r3, #0]
 8013db8:	6962      	ldr	r2, [r4, #20]
 8013dba:	1c43      	adds	r3, r0, #1
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d004      	beq.n	8013dca <__swbuf_r+0x6e>
 8013dc0:	89a3      	ldrh	r3, [r4, #12]
 8013dc2:	07db      	lsls	r3, r3, #31
 8013dc4:	d5e1      	bpl.n	8013d8a <__swbuf_r+0x2e>
 8013dc6:	2e0a      	cmp	r6, #10
 8013dc8:	d1df      	bne.n	8013d8a <__swbuf_r+0x2e>
 8013dca:	4621      	mov	r1, r4
 8013dcc:	4628      	mov	r0, r5
 8013dce:	f7ff ff9d 	bl	8013d0c <_fflush_r>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	d0d9      	beq.n	8013d8a <__swbuf_r+0x2e>
 8013dd6:	e7d6      	b.n	8013d86 <__swbuf_r+0x2a>

08013dd8 <__swsetup_r>:
 8013dd8:	b538      	push	{r3, r4, r5, lr}
 8013dda:	4b29      	ldr	r3, [pc, #164]	@ (8013e80 <__swsetup_r+0xa8>)
 8013ddc:	4605      	mov	r5, r0
 8013dde:	6818      	ldr	r0, [r3, #0]
 8013de0:	460c      	mov	r4, r1
 8013de2:	b118      	cbz	r0, 8013dec <__swsetup_r+0x14>
 8013de4:	6a03      	ldr	r3, [r0, #32]
 8013de6:	b90b      	cbnz	r3, 8013dec <__swsetup_r+0x14>
 8013de8:	f7ff fa2e 	bl	8013248 <__sinit>
 8013dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013df0:	0719      	lsls	r1, r3, #28
 8013df2:	d422      	bmi.n	8013e3a <__swsetup_r+0x62>
 8013df4:	06da      	lsls	r2, r3, #27
 8013df6:	d407      	bmi.n	8013e08 <__swsetup_r+0x30>
 8013df8:	2209      	movs	r2, #9
 8013dfa:	602a      	str	r2, [r5, #0]
 8013dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e00:	81a3      	strh	r3, [r4, #12]
 8013e02:	f04f 30ff 	mov.w	r0, #4294967295
 8013e06:	e033      	b.n	8013e70 <__swsetup_r+0x98>
 8013e08:	0758      	lsls	r0, r3, #29
 8013e0a:	d512      	bpl.n	8013e32 <__swsetup_r+0x5a>
 8013e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e0e:	b141      	cbz	r1, 8013e22 <__swsetup_r+0x4a>
 8013e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e14:	4299      	cmp	r1, r3
 8013e16:	d002      	beq.n	8013e1e <__swsetup_r+0x46>
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f7ff fbdb 	bl	80135d4 <_free_r>
 8013e1e:	2300      	movs	r3, #0
 8013e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e22:	89a3      	ldrh	r3, [r4, #12]
 8013e24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013e28:	81a3      	strh	r3, [r4, #12]
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	6063      	str	r3, [r4, #4]
 8013e2e:	6923      	ldr	r3, [r4, #16]
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	89a3      	ldrh	r3, [r4, #12]
 8013e34:	f043 0308 	orr.w	r3, r3, #8
 8013e38:	81a3      	strh	r3, [r4, #12]
 8013e3a:	6923      	ldr	r3, [r4, #16]
 8013e3c:	b94b      	cbnz	r3, 8013e52 <__swsetup_r+0x7a>
 8013e3e:	89a3      	ldrh	r3, [r4, #12]
 8013e40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013e48:	d003      	beq.n	8013e52 <__swsetup_r+0x7a>
 8013e4a:	4621      	mov	r1, r4
 8013e4c:	4628      	mov	r0, r5
 8013e4e:	f000 f83f 	bl	8013ed0 <__smakebuf_r>
 8013e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e56:	f013 0201 	ands.w	r2, r3, #1
 8013e5a:	d00a      	beq.n	8013e72 <__swsetup_r+0x9a>
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	60a2      	str	r2, [r4, #8]
 8013e60:	6962      	ldr	r2, [r4, #20]
 8013e62:	4252      	negs	r2, r2
 8013e64:	61a2      	str	r2, [r4, #24]
 8013e66:	6922      	ldr	r2, [r4, #16]
 8013e68:	b942      	cbnz	r2, 8013e7c <__swsetup_r+0xa4>
 8013e6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013e6e:	d1c5      	bne.n	8013dfc <__swsetup_r+0x24>
 8013e70:	bd38      	pop	{r3, r4, r5, pc}
 8013e72:	0799      	lsls	r1, r3, #30
 8013e74:	bf58      	it	pl
 8013e76:	6962      	ldrpl	r2, [r4, #20]
 8013e78:	60a2      	str	r2, [r4, #8]
 8013e7a:	e7f4      	b.n	8013e66 <__swsetup_r+0x8e>
 8013e7c:	2000      	movs	r0, #0
 8013e7e:	e7f7      	b.n	8013e70 <__swsetup_r+0x98>
 8013e80:	200000a0 	.word	0x200000a0

08013e84 <__swhatbuf_r>:
 8013e84:	b570      	push	{r4, r5, r6, lr}
 8013e86:	460c      	mov	r4, r1
 8013e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e8c:	2900      	cmp	r1, #0
 8013e8e:	b096      	sub	sp, #88	@ 0x58
 8013e90:	4615      	mov	r5, r2
 8013e92:	461e      	mov	r6, r3
 8013e94:	da0d      	bge.n	8013eb2 <__swhatbuf_r+0x2e>
 8013e96:	89a3      	ldrh	r3, [r4, #12]
 8013e98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013e9c:	f04f 0100 	mov.w	r1, #0
 8013ea0:	bf14      	ite	ne
 8013ea2:	2340      	movne	r3, #64	@ 0x40
 8013ea4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	6031      	str	r1, [r6, #0]
 8013eac:	602b      	str	r3, [r5, #0]
 8013eae:	b016      	add	sp, #88	@ 0x58
 8013eb0:	bd70      	pop	{r4, r5, r6, pc}
 8013eb2:	466a      	mov	r2, sp
 8013eb4:	f000 f848 	bl	8013f48 <_fstat_r>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	dbec      	blt.n	8013e96 <__swhatbuf_r+0x12>
 8013ebc:	9901      	ldr	r1, [sp, #4]
 8013ebe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013ec2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013ec6:	4259      	negs	r1, r3
 8013ec8:	4159      	adcs	r1, r3
 8013eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013ece:	e7eb      	b.n	8013ea8 <__swhatbuf_r+0x24>

08013ed0 <__smakebuf_r>:
 8013ed0:	898b      	ldrh	r3, [r1, #12]
 8013ed2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ed4:	079d      	lsls	r5, r3, #30
 8013ed6:	4606      	mov	r6, r0
 8013ed8:	460c      	mov	r4, r1
 8013eda:	d507      	bpl.n	8013eec <__smakebuf_r+0x1c>
 8013edc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013ee0:	6023      	str	r3, [r4, #0]
 8013ee2:	6123      	str	r3, [r4, #16]
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	6163      	str	r3, [r4, #20]
 8013ee8:	b003      	add	sp, #12
 8013eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eec:	ab01      	add	r3, sp, #4
 8013eee:	466a      	mov	r2, sp
 8013ef0:	f7ff ffc8 	bl	8013e84 <__swhatbuf_r>
 8013ef4:	9f00      	ldr	r7, [sp, #0]
 8013ef6:	4605      	mov	r5, r0
 8013ef8:	4639      	mov	r1, r7
 8013efa:	4630      	mov	r0, r6
 8013efc:	f7ff f87e 	bl	8012ffc <_malloc_r>
 8013f00:	b948      	cbnz	r0, 8013f16 <__smakebuf_r+0x46>
 8013f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f06:	059a      	lsls	r2, r3, #22
 8013f08:	d4ee      	bmi.n	8013ee8 <__smakebuf_r+0x18>
 8013f0a:	f023 0303 	bic.w	r3, r3, #3
 8013f0e:	f043 0302 	orr.w	r3, r3, #2
 8013f12:	81a3      	strh	r3, [r4, #12]
 8013f14:	e7e2      	b.n	8013edc <__smakebuf_r+0xc>
 8013f16:	89a3      	ldrh	r3, [r4, #12]
 8013f18:	6020      	str	r0, [r4, #0]
 8013f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f1e:	81a3      	strh	r3, [r4, #12]
 8013f20:	9b01      	ldr	r3, [sp, #4]
 8013f22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013f26:	b15b      	cbz	r3, 8013f40 <__smakebuf_r+0x70>
 8013f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f000 f81d 	bl	8013f6c <_isatty_r>
 8013f32:	b128      	cbz	r0, 8013f40 <__smakebuf_r+0x70>
 8013f34:	89a3      	ldrh	r3, [r4, #12]
 8013f36:	f023 0303 	bic.w	r3, r3, #3
 8013f3a:	f043 0301 	orr.w	r3, r3, #1
 8013f3e:	81a3      	strh	r3, [r4, #12]
 8013f40:	89a3      	ldrh	r3, [r4, #12]
 8013f42:	431d      	orrs	r5, r3
 8013f44:	81a5      	strh	r5, [r4, #12]
 8013f46:	e7cf      	b.n	8013ee8 <__smakebuf_r+0x18>

08013f48 <_fstat_r>:
 8013f48:	b538      	push	{r3, r4, r5, lr}
 8013f4a:	4d07      	ldr	r5, [pc, #28]	@ (8013f68 <_fstat_r+0x20>)
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	4604      	mov	r4, r0
 8013f50:	4608      	mov	r0, r1
 8013f52:	4611      	mov	r1, r2
 8013f54:	602b      	str	r3, [r5, #0]
 8013f56:	f7ed fd44 	bl	80019e2 <_fstat>
 8013f5a:	1c43      	adds	r3, r0, #1
 8013f5c:	d102      	bne.n	8013f64 <_fstat_r+0x1c>
 8013f5e:	682b      	ldr	r3, [r5, #0]
 8013f60:	b103      	cbz	r3, 8013f64 <_fstat_r+0x1c>
 8013f62:	6023      	str	r3, [r4, #0]
 8013f64:	bd38      	pop	{r3, r4, r5, pc}
 8013f66:	bf00      	nop
 8013f68:	20015618 	.word	0x20015618

08013f6c <_isatty_r>:
 8013f6c:	b538      	push	{r3, r4, r5, lr}
 8013f6e:	4d06      	ldr	r5, [pc, #24]	@ (8013f88 <_isatty_r+0x1c>)
 8013f70:	2300      	movs	r3, #0
 8013f72:	4604      	mov	r4, r0
 8013f74:	4608      	mov	r0, r1
 8013f76:	602b      	str	r3, [r5, #0]
 8013f78:	f7ed fd38 	bl	80019ec <_isatty>
 8013f7c:	1c43      	adds	r3, r0, #1
 8013f7e:	d102      	bne.n	8013f86 <_isatty_r+0x1a>
 8013f80:	682b      	ldr	r3, [r5, #0]
 8013f82:	b103      	cbz	r3, 8013f86 <_isatty_r+0x1a>
 8013f84:	6023      	str	r3, [r4, #0]
 8013f86:	bd38      	pop	{r3, r4, r5, pc}
 8013f88:	20015618 	.word	0x20015618

08013f8c <_init>:
 8013f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f8e:	bf00      	nop
 8013f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f92:	bc08      	pop	{r3}
 8013f94:	469e      	mov	lr, r3
 8013f96:	4770      	bx	lr

08013f98 <_fini>:
 8013f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f9a:	bf00      	nop
 8013f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f9e:	bc08      	pop	{r3}
 8013fa0:	469e      	mov	lr, r3
 8013fa2:	4770      	bx	lr
