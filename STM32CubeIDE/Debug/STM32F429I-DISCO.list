
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d24  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fa4  08013ed4  08013ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0004289a  08015e78  08015e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000002e8  08058714  08058714  00059714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000096  080589fc  080589fc  000599fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 00097838  08058a94  08058a94  00059a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080f02cc  080f02cc  000f20f4  2**0
                  CONTENTS
  8 .ARM          00000008  080f02cc  080f02cc  000f12cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080f02d4  080f02d4  000f20f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080f02d4  080f02d4  000f12d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080f02e8  080f02e8  000f12e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f4  20000000  080f02f0  000f2000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000156bc  200000f4  080f03e4  000f20f4  2**2
                  ALLOC
 14 ._user_heap_stack 00001400  200157b0  080f03e4  000f27b0  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000f20f4  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000f3000  2**2
                  ALLOC
 17 .debug_line   00055749  00000000  00000000  000f2124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000063  00000000  00000000  0014786d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000b8bdf  00000000  00000000  001478d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00014d85  00000000  00000000  002004af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003180  00000000  00000000  00215238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001132e9  00000000  00000000  002183b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 000038d3  00000000  00000000  0032b6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0001d79a  00000000  00000000  0032ef74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00010ecb  00000000  00000000  0034c70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0035d5d9  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00008cf4  00000000  00000000  0035d69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013ebc 	.word	0x08013ebc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	08013ebc 	.word	0x08013ebc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c2:	e003      	b.n	80005cc <LoopCopyDataInit>

080005c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ca:	3104      	adds	r1, #4

080005cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d4:	d3f6      	bcc.n	80005c4 <CopyDataInit>
  ldr  r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d8:	e002      	b.n	80005e0 <LoopFillZerobss>

080005da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005dc:	f842 3b04 	str.w	r3, [r2], #4

080005e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e4:	d3f9      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e6:	f004 f979 	bl	80048dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f012 fef9 	bl	80133e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f000 fc13 	bl	8000e18 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005f8:	080f02f0 	.word	0x080f02f0
  ldr  r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000600:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 8000604:	200000f4 	.word	0x200000f4
  ldr  r3, = _ebss
 8000608:	200157b0 	.word	0x200157b0

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <_ZN12TetrisEngine17generateNextBlockEv>:
    //random khối mới
    spawnBlock();
}

//tạo khối mới
void TetrisEngine::generateNextBlock() {
 8000610:	b510      	push	{r4, lr}
 8000612:	4604      	mov	r4, r0
    nextBlockId = osKernelGetTickCount() % 7;
 8000614:	f006 fcea 	bl	8006fec <osKernelGetTickCount>
 8000618:	2307      	movs	r3, #7
 800061a:	fbb0 f3f3 	udiv	r3, r0, r3
 800061e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000622:	1ac0      	subs	r0, r0, r3
 8000624:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
    nextBlockSize = (nextBlockId == 0) ? 4 : 3;
 8000628:	b1e8      	cbz	r0, 8000666 <_ZN12TetrisEngine17generateNextBlockEv+0x56>
    nextBlockSize = (nextBlockId == 1) ? 2 : nextBlockSize;
 800062a:	2801      	cmp	r0, #1
 800062c:	bf14      	ite	ne
 800062e:	2303      	movne	r3, #3
 8000630:	2302      	moveq	r3, #2
 8000632:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
    for (int i = 0; i < 4; ++i)
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <_ZN12TetrisEngine17generateNextBlockEv+0x5c>)
 8000638:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800063c:	eb03 1380 	add.w	r3, r3, r0, lsl #6
 8000640:	4620      	mov	r0, r4
        for (int j = 0; j < 4; ++j)
            nextBlock[i][j] = Tetrominoes[nextBlockId][i][j]; //đánh dấu các ô có thể hiển thị cho next block
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	f8c0 1380 	str.w	r1, [r0, #896]	@ 0x380
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	f8c0 1384 	str.w	r1, [r0, #900]	@ 0x384
 800064e:	6899      	ldr	r1, [r3, #8]
 8000650:	f8c0 1388 	str.w	r1, [r0, #904]	@ 0x388
 8000654:	68d9      	ldr	r1, [r3, #12]
 8000656:	f8c0 138c 	str.w	r1, [r0, #908]	@ 0x38c
    for (int i = 0; i < 4; ++i)
 800065a:	3010      	adds	r0, #16
 800065c:	4290      	cmp	r0, r2
 800065e:	f103 0310 	add.w	r3, r3, #16
 8000662:	d1ee      	bne.n	8000642 <_ZN12TetrisEngine17generateNextBlockEv+0x32>
}
 8000664:	bd10      	pop	{r4, pc}
    nextBlockSize = (nextBlockId == 0) ? 4 : 3;
 8000666:	2304      	movs	r3, #4
 8000668:	e7e3      	b.n	8000632 <_ZN12TetrisEngine17generateNextBlockEv+0x22>
 800066a:	bf00      	nop
 800066c:	08013f14 	.word	0x08013f14

08000670 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERi>:

//get next block (gán nextBlock và size nextBlock cho tham số truyền vào)
void TetrisEngine::getNextBlock(BlockMatrix& block, int& size) const {
 8000670:	b5f0      	push	{r4, r5, r6, r7, lr}
	block = nextBlock;
 8000672:	f500 7560 	add.w	r5, r0, #896	@ 0x380
void TetrisEngine::getNextBlock(BlockMatrix& block, int& size) const {
 8000676:	4606      	mov	r6, r0
 8000678:	4617      	mov	r7, r2
	block = nextBlock;
 800067a:	460c      	mov	r4, r1
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800068c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	size = nextBlockSize;
 8000690:	f8d6 3378 	ldr.w	r3, [r6, #888]	@ 0x378
 8000694:	603b      	str	r3, [r7, #0]
}
 8000696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000698 <_ZN12TetrisEngine10spawnBlockEv>:

//gán khối mới cho khối hiện tại
void TetrisEngine::spawnBlock() {
    if (nextBlockId == -1) generateNextBlock(); // Spawn đầu
 8000698:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 800069c:	3301      	adds	r3, #1
void TetrisEngine::spawnBlock() {
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
    if (nextBlockId == -1) generateNextBlock(); // Spawn đầu
 80006a2:	d101      	bne.n	80006a8 <_ZN12TetrisEngine10spawnBlockEv+0x10>
 80006a4:	f7ff ffb4 	bl	8000610 <_ZN12TetrisEngine17generateNextBlockEv>
    for (int i = 0; i < 4; ++i)
 80006a8:	4623      	mov	r3, r4
 80006aa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
        for (int j = 0; j < 4; ++j)
            currBlock[i][j] = nextBlock[i][j];	//gán nextBlock cho currBlock
 80006ae:	f8d3 1380 	ldr.w	r1, [r3, #896]	@ 0x380
 80006b2:	f8c3 1320 	str.w	r1, [r3, #800]	@ 0x320
 80006b6:	f8d3 1384 	ldr.w	r1, [r3, #900]	@ 0x384
 80006ba:	f8c3 1324 	str.w	r1, [r3, #804]	@ 0x324
 80006be:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80006c2:	f8c3 1328 	str.w	r1, [r3, #808]	@ 0x328
 80006c6:	f8d3 138c 	ldr.w	r1, [r3, #908]	@ 0x38c
 80006ca:	f8c3 132c 	str.w	r1, [r3, #812]	@ 0x32c
    for (int i = 0; i < 4; ++i)
 80006ce:	3310      	adds	r3, #16
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d1ec      	bne.n	80006ae <_ZN12TetrisEngine10spawnBlockEv+0x16>
    blockSize = nextBlockSize;
 80006d4:	f8d4 3378 	ldr.w	r3, [r4, #888]	@ 0x378
 80006d8:	f8c4 3368 	str.w	r3, [r4, #872]	@ 0x368

    //bắt đầu rơi tại vị trí giữa trên cùng
    currX = (GRID_WIDTH - blockSize) / 2;
 80006dc:	f1c3 030a 	rsb	r3, r3, #10
 80006e0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80006e4:	105b      	asrs	r3, r3, #1
 80006e6:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    currY = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c4 3364 	str.w	r3, [r4, #868]	@ 0x364
    generateNextBlock(); // Tạo khối tiếp theo
 80006f0:	4620      	mov	r0, r4
}
 80006f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    generateNextBlock(); // Tạo khối tiếp theo
 80006f6:	f7ff bf8b 	b.w	8000610 <_ZN12TetrisEngine17generateNextBlockEv>

080006fa <_ZN12TetrisEngine4initEv>:
void TetrisEngine::init() {
 80006fa:	b510      	push	{r4, lr}
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 80006fc:	4603      	mov	r3, r0
 80006fe:	4604      	mov	r4, r0
      { return iterator(data() + _Nm); }
 8000700:	f500 7148 	add.w	r1, r0, #800	@ 0x320
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
 8000704:	2000      	movs	r0, #0
    for (auto& row : grid) row.fill(0);
 8000706:	428b      	cmp	r3, r1
 8000708:	d110      	bne.n	800072c <_ZN12TetrisEngine4initEv+0x32>
    gameOver = false;
 800070a:	2300      	movs	r3, #0
 800070c:	f884 336c 	strb.w	r3, [r4, #876]	@ 0x36c
    score = 0;
 8000710:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
	nextBlockId = -1;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
	generateNextBlock();
 8000718:	4620      	mov	r0, r4
	nextBlockId = -1;
 800071a:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
	generateNextBlock();
 800071e:	f7ff ff77 	bl	8000610 <_ZN12TetrisEngine17generateNextBlockEv>
    spawnBlock();
 8000722:	4620      	mov	r0, r4
}
 8000724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spawnBlock();
 8000728:	f7ff bfb6 	b.w	8000698 <_ZN12TetrisEngine10spawnBlockEv>
      { return static_cast<pointer>(_M_elems); }
 800072c:	461a      	mov	r2, r3
      if (__n <= 0)
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 800072e:	3328      	adds	r3, #40	@ 0x28
      for (; __first != __last; ++__first)
 8000730:	4293      	cmp	r3, r2
 8000732:	d0e8      	beq.n	8000706 <_ZN12TetrisEngine4initEv+0xc>
	*__first = __tmp;
 8000734:	f842 0b04 	str.w	r0, [r2], #4
 8000738:	e7fa      	b.n	8000730 <_ZN12TetrisEngine4initEv+0x36>

0800073a <_ZN12TetrisEngineC1Ev>:
TetrisEngine::TetrisEngine() {
 800073a:	b510      	push	{r4, lr}
 800073c:	4604      	mov	r4, r0
	init();
 800073e:	f7ff ffdc 	bl	80006fa <_ZN12TetrisEngine4initEv>
}
 8000742:	4620      	mov	r0, r4
 8000744:	bd10      	pop	{r4, pc}

08000746 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE>:

//xoay block
void TetrisEngine::rotateMatrix(BlockMatrix& mat) {
 8000746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000748:	4605      	mov	r5, r0
 800074a:	b091      	sub	sp, #68	@ 0x44
 800074c:	460c      	mov	r4, r1
    BlockMatrix temp = {};
 800074e:	2240      	movs	r2, #64	@ 0x40
 8000750:	2100      	movs	r1, #0
 8000752:	4668      	mov	r0, sp
 8000754:	f012 fd9b 	bl	801328e <memset>
    for (int i = 0; i < blockSize; ++i)
 8000758:	f8d5 2368 	ldr.w	r2, [r5, #872]	@ 0x368
 800075c:	2300      	movs	r3, #0
 800075e:	eb0d 0182 	add.w	r1, sp, r2, lsl #2
 8000762:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8000766:	429a      	cmp	r2, r3
 8000768:	dc0c      	bgt.n	8000784 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x3e>
        for (int j = 0; j < blockSize; ++j)
            temp[j][blockSize - 1 - i] = mat[i][j];
    mat = temp;
 800076a:	466d      	mov	r5, sp
 800076c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800077c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000780:	b011      	add	sp, #68	@ 0x44
 8000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000784:	eb04 1503 	add.w	r5, r4, r3, lsl #4
    for (int i = 0; i < blockSize; ++i)
 8000788:	460e      	mov	r6, r1
            temp[j][blockSize - 1 - i] = mat[i][j];
 800078a:	f855 7b04 	ldr.w	r7, [r5], #4
 800078e:	f846 7c04 	str.w	r7, [r6, #-4]
        for (int j = 0; j < blockSize; ++j)
 8000792:	4285      	cmp	r5, r0
 8000794:	f106 0610 	add.w	r6, r6, #16
 8000798:	d1f7      	bne.n	800078a <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x44>
    for (int i = 0; i < blockSize; ++i)
 800079a:	3301      	adds	r3, #1
 800079c:	3904      	subs	r1, #4
 800079e:	3010      	adds	r0, #16
 80007a0:	e7e1      	b.n	8000766 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x20>

080007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>:

//lấy đường biên của block
void TetrisEngine::getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY) {
 80007a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    minX = blockSize; maxX = 0; minY = blockSize; maxY = 0;
 80007a4:	f8d0 4368 	ldr.w	r4, [r0, #872]	@ 0x368
 80007a8:	6014      	str	r4, [r2, #0]
void TetrisEngine::getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY) {
 80007aa:	e9dd 6c05 	ldrd	r6, ip, [sp, #20]
    minX = blockSize; maxX = 0; minY = blockSize; maxY = 0;
 80007ae:	2400      	movs	r4, #0
 80007b0:	601c      	str	r4, [r3, #0]
 80007b2:	f8d0 5368 	ldr.w	r5, [r0, #872]	@ 0x368
 80007b6:	6035      	str	r5, [r6, #0]
 80007b8:	f8cc 4000 	str.w	r4, [ip]
    for (int i = 0; i < blockSize; ++i)
 80007bc:	f8d0 5368 	ldr.w	r5, [r0, #872]	@ 0x368
 80007c0:	42a5      	cmp	r5, r4
 80007c2:	dd1f      	ble.n	8000804 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x62>
 80007c4:	eb01 1e04 	add.w	lr, r1, r4, lsl #4
        for (int j = 0; j < blockSize; ++j)
 80007c8:	2500      	movs	r5, #0
 80007ca:	e015      	b.n	80007f8 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x56>
            if (block[i][j]) {
 80007cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80007d0:	b18f      	cbz	r7, 80007f6 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x54>
                if (j < minX) minX = j;
 80007d2:	6817      	ldr	r7, [r2, #0]
 80007d4:	42af      	cmp	r7, r5
 80007d6:	bfc8      	it	gt
 80007d8:	6015      	strgt	r5, [r2, #0]
                if (j > maxX) maxX = j;
 80007da:	681f      	ldr	r7, [r3, #0]
 80007dc:	42af      	cmp	r7, r5
 80007de:	bfb8      	it	lt
 80007e0:	601d      	strlt	r5, [r3, #0]
                if (i < minY) minY = i;
 80007e2:	6837      	ldr	r7, [r6, #0]
 80007e4:	42a7      	cmp	r7, r4
 80007e6:	bfc8      	it	gt
 80007e8:	6034      	strgt	r4, [r6, #0]
                if (i > maxY) maxY = i;
 80007ea:	f8dc 7000 	ldr.w	r7, [ip]
 80007ee:	42a7      	cmp	r7, r4
 80007f0:	bfb8      	it	lt
 80007f2:	f8cc 4000 	strlt.w	r4, [ip]
        for (int j = 0; j < blockSize; ++j)
 80007f6:	3501      	adds	r5, #1
 80007f8:	f8d0 7368 	ldr.w	r7, [r0, #872]	@ 0x368
 80007fc:	42af      	cmp	r7, r5
 80007fe:	dce5      	bgt.n	80007cc <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x2a>
    for (int i = 0; i < blockSize; ++i)
 8000800:	3401      	adds	r4, #1
 8000802:	e7db      	b.n	80007bc <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x1a>
            }
}
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>:

//kiểm tra va trạm
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800080a:	b087      	sub	sp, #28
 800080c:	460e      	mov	r6, r1
 800080e:	4619      	mov	r1, r3
    int minX, maxX, minY, maxY;

    //lấy bao ngoài của block
    getBlockBounds(block, minX, maxX, minY, maxY);
 8000810:	ab05      	add	r3, sp, #20
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	ab04      	add	r3, sp, #16
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000816:	4614      	mov	r4, r2
    getBlockBounds(block, minX, maxX, minY, maxY);
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	aa02      	add	r2, sp, #8
 800081c:	ab03      	add	r3, sp, #12
 800081e:	f7ff ffc0 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000822:	4605      	mov	r5, r0
    for (int i = minY; i <= maxY; ++i)
 8000824:	e9dd 0e04 	ldrd	r0, lr, [sp, #16]
        for (int j = minX; j <= maxX; ++j)
 8000828:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800082c:	1902      	adds	r2, r0, r4
 800082e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8000832:	f04f 0828 	mov.w	r8, #40	@ 0x28
    for (int i = minY; i <= maxY; ++i)
 8000836:	4586      	cmp	lr, r0
 8000838:	db1c      	blt.n	8000874 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x6e>
 800083a:	eb01 1900 	add.w	r9, r1, r0, lsl #4
 800083e:	fb08 5702 	mla	r7, r8, r2, r5
        for (int j = minX; j <= maxX; ++j)
 8000842:	465c      	mov	r4, fp
 8000844:	e00d      	b.n	8000862 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x5c>
            if (block[i][j]) {
 8000846:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 800084a:	b14b      	cbz	r3, 8000860 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x5a>
                int gx = newX + j;
                int gy = newY + i;

                //ra ngoài hoặc ô đã được đặt -> va chạm -> return true
                if (gx < 0 || gx >= GRID_WIDTH || gy < 0 || gy >= GRID_HEIGHT) return true;
 800084c:	eb04 0a06 	add.w	sl, r4, r6
 8000850:	f1ba 0f09 	cmp.w	sl, #9
 8000854:	d80a      	bhi.n	800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
 8000856:	2a13      	cmp	r2, #19
 8000858:	d808      	bhi.n	800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
                if (grid[gy][gx]) return true;
 800085a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800085e:	b92b      	cbnz	r3, 800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
        for (int j = minX; j <= maxX; ++j)
 8000860:	3401      	adds	r4, #1
 8000862:	45a4      	cmp	ip, r4
 8000864:	daef      	bge.n	8000846 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x40>
    for (int i = minY; i <= maxY; ++i)
 8000866:	3001      	adds	r0, #1
 8000868:	3201      	adds	r2, #1
 800086a:	e7e4      	b.n	8000836 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x30>
                if (gx < 0 || gx >= GRID_WIDTH || gy < 0 || gy >= GRID_HEIGHT) return true;
 800086c:	2001      	movs	r0, #1
            }
    return false;
}
 800086e:	b007      	add	sp, #28
 8000870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
 8000874:	2000      	movs	r0, #0
 8000876:	e7fa      	b.n	800086e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x68>

08000878 <_ZN12TetrisEngine10clearLinesEv>:
    clearLines();
    spawnBlock();
}

//xóa line nếu full
void TetrisEngine::clearLines() {
 8000878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800087c:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 8000880:	4606      	mov	r6, r0
    for (int y = GRID_HEIGHT - 1; y >= 0; --y) {
 8000882:	2713      	movs	r7, #19
        bool full = true;
        for (int x = 0; x < GRID_WIDTH; ++x)
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng

        if (full) {
        	takeScore = true;
 8000884:	f04f 0901 	mov.w	r9, #1
 8000888:	eb00 080e 	add.w	r8, r0, lr
 800088c:	f04f 0a00 	mov.w	sl, #0
        for (int x = 0; x < GRID_WIDTH; ++x)
 8000890:	fb0e 6107 	mla	r1, lr, r7, r6
 8000894:	2200      	movs	r2, #0
        bool full = true;
 8000896:	2301      	movs	r3, #1
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng
 8000898:	f851 0b04 	ldr.w	r0, [r1], #4
        for (int x = 0; x < GRID_WIDTH; ++x)
 800089c:	3201      	adds	r2, #1
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf08      	it	eq
 80008a2:	2300      	moveq	r3, #0
        for (int x = 0; x < GRID_WIDTH; ++x)
 80008a4:	2a0a      	cmp	r2, #10
 80008a6:	d1f7      	bne.n	8000898 <_ZN12TetrisEngine10clearLinesEv+0x20>
        if (full) {
 80008a8:	b303      	cbz	r3, 80008ec <_ZN12TetrisEngine10clearLinesEv+0x74>
        	score++; //tăng điểm
 80008aa:	f8d6 3370 	ldr.w	r3, [r6, #880]	@ 0x370
        	takeScore = true;
 80008ae:	f886 9374 	strb.w	r9, [r6, #884]	@ 0x374
        	score++; //tăng điểm
 80008b2:	3301      	adds	r3, #1
 80008b4:	f8c6 3370 	str.w	r3, [r6, #880]	@ 0x370
            for (int row = y; row > 0; --row)
 80008b8:	46bc      	mov	ip, r7
 80008ba:	f1bc 0f00 	cmp.w	ip, #0
 80008be:	d105      	bne.n	80008cc <_ZN12TetrisEngine10clearLinesEv+0x54>
 80008c0:	4633      	mov	r3, r6
      for (; __first != __last; ++__first)
 80008c2:	4598      	cmp	r8, r3
 80008c4:	d0e4      	beq.n	8000890 <_ZN12TetrisEngine10clearLinesEv+0x18>
	*__first = __tmp;
 80008c6:	f843 ab04 	str.w	sl, [r3], #4
 80008ca:	e7fa      	b.n	80008c2 <_ZN12TetrisEngine10clearLinesEv+0x4a>
                grid[row] = grid[row - 1];
 80008cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80008d0:	fb0e f40c 	mul.w	r4, lr, ip
 80008d4:	eb08 0504 	add.w	r5, r8, r4
 80008d8:	4434      	add	r4, r6
 80008da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008e6:	e885 0003 	stmia.w	r5, {r0, r1}
            for (int row = y; row > 0; --row)
 80008ea:	e7e6      	b.n	80008ba <_ZN12TetrisEngine10clearLinesEv+0x42>
    for (int y = GRID_HEIGHT - 1; y >= 0; --y) {
 80008ec:	3f01      	subs	r7, #1
 80008ee:	d2cf      	bcs.n	8000890 <_ZN12TetrisEngine10clearLinesEv+0x18>
            grid[0].fill(0);
            ++y; // re-check this row
        }
    }
}
 80008f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080008f4 <_ZN12TetrisEngine9lockBlockEv>:
void TetrisEngine::lockBlock() {
 80008f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < blockSize; ++i)
 80008f6:	f8d0 6368 	ldr.w	r6, [r0, #872]	@ 0x368
void TetrisEngine::lockBlock() {
 80008fa:	4604      	mov	r4, r0
 80008fc:	f500 7547 	add.w	r5, r0, #796	@ 0x31c
    for (int i = 0; i < blockSize; ++i)
 8000900:	2200      	movs	r2, #0
                    grid[gy][gx] = 1;
 8000902:	f04f 0c0a 	mov.w	ip, #10
 8000906:	f04f 0e01 	mov.w	lr, #1
    for (int i = 0; i < blockSize; ++i)
 800090a:	4296      	cmp	r6, r2
 800090c:	dc07      	bgt.n	800091e <_ZN12TetrisEngine9lockBlockEv+0x2a>
    clearLines();
 800090e:	4620      	mov	r0, r4
 8000910:	f7ff ffb2 	bl	8000878 <_ZN12TetrisEngine10clearLinesEv>
    spawnBlock();
 8000914:	4620      	mov	r0, r4
}
 8000916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    spawnBlock();
 800091a:	f7ff bebd 	b.w	8000698 <_ZN12TetrisEngine10spawnBlockEv>
 800091e:	462f      	mov	r7, r5
        for (int j = 0; j < blockSize; ++j)
 8000920:	2100      	movs	r1, #0
            if (currBlock[i][j]) {
 8000922:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8000926:	b16b      	cbz	r3, 8000944 <_ZN12TetrisEngine9lockBlockEv+0x50>
                int gy = currY + i;
 8000928:	f8d4 0364 	ldr.w	r0, [r4, #868]	@ 0x364
 800092c:	4410      	add	r0, r2
                if (gy >= 0 && gy < GRID_HEIGHT && gx >= 0 && gx < GRID_WIDTH)
 800092e:	2813      	cmp	r0, #19
 8000930:	d808      	bhi.n	8000944 <_ZN12TetrisEngine9lockBlockEv+0x50>
                int gx = currX + j;
 8000932:	f8d4 3360 	ldr.w	r3, [r4, #864]	@ 0x360
 8000936:	440b      	add	r3, r1
                if (gy >= 0 && gy < GRID_HEIGHT && gx >= 0 && gx < GRID_WIDTH)
 8000938:	2b09      	cmp	r3, #9
                    grid[gy][gx] = 1;
 800093a:	bf9c      	itt	ls
 800093c:	fb0c 3300 	mlals	r3, ip, r0, r3
 8000940:	f844 e023 	strls.w	lr, [r4, r3, lsl #2]
        for (int j = 0; j < blockSize; ++j)
 8000944:	3101      	adds	r1, #1
 8000946:	428e      	cmp	r6, r1
 8000948:	d1eb      	bne.n	8000922 <_ZN12TetrisEngine9lockBlockEv+0x2e>
    for (int i = 0; i < blockSize; ++i)
 800094a:	3201      	adds	r2, #1
 800094c:	3510      	adds	r5, #16
 800094e:	e7dc      	b.n	800090a <_ZN12TetrisEngine9lockBlockEv+0x16>

08000950 <_ZN12TetrisEngine6updateEv>:

//check va chạm + khóa khối nếu được
void TetrisEngine::update() {
 8000950:	b538      	push	{r3, r4, r5, lr}
	if(!gameOver){
 8000952:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::update() {
 8000956:	4604      	mov	r4, r0
	if(!gameOver){
 8000958:	b963      	cbnz	r3, 8000974 <_ZN12TetrisEngine6updateEv+0x24>
		if (!checkCollision(currX, currY + 1, currBlock))
 800095a:	f8d0 5364 	ldr.w	r5, [r0, #868]	@ 0x364
 800095e:	f8d0 1360 	ldr.w	r1, [r0, #864]	@ 0x360
 8000962:	3501      	adds	r5, #1
 8000964:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 8000968:	462a      	mov	r2, r5
 800096a:	f7ff ff4c 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 800096e:	b910      	cbnz	r0, 8000976 <_ZN12TetrisEngine6updateEv+0x26>
			currY++;
 8000970:	f8c4 5364 	str.w	r5, [r4, #868]	@ 0x364
			for(int i = 0; i < GRID_WIDTH; i++)
				if(grid[0][i]) gameOver = true;
		}
	}

}
 8000974:	bd38      	pop	{r3, r4, r5, pc}
			lockBlock();
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff ffbc 	bl	80008f4 <_ZN12TetrisEngine9lockBlockEv>
			for(int i = 0; i < GRID_WIDTH; i++)
 800097c:	1f23      	subs	r3, r4, #4
 800097e:	f104 0224 	add.w	r2, r4, #36	@ 0x24
				if(grid[0][i]) gameOver = true;
 8000982:	2101      	movs	r1, #1
 8000984:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8000988:	b108      	cbz	r0, 800098e <_ZN12TetrisEngine6updateEv+0x3e>
 800098a:	f884 136c 	strb.w	r1, [r4, #876]	@ 0x36c
			for(int i = 0; i < GRID_WIDTH; i++)
 800098e:	4293      	cmp	r3, r2
 8000990:	d1f8      	bne.n	8000984 <_ZN12TetrisEngine6updateEv+0x34>
 8000992:	e7ef      	b.n	8000974 <_ZN12TetrisEngine6updateEv+0x24>

08000994 <_ZN12TetrisEngine8moveLeftEv>:

//di chuyển trái
void TetrisEngine::moveLeft() {
 8000994:	b538      	push	{r3, r4, r5, lr}
	if(gameOver) return;
 8000996:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::moveLeft() {
 800099a:	4604      	mov	r4, r0
	if(gameOver) return;
 800099c:	b963      	cbnz	r3, 80009b8 <_ZN12TetrisEngine8moveLeftEv+0x24>
    if (!checkCollision(currX - 1, currY, currBlock)) currX--;
 800099e:	f8d0 5360 	ldr.w	r5, [r0, #864]	@ 0x360
 80009a2:	f8d0 2364 	ldr.w	r2, [r0, #868]	@ 0x364
 80009a6:	3d01      	subs	r5, #1
 80009a8:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 80009ac:	4629      	mov	r1, r5
 80009ae:	f7ff ff2a 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 80009b2:	b908      	cbnz	r0, 80009b8 <_ZN12TetrisEngine8moveLeftEv+0x24>
 80009b4:	f8c4 5360 	str.w	r5, [r4, #864]	@ 0x360
}
 80009b8:	bd38      	pop	{r3, r4, r5, pc}

080009ba <_ZN12TetrisEngine9moveRightEv>:

//di chuyển phải
void TetrisEngine::moveRight() {
 80009ba:	b538      	push	{r3, r4, r5, lr}
	if(gameOver) return;
 80009bc:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::moveRight() {
 80009c0:	4604      	mov	r4, r0
	if(gameOver) return;
 80009c2:	b963      	cbnz	r3, 80009de <_ZN12TetrisEngine9moveRightEv+0x24>
    if (!checkCollision(currX + 1, currY, currBlock)) currX++;
 80009c4:	f8d0 5360 	ldr.w	r5, [r0, #864]	@ 0x360
 80009c8:	f8d0 2364 	ldr.w	r2, [r0, #868]	@ 0x364
 80009cc:	3501      	adds	r5, #1
 80009ce:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 80009d2:	4629      	mov	r1, r5
 80009d4:	f7ff ff17 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 80009d8:	b908      	cbnz	r0, 80009de <_ZN12TetrisEngine9moveRightEv+0x24>
 80009da:	f8c4 5360 	str.w	r5, [r4, #864]	@ 0x360
}
 80009de:	bd38      	pop	{r3, r4, r5, pc}

080009e0 <_ZN12TetrisEngine4dropEv>:

//thả block
void TetrisEngine::drop() {
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(gameOver) return;
 80009e2:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::drop() {
 80009e6:	4604      	mov	r4, r0
	if(gameOver) return;
 80009e8:	b9ab      	cbnz	r3, 8000a16 <_ZN12TetrisEngine4dropEv+0x36>
    while (!checkCollision(currX, currY + 1, currBlock)) currY++;
 80009ea:	f8d0 6360 	ldr.w	r6, [r0, #864]	@ 0x360
 80009ee:	f500 7748 	add.w	r7, r0, #800	@ 0x320
 80009f2:	f8d4 5364 	ldr.w	r5, [r4, #868]	@ 0x364
 80009f6:	3501      	adds	r5, #1
 80009f8:	463b      	mov	r3, r7
 80009fa:	462a      	mov	r2, r5
 80009fc:	4631      	mov	r1, r6
 80009fe:	4620      	mov	r0, r4
 8000a00:	f7ff ff01 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a04:	b120      	cbz	r0, 8000a10 <_ZN12TetrisEngine4dropEv+0x30>
    lockBlock();
 8000a06:	4620      	mov	r0, r4
}
 8000a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lockBlock();
 8000a0c:	f7ff bf72 	b.w	80008f4 <_ZN12TetrisEngine9lockBlockEv>
    while (!checkCollision(currX, currY + 1, currBlock)) currY++;
 8000a10:	f8c4 5364 	str.w	r5, [r4, #868]	@ 0x364
 8000a14:	e7ed      	b.n	80009f2 <_ZN12TetrisEngine4dropEv+0x12>
}
 8000a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a18 <_ZN12TetrisEngine6rotateEv>:

//xoay block
void TetrisEngine::rotate() {
 8000a18:	b570      	push	{r4, r5, r6, lr}
	if(gameOver) return;
 8000a1a:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::rotate() {
 8000a1e:	b090      	sub	sp, #64	@ 0x40
 8000a20:	4604      	mov	r4, r0
	if(gameOver) return;
 8000a22:	bb23      	cbnz	r3, 8000a6e <_ZN12TetrisEngine6rotateEv+0x56>
    BlockMatrix temp = currBlock;
 8000a24:	f500 7648 	add.w	r6, r0, #800	@ 0x320
 8000a28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a2a:	466d      	mov	r5, sp
 8000a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a36:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    rotateMatrix(temp);
 8000a3e:	4620      	mov	r0, r4
 8000a40:	4669      	mov	r1, sp
 8000a42:	f7ff fe80 	bl	8000746 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE>
    if (!checkCollision(currX, currY, temp))
 8000a46:	e9d4 12d8 	ldrd	r1, r2, [r4, #864]	@ 0x360
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	466b      	mov	r3, sp
 8000a4e:	f7ff feda 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a52:	f504 7448 	add.w	r4, r4, #800	@ 0x320
 8000a56:	b950      	cbnz	r0, 8000a6e <_ZN12TetrisEngine6rotateEv+0x56>
        currBlock = temp;
 8000a58:	466d      	mov	r5, sp
 8000a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000a6e:	b010      	add	sp, #64	@ 0x40
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a74 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 8000a74:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <SPI5_Write+0x1c>)
{
 8000a78:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <SPI5_Write+0x20>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	f10d 0106 	add.w	r1, sp, #6
 8000a86:	f005 fd0b 	bl	80064a0 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8000a8a:	b003      	add	sp, #12
 8000a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a90:	20000004 	.word	0x20000004
 8000a94:	200001a8 	.word	0x200001a8

08000a98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osDelay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f006 fb7e 	bl	800719c <osDelay>
  for(;;)
 8000aa0:	e7fb      	b.n	8000a9a <StartDefaultTask+0x2>
	...

08000aa4 <MovingTask>:
  }
  /* USER CODE END 5 */
}


void MovingTask(void *argument){
 8000aa4:	b538      	push	{r3, r4, r5, lr}
	for(;;){
        uint32_t evt = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
        if (evt & 0x01)
        {
            if (last_button != 0)
 8000aa6:	4c0d      	ldr	r4, [pc, #52]	@ (8000adc <MovingTask+0x38>)
            {
            	if(osMessageQueueGetCount(movingQueueHandle) < 1)
 8000aa8:	4d0d      	ldr	r5, [pc, #52]	@ (8000ae0 <MovingTask+0x3c>)
        uint32_t evt = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f006 fb25 	bl	8007100 <osThreadFlagsWait>
        if (evt & 0x01)
 8000ab6:	07c3      	lsls	r3, r0, #31
 8000ab8:	d5f7      	bpl.n	8000aaa <MovingTask+0x6>
            if (last_button != 0)
 8000aba:	7823      	ldrb	r3, [r4, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f4      	beq.n	8000aaa <MovingTask+0x6>
            	if(osMessageQueueGetCount(movingQueueHandle) < 1)
 8000ac0:	6828      	ldr	r0, [r5, #0]
 8000ac2:	f006 fcbb 	bl	800743c <osMessageQueueGetCount>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	b920      	cbnz	r0, 8000ad4 <MovingTask+0x30>
            		osMessageQueuePut(movingQueueHandle, &last_button, 0, 10);
 8000aca:	6828      	ldr	r0, [r5, #0]
 8000acc:	230a      	movs	r3, #10
 8000ace:	4621      	mov	r1, r4
 8000ad0:	f006 fc53 	bl	800737a <osMessageQueuePut>
                last_button = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	7023      	strb	r3, [r4, #0]
 8000ad8:	e7e7      	b.n	8000aaa <MovingTask+0x6>
 8000ada:	bf00      	nop
 8000adc:	20000128 	.word	0x20000128
 8000ae0:	20000118 	.word	0x20000118

08000ae4 <SystemClock_Config>:
{
 8000ae4:	b530      	push	{r4, r5, lr}
 8000ae6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae8:	2210      	movs	r2, #16
 8000aea:	2100      	movs	r1, #0
 8000aec:	a80a      	add	r0, sp, #40	@ 0x28
 8000aee:	f012 fbce 	bl	801328e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af2:	2214      	movs	r2, #20
 8000af4:	2100      	movs	r1, #0
 8000af6:	a803      	add	r0, sp, #12
 8000af8:	f012 fbc9 	bl	801328e <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afc:	2400      	movs	r4, #0
 8000afe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <SystemClock_Config+0x90>)
 8000b00:	9401      	str	r4, [sp, #4]
 8000b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b04:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <SystemClock_Config+0x94>)
 8000b16:	9402      	str	r4, [sp, #8]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b26:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b30:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b34:	2502      	movs	r5, #2
 8000b36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b3a:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b3e:	2108      	movs	r1, #8
 8000b40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b44:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b4e:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f004 ff66 	bl	8005a20 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b54:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b62:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b66:	2105      	movs	r1, #5
 8000b68:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b6c:	f005 f934 	bl	8005dd8 <HAL_RCC_ClockConfig>
}
 8000b70:	b015      	add	sp, #84	@ 0x54
 8000b72:	bd30      	pop	{r4, r5, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <IOE_Init>:
void IOE_Init(void)
 8000b7c:	4770      	bx	lr

08000b7e <IOE_ITConfig>:
void IOE_ITConfig(void)
 8000b7e:	4770      	bx	lr

08000b80 <IOE_Write>:
{
 8000b80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <IOE_Write+0x28>)
 8000b84:	f88d 2017 	strb.w	r2, [sp, #23]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	f10d 0217 	add.w	r2, sp, #23
 8000b90:	2301      	movs	r3, #1
 8000b92:	9200      	str	r2, [sp, #0]
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	460a      	mov	r2, r1
 8000b98:	4601      	mov	r1, r0
 8000b9a:	4804      	ldr	r0, [pc, #16]	@ (8000bac <IOE_Write+0x2c>)
 8000b9c:	f004 fbd8 	bl	8005350 <HAL_I2C_Mem_Write>
}
 8000ba0:	b007      	add	sp, #28
 8000ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	200002a8 	.word	0x200002a8

08000bb0 <IOE_Read>:
{
 8000bb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <IOE_Read+0x2c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	9302      	str	r3, [sp, #8]
{
 8000bbe:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	f10d 0117 	add.w	r1, sp, #23
 8000bc6:	9100      	str	r1, [sp, #0]
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	4601      	mov	r1, r0
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <IOE_Read+0x30>)
 8000bce:	f004 fc4f 	bl	8005470 <HAL_I2C_Mem_Read>
}
 8000bd2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000bd6:	b007      	add	sp, #28
 8000bd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	200002a8 	.word	0x200002a8

08000be4 <IOE_ReadMultiple>:
{
 8000be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 8000be6:	4c08      	ldr	r4, [pc, #32]	@ (8000c08 <IOE_ReadMultiple+0x24>)
 8000be8:	6824      	ldr	r4, [r4, #0]
 8000bea:	9200      	str	r2, [sp, #0]
 8000bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <IOE_ReadMultiple+0x28>)
 8000bf8:	f004 fc3a 	bl	8005470 <HAL_I2C_Mem_Read>
}
 8000bfc:	3800      	subs	r0, #0
 8000bfe:	bf18      	it	ne
 8000c00:	2001      	movne	r0, #1
 8000c02:	b004      	add	sp, #16
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	200002a8 	.word	0x200002a8

08000c10 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 8000c10:	f003 be9e 	b.w	8004950 <HAL_Delay>

08000c14 <LCD_IO_Init>:
{
 8000c14:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c16:	4c06      	ldr	r4, [pc, #24]	@ (8000c30 <LCD_IO_Init+0x1c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	f004 f8f1 	bl	8004e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c22:	4620      	mov	r0, r4
 8000c24:	2201      	movs	r2, #1
}
 8000c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	f004 b8ea 	b.w	8004e04 <HAL_GPIO_WritePin>
 8000c30:	40020800 	.word	0x40020800

08000c34 <LCD_IO_WriteData>:
{
 8000c34:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c36:	4d0b      	ldr	r5, [pc, #44]	@ (8000c64 <LCD_IO_WriteData+0x30>)
{
 8000c38:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <LCD_IO_WriteData+0x34>)
 8000c3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c42:	f004 f8df 	bl	8004e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	f004 f8da 	bl	8004e04 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff ff0f 	bl	8000a74 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c56:	4628      	mov	r0, r5
 8000c58:	2201      	movs	r2, #1
}
 8000c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c5e:	2104      	movs	r1, #4
 8000c60:	f004 b8d0 	b.w	8004e04 <HAL_GPIO_WritePin>
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <LCD_IO_WriteReg>:
{
 8000c6c:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c6e:	4d0b      	ldr	r5, [pc, #44]	@ (8000c9c <LCD_IO_WriteReg+0x30>)
{
 8000c70:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	480a      	ldr	r0, [pc, #40]	@ (8000ca0 <LCD_IO_WriteReg+0x34>)
 8000c76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7a:	f004 f8c3 	bl	8004e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2104      	movs	r1, #4
 8000c82:	4628      	mov	r0, r5
 8000c84:	f004 f8be 	bl	8004e04 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f7ff fef3 	bl	8000a74 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c8e:	4628      	mov	r0, r5
 8000c90:	2201      	movs	r2, #1
}
 8000c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c96:	2104      	movs	r1, #4
 8000c98:	f004 b8b4 	b.w	8004e04 <HAL_GPIO_WritePin>
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <LCD_IO_ReadData>:
{
 8000ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ca6:	4e14      	ldr	r6, [pc, #80]	@ (8000cf8 <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ca8:	4f14      	ldr	r7, [pc, #80]	@ (8000cfc <LCD_IO_ReadData+0x58>)
{
 8000caa:	4605      	mov	r5, r0
 8000cac:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cae:	4630      	mov	r0, r6
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	f004 f8a6 	bl	8004e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	f004 f8a0 	bl	8004e04 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	f7ff fed5 	bl	8000a74 <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <LCD_IO_ReadData+0x5c>)
 8000ccc:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <LCD_IO_ReadData+0x60>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4622      	mov	r2, r4
 8000cd2:	a901      	add	r1, sp, #4
 8000cd4:	f005 fd81 	bl	80067da <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000cd8:	4638      	mov	r0, r7
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8000ce0:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ce2:	f004 f88f 	bl	8004e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2104      	movs	r1, #4
 8000cec:	f004 f88a 	bl	8004e04 <HAL_GPIO_WritePin>
}
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	b003      	add	sp, #12
 8000cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40020c00 	.word	0x40020c00
 8000d00:	20000004 	.word	0x20000004
 8000d04:	200001a8 	.word	0x200001a8

08000d08 <LCD_Delay>:
  HAL_Delay(Delay);
 8000d08:	f003 be22 	b.w	8004950 <HAL_Delay>

08000d0c <SingleBeepTask>:
        }
	}
}

void SingleBeepTask(void *param){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d38 <SingleBeepTask+0x2c>)
void SingleBeepTask(void *param){
 8000d0e:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2108      	movs	r1, #8
 8000d14:	4620      	mov	r0, r4
 8000d16:	f004 f875 	bl	8004e04 <HAL_GPIO_WritePin>
	osDelay(50);
 8000d1a:	2032      	movs	r0, #50	@ 0x32
 8000d1c:	f006 fa3e 	bl	800719c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2108      	movs	r1, #8
 8000d24:	4620      	mov	r0, r4
 8000d26:	f004 f86d 	bl	8004e04 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000d2a:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <SingleBeepTask+0x30>)
 8000d2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d30:	f004 f86d 	bl	8004e0e <HAL_GPIO_TogglePin>
	osThreadExit();
 8000d34:	f006 f9a5 	bl	8007082 <osThreadExit>
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40021800 	.word	0x40021800

08000d40 <DoubleBeepTask>:
}

void DoubleBeepTask(void *param){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d40:	4c10      	ldr	r4, [pc, #64]	@ (8000d84 <DoubleBeepTask+0x44>)
void DoubleBeepTask(void *param){
 8000d42:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2108      	movs	r1, #8
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f004 f85b 	bl	8004e04 <HAL_GPIO_WritePin>
	osDelay(50);
 8000d4e:	2032      	movs	r0, #50	@ 0x32
 8000d50:	f006 fa24 	bl	800719c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2108      	movs	r1, #8
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f004 f853 	bl	8004e04 <HAL_GPIO_WritePin>
	osDelay(50);
 8000d5e:	2032      	movs	r0, #50	@ 0x32
 8000d60:	f006 fa1c 	bl	800719c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2108      	movs	r1, #8
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f004 f84b 	bl	8004e04 <HAL_GPIO_WritePin>
	osDelay(50);
 8000d6e:	2032      	movs	r0, #50	@ 0x32
 8000d70:	f006 fa14 	bl	800719c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2108      	movs	r1, #8
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f004 f843 	bl	8004e04 <HAL_GPIO_WritePin>
	osThreadExit();
 8000d7e:	f006 f980 	bl	8007082 <osThreadExit>
 8000d82:	bf00      	nop
 8000d84:	40020800 	.word	0x40020800

08000d88 <DF_SendCommand>:
	if(currScreen == 1)	DF_SendCommand(0x0F, 0x02, 0x02);
	else if(currScreen == 2) DF_SendCommand(0x0F, 0x02, 0x01);
	osThreadExit();
}

void DF_SendCommand(uint8_t cmd, uint8_t param1, uint8_t param2){
 8000d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000d8a:	f64f 737e 	movw	r3, #65406	@ 0xff7e
 8000d8e:	f88d 200a 	strb.w	r2, [sp, #10]
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000d92:	f202 1205 	addw	r2, r2, #261	@ 0x105
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000d96:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000d9a:	f88d 1009 	strb.w	r1, [sp, #9]
 8000d9e:	2306      	movs	r3, #6
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000da0:	4411      	add	r1, r2
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000da2:	f88d 3006 	strb.w	r3, [sp, #6]
 8000da6:	f88d 0007 	strb.w	r0, [sp, #7]
 8000daa:	2300      	movs	r3, #0
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000dac:	4408      	add	r0, r1
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000dae:	f88d 3008 	strb.w	r3, [sp, #8]
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000db2:	4240      	negs	r0, r0
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000db4:	23ef      	movs	r3, #239	@ 0xef
 8000db6:	f88d 300d 	strb.w	r3, [sp, #13]
	buffer[7] = (checksum >> 8) & 0xFF;
 8000dba:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000dbe:	f88d 300b 	strb.w	r3, [sp, #11]
	buffer[8] = checksum & 0xFF;
 8000dc2:	f88d 000c 	strb.w	r0, [sp, #12]

	HAL_UART_Transmit(&huart4, buffer, 10, HAL_MAX_DELAY);
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	220a      	movs	r2, #10
 8000dcc:	a901      	add	r1, sp, #4
 8000dce:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <DF_SendCommand+0x54>)
 8000dd0:	f005 ffed 	bl	8006dae <HAL_UART_Transmit>
}
 8000dd4:	b005      	add	sp, #20
 8000dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dda:	bf00      	nop
 8000ddc:	2000012c 	.word	0x2000012c

08000de0 <GameOverTask>:
void GameOverTask(void *param){
 8000de0:	b508      	push	{r3, lr}
	DF_SendCommand(0x0F, 0x02, 0x03);
 8000de2:	2102      	movs	r1, #2
 8000de4:	2203      	movs	r2, #3
 8000de6:	200f      	movs	r0, #15
 8000de8:	f7ff ffce 	bl	8000d88 <DF_SendCommand>
	osDelay(2000);
 8000dec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000df0:	f006 f9d4 	bl	800719c <osDelay>
	if(currScreen == 1)	DF_SendCommand(0x0F, 0x02, 0x02);
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <GameOverTask+0x34>)
 8000df6:	7819      	ldrb	r1, [r3, #0]
 8000df8:	2901      	cmp	r1, #1
 8000dfa:	d106      	bne.n	8000e0a <GameOverTask+0x2a>
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	4611      	mov	r1, r2
	else if(currScreen == 2) DF_SendCommand(0x0F, 0x02, 0x01);
 8000e00:	200f      	movs	r0, #15
 8000e02:	f7ff ffc1 	bl	8000d88 <DF_SendCommand>
	osThreadExit();
 8000e06:	f006 f93c 	bl	8007082 <osThreadExit>
	else if(currScreen == 2) DF_SendCommand(0x0F, 0x02, 0x01);
 8000e0a:	2902      	cmp	r1, #2
 8000e0c:	d1fb      	bne.n	8000e06 <GameOverTask+0x26>
 8000e0e:	2201      	movs	r2, #1
 8000e10:	e7f6      	b.n	8000e00 <GameOverTask+0x20>
 8000e12:	bf00      	nop
 8000e14:	2000000c 	.word	0x2000000c

08000e18 <main>:
{
 8000e18:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000e1c:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8000e1e:	f003 fd6b 	bl	80048f8 <HAL_Init>
  SystemClock_Config();
 8000e22:	f7ff fe5f 	bl	8000ae4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	2214      	movs	r2, #20
 8000e28:	2100      	movs	r1, #0
 8000e2a:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2c:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f012 fa2e 	bl	801328e <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	4bc9      	ldr	r3, [pc, #804]	@ (8001158 <main+0x340>)
 8000e34:	9400      	str	r4, [sp, #0]
 8000e36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000e38:	48c8      	ldr	r0, [pc, #800]	@ (800115c <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3a:	f042 0210 	orr.w	r2, r2, #16
 8000e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e42:	f002 0210 	and.w	r2, r2, #16
 8000e46:	9200      	str	r2, [sp, #0]
 8000e48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4a:	9401      	str	r4, [sp, #4]
 8000e4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e4e:	f042 0220 	orr.w	r2, r2, #32
 8000e52:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e56:	f002 0220 	and.w	r2, r2, #32
 8000e5a:	9201      	str	r2, [sp, #4]
 8000e5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	9402      	str	r4, [sp, #8]
 8000e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e6a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000e6e:	9202      	str	r2, [sp, #8]
 8000e70:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	9403      	str	r4, [sp, #12]
 8000e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e76:	f042 0204 	orr.w	r2, r2, #4
 8000e7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e7e:	f002 0204 	and.w	r2, r2, #4
 8000e82:	9203      	str	r2, [sp, #12]
 8000e84:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	9404      	str	r4, [sp, #16]
 8000e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e8a:	f042 0201 	orr.w	r2, r2, #1
 8000e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e92:	f002 0201 	and.w	r2, r2, #1
 8000e96:	9204      	str	r2, [sp, #16]
 8000e98:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	9405      	str	r4, [sp, #20]
 8000e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e9e:	f042 0202 	orr.w	r2, r2, #2
 8000ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ea6:	f002 0202 	and.w	r2, r2, #2
 8000eaa:	9205      	str	r2, [sp, #20]
 8000eac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eae:	9406      	str	r4, [sp, #24]
 8000eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000eb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eba:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000ebe:	9206      	str	r2, [sp, #24]
 8000ec0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	9407      	str	r4, [sp, #28]
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec6:	f042 0208 	orr.w	r2, r2, #8
 8000eca:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000ed4:	4622      	mov	r2, r4
 8000ed6:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000eda:	f003 ff93 	bl	8004e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ede:	48a0      	ldr	r0, [pc, #640]	@ (8001160 <main+0x348>)
 8000ee0:	4622      	mov	r2, r4
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	f003 ff8e 	bl	8004e04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ee8:	4622      	mov	r2, r4
 8000eea:	489e      	ldr	r0, [pc, #632]	@ (8001164 <main+0x34c>)
 8000eec:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ef2:	f003 ff87 	bl	8004e04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000efc:	4897      	ldr	r0, [pc, #604]	@ (800115c <main+0x344>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f02:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f04:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f06:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f10:	f003 fe8e 	bl	8004c30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f14:	4892      	ldr	r0, [pc, #584]	@ (8001160 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	e9cd 960d 	strd	r9, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1e:	9710      	str	r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f20:	f003 fe86 	bl	8004c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f24:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f28:	488e      	ldr	r0, [pc, #568]	@ (8001164 <main+0x34c>)
 8000f2a:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f2c:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f38:	f003 fe7a 	bl	8004c30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	4888      	ldr	r0, [pc, #544]	@ (8001160 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	e9cd 860d 	strd	r8, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f003 fe73 	bl	8004c30 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	4641      	mov	r1, r8
 8000f4e:	4884      	ldr	r0, [pc, #528]	@ (8001160 <main+0x348>)
 8000f50:	f003 ff58 	bl	8004e04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f54:	f44f 1588 	mov.w	r5, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f58:	4883      	ldr	r0, [pc, #524]	@ (8001168 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f5a:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5c:	f04f 0b0c 	mov.w	fp, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f60:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	e9cd b50d 	strd	fp, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f66:	f003 fe63 	bl	8004c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f6a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	487f      	ldr	r0, [pc, #508]	@ (800116c <main+0x354>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f70:	970f      	str	r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f74:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f003 fe5a 	bl	8004c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f80:	4879      	ldr	r0, [pc, #484]	@ (8001168 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f84:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8a:	f003 fe51 	bl	8004c30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	4878      	ldr	r0, [pc, #480]	@ (8001170 <main+0x358>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f90:	970f      	str	r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f94:	e9cd 650d 	strd	r6, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f003 fe4a 	bl	8004c30 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 5, 0);
 8000f9c:	4622      	mov	r2, r4
 8000f9e:	2155      	movs	r1, #85	@ 0x55
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f003 fcfb 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fa6:	2006      	movs	r0, #6
 8000fa8:	f003 fd2a 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 5, 0);
 8000fac:	4622      	mov	r2, r4
 8000fae:	2155      	movs	r1, #85	@ 0x55
 8000fb0:	2028      	movs	r0, #40	@ 0x28
 8000fb2:	f003 fcf3 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fb6:	2028      	movs	r0, #40	@ 0x28
 8000fb8:	f003 fd22 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 5, 0);
 8000fbc:	4622      	mov	r2, r4
 8000fbe:	2155      	movs	r1, #85	@ 0x55
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	f003 fceb 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	f003 fd1a 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 5, 0);
 8000fcc:	2155      	movs	r1, #85	@ 0x55
 8000fce:	4622      	mov	r2, r4
 8000fd0:	2009      	movs	r0, #9
 8000fd2:	f003 fce3 	bl	800499c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fd6:	2009      	movs	r0, #9
 8000fd8:	f003 fd12 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 8000fdc:	4865      	ldr	r0, [pc, #404]	@ (8001174 <main+0x35c>)
 8000fde:	4a66      	ldr	r2, [pc, #408]	@ (8001178 <main+0x360>)
  hi2c3.Instance = I2C3;
 8000fe0:	4d66      	ldr	r5, [pc, #408]	@ (800117c <main+0x364>)
  hcrc.Instance = CRC;
 8000fe2:	6002      	str	r2, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fe4:	f003 fd1a 	bl	8004a1c <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8000fe8:	4b65      	ldr	r3, [pc, #404]	@ (8001180 <main+0x368>)
 8000fea:	4a66      	ldr	r2, [pc, #408]	@ (8001184 <main+0x36c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fec:	622c      	str	r4, [r5, #32]
  hi2c3.Init.ClockSpeed = 100000;
 8000fee:	e9c5 3200 	strd	r3, r2, [r5]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ff2:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	e9c5 2404 	strd	r2, r4, [r5, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8000ffc:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001000:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001004:	f004 f8fc 	bl	8005200 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001008:	2110      	movs	r1, #16
 800100a:	4628      	mov	r0, r5
 800100c:	f004 fb38 	bl	8005680 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001010:	4621      	mov	r1, r4
 8001012:	4628      	mov	r0, r5
 8001014:	f004 fb53 	bl	80056be <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 8001018:	485b      	ldr	r0, [pc, #364]	@ (8001188 <main+0x370>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800101a:	495c      	ldr	r1, [pc, #368]	@ (800118c <main+0x374>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101c:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800101e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001022:	e9c0 1200 	strd	r1, r2, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001026:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800102a:	2218      	movs	r2, #24
 800102c:	e9c0 5206 	strd	r5, r2, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8001030:	220a      	movs	r2, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001032:	4d57      	ldr	r5, [pc, #348]	@ (8001190 <main+0x378>)
  hspi5.Init.CRCPolynomial = 10;
 8001034:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001036:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800103e:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001042:	f005 f9d1 	bl	80063e8 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001046:	4a53      	ldr	r2, [pc, #332]	@ (8001194 <main+0x37c>)
  SdramTiming.LoadToActiveDelay = 2;
 8001048:	970d      	str	r7, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800104a:	f04f 0c10 	mov.w	ip, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800104e:	e9c5 2600 	strd	r2, r6, [r5]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001052:	2240      	movs	r2, #64	@ 0x40
 8001054:	e9c5 c204 	strd	ip, r2, [r5, #16]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800105c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001060:	e9c5 2406 	strd	r2, r4, [r5, #24]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001064:	62ab      	str	r3, [r5, #40]	@ 0x28
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001066:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  SdramTiming.ExitSelfRefreshDelay = 7;
 800106a:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800106c:	a90d      	add	r1, sp, #52	@ 0x34
 800106e:	4628      	mov	r0, r5
  SdramTiming.WriteRecoveryTime = 3;
 8001070:	e9cd 3a10 	strd	r3, sl, [sp, #64]	@ 0x40
  SdramTiming.SelfRefreshTime = 4;
 8001074:	e9cd 390e 	strd	r3, r9, [sp, #56]	@ 0x38
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001078:	e9c5 2408 	strd	r2, r4, [r5, #32]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800107c:	e9c5 4902 	strd	r4, r9, [r5, #8]
  SdramTiming.RCDDelay = 2;
 8001080:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001084:	f005 f8ac 	bl	80061e0 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800108c:	a909      	add	r1, sp, #36	@ 0x24
 800108e:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001090:	e9cd 6809 	strd	r6, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001094:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
 __IO uint32_t tmpmrd =0;
 8001098:	9408      	str	r4, [sp, #32]
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800109a:	f005 f8c1 	bl	8006220 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800109e:	4630      	mov	r0, r6
 80010a0:	f003 fc56 	bl	8004950 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010a8:	a909      	add	r1, sp, #36	@ 0x24
 80010aa:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010ac:	e9cd 7809 	strd	r7, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80010b0:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010b4:	f005 f8b4 	bl	8006220 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010bc:	a909      	add	r1, sp, #36	@ 0x24
 80010be:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010c0:	e9cd a809 	strd	sl, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80010c4:	e9cd 940b 	strd	r9, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010c8:	f005 f8aa 	bl	8006220 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80010cc:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80010d0:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 80010d2:	9b08      	ldr	r3, [sp, #32]
 80010d4:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010da:	a909      	add	r1, sp, #36	@ 0x24
 80010dc:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010de:	e9cd 9809 	strd	r9, r8, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 80010e2:	960b      	str	r6, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010e4:	f005 f89c 	bl	8006220 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80010e8:	f240 516a 	movw	r1, #1386	@ 0x56a
 80010ec:	4628      	mov	r0, r5
 80010ee:	f005 f8b5 	bl	800625c <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010f2:	2234      	movs	r2, #52	@ 0x34
 80010f4:	4621      	mov	r1, r4
 80010f6:	eb0d 0002 	add.w	r0, sp, r2
 80010fa:	f012 f8c8 	bl	801328e <memset>
  hltdc.Instance = LTDC;
 80010fe:	4d26      	ldr	r5, [pc, #152]	@ (8001198 <main+0x380>)
 8001100:	4b26      	ldr	r3, [pc, #152]	@ (800119c <main+0x384>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001102:	612c      	str	r4, [r5, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001104:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.HorizontalSync = 9;
 8001108:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 800110a:	e9c5 3605 	strd	r3, r6, [r5, #20]
  hltdc.Init.AccumulatedHBP = 29;
 800110e:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8001110:	f240 1e0d 	movw	lr, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 8001114:	e9c5 3a07 	strd	r3, sl, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 8001118:	f240 1343 	movw	r3, #323	@ 0x143
 800111c:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001120:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 327;
 8001122:	f240 1347 	movw	r3, #327	@ 0x147
 8001126:	f240 1817 	movw	r8, #279	@ 0x117
 800112a:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800112e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.Backcolor.Blue = 0;
 8001132:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8001134:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001138:	f004 fb5c 	bl	80057f4 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 800113c:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 800113e:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 8001140:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001144:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 8001148:	2105      	movs	r1, #5
  pLayerCfg.WindowY1 = 320;
 800114a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 800114e:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001152:	e9cd a114 	strd	sl, r1, [sp, #80]	@ 0x50
 8001156:	e023      	b.n	80011a0 <main+0x388>
 8001158:	40023800 	.word	0x40023800
 800115c:	40021000 	.word	0x40021000
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40021800 	.word	0x40021800
 800116c:	40020400 	.word	0x40020400
 8001170:	40020000 	.word	0x40020000
 8001174:	2000033c 	.word	0x2000033c
 8001178:	40023000 	.word	0x40023000
 800117c:	200002a8 	.word	0x200002a8
 8001180:	40005c00 	.word	0x40005c00
 8001184:	000186a0 	.word	0x000186a0
 8001188:	200001a8 	.word	0x200001a8
 800118c:	40015000 	.word	0x40015000
 8001190:	20000174 	.word	0x20000174
 8001194:	a0000140 	.word	0xa0000140
 8001198:	20000200 	.word	0x20000200
 800119c:	40016800 	.word	0x40016800
  pLayerCfg.ImageWidth = 240;
 80011a0:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011a4:	a90d      	add	r1, sp, #52	@ 0x34
 80011a6:	4622      	mov	r2, r4
 80011a8:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011aa:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 80011ae:	4d35      	ldr	r5, [pc, #212]	@ (8001284 <main+0x46c>)
  pLayerCfg.ImageHeight = 320;
 80011b0:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 80011b2:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 80011b4:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 80011b8:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011bc:	f004 fbe5 	bl	800598a <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 80011c0:	4b31      	ldr	r3, [pc, #196]	@ (8001288 <main+0x470>)
 80011c2:	602b      	str	r3, [r5, #0]
  LcdDrv->Init();
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4798      	blx	r3
  LcdDrv->DisplayOff();
 80011c8:	682b      	ldr	r3, [r5, #0]
  hdma2d.Instance = DMA2D;
 80011ca:	4d30      	ldr	r5, [pc, #192]	@ (800128c <main+0x474>)
  LcdDrv->DisplayOff();
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 80011d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <main+0x478>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011d2:	4628      	mov	r0, r5
  hdma2d.Init.Mode = DMA2D_M2M;
 80011d4:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80011d8:	e9c5 7402 	strd	r7, r4, [r5, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80011dc:	e9c5 470a 	strd	r4, r7, [r5, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011e0:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011e4:	f003 fc2a 	bl	8004a3c <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011e8:	4631      	mov	r1, r6
 80011ea:	4628      	mov	r0, r5
 80011ec:	f003 fcdc 	bl	8004ba8 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 80011f0:	f000 fbf0 	bl	80019d4 <MX_TouchGFX_Init>
	  huart4.Instance = UART4;
 80011f4:	4827      	ldr	r0, [pc, #156]	@ (8001294 <main+0x47c>)
	  huart4.Init.BaudRate = 9600;
 80011f6:	4a28      	ldr	r2, [pc, #160]	@ (8001298 <main+0x480>)
 80011f8:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80011fc:	e9c0 2300 	strd	r2, r3, [r0]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001200:	e9c0 4402 	strd	r4, r4, [r0, #8]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001204:	e9c0 4b04 	strd	r4, fp, [r0, #16]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	e9c0 4406 	strd	r4, r4, [r0, #24]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 800120c:	f005 fda0 	bl	8006d50 <HAL_UART_Init>
  HAL_Delay(1000);
 8001210:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001214:	f003 fb9c 	bl	8004950 <HAL_Delay>
  DF_SendCommand(0x3F, 0, 0);
 8001218:	4622      	mov	r2, r4
 800121a:	4621      	mov	r1, r4
 800121c:	203f      	movs	r0, #63	@ 0x3f
 800121e:	f7ff fdb3 	bl	8000d88 <DF_SendCommand>
  HAL_Delay(200);
 8001222:	20c8      	movs	r0, #200	@ 0xc8
 8001224:	f003 fb94 	bl	8004950 <HAL_Delay>
  DF_SendCommand(0x06, 0x00, 15);
 8001228:	220f      	movs	r2, #15
 800122a:	4621      	mov	r1, r4
 800122c:	2006      	movs	r0, #6
 800122e:	f7ff fdab 	bl	8000d88 <DF_SendCommand>
  HAL_Delay(200);
 8001232:	20c8      	movs	r0, #200	@ 0xc8
 8001234:	f003 fb8c 	bl	8004950 <HAL_Delay>
  DF_SendCommand(0x0F, 0x02, 0x02);
 8001238:	463a      	mov	r2, r7
 800123a:	4639      	mov	r1, r7
 800123c:	200f      	movs	r0, #15
 800123e:	f7ff fda3 	bl	8000d88 <DF_SendCommand>
  osKernelInitialize();
 8001242:	f005 fea7 	bl	8006f94 <osKernelInitialize>
  movingQueueHandle = osMessageQueueNew(4, sizeof(char), &movingQueue_attributes);
 8001246:	4a15      	ldr	r2, [pc, #84]	@ (800129c <main+0x484>)
 8001248:	4631      	mov	r1, r6
 800124a:	4648      	mov	r0, r9
 800124c:	f006 f85a 	bl	8007304 <osMessageQueueNew>
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <main+0x488>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001252:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <main+0x48c>)
  movingQueueHandle = osMessageQueueNew(4, sizeof(char), &movingQueue_attributes);
 8001254:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001256:	4621      	mov	r1, r4
 8001258:	4813      	ldr	r0, [pc, #76]	@ (80012a8 <main+0x490>)
 800125a:	f005 fece 	bl	8006ffa <osThreadNew>
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <main+0x494>)
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001260:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <main+0x498>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001262:	6018      	str	r0, [r3, #0]
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001264:	4621      	mov	r1, r4
 8001266:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <main+0x49c>)
 8001268:	f005 fec7 	bl	8006ffa <osThreadNew>
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <main+0x4a0>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800126e:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <main+0x4a4>)
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001270:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001272:	4621      	mov	r1, r4
 8001274:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <main+0x4a8>)
 8001276:	f005 fec0 	bl	8006ffa <osThreadNew>
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <main+0x4ac>)
 800127c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800127e:	f005 fe9b 	bl	8006fb8 <osKernelStart>
  while (1)
 8001282:	e7fe      	b.n	8001282 <main+0x46a>
 8001284:	20000114 	.word	0x20000114
 8001288:	20000018 	.word	0x20000018
 800128c:	200002fc 	.word	0x200002fc
 8001290:	4002b000 	.word	0x4002b000
 8001294:	2000012c 	.word	0x2000012c
 8001298:	40004c00 	.word	0x40004c00
 800129c:	08014d54 	.word	0x08014d54
 80012a0:	20000118 	.word	0x20000118
 80012a4:	08014db4 	.word	0x08014db4
 80012a8:	08000a99 	.word	0x08000a99
 80012ac:	20000124 	.word	0x20000124
 80012b0:	08014d90 	.word	0x08014d90
 80012b4:	08000aa5 	.word	0x08000aa5
 80012b8:	20000120 	.word	0x20000120
 80012bc:	08014d6c 	.word	0x08014d6c
 80012c0:	080019d9 	.word	0x080019d9
 80012c4:	2000011c 	.word	0x2000011c

080012c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012c8:	6802      	ldr	r2, [r0, #0]
 80012ca:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d101      	bne.n	80012d4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80012d0:	f003 bb2c 	b.w	800492c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40001000 	.word	0x40001000

080012dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	static uint32_t last_time = 0;
	if(GPIO_Pin == GPIO_PIN_0){
 80012dc:	2801      	cmp	r0, #1
{
 80012de:	b538      	push	{r3, r4, r5, lr}
 80012e0:	4604      	mov	r4, r0
	if(GPIO_Pin == GPIO_PIN_0){
 80012e2:	d10b      	bne.n	80012fc <HAL_GPIO_EXTI_Callback+0x20>
		DF_SendCommand(0x19, 0x00, 0x00);
 80012e4:	2200      	movs	r2, #0
 80012e6:	4611      	mov	r1, r2
 80012e8:	2019      	movs	r0, #25
 80012ea:	f7ff fd4d 	bl	8000d88 <DF_SendCommand>
	            return;
	    }
	    last_button = res;
	    osThreadFlagsSet(movingTaskHandle, 0x01);
	}
}
 80012ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80012f2:	4815      	ldr	r0, [pc, #84]	@ (8001348 <HAL_GPIO_EXTI_Callback+0x6c>)
 80012f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012f8:	f003 bd89 	b.w	8004e0e <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - last_time < 200) return;
 80012fc:	4d13      	ldr	r5, [pc, #76]	@ (800134c <HAL_GPIO_EXTI_Callback+0x70>)
 80012fe:	f003 fb21 	bl	8004944 <HAL_GetTick>
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	1ac0      	subs	r0, r0, r3
 8001306:	28c7      	cmp	r0, #199	@ 0xc7
 8001308:	d90a      	bls.n	8001320 <HAL_GPIO_EXTI_Callback+0x44>
		last_time = HAL_GetTick();
 800130a:	f003 fb1b 	bl	8004944 <HAL_GetTick>
	    switch (GPIO_Pin)
 800130e:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
		last_time = HAL_GetTick();
 8001312:	6028      	str	r0, [r5, #0]
	    switch (GPIO_Pin)
 8001314:	d012      	beq.n	800133c <HAL_GPIO_EXTI_Callback+0x60>
 8001316:	d804      	bhi.n	8001322 <HAL_GPIO_EXTI_Callback+0x46>
 8001318:	2c04      	cmp	r4, #4
 800131a:	d011      	beq.n	8001340 <HAL_GPIO_EXTI_Callback+0x64>
 800131c:	2c08      	cmp	r4, #8
 800131e:	d011      	beq.n	8001344 <HAL_GPIO_EXTI_Callback+0x68>
}
 8001320:	bd38      	pop	{r3, r4, r5, pc}
	    switch (GPIO_Pin)
 8001322:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8001326:	d1fb      	bne.n	8001320 <HAL_GPIO_EXTI_Callback+0x44>
 8001328:	2352      	movs	r3, #82	@ 0x52
	    last_button = res;
 800132a:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <HAL_GPIO_EXTI_Callback+0x74>)
 800132c:	7013      	strb	r3, [r2, #0]
	    osThreadFlagsSet(movingTaskHandle, 0x01);
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_GPIO_EXTI_Callback+0x78>)
 8001330:	2101      	movs	r1, #1
 8001332:	6818      	ldr	r0, [r3, #0]
}
 8001334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	    osThreadFlagsSet(movingTaskHandle, 0x01);
 8001338:	f005 bea8 	b.w	800708c <osThreadFlagsSet>
	            res = 'L';
 800133c:	234c      	movs	r3, #76	@ 0x4c
 800133e:	e7f4      	b.n	800132a <HAL_GPIO_EXTI_Callback+0x4e>
	            res = 'T';
 8001340:	2354      	movs	r3, #84	@ 0x54
 8001342:	e7f2      	b.n	800132a <HAL_GPIO_EXTI_Callback+0x4e>
	            res = 'D';
 8001344:	2344      	movs	r3, #68	@ 0x44
 8001346:	e7f0      	b.n	800132a <HAL_GPIO_EXTI_Callback+0x4e>
 8001348:	40021800 	.word	0x40021800
 800134c:	20000110 	.word	0x20000110
 8001350:	20000128 	.word	0x20000128
 8001354:	20000120 	.word	0x20000120

08001358 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001358:	4770      	bx	lr
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <HAL_MspInit+0x3c>)
 8001360:	2200      	movs	r2, #0
 8001362:	9200      	str	r2, [sp, #0]
 8001364:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001366:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800136a:	6459      	str	r1, [r3, #68]	@ 0x44
 800136c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800136e:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8001372:	9100      	str	r1, [sp, #0]
 8001374:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800137a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800137e:	6419      	str	r1, [r3, #64]	@ 0x40
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138a:	210f      	movs	r1, #15
 800138c:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001390:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001392:	f003 bb03 	b.w	800499c <HAL_NVIC_SetPriority>
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800139c:	6802      	ldr	r2, [r0, #0]
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <HAL_CRC_MspInit+0x28>)
 80013a0:	429a      	cmp	r2, r3
{
 80013a2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013a4:	d10b      	bne.n	80013be <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_CRC_MspInit+0x2c>)
 80013ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013be:	b002      	add	sp, #8
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023000 	.word	0x40023000
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80013cc:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_DMA2D_MspInit+0x40>)
 80013d0:	6802      	ldr	r2, [r0, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d116      	bne.n	8001404 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013d6:	2200      	movs	r2, #0
 80013d8:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 80013dc:	9201      	str	r2, [sp, #4]
 80013de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013e0:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80013e4:	6319      	str	r1, [r3, #48]	@ 0x30
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013ec:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013ee:	2105      	movs	r1, #5
 80013f0:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013f4:	f003 fad2 	bl	800499c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013f8:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80013fa:	b003      	add	sp, #12
 80013fc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001400:	f003 bafe 	b.w	8004a00 <HAL_NVIC_EnableIRQ>
}
 8001404:	b003      	add	sp, #12
 8001406:	f85d fb04 	ldr.w	pc, [sp], #4
 800140a:	bf00      	nop
 800140c:	4002b000 	.word	0x4002b000

08001410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001414:	4604      	mov	r4, r0
 8001416:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	2214      	movs	r2, #20
 800141a:	2100      	movs	r1, #0
 800141c:	a803      	add	r0, sp, #12
 800141e:	f011 ff36 	bl	801328e <memset>
  if(hi2c->Instance==I2C3)
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <HAL_I2C_MspInit+0xa8>)
 8001426:	429a      	cmp	r2, r3
 8001428:	d143      	bne.n	80014b2 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4c24      	ldr	r4, [pc, #144]	@ (80014bc <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	4824      	ldr	r0, [pc, #144]	@ (80014c0 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	2500      	movs	r5, #0
 8001430:	9500      	str	r5, [sp, #0]
 8001432:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6323      	str	r3, [r4, #48]	@ 0x30
 800143a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	9501      	str	r5, [sp, #4]
 8001446:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6323      	str	r3, [r4, #48]	@ 0x30
 800144e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001458:	f04f 0912 	mov.w	r9, #18
 800145c:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	f04f 0801 	mov.w	r8, #1
 8001464:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001466:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146a:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001472:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f003 fbdc 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001478:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	4811      	ldr	r0, [pc, #68]	@ (80014c4 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800147e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001482:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f003 fbd1 	bl	8004c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800148e:	9502      	str	r5, [sp, #8]
 8001490:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001492:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001496:	6423      	str	r3, [r4, #64]	@ 0x40
 8001498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800149a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 80014a2:	6a23      	ldr	r3, [r4, #32]
 80014a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014a8:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 80014aa:	6a23      	ldr	r3, [r4, #32]
 80014ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014b0:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014b2:	b009      	add	sp, #36	@ 0x24
 80014b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014b8:	40005c00 	.word	0x40005c00
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020000 	.word	0x40020000

080014c8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	b099      	sub	sp, #100	@ 0x64
 80014cc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	2214      	movs	r2, #20
 80014d0:	2100      	movs	r1, #0
 80014d2:	a807      	add	r0, sp, #28
 80014d4:	f011 fedb 	bl	801328e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d8:	2230      	movs	r2, #48	@ 0x30
 80014da:	eb0d 0002 	add.w	r0, sp, r2
 80014de:	2100      	movs	r1, #0
 80014e0:	f011 fed5 	bl	801328e <memset>
  if(hltdc->Instance==LTDC)
 80014e4:	6822      	ldr	r2, [r4, #0]
 80014e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001660 <HAL_LTDC_MspInit+0x198>)
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 80b7 	bne.w	800165c <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014ee:	2308      	movs	r3, #8
 80014f0:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80014f2:	23c0      	movs	r3, #192	@ 0xc0
 80014f4:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80014f6:	2304      	movs	r3, #4
 80014f8:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001500:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001502:	f004 fd41 	bl	8005f88 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	b108      	cbz	r0, 800150c <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001508:	f7ff ff26 	bl	8001358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800150c:	4b55      	ldr	r3, [pc, #340]	@ (8001664 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800150e:	4856      	ldr	r0, [pc, #344]	@ (8001668 <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001510:	2400      	movs	r4, #0
 8001512:	9400      	str	r4, [sp, #0]
 8001514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001516:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800151a:	645a      	str	r2, [r3, #68]	@ 0x44
 800151c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800151e:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001522:	9200      	str	r2, [sp, #0]
 8001524:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	9401      	str	r4, [sp, #4]
 8001528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800152a:	f042 0220 	orr.w	r2, r2, #32
 800152e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001532:	f002 0220 	and.w	r2, r2, #32
 8001536:	9201      	str	r2, [sp, #4]
 8001538:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	9402      	str	r4, [sp, #8]
 800153c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
 8001544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001546:	f002 0201 	and.w	r2, r2, #1
 800154a:	9202      	str	r2, [sp, #8]
 800154c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	9403      	str	r4, [sp, #12]
 8001550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001552:	f042 0202 	orr.w	r2, r2, #2
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
 8001558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800155a:	f002 0202 	and.w	r2, r2, #2
 800155e:	9203      	str	r2, [sp, #12]
 8001560:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001562:	9404      	str	r4, [sp, #16]
 8001564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001566:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800156a:	631a      	str	r2, [r3, #48]	@ 0x30
 800156c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800156e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001572:	9204      	str	r2, [sp, #16]
 8001574:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	9405      	str	r4, [sp, #20]
 8001578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800157a:	f042 0204 	orr.w	r2, r2, #4
 800157e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001582:	f002 0204 	and.w	r2, r2, #4
 8001586:	9205      	str	r2, [sp, #20]
 8001588:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	9406      	str	r4, [sp, #24]
 800158c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800158e:	f042 0208 	orr.w	r2, r2, #8
 8001592:	631a      	str	r2, [r3, #48]	@ 0x30
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800159e:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015a2:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ae:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b2:	f003 fb3d 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 80015b6:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	482c      	ldr	r0, [pc, #176]	@ (800166c <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015bc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015c4:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c6:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f003 fb31 	bl	8004c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ce:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	4827      	ldr	r0, [pc, #156]	@ (8001670 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015d2:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015da:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f003 fb27 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80015e2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	4822      	ldr	r0, [pc, #136]	@ (8001670 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015e8:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f0:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f003 fb1c 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80015f8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fc:	481d      	ldr	r0, [pc, #116]	@ (8001674 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fe:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001600:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001606:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800160a:	f003 fb11 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160e:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001610:	4819      	ldr	r0, [pc, #100]	@ (8001678 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001612:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001614:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f003 fb07 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001622:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001624:	4815      	ldr	r0, [pc, #84]	@ (800167c <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001626:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001628:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001632:	f003 fafd 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001636:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163a:	480e      	ldr	r0, [pc, #56]	@ (8001674 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800163c:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001644:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001648:	f003 faf2 	bl	8004c30 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800164c:	2058      	movs	r0, #88	@ 0x58
 800164e:	4622      	mov	r2, r4
 8001650:	2105      	movs	r1, #5
 8001652:	f003 f9a3 	bl	800499c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001656:	2058      	movs	r0, #88	@ 0x58
 8001658:	f003 f9d2 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800165c:	b019      	add	sp, #100	@ 0x64
 800165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001660:	40016800 	.word	0x40016800
 8001664:	40023800 	.word	0x40023800
 8001668:	40021400 	.word	0x40021400
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400
 8001674:	40021800 	.word	0x40021800
 8001678:	40020800 	.word	0x40020800
 800167c:	40020c00 	.word	0x40020c00

08001680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001680:	b510      	push	{r4, lr}
 8001682:	4604      	mov	r4, r0
 8001684:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	2214      	movs	r2, #20
 8001688:	2100      	movs	r1, #0
 800168a:	a803      	add	r0, sp, #12
 800168c:	f011 fdff 	bl	801328e <memset>
  if(hspi->Instance==SPI5)
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <HAL_SPI_MspInit+0x64>)
 8001694:	429a      	cmp	r2, r3
 8001696:	d123      	bne.n	80016e0 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001698:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 800169c:	2100      	movs	r1, #0
 800169e:	9101      	str	r1, [sp, #4]
 80016a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a2:	4811      	ldr	r0, [pc, #68]	@ (80016e8 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016a4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80016a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80016aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016ac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80016b0:	9201      	str	r2, [sp, #4]
 80016b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b4:	9102      	str	r1, [sp, #8]
 80016b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016b8:	f042 0220 	orr.w	r2, r2, #32
 80016bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	f44f 7260 	mov.w	r2, #896	@ 0x380
 80016cc:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016ce:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016d4:	2305      	movs	r3, #5
 80016d6:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016da:	a903      	add	r1, sp, #12
 80016dc:	f003 faa8 	bl	8004c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80016e0:	b008      	add	sp, #32
 80016e2:	bd10      	pop	{r4, pc}
 80016e4:	40015000 	.word	0x40015000
 80016e8:	40021400 	.word	0x40021400

080016ec <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016f0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016f2:	2300      	movs	r3, #0
 80016f4:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80016f6:	4b2b      	ldr	r3, [pc, #172]	@ (80017a4 <HAL_SDRAM_MspInit+0xb8>)
 80016f8:	681c      	ldr	r4, [r3, #0]
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	d14f      	bne.n	800179e <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 80016fe:	f04f 0801 	mov.w	r8, #1
 8001702:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001706:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <HAL_SDRAM_MspInit+0xbc>)
 8001708:	9400      	str	r4, [sp, #0]
 800170a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800170c:	4827      	ldr	r0, [pc, #156]	@ (80017ac <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800170e:	ea42 0208 	orr.w	r2, r2, r8
 8001712:	639a      	str	r2, [r3, #56]	@ 0x38
 8001714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001716:	ea03 0308 	and.w	r3, r3, r8
 800171a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800171e:	2603      	movs	r6, #3
 8001720:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001722:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001724:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800172a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800172e:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001732:	f003 fa7d 	bl	8004c30 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001738:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f003 fa74 	bl	8004c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001748:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800174c:	4819      	ldr	r0, [pc, #100]	@ (80017b4 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800174e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001750:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800175a:	f003 fa69 	bl	8004c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800175e:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001762:	4815      	ldr	r0, [pc, #84]	@ (80017b8 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001764:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001766:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001770:	f003 fa5e 	bl	8004c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001774:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001778:	4810      	ldr	r0, [pc, #64]	@ (80017bc <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800177a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001786:	f003 fa53 	bl	8004c30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800178a:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800178e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f003 fa49 	bl	8004c30 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800179e:	b006      	add	sp, #24
 80017a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017a4:	20000344 	.word	0x20000344
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40021400 	.word	0x40021400
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40021800 	.word	0x40021800
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40020400 	.word	0x40020400

080017c4 <HAL_UART_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	4604      	mov	r4, r0
 80017c8:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	2214      	movs	r2, #20
 80017cc:	2100      	movs	r1, #0
 80017ce:	a803      	add	r0, sp, #12
 80017d0:	f011 fd5d 	bl	801328e <memset>
  if(huart->Instance==UART4)
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <HAL_UART_MspInit+0x8c>)
 80017d8:	429a      	cmp	r2, r3
 80017da:	d136      	bne.n	800184a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017dc:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80017e0:	2400      	movs	r4, #0
 80017e2:	9400      	str	r4, [sp, #0]
 80017e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	481b      	ldr	r0, [pc, #108]	@ (8001854 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80017e8:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80017ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80017ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017f0:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80017f4:	9200      	str	r2, [sp, #0]
 80017f6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	9401      	str	r4, [sp, #4]
 80017fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	631a      	str	r2, [r3, #48]	@ 0x30
 8001802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001804:	f002 0201 	and.w	r2, r2, #1
 8001808:	9201      	str	r2, [sp, #4]
 800180a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180c:	9402      	str	r4, [sp, #8]
 800180e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001810:	f042 0204 	orr.w	r2, r2, #4
 8001814:	631a      	str	r2, [r3, #48]	@ 0x30
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800181e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001820:	2703      	movs	r7, #3
 8001822:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	e9cd 5503 	strd	r5, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800182c:	e9cd 7606 	strd	r7, r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f003 f9fe 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001838:	4807      	ldr	r0, [pc, #28]	@ (8001858 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800183a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	e9cd 4705 	strd	r4, r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f003 f9f3 	bl	8004c30 <HAL_GPIO_Init>

    /* USER CODE BEGIN UART4_MspInit 1 */

    /* USER CODE END UART4_MspInit 1 */
  }
}
 800184a:	b009      	add	sp, #36	@ 0x24
 800184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800184e:	bf00      	nop
 8001850:	40004c00 	.word	0x40004c00
 8001854:	40020000 	.word	0x40020000
 8001858:	40020800 	.word	0x40020800

0800185c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b530      	push	{r4, r5, lr}
 800185e:	4601      	mov	r1, r0
 8001860:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001862:	2200      	movs	r2, #0
 8001864:	2036      	movs	r0, #54	@ 0x36
 8001866:	f003 f899 	bl	800499c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800186a:	2036      	movs	r0, #54	@ 0x36
 800186c:	f003 f8c8 	bl	8004a00 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001870:	2500      	movs	r5, #0
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_InitTick+0x6c>)
 8001874:	9502      	str	r5, [sp, #8]
 8001876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001878:	4c14      	ldr	r4, [pc, #80]	@ (80018cc <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800187a:	f042 0210 	orr.w	r2, r2, #16
 800187e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001888:	a901      	add	r1, sp, #4
 800188a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800188c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800188e:	f004 fb5d 	bl	8005f4c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001892:	f004 fb3b 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_InitTick+0x74>)
 8001898:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800189a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800189e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018a0:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_InitTick+0x78>)
 80018a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80018a8:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80018aa:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018ac:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80018ae:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018b2:	f005 f961 	bl	8006b78 <HAL_TIM_Base_Init>
 80018b6:	b920      	cbnz	r0, 80018c2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018b8:	4620      	mov	r0, r4
 80018ba:	f005 f82d 	bl	8006918 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80018be:	b009      	add	sp, #36	@ 0x24
 80018c0:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7fb      	b.n	80018be <HAL_InitTick+0x62>
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	20000348 	.word	0x20000348
 80018d0:	40001000 	.word	0x40001000
 80018d4:	000f4240 	.word	0x000f4240

080018d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d8:	4770      	bx	lr

080018da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler>

080018dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler>

080018de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler>

080018e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler>

080018e2 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80018e2:	4770      	bx	lr

080018e4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018e4:	4801      	ldr	r0, [pc, #4]	@ (80018ec <TIM6_DAC_IRQHandler+0x8>)
 80018e6:	f005 b855 	b.w	8006994 <HAL_TIM_IRQHandler>
 80018ea:	bf00      	nop
 80018ec:	20000348 	.word	0x20000348

080018f0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018f0:	4801      	ldr	r0, [pc, #4]	@ (80018f8 <LTDC_IRQHandler+0x8>)
 80018f2:	f003 bfed 	b.w	80058d0 <HAL_LTDC_IRQHandler>
 80018f6:	bf00      	nop
 80018f8:	20000200 	.word	0x20000200

080018fc <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018fc:	4801      	ldr	r0, [pc, #4]	@ (8001904 <DMA2D_IRQHandler+0x8>)
 80018fe:	f003 b8c9 	b.w	8004a94 <HAL_DMA2D_IRQHandler>
 8001902:	bf00      	nop
 8001904:	200002fc 	.word	0x200002fc

08001908 <EXTI0_IRQHandler>:
/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001908:	2001      	movs	r0, #1
 800190a:	f003 ba89 	b.w	8004e20 <HAL_GPIO_EXTI_IRQHandler>

0800190e <EXTI15_10_IRQHandler>:
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}

void EXTI15_10_IRQHandler(void){
 800190e:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001910:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001914:	f003 fa84 	bl	8004e20 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
}
 8001918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800191c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001920:	f003 ba7e 	b.w	8004e20 <HAL_GPIO_EXTI_IRQHandler>

08001924 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001924:	2004      	movs	r0, #4
 8001926:	f003 ba7b 	b.w	8004e20 <HAL_GPIO_EXTI_IRQHandler>

0800192a <EXTI3_IRQHandler>:
}

void EXTI3_IRQHandler(void){
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800192a:	2008      	movs	r0, #8
 800192c:	f003 ba78 	b.w	8004e20 <HAL_GPIO_EXTI_IRQHandler>

08001930 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001930:	2001      	movs	r0, #1
 8001932:	4770      	bx	lr

08001934 <_kill>:

int _kill(int pid, int sig)
{
 8001934:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001936:	f011 fd4d 	bl	80133d4 <__errno>
 800193a:	2316      	movs	r3, #22
 800193c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800193e:	f04f 30ff 	mov.w	r0, #4294967295
 8001942:	bd08      	pop	{r3, pc}

08001944 <_exit>:

void _exit (int status)
{
 8001944:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001946:	f011 fd45 	bl	80133d4 <__errno>
 800194a:	2316      	movs	r3, #22
 800194c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800194e:	e7fe      	b.n	800194e <_exit+0xa>

08001950 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	460d      	mov	r5, r1
 8001954:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	460e      	mov	r6, r1
 8001958:	1b73      	subs	r3, r6, r5
 800195a:	429c      	cmp	r4, r3
 800195c:	dc01      	bgt.n	8001962 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800195e:	4620      	mov	r0, r4
 8001960:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001962:	f3af 8000 	nop.w
 8001966:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	e7f5      	b.n	8001958 <_read+0x8>

0800196c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	460d      	mov	r5, r1
 8001970:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	460e      	mov	r6, r1
 8001974:	1b73      	subs	r3, r6, r5
 8001976:	429c      	cmp	r4, r3
 8001978:	dc01      	bgt.n	800197e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800197a:	4620      	mov	r0, r4
 800197c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800197e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001982:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	e7f5      	b.n	8001974 <_write+0x8>

08001988 <_close>:

int _close(int file)
{
	return -1;
}
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	4770      	bx	lr

0800198e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800198e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001992:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001994:	2000      	movs	r0, #0
 8001996:	4770      	bx	lr

08001998 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001998:	2001      	movs	r0, #1
 800199a:	4770      	bx	lr

0800199c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800199c:	2000      	movs	r0, #0
 800199e:	4770      	bx	lr

080019a0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <_sbrk+0x2c>)
 80019a2:	6811      	ldr	r1, [r2, #0]
{
 80019a4:	b508      	push	{r3, lr}
 80019a6:	4603      	mov	r3, r0
	if (heap_end == 0)
 80019a8:	b909      	cbnz	r1, 80019ae <_sbrk+0xe>
		heap_end = &end;
 80019aa:	4909      	ldr	r1, [pc, #36]	@ (80019d0 <_sbrk+0x30>)
 80019ac:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80019ae:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80019b0:	4669      	mov	r1, sp
 80019b2:	4403      	add	r3, r0
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d906      	bls.n	80019c6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80019b8:	f011 fd0c 	bl	80133d4 <__errno>
 80019bc:	230c      	movs	r3, #12
 80019be:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80019c4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80019c6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80019c8:	e7fc      	b.n	80019c4 <_sbrk+0x24>
 80019ca:	bf00      	nop
 80019cc:	20000390 	.word	0x20000390
 80019d0:	200157b0 	.word	0x200157b0

080019d4 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80019d4:	f000 bcbe 	b.w	8002354 <touchgfx_init>

080019d8 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80019d8:	f000 bd30 	b.w	800243c <touchgfx_taskEntry>

080019dc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80019dc:	4770      	bx	lr

080019de <_ZN20STM32TouchControllerD0Ev>:
 80019de:	b510      	push	{r4, lr}
 80019e0:	2104      	movs	r1, #4
 80019e2:	4604      	mov	r4, r0
 80019e4:	f011 fa1e 	bl	8012e24 <_ZdlPvj>
 80019e8:	4620      	mov	r0, r4
 80019ea:	bd10      	pop	{r4, pc}

080019ec <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80019ec:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80019f0:	4c0c      	ldr	r4, [pc, #48]	@ (8001a24 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 80019f2:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80019f6:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 80019f8:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80019fa:	6863      	ldr	r3, [r4, #4]
 80019fc:	4798      	blx	r3
 80019fe:	f640 0311 	movw	r3, #2065	@ 0x811
 8001a02:	4298      	cmp	r0, r3
 8001a04:	d10a      	bne.n	8001a1c <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8001a06:	4d09      	ldr	r5, [pc, #36]	@ (8001a2c <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8001a08:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 8001a0a:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 8001a0c:	2082      	movs	r0, #130	@ 0x82
 8001a0e:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	2082      	movs	r0, #130	@ 0x82
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	4798      	blx	r3
 8001a18:	2000      	movs	r0, #0
    }

    return ret;
}
 8001a1a:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	e7fc      	b.n	8001a1a <_Z11BSP_TS_Inittt+0x2e>
 8001a20:	2000039e 	.word	0x2000039e
 8001a24:	20000050 	.word	0x20000050
 8001a28:	2000039c 	.word	0x2000039c
 8001a2c:	200003a0 	.word	0x200003a0

08001a30 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 8001a30:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001a34:	20f0      	movs	r0, #240	@ 0xf0
 8001a36:	f7ff bfd9 	b.w	80019ec <_Z11BSP_TS_Inittt>
	...

08001a3c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8001a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8001a3e:	4d35      	ldr	r5, [pc, #212]	@ (8001b14 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 8001a40:	682b      	ldr	r3, [r5, #0]
{
 8001a42:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2082      	movs	r0, #130	@ 0x82
 8001a48:	4798      	blx	r3
 8001a4a:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d04b      	beq.n	8001ae8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xac>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8001a50:	682b      	ldr	r3, [r5, #0]
 8001a52:	f10d 0206 	add.w	r2, sp, #6
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	a901      	add	r1, sp, #4
 8001a5a:	2082      	movs	r0, #130	@ 0x82
 8001a5c:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 8001a5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a62:	f640 6274 	movw	r2, #3700	@ 0xe74
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d940      	bls.n	8001aec <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb0>
        {
            y = 3700;
 8001a6a:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 8001a6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 8001a76:	2a0a      	cmp	r2, #10
 8001a78:	d93e      	bls.n	8001af8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        yr = y / 11;
 8001a7a:	230b      	movs	r3, #11
 8001a7c:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d901      	bls.n	8001a8c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 8001a8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001a90:	4822      	ldr	r0, [pc, #136]	@ (8001b1c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
 8001a92:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001a96:	428b      	cmp	r3, r1
 8001a98:	d830      	bhi.n	8001afc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc0>
        {
            x = 3870 - x;
 8001a9a:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8001a9e:	330e      	adds	r3, #14
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001aa0:	6801      	ldr	r1, [r0, #0]
            x = 3870 - x;
 8001aa2:	b29b      	uxth	r3, r3
        xr = x / 15;
 8001aa4:	250f      	movs	r5, #15
 8001aa6:	fbb3 f3f5 	udiv	r3, r3, r5
        else if (xr > TsXBoundary)
 8001aaa:	4d1d      	ldr	r5, [pc, #116]	@ (8001b20 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe4>)
 8001aac:	882d      	ldrh	r5, [r5, #0]
 8001aae:	42ab      	cmp	r3, r5
            xr = TsXBoundary - 1;
 8001ab0:	bf84      	itt	hi
 8001ab2:	f105 35ff 	addhi.w	r5, r5, #4294967295
 8001ab6:	b2ab      	uxthhi	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	461d      	mov	r5, r3
 8001abc:	b28e      	uxth	r6, r1
 8001abe:	d926      	bls.n	8001b0e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd2>
 8001ac0:	1b9b      	subs	r3, r3, r6
 8001ac2:	b299      	uxth	r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 8001ac4:	4e17      	ldr	r6, [pc, #92]	@ (8001b24 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe8>)
 8001ac6:	6837      	ldr	r7, [r6, #0]
 8001ac8:	b2bb      	uxth	r3, r7
 8001aca:	42ba      	cmp	r2, r7
 8001acc:	bf8c      	ite	hi
 8001ace:	1ad3      	subhi	r3, r2, r3
 8001ad0:	1a9b      	subls	r3, r3, r2
 8001ad2:	b29b      	uxth	r3, r3

        if (xDiff + yDiff > 5)
 8001ad4:	4419      	add	r1, r3
 8001ad6:	2905      	cmp	r1, #5
        {
            _x = x;
 8001ad8:	bfc8      	it	gt
 8001ada:	6005      	strgt	r5, [r0, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 8001adc:	6803      	ldr	r3, [r0, #0]
            _y = y;
 8001ade:	bfc8      	it	gt
 8001ae0:	6032      	strgt	r2, [r6, #0]
        TsState->X = _x;
 8001ae2:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8001ae4:	6833      	ldr	r3, [r6, #0]
 8001ae6:	80a3      	strh	r3, [r4, #4]
    }
}
 8001ae8:	b003      	add	sp, #12
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 8001aec:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 8001aee:	bf9c      	itt	ls
 8001af0:	23b4      	movls	r3, #180	@ 0xb4
 8001af2:	f8ad 3006 	strhls.w	r3, [sp, #6]
 8001af6:	e7ba      	b.n	8001a6e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 8001af8:	2200      	movs	r2, #0
 8001afa:	e7c7      	b.n	8001a8c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 8001afc:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8001b00:	3308      	adds	r3, #8
 8001b02:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8001b04:	2b0e      	cmp	r3, #14
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001b06:	6801      	ldr	r1, [r0, #0]
        if (xr <= 0)
 8001b08:	d8cc      	bhi.n	8001aa4 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x68>
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001b0a:	2500      	movs	r5, #0
            xr = 0;
 8001b0c:	462b      	mov	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001b0e:	1ac9      	subs	r1, r1, r3
 8001b10:	b289      	uxth	r1, r1
 8001b12:	e7d7      	b.n	8001ac4 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x88>
 8001b14:	200003a0 	.word	0x200003a0
 8001b18:	2000039c 	.word	0x2000039c
 8001b1c:	20000398 	.word	0x20000398
 8001b20:	2000039e 	.word	0x2000039e
 8001b24:	20000394 	.word	0x20000394

08001b28 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8001b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8001b2a:	4668      	mov	r0, sp
{
 8001b2c:	460d      	mov	r5, r1
 8001b2e:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8001b30:	f7ff ff84 	bl	8001a3c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 8001b34:	f8bd 0000 	ldrh.w	r0, [sp]
 8001b38:	b130      	cbz	r0, 8001b48 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8001b3a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001b3e:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8001b40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001b44:	6023      	str	r3, [r4, #0]
        return true;
 8001b46:	2001      	movs	r0, #1
}
 8001b48:	b003      	add	sp, #12
 8001b4a:	bd30      	pop	{r4, r5, pc}

08001b4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b4c:	2803      	cmp	r0, #3
 8001b4e:	d821      	bhi.n	8001b94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8001b50:	e8df f000 	tbb	[pc, r0]
 8001b54:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	0952      	lsrs	r2, r2, #5
 8001b62:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b64:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b66:	f003 b94d 	b.w	8004e04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	0952      	lsrs	r2, r2, #5
 8001b74:	2108      	movs	r1, #8
 8001b76:	e7f5      	b.n	8001b64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b78:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	0952      	lsrs	r2, r2, #5
 8001b82:	2110      	movs	r1, #16
 8001b84:	e7ee      	b.n	8001b64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b86:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	fab2 f282 	clz	r2, r2
 8001b8e:	0952      	lsrs	r2, r2, #5
 8001b90:	2120      	movs	r1, #32
 8001b92:	e7e7      	b.n	8001b64 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200003a4 	.word	0x200003a4
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001ba0:	2803      	cmp	r0, #3
 8001ba2:	d821      	bhi.n	8001be8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 8001ba4:	e8df f000 	tbb	[pc, r0]
 8001ba8:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	3a00      	subs	r2, #0
 8001bb2:	bf18      	it	ne
 8001bb4:	2201      	movne	r2, #1
 8001bb6:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bb8:	480d      	ldr	r0, [pc, #52]	@ (8001bf0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bba:	f003 b923 	b.w	8004e04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	3a00      	subs	r2, #0
 8001bc4:	bf18      	it	ne
 8001bc6:	2201      	movne	r2, #1
 8001bc8:	2108      	movs	r1, #8
 8001bca:	e7f5      	b.n	8001bb8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	3a00      	subs	r2, #0
 8001bd2:	bf18      	it	ne
 8001bd4:	2201      	movne	r2, #1
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	e7ee      	b.n	8001bb8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	3a00      	subs	r2, #0
 8001be0:	bf18      	it	ne
 8001be2:	2201      	movne	r2, #1
 8001be4:	2120      	movs	r1, #32
 8001be6:	e7e7      	b.n	8001bb8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200003a4 	.word	0x200003a4
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001bf4:	2803      	cmp	r0, #3
 8001bf6:	d80d      	bhi.n	8001c14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8001bf8:	e8df f000 	tbb	[pc, r0]
 8001bfc:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c00:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c02:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8001c04:	f003 b903 	b.w	8004e0e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c08:	2108      	movs	r1, #8
 8001c0a:	e7fa      	b.n	8001c02 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c0c:	2110      	movs	r1, #16
 8001c0e:	e7f8      	b.n	8001c02 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c10:	2120      	movs	r1, #32
 8001c12:	e7f6      	b.n	8001c02 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001c1c:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001c1e:	2803      	cmp	r0, #3
 8001c20:	d811      	bhi.n	8001c46 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 8001c22:	e8df f000 	tbb	[pc, r0]
 8001c26:	0a02      	.short	0x0a02
 8001c28:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001c2a:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c2c:	4807      	ldr	r0, [pc, #28]	@ (8001c4c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8001c2e:	f003 f8e3 	bl	8004df8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001c32:	1e43      	subs	r3, r0, #1
 8001c34:	4258      	negs	r0, r3
 8001c36:	4158      	adcs	r0, r3
 8001c38:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001c3a:	2108      	movs	r1, #8
 8001c3c:	e7f6      	b.n	8001c2c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001c3e:	2110      	movs	r1, #16
 8001c40:	e7f4      	b.n	8001c2c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c42:	2120      	movs	r1, #32
 8001c44:	e7f2      	b.n	8001c2c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8001c46:	2000      	movs	r0, #0
 8001c48:	e7f3      	b.n	8001c32 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000

08001c50 <_ZN8touchgfx4GPIO4initEv>:
{
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	4d08      	ldr	r5, [pc, #32]	@ (8001c74 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001c54:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001c56:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001c58:	b2e0      	uxtb	r0, r4
 8001c5a:	f7ff ffdf 	bl	8001c1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001c5e:	b118      	cbz	r0, 8001c68 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001c64:	bf18      	it	ne
 8001c66:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001c68:	3401      	adds	r4, #1
 8001c6a:	2c05      	cmp	r4, #5
 8001c6c:	f105 0504 	add.w	r5, r5, #4
 8001c70:	d1f2      	bne.n	8001c58 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	200003a4 	.word	0x200003a4

08001c78 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001c78:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001c7a:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001c7e:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001c82:	4770      	bx	lr

08001c84 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001c84:	2000      	movs	r0, #0
 8001c86:	4770      	bx	lr

08001c88 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c8a:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c8c:	3900      	subs	r1, #0
 8001c8e:	bf18      	it	ne
 8001c90:	2101      	movne	r1, #1
 8001c92:	7019      	strb	r1, [r3, #0]
    }
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2001543b 	.word	0x2001543b

08001c9c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	4770      	bx	lr

08001ca0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ca0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001ca2:	b10b      	cbz	r3, 8001ca8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4718      	bx	r3
        }
    }
 8001ca8:	4770      	bx	lr

08001caa <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001caa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cae:	4770      	bx	lr

08001cb0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001cb0:	6840      	ldr	r0, [r0, #4]
 8001cb2:	6803      	ldr	r3, [r0, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	4718      	bx	r3

08001cb8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8001cb8:	4770      	bx	lr

08001cba <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8001cba:	4770      	bx	lr

08001cbc <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001cbc:	4770      	bx	lr
	...

08001cc0 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001cc4:	f000 fc5a 	bl	800257c <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 8001cd0:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	46ac      	mov	ip, r5
}
 8001cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8001cdc:	4760      	bx	ip
 8001cde:	bf00      	nop
 8001ce0:	d0000000 	.word	0xd0000000

08001ce4 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001ce4:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001ce6:	6803      	ldr	r3, [r0, #0]
{
 8001ce8:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cee:	4798      	blx	r3
    enableInterrupts();
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001cf6:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001cf8:	f000 f8ec 	bl	8001ed4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	4620      	mov	r0, r4
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8001d04:	2029      	movs	r0, #41	@ 0x29
 8001d06:	f7fe ffb1 	bl	8000c6c <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001d0a:	f000 f8e3 	bl	8001ed4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	4620      	mov	r0, r4
 8001d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d14:	4798      	blx	r3
    for (;;)
 8001d16:	e7f8      	b.n	8001d0a <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08001d18 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001d1c:	f008 fcbe 	bl	800a69c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	4620      	mov	r0, r4
 8001d24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001d2c:	4718      	bx	r3

08001d2e <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d2e:	f000 bc17 	b.w	8002560 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001d32 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001d32:	f000 bc1b 	b.w	800256c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001d36 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d36:	f000 bc47 	b.w	80025c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001d3a <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d3a:	f000 bbed 	b.w	8002518 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001d3e <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d3e:	f000 bc47 	b.w	80025d0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001d42 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d42:	f000 bc4f 	b.w	80025e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001d46 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001d46:	f000 bbf1 	b.w	800252c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001d4a <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001d4a:	f007 bf07 	b.w	8009b5c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001d4e <_ZN11TouchGFXHALD0Ev>:
 8001d4e:	b510      	push	{r4, lr}
 8001d50:	217c      	movs	r1, #124	@ 0x7c
 8001d52:	4604      	mov	r4, r0
 8001d54:	f011 f866 	bl	8012e24 <_ZdlPvj>
 8001d58:	4620      	mov	r0, r4
 8001d5a:	bd10      	pop	{r4, pc}

08001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8001d5c:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d5e:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001d62:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8001d68:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8001d6a:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001d6c:	d009      	beq.n	8001d82 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001d6e:	b93a      	cbnz	r2, 8001d80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d70:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d72:	490b      	ldr	r1, [pc, #44]	@ (8001da0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d74:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d76:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8001d78:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d7a:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8001d7c:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8001d7e:	701a      	strb	r2, [r3, #0]
    }
 8001d80:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d0fc      	beq.n	8001d80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d88:	4905      	ldr	r1, [pc, #20]	@ (8001da0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d8a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d8c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d8e:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d90:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001d92:	2200      	movs	r2, #0
 8001d94:	e7f3      	b.n	8001d7e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d96:	bf00      	nop
 8001d98:	20015434 	.word	0x20015434
 8001d9c:	20015430 	.word	0x20015430
 8001da0:	20015432 	.word	0x20015432

08001da4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001da4:	b570      	push	{r4, r5, r6, lr}
 8001da6:	460d      	mov	r5, r1
 8001da8:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001daa:	b935      	cbnz	r5, 8001dba <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001db0:	480a      	ldr	r0, [pc, #40]	@ (8001ddc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001db2:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001db6:	f011 f863 	bl	8012e80 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001dba:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001dc0:	3a00      	subs	r2, #0
 8001dc2:	bf18      	it	ne
 8001dc4:	2201      	movne	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001dc8:	6803      	ldr	r3, [r0, #0]
    }
 8001dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dd2:	4718      	bx	r3
 8001dd4:	08014124 	.word	0x08014124
 8001dd8:	0801415c 	.word	0x0801415c
 8001ddc:	080141aa 	.word	0x080141aa
 8001de0:	2001543a 	.word	0x2001543a

08001de4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001de4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d803      	bhi.n	8001df6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d905      	bls.n	8001e02 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001dfa:	4808      	ldr	r0, [pc, #32]	@ (8001e1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001dfc:	219e      	movs	r1, #158	@ 0x9e
 8001dfe:	f011 f83f 	bl	8012e80 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001e02:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001e04:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001e06:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001e08:	801a      	strh	r2, [r3, #0]
    }
 8001e0a:	bd08      	pop	{r3, pc}
 8001e0c:	20015430 	.word	0x20015430
 8001e10:	20015432 	.word	0x20015432
 8001e14:	080141ef 	.word	0x080141ef
 8001e18:	08014252 	.word	0x08014252
 8001e1c:	080141aa 	.word	0x080141aa
 8001e20:	20015436 	.word	0x20015436
 8001e24:	20015438 	.word	0x20015438

08001e28 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001e28:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001e2a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001e2e:	b118      	cbz	r0, 8001e38 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001e30:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001e32:	6803      	ldr	r3, [r0, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4718      	bx	r3
    }
 8001e38:	4770      	bx	lr
	...

08001e3c <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e3c:	2101      	movs	r1, #1
{
 8001e3e:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e40:	2200      	movs	r2, #0
 8001e42:	4608      	mov	r0, r1
 8001e44:	f005 f9b6 	bl	80071b4 <osSemaphoreNew>
 8001e48:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e4a:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e4c:	b928      	cbnz	r0, 8001e5a <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e52:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e54:	480a      	ldr	r0, [pc, #40]	@ (8001e80 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e56:	f011 f813 	bl	8012e80 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f005 fa50 	bl	8007304 <osMessageQueueNew>
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e66:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e68:	b918      	cbnz	r0, 8001e72 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e6c:	4a03      	ldr	r2, [pc, #12]	@ (8001e7c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e6e:	212c      	movs	r1, #44	@ 0x2c
 8001e70:	e7f0      	b.n	8001e54 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e72:	bd08      	pop	{r3, pc}
 8001e74:	200003b8 	.word	0x200003b8
 8001e78:	08014295 	.word	0x08014295
 8001e7c:	080142de 	.word	0x080142de
 8001e80:	0801430d 	.word	0x0801430d
 8001e84:	200003b4 	.word	0x200003b4
 8001e88:	08014357 	.word	0x08014357

08001e8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001e8c:	4b02      	ldr	r3, [pc, #8]	@ (8001e98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	f005 b9d8 	b.w	8007248 <osSemaphoreAcquire>
 8001e98:	200003b8 	.word	0x200003b8

08001e9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001e9c:	4b01      	ldr	r3, [pc, #4]	@ (8001ea4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f005 b9fe 	b.w	80072a0 <osSemaphoreRelease>
 8001ea4:	200003b8 	.word	0x200003b8

08001ea8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ea8:	4b02      	ldr	r3, [pc, #8]	@ (8001eb4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	f005 b9cb 	b.w	8007248 <osSemaphoreAcquire>
 8001eb2:	bf00      	nop
 8001eb4:	200003b8 	.word	0x200003b8

08001eb8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001eb8:	f7ff bff0 	b.w	8001e9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ebc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ebc:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001ebe:	4904      	ldr	r1, [pc, #16]	@ (8001ed0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ec0:	6800      	ldr	r0, [r0, #0]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f005 ba58 	b.w	800737a <osMessageQueuePut>
 8001eca:	bf00      	nop
 8001ecc:	200003b4 	.word	0x200003b4
 8001ed0:	20000010 	.word	0x20000010

08001ed4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ed4:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ed6:	4c08      	ldr	r4, [pc, #32]	@ (8001ef8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	461a      	mov	r2, r3
 8001edc:	a901      	add	r1, sp, #4
 8001ede:	6820      	ldr	r0, [r4, #0]
 8001ee0:	f005 fa7c 	bl	80073dc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001ee4:	6820      	ldr	r0, [r4, #0]
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	2200      	movs	r2, #0
 8001eec:	a901      	add	r1, sp, #4
 8001eee:	f005 fa75 	bl	80073dc <osMessageQueueGet>
}
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd10      	pop	{r4, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200003b4 	.word	0x200003b4

08001efc <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001efc:	6803      	ldr	r3, [r0, #0]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f00:	4718      	bx	r3

08001f02 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f02:	2001      	movs	r0, #1
 8001f04:	4770      	bx	lr

08001f06 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	4718      	bx	r3

08001f0c <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8001f0c:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f16:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f1e:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001f22:	9201      	str	r2, [sp, #4]
 8001f24:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f2c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001f34:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f36:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <_ZN8STM32DMA10initializeEv+0x40>)
 8001f38:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <_ZN8STM32DMA10initializeEv+0x44>)
 8001f3a:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <_ZN8STM32DMA10initializeEv+0x48>)
 8001f3e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f42:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001f44:	b002      	add	sp, #8
 8001f46:	4770      	bx	lr
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	200002fc 	.word	0x200002fc
 8001f50:	080021e5 	.word	0x080021e5
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f58:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001f5c:	4770      	bx	lr
	...

08001f60 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <_ZN8STM32DMAD1Ev+0x18>)
 8001f62:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <_ZN8STM32DMAD1Ev+0x1c>)
 8001f66:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f72:	f3bf 8f6f 	isb	sy
}
 8001f76:	4770      	bx	lr
 8001f78:	08014ed0 	.word	0x08014ed0
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f80:	b510      	push	{r4, lr}
 8001f82:	4604      	mov	r4, r0
}
 8001f84:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001f88:	f7ff ffea 	bl	8001f60 <_ZN8STM32DMAD1Ev>
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f010 ff49 	bl	8012e24 <_ZdlPvj>
 8001f92:	4620      	mov	r0, r4
 8001f94:	bd10      	pop	{r4, pc}
	...

08001f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001f98:	b508      	push	{r3, lr}
    switch (format)
 8001f9a:	280a      	cmp	r0, #10
 8001f9c:	d809      	bhi.n	8001fb2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001f9e:	e8df f000 	tbb	[pc, r0]
 8001fa2:	1006      	.short	0x1006
 8001fa4:	0808080e 	.word	0x0808080e
 8001fa8:	10101008 	.word	0x10101008
 8001fac:	10          	.byte	0x10
 8001fad:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001fae:	2002      	movs	r0, #2
}
 8001fb0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001fb4:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001fb6:	4806      	ldr	r0, [pc, #24]	@ (8001fd0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001fb8:	2187      	movs	r1, #135	@ 0x87
 8001fba:	f010 ff61 	bl	8012e80 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e7f6      	b.n	8001fb0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001fc2:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001fc4:	e7f4      	b.n	8001fb0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001fc6:	bf00      	nop
 8001fc8:	08014399 	.word	0x08014399
 8001fcc:	080143b4 	.word	0x080143b4
 8001fd0:	080143ff 	.word	0x080143ff

08001fd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fd8:	7f88      	ldrb	r0, [r1, #30]
 8001fda:	f7ff ffdd 	bl	8001f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001fde:	8aa5      	ldrh	r5, [r4, #20]
 8001fe0:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001fe2:	4b16      	ldr	r3, [pc, #88]	@ (800203c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001fe4:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001fe6:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001fe8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001fee:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ff0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ff2:	1b52      	subs	r2, r2, r5
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001ff6:	6825      	ldr	r5, [r4, #0]
 8001ff8:	2d08      	cmp	r5, #8
 8001ffa:	d10e      	bne.n	800201a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ffc:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ffe:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002000:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002002:	7f20      	ldrb	r0, [r4, #28]
 8002004:	4a0e      	ldr	r2, [pc, #56]	@ (8002040 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8002006:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800200a:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 800200c:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800200e:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002010:	4a0c      	ldr	r2, [pc, #48]	@ (8002044 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002012:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002014:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002016:	601a      	str	r2, [r3, #0]
    }
}
 8002018:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800201a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800201c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800201e:	611a      	str	r2, [r3, #16]
 8002020:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002022:	0a0a      	lsrs	r2, r1, #8
 8002024:	0948      	lsrs	r0, r1, #5
 8002026:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 800202a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800202e:	4302      	orrs	r2, r0
 8002030:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002034:	430a      	orrs	r2, r1
 8002036:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002038:	4a03      	ldr	r2, [pc, #12]	@ (8002048 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 800203a:	e7ec      	b.n	8002016 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800203c:	4002b000 	.word	0x4002b000
 8002040:	00010009 	.word	0x00010009
 8002044:	00020201 	.word	0x00020201
 8002048:	00030201 	.word	0x00030201

0800204c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 800204c:	b508      	push	{r3, lr}
    switch (format)
 800204e:	280b      	cmp	r0, #11
 8002050:	d80b      	bhi.n	800206a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002052:	e8df f000 	tbb	[pc, r0]
 8002056:	1206      	.short	0x1206
 8002058:	0a0a0a10 	.word	0x0a0a0a10
 800205c:	0808080a 	.word	0x0808080a
 8002060:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002062:	2002      	movs	r0, #2
}
 8002064:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002066:	2005      	movs	r0, #5
        break;
 8002068:	e7fc      	b.n	8002064 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 800206a:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 800206c:	4a05      	ldr	r2, [pc, #20]	@ (8002084 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800206e:	4806      	ldr	r0, [pc, #24]	@ (8002088 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002070:	2166      	movs	r1, #102	@ 0x66
 8002072:	f010 ff05 	bl	8012e80 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002076:	2000      	movs	r0, #0
 8002078:	e7f4      	b.n	8002064 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 800207a:	2001      	movs	r0, #1
    return dma2dColorMode;
 800207c:	e7f2      	b.n	8002064 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800207e:	bf00      	nop
 8002080:	08014399 	.word	0x08014399
 8002084:	08014447 	.word	0x08014447
 8002088:	080143ff 	.word	0x080143ff

0800208c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 800208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002090:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8002094:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002096:	4640      	mov	r0, r8
 8002098:	f7ff ffd8 	bl	800204c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800209c:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800209e:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020a0:	4638      	mov	r0, r7
 80020a2:	f7ff ffd3 	bl	800204c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 80020a6:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020a8:	4638      	mov	r0, r7
 80020aa:	f7ff ff75 	bl	8001f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020ae:	8aa1      	ldrh	r1, [r4, #20]
 80020b0:	8b62      	ldrh	r2, [r4, #26]
 80020b2:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020b4:	1a52      	subs	r2, r2, r1
 80020b6:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020b8:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020ba:	8b22      	ldrh	r2, [r4, #24]
 80020bc:	1a52      	subs	r2, r2, r1
 80020be:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020c0:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020c2:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020ca:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020cc:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020ce:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020d0:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80020d2:	6820      	ldr	r0, [r4, #0]
 80020d4:	2880      	cmp	r0, #128	@ 0x80
 80020d6:	d028      	beq.n	800212a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80020d8:	7f22      	ldrb	r2, [r4, #28]
 80020da:	d80f      	bhi.n	80020fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 80020dc:	2820      	cmp	r0, #32
 80020de:	d067      	beq.n	80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 80020e0:	2840      	cmp	r0, #64	@ 0x40
 80020e2:	d065      	beq.n	80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 80020e4:	2804      	cmp	r0, #4
 80020e6:	d01a      	beq.n	800211e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e8:	4b36      	ldr	r3, [pc, #216]	@ (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020ea:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 80020ee:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f2:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020f4:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f6:	d061      	beq.n	80021bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020f8:	4a33      	ldr	r2, [pc, #204]	@ (80021c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020fa:	e044      	b.n	8002186 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 80020fc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8002100:	d004      	beq.n	800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002102:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002106:	d1ef      	bne.n	80020e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002108:	4830      	ldr	r0, [pc, #192]	@ (80021cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800210a:	e000      	b.n	800210e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210c:	4830      	ldr	r0, [pc, #192]	@ (80021d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210e:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002112:	61da      	str	r2, [r3, #28]
 8002114:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002116:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002118:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800211a:	6159      	str	r1, [r3, #20]
 800211c:	e032      	b.n	8002184 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800211e:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002122:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002126:	61da      	str	r2, [r3, #28]
 8002128:	e7f6      	b.n	8002118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800212a:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800212c:	1d02      	adds	r2, r0, #4
 800212e:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002130:	7f22      	ldrb	r2, [r4, #28]
 8002132:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002136:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 800213a:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800213c:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800213e:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002140:	7801      	ldrb	r1, [r0, #0]
 8002142:	b141      	cbz	r1, 8002156 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8002144:	2901      	cmp	r1, #1
 8002146:	d021      	beq.n	800218c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8002148:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800214a:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 800214c:	4823      	ldr	r0, [pc, #140]	@ (80021dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 800214e:	f240 1111 	movw	r1, #273	@ 0x111
 8002152:	f010 fe95 	bl	8012e80 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	8841      	ldrh	r1, [r0, #2]
 800215a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800215e:	3901      	subs	r1, #1
 8002160:	f022 0210 	bic.w	r2, r2, #16
 8002164:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002168:	61da      	str	r2, [r3, #28]
            bool blend = true;
 800216a:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800216c:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	f042 0220 	orr.w	r2, r2, #32
 8002174:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	0692      	lsls	r2, r2, #26
 800217a:	d4fc      	bmi.n	8002176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800217c:	2210      	movs	r2, #16
 800217e:	609a      	str	r2, [r3, #8]
            if (blend)
 8002180:	2900      	cmp	r1, #0
 8002182:	d0b9      	beq.n	80020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002184:	4a16      	ldr	r2, [pc, #88]	@ (80021e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 800218c:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	8840      	ldrh	r0, [r0, #2]
 8002194:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002198:	f100 30ff 	add.w	r0, r0, #4294967295
 800219c:	f022 0210 	bic.w	r2, r2, #16
 80021a0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80021a4:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 80021a8:	bf18      	it	ne
 80021aa:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021ac:	61da      	str	r2, [r3, #28]
                break;
 80021ae:	e7dd      	b.n	800216c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021b0:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80021b6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80021ba:	e7b4      	b.n	8002126 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021bc:	f240 2201 	movw	r2, #513	@ 0x201
 80021c0:	e7e1      	b.n	8002186 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 80021c2:	bf00      	nop
 80021c4:	4002b000 	.word	0x4002b000
 80021c8:	00010201 	.word	0x00010201
 80021cc:	00020009 	.word	0x00020009
 80021d0:	0002000a 	.word	0x0002000a
 80021d4:	08014491 	.word	0x08014491
 80021d8:	080144ab 	.word	0x080144ab
 80021dc:	080143ff 	.word	0x080143ff
 80021e0:	00020201 	.word	0x00020201

080021e4 <DMA2D_XferCpltCallback>:
        return instance;
 80021e4:	4b02      	ldr	r3, [pc, #8]	@ (80021f0 <DMA2D_XferCpltCallback+0xc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80021ea:	6803      	ldr	r3, [r0, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4718      	bx	r3
 80021f0:	2001543c 	.word	0x2001543c

080021f4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80021f8:	4625      	mov	r5, r4
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <_ZN8STM32DMAC1Ev+0x30>)
 80021fc:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80021fe:	2600      	movs	r6, #0
 8002200:	6060      	str	r0, [r4, #4]
 8002202:	7226      	strb	r6, [r4, #8]
 8002204:	7266      	strb	r6, [r4, #9]
 8002206:	f845 3b20 	str.w	r3, [r5], #32
 800220a:	2260      	movs	r2, #96	@ 0x60
 800220c:	4629      	mov	r1, r5
 800220e:	f008 fb83 	bl	800a918 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002212:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002216:	60ee      	str	r6, [r5, #12]
 8002218:	3524      	adds	r5, #36	@ 0x24
 800221a:	429d      	cmp	r5, r3
 800221c:	d1fb      	bne.n	8002216 <_ZN8STM32DMAC1Ev+0x22>
}
 800221e:	4620      	mov	r0, r4
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	bf00      	nop
 8002224:	08014ed0 	.word	0x08014ed0

08002228 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002228:	2001      	movs	r0, #1
 800222a:	4770      	bx	lr

0800222c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 800222c:	2038      	movs	r0, #56	@ 0x38
 800222e:	4770      	bx	lr

08002230 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002230:	2338      	movs	r3, #56	@ 0x38
 8002232:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002236:	3008      	adds	r0, #8
 8002238:	4770      	bx	lr

0800223a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800223a:	2338      	movs	r3, #56	@ 0x38
 800223c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002240:	3008      	adds	r0, #8
 8002242:	4770      	bx	lr

08002244 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002244:	2001      	movs	r0, #1
 8002246:	4770      	bx	lr

08002248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002248:	f243 10d0 	movw	r0, #12752	@ 0x31d0
 800224c:	4770      	bx	lr

0800224e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800224e:	f243 13d0 	movw	r3, #12752	@ 0x31d0
 8002252:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002256:	3008      	adds	r0, #8
 8002258:	4770      	bx	lr

0800225a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800225a:	f243 13d0 	movw	r3, #12752	@ 0x31d0
 800225e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002262:	3008      	adds	r0, #8
 8002264:	4770      	bx	lr

08002266 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002266:	2001      	movs	r0, #1
 8002268:	4770      	bx	lr

0800226a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800226a:	2010      	movs	r0, #16
 800226c:	4770      	bx	lr

0800226e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800226e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002272:	3008      	adds	r0, #8
 8002274:	4770      	bx	lr

08002276 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002276:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800227a:	3008      	adds	r0, #8
 800227c:	4770      	bx	lr

0800227e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 800227e:	4608      	mov	r0, r1
 8002280:	f000 be74 	b.w	8002f6c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002284:	b510      	push	{r4, lr}
 8002286:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8002288:	6003      	str	r3, [r0, #0]
 800228a:	4604      	mov	r4, r0
 800228c:	f007 f9bd 	bl	800960a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002290:	4620      	mov	r0, r4
 8002292:	bd10      	pop	{r4, pc}
 8002294:	08014f88 	.word	0x08014f88

08002298 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8002298:	b510      	push	{r4, lr}
 800229a:	4604      	mov	r4, r0
 800229c:	f7ff fff2 	bl	8002284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80022a0:	4620      	mov	r0, r4
 80022a2:	2140      	movs	r1, #64	@ 0x40
 80022a4:	f010 fdbe 	bl	8012e24 <_ZdlPvj>
 80022a8:	4620      	mov	r0, r4
 80022aa:	bd10      	pop	{r4, pc}

080022ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80022ac:	b510      	push	{r4, lr}
 80022ae:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022b0:	6003      	str	r3, [r0, #0]
 80022b2:	4604      	mov	r4, r0
 80022b4:	f007 f9a9 	bl	800960a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022b8:	4620      	mov	r0, r4
 80022ba:	bd10      	pop	{r4, pc}
 80022bc:	08014f54 	.word	0x08014f54

080022c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	4604      	mov	r4, r0
 80022c4:	f7ff fff2 	bl	80022ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022c8:	4620      	mov	r0, r4
 80022ca:	f243 11d8 	movw	r1, #12760	@ 0x31d8
 80022ce:	f010 fda9 	bl	8012e24 <_ZdlPvj>
 80022d2:	4620      	mov	r0, r4
 80022d4:	bd10      	pop	{r4, pc}
	...

080022d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80022d8:	b510      	push	{r4, lr}
 80022da:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022dc:	6003      	str	r3, [r0, #0]
 80022de:	4604      	mov	r4, r0
 80022e0:	f007 f993 	bl	800960a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022e4:	4620      	mov	r0, r4
 80022e6:	bd10      	pop	{r4, pc}
 80022e8:	08014f20 	.word	0x08014f20

080022ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80022ec:	b510      	push	{r4, lr}
 80022ee:	4604      	mov	r4, r0
 80022f0:	f7ff fff2 	bl	80022d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022f4:	4620      	mov	r0, r4
 80022f6:	2118      	movs	r1, #24
 80022f8:	f010 fd94 	bl	8012e24 <_ZdlPvj>
 80022fc:	4620      	mov	r0, r4
 80022fe:	bd10      	pop	{r4, pc}

08002300 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002300:	b510      	push	{r4, lr}
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <_ZN12FrontendHeapD1Ev+0x28>)
 8002304:	6003      	str	r3, [r0, #0]
 8002306:	4604      	mov	r4, r0
 8002308:	f500 5048 	add.w	r0, r0, #12800	@ 0x3200
 800230c:	3004      	adds	r0, #4
 800230e:	f7ff ffb9 	bl	8002284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002312:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002316:	f7ff ffc9 	bl	80022ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800231a:	f104 0014 	add.w	r0, r4, #20
 800231e:	f7ff ffdb 	bl	80022d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002322:	4620      	mov	r0, r4
 8002324:	bd10      	pop	{r4, pc}
 8002326:	bf00      	nop
 8002328:	08014fbc 	.word	0x08014fbc

0800232c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800232c:	b508      	push	{r3, lr}
 800232e:	4802      	ldr	r0, [pc, #8]	@ (8002338 <__tcf_0+0xc>)
 8002330:	f7ff ffe6 	bl	8002300 <_ZN12FrontendHeapD1Ev>
 8002334:	bd08      	pop	{r3, pc}
 8002336:	bf00      	nop
 8002338:	20001270 	.word	0x20001270

0800233c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800233c:	b510      	push	{r4, lr}
 800233e:	4604      	mov	r4, r0
 8002340:	f7ff ffde 	bl	8002300 <_ZN12FrontendHeapD1Ev>
 8002344:	4620      	mov	r0, r4
 8002346:	f243 31b0 	movw	r1, #13232	@ 0x33b0
 800234a:	f010 fd6b 	bl	8012e24 <_ZdlPvj>
 800234e:	4620      	mov	r0, r4
 8002350:	bd10      	pop	{r4, pc}
	...

08002354 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8002354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002358:	f000 f9a6 	bl	80026a8 <_ZN14BitmapDatabase11getInstanceEv>
 800235c:	4605      	mov	r5, r0
 800235e:	f000 f9a7 	bl	80026b0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002362:	2400      	movs	r4, #0
 8002364:	4601      	mov	r1, r0
 8002366:	4623      	mov	r3, r4
 8002368:	4628      	mov	r0, r5
 800236a:	4622      	mov	r2, r4
 800236c:	9400      	str	r4, [sp, #0]
 800236e:	f00d fec7 	bl	8010100 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002372:	4b26      	ldr	r3, [pc, #152]	@ (800240c <touchgfx_init+0xb8>)
 8002374:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <touchgfx_init+0xbc>)
        static FrontendHeap instance;
 8002376:	4d27      	ldr	r5, [pc, #156]	@ (8002414 <touchgfx_init+0xc0>)
 8002378:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800237a:	4620      	mov	r0, r4
 800237c:	f001 fc3e 	bl	8003bfc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002380:	4825      	ldr	r0, [pc, #148]	@ (8002418 <touchgfx_init+0xc4>)
 8002382:	f00d fe25 	bl	800ffd0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002386:	682b      	ldr	r3, [r5, #0]
 8002388:	f3bf 8f5b 	dmb	ish
 800238c:	07db      	lsls	r3, r3, #31
 800238e:	d436      	bmi.n	80023fe <touchgfx_init+0xaa>
 8002390:	4628      	mov	r0, r5
 8002392:	f010 fd49 	bl	8012e28 <__cxa_guard_acquire>
 8002396:	b390      	cbz	r0, 80023fe <touchgfx_init+0xaa>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8002398:	4c20      	ldr	r4, [pc, #128]	@ (800241c <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800239a:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <touchgfx_init+0xcc>)
          screenStorage(scr),
          transitionStorage(tra),
 800239c:	4f21      	ldr	r7, [pc, #132]	@ (8002424 <touchgfx_init+0xd0>)
 800239e:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 80023a0:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 80023a4:	f500 5649 	add.w	r6, r0, #12864	@ 0x3240
          screenStorage(scr),
 80023a8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
        : presenterStorage(pres),
 80023ac:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80023ae:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 80023b2:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 80023b4:	6126      	str	r6, [r4, #16]
 80023b6:	f007 f929 	bl	800960c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80023ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <touchgfx_init+0xd4>)
 80023bc:	6163      	str	r3, [r4, #20]
 80023be:	4640      	mov	r0, r8
 80023c0:	f007 f924 	bl	800960c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <touchgfx_init+0xd8>)
 80023c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80023c8:	4638      	mov	r0, r7
 80023ca:	f007 f91f 	bl	800960c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80023ce:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 80023d2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80023d6:	4a16      	ldr	r2, [pc, #88]	@ (8002430 <touchgfx_init+0xdc>)
 80023d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80023dc:	f001 fc8a 	bl	8003cf4 <_ZN5ModelC1Ev>
 80023e0:	4622      	mov	r2, r4
 80023e2:	f1a6 0110 	sub.w	r1, r6, #16
 80023e6:	4630      	mov	r0, r6
 80023e8:	f001 fc7a 	bl	8003ce0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80023ec:	4630      	mov	r0, r6
 80023ee:	f000 fdbd 	bl	8002f6c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80023f2:	4810      	ldr	r0, [pc, #64]	@ (8002434 <touchgfx_init+0xe0>)
 80023f4:	f010 fd62 	bl	8012ebc <atexit>
 80023f8:	4628      	mov	r0, r5
 80023fa:	f010 fd21 	bl	8012e40 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80023fe:	480e      	ldr	r0, [pc, #56]	@ (8002438 <touchgfx_init+0xe4>)
}
 8002400:	b002      	add	sp, #8
 8002402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002406:	f7ff bc5b 	b.w	8001cc0 <_ZN11TouchGFXHAL10initializeEv>
 800240a:	bf00      	nop
 800240c:	20015498 	.word	0x20015498
 8002410:	20000438 	.word	0x20000438
 8002414:	2000126c 	.word	0x2000126c
 8002418:	20000014 	.word	0x20000014
 800241c:	20001270 	.word	0x20001270
 8002420:	08014fbc 	.word	0x08014fbc
 8002424:	20004474 	.word	0x20004474
 8002428:	08014f20 	.word	0x08014f20
 800242c:	08014f54 	.word	0x08014f54
 8002430:	08014f88 	.word	0x08014f88
 8002434:	0800232d 	.word	0x0800232d
 8002438:	200003bc 	.word	0x200003bc

0800243c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800243c:	4801      	ldr	r0, [pc, #4]	@ (8002444 <touchgfx_taskEntry+0x8>)
 800243e:	f7ff bc51 	b.w	8001ce4 <_ZN11TouchGFXHAL9taskEntryEv>
 8002442:	bf00      	nop
 8002444:	200003bc 	.word	0x200003bc

08002448 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002448:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800244a:	4e22      	ldr	r6, [pc, #136]	@ (80024d4 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 800244c:	4c22      	ldr	r4, [pc, #136]	@ (80024d8 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 800244e:	4d23      	ldr	r5, [pc, #140]	@ (80024dc <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002450:	4b23      	ldr	r3, [pc, #140]	@ (80024e0 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002452:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002454:	4630      	mov	r0, r6
 8002456:	f7ff fecd 	bl	80021f4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800245a:	4628      	mov	r0, r5
 800245c:	f00e fcb0 	bl	8010dc0 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8002460:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002462:	4821      	ldr	r0, [pc, #132]	@ (80024e8 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8002464:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8002466:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002468:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 800246c:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 8002470:	491e      	ldr	r1, [pc, #120]	@ (80024ec <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002472:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8002474:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002478:	491d      	ldr	r1, [pc, #116]	@ (80024f0 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 800247a:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 800247c:	491d      	ldr	r1, [pc, #116]	@ (80024f4 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 800247e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 8002482:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002484:	21f0      	movs	r1, #240	@ 0xf0
 8002486:	8001      	strh	r1, [r0, #0]
 8002488:	481b      	ldr	r0, [pc, #108]	@ (80024f8 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 800248a:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800248c:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800248e:	481b      	ldr	r0, [pc, #108]	@ (80024fc <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 8002490:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002494:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 8002498:	e9c3 2204 	strd	r2, r2, [r3, #16]
 800249c:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80024a0:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80024a4:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 80024a8:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 80024ac:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80024b0:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80024b4:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 80024b8:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80024ba:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80024be:	8001      	strh	r1, [r0, #0]
 80024c0:	480f      	ldr	r0, [pc, #60]	@ (8002500 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80024c2:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80024c4:	490f      	ldr	r1, [pc, #60]	@ (8002504 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80024c6:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80024ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002508 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bd70      	pop	{r4, r5, r6, pc}
 80024d4:	200004c8 	.word	0x200004c8
 80024d8:	20001268 	.word	0x20001268
 80024dc:	2000043c 	.word	0x2000043c
 80024e0:	08014de0 	.word	0x08014de0
 80024e4:	200003bc 	.word	0x200003bc
 80024e8:	20015430 	.word	0x20015430
 80024ec:	01000001 	.word	0x01000001
 80024f0:	01010000 	.word	0x01010000
 80024f4:	2001543c 	.word	0x2001543c
 80024f8:	20015436 	.word	0x20015436
 80024fc:	20015432 	.word	0x20015432
 8002500:	20015438 	.word	0x20015438
 8002504:	20015434 	.word	0x20015434
 8002508:	08014df8 	.word	0x08014df8

0800250c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800250c:	4801      	ldr	r0, [pc, #4]	@ (8002514 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800250e:	f7ff bd27 	b.w	8001f60 <_ZN8STM32DMAD1Ev>
 8002512:	bf00      	nop
 8002514:	200004c8 	.word	0x200004c8

08002518 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	4b03      	ldr	r3, [pc, #12]	@ (8002528 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 800251a:	2290      	movs	r2, #144	@ 0x90
 800251c:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 8002520:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800252c:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800252e:	490a      	ldr	r1, [pc, #40]	@ (8002558 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002530:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002532:	480a      	ldr	r0, [pc, #40]	@ (800255c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002538:	3b01      	subs	r3, #1
 800253a:	b29b      	uxth	r3, r3
 800253c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800253e:	6911      	ldr	r1, [r2, #16]
 8002540:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002544:	3901      	subs	r1, #1
 8002546:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800254a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8002552:	4770      	bx	lr
 8002554:	40016800 	.word	0x40016800
 8002558:	20004622 	.word	0x20004622
 800255c:	20004620 	.word	0x20004620

08002560 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002560:	4b01      	ldr	r3, [pc, #4]	@ (8002568 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002562:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8002566:	4770      	bx	lr
 8002568:	40016800 	.word	0x40016800

0800256c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800256c:	4b02      	ldr	r3, [pc, #8]	@ (8002578 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800256e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002570:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002574:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002576:	4770      	bx	lr
 8002578:	40016800 	.word	0x40016800

0800257c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	4604      	mov	r4, r0
    HAL::initialize();
 8002580:	f007 fb41 	bl	8009c06 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8002588:	f00a fcee 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
 800258c:	4601      	mov	r1, r0
 800258e:	4620      	mov	r0, r4
 8002590:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	4a05      	ldr	r2, [pc, #20]	@ (80025ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8002596:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800259a:	4620      	mov	r0, r4
 800259c:	46ac      	mov	ip, r5
 800259e:	2300      	movs	r3, #0
}
 80025a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80025a4:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 80025a8:	4760      	bx	ip
 80025aa:	bf00      	nop
 80025ac:	d004b000 	.word	0xd004b000

080025b0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80025b0:	f007 bb10 	b.w	8009bd4 <_ZN8touchgfx3HAL10beginFrameEv>

080025b4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80025b4:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 80025b8:	b113      	cbz	r3, 80025c0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80025ba:	4b02      	ldr	r3, [pc, #8]	@ (80025c4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80025c0:	f007 bb14 	b.w	8009bec <_ZN8touchgfx3HAL8endFrameEv>
 80025c4:	20004624 	.word	0x20004624

080025c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80025c8:	f007 bace 	b.w	8009b68 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080025cc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80025cc:	f007 bc2f 	b.w	8009e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080025d0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d0:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80025d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025dc:	609a      	str	r2, [r3, #8]
}
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80025e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80025ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80025fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002602:	f3bf 8f6f 	isb	sy
}
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100

0800260c <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800260c:	b510      	push	{r4, lr}
        return instance;
 800260e:	4c14      	ldr	r4, [pc, #80]	@ (8002660 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	b323      	cbz	r3, 800265e <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_LTDC_LineEventCallback+0x58>)
 8002616:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <HAL_LTDC_LineEventCallback+0x5c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	8811      	ldrh	r1, [r2, #0]
 800261c:	428b      	cmp	r3, r1
 800261e:	d113      	bne.n	8002648 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_LTDC_LineEventCallback+0x60>)
 8002622:	8819      	ldrh	r1, [r3, #0]
 8002624:	f003 f9de 	bl	80059e4 <HAL_LTDC_ProgramLineEvent>
 8002628:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800262a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800262e:	3301      	adds	r3, #1
 8002630:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002634:	f7ff fc42 	bl	8001ebc <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002638:	6820      	ldr	r0, [r4, #0]
 800263a:	f008 f82f 	bl	800a69c <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800263e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002642:	2000      	movs	r0, #0
 8002644:	f7ff ba82 	b.w	8001b4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002648:	f003 f9cc 	bl	80059e4 <HAL_LTDC_ProgramLineEvent>
        return instance;
 800264c:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4798      	blx	r3
    }
 8002654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002658:	2000      	movs	r0, #0
 800265a:	f7ff baa1 	b.w	8001ba0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800265e:	bd10      	pop	{r4, pc}
 8002660:	2001543c 	.word	0x2001543c
 8002664:	40016800 	.word	0x40016800
 8002668:	20004622 	.word	0x20004622
 800266c:	20004620 	.word	0x20004620

08002670 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // arialbd_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // arialbd_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002670:	4770      	bx	lr

08002672 <_ZN23ApplicationFontProviderD0Ev>:
 8002672:	b510      	push	{r4, lr}
 8002674:	2104      	movs	r1, #4
 8002676:	4604      	mov	r4, r0
 8002678:	f010 fbd4 	bl	8012e24 <_ZdlPvj>
 800267c:	4620      	mov	r0, r4
 800267e:	bd10      	pop	{r4, pc}

08002680 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002680:	2901      	cmp	r1, #1
{
 8002682:	b508      	push	{r3, lr}
    switch (typography)
 8002684:	d006      	beq.n	8002694 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8002686:	2902      	cmp	r1, #2
 8002688:	d008      	beq.n	800269c <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 800268a:	b959      	cbnz	r1, 80026a4 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // arialbd_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800268c:	f001 fb02 	bl	8003c94 <_ZN17TypedTextDatabase8getFontsEv>
 8002690:	6800      	ldr	r0, [r0, #0]
        // arialbd_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002692:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002694:	f001 fafe 	bl	8003c94 <_ZN17TypedTextDatabase8getFontsEv>
 8002698:	6840      	ldr	r0, [r0, #4]
 800269a:	e7fa      	b.n	8002692 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800269c:	f001 fafa 	bl	8003c94 <_ZN17TypedTextDatabase8getFontsEv>
 80026a0:	6880      	ldr	r0, [r0, #8]
 80026a2:	e7f6      	b.n	8002692 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80026a4:	2000      	movs	r0, #0
 80026a6:	e7f4      	b.n	8002692 <_ZN23ApplicationFontProvider7getFontEt+0x12>

080026a8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80026a8:	4800      	ldr	r0, [pc, #0]	@ (80026ac <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80026aa:	4770      	bx	lr
 80026ac:	08014fdc 	.word	0x08014fdc

080026b0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80026b0:	2004      	movs	r0, #4
 80026b2:	4770      	bx	lr

080026b4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80026b4:	b513      	push	{r0, r1, r4, lr}
 80026b6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80026b8:	b151      	cbz	r1, 80026d0 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80026ba:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80026bc:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80026be:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80026c2:	aa01      	add	r2, sp, #4
 80026c4:	689c      	ldr	r4, [r3, #8]
 80026c6:	f10d 0303 	add.w	r3, sp, #3
 80026ca:	47a0      	blx	r4
        return glyph;
    }
 80026cc:	b002      	add	sp, #8
 80026ce:	bd10      	pop	{r4, pc}
            return 0;
 80026d0:	4608      	mov	r0, r1
 80026d2:	e7fb      	b.n	80026cc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080026d4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80026d4:	89c0      	ldrh	r0, [r0, #14]
 80026d6:	4770      	bx	lr

080026d8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80026d8:	8a00      	ldrh	r0, [r0, #16]
 80026da:	4770      	bx	lr

080026dc <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80026dc:	88c0      	ldrh	r0, [r0, #6]
 80026de:	4770      	bx	lr

080026e0 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80026e0:	8880      	ldrh	r0, [r0, #4]
 80026e2:	4770      	bx	lr

080026e4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80026e4:	7a80      	ldrb	r0, [r0, #10]
    }
 80026e6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80026ea:	4770      	bx	lr

080026ec <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80026ec:	7a80      	ldrb	r0, [r0, #10]
    }
 80026ee:	09c0      	lsrs	r0, r0, #7
 80026f0:	4770      	bx	lr

080026f2 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80026f2:	2000      	movs	r0, #0
 80026f4:	4770      	bx	lr
	...

080026f8 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80026f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002700 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	00000000 	.word	0x00000000

08002704 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002704:	4770      	bx	lr

08002706 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002706:	b510      	push	{r4, lr}
    }
 8002708:	2108      	movs	r1, #8
    virtual ~TypedText()
 800270a:	4604      	mov	r4, r0
    }
 800270c:	f010 fb8a 	bl	8012e24 <_ZdlPvj>
 8002710:	4620      	mov	r0, r4
 8002712:	bd10      	pop	{r4, pc}

08002714 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002714:	2000      	movs	r0, #0
 8002716:	4770      	bx	lr

08002718 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002718:	8081      	strh	r1, [r0, #4]
    }
 800271a:	4770      	bx	lr

0800271c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800271c:	80c1      	strh	r1, [r0, #6]
    }
 800271e:	4770      	bx	lr

08002720 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002720:	8101      	strh	r1, [r0, #8]
    }
 8002722:	4770      	bx	lr

08002724 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002724:	8141      	strh	r1, [r0, #10]
    }
 8002726:	4770      	bx	lr

08002728 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002728:	4770      	bx	lr

0800272a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800272a:	4770      	bx	lr

0800272c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800272c:	4770      	bx	lr

0800272e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800272e:	4770      	bx	lr

08002730 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002730:	4770      	bx	lr

08002732 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002732:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002734:	88c4      	ldrh	r4, [r0, #6]
 8002736:	6803      	ldr	r3, [r0, #0]
 8002738:	1b12      	subs	r2, r2, r4
 800273a:	8884      	ldrh	r4, [r0, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	1b09      	subs	r1, r1, r4
 8002740:	b212      	sxth	r2, r2
    }
 8002742:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002746:	b209      	sxth	r1, r1
 8002748:	4718      	bx	r3

0800274a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800274a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800274e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
 8002754:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002756:	6813      	ldr	r3, [r2, #0]
 8002758:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800275a:	6010      	str	r0, [r2, #0]
    }
 800275c:	4770      	bx	lr

0800275e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800275e:	4770      	bx	lr

08002760 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002760:	4770      	bx	lr

08002762 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002762:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8002766:	6808      	ldr	r0, [r1, #0]
 8002768:	6849      	ldr	r1, [r1, #4]
 800276a:	c303      	stmia	r3!, {r0, r1}
    }
 800276c:	4770      	bx	lr

0800276e <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800276e:	4770      	bx	lr

08002770 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002770:	4770      	bx	lr

08002772 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002772:	6041      	str	r1, [r0, #4]
    }
 8002774:	4770      	bx	lr

08002776 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 8002776:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002778:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 800277a:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 800277e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002782:	8002      	strh	r2, [r0, #0]
 8002784:	8042      	strh	r2, [r0, #2]
 8002786:	8084      	strh	r4, [r0, #4]
 8002788:	80c1      	strh	r1, [r0, #6]
        }
 800278a:	bd10      	pop	{r4, pc}

0800278c <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 800278c:	4770      	bx	lr

0800278e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800278e:	4770      	bx	lr

08002790 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002790:	4770      	bx	lr
	...

08002794 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002796:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800279a:	2300      	movs	r3, #0
 800279c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80027a0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80027a4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027a8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	08002a55 	.word	0x08002a55

080027b4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80027b4:	2301      	movs	r3, #1
 80027b6:	7203      	strb	r3, [r0, #8]
    }
 80027b8:	4770      	bx	lr

080027ba <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 80027ba:	4770      	bx	lr

080027bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 80027bc:	4770      	bx	lr

080027be <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 80027be:	4770      	bx	lr

080027c0 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80027c0:	4770      	bx	lr

080027c2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 80027c2:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80027c4:	6840      	ldr	r0, [r0, #4]
 80027c6:	6803      	ldr	r3, [r0, #0]
 80027c8:	3110      	adds	r1, #16
 80027ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027cc:	4718      	bx	r3

080027ce <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 80027ce:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80027d0:	6840      	ldr	r0, [r0, #4]
 80027d2:	6803      	ldr	r3, [r0, #0]
 80027d4:	3110      	adds	r1, #16
 80027d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d8:	4718      	bx	r3

080027da <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 80027da:	4770      	bx	lr

080027dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 80027dc:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80027de:	6840      	ldr	r0, [r0, #4]
 80027e0:	6803      	ldr	r3, [r0, #0]
 80027e2:	3110      	adds	r1, #16
 80027e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027e6:	4718      	bx	r3

080027e8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 80027ec:	6840      	ldr	r0, [r0, #4]
 80027ee:	6803      	ldr	r3, [r0, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4798      	blx	r3
 80027f4:	4604      	mov	r4, r0
        while (d)
 80027f6:	b93c      	cbnz	r4, 8002808 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 80027f8:	6868      	ldr	r0, [r5, #4]
 80027fa:	6803      	ldr	r3, [r0, #0]
 80027fc:	f105 0110 	add.w	r1, r5, #16
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    }
 8002802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8002806:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8002808:	88a1      	ldrh	r1, [r4, #4]
 800280a:	89ab      	ldrh	r3, [r5, #12]
 800280c:	1ac9      	subs	r1, r1, r3
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	4620      	mov	r0, r4
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	b209      	sxth	r1, r1
 8002816:	4798      	blx	r3
        return nextSibling;
 8002818:	69a4      	ldr	r4, [r4, #24]
 800281a:	e7ec      	b.n	80027f6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

0800281c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Cover transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 800281c:	4770      	bx	lr

0800281e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800281e:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002820:	68c2      	ldr	r2, [r0, #12]
 8002822:	6841      	ldr	r1, [r0, #4]
 8002824:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8002826:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8002828:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800282c:	07d2      	lsls	r2, r2, #31
 800282e:	bf48      	it	mi
 8002830:	590a      	ldrmi	r2, [r1, r4]
 8002832:	689b      	ldr	r3, [r3, #8]
    }
 8002834:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002838:	bf48      	it	mi
 800283a:	58d3      	ldrmi	r3, [r2, r3]
 800283c:	4718      	bx	r3

0800283e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800283e:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8002840:	6840      	ldr	r0, [r0, #4]
 8002842:	b130      	cbz	r0, 8002852 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	b91a      	cbnz	r2, 8002850 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8002848:	68d8      	ldr	r0, [r3, #12]
 800284a:	f000 0001 	and.w	r0, r0, #1
 800284e:	4770      	bx	lr
 8002850:	2001      	movs	r0, #1
    }
 8002852:	4770      	bx	lr

08002854 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002854:	b510      	push	{r4, lr}
 8002856:	210c      	movs	r1, #12
 8002858:	4604      	mov	r4, r0
 800285a:	f010 fae3 	bl	8012e24 <_ZdlPvj>
 800285e:	4620      	mov	r0, r4
 8002860:	bd10      	pop	{r4, pc}

08002862 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002862:	b510      	push	{r4, lr}
 8002864:	2110      	movs	r1, #16
 8002866:	4604      	mov	r4, r0
 8002868:	f010 fadc 	bl	8012e24 <_ZdlPvj>
 800286c:	4620      	mov	r0, r4
 800286e:	bd10      	pop	{r4, pc}

08002870 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002870:	b510      	push	{r4, lr}
 8002872:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8002876:	4604      	mov	r4, r0
 8002878:	f010 fad4 	bl	8012e24 <_ZdlPvj>
 800287c:	4620      	mov	r0, r4
 800287e:	bd10      	pop	{r4, pc}

08002880 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 8002880:	b510      	push	{r4, lr}
 8002882:	2138      	movs	r1, #56	@ 0x38
 8002884:	4604      	mov	r4, r0
 8002886:	f010 facd 	bl	8012e24 <_ZdlPvj>
 800288a:	4620      	mov	r0, r4
 800288c:	bd10      	pop	{r4, pc}

0800288e <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 800288e:	b510      	push	{r4, lr}
 8002890:	2128      	movs	r1, #40	@ 0x28
 8002892:	4604      	mov	r4, r0
 8002894:	f010 fac6 	bl	8012e24 <_ZdlPvj>
 8002898:	4620      	mov	r0, r4
 800289a:	bd10      	pop	{r4, pc}

0800289c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
class CoverTransition : public Transition
 800289c:	b510      	push	{r4, lr}
 800289e:	2138      	movs	r1, #56	@ 0x38
 80028a0:	4604      	mov	r4, r0
 80028a2:	f010 fabf 	bl	8012e24 <_ZdlPvj>
 80028a6:	4620      	mov	r0, r4
 80028a8:	bd10      	pop	{r4, pc}

080028aa <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80028aa:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80028ac:	f00a fb5c 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
 80028b0:	6803      	ldr	r3, [r0, #0]
    }
 80028b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	4718      	bx	r3
	...

080028bc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80028bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028be:	4605      	mov	r5, r0
        animationCounter++;
 80028c0:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 80028c2:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 80028c4:	3001      	adds	r0, #1
 80028c6:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80028c8:	4298      	cmp	r0, r3
        animationCounter++;
 80028ca:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 80028cc:	d905      	bls.n	80028da <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80028ce:	2301      	movs	r3, #1
 80028d0:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	72ab      	strb	r3, [r5, #10]
    }
 80028d6:	b003      	add	sp, #12
 80028d8:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80028da:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
        const int16_t oldValue = calculatedValue;
 80028de:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80028e2:	2100      	movs	r1, #0
 80028e4:	f00c f838 	bl	800e958 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80028e8:	07c3      	lsls	r3, r0, #31
 80028ea:	d507      	bpl.n	80028fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80028ec:	2800      	cmp	r0, #0
 80028ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028f2:	bfc8      	it	gt
 80028f4:	2301      	movgt	r3, #1
 80028f6:	fa13 f080 	uxtah	r0, r3, r0
 80028fa:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80028fc:	7aab      	ldrb	r3, [r5, #10]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80028fe:	81e8      	strh	r0, [r5, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 8002900:	1b04      	subs	r4, r0, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8002902:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 8002904:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8002906:	d106      	bne.n	8002916 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
 8002908:	4b17      	ldr	r3, [pc, #92]	@ (8002968 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b11b      	cbz	r3, 8002916 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800290e:	f00a fb2b 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
 8002912:	f00a fb2f 	bl	800cf74 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8002916:	4a15      	ldr	r2, [pc, #84]	@ (800296c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
        : x(0), y(0), width(0), height(0)
 8002918:	2300      	movs	r3, #0
 800291a:	8812      	ldrh	r2, [r2, #0]
 800291c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002920:	89eb      	ldrh	r3, [r5, #14]
 8002922:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 8002924:	425b      	negs	r3, r3
 8002926:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800292c:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8002936:	f00a fb17 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
 800293a:	6803      	ldr	r3, [r0, #0]
 800293c:	aa02      	add	r2, sp, #8
 800293e:	e912 0006 	ldmdb	r2, {r1, r2}
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 8002946:	6868      	ldr	r0, [r5, #4]
 8002948:	6803      	ldr	r3, [r0, #0]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4798      	blx	r3
 800294e:	4605      	mov	r5, r0
        while (d)
 8002950:	2d00      	cmp	r5, #0
 8002952:	d0c0      	beq.n	80028d6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8002954:	88a9      	ldrh	r1, [r5, #4]
 8002956:	682b      	ldr	r3, [r5, #0]
 8002958:	4421      	add	r1, r4
 800295a:	4628      	mov	r0, r5
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	b209      	sxth	r1, r1
 8002960:	4798      	blx	r3
 8002962:	69ad      	ldr	r5, [r5, #24]
 8002964:	e7f4      	b.n	8002950 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8002966:	bf00      	nop
 8002968:	2001543a 	.word	0x2001543a
 800296c:	20015430 	.word	0x20015430
 8002970:	20015432 	.word	0x20015432

08002974 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002974:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002978:	b112      	cbz	r2, 8002980 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 800297a:	6803      	ldr	r3, [r0, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	4718      	bx	r3
    }
 8002980:	4770      	bx	lr
	...

08002984 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002986:	4604      	mov	r4, r0
        animationCounter++;
 8002988:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 800298a:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 800298c:	3001      	adds	r0, #1
 800298e:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8002990:	4298      	cmp	r0, r3
        animationCounter++;
 8002992:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8002994:	d905      	bls.n	80029a2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8002996:	2301      	movs	r3, #1
 8002998:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	72a3      	strb	r3, [r4, #10]
    }
 800299e:	b003      	add	sp, #12
 80029a0:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80029a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029a6:	2100      	movs	r1, #0
 80029a8:	f00b ffd6 	bl	800e958 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80029ac:	07c3      	lsls	r3, r0, #31
 80029ae:	d507      	bpl.n	80029c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80029b0:	2800      	cmp	r0, #0
 80029b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029b6:	bfc8      	it	gt
 80029b8:	2301      	movgt	r3, #1
 80029ba:	fa13 f080 	uxtah	r0, r3, r0
 80029be:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80029c0:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80029c2:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80029c4:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 80029c6:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80029c8:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 80029ca:	4813      	ldr	r0, [pc, #76]	@ (8002a18 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 80029cc:	f9b0 0000 	ldrsh.w	r0, [r0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80029d0:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80029d4:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 80029d6:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 80029d8:	442b      	add	r3, r5
 80029da:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80029dc:	b212      	sxth	r2, r2
 80029de:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 80029e2:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 80029e4:	8322      	strh	r2, [r4, #24]
 80029e6:	f8ad 2000 	strh.w	r2, [sp]
 80029ea:	2200      	movs	r2, #0
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f8ad 2002 	strh.w	r2, [sp, #2]
 80029f2:	4669      	mov	r1, sp
 80029f4:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80029f6:	7aa3      	ldrb	r3, [r4, #10]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d1d0      	bne.n	800299e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 80029fc:	4b07      	ldr	r3, [pc, #28]	@ (8002a1c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0cc      	beq.n	800299e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002a04:	f00a fab0 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002a08:	b003      	add	sp, #12
 8002a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002a0e:	f00a bab1 	b.w	800cf74 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 8002a12:	bf00      	nop
 8002a14:	20015430 	.word	0x20015430
 8002a18:	20015432 	.word	0x20015432
 8002a1c:	2001543a 	.word	0x2001543a

08002a20 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002a20:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002a24:	b11a      	cbz	r2, 8002a2e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002a26:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002a2a:	b102      	cbz	r2, 8002a2e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002a2c:	6018      	str	r0, [r3, #0]
        }
    }
 8002a2e:	4770      	bx	lr

08002a30 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002a30:	b510      	push	{r4, lr}
 8002a32:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002a34:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8002a38:	b158      	cbz	r0, 8002a52 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002a3a:	6803      	ldr	r3, [r0, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	4798      	blx	r3
 8002a40:	b138      	cbz	r0, 8002a52 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002a42:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8002a46:	6803      	ldr	r3, [r0, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8002a52:	bd10      	pop	{r4, pc}

08002a54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002a54:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002a58:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002a5c:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002a5e:	68b0      	ldr	r0, [r6, #8]
 8002a60:	6803      	ldr	r3, [r0, #0]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4798      	blx	r3
 8002a66:	f5b0 7fd2 	cmp.w	r0, #420	@ 0x1a4
 8002a6a:	d205      	bcs.n	8002a78 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8002a6c:	4b44      	ldr	r3, [pc, #272]	@ (8002b80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002a6e:	4a45      	ldr	r2, [pc, #276]	@ (8002b84 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002a70:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002a72:	4845      	ldr	r0, [pc, #276]	@ (8002b88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002a74:	f010 fa04 	bl	8012e80 <__assert_func>
 8002a78:	6870      	ldr	r0, [r6, #4]
 8002a7a:	6803      	ldr	r3, [r0, #0]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4798      	blx	r3
 8002a80:	280f      	cmp	r0, #15
 8002a82:	d803      	bhi.n	8002a8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8002a84:	4b41      	ldr	r3, [pc, #260]	@ (8002b8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002a86:	4a3f      	ldr	r2, [pc, #252]	@ (8002b84 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002a88:	21a4      	movs	r1, #164	@ 0xa4
 8002a8a:	e7f2      	b.n	8002a72 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002a8c:	68f0      	ldr	r0, [r6, #12]
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	4798      	blx	r3
 8002a94:	280b      	cmp	r0, #11
 8002a96:	d803      	bhi.n	8002aa0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8002a98:	4b3d      	ldr	r3, [pc, #244]	@ (8002b90 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b84 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002a9c:	21a5      	movs	r1, #165	@ 0xa5
 8002a9e:	e7e8      	b.n	8002a72 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8002aa0:	f00a fa62 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002aa4:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002b98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002aa8:	3004      	adds	r0, #4
 8002aaa:	f00a faaa 	bl	800d002 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002aae:	f8d9 0000 	ldr.w	r0, [r9]
 8002ab2:	b110      	cbz	r0, 8002aba <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4798      	blx	r3
    if (*currentTrans)
 8002aba:	f8d9 0000 	ldr.w	r0, [r9]
 8002abe:	b110      	cbz	r0, 8002ac6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8002ac0:	6803      	ldr	r3, [r0, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4798      	blx	r3
    if (*currentScreen)
 8002ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8002aca:	f8d8 0000 	ldr.w	r0, [r8]
 8002ace:	b110      	cbz	r0, 8002ad6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8002ad0:	6803      	ldr	r3, [r0, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	4798      	blx	r3
    if (*currentPresenter)
 8002ad6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002ada:	b110      	cbz	r0, 8002ae2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8002adc:	6803      	ldr	r3, [r0, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4798      	blx	r3
    if (*currentScreen)
 8002ae2:	f8d8 0000 	ldr.w	r0, [r8]
 8002ae6:	b110      	cbz	r0, 8002aee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8002ae8:	6803      	ldr	r3, [r0, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4798      	blx	r3
    if (*currentPresenter)
 8002aee:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002af2:	b110      	cbz	r0, 8002afa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8002af4:	6803      	ldr	r3, [r0, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002afa:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002afc:	6803      	ldr	r3, [r0, #0]
 8002afe:	2100      	movs	r1, #0
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	4798      	blx	r3
        : screenContainer(0), done(false)
 8002b04:	f04f 0b00 	mov.w	fp, #0
 8002b08:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002b0a:	f8c0 b004 	str.w	fp, [r0, #4]
 8002b0e:	4604      	mov	r4, r0
 8002b10:	f880 b008 	strb.w	fp, [r0, #8]
 8002b14:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002b16:	68b0      	ldr	r0, [r6, #8]
 8002b18:	6803      	ldr	r3, [r0, #0]
 8002b1a:	4659      	mov	r1, fp
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	4798      	blx	r3
 8002b20:	4605      	mov	r5, r0
 8002b22:	f001 f92b 	bl	8003d7c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002b26:	6870      	ldr	r0, [r6, #4]
 8002b28:	6803      	ldr	r3, [r0, #0]
 8002b2a:	4659      	mov	r1, fp
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	4798      	blx	r3
 8002b30:	4629      	mov	r1, r5
 8002b32:	4606      	mov	r6, r0
 8002b34:	f001 f8fe 	bl	8003d34 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8002b38:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002b3a:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002b3e:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002b42:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002b44:	f8c6 a008 	str.w	sl, [r6, #8]
 8002b48:	4628      	mov	r0, r5
 8002b4a:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002b4c:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002b50:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002b54:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002b56:	4798      	blx	r3
    newPresenter->activate();
 8002b58:	6833      	ldr	r3, [r6, #0]
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002b60:	4621      	mov	r1, r4
 8002b62:	4628      	mov	r0, r5
 8002b64:	f00b fef2 	bl	800e94c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	4798      	blx	r3
    newTransition->invalidate();
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	4620      	mov	r0, r4
}
 8002b76:	b001      	add	sp, #4
 8002b78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	4718      	bx	r3
 8002b7e:	bf00      	nop
 8002b80:	080144e9 	.word	0x080144e9
 8002b84:	08014577 	.word	0x08014577
 8002b88:	08014649 	.word	0x08014649
 8002b8c:	08014690 	.word	0x08014690
 8002b90:	08014733 	.word	0x08014733
 8002b94:	08015118 	.word	0x08015118
 8002b98:	2001547c 	.word	0x2001547c
 8002b9c:	20015478 	.word	0x20015478

08002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba4:	461d      	mov	r5, r3
        setX(x);
 8002ba6:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002ba8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002bae:	4604      	mov	r4, r0
 8002bb0:	4616      	mov	r6, r2
        setX(x);
 8002bb2:	4798      	blx	r3
        setY(y);
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	4631      	mov	r1, r6
 8002bb8:	4620      	mov	r0, r4
 8002bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbc:	4798      	blx	r3
        setWidth(width);
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	4798      	blx	r3
        setHeight(height);
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	4639      	mov	r1, r7
 8002bcc:	4620      	mov	r0, r4
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8002bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8002bd4:	4718      	bx	r3
	...

08002bd8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl()
{
 8002bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002bdc:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002be0:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002be2:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002be6:	6803      	ldr	r3, [r0, #0]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4798      	blx	r3
 8002bec:	f5b0 7fd2 	cmp.w	r0, #420	@ 0x1a4
 8002bf0:	d205      	bcs.n	8002bfe <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x26>
 8002bf2:	4b54      	ldr	r3, [pc, #336]	@ (8002d44 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x16c>)
 8002bf4:	4a54      	ldr	r2, [pc, #336]	@ (8002d48 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002bf6:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002bf8:	4854      	ldr	r0, [pc, #336]	@ (8002d4c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 8002bfa:	f010 f941 	bl	8012e80 <__assert_func>
 8002bfe:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002c02:	6803      	ldr	r3, [r0, #0]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4798      	blx	r3
 8002c08:	280f      	cmp	r0, #15
 8002c0a:	d803      	bhi.n	8002c14 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3c>
 8002c0c:	4b50      	ldr	r3, [pc, #320]	@ (8002d50 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 8002c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8002d48 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002c10:	21a4      	movs	r1, #164	@ 0xa4
 8002c12:	e7f1      	b.n	8002bf8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002c14:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002c18:	6803      	ldr	r3, [r0, #0]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4798      	blx	r3
 8002c1e:	2837      	cmp	r0, #55	@ 0x37
 8002c20:	d803      	bhi.n	8002c2a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x52>
 8002c22:	4b4c      	ldr	r3, [pc, #304]	@ (8002d54 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 8002c24:	4a48      	ldr	r2, [pc, #288]	@ (8002d48 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002c26:	21a5      	movs	r1, #165	@ 0xa5
 8002c28:	e7e6      	b.n	8002bf8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8002c2a:	f00a f99d 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002c2e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002d68 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>
 8002c32:	3004      	adds	r0, #4
 8002c34:	f00a f9e5 	bl	800d002 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002c38:	f8d9 0000 	ldr.w	r0, [r9]
 8002c3c:	b110      	cbz	r0, 8002c44 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 8002c3e:	6803      	ldr	r3, [r0, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4798      	blx	r3
    if (*currentTrans)
 8002c44:	f8d9 0000 	ldr.w	r0, [r9]
 8002c48:	b110      	cbz	r0, 8002c50 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8002c4a:	6803      	ldr	r3, [r0, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4798      	blx	r3
    if (*currentScreen)
 8002c50:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 8002d6c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 8002c54:	f8d8 0000 	ldr.w	r0, [r8]
 8002c58:	b110      	cbz	r0, 8002c60 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8002c5a:	6803      	ldr	r3, [r0, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4798      	blx	r3
    if (*currentPresenter)
 8002c60:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002c64:	b110      	cbz	r0, 8002c6c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8002c66:	6803      	ldr	r3, [r0, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4798      	blx	r3
    if (*currentScreen)
 8002c6c:	f8d8 0000 	ldr.w	r0, [r8]
 8002c70:	b110      	cbz	r0, 8002c78 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8002c72:	6803      	ldr	r3, [r0, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4798      	blx	r3
    if (*currentPresenter)
 8002c78:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002c7c:	b110      	cbz	r0, 8002c84 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8002c7e:	6803      	ldr	r3, [r0, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002c84:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002c88:	6803      	ldr	r3, [r0, #0]
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	4798      	blx	r3
          solid()
 8002c90:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 8002c92:	6003      	str	r3, [r0, #0]
 8002c94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c98:	8103      	strh	r3, [r0, #8]
 8002c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c9e:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d5c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 8002ca2:	6103      	str	r3, [r0, #16]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d60 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
            targetValue = HAL::DISPLAY_WIDTH;
 8002ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d64 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002ca8:	f9b2 2000 	ldrsh.w	r2, [r2]
            targetValue = HAL::DISPLAY_WIDTH;
 8002cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb0:	8183      	strh	r3, [r0, #12]
        : screenContainer(0), done(false)
 8002cb2:	2500      	movs	r5, #0
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 8002cb8:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002cba:	81c5      	strh	r5, [r0, #14]
          solid()
 8002cbc:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002cc0:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002cc4:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002cc8:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002ccc:	4629      	mov	r1, r5
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	3010      	adds	r0, #16
 8002cd2:	462a      	mov	r2, r5
 8002cd4:	f7ff ff64 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002cd8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002cdc:	6803      	ldr	r3, [r0, #0]
 8002cde:	4629      	mov	r1, r5
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	4798      	blx	r3
 8002ce4:	4606      	mov	r6, r0
 8002ce6:	f001 f849 	bl	8003d7c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002cea:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002cee:	6803      	ldr	r3, [r0, #0]
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	4798      	blx	r3
 8002cf6:	4631      	mov	r1, r6
 8002cf8:	4605      	mov	r5, r0
 8002cfa:	f001 f81b 	bl	8003d34 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8002cfe:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002d00:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002d04:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002d08:	6833      	ldr	r3, [r6, #0]
 8002d0a:	f8c5 a008 	str.w	sl, [r5, #8]
 8002d0e:	4630      	mov	r0, r6
 8002d10:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002d12:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002d16:	f8c8 6000 	str.w	r6, [r8]
 8002d1a:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8002d1c:	4798      	blx	r3
    newPresenter->activate();
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	4628      	mov	r0, r5
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002d26:	4621      	mov	r1, r4
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f00b fe0f 	bl	800e94c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	4620      	mov	r0, r4
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	4798      	blx	r3
    newTransition->invalidate();
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4620      	mov	r0, r4
}
 8002d3c:	b003      	add	sp, #12
 8002d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d42:	4718      	bx	r3
 8002d44:	080144e9 	.word	0x080144e9
 8002d48:	080147d6 	.word	0x080147d6
 8002d4c:	08014649 	.word	0x08014649
 8002d50:	08014690 	.word	0x08014690
 8002d54:	08014733 	.word	0x08014733
 8002d58:	08015160 	.word	0x08015160
 8002d5c:	08015044 	.word	0x08015044
 8002d60:	20015432 	.word	0x20015432
 8002d64:	20015430 	.word	0x20015430
 8002d68:	2001547c 	.word	0x2001547c
 8002d6c:	20015478 	.word	0x20015478

08002d70 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8002d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002d74:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002d78:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002d7a:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002d7e:	6803      	ldr	r3, [r0, #0]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4798      	blx	r3
 8002d84:	f243 13cf 	movw	r3, #12751	@ 0x31cf
 8002d88:	4298      	cmp	r0, r3
 8002d8a:	d805      	bhi.n	8002d98 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x28>
 8002d8c:	4b54      	ldr	r3, [pc, #336]	@ (8002ee0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 8002d8e:	4a55      	ldr	r2, [pc, #340]	@ (8002ee4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002d90:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002d92:	4855      	ldr	r0, [pc, #340]	@ (8002ee8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 8002d94:	f010 f874 	bl	8012e80 <__assert_func>
 8002d98:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002d9c:	6803      	ldr	r3, [r0, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4798      	blx	r3
 8002da2:	280f      	cmp	r0, #15
 8002da4:	d803      	bhi.n	8002dae <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3e>
 8002da6:	4b51      	ldr	r3, [pc, #324]	@ (8002eec <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 8002da8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002daa:	21a4      	movs	r1, #164	@ 0xa4
 8002dac:	e7f1      	b.n	8002d92 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002dae:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002db2:	6803      	ldr	r3, [r0, #0]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4798      	blx	r3
 8002db8:	2837      	cmp	r0, #55	@ 0x37
 8002dba:	d803      	bhi.n	8002dc4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x54>
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 8002dbe:	4a49      	ldr	r2, [pc, #292]	@ (8002ee4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002dc0:	21a5      	movs	r1, #165	@ 0xa5
 8002dc2:	e7e6      	b.n	8002d92 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x22>
    Application::getInstance()->clearAllTimerWidgets();
 8002dc4:	f00a f8d0 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002dc8:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002f04 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
 8002dcc:	3004      	adds	r0, #4
 8002dce:	f00a f918 	bl	800d002 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002dd2:	f8d9 0000 	ldr.w	r0, [r9]
 8002dd6:	b110      	cbz	r0, 8002dde <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6e>
        (*currentTrans)->tearDown();
 8002dd8:	6803      	ldr	r3, [r0, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4798      	blx	r3
    if (*currentTrans)
 8002dde:	f8d9 0000 	ldr.w	r0, [r9]
 8002de2:	b110      	cbz	r0, 8002dea <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x7a>
        (*currentTrans)->~Transition();
 8002de4:	6803      	ldr	r3, [r0, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4798      	blx	r3
    if (*currentScreen)
 8002dea:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8002f08 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 8002dee:	f8d8 0000 	ldr.w	r0, [r8]
 8002df2:	b110      	cbz	r0, 8002dfa <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	4798      	blx	r3
    if (*currentPresenter)
 8002dfa:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002dfe:	b110      	cbz	r0, 8002e06 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x96>
        (*currentPresenter)->deactivate();
 8002e00:	6803      	ldr	r3, [r0, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4798      	blx	r3
    if (*currentScreen)
 8002e06:	f8d8 0000 	ldr.w	r0, [r8]
 8002e0a:	b110      	cbz	r0, 8002e12 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa2>
        (*currentScreen)->~Screen();
 8002e0c:	6803      	ldr	r3, [r0, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4798      	blx	r3
    if (*currentPresenter)
 8002e12:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002e16:	b110      	cbz	r0, 8002e1e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xae>
        (*currentPresenter)->~Presenter();
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002e1e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002e22:	6803      	ldr	r3, [r0, #0]
 8002e24:	2100      	movs	r1, #0
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	4798      	blx	r3
          solid()
 8002e2a:	4b32      	ldr	r3, [pc, #200]	@ (8002ef4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 8002e2c:	6003      	str	r3, [r0, #0]
 8002e2e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e32:	8103      	strh	r3, [r0, #8]
 8002e34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e38:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 8002e3c:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002efc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	425a      	negs	r2, r3
 8002e44:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002e46:	4a2e      	ldr	r2, [pc, #184]	@ (8002f00 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
        : screenContainer(0), done(false)
 8002e48:	2500      	movs	r5, #0
 8002e4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e4e:	6045      	str	r5, [r0, #4]
 8002e50:	4604      	mov	r4, r0
          animationCounter(0),
 8002e52:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002e54:	81c5      	strh	r5, [r0, #14]
          solid()
 8002e56:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002e5a:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002e5e:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002e62:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002e66:	4629      	mov	r1, r5
 8002e68:	9200      	str	r2, [sp, #0]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	462a      	mov	r2, r5
 8002e6e:	3010      	adds	r0, #16
 8002e70:	f7ff fe96 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002e74:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002e78:	6803      	ldr	r3, [r0, #0]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	4798      	blx	r3
 8002e80:	4606      	mov	r6, r0
 8002e82:	f001 f9cf 	bl	8004224 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002e86:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002e8a:	6803      	ldr	r3, [r0, #0]
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	4798      	blx	r3
 8002e92:	4631      	mov	r1, r6
 8002e94:	4605      	mov	r5, r0
 8002e96:	f000 ffb3 	bl	8003e00 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 8002e9a:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002e9c:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002ea0:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002ea4:	6833      	ldr	r3, [r6, #0]
 8002ea6:	f8c5 a008 	str.w	sl, [r5, #8]
 8002eaa:	4630      	mov	r0, r6
 8002eac:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002eae:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002eb2:	f8c8 6000 	str.w	r6, [r8]
 8002eb6:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8002eb8:	4798      	blx	r3
    newPresenter->activate();
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f00b fd41 	bl	800e94c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	4620      	mov	r0, r4
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	4798      	blx	r3
    newTransition->invalidate();
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4620      	mov	r0, r4
}
 8002ed8:	b003      	add	sp, #12
 8002eda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ede:	4718      	bx	r3
 8002ee0:	080144e9 	.word	0x080144e9
 8002ee4:	080148ba 	.word	0x080148ba
 8002ee8:	08014649 	.word	0x08014649
 8002eec:	08014690 	.word	0x08014690
 8002ef0:	08014733 	.word	0x08014733
 8002ef4:	0801513c 	.word	0x0801513c
 8002ef8:	08015044 	.word	0x08015044
 8002efc:	20015430 	.word	0x20015430
 8002f00:	20015432 	.word	0x20015432
 8002f04:	2001547c 	.word	0x2001547c
 8002f08:	20015478 	.word	0x20015478

08002f0c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4617      	mov	r7, r2
 8002f12:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002f14:	f00a f912 	bl	800d13c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002f18:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8002f1a:	2500      	movs	r5, #0
      model(m)
 8002f1c:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 8002f20:	4e0f      	ldr	r6, [pc, #60]	@ (8002f60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 8002f22:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 8002f24:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002f2a:	6830      	ldr	r0, [r6, #0]
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002f30:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8002f34:	6803      	ldr	r3, [r0, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 8002f3a:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8002f3e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002f40:	4628      	mov	r0, r5
 8002f42:	f000 fe5b 	bl	8003bfc <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002f46:	6833      	ldr	r3, [r6, #0]
 8002f48:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002f4c:	b10a      	cbz	r2, 8002f52 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002f4e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002f50:	b900      	cbnz	r0, 8002f54 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002f52:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 8002f54:	f00f fa1a 	bl	801238c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 8002f58:	4620      	mov	r0, r4
 8002f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f5c:	20015488 	.word	0x20015488
 8002f60:	2001543c 	.word	0x2001543c
 8002f64:	080150c4 	.word	0x080150c4
 8002f68:	080150ac 	.word	0x080150ac

08002f6c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002f6c:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002f6e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002f78:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002f7c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002f80:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	08002a55 	.word	0x08002a55

08002f8c <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 8002f8c:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 8002f8e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002f98:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002f9c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002fa0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	08002bd9 	.word	0x08002bd9

08002fac <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 8002fae:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002fb8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002fbc:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002fc0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	08002d71 	.word	0x08002d71

08002fcc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002fcc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002fce:	4770      	bx	lr

08002fd0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002fd0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002fd2:	4770      	bx	lr

08002fd4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002fd4:	4770      	bx	lr

08002fd6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002fd6:	888b      	ldrh	r3, [r1, #4]
 8002fd8:	69c0      	ldr	r0, [r0, #28]
 8002fda:	680a      	ldr	r2, [r1, #0]
 8002fdc:	0adb      	lsrs	r3, r3, #11
 8002fde:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002fe2:	4410      	add	r0, r2
 8002fe4:	4770      	bx	lr

08002fe6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002fe6:	b510      	push	{r4, lr}
 8002fe8:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8002fea:	b1ba      	cbz	r2, 800301c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002fec:	7b10      	ldrb	r0, [r2, #12]
 8002fee:	b168      	cbz	r0, 800300c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002ff0:	7b53      	ldrb	r3, [r2, #13]
 8002ff2:	7ad2      	ldrb	r2, [r2, #11]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	6a23      	ldr	r3, [r4, #32]
 8002ffe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003002:	881a      	ldrh	r2, [r3, #0]
 8003004:	428a      	cmp	r2, r1
 8003006:	d102      	bne.n	800300e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003008:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 800300c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800300e:	d805      	bhi.n	800301c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003010:	3801      	subs	r0, #1
 8003012:	b280      	uxth	r0, r0
 8003014:	3304      	adds	r3, #4
 8003016:	2800      	cmp	r0, #0
 8003018:	d1f3      	bne.n	8003002 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800301a:	e7f7      	b.n	800300c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800301c:	2000      	movs	r0, #0
 800301e:	e7f5      	b.n	800300c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003020 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003020:	b510      	push	{r4, lr}
 8003022:	212c      	movs	r1, #44	@ 0x2c
 8003024:	4604      	mov	r4, r0
 8003026:	f00f fefd 	bl	8012e24 <_ZdlPvj>
 800302a:	4620      	mov	r0, r4
 800302c:	bd10      	pop	{r4, pc}
	...

08003030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003030:	b530      	push	{r4, r5, lr}
 8003032:	b08b      	sub	sp, #44	@ 0x2c
 8003034:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003036:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800303a:	9508      	str	r5, [sp, #32]
 800303c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003040:	9507      	str	r5, [sp, #28]
 8003042:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003046:	9506      	str	r5, [sp, #24]
 8003048:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 800304c:	9505      	str	r5, [sp, #20]
 800304e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003052:	9504      	str	r5, [sp, #16]
 8003054:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003058:	9503      	str	r5, [sp, #12]
 800305a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800305e:	9502      	str	r5, [sp, #8]
 8003060:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003064:	9501      	str	r5, [sp, #4]
 8003066:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800306a:	9500      	str	r5, [sp, #0]
 800306c:	f00b f8c8 	bl	800e200 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003070:	4b06      	ldr	r3, [pc, #24]	@ (800308c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8003072:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003074:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003076:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003078:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800307a:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800307c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800307e:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003080:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003082:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003084:	4620      	mov	r0, r4
 8003086:	b00b      	add	sp, #44	@ 0x2c
 8003088:	bd30      	pop	{r4, r5, pc}
 800308a:	bf00      	nop
 800308c:	08015184 	.word	0x08015184

08003090 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003090:	4770      	bx	lr

08003092 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003092:	4770      	bx	lr

08003094 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003094:	4770      	bx	lr

08003096 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003096:	4770      	bx	lr

08003098 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003098:	4770      	bx	lr

0800309a <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800309a:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 800309c:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 800309e:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80030a0:	466d      	mov	r5, sp
        rect.width = width;
 80030a2:	8101      	strh	r1, [r0, #8]
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a8:	4601      	mov	r1, r0
    virtual void setWidth(int16_t width)
 80030aa:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 80030ac:	4628      	mov	r0, r5
 80030ae:	4798      	blx	r3
 80030b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030b4:	343c      	adds	r4, #60	@ 0x3c
 80030b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80030ba:	b005      	add	sp, #20
 80030bc:	bd30      	pop	{r4, r5, pc}

080030be <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80030be:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80030c0:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80030c2:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80030c4:	466d      	mov	r5, sp
        rect.height = height;
 80030c6:	8141      	strh	r1, [r0, #10]
 80030c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030cc:	4601      	mov	r1, r0
    virtual void setHeight(int16_t height)
 80030ce:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 80030d0:	4628      	mov	r0, r5
 80030d2:	4798      	blx	r3
 80030d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030d8:	343c      	adds	r4, #60	@ 0x3c
 80030da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80030de:	b005      	add	sp, #20
 80030e0:	bd30      	pop	{r4, r5, pc}

080030e2 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80030e2:	2200      	movs	r2, #0
 80030e4:	8002      	strh	r2, [r0, #0]
 80030e6:	8042      	strh	r2, [r0, #2]
 80030e8:	8082      	strh	r2, [r0, #4]
 80030ea:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80030ec:	4770      	bx	lr

080030ee <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80030ee:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 80030f2:	4770      	bx	lr

080030f4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80030f4:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 80030f6:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80030f8:	4604      	mov	r4, r0
        setX(x);
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80030fc:	4615      	mov	r5, r2
        setX(x);
 80030fe:	4798      	blx	r3
        setBaselineY(baselineY);
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	4629      	mov	r1, r5
 8003104:	4620      	mov	r0, r4
 8003106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8003108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800310c:	4718      	bx	r3

0800310e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800310e:	2000      	movs	r0, #0
 8003110:	4770      	bx	lr

08003112 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003112:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003114:	4770      	bx	lr

08003116 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003116:	4770      	bx	lr

08003118 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003118:	4770      	bx	lr

0800311a <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800311a:	4770      	bx	lr

0800311c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800311c:	4770      	bx	lr

0800311e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800311e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003120:	68c2      	ldr	r2, [r0, #12]
 8003122:	6844      	ldr	r4, [r0, #4]
 8003124:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8003126:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003128:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800312c:	07d2      	lsls	r2, r2, #31
 800312e:	bf48      	it	mi
 8003130:	5962      	ldrmi	r2, [r4, r5]
 8003132:	689b      	ldr	r3, [r3, #8]
    }
 8003134:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003136:	bf48      	it	mi
 8003138:	58d3      	ldrmi	r3, [r2, r3]
 800313a:	4718      	bx	r3

0800313c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800313c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800313e:	6840      	ldr	r0, [r0, #4]
 8003140:	b130      	cbz	r0, 8003150 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	b91a      	cbnz	r2, 800314e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8003146:	68d8      	ldr	r0, [r3, #12]
 8003148:	f000 0001 	and.w	r0, r0, #1
 800314c:	4770      	bx	lr
 800314e:	2001      	movs	r0, #1
    }
 8003150:	4770      	bx	lr

08003152 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003152:	b510      	push	{r4, lr}
 8003154:	214c      	movs	r1, #76	@ 0x4c
 8003156:	4604      	mov	r4, r0
 8003158:	f00f fe64 	bl	8012e24 <_ZdlPvj>
 800315c:	4620      	mov	r0, r4
 800315e:	bd10      	pop	{r4, pc}

08003160 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003160:	b510      	push	{r4, lr}
 8003162:	2110      	movs	r1, #16
 8003164:	4604      	mov	r4, r0
 8003166:	f00f fe5d 	bl	8012e24 <_ZdlPvj>
 800316a:	4620      	mov	r0, r4
 800316c:	bd10      	pop	{r4, pc}

0800316e <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800316e:	b510      	push	{r4, lr}
}
 8003170:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
Screen1ViewBase::~Screen1ViewBase()
 8003174:	4604      	mov	r4, r0
}
 8003176:	f00f fe55 	bl	8012e24 <_ZdlPvj>
 800317a:	4620      	mov	r0, r4
 800317c:	bd10      	pop	{r4, pc}

0800317e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 800317e:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003180:	f7ff fbf8 	bl	8002974 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003184:	bd08      	pop	{r3, pc}
	...

08003188 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003188:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800318a:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800318c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800318e:	4b12      	ldr	r3, [pc, #72]	@ (80031d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8003190:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003192:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003194:	b28d      	uxth	r5, r1
 8003196:	b92b      	cbnz	r3, 80031a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003198:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800319a:	4a11      	ldr	r2, [pc, #68]	@ (80031e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800319c:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800319e:	4811      	ldr	r0, [pc, #68]	@ (80031e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80031a0:	f00f fe6e 	bl	8012e80 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80031a4:	4910      	ldr	r1, [pc, #64]	@ (80031e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80031a6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80031a8:	8809      	ldrh	r1, [r1, #0]
 80031aa:	4291      	cmp	r1, r2
 80031ac:	d803      	bhi.n	80031b6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80031ae:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80031b0:	4a0b      	ldr	r2, [pc, #44]	@ (80031e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80031b2:	216d      	movs	r1, #109	@ 0x6d
 80031b4:	e7f3      	b.n	800319e <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80031b6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80031ba:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80031c2:	6803      	ldr	r3, [r0, #0]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4798      	blx	r3
 80031c8:	1a29      	subs	r1, r5, r0
 80031ca:	4633      	mov	r3, r6
 80031cc:	4620      	mov	r0, r4
 80031ce:	b209      	sxth	r1, r1
    }
 80031d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80031d4:	4718      	bx	r3
 80031d6:	bf00      	nop
 80031d8:	2001548c 	.word	0x2001548c
 80031dc:	0801499f 	.word	0x0801499f
 80031e0:	080149e1 	.word	0x080149e1
 80031e4:	08014a1c 	.word	0x08014a1c
 80031e8:	20015490 	.word	0x20015490
 80031ec:	08014a63 	.word	0x08014a63
 80031f0:	20015494 	.word	0x20015494

080031f4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 80031f4:	306c      	adds	r0, #108	@ 0x6c
 80031f6:	4288      	cmp	r0, r1
{
 80031f8:	b508      	push	{r3, lr}
    if (&src == &button1)
 80031fa:	d105      	bne.n	8003208 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80031fc:	f009 feb4 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 8003200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 8003204:	f7ff bed2 	b.w	8002fac <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 8003208:	bd08      	pop	{r3, pc}

0800320a <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800320a:	2200      	movs	r2, #0
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 8003214:	6082      	str	r2, [r0, #8]
    }
 8003216:	4770      	bx	lr

08003218 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8003218:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 800321a:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800321c:	4604      	mov	r4, r0
        setX(x);
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8003220:	4615      	mov	r5, r2
        setX(x);
 8003222:	4798      	blx	r3
        setY(y);
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	4629      	mov	r1, r5
 8003228:	4620      	mov	r0, r4
 800322a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800322c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003230:	4718      	bx	r3
	...

08003234 <_ZN8touchgfx6WidgetC1Ev>:
 8003234:	2200      	movs	r2, #0
 8003236:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800323a:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800323e:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003242:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8003246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800324a:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 800324c:	4a01      	ldr	r2, [pc, #4]	@ (8003254 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800324e:	6002      	str	r2, [r0, #0]
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	080151ec 	.word	0x080151ec

08003258 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8003258:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800325a:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 800325c:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800325e:	2100      	movs	r1, #0
 8003260:	f010 f815 	bl	801328e <memset>
 8003264:	4620      	mov	r0, r4
 8003266:	f7ff ffe5 	bl	8003234 <_ZN8touchgfx6WidgetC1Ev>
 800326a:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 800326c:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8003270:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003272:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003276:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8003278:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 800327c:	2300      	movs	r3, #0
 800327e:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8003282:	8723      	strh	r3, [r4, #56]	@ 0x38
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003284:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 8003288:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 800328c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 800328e:	4620      	mov	r0, r4
 8003290:	bd10      	pop	{r4, pc}
 8003292:	bf00      	nop
 8003294:	08015a9c 	.word	0x08015a9c
 8003298:	08015034 	.word	0x08015034

0800329c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 800329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a0:	4604      	mov	r4, r0
 80032a2:	b08b      	sub	sp, #44	@ 0x2c
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80032a4:	46a3      	mov	fp, r4
        : presenter(0)
 80032a6:	2500      	movs	r5, #0
 80032a8:	f00b f9a4 	bl	800e5f4 <_ZN8touchgfx6ScreenC1Ev>
 80032ac:	4b7f      	ldr	r3, [pc, #508]	@ (80034ac <_ZN15Screen1ViewBaseC1Ev+0x210>)
 80032ae:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80032b0:	f84b 3b40 	str.w	r3, [fp], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80032b4:	2226      	movs	r2, #38	@ 0x26
 80032b6:	4629      	mov	r1, r5
 80032b8:	4658      	mov	r0, fp
 80032ba:	f00f ffe8 	bl	801328e <memset>
 80032be:	4658      	mov	r0, fp
 80032c0:	f7ff ffb8 	bl	8003234 <_ZN8touchgfx6WidgetC1Ev>
 80032c4:	4b7a      	ldr	r3, [pc, #488]	@ (80034b0 <_ZN15Screen1ViewBaseC1Ev+0x214>)
 80032c6:	6423      	str	r3, [r4, #64]	@ 0x40
 80032c8:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 80032cc:	23ff      	movs	r3, #255	@ 0xff
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80032ce:	2226      	movs	r2, #38	@ 0x26
 80032d0:	4629      	mov	r1, r5
 80032d2:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 80032d6:	4630      	mov	r0, r6
        : color(col)
 80032d8:	66a5      	str	r5, [r4, #104]	@ 0x68
 80032da:	f00f ffd8 	bl	801328e <memset>
 80032de:	4630      	mov	r0, r6
 80032e0:	f7ff ffa8 	bl	8003234 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 80032ea:	4b72      	ldr	r3, [pc, #456]	@ (80034b4 <_ZN15Screen1ViewBaseC1Ev+0x218>)
 80032ec:	66e3      	str	r3, [r4, #108]	@ 0x6c
 80032ee:	f104 0aa0 	add.w	sl, r4, #160	@ 0xa0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80032f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032f6:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 80032fa:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 80032fe:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
        : TextArea()
 8003302:	f104 09e8 	add.w	r9, r4, #232	@ 0xe8
 8003306:	4650      	mov	r0, sl
 8003308:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 800330c:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8003310:	f7ff ffa2 	bl	8003258 <_ZN8touchgfx8TextAreaC1Ev>
 8003314:	4648      	mov	r0, r9
 8003316:	f7ff ff9f 	bl	8003258 <_ZN8touchgfx8TextAreaC1Ev>
 800331a:	f504 789a 	add.w	r8, r4, #308	@ 0x134
        : TextAreaWithWildcardBase(), wc1(0)
 800331e:	4b66      	ldr	r3, [pc, #408]	@ (80034b8 <_ZN15Screen1ViewBaseC1Ev+0x21c>)
 8003320:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8003324:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8003328:	4640      	mov	r0, r8
 800332a:	f7ff ff95 	bl	8003258 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 800332e:	4b63      	ldr	r3, [pc, #396]	@ (80034bc <_ZN15Screen1ViewBaseC1Ev+0x220>)
 8003330:	e9c4 3464 	strd	r3, r4, [r4, #400]	@ 0x190
 8003334:	4b62      	ldr	r3, [pc, #392]	@ (80034c0 <_ZN15Screen1ViewBaseC1Ev+0x224>)
 8003336:	e9c4 3566 	strd	r3, r5, [r4, #408]	@ 0x198
    __background.setPosition(0, 0, 240, 320);
 800333a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800333e:	462a      	mov	r2, r5
 8003340:	4658      	mov	r0, fp
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4629      	mov	r1, r5
 8003346:	23f0      	movs	r3, #240	@ 0xf0
 8003348:	f7ff fc2a 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800334c:	1d27      	adds	r7, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800334e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003352:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003354:	4659      	mov	r1, fp
 8003356:	4638      	mov	r0, r7
 8003358:	f006 f96a 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 199);
 800335c:	4630      	mov	r0, r6
 800335e:	22c7      	movs	r2, #199	@ 0xc7
 8003360:	2114      	movs	r1, #20
 8003362:	f7ff ff59 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
 8003366:	f04f 0b03 	mov.w	fp, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 800336a:	aa08      	add	r2, sp, #32
 800336c:	4630      	mov	r0, r6
 800336e:	a907      	add	r1, sp, #28
 8003370:	f8ad b01c 	strh.w	fp, [sp, #28]
 8003374:	f8ad b020 	strh.w	fp, [sp, #32]
 8003378:	f007 fec6 	bl	800b108 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 800337c:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003380:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8003384:	4631      	mov	r1, r6
 8003386:	4638      	mov	r0, r7
 8003388:	f006 f952 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(53, 103);
 800338c:	2267      	movs	r2, #103	@ 0x67
 800338e:	4650      	mov	r0, sl
 8003390:	2135      	movs	r1, #53	@ 0x35
 8003392:	f7ff ff41 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8003396:	ae02      	add	r6, sp, #8
        color = newColor;
 8003398:	4b4a      	ldr	r3, [pc, #296]	@ (80034c4 <_ZN15Screen1ViewBaseC1Ev+0x228>)
 800339a:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
        boundingArea = calculateBoundingArea();
 800339e:	4651      	mov	r1, sl
 80033a0:	4630      	mov	r0, r6
        linespace = space;
 80033a2:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
        boundingArea = calculateBoundingArea();
 80033a6:	f007 fba9 	bl	800aafc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80033aa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80033ae:	f104 03dc 	add.w	r3, r4, #220	@ 0xdc
 80033b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033b6:	4b44      	ldr	r3, [pc, #272]	@ (80034c8 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 80033b8:	9308      	str	r3, [sp, #32]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3G8C));
 80033ba:	4650      	mov	r0, sl
 80033bc:	f04f 030a 	mov.w	r3, #10
 80033c0:	a908      	add	r1, sp, #32
 80033c2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80033c6:	f007 fe41 	bl	800b04c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80033ca:	4651      	mov	r1, sl
 80033cc:	4638      	mov	r0, r7
 80033ce:	f006 f92f 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    highestScore.setPosition(0, 139, 240, 42);
 80033d2:	232a      	movs	r3, #42	@ 0x2a
 80033d4:	228b      	movs	r2, #139	@ 0x8b
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4629      	mov	r1, r5
 80033da:	23f0      	movs	r3, #240	@ 0xf0
 80033dc:	4648      	mov	r0, r9
 80033de:	f7ff fbdf 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80033e2:	4b3a      	ldr	r3, [pc, #232]	@ (80034cc <_ZN15Screen1ViewBaseC1Ev+0x230>)
 80033e4:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
        boundingArea = calculateBoundingArea();
 80033e8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
        linespace = space;
 80033ec:	f8a4 511c 	strh.w	r5, [r4, #284]	@ 0x11c
        boundingArea = calculateBoundingArea();
 80033f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f4:	4649      	mov	r1, r9
 80033f6:	4630      	mov	r0, r6
 80033f8:	4798      	blx	r3
 80033fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80033fe:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8003402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003406:	4b32      	ldr	r3, [pc, #200]	@ (80034d0 <_ZN15Screen1ViewBaseC1Ev+0x234>)
 8003408:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(highestScoreBuffer, HIGHESTSCORE_SIZE, "%s", touchgfx::TypedText(T_HSCORET).getText());
 800340a:	f504 7abe 	add.w	sl, r4, #380	@ 0x17c
 800340e:	b92b      	cbnz	r3, 800341c <_ZN15Screen1ViewBaseC1Ev+0x180>
 8003410:	4b30      	ldr	r3, [pc, #192]	@ (80034d4 <_ZN15Screen1ViewBaseC1Ev+0x238>)
 8003412:	4a31      	ldr	r2, [pc, #196]	@ (80034d8 <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8003414:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003416:	4831      	ldr	r0, [pc, #196]	@ (80034dc <_ZN15Screen1ViewBaseC1Ev+0x240>)
 8003418:	f00f fd32 	bl	8012e80 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 800341c:	4b30      	ldr	r3, [pc, #192]	@ (80034e0 <_ZN15Screen1ViewBaseC1Ev+0x244>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d803      	bhi.n	800342c <_ZN15Screen1ViewBaseC1Ev+0x190>
 8003424:	4b2f      	ldr	r3, [pc, #188]	@ (80034e4 <_ZN15Screen1ViewBaseC1Ev+0x248>)
 8003426:	4a2c      	ldr	r2, [pc, #176]	@ (80034d8 <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8003428:	2161      	movs	r1, #97	@ 0x61
 800342a:	e7f4      	b.n	8003416 <_ZN15Screen1ViewBaseC1Ev+0x17a>
        return texts->getText(typedTextId);
 800342c:	4b2e      	ldr	r3, [pc, #184]	@ (80034e8 <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 800342e:	4659      	mov	r1, fp
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	f000 fc1f 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 8003436:	4a2d      	ldr	r2, [pc, #180]	@ (80034ec <_ZN15Screen1ViewBaseC1Ev+0x250>)
 8003438:	4603      	mov	r3, r0
 800343a:	210a      	movs	r1, #10
 800343c:	4650      	mov	r0, sl
 800343e:	f00c fdb9 	bl	800ffb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8003442:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8003444:	9308      	str	r3, [sp, #32]
    highestScore.setTypedText(touchgfx::TypedText(T_HSCORE));
 8003446:	a908      	add	r1, sp, #32
 8003448:	2309      	movs	r3, #9
 800344a:	4648      	mov	r0, r9
        wc1 = value;
 800344c:	f8c4 a130 	str.w	sl, [r4, #304]	@ 0x130
 8003450:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8003454:	f007 fdfa 	bl	800b04c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003458:	4649      	mov	r1, r9
 800345a:	4638      	mov	r0, r7
 800345c:	f006 f8e8 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(7, 14);
 8003460:	220e      	movs	r2, #14
 8003462:	4640      	mov	r0, r8
 8003464:	2107      	movs	r1, #7
 8003466:	f7ff fed7 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800346a:	4b21      	ldr	r3, [pc, #132]	@ (80034f0 <_ZN15Screen1ViewBaseC1Ev+0x254>)
 800346c:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
 8003470:	4641      	mov	r1, r8
 8003472:	4630      	mov	r0, r6
        linespace = space;
 8003474:	f8a4 5168 	strh.w	r5, [r4, #360]	@ 0x168
        boundingArea = calculateBoundingArea();
 8003478:	f007 fb40 	bl	800aafc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800347c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003480:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 8003484:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003488:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 800348a:	9308      	str	r3, [sp, #32]
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MXSW));
 800348c:	a908      	add	r1, sp, #32
 800348e:	2302      	movs	r3, #2
 8003490:	4640      	mov	r0, r8
 8003492:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8003496:	f007 fdd9 	bl	800b04c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800349a:	4638      	mov	r0, r7
 800349c:	4641      	mov	r1, r8
 800349e:	f006 f8c7 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80034a2:	4620      	mov	r0, r4
 80034a4:	b00b      	add	sp, #44	@ 0x2c
 80034a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034aa:	bf00      	nop
 80034ac:	080152fc 	.word	0x080152fc
 80034b0:	08015b2c 	.word	0x08015b2c
 80034b4:	08015b94 	.word	0x08015b94
 80034b8:	08015254 	.word	0x08015254
 80034bc:	080152e4 	.word	0x080152e4
 80034c0:	080031f5 	.word	0x080031f5
 80034c4:	fff00a0a 	.word	0xfff00a0a
 80034c8:	08015034 	.word	0x08015034
 80034cc:	fffc1414 	.word	0xfffc1414
 80034d0:	2001548c 	.word	0x2001548c
 80034d4:	0801499f 	.word	0x0801499f
 80034d8:	08014aa1 	.word	0x08014aa1
 80034dc:	08014a1c 	.word	0x08014a1c
 80034e0:	20015490 	.word	0x20015490
 80034e4:	08014a63 	.word	0x08014a63
 80034e8:	20015498 	.word	0x20015498
 80034ec:	08014aec 	.word	0x08014aec
 80034f0:	fffce90f 	.word	0xfffce90f

080034f4 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80034f4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80034f6:	4770      	bx	lr

080034f8 <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 80034f8:	4770      	bx	lr

080034fa <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 80034fa:	4770      	bx	lr

080034fc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80034fc:	4770      	bx	lr

080034fe <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 80034fe:	4770      	bx	lr

08003500 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8003500:	4770      	bx	lr

08003502 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003502:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003504:	68c2      	ldr	r2, [r0, #12]
 8003506:	6844      	ldr	r4, [r0, #4]
 8003508:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 800350a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800350c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003510:	07d2      	lsls	r2, r2, #31
 8003512:	bf48      	it	mi
 8003514:	5962      	ldrmi	r2, [r4, r5]
 8003516:	689b      	ldr	r3, [r3, #8]
    }
 8003518:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800351a:	bf48      	it	mi
 800351c:	58d3      	ldrmi	r3, [r2, r3]
 800351e:	4718      	bx	r3

08003520 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8003520:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8003522:	6840      	ldr	r0, [r0, #4]
 8003524:	b130      	cbz	r0, 8003534 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	b91a      	cbnz	r2, 8003532 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 800352a:	68d8      	ldr	r0, [r3, #12]
 800352c:	f000 0001 	and.w	r0, r0, #1
 8003530:	4770      	bx	lr
 8003532:	2001      	movs	r0, #1
    }
 8003534:	4770      	bx	lr

08003536 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003536:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800353a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 800353e:	4770      	bx	lr

08003540 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8003540:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8003542:	3038      	adds	r0, #56	@ 0x38
 8003544:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8003548:	b113      	cbz	r3, 8003550 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 800354a:	3136      	adds	r1, #54	@ 0x36
 800354c:	f007 bfaa 	b.w	800b4a4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003550:	3134      	adds	r1, #52	@ 0x34
 8003552:	e7fb      	b.n	800354c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08003554 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8003554:	b510      	push	{r4, lr}
 8003556:	2164      	movs	r1, #100	@ 0x64
 8003558:	4604      	mov	r4, r0
 800355a:	f00f fc63 	bl	8012e24 <_ZdlPvj>
 800355e:	4620      	mov	r0, r4
 8003560:	bd10      	pop	{r4, pc}

08003562 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003562:	b510      	push	{r4, lr}
 8003564:	2110      	movs	r1, #16
 8003566:	4604      	mov	r4, r0
 8003568:	f00f fc5c 	bl	8012e24 <_ZdlPvj>
 800356c:	4620      	mov	r0, r4
 800356e:	bd10      	pop	{r4, pc}

08003570 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8003570:	b510      	push	{r4, lr}
}
 8003572:	f44f 710a 	mov.w	r1, #552	@ 0x228
Screen2ViewBase::~Screen2ViewBase()
 8003576:	4604      	mov	r4, r0
}
 8003578:	f00f fc54 	bl	8012e24 <_ZdlPvj>
 800357c:	4620      	mov	r0, r4
 800357e:	bd10      	pop	{r4, pc}

08003580 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8003580:	b510      	push	{r4, lr}
 8003582:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8003584:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003586:	b150      	cbz	r0, 800359e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8003588:	6803      	ldr	r3, [r0, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4798      	blx	r3
 800358e:	b130      	cbz	r0, 800359e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8003590:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003592:	6803      	ldr	r3, [r0, #0]
 8003594:	4621      	mov	r1, r4
 8003596:	689b      	ldr	r3, [r3, #8]
        }
    }
 8003598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 800359c:	4718      	bx	r3
    }
 800359e:	bd10      	pop	{r4, pc}

080035a0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 80035a0:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80035a2:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 80035a4:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 80035a8:	4604      	mov	r4, r0
 80035aa:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80035ac:	b90b      	cbnz	r3, 80035b2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 80035ae:	b116      	cbz	r6, 80035b6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80035b2:	2e00      	cmp	r6, #0
 80035b4:	d0fc      	beq.n	80035b0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	4620      	mov	r0, r4
 80035c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035c8:	4798      	blx	r3
            invalidate();
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	4620      	mov	r0, r4
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 80035d2:	2e00      	cmp	r6, #0
 80035d4:	d0ec      	beq.n	80035b0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 80035d6:	792b      	ldrb	r3, [r5, #4]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d1e9      	bne.n	80035b0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	4620      	mov	r0, r4
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 80035e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 80035e8:	4718      	bx	r3

080035ea <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 80035ea:	f100 03c4 	add.w	r3, r0, #196	@ 0xc4
 80035ee:	428b      	cmp	r3, r1
{
 80035f0:	b510      	push	{r4, lr}
 80035f2:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 80035f4:	d109      	bne.n	800360a <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80035f6:	f009 fcb7 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 80035fa:	f7ff fcc7 	bl	8002f8c <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	4620      	mov	r0, r4
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8003604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 8003608:	4718      	bx	r3
}
 800360a:	bd10      	pop	{r4, pc}

0800360c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 800360c:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 800360e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8003612:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8003614:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8003616:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 800361a:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 800361c:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 800361e:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8003620:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8003622:	f00c fd81 	bl	8010128 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8003626:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800362a:	4607      	mov	r7, r0
 800362c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003630:	4640      	mov	r0, r8
 8003632:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8003636:	f00c fdab 	bl	8010190 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800363a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800363e:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8003642:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003646:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800364a:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 800364e:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 8003652:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8003656:	b212      	sxth	r2, r2
 8003658:	b209      	sxth	r1, r1
 800365a:	f7ff fddd 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	4620      	mov	r0, r4
 8003662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8003666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 800366a:	4718      	bx	r3

0800366c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 800366c:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 800366e:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8003670:	4604      	mov	r4, r0
 8003672:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003674:	2100      	movs	r1, #0
 8003676:	f00f fe0a 	bl	801328e <memset>
 800367a:	4620      	mov	r0, r4
 800367c:	f7ff fdda 	bl	8003234 <_ZN8touchgfx6WidgetC1Ev>
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	882b      	ldrh	r3, [r5, #0]
 8003686:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8003688:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 800368a:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 800368c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8003690:	4629      	mov	r1, r5
 8003692:	f007 ff07 	bl	800b4a4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003696:	4620      	mov	r0, r4
 8003698:	bd38      	pop	{r3, r4, r5, pc}
 800369a:	bf00      	nop
 800369c:	08015c70 	.word	0x08015c70

080036a0 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	4604      	mov	r4, r0
 80036a6:	b08d      	sub	sp, #52	@ 0x34
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 80036a8:	4627      	mov	r7, r4
 80036aa:	2500      	movs	r5, #0
 80036ac:	f00a ffa2 	bl	800e5f4 <_ZN8touchgfx6ScreenC1Ev>
 80036b0:	4ba2      	ldr	r3, [pc, #648]	@ (800393c <_ZN15Screen2ViewBaseC1Ev+0x29c>)
 80036b2:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80036b4:	f847 3b40 	str.w	r3, [r7], #64
        : Widget(), alpha(255), color(0)
 80036b8:	2226      	movs	r2, #38	@ 0x26
 80036ba:	4629      	mov	r1, r5
 80036bc:	4638      	mov	r0, r7
 80036be:	f00f fde6 	bl	801328e <memset>
 80036c2:	4638      	mov	r0, r7
 80036c4:	f7ff fdb6 	bl	8003234 <_ZN8touchgfx6WidgetC1Ev>
 80036c8:	4b9d      	ldr	r3, [pc, #628]	@ (8003940 <_ZN15Screen2ViewBaseC1Ev+0x2a0>)
 80036ca:	6423      	str	r3, [r4, #64]	@ 0x40
 80036cc:	23ff      	movs	r3, #255	@ 0xff
 80036ce:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 80036d2:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 80036d6:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 80036da:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80036de:	4618      	mov	r0, r3
 80036e0:	a90a      	add	r1, sp, #40	@ 0x28
 80036e2:	66a5      	str	r5, [r4, #104]	@ 0x68
 80036e4:	9303      	str	r3, [sp, #12]
 80036e6:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 80036ea:	f7ff ffbf 	bl	800366c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80036ee:	a90a      	add	r1, sp, #40	@ 0x28
 80036f0:	4650      	mov	r0, sl
 80036f2:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 80036f6:	f7ff ffb9 	bl	800366c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pressed(false), alpha(255), action(0)
 80036fa:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80036fe:	f8a4 30f0 	strh.w	r3, [r4, #240]	@ 0xf0
 8003702:	f240 1301 	movw	r3, #257	@ 0x101
 8003706:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
        : T()
 800370a:	4b8e      	ldr	r3, [pc, #568]	@ (8003944 <_ZN15Screen2ViewBaseC1Ev+0x2a4>)
 800370c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8003710:	f104 06fc 	add.w	r6, r4, #252	@ 0xfc
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 800371c:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 8003720:	a90a      	add	r1, sp, #40	@ 0x28
 8003722:	4630      	mov	r0, r6
        : x(0), y(0), width(0), height(0)
 8003724:	e9c4 5532 	strd	r5, r5, [r4, #200]	@ 0xc8
 8003728:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
          nextSibling(0),
 800372c:	e9c4 5536 	strd	r5, r5, [r4, #216]	@ 0xd8
          cachedAbsX(0),
 8003730:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
          firstChild(0)
 8003734:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
 8003738:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 800373c:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
        : TextArea()
 8003740:	f504 7894 	add.w	r8, r4, #296	@ 0x128
 8003744:	f7ff ff92 	bl	800366c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8003748:	4631      	mov	r1, r6
 800374a:	4648      	mov	r0, r9
 800374c:	f005 ff70 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003750:	4640      	mov	r0, r8
 8003752:	f7ff fd81 	bl	8003258 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8003756:	4b7c      	ldr	r3, [pc, #496]	@ (8003948 <_ZN15Screen2ViewBaseC1Ev+0x2a8>)
 8003758:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 800375c:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 8003760:	4618      	mov	r0, r3
 8003762:	f8c4 5170 	str.w	r5, [r4, #368]	@ 0x170
 8003766:	f504 7bde 	add.w	fp, r4, #444	@ 0x1bc
 800376a:	9302      	str	r3, [sp, #8]
 800376c:	f7ff fd74 	bl	8003258 <_ZN8touchgfx8TextAreaC1Ev>
 8003770:	4658      	mov	r0, fp
 8003772:	f7ff fd71 	bl	8003258 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8003776:	4b75      	ldr	r3, [pc, #468]	@ (800394c <_ZN15Screen2ViewBaseC1Ev+0x2ac>)
 8003778:	e9c4 3486 	strd	r3, r4, [r4, #536]	@ 0x218
 800377c:	4b74      	ldr	r3, [pc, #464]	@ (8003950 <_ZN15Screen2ViewBaseC1Ev+0x2b0>)
 800377e:	e9c4 3588 	strd	r3, r5, [r4, #544]	@ 0x220
    __background.setPosition(0, 0, 240, 320);
 8003782:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003786:	462a      	mov	r2, r5
 8003788:	4638      	mov	r0, r7
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4629      	mov	r1, r5
 800378e:	23f0      	movs	r3, #240	@ 0xf0
 8003790:	f7ff fa06 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003794:	1d26      	adds	r6, r4, #4
        color = newColor;
 8003796:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800379a:	66a3      	str	r3, [r4, #104]	@ 0x68
 800379c:	4639      	mov	r1, r7
 800379e:	4630      	mov	r0, r6
 80037a0:	f005 ff46 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 80037a4:	462a      	mov	r2, r5
 80037a6:	9803      	ldr	r0, [sp, #12]
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7ff fd35 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
    track0.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 80037ae:	9803      	ldr	r0, [sp, #12]
 80037b0:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 80037b4:	a90a      	add	r1, sp, #40	@ 0x28
 80037b6:	f007 fe75 	bl	800b4a4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80037ba:	9903      	ldr	r1, [sp, #12]
 80037bc:	4630      	mov	r0, r6
 80037be:	f005 ff37 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 52);
 80037c2:	2234      	movs	r2, #52	@ 0x34
 80037c4:	4650      	mov	r0, sl
 80037c6:	4629      	mov	r1, r5
 80037c8:	f7ff fd26 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
 80037cc:	2302      	movs	r3, #2
    track1.setBitmap(touchgfx::Bitmap(BITMAP_GAMEOVER_ID));
 80037ce:	4650      	mov	r0, sl
 80037d0:	a90a      	add	r1, sp, #40	@ 0x28
 80037d2:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80037d6:	f007 fe65 	bl	800b4a4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80037da:	4651      	mov	r1, sl
 80037dc:	4630      	mov	r0, r6
        visible = vis;
 80037de:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 80037e2:	f005 ff25 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80037e6:	2701      	movs	r7, #1
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 80037e8:	4648      	mov	r0, r9
 80037ea:	aa0a      	add	r2, sp, #40	@ 0x28
 80037ec:	a909      	add	r1, sp, #36	@ 0x24
 80037ee:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 80037f2:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80037f6:	f7ff ff09 	bl	800360c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 80037fa:	f504 7306 	add.w	r3, r4, #536	@ 0x218
        action = &callback;
 80037fe:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
    flexButton1.setPosition(204, 282, 32, 32);
 8003802:	2320      	movs	r3, #32
 8003804:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003808:	4648      	mov	r0, r9
        rect.x = x;
 800380a:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 800380e:	21cc      	movs	r1, #204	@ 0xcc
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	f7ff f9c5 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003816:	4649      	mov	r1, r9
 8003818:	4630      	mov	r0, r6
 800381a:	f005 ff09 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    score.setPosition(100, 166, 136, 49);
 800381e:	2331      	movs	r3, #49	@ 0x31
 8003820:	22a6      	movs	r2, #166	@ 0xa6
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2164      	movs	r1, #100	@ 0x64
 8003826:	2388      	movs	r3, #136	@ 0x88
 8003828:	4640      	mov	r0, r8
 800382a:	f7ff f9b9 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800382e:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <_ZN15Screen2ViewBaseC1Ev+0x2b4>)
 8003830:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 8003834:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
        linespace = space;
 8003838:	f8a4 515c 	strh.w	r5, [r4, #348]	@ 0x15c
        boundingArea = calculateBoundingArea();
 800383c:	f10d 0910 	add.w	r9, sp, #16
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003844:	4641      	mov	r1, r8
 8003846:	4648      	mov	r0, r9
 8003848:	4798      	blx	r3
 800384a:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800384e:	f504 73b2 	add.w	r3, r4, #356	@ 0x164
 8003852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003856:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <_ZN15Screen2ViewBaseC1Ev+0x2b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SCORE_T).getText());
 800385a:	f504 7a01 	add.w	sl, r4, #516	@ 0x204
 800385e:	b92b      	cbnz	r3, 800386c <_ZN15Screen2ViewBaseC1Ev+0x1cc>
 8003860:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <_ZN15Screen2ViewBaseC1Ev+0x2bc>)
 8003862:	4a3f      	ldr	r2, [pc, #252]	@ (8003960 <_ZN15Screen2ViewBaseC1Ev+0x2c0>)
 8003864:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003866:	483f      	ldr	r0, [pc, #252]	@ (8003964 <_ZN15Screen2ViewBaseC1Ev+0x2c4>)
 8003868:	f00f fb0a 	bl	8012e80 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 800386c:	4b3e      	ldr	r3, [pc, #248]	@ (8003968 <_ZN15Screen2ViewBaseC1Ev+0x2c8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d803      	bhi.n	800387c <_ZN15Screen2ViewBaseC1Ev+0x1dc>
 8003874:	4b3d      	ldr	r3, [pc, #244]	@ (800396c <_ZN15Screen2ViewBaseC1Ev+0x2cc>)
 8003876:	4a3a      	ldr	r2, [pc, #232]	@ (8003960 <_ZN15Screen2ViewBaseC1Ev+0x2c0>)
 8003878:	2161      	movs	r1, #97	@ 0x61
 800387a:	e7f4      	b.n	8003866 <_ZN15Screen2ViewBaseC1Ev+0x1c6>
        return texts->getText(typedTextId);
 800387c:	4b3c      	ldr	r3, [pc, #240]	@ (8003970 <_ZN15Screen2ViewBaseC1Ev+0x2d0>)
 800387e:	2105      	movs	r1, #5
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	f000 f9f7 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 8003886:	4a3b      	ldr	r2, [pc, #236]	@ (8003974 <_ZN15Screen2ViewBaseC1Ev+0x2d4>)
 8003888:	4603      	mov	r3, r0
 800388a:	210a      	movs	r1, #10
 800388c:	4650      	mov	r0, sl
 800388e:	f00c fb91 	bl	800ffb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8003892:	2304      	movs	r3, #4
        wc1 = value;
 8003894:	f8c4 a170 	str.w	sl, [r4, #368]	@ 0x170
    score.setTypedText(touchgfx::TypedText(T_SCORE));
 8003898:	a90a      	add	r1, sp, #40	@ 0x28
 800389a:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 8003980 <_ZN15Screen2ViewBaseC1Ev+0x2e0>
 800389e:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80038a2:	4640      	mov	r0, r8
 80038a4:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80038a8:	f007 fbd0 	bl	800b04c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80038ac:	4641      	mov	r1, r8
 80038ae:	4630      	mov	r0, r6
 80038b0:	f005 febe 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(185, 136);
 80038b4:	9802      	ldr	r0, [sp, #8]
 80038b6:	2288      	movs	r2, #136	@ 0x88
 80038b8:	21b9      	movs	r1, #185	@ 0xb9
 80038ba:	f7ff fcad 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80038be:	4b2e      	ldr	r3, [pc, #184]	@ (8003978 <_ZN15Screen2ViewBaseC1Ev+0x2d8>)
        boundingArea = calculateBoundingArea();
 80038c0:	9902      	ldr	r1, [sp, #8]
        color = newColor;
 80038c2:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
        boundingArea = calculateBoundingArea();
 80038c6:	4648      	mov	r0, r9
        linespace = space;
 80038c8:	f8a4 51a8 	strh.w	r5, [r4, #424]	@ 0x1a8
        boundingArea = calculateBoundingArea();
 80038cc:	f007 f916 	bl	800aafc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80038d0:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80038d4:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 80038d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1D7L));
 80038dc:	9802      	ldr	r0, [sp, #8]
 80038de:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80038e2:	a90a      	add	r1, sp, #40	@ 0x28
 80038e4:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
 80038e8:	f007 fbb0 	bl	800b04c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80038ec:	9902      	ldr	r1, [sp, #8]
 80038ee:	4630      	mov	r0, r6
 80038f0:	f005 fe9e 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(191, 54);
 80038f4:	2236      	movs	r2, #54	@ 0x36
 80038f6:	4658      	mov	r0, fp
 80038f8:	21bf      	movs	r1, #191	@ 0xbf
 80038fa:	f7ff fc8d 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80038fe:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <_ZN15Screen2ViewBaseC1Ev+0x2dc>)
 8003900:	f8c4 31ec 	str.w	r3, [r4, #492]	@ 0x1ec
        boundingArea = calculateBoundingArea();
 8003904:	4659      	mov	r1, fp
 8003906:	4648      	mov	r0, r9
        linespace = space;
 8003908:	f8a4 51f0 	strh.w	r5, [r4, #496]	@ 0x1f0
        boundingArea = calculateBoundingArea();
 800390c:	f007 f8f6 	bl	800aafc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003910:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003914:	f504 73fc 	add.w	r3, r4, #504	@ 0x1f8
 8003918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JK4A));
 800391c:	a90a      	add	r1, sp, #40	@ 0x28
 800391e:	4658      	mov	r0, fp
 8003920:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8003924:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 8003928:	f007 fb90 	bl	800b04c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800392c:	4630      	mov	r0, r6
 800392e:	4659      	mov	r1, fp
 8003930:	f005 fe7e 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003934:	4620      	mov	r0, r4
 8003936:	b00d      	add	sp, #52	@ 0x34
 8003938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393c:	080153e8 	.word	0x080153e8
 8003940:	08015b2c 	.word	0x08015b2c
 8003944:	08015330 	.word	0x08015330
 8003948:	08015254 	.word	0x08015254
 800394c:	080153d0 	.word	0x080153d0
 8003950:	080035eb 	.word	0x080035eb
 8003954:	fff50c0c 	.word	0xfff50c0c
 8003958:	2001548c 	.word	0x2001548c
 800395c:	0801499f 	.word	0x0801499f
 8003960:	08014aa1 	.word	0x08014aa1
 8003964:	08014a1c 	.word	0x08014a1c
 8003968:	20015490 	.word	0x20015490
 800396c:	08014a63 	.word	0x08014a63
 8003970:	20015498 	.word	0x20015498
 8003974:	08014aec 	.word	0x08014aec
 8003978:	ffb411f5 	.word	0xffb411f5
 800397c:	ff9e0ff7 	.word	0xff9e0ff7
 8003980:	08015034 	.word	0x08015034

08003984 <__tcf_0>:

touchgfx::GeneratedFont& getFont_arialbd_10_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_10_4bpp()
{
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003984:	4770      	bx	lr
	...

08003988 <_Z23getFont_arialbd_10_4bppv>:
{
 8003988:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 800398a:	4d18      	ldr	r5, [pc, #96]	@ (80039ec <_Z23getFont_arialbd_10_4bppv+0x64>)
 800398c:	682c      	ldr	r4, [r5, #0]
 800398e:	f014 0401 	ands.w	r4, r4, #1
{
 8003992:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003994:	f3bf 8f5b 	dmb	ish
 8003998:	d124      	bne.n	80039e4 <_Z23getFont_arialbd_10_4bppv+0x5c>
 800399a:	4628      	mov	r0, r5
 800399c:	f00f fa44 	bl	8012e28 <__cxa_guard_acquire>
 80039a0:	b300      	cbz	r0, 80039e4 <_Z23getFont_arialbd_10_4bppv+0x5c>
 80039a2:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <_Z23getFont_arialbd_10_4bppv+0x68>)
 80039a4:	4913      	ldr	r1, [pc, #76]	@ (80039f4 <_Z23getFont_arialbd_10_4bppv+0x6c>)
 80039a6:	4814      	ldr	r0, [pc, #80]	@ (80039f8 <_Z23getFont_arialbd_10_4bppv+0x70>)
 80039a8:	940a      	str	r4, [sp, #40]	@ 0x28
 80039aa:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 80039ae:	233f      	movs	r3, #63	@ 0x3f
 80039b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80039b2:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <_Z23getFont_arialbd_10_4bppv+0x74>)
 80039b4:	9308      	str	r3, [sp, #32]
 80039b6:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <_Z23getFont_arialbd_10_4bppv+0x78>)
 80039b8:	9307      	str	r3, [sp, #28]
 80039ba:	2301      	movs	r3, #1
 80039bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80039c0:	9304      	str	r3, [sp, #16]
 80039c2:	2304      	movs	r3, #4
 80039c4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80039c8:	230a      	movs	r3, #10
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	f240 2215 	movw	r2, #533	@ 0x215
 80039d0:	230d      	movs	r3, #13
 80039d2:	9401      	str	r4, [sp, #4]
 80039d4:	f7ff fb2c 	bl	8003030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80039d8:	480a      	ldr	r0, [pc, #40]	@ (8003a04 <_Z23getFont_arialbd_10_4bppv+0x7c>)
 80039da:	f00f fa6f 	bl	8012ebc <atexit>
 80039de:	4628      	mov	r0, r5
 80039e0:	f00f fa2e 	bl	8012e40 <__cxa_guard_release>
    return arialbd_10_4bpp;
}
 80039e4:	4804      	ldr	r0, [pc, #16]	@ (80039f8 <_Z23getFont_arialbd_10_4bppv+0x70>)
 80039e6:	b00f      	add	sp, #60	@ 0x3c
 80039e8:	bd30      	pop	{r4, r5, pc}
 80039ea:	bf00      	nop
 80039ec:	20004628 	.word	0x20004628
 80039f0:	08015418 	.word	0x08015418
 80039f4:	08052f9c 	.word	0x08052f9c
 80039f8:	2000462c 	.word	0x2000462c
 80039fc:	08058714 	.word	0x08058714
 8003a00:	080589f0 	.word	0x080589f0
 8003a04:	08003985 	.word	0x08003985

08003a08 <__tcf_0>:
extern const touchgfx::FontContextualFormsTable arialbd_contextualFormsTable;
touchgfx::GeneratedFont& getFont_arialbd_20_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_20_4bpp()
{
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a08:	4770      	bx	lr
	...

08003a0c <_Z23getFont_arialbd_20_4bppv>:
{
 8003a0c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a0e:	4d18      	ldr	r5, [pc, #96]	@ (8003a70 <_Z23getFont_arialbd_20_4bppv+0x64>)
 8003a10:	682c      	ldr	r4, [r5, #0]
 8003a12:	f014 0401 	ands.w	r4, r4, #1
{
 8003a16:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a18:	f3bf 8f5b 	dmb	ish
 8003a1c:	d125      	bne.n	8003a6a <_Z23getFont_arialbd_20_4bppv+0x5e>
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f00f fa02 	bl	8012e28 <__cxa_guard_acquire>
 8003a24:	b308      	cbz	r0, 8003a6a <_Z23getFont_arialbd_20_4bppv+0x5e>
 8003a26:	4b13      	ldr	r3, [pc, #76]	@ (8003a74 <_Z23getFont_arialbd_20_4bppv+0x68>)
 8003a28:	4913      	ldr	r1, [pc, #76]	@ (8003a78 <_Z23getFont_arialbd_20_4bppv+0x6c>)
 8003a2a:	4814      	ldr	r0, [pc, #80]	@ (8003a7c <_Z23getFont_arialbd_20_4bppv+0x70>)
 8003a2c:	940a      	str	r4, [sp, #40]	@ 0x28
 8003a2e:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8003a32:	233f      	movs	r3, #63	@ 0x3f
 8003a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a36:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <_Z23getFont_arialbd_20_4bppv+0x74>)
 8003a38:	9308      	str	r3, [sp, #32]
 8003a3a:	4b12      	ldr	r3, [pc, #72]	@ (8003a84 <_Z23getFont_arialbd_20_4bppv+0x78>)
 8003a3c:	9307      	str	r3, [sp, #28]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	2302      	movs	r3, #2
 8003a42:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8003a46:	2301      	movs	r3, #1
 8003a48:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8003a4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a50:	2314      	movs	r3, #20
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	f240 2215 	movw	r2, #533	@ 0x215
 8003a58:	231a      	movs	r3, #26
 8003a5a:	f7ff fae9 	bl	8003030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003a5e:	480a      	ldr	r0, [pc, #40]	@ (8003a88 <_Z23getFont_arialbd_20_4bppv+0x7c>)
 8003a60:	f00f fa2c 	bl	8012ebc <atexit>
 8003a64:	4628      	mov	r0, r5
 8003a66:	f00f f9eb 	bl	8012e40 <__cxa_guard_release>
    return arialbd_20_4bpp;
}
 8003a6a:	4804      	ldr	r0, [pc, #16]	@ (8003a7c <_Z23getFont_arialbd_20_4bppv+0x70>)
 8003a6c:	b00f      	add	sp, #60	@ 0x3c
 8003a6e:	bd30      	pop	{r4, r5, pc}
 8003a70:	20004658 	.word	0x20004658
 8003a74:	08015418 	.word	0x08015418
 8003a78:	08054cc4 	.word	0x08054cc4
 8003a7c:	2000465c 	.word	0x2000465c
 8003a80:	0805871c 	.word	0x0805871c
 8003a84:	080589f4 	.word	0x080589f4
 8003a88:	08003a09 	.word	0x08003a09

08003a8c <__tcf_0>:
extern const touchgfx::FontContextualFormsTable arialbd_contextualFormsTable;
touchgfx::GeneratedFont& getFont_arialbd_40_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_40_4bpp()
{
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a8c:	4770      	bx	lr
	...

08003a90 <_Z23getFont_arialbd_40_4bppv>:
{
 8003a90:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a92:	4d18      	ldr	r5, [pc, #96]	@ (8003af4 <_Z23getFont_arialbd_40_4bppv+0x64>)
 8003a94:	682c      	ldr	r4, [r5, #0]
 8003a96:	f014 0401 	ands.w	r4, r4, #1
{
 8003a9a:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a9c:	f3bf 8f5b 	dmb	ish
 8003aa0:	d125      	bne.n	8003aee <_Z23getFont_arialbd_40_4bppv+0x5e>
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f00f f9c0 	bl	8012e28 <__cxa_guard_acquire>
 8003aa8:	b308      	cbz	r0, 8003aee <_Z23getFont_arialbd_40_4bppv+0x5e>
 8003aaa:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <_Z23getFont_arialbd_40_4bppv+0x68>)
 8003aac:	4913      	ldr	r1, [pc, #76]	@ (8003afc <_Z23getFont_arialbd_40_4bppv+0x6c>)
 8003aae:	4814      	ldr	r0, [pc, #80]	@ (8003b00 <_Z23getFont_arialbd_40_4bppv+0x70>)
 8003ab0:	940a      	str	r4, [sp, #40]	@ 0x28
 8003ab2:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8003ab6:	233f      	movs	r3, #63	@ 0x3f
 8003ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <_Z23getFont_arialbd_40_4bppv+0x74>)
 8003abc:	9308      	str	r3, [sp, #32]
 8003abe:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <_Z23getFont_arialbd_40_4bppv+0x78>)
 8003ac0:	9307      	str	r3, [sp, #28]
 8003ac2:	2207      	movs	r2, #7
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8003aca:	2201      	movs	r2, #1
 8003acc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003ad0:	2328      	movs	r3, #40	@ 0x28
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	f240 2215 	movw	r2, #533	@ 0x215
 8003ad8:	2333      	movs	r3, #51	@ 0x33
 8003ada:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003ade:	f7ff faa7 	bl	8003030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003ae2:	480a      	ldr	r0, [pc, #40]	@ (8003b0c <_Z23getFont_arialbd_40_4bppv+0x7c>)
 8003ae4:	f00f f9ea 	bl	8012ebc <atexit>
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f00f f9a9 	bl	8012e40 <__cxa_guard_release>
    return arialbd_40_4bpp;
}
 8003aee:	4804      	ldr	r0, [pc, #16]	@ (8003b00 <_Z23getFont_arialbd_40_4bppv+0x70>)
 8003af0:	b00f      	add	sp, #60	@ 0x3c
 8003af2:	bd30      	pop	{r4, r5, pc}
 8003af4:	20004688 	.word	0x20004688
 8003af8:	08015418 	.word	0x08015418
 8003afc:	080569ec 	.word	0x080569ec
 8003b00:	2000468c 	.word	0x2000468c
 8003b04:	08058858 	.word	0x08058858
 8003b08:	080589f8 	.word	0x080589f8
 8003b0c:	08003a8d 	.word	0x08003a8d

08003b10 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003b10:	2000      	movs	r0, #0
 8003b12:	4770      	bx	lr

08003b14 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003b14:	2000      	movs	r0, #0
 8003b16:	4770      	bx	lr

08003b18 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003b18:	b40e      	push	{r1, r2, r3}
 8003b1a:	b503      	push	{r0, r1, lr}
 8003b1c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003b1e:	2100      	movs	r1, #0
{
 8003b20:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003b24:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003b26:	f00a f993 	bl	800de50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003b2a:	b002      	add	sp, #8
 8003b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b30:	b003      	add	sp, #12
 8003b32:	4770      	bx	lr

08003b34 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003b34:	b40c      	push	{r2, r3}
 8003b36:	b507      	push	{r0, r1, r2, lr}
 8003b38:	ab04      	add	r3, sp, #16
 8003b3a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003b3e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003b40:	f00a f986 	bl	800de50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003b44:	b003      	add	sp, #12
 8003b46:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b4a:	b002      	add	sp, #8
 8003b4c:	4770      	bx	lr
	...

08003b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003b50:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003b52:	b510      	push	{r4, lr}
 8003b54:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003b56:	b373      	cbz	r3, 8003bb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003b58:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003b5a:	b92b      	cbnz	r3, 8003b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003b5e:	4a19      	ldr	r2, [pc, #100]	@ (8003bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 8003b60:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003b62:	4819      	ldr	r0, [pc, #100]	@ (8003bc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003b64:	f00f f98c 	bl	8012e80 <__assert_func>
            return buffer[pos];
 8003b68:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003b6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003b6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003b70:	b30b      	cbz	r3, 8003bb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003b72:	f00b fc76 	bl	800f462 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003b76:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d803      	bhi.n	8003b84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003b7c:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003b7e:	4a14      	ldr	r2, [pc, #80]	@ (8003bd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003b80:	21cb      	movs	r1, #203	@ 0xcb
 8003b82:	e7ee      	b.n	8003b62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003b84:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003b86:	1c53      	adds	r3, r2, #1
 8003b88:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003b8a:	2b09      	cmp	r3, #9
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	bf88      	it	hi
 8003b90:	f1a3 010a 	subhi.w	r1, r3, #10
 8003b94:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003b98:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003b9c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003b9e:	4281      	cmp	r1, r0
 8003ba0:	d109      	bne.n	8003bb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003ba2:	2b0a      	cmp	r3, #10
 8003ba4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003ba8:	bf28      	it	cs
 8003baa:	2300      	movcs	r3, #0
 8003bac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003bb0:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8003bb2:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003bb4:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003bb6:	4620      	mov	r0, r4
}
 8003bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003bbc:	f00b bb54 	b.w	800f268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003bc0:	08014aef 	.word	0x08014aef
 8003bc4:	08014af8 	.word	0x08014af8
 8003bc8:	08014ba3 	.word	0x08014ba3
 8003bcc:	08014bed 	.word	0x08014bed
 8003bd0:	08014bfb 	.word	0x08014bfb

08003bd4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003bd4:	f00b bb0f 	b.w	800f1f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003bd8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	ac02      	add	r4, sp, #8
 8003bde:	e884 0006 	stmia.w	r4, {r1, r2}
 8003be2:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003be4:	ab0a      	add	r3, sp, #40	@ 0x28
 8003be6:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	4621      	mov	r1, r4
 8003bf0:	9b08      	ldr	r3, [sp, #32]
 8003bf2:	f008 fd57 	bl	800c6a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003bf6:	b006      	add	sp, #24
 8003bf8:	bd10      	pop	{r4, pc}
	...

08003bfc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003bfc:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003bfe:	bb18      	cbnz	r0, 8003c48 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003c00:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003c02:	4813      	ldr	r0, [pc, #76]	@ (8003c50 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003c04:	681c      	ldr	r4, [r3, #0]
 8003c06:	4913      	ldr	r1, [pc, #76]	@ (8003c54 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003c08:	b1b4      	cbz	r4, 8003c38 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	4422      	add	r2, r4
 8003c0e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003c10:	6862      	ldr	r2, [r4, #4]
 8003c12:	4422      	add	r2, r4
 8003c14:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003c16:	68a2      	ldr	r2, [r4, #8]
 8003c18:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003c20:	f000 f838 	bl	8003c94 <_ZN17TypedTextDatabase8getFontsEv>
 8003c24:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003c26:	f000 f833 	bl	8003c90 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003c2c:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003c30:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003c32:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003c34:	8018      	strh	r0, [r3, #0]
    }
}
 8003c36:	e007      	b.n	8003c48 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003c3a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003c3e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003c42:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003c44:	2c00      	cmp	r4, #0
 8003c46:	d1e8      	bne.n	8003c1a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003c48:	bd38      	pop	{r3, r4, r5, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200046c4 	.word	0x200046c4
 8003c50:	200046bc 	.word	0x200046bc
 8003c54:	200046b8 	.word	0x200046b8
 8003c58:	200046c0 	.word	0x200046c0
 8003c5c:	2001548c 	.word	0x2001548c
 8003c60:	20015494 	.word	0x20015494
 8003c64:	20015490 	.word	0x20015490
 8003c68:	08058a28 	.word	0x08058a28
 8003c6c:	080589fc 	.word	0x080589fc
 8003c70:	08058a78 	.word	0x08058a78

08003c74 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003c7c:	4b03      	ldr	r3, [pc, #12]	@ (8003c8c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	200046b8 	.word	0x200046b8
 8003c8c:	200046bc 	.word	0x200046bc

08003c90 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003c90:	200b      	movs	r0, #11
 8003c92:	4770      	bx	lr

08003c94 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003c94:	4800      	ldr	r0, [pc, #0]	@ (8003c98 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003c96:	4770      	bx	lr
 8003c98:	200046c8 	.word	0x200046c8

08003c9c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_arialbd_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003c9c:	b510      	push	{r4, lr}
    &(getFont_arialbd_20_4bpp()),
 8003c9e:	f7ff feb5 	bl	8003a0c <_Z23getFont_arialbd_20_4bppv>
};
 8003ca2:	4c04      	ldr	r4, [pc, #16]	@ (8003cb4 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003ca4:	6020      	str	r0, [r4, #0]
    &(getFont_arialbd_40_4bpp()),
 8003ca6:	f7ff fef3 	bl	8003a90 <_Z23getFont_arialbd_40_4bppv>
};
 8003caa:	6060      	str	r0, [r4, #4]
    &(getFont_arialbd_10_4bpp())
 8003cac:	f7ff fe6c 	bl	8003988 <_Z23getFont_arialbd_10_4bppv>
};
 8003cb0:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003cb2:	bd10      	pop	{r4, pc}
 8003cb4:	200046c8 	.word	0x200046c8

08003cb8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003cb8:	4770      	bx	lr

08003cba <_ZN19FrontendApplicationD0Ev>:
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	f00f f8af 	bl	8012e24 <_ZdlPvj>
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	bd10      	pop	{r4, pc}

08003cca <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003cca:	b510      	push	{r4, lr}
 8003ccc:	4604      	mov	r4, r0
    {
        model.tick();
 8003cce:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8003cd2:	f000 f816 	bl	8003d02 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003cd6:	4620      	mov	r0, r4
    }
 8003cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003cdc:	f009 b9ee 	b.w	800d0bc <_ZN8touchgfx11Application15handleTickEventEv>

08003ce0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003ce4:	f7ff f912 	bl	8002f0c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003ce8:	4b01      	ldr	r3, [pc, #4]	@ (8003cf0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8003cea:	6023      	str	r3, [r4, #0]
{

}
 8003cec:	4620      	mov	r0, r4
 8003cee:	bd10      	pop	{r4, pc}
 8003cf0:	08015878 	.word	0x08015878

08003cf4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95), modelListener(0)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	215f      	movs	r1, #95	@ 0x5f
 8003cf8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8003cfc:	6002      	str	r2, [r0, #0]
 8003cfe:	8081      	strh	r1, [r0, #4]
{
	modelTickCount = 0;
	highestScore = 0;
}
 8003d00:	4770      	bx	lr

08003d02 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8003d02:	6803      	ldr	r3, [r0, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	6003      	str	r3, [r0, #0]
}
 8003d08:	4770      	bx	lr

08003d0a <_ZNK5Model15getHighestScoreEv>:
	return ImageX;
}

int Model::getHighestScore() const {
	return this->highestScore;
}
 8003d0a:	68c0      	ldr	r0, [r0, #12]
 8003d0c:	4770      	bx	lr

08003d0e <_ZN5Model15setHighestScoreEi>:
void Model::setHighestScore(int score){
	if(score > highestScore) highestScore = score;
 8003d0e:	68c3      	ldr	r3, [r0, #12]
 8003d10:	428b      	cmp	r3, r1
 8003d12:	bfb8      	it	lt
 8003d14:	60c1      	strlt	r1, [r0, #12]
}
 8003d16:	4770      	bx	lr

08003d18 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003d18:	4770      	bx	lr

08003d1a <_ZThn4_N16Screen1PresenterD1Ev>:
 8003d1a:	3804      	subs	r0, #4
 8003d1c:	4770      	bx	lr

08003d1e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003d1e:	4770      	bx	lr

08003d20 <_ZN16Screen1PresenterD0Ev>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	2110      	movs	r1, #16
 8003d24:	4604      	mov	r4, r0
 8003d26:	f00f f87d 	bl	8012e24 <_ZdlPvj>
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <_ZThn4_N16Screen1PresenterD0Ev>:
 8003d2e:	f1a0 0004 	sub.w	r0, r0, #4
 8003d32:	e7f5      	b.n	8003d20 <_ZN16Screen1PresenterD0Ev>

08003d34 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003d34:	2200      	movs	r2, #0
 8003d36:	6082      	str	r2, [r0, #8]
    : view(v)
 8003d38:	4a02      	ldr	r2, [pc, #8]	@ (8003d44 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8003d3a:	6002      	str	r2, [r0, #0]
 8003d3c:	3218      	adds	r2, #24
 8003d3e:	6042      	str	r2, [r0, #4]
 8003d40:	60c1      	str	r1, [r0, #12]
}
 8003d42:	4770      	bx	lr
 8003d44:	080158cc 	.word	0x080158cc

08003d48 <_ZNK16Screen1Presenter15getHighestScoreEv>:
{

}

int Screen1Presenter::getHighestScore() const{
	return model->getHighestScore();
 8003d48:	6880      	ldr	r0, [r0, #8]
 8003d4a:	f7ff bfde 	b.w	8003d0a <_ZNK5Model15getHighestScoreEv>

08003d4e <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003d4e:	4770      	bx	lr

08003d50 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003d50:	b510      	push	{r4, lr}
 8003d52:	4b03      	ldr	r3, [pc, #12]	@ (8003d60 <_ZN11Screen1ViewD1Ev+0x10>)
 8003d54:	6003      	str	r3, [r0, #0]
 8003d56:	4604      	mov	r4, r0
 8003d58:	f7ff f9df 	bl	800311a <_ZN15Screen1ViewBaseD1Ev>
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	080158f4 	.word	0x080158f4

08003d64 <_ZN11Screen1ViewD0Ev>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4604      	mov	r4, r0
 8003d68:	f7ff fff2 	bl	8003d50 <_ZN11Screen1ViewD1Ev>
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8003d72:	f00f f857 	bl	8012e24 <_ZdlPvj>
 8003d76:	4620      	mov	r0, r4
 8003d78:	bd10      	pop	{r4, pc}
	...

08003d7c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4604      	mov	r4, r0
 8003d80:	f7ff fa8c 	bl	800329c <_ZN15Screen1ViewBaseC1Ev>
 8003d84:	4b07      	ldr	r3, [pc, #28]	@ (8003da4 <_ZN11Screen1ViewC1Ev+0x28>)
 8003d86:	6023      	str	r3, [r4, #0]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
	currScreen = 1;
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <_ZN11Screen1ViewC1Ev+0x2c>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
    DF_SendCommand(0x0F, 0x02, 0x02);
 8003d94:	2202      	movs	r2, #2
 8003d96:	4611      	mov	r1, r2
 8003d98:	200f      	movs	r0, #15
 8003d9a:	f7fc fff5 	bl	8000d88 <DF_SendCommand>
}
 8003d9e:	4620      	mov	r0, r4
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	bf00      	nop
 8003da4:	080158f4 	.word	0x080158f4
 8003da8:	2000000c 	.word	0x2000000c

08003dac <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003dac:	f7ff b9b6 	b.w	800311c <_ZN15Screen1ViewBase11setupScreenEv>

08003db0 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 8003db0:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
 8003db4:	3301      	adds	r3, #1
{
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
	tickCounter += 1;
 8003dba:	f8c0 31a0 	str.w	r3, [r0, #416]	@ 0x1a0
	Unicode::snprintf(highestScoreBuffer, HIGHESTSCORE_SIZE, "%d", presenter->getHighestScore());
 8003dbe:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003dc0:	f7ff ffc2 	bl	8003d48 <_ZNK16Screen1Presenter15getHighestScoreEv>
 8003dc4:	4a06      	ldr	r2, [pc, #24]	@ (8003de0 <_ZN11Screen1View15handleTickEventEv+0x30>)
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	210a      	movs	r1, #10
 8003dca:	f504 70be 	add.w	r0, r4, #380	@ 0x17c
 8003dce:	f00c f8f1 	bl	800ffb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	highestScore.invalidate();
 8003dd2:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
}
 8003dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	highestScore.invalidate();
 8003dda:	f00a b963 	b.w	800e0a4 <_ZNK8touchgfx8Drawable10invalidateEv>
 8003dde:	bf00      	nop
 8003de0:	08014ccd 	.word	0x08014ccd

08003de4 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8003de4:	4770      	bx	lr

08003de6 <_ZThn4_N16Screen2PresenterD1Ev>:
 8003de6:	3804      	subs	r0, #4
 8003de8:	4770      	bx	lr

08003dea <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003dea:	4770      	bx	lr

08003dec <_ZN16Screen2PresenterD0Ev>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	2110      	movs	r1, #16
 8003df0:	4604      	mov	r4, r0
 8003df2:	f00f f817 	bl	8012e24 <_ZdlPvj>
 8003df6:	4620      	mov	r0, r4
 8003df8:	bd10      	pop	{r4, pc}

08003dfa <_ZThn4_N16Screen2PresenterD0Ev>:
 8003dfa:	f1a0 0004 	sub.w	r0, r0, #4
 8003dfe:	e7f5      	b.n	8003dec <_ZN16Screen2PresenterD0Ev>

08003e00 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003e00:	2200      	movs	r2, #0
 8003e02:	6082      	str	r2, [r0, #8]
    : view(v)
 8003e04:	4a02      	ldr	r2, [pc, #8]	@ (8003e10 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003e06:	6002      	str	r2, [r0, #0]
 8003e08:	3218      	adds	r2, #24
 8003e0a:	6042      	str	r2, [r0, #4]
 8003e0c:	60c1      	str	r1, [r0, #12]
}
 8003e0e:	4770      	bx	lr
 8003e10:	08015928 	.word	0x08015928

08003e14 <_ZN16Screen2Presenter15setHighestScoreEi>:

int Screen2Presenter::getHighestScore() const{
	return model->getHighestScore();
}
void Screen2Presenter::setHighestScore(int score){
	model->setHighestScore(score);
 8003e14:	6880      	ldr	r0, [r0, #8]
 8003e16:	f7ff bf7a 	b.w	8003d0e <_ZN5Model15setHighestScoreEi>

08003e1a <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
//    presenter->UpdateImageX(localImageX);
}
 8003e1a:	4770      	bx	lr

08003e1c <_ZN11Screen2View11setupScreenEv>:
{
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	4604      	mov	r4, r0
	engine.init();
 8003e20:	f500 700a 	add.w	r0, r0, #552	@ 0x228
 8003e24:	f7fc fc69 	bl	80006fa <_ZN12TetrisEngine4initEv>
	tickCount = 0;
 8003e28:	f504 5240 	add.w	r2, r4, #12288	@ 0x3000
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
	track1.invalidate();
 8003e32:	f104 0098 	add.w	r0, r4, #152	@ 0x98
        visible = vis;
 8003e36:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
}
 8003e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	track1.invalidate();
 8003e3e:	f00a b931 	b.w	800e0a4 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08003e44 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003e44:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <_ZN11Screen2ViewD1Ev+0x3c>)
 8003e46:	b570      	push	{r4, r5, r6, lr}
 8003e48:	4605      	mov	r5, r0
 8003e4a:	6003      	str	r3, [r0, #0]
 8003e4c:	f243 1494 	movw	r4, #12692	@ 0x3194
 8003e50:	f642 6654 	movw	r6, #11860	@ 0x2e54
 8003e54:	42b4      	cmp	r4, r6
 8003e56:	d10d      	bne.n	8003e74 <_ZN11Screen2ViewD1Ev+0x30>
 8003e58:	f240 56b4 	movw	r6, #1460	@ 0x5b4
 8003e5c:	592b      	ldr	r3, [r5, r4]
 8003e5e:	1928      	adds	r0, r5, r4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3c34      	subs	r4, #52	@ 0x34
 8003e64:	4798      	blx	r3
 8003e66:	42b4      	cmp	r4, r6
 8003e68:	d1f8      	bne.n	8003e5c <_ZN11Screen2ViewD1Ev+0x18>
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f7ff fb47 	bl	80034fe <_ZN15Screen2ViewBaseD1Ev>
 8003e70:	4628      	mov	r0, r5
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	592b      	ldr	r3, [r5, r4]
 8003e76:	1928      	adds	r0, r5, r4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4798      	blx	r3
 8003e7c:	3c34      	subs	r4, #52	@ 0x34
 8003e7e:	e7e9      	b.n	8003e54 <_ZN11Screen2ViewD1Ev+0x10>
 8003e80:	08015950 	.word	0x08015950

08003e84 <_ZN11Screen2ViewD0Ev>:
 8003e84:	b510      	push	{r4, lr}
 8003e86:	4604      	mov	r4, r0
 8003e88:	f7ff ffdc 	bl	8003e44 <_ZN11Screen2ViewD1Ev>
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f243 11d0 	movw	r1, #12752	@ 0x31d0
 8003e92:	f00e ffc7 	bl	8012e24 <_ZdlPvj>
 8003e96:	4620      	mov	r0, r4
 8003e98:	bd10      	pop	{r4, pc}
	...

08003e9c <_ZN8touchgfx3BoxC1Ev>:
        : Widget(), alpha(255), color(0)
 8003e9c:	4a09      	ldr	r2, [pc, #36]	@ (8003ec4 <_ZN8touchgfx3BoxC1Ev+0x28>)
 8003e9e:	6002      	str	r2, [r0, #0]
          touchable(false),
 8003ea0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	8481      	strh	r1, [r0, #36]	@ 0x24
 8003ea8:	21ff      	movs	r1, #255	@ 0xff
 8003eaa:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003eae:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003eb2:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003eb6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003eba:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : color(col)
 8003ebe:	6282      	str	r2, [r0, #40]	@ 0x28
    }
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	08015b2c 	.word	0x08015b2c

08003ec8 <_ZN11Screen2View8drawGridEv>:
        drawGrid();
        drawPreview();
    }
}

void Screen2View::drawGrid(){
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	void getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY);
    const Grid& getGrid() const { return grid; }
    const BlockMatrix& getCurrentBlock() const { return currBlock; }
    int getBlockSize() const { return blockSize; }
    int getCurrX() const { return currX; }
 8003ecc:	f8d0 8588 	ldr.w	r8, [r0, #1416]	@ 0x588
    int getCurrY() const { return currY; }
 8003ed0:	f8d0 758c 	ldr.w	r7, [r0, #1420]	@ 0x58c
 8003ed4:	b089      	sub	sp, #36	@ 0x24
 8003ed6:	4604      	mov	r4, r0
    const BlockMatrix& getCurrentBlock() const { return currBlock; }
 8003ed8:	f500 61a9 	add.w	r1, r0, #1352	@ 0x548
    const auto& block = engine.getCurrentBlock();
    int currX = engine.getCurrX();
    int currY = engine.getCurrY();

    //Vẽ lưới
    for (int y = 0; y < GRID_HEIGHT; ++y) {
 8003edc:	f500 7a09 	add.w	sl, r0, #548	@ 0x224
    int getCurrY() const { return currY; }
 8003ee0:	2600      	movs	r6, #0
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003ee2:	19a5      	adds	r5, r4, r6
void Screen2View::drawGrid(){
 8003ee4:	46d3      	mov	fp, sl
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003ee6:	f04f 0900 	mov.w	r9, #0
            colBoxes[y][x].setColor(grid[y][x] ? Color::getColorFromRGB(255, 0, 255)
 8003eea:	f85b 2f04 	ldr.w	r2, [fp, #4]!
 8003eee:	9103      	str	r1, [sp, #12]
 8003ef0:	2a00      	cmp	r2, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	f04f 427f 	moveq.w	r2, #4278190080	@ 0xff000000
 8003ef8:	f46f 427f 	mvnne.w	r2, #65280	@ 0xff00
        color = newColor;
 8003efc:	f8c5 2610 	str.w	r2, [r5, #1552]	@ 0x610
                                               : Color::getColorFromRGB(0, 0, 0));
            colBoxes[y][x].invalidate();
 8003f00:	f8d5 25e8 	ldr.w	r2, [r5, #1512]	@ 0x5e8
 8003f04:	f505 60bd 	add.w	r0, r5, #1512	@ 0x5e8
 8003f08:	6952      	ldr	r2, [r2, #20]
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003f0a:	f109 0901 	add.w	r9, r9, #1
            colBoxes[y][x].invalidate();
 8003f0e:	4790      	blx	r2
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003f10:	f1b9 0f0a 	cmp.w	r9, #10
 8003f14:	9903      	ldr	r1, [sp, #12]
 8003f16:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8003f1a:	f642 03a0 	movw	r3, #10400	@ 0x28a0
 8003f1e:	d1e4      	bne.n	8003eea <_ZN11Screen2View8drawGridEv+0x22>
    for (int y = 0; y < GRID_HEIGHT; ++y) {
 8003f20:	f506 7602 	add.w	r6, r6, #520	@ 0x208
 8003f24:	429e      	cmp	r6, r3
 8003f26:	f10a 0a28 	add.w	sl, sl, #40	@ 0x28
 8003f2a:	d1da      	bne.n	8003ee2 <_ZN11Screen2View8drawGridEv+0x1a>
        }
    }

    // Vẽ block rơi
    int minX, maxX, minY, maxY;
    engine.getBlockBounds(block, minX, maxX, minY, maxY);
 8003f2c:	ab07      	add	r3, sp, #28
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	ab06      	add	r3, sp, #24
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	aa04      	add	r2, sp, #16
 8003f36:	ab05      	add	r3, sp, #20
 8003f38:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8003f3c:	f7fc fc31 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
    for (int i = minY; i <= maxY; ++i)
 8003f40:	9e06      	ldr	r6, [sp, #24]
 8003f42:	eb06 0907 	add.w	r9, r6, r7
 8003f46:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 8003f4a:	f506 66a9 	add.w	r6, r6, #1352	@ 0x548
 8003f4e:	f04f 0a34 	mov.w	sl, #52	@ 0x34
 8003f52:	f44f 7b02 	mov.w	fp, #520	@ 0x208
 8003f56:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8003f5a:	9a07      	ldr	r2, [sp, #28]
 8003f5c:	eba9 0307 	sub.w	r3, r9, r7
 8003f60:	429a      	cmp	r2, r3
 8003f62:	da02      	bge.n	8003f6a <_ZN11Screen2View8drawGridEv+0xa2>
                if (gx >= 0 && gx < GRID_WIDTH && gy >= 0 && gy < GRID_HEIGHT) {
                    colBoxes[gy][gx].setColor(Color::getColorFromRGB(255, 255, 0));
                    colBoxes[gy][gx].invalidate();
                }
            }
}
 8003f64:	b009      	add	sp, #36	@ 0x24
 8003f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int j = minX; j <= maxX; ++j)
 8003f6a:	9b04      	ldr	r3, [sp, #16]
 8003f6c:	fb0b f509 	mul.w	r5, fp, r9
 8003f70:	eb03 0208 	add.w	r2, r3, r8
 8003f74:	fb0a 5502 	mla	r5, sl, r2, r5
 8003f78:	4425      	add	r5, r4
 8003f7a:	9a05      	ldr	r2, [sp, #20]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	da03      	bge.n	8003f88 <_ZN11Screen2View8drawGridEv+0xc0>
    for (int i = minY; i <= maxY; ++i)
 8003f80:	f109 0901 	add.w	r9, r9, #1
 8003f84:	3610      	adds	r6, #16
 8003f86:	e7e8      	b.n	8003f5a <_ZN11Screen2View8drawGridEv+0x92>
            if (block[i][j]) {
 8003f88:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8003f8c:	b192      	cbz	r2, 8003fb4 <_ZN11Screen2View8drawGridEv+0xec>
                if (gx >= 0 && gx < GRID_WIDTH && gy >= 0 && gy < GRID_HEIGHT) {
 8003f8e:	eb08 0203 	add.w	r2, r8, r3
 8003f92:	2a09      	cmp	r2, #9
 8003f94:	d80e      	bhi.n	8003fb4 <_ZN11Screen2View8drawGridEv+0xec>
 8003f96:	f1b9 0f13 	cmp.w	r9, #19
 8003f9a:	d80b      	bhi.n	8003fb4 <_ZN11Screen2View8drawGridEv+0xec>
                    colBoxes[gy][gx].invalidate();
 8003f9c:	f8d5 25e8 	ldr.w	r2, [r5, #1512]	@ 0x5e8
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	f8c5 1610 	str.w	r1, [r5, #1552]	@ 0x610
 8003fa6:	6952      	ldr	r2, [r2, #20]
 8003fa8:	f505 60bd 	add.w	r0, r5, #1512	@ 0x5e8
 8003fac:	4790      	blx	r2
 8003fae:	9b03      	ldr	r3, [sp, #12]
 8003fb0:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
        for (int j = minX; j <= maxX; ++j)
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	3534      	adds	r5, #52	@ 0x34
 8003fb8:	e7df      	b.n	8003f7a <_ZN11Screen2View8drawGridEv+0xb2>

08003fba <_ZN11Screen2View11drawPreviewEv>:

void Screen2View::drawPreview() {
 8003fba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Lấy khối tiếp theo
    TetrisEngine::BlockMatrix nextBlock;
    int nextBlockSize;
    engine.getNextBlock(nextBlock, nextBlockSize);
 8003fbe:	f500 790a 	add.w	r9, r0, #552	@ 0x228
void Screen2View::drawPreview() {
 8003fc2:	b099      	sub	sp, #100	@ 0x64
 8003fc4:	4606      	mov	r6, r0
    engine.getNextBlock(nextBlock, nextBlockSize);
 8003fc6:	aa03      	add	r2, sp, #12
 8003fc8:	a908      	add	r1, sp, #32
 8003fca:	4648      	mov	r0, r9
 8003fcc:	f7fc fb50 	bl	8000670 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERi>
 8003fd0:	2700      	movs	r7, #0
 8003fd2:	f506 583a 	add.w	r8, r6, #11904	@ 0x2e80
 8003fd6:	f108 0808 	add.w	r8, r8, #8
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003fda:	46ba      	mov	sl, r7

    // Reset all previewBoxes to transparent state
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
 8003fdc:	eb08 0507 	add.w	r5, r8, r7
void Screen2View::drawPreview() {
 8003fe0:	2404      	movs	r4, #4
			previewBoxes[i][j].setAlpha(0);
			previewBoxes[i][j].invalidate();
 8003fe2:	682b      	ldr	r3, [r5, #0]
 8003fe4:	f885 a026 	strb.w	sl, [r5, #38]	@ 0x26
 8003fe8:	4628      	mov	r0, r5
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4798      	blx	r3
		for (int j = 0; j < 4; ++j) {
 8003fee:	3c01      	subs	r4, #1
 8003ff0:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8003ff4:	d1f5      	bne.n	8003fe2 <_ZN11Screen2View11drawPreviewEv+0x28>
	for (int i = 0; i < 4; ++i) {
 8003ff6:	37d0      	adds	r7, #208	@ 0xd0
 8003ff8:	f5b7 7f50 	cmp.w	r7, #832	@ 0x340
 8003ffc:	d1ee      	bne.n	8003fdc <_ZN11Screen2View11drawPreviewEv+0x22>
		}
	}

    // Vẽ preview block
	int minX, maxX, minY, maxY;
	engine.getBlockBounds(nextBlock, minX, maxX, minY, maxY);
 8003ffe:	ab07      	add	r3, sp, #28
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	ab06      	add	r3, sp, #24
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4648      	mov	r0, r9
 8004008:	ab05      	add	r3, sp, #20
 800400a:	aa04      	add	r2, sp, #16
 800400c:	a908      	add	r1, sp, #32
 800400e:	f7fc fbc8 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>

	for (int i = 0; i < 4; i++) {
 8004012:	ad08      	add	r5, sp, #32
        color = newColor;
 8004014:	f04f 0934 	mov.w	r9, #52	@ 0x34
 8004018:	f04f 0ad0 	mov.w	sl, #208	@ 0xd0
 800401c:	f642 6bb0 	movw	fp, #11952	@ 0x2eb0
    engine.getNextBlock(nextBlock, nextBlockSize);
 8004020:	46a8      	mov	r8, r5
		for (int j = 0; j < 4; j++) {
 8004022:	2700      	movs	r7, #0
			if (nextBlock[i][j]) {
 8004024:	f858 3b04 	ldr.w	r3, [r8], #4
 8004028:	b1fb      	cbz	r3, 800406a <_ZN11Screen2View11drawPreviewEv+0xb0>
				int px = j - minX;
 800402a:	9a04      	ldr	r2, [sp, #16]
 800402c:	1aba      	subs	r2, r7, r2
				int py = i - minY;
				if (px < 4 && py < 4) {
 800402e:	2a03      	cmp	r2, #3
 8004030:	dc1b      	bgt.n	800406a <_ZN11Screen2View11drawPreviewEv+0xb0>
				int py = i - minY;
 8004032:	9b06      	ldr	r3, [sp, #24]
 8004034:	1ae3      	subs	r3, r4, r3
				if (px < 4 && py < 4) {
 8004036:	2b03      	cmp	r3, #3
 8004038:	dc17      	bgt.n	800406a <_ZN11Screen2View11drawPreviewEv+0xb0>
 800403a:	fb09 f202 	mul.w	r2, r9, r2
 800403e:	fb0a f303 	mul.w	r3, sl, r3
 8004042:	18d1      	adds	r1, r2, r3
 8004044:	4431      	add	r1, r6
 8004046:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800404a:	f841 000b 	str.w	r0, [r1, fp]
        alpha = newAlpha;
 800404e:	f642 60ae 	movw	r0, #11950	@ 0x2eae
 8004052:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004056:	f801 c000 	strb.w	ip, [r1, r0]
					previewBoxes[py][px].setColor(Color::getColorFromRGB(0, 255, 0));
					previewBoxes[py][px].setAlpha(255);
					previewBoxes[py][px].invalidate();
 800405a:	f642 6088 	movw	r0, #11912	@ 0x2e88
 800405e:	4403      	add	r3, r0
 8004060:	4413      	add	r3, r2
 8004062:	580a      	ldr	r2, [r1, r0]
 8004064:	18f0      	adds	r0, r6, r3
 8004066:	6952      	ldr	r2, [r2, #20]
 8004068:	4790      	blx	r2
		for (int j = 0; j < 4; j++) {
 800406a:	3701      	adds	r7, #1
 800406c:	2f04      	cmp	r7, #4
 800406e:	d1d9      	bne.n	8004024 <_ZN11Screen2View11drawPreviewEv+0x6a>
	for (int i = 0; i < 4; i++) {
 8004070:	3401      	adds	r4, #1
 8004072:	2c04      	cmp	r4, #4
 8004074:	f105 0510 	add.w	r5, r5, #16
 8004078:	d1d2      	bne.n	8004020 <_ZN11Screen2View11drawPreviewEv+0x66>
				}
			}
		}
	}
}
 800407a:	b019      	add	sp, #100	@ 0x64
 800407c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004080 <_ZN11Screen2View15handleTickEventEv>:
{
 8004080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (++tickCount % 20 == 0) {
 8004084:	f500 5640 	add.w	r6, r0, #12288	@ 0x3000
 8004088:	2314      	movs	r3, #20
 800408a:	f8d6 51c8 	ldr.w	r5, [r6, #456]	@ 0x1c8
 800408e:	3501      	adds	r5, #1
 8004090:	f8c6 51c8 	str.w	r5, [r6, #456]	@ 0x1c8
 8004094:	fb95 f2f3 	sdiv	r2, r5, r3
 8004098:	fb03 5512 	mls	r5, r3, r2, r5
{
 800409c:	4604      	mov	r4, r0
    if (++tickCount % 20 == 0) {
 800409e:	2d00      	cmp	r5, #0
 80040a0:	f040 80b3 	bne.w	800420a <_ZN11Screen2View15handleTickEventEv+0x18a>
		if(engine.isGameOver()) {	//kiểm tra gameover
 80040a4:	f890 8594 	ldrb.w	r8, [r0, #1428]	@ 0x594
 80040a8:	f1b8 0f00 	cmp.w	r8, #0
 80040ac:	d154      	bne.n	8004158 <_ZN11Screen2View15handleTickEventEv+0xd8>
    	if(osMessageQueueGetCount(movingQueueHandle) > 0){
 80040ae:	4f58      	ldr	r7, [pc, #352]	@ (8004210 <_ZN11Screen2View15handleTickEventEv+0x190>)
 80040b0:	6838      	ldr	r0, [r7, #0]
 80040b2:	f003 f9c3 	bl	800743c <osMessageQueueGetCount>
 80040b6:	f504 750a 	add.w	r5, r4, #552	@ 0x228
 80040ba:	b1c0      	cbz	r0, 80040ee <_ZN11Screen2View15handleTickEventEv+0x6e>
    		osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 80040bc:	230a      	movs	r3, #10
 80040be:	6838      	ldr	r0, [r7, #0]
 80040c0:	4642      	mov	r2, r8
 80040c2:	f10d 0107 	add.w	r1, sp, #7
 80040c6:	f003 f989 	bl	80073dc <osMessageQueueGet>
    		if(res == 'L') engine.moveLeft();
 80040ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040ce:	2b52      	cmp	r3, #82	@ 0x52
 80040d0:	f000 8093 	beq.w	80041fa <_ZN11Screen2View15handleTickEventEv+0x17a>
 80040d4:	f200 8086 	bhi.w	80041e4 <_ZN11Screen2View15handleTickEventEv+0x164>
 80040d8:	2b44      	cmp	r3, #68	@ 0x44
 80040da:	f000 8092 	beq.w	8004202 <_ZN11Screen2View15handleTickEventEv+0x182>
 80040de:	2b4c      	cmp	r3, #76	@ 0x4c
 80040e0:	f000 8087 	beq.w	80041f2 <_ZN11Screen2View15handleTickEventEv+0x172>
    		osThreadNew(SingleBeepTask, NULL, NULL);
 80040e4:	2200      	movs	r2, #0
 80040e6:	484b      	ldr	r0, [pc, #300]	@ (8004214 <_ZN11Screen2View15handleTickEventEv+0x194>)
 80040e8:	4611      	mov	r1, r2
 80040ea:	f002 ff86 	bl	8006ffa <osThreadNew>
        engine.update();
 80040ee:	4628      	mov	r0, r5
 80040f0:	f7fc fc2e 	bl	8000950 <_ZN12TetrisEngine6updateEv>
        Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", engine.getScore());
 80040f4:	f8d4 3598 	ldr.w	r3, [r4, #1432]	@ 0x598
 80040f8:	4a47      	ldr	r2, [pc, #284]	@ (8004218 <_ZN11Screen2View15handleTickEventEv+0x198>)
 80040fa:	210a      	movs	r1, #10
 80040fc:	f504 7001 	add.w	r0, r4, #516	@ 0x204
 8004100:	f00b ff58 	bl	800ffb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        score.invalidate();
 8004104:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 8004108:	f009 ffcc 	bl	800e0a4 <_ZNK8touchgfx8Drawable10invalidateEv>
        presenter->setHighestScore(engine.getScore());
 800410c:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
 8004110:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004112:	f7ff fe7f 	bl	8003e14 <_ZN16Screen2Presenter15setHighestScoreEi>
        if(engine.getTakeScore()){
 8004116:	f894 359c 	ldrb.w	r3, [r4, #1436]	@ 0x59c
 800411a:	b13b      	cbz	r3, 800412c <_ZN11Screen2View15handleTickEventEv+0xac>
        	osThreadNew(DoubleBeepTask, NULL, NULL);
 800411c:	2200      	movs	r2, #0
 800411e:	483f      	ldr	r0, [pc, #252]	@ (800421c <_ZN11Screen2View15handleTickEventEv+0x19c>)
 8004120:	4611      	mov	r1, r2
 8004122:	f002 ff6a 	bl	8006ffa <osThreadNew>
    int getScore() const { return score; } 
    void setTakeScore(bool param) { takeScore = param; }
 8004126:	2300      	movs	r3, #0
 8004128:	f884 359c 	strb.w	r3, [r4, #1436]	@ 0x59c
        if(engine.isGameOver() && musicGameOver == false){
 800412c:	f894 3594 	ldrb.w	r3, [r4, #1428]	@ 0x594
 8004130:	b14b      	cbz	r3, 8004146 <_ZN11Screen2View15handleTickEventEv+0xc6>
 8004132:	f896 21cc 	ldrb.w	r2, [r6, #460]	@ 0x1cc
 8004136:	b932      	cbnz	r2, 8004146 <_ZN11Screen2View15handleTickEventEv+0xc6>
        	musicGameOver = true;
 8004138:	2301      	movs	r3, #1
        	osThreadNew(GameOverTask, NULL, NULL);
 800413a:	4839      	ldr	r0, [pc, #228]	@ (8004220 <_ZN11Screen2View15handleTickEventEv+0x1a0>)
        	musicGameOver = true;
 800413c:	f886 31cc 	strb.w	r3, [r6, #460]	@ 0x1cc
        	osThreadNew(GameOverTask, NULL, NULL);
 8004140:	4611      	mov	r1, r2
 8004142:	f002 ff5a 	bl	8006ffa <osThreadNew>
        drawGrid();
 8004146:	4620      	mov	r0, r4
 8004148:	f7ff febe 	bl	8003ec8 <_ZN11Screen2View8drawGridEv>
        drawPreview();
 800414c:	4620      	mov	r0, r4
}
 800414e:	b003      	add	sp, #12
 8004150:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawPreview();
 8004154:	f7ff bf31 	b.w	8003fba <_ZN11Screen2View11drawPreviewEv>
        visible = vis;
 8004158:	46a8      	mov	r8, r5
			for(int y = 0; y < GRID_HEIGHT; y++) {
 800415a:	f642 09a0 	movw	r9, #10400	@ 0x28a0
				for(int x = 0; x < GRID_WIDTH; x++) {
 800415e:	192e      	adds	r6, r5, r4
 8004160:	2700      	movs	r7, #0
					colBoxes[y][x].invalidate();
 8004162:	f8d6 35e8 	ldr.w	r3, [r6, #1512]	@ 0x5e8
 8004166:	f886 860d 	strb.w	r8, [r6, #1549]	@ 0x60d
 800416a:	f506 60bd 	add.w	r0, r6, #1512	@ 0x5e8
 800416e:	695b      	ldr	r3, [r3, #20]
				for(int x = 0; x < GRID_WIDTH; x++) {
 8004170:	3701      	adds	r7, #1
					colBoxes[y][x].invalidate();
 8004172:	4798      	blx	r3
				for(int x = 0; x < GRID_WIDTH; x++) {
 8004174:	2f0a      	cmp	r7, #10
 8004176:	f106 0634 	add.w	r6, r6, #52	@ 0x34
 800417a:	d1f2      	bne.n	8004162 <_ZN11Screen2View15handleTickEventEv+0xe2>
			for(int y = 0; y < GRID_HEIGHT; y++) {
 800417c:	f505 7502 	add.w	r5, r5, #520	@ 0x208
 8004180:	454d      	cmp	r5, r9
 8004182:	d1ec      	bne.n	800415e <_ZN11Screen2View15handleTickEventEv+0xde>
 8004184:	2600      	movs	r6, #0
 8004186:	f504 593a 	add.w	r9, r4, #11904	@ 0x2e80
 800418a:	f109 0908 	add.w	r9, r9, #8
 800418e:	4637      	mov	r7, r6
				for (int x = 0; x < 4; x++) {
 8004190:	eb09 0506 	add.w	r5, r9, r6
 8004194:	f04f 0800 	mov.w	r8, #0
					previewBoxes[y][x].invalidate();
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	f885 7025 	strb.w	r7, [r5, #37]	@ 0x25
 800419e:	4628      	mov	r0, r5
 80041a0:	695b      	ldr	r3, [r3, #20]
				for (int x = 0; x < 4; x++) {
 80041a2:	f108 0801 	add.w	r8, r8, #1
					previewBoxes[y][x].invalidate();
 80041a6:	4798      	blx	r3
				for (int x = 0; x < 4; x++) {
 80041a8:	f1b8 0f04 	cmp.w	r8, #4
 80041ac:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 80041b0:	d1f2      	bne.n	8004198 <_ZN11Screen2View15handleTickEventEv+0x118>
			for (int y = 0; y < 4; y++) {
 80041b2:	36d0      	adds	r6, #208	@ 0xd0
 80041b4:	f5b6 7f50 	cmp.w	r6, #832	@ 0x340
 80041b8:	d1ea      	bne.n	8004190 <_ZN11Screen2View15handleTickEventEv+0x110>
 80041ba:	2301      	movs	r3, #1
			track1.invalidate();
 80041bc:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 80041c0:	f884 7199 	strb.w	r7, [r4, #409]	@ 0x199
 80041c4:	f884 71e1 	strb.w	r7, [r4, #481]	@ 0x1e1
 80041c8:	f884 714d 	strb.w	r7, [r4, #333]	@ 0x14d
 80041cc:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
 80041d0:	f009 ff68 	bl	800e0a4 <_ZNK8touchgfx8Drawable10invalidateEv>
			presenter->setHighestScore(engine.getScore());
 80041d4:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
 80041d8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
}
 80041da:	b003      	add	sp, #12
 80041dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			presenter->setHighestScore(engine.getScore());
 80041e0:	f7ff be18 	b.w	8003e14 <_ZN16Screen2Presenter15setHighestScoreEi>
 80041e4:	2b54      	cmp	r3, #84	@ 0x54
 80041e6:	f47f af7d 	bne.w	80040e4 <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'T') engine.rotate();
 80041ea:	4628      	mov	r0, r5
 80041ec:	f7fc fc14 	bl	8000a18 <_ZN12TetrisEngine6rotateEv>
 80041f0:	e778      	b.n	80040e4 <_ZN11Screen2View15handleTickEventEv+0x64>
    		if(res == 'L') engine.moveLeft();
 80041f2:	4628      	mov	r0, r5
 80041f4:	f7fc fbce 	bl	8000994 <_ZN12TetrisEngine8moveLeftEv>
 80041f8:	e774      	b.n	80040e4 <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'R') engine.moveRight();
 80041fa:	4628      	mov	r0, r5
 80041fc:	f7fc fbdd 	bl	80009ba <_ZN12TetrisEngine9moveRightEv>
 8004200:	e770      	b.n	80040e4 <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'D') engine.drop();
 8004202:	4628      	mov	r0, r5
 8004204:	f7fc fbec 	bl	80009e0 <_ZN12TetrisEngine4dropEv>
 8004208:	e76c      	b.n	80040e4 <_ZN11Screen2View15handleTickEventEv+0x64>
}
 800420a:	b003      	add	sp, #12
 800420c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004210:	20000118 	.word	0x20000118
 8004214:	08000d0d 	.word	0x08000d0d
 8004218:	08014ccd 	.word	0x08014ccd
 800421c:	08000d41 	.word	0x08000d41
 8004220:	08000de1 	.word	0x08000de1

08004224 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8004224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004228:	4604      	mov	r4, r0
 800422a:	b089      	sub	sp, #36	@ 0x24
 800422c:	f7ff fa38 	bl	80036a0 <_ZN15Screen2ViewBaseC1Ev>
 8004230:	f504 553a 	add.w	r5, r4, #11904	@ 0x2e80
 8004234:	4b55      	ldr	r3, [pc, #340]	@ (800438c <_ZN11Screen2ViewC1Ev+0x168>)
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 800423c:	3508      	adds	r5, #8
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 800423e:	f8df 8158 	ldr.w	r8, [pc, #344]	@ 8004398 <_ZN11Screen2ViewC1Ev+0x174>
 8004242:	f7fc fa7a 	bl	800073a <_ZN12TetrisEngineC1Ev>
 8004246:	f504 67bd 	add.w	r7, r4, #1512	@ 0x5e8
 800424a:	9503      	str	r5, [sp, #12]
 800424c:	f04f 0900 	mov.w	r9, #0
 8004250:	463e      	mov	r6, r7
 8004252:	4630      	mov	r0, r6
 8004254:	f7ff fe22 	bl	8003e9c <_ZN8touchgfx3BoxC1Ev>
 8004258:	3634      	adds	r6, #52	@ 0x34
 800425a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800425e:	f846 8c34 	str.w	r8, [r6, #-52]
 8004262:	f846 9c08 	str.w	r9, [r6, #-8]
 8004266:	f826 9c04 	strh.w	r9, [r6, #-4]
 800426a:	429e      	cmp	r6, r3
 800426c:	d1f1      	bne.n	8004252 <_ZN11Screen2ViewC1Ev+0x2e>
 800426e:	42ae      	cmp	r6, r5
 8004270:	4637      	mov	r7, r6
 8004272:	d1ed      	bne.n	8004250 <_ZN11Screen2ViewC1Ev+0x2c>
 8004274:	f504 5647 	add.w	r6, r4, #12736	@ 0x31c0
 8004278:	3608      	adds	r6, #8
 800427a:	2700      	movs	r7, #0
 800427c:	f105 09d0 	add.w	r9, r5, #208	@ 0xd0
 8004280:	4628      	mov	r0, r5
 8004282:	f7ff fe0b 	bl	8003e9c <_ZN8touchgfx3BoxC1Ev>
 8004286:	3534      	adds	r5, #52	@ 0x34
 8004288:	f845 8c34 	str.w	r8, [r5, #-52]
 800428c:	f845 7c08 	str.w	r7, [r5, #-8]
 8004290:	f825 7c04 	strh.w	r7, [r5, #-4]
 8004294:	454d      	cmp	r5, r9
 8004296:	d1f3      	bne.n	8004280 <_ZN11Screen2ViewC1Ev+0x5c>
 8004298:	42b5      	cmp	r5, r6
 800429a:	d1ef      	bne.n	800427c <_ZN11Screen2ViewC1Ev+0x58>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 800429c:	2700      	movs	r7, #0
 800429e:	f44f 7a02 	mov.w	sl, #520	@ 0x208
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 80042a2:	f04f 4b7f 	mov.w	fp, #4278190080	@ 0xff000000
            colBoxes[y][x].setPosition(px, py, 16, 16);
 80042a6:	013a      	lsls	r2, r7, #4
 80042a8:	b212      	sxth	r2, r2
 80042aa:	fb0a 4607 	mla	r6, sl, r7, r4
 80042ae:	2500      	movs	r5, #0
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 80042b0:	f04f 0901 	mov.w	r9, #1
 80042b4:	2310      	movs	r3, #16
 80042b6:	f506 60bd 	add.w	r0, r6, #1512	@ 0x5e8
        borderColor = colorBorder;
 80042ba:	f8c6 b614 	str.w	fp, [r6, #1556]	@ 0x614
        borderSize = size;
 80042be:	f8a6 9618 	strh.w	r9, [r6, #1560]	@ 0x618
 80042c2:	b229      	sxth	r1, r5
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	9205      	str	r2, [sp, #20]
 80042c8:	9004      	str	r0, [sp, #16]
 80042ca:	f7fe fc69 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
 80042ce:	9804      	ldr	r0, [sp, #16]
 80042d0:	f886 960d 	strb.w	r9, [r6, #1549]	@ 0x60d
 80042d4:	f104 0804 	add.w	r8, r4, #4
        for (int x = 0; x < GRID_WIDTH; x++) {
 80042d8:	3510      	adds	r5, #16
 80042da:	4601      	mov	r1, r0
 80042dc:	b2ad      	uxth	r5, r5
 80042de:	4640      	mov	r0, r8
 80042e0:	f005 f9a6 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80042e4:	2da0      	cmp	r5, #160	@ 0xa0
 80042e6:	9a05      	ldr	r2, [sp, #20]
 80042e8:	f106 0634 	add.w	r6, r6, #52	@ 0x34
 80042ec:	d1e2      	bne.n	80042b4 <_ZN11Screen2ViewC1Ev+0x90>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 80042ee:	3701      	adds	r7, #1
 80042f0:	2f14      	cmp	r7, #20
 80042f2:	d1d8      	bne.n	80042a6 <_ZN11Screen2ViewC1Ev+0x82>
 80042f4:	2700      	movs	r7, #0
 80042f6:	f04f 095a 	mov.w	r9, #90	@ 0x5a
 80042fa:	46ba      	mov	sl, r7
 80042fc:	f04f 0b01 	mov.w	fp, #1
		for (int x = 0; x < 4; x++) {
 8004300:	9b03      	ldr	r3, [sp, #12]
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 8004302:	fa0f f289 	sxth.w	r2, r9
 8004306:	19dd      	adds	r5, r3, r7
 8004308:	26c8      	movs	r6, #200	@ 0xc8
 800430a:	2308      	movs	r3, #8
 800430c:	f885 a026 	strb.w	sl, [r5, #38]	@ 0x26
 8004310:	f8a5 b030 	strh.w	fp, [r5, #48]	@ 0x30
 8004314:	b231      	sxth	r1, r6
 8004316:	4628      	mov	r0, r5
 8004318:	9300      	str	r3, [sp, #0]
		for (int x = 0; x < 4; x++) {
 800431a:	3608      	adds	r6, #8
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 800431c:	9204      	str	r2, [sp, #16]
		for (int x = 0; x < 4; x++) {
 800431e:	b2b6      	uxth	r6, r6
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 8004320:	f7fe fc3e 	bl	8002ba0 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004324:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8004328:	4629      	mov	r1, r5
 800432a:	4640      	mov	r0, r8
 800432c:	f005 f980 	bl	8009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>
		for (int x = 0; x < 4; x++) {
 8004330:	2ee8      	cmp	r6, #232	@ 0xe8
 8004332:	9a04      	ldr	r2, [sp, #16]
 8004334:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8004338:	d1e7      	bne.n	800430a <_ZN11Screen2ViewC1Ev+0xe6>
	for (int y = 0; y < 4; y++) {
 800433a:	37d0      	adds	r7, #208	@ 0xd0
 800433c:	f109 0908 	add.w	r9, r9, #8
 8004340:	f5b7 7f50 	cmp.w	r7, #832	@ 0x340
 8004344:	fa1f f989 	uxth.w	r9, r9
 8004348:	d1da      	bne.n	8004300 <_ZN11Screen2ViewC1Ev+0xdc>
	currScreen = 2;
 800434a:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <_ZN11Screen2ViewC1Ev+0x16c>)
 800434c:	f884 a0bd 	strb.w	sl, [r4, #189]	@ 0xbd
 8004350:	2102      	movs	r1, #2
 8004352:	7019      	strb	r1, [r3, #0]
	musicGameOver = false;
 8004354:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
    DF_SendCommand(0x0F, 0x02, 0x01);
 8004358:	2201      	movs	r2, #1
	musicGameOver = false;
 800435a:	f883 a1cc 	strb.w	sl, [r3, #460]	@ 0x1cc
    DF_SendCommand(0x0F, 0x02, 0x01);
 800435e:	200f      	movs	r0, #15
 8004360:	f7fc fd12 	bl	8000d88 <DF_SendCommand>
    while(osMessageQueueGetCount(movingQueueHandle) > 0){
 8004364:	4d0b      	ldr	r5, [pc, #44]	@ (8004394 <_ZN11Screen2ViewC1Ev+0x170>)
    	char res = 'a';
 8004366:	2661      	movs	r6, #97	@ 0x61
    while(osMessageQueueGetCount(movingQueueHandle) > 0){
 8004368:	6828      	ldr	r0, [r5, #0]
 800436a:	f003 f867 	bl	800743c <osMessageQueueGetCount>
 800436e:	b918      	cbnz	r0, 8004378 <_ZN11Screen2ViewC1Ev+0x154>
}
 8004370:	4620      	mov	r0, r4
 8004372:	b009      	add	sp, #36	@ 0x24
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 8004378:	6828      	ldr	r0, [r5, #0]
    	char res = 'a';
 800437a:	f88d 601f 	strb.w	r6, [sp, #31]
    	osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 800437e:	230a      	movs	r3, #10
 8004380:	2200      	movs	r2, #0
 8004382:	f10d 011f 	add.w	r1, sp, #31
 8004386:	f003 f829 	bl	80073dc <osMessageQueueGet>
 800438a:	e7ed      	b.n	8004368 <_ZN11Screen2ViewC1Ev+0x144>
 800438c:	08015950 	.word	0x08015950
 8004390:	2000000c 	.word	0x2000000c
 8004394:	20000118 	.word	0x20000118
 8004398:	08015c08 	.word	0x08015c08

0800439c <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 800439c:	20f0      	movs	r0, #240	@ 0xf0
 800439e:	4770      	bx	lr

080043a0 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 80043a0:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80043a4:	4770      	bx	lr

080043a6 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 80043a6:	2029      	movs	r0, #41	@ 0x29
 80043a8:	f7fc bc60 	b.w	8000c6c <LCD_IO_WriteReg>

080043ac <ili9341_DisplayOff>:
 80043ac:	2028      	movs	r0, #40	@ 0x28
 80043ae:	f7fc bc5d 	b.w	8000c6c <LCD_IO_WriteReg>

080043b2 <ili9341_Init>:
{
 80043b2:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80043b4:	f7fc fc2e 	bl	8000c14 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 80043b8:	20ca      	movs	r0, #202	@ 0xca
 80043ba:	f7fc fc57 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043be:	20c3      	movs	r0, #195	@ 0xc3
 80043c0:	f7fc fc38 	bl	8000c34 <LCD_IO_WriteData>
 80043c4:	2008      	movs	r0, #8
 80043c6:	f7fc fc35 	bl	8000c34 <LCD_IO_WriteData>
 80043ca:	2050      	movs	r0, #80	@ 0x50
 80043cc:	f7fc fc32 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80043d0:	20cf      	movs	r0, #207	@ 0xcf
 80043d2:	f7fc fc4b 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7fc fc2c 	bl	8000c34 <LCD_IO_WriteData>
 80043dc:	20c1      	movs	r0, #193	@ 0xc1
 80043de:	f7fc fc29 	bl	8000c34 <LCD_IO_WriteData>
 80043e2:	2030      	movs	r0, #48	@ 0x30
 80043e4:	f7fc fc26 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80043e8:	20ed      	movs	r0, #237	@ 0xed
 80043ea:	f7fc fc3f 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043ee:	2064      	movs	r0, #100	@ 0x64
 80043f0:	f7fc fc20 	bl	8000c34 <LCD_IO_WriteData>
 80043f4:	2003      	movs	r0, #3
 80043f6:	f7fc fc1d 	bl	8000c34 <LCD_IO_WriteData>
 80043fa:	2012      	movs	r0, #18
 80043fc:	f7fc fc1a 	bl	8000c34 <LCD_IO_WriteData>
 8004400:	2081      	movs	r0, #129	@ 0x81
 8004402:	f7fc fc17 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004406:	20e8      	movs	r0, #232	@ 0xe8
 8004408:	f7fc fc30 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800440c:	2085      	movs	r0, #133	@ 0x85
 800440e:	f7fc fc11 	bl	8000c34 <LCD_IO_WriteData>
 8004412:	2000      	movs	r0, #0
 8004414:	f7fc fc0e 	bl	8000c34 <LCD_IO_WriteData>
 8004418:	2078      	movs	r0, #120	@ 0x78
 800441a:	f7fc fc0b 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800441e:	20cb      	movs	r0, #203	@ 0xcb
 8004420:	f7fc fc24 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004424:	2039      	movs	r0, #57	@ 0x39
 8004426:	f7fc fc05 	bl	8000c34 <LCD_IO_WriteData>
 800442a:	202c      	movs	r0, #44	@ 0x2c
 800442c:	f7fc fc02 	bl	8000c34 <LCD_IO_WriteData>
 8004430:	2000      	movs	r0, #0
 8004432:	f7fc fbff 	bl	8000c34 <LCD_IO_WriteData>
 8004436:	2034      	movs	r0, #52	@ 0x34
 8004438:	f7fc fbfc 	bl	8000c34 <LCD_IO_WriteData>
 800443c:	2002      	movs	r0, #2
 800443e:	f7fc fbf9 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004442:	20f7      	movs	r0, #247	@ 0xf7
 8004444:	f7fc fc12 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004448:	2020      	movs	r0, #32
 800444a:	f7fc fbf3 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800444e:	20ea      	movs	r0, #234	@ 0xea
 8004450:	f7fc fc0c 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004454:	2000      	movs	r0, #0
 8004456:	f7fc fbed 	bl	8000c34 <LCD_IO_WriteData>
 800445a:	2000      	movs	r0, #0
 800445c:	f7fc fbea 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004460:	20b1      	movs	r0, #177	@ 0xb1
 8004462:	f7fc fc03 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004466:	2000      	movs	r0, #0
 8004468:	f7fc fbe4 	bl	8000c34 <LCD_IO_WriteData>
 800446c:	201b      	movs	r0, #27
 800446e:	f7fc fbe1 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004472:	20b6      	movs	r0, #182	@ 0xb6
 8004474:	f7fc fbfa 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004478:	200a      	movs	r0, #10
 800447a:	f7fc fbdb 	bl	8000c34 <LCD_IO_WriteData>
 800447e:	20a2      	movs	r0, #162	@ 0xa2
 8004480:	f7fc fbd8 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004484:	20c0      	movs	r0, #192	@ 0xc0
 8004486:	f7fc fbf1 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800448a:	2010      	movs	r0, #16
 800448c:	f7fc fbd2 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004490:	20c1      	movs	r0, #193	@ 0xc1
 8004492:	f7fc fbeb 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004496:	2010      	movs	r0, #16
 8004498:	f7fc fbcc 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800449c:	20c5      	movs	r0, #197	@ 0xc5
 800449e:	f7fc fbe5 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044a2:	2045      	movs	r0, #69	@ 0x45
 80044a4:	f7fc fbc6 	bl	8000c34 <LCD_IO_WriteData>
 80044a8:	2015      	movs	r0, #21
 80044aa:	f7fc fbc3 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044ae:	20c7      	movs	r0, #199	@ 0xc7
 80044b0:	f7fc fbdc 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044b4:	2090      	movs	r0, #144	@ 0x90
 80044b6:	f7fc fbbd 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044ba:	2036      	movs	r0, #54	@ 0x36
 80044bc:	f7fc fbd6 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044c0:	20c8      	movs	r0, #200	@ 0xc8
 80044c2:	f7fc fbb7 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044c6:	20f2      	movs	r0, #242	@ 0xf2
 80044c8:	f7fc fbd0 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044cc:	2000      	movs	r0, #0
 80044ce:	f7fc fbb1 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044d2:	20b0      	movs	r0, #176	@ 0xb0
 80044d4:	f7fc fbca 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044d8:	20c2      	movs	r0, #194	@ 0xc2
 80044da:	f7fc fbab 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044de:	20b6      	movs	r0, #182	@ 0xb6
 80044e0:	f7fc fbc4 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044e4:	200a      	movs	r0, #10
 80044e6:	f7fc fba5 	bl	8000c34 <LCD_IO_WriteData>
 80044ea:	20a7      	movs	r0, #167	@ 0xa7
 80044ec:	f7fc fba2 	bl	8000c34 <LCD_IO_WriteData>
 80044f0:	2027      	movs	r0, #39	@ 0x27
 80044f2:	f7fc fb9f 	bl	8000c34 <LCD_IO_WriteData>
 80044f6:	2004      	movs	r0, #4
 80044f8:	f7fc fb9c 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044fc:	202a      	movs	r0, #42	@ 0x2a
 80044fe:	f7fc fbb5 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004502:	2000      	movs	r0, #0
 8004504:	f7fc fb96 	bl	8000c34 <LCD_IO_WriteData>
 8004508:	2000      	movs	r0, #0
 800450a:	f7fc fb93 	bl	8000c34 <LCD_IO_WriteData>
 800450e:	2000      	movs	r0, #0
 8004510:	f7fc fb90 	bl	8000c34 <LCD_IO_WriteData>
 8004514:	20ef      	movs	r0, #239	@ 0xef
 8004516:	f7fc fb8d 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800451a:	202b      	movs	r0, #43	@ 0x2b
 800451c:	f7fc fba6 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004520:	2000      	movs	r0, #0
 8004522:	f7fc fb87 	bl	8000c34 <LCD_IO_WriteData>
 8004526:	2000      	movs	r0, #0
 8004528:	f7fc fb84 	bl	8000c34 <LCD_IO_WriteData>
 800452c:	2001      	movs	r0, #1
 800452e:	f7fc fb81 	bl	8000c34 <LCD_IO_WriteData>
 8004532:	203f      	movs	r0, #63	@ 0x3f
 8004534:	f7fc fb7e 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004538:	20f6      	movs	r0, #246	@ 0xf6
 800453a:	f7fc fb97 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800453e:	2001      	movs	r0, #1
 8004540:	f7fc fb78 	bl	8000c34 <LCD_IO_WriteData>
 8004544:	2000      	movs	r0, #0
 8004546:	f7fc fb75 	bl	8000c34 <LCD_IO_WriteData>
 800454a:	2006      	movs	r0, #6
 800454c:	f7fc fb72 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004550:	202c      	movs	r0, #44	@ 0x2c
 8004552:	f7fc fb8b 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_Delay(200);
 8004556:	20c8      	movs	r0, #200	@ 0xc8
 8004558:	f7fc fbd6 	bl	8000d08 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800455c:	2026      	movs	r0, #38	@ 0x26
 800455e:	f7fc fb85 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004562:	2001      	movs	r0, #1
 8004564:	f7fc fb66 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004568:	20e0      	movs	r0, #224	@ 0xe0
 800456a:	f7fc fb7f 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800456e:	200f      	movs	r0, #15
 8004570:	f7fc fb60 	bl	8000c34 <LCD_IO_WriteData>
 8004574:	2029      	movs	r0, #41	@ 0x29
 8004576:	f7fc fb5d 	bl	8000c34 <LCD_IO_WriteData>
 800457a:	2024      	movs	r0, #36	@ 0x24
 800457c:	f7fc fb5a 	bl	8000c34 <LCD_IO_WriteData>
 8004580:	200c      	movs	r0, #12
 8004582:	f7fc fb57 	bl	8000c34 <LCD_IO_WriteData>
 8004586:	200e      	movs	r0, #14
 8004588:	f7fc fb54 	bl	8000c34 <LCD_IO_WriteData>
 800458c:	2009      	movs	r0, #9
 800458e:	f7fc fb51 	bl	8000c34 <LCD_IO_WriteData>
 8004592:	204e      	movs	r0, #78	@ 0x4e
 8004594:	f7fc fb4e 	bl	8000c34 <LCD_IO_WriteData>
 8004598:	2078      	movs	r0, #120	@ 0x78
 800459a:	f7fc fb4b 	bl	8000c34 <LCD_IO_WriteData>
 800459e:	203c      	movs	r0, #60	@ 0x3c
 80045a0:	f7fc fb48 	bl	8000c34 <LCD_IO_WriteData>
 80045a4:	2009      	movs	r0, #9
 80045a6:	f7fc fb45 	bl	8000c34 <LCD_IO_WriteData>
 80045aa:	2013      	movs	r0, #19
 80045ac:	f7fc fb42 	bl	8000c34 <LCD_IO_WriteData>
 80045b0:	2005      	movs	r0, #5
 80045b2:	f7fc fb3f 	bl	8000c34 <LCD_IO_WriteData>
 80045b6:	2017      	movs	r0, #23
 80045b8:	f7fc fb3c 	bl	8000c34 <LCD_IO_WriteData>
 80045bc:	2011      	movs	r0, #17
 80045be:	f7fc fb39 	bl	8000c34 <LCD_IO_WriteData>
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7fc fb36 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80045c8:	20e1      	movs	r0, #225	@ 0xe1
 80045ca:	f7fc fb4f 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80045ce:	2000      	movs	r0, #0
 80045d0:	f7fc fb30 	bl	8000c34 <LCD_IO_WriteData>
 80045d4:	2016      	movs	r0, #22
 80045d6:	f7fc fb2d 	bl	8000c34 <LCD_IO_WriteData>
 80045da:	201b      	movs	r0, #27
 80045dc:	f7fc fb2a 	bl	8000c34 <LCD_IO_WriteData>
 80045e0:	2004      	movs	r0, #4
 80045e2:	f7fc fb27 	bl	8000c34 <LCD_IO_WriteData>
 80045e6:	2011      	movs	r0, #17
 80045e8:	f7fc fb24 	bl	8000c34 <LCD_IO_WriteData>
 80045ec:	2007      	movs	r0, #7
 80045ee:	f7fc fb21 	bl	8000c34 <LCD_IO_WriteData>
 80045f2:	2031      	movs	r0, #49	@ 0x31
 80045f4:	f7fc fb1e 	bl	8000c34 <LCD_IO_WriteData>
 80045f8:	2033      	movs	r0, #51	@ 0x33
 80045fa:	f7fc fb1b 	bl	8000c34 <LCD_IO_WriteData>
 80045fe:	2042      	movs	r0, #66	@ 0x42
 8004600:	f7fc fb18 	bl	8000c34 <LCD_IO_WriteData>
 8004604:	2005      	movs	r0, #5
 8004606:	f7fc fb15 	bl	8000c34 <LCD_IO_WriteData>
 800460a:	200c      	movs	r0, #12
 800460c:	f7fc fb12 	bl	8000c34 <LCD_IO_WriteData>
 8004610:	200a      	movs	r0, #10
 8004612:	f7fc fb0f 	bl	8000c34 <LCD_IO_WriteData>
 8004616:	2028      	movs	r0, #40	@ 0x28
 8004618:	f7fc fb0c 	bl	8000c34 <LCD_IO_WriteData>
 800461c:	202f      	movs	r0, #47	@ 0x2f
 800461e:	f7fc fb09 	bl	8000c34 <LCD_IO_WriteData>
 8004622:	200f      	movs	r0, #15
 8004624:	f7fc fb06 	bl	8000c34 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004628:	2011      	movs	r0, #17
 800462a:	f7fc fb1f 	bl	8000c6c <LCD_IO_WriteReg>
  LCD_Delay(200);
 800462e:	20c8      	movs	r0, #200	@ 0xc8
 8004630:	f7fc fb6a 	bl	8000d08 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8004634:	2029      	movs	r0, #41	@ 0x29
 8004636:	f7fc fb19 	bl	8000c6c <LCD_IO_WriteReg>
}
 800463a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 800463e:	202c      	movs	r0, #44	@ 0x2c
 8004640:	f7fc bb14 	b.w	8000c6c <LCD_IO_WriteReg>

08004644 <ili9341_ReadID>:
{
 8004644:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8004646:	f7fc fae5 	bl	8000c14 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800464a:	2103      	movs	r1, #3
 800464c:	20d3      	movs	r0, #211	@ 0xd3
 800464e:	f7fc fb29 	bl	8000ca4 <LCD_IO_ReadData>
}
 8004652:	b280      	uxth	r0, r0
 8004654:	bd08      	pop	{r3, pc}

08004656 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8004656:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8004658:	b2c4      	uxtb	r4, r0
 800465a:	2202      	movs	r2, #2
 800465c:	2103      	movs	r1, #3
 800465e:	4620      	mov	r0, r4
 8004660:	f7fc fa8e 	bl	8000b80 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8004664:	200a      	movs	r0, #10
 8004666:	f7fc fad3 	bl	8000c10 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800466a:	4620      	mov	r0, r4
 800466c:	2200      	movs	r2, #0
 800466e:	2103      	movs	r1, #3
 8004670:	f7fc fa86 	bl	8000b80 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 8004674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8004678:	2002      	movs	r0, #2
 800467a:	f7fc bac9 	b.w	8000c10 <IOE_Delay>

0800467e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800467e:	b538      	push	{r3, r4, r5, lr}
 8004680:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004682:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8004684:	f7fc fa7a 	bl	8000b7c <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004688:	2100      	movs	r1, #0
 800468a:	4620      	mov	r0, r4
 800468c:	f7fc fa90 	bl	8000bb0 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004690:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004692:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004694:	4620      	mov	r0, r4
 8004696:	f7fc fa8b 	bl	8000bb0 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800469a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 800469e:	b280      	uxth	r0, r0
 80046a0:	bd38      	pop	{r3, r4, r5, pc}

080046a2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80046a2:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80046a4:	b2c4      	uxtb	r4, r0
 80046a6:	2140      	movs	r1, #64	@ 0x40
 80046a8:	4620      	mov	r0, r4
 80046aa:	f7fc fa81 	bl	8000bb0 <IOE_Read>
  
  if(state > 0)
 80046ae:	0603      	lsls	r3, r0, #24
 80046b0:	d507      	bpl.n	80046c2 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80046b2:	214c      	movs	r1, #76	@ 0x4c
 80046b4:	4620      	mov	r0, r4
 80046b6:	f7fc fa7b 	bl	8000bb0 <IOE_Read>
 80046ba:	3800      	subs	r0, #0
 80046bc:	bf18      	it	ne
 80046be:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 80046c0:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80046c2:	2201      	movs	r2, #1
 80046c4:	214b      	movs	r1, #75	@ 0x4b
 80046c6:	4620      	mov	r0, r4
 80046c8:	f7fc fa5a 	bl	8000b80 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80046cc:	4620      	mov	r0, r4
 80046ce:	2200      	movs	r2, #0
 80046d0:	214b      	movs	r1, #75	@ 0x4b
 80046d2:	f7fc fa55 	bl	8000b80 <IOE_Write>
  uint8_t ret = 0;
 80046d6:	2000      	movs	r0, #0
 80046d8:	e7f2      	b.n	80046c0 <stmpe811_TS_DetectTouch+0x1e>

080046da <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80046da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80046dc:	2304      	movs	r3, #4
 80046de:	b2c4      	uxtb	r4, r0
{
 80046e0:	460e      	mov	r6, r1
 80046e2:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80046e4:	21d7      	movs	r1, #215	@ 0xd7
 80046e6:	eb0d 0203 	add.w	r2, sp, r3
 80046ea:	4620      	mov	r0, r4
 80046ec:	f7fc fa7a 	bl	8000be4 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80046f0:	9b01      	ldr	r3, [sp, #4]
 80046f2:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80046f4:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80046f6:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80046fa:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80046fc:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80046fe:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004700:	2201      	movs	r2, #1
 8004702:	214b      	movs	r1, #75	@ 0x4b
 8004704:	f7fc fa3c 	bl	8000b80 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004708:	2200      	movs	r2, #0
 800470a:	214b      	movs	r1, #75	@ 0x4b
 800470c:	4620      	mov	r0, r4
 800470e:	f7fc fa37 	bl	8000b80 <IOE_Write>
}
 8004712:	b002      	add	sp, #8
 8004714:	bd70      	pop	{r4, r5, r6, pc}
	...

08004718 <stmpe811_Init>:
{
 8004718:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 800471a:	4a0a      	ldr	r2, [pc, #40]	@ (8004744 <stmpe811_Init+0x2c>)
 800471c:	7813      	ldrb	r3, [r2, #0]
 800471e:	4298      	cmp	r0, r3
{
 8004720:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8004722:	d00d      	beq.n	8004740 <stmpe811_Init+0x28>
 8004724:	7851      	ldrb	r1, [r2, #1]
 8004726:	4288      	cmp	r0, r1
 8004728:	d00a      	beq.n	8004740 <stmpe811_Init+0x28>
 800472a:	b10b      	cbz	r3, 8004730 <stmpe811_Init+0x18>
 800472c:	b941      	cbnz	r1, 8004740 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800472e:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 8004730:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8004732:	f7fc fa23 	bl	8000b7c <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8004736:	4620      	mov	r0, r4
}
 8004738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 800473c:	f7ff bf8b 	b.w	8004656 <stmpe811_Reset>
}
 8004740:	bd10      	pop	{r4, pc}
 8004742:	bf00      	nop
 8004744:	200046d4 	.word	0x200046d4

08004748 <stmpe811_EnableGlobalIT>:
{
 8004748:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800474a:	b2c4      	uxtb	r4, r0
 800474c:	2109      	movs	r1, #9
 800474e:	4620      	mov	r0, r4
 8004750:	f7fc fa2e 	bl	8000bb0 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8004754:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	4620      	mov	r0, r4
 800475c:	2109      	movs	r1, #9
}
 800475e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004762:	f7fc ba0d 	b.w	8000b80 <IOE_Write>

08004766 <stmpe811_DisableGlobalIT>:
{
 8004766:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004768:	b2c4      	uxtb	r4, r0
 800476a:	2109      	movs	r1, #9
 800476c:	4620      	mov	r0, r4
 800476e:	f7fc fa1f 	bl	8000bb0 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004772:	2109      	movs	r1, #9
 8004774:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8004778:	4620      	mov	r0, r4
}
 800477a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800477e:	f7fc b9ff 	b.w	8000b80 <IOE_Write>

08004782 <stmpe811_EnableITSource>:
{
 8004782:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004784:	b2c4      	uxtb	r4, r0
{
 8004786:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004788:	4620      	mov	r0, r4
 800478a:	210a      	movs	r1, #10
 800478c:	f7fc fa10 	bl	8000bb0 <IOE_Read>
  tmp |= Source; 
 8004790:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	4620      	mov	r0, r4
 8004798:	210a      	movs	r1, #10
}
 800479a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800479e:	f7fc b9ef 	b.w	8000b80 <IOE_Write>

080047a2 <stmpe811_TS_EnableIT>:
{
 80047a2:	b510      	push	{r4, lr}
 80047a4:	4604      	mov	r4, r0
  IOE_ITConfig();
 80047a6:	f7fc f9ea 	bl	8000b7e <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80047aa:	4620      	mov	r0, r4
 80047ac:	211f      	movs	r1, #31
 80047ae:	f7ff ffe8 	bl	8004782 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 80047b2:	4620      	mov	r0, r4
}
 80047b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 80047b8:	f7ff bfc6 	b.w	8004748 <stmpe811_EnableGlobalIT>

080047bc <stmpe811_DisableITSource>:
{
 80047bc:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80047be:	b2c4      	uxtb	r4, r0
{
 80047c0:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80047c2:	4620      	mov	r0, r4
 80047c4:	210a      	movs	r1, #10
 80047c6:	f7fc f9f3 	bl	8000bb0 <IOE_Read>
  tmp &= ~Source; 
 80047ca:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	4620      	mov	r0, r4
 80047d2:	210a      	movs	r1, #10
}
 80047d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80047d8:	f7fc b9d2 	b.w	8000b80 <IOE_Write>

080047dc <stmpe811_TS_DisableIT>:
{
 80047dc:	b510      	push	{r4, lr}
 80047de:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 80047e0:	f7ff ffc1 	bl	8004766 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80047e4:	4620      	mov	r0, r4
 80047e6:	211f      	movs	r1, #31
}
 80047e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80047ec:	f7ff bfe6 	b.w	80047bc <stmpe811_DisableITSource>

080047f0 <stmpe811_ReadGITStatus>:
{
 80047f0:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80047f2:	b2c0      	uxtb	r0, r0
{
 80047f4:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80047f6:	210b      	movs	r1, #11
 80047f8:	f7fc f9da 	bl	8000bb0 <IOE_Read>
}
 80047fc:	4020      	ands	r0, r4
 80047fe:	bd10      	pop	{r4, pc}

08004800 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8004800:	211f      	movs	r1, #31
 8004802:	f7ff bff5 	b.w	80047f0 <stmpe811_ReadGITStatus>

08004806 <stmpe811_ClearGlobalIT>:
{
 8004806:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8004808:	b2c0      	uxtb	r0, r0
 800480a:	210b      	movs	r1, #11
 800480c:	f7fc b9b8 	b.w	8000b80 <IOE_Write>

08004810 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8004810:	211f      	movs	r1, #31
 8004812:	f7ff bff8 	b.w	8004806 <stmpe811_ClearGlobalIT>

08004816 <stmpe811_IO_EnableAF>:
{
 8004816:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004818:	b2c4      	uxtb	r4, r0
{
 800481a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800481c:	4620      	mov	r0, r4
 800481e:	2117      	movs	r1, #23
 8004820:	f7fc f9c6 	bl	8000bb0 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8004824:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	4620      	mov	r0, r4
 800482c:	2117      	movs	r1, #23
}
 800482e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004832:	f7fc b9a5 	b.w	8000b80 <IOE_Write>

08004836 <stmpe811_TS_Start>:
{
 8004836:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004838:	b2c4      	uxtb	r4, r0
{
 800483a:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800483c:	2104      	movs	r1, #4
 800483e:	4620      	mov	r0, r4
 8004840:	f7fc f9b6 	bl	8000bb0 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004844:	2104      	movs	r1, #4
 8004846:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800484a:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800484c:	4620      	mov	r0, r4
 800484e:	f7fc f997 	bl	8000b80 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8004852:	4630      	mov	r0, r6
 8004854:	21f0      	movs	r1, #240	@ 0xf0
 8004856:	f7ff ffde 	bl	8004816 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800485a:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 800485e:	4620      	mov	r0, r4
 8004860:	2104      	movs	r1, #4
 8004862:	f7fc f98d 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8004866:	2249      	movs	r2, #73	@ 0x49
 8004868:	2120      	movs	r1, #32
 800486a:	4620      	mov	r0, r4
 800486c:	f7fc f988 	bl	8000b80 <IOE_Write>
  IOE_Delay(2); 
 8004870:	2002      	movs	r0, #2
 8004872:	f7fc f9cd 	bl	8000c10 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8004876:	4620      	mov	r0, r4
 8004878:	2201      	movs	r2, #1
 800487a:	2121      	movs	r1, #33	@ 0x21
 800487c:	f7fc f980 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8004880:	4620      	mov	r0, r4
 8004882:	229a      	movs	r2, #154	@ 0x9a
 8004884:	2141      	movs	r1, #65	@ 0x41
 8004886:	f7fc f97b 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800488a:	4620      	mov	r0, r4
 800488c:	2201      	movs	r2, #1
 800488e:	214a      	movs	r1, #74	@ 0x4a
 8004890:	f7fc f976 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004894:	4620      	mov	r0, r4
 8004896:	2201      	movs	r2, #1
 8004898:	214b      	movs	r1, #75	@ 0x4b
 800489a:	f7fc f971 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800489e:	4620      	mov	r0, r4
 80048a0:	2200      	movs	r2, #0
 80048a2:	214b      	movs	r1, #75	@ 0x4b
 80048a4:	f7fc f96c 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80048a8:	4620      	mov	r0, r4
 80048aa:	2201      	movs	r2, #1
 80048ac:	2156      	movs	r1, #86	@ 0x56
 80048ae:	f7fc f967 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80048b2:	4620      	mov	r0, r4
 80048b4:	2201      	movs	r2, #1
 80048b6:	2158      	movs	r1, #88	@ 0x58
 80048b8:	f7fc f962 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80048bc:	4620      	mov	r0, r4
 80048be:	2201      	movs	r2, #1
 80048c0:	2140      	movs	r1, #64	@ 0x40
 80048c2:	f7fc f95d 	bl	8000b80 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80048c6:	4620      	mov	r0, r4
 80048c8:	22ff      	movs	r2, #255	@ 0xff
 80048ca:	210b      	movs	r1, #11
 80048cc:	f7fc f958 	bl	8000b80 <IOE_Write>
}
 80048d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 80048d4:	2002      	movs	r0, #2
 80048d6:	f7fc b99b 	b.w	8000c10 <IOE_Delay>
	...

080048dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <SystemInit+0x18>)
 80048de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048e2:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80048e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80048ee:	609a      	str	r2, [r3, #8]
#endif
}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	e000ed00 	.word	0xe000ed00

080048f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_Init+0x30>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004902:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800490a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004912:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004914:	2003      	movs	r0, #3
 8004916:	f000 f82f 	bl	8004978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800491a:	2000      	movs	r0, #0
 800491c:	f7fc ff9e 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004920:	f7fc fd1c 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004924:	2000      	movs	r0, #0
 8004926:	bd08      	pop	{r3, pc}
 8004928:	40023c00 	.word	0x40023c00

0800492c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800492c:	4a03      	ldr	r2, [pc, #12]	@ (800493c <HAL_IncTick+0x10>)
 800492e:	4b04      	ldr	r3, [pc, #16]	@ (8004940 <HAL_IncTick+0x14>)
 8004930:	6811      	ldr	r1, [r2, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	440b      	add	r3, r1
 8004936:	6013      	str	r3, [r2, #0]
}
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	200046d8 	.word	0x200046d8
 8004940:	2000007c 	.word	0x2000007c

08004944 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004944:	4b01      	ldr	r3, [pc, #4]	@ (800494c <HAL_GetTick+0x8>)
 8004946:	6818      	ldr	r0, [r3, #0]
}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	200046d8 	.word	0x200046d8

08004950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004954:	f7ff fff6 	bl	8004944 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004958:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800495a:	bf1c      	itt	ne
 800495c:	4b05      	ldrne	r3, [pc, #20]	@ (8004974 <HAL_Delay+0x24>)
 800495e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004960:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004962:	bf18      	it	ne
 8004964:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004966:	f7ff ffed 	bl	8004944 <HAL_GetTick>
 800496a:	1b43      	subs	r3, r0, r5
 800496c:	42a3      	cmp	r3, r4
 800496e:	d3fa      	bcc.n	8004966 <HAL_Delay+0x16>
  {
  }
}
 8004970:	bd38      	pop	{r3, r4, r5, pc}
 8004972:	bf00      	nop
 8004974:	2000007c 	.word	0x2000007c

08004978 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004978:	4907      	ldr	r1, [pc, #28]	@ (8004998 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800497a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004980:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004982:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004984:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004988:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800498a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800498c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004994:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800499c:	4b16      	ldr	r3, [pc, #88]	@ (80049f8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800499e:	b530      	push	{r4, r5, lr}
 80049a0:	68dc      	ldr	r4, [r3, #12]
 80049a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	bf28      	it	cs
 80049b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b8:	bf8c      	ite	hi
 80049ba:	3c03      	subhi	r4, #3
 80049bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049be:	fa05 f303 	lsl.w	r3, r5, r3
 80049c2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049c6:	40a5      	lsls	r5, r4
 80049c8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049cc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80049ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	bfac      	ite	ge
 80049d6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049da:	4a08      	ldrlt	r2, [pc, #32]	@ (80049fc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e0:	bfb8      	it	lt
 80049e2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	bfaa      	itet	ge
 80049ea:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ee:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049f4:	bd30      	pop	{r4, r5, pc}
 80049f6:	bf00      	nop
 80049f8:	e000ed00 	.word	0xe000ed00
 80049fc:	e000ed14 	.word	0xe000ed14

08004a00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a00:	2800      	cmp	r0, #0
 8004a02:	db07      	blt.n	8004a14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a04:	0941      	lsrs	r1, r0, #5
 8004a06:	4a04      	ldr	r2, [pc, #16]	@ (8004a18 <HAL_NVIC_EnableIRQ+0x18>)
 8004a08:	f000 001f 	and.w	r0, r0, #31
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4083      	lsls	r3, r0
 8004a10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000e100 	.word	0xe000e100

08004a1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a1c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a1e:	4604      	mov	r4, r0
 8004a20:	b150      	cbz	r0, 8004a38 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a22:	7943      	ldrb	r3, [r0, #5]
 8004a24:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004a28:	b913      	cbnz	r3, 8004a30 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a2a:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a2c:	f7fc fcb6 	bl	800139c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a30:	2301      	movs	r3, #1
 8004a32:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8004a34:	2000      	movs	r0, #0
}
 8004a36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a38:	2001      	movs	r0, #1
 8004a3a:	e7fc      	b.n	8004a36 <HAL_CRC_Init+0x1a>

08004a3c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a3c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004a3e:	4604      	mov	r4, r0
 8004a40:	b320      	cbz	r0, 8004a8c <HAL_DMA2D_Init+0x50>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a42:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8004a46:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004a4a:	b91b      	cbnz	r3, 8004a54 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004a4c:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004a50:	f7fc fcbc 	bl	80013cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a54:	2302      	movs	r3, #2
 8004a56:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	6861      	ldr	r1, [r4, #4]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a6a:	68a1      	ldr	r1, [r4, #8]
 8004a6c:	f022 0207 	bic.w	r2, r2, #7
 8004a70:	430a      	orrs	r2, r1
 8004a72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a76:	68e1      	ldr	r1, [r4, #12]
 8004a78:	f36f 020d 	bfc	r2, #0, #14
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a80:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a82:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a84:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a86:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8004a8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	e7fc      	b.n	8004a8a <HAL_DMA2D_Init+0x4e>

08004a90 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8004a90:	4770      	bx	lr

08004a92 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8004a92:	4770      	bx	lr

08004a94 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a94:	6803      	ldr	r3, [r0, #0]
{
 8004a96:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a98:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004a9a:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a9c:	07f2      	lsls	r2, r6, #31
{
 8004a9e:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004aa0:	d514      	bpl.n	8004acc <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004aa2:	05e9      	lsls	r1, r5, #23
 8004aa4:	d512      	bpl.n	8004acc <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aac:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004aae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004aba:	2304      	movs	r3, #4
 8004abc:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004ac6:	6943      	ldr	r3, [r0, #20]
 8004ac8:	b103      	cbz	r3, 8004acc <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004aca:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004acc:	06b2      	lsls	r2, r6, #26
 8004ace:	d516      	bpl.n	8004afe <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004ad0:	04ab      	lsls	r3, r5, #18
 8004ad2:	d514      	bpl.n	8004afe <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004adc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004ade:	2220      	movs	r2, #32
 8004ae0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004ae2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004aea:	2304      	movs	r3, #4
 8004aec:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004af0:	2300      	movs	r3, #0
 8004af2:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004af6:	6963      	ldr	r3, [r4, #20]
 8004af8:	b10b      	cbz	r3, 8004afe <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004afa:	4620      	mov	r0, r4
 8004afc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004afe:	0730      	lsls	r0, r6, #28
 8004b00:	d516      	bpl.n	8004b30 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004b02:	0529      	lsls	r1, r5, #20
 8004b04:	d514      	bpl.n	8004b30 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004b10:	2208      	movs	r2, #8
 8004b12:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004b22:	2300      	movs	r3, #0
 8004b24:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004b28:	6963      	ldr	r3, [r4, #20]
 8004b2a:	b10b      	cbz	r3, 8004b30 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004b30:	0772      	lsls	r2, r6, #29
 8004b32:	d50b      	bpl.n	8004b4c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004b34:	056b      	lsls	r3, r5, #21
 8004b36:	d509      	bpl.n	8004b4c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b40:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004b42:	2204      	movs	r2, #4
 8004b44:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7ff ffa2 	bl	8004a90 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004b4c:	07b0      	lsls	r0, r6, #30
 8004b4e:	d514      	bpl.n	8004b7a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004b50:	05a9      	lsls	r1, r5, #22
 8004b52:	d512      	bpl.n	8004b7a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b5c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004b5e:	2202      	movs	r2, #2
 8004b60:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b62:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b64:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	b10b      	cbz	r3, 8004b7a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8004b76:	4620      	mov	r0, r4
 8004b78:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004b7a:	06f2      	lsls	r2, r6, #27
 8004b7c:	d513      	bpl.n	8004ba6 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004b7e:	04eb      	lsls	r3, r5, #19
 8004b80:	d511      	bpl.n	8004ba6 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b92:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f7ff ff76 	bl	8004a92 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}

08004ba8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004baa:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8004bae:	2a01      	cmp	r2, #1
{
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8004bb6:	d02b      	beq.n	8004c10 <HAL_DMA2D_ConfigLayer+0x68>
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004bbe:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bc2:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8004bc6:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8004bca:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8004bcc:	4f17      	ldr	r7, [pc, #92]	@ (8004c2c <HAL_DMA2D_ConfigLayer+0x84>)
 8004bce:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bd2:	3c09      	subs	r4, #9
 8004bd4:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004bd6:	bf9c      	itt	ls
 8004bd8:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8004bdc:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bde:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004be2:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004be4:	bf88      	it	hi
 8004be6:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004bea:	b991      	cbnz	r1, 8004c12 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004bec:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8004bee:	4039      	ands	r1, r7
 8004bf0:	4301      	orrs	r1, r0
 8004bf2:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bf4:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004bf6:	6999      	ldr	r1, [r3, #24]
 8004bf8:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bfa:	d803      	bhi.n	8004c04 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004bfc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004bfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004c02:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c04:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c06:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8004c0c:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c12:	69d1      	ldr	r1, [r2, #28]
 8004c14:	4039      	ands	r1, r7
 8004c16:	4301      	orrs	r1, r0
 8004c18:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c1a:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c1c:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c1e:	6989      	ldr	r1, [r1, #24]
 8004c20:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004c22:	bf9c      	itt	ls
 8004c24:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 8004c28:	6215      	strls	r5, [r2, #32]
 8004c2a:	e7eb      	b.n	8004c04 <HAL_DMA2D_ConfigLayer+0x5c>
 8004c2c:	00fcfff0 	.word	0x00fcfff0

08004c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c34:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004df4 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c38:	4a6c      	ldr	r2, [pc, #432]	@ (8004dec <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c3a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8004c3e:	2401      	movs	r4, #1
 8004c40:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c42:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8004c46:	43ac      	bics	r4, r5
 8004c48:	f040 80b7 	bne.w	8004dba <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c4c:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c4e:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c50:	f005 0403 	and.w	r4, r5, #3
 8004c54:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c58:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c5c:	1e67      	subs	r7, r4, #1
 8004c5e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c60:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c64:	d834      	bhi.n	8004cd0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8004c66:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c68:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c6c:	68cf      	ldr	r7, [r1, #12]
 8004c6e:	fa07 f708 	lsl.w	r7, r7, r8
 8004c72:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004c76:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004c78:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c7a:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c7e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004c82:	409f      	lsls	r7, r3
 8004c84:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004c88:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004c8a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c8c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c90:	688f      	ldr	r7, [r1, #8]
 8004c92:	fa07 f708 	lsl.w	r7, r7, r8
 8004c96:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8004c9c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	d119      	bne.n	8004cd4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8004ca0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8004ca4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ca8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004cac:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cb0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004cb4:	f04f 0e0f 	mov.w	lr, #15
 8004cb8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004cbc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cc0:	690f      	ldr	r7, [r1, #16]
 8004cc2:	fa07 f70b 	lsl.w	r7, r7, fp
 8004cc6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004cca:	f8ca 7020 	str.w	r7, [sl, #32]
 8004cce:	e001      	b.n	8004cd4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd0:	2c03      	cmp	r4, #3
 8004cd2:	d1da      	bne.n	8004c8a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004cd4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cd6:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cda:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cde:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ce0:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004ce4:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ce6:	d068      	beq.n	8004dba <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce8:	2400      	movs	r4, #0
 8004cea:	9401      	str	r4, [sp, #4]
 8004cec:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004cf0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004cf4:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8004cf8:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004cfc:	f023 0703 	bic.w	r7, r3, #3
 8004d00:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004d04:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8004d08:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8004d0c:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d0e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d12:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004d14:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d18:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004d1c:	240f      	movs	r4, #15
 8004d1e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004d22:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d26:	4c32      	ldr	r4, [pc, #200]	@ (8004df0 <HAL_GPIO_Init+0x1c0>)
 8004d28:	42a0      	cmp	r0, r4
 8004d2a:	d04d      	beq.n	8004dc8 <HAL_GPIO_Init+0x198>
 8004d2c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d30:	42a0      	cmp	r0, r4
 8004d32:	d04b      	beq.n	8004dcc <HAL_GPIO_Init+0x19c>
 8004d34:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d38:	42a0      	cmp	r0, r4
 8004d3a:	d049      	beq.n	8004dd0 <HAL_GPIO_Init+0x1a0>
 8004d3c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d047      	beq.n	8004dd4 <HAL_GPIO_Init+0x1a4>
 8004d44:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d48:	42a0      	cmp	r0, r4
 8004d4a:	d045      	beq.n	8004dd8 <HAL_GPIO_Init+0x1a8>
 8004d4c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d50:	42a0      	cmp	r0, r4
 8004d52:	d043      	beq.n	8004ddc <HAL_GPIO_Init+0x1ac>
 8004d54:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d041      	beq.n	8004de0 <HAL_GPIO_Init+0x1b0>
 8004d5c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d60:	42a0      	cmp	r0, r4
 8004d62:	d03f      	beq.n	8004de4 <HAL_GPIO_Init+0x1b4>
 8004d64:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d68:	42a0      	cmp	r0, r4
 8004d6a:	d03d      	beq.n	8004de8 <HAL_GPIO_Init+0x1b8>
 8004d6c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d70:	42a0      	cmp	r0, r4
 8004d72:	bf14      	ite	ne
 8004d74:	240a      	movne	r4, #10
 8004d76:	2409      	moveq	r4, #9
 8004d78:	fa04 f40c 	lsl.w	r4, r4, ip
 8004d7c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d80:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8004d82:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004d84:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d86:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004d8a:	bf0c      	ite	eq
 8004d8c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004d8e:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8004d90:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004d92:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d94:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004d98:	bf0c      	ite	eq
 8004d9a:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004d9c:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8004d9e:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8004da0:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004da2:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004da6:	bf0c      	ite	eq
 8004da8:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004daa:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8004dac:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dae:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004db0:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8004db2:	bf54      	ite	pl
 8004db4:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004db6:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004db8:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dba:	3301      	adds	r3, #1
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	f47f af3d 	bne.w	8004c3c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004dc2:	b003      	add	sp, #12
 8004dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dc8:	2400      	movs	r4, #0
 8004dca:	e7d5      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004dcc:	2401      	movs	r4, #1
 8004dce:	e7d3      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004dd0:	2402      	movs	r4, #2
 8004dd2:	e7d1      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004dd4:	2403      	movs	r4, #3
 8004dd6:	e7cf      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004dd8:	2404      	movs	r4, #4
 8004dda:	e7cd      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004ddc:	2405      	movs	r4, #5
 8004dde:	e7cb      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004de0:	2406      	movs	r4, #6
 8004de2:	e7c9      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004de4:	2407      	movs	r4, #7
 8004de6:	e7c7      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004de8:	2408      	movs	r4, #8
 8004dea:	e7c5      	b.n	8004d78 <HAL_GPIO_Init+0x148>
 8004dec:	40013c00 	.word	0x40013c00
 8004df0:	40020000 	.word	0x40020000
 8004df4:	40023800 	.word	0x40023800

08004df8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004df8:	6903      	ldr	r3, [r0, #16]
 8004dfa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004dfc:	bf14      	ite	ne
 8004dfe:	2001      	movne	r0, #1
 8004e00:	2000      	moveq	r0, #0
 8004e02:	4770      	bx	lr

08004e04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e04:	b10a      	cbz	r2, 8004e0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e06:	6181      	str	r1, [r0, #24]
  }
}
 8004e08:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e0a:	0409      	lsls	r1, r1, #16
 8004e0c:	e7fb      	b.n	8004e06 <HAL_GPIO_WritePin+0x2>

08004e0e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e0e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e10:	ea01 0203 	and.w	r2, r1, r3
 8004e14:	ea21 0103 	bic.w	r1, r1, r3
 8004e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e1c:	6181      	str	r1, [r0, #24]
}
 8004e1e:	4770      	bx	lr

08004e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e20:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004e22:	6951      	ldr	r1, [r2, #20]
 8004e24:	4201      	tst	r1, r0
{
 8004e26:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e28:	d002      	beq.n	8004e30 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e2a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e2c:	f7fc fa56 	bl	80012dc <HAL_GPIO_EXTI_Callback>
  }
}
 8004e30:	bd08      	pop	{r3, pc}
 8004e32:	bf00      	nop
 8004e34:	40013c00 	.word	0x40013c00

08004e38 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e38:	6801      	ldr	r1, [r0, #0]
 8004e3a:	694b      	ldr	r3, [r1, #20]
 8004e3c:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	d010      	beq.n	8004e68 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e46:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004e4a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e50:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e54:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e58:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e5e:	f043 0304 	orr.w	r3, r3, #4
 8004e62:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8004e64:	2001      	movs	r0, #1
 8004e66:	4770      	bx	lr
  }
  return HAL_OK;
 8004e68:	4618      	mov	r0, r3
}
 8004e6a:	4770      	bx	lr

08004e6c <I2C_WaitOnFlagUntilTimeout>:
{
 8004e6c:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004e70:	4606      	mov	r6, r0
 8004e72:	460f      	mov	r7, r1
 8004e74:	4691      	mov	r9, r2
 8004e76:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004e7c:	6833      	ldr	r3, [r6, #0]
 8004e7e:	f1ba 0f01 	cmp.w	sl, #1
 8004e82:	bf0c      	ite	eq
 8004e84:	695c      	ldreq	r4, [r3, #20]
 8004e86:	699c      	ldrne	r4, [r3, #24]
 8004e88:	ea27 0404 	bic.w	r4, r7, r4
 8004e8c:	b2a4      	uxth	r4, r4
 8004e8e:	fab4 f484 	clz	r4, r4
 8004e92:	0964      	lsrs	r4, r4, #5
 8004e94:	45a1      	cmp	r9, r4
 8004e96:	d001      	beq.n	8004e9c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e017      	b.n	8004ecc <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8004e9c:	1c6a      	adds	r2, r5, #1
 8004e9e:	d0ee      	beq.n	8004e7e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea0:	f7ff fd50 	bl	8004944 <HAL_GetTick>
 8004ea4:	9b08      	ldr	r3, [sp, #32]
 8004ea6:	1ac0      	subs	r0, r0, r3
 8004ea8:	42a8      	cmp	r0, r5
 8004eaa:	d801      	bhi.n	8004eb0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	d1e5      	bne.n	8004e7c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004eb0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eb2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004eb4:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eb6:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004eba:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ebe:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004ec0:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ec4:	f042 0220 	orr.w	r2, r2, #32
 8004ec8:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8004eca:	2001      	movs	r0, #1
}
 8004ecc:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	460f      	mov	r7, r1
 8004ed8:	4616      	mov	r6, r2
 8004eda:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004edc:	6825      	ldr	r5, [r4, #0]
 8004ede:	6968      	ldr	r0, [r5, #20]
 8004ee0:	ea27 0000 	bic.w	r0, r7, r0
 8004ee4:	b280      	uxth	r0, r0
 8004ee6:	b1c0      	cbz	r0, 8004f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee8:	696b      	ldr	r3, [r5, #20]
 8004eea:	055a      	lsls	r2, r3, #21
 8004eec:	d517      	bpl.n	8004f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ef4:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef6:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004efa:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f02:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f06:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004f12:	2300      	movs	r3, #0
 8004f14:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004f18:	2001      	movs	r0, #1
}
 8004f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	1c73      	adds	r3, r6, #1
 8004f20:	d0dd      	beq.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f22:	f7ff fd0f 	bl	8004944 <HAL_GetTick>
 8004f26:	eba0 0008 	sub.w	r0, r0, r8
 8004f2a:	42b0      	cmp	r0, r6
 8004f2c:	d909      	bls.n	8004f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f32:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f34:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	e7e6      	b.n	8004f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	d1ca      	bne.n	8004edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 8004f46:	e7f2      	b.n	8004f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08004f48 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	460d      	mov	r5, r1
 8004f4e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	061b      	lsls	r3, r3, #24
 8004f56:	d501      	bpl.n	8004f5c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004f58:	2000      	movs	r0, #0
 8004f5a:	e018      	b.n	8004f8e <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f7ff ff6b 	bl	8004e38 <I2C_IsAcknowledgeFailed>
 8004f62:	b998      	cbnz	r0, 8004f8c <I2C_WaitOnTXEFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8004f64:	1c6a      	adds	r2, r5, #1
 8004f66:	d0f3      	beq.n	8004f50 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f68:	f7ff fcec 	bl	8004944 <HAL_GetTick>
 8004f6c:	1b80      	subs	r0, r0, r6
 8004f6e:	42a8      	cmp	r0, r5
 8004f70:	d90e      	bls.n	8004f90 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f72:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f74:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f76:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f78:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004f82:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	f042 0220 	orr.w	r2, r2, #32
 8004f8a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004f8c:	2001      	movs	r0, #1
}
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	d1dd      	bne.n	8004f50 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8004f94:	e7ed      	b.n	8004f72 <I2C_WaitOnTXEFlagUntilTimeout+0x2a>
	...

08004f98 <I2C_RequestMemoryWrite>:
{
 8004f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f9c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f9e:	6802      	ldr	r2, [r0, #0]
{
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8004fa6:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fae:	6013      	str	r3, [r2, #0]
{
 8004fb0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	f8cd 8000 	str.w	r8, [sp]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004fbe:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc0:	f7ff ff54 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	b138      	cbz	r0, 8004fd8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	05db      	lsls	r3, r3, #23
 8004fcc:	d502      	bpl.n	8004fd4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fd2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004fd4:	2603      	movs	r6, #3
 8004fd6:	e020      	b.n	800501a <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd8:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004fdc:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fde:	491a      	ldr	r1, [pc, #104]	@ (8005048 <I2C_RequestMemoryWrite+0xb0>)
 8004fe0:	4643      	mov	r3, r8
 8004fe2:	463a      	mov	r2, r7
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f7ff ff73 	bl	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fea:	b9a8      	cbnz	r0, 8005018 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	9003      	str	r0, [sp, #12]
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	9203      	str	r2, [sp, #12]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffe:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005000:	f7ff ffa2 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005004:	4606      	mov	r6, r0
 8005006:	b160      	cbz	r0, 8005022 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005008:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800500a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	bf01      	itttt	eq
 800500e:	6822      	ldreq	r2, [r4, #0]
 8005010:	6813      	ldreq	r3, [r2, #0]
 8005012:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8005016:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8005018:	2601      	movs	r6, #1
}
 800501a:	4630      	mov	r0, r6
 800501c:	b005      	add	sp, #20
 800501e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005022:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005028:	d102      	bne.n	8005030 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800502a:	b2ed      	uxtb	r5, r5
 800502c:	611d      	str	r5, [r3, #16]
 800502e:	e7f4      	b.n	800501a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005030:	0a2a      	lsrs	r2, r5, #8
 8005032:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005034:	4639      	mov	r1, r7
 8005036:	4642      	mov	r2, r8
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff ff85 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 800503e:	2800      	cmp	r0, #0
 8005040:	d1e2      	bne.n	8005008 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	e7f1      	b.n	800502a <I2C_RequestMemoryWrite+0x92>
 8005046:	bf00      	nop
 8005048:	00010002 	.word	0x00010002

0800504c <I2C_RequestMemoryRead>:
{
 800504c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005052:	6803      	ldr	r3, [r0, #0]
{
 8005054:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800505c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800505e:	681a      	ldr	r2, [r3, #0]
{
 8005060:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005068:	601a      	str	r2, [r3, #0]
{
 800506a:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800506c:	463b      	mov	r3, r7
 800506e:	f8cd 8000 	str.w	r8, [sp]
 8005072:	2200      	movs	r2, #0
 8005074:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8005078:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800507a:	f7ff fef7 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	b138      	cbz	r0, 8005092 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005082:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005084:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005086:	bf44      	itt	mi
 8005088:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 800508c:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800508e:	2003      	movs	r0, #3
 8005090:	e021      	b.n	80050d6 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005092:	fa5f f986 	uxtb.w	r9, r6
 8005096:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800509a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800509c:	492b      	ldr	r1, [pc, #172]	@ (800514c <I2C_RequestMemoryRead+0x100>)
 800509e:	4643      	mov	r3, r8
 80050a0:	463a      	mov	r2, r7
 80050a2:	4620      	mov	r0, r4
 80050a4:	f7ff ff14 	bl	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050a8:	b9a0      	cbnz	r0, 80050d4 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	9003      	str	r0, [sp, #12]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	9203      	str	r2, [sp, #12]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b6:	4642      	mov	r2, r8
 80050b8:	4639      	mov	r1, r7
 80050ba:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050bc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050be:	f7ff ff43 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 80050c2:	b158      	cbz	r0, 80050dc <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050c6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	bf01      	itttt	eq
 80050ca:	6822      	ldreq	r2, [r4, #0]
 80050cc:	6813      	ldreq	r3, [r2, #0]
 80050ce:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80050d2:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80050d4:	2001      	movs	r0, #1
}
 80050d6:	b004      	add	sp, #16
 80050d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050dc:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050e2:	d11a      	bne.n	800511a <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050e4:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e6:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050e8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ea:	4639      	mov	r1, r7
 80050ec:	4620      	mov	r0, r4
 80050ee:	f7ff ff2b 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 80050f2:	4602      	mov	r2, r0
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d1e5      	bne.n	80050c4 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f8:	6821      	ldr	r1, [r4, #0]
 80050fa:	680b      	ldr	r3, [r1, #0]
 80050fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005100:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005102:	4620      	mov	r0, r4
 8005104:	f8cd 8000 	str.w	r8, [sp]
 8005108:	463b      	mov	r3, r7
 800510a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800510e:	f7ff fead 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	b160      	cbz	r0, 8005130 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	e7b4      	b.n	8005084 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800511a:	0a2a      	lsrs	r2, r5, #8
 800511c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800511e:	4639      	mov	r1, r7
 8005120:	4642      	mov	r2, r8
 8005122:	4620      	mov	r0, r4
 8005124:	f7ff ff10 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8005128:	2800      	cmp	r0, #0
 800512a:	d1cb      	bne.n	80050c4 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	e7d9      	b.n	80050e4 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005130:	f049 0301 	orr.w	r3, r9, #1
 8005134:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005136:	4905      	ldr	r1, [pc, #20]	@ (800514c <I2C_RequestMemoryRead+0x100>)
 8005138:	4643      	mov	r3, r8
 800513a:	463a      	mov	r2, r7
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff fec7 	bl	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005142:	3800      	subs	r0, #0
 8005144:	bf18      	it	ne
 8005146:	2001      	movne	r0, #1
 8005148:	e7c5      	b.n	80050d6 <I2C_RequestMemoryRead+0x8a>
 800514a:	bf00      	nop
 800514c:	00010002 	.word	0x00010002

08005150 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4604      	mov	r4, r0
 8005154:	460d      	mov	r5, r1
 8005156:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	075b      	lsls	r3, r3, #29
 800515e:	d501      	bpl.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005160:	2000      	movs	r0, #0
 8005162:	e018      	b.n	8005196 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff fe67 	bl	8004e38 <I2C_IsAcknowledgeFailed>
 800516a:	b998      	cbnz	r0, 8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 800516c:	1c6a      	adds	r2, r5, #1
 800516e:	d0f3      	beq.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005170:	f7ff fbe8 	bl	8004944 <HAL_GetTick>
 8005174:	1b80      	subs	r0, r0, r6
 8005176:	42a8      	cmp	r0, r5
 8005178:	d90e      	bls.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800517a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800517c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800517e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005180:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005184:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005188:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800518a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800518e:	f042 0220 	orr.w	r2, r2, #32
 8005192:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005194:	2001      	movs	r0, #1
}
 8005196:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005198:	2d00      	cmp	r5, #0
 800519a:	d1dd      	bne.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800519c:	e7ed      	b.n	800517a <I2C_WaitOnBTFFlagUntilTimeout+0x2a>

0800519e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800519e:	b570      	push	{r4, r5, r6, lr}
 80051a0:	4604      	mov	r4, r0
 80051a2:	460d      	mov	r5, r1
 80051a4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051a6:	6821      	ldr	r1, [r4, #0]
 80051a8:	694b      	ldr	r3, [r1, #20]
 80051aa:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80051ae:	d001      	beq.n	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80051b0:	2000      	movs	r0, #0
 80051b2:	e011      	b.n	80051d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051b4:	694a      	ldr	r2, [r1, #20]
 80051b6:	06d2      	lsls	r2, r2, #27
 80051b8:	d50f      	bpl.n	80051da <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ba:	f06f 0210 	mvn.w	r2, #16
 80051be:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80051c0:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051c2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051c4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ce:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80051d0:	2300      	movs	r3, #0
 80051d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80051d6:	2001      	movs	r0, #1
}
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7ff fbb3 	bl	8004944 <HAL_GetTick>
 80051de:	1b80      	subs	r0, r0, r6
 80051e0:	42a8      	cmp	r0, r5
 80051e2:	d909      	bls.n	80051f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051e4:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80051e6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051e8:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051ea:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051f4:	4313      	orrs	r3, r2
 80051f6:	e7ea      	b.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	d1d4      	bne.n	80051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80051fc:	e7f2      	b.n	80051e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
	...

08005200 <HAL_I2C_Init>:
{
 8005200:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005202:	4604      	mov	r4, r0
 8005204:	b908      	cbnz	r0, 800520a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8005206:	2001      	movs	r0, #1
}
 8005208:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800520a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800520e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005212:	b91b      	cbnz	r3, 800521c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005214:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8005218:	f7fc f8fa 	bl	8001410 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800521c:	2324      	movs	r3, #36	@ 0x24
 800521e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800523a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800523c:	f000 fe66 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005240:	4b3f      	ldr	r3, [pc, #252]	@ (8005340 <HAL_I2C_Init+0x140>)
 8005242:	6865      	ldr	r5, [r4, #4]
 8005244:	429d      	cmp	r5, r3
 8005246:	bf94      	ite	ls
 8005248:	4b3e      	ldrls	r3, [pc, #248]	@ (8005344 <HAL_I2C_Init+0x144>)
 800524a:	4b3f      	ldrhi	r3, [pc, #252]	@ (8005348 <HAL_I2C_Init+0x148>)
 800524c:	4298      	cmp	r0, r3
 800524e:	bf8c      	ite	hi
 8005250:	2300      	movhi	r3, #0
 8005252:	2301      	movls	r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1d6      	bne.n	8005206 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005258:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800525a:	4e39      	ldr	r6, [pc, #228]	@ (8005340 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800525c:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800525e:	4b3b      	ldr	r3, [pc, #236]	@ (800534c <HAL_I2C_Init+0x14c>)
 8005260:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005264:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005268:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800526a:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800526c:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800526e:	bf88      	it	hi
 8005270:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8005274:	6a11      	ldr	r1, [r2, #32]
 8005276:	bf88      	it	hi
 8005278:	4373      	mulhi	r3, r6
 800527a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800527e:	bf84      	itt	hi
 8005280:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8005284:	fbb3 f3f6 	udivhi	r3, r3, r6
 8005288:	3301      	adds	r3, #1
 800528a:	430b      	orrs	r3, r1
 800528c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800528e:	69d1      	ldr	r1, [r2, #28]
 8005290:	1e43      	subs	r3, r0, #1
 8005292:	482b      	ldr	r0, [pc, #172]	@ (8005340 <HAL_I2C_Init+0x140>)
 8005294:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8005298:	4285      	cmp	r5, r0
 800529a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800529e:	d832      	bhi.n	8005306 <HAL_I2C_Init+0x106>
 80052a0:	006d      	lsls	r5, r5, #1
 80052a2:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80052a6:	fbb3 f3f5 	udiv	r3, r3, r5
 80052aa:	3301      	adds	r3, #1
 80052ac:	4203      	tst	r3, r0
 80052ae:	d042      	beq.n	8005336 <HAL_I2C_Init+0x136>
 80052b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b4:	4319      	orrs	r1, r3
 80052b6:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052b8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80052bc:	6811      	ldr	r1, [r2, #0]
 80052be:	4303      	orrs	r3, r0
 80052c0:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80052c4:	430b      	orrs	r3, r1
 80052c6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052c8:	6891      	ldr	r1, [r2, #8]
 80052ca:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80052ce:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80052d2:	4303      	orrs	r3, r0
 80052d4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80052d8:	430b      	orrs	r3, r1
 80052da:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052dc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80052e0:	68d1      	ldr	r1, [r2, #12]
 80052e2:	4303      	orrs	r3, r0
 80052e4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80052e8:	430b      	orrs	r3, r1
 80052ea:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80052ec:	6813      	ldr	r3, [r2, #0]
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f8:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052fe:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005300:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005304:	e780      	b.n	8005208 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005306:	68a0      	ldr	r0, [r4, #8]
 8005308:	b950      	cbnz	r0, 8005320 <HAL_I2C_Init+0x120>
 800530a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800530e:	fbb3 f3f5 	udiv	r3, r3, r5
 8005312:	3301      	adds	r3, #1
 8005314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005318:	b17b      	cbz	r3, 800533a <HAL_I2C_Init+0x13a>
 800531a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800531e:	e7c9      	b.n	80052b4 <HAL_I2C_Init+0xb4>
 8005320:	2019      	movs	r0, #25
 8005322:	4368      	muls	r0, r5
 8005324:	fbb3 f3f0 	udiv	r3, r3, r0
 8005328:	3301      	adds	r3, #1
 800532a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800532e:	b123      	cbz	r3, 800533a <HAL_I2C_Init+0x13a>
 8005330:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005334:	e7be      	b.n	80052b4 <HAL_I2C_Init+0xb4>
 8005336:	2304      	movs	r3, #4
 8005338:	e7bc      	b.n	80052b4 <HAL_I2C_Init+0xb4>
 800533a:	2301      	movs	r3, #1
 800533c:	e7ba      	b.n	80052b4 <HAL_I2C_Init+0xb4>
 800533e:	bf00      	nop
 8005340:	000186a0 	.word	0x000186a0
 8005344:	001e847f 	.word	0x001e847f
 8005348:	003d08ff 	.word	0x003d08ff
 800534c:	000f4240 	.word	0x000f4240

08005350 <HAL_I2C_Mem_Write>:
{
 8005350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005354:	4604      	mov	r4, r0
 8005356:	4699      	mov	r9, r3
 8005358:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800535a:	460f      	mov	r7, r1
 800535c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800535e:	f7ff faf1 	bl	8004944 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005362:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005366:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005368:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800536a:	d003      	beq.n	8005374 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 800536c:	2002      	movs	r0, #2
}
 800536e:	b003      	add	sp, #12
 8005370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005374:	9000      	str	r0, [sp, #0]
 8005376:	493c      	ldr	r1, [pc, #240]	@ (8005468 <HAL_I2C_Mem_Write+0x118>)
 8005378:	2319      	movs	r3, #25
 800537a:	2201      	movs	r2, #1
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff fd75 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8005382:	2800      	cmp	r0, #0
 8005384:	d1f2      	bne.n	800536c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005386:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d0ee      	beq.n	800536c <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800538e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005390:	2301      	movs	r3, #1
 8005392:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005396:	6803      	ldr	r3, [r0, #0]
 8005398:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800539a:	bf5e      	ittt	pl
 800539c:	6803      	ldrpl	r3, [r0, #0]
 800539e:	f043 0301 	orrpl.w	r3, r3, #1
 80053a2:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a4:	6803      	ldr	r3, [r0, #0]
 80053a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053aa:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053ac:	2321      	movs	r3, #33	@ 0x21
 80053ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053b2:	2340      	movs	r3, #64	@ 0x40
 80053b4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80053bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053be:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053c0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80053c4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80053c8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ca:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_I2C_Mem_Write+0x11c>)
 80053cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ce:	4642      	mov	r2, r8
 80053d0:	e9cd 6500 	strd	r6, r5, [sp]
 80053d4:	464b      	mov	r3, r9
 80053d6:	4639      	mov	r1, r7
 80053d8:	4620      	mov	r0, r4
 80053da:	f7ff fddd 	bl	8004f98 <I2C_RequestMemoryWrite>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d02a      	beq.n	8005438 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80053e2:	2001      	movs	r0, #1
 80053e4:	e7c3      	b.n	800536e <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e6:	f7ff fdaf 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ea:	b140      	cbz	r0, 80053fe <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053ee:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f0:	bf01      	itttt	eq
 80053f2:	6822      	ldreq	r2, [r4, #0]
 80053f4:	6813      	ldreq	r3, [r2, #0]
 80053f6:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80053fa:	6013      	streq	r3, [r2, #0]
 80053fc:	e7f1      	b.n	80053e2 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005400:	6827      	ldr	r7, [r4, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005408:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800540a:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800540c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800540e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005410:	3a01      	subs	r2, #1
 8005412:	b292      	uxth	r2, r2
 8005414:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005416:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005418:	1e48      	subs	r0, r1, #1
 800541a:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800541c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800541e:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005420:	d50a      	bpl.n	8005438 <HAL_I2C_Mem_Write+0xe8>
 8005422:	b148      	cbz	r0, 8005438 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005424:	785a      	ldrb	r2, [r3, #1]
 8005426:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005428:	3302      	adds	r3, #2
 800542a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800542c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800542e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8005430:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005432:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005434:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8005436:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005438:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800543a:	462a      	mov	r2, r5
 800543c:	4631      	mov	r1, r6
 800543e:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1d0      	bne.n	80053e6 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005444:	f7ff fe84 	bl	8005150 <I2C_WaitOnBTFFlagUntilTimeout>
 8005448:	2800      	cmp	r0, #0
 800544a:	d1cf      	bne.n	80053ec <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	6813      	ldr	r3, [r2, #0]
 8005450:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005454:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005456:	2320      	movs	r3, #32
 8005458:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800545c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005460:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8005464:	e783      	b.n	800536e <HAL_I2C_Mem_Write+0x1e>
 8005466:	bf00      	nop
 8005468:	00100002 	.word	0x00100002
 800546c:	ffff0000 	.word	0xffff0000

08005470 <HAL_I2C_Mem_Read>:
{
 8005470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005474:	4604      	mov	r4, r0
 8005476:	b087      	sub	sp, #28
 8005478:	4699      	mov	r9, r3
 800547a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800547c:	460d      	mov	r5, r1
 800547e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005480:	f7ff fa60 	bl	8004944 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005484:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005488:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800548a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800548c:	d004      	beq.n	8005498 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 800548e:	2502      	movs	r5, #2
}
 8005490:	4628      	mov	r0, r5
 8005492:	b007      	add	sp, #28
 8005494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005498:	9000      	str	r0, [sp, #0]
 800549a:	4976      	ldr	r1, [pc, #472]	@ (8005674 <HAL_I2C_Mem_Read+0x204>)
 800549c:	2319      	movs	r3, #25
 800549e:	2201      	movs	r2, #1
 80054a0:	4620      	mov	r0, r4
 80054a2:	f7ff fce3 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d1f1      	bne.n	800548e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80054aa:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d0ed      	beq.n	800548e <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054b2:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80054b4:	2301      	movs	r3, #1
 80054b6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ba:	6803      	ldr	r3, [r0, #0]
 80054bc:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80054be:	bf5e      	ittt	pl
 80054c0:	6803      	ldrpl	r3, [r0, #0]
 80054c2:	f043 0301 	orrpl.w	r3, r3, #1
 80054c6:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c8:	6803      	ldr	r3, [r0, #0]
 80054ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054ce:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054d0:	2322      	movs	r3, #34	@ 0x22
 80054d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054d6:	2340      	movs	r3, #64	@ 0x40
 80054d8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054dc:	2300      	movs	r3, #0
 80054de:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80054e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054e2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054e4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80054e8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80054ec:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ee:	4b62      	ldr	r3, [pc, #392]	@ (8005678 <HAL_I2C_Mem_Read+0x208>)
 80054f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054f2:	4629      	mov	r1, r5
 80054f4:	e9cd 7600 	strd	r7, r6, [sp]
 80054f8:	464b      	mov	r3, r9
 80054fa:	4642      	mov	r2, r8
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7ff fda5 	bl	800504c <I2C_RequestMemoryRead>
 8005502:	4605      	mov	r5, r0
 8005504:	b108      	cbz	r0, 800550a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8005506:	2501      	movs	r5, #1
 8005508:	e7c2      	b.n	8005490 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800550a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800550e:	b9b2      	cbnz	r2, 800553e <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005510:	9002      	str	r0, [sp, #8]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	9202      	str	r2, [sp, #8]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	9202      	str	r2, [sp, #8]
 800551a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005522:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005524:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 800567c <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8005528:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800552a:	2b00      	cmp	r3, #0
 800552c:	d12c      	bne.n	8005588 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 800552e:	2220      	movs	r2, #32
 8005530:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005534:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 800553c:	e7a8      	b.n	8005490 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800553e:	2a01      	cmp	r2, #1
 8005540:	d10a      	bne.n	8005558 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005548:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554a:	9003      	str	r0, [sp, #12]
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	9203      	str	r2, [sp, #12]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	9203      	str	r2, [sp, #12]
 8005554:	9a03      	ldr	r2, [sp, #12]
 8005556:	e7e1      	b.n	800551c <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8005558:	2a02      	cmp	r2, #2
 800555a:	d10e      	bne.n	800557a <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005562:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556c:	9004      	str	r0, [sp, #16]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	9204      	str	r2, [sp, #16]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	9b04      	ldr	r3, [sp, #16]
 8005578:	e7d4      	b.n	8005524 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557a:	9005      	str	r0, [sp, #20]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	9205      	str	r2, [sp, #20]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	9b05      	ldr	r3, [sp, #20]
 8005586:	e7cd      	b.n	8005524 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8005588:	2b03      	cmp	r3, #3
 800558a:	d856      	bhi.n	800563a <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 800558c:	2b01      	cmp	r3, #1
 800558e:	d115      	bne.n	80055bc <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005590:	4632      	mov	r2, r6
 8005592:	4639      	mov	r1, r7
 8005594:	4620      	mov	r0, r4
 8005596:	f7ff fe02 	bl	800519e <I2C_WaitOnRXNEFlagUntilTimeout>
 800559a:	2800      	cmp	r0, #0
 800559c:	d1b3      	bne.n	8005506 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055a4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80055a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055a8:	3301      	adds	r3, #1
 80055aa:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80055ac:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80055ae:	3b01      	subs	r3, #1
 80055b0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80055b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80055ba:	e7b5      	b.n	8005528 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 80055bc:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055be:	9600      	str	r6, [sp, #0]
 80055c0:	463b      	mov	r3, r7
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	4641      	mov	r1, r8
 80055c8:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80055ca:	d119      	bne.n	8005600 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055cc:	f7ff fc4e 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d198      	bne.n	8005506 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055dc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055e2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80055e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80055e6:	1c53      	adds	r3, r2, #1
 80055e8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80055ea:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80055ec:	3b01      	subs	r3, #1
 80055ee:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80055f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f8:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	7053      	strb	r3, [r2, #1]
 80055fe:	e7d2      	b.n	80055a6 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005600:	f7ff fc34 	bl	8004e6c <I2C_WaitOnFlagUntilTimeout>
 8005604:	4602      	mov	r2, r0
 8005606:	2800      	cmp	r0, #0
 8005608:	f47f af7d 	bne.w	8005506 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	6819      	ldr	r1, [r3, #0]
 8005610:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8005614:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005616:	6919      	ldr	r1, [r3, #16]
 8005618:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800561a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800561c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800561e:	3301      	adds	r3, #1
 8005620:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005622:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005624:	3b01      	subs	r3, #1
 8005626:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005628:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800562a:	3b01      	subs	r3, #1
 800562c:	b29b      	uxth	r3, r3
 800562e:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005630:	4641      	mov	r1, r8
 8005632:	9600      	str	r6, [sp, #0]
 8005634:	463b      	mov	r3, r7
 8005636:	4620      	mov	r0, r4
 8005638:	e7c8      	b.n	80055cc <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800563a:	4632      	mov	r2, r6
 800563c:	4639      	mov	r1, r7
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff fdad 	bl	800519e <I2C_WaitOnRXNEFlagUntilTimeout>
 8005644:	2800      	cmp	r0, #0
 8005646:	f47f af5e 	bne.w	8005506 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005650:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005652:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005654:	1c53      	adds	r3, r2, #1
 8005656:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8005658:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800565a:	3b01      	subs	r3, #1
 800565c:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800565e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005660:	3b01      	subs	r3, #1
 8005662:	b29b      	uxth	r3, r3
 8005664:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	6959      	ldr	r1, [r3, #20]
 800566a:	0749      	lsls	r1, r1, #29
 800566c:	f57f af5c 	bpl.w	8005528 <HAL_I2C_Mem_Read+0xb8>
 8005670:	e7c3      	b.n	80055fa <HAL_I2C_Mem_Read+0x18a>
 8005672:	bf00      	nop
 8005674:	00100002 	.word	0x00100002
 8005678:	ffff0000 	.word	0xffff0000
 800567c:	00010004 	.word	0x00010004

08005680 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005680:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005682:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005686:	2b20      	cmp	r3, #32
 8005688:	b2dc      	uxtb	r4, r3
 800568a:	d116      	bne.n	80056ba <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800568c:	2324      	movs	r3, #36	@ 0x24
 800568e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005692:	6803      	ldr	r3, [r0, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800569c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800569e:	f022 0210 	bic.w	r2, r2, #16
 80056a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80056a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056a6:	4311      	orrs	r1, r2
 80056a8:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 80056b6:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80056b8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80056ba:	2002      	movs	r0, #2
 80056bc:	e7fc      	b.n	80056b8 <HAL_I2CEx_ConfigAnalogFilter+0x38>

080056be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056be:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	b2dc      	uxtb	r4, r3
 80056c8:	d116      	bne.n	80056f8 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056ca:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	2324      	movs	r3, #36	@ 0x24
 80056ce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80056da:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80056dc:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80056e0:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80056e2:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056e8:	6813      	ldr	r3, [r2, #0]
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056f0:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 80056f4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80056f6:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 80056f8:	2002      	movs	r0, #2
 80056fa:	e7fc      	b.n	80056f6 <HAL_I2CEx_ConfigDigitalFilter+0x38>

080056fc <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80056fc:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056fe:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005702:	01d2      	lsls	r2, r2, #7
 8005704:	3284      	adds	r2, #132	@ 0x84
 8005706:	1883      	adds	r3, r0, r2
{
 8005708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800570c:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800570e:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005710:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005712:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005716:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800571a:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800571c:	68c5      	ldr	r5, [r0, #12]
 800571e:	f10c 0701 	add.w	r7, ip, #1
 8005722:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005726:	f3c6 460b 	ubfx	r6, r6, #16, #12
 800572a:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800572c:	443d      	add	r5, r7
 800572e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005732:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005734:	68c6      	ldr	r6, [r0, #12]
 8005736:	68cd      	ldr	r5, [r1, #12]
 8005738:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800573c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800573e:	689d      	ldr	r5, [r3, #8]
 8005740:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8005744:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005746:	68c7      	ldr	r7, [r0, #12]
 8005748:	688d      	ldr	r5, [r1, #8]
 800574a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800574e:	3501      	adds	r5, #1
 8005750:	443d      	add	r5, r7
 8005752:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8005756:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005758:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800575a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800575c:	f025 0507 	bic.w	r5, r5, #7
 8005760:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005762:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005766:	611e      	str	r6, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005768:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800576c:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800576e:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005772:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005776:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800577a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800577e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005782:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005786:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005788:	695d      	ldr	r5, [r3, #20]
 800578a:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800578e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005790:	694d      	ldr	r5, [r1, #20]
 8005792:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005794:	69dd      	ldr	r5, [r3, #28]
 8005796:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800579a:	f025 0507 	bic.w	r5, r5, #7
 800579e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80057a0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80057a4:	433d      	orrs	r5, r7
 80057a6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057a8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057aa:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80057ac:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057b0:	2e07      	cmp	r6, #7
 80057b2:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80057b4:	bf9c      	itt	ls
 80057b6:	4d0e      	ldrls	r5, [pc, #56]	@ (80057f0 <LTDC_SetConfig+0xf4>)
 80057b8:	5dae      	ldrbls	r6, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057ba:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80057bc:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 80057c0:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80057c2:	bf88      	it	hi
 80057c4:	2601      	movhi	r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057c6:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057c8:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057ca:	eba4 040c 	sub.w	r4, r4, ip
 80057ce:	4374      	muls	r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057d0:	4375      	muls	r5, r6
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057d2:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80057d8:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057da:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80057dc:	f36f 040a 	bfc	r4, #0, #11
 80057e0:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80057e2:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80057e4:	5883      	ldr	r3, [r0, r2]
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	5083      	str	r3, [r0, r2]
}
 80057ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057f0:	08015998 	.word	0x08015998

080057f4 <HAL_LTDC_Init>:
{
 80057f4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80057f6:	4604      	mov	r4, r0
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d063      	beq.n	80058c4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80057fc:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8005800:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005804:	b91b      	cbnz	r3, 800580e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005806:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800580a:	f7fb fe5d 	bl	80014c8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800580e:	2302      	movs	r3, #2
 8005810:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800581c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800581e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005822:	4302      	orrs	r2, r0
 8005824:	68e0      	ldr	r0, [r4, #12]
 8005826:	6999      	ldr	r1, [r3, #24]
 8005828:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800582a:	6920      	ldr	r0, [r4, #16]
 800582c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800582e:	430a      	orrs	r2, r1
 8005830:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	4924      	ldr	r1, [pc, #144]	@ (80058c8 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005836:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005838:	400a      	ands	r2, r1
 800583a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005842:	69a0      	ldr	r0, [r4, #24]
 8005844:	4302      	orrs	r2, r0
 8005846:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005848:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800584a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800584c:	400a      	ands	r2, r1
 800584e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005856:	6a20      	ldr	r0, [r4, #32]
 8005858:	4302      	orrs	r2, r0
 800585a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800585c:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800585e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005860:	400a      	ands	r2, r1
 8005862:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800586a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800586c:	4302      	orrs	r2, r0
 800586e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	400a      	ands	r2, r1
 8005874:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005876:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005878:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800587a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800587e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005880:	430a      	orrs	r2, r1
 8005882:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005886:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800588a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800588e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005894:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8005896:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800589a:	432a      	orrs	r2, r5
 800589c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80058a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80058a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058a8:	f042 0206 	orr.w	r2, r2, #6
 80058ac:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058b6:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80058b8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058ba:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80058be:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80058c4:	2001      	movs	r0, #1
 80058c6:	e7fc      	b.n	80058c2 <HAL_LTDC_Init+0xce>
 80058c8:	f000f800 	.word	0xf000f800

080058cc <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80058cc:	4770      	bx	lr

080058ce <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80058ce:	4770      	bx	lr

080058d0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80058d0:	6803      	ldr	r3, [r0, #0]
{
 80058d2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80058d4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80058d6:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80058d8:	0772      	lsls	r2, r6, #29
{
 80058da:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80058dc:	d514      	bpl.n	8005908 <HAL_LTDC_IRQHandler+0x38>
 80058de:	0769      	lsls	r1, r5, #29
 80058e0:	d512      	bpl.n	8005908 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80058e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e4:	f022 0204 	bic.w	r2, r2, #4
 80058e8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80058ea:	2204      	movs	r2, #4
 80058ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80058ee:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80058fa:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80058fc:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005900:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005904:	f7ff ffe2 	bl	80058cc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005908:	07b2      	lsls	r2, r6, #30
 800590a:	d516      	bpl.n	800593a <HAL_LTDC_IRQHandler+0x6a>
 800590c:	07ab      	lsls	r3, r5, #30
 800590e:	d514      	bpl.n	800593a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005914:	f022 0202 	bic.w	r2, r2, #2
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800591a:	2202      	movs	r2, #2
 800591c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800591e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005928:	2304      	movs	r3, #4
 800592a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800592e:	2300      	movs	r3, #0
 8005930:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005934:	4620      	mov	r0, r4
 8005936:	f7ff ffc9 	bl	80058cc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800593a:	07f0      	lsls	r0, r6, #31
 800593c:	d510      	bpl.n	8005960 <HAL_LTDC_IRQHandler+0x90>
 800593e:	07e9      	lsls	r1, r5, #31
 8005940:	d50e      	bpl.n	8005960 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800594c:	2201      	movs	r2, #1
 800594e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8005950:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005952:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005956:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800595a:	4620      	mov	r0, r4
 800595c:	f7fc fe56 	bl	800260c <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005960:	0732      	lsls	r2, r6, #28
 8005962:	d511      	bpl.n	8005988 <HAL_LTDC_IRQHandler+0xb8>
 8005964:	072b      	lsls	r3, r5, #28
 8005966:	d50f      	bpl.n	8005988 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800596c:	f022 0208 	bic.w	r2, r2, #8
 8005970:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005972:	2208      	movs	r2, #8
 8005974:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005976:	2301      	movs	r3, #1
 8005978:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800597c:	2300      	movs	r3, #0
 800597e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff ffa3 	bl	80058ce <HAL_LTDC_ReloadEventCallback>
}
 8005988:	bd70      	pop	{r4, r5, r6, pc}

0800598a <HAL_LTDC_ConfigLayer>:
{
 800598a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800598e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8005992:	2b01      	cmp	r3, #1
{
 8005994:	4606      	mov	r6, r0
 8005996:	460f      	mov	r7, r1
 8005998:	4694      	mov	ip, r2
 800599a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800599e:	d01f      	beq.n	80059e0 <HAL_LTDC_ConfigLayer+0x56>
 80059a0:	f04f 0801 	mov.w	r8, #1
 80059a4:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059a8:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059ac:	2434      	movs	r4, #52	@ 0x34
 80059ae:	460d      	mov	r5, r1
 80059b0:	fb04 6402 	mla	r4, r4, r2, r6
 80059b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059b6:	3438      	adds	r4, #56	@ 0x38
 80059b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80059c6:	4630      	mov	r0, r6
 80059c8:	4662      	mov	r2, ip
 80059ca:	4639      	mov	r1, r7
 80059cc:	f7ff fe96 	bl	80056fc <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80059d0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80059d2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80059d4:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80059d8:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80059dc:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080059e4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80059e4:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 80059e8:	2a01      	cmp	r2, #1
{
 80059ea:	4603      	mov	r3, r0
 80059ec:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80059f0:	d012      	beq.n	8005a18 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80059f2:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059f4:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80059f8:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80059fa:	f020 0001 	bic.w	r0, r0, #1
 80059fe:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005a00:	4806      	ldr	r0, [pc, #24]	@ (8005a1c <HAL_LTDC_ProgramLineEvent+0x38>)
 8005a02:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005a04:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8005a06:	f041 0101 	orr.w	r1, r1, #1
 8005a0a:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 8005a0c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8005a14:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40016800 	.word	0x40016800

08005a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a24:	4604      	mov	r4, r0
 8005a26:	b340      	cbz	r0, 8005a7a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a28:	6803      	ldr	r3, [r0, #0]
 8005a2a:	07de      	lsls	r6, r3, #31
 8005a2c:	d410      	bmi.n	8005a50 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	079d      	lsls	r5, r3, #30
 8005a32:	d45b      	bmi.n	8005aec <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	0719      	lsls	r1, r3, #28
 8005a38:	f100 809d 	bmi.w	8005b76 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	075a      	lsls	r2, r3, #29
 8005a40:	f100 80bd 	bmi.w	8005bbe <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a44:	69a3      	ldr	r3, [r4, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 8124 	bne.w	8005c94 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	e02c      	b.n	8005aaa <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a50:	4b8d      	ldr	r3, [pc, #564]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	f002 020c 	and.w	r2, r2, #12
 8005a58:	2a04      	cmp	r2, #4
 8005a5a:	d007      	beq.n	8005a6c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a62:	2a08      	cmp	r2, #8
 8005a64:	d10b      	bne.n	8005a7e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	0259      	lsls	r1, r3, #9
 8005a6a:	d508      	bpl.n	8005a7e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6c:	4b86      	ldr	r3, [pc, #536]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	039a      	lsls	r2, r3, #14
 8005a72:	d5dc      	bpl.n	8005a2e <HAL_RCC_OscConfig+0xe>
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1d9      	bne.n	8005a2e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	e015      	b.n	8005aaa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a7e:	6863      	ldr	r3, [r4, #4]
 8005a80:	4d81      	ldr	r5, [pc, #516]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
 8005a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a86:	d113      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x90>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005a90:	f7fe ff58 	bl	8004944 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a94:	4e7c      	ldr	r6, [pc, #496]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005a96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a98:	6833      	ldr	r3, [r6, #0]
 8005a9a:	039b      	lsls	r3, r3, #14
 8005a9c:	d4c7      	bmi.n	8005a2e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a9e:	f7fe ff51 	bl	8004944 <HAL_GetTick>
 8005aa2:	1b40      	subs	r0, r0, r5
 8005aa4:	2864      	cmp	r0, #100	@ 0x64
 8005aa6:	d9f7      	bls.n	8005a98 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8005aa8:	2003      	movs	r0, #3
}
 8005aaa:	b002      	add	sp, #8
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ab4:	d104      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xa0>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	e7e3      	b.n	8005a88 <HAL_RCC_OscConfig+0x68>
 8005ac0:	682a      	ldr	r2, [r5, #0]
 8005ac2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005ac6:	602a      	str	r2, [r5, #0]
 8005ac8:	682a      	ldr	r2, [r5, #0]
 8005aca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ace:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1dd      	bne.n	8005a90 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8005ad4:	f7fe ff36 	bl	8004944 <HAL_GetTick>
 8005ad8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	039f      	lsls	r7, r3, #14
 8005ade:	d5a6      	bpl.n	8005a2e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae0:	f7fe ff30 	bl	8004944 <HAL_GetTick>
 8005ae4:	1b80      	subs	r0, r0, r6
 8005ae6:	2864      	cmp	r0, #100	@ 0x64
 8005ae8:	d9f7      	bls.n	8005ada <HAL_RCC_OscConfig+0xba>
 8005aea:	e7dd      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aec:	4b66      	ldr	r3, [pc, #408]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	f012 0f0c 	tst.w	r2, #12
 8005af4:	d007      	beq.n	8005b06 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005afc:	2a08      	cmp	r2, #8
 8005afe:	d111      	bne.n	8005b24 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	025d      	lsls	r5, r3, #9
 8005b04:	d40e      	bmi.n	8005b24 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b06:	4a60      	ldr	r2, [pc, #384]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
 8005b08:	6813      	ldr	r3, [r2, #0]
 8005b0a:	0799      	lsls	r1, r3, #30
 8005b0c:	d502      	bpl.n	8005b14 <HAL_RCC_OscConfig+0xf4>
 8005b0e:	68e3      	ldr	r3, [r4, #12]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d1b2      	bne.n	8005a7a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b14:	6813      	ldr	r3, [r2, #0]
 8005b16:	6921      	ldr	r1, [r4, #16]
 8005b18:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b20:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b22:	e787      	b.n	8005a34 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b24:	68e2      	ldr	r2, [r4, #12]
 8005b26:	4b59      	ldr	r3, [pc, #356]	@ (8005c8c <HAL_RCC_OscConfig+0x26c>)
 8005b28:	b1b2      	cbz	r2, 8005b58 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b2e:	f7fe ff09 	bl	8004944 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b32:	4d55      	ldr	r5, [pc, #340]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005b34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b36:	682b      	ldr	r3, [r5, #0]
 8005b38:	079b      	lsls	r3, r3, #30
 8005b3a:	d507      	bpl.n	8005b4c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	6922      	ldr	r2, [r4, #16]
 8005b40:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005b48:	602b      	str	r3, [r5, #0]
 8005b4a:	e773      	b.n	8005a34 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b4c:	f7fe fefa 	bl	8004944 <HAL_GetTick>
 8005b50:	1b80      	subs	r0, r0, r6
 8005b52:	2802      	cmp	r0, #2
 8005b54:	d9ef      	bls.n	8005b36 <HAL_RCC_OscConfig+0x116>
 8005b56:	e7a7      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005b58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b5a:	f7fe fef3 	bl	8004944 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b5e:	4e4a      	ldr	r6, [pc, #296]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005b60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b62:	6833      	ldr	r3, [r6, #0]
 8005b64:	079f      	lsls	r7, r3, #30
 8005b66:	f57f af65 	bpl.w	8005a34 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6a:	f7fe feeb 	bl	8004944 <HAL_GetTick>
 8005b6e:	1b40      	subs	r0, r0, r5
 8005b70:	2802      	cmp	r0, #2
 8005b72:	d9f6      	bls.n	8005b62 <HAL_RCC_OscConfig+0x142>
 8005b74:	e798      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b76:	6962      	ldr	r2, [r4, #20]
 8005b78:	4b44      	ldr	r3, [pc, #272]	@ (8005c8c <HAL_RCC_OscConfig+0x26c>)
 8005b7a:	b182      	cbz	r2, 8005b9e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005b82:	f7fe fedf 	bl	8004944 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b86:	4e40      	ldr	r6, [pc, #256]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005b88:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005b8c:	079b      	lsls	r3, r3, #30
 8005b8e:	f53f af55 	bmi.w	8005a3c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b92:	f7fe fed7 	bl	8004944 <HAL_GetTick>
 8005b96:	1b40      	subs	r0, r0, r5
 8005b98:	2802      	cmp	r0, #2
 8005b9a:	d9f6      	bls.n	8005b8a <HAL_RCC_OscConfig+0x16a>
 8005b9c:	e784      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8005b9e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005ba2:	f7fe fecf 	bl	8004944 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba6:	4e38      	ldr	r6, [pc, #224]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005ba8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005baa:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005bac:	079f      	lsls	r7, r3, #30
 8005bae:	f57f af45 	bpl.w	8005a3c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb2:	f7fe fec7 	bl	8004944 <HAL_GetTick>
 8005bb6:	1b40      	subs	r0, r0, r5
 8005bb8:	2802      	cmp	r0, #2
 8005bba:	d9f6      	bls.n	8005baa <HAL_RCC_OscConfig+0x18a>
 8005bbc:	e774      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bbe:	4b32      	ldr	r3, [pc, #200]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
 8005bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bc2:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8005bc6:	d128      	bne.n	8005c1a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc8:	9201      	str	r2, [sp, #4]
 8005bca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bcc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005bd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005bdc:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bde:	4d2c      	ldr	r5, [pc, #176]	@ (8005c90 <HAL_RCC_OscConfig+0x270>)
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	05d8      	lsls	r0, r3, #23
 8005be4:	d51b      	bpl.n	8005c1e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be6:	68a3      	ldr	r3, [r4, #8]
 8005be8:	4d27      	ldr	r5, [pc, #156]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d127      	bne.n	8005c3e <HAL_RCC_OscConfig+0x21e>
 8005bee:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005bf6:	f7fe fea5 	bl	8004944 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfa:	4e23      	ldr	r6, [pc, #140]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005bfc:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bfe:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c02:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005c04:	079a      	lsls	r2, r3, #30
 8005c06:	d539      	bpl.n	8005c7c <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8005c08:	2f00      	cmp	r7, #0
 8005c0a:	f43f af1b 	beq.w	8005a44 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c88 <HAL_RCC_OscConfig+0x268>)
 8005c10:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005c12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c18:	e714      	b.n	8005a44 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005c1a:	2700      	movs	r7, #0
 8005c1c:	e7df      	b.n	8005bde <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c24:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005c26:	f7fe fe8d 	bl	8004944 <HAL_GetTick>
 8005c2a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	05d9      	lsls	r1, r3, #23
 8005c30:	d4d9      	bmi.n	8005be6 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c32:	f7fe fe87 	bl	8004944 <HAL_GetTick>
 8005c36:	1b80      	subs	r0, r0, r6
 8005c38:	2802      	cmp	r0, #2
 8005c3a:	d9f7      	bls.n	8005c2c <HAL_RCC_OscConfig+0x20c>
 8005c3c:	e734      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d104      	bne.n	8005c4c <HAL_RCC_OscConfig+0x22c>
 8005c42:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005c44:	f043 0304 	orr.w	r3, r3, #4
 8005c48:	672b      	str	r3, [r5, #112]	@ 0x70
 8005c4a:	e7d0      	b.n	8005bee <HAL_RCC_OscConfig+0x1ce>
 8005c4c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	672a      	str	r2, [r5, #112]	@ 0x70
 8005c54:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005c56:	f022 0204 	bic.w	r2, r2, #4
 8005c5a:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1ca      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005c60:	f7fe fe70 	bl	8004944 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c64:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005c68:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c6a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005c6c:	079b      	lsls	r3, r3, #30
 8005c6e:	d5cb      	bpl.n	8005c08 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c70:	f7fe fe68 	bl	8004944 <HAL_GetTick>
 8005c74:	1b80      	subs	r0, r0, r6
 8005c76:	4540      	cmp	r0, r8
 8005c78:	d9f7      	bls.n	8005c6a <HAL_RCC_OscConfig+0x24a>
 8005c7a:	e715      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c7c:	f7fe fe62 	bl	8004944 <HAL_GetTick>
 8005c80:	1b40      	subs	r0, r0, r5
 8005c82:	4540      	cmp	r0, r8
 8005c84:	d9bd      	bls.n	8005c02 <HAL_RCC_OscConfig+0x1e2>
 8005c86:	e70f      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	42470000 	.word	0x42470000
 8005c90:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c94:	4d37      	ldr	r5, [pc, #220]	@ (8005d74 <HAL_RCC_OscConfig+0x354>)
 8005c96:	68aa      	ldr	r2, [r5, #8]
 8005c98:	f002 020c 	and.w	r2, r2, #12
 8005c9c:	2a08      	cmp	r2, #8
 8005c9e:	d03e      	beq.n	8005d1e <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	4b35      	ldr	r3, [pc, #212]	@ (8005d78 <HAL_RCC_OscConfig+0x358>)
 8005ca4:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8005ca8:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005caa:	d12b      	bne.n	8005d04 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8005cac:	f7fe fe4a 	bl	8004944 <HAL_GetTick>
 8005cb0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb2:	682b      	ldr	r3, [r5, #0]
 8005cb4:	0199      	lsls	r1, r3, #6
 8005cb6:	d41f      	bmi.n	8005cf8 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cb8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005cc0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005cc4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005cc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005cca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005ccc:	0852      	lsrs	r2, r2, #1
 8005cce:	3a01      	subs	r2, #1
 8005cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005cd6:	4b28      	ldr	r3, [pc, #160]	@ (8005d78 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd8:	4d26      	ldr	r5, [pc, #152]	@ (8005d74 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8005cda:	2201      	movs	r2, #1
 8005cdc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005cde:	f7fe fe31 	bl	8004944 <HAL_GetTick>
 8005ce2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	019a      	lsls	r2, r3, #6
 8005ce8:	f53f aeb0 	bmi.w	8005a4c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cec:	f7fe fe2a 	bl	8004944 <HAL_GetTick>
 8005cf0:	1b00      	subs	r0, r0, r4
 8005cf2:	2802      	cmp	r0, #2
 8005cf4:	d9f6      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x2c4>
 8005cf6:	e6d7      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf8:	f7fe fe24 	bl	8004944 <HAL_GetTick>
 8005cfc:	1b80      	subs	r0, r0, r6
 8005cfe:	2802      	cmp	r0, #2
 8005d00:	d9d7      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x292>
 8005d02:	e6d1      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8005d04:	f7fe fe1e 	bl	8004944 <HAL_GetTick>
 8005d08:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	f57f ae9d 	bpl.w	8005a4c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d12:	f7fe fe17 	bl	8004944 <HAL_GetTick>
 8005d16:	1b00      	subs	r0, r0, r4
 8005d18:	2802      	cmp	r0, #2
 8005d1a:	d9f6      	bls.n	8005d0a <HAL_RCC_OscConfig+0x2ea>
 8005d1c:	e6c4      	b.n	8005aa8 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	f43f aeab 	beq.w	8005a7a <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8005d24:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d26:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d28:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d2c:	4291      	cmp	r1, r2
 8005d2e:	f47f aea4 	bne.w	8005a7a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d32:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d34:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d38:	428a      	cmp	r2, r1
 8005d3a:	f47f ae9e 	bne.w	8005a7a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d3e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d40:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005d44:	401a      	ands	r2, r3
 8005d46:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005d4a:	f47f ae96 	bne.w	8005a7a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d4e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005d50:	0852      	lsrs	r2, r2, #1
 8005d52:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005d56:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d58:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005d5c:	f47f ae8d 	bne.w	8005a7a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d60:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005d62:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d66:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005d6a:	bf14      	ite	ne
 8005d6c:	2001      	movne	r0, #1
 8005d6e:	2000      	moveq	r0, #0
 8005d70:	e69b      	b.n	8005aaa <HAL_RCC_OscConfig+0x8a>
 8005d72:	bf00      	nop
 8005d74:	40023800 	.word	0x40023800
 8005d78:	42470000 	.word	0x42470000

08005d7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d7c:	4913      	ldr	r1, [pc, #76]	@ (8005dcc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005d7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d80:	688b      	ldr	r3, [r1, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d01c      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x48>
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d11c      	bne.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d8e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d90:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d92:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d94:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d98:	bf14      	ite	ne
 8005d9a:	480d      	ldrne	r0, [pc, #52]	@ (8005dd0 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9c:	480d      	ldreq	r0, [pc, #52]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005da2:	bf18      	it	ne
 8005da4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005da6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005daa:	fba1 0100 	umull	r0, r1, r1, r0
 8005dae:	f7fa fa6f 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005db2:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <HAL_RCC_GetSysClockFreq+0x50>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005dba:	3301      	adds	r3, #1
 8005dbc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005dbe:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005dc2:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc4:	4802      	ldr	r0, [pc, #8]	@ (8005dd0 <HAL_RCC_GetSysClockFreq+0x54>)
 8005dc6:	e7fc      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8005dc8:	4802      	ldr	r0, [pc, #8]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005dca:	e7fa      	b.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	007a1200 	.word	0x007a1200
 8005dd4:	00f42400 	.word	0x00f42400

08005dd8 <HAL_RCC_ClockConfig>:
{
 8005dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ddc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005dde:	4604      	mov	r4, r0
 8005de0:	b910      	cbnz	r0, 8005de8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005de2:	2001      	movs	r0, #1
}
 8005de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005de8:	4b43      	ldr	r3, [pc, #268]	@ (8005ef8 <HAL_RCC_ClockConfig+0x120>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f002 020f 	and.w	r2, r2, #15
 8005df0:	428a      	cmp	r2, r1
 8005df2:	d328      	bcc.n	8005e46 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df4:	6821      	ldr	r1, [r4, #0]
 8005df6:	078f      	lsls	r7, r1, #30
 8005df8:	d42d      	bmi.n	8005e56 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dfa:	07c8      	lsls	r0, r1, #31
 8005dfc:	d440      	bmi.n	8005e80 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8005ef8 <HAL_RCC_ClockConfig+0x120>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	f002 020f 	and.w	r2, r2, #15
 8005e06:	42aa      	cmp	r2, r5
 8005e08:	d865      	bhi.n	8005ed6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	0751      	lsls	r1, r2, #29
 8005e0e:	d46b      	bmi.n	8005ee8 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e10:	0713      	lsls	r3, r2, #28
 8005e12:	d507      	bpl.n	8005e24 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e14:	4a39      	ldr	r2, [pc, #228]	@ (8005efc <HAL_RCC_ClockConfig+0x124>)
 8005e16:	6921      	ldr	r1, [r4, #16]
 8005e18:	6893      	ldr	r3, [r2, #8]
 8005e1a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005e1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005e22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e24:	f7ff ffaa 	bl	8005d7c <HAL_RCC_GetSysClockFreq>
 8005e28:	4b34      	ldr	r3, [pc, #208]	@ (8005efc <HAL_RCC_ClockConfig+0x124>)
 8005e2a:	4a35      	ldr	r2, [pc, #212]	@ (8005f00 <HAL_RCC_ClockConfig+0x128>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e32:	5cd3      	ldrb	r3, [r2, r3]
 8005e34:	40d8      	lsrs	r0, r3
 8005e36:	4b33      	ldr	r3, [pc, #204]	@ (8005f04 <HAL_RCC_ClockConfig+0x12c>)
 8005e38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005e3a:	4b33      	ldr	r3, [pc, #204]	@ (8005f08 <HAL_RCC_ClockConfig+0x130>)
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	f7fb fd0d 	bl	800185c <HAL_InitTick>
  return HAL_OK;
 8005e42:	2000      	movs	r0, #0
 8005e44:	e7ce      	b.n	8005de4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e46:	b2ca      	uxtb	r2, r1
 8005e48:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	428b      	cmp	r3, r1
 8005e52:	d1c6      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xa>
 8005e54:	e7ce      	b.n	8005df4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e56:	4b29      	ldr	r3, [pc, #164]	@ (8005efc <HAL_RCC_ClockConfig+0x124>)
 8005e58:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e5c:	bf1e      	ittt	ne
 8005e5e:	689a      	ldrne	r2, [r3, #8]
 8005e60:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8005e64:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e66:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e68:	bf42      	ittt	mi
 8005e6a:	689a      	ldrmi	r2, [r3, #8]
 8005e6c:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005e70:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68a0      	ldr	r0, [r4, #8]
 8005e76:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005e7a:	4302      	orrs	r2, r0
 8005e7c:	609a      	str	r2, [r3, #8]
 8005e7e:	e7bc      	b.n	8005dfa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e80:	6862      	ldr	r2, [r4, #4]
 8005e82:	4b1e      	ldr	r3, [pc, #120]	@ (8005efc <HAL_RCC_ClockConfig+0x124>)
 8005e84:	2a01      	cmp	r2, #1
 8005e86:	d11c      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8e:	d0a8      	beq.n	8005de2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e90:	4e1a      	ldr	r6, [pc, #104]	@ (8005efc <HAL_RCC_ClockConfig+0x124>)
 8005e92:	68b3      	ldr	r3, [r6, #8]
 8005e94:	f023 0303 	bic.w	r3, r3, #3
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005e9c:	f7fe fd52 	bl	8004944 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea0:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005ea4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea6:	68b3      	ldr	r3, [r6, #8]
 8005ea8:	6862      	ldr	r2, [r4, #4]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005eb2:	d0a4      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb4:	f7fe fd46 	bl	8004944 <HAL_GetTick>
 8005eb8:	1bc0      	subs	r0, r0, r7
 8005eba:	4540      	cmp	r0, r8
 8005ebc:	d9f3      	bls.n	8005ea6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8005ebe:	2003      	movs	r0, #3
 8005ec0:	e790      	b.n	8005de4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ec2:	1e91      	subs	r1, r2, #2
 8005ec4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ec8:	d802      	bhi.n	8005ed0 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eca:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005ece:	e7de      	b.n	8005e8e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed0:	f013 0f02 	tst.w	r3, #2
 8005ed4:	e7db      	b.n	8005e8e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	b2ea      	uxtb	r2, r5
 8005ed8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	42ab      	cmp	r3, r5
 8005ee2:	f47f af7e 	bne.w	8005de2 <HAL_RCC_ClockConfig+0xa>
 8005ee6:	e790      	b.n	8005e0a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee8:	4904      	ldr	r1, [pc, #16]	@ (8005efc <HAL_RCC_ClockConfig+0x124>)
 8005eea:	68e0      	ldr	r0, [r4, #12]
 8005eec:	688b      	ldr	r3, [r1, #8]
 8005eee:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	608b      	str	r3, [r1, #8]
 8005ef6:	e78b      	b.n	8005e10 <HAL_RCC_ClockConfig+0x38>
 8005ef8:	40023c00 	.word	0x40023c00
 8005efc:	40023800 	.word	0x40023800
 8005f00:	08015988 	.word	0x08015988
 8005f04:	20000078 	.word	0x20000078
 8005f08:	20000080 	.word	0x20000080

08005f0c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f0c:	4b04      	ldr	r3, [pc, #16]	@ (8005f20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005f0e:	4a05      	ldr	r2, [pc, #20]	@ (8005f24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005f16:	5cd3      	ldrb	r3, [r2, r3]
 8005f18:	4a03      	ldr	r2, [pc, #12]	@ (8005f28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005f1a:	6810      	ldr	r0, [r2, #0]
}
 8005f1c:	40d8      	lsrs	r0, r3
 8005f1e:	4770      	bx	lr
 8005f20:	40023800 	.word	0x40023800
 8005f24:	08015980 	.word	0x08015980
 8005f28:	20000078 	.word	0x20000078

08005f2c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f2c:	4b04      	ldr	r3, [pc, #16]	@ (8005f40 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005f2e:	4a05      	ldr	r2, [pc, #20]	@ (8005f44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005f36:	5cd3      	ldrb	r3, [r2, r3]
 8005f38:	4a03      	ldr	r2, [pc, #12]	@ (8005f48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005f3a:	6810      	ldr	r0, [r2, #0]
}
 8005f3c:	40d8      	lsrs	r0, r3
 8005f3e:	4770      	bx	lr
 8005f40:	40023800 	.word	0x40023800
 8005f44:	08015980 	.word	0x08015980
 8005f48:	20000078 	.word	0x20000078

08005f4c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f4c:	230f      	movs	r3, #15
 8005f4e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f50:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <HAL_RCC_GetClockConfig+0x34>)
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	f002 0203 	and.w	r2, r2, #3
 8005f58:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005f60:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005f68:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	08db      	lsrs	r3, r3, #3
 8005f6e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005f72:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f74:	4b03      	ldr	r3, [pc, #12]	@ (8005f84 <HAL_RCC_GetClockConfig+0x38>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	600b      	str	r3, [r1, #0]
}
 8005f7e:	4770      	bx	lr
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40023c00 	.word	0x40023c00

08005f88 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f88:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f8a:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8005f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f90:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f92:	f040 8088 	bne.w	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f013 0f0c 	tst.w	r3, #12
 8005f9c:	d045      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f9e:	4b8c      	ldr	r3, [pc, #560]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fa0:	4d8c      	ldr	r5, [pc, #560]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005fa6:	f7fe fccd 	bl	8004944 <HAL_GetTick>
 8005faa:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	0099      	lsls	r1, r3, #2
 8005fb0:	f100 80cb 	bmi.w	800614a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005fb4:	6821      	ldr	r1, [r4, #0]
 8005fb6:	074a      	lsls	r2, r1, #29
 8005fb8:	d515      	bpl.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005fba:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fbe:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005fc2:	061b      	lsls	r3, r3, #24
 8005fc4:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8005fc8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fd2:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8005fd6:	6a22      	ldr	r2, [r4, #32]
 8005fd8:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005fdc:	3a01      	subs	r2, #1
 8005fde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fe2:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fe6:	070b      	lsls	r3, r1, #28
 8005fe8:	d514      	bpl.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fea:	4a7a      	ldr	r2, [pc, #488]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fec:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fee:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ff2:	6920      	ldr	r0, [r4, #16]
 8005ff4:	071b      	lsls	r3, r3, #28
 8005ff6:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005ffa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005ffe:	430b      	orrs	r3, r1
 8006000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006004:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8006008:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800600a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800600e:	430b      	orrs	r3, r1
 8006010:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006014:	4b6e      	ldr	r3, [pc, #440]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006016:	4e6f      	ldr	r6, [pc, #444]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8006018:	2201      	movs	r2, #1
 800601a:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 800601c:	f7fe fc92 	bl	8004944 <HAL_GetTick>
 8006020:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006022:	6833      	ldr	r3, [r6, #0]
 8006024:	009f      	lsls	r7, r3, #2
 8006026:	f140 8097 	bpl.w	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	0698      	lsls	r0, r3, #26
 800602e:	d534      	bpl.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006030:	2300      	movs	r3, #0
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	4b67      	ldr	r3, [pc, #412]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006036:	4d68      	ldr	r5, [pc, #416]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800603a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800603e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006050:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006052:	f7fe fc77 	bl	8004944 <HAL_GetTick>
 8006056:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	05d8      	lsls	r0, r3, #23
 800605c:	f140 8083 	bpl.w	8006166 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006060:	4d5c      	ldr	r5, [pc, #368]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006062:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006064:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006066:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800606a:	f040 8083 	bne.w	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800606e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006070:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006074:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8006078:	4a56      	ldr	r2, [pc, #344]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800607a:	f040 809e 	bne.w	80061ba <HAL_RCCEx_PeriphCLKConfig+0x232>
 800607e:	6891      	ldr	r1, [r2, #8]
 8006080:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8006084:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8006088:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800608c:	4301      	orrs	r1, r0
 800608e:	6091      	str	r1, [r2, #8]
 8006090:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8006092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006096:	430b      	orrs	r3, r1
 8006098:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	06db      	lsls	r3, r3, #27
 800609e:	f100 8090 	bmi.w	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 80060a2:	2000      	movs	r0, #0
 80060a4:	e04f      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 80060a6:	4b4a      	ldr	r3, [pc, #296]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a8:	4e4a      	ldr	r6, [pc, #296]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 80060aa:	2200      	movs	r2, #0
 80060ac:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80060ae:	f7fe fc49 	bl	8004944 <HAL_GetTick>
 80060b2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	011f      	lsls	r7, r3, #4
 80060b8:	d43f      	bmi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060ba:	6821      	ldr	r1, [r4, #0]
 80060bc:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80060be:	bf41      	itttt	mi
 80060c0:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 80060c4:	071b      	lslmi	r3, r3, #28
 80060c6:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 80060ca:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80060ce:	078a      	lsls	r2, r1, #30
 80060d0:	d515      	bpl.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060d2:	4a40      	ldr	r2, [pc, #256]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80060d4:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060d6:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80060da:	6865      	ldr	r5, [r4, #4]
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80060e2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80060e6:	4303      	orrs	r3, r0
 80060e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060ec:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 80060f0:	69e3      	ldr	r3, [r4, #28]
 80060f2:	f020 001f 	bic.w	r0, r0, #31
 80060f6:	3b01      	subs	r3, #1
 80060f8:	4303      	orrs	r3, r0
 80060fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060fe:	064b      	lsls	r3, r1, #25
 8006100:	d50a      	bpl.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	6862      	ldr	r2, [r4, #4]
 8006106:	061b      	lsls	r3, r3, #24
 8006108:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800610c:	68a2      	ldr	r2, [r4, #8]
 800610e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006112:	4a30      	ldr	r2, [pc, #192]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006114:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006118:	4b2d      	ldr	r3, [pc, #180]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800611a:	4e2e      	ldr	r6, [pc, #184]	@ (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 800611c:	2201      	movs	r2, #1
 800611e:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8006120:	f7fe fc10 	bl	8004944 <HAL_GetTick>
 8006124:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006126:	6833      	ldr	r3, [r6, #0]
 8006128:	011f      	lsls	r7, r3, #4
 800612a:	f53f af34 	bmi.w	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800612e:	f7fe fc09 	bl	8004944 <HAL_GetTick>
 8006132:	1b40      	subs	r0, r0, r5
 8006134:	2802      	cmp	r0, #2
 8006136:	d9f6      	bls.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006138:	e004      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800613a:	f7fe fc03 	bl	8004944 <HAL_GetTick>
 800613e:	1b40      	subs	r0, r0, r5
 8006140:	2802      	cmp	r0, #2
 8006142:	d9b7      	bls.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8006144:	2003      	movs	r0, #3
}
 8006146:	b003      	add	sp, #12
 8006148:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800614a:	f7fe fbfb 	bl	8004944 <HAL_GetTick>
 800614e:	1b80      	subs	r0, r0, r6
 8006150:	2802      	cmp	r0, #2
 8006152:	f67f af2b 	bls.w	8005fac <HAL_RCCEx_PeriphCLKConfig+0x24>
 8006156:	e7f5      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006158:	f7fe fbf4 	bl	8004944 <HAL_GetTick>
 800615c:	1b40      	subs	r0, r0, r5
 800615e:	2802      	cmp	r0, #2
 8006160:	f67f af5f 	bls.w	8006022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8006164:	e7ee      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006166:	f7fe fbed 	bl	8004944 <HAL_GetTick>
 800616a:	1b80      	subs	r0, r0, r6
 800616c:	2802      	cmp	r0, #2
 800616e:	f67f af73 	bls.w	8006058 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8006172:	e7e7      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006174:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8006178:	4293      	cmp	r3, r2
 800617a:	f43f af78 	beq.w	800606e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800617e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006180:	4a13      	ldr	r2, [pc, #76]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006182:	2101      	movs	r1, #1
 8006184:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800618c:	2100      	movs	r1, #0
 800618e:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8006192:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006194:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006196:	07d9      	lsls	r1, r3, #31
 8006198:	f57f af69 	bpl.w	800606e <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 800619c:	f7fe fbd2 	bl	8004944 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061a0:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80061a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80061a8:	079a      	lsls	r2, r3, #30
 80061aa:	f53f af60 	bmi.w	800606e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ae:	f7fe fbc9 	bl	8004944 <HAL_GetTick>
 80061b2:	1b80      	subs	r0, r0, r6
 80061b4:	42b8      	cmp	r0, r7
 80061b6:	d9f6      	bls.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061b8:	e7c4      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ba:	6891      	ldr	r1, [r2, #8]
 80061bc:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80061c0:	e765      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80061c4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80061c8:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 80061cc:	e769      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80061ce:	bf00      	nop
 80061d0:	42470000 	.word	0x42470000
 80061d4:	40023800 	.word	0x40023800
 80061d8:	40007000 	.word	0x40007000
 80061dc:	42471000 	.word	0x42471000

080061e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80061e4:	4604      	mov	r4, r0
 80061e6:	b1c8      	cbz	r0, 800621c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80061e8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80061ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80061f0:	b91b      	cbnz	r3, 80061fa <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80061f2:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80061f6:	f7fb fa79 	bl	80016ec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061fa:	2302      	movs	r3, #2
 80061fc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006200:	1d21      	adds	r1, r4, #4
 8006202:	6820      	ldr	r0, [r4, #0]
 8006204:	f000 fe21 	bl	8006e4a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006208:	6862      	ldr	r2, [r4, #4]
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	4629      	mov	r1, r5
 800620e:	f000 fe52 	bl	8006eb6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006212:	2301      	movs	r3, #1
 8006214:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8006218:	2000      	movs	r0, #0
}
 800621a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800621c:	2001      	movs	r0, #1
 800621e:	e7fc      	b.n	800621a <HAL_SDRAM_Init+0x3a>

08006220 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006220:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006222:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006226:	2b02      	cmp	r3, #2
{
 8006228:	4605      	mov	r5, r0
 800622a:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800622c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800622e:	d012      	beq.n	8006256 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006230:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8006234:	2c01      	cmp	r4, #1
 8006236:	d10f      	bne.n	8006258 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006238:	2302      	movs	r3, #2
 800623a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800623e:	6828      	ldr	r0, [r5, #0]
 8006240:	f000 fe6f 	bl	8006f22 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006244:	6833      	ldr	r3, [r6, #0]
 8006246:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006248:	bf06      	itte	eq
 800624a:	2305      	moveq	r3, #5
 800624c:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006250:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006254:	2000      	movs	r0, #0
}
 8006256:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006258:	2001      	movs	r0, #1
 800625a:	e7fc      	b.n	8006256 <HAL_SDRAM_SendCommand+0x36>

0800625c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800625c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800625e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006262:	2b02      	cmp	r3, #2
{
 8006264:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006266:	b2d8      	uxtb	r0, r3
 8006268:	d00d      	beq.n	8006286 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800626a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800626e:	2b01      	cmp	r3, #1
 8006270:	b2dd      	uxtb	r5, r3
 8006272:	d109      	bne.n	8006288 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006274:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006276:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006278:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800627c:	f000 fe75 	bl	8006f6a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006280:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006284:	2000      	movs	r0, #0
}
 8006286:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006288:	2001      	movs	r0, #1
 800628a:	e7fc      	b.n	8006286 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800628c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800628c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006290:	461c      	mov	r4, r3
 8006292:	4616      	mov	r6, r2
 8006294:	460f      	mov	r7, r1
 8006296:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006298:	f7fe fb54 	bl	8004944 <HAL_GetTick>
 800629c:	4434      	add	r4, r6
 800629e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80062a0:	f7fe fb50 	bl	8004944 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062a4:	4b24      	ldr	r3, [pc, #144]	@ (8006338 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80062ac:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80062ae:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062b0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062b2:	682a      	ldr	r2, [r5, #0]
 80062b4:	6893      	ldr	r3, [r2, #8]
 80062b6:	ea37 0303 	bics.w	r3, r7, r3
 80062ba:	d001      	beq.n	80062c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 80062bc:	2000      	movs	r0, #0
 80062be:	e02e      	b.n	800631e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80062c0:	1c73      	adds	r3, r6, #1
 80062c2:	d0f7      	beq.n	80062b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062c4:	f7fe fb3e 	bl	8004944 <HAL_GetTick>
 80062c8:	eba0 0008 	sub.w	r0, r0, r8
 80062cc:	42a0      	cmp	r0, r4
 80062ce:	d329      	bcc.n	8006324 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062d8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062da:	686a      	ldr	r2, [r5, #4]
 80062dc:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80062e0:	d10a      	bne.n	80062f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80062e2:	68aa      	ldr	r2, [r5, #8]
 80062e4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80062e8:	d002      	beq.n	80062f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ea:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80062ee:	d103      	bne.n	80062f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062f6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062f8:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80062fa:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80062fe:	d107      	bne.n	8006310 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800630e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006310:	2301      	movs	r3, #1
 8006312:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006316:	2300      	movs	r3, #0
 8006318:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 800631c:	2003      	movs	r0, #3
}
 800631e:	b002      	add	sp, #8
 8006320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8006324:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006326:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006328:	2a00      	cmp	r2, #0
      count--;
 800632a:	f103 33ff 	add.w	r3, r3, #4294967295
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	bf08      	it	eq
 8006332:	4614      	moveq	r4, r2
 8006334:	e7bd      	b.n	80062b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8006336:	bf00      	nop
 8006338:	20000078 	.word	0x20000078

0800633c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006340:	6842      	ldr	r2, [r0, #4]
 8006342:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8006346:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006348:	d006      	beq.n	8006358 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800634a:	460a      	mov	r2, r1
 800634c:	2101      	movs	r1, #1
 800634e:	f7ff ff9d 	bl	800628c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006352:	b9b8      	cbnz	r0, 8006384 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006354:	2000      	movs	r0, #0
}
 8006356:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006358:	6882      	ldr	r2, [r0, #8]
 800635a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800635e:	d002      	beq.n	8006366 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006360:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006364:	d107      	bne.n	8006376 <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 8006366:	6825      	ldr	r5, [r4, #0]
 8006368:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800636a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 800636e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006372:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006374:	d003      	beq.n	800637e <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006376:	460a      	mov	r2, r1
 8006378:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800637a:	4620      	mov	r0, r4
 800637c:	e7e7      	b.n	800634e <SPI_EndRxTransaction+0x12>
 800637e:	460a      	mov	r2, r1
 8006380:	2101      	movs	r1, #1
 8006382:	e7fa      	b.n	800637a <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006384:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006386:	f043 0320 	orr.w	r3, r3, #32
 800638a:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800638c:	2003      	movs	r0, #3
 800638e:	e7e2      	b.n	8006356 <SPI_EndRxTransaction+0x1a>

08006390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006392:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006394:	4a12      	ldr	r2, [pc, #72]	@ (80063e0 <SPI_EndRxTxTransaction+0x50>)
 8006396:	6815      	ldr	r5, [r2, #0]
 8006398:	4a12      	ldr	r2, [pc, #72]	@ (80063e4 <SPI_EndRxTxTransaction+0x54>)
 800639a:	fbb5 f5f2 	udiv	r5, r5, r2
 800639e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063a2:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a4:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063a6:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 80063ac:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ae:	d10b      	bne.n	80063c8 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063b0:	460a      	mov	r2, r1
 80063b2:	2180      	movs	r1, #128	@ 0x80
 80063b4:	f7ff ff6a 	bl	800628c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80063b8:	b178      	cbz	r0, 80063da <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80063bc:	f043 0320 	orr.w	r3, r3, #32
 80063c0:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063c2:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80063c4:	b003      	add	sp, #12
 80063c6:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80063c8:	9b01      	ldr	r3, [sp, #4]
 80063ca:	b133      	cbz	r3, 80063da <SPI_EndRxTxTransaction+0x4a>
      count--;
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	d4f6      	bmi.n	80063c8 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80063da:	2000      	movs	r0, #0
 80063dc:	e7f2      	b.n	80063c4 <SPI_EndRxTxTransaction+0x34>
 80063de:	bf00      	nop
 80063e0:	20000078 	.word	0x20000078
 80063e4:	016e3600 	.word	0x016e3600

080063e8 <HAL_SPI_Init>:
{
 80063e8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80063ea:	4604      	mov	r4, r0
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d055      	beq.n	800649c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063f0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d14e      	bne.n	8006494 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063f6:	6842      	ldr	r2, [r0, #4]
 80063f8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80063fc:	d000      	beq.n	8006400 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063fe:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006400:	2300      	movs	r3, #0
 8006402:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006404:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006408:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800640c:	b923      	cbnz	r3, 8006418 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800640e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006412:	4620      	mov	r0, r4
 8006414:	f7fb f934 	bl	8001680 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006418:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800641a:	68a0      	ldr	r0, [r4, #8]
 800641c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800641e:	2302      	movs	r3, #2
 8006420:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8006424:	680b      	ldr	r3, [r1, #0]
 8006426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8006432:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006436:	4303      	orrs	r3, r0
 8006438:	68e0      	ldr	r0, [r4, #12]
 800643a:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800643e:	4303      	orrs	r3, r0
 8006440:	6920      	ldr	r0, [r4, #16]
 8006442:	f000 0002 	and.w	r0, r0, #2
 8006446:	4303      	orrs	r3, r0
 8006448:	6960      	ldr	r0, [r4, #20]
 800644a:	f000 0001 	and.w	r0, r0, #1
 800644e:	4303      	orrs	r3, r0
 8006450:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8006454:	4303      	orrs	r3, r0
 8006456:	69e0      	ldr	r0, [r4, #28]
 8006458:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800645c:	4303      	orrs	r3, r0
 800645e:	6a20      	ldr	r0, [r4, #32]
 8006460:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8006464:	4303      	orrs	r3, r0
 8006466:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006468:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 800646c:	4303      	orrs	r3, r0
 800646e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006470:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006472:	0c12      	lsrs	r2, r2, #16
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	f002 0204 	and.w	r2, r2, #4
 800647c:	431a      	orrs	r2, r3
 800647e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006480:	69cb      	ldr	r3, [r1, #28]
 8006482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006486:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006488:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800648a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800648c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800648e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8006492:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006494:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800649a:	e7b1      	b.n	8006400 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800649c:	2001      	movs	r0, #1
 800649e:	e7f8      	b.n	8006492 <HAL_SPI_Init+0xaa>

080064a0 <HAL_SPI_Transmit>:
{
 80064a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064a4:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80064a6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80064aa:	2b01      	cmp	r3, #1
{
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80064b2:	f000 80a0 	beq.w	80065f6 <HAL_SPI_Transmit+0x156>
 80064b6:	2301      	movs	r3, #1
 80064b8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80064bc:	f7fe fa42 	bl	8004944 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80064c0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80064c4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80064c6:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80064c8:	b2d8      	uxtb	r0, r3
 80064ca:	f040 8092 	bne.w	80065f2 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	d061      	beq.n	8006596 <HAL_SPI_Transmit+0xf6>
 80064d2:	f1b8 0f00 	cmp.w	r8, #0
 80064d6:	d05e      	beq.n	8006596 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064d8:	2303      	movs	r3, #3
 80064da:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064de:	2300      	movs	r3, #0
 80064e0:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 80064e2:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 80064e6:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064ea:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80064ec:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80064ee:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f0:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80064f2:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064f4:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80064fa:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fe:	d107      	bne.n	8006510 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006506:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006508:	6833      	ldr	r3, [r6, #0]
 800650a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800650e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006510:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006512:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006514:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006516:	bf5e      	ittt	pl
 8006518:	6833      	ldrpl	r3, [r6, #0]
 800651a:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 800651e:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006520:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006524:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006526:	d13f      	bne.n	80065a8 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006528:	b113      	cbz	r3, 8006530 <HAL_SPI_Transmit+0x90>
 800652a:	f1b8 0f01 	cmp.w	r8, #1
 800652e:	d107      	bne.n	8006540 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006530:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006534:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006536:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006538:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800653a:	3b01      	subs	r3, #1
 800653c:	b29b      	uxth	r3, r3
 800653e:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006540:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006542:	b29b      	uxth	r3, r3
 8006544:	b9a3      	cbnz	r3, 8006570 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006546:	464a      	mov	r2, r9
 8006548:	4639      	mov	r1, r7
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff ff20 	bl	8006390 <SPI_EndRxTxTransaction>
 8006550:	2800      	cmp	r0, #0
 8006552:	d14b      	bne.n	80065ec <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006554:	68a3      	ldr	r3, [r4, #8]
 8006556:	b933      	cbnz	r3, 8006566 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	9201      	str	r2, [sp, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	9301      	str	r3, [sp, #4]
 8006564:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006566:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006568:	3800      	subs	r0, #0
 800656a:	bf18      	it	ne
 800656c:	2001      	movne	r0, #1
error:
 800656e:	e012      	b.n	8006596 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	6893      	ldr	r3, [r2, #8]
 8006574:	0798      	lsls	r0, r3, #30
 8006576:	d505      	bpl.n	8006584 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006578:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800657a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800657e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006580:	6323      	str	r3, [r4, #48]	@ 0x30
 8006582:	e7d9      	b.n	8006538 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006584:	f7fe f9de 	bl	8004944 <HAL_GetTick>
 8006588:	eba0 0009 	sub.w	r0, r0, r9
 800658c:	42b8      	cmp	r0, r7
 800658e:	d3d7      	bcc.n	8006540 <HAL_SPI_Transmit+0xa0>
 8006590:	1c79      	adds	r1, r7, #1
 8006592:	d0d5      	beq.n	8006540 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8006594:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006596:	2301      	movs	r3, #1
 8006598:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800659c:	2300      	movs	r3, #0
 800659e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80065a2:	b003      	add	sp, #12
 80065a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a8:	b113      	cbz	r3, 80065b0 <HAL_SPI_Transmit+0x110>
 80065aa:	f1b8 0f01 	cmp.w	r8, #1
 80065ae:	d108      	bne.n	80065c2 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b0:	782b      	ldrb	r3, [r5, #0]
 80065b2:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065b6:	3301      	adds	r3, #1
 80065b8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80065ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29b      	uxth	r3, r3
 80065c0:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80065c2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0bd      	beq.n	8006546 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	0792      	lsls	r2, r2, #30
 80065d0:	d503      	bpl.n	80065da <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	731a      	strb	r2, [r3, #12]
 80065d8:	e7ec      	b.n	80065b4 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065da:	f7fe f9b3 	bl	8004944 <HAL_GetTick>
 80065de:	eba0 0009 	sub.w	r0, r0, r9
 80065e2:	42b8      	cmp	r0, r7
 80065e4:	d3ed      	bcc.n	80065c2 <HAL_SPI_Transmit+0x122>
 80065e6:	1c7b      	adds	r3, r7, #1
 80065e8:	d0eb      	beq.n	80065c2 <HAL_SPI_Transmit+0x122>
 80065ea:	e7d3      	b.n	8006594 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065ec:	2320      	movs	r3, #32
 80065ee:	6563      	str	r3, [r4, #84]	@ 0x54
 80065f0:	e7b0      	b.n	8006554 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 80065f2:	2002      	movs	r0, #2
 80065f4:	e7cf      	b.n	8006596 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 80065f6:	2002      	movs	r0, #2
 80065f8:	e7d3      	b.n	80065a2 <HAL_SPI_Transmit+0x102>

080065fa <HAL_SPI_TransmitReceive>:
{
 80065fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065fe:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006600:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8006604:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8006608:	2b01      	cmp	r3, #1
{
 800660a:	4604      	mov	r4, r0
 800660c:	460d      	mov	r5, r1
 800660e:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006610:	f000 80e1 	beq.w	80067d6 <HAL_SPI_TransmitReceive+0x1dc>
 8006614:	2301      	movs	r3, #1
 8006616:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800661a:	f7fe f993 	bl	8004944 <HAL_GetTick>
  tmp_state           = hspi->State;
 800661e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8006622:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006624:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006626:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8006628:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800662a:	d00a      	beq.n	8006642 <HAL_SPI_TransmitReceive+0x48>
 800662c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006630:	f040 80cf 	bne.w	80067d2 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 80cb 	bne.w	80067d2 <HAL_SPI_TransmitReceive+0x1d8>
 800663c:	2904      	cmp	r1, #4
 800663e:	f040 80c8 	bne.w	80067d2 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006642:	b115      	cbz	r5, 800664a <HAL_SPI_TransmitReceive+0x50>
 8006644:	f1b9 0f00 	cmp.w	r9, #0
 8006648:	d109      	bne.n	800665e <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 800664a:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 800664c:	2301      	movs	r3, #1
 800664e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006652:	2300      	movs	r3, #0
 8006654:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006658:	b003      	add	sp, #12
 800665a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800665e:	2e00      	cmp	r6, #0
 8006660:	d0f3      	beq.n	800664a <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006662:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006666:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800666a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800666c:	bf1c      	itt	ne
 800666e:	2305      	movne	r3, #5
 8006670:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006674:	2300      	movs	r3, #0
 8006676:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8006678:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800667c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800667e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8006680:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006682:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8006684:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006686:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8006688:	bf58      	it	pl
 800668a:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800668c:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 800668e:	bf58      	it	pl
 8006690:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8006694:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8006696:	bf58      	it	pl
 8006698:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800669a:	68e1      	ldr	r1, [r4, #12]
 800669c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80066a0:	d148      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a2:	b10a      	cbz	r2, 80066a8 <HAL_SPI_TransmitReceive+0xae>
 80066a4:	2e01      	cmp	r6, #1
 80066a6:	d107      	bne.n	80066b8 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80066ac:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80066ae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80066b8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80066bc:	b29b      	uxth	r3, r3
 80066be:	b963      	cbnz	r3, 80066da <HAL_SPI_TransmitReceive+0xe0>
 80066c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	b94b      	cbnz	r3, 80066da <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066c6:	463a      	mov	r2, r7
 80066c8:	4641      	mov	r1, r8
 80066ca:	4620      	mov	r0, r4
 80066cc:	f7ff fe60 	bl	8006390 <SPI_EndRxTxTransaction>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d072      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d4:	2320      	movs	r3, #32
 80066d6:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 80066d8:	e7b7      	b.n	800664a <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	688b      	ldr	r3, [r1, #8]
 80066de:	079a      	lsls	r2, r3, #30
 80066e0:	d50d      	bpl.n	80066fe <HAL_SPI_TransmitReceive+0x104>
 80066e2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	b153      	cbz	r3, 80066fe <HAL_SPI_TransmitReceive+0x104>
 80066e8:	b145      	cbz	r5, 80066fc <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80066ec:	f833 2b02 	ldrh.w	r2, [r3], #2
 80066f0:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f2:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80066f4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 80066fc:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066fe:	688a      	ldr	r2, [r1, #8]
 8006700:	f012 0201 	ands.w	r2, r2, #1
 8006704:	d00c      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x126>
 8006706:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006708:	b29b      	uxth	r3, r3
 800670a:	b14b      	cbz	r3, 8006720 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800670c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800670e:	68c9      	ldr	r1, [r1, #12]
 8006710:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006714:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006716:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006718:	3b01      	subs	r3, #1
 800671a:	b29b      	uxth	r3, r3
 800671c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800671e:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006720:	f7fe f910 	bl	8004944 <HAL_GetTick>
 8006724:	1bc0      	subs	r0, r0, r7
 8006726:	4540      	cmp	r0, r8
 8006728:	d3c7      	bcc.n	80066ba <HAL_SPI_TransmitReceive+0xc0>
 800672a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800672e:	d0c4      	beq.n	80066ba <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 8006730:	2003      	movs	r0, #3
 8006732:	e78b      	b.n	800664c <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006734:	b10a      	cbz	r2, 800673a <HAL_SPI_TransmitReceive+0x140>
 8006736:	2e01      	cmp	r6, #1
 8006738:	d108      	bne.n	800674c <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800673a:	782a      	ldrb	r2, [r5, #0]
 800673c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800673e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006740:	3301      	adds	r3, #1
 8006742:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006744:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006746:	3b01      	subs	r3, #1
 8006748:	b29b      	uxth	r3, r3
 800674a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800674c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800674e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006750:	b29b      	uxth	r3, r3
 8006752:	b91b      	cbnz	r3, 800675c <HAL_SPI_TransmitReceive+0x162>
 8006754:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0b4      	beq.n	80066c6 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	6893      	ldr	r3, [r2, #8]
 8006760:	079b      	lsls	r3, r3, #30
 8006762:	d50e      	bpl.n	8006782 <HAL_SPI_TransmitReceive+0x188>
 8006764:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006766:	b29b      	uxth	r3, r3
 8006768:	b15b      	cbz	r3, 8006782 <HAL_SPI_TransmitReceive+0x188>
 800676a:	b14d      	cbz	r5, 8006780 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800676c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8006772:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006774:	3301      	adds	r3, #1
 8006776:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006778:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800677a:	3b01      	subs	r3, #1
 800677c:	b29b      	uxth	r3, r3
 800677e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006780:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	6891      	ldr	r1, [r2, #8]
 8006786:	f011 0101 	ands.w	r1, r1, #1
 800678a:	d00d      	beq.n	80067a8 <HAL_SPI_TransmitReceive+0x1ae>
 800678c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800678e:	b29b      	uxth	r3, r3
 8006790:	b153      	cbz	r3, 80067a8 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006792:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006794:	68d2      	ldr	r2, [r2, #12]
 8006796:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006798:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800679a:	3301      	adds	r3, #1
 800679c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800679e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80067a6:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067a8:	f7fe f8cc 	bl	8004944 <HAL_GetTick>
 80067ac:	1bc0      	subs	r0, r0, r7
 80067ae:	4540      	cmp	r0, r8
 80067b0:	d3cd      	bcc.n	800674e <HAL_SPI_TransmitReceive+0x154>
 80067b2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80067b6:	d0ca      	beq.n	800674e <HAL_SPI_TransmitReceive+0x154>
 80067b8:	e7ba      	b.n	8006730 <HAL_SPI_TransmitReceive+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f47f af45 	bne.w	800664c <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	9001      	str	r0, [sp, #4]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	9201      	str	r2, [sp, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	9b01      	ldr	r3, [sp, #4]
 80067d0:	e73c      	b.n	800664c <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 80067d2:	2002      	movs	r0, #2
 80067d4:	e73a      	b.n	800664c <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 80067d6:	2002      	movs	r0, #2
 80067d8:	e73e      	b.n	8006658 <HAL_SPI_TransmitReceive+0x5e>

080067da <HAL_SPI_Receive>:
{
 80067da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067de:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80067e0:	6843      	ldr	r3, [r0, #4]
 80067e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80067e6:	4604      	mov	r4, r0
 80067e8:	4689      	mov	r9, r1
 80067ea:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80067ec:	d10c      	bne.n	8006808 <HAL_SPI_Receive+0x2e>
 80067ee:	6883      	ldr	r3, [r0, #8]
 80067f0:	b953      	cbnz	r3, 8006808 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80067f2:	2304      	movs	r3, #4
 80067f4:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80067f8:	4613      	mov	r3, r2
 80067fa:	9500      	str	r5, [sp, #0]
 80067fc:	460a      	mov	r2, r1
 80067fe:	f7ff fefc 	bl	80065fa <HAL_SPI_TransmitReceive>
}
 8006802:	b003      	add	sp, #12
 8006804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006808:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800680c:	2b01      	cmp	r3, #1
 800680e:	d07f      	beq.n	8006910 <HAL_SPI_Receive+0x136>
 8006810:	2301      	movs	r3, #1
 8006812:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8006816:	f7fe f895 	bl	8004944 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800681a:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800681e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006820:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006822:	b2d8      	uxtb	r0, r3
 8006824:	d172      	bne.n	800690c <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 8006826:	f1b9 0f00 	cmp.w	r9, #0
 800682a:	d05c      	beq.n	80068e6 <HAL_SPI_Receive+0x10c>
 800682c:	2f00      	cmp	r7, #0
 800682e:	d05a      	beq.n	80068e6 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006830:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006832:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006836:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006838:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800683e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 8006842:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006846:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 8006848:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800684a:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800684c:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800684e:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006850:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006852:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006854:	d107      	bne.n	8006866 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800685c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006864:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800686a:	bf5e      	ittt	pl
 800686c:	681a      	ldrpl	r2, [r3, #0]
 800686e:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006872:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006874:	68e3      	ldr	r3, [r4, #12]
 8006876:	b1f3      	cbz	r3, 80068b6 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8006878:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800687a:	b29b      	uxth	r3, r3
 800687c:	b1fb      	cbz	r3, 80068be <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	07d2      	lsls	r2, r2, #31
 8006884:	d536      	bpl.n	80068f4 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800688a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800688e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006890:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006892:	3b01      	subs	r3, #1
 8006894:	b29b      	uxth	r3, r3
 8006896:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006898:	e7ee      	b.n	8006878 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	07d0      	lsls	r0, r2, #31
 80068a0:	d518      	bpl.n	80068d4 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80068a4:	7b1b      	ldrb	r3, [r3, #12]
 80068a6:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80068aa:	3301      	adds	r3, #1
 80068ac:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80068ae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80068b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1ed      	bne.n	800689a <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068be:	4642      	mov	r2, r8
 80068c0:	4629      	mov	r1, r5
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff fd3a 	bl	800633c <SPI_EndRxTransaction>
 80068c8:	b9e8      	cbnz	r0, 8006906 <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ca:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80068cc:	3800      	subs	r0, #0
 80068ce:	bf18      	it	ne
 80068d0:	2001      	movne	r0, #1
error :
 80068d2:	e008      	b.n	80068e6 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d4:	f7fe f836 	bl	8004944 <HAL_GetTick>
 80068d8:	eba0 0008 	sub.w	r0, r0, r8
 80068dc:	42a8      	cmp	r0, r5
 80068de:	d3ea      	bcc.n	80068b6 <HAL_SPI_Receive+0xdc>
 80068e0:	1c69      	adds	r1, r5, #1
 80068e2:	d0e8      	beq.n	80068b6 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 80068e4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80068ec:	2300      	movs	r3, #0
 80068ee:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 80068f2:	e786      	b.n	8006802 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068f4:	f7fe f826 	bl	8004944 <HAL_GetTick>
 80068f8:	eba0 0008 	sub.w	r0, r0, r8
 80068fc:	42a8      	cmp	r0, r5
 80068fe:	d3bb      	bcc.n	8006878 <HAL_SPI_Receive+0x9e>
 8006900:	1c6b      	adds	r3, r5, #1
 8006902:	d0b9      	beq.n	8006878 <HAL_SPI_Receive+0x9e>
 8006904:	e7ee      	b.n	80068e4 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006906:	2320      	movs	r3, #32
 8006908:	6563      	str	r3, [r4, #84]	@ 0x54
 800690a:	e7de      	b.n	80068ca <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 800690c:	2002      	movs	r0, #2
 800690e:	e7ea      	b.n	80068e6 <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8006910:	2002      	movs	r0, #2
 8006912:	e776      	b.n	8006802 <HAL_SPI_Receive+0x28>

08006914 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006914:	4770      	bx	lr
	...

08006918 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006918:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800691c:	2b01      	cmp	r3, #1
 800691e:	d130      	bne.n	8006982 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	2302      	movs	r3, #2
 8006922:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006926:	6803      	ldr	r3, [r0, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006930:	4a15      	ldr	r2, [pc, #84]	@ (8006988 <HAL_TIM_Base_Start_IT+0x70>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01a      	beq.n	800696c <HAL_TIM_Base_Start_IT+0x54>
 8006936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800693a:	d017      	beq.n	800696c <HAL_TIM_Base_Start_IT+0x54>
 800693c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <HAL_TIM_Base_Start_IT+0x54>
 8006944:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006948:	4293      	cmp	r3, r2
 800694a:	d00f      	beq.n	800696c <HAL_TIM_Base_Start_IT+0x54>
 800694c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <HAL_TIM_Base_Start_IT+0x54>
 8006954:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <HAL_TIM_Base_Start_IT+0x54>
 800695c:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <HAL_TIM_Base_Start_IT+0x54>
 8006964:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006968:	4293      	cmp	r3, r2
 800696a:	d104      	bne.n	8006976 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006972:	2a06      	cmp	r2, #6
 8006974:	d003      	beq.n	800697e <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	f042 0201 	orr.w	r2, r2, #1
 800697c:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800697e:	2000      	movs	r0, #0
 8006980:	4770      	bx	lr
    return HAL_ERROR;
 8006982:	2001      	movs	r0, #1
}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000

0800698c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800698c:	4770      	bx	lr

0800698e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800698e:	4770      	bx	lr

08006990 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006990:	4770      	bx	lr

08006992 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006992:	4770      	bx	lr

08006994 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006994:	6803      	ldr	r3, [r0, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	0791      	lsls	r1, r2, #30
{
 800699a:	b510      	push	{r4, lr}
 800699c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800699e:	d50e      	bpl.n	80069be <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	0792      	lsls	r2, r2, #30
 80069a4:	d50b      	bpl.n	80069be <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069a6:	f06f 0202 	mvn.w	r2, #2
 80069aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ac:	2201      	movs	r2, #1
 80069ae:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	079b      	lsls	r3, r3, #30
 80069b4:	d077      	beq.n	8006aa6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	f7ff ffea 	bl	800698e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ba:	2300      	movs	r3, #0
 80069bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	0750      	lsls	r0, r2, #29
 80069c4:	d510      	bpl.n	80069e8 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	0751      	lsls	r1, r2, #29
 80069ca:	d50d      	bpl.n	80069e8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069cc:	f06f 0204 	mvn.w	r2, #4
 80069d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d2:	2202      	movs	r2, #2
 80069d4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80069dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069de:	d068      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80069e0:	f7ff ffd5 	bl	800698e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e4:	2300      	movs	r3, #0
 80069e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	0712      	lsls	r2, r2, #28
 80069ee:	d50f      	bpl.n	8006a10 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	0710      	lsls	r0, r2, #28
 80069f4:	d50c      	bpl.n	8006a10 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069f6:	f06f 0208 	mvn.w	r2, #8
 80069fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069fc:	2204      	movs	r2, #4
 80069fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006a04:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a06:	d05a      	beq.n	8006abe <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a08:	f7ff ffc1 	bl	800698e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	06d2      	lsls	r2, r2, #27
 8006a16:	d510      	bpl.n	8006a3a <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	06d0      	lsls	r0, r2, #27
 8006a1c:	d50d      	bpl.n	8006a3a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a1e:	f06f 0210 	mvn.w	r2, #16
 8006a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a24:	2208      	movs	r2, #8
 8006a26:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a30:	d04b      	beq.n	8006aca <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	f7ff ffac 	bl	800698e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	2300      	movs	r3, #0
 8006a38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	07d1      	lsls	r1, r2, #31
 8006a40:	d508      	bpl.n	8006a54 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	07d2      	lsls	r2, r2, #31
 8006a46:	d505      	bpl.n	8006a54 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a48:	f06f 0201 	mvn.w	r2, #1
 8006a4c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f7fa fc3a 	bl	80012c8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	0610      	lsls	r0, r2, #24
 8006a5a:	d508      	bpl.n	8006a6e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	0611      	lsls	r1, r2, #24
 8006a60:	d505      	bpl.n	8006a6e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a62:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 f8b2 	bl	8006bd2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	0652      	lsls	r2, r2, #25
 8006a74:	d508      	bpl.n	8006a88 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	0650      	lsls	r0, r2, #25
 8006a7a:	d505      	bpl.n	8006a88 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a80:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006a82:	4620      	mov	r0, r4
 8006a84:	f7ff ff85 	bl	8006992 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	0691      	lsls	r1, r2, #26
 8006a8e:	d522      	bpl.n	8006ad6 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	0692      	lsls	r2, r2, #26
 8006a94:	d51f      	bpl.n	8006ad6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a96:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006a9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a9c:	611a      	str	r2, [r3, #16]
}
 8006a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006aa2:	f000 b895 	b.w	8006bd0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa6:	f7ff ff71 	bl	800698c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f7ff ff70 	bl	8006990 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ab0:	e783      	b.n	80069ba <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	f7ff ff6b 	bl	800698c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7ff ff6a 	bl	8006990 <HAL_TIM_PWM_PulseFinishedCallback>
 8006abc:	e792      	b.n	80069e4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	f7ff ff65 	bl	800698c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7ff ff64 	bl	8006990 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ac8:	e7a0      	b.n	8006a0c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aca:	f7ff ff5f 	bl	800698c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f7ff ff5e 	bl	8006990 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ad4:	e7af      	b.n	8006a36 <HAL_TIM_IRQHandler+0xa2>
}
 8006ad6:	bd10      	pop	{r4, pc}

08006ad8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ad8:	4a25      	ldr	r2, [pc, #148]	@ (8006b70 <TIM_Base_SetConfig+0x98>)
  tmpcr1 = TIMx->CR1;
 8006ada:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006adc:	4290      	cmp	r0, r2
 8006ade:	d012      	beq.n	8006b06 <TIM_Base_SetConfig+0x2e>
 8006ae0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006ae4:	d00f      	beq.n	8006b06 <TIM_Base_SetConfig+0x2e>
 8006ae6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006aea:	4290      	cmp	r0, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_Base_SetConfig+0x2e>
 8006aee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006af2:	4290      	cmp	r0, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0x2e>
 8006af6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006afa:	4290      	cmp	r0, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0x2e>
 8006afe:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006b02:	4290      	cmp	r0, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006b06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b0c:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b14:	4313      	orrs	r3, r2
 8006b16:	e016      	b.n	8006b46 <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b18:	4a16      	ldr	r2, [pc, #88]	@ (8006b74 <TIM_Base_SetConfig+0x9c>)
 8006b1a:	4290      	cmp	r0, r2
 8006b1c:	d0f7      	beq.n	8006b0e <TIM_Base_SetConfig+0x36>
 8006b1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b22:	4290      	cmp	r0, r2
 8006b24:	d0f3      	beq.n	8006b0e <TIM_Base_SetConfig+0x36>
 8006b26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b2a:	4290      	cmp	r0, r2
 8006b2c:	d0ef      	beq.n	8006b0e <TIM_Base_SetConfig+0x36>
 8006b2e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8006b32:	4290      	cmp	r0, r2
 8006b34:	d0eb      	beq.n	8006b0e <TIM_Base_SetConfig+0x36>
 8006b36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b3a:	4290      	cmp	r0, r2
 8006b3c:	d0e7      	beq.n	8006b0e <TIM_Base_SetConfig+0x36>
 8006b3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b42:	4290      	cmp	r0, r2
 8006b44:	d0e3      	beq.n	8006b0e <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b46:	694a      	ldr	r2, [r1, #20]
 8006b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b4c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006b4e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b50:	688b      	ldr	r3, [r1, #8]
 8006b52:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b54:	680b      	ldr	r3, [r1, #0]
 8006b56:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b58:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <TIM_Base_SetConfig+0x98>)
 8006b5a:	4298      	cmp	r0, r3
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0x8e>
 8006b5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b62:	4298      	cmp	r0, r3
 8006b64:	d101      	bne.n	8006b6a <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b66:	690b      	ldr	r3, [r1, #16]
 8006b68:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	6143      	str	r3, [r0, #20]
}
 8006b6e:	4770      	bx	lr
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40014000 	.word	0x40014000

08006b78 <HAL_TIM_Base_Init>:
{
 8006b78:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	b330      	cbz	r0, 8006bcc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b7e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006b82:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006b86:	b91b      	cbnz	r3, 8006b90 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006b88:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006b8c:	f7ff fec2 	bl	8006914 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b92:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b98:	1d21      	adds	r1, r4, #4
 8006b9a:	f7ff ff9d 	bl	8006ad8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8006ba4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006baa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006bae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006bb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bbe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006bc2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006bc6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006bca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006bcc:	2001      	movs	r0, #1
 8006bce:	e7fc      	b.n	8006bca <HAL_TIM_Base_Init+0x52>

08006bd0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006bd0:	4770      	bx	lr

08006bd2 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006bd2:	4770      	bx	lr

08006bd4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	f102 030c 	add.w	r3, r2, #12
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	320c      	adds	r2, #12
 8006be4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006be8:	6802      	ldr	r2, [r0, #0]
 8006bea:	2900      	cmp	r1, #0
 8006bec:	d1f2      	bne.n	8006bd4 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	f102 0314 	add.w	r3, r2, #20
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	f102 0c14 	add.w	ip, r2, #20
 8006bfe:	e84c 3100 	strex	r1, r3, [ip]
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d1f3      	bne.n	8006bee <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d10b      	bne.n	8006c24 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	f102 030c 	add.w	r3, r2, #12
 8006c10:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c14:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	f102 0c0c 	add.w	ip, r2, #12
 8006c1c:	e84c 3100 	strex	r1, r3, [ip]
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d1f3      	bne.n	8006c0c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c24:	2320      	movs	r3, #32
 8006c26:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8006c2e:	4770      	bx	lr

08006c30 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c30:	6802      	ldr	r2, [r0, #0]
 8006c32:	68c1      	ldr	r1, [r0, #12]
{
 8006c34:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c36:	6913      	ldr	r3, [r2, #16]
 8006c38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6113      	str	r3, [r2, #16]
{
 8006c40:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c42:	6883      	ldr	r3, [r0, #8]
 8006c44:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006c46:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c48:	4303      	orrs	r3, r0
 8006c4a:	6968      	ldr	r0, [r5, #20]
 8006c4c:	4303      	orrs	r3, r0
 8006c4e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006c50:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8006c54:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c58:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c5e:	6953      	ldr	r3, [r2, #20]
 8006c60:	69a9      	ldr	r1, [r5, #24]
 8006c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c66:	430b      	orrs	r3, r1
 8006c68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce8 <UART_SetConfig+0xb8>)
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d003      	beq.n	8006c78 <UART_SetConfig+0x48>
 8006c70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d124      	bne.n	8006cc2 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c78:	f7ff f958 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7c:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c7e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c80:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c84:	e9d5 4300 	ldrd	r4, r3, [r5]
 8006c88:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c8c:	d11c      	bne.n	8006cc8 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c8e:	18da      	adds	r2, r3, r3
 8006c90:	f04f 0500 	mov.w	r5, #0
 8006c94:	eb45 0305 	adc.w	r3, r5, r5
 8006c98:	f7f9 fafa 	bl	8000290 <__aeabi_uldivmod>
 8006c9c:	2264      	movs	r2, #100	@ 0x64
 8006c9e:	fbb0 f1f2 	udiv	r1, r0, r2
 8006ca2:	fb02 0311 	mls	r3, r2, r1, r0
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	3332      	adds	r3, #50	@ 0x32
 8006caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cae:	f003 0207 	and.w	r2, r3, #7
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006cb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006cbc:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cbe:	60a3      	str	r3, [r4, #8]
  }
}
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cc2:	f7ff f923 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8006cc6:	e7d9      	b.n	8006c7c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cc8:	009a      	lsls	r2, r3, #2
 8006cca:	0f9b      	lsrs	r3, r3, #30
 8006ccc:	f7f9 fae0 	bl	8000290 <__aeabi_uldivmod>
 8006cd0:	2264      	movs	r2, #100	@ 0x64
 8006cd2:	fbb0 f1f2 	udiv	r1, r0, r2
 8006cd6:	fb02 0311 	mls	r3, r2, r1, r0
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	3332      	adds	r3, #50	@ 0x32
 8006cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ce2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006ce6:	e7ea      	b.n	8006cbe <UART_SetConfig+0x8e>
 8006ce8:	40011000 	.word	0x40011000

08006cec <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8006cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cee:	4605      	mov	r5, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	4617      	mov	r7, r2
 8006cf4:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf6:	682a      	ldr	r2, [r5, #0]
 8006cf8:	6813      	ldr	r3, [r2, #0]
 8006cfa:	ea34 0303 	bics.w	r3, r4, r3
 8006cfe:	d101      	bne.n	8006d04 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8006d00:	2000      	movs	r0, #0
 8006d02:	e021      	b.n	8006d48 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006d04:	1c70      	adds	r0, r6, #1
 8006d06:	d0f7      	beq.n	8006cf8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d08:	f7fd fe1c 	bl	8004944 <HAL_GetTick>
 8006d0c:	1bc0      	subs	r0, r0, r7
 8006d0e:	4286      	cmp	r6, r0
 8006d10:	d31c      	bcc.n	8006d4c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8006d12:	b1de      	cbz	r6, 8006d4c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	0751      	lsls	r1, r2, #29
 8006d1a:	d5ec      	bpl.n	8006cf6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006d1c:	2c80      	cmp	r4, #128	@ 0x80
 8006d1e:	d0ea      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006d20:	2c40      	cmp	r4, #64	@ 0x40
 8006d22:	d0e8      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	0712      	lsls	r2, r2, #28
 8006d28:	d5e5      	bpl.n	8006cf6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	9401      	str	r4, [sp, #4]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	9201      	str	r2, [sp, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006d36:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d38:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006d3a:	f7ff ff4b 	bl	8006bd4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d3e:	2308      	movs	r3, #8
 8006d40:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8006d42:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8006d46:	2001      	movs	r0, #1
}
 8006d48:	b003      	add	sp, #12
 8006d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006d4c:	2003      	movs	r0, #3
 8006d4e:	e7fb      	b.n	8006d48 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08006d50 <HAL_UART_Init>:
{
 8006d50:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006d52:	4604      	mov	r4, r0
 8006d54:	b348      	cbz	r0, 8006daa <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006d56:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006d5a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006d5e:	b91b      	cbnz	r3, 8006d68 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006d60:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8006d64:	f7fa fd2e 	bl	80017c4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006d68:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006d6a:	2324      	movs	r3, #36	@ 0x24
 8006d6c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8006d70:	68d3      	ldr	r3, [r2, #12]
 8006d72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d76:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff ff59 	bl	8006c30 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d8e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d96:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d98:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006d9a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006da2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006da6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8006da8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006daa:	2001      	movs	r0, #1
 8006dac:	e7fc      	b.n	8006da8 <HAL_UART_Init+0x58>

08006dae <HAL_UART_Transmit>:
{
 8006dae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db2:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006db4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006db8:	2b20      	cmp	r3, #32
{
 8006dba:	4604      	mov	r4, r0
 8006dbc:	460e      	mov	r6, r1
 8006dbe:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006dc0:	d13f      	bne.n	8006e42 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	d03f      	beq.n	8006e46 <HAL_UART_Transmit+0x98>
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	d03d      	beq.n	8006e46 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dca:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	2500      	movs	r5, #0
 8006dce:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dd0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8006dd4:	f7fd fdb6 	bl	8004944 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd8:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8006dda:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8006de0:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8006de2:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de4:	d103      	bne.n	8006dee <HAL_UART_Transmit+0x40>
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	b90b      	cbnz	r3, 8006dee <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 8006dea:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006dec:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8006dee:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	b953      	cbnz	r3, 8006e0a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006df4:	4643      	mov	r3, r8
 8006df6:	464a      	mov	r2, r9
 8006df8:	2140      	movs	r1, #64	@ 0x40
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7ff ff76 	bl	8006cec <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006e00:	2320      	movs	r3, #32
 8006e02:	b950      	cbnz	r0, 8006e1a <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8006e04:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8006e08:	e00a      	b.n	8006e20 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e0a:	4643      	mov	r3, r8
 8006e0c:	464a      	mov	r2, r9
 8006e0e:	2180      	movs	r1, #128	@ 0x80
 8006e10:	4620      	mov	r0, r4
 8006e12:	f7ff ff6b 	bl	8006cec <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006e16:	b128      	cbz	r0, 8006e24 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8006e18:	2320      	movs	r3, #32
 8006e1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8006e1e:	2003      	movs	r0, #3
}
 8006e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e24:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8006e26:	b94e      	cbnz	r6, 8006e3c <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e28:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e30:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8006e32:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8006e34:	3901      	subs	r1, #1
 8006e36:	b289      	uxth	r1, r1
 8006e38:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8006e3a:	e7d8      	b.n	8006dee <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e3c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006e40:	e7f6      	b.n	8006e30 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8006e42:	2002      	movs	r0, #2
 8006e44:	e7ec      	b.n	8006e20 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8006e46:	2001      	movs	r0, #1
 8006e48:	e7ea      	b.n	8006e20 <HAL_UART_Transmit+0x72>

08006e4a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e4e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8006e52:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8006e56:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8006e5a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 8006e5e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e62:	6809      	ldr	r1, [r1, #0]
 8006e64:	ea43 0308 	orr.w	r3, r3, r8
 8006e68:	b981      	cbnz	r1, 8006e8c <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e6a:	ea43 030e 	orr.w	r3, r3, lr
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	ea43 030c 	orr.w	r3, r3, ip
 8006e74:	433b      	orrs	r3, r7
 8006e76:	6801      	ldr	r1, [r0, #0]
 8006e78:	4333      	orrs	r3, r6
 8006e7a:	432b      	orrs	r3, r5
 8006e7c:	4323      	orrs	r3, r4
 8006e7e:	f36f 010e 	bfc	r1, #0, #15
 8006e82:	430b      	orrs	r3, r1
 8006e84:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006e86:	2000      	movs	r0, #0
 8006e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e8c:	6801      	ldr	r1, [r0, #0]
 8006e8e:	ea43 030e 	orr.w	r3, r3, lr
 8006e92:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8006e96:	430b      	orrs	r3, r1
 8006e98:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e9a:	ea42 030c 	orr.w	r3, r2, ip
 8006e9e:	6841      	ldr	r1, [r0, #4]
 8006ea0:	433b      	orrs	r3, r7
 8006ea2:	4333      	orrs	r3, r6
 8006ea4:	432b      	orrs	r3, r5
 8006ea6:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8006eaa:	4323      	orrs	r3, r4
 8006eac:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	6043      	str	r3, [r0, #4]
 8006eb4:	e7e7      	b.n	8006e86 <FMC_SDRAM_Init+0x3c>

08006eb6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006eb6:	68cb      	ldr	r3, [r1, #12]
 8006eb8:	f103 3cff 	add.w	ip, r3, #4294967295
 8006ebc:	694b      	ldr	r3, [r1, #20]
{
 8006ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ec0:	684c      	ldr	r4, [r1, #4]
 8006ec2:	688f      	ldr	r7, [r1, #8]
 8006ec4:	690e      	ldr	r6, [r1, #16]
 8006ec6:	698d      	ldr	r5, [r1, #24]
 8006ec8:	6809      	ldr	r1, [r1, #0]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	051b      	lsls	r3, r3, #20
 8006ece:	3c01      	subs	r4, #1
 8006ed0:	3f01      	subs	r7, #1
 8006ed2:	3e01      	subs	r6, #1
 8006ed4:	3d01      	subs	r5, #1
 8006ed6:	0124      	lsls	r4, r4, #4
 8006ed8:	023f      	lsls	r7, r7, #8
 8006eda:	0436      	lsls	r6, r6, #16
 8006edc:	062d      	lsls	r5, r5, #24
 8006ede:	3901      	subs	r1, #1
 8006ee0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006ee4:	b95a      	cbnz	r2, 8006efe <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	4323      	orrs	r3, r4
 8006eea:	6882      	ldr	r2, [r0, #8]
 8006eec:	433b      	orrs	r3, r7
 8006eee:	4333      	orrs	r3, r6
 8006ef0:	432b      	orrs	r3, r5
 8006ef2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006efa:	2000      	movs	r0, #0
 8006efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006efe:	6882      	ldr	r2, [r0, #8]
 8006f00:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006f04:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006f0c:	ea44 0307 	orr.w	r3, r4, r7
 8006f10:	68c2      	ldr	r2, [r0, #12]
 8006f12:	430b      	orrs	r3, r1
 8006f14:	4333      	orrs	r3, r6
 8006f16:	432b      	orrs	r3, r5
 8006f18:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60c3      	str	r3, [r0, #12]
 8006f20:	e7eb      	b.n	8006efa <FMC_SDRAM_Timing_Init+0x44>

08006f22 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006f22:	b570      	push	{r4, r5, r6, lr}
 8006f24:	4604      	mov	r4, r0
 8006f26:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006f28:	6902      	ldr	r2, [r0, #16]
 8006f2a:	e9d1 3000 	ldrd	r3, r0, [r1]
 8006f2e:	4303      	orrs	r3, r0
 8006f30:	68c8      	ldr	r0, [r1, #12]
 8006f32:	f36f 0215 	bfc	r2, #0, #22
 8006f36:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	688a      	ldr	r2, [r1, #8]
 8006f3e:	3a01      	subs	r2, #1
 8006f40:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006f44:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006f46:	f7fd fcfd 	bl	8004944 <HAL_GetTick>
 8006f4a:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006f4c:	69a0      	ldr	r0, [r4, #24]
 8006f4e:	f010 0020 	ands.w	r0, r0, #32
 8006f52:	d003      	beq.n	8006f5c <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f54:	1c6b      	adds	r3, r5, #1
 8006f56:	d0f9      	beq.n	8006f4c <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006f58:	b90d      	cbnz	r5, 8006f5e <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8006f5a:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006f5e:	f7fd fcf1 	bl	8004944 <HAL_GetTick>
 8006f62:	1b80      	subs	r0, r0, r6
 8006f64:	42a8      	cmp	r0, r5
 8006f66:	d9f1      	bls.n	8006f4c <FMC_SDRAM_SendCommand+0x2a>
 8006f68:	e7f7      	b.n	8006f5a <FMC_SDRAM_SendCommand+0x38>

08006f6a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006f6a:	6943      	ldr	r3, [r0, #20]
 8006f6c:	f36f 034d 	bfc	r3, #1, #13
 8006f70:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006f74:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8006f76:	2000      	movs	r0, #0
 8006f78:	4770      	bx	lr

08006f7a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f7a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f80:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f82:	f001 ff0b 	bl	8008d9c <xTaskGetSchedulerState>
 8006f86:	2801      	cmp	r0, #1
 8006f88:	d003      	beq.n	8006f92 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006f8e:	f000 bc79 	b.w	8007884 <xPortSysTickHandler>
}
 8006f92:	bd08      	pop	{r3, pc}

08006f94 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f94:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f98:	b92b      	cbnz	r3, 8006fa6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f9a:	4b06      	ldr	r3, [pc, #24]	@ (8006fb4 <osKernelInitialize+0x20>)
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	b928      	cbnz	r0, 8006fac <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fa4:	4770      	bx	lr
    stat = osErrorISR;
 8006fa6:	f06f 0005 	mvn.w	r0, #5
 8006faa:	4770      	bx	lr
    } else {
      stat = osError;
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20004d9c 	.word	0x20004d9c

08006fb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fbe:	b95c      	cbnz	r4, 8006fd8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006fc0:	4b08      	ldr	r3, [pc, #32]	@ (8006fe4 <osKernelStart+0x2c>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	2a01      	cmp	r2, #1
 8006fc6:	d10a      	bne.n	8006fde <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fc8:	4a07      	ldr	r2, [pc, #28]	@ (8006fe8 <osKernelStart+0x30>)
 8006fca:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fcc:	2202      	movs	r2, #2
 8006fce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fd0:	f001 fc5a 	bl	8008888 <vTaskStartScheduler>
      stat = osOK;
 8006fd4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006fd6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006fd8:	f06f 0005 	mvn.w	r0, #5
 8006fdc:	e7fb      	b.n	8006fd6 <osKernelStart+0x1e>
      stat = osError;
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006fe2:	e7f8      	b.n	8006fd6 <osKernelStart+0x1e>
 8006fe4:	20004d9c 	.word	0x20004d9c
 8006fe8:	e000ed00 	.word	0xe000ed00

08006fec <osKernelGetTickCount>:
 8006fec:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8006ff0:	b10b      	cbz	r3, 8006ff6 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8006ff2:	f001 bc9d 	b.w	8008930 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8006ff6:	f001 bc95 	b.w	8008924 <xTaskGetTickCount>

08006ffa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffc:	b087      	sub	sp, #28
 8006ffe:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007000:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007002:	460b      	mov	r3, r1
  hTask = NULL;
 8007004:	9205      	str	r2, [sp, #20]
 8007006:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800700a:	b9fa      	cbnz	r2, 800704c <osThreadNew+0x52>
 800700c:	b1f0      	cbz	r0, 800704c <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800700e:	b354      	cbz	r4, 8007066 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007010:	69a5      	ldr	r5, [r4, #24]
 8007012:	b125      	cbz	r5, 800701e <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007014:	1e69      	subs	r1, r5, #1
 8007016:	2937      	cmp	r1, #55	@ 0x37
 8007018:	d902      	bls.n	8007020 <osThreadNew+0x26>
        return (NULL);
 800701a:	2000      	movs	r0, #0
 800701c:	e017      	b.n	800704e <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800701e:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007020:	6862      	ldr	r2, [r4, #4]
 8007022:	07d2      	lsls	r2, r2, #31
 8007024:	d4f9      	bmi.n	800701a <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8007026:	6966      	ldr	r6, [r4, #20]
 8007028:	b19e      	cbz	r6, 8007052 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800702a:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800702c:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 8007030:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007032:	b187      	cbz	r7, 8007056 <osThreadNew+0x5c>
 8007034:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 8007038:	d908      	bls.n	800704c <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800703a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800703c:	b134      	cbz	r4, 800704c <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800703e:	b12e      	cbz	r6, 800704c <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007040:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007044:	9500      	str	r5, [sp, #0]
 8007046:	f001 fb60 	bl	800870a <xTaskCreateStatic>
 800704a:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800704c:	9805      	ldr	r0, [sp, #20]
}
 800704e:	b007      	add	sp, #28
 8007050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007052:	2280      	movs	r2, #128	@ 0x80
 8007054:	e7ea      	b.n	800702c <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007056:	f1bc 0f00 	cmp.w	ip, #0
 800705a:	d1f7      	bne.n	800704c <osThreadNew+0x52>
 800705c:	6924      	ldr	r4, [r4, #16]
 800705e:	2c00      	cmp	r4, #0
 8007060:	d1f4      	bne.n	800704c <osThreadNew+0x52>
 8007062:	460c      	mov	r4, r1
 8007064:	e001      	b.n	800706a <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8007066:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8007068:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800706a:	a905      	add	r1, sp, #20
 800706c:	e9cd 5100 	strd	r5, r1, [sp]
 8007070:	b292      	uxth	r2, r2
 8007072:	4621      	mov	r1, r4
 8007074:	f001 fb81 	bl	800877a <xTaskCreate>
 8007078:	2801      	cmp	r0, #1
            hTask = NULL;
 800707a:	bf1c      	itt	ne
 800707c:	2300      	movne	r3, #0
 800707e:	9305      	strne	r3, [sp, #20]
 8007080:	e7e4      	b.n	800704c <osThreadNew+0x52>

08007082 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8007082:	b508      	push	{r3, lr}
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8007084:	2000      	movs	r0, #0
 8007086:	f001 fba7 	bl	80087d8 <vTaskDelete>
#endif
  for (;;);
 800708a:	e7fe      	b.n	800708a <osThreadExit+0x8>

0800708c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800708c:	b530      	push	{r4, r5, lr}
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800708e:	4604      	mov	r4, r0
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007090:	b085      	sub	sp, #20
  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007092:	b108      	cbz	r0, 8007098 <osThreadFlagsSet+0xc>
 8007094:	2900      	cmp	r1, #0
 8007096:	da05      	bge.n	80070a4 <osThreadFlagsSet+0x18>
    rflags = (uint32_t)osErrorParameter;
 8007098:	f06f 0303 	mvn.w	r3, #3
 800709c:	9302      	str	r3, [sp, #8]
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 800709e:	9802      	ldr	r0, [sp, #8]
 80070a0:	b005      	add	sp, #20
 80070a2:	bd30      	pop	{r4, r5, pc}
    rflags = (uint32_t)osError;
 80070a4:	f04f 33ff 	mov.w	r3, #4294967295
 80070a8:	9302      	str	r3, [sp, #8]
 80070aa:	f3ef 8505 	mrs	r5, IPSR
    if (IS_IRQ()) {
 80070ae:	b1e5      	cbz	r5, 80070ea <osThreadFlagsSet+0x5e>
      yield = pdFALSE;
 80070b0:	2500      	movs	r5, #0
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80070b2:	ab03      	add	r3, sp, #12
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	2201      	movs	r2, #1
 80070b8:	462b      	mov	r3, r5
      yield = pdFALSE;
 80070ba:	9503      	str	r5, [sp, #12]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80070bc:	f002 f810 	bl	80090e0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80070c0:	ab02      	add	r3, sp, #8
 80070c2:	9500      	str	r5, [sp, #0]
 80070c4:	462a      	mov	r2, r5
 80070c6:	4629      	mov	r1, r5
 80070c8:	4620      	mov	r0, r4
 80070ca:	f002 f809 	bl	80090e0 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 80070ce:	9b03      	ldr	r3, [sp, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0e4      	beq.n	800709e <osThreadFlagsSet+0x12>
 80070d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80070d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	e7d9      	b.n	800709e <osThreadFlagsSet+0x12>
      (void)xTaskNotify (hTask, flags, eSetBits);
 80070ea:	462b      	mov	r3, r5
 80070ec:	2201      	movs	r2, #1
 80070ee:	f001 ff85 	bl	8008ffc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80070f2:	ab02      	add	r3, sp, #8
 80070f4:	462a      	mov	r2, r5
 80070f6:	4629      	mov	r1, r5
 80070f8:	4620      	mov	r0, r4
 80070fa:	f001 ff7f 	bl	8008ffc <xTaskGenericNotify>
 80070fe:	e7ce      	b.n	800709e <osThreadFlagsSet+0x12>

08007100 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007100:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007104:	4606      	mov	r6, r0
 8007106:	460f      	mov	r7, r1
 8007108:	4690      	mov	r8, r2
 800710a:	f3ef 8405 	mrs	r4, IPSR
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800710e:	2c00      	cmp	r4, #0
 8007110:	d13c      	bne.n	800718c <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007112:	2800      	cmp	r0, #0
 8007114:	db3d      	blt.n	8007192 <osThreadFlagsWait+0x92>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
      clear = 0U;
 8007116:	f011 0f02 	tst.w	r1, #2
 800711a:	bf0c      	ite	eq
 800711c:	4682      	moveq	sl, r0
 800711e:	f04f 0a00 	movne.w	sl, #0
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8007122:	f001 fbff 	bl	8008924 <xTaskGetTickCount>
    tout   = timeout;
 8007126:	4645      	mov	r5, r8
    t0 = xTaskGetTickCount();
 8007128:	4681      	mov	r9, r0

      if (rval == pdPASS) {
        rflags &= flags;
        rflags |= nval;

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800712a:	f007 0701 	and.w	r7, r7, #1
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800712e:	462b      	mov	r3, r5
 8007130:	aa01      	add	r2, sp, #4
 8007132:	4651      	mov	r1, sl
 8007134:	2000      	movs	r0, #0
 8007136:	f001 ff1b 	bl	8008f70 <xTaskNotifyWait>
      if (rval == pdPASS) {
 800713a:	2801      	cmp	r0, #1
 800713c:	d11c      	bne.n	8007178 <osThreadFlagsWait+0x78>
        rflags |= nval;
 800713e:	9b01      	ldr	r3, [sp, #4]
        rflags &= flags;
 8007140:	4034      	ands	r4, r6
        rflags |= nval;
 8007142:	431c      	orrs	r4, r3
          if ((flags & rflags) == flags) {
 8007144:	ea06 0304 	and.w	r3, r6, r4
        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007148:	b13f      	cbz	r7, 800715a <osThreadFlagsWait+0x5a>
          if ((flags & rflags) == flags) {
 800714a:	429e      	cmp	r6, r3
 800714c:	d007      	beq.n	800715e <osThreadFlagsWait+0x5e>
            break;
          } else {
            if (timeout == 0U) {
 800714e:	f1b8 0f00 	cmp.w	r8, #0
 8007152:	d108      	bne.n	8007166 <osThreadFlagsWait+0x66>
              rflags = (uint32_t)osErrorResource;
 8007154:	f06f 0402 	mvn.w	r4, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8007158:	e001      	b.n	800715e <osThreadFlagsWait+0x5e>
          if ((flags & rflags) != 0) {
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f7      	beq.n	800714e <osThreadFlagsWait+0x4e>
}
 800715e:	4620      	mov	r0, r4
 8007160:	b002      	add	sp, #8
 8007162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        td = xTaskGetTickCount() - t0;
 8007166:	f001 fbdd 	bl	8008924 <xTaskGetTickCount>
 800716a:	eba0 0309 	sub.w	r3, r0, r9
        if (td > tout) {
 800716e:	429d      	cmp	r5, r3
 8007170:	d312      	bcc.n	8007198 <osThreadFlagsWait+0x98>
          tout -= td;
 8007172:	444d      	add	r5, r9
 8007174:	1a2d      	subs	r5, r5, r0
 8007176:	e7da      	b.n	800712e <osThreadFlagsWait+0x2e>
          rflags = (uint32_t)osErrorResource;
 8007178:	f1b8 0f00 	cmp.w	r8, #0
 800717c:	bf14      	ite	ne
 800717e:	f06f 0401 	mvnne.w	r4, #1
 8007182:	f06f 0402 	mvneq.w	r4, #2
    while (rval != pdFAIL);
 8007186:	2800      	cmp	r0, #0
 8007188:	d1d1      	bne.n	800712e <osThreadFlagsWait+0x2e>
 800718a:	e7e8      	b.n	800715e <osThreadFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800718c:	f06f 0405 	mvn.w	r4, #5
 8007190:	e7e5      	b.n	800715e <osThreadFlagsWait+0x5e>
    rflags = (uint32_t)osErrorParameter;
 8007192:	f06f 0403 	mvn.w	r4, #3
 8007196:	e7e2      	b.n	800715e <osThreadFlagsWait+0x5e>
          tout  = 0;
 8007198:	2500      	movs	r5, #0
    while (rval != pdFAIL);
 800719a:	e7c8      	b.n	800712e <osThreadFlagsWait+0x2e>

0800719c <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800719c:	b508      	push	{r3, lr}
 800719e:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80071a2:	b922      	cbnz	r2, 80071ae <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80071a4:	b108      	cbz	r0, 80071aa <osDelay+0xe>
      vTaskDelay(ticks);
 80071a6:	f001 fcd5 	bl	8008b54 <vTaskDelay>
    stat = osOK;
 80071aa:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80071ac:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80071ae:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 80071b2:	e7fb      	b.n	80071ac <osDelay+0x10>

080071b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80071b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071b6:	4604      	mov	r4, r0
 80071b8:	460e      	mov	r6, r1
 80071ba:	4615      	mov	r5, r2
 80071bc:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80071c0:	b942      	cbnz	r2, 80071d4 <osSemaphoreNew+0x20>
 80071c2:	b138      	cbz	r0, 80071d4 <osSemaphoreNew+0x20>
 80071c4:	4288      	cmp	r0, r1
 80071c6:	d305      	bcc.n	80071d4 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 80071c8:	b155      	cbz	r5, 80071e0 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071ca:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 80071ce:	b12b      	cbz	r3, 80071dc <osSemaphoreNew+0x28>
 80071d0:	2f4f      	cmp	r7, #79	@ 0x4f
 80071d2:	d822      	bhi.n	800721a <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 80071d4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80071d6:	4620      	mov	r0, r4
 80071d8:	b003      	add	sp, #12
 80071da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071dc:	2f00      	cmp	r7, #0
 80071de:	d1f9      	bne.n	80071d4 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 80071e0:	2c01      	cmp	r4, #1
 80071e2:	d00c      	beq.n	80071fe <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80071e4:	4620      	mov	r0, r4
 80071e6:	4631      	mov	r1, r6
 80071e8:	f000 fd84 	bl	8007cf4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80071ec:	4604      	mov	r4, r0
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d0f0      	beq.n	80071d4 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 80071f2:	b985      	cbnz	r5, 8007216 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 80071f4:	4629      	mov	r1, r5
 80071f6:	4620      	mov	r0, r4
 80071f8:	f001 f8c2 	bl	8008380 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80071fc:	e7eb      	b.n	80071d6 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 80071fe:	2203      	movs	r2, #3
 8007200:	2100      	movs	r1, #0
 8007202:	2001      	movs	r0, #1
 8007204:	f000 fd2d 	bl	8007c62 <xQueueGenericCreate>
 8007208:	e00e      	b.n	8007228 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800720a:	461a      	mov	r2, r3
 800720c:	f000 fd50 	bl	8007cb0 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007210:	4604      	mov	r4, r0
 8007212:	2800      	cmp	r0, #0
 8007214:	d0de      	beq.n	80071d4 <osSemaphoreNew+0x20>
          name = attr->name;
 8007216:	682d      	ldr	r5, [r5, #0]
 8007218:	e7ec      	b.n	80071f4 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800721a:	2801      	cmp	r0, #1
 800721c:	d1f5      	bne.n	800720a <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800721e:	2103      	movs	r1, #3
 8007220:	9100      	str	r1, [sp, #0]
 8007222:	4611      	mov	r1, r2
 8007224:	f000 fccf 	bl	8007bc6 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8007228:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800722a:	2800      	cmp	r0, #0
 800722c:	d0d2      	beq.n	80071d4 <osSemaphoreNew+0x20>
 800722e:	2e00      	cmp	r6, #0
 8007230:	d0df      	beq.n	80071f2 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007232:	2300      	movs	r3, #0
 8007234:	461a      	mov	r2, r3
 8007236:	4619      	mov	r1, r3
 8007238:	f000 fd7a 	bl	8007d30 <xQueueGenericSend>
 800723c:	2801      	cmp	r0, #1
 800723e:	d0d8      	beq.n	80071f2 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8007240:	4620      	mov	r0, r4
 8007242:	f001 f8c7 	bl	80083d4 <vQueueDelete>
      if (hSemaphore != NULL) {
 8007246:	e7c5      	b.n	80071d4 <osSemaphoreNew+0x20>

08007248 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007248:	b513      	push	{r0, r1, r4, lr}
 800724a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800724c:	b328      	cbz	r0, 800729a <osSemaphoreAcquire+0x52>
 800724e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007252:	b1cb      	cbz	r3, 8007288 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8007254:	bb09      	cbnz	r1, 800729a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007256:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007258:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800725a:	f001 f824 	bl	80082a6 <xQueueReceiveFromISR>
 800725e:	2801      	cmp	r0, #1
 8007260:	d003      	beq.n	800726a <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8007262:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8007266:	b002      	add	sp, #8
 8007268:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800726a:	9b01      	ldr	r3, [sp, #4]
 800726c:	b90b      	cbnz	r3, 8007272 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800726e:	2000      	movs	r0, #0
 8007270:	e7f9      	b.n	8007266 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8007272:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800727a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	e7f2      	b.n	800726e <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007288:	f000 ff50 	bl	800812c <xQueueSemaphoreTake>
 800728c:	2801      	cmp	r0, #1
 800728e:	d0ee      	beq.n	800726e <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8007290:	2c00      	cmp	r4, #0
 8007292:	d0e6      	beq.n	8007262 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8007294:	f06f 0001 	mvn.w	r0, #1
 8007298:	e7e5      	b.n	8007266 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800729a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800729e:	e7e2      	b.n	8007266 <osSemaphoreAcquire+0x1e>

080072a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80072a0:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80072a2:	b318      	cbz	r0, 80072ec <osSemaphoreRelease+0x4c>
 80072a4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80072a8:	b1cb      	cbz	r3, 80072de <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 80072aa:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072ac:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80072ae:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072b0:	f000 fe4d 	bl	8007f4e <xQueueGiveFromISR>
 80072b4:	2801      	cmp	r0, #1
 80072b6:	d004      	beq.n	80072c2 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80072b8:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 80072bc:	b003      	add	sp, #12
 80072be:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 80072c2:	9b01      	ldr	r3, [sp, #4]
 80072c4:	b14b      	cbz	r3, 80072da <osSemaphoreRelease+0x3a>
 80072c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80072ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80072da:	2000      	movs	r0, #0
 80072dc:	e7ee      	b.n	80072bc <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80072de:	461a      	mov	r2, r3
 80072e0:	4619      	mov	r1, r3
 80072e2:	f000 fd25 	bl	8007d30 <xQueueGenericSend>
 80072e6:	2801      	cmp	r0, #1
 80072e8:	d0f7      	beq.n	80072da <osSemaphoreRelease+0x3a>
 80072ea:	e7e5      	b.n	80072b8 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 80072ec:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80072f0:	e7e4      	b.n	80072bc <osSemaphoreRelease+0x1c>

080072f2 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 80072f2:	b130      	cbz	r0, 8007302 <osSemaphoreGetCount+0x10>
 80072f4:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 80072f8:	b10b      	cbz	r3, 80072fe <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80072fa:	f001 b834 	b.w	8008366 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80072fe:	f001 b81f 	b.w	8008340 <uxQueueMessagesWaiting>
  }

  return (count);
}
 8007302:	4770      	bx	lr

08007304 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007306:	4605      	mov	r5, r0
 8007308:	460e      	mov	r6, r1
 800730a:	4614      	mov	r4, r2
 800730c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007310:	b11f      	cbz	r7, 800731a <osMessageQueueNew+0x16>
  hQueue = NULL;
 8007312:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007314:	4628      	mov	r0, r5
 8007316:	b003      	add	sp, #12
 8007318:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800731a:	2800      	cmp	r0, #0
 800731c:	d0f9      	beq.n	8007312 <osMessageQueueNew+0xe>
 800731e:	2900      	cmp	r1, #0
 8007320:	d0f7      	beq.n	8007312 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8007322:	b1da      	cbz	r2, 800735c <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007324:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8007328:	b183      	cbz	r3, 800734c <osMessageQueueNew+0x48>
 800732a:	2a4f      	cmp	r2, #79	@ 0x4f
 800732c:	d9f1      	bls.n	8007312 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800732e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007330:	2a00      	cmp	r2, #0
 8007332:	d0ee      	beq.n	8007312 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007334:	6966      	ldr	r6, [r4, #20]
 8007336:	434d      	muls	r5, r1
 8007338:	42ae      	cmp	r6, r5
 800733a:	d3ea      	bcc.n	8007312 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800733c:	9700      	str	r7, [sp, #0]
 800733e:	f000 fc42 	bl	8007bc6 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8007342:	4605      	mov	r5, r0
 8007344:	2800      	cmp	r0, #0
 8007346:	d0e4      	beq.n	8007312 <osMessageQueueNew+0xe>
        name = attr->name;
 8007348:	6824      	ldr	r4, [r4, #0]
 800734a:	e011      	b.n	8007370 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800734c:	2a00      	cmp	r2, #0
 800734e:	d1e0      	bne.n	8007312 <osMessageQueueNew+0xe>
 8007350:	6923      	ldr	r3, [r4, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1dd      	bne.n	8007312 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007356:	6963      	ldr	r3, [r4, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1da      	bne.n	8007312 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800735c:	4628      	mov	r0, r5
 800735e:	2200      	movs	r2, #0
 8007360:	4631      	mov	r1, r6
 8007362:	f000 fc7e 	bl	8007c62 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8007366:	4605      	mov	r5, r0
 8007368:	2800      	cmp	r0, #0
 800736a:	d0d2      	beq.n	8007312 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800736c:	2c00      	cmp	r4, #0
 800736e:	d1eb      	bne.n	8007348 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8007370:	4621      	mov	r1, r4
 8007372:	4628      	mov	r0, r5
 8007374:	f001 f804 	bl	8008380 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007378:	e7cc      	b.n	8007314 <osMessageQueueNew+0x10>

0800737a <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800737a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800737c:	461c      	mov	r4, r3
 800737e:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007382:	b1de      	cbz	r6, 80073bc <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007384:	b338      	cbz	r0, 80073d6 <osMessageQueuePut+0x5c>
 8007386:	b331      	cbz	r1, 80073d6 <osMessageQueuePut+0x5c>
 8007388:	bb2b      	cbnz	r3, 80073d6 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800738a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800738c:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800738e:	f000 fd81 	bl	8007e94 <xQueueGenericSendFromISR>
 8007392:	2801      	cmp	r0, #1
 8007394:	d003      	beq.n	800739e <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8007396:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800739a:	b002      	add	sp, #8
 800739c:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	b90b      	cbnz	r3, 80073a6 <osMessageQueuePut+0x2c>
  stat = osOK;
 80073a2:	2000      	movs	r0, #0
 80073a4:	e7f9      	b.n	800739a <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 80073a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	e7f2      	b.n	80073a2 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80073bc:	b158      	cbz	r0, 80073d6 <osMessageQueuePut+0x5c>
 80073be:	b151      	cbz	r1, 80073d6 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80073c0:	4633      	mov	r3, r6
 80073c2:	4622      	mov	r2, r4
 80073c4:	f000 fcb4 	bl	8007d30 <xQueueGenericSend>
 80073c8:	2801      	cmp	r0, #1
 80073ca:	d0ea      	beq.n	80073a2 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d0e2      	beq.n	8007396 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 80073d0:	f06f 0001 	mvn.w	r0, #1
 80073d4:	e7e1      	b.n	800739a <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 80073d6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80073da:	e7de      	b.n	800739a <osMessageQueuePut+0x20>

080073dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80073dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073de:	461c      	mov	r4, r3
 80073e0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80073e4:	b1db      	cbz	r3, 800741e <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073e6:	b330      	cbz	r0, 8007436 <osMessageQueueGet+0x5a>
 80073e8:	b329      	cbz	r1, 8007436 <osMessageQueueGet+0x5a>
 80073ea:	bb24      	cbnz	r4, 8007436 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80073ec:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80073ee:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80073f0:	f000 ff59 	bl	80082a6 <xQueueReceiveFromISR>
 80073f4:	2801      	cmp	r0, #1
 80073f6:	d003      	beq.n	8007400 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 80073f8:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80073fc:	b003      	add	sp, #12
 80073fe:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	b90b      	cbnz	r3, 8007408 <osMessageQueueGet+0x2c>
  stat = osOK;
 8007404:	2000      	movs	r0, #0
 8007406:	e7f9      	b.n	80073fc <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8007408:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800740c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007410:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	e7f2      	b.n	8007404 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800741e:	b150      	cbz	r0, 8007436 <osMessageQueueGet+0x5a>
 8007420:	b149      	cbz	r1, 8007436 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007422:	4622      	mov	r2, r4
 8007424:	f000 fde4 	bl	8007ff0 <xQueueReceive>
 8007428:	2801      	cmp	r0, #1
 800742a:	d0eb      	beq.n	8007404 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800742c:	2c00      	cmp	r4, #0
 800742e:	d0e3      	beq.n	80073f8 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8007430:	f06f 0001 	mvn.w	r0, #1
 8007434:	e7e2      	b.n	80073fc <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8007436:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800743a:	e7df      	b.n	80073fc <osMessageQueueGet+0x20>

0800743c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800743c:	f7ff bf59 	b.w	80072f2 <osSemaphoreGetCount>

08007440 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007440:	4b03      	ldr	r3, [pc, #12]	@ (8007450 <vApplicationGetIdleTaskMemory+0x10>)
 8007442:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007444:	4b03      	ldr	r3, [pc, #12]	@ (8007454 <vApplicationGetIdleTaskMemory+0x14>)
 8007446:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007448:	2380      	movs	r3, #128	@ 0x80
 800744a:	6013      	str	r3, [r2, #0]
}
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20004d3c 	.word	0x20004d3c
 8007454:	20004b3c 	.word	0x20004b3c

08007458 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007458:	4b03      	ldr	r3, [pc, #12]	@ (8007468 <vApplicationGetTimerTaskMemory+0x10>)
 800745a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800745c:	4b03      	ldr	r3, [pc, #12]	@ (800746c <vApplicationGetTimerTaskMemory+0x14>)
 800745e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007464:	6013      	str	r3, [r2, #0]
}
 8007466:	4770      	bx	lr
 8007468:	20004adc 	.word	0x20004adc
 800746c:	200046dc 	.word	0x200046dc

08007470 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007470:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007472:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <prvInsertBlockIntoFreeList+0x44>)
 8007474:	461a      	mov	r2, r3
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4283      	cmp	r3, r0
 800747a:	d3fb      	bcc.n	8007474 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800747c:	6854      	ldr	r4, [r2, #4]
 800747e:	1911      	adds	r1, r2, r4
 8007480:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007482:	bf01      	itttt	eq
 8007484:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 8007486:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007488:	1909      	addeq	r1, r1, r4
 800748a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800748c:	6844      	ldr	r4, [r0, #4]
 800748e:	1901      	adds	r1, r0, r4
 8007490:	428b      	cmp	r3, r1
 8007492:	d10c      	bne.n	80074ae <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007494:	4908      	ldr	r1, [pc, #32]	@ (80074b8 <prvInsertBlockIntoFreeList+0x48>)
 8007496:	6809      	ldr	r1, [r1, #0]
 8007498:	428b      	cmp	r3, r1
 800749a:	d003      	beq.n	80074a4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800749c:	6859      	ldr	r1, [r3, #4]
 800749e:	4421      	add	r1, r4
 80074a0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074a2:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074a4:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074a6:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074a8:	bf18      	it	ne
 80074aa:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ac:	bd10      	pop	{r4, pc}
 80074ae:	4619      	mov	r1, r3
 80074b0:	e7f8      	b.n	80074a4 <prvInsertBlockIntoFreeList+0x34>
 80074b2:	bf00      	nop
 80074b4:	20004db8 	.word	0x20004db8
 80074b8:	20004db4 	.word	0x20004db4

080074bc <pvPortMalloc>:
{
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80074c2:	f001 fa27 	bl	8008914 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80074c6:	4942      	ldr	r1, [pc, #264]	@ (80075d0 <pvPortMalloc+0x114>)
 80074c8:	4d42      	ldr	r5, [pc, #264]	@ (80075d4 <pvPortMalloc+0x118>)
 80074ca:	680b      	ldr	r3, [r1, #0]
 80074cc:	bb0b      	cbnz	r3, 8007512 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80074ce:	4a42      	ldr	r2, [pc, #264]	@ (80075d8 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074d0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074d2:	bf1f      	itttt	ne
 80074d4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074d6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074da:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 80074de:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074e0:	bf0c      	ite	eq
 80074e2:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074e6:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074e8:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074ea:	4e3c      	ldr	r6, [pc, #240]	@ (80075dc <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 80074ec:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074ee:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80074f2:	2000      	movs	r0, #0
 80074f4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074f6:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80074f8:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074fc:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074fe:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007502:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007504:	4b36      	ldr	r3, [pc, #216]	@ (80075e0 <pvPortMalloc+0x124>)
 8007506:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007508:	4b36      	ldr	r3, [pc, #216]	@ (80075e4 <pvPortMalloc+0x128>)
 800750a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800750c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007510:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007512:	682e      	ldr	r6, [r5, #0]
 8007514:	4226      	tst	r6, r4
 8007516:	d155      	bne.n	80075c4 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8007518:	2c00      	cmp	r4, #0
 800751a:	d046      	beq.n	80075aa <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800751c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007520:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007522:	bf1c      	itt	ne
 8007524:	f023 0307 	bicne.w	r3, r3, #7
 8007528:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800752a:	2b00      	cmp	r3, #0
 800752c:	d04a      	beq.n	80075c4 <pvPortMalloc+0x108>
 800752e:	4f2d      	ldr	r7, [pc, #180]	@ (80075e4 <pvPortMalloc+0x128>)
 8007530:	683c      	ldr	r4, [r7, #0]
 8007532:	429c      	cmp	r4, r3
 8007534:	d346      	bcc.n	80075c4 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8007536:	4a29      	ldr	r2, [pc, #164]	@ (80075dc <pvPortMalloc+0x120>)
 8007538:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800753a:	6868      	ldr	r0, [r5, #4]
 800753c:	4298      	cmp	r0, r3
 800753e:	d204      	bcs.n	800754a <pvPortMalloc+0x8e>
 8007540:	f8d5 c000 	ldr.w	ip, [r5]
 8007544:	f1bc 0f00 	cmp.w	ip, #0
 8007548:	d115      	bne.n	8007576 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800754a:	6809      	ldr	r1, [r1, #0]
 800754c:	42a9      	cmp	r1, r5
 800754e:	d039      	beq.n	80075c4 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007550:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007552:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007556:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007558:	1ac2      	subs	r2, r0, r3
 800755a:	2a10      	cmp	r2, #16
 800755c:	d912      	bls.n	8007584 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800755e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007560:	0741      	lsls	r1, r0, #29
 8007562:	d00b      	beq.n	800757c <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	e7fe      	b.n	8007574 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 8007576:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8007578:	4665      	mov	r5, ip
 800757a:	e7de      	b.n	800753a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800757c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800757e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007580:	f7ff ff76 	bl	8007470 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007584:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007586:	4916      	ldr	r1, [pc, #88]	@ (80075e0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007588:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800758a:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 800758c:	4a16      	ldr	r2, [pc, #88]	@ (80075e8 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800758e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007590:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8007596:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007598:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800759a:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 800759c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075a0:	bf38      	it	cc
 80075a2:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80075a4:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075a6:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 80075aa:	f001 fa5f 	bl	8008a6c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ae:	0763      	lsls	r3, r4, #29
 80075b0:	d00a      	beq.n	80075c8 <pvPortMalloc+0x10c>
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	e7fe      	b.n	80075c2 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 80075c4:	2400      	movs	r4, #0
 80075c6:	e7f0      	b.n	80075aa <pvPortMalloc+0xee>
}
 80075c8:	4620      	mov	r0, r4
 80075ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ce:	bf00      	nop
 80075d0:	20004db4 	.word	0x20004db4
 80075d4:	20004da0 	.word	0x20004da0
 80075d8:	20004dc0 	.word	0x20004dc0
 80075dc:	20004db8 	.word	0x20004db8
 80075e0:	20004dac 	.word	0x20004dac
 80075e4:	20004db0 	.word	0x20004db0
 80075e8:	20004da8 	.word	0x20004da8

080075ec <vPortFree>:
{
 80075ec:	b510      	push	{r4, lr}
	if( pv != NULL )
 80075ee:	4604      	mov	r4, r0
 80075f0:	b390      	cbz	r0, 8007658 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075f2:	4a1a      	ldr	r2, [pc, #104]	@ (800765c <vPortFree+0x70>)
 80075f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	4213      	tst	r3, r2
 80075fc:	d108      	bne.n	8007610 <vPortFree+0x24>
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	e7fe      	b.n	800760e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007610:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007614:	b141      	cbz	r1, 8007628 <vPortFree+0x3c>
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	e7fe      	b.n	8007626 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007628:	ea23 0302 	bic.w	r3, r3, r2
 800762c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007630:	f001 f970 	bl	8008914 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007634:	4a0a      	ldr	r2, [pc, #40]	@ (8007660 <vPortFree+0x74>)
 8007636:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800763a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800763c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007640:	440b      	add	r3, r1
 8007642:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007644:	f7ff ff14 	bl	8007470 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007648:	4a06      	ldr	r2, [pc, #24]	@ (8007664 <vPortFree+0x78>)
 800764a:	6813      	ldr	r3, [r2, #0]
}
 800764c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8007650:	3301      	adds	r3, #1
 8007652:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8007654:	f001 ba0a 	b.w	8008a6c <xTaskResumeAll>
}
 8007658:	bd10      	pop	{r4, pc}
 800765a:	bf00      	nop
 800765c:	20004da0 	.word	0x20004da0
 8007660:	20004db0 	.word	0x20004db0
 8007664:	20004da4 	.word	0x20004da4

08007668 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007668:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800766c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007670:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007674:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007676:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800767c:	4770      	bx	lr

0800767e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007682:	4770      	bx	lr

08007684 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007684:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007686:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800768c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800768e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007690:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007692:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007694:	3301      	adds	r3, #1
 8007696:	6003      	str	r3, [r0, #0]
}
 8007698:	4770      	bx	lr

0800769a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800769a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800769c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800769e:	1c63      	adds	r3, r4, #1
 80076a0:	d10a      	bne.n	80076b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076a2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076a8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076aa:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80076ac:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80076ae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80076b0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80076b2:	3301      	adds	r3, #1
 80076b4:	6003      	str	r3, [r0, #0]
}
 80076b6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076b8:	f100 0208 	add.w	r2, r0, #8
 80076bc:	4613      	mov	r3, r2
 80076be:	6852      	ldr	r2, [r2, #4]
 80076c0:	6815      	ldr	r5, [r2, #0]
 80076c2:	42a5      	cmp	r5, r4
 80076c4:	d9fa      	bls.n	80076bc <vListInsert+0x22>
 80076c6:	e7ed      	b.n	80076a4 <vListInsert+0xa>

080076c8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076c8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 80076cc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076d0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076d6:	bf08      	it	eq
 80076d8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80076da:	2200      	movs	r2, #0
 80076dc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	3a01      	subs	r2, #1
 80076e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076e4:	6818      	ldr	r0, [r3, #0]
}
 80076e6:	4770      	bx	lr

080076e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076e8:	4808      	ldr	r0, [pc, #32]	@ (800770c <prvPortStartFirstTask+0x24>)
 80076ea:	6800      	ldr	r0, [r0, #0]
 80076ec:	6800      	ldr	r0, [r0, #0]
 80076ee:	f380 8808 	msr	MSP, r0
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	f380 8814 	msr	CONTROL, r0
 80076fa:	b662      	cpsie	i
 80076fc:	b661      	cpsie	f
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	df00      	svc	0
 8007708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800770a:	0000      	.short	0x0000
 800770c:	e000ed08 	.word	0xe000ed08

08007710 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007710:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007720 <vPortEnableVFP+0x10>
 8007714:	6801      	ldr	r1, [r0, #0]
 8007716:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800771a:	6001      	str	r1, [r0, #0]
 800771c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800771e:	0000      	.short	0x0000
 8007720:	e000ed88 	.word	0xe000ed88

08007724 <prvTaskExitError>:
{
 8007724:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <prvTaskExitError+0x3c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	d008      	beq.n	8007744 <prvTaskExitError+0x20>
 8007732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	e7fe      	b.n	8007742 <prvTaskExitError+0x1e>
 8007744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0fc      	beq.n	8007754 <prvTaskExitError+0x30>
}
 800775a:	b002      	add	sp, #8
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	20000084 	.word	0x20000084

08007764 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007768:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800776c:	4b07      	ldr	r3, [pc, #28]	@ (800778c <pxPortInitialiseStack+0x28>)
 800776e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007772:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007776:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800777a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800777e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007782:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007786:	3844      	subs	r0, #68	@ 0x44
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	08007725 	.word	0x08007725

08007790 <SVC_Handler>:
	__asm volatile (
 8007790:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <pxCurrentTCBConst2>)
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f380 8809 	msr	PSP, r0
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8811 	msr	BASEPRI, r0
 80077aa:	4770      	bx	lr
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst2>:
 80077b0:	20015300 	.word	0x20015300

080077b4 <vPortEnterCritical>:
 80077b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80077c4:	4a0a      	ldr	r2, [pc, #40]	@ (80077f0 <vPortEnterCritical+0x3c>)
 80077c6:	6813      	ldr	r3, [r2, #0]
 80077c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80077ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80077cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80077ce:	d10e      	bne.n	80077ee <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80077d4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	b143      	cbz	r3, 80077ee <vPortEnterCritical+0x3a>
 80077dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	e7fe      	b.n	80077ec <vPortEnterCritical+0x38>
}
 80077ee:	4770      	bx	lr
 80077f0:	20000084 	.word	0x20000084

080077f4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80077f4:	4a08      	ldr	r2, [pc, #32]	@ (8007818 <vPortExitCritical+0x24>)
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	b943      	cbnz	r3, 800780c <vPortExitCritical+0x18>
 80077fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	e7fe      	b.n	800780a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800780c:	3b01      	subs	r3, #1
 800780e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007810:	b90b      	cbnz	r3, 8007816 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007812:	f383 8811 	msr	BASEPRI, r3
}
 8007816:	4770      	bx	lr
 8007818:	20000084 	.word	0x20000084
 800781c:	00000000 	.word	0x00000000

08007820 <PendSV_Handler>:
	__asm volatile
 8007820:	f3ef 8009 	mrs	r0, PSP
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	4b15      	ldr	r3, [pc, #84]	@ (8007880 <pxCurrentTCBConst>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	f01e 0f10 	tst.w	lr, #16
 8007830:	bf08      	it	eq
 8007832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783a:	6010      	str	r0, [r2, #0]
 800783c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007844:	f380 8811 	msr	BASEPRI, r0
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f001 f9a4 	bl	8008b9c <vTaskSwitchContext>
 8007854:	f04f 0000 	mov.w	r0, #0
 8007858:	f380 8811 	msr	BASEPRI, r0
 800785c:	bc09      	pop	{r0, r3}
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	6808      	ldr	r0, [r1, #0]
 8007862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007866:	f01e 0f10 	tst.w	lr, #16
 800786a:	bf08      	it	eq
 800786c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007870:	f380 8809 	msr	PSP, r0
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst>:
 8007880:	20015300 	.word	0x20015300

08007884 <xPortSysTickHandler>:
{
 8007884:	b508      	push	{r3, lr}
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007896:	f001 f853 	bl	8008940 <xTaskIncrementTick>
 800789a:	b128      	cbz	r0, 80078a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800789c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80078a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80078a8:	2300      	movs	r3, #0
 80078aa:	f383 8811 	msr	BASEPRI, r3
}
 80078ae:	bd08      	pop	{r3, pc}

080078b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80078b4:	2300      	movs	r3, #0
 80078b6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078b8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078ba:	4b05      	ldr	r3, [pc, #20]	@ (80078d0 <vPortSetupTimerInterrupt+0x20>)
 80078bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078c6:	3b01      	subs	r3, #1
 80078c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ca:	2307      	movs	r3, #7
 80078cc:	6113      	str	r3, [r2, #16]
}
 80078ce:	4770      	bx	lr
 80078d0:	20000078 	.word	0x20000078

080078d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80078d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078da:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80078de:	4a38      	ldr	r2, [pc, #224]	@ (80079c0 <xPortStartScheduler+0xec>)
 80078e0:	4291      	cmp	r1, r2
 80078e2:	d108      	bne.n	80078f6 <xPortStartScheduler+0x22>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	e7fe      	b.n	80078f4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80078fa:	4b32      	ldr	r3, [pc, #200]	@ (80079c4 <xPortStartScheduler+0xf0>)
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d108      	bne.n	8007912 <xPortStartScheduler+0x3e>
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	e7fe      	b.n	8007910 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007912:	4b2d      	ldr	r3, [pc, #180]	@ (80079c8 <xPortStartScheduler+0xf4>)
 8007914:	781a      	ldrb	r2, [r3, #0]
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800791a:	22ff      	movs	r2, #255	@ 0xff
 800791c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800791e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007920:	4a2a      	ldr	r2, [pc, #168]	@ (80079cc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007928:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800792c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007930:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007932:	4a27      	ldr	r2, [pc, #156]	@ (80079d0 <xPortStartScheduler+0xfc>)
 8007934:	2307      	movs	r3, #7
 8007936:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007938:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800793c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800793e:	0609      	lsls	r1, r1, #24
 8007940:	d40a      	bmi.n	8007958 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007942:	2b03      	cmp	r3, #3
 8007944:	d011      	beq.n	800796a <xPortStartScheduler+0x96>
 8007946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	e7fe      	b.n	8007956 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8007958:	3b01      	subs	r3, #1
 800795a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800795c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f88d 3003 	strb.w	r3, [sp, #3]
 8007968:	e7e6      	b.n	8007938 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800796a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800796e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007970:	9b01      	ldr	r3, [sp, #4]
 8007972:	4a15      	ldr	r2, [pc, #84]	@ (80079c8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007974:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007978:	b2db      	uxtb	r3, r3
 800797a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800797c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007984:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007988:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800798c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007990:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007994:	f7ff ff8c 	bl	80078b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007998:	4b0e      	ldr	r3, [pc, #56]	@ (80079d4 <xPortStartScheduler+0x100>)
 800799a:	2500      	movs	r5, #0
 800799c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800799e:	f7ff feb7 	bl	8007710 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079a2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80079a6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80079aa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80079ae:	f7ff fe9b 	bl	80076e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80079b2:	f001 f8f3 	bl	8008b9c <vTaskSwitchContext>
	prvTaskExitError();
 80079b6:	f7ff feb5 	bl	8007724 <prvTaskExitError>
}
 80079ba:	4628      	mov	r0, r5
 80079bc:	b003      	add	sp, #12
 80079be:	bd30      	pop	{r4, r5, pc}
 80079c0:	410fc271 	.word	0x410fc271
 80079c4:	410fc270 	.word	0x410fc270
 80079c8:	e000e400 	.word	0xe000e400
 80079cc:	20014dc4 	.word	0x20014dc4
 80079d0:	20014dc0 	.word	0x20014dc0
 80079d4:	20000084 	.word	0x20000084

080079d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079dc:	2b0f      	cmp	r3, #15
 80079de:	d90e      	bls.n	80079fe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079e0:	4a11      	ldr	r2, [pc, #68]	@ (8007a28 <vPortValidateInterruptPriority+0x50>)
 80079e2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079e4:	4a11      	ldr	r2, [pc, #68]	@ (8007a2c <vPortValidateInterruptPriority+0x54>)
 80079e6:	7812      	ldrb	r2, [r2, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d908      	bls.n	80079fe <vPortValidateInterruptPriority+0x26>
 80079ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	e7fe      	b.n	80079fc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a02:	4a0b      	ldr	r2, [pc, #44]	@ (8007a30 <vPortValidateInterruptPriority+0x58>)
 8007a04:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007a08:	6812      	ldr	r2, [r2, #0]
 8007a0a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d908      	bls.n	8007a24 <vPortValidateInterruptPriority+0x4c>
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	e7fe      	b.n	8007a22 <vPortValidateInterruptPriority+0x4a>
	}
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	e000e3f0 	.word	0xe000e3f0
 8007a2c:	20014dc4 	.word	0x20014dc4
 8007a30:	20014dc0 	.word	0x20014dc0

08007a34 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a34:	b510      	push	{r4, lr}
 8007a36:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a38:	f7ff febc 	bl	80077b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a3c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007a3e:	f7ff fed9 	bl	80077f4 <vPortExitCritical>

	return xReturn;
}
 8007a42:	fab4 f084 	clz	r0, r4
 8007a46:	0940      	lsrs	r0, r0, #5
 8007a48:	bd10      	pop	{r4, pc}

08007a4a <prvCopyDataToQueue>:
{
 8007a4a:	b570      	push	{r4, r5, r6, lr}
 8007a4c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a4e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a50:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8007a52:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a54:	b942      	cbnz	r2, 8007a68 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a56:	6806      	ldr	r6, [r0, #0]
 8007a58:	b99e      	cbnz	r6, 8007a82 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a5a:	6880      	ldr	r0, [r0, #8]
 8007a5c:	f001 f9ec 	bl	8008e38 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a60:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a62:	3501      	adds	r5, #1
 8007a64:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007a68:	b96e      	cbnz	r6, 8007a86 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a6a:	6840      	ldr	r0, [r0, #4]
 8007a6c:	f00b fcdf 	bl	801342e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007a74:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a76:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a78:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a7a:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a7c:	bf24      	itt	cs
 8007a7e:	6823      	ldrcs	r3, [r4, #0]
 8007a80:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007a82:	2000      	movs	r0, #0
 8007a84:	e7ed      	b.n	8007a62 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a86:	68c0      	ldr	r0, [r0, #12]
 8007a88:	f00b fcd1 	bl	801342e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a8c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	4251      	negs	r1, r2
 8007a92:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a94:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a96:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a98:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a9a:	bf3e      	ittt	cc
 8007a9c:	68a3      	ldrcc	r3, [r4, #8]
 8007a9e:	185b      	addcc	r3, r3, r1
 8007aa0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007aa2:	2e02      	cmp	r6, #2
 8007aa4:	d1ed      	bne.n	8007a82 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aa6:	b10d      	cbz	r5, 8007aac <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007aa8:	3d01      	subs	r5, #1
 8007aaa:	e7ea      	b.n	8007a82 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007aac:	4628      	mov	r0, r5
 8007aae:	e7d8      	b.n	8007a62 <prvCopyDataToQueue+0x18>

08007ab0 <prvCopyDataFromQueue>:
{
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007ab6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ab8:	b16a      	cbz	r2, 8007ad6 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007aba:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007abc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007abe:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ac0:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ac2:	bf28      	it	cs
 8007ac4:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ac6:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ac8:	bf28      	it	cs
 8007aca:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007acc:	68d9      	ldr	r1, [r3, #12]
}
 8007ace:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ad2:	f00b bcac 	b.w	801342e <memcpy>
}
 8007ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <prvUnlockQueue>:
{
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007ae0:	f7ff fe68 	bl	80077b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007ae4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ae8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007aec:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	dd01      	ble.n	8007af6 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007af4:	b9b3      	cbnz	r3, 8007b24 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8007af6:	23ff      	movs	r3, #255	@ 0xff
 8007af8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007afc:	f7ff fe7a 	bl	80077f4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b00:	f7ff fe58 	bl	80077b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007b04:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b08:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007b0c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b0e:	2d00      	cmp	r5, #0
 8007b10:	dd01      	ble.n	8007b16 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	b97b      	cbnz	r3, 8007b36 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8007b16:	23ff      	movs	r3, #255	@ 0xff
 8007b18:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8007b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007b20:	f7ff be68 	b.w	80077f4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b24:	4630      	mov	r0, r6
 8007b26:	f001 f8ab 	bl	8008c80 <xTaskRemoveFromEventList>
 8007b2a:	b108      	cbz	r0, 8007b30 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8007b2c:	f001 f930 	bl	8008d90 <vTaskMissedYield>
			--cTxLock;
 8007b30:	3d01      	subs	r5, #1
 8007b32:	b26d      	sxtb	r5, r5
 8007b34:	e7db      	b.n	8007aee <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b36:	4630      	mov	r0, r6
 8007b38:	f001 f8a2 	bl	8008c80 <xTaskRemoveFromEventList>
 8007b3c:	b108      	cbz	r0, 8007b42 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8007b3e:	f001 f927 	bl	8008d90 <vTaskMissedYield>
				--cRxLock;
 8007b42:	3d01      	subs	r5, #1
 8007b44:	b26d      	sxtb	r5, r5
 8007b46:	e7e2      	b.n	8007b0e <prvUnlockQueue+0x32>

08007b48 <xQueueGenericReset>:
{
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	b940      	cbnz	r0, 8007b62 <xQueueGenericReset+0x1a>
 8007b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	e7fe      	b.n	8007b60 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007b62:	f7ff fe27 	bl	80077b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b66:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8007b6a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b6c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b6e:	434b      	muls	r3, r1
 8007b70:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b72:	1a5b      	subs	r3, r3, r1
 8007b74:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b76:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b78:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b7e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b80:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b84:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007b88:	b9a5      	cbnz	r5, 8007bb4 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	b173      	cbz	r3, 8007bac <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b8e:	f104 0010 	add.w	r0, r4, #16
 8007b92:	f001 f875 	bl	8008c80 <xTaskRemoveFromEventList>
 8007b96:	b148      	cbz	r0, 8007bac <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007b98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007bac:	f7ff fe22 	bl	80077f4 <vPortExitCritical>
}
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bb4:	f104 0010 	add.w	r0, r4, #16
 8007bb8:	f7ff fd56 	bl	8007668 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bbc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007bc0:	f7ff fd52 	bl	8007668 <vListInitialise>
 8007bc4:	e7f2      	b.n	8007bac <xQueueGenericReset+0x64>

08007bc6 <xQueueGenericCreateStatic>:
	{
 8007bc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bc8:	460d      	mov	r5, r1
 8007bca:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bcc:	b940      	cbnz	r0, 8007be0 <xQueueGenericCreateStatic+0x1a>
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	e7fe      	b.n	8007bde <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007be0:	b943      	cbnz	r3, 8007bf4 <xQueueGenericCreateStatic+0x2e>
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007bf4:	b14a      	cbz	r2, 8007c0a <xQueueGenericCreateStatic+0x44>
 8007bf6:	b991      	cbnz	r1, 8007c1e <xQueueGenericCreateStatic+0x58>
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	e7fe      	b.n	8007c08 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c0a:	b141      	cbz	r1, 8007c1e <xQueueGenericCreateStatic+0x58>
 8007c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	e7fe      	b.n	8007c1c <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c1e:	2350      	movs	r3, #80	@ 0x50
 8007c20:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c22:	9b01      	ldr	r3, [sp, #4]
 8007c24:	2b50      	cmp	r3, #80	@ 0x50
 8007c26:	d008      	beq.n	8007c3a <xQueueGenericCreateStatic+0x74>
 8007c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	e7fe      	b.n	8007c38 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c3a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	bf08      	it	eq
 8007c40:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007c42:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c46:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8007c4a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c4c:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c4e:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c50:	f7ff ff7a 	bl	8007b48 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007c54:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007c58:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	b003      	add	sp, #12
 8007c60:	bd30      	pop	{r4, r5, pc}

08007c62 <xQueueGenericCreate>:
	{
 8007c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c64:	460d      	mov	r5, r1
 8007c66:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c68:	4606      	mov	r6, r0
 8007c6a:	b940      	cbnz	r0, 8007c7e <xQueueGenericCreate+0x1c>
 8007c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	e7fe      	b.n	8007c7c <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c80:	3050      	adds	r0, #80	@ 0x50
 8007c82:	f7ff fc1b 	bl	80074bc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007c86:	4604      	mov	r4, r0
 8007c88:	b170      	cbz	r0, 8007ca8 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c90:	b165      	cbz	r5, 8007cac <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c92:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8007c96:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8007c9a:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7ff ff52 	bl	8007b48 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007ca4:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8007ca8:	4620      	mov	r0, r4
 8007caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cac:	4603      	mov	r3, r0
 8007cae:	e7f2      	b.n	8007c96 <xQueueGenericCreate+0x34>

08007cb0 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007cb0:	b513      	push	{r0, r1, r4, lr}
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007cb6:	b940      	cbnz	r0, 8007cca <xQueueCreateCountingSemaphoreStatic+0x1a>
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cca:	4288      	cmp	r0, r1
 8007ccc:	d208      	bcs.n	8007ce0 <xQueueCreateCountingSemaphoreStatic+0x30>
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	e7fe      	b.n	8007cde <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	9200      	str	r2, [sp, #0]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	f7ff ff6d 	bl	8007bc6 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007cec:	b100      	cbz	r0, 8007cf0 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cee:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007cf0:	b002      	add	sp, #8
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <xQueueCreateCountingSemaphore>:
	{
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007cf8:	b940      	cbnz	r0, 8007d0c <xQueueCreateCountingSemaphore+0x18>
 8007cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	e7fe      	b.n	8007d0a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d0c:	4288      	cmp	r0, r1
 8007d0e:	d208      	bcs.n	8007d22 <xQueueCreateCountingSemaphore+0x2e>
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	e7fe      	b.n	8007d20 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d22:	2202      	movs	r2, #2
 8007d24:	2100      	movs	r1, #0
 8007d26:	f7ff ff9c 	bl	8007c62 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007d2a:	b100      	cbz	r0, 8007d2e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d2c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007d2e:	bd10      	pop	{r4, pc}

08007d30 <xQueueGenericSend>:
{
 8007d30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007d34:	460f      	mov	r7, r1
 8007d36:	9201      	str	r2, [sp, #4]
 8007d38:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	b940      	cbnz	r0, 8007d50 <xQueueGenericSend+0x20>
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	e7fe      	b.n	8007d4e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d50:	b951      	cbnz	r1, 8007d68 <xQueueGenericSend+0x38>
 8007d52:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007d54:	b143      	cbz	r3, 8007d68 <xQueueGenericSend+0x38>
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	e7fe      	b.n	8007d66 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d68:	2e02      	cmp	r6, #2
 8007d6a:	d10b      	bne.n	8007d84 <xQueueGenericSend+0x54>
 8007d6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d008      	beq.n	8007d84 <xQueueGenericSend+0x54>
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	e7fe      	b.n	8007d82 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d84:	f001 f80a 	bl	8008d9c <xTaskGetSchedulerState>
 8007d88:	4605      	mov	r5, r0
 8007d8a:	b320      	cbz	r0, 8007dd6 <xQueueGenericSend+0xa6>
 8007d8c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007d8e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007d92:	f7ff fd0f 	bl	80077b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d96:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007d98:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d227      	bcs.n	8007dee <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d9e:	4632      	mov	r2, r6
 8007da0:	4639      	mov	r1, r7
 8007da2:	4620      	mov	r0, r4
 8007da4:	f7ff fe51 	bl	8007a4a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007da8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007daa:	b11b      	cbz	r3, 8007db4 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007db0:	f000 ff66 	bl	8008c80 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007db4:	b148      	cbz	r0, 8007dca <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8007db6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007dca:	f7ff fd13 	bl	80077f4 <vPortExitCritical>
				return pdPASS;
 8007dce:	2001      	movs	r0, #1
}
 8007dd0:	b004      	add	sp, #16
 8007dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d0d8      	beq.n	8007d8e <xQueueGenericSend+0x5e>
 8007ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	e7fe      	b.n	8007dec <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dee:	2e02      	cmp	r6, #2
 8007df0:	d0d5      	beq.n	8007d9e <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	b91b      	cbnz	r3, 8007dfe <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007df6:	f7ff fcfd 	bl	80077f4 <vPortExitCritical>
					return errQUEUE_FULL;
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e7e8      	b.n	8007dd0 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 8007dfe:	b915      	cbnz	r5, 8007e06 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e00:	a802      	add	r0, sp, #8
 8007e02:	f000 ff7d 	bl	8008d00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007e06:	f7ff fcf5 	bl	80077f4 <vPortExitCritical>
		vTaskSuspendAll();
 8007e0a:	f000 fd83 	bl	8008914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e0e:	f7ff fcd1 	bl	80077b4 <vPortEnterCritical>
 8007e12:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007e16:	2bff      	cmp	r3, #255	@ 0xff
 8007e18:	bf08      	it	eq
 8007e1a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007e1e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007e22:	2bff      	cmp	r3, #255	@ 0xff
 8007e24:	bf08      	it	eq
 8007e26:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007e2a:	f7ff fce3 	bl	80077f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e2e:	a901      	add	r1, sp, #4
 8007e30:	a802      	add	r0, sp, #8
 8007e32:	f000 ff71 	bl	8008d18 <xTaskCheckForTimeOut>
 8007e36:	bb38      	cbnz	r0, 8007e88 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e38:	f7ff fcbc 	bl	80077b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e3c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007e3e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d10e      	bne.n	8007e62 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007e44:	f7ff fcd6 	bl	80077f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e48:	9901      	ldr	r1, [sp, #4]
 8007e4a:	f104 0010 	add.w	r0, r4, #16
 8007e4e:	f000 fedf 	bl	8008c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff fe42 	bl	8007adc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e58:	f000 fe08 	bl	8008a6c <xTaskResumeAll>
 8007e5c:	b148      	cbz	r0, 8007e72 <xQueueGenericSend+0x142>
 8007e5e:	2501      	movs	r5, #1
 8007e60:	e797      	b.n	8007d92 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007e62:	f7ff fcc7 	bl	80077f4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007e66:	4620      	mov	r0, r4
 8007e68:	f7ff fe38 	bl	8007adc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e6c:	f000 fdfe 	bl	8008a6c <xTaskResumeAll>
 8007e70:	e7f5      	b.n	8007e5e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007e72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	e7ea      	b.n	8007e5e <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7ff fe27 	bl	8007adc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e8e:	f000 fded 	bl	8008a6c <xTaskResumeAll>
			return errQUEUE_FULL;
 8007e92:	e7b2      	b.n	8007dfa <xQueueGenericSend+0xca>

08007e94 <xQueueGenericSendFromISR>:
{
 8007e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e98:	4689      	mov	r9, r1
 8007e9a:	4617      	mov	r7, r2
 8007e9c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	b940      	cbnz	r0, 8007eb4 <xQueueGenericSendFromISR+0x20>
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	e7fe      	b.n	8007eb2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eb4:	b951      	cbnz	r1, 8007ecc <xQueueGenericSendFromISR+0x38>
 8007eb6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007eb8:	b143      	cbz	r3, 8007ecc <xQueueGenericSendFromISR+0x38>
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	e7fe      	b.n	8007eca <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ecc:	2e02      	cmp	r6, #2
 8007ece:	d10b      	bne.n	8007ee8 <xQueueGenericSendFromISR+0x54>
 8007ed0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d008      	beq.n	8007ee8 <xQueueGenericSendFromISR+0x54>
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	e7fe      	b.n	8007ee6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ee8:	f7ff fd76 	bl	80079d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007eec:	f3ef 8811 	mrs	r8, BASEPRI
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007f02:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d301      	bcc.n	8007f0c <xQueueGenericSendFromISR+0x78>
 8007f08:	2e02      	cmp	r6, #2
 8007f0a:	d11e      	bne.n	8007f4a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f0c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f12:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f14:	4632      	mov	r2, r6
 8007f16:	4649      	mov	r1, r9
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff fd96 	bl	8007a4a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007f1e:	1c6b      	adds	r3, r5, #1
 8007f20:	d10e      	bne.n	8007f40 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007f24:	b13b      	cbz	r3, 8007f36 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f26:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f2a:	f000 fea9 	bl	8008c80 <xTaskRemoveFromEventList>
 8007f2e:	b110      	cbz	r0, 8007f36 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8007f30:	b10f      	cbz	r7, 8007f36 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8007f36:	2001      	movs	r0, #1
	__asm volatile
 8007f38:	f388 8811 	msr	BASEPRI, r8
}
 8007f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f40:	3501      	adds	r5, #1
 8007f42:	b26d      	sxtb	r5, r5
 8007f44:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8007f48:	e7f5      	b.n	8007f36 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e7f4      	b.n	8007f38 <xQueueGenericSendFromISR+0xa4>

08007f4e <xQueueGiveFromISR>:
{
 8007f4e:	b570      	push	{r4, r5, r6, lr}
 8007f50:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007f52:	4604      	mov	r4, r0
 8007f54:	b940      	cbnz	r0, 8007f68 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	e7fe      	b.n	8007f66 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f68:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f6a:	b143      	cbz	r3, 8007f7e <xQueueGiveFromISR+0x30>
 8007f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f7e:	6803      	ldr	r3, [r0, #0]
 8007f80:	b953      	cbnz	r3, 8007f98 <xQueueGiveFromISR+0x4a>
 8007f82:	6883      	ldr	r3, [r0, #8]
 8007f84:	b143      	cbz	r3, 8007f98 <xQueueGiveFromISR+0x4a>
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	e7fe      	b.n	8007f96 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f98:	f7ff fd1e 	bl	80079d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007f9c:	f3ef 8611 	mrs	r6, BASEPRI
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fb0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007fb2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d919      	bls.n	8007fec <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fbc:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8007fbe:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fc0:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fc2:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8007fc4:	d10d      	bne.n	8007fe2 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fc8:	b13b      	cbz	r3, 8007fda <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007fce:	f000 fe57 	bl	8008c80 <xTaskRemoveFromEventList>
 8007fd2:	b110      	cbz	r0, 8007fda <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007fd4:	b10d      	cbz	r5, 8007fda <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8007fda:	2001      	movs	r0, #1
	__asm volatile
 8007fdc:	f386 8811 	msr	BASEPRI, r6
}
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007fea:	e7f6      	b.n	8007fda <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007fec:	2000      	movs	r0, #0
 8007fee:	e7f5      	b.n	8007fdc <xQueueGiveFromISR+0x8e>

08007ff0 <xQueueReceive>:
{
 8007ff0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007ff4:	460e      	mov	r6, r1
 8007ff6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	b940      	cbnz	r0, 800800e <xQueueReceive+0x1e>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	e7fe      	b.n	800800c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800800e:	b951      	cbnz	r1, 8008026 <xQueueReceive+0x36>
 8008010:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008012:	b143      	cbz	r3, 8008026 <xQueueReceive+0x36>
 8008014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	e7fe      	b.n	8008024 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008026:	f000 feb9 	bl	8008d9c <xTaskGetSchedulerState>
 800802a:	4605      	mov	r5, r0
 800802c:	b318      	cbz	r0, 8008076 <xQueueReceive+0x86>
 800802e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008030:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008034:	f7ff fbbe 	bl	80077b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008038:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800803a:	b347      	cbz	r7, 800808e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800803c:	4631      	mov	r1, r6
 800803e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008040:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008042:	f7ff fd35 	bl	8007ab0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008046:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	b173      	cbz	r3, 800806a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800804c:	f104 0010 	add.w	r0, r4, #16
 8008050:	f000 fe16 	bl	8008c80 <xTaskRemoveFromEventList>
 8008054:	b148      	cbz	r0, 800806a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8008056:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800805a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800805e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800806a:	f7ff fbc3 	bl	80077f4 <vPortExitCritical>
				return pdPASS;
 800806e:	2001      	movs	r0, #1
}
 8008070:	b004      	add	sp, #16
 8008072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008076:	9b01      	ldr	r3, [sp, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0d9      	beq.n	8008030 <xQueueReceive+0x40>
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	e7fe      	b.n	800808c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	b91b      	cbnz	r3, 800809a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8008092:	f7ff fbaf 	bl	80077f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008096:	2000      	movs	r0, #0
 8008098:	e7ea      	b.n	8008070 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800809a:	b915      	cbnz	r5, 80080a2 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800809c:	a802      	add	r0, sp, #8
 800809e:	f000 fe2f 	bl	8008d00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80080a2:	f7ff fba7 	bl	80077f4 <vPortExitCritical>
		vTaskSuspendAll();
 80080a6:	f000 fc35 	bl	8008914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080aa:	f7ff fb83 	bl	80077b4 <vPortEnterCritical>
 80080ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80080b2:	2bff      	cmp	r3, #255	@ 0xff
 80080b4:	bf08      	it	eq
 80080b6:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80080ba:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80080be:	2bff      	cmp	r3, #255	@ 0xff
 80080c0:	bf08      	it	eq
 80080c2:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80080c6:	f7ff fb95 	bl	80077f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080ca:	a901      	add	r1, sp, #4
 80080cc:	a802      	add	r0, sp, #8
 80080ce:	f000 fe23 	bl	8008d18 <xTaskCheckForTimeOut>
 80080d2:	bb00      	cbnz	r0, 8008116 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080d4:	4620      	mov	r0, r4
 80080d6:	f7ff fcad 	bl	8007a34 <prvIsQueueEmpty>
 80080da:	b1b0      	cbz	r0, 800810a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080dc:	9901      	ldr	r1, [sp, #4]
 80080de:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80080e2:	f000 fd95 	bl	8008c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7ff fcf8 	bl	8007adc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080ec:	f000 fcbe 	bl	8008a6c <xTaskResumeAll>
 80080f0:	b948      	cbnz	r0, 8008106 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80080f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80080f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	2501      	movs	r5, #1
 8008108:	e794      	b.n	8008034 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800810a:	4620      	mov	r0, r4
 800810c:	f7ff fce6 	bl	8007adc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008110:	f000 fcac 	bl	8008a6c <xTaskResumeAll>
 8008114:	e7f7      	b.n	8008106 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008116:	4620      	mov	r0, r4
 8008118:	f7ff fce0 	bl	8007adc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800811c:	f000 fca6 	bl	8008a6c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008120:	4620      	mov	r0, r4
 8008122:	f7ff fc87 	bl	8007a34 <prvIsQueueEmpty>
 8008126:	2800      	cmp	r0, #0
 8008128:	d0ed      	beq.n	8008106 <xQueueReceive+0x116>
 800812a:	e7b4      	b.n	8008096 <xQueueReceive+0xa6>

0800812c <xQueueSemaphoreTake>:
{
 800812c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800812e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008130:	4604      	mov	r4, r0
{
 8008132:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008134:	b940      	cbnz	r0, 8008148 <xQueueSemaphoreTake+0x1c>
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	e7fe      	b.n	8008146 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008148:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800814a:	b145      	cbz	r5, 800815e <xQueueSemaphoreTake+0x32>
 800814c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	e7fe      	b.n	800815c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800815e:	f000 fe1d 	bl	8008d9c <xTaskGetSchedulerState>
 8008162:	4606      	mov	r6, r0
 8008164:	b320      	cbz	r0, 80081b0 <xQueueSemaphoreTake+0x84>
 8008166:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008168:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800816a:	f7ff fb23 	bl	80077b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800816e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008170:	b353      	cbz	r3, 80081c8 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008172:	3b01      	subs	r3, #1
 8008174:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	b913      	cbnz	r3, 8008180 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800817a:	f000 feed 	bl	8008f58 <pvTaskIncrementMutexHeldCount>
 800817e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	b173      	cbz	r3, 80081a2 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008184:	f104 0010 	add.w	r0, r4, #16
 8008188:	f000 fd7a 	bl	8008c80 <xTaskRemoveFromEventList>
 800818c:	b148      	cbz	r0, 80081a2 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800818e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008196:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80081a2:	f7ff fb27 	bl	80077f4 <vPortExitCritical>
				return pdPASS;
 80081a6:	2001      	movs	r0, #1
}
 80081a8:	b005      	add	sp, #20
 80081aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ac:	4635      	mov	r5, r6
 80081ae:	e7db      	b.n	8008168 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0fa      	beq.n	80081ac <xQueueSemaphoreTake+0x80>
 80081b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	e7fe      	b.n	80081c6 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	b953      	cbnz	r3, 80081e2 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081cc:	2d00      	cmp	r5, #0
 80081ce:	d066      	beq.n	800829e <xQueueSemaphoreTake+0x172>
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	e7fe      	b.n	80081e0 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 80081e2:	b916      	cbnz	r6, 80081ea <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081e4:	a802      	add	r0, sp, #8
 80081e6:	f000 fd8b 	bl	8008d00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80081ea:	f7ff fb03 	bl	80077f4 <vPortExitCritical>
		vTaskSuspendAll();
 80081ee:	f000 fb91 	bl	8008914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081f2:	f7ff fadf 	bl	80077b4 <vPortEnterCritical>
 80081f6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80081fa:	2bff      	cmp	r3, #255	@ 0xff
 80081fc:	bf08      	it	eq
 80081fe:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8008202:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008206:	2bff      	cmp	r3, #255	@ 0xff
 8008208:	bf08      	it	eq
 800820a:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 800820e:	f7ff faf1 	bl	80077f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008212:	a901      	add	r1, sp, #4
 8008214:	a802      	add	r0, sp, #8
 8008216:	f000 fd7f 	bl	8008d18 <xTaskCheckForTimeOut>
 800821a:	bb50      	cbnz	r0, 8008272 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800821c:	4620      	mov	r0, r4
 800821e:	f7ff fc09 	bl	8007a34 <prvIsQueueEmpty>
 8008222:	b300      	cbz	r0, 8008266 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	b93b      	cbnz	r3, 8008238 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8008228:	f7ff fac4 	bl	80077b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800822c:	68a0      	ldr	r0, [r4, #8]
 800822e:	f000 fdc5 	bl	8008dbc <xTaskPriorityInherit>
 8008232:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008234:	f7ff fade 	bl	80077f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008238:	9901      	ldr	r1, [sp, #4]
 800823a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800823e:	f000 fce7 	bl	8008c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008242:	4620      	mov	r0, r4
 8008244:	f7ff fc4a 	bl	8007adc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008248:	f000 fc10 	bl	8008a6c <xTaskResumeAll>
 800824c:	b948      	cbnz	r0, 8008262 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800824e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008256:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	2601      	movs	r6, #1
 8008264:	e781      	b.n	800816a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8008266:	4620      	mov	r0, r4
 8008268:	f7ff fc38 	bl	8007adc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800826c:	f000 fbfe 	bl	8008a6c <xTaskResumeAll>
 8008270:	e7f7      	b.n	8008262 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8008272:	4620      	mov	r0, r4
 8008274:	f7ff fc32 	bl	8007adc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008278:	f000 fbf8 	bl	8008a6c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800827c:	4620      	mov	r0, r4
 800827e:	f7ff fbd9 	bl	8007a34 <prvIsQueueEmpty>
 8008282:	2800      	cmp	r0, #0
 8008284:	d0ed      	beq.n	8008262 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8008286:	b165      	cbz	r5, 80082a2 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8008288:	f7ff fa94 	bl	80077b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800828c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800828e:	b119      	cbz	r1, 8008298 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008290:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008292:	6819      	ldr	r1, [r3, #0]
 8008294:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008298:	68a0      	ldr	r0, [r4, #8]
 800829a:	f000 fe0f 	bl	8008ebc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800829e:	f7ff faa9 	bl	80077f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80082a2:	2000      	movs	r0, #0
 80082a4:	e780      	b.n	80081a8 <xQueueSemaphoreTake+0x7c>

080082a6 <xQueueReceiveFromISR>:
{
 80082a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082aa:	4689      	mov	r9, r1
 80082ac:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80082ae:	4604      	mov	r4, r0
 80082b0:	b940      	cbnz	r0, 80082c4 <xQueueReceiveFromISR+0x1e>
 80082b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	e7fe      	b.n	80082c2 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082c4:	b951      	cbnz	r1, 80082dc <xQueueReceiveFromISR+0x36>
 80082c6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80082c8:	b143      	cbz	r3, 80082dc <xQueueReceiveFromISR+0x36>
 80082ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	e7fe      	b.n	80082da <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082dc:	f7ff fb7c 	bl	80079d8 <vPortValidateInterruptPriority>
	__asm volatile
 80082e0:	f3ef 8711 	mrs	r7, BASEPRI
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082f4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082f6:	b30d      	cbz	r5, 800833c <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80082f8:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082fc:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80082fe:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008300:	4620      	mov	r0, r4
 8008302:	f7ff fbd5 	bl	8007ab0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008306:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008308:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800830a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800830c:	d111      	bne.n	8008332 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	b153      	cbz	r3, 8008328 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008312:	f104 0010 	add.w	r0, r4, #16
 8008316:	f000 fcb3 	bl	8008c80 <xTaskRemoveFromEventList>
 800831a:	b128      	cbz	r0, 8008328 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800831c:	f1b8 0f00 	cmp.w	r8, #0
 8008320:	d002      	beq.n	8008328 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008322:	2301      	movs	r3, #1
 8008324:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008328:	2001      	movs	r0, #1
	__asm volatile
 800832a:	f387 8811 	msr	BASEPRI, r7
}
 800832e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008332:	3601      	adds	r6, #1
 8008334:	b276      	sxtb	r6, r6
 8008336:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800833a:	e7f5      	b.n	8008328 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800833c:	4628      	mov	r0, r5
 800833e:	e7f4      	b.n	800832a <xQueueReceiveFromISR+0x84>

08008340 <uxQueueMessagesWaiting>:
{
 8008340:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8008342:	4604      	mov	r4, r0
 8008344:	b940      	cbnz	r0, 8008358 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	e7fe      	b.n	8008356 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8008358:	f7ff fa2c 	bl	80077b4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800835c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 800835e:	f7ff fa49 	bl	80077f4 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008362:	4620      	mov	r0, r4
 8008364:	bd10      	pop	{r4, pc}

08008366 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8008366:	b940      	cbnz	r0, 800837a <uxQueueMessagesWaitingFromISR+0x14>
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	e7fe      	b.n	8008378 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 800837a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800837c:	4770      	bx	lr
	...

08008380 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008380:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008382:	4a07      	ldr	r2, [pc, #28]	@ (80083a0 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008384:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008386:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800838a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800838e:	b91d      	cbnz	r5, 8008398 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008390:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008394:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008396:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008398:	3301      	adds	r3, #1
 800839a:	2b08      	cmp	r3, #8
 800839c:	d1f3      	bne.n	8008386 <vQueueAddToRegistry+0x6>
 800839e:	e7fa      	b.n	8008396 <vQueueAddToRegistry+0x16>
 80083a0:	20014dc8 	.word	0x20014dc8

080083a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083a4:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80083a6:	4a09      	ldr	r2, [pc, #36]	@ (80083cc <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083a8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80083aa:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80083ae:	4281      	cmp	r1, r0
 80083b0:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 80083b4:	d106      	bne.n	80083c4 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80083b6:	4a06      	ldr	r2, [pc, #24]	@ (80083d0 <vQueueUnregisterQueue+0x2c>)
 80083b8:	2100      	movs	r1, #0
 80083ba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80083be:	4422      	add	r2, r4
 80083c0:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083c2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083c4:	3301      	adds	r3, #1
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d1ef      	bne.n	80083aa <vQueueUnregisterQueue+0x6>
 80083ca:	e7fa      	b.n	80083c2 <vQueueUnregisterQueue+0x1e>
 80083cc:	20014dcc 	.word	0x20014dcc
 80083d0:	20014dc8 	.word	0x20014dc8

080083d4 <vQueueDelete>:
{
 80083d4:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80083d6:	b940      	cbnz	r0, 80083ea <vQueueDelete+0x16>
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	e7fe      	b.n	80083e8 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 80083ea:	f7ff ffdb 	bl	80083a4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80083ee:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80083f2:	b91b      	cbnz	r3, 80083fc <vQueueDelete+0x28>
}
 80083f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80083f8:	f7ff b8f8 	b.w	80075ec <vPortFree>
}
 80083fc:	bd10      	pop	{r4, pc}

080083fe <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083fe:	b570      	push	{r4, r5, r6, lr}
 8008400:	4604      	mov	r4, r0
 8008402:	460d      	mov	r5, r1
 8008404:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008406:	f7ff f9d5 	bl	80077b4 <vPortEnterCritical>
 800840a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800840e:	2bff      	cmp	r3, #255	@ 0xff
 8008410:	bf04      	itt	eq
 8008412:	2300      	moveq	r3, #0
 8008414:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8008418:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800841c:	2bff      	cmp	r3, #255	@ 0xff
 800841e:	bf04      	itt	eq
 8008420:	2300      	moveq	r3, #0
 8008422:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8008426:	f7ff f9e5 	bl	80077f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800842a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800842c:	b92b      	cbnz	r3, 800843a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800842e:	4632      	mov	r2, r6
 8008430:	4629      	mov	r1, r5
 8008432:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008436:	f000 fc05 	bl	8008c44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800843a:	4620      	mov	r0, r4
	}
 800843c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008440:	f7ff bb4c 	b.w	8007adc <prvUnlockQueue>

08008444 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008448:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800844a:	f7ff f9b3 	bl	80077b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800844e:	4b30      	ldr	r3, [pc, #192]	@ (8008510 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8008450:	4e30      	ldr	r6, [pc, #192]	@ (8008514 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	4f30      	ldr	r7, [pc, #192]	@ (8008518 <prvAddNewTaskToReadyList+0xd4>)
 8008456:	3201      	adds	r2, #1
 8008458:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800845a:	6835      	ldr	r5, [r6, #0]
 800845c:	2d00      	cmp	r5, #0
 800845e:	d14b      	bne.n	80084f8 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008460:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d11f      	bne.n	80084a8 <prvAddNewTaskToReadyList+0x64>
 8008468:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800846a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800846c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800846e:	f7ff f8fb 	bl	8007668 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008472:	2d38      	cmp	r5, #56	@ 0x38
 8008474:	f108 0814 	add.w	r8, r8, #20
 8008478:	d1f7      	bne.n	800846a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800847a:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8008540 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 800847e:	4d27      	ldr	r5, [pc, #156]	@ (800851c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008480:	4640      	mov	r0, r8
 8008482:	f7ff f8f1 	bl	8007668 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008486:	4628      	mov	r0, r5
 8008488:	f7ff f8ee 	bl	8007668 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800848c:	4824      	ldr	r0, [pc, #144]	@ (8008520 <prvAddNewTaskToReadyList+0xdc>)
 800848e:	f7ff f8eb 	bl	8007668 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008492:	4824      	ldr	r0, [pc, #144]	@ (8008524 <prvAddNewTaskToReadyList+0xe0>)
 8008494:	f7ff f8e8 	bl	8007668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008498:	4823      	ldr	r0, [pc, #140]	@ (8008528 <prvAddNewTaskToReadyList+0xe4>)
 800849a:	f7ff f8e5 	bl	8007668 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800849e:	4b23      	ldr	r3, [pc, #140]	@ (800852c <prvAddNewTaskToReadyList+0xe8>)
 80084a0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084a4:	4b22      	ldr	r3, [pc, #136]	@ (8008530 <prvAddNewTaskToReadyList+0xec>)
 80084a6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80084a8:	4a22      	ldr	r2, [pc, #136]	@ (8008534 <prvAddNewTaskToReadyList+0xf0>)
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80084b0:	4a21      	ldr	r2, [pc, #132]	@ (8008538 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084b2:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80084b4:	6811      	ldr	r1, [r2, #0]
 80084b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80084b8:	2014      	movs	r0, #20
 80084ba:	428b      	cmp	r3, r1
 80084bc:	fb00 7003 	mla	r0, r0, r3, r7
 80084c0:	f104 0104 	add.w	r1, r4, #4
 80084c4:	bf88      	it	hi
 80084c6:	6013      	strhi	r3, [r2, #0]
 80084c8:	f7ff f8dc 	bl	8007684 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80084cc:	f7ff f992 	bl	80077f4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80084d0:	4b1a      	ldr	r3, [pc, #104]	@ (800853c <prvAddNewTaskToReadyList+0xf8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	b173      	cbz	r3, 80084f4 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084d6:	6833      	ldr	r3, [r6, #0]
 80084d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80084dc:	429a      	cmp	r2, r3
 80084de:	d209      	bcs.n	80084f4 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80084e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80084e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	f3bf 8f6f 	isb	sy
}
 80084f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80084f8:	4b10      	ldr	r3, [pc, #64]	@ (800853c <prvAddNewTaskToReadyList+0xf8>)
 80084fa:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80084fe:	2a00      	cmp	r2, #0
 8008500:	d1d2      	bne.n	80084a8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008502:	6832      	ldr	r2, [r6, #0]
 8008504:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008506:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008508:	bf98      	it	ls
 800850a:	6034      	strls	r4, [r6, #0]
 800850c:	e7cc      	b.n	80084a8 <prvAddNewTaskToReadyList+0x64>
 800850e:	bf00      	nop
 8008510:	20014e2c 	.word	0x20014e2c
 8008514:	20015300 	.word	0x20015300
 8008518:	20014ea0 	.word	0x20014ea0
 800851c:	20014e78 	.word	0x20014e78
 8008520:	20014e5c 	.word	0x20014e5c
 8008524:	20014e48 	.word	0x20014e48
 8008528:	20014e30 	.word	0x20014e30
 800852c:	20014e74 	.word	0x20014e74
 8008530:	20014e70 	.word	0x20014e70
 8008534:	20014e10 	.word	0x20014e10
 8008538:	20014e24 	.word	0x20014e24
 800853c:	20014e20 	.word	0x20014e20
 8008540:	20014e8c 	.word	0x20014e8c

08008544 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008546:	4b15      	ldr	r3, [pc, #84]	@ (800859c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008548:	4d15      	ldr	r5, [pc, #84]	@ (80085a0 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800854a:	681c      	ldr	r4, [r3, #0]
{
 800854c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800854e:	6828      	ldr	r0, [r5, #0]
 8008550:	3004      	adds	r0, #4
{
 8008552:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008554:	f7ff f8b8 	bl	80076c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008558:	1c73      	adds	r3, r6, #1
 800855a:	d107      	bne.n	800856c <prvAddCurrentTaskToDelayedList+0x28>
 800855c:	b137      	cbz	r7, 800856c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800855e:	6829      	ldr	r1, [r5, #0]
 8008560:	4810      	ldr	r0, [pc, #64]	@ (80085a4 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008566:	3104      	adds	r1, #4
 8008568:	f7ff b88c 	b.w	8007684 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	19a4      	adds	r4, r4, r6
 8008570:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008572:	d307      	bcc.n	8008584 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008574:	4b0c      	ldr	r3, [pc, #48]	@ (80085a8 <prvAddCurrentTaskToDelayedList+0x64>)
 8008576:	6818      	ldr	r0, [r3, #0]
 8008578:	6829      	ldr	r1, [r5, #0]
}
 800857a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800857e:	3104      	adds	r1, #4
 8008580:	f7ff b88b 	b.w	800769a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008584:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <prvAddCurrentTaskToDelayedList+0x68>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	6829      	ldr	r1, [r5, #0]
 800858a:	3104      	adds	r1, #4
 800858c:	f7ff f885 	bl	800769a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008590:	4b07      	ldr	r3, [pc, #28]	@ (80085b0 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008596:	bf88      	it	hi
 8008598:	601c      	strhi	r4, [r3, #0]
}
 800859a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859c:	20014e28 	.word	0x20014e28
 80085a0:	20015300 	.word	0x20015300
 80085a4:	20014e30 	.word	0x20014e30
 80085a8:	20014e70 	.word	0x20014e70
 80085ac:	20014e74 	.word	0x20014e74
 80085b0:	20014e0c 	.word	0x20014e0c

080085b4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b4:	4a06      	ldr	r2, [pc, #24]	@ (80085d0 <prvResetNextTaskUnblockTime+0x1c>)
 80085b6:	6813      	ldr	r3, [r2, #0]
 80085b8:	6819      	ldr	r1, [r3, #0]
 80085ba:	4b06      	ldr	r3, [pc, #24]	@ (80085d4 <prvResetNextTaskUnblockTime+0x20>)
 80085bc:	b919      	cbnz	r1, 80085c6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80085be:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c6:	6812      	ldr	r2, [r2, #0]
 80085c8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085ca:	68d2      	ldr	r2, [r2, #12]
 80085cc:	6852      	ldr	r2, [r2, #4]
 80085ce:	e7f8      	b.n	80085c2 <prvResetNextTaskUnblockTime+0xe>
 80085d0:	20014e74 	.word	0x20014e74
 80085d4:	20014e0c 	.word	0x20014e0c

080085d8 <prvDeleteTCB>:
	{
 80085d8:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085da:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 80085de:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085e0:	b93b      	cbnz	r3, 80085f2 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80085e2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80085e4:	f7ff f802 	bl	80075ec <vPortFree>
				vPortFree( pxTCB );
 80085e8:	4620      	mov	r0, r4
	}
 80085ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80085ee:	f7fe bffd 	b.w	80075ec <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d0f9      	beq.n	80085ea <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d008      	beq.n	800860c <prvDeleteTCB+0x34>
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	e7fe      	b.n	800860a <prvDeleteTCB+0x32>
	}
 800860c:	bd10      	pop	{r4, pc}
	...

08008610 <prvIdleTask>:
{
 8008610:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008612:	4c13      	ldr	r4, [pc, #76]	@ (8008660 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008614:	4f13      	ldr	r7, [pc, #76]	@ (8008664 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008616:	4d14      	ldr	r5, [pc, #80]	@ (8008668 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	b973      	cbnz	r3, 800863a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800861c:	4b13      	ldr	r3, [pc, #76]	@ (800866c <prvIdleTask+0x5c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d9f8      	bls.n	8008616 <prvIdleTask+0x6>
				taskYIELD();
 8008624:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800862c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	e7ed      	b.n	8008616 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800863a:	f7ff f8bb 	bl	80077b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008642:	1d30      	adds	r0, r6, #4
 8008644:	f7ff f840 	bl	80076c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	3b01      	subs	r3, #1
 800864c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	3b01      	subs	r3, #1
 8008652:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008654:	f7ff f8ce 	bl	80077f4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008658:	4630      	mov	r0, r6
 800865a:	f7ff ffbd 	bl	80085d8 <prvDeleteTCB>
 800865e:	e7db      	b.n	8008618 <prvIdleTask+0x8>
 8008660:	20014e44 	.word	0x20014e44
 8008664:	20014e48 	.word	0x20014e48
 8008668:	20014e2c 	.word	0x20014e2c
 800866c:	20014ea0 	.word	0x20014ea0

08008670 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008678:	0096      	lsls	r6, r2, #2
 800867a:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800867c:	4607      	mov	r7, r0
 800867e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008680:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008682:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008684:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008686:	f00a fe02 	bl	801328e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800868a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800868c:	3e04      	subs	r6, #4
 800868e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008690:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008694:	b3b5      	cbz	r5, 8008704 <prvInitialiseNewTask.constprop.0+0x94>
 8008696:	1e6b      	subs	r3, r5, #1
 8008698:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800869c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800869e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80086a2:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80086a6:	b109      	cbz	r1, 80086ac <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086a8:	42ab      	cmp	r3, r5
 80086aa:	d1f8      	bne.n	800869e <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086ac:	2300      	movs	r3, #0
 80086ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086b2:	9d08      	ldr	r5, [sp, #32]
 80086b4:	2d37      	cmp	r5, #55	@ 0x37
 80086b6:	bf28      	it	cs
 80086b8:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80086ba:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80086be:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80086c0:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086c2:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80086c4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086c8:	f7fe ffd9 	bl	800767e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086cc:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086d0:	f104 0018 	add.w	r0, r4, #24
 80086d4:	f7fe ffd3 	bl	800767e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80086d8:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086dc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086de:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086e0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 80086e2:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086e6:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086ea:	4642      	mov	r2, r8
 80086ec:	4639      	mov	r1, r7
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7ff f838 	bl	8007764 <pxPortInitialiseStack>
 80086f4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80086f6:	f1b9 0f00 	cmp.w	r9, #0
 80086fa:	d001      	beq.n	8008700 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086fc:	f8c9 4000 	str.w	r4, [r9]
}
 8008700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008704:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8008708:	e7d3      	b.n	80086b2 <prvInitialiseNewTask.constprop.0+0x42>

0800870a <xTaskCreateStatic>:
	{
 800870a:	b570      	push	{r4, r5, r6, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008712:	b945      	cbnz	r5, 8008726 <xTaskCreateStatic+0x1c>
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	e7fe      	b.n	8008724 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008726:	b944      	cbnz	r4, 800873a <xTaskCreateStatic+0x30>
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	e7fe      	b.n	8008738 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800873a:	2660      	movs	r6, #96	@ 0x60
 800873c:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800873e:	9e05      	ldr	r6, [sp, #20]
 8008740:	2e60      	cmp	r6, #96	@ 0x60
 8008742:	d008      	beq.n	8008756 <xTaskCreateStatic+0x4c>
 8008744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	e7fe      	b.n	8008754 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008756:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008758:	2502      	movs	r5, #2
 800875a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800875e:	ad04      	add	r5, sp, #16
 8008760:	9501      	str	r5, [sp, #4]
 8008762:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008764:	9402      	str	r4, [sp, #8]
 8008766:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008768:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800876a:	f7ff ff81 	bl	8008670 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff fe68 	bl	8008444 <prvAddNewTaskToReadyList>
	}
 8008774:	9804      	ldr	r0, [sp, #16]
 8008776:	b006      	add	sp, #24
 8008778:	bd70      	pop	{r4, r5, r6, pc}

0800877a <xTaskCreate>:
	{
 800877a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800877e:	4607      	mov	r7, r0
 8008780:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008782:	0090      	lsls	r0, r2, #2
	{
 8008784:	4688      	mov	r8, r1
 8008786:	4616      	mov	r6, r2
 8008788:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800878a:	f7fe fe97 	bl	80074bc <pvPortMalloc>
			if( pxStack != NULL )
 800878e:	4605      	mov	r5, r0
 8008790:	b920      	cbnz	r0, 800879c <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008792:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008796:	b005      	add	sp, #20
 8008798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800879c:	2060      	movs	r0, #96	@ 0x60
 800879e:	f7fe fe8d 	bl	80074bc <pvPortMalloc>
				if( pxNewTCB != NULL )
 80087a2:	4604      	mov	r4, r0
 80087a4:	b198      	cbz	r0, 80087ce <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087a6:	2300      	movs	r3, #0
 80087a8:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80087ae:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087b0:	9301      	str	r3, [sp, #4]
 80087b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087b4:	9002      	str	r0, [sp, #8]
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	4632      	mov	r2, r6
 80087ba:	464b      	mov	r3, r9
 80087bc:	4641      	mov	r1, r8
 80087be:	4638      	mov	r0, r7
 80087c0:	f7ff ff56 	bl	8008670 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7ff fe3d 	bl	8008444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087ca:	2001      	movs	r0, #1
 80087cc:	e7e3      	b.n	8008796 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80087ce:	4628      	mov	r0, r5
 80087d0:	f7fe ff0c 	bl	80075ec <vPortFree>
		if( pxNewTCB != NULL )
 80087d4:	e7dd      	b.n	8008792 <xTaskCreate+0x18>
	...

080087d8 <vTaskDelete>:
	{
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4604      	mov	r4, r0
 80087dc:	4d23      	ldr	r5, [pc, #140]	@ (800886c <vTaskDelete+0x94>)
		taskENTER_CRITICAL();
 80087de:	f7fe ffe9 	bl	80077b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80087e2:	b904      	cbnz	r4, 80087e6 <vTaskDelete+0xe>
 80087e4:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087e6:	1d26      	adds	r6, r4, #4
 80087e8:	4630      	mov	r0, r6
 80087ea:	f7fe ff6d 	bl	80076c8 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80087f0:	b11b      	cbz	r3, 80087fa <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087f2:	f104 0018 	add.w	r0, r4, #24
 80087f6:	f7fe ff67 	bl	80076c8 <uxListRemove>
			uxTaskNumber++;
 80087fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008870 <vTaskDelete+0x98>)
 80087fc:	6813      	ldr	r3, [r2, #0]
 80087fe:	3301      	adds	r3, #1
 8008800:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	42a3      	cmp	r3, r4
 8008806:	d11b      	bne.n	8008840 <vTaskDelete+0x68>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008808:	481a      	ldr	r0, [pc, #104]	@ (8008874 <vTaskDelete+0x9c>)
 800880a:	4631      	mov	r1, r6
 800880c:	f7fe ff3a 	bl	8007684 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8008810:	4a19      	ldr	r2, [pc, #100]	@ (8008878 <vTaskDelete+0xa0>)
 8008812:	6813      	ldr	r3, [r2, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8008818:	f7fe ffec 	bl	80077f4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800881c:	4b17      	ldr	r3, [pc, #92]	@ (800887c <vTaskDelete+0xa4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	b313      	cbz	r3, 8008868 <vTaskDelete+0x90>
			if( pxTCB == pxCurrentTCB )
 8008822:	682b      	ldr	r3, [r5, #0]
 8008824:	42a3      	cmp	r3, r4
 8008826:	d11f      	bne.n	8008868 <vTaskDelete+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 8008828:	4b15      	ldr	r3, [pc, #84]	@ (8008880 <vTaskDelete+0xa8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	b193      	cbz	r3, 8008854 <vTaskDelete+0x7c>
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	e7fe      	b.n	800883e <vTaskDelete+0x66>
				--uxCurrentNumberOfTasks;
 8008840:	4a10      	ldr	r2, [pc, #64]	@ (8008884 <vTaskDelete+0xac>)
 8008842:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8008844:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8008846:	3b01      	subs	r3, #1
 8008848:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800884a:	f7ff fec5 	bl	80085d8 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800884e:	f7ff feb1 	bl	80085b4 <prvResetNextTaskUnblockTime>
 8008852:	e7e1      	b.n	8008818 <vTaskDelete+0x40>
				portYIELD_WITHIN_API();
 8008854:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800885c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	f3bf 8f6f 	isb	sy
	}
 8008868:	bd70      	pop	{r4, r5, r6, pc}
 800886a:	bf00      	nop
 800886c:	20015300 	.word	0x20015300
 8008870:	20014e10 	.word	0x20014e10
 8008874:	20014e48 	.word	0x20014e48
 8008878:	20014e44 	.word	0x20014e44
 800887c:	20014e20 	.word	0x20014e20
 8008880:	20014e08 	.word	0x20014e08
 8008884:	20014e2c 	.word	0x20014e2c

08008888 <vTaskStartScheduler>:
{
 8008888:	b510      	push	{r4, lr}
 800888a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800888c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800888e:	aa07      	add	r2, sp, #28
 8008890:	a906      	add	r1, sp, #24
 8008892:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008894:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008898:	f7fe fdd2 	bl	8007440 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800889c:	9b05      	ldr	r3, [sp, #20]
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	9b06      	ldr	r3, [sp, #24]
 80088a2:	9a07      	ldr	r2, [sp, #28]
 80088a4:	4916      	ldr	r1, [pc, #88]	@ (8008900 <vTaskStartScheduler+0x78>)
 80088a6:	4817      	ldr	r0, [pc, #92]	@ (8008904 <vTaskStartScheduler+0x7c>)
 80088a8:	e9cd 4300 	strd	r4, r3, [sp]
 80088ac:	4623      	mov	r3, r4
 80088ae:	f7ff ff2c 	bl	800870a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80088b2:	b318      	cbz	r0, 80088fc <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80088b4:	f000 fcf0 	bl	8009298 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80088b8:	2801      	cmp	r0, #1
 80088ba:	d114      	bne.n	80088e6 <vTaskStartScheduler+0x5e>
 80088bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80088cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008908 <vTaskStartScheduler+0x80>)
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088d4:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <vTaskStartScheduler+0x84>)
 80088d6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <vTaskStartScheduler+0x88>)
 80088da:	601c      	str	r4, [r3, #0]
}
 80088dc:	b008      	add	sp, #32
 80088de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80088e2:	f7fe bff7 	b.w	80078d4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088e6:	3001      	adds	r0, #1
 80088e8:	d108      	bne.n	80088fc <vTaskStartScheduler+0x74>
 80088ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	e7fe      	b.n	80088fa <vTaskStartScheduler+0x72>
}
 80088fc:	b008      	add	sp, #32
 80088fe:	bd10      	pop	{r4, pc}
 8008900:	08014cd0 	.word	0x08014cd0
 8008904:	08008611 	.word	0x08008611
 8008908:	20014e0c 	.word	0x20014e0c
 800890c:	20014e20 	.word	0x20014e20
 8008910:	20014e28 	.word	0x20014e28

08008914 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008914:	4a02      	ldr	r2, [pc, #8]	@ (8008920 <vTaskSuspendAll+0xc>)
 8008916:	6813      	ldr	r3, [r2, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	6013      	str	r3, [r2, #0]
}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20014e08 	.word	0x20014e08

08008924 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008924:	4b01      	ldr	r3, [pc, #4]	@ (800892c <xTaskGetTickCount+0x8>)
 8008926:	6818      	ldr	r0, [r3, #0]
}
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20014e28 	.word	0x20014e28

08008930 <xTaskGetTickCountFromISR>:
{
 8008930:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008932:	f7ff f851 	bl	80079d8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8008936:	4b01      	ldr	r3, [pc, #4]	@ (800893c <xTaskGetTickCountFromISR+0xc>)
 8008938:	6818      	ldr	r0, [r3, #0]
}
 800893a:	bd08      	pop	{r3, pc}
 800893c:	20014e28 	.word	0x20014e28

08008940 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008940:	4b3f      	ldr	r3, [pc, #252]	@ (8008a40 <xTaskIncrementTick+0x100>)
 8008942:	681b      	ldr	r3, [r3, #0]
{
 8008944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008948:	2b00      	cmp	r3, #0
 800894a:	d172      	bne.n	8008a32 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800894c:	4b3d      	ldr	r3, [pc, #244]	@ (8008a44 <xTaskIncrementTick+0x104>)
 800894e:	681c      	ldr	r4, [r3, #0]
 8008950:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008952:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008954:	b9bc      	cbnz	r4, 8008986 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008956:	4b3c      	ldr	r3, [pc, #240]	@ (8008a48 <xTaskIncrementTick+0x108>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	b142      	cbz	r2, 8008970 <xTaskIncrementTick+0x30>
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	e7fe      	b.n	800896e <xTaskIncrementTick+0x2e>
 8008970:	4a36      	ldr	r2, [pc, #216]	@ (8008a4c <xTaskIncrementTick+0x10c>)
 8008972:	6819      	ldr	r1, [r3, #0]
 8008974:	6810      	ldr	r0, [r2, #0]
 8008976:	6018      	str	r0, [r3, #0]
 8008978:	6011      	str	r1, [r2, #0]
 800897a:	4a35      	ldr	r2, [pc, #212]	@ (8008a50 <xTaskIncrementTick+0x110>)
 800897c:	6813      	ldr	r3, [r2, #0]
 800897e:	3301      	adds	r3, #1
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	f7ff fe17 	bl	80085b4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008986:	4d33      	ldr	r5, [pc, #204]	@ (8008a54 <xTaskIncrementTick+0x114>)
 8008988:	4e33      	ldr	r6, [pc, #204]	@ (8008a58 <xTaskIncrementTick+0x118>)
 800898a:	682b      	ldr	r3, [r5, #0]
 800898c:	4f33      	ldr	r7, [pc, #204]	@ (8008a5c <xTaskIncrementTick+0x11c>)
 800898e:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8008990:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008994:	d212      	bcs.n	80089bc <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800899a:	2114      	movs	r1, #20
 800899c:	434a      	muls	r2, r1
 800899e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80089a0:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 80089a2:	4a2f      	ldr	r2, [pc, #188]	@ (8008a60 <xTaskIncrementTick+0x120>)
 80089a4:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 80089a6:	bf28      	it	cs
 80089a8:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	bf18      	it	ne
 80089b0:	f04f 0b01 	movne.w	fp, #1
}
 80089b4:	4658      	mov	r0, fp
 80089b6:	b003      	add	sp, #12
 80089b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089bc:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8008a48 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80089c0:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8008a68 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089c4:	f8d9 2000 	ldr.w	r2, [r9]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	b91a      	cbnz	r2, 80089d4 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089cc:	f04f 32ff 	mov.w	r2, #4294967295
 80089d0:	602a      	str	r2, [r5, #0]
					break;
 80089d2:	e7e0      	b.n	8008996 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d4:	f8d9 2000 	ldr.w	r2, [r9]
 80089d8:	68d2      	ldr	r2, [r2, #12]
 80089da:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089de:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80089e2:	428c      	cmp	r4, r1
 80089e4:	d201      	bcs.n	80089ea <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80089e6:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089e8:	e7d5      	b.n	8008996 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ea:	f108 0304 	add.w	r3, r8, #4
 80089ee:	4618      	mov	r0, r3
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	f7fe fe69 	bl	80076c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089f6:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80089fa:	b119      	cbz	r1, 8008a04 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089fc:	f108 0018 	add.w	r0, r8, #24
 8008a00:	f7fe fe62 	bl	80076c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a04:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8008a08:	f8da 1000 	ldr.w	r1, [sl]
 8008a0c:	2314      	movs	r3, #20
 8008a0e:	4288      	cmp	r0, r1
 8008a10:	bf88      	it	hi
 8008a12:	f8ca 0000 	strhi.w	r0, [sl]
 8008a16:	9901      	ldr	r1, [sp, #4]
 8008a18:	fb03 6000 	mla	r0, r3, r0, r6
 8008a1c:	f7fe fe32 	bl	8007684 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a20:	6838      	ldr	r0, [r7, #0]
 8008a22:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008a26:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008a28:	4291      	cmp	r1, r2
 8008a2a:	bf28      	it	cs
 8008a2c:	f04f 0b01 	movcs.w	fp, #1
 8008a30:	e7c8      	b.n	80089c4 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8008a32:	4a0c      	ldr	r2, [pc, #48]	@ (8008a64 <xTaskIncrementTick+0x124>)
 8008a34:	6813      	ldr	r3, [r2, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008a3a:	f04f 0b00 	mov.w	fp, #0
 8008a3e:	e7b9      	b.n	80089b4 <xTaskIncrementTick+0x74>
 8008a40:	20014e08 	.word	0x20014e08
 8008a44:	20014e28 	.word	0x20014e28
 8008a48:	20014e74 	.word	0x20014e74
 8008a4c:	20014e70 	.word	0x20014e70
 8008a50:	20014e14 	.word	0x20014e14
 8008a54:	20014e0c 	.word	0x20014e0c
 8008a58:	20014ea0 	.word	0x20014ea0
 8008a5c:	20015300 	.word	0x20015300
 8008a60:	20014e18 	.word	0x20014e18
 8008a64:	20014e1c 	.word	0x20014e1c
 8008a68:	20014e24 	.word	0x20014e24

08008a6c <xTaskResumeAll>:
{
 8008a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008a70:	4c30      	ldr	r4, [pc, #192]	@ (8008b34 <xTaskResumeAll+0xc8>)
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	b943      	cbnz	r3, 8008a88 <xTaskResumeAll+0x1c>
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	e7fe      	b.n	8008a86 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008a88:	f7fe fe94 	bl	80077b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a92:	6824      	ldr	r4, [r4, #0]
 8008a94:	b12c      	cbz	r4, 8008aa2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008a96:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008a98:	f7fe feac 	bl	80077f4 <vPortExitCritical>
}
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008aa2:	4b25      	ldr	r3, [pc, #148]	@ (8008b38 <xTaskResumeAll+0xcc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0f5      	beq.n	8008a96 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aaa:	4d24      	ldr	r5, [pc, #144]	@ (8008b3c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8008aac:	4e24      	ldr	r6, [pc, #144]	@ (8008b40 <xTaskResumeAll+0xd4>)
 8008aae:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8008b50 <xTaskResumeAll+0xe4>
 8008ab2:	e01d      	b.n	8008af0 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab4:	68eb      	ldr	r3, [r5, #12]
 8008ab6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ab8:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aba:	f104 0018 	add.w	r0, r4, #24
 8008abe:	f7fe fe03 	bl	80076c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	f7fe fe00 	bl	80076c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ac8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008aca:	6832      	ldr	r2, [r6, #0]
 8008acc:	2014      	movs	r0, #20
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	fb00 8003 	mla	r0, r0, r3, r8
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	bf88      	it	hi
 8008ad8:	6033      	strhi	r3, [r6, #0]
 8008ada:	f7fe fdd3 	bl	8007684 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ade:	4b19      	ldr	r3, [pc, #100]	@ (8008b44 <xTaskResumeAll+0xd8>)
 8008ae0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d302      	bcc.n	8008af0 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8008aea:	4b17      	ldr	r3, [pc, #92]	@ (8008b48 <xTaskResumeAll+0xdc>)
 8008aec:	2201      	movs	r2, #1
 8008aee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1de      	bne.n	8008ab4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008af6:	b10c      	cbz	r4, 8008afc <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8008af8:	f7ff fd5c 	bl	80085b4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008afc:	4d13      	ldr	r5, [pc, #76]	@ (8008b4c <xTaskResumeAll+0xe0>)
 8008afe:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008b00:	b144      	cbz	r4, 8008b14 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8008b02:	4e11      	ldr	r6, [pc, #68]	@ (8008b48 <xTaskResumeAll+0xdc>)
 8008b04:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008b06:	f7ff ff1b 	bl	8008940 <xTaskIncrementTick>
 8008b0a:	b100      	cbz	r0, 8008b0e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8008b0c:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b0e:	3c01      	subs	r4, #1
 8008b10:	d1f9      	bne.n	8008b06 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8008b12:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008b14:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <xTaskResumeAll+0xdc>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0bc      	beq.n	8008a96 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008b1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008b30:	2401      	movs	r4, #1
 8008b32:	e7b1      	b.n	8008a98 <xTaskResumeAll+0x2c>
 8008b34:	20014e08 	.word	0x20014e08
 8008b38:	20014e2c 	.word	0x20014e2c
 8008b3c:	20014e5c 	.word	0x20014e5c
 8008b40:	20014e24 	.word	0x20014e24
 8008b44:	20015300 	.word	0x20015300
 8008b48:	20014e18 	.word	0x20014e18
 8008b4c:	20014e1c 	.word	0x20014e1c
 8008b50:	20014ea0 	.word	0x20014ea0

08008b54 <vTaskDelay>:
	{
 8008b54:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b56:	b950      	cbnz	r0, 8008b6e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008b58:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b60:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	f3bf 8f6f 	isb	sy
	}
 8008b6c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b98 <vTaskDelay+0x44>)
 8008b70:	6819      	ldr	r1, [r3, #0]
 8008b72:	b141      	cbz	r1, 8008b86 <vTaskDelay+0x32>
 8008b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	e7fe      	b.n	8008b84 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008b86:	f7ff fec5 	bl	8008914 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b8a:	f7ff fcdb 	bl	8008544 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008b8e:	f7ff ff6d 	bl	8008a6c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0e0      	beq.n	8008b58 <vTaskDelay+0x4>
 8008b96:	e7e9      	b.n	8008b6c <vTaskDelay+0x18>
 8008b98:	20014e08 	.word	0x20014e08

08008b9c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b9c:	4b17      	ldr	r3, [pc, #92]	@ (8008bfc <vTaskSwitchContext+0x60>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	4b17      	ldr	r3, [pc, #92]	@ (8008c00 <vTaskSwitchContext+0x64>)
{
 8008ba2:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ba4:	b112      	cbz	r2, 8008bac <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	601a      	str	r2, [r3, #0]
}
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bac:	4d15      	ldr	r5, [pc, #84]	@ (8008c04 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8008bae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb0:	682a      	ldr	r2, [r5, #0]
 8008bb2:	4915      	ldr	r1, [pc, #84]	@ (8008c08 <vTaskSwitchContext+0x6c>)
 8008bb4:	2614      	movs	r6, #20
 8008bb6:	fb06 f302 	mul.w	r3, r6, r2
 8008bba:	18c8      	adds	r0, r1, r3
 8008bbc:	58cc      	ldr	r4, [r1, r3]
 8008bbe:	b18c      	cbz	r4, 8008be4 <vTaskSwitchContext+0x48>
 8008bc0:	6844      	ldr	r4, [r0, #4]
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	6864      	ldr	r4, [r4, #4]
 8008bc6:	6044      	str	r4, [r0, #4]
 8008bc8:	440b      	add	r3, r1
 8008bca:	429c      	cmp	r4, r3
 8008bcc:	bf04      	itt	eq
 8008bce:	6863      	ldreq	r3, [r4, #4]
 8008bd0:	6043      	streq	r3, [r0, #4]
 8008bd2:	2314      	movs	r3, #20
 8008bd4:	fb03 1102 	mla	r1, r3, r2, r1
 8008bd8:	684b      	ldr	r3, [r1, #4]
 8008bda:	68d9      	ldr	r1, [r3, #12]
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8008c0c <vTaskSwitchContext+0x70>)
 8008bde:	6019      	str	r1, [r3, #0]
 8008be0:	602a      	str	r2, [r5, #0]
}
 8008be2:	e7e2      	b.n	8008baa <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be4:	b942      	cbnz	r2, 8008bf8 <vTaskSwitchContext+0x5c>
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	e7fe      	b.n	8008bf6 <vTaskSwitchContext+0x5a>
 8008bf8:	3a01      	subs	r2, #1
 8008bfa:	e7dc      	b.n	8008bb6 <vTaskSwitchContext+0x1a>
 8008bfc:	20014e08 	.word	0x20014e08
 8008c00:	20014e18 	.word	0x20014e18
 8008c04:	20014e24 	.word	0x20014e24
 8008c08:	20014ea0 	.word	0x20014ea0
 8008c0c:	20015300 	.word	0x20015300

08008c10 <vTaskPlaceOnEventList>:
{
 8008c10:	b510      	push	{r4, lr}
 8008c12:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008c14:	b940      	cbnz	r0, 8008c28 <vTaskPlaceOnEventList+0x18>
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	e7fe      	b.n	8008c26 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c28:	4b05      	ldr	r3, [pc, #20]	@ (8008c40 <vTaskPlaceOnEventList+0x30>)
 8008c2a:	6819      	ldr	r1, [r3, #0]
 8008c2c:	3118      	adds	r1, #24
 8008c2e:	f7fe fd34 	bl	800769a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c32:	4620      	mov	r0, r4
 8008c34:	2101      	movs	r1, #1
}
 8008c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c3a:	f7ff bc83 	b.w	8008544 <prvAddCurrentTaskToDelayedList>
 8008c3e:	bf00      	nop
 8008c40:	20015300 	.word	0x20015300

08008c44 <vTaskPlaceOnEventListRestricted>:
	{
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	460d      	mov	r5, r1
 8008c48:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008c4a:	b940      	cbnz	r0, 8008c5e <vTaskPlaceOnEventListRestricted+0x1a>
 8008c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	e7fe      	b.n	8008c5c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c5e:	4b07      	ldr	r3, [pc, #28]	@ (8008c7c <vTaskPlaceOnEventListRestricted+0x38>)
 8008c60:	6819      	ldr	r1, [r3, #0]
 8008c62:	3118      	adds	r1, #24
 8008c64:	f7fe fd0e 	bl	8007684 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008c68:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	bf0c      	ite	eq
 8008c6e:	4628      	moveq	r0, r5
 8008c70:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c78:	f7ff bc64 	b.w	8008544 <prvAddCurrentTaskToDelayedList>
 8008c7c:	20015300 	.word	0x20015300

08008c80 <xTaskRemoveFromEventList>:
{
 8008c80:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c82:	68c3      	ldr	r3, [r0, #12]
 8008c84:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008c86:	b944      	cbnz	r4, 8008c9a <xTaskRemoveFromEventList+0x1a>
 8008c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	e7fe      	b.n	8008c98 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c9a:	f104 0518 	add.w	r5, r4, #24
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f7fe fd12 	bl	80076c8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca4:	4b10      	ldr	r3, [pc, #64]	@ (8008ce8 <xTaskRemoveFromEventList+0x68>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	b9db      	cbnz	r3, 8008ce2 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008caa:	1d25      	adds	r5, r4, #4
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7fe fd0b 	bl	80076c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8008cec <xTaskRemoveFromEventList+0x6c>)
 8008cb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008cb6:	6811      	ldr	r1, [r2, #0]
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf88      	it	hi
 8008cbc:	6013      	strhi	r3, [r2, #0]
 8008cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8008cf0 <xTaskRemoveFromEventList+0x70>)
 8008cc0:	2014      	movs	r0, #20
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cc8:	f7fe fcdc 	bl	8007684 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ccc:	4b09      	ldr	r3, [pc, #36]	@ (8008cf4 <xTaskRemoveFromEventList+0x74>)
 8008cce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008cd6:	bf83      	ittte	hi
 8008cd8:	4b07      	ldrhi	r3, [pc, #28]	@ (8008cf8 <xTaskRemoveFromEventList+0x78>)
 8008cda:	2001      	movhi	r0, #1
 8008cdc:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8008cde:	2000      	movls	r0, #0
}
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ce2:	4806      	ldr	r0, [pc, #24]	@ (8008cfc <xTaskRemoveFromEventList+0x7c>)
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	e7ef      	b.n	8008cc8 <xTaskRemoveFromEventList+0x48>
 8008ce8:	20014e08 	.word	0x20014e08
 8008cec:	20014e24 	.word	0x20014e24
 8008cf0:	20014ea0 	.word	0x20014ea0
 8008cf4:	20015300 	.word	0x20015300
 8008cf8:	20014e18 	.word	0x20014e18
 8008cfc:	20014e5c 	.word	0x20014e5c

08008d00 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d00:	4b03      	ldr	r3, [pc, #12]	@ (8008d10 <vTaskInternalSetTimeOutState+0x10>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d06:	4b03      	ldr	r3, [pc, #12]	@ (8008d14 <vTaskInternalSetTimeOutState+0x14>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6043      	str	r3, [r0, #4]
}
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	20014e14 	.word	0x20014e14
 8008d14:	20014e28 	.word	0x20014e28

08008d18 <xTaskCheckForTimeOut>:
{
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	b940      	cbnz	r0, 8008d32 <xTaskCheckForTimeOut+0x1a>
 8008d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	e7fe      	b.n	8008d30 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008d32:	b941      	cbnz	r1, 8008d46 <xTaskCheckForTimeOut+0x2e>
 8008d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	e7fe      	b.n	8008d44 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008d46:	f7fe fd35 	bl	80077b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d88 <xTaskCheckForTimeOut+0x70>)
 8008d4c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	d010      	beq.n	8008d76 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d54:	480d      	ldr	r0, [pc, #52]	@ (8008d8c <xTaskCheckForTimeOut+0x74>)
 8008d56:	682e      	ldr	r6, [r5, #0]
 8008d58:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d5a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d5c:	4286      	cmp	r6, r0
 8008d5e:	d001      	beq.n	8008d64 <xTaskCheckForTimeOut+0x4c>
 8008d60:	428a      	cmp	r2, r1
 8008d62:	d90f      	bls.n	8008d84 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d64:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d66:	4283      	cmp	r3, r0
 8008d68:	d90a      	bls.n	8008d80 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008d6a:	1a5b      	subs	r3, r3, r1
 8008d6c:	4413      	add	r3, r2
 8008d6e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d70:	4628      	mov	r0, r5
 8008d72:	f7ff ffc5 	bl	8008d00 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008d76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d78:	f7fe fd3c 	bl	80077f4 <vPortExitCritical>
}
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008d84:	2401      	movs	r4, #1
 8008d86:	e7f7      	b.n	8008d78 <xTaskCheckForTimeOut+0x60>
 8008d88:	20014e28 	.word	0x20014e28
 8008d8c:	20014e14 	.word	0x20014e14

08008d90 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008d90:	4b01      	ldr	r3, [pc, #4]	@ (8008d98 <vTaskMissedYield+0x8>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	601a      	str	r2, [r3, #0]
}
 8008d96:	4770      	bx	lr
 8008d98:	20014e18 	.word	0x20014e18

08008d9c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008d9c:	4b05      	ldr	r3, [pc, #20]	@ (8008db4 <xTaskGetSchedulerState+0x18>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	b133      	cbz	r3, 8008db0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008da2:	4b05      	ldr	r3, [pc, #20]	@ (8008db8 <xTaskGetSchedulerState+0x1c>)
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	fab0 f080 	clz	r0, r0
 8008daa:	0940      	lsrs	r0, r0, #5
 8008dac:	0040      	lsls	r0, r0, #1
 8008dae:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008db0:	2001      	movs	r0, #1
	}
 8008db2:	4770      	bx	lr
 8008db4:	20014e20 	.word	0x20014e20
 8008db8:	20014e08 	.word	0x20014e08

08008dbc <xTaskPriorityInherit>:
	{
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	b338      	cbz	r0, 8008e12 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008dc2:	4d1a      	ldr	r5, [pc, #104]	@ (8008e2c <xTaskPriorityInherit+0x70>)
 8008dc4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008dc6:	682a      	ldr	r2, [r5, #0]
 8008dc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d226      	bcs.n	8008e1c <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dce:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008dd0:	4e17      	ldr	r6, [pc, #92]	@ (8008e30 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dd2:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd4:	bfa1      	itttt	ge
 8008dd6:	682a      	ldrge	r2, [r5, #0]
 8008dd8:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8008dda:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8008dde:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008de0:	2214      	movs	r2, #20
 8008de2:	fb02 6303 	mla	r3, r2, r3, r6
 8008de6:	6942      	ldr	r2, [r0, #20]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d113      	bne.n	8008e14 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dec:	1d07      	adds	r7, r0, #4
 8008dee:	4638      	mov	r0, r7
 8008df0:	f7fe fc6a 	bl	80076c8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008df4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008df6:	4a0f      	ldr	r2, [pc, #60]	@ (8008e34 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008dfa:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008dfe:	2014      	movs	r0, #20
 8008e00:	428b      	cmp	r3, r1
 8008e02:	fb00 6003 	mla	r0, r0, r3, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	bf88      	it	hi
 8008e0a:	6013      	strhi	r3, [r2, #0]
 8008e0c:	f7fe fc3a 	bl	8007684 <vListInsertEnd>
				xReturn = pdTRUE;
 8008e10:	2001      	movs	r0, #1
	}
 8008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e18:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8008e1a:	e7f9      	b.n	8008e10 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e22:	4298      	cmp	r0, r3
 8008e24:	bf2c      	ite	cs
 8008e26:	2000      	movcs	r0, #0
 8008e28:	2001      	movcc	r0, #1
 8008e2a:	e7f2      	b.n	8008e12 <xTaskPriorityInherit+0x56>
 8008e2c:	20015300 	.word	0x20015300
 8008e30:	20014ea0 	.word	0x20014ea0
 8008e34:	20014e24 	.word	0x20014e24

08008e38 <xTaskPriorityDisinherit>:
	{
 8008e38:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008e3a:	b908      	cbnz	r0, 8008e40 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008e3c:	2000      	movs	r0, #0
	}
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008e40:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb0 <xTaskPriorityDisinherit+0x78>)
 8008e42:	681c      	ldr	r4, [r3, #0]
 8008e44:	4284      	cmp	r4, r0
 8008e46:	d008      	beq.n	8008e5a <xTaskPriorityDisinherit+0x22>
 8008e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	e7fe      	b.n	8008e58 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e5a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008e5c:	b943      	cbnz	r3, 8008e70 <xTaskPriorityDisinherit+0x38>
 8008e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	e7fe      	b.n	8008e6e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e70:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008e72:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008e74:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e76:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008e78:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e7a:	d0df      	beq.n	8008e3c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1dd      	bne.n	8008e3c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e80:	1d25      	adds	r5, r4, #4
 8008e82:	4628      	mov	r0, r5
 8008e84:	f7fe fc20 	bl	80076c8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e88:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008e8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e90:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e92:	4a08      	ldr	r2, [pc, #32]	@ (8008eb4 <xTaskPriorityDisinherit+0x7c>)
 8008e94:	6811      	ldr	r1, [r2, #0]
 8008e96:	428b      	cmp	r3, r1
 8008e98:	bf88      	it	hi
 8008e9a:	6013      	strhi	r3, [r2, #0]
 8008e9c:	4a06      	ldr	r2, [pc, #24]	@ (8008eb8 <xTaskPriorityDisinherit+0x80>)
 8008e9e:	2014      	movs	r0, #20
 8008ea0:	fb00 2003 	mla	r0, r0, r3, r2
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	f7fe fbed 	bl	8007684 <vListInsertEnd>
					xReturn = pdTRUE;
 8008eaa:	2001      	movs	r0, #1
		return xReturn;
 8008eac:	e7c7      	b.n	8008e3e <xTaskPriorityDisinherit+0x6>
 8008eae:	bf00      	nop
 8008eb0:	20015300 	.word	0x20015300
 8008eb4:	20014e24 	.word	0x20014e24
 8008eb8:	20014ea0 	.word	0x20014ea0

08008ebc <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008ebc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d041      	beq.n	8008f48 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ec4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008ec6:	b942      	cbnz	r2, 8008eda <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	e7fe      	b.n	8008ed8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008eda:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008edc:	4299      	cmp	r1, r3
 8008ede:	bf38      	it	cc
 8008ee0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ee2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008ee4:	428b      	cmp	r3, r1
 8008ee6:	d02f      	beq.n	8008f48 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ee8:	2a01      	cmp	r2, #1
 8008eea:	d12d      	bne.n	8008f48 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8008eec:	4a17      	ldr	r2, [pc, #92]	@ (8008f4c <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	4282      	cmp	r2, r0
 8008ef2:	d108      	bne.n	8008f06 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	e7fe      	b.n	8008f04 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f06:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f08:	4d11      	ldr	r5, [pc, #68]	@ (8008f50 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 8008f0a:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f0c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f0e:	f04f 0214 	mov.w	r2, #20
 8008f12:	fb02 5303 	mla	r3, r2, r3, r5
 8008f16:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f18:	bfa4      	itt	ge
 8008f1a:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 8008f1e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d111      	bne.n	8008f48 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f24:	1d06      	adds	r6, r0, #4
 8008f26:	4630      	mov	r0, r6
 8008f28:	f7fe fbce 	bl	80076c8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008f2c:	4a09      	ldr	r2, [pc, #36]	@ (8008f54 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008f2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008f30:	6811      	ldr	r1, [r2, #0]
 8008f32:	2014      	movs	r0, #20
 8008f34:	428b      	cmp	r3, r1
 8008f36:	fb00 5003 	mla	r0, r0, r3, r5
 8008f3a:	4631      	mov	r1, r6
	}
 8008f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8008f40:	bf88      	it	hi
 8008f42:	6013      	strhi	r3, [r2, #0]
 8008f44:	f7fe bb9e 	b.w	8007684 <vListInsertEnd>
	}
 8008f48:	bd70      	pop	{r4, r5, r6, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20015300 	.word	0x20015300
 8008f50:	20014ea0 	.word	0x20014ea0
 8008f54:	20014e24 	.word	0x20014e24

08008f58 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008f58:	4b04      	ldr	r3, [pc, #16]	@ (8008f6c <pvTaskIncrementMutexHeldCount+0x14>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	b11a      	cbz	r2, 8008f66 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f5e:	6819      	ldr	r1, [r3, #0]
 8008f60:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008f62:	3201      	adds	r2, #1
 8008f64:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8008f66:	6818      	ldr	r0, [r3, #0]
	}
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	20015300 	.word	0x20015300

08008f70 <xTaskNotifyWait>:
	{
 8008f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008f74:	4c20      	ldr	r4, [pc, #128]	@ (8008ff8 <xTaskNotifyWait+0x88>)
	{
 8008f76:	461e      	mov	r6, r3
 8008f78:	4680      	mov	r8, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 8008f7e:	f7fe fc19 	bl	80077b4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d016      	beq.n	8008fba <xTaskNotifyWait+0x4a>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008f90:	ea23 0308 	bic.w	r3, r3, r8
 8008f94:	6593      	str	r3, [r2, #88]	@ 0x58
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	2101      	movs	r1, #1
 8008f9a:	f883 105c 	strb.w	r1, [r3, #92]	@ 0x5c
				if( xTicksToWait > ( TickType_t ) 0 )
 8008f9e:	b166      	cbz	r6, 8008fba <xTaskNotifyWait+0x4a>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7ff facf 	bl	8008544 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8008fa6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8008fba:	f7fe fc1b 	bl	80077f4 <vPortExitCritical>
		taskENTER_CRITICAL();
 8008fbe:	f7fe fbf9 	bl	80077b4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8008fc2:	b115      	cbz	r5, 8008fca <xTaskNotifyWait+0x5a>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc8:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008fd0:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008fd2:	bf01      	itttt	eq
 8008fd4:	6822      	ldreq	r2, [r4, #0]
 8008fd6:	6d93      	ldreq	r3, [r2, #88]	@ 0x58
 8008fd8:	43bb      	biceq	r3, r7
 8008fda:	6593      	streq	r3, [r2, #88]	@ 0x58
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 8008fe2:	bf0c      	ite	eq
 8008fe4:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 8008fe6:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fe8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		taskEXIT_CRITICAL();
 8008fec:	f7fe fc02 	bl	80077f4 <vPortExitCritical>
	}
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20015300 	.word	0x20015300

08008ffc <xTaskGenericNotify>:
	{
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	460d      	mov	r5, r1
 8009000:	4616      	mov	r6, r2
 8009002:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 8009004:	4604      	mov	r4, r0
 8009006:	b940      	cbnz	r0, 800901a <xTaskGenericNotify+0x1e>
 8009008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	e7fe      	b.n	8009018 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 800901a:	f7fe fbcb 	bl	80077b4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800901e:	b10f      	cbz	r7, 8009024 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009020:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009022:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009024:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009028:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800902a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800902c:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
			switch( eAction )
 8009030:	2e04      	cmp	r6, #4
 8009032:	d82c      	bhi.n	800908e <xTaskGenericNotify+0x92>
 8009034:	e8df f006 	tbb	[pc, r6]
 8009038:	29240306 	.word	0x29240306
 800903c:	27          	.byte	0x27
 800903d:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800903e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009040:	432a      	orrs	r2, r5
					( pxTCB->ulNotifiedValue )++;
 8009042:	65a2      	str	r2, [r4, #88]	@ 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009044:	2b01      	cmp	r3, #1
 8009046:	d13e      	bne.n	80090c6 <xTaskGenericNotify+0xca>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009048:	1d25      	adds	r5, r4, #4
 800904a:	4628      	mov	r0, r5
 800904c:	f7fe fb3c 	bl	80076c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009050:	4a20      	ldr	r2, [pc, #128]	@ (80090d4 <xTaskGenericNotify+0xd8>)
 8009052:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009054:	6811      	ldr	r1, [r2, #0]
 8009056:	428b      	cmp	r3, r1
 8009058:	bf88      	it	hi
 800905a:	6013      	strhi	r3, [r2, #0]
 800905c:	4a1e      	ldr	r2, [pc, #120]	@ (80090d8 <xTaskGenericNotify+0xdc>)
 800905e:	2014      	movs	r0, #20
 8009060:	fb00 2003 	mla	r0, r0, r3, r2
 8009064:	4629      	mov	r1, r5
 8009066:	f7fe fb0d 	bl	8007684 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800906a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800906c:	b1db      	cbz	r3, 80090a6 <xTaskGenericNotify+0xaa>
 800906e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	e7fe      	b.n	800907e <xTaskGenericNotify+0x82>
					( pxTCB->ulNotifiedValue )++;
 8009080:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009082:	3201      	adds	r2, #1
 8009084:	e7dd      	b.n	8009042 <xTaskGenericNotify+0x46>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009086:	2b02      	cmp	r3, #2
 8009088:	d022      	beq.n	80090d0 <xTaskGenericNotify+0xd4>
						pxTCB->ulNotifiedValue = ulValue;
 800908a:	65a5      	str	r5, [r4, #88]	@ 0x58
 800908c:	e7da      	b.n	8009044 <xTaskGenericNotify+0x48>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800908e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8009090:	3201      	adds	r2, #1
 8009092:	d0d7      	beq.n	8009044 <xTaskGenericNotify+0x48>
 8009094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	e7fe      	b.n	80090a4 <xTaskGenericNotify+0xa8>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090a6:	4b0d      	ldr	r3, [pc, #52]	@ (80090dc <xTaskGenericNotify+0xe0>)
 80090a8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d909      	bls.n	80090c6 <xTaskGenericNotify+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 80090b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80090b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	f3bf 8f6f 	isb	sy
	{
 80090c6:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 80090c8:	f7fe fb94 	bl	80077f4 <vPortExitCritical>
	}
 80090cc:	4620      	mov	r0, r4
 80090ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 80090d0:	2400      	movs	r4, #0
 80090d2:	e7f9      	b.n	80090c8 <xTaskGenericNotify+0xcc>
 80090d4:	20014e24 	.word	0x20014e24
 80090d8:	20014ea0 	.word	0x20014ea0
 80090dc:	20015300 	.word	0x20015300

080090e0 <xTaskGenericNotifyFromISR>:
	{
 80090e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090e8:	460d      	mov	r5, r1
 80090ea:	4616      	mov	r6, r2
 80090ec:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 80090ee:	4604      	mov	r4, r0
 80090f0:	b940      	cbnz	r0, 8009104 <xTaskGenericNotifyFromISR+0x24>
 80090f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	e7fe      	b.n	8009102 <xTaskGenericNotifyFromISR+0x22>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009104:	f7fe fc68 	bl	80079d8 <vPortValidateInterruptPriority>
	__asm volatile
 8009108:	f3ef 8911 	mrs	r9, BASEPRI
 800910c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800911c:	b10f      	cbz	r7, 8009122 <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800911e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009120:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009122:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009126:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009128:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800912a:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
			switch( eAction )
 800912e:	2e04      	cmp	r6, #4
 8009130:	d81b      	bhi.n	800916a <xTaskGenericNotifyFromISR+0x8a>
 8009132:	e8df f006 	tbb	[pc, r6]
 8009136:	0306      	.short	0x0306
 8009138:	1813      	.short	0x1813
 800913a:	16          	.byte	0x16
 800913b:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 800913c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800913e:	432a      	orrs	r2, r5
					( pxTCB->ulNotifiedValue )++;
 8009140:	65a2      	str	r2, [r4, #88]	@ 0x58
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009142:	2b01      	cmp	r3, #1
 8009144:	d13f      	bne.n	80091c6 <xTaskGenericNotifyFromISR+0xe6>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009146:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009148:	b1db      	cbz	r3, 8009182 <xTaskGenericNotifyFromISR+0xa2>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	e7fe      	b.n	800915a <xTaskGenericNotifyFromISR+0x7a>
					( pxTCB->ulNotifiedValue )++;
 800915c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800915e:	3201      	adds	r2, #1
 8009160:	e7ee      	b.n	8009140 <xTaskGenericNotifyFromISR+0x60>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009162:	2b02      	cmp	r3, #2
 8009164:	d038      	beq.n	80091d8 <xTaskGenericNotifyFromISR+0xf8>
						pxTCB->ulNotifiedValue = ulValue;
 8009166:	65a5      	str	r5, [r4, #88]	@ 0x58
 8009168:	e7eb      	b.n	8009142 <xTaskGenericNotifyFromISR+0x62>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800916a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800916c:	3201      	adds	r2, #1
 800916e:	d0e8      	beq.n	8009142 <xTaskGenericNotifyFromISR+0x62>
 8009170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	e7fe      	b.n	8009180 <xTaskGenericNotifyFromISR+0xa0>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009182:	4b16      	ldr	r3, [pc, #88]	@ (80091dc <xTaskGenericNotifyFromISR+0xfc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	bb1b      	cbnz	r3, 80091d0 <xTaskGenericNotifyFromISR+0xf0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009188:	1d25      	adds	r5, r4, #4
 800918a:	4628      	mov	r0, r5
 800918c:	f7fe fa9c 	bl	80076c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009190:	4a13      	ldr	r2, [pc, #76]	@ (80091e0 <xTaskGenericNotifyFromISR+0x100>)
 8009192:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009194:	6811      	ldr	r1, [r2, #0]
 8009196:	428b      	cmp	r3, r1
 8009198:	bf88      	it	hi
 800919a:	6013      	strhi	r3, [r2, #0]
 800919c:	4a11      	ldr	r2, [pc, #68]	@ (80091e4 <xTaskGenericNotifyFromISR+0x104>)
 800919e:	2014      	movs	r0, #20
 80091a0:	4629      	mov	r1, r5
 80091a2:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80091a6:	f7fe fa6d 	bl	8007684 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091aa:	4b0f      	ldr	r3, [pc, #60]	@ (80091e8 <xTaskGenericNotifyFromISR+0x108>)
 80091ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d907      	bls.n	80091c6 <xTaskGenericNotifyFromISR+0xe6>
					if( pxHigherPriorityTaskWoken != NULL )
 80091b6:	2301      	movs	r3, #1
 80091b8:	f1b8 0f00 	cmp.w	r8, #0
 80091bc:	d001      	beq.n	80091c2 <xTaskGenericNotifyFromISR+0xe2>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80091be:	f8c8 3000 	str.w	r3, [r8]
					xYieldPending = pdTRUE;
 80091c2:	4a0a      	ldr	r2, [pc, #40]	@ (80091ec <xTaskGenericNotifyFromISR+0x10c>)
 80091c4:	6013      	str	r3, [r2, #0]
	{
 80091c6:	2001      	movs	r0, #1
	__asm volatile
 80091c8:	f389 8811 	msr	BASEPRI, r9
	}
 80091cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80091d0:	4807      	ldr	r0, [pc, #28]	@ (80091f0 <xTaskGenericNotifyFromISR+0x110>)
 80091d2:	f104 0118 	add.w	r1, r4, #24
 80091d6:	e7e6      	b.n	80091a6 <xTaskGenericNotifyFromISR+0xc6>
						xReturn = pdFAIL;
 80091d8:	2000      	movs	r0, #0
 80091da:	e7f5      	b.n	80091c8 <xTaskGenericNotifyFromISR+0xe8>
 80091dc:	20014e08 	.word	0x20014e08
 80091e0:	20014e24 	.word	0x20014e24
 80091e4:	20014ea0 	.word	0x20014ea0
 80091e8:	20015300 	.word	0x20015300
 80091ec:	20014e18 	.word	0x20014e18
 80091f0:	20014e5c 	.word	0x20014e5c

080091f4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80091f4:	4291      	cmp	r1, r2
{
 80091f6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091f8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091fa:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80091fc:	d80a      	bhi.n	8009214 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	6983      	ldr	r3, [r0, #24]
 8009202:	429a      	cmp	r2, r3
 8009204:	d20d      	bcs.n	8009222 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009206:	4b08      	ldr	r3, [pc, #32]	@ (8009228 <prvInsertTimerInActiveList+0x34>)
 8009208:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	f7fe fa45 	bl	800769a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009210:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8009212:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009214:	429a      	cmp	r2, r3
 8009216:	d201      	bcs.n	800921c <prvInsertTimerInActiveList+0x28>
 8009218:	4299      	cmp	r1, r3
 800921a:	d202      	bcs.n	8009222 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800921c:	4b03      	ldr	r3, [pc, #12]	@ (800922c <prvInsertTimerInActiveList+0x38>)
 800921e:	1d01      	adds	r1, r0, #4
 8009220:	e7f3      	b.n	800920a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009222:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009224:	e7f5      	b.n	8009212 <prvInsertTimerInActiveList+0x1e>
 8009226:	bf00      	nop
 8009228:	20015400 	.word	0x20015400
 800922c:	20015404 	.word	0x20015404

08009230 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009232:	4c11      	ldr	r4, [pc, #68]	@ (8009278 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009234:	f7fe fabe 	bl	80077b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009238:	6825      	ldr	r5, [r4, #0]
 800923a:	b9bd      	cbnz	r5, 800926c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800923c:	4f0f      	ldr	r7, [pc, #60]	@ (800927c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800923e:	4e10      	ldr	r6, [pc, #64]	@ (8009280 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009240:	4638      	mov	r0, r7
 8009242:	f7fe fa11 	bl	8007668 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009246:	4630      	mov	r0, r6
 8009248:	f7fe fa0e 	bl	8007668 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800924c:	4b0d      	ldr	r3, [pc, #52]	@ (8009284 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800924e:	4a0e      	ldr	r2, [pc, #56]	@ (8009288 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8009250:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009252:	4b0e      	ldr	r3, [pc, #56]	@ (800928c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009254:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8009256:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009258:	200a      	movs	r0, #10
 800925a:	4b0d      	ldr	r3, [pc, #52]	@ (8009290 <prvCheckForValidListAndQueue+0x60>)
 800925c:	9500      	str	r5, [sp, #0]
 800925e:	f7fe fcb2 	bl	8007bc6 <xQueueGenericCreateStatic>
 8009262:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009264:	b110      	cbz	r0, 800926c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009266:	490b      	ldr	r1, [pc, #44]	@ (8009294 <prvCheckForValidListAndQueue+0x64>)
 8009268:	f7ff f88a 	bl	8008380 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800926c:	b003      	add	sp, #12
 800926e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009272:	f7fe babf 	b.w	80077f4 <vPortExitCritical>
 8009276:	bf00      	nop
 8009278:	200153fc 	.word	0x200153fc
 800927c:	2001541c 	.word	0x2001541c
 8009280:	20015408 	.word	0x20015408
 8009284:	20015404 	.word	0x20015404
 8009288:	20015354 	.word	0x20015354
 800928c:	20015400 	.word	0x20015400
 8009290:	20015304 	.word	0x20015304
 8009294:	08014cd5 	.word	0x08014cd5

08009298 <xTimerCreateTimerTask>:
{
 8009298:	b510      	push	{r4, lr}
 800929a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800929c:	f7ff ffc8 	bl	8009230 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80092a0:	4b12      	ldr	r3, [pc, #72]	@ (80092ec <xTimerCreateTimerTask+0x54>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	b1b3      	cbz	r3, 80092d4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092a6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092a8:	aa07      	add	r2, sp, #28
 80092aa:	a906      	add	r1, sp, #24
 80092ac:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092ae:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092b2:	f7fe f8d1 	bl	8007458 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092b6:	9b05      	ldr	r3, [sp, #20]
 80092b8:	9302      	str	r3, [sp, #8]
 80092ba:	9b06      	ldr	r3, [sp, #24]
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	2302      	movs	r3, #2
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	9a07      	ldr	r2, [sp, #28]
 80092c4:	490a      	ldr	r1, [pc, #40]	@ (80092f0 <xTimerCreateTimerTask+0x58>)
 80092c6:	480b      	ldr	r0, [pc, #44]	@ (80092f4 <xTimerCreateTimerTask+0x5c>)
 80092c8:	4623      	mov	r3, r4
 80092ca:	f7ff fa1e 	bl	800870a <xTaskCreateStatic>
 80092ce:	4b0a      	ldr	r3, [pc, #40]	@ (80092f8 <xTimerCreateTimerTask+0x60>)
 80092d0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80092d2:	b940      	cbnz	r0, 80092e6 <xTimerCreateTimerTask+0x4e>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80092e4:	e7fe      	b.n	80092e4 <xTimerCreateTimerTask+0x4c>
}
 80092e6:	2001      	movs	r0, #1
 80092e8:	b008      	add	sp, #32
 80092ea:	bd10      	pop	{r4, pc}
 80092ec:	200153fc 	.word	0x200153fc
 80092f0:	08014cda 	.word	0x08014cda
 80092f4:	080093f9 	.word	0x080093f9
 80092f8:	200153f8 	.word	0x200153f8

080092fc <xTimerGenericCommand>:
{
 80092fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80092fe:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009300:	4604      	mov	r4, r0
{
 8009302:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009304:	b940      	cbnz	r0, 8009318 <xTimerGenericCommand+0x1c>
 8009306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	e7fe      	b.n	8009316 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009318:	4d0d      	ldr	r5, [pc, #52]	@ (8009350 <xTimerGenericCommand+0x54>)
 800931a:	6828      	ldr	r0, [r5, #0]
 800931c:	b180      	cbz	r0, 8009340 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800931e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009320:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009324:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009326:	dc0d      	bgt.n	8009344 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009328:	f7ff fd38 	bl	8008d9c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800932c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800932e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009330:	bf08      	it	eq
 8009332:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009334:	6828      	ldr	r0, [r5, #0]
 8009336:	bf18      	it	ne
 8009338:	461a      	movne	r2, r3
 800933a:	4669      	mov	r1, sp
 800933c:	f7fe fcf8 	bl	8007d30 <xQueueGenericSend>
}
 8009340:	b004      	add	sp, #16
 8009342:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009344:	2300      	movs	r3, #0
 8009346:	4669      	mov	r1, sp
 8009348:	f7fe fda4 	bl	8007e94 <xQueueGenericSendFromISR>
 800934c:	e7f8      	b.n	8009340 <xTimerGenericCommand+0x44>
 800934e:	bf00      	nop
 8009350:	200153fc 	.word	0x200153fc

08009354 <prvSampleTimeNow>:
{
 8009354:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009358:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80093f4 <prvSampleTimeNow+0xa0>
{
 800935c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800935e:	f7ff fae1 	bl	8008924 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009362:	f8d8 3000 	ldr.w	r3, [r8]
 8009366:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8009368:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800936a:	d909      	bls.n	8009380 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800936c:	4f1f      	ldr	r7, [pc, #124]	@ (80093ec <prvSampleTimeNow+0x98>)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	b96a      	cbnz	r2, 8009390 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009374:	4a1e      	ldr	r2, [pc, #120]	@ (80093f0 <prvSampleTimeNow+0x9c>)
 8009376:	6811      	ldr	r1, [r2, #0]
 8009378:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800937a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <prvSampleTimeNow+0x2e>
 8009380:	2300      	movs	r3, #0
}
 8009382:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009384:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009386:	f8c8 5000 	str.w	r5, [r8]
}
 800938a:	b002      	add	sp, #8
 800938c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009390:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009392:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009394:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009398:	f104 0a04 	add.w	sl, r4, #4
 800939c:	4650      	mov	r0, sl
 800939e:	f7fe f993 	bl	80076c8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093a2:	6a23      	ldr	r3, [r4, #32]
 80093a4:	4620      	mov	r0, r4
 80093a6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80093ac:	075b      	lsls	r3, r3, #29
 80093ae:	d5de      	bpl.n	800936e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093b0:	69a3      	ldr	r3, [r4, #24]
 80093b2:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80093b4:	4599      	cmp	r9, r3
 80093b6:	d206      	bcs.n	80093c6 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093b8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093ba:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093bc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093be:	4651      	mov	r1, sl
 80093c0:	f7fe f96b 	bl	800769a <vListInsert>
 80093c4:	e7d3      	b.n	800936e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093c6:	2300      	movs	r3, #0
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	464a      	mov	r2, r9
 80093cc:	4619      	mov	r1, r3
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff ff94 	bl	80092fc <xTimerGenericCommand>
				configASSERT( xResult );
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1ca      	bne.n	800936e <prvSampleTimeNow+0x1a>
 80093d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	e7fe      	b.n	80093e8 <prvSampleTimeNow+0x94>
 80093ea:	bf00      	nop
 80093ec:	20015404 	.word	0x20015404
 80093f0:	20015400 	.word	0x20015400
 80093f4:	200153f4 	.word	0x200153f4

080093f8 <prvTimerTask>:
{
 80093f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093fc:	4d6e      	ldr	r5, [pc, #440]	@ (80095b8 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093fe:	4e6f      	ldr	r6, [pc, #444]	@ (80095bc <prvTimerTask+0x1c4>)
{
 8009400:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	f8d3 8000 	ldr.w	r8, [r3]
 8009408:	f1b8 0f00 	cmp.w	r8, #0
 800940c:	d035      	beq.n	800947a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009414:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8009416:	f7ff fa7d 	bl	8008914 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800941a:	a804      	add	r0, sp, #16
 800941c:	f7ff ff9a 	bl	8009354 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009420:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009422:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009424:	2b00      	cmp	r3, #0
 8009426:	d169      	bne.n	80094fc <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009428:	2c00      	cmp	r4, #0
 800942a:	d14c      	bne.n	80094c6 <prvTimerTask+0xce>
 800942c:	4540      	cmp	r0, r8
 800942e:	d350      	bcc.n	80094d2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8009430:	f7ff fb1c 	bl	8008a6c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800943a:	1d38      	adds	r0, r7, #4
 800943c:	f7fe f944 	bl	80076c8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009440:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009444:	0758      	lsls	r0, r3, #29
 8009446:	d51a      	bpl.n	800947e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009448:	69b9      	ldr	r1, [r7, #24]
 800944a:	4643      	mov	r3, r8
 800944c:	464a      	mov	r2, r9
 800944e:	4441      	add	r1, r8
 8009450:	4638      	mov	r0, r7
 8009452:	f7ff fecf 	bl	80091f4 <prvInsertTimerInActiveList>
 8009456:	b1b0      	cbz	r0, 8009486 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009458:	9400      	str	r4, [sp, #0]
 800945a:	4623      	mov	r3, r4
 800945c:	4642      	mov	r2, r8
 800945e:	4621      	mov	r1, r4
 8009460:	4638      	mov	r0, r7
 8009462:	f7ff ff4b 	bl	80092fc <xTimerGenericCommand>
			configASSERT( xResult );
 8009466:	b970      	cbnz	r0, 8009486 <prvTimerTask+0x8e>
 8009468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	e7fe      	b.n	8009478 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800947a:	2401      	movs	r4, #1
 800947c:	e7cb      	b.n	8009416 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800947e:	f023 0301 	bic.w	r3, r3, #1
 8009482:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	4638      	mov	r0, r7
 800948a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800948c:	6830      	ldr	r0, [r6, #0]
 800948e:	2200      	movs	r2, #0
 8009490:	a904      	add	r1, sp, #16
 8009492:	f7fe fdad 	bl	8007ff0 <xQueueReceive>
 8009496:	2800      	cmp	r0, #0
 8009498:	d0b3      	beq.n	8009402 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800949a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800949c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800949e:	2b00      	cmp	r3, #0
 80094a0:	db2f      	blt.n	8009502 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094a2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094a4:	6963      	ldr	r3, [r4, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d132      	bne.n	8009510 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094aa:	a803      	add	r0, sp, #12
 80094ac:	f7ff ff52 	bl	8009354 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80094b0:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094b2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80094b4:	2b09      	cmp	r3, #9
 80094b6:	d8e9      	bhi.n	800948c <prvTimerTask+0x94>
 80094b8:	e8df f003 	tbb	[pc, r3]
 80094bc:	572e2e2e 	.word	0x572e2e2e
 80094c0:	2e2e765e 	.word	0x2e2e765e
 80094c4:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094c6:	4b3e      	ldr	r3, [pc, #248]	@ (80095c0 <prvTimerTask+0x1c8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681c      	ldr	r4, [r3, #0]
 80094cc:	fab4 f484 	clz	r4, r4
 80094d0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094d2:	6830      	ldr	r0, [r6, #0]
 80094d4:	4622      	mov	r2, r4
 80094d6:	eba8 0109 	sub.w	r1, r8, r9
 80094da:	f7fe ff90 	bl	80083fe <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094de:	f7ff fac5 	bl	8008a6c <xTaskResumeAll>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d1d2      	bne.n	800948c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80094e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80094ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	e7c7      	b.n	800948c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80094fc:	f7ff fab6 	bl	8008a6c <xTaskResumeAll>
}
 8009500:	e7c4      	b.n	800948c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009502:	9b05      	ldr	r3, [sp, #20]
 8009504:	9907      	ldr	r1, [sp, #28]
 8009506:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009508:	9b04      	ldr	r3, [sp, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	dbbe      	blt.n	800948c <prvTimerTask+0x94>
 800950e:	e7c8      	b.n	80094a2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009510:	1d20      	adds	r0, r4, #4
 8009512:	f7fe f8d9 	bl	80076c8 <uxListRemove>
 8009516:	e7c8      	b.n	80094aa <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009518:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800951c:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009526:	9b05      	ldr	r3, [sp, #20]
 8009528:	4620      	mov	r0, r4
 800952a:	4419      	add	r1, r3
 800952c:	f7ff fe62 	bl	80091f4 <prvInsertTimerInActiveList>
 8009530:	2800      	cmp	r0, #0
 8009532:	d0ab      	beq.n	800948c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009534:	6a23      	ldr	r3, [r4, #32]
 8009536:	4620      	mov	r0, r4
 8009538:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800953a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800953e:	0759      	lsls	r1, r3, #29
 8009540:	d5a4      	bpl.n	800948c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009542:	69a2      	ldr	r2, [r4, #24]
 8009544:	9905      	ldr	r1, [sp, #20]
 8009546:	2300      	movs	r3, #0
 8009548:	440a      	add	r2, r1
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	4619      	mov	r1, r3
 800954e:	4620      	mov	r0, r4
 8009550:	f7ff fed4 	bl	80092fc <xTimerGenericCommand>
							configASSERT( xResult );
 8009554:	2800      	cmp	r0, #0
 8009556:	d199      	bne.n	800948c <prvTimerTask+0x94>
 8009558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	e7fe      	b.n	8009568 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800956a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800956e:	f023 0301 	bic.w	r3, r3, #1
 8009572:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8009576:	e789      	b.n	800948c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009578:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800957c:	f043 0301 	orr.w	r3, r3, #1
 8009580:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009584:	9905      	ldr	r1, [sp, #20]
 8009586:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009588:	b941      	cbnz	r1, 800959c <prvTimerTask+0x1a4>
 800958a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	e7fe      	b.n	800959a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800959c:	4603      	mov	r3, r0
 800959e:	4401      	add	r1, r0
 80095a0:	4620      	mov	r0, r4
 80095a2:	f7ff fe27 	bl	80091f4 <prvInsertTimerInActiveList>
					break;
 80095a6:	e771      	b.n	800948c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80095ac:	079a      	lsls	r2, r3, #30
 80095ae:	d4de      	bmi.n	800956e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80095b0:	4620      	mov	r0, r4
 80095b2:	f7fe f81b 	bl	80075ec <vPortFree>
 80095b6:	e769      	b.n	800948c <prvTimerTask+0x94>
 80095b8:	20015404 	.word	0x20015404
 80095bc:	200153fc 	.word	0x200153fc
 80095c0:	20015400 	.word	0x20015400

080095c4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80095c4:	8880      	ldrh	r0, [r0, #4]
 80095c6:	4770      	bx	lr

080095c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	6803      	ldr	r3, [r0, #0]
 80095cc:	4605      	mov	r5, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d2:	2100      	movs	r1, #0
 80095d4:	4798      	blx	r3
 80095d6:	682b      	ldr	r3, [r5, #0]
 80095d8:	4606      	mov	r6, r0
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	4628      	mov	r0, r5
 80095de:	4798      	blx	r3
 80095e0:	1ba4      	subs	r4, r4, r6
 80095e2:	b2a4      	uxth	r4, r4
 80095e4:	fbb4 f0f0 	udiv	r0, r4, r0
 80095e8:	bd70      	pop	{r4, r5, r6, pc}

080095ea <_ZN8touchgfx17AbstractPartition5clearEv>:
 80095ea:	2300      	movs	r3, #0
 80095ec:	8083      	strh	r3, [r0, #4]
 80095ee:	4770      	bx	lr

080095f0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80095f0:	b510      	push	{r4, lr}
 80095f2:	6803      	ldr	r3, [r0, #0]
 80095f4:	8881      	ldrh	r1, [r0, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	4604      	mov	r4, r0
 80095fa:	4798      	blx	r3
 80095fc:	88a3      	ldrh	r3, [r4, #4]
 80095fe:	3301      	adds	r3, #1
 8009600:	80a3      	strh	r3, [r4, #4]
 8009602:	bd10      	pop	{r4, pc}

08009604 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8009604:	6803      	ldr	r3, [r0, #0]
 8009606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009608:	4718      	bx	r3

0800960a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800960a:	4770      	bx	lr

0800960c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800960c:	4a02      	ldr	r2, [pc, #8]	@ (8009618 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800960e:	6002      	str	r2, [r0, #0]
 8009610:	2200      	movs	r2, #0
 8009612:	8082      	strh	r2, [r0, #4]
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	080159a8 	.word	0x080159a8

0800961c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800961c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800961e:	2000      	movs	r0, #0
 8009620:	b12b      	cbz	r3, 800962e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009622:	b920      	cbnz	r0, 800962e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009624:	1a5a      	subs	r2, r3, r1
 8009626:	4250      	negs	r0, r2
 8009628:	4150      	adcs	r0, r2
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	e7f8      	b.n	8009620 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800962e:	4770      	bx	lr

08009630 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8009630:	2300      	movs	r3, #0
 8009632:	6148      	str	r0, [r1, #20]
 8009634:	618b      	str	r3, [r1, #24]
 8009636:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009638:	b913      	cbnz	r3, 8009640 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800963a:	6281      	str	r1, [r0, #40]	@ 0x28
 800963c:	4770      	bx	lr
 800963e:	4613      	mov	r3, r2
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	2a00      	cmp	r2, #0
 8009644:	d1fb      	bne.n	800963e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8009646:	6199      	str	r1, [r3, #24]
 8009648:	4770      	bx	lr

0800964a <_ZN8touchgfx9Container9removeAllEv>:
 800964a:	2200      	movs	r2, #0
 800964c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800964e:	b123      	cbz	r3, 800965a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8009650:	6999      	ldr	r1, [r3, #24]
 8009652:	6281      	str	r1, [r0, #40]	@ 0x28
 8009654:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8009658:	e7f8      	b.n	800964c <_ZN8touchgfx9Container9removeAllEv+0x2>
 800965a:	4770      	bx	lr

0800965c <_ZN8touchgfx9Container6unlinkEv>:
 800965c:	2300      	movs	r3, #0
 800965e:	6283      	str	r3, [r0, #40]	@ 0x28
 8009660:	4770      	bx	lr

08009662 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8009662:	2200      	movs	r2, #0
 8009664:	8002      	strh	r2, [r0, #0]
 8009666:	8042      	strh	r2, [r0, #2]
 8009668:	8082      	strh	r2, [r0, #4]
 800966a:	80c2      	strh	r2, [r0, #6]
 800966c:	4770      	bx	lr

0800966e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800966e:	b570      	push	{r4, r5, r6, lr}
 8009670:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009672:	460d      	mov	r5, r1
 8009674:	4616      	mov	r6, r2
 8009676:	b13c      	cbz	r4, 8009688 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	4620      	mov	r0, r4
 800967c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800967e:	4632      	mov	r2, r6
 8009680:	4629      	mov	r1, r5
 8009682:	4798      	blx	r3
 8009684:	69a4      	ldr	r4, [r4, #24]
 8009686:	e7f6      	b.n	8009676 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8009688:	bd70      	pop	{r4, r5, r6, pc}

0800968a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800968a:	b538      	push	{r3, r4, r5, lr}
 800968c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800968e:	460d      	mov	r5, r1
 8009690:	b134      	cbz	r4, 80096a0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	4621      	mov	r1, r4
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	4628      	mov	r0, r5
 800969a:	4798      	blx	r3
 800969c:	69a4      	ldr	r4, [r4, #24]
 800969e:	e7f7      	b.n	8009690 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80096a0:	bd38      	pop	{r3, r4, r5, pc}

080096a2 <_ZN8touchgfx9ContainerD1Ev>:
 80096a2:	4770      	bx	lr

080096a4 <_ZN8touchgfx9ContainerD0Ev>:
 80096a4:	b510      	push	{r4, lr}
 80096a6:	212c      	movs	r1, #44	@ 0x2c
 80096a8:	4604      	mov	r4, r0
 80096aa:	f009 fbbb 	bl	8012e24 <_ZdlPvj>
 80096ae:	4620      	mov	r0, r4
 80096b0:	bd10      	pop	{r4, pc}

080096b2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80096b2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096b4:	b19b      	cbz	r3, 80096de <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80096b6:	428b      	cmp	r3, r1
 80096b8:	d109      	bne.n	80096ce <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80096ba:	699a      	ldr	r2, [r3, #24]
 80096bc:	2100      	movs	r1, #0
 80096be:	6159      	str	r1, [r3, #20]
 80096c0:	6282      	str	r2, [r0, #40]	@ 0x28
 80096c2:	b902      	cbnz	r2, 80096c6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80096c4:	4770      	bx	lr
 80096c6:	6199      	str	r1, [r3, #24]
 80096c8:	4770      	bx	lr
 80096ca:	4613      	mov	r3, r2
 80096cc:	b13a      	cbz	r2, 80096de <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80096ce:	699a      	ldr	r2, [r3, #24]
 80096d0:	428a      	cmp	r2, r1
 80096d2:	d1fa      	bne.n	80096ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80096d4:	698a      	ldr	r2, [r1, #24]
 80096d6:	619a      	str	r2, [r3, #24]
 80096d8:	2300      	movs	r3, #0
 80096da:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80096de:	4770      	bx	lr

080096e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80096e0:	b410      	push	{r4}
 80096e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096e4:	4604      	mov	r4, r0
 80096e6:	b92b      	cbnz	r3, 80096f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80096e8:	6803      	ldr	r3, [r0, #0]
 80096ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f0:	4611      	mov	r1, r2
 80096f2:	4718      	bx	r3
 80096f4:	b941      	cbnz	r1, 8009708 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80096f6:	6193      	str	r3, [r2, #24]
 80096f8:	6282      	str	r2, [r0, #40]	@ 0x28
 80096fa:	6154      	str	r4, [r2, #20]
 80096fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	4603      	mov	r3, r0
 8009704:	2800      	cmp	r0, #0
 8009706:	d0f9      	beq.n	80096fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8009708:	4299      	cmp	r1, r3
 800970a:	6998      	ldr	r0, [r3, #24]
 800970c:	d1f9      	bne.n	8009702 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800970e:	6190      	str	r0, [r2, #24]
 8009710:	618a      	str	r2, [r1, #24]
 8009712:	e7f2      	b.n	80096fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08009714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	461f      	mov	r7, r3
 800971a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800971e:	460d      	mov	r5, r1
 8009720:	4616      	mov	r6, r2
 8009722:	b103      	cbz	r3, 8009726 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8009724:	6038      	str	r0, [r7, #0]
 8009726:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009728:	b314      	cbz	r4, 8009770 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800972a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800972e:	b1eb      	cbz	r3, 800976c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009730:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8009734:	428d      	cmp	r5, r1
 8009736:	db19      	blt.n	800976c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009738:	8923      	ldrh	r3, [r4, #8]
 800973a:	b289      	uxth	r1, r1
 800973c:	440b      	add	r3, r1
 800973e:	b21b      	sxth	r3, r3
 8009740:	429d      	cmp	r5, r3
 8009742:	da13      	bge.n	800976c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009744:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009748:	4296      	cmp	r6, r2
 800974a:	db0f      	blt.n	800976c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800974c:	8963      	ldrh	r3, [r4, #10]
 800974e:	b292      	uxth	r2, r2
 8009750:	4413      	add	r3, r2
 8009752:	b21b      	sxth	r3, r3
 8009754:	429e      	cmp	r6, r3
 8009756:	da09      	bge.n	800976c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	1ab2      	subs	r2, r6, r2
 800975c:	1a69      	subs	r1, r5, r1
 800975e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8009762:	b212      	sxth	r2, r2
 8009764:	463b      	mov	r3, r7
 8009766:	b209      	sxth	r1, r1
 8009768:	4620      	mov	r0, r4
 800976a:	47c0      	blx	r8
 800976c:	69a4      	ldr	r4, [r4, #24]
 800976e:	e7db      	b.n	8009728 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8009770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009774 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8009774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009778:	4c6e      	ldr	r4, [pc, #440]	@ (8009934 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800977a:	b0a1      	sub	sp, #132	@ 0x84
 800977c:	6824      	ldr	r4, [r4, #0]
 800977e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8009780:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8009784:	9303      	str	r3, [sp, #12]
 8009786:	2400      	movs	r4, #0
 8009788:	802c      	strh	r4, [r5, #0]
 800978a:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800978c:	802c      	strh	r4, [r5, #0]
 800978e:	601c      	str	r4, [r3, #0]
 8009790:	4606      	mov	r6, r0
 8009792:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009796:	f7ff ffbd 	bl	8009714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800979a:	f1b9 0f03 	cmp.w	r9, #3
 800979e:	f340 80c2 	ble.w	8009926 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80097a2:	4631      	mov	r1, r6
 80097a4:	a80c      	add	r0, sp, #48	@ 0x30
 80097a6:	f004 fd19 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80097aa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80097ae:	9306      	str	r3, [sp, #24]
 80097b0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80097b4:	9307      	str	r3, [sp, #28]
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	f8d3 a000 	ldr.w	sl, [r3]
 80097bc:	f1ba 0f00 	cmp.w	sl, #0
 80097c0:	f000 80b4 	beq.w	800992c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 80097c4:	4651      	mov	r1, sl
 80097c6:	a810      	add	r0, sp, #64	@ 0x40
 80097c8:	f004 fd08 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80097cc:	9b01      	ldr	r3, [sp, #4]
 80097ce:	9a06      	ldr	r2, [sp, #24]
 80097d0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80097d4:	189d      	adds	r5, r3, r2
 80097d6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80097da:	9a07      	ldr	r2, [sp, #28]
 80097dc:	2002      	movs	r0, #2
 80097de:	fb91 f1f0 	sdiv	r1, r1, r0
 80097e2:	4419      	add	r1, r3
 80097e4:	1a6d      	subs	r5, r5, r1
 80097e6:	9b02      	ldr	r3, [sp, #8]
 80097e8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80097ec:	4413      	add	r3, r2
 80097ee:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80097f2:	fb92 f2f0 	sdiv	r2, r2, r0
 80097f6:	440a      	add	r2, r1
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	435b      	muls	r3, r3
 80097fc:	fb05 3505 	mla	r5, r5, r5, r3
 8009800:	4f4d      	ldr	r7, [pc, #308]	@ (8009938 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8009802:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009804:	ac10      	add	r4, sp, #64	@ 0x40
 8009806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009808:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800980a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800980c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800980e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009810:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8009814:	f1b9 0f0c 	cmp.w	r9, #12
 8009818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800981c:	f04f 0303 	mov.w	r3, #3
 8009820:	bfc8      	it	gt
 8009822:	4698      	movgt	r8, r3
 8009824:	f8cd 9000 	str.w	r9, [sp]
 8009828:	f04f 0400 	mov.w	r4, #0
 800982c:	bfdc      	itt	le
 800982e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8009832:	fb92 f8f3 	sdivle	r8, r2, r3
 8009836:	1c63      	adds	r3, r4, #1
 8009838:	aa10      	add	r2, sp, #64	@ 0x40
 800983a:	f004 0401 	and.w	r4, r4, #1
 800983e:	9308      	str	r3, [sp, #32]
 8009840:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8009844:	9b00      	ldr	r3, [sp, #0]
 8009846:	fb93 f3f8 	sdiv	r3, r3, r8
 800984a:	b29b      	uxth	r3, r3
 800984c:	3404      	adds	r4, #4
 800984e:	f04f 0b00 	mov.w	fp, #0
 8009852:	9304      	str	r3, [sp, #16]
 8009854:	9a04      	ldr	r2, [sp, #16]
 8009856:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800985a:	fb13 f302 	smulbb	r3, r3, r2
 800985e:	9a01      	ldr	r2, [sp, #4]
 8009860:	b29b      	uxth	r3, r3
 8009862:	1899      	adds	r1, r3, r2
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800986a:	b209      	sxth	r1, r1
 800986c:	4299      	cmp	r1, r3
 800986e:	db4d      	blt.n	800990c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009870:	8932      	ldrh	r2, [r6, #8]
 8009872:	4413      	add	r3, r2
 8009874:	b21b      	sxth	r3, r3
 8009876:	4299      	cmp	r1, r3
 8009878:	da48      	bge.n	800990c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	6827      	ldr	r7, [r4, #0]
 800987e:	fb17 f703 	smulbb	r7, r7, r3
 8009882:	9b02      	ldr	r3, [sp, #8]
 8009884:	b2bf      	uxth	r7, r7
 8009886:	18fa      	adds	r2, r7, r3
 8009888:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800988c:	b212      	sxth	r2, r2
 800988e:	429a      	cmp	r2, r3
 8009890:	db3c      	blt.n	800990c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009892:	8970      	ldrh	r0, [r6, #10]
 8009894:	4403      	add	r3, r0
 8009896:	b21b      	sxth	r3, r3
 8009898:	429a      	cmp	r2, r3
 800989a:	da37      	bge.n	800990c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800989c:	2300      	movs	r3, #0
 800989e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098a0:	4630      	mov	r0, r6
 80098a2:	ab0b      	add	r3, sp, #44	@ 0x2c
 80098a4:	f7ff ff36 	bl	8009714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80098a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80098aa:	b37a      	cbz	r2, 800990c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80098ac:	4552      	cmp	r2, sl
 80098ae:	d02d      	beq.n	800990c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80098b0:	4611      	mov	r1, r2
 80098b2:	a80e      	add	r0, sp, #56	@ 0x38
 80098b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80098b6:	f004 fc91 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80098ba:	9a06      	ldr	r2, [sp, #24]
 80098bc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80098c6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80098ca:	4413      	add	r3, r2
 80098cc:	f04f 0e02 	mov.w	lr, #2
 80098d0:	fb91 f1fe 	sdiv	r1, r1, lr
 80098d4:	4401      	add	r1, r0
 80098d6:	1a58      	subs	r0, r3, r1
 80098d8:	9a07      	ldr	r2, [sp, #28]
 80098da:	9b02      	ldr	r3, [sp, #8]
 80098dc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80098e0:	fb9c fcfe 	sdiv	ip, ip, lr
 80098e4:	4413      	add	r3, r2
 80098e6:	448c      	add	ip, r1
 80098e8:	eba3 030c 	sub.w	r3, r3, ip
 80098ec:	435b      	muls	r3, r3
 80098ee:	fb00 3300 	mla	r3, r0, r0, r3
 80098f2:	42ab      	cmp	r3, r5
 80098f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098f6:	d208      	bcs.n	800990a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80098f8:	9803      	ldr	r0, [sp, #12]
 80098fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098fc:	6001      	str	r1, [r0, #0]
 80098fe:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8009900:	9805      	ldr	r0, [sp, #20]
 8009902:	8008      	strh	r0, [r1, #0]
 8009904:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8009906:	461d      	mov	r5, r3
 8009908:	800f      	strh	r7, [r1, #0]
 800990a:	4692      	mov	sl, r2
 800990c:	f10b 0b01 	add.w	fp, fp, #1
 8009910:	f1bb 0f04 	cmp.w	fp, #4
 8009914:	f104 0408 	add.w	r4, r4, #8
 8009918:	d19c      	bne.n	8009854 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800991a:	9b00      	ldr	r3, [sp, #0]
 800991c:	9c08      	ldr	r4, [sp, #32]
 800991e:	444b      	add	r3, r9
 8009920:	4544      	cmp	r4, r8
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	d187      	bne.n	8009836 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8009926:	b021      	add	sp, #132	@ 0x84
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992c:	f04f 35ff 	mov.w	r5, #4294967295
 8009930:	e766      	b.n	8009800 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8009932:	bf00      	nop
 8009934:	2001543c 	.word	0x2001543c
 8009938:	08013ed4 	.word	0x08013ed4

0800993c <_ZN8touchgfx4RectaNERKS0_>:
 800993c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009940:	f9b1 7000 	ldrsh.w	r7, [r1]
 8009944:	888c      	ldrh	r4, [r1, #4]
 8009946:	f9b0 9000 	ldrsh.w	r9, [r0]
 800994a:	443c      	add	r4, r7
 800994c:	b2a4      	uxth	r4, r4
 800994e:	fa0f f884 	sxth.w	r8, r4
 8009952:	45c1      	cmp	r9, r8
 8009954:	da2f      	bge.n	80099b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009956:	8882      	ldrh	r2, [r0, #4]
 8009958:	444a      	add	r2, r9
 800995a:	b292      	uxth	r2, r2
 800995c:	fa0f fe82 	sxth.w	lr, r2
 8009960:	4577      	cmp	r7, lr
 8009962:	da28      	bge.n	80099b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009964:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009968:	88cb      	ldrh	r3, [r1, #6]
 800996a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800996e:	442b      	add	r3, r5
 8009970:	b21b      	sxth	r3, r3
 8009972:	429e      	cmp	r6, r3
 8009974:	da1f      	bge.n	80099b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009976:	88c3      	ldrh	r3, [r0, #6]
 8009978:	4433      	add	r3, r6
 800997a:	b29b      	uxth	r3, r3
 800997c:	fa0f fc83 	sxth.w	ip, r3
 8009980:	4565      	cmp	r5, ip
 8009982:	da18      	bge.n	80099b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009984:	454f      	cmp	r7, r9
 8009986:	bfb8      	it	lt
 8009988:	464f      	movlt	r7, r9
 800998a:	42b5      	cmp	r5, r6
 800998c:	bfb8      	it	lt
 800998e:	4635      	movlt	r5, r6
 8009990:	45f0      	cmp	r8, lr
 8009992:	bfd8      	it	le
 8009994:	4622      	movle	r2, r4
 8009996:	1bd2      	subs	r2, r2, r7
 8009998:	8082      	strh	r2, [r0, #4]
 800999a:	884a      	ldrh	r2, [r1, #2]
 800999c:	88c9      	ldrh	r1, [r1, #6]
 800999e:	8007      	strh	r7, [r0, #0]
 80099a0:	440a      	add	r2, r1
 80099a2:	b292      	uxth	r2, r2
 80099a4:	b211      	sxth	r1, r2
 80099a6:	458c      	cmp	ip, r1
 80099a8:	bfa8      	it	ge
 80099aa:	4613      	movge	r3, r2
 80099ac:	1b5b      	subs	r3, r3, r5
 80099ae:	80c3      	strh	r3, [r0, #6]
 80099b0:	8045      	strh	r5, [r0, #2]
 80099b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099b6:	2300      	movs	r3, #0
 80099b8:	8003      	strh	r3, [r0, #0]
 80099ba:	8043      	strh	r3, [r0, #2]
 80099bc:	8083      	strh	r3, [r0, #4]
 80099be:	80c3      	strh	r3, [r0, #6]
 80099c0:	e7f7      	b.n	80099b2 <_ZN8touchgfx4RectaNERKS0_+0x76>

080099c2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80099c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dd06      	ble.n	80099d8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80099ca:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80099ce:	2800      	cmp	r0, #0
 80099d0:	bfcc      	ite	gt
 80099d2:	2000      	movgt	r0, #0
 80099d4:	2001      	movle	r0, #1
 80099d6:	4770      	bx	lr
 80099d8:	2001      	movs	r0, #1
 80099da:	4770      	bx	lr

080099dc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	2300      	movs	r3, #0
 80099e2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80099e4:	8003      	strh	r3, [r0, #0]
 80099e6:	4604      	mov	r4, r0
 80099e8:	8043      	strh	r3, [r0, #2]
 80099ea:	8083      	strh	r3, [r0, #4]
 80099ec:	80c3      	strh	r3, [r0, #6]
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	d040      	beq.n	8009a74 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80099f2:	1d28      	adds	r0, r5, #4
 80099f4:	f7ff ffe5 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80099f8:	b988      	cbnz	r0, 8009a1e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7ff ffe1 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009a00:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009a04:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009a08:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8009a0c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8009a10:	b138      	cbz	r0, 8009a22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8009a12:	8022      	strh	r2, [r4, #0]
 8009a14:	8063      	strh	r3, [r4, #2]
 8009a16:	f8a4 e004 	strh.w	lr, [r4, #4]
 8009a1a:	f8a4 c006 	strh.w	ip, [r4, #6]
 8009a1e:	69ad      	ldr	r5, [r5, #24]
 8009a20:	e7e5      	b.n	80099ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8009a22:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009a26:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009a2a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8009a2e:	4290      	cmp	r0, r2
 8009a30:	4607      	mov	r7, r0
 8009a32:	bfa8      	it	ge
 8009a34:	4617      	movge	r7, r2
 8009a36:	4472      	add	r2, lr
 8009a38:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8009a3c:	8027      	strh	r7, [r4, #0]
 8009a3e:	4299      	cmp	r1, r3
 8009a40:	460e      	mov	r6, r1
 8009a42:	4440      	add	r0, r8
 8009a44:	bfa8      	it	ge
 8009a46:	461e      	movge	r6, r3
 8009a48:	4471      	add	r1, lr
 8009a4a:	4463      	add	r3, ip
 8009a4c:	b200      	sxth	r0, r0
 8009a4e:	b212      	sxth	r2, r2
 8009a50:	b209      	sxth	r1, r1
 8009a52:	b21b      	sxth	r3, r3
 8009a54:	4290      	cmp	r0, r2
 8009a56:	bfac      	ite	ge
 8009a58:	ebc7 0200 	rsbge	r2, r7, r0
 8009a5c:	ebc7 0202 	rsblt	r2, r7, r2
 8009a60:	4299      	cmp	r1, r3
 8009a62:	bfac      	ite	ge
 8009a64:	ebc6 0301 	rsbge	r3, r6, r1
 8009a68:	ebc6 0303 	rsblt	r3, r6, r3
 8009a6c:	8066      	strh	r6, [r4, #2]
 8009a6e:	80a2      	strh	r2, [r4, #4]
 8009a70:	80e3      	strh	r3, [r4, #6]
 8009a72:	e7d4      	b.n	8009a1e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009a74:	4620      	mov	r0, r4
 8009a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a7a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8009a7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009a7e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009a82:	b383      	cbz	r3, 8009ae6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009a84:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009a86:	b374      	cbz	r4, 8009ae6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009a88:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009a8c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8009a90:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009a94:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8009a98:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009a9c:	b303      	cbz	r3, 8009ae0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009a9e:	4668      	mov	r0, sp
 8009aa0:	1d21      	adds	r1, r4, #4
 8009aa2:	f8ad 5000 	strh.w	r5, [sp]
 8009aa6:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009aaa:	f8ad 7004 	strh.w	r7, [sp, #4]
 8009aae:	f8ad 8006 	strh.w	r8, [sp, #6]
 8009ab2:	f7ff ff43 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 8009ab6:	4668      	mov	r0, sp
 8009ab8:	f7ff ff83 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009abc:	b980      	cbnz	r0, 8009ae0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009abe:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ac2:	88a2      	ldrh	r2, [r4, #4]
 8009ac4:	1a9b      	subs	r3, r3, r2
 8009ac6:	f8ad 3000 	strh.w	r3, [sp]
 8009aca:	88e2      	ldrh	r2, [r4, #6]
 8009acc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009ad0:	1a9b      	subs	r3, r3, r2
 8009ad2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	4669      	mov	r1, sp
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	4620      	mov	r0, r4
 8009ade:	4798      	blx	r3
 8009ae0:	69a4      	ldr	r4, [r4, #24]
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	d1d8      	bne.n	8009a98 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009ae6:	b002      	add	sp, #8
 8009ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009aec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8009aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009aee:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009af2:	460d      	mov	r5, r1
 8009af4:	4616      	mov	r6, r2
 8009af6:	b323      	cbz	r3, 8009b42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009af8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009afa:	b314      	cbz	r4, 8009b42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009afc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009b00:	b1eb      	cbz	r3, 8009b3e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009b02:	6828      	ldr	r0, [r5, #0]
 8009b04:	6869      	ldr	r1, [r5, #4]
 8009b06:	466b      	mov	r3, sp
 8009b08:	c303      	stmia	r3!, {r0, r1}
 8009b0a:	4668      	mov	r0, sp
 8009b0c:	1d21      	adds	r1, r4, #4
 8009b0e:	f7ff ff15 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 8009b12:	4668      	mov	r0, sp
 8009b14:	f7ff ff55 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009b18:	b988      	cbnz	r0, 8009b3e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009b1a:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b1e:	88a2      	ldrh	r2, [r4, #4]
 8009b20:	1a9b      	subs	r3, r3, r2
 8009b22:	f8ad 3000 	strh.w	r3, [sp]
 8009b26:	88e2      	ldrh	r2, [r4, #6]
 8009b28:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	4632      	mov	r2, r6
 8009b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b38:	4669      	mov	r1, sp
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	4798      	blx	r3
 8009b3e:	69a4      	ldr	r4, [r4, #24]
 8009b40:	e7db      	b.n	8009afa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8009b42:	b002      	add	sp, #8
 8009b44:	bd70      	pop	{r4, r5, r6, pc}

08009b46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8009b46:	b513      	push	{r0, r1, r4, lr}
 8009b48:	6803      	ldr	r3, [r0, #0]
 8009b4a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e9cd 3300 	strd	r3, r3, [sp]
 8009b54:	466b      	mov	r3, sp
 8009b56:	47a0      	blx	r4
 8009b58:	b002      	add	sp, #8
 8009b5a:	bd10      	pop	{r4, pc}

08009b5c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8009b62:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009b66:	4770      	bx	lr

08009b68 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8009b6e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009b72:	4770      	bx	lr

08009b74 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8009b74:	6843      	ldr	r3, [r0, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	725a      	strb	r2, [r3, #9]
 8009b7a:	6840      	ldr	r0, [r0, #4]
 8009b7c:	6803      	ldr	r3, [r0, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	4718      	bx	r3

08009b82 <_ZN8touchgfx3HAL8flushDMAEv>:
 8009b82:	6840      	ldr	r0, [r0, #4]
 8009b84:	6803      	ldr	r3, [r0, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	4718      	bx	r3

08009b8a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8009b8a:	b530      	push	{r4, r5, lr}
 8009b8c:	b08b      	sub	sp, #44	@ 0x2c
 8009b8e:	6804      	ldr	r4, [r0, #0]
 8009b90:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8009b94:	9509      	str	r5, [sp, #36]	@ 0x24
 8009b96:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8009b9a:	9508      	str	r5, [sp, #32]
 8009b9c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8009ba0:	9507      	str	r5, [sp, #28]
 8009ba2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8009ba6:	9506      	str	r5, [sp, #24]
 8009ba8:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8009bac:	9505      	str	r5, [sp, #20]
 8009bae:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8009bb2:	9504      	str	r5, [sp, #16]
 8009bb4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8009bb8:	9503      	str	r5, [sp, #12]
 8009bba:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8009bbe:	9502      	str	r5, [sp, #8]
 8009bc0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8009bc4:	e9cd 3500 	strd	r3, r5, [sp]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8009bcc:	2200      	movs	r2, #0
 8009bce:	47a0      	blx	r4
 8009bd0:	b00b      	add	sp, #44	@ 0x2c
 8009bd2:	bd30      	pop	{r4, r5, pc}

08009bd4 <_ZN8touchgfx3HAL10beginFrameEv>:
 8009bd4:	4b04      	ldr	r3, [pc, #16]	@ (8009be8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	b123      	cbz	r3, 8009be4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8009bda:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8009bde:	f080 0001 	eor.w	r0, r0, #1
 8009be2:	4770      	bx	lr
 8009be4:	2001      	movs	r0, #1
 8009be6:	4770      	bx	lr
 8009be8:	2001543a 	.word	0x2001543a

08009bec <_ZN8touchgfx3HAL8endFrameEv>:
 8009bec:	b510      	push	{r4, lr}
 8009bee:	4604      	mov	r4, r0
 8009bf0:	6840      	ldr	r0, [r0, #4]
 8009bf2:	6803      	ldr	r3, [r0, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	4798      	blx	r3
 8009bf8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8009bfc:	b113      	cbz	r3, 8009c04 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009c04:	bd10      	pop	{r4, pc}

08009c06 <_ZN8touchgfx3HAL10initializeEv>:
 8009c06:	b510      	push	{r4, lr}
 8009c08:	4604      	mov	r4, r0
 8009c0a:	f7f8 f917 	bl	8001e3c <_ZN8touchgfx10OSWrappers10initializeEv>
 8009c0e:	f7f8 f81f 	bl	8001c50 <_ZN8touchgfx4GPIO4initEv>
 8009c12:	6860      	ldr	r0, [r4, #4]
 8009c14:	6803      	ldr	r3, [r0, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	4798      	blx	r3
 8009c1a:	68e0      	ldr	r0, [r4, #12]
 8009c1c:	6803      	ldr	r3, [r0, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	4798      	blx	r3
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	4620      	mov	r0, r4
 8009c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c2c:	4718      	bx	r3
	...

08009c30 <_ZN8touchgfx3HAL4tickEv>:
 8009c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c32:	6803      	ldr	r3, [r0, #0]
 8009c34:	4d5b      	ldr	r5, [pc, #364]	@ (8009da4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8009c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4798      	blx	r3
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f000 8095 	beq.w	8009d6e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8009c44:	2001      	movs	r0, #1
 8009c46:	f7f7 ff81 	bl	8001b4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8009c4a:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8009c4e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009c52:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8009c56:	2600      	movs	r6, #0
 8009c58:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8009c5c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8009c60:	b133      	cbz	r3, 8009c70 <_ZN8touchgfx3HAL4tickEv+0x40>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	4620      	mov	r0, r4
 8009c66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009c6a:	4798      	blx	r3
 8009c6c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8009c70:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8009c74:	6862      	ldr	r2, [r4, #4]
 8009c76:	f083 0301 	eor.w	r3, r3, #1
 8009c7a:	7253      	strb	r3, [r2, #9]
 8009c7c:	2601      	movs	r6, #1
 8009c7e:	702e      	strb	r6, [r5, #0]
 8009c80:	f003 f972 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
 8009c84:	6803      	ldr	r3, [r0, #0]
 8009c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c88:	4798      	blx	r3
 8009c8a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8009c8e:	b90b      	cbnz	r3, 8009c94 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009c90:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8009c94:	f003 f968 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
 8009c98:	6803      	ldr	r3, [r0, #0]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	4798      	blx	r3
 8009c9e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009ca0:	6803      	ldr	r3, [r0, #0]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	4798      	blx	r3
 8009ca6:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8009caa:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009cb6:	b10a      	cbz	r2, 8009cbc <_ZN8touchgfx3HAL4tickEv+0x8c>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1eb      	bne.n	8009c94 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8009da8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8009cbe:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8009cc2:	7813      	ldrb	r3, [r2, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	b25b      	sxtb	r3, r3
 8009cc8:	4299      	cmp	r1, r3
 8009cca:	7013      	strb	r3, [r2, #0]
 8009ccc:	dc10      	bgt.n	8009cf0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8009cce:	68e0      	ldr	r0, [r4, #12]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	7013      	strb	r3, [r2, #0]
 8009cd4:	6803      	ldr	r3, [r0, #0]
 8009cd6:	aa03      	add	r2, sp, #12
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	a902      	add	r1, sp, #8
 8009cdc:	4798      	blx	r3
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d050      	beq.n	8009d86 <_ZN8touchgfx3HAL4tickEv+0x156>
 8009ce4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009ce8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009cec:	4620      	mov	r0, r4
 8009cee:	4798      	blx	r3
 8009cf0:	6960      	ldr	r0, [r4, #20]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f88d 3007 	strb.w	r3, [sp, #7]
 8009cf8:	b158      	cbz	r0, 8009d12 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009cfa:	6803      	ldr	r3, [r0, #0]
 8009cfc:	f10d 0107 	add.w	r1, sp, #7
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	4798      	blx	r3
 8009d04:	b128      	cbz	r0, 8009d12 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009d06:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009d08:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009d0c:	6803      	ldr	r3, [r0, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	4798      	blx	r3
 8009d12:	f104 001c 	add.w	r0, r4, #28
 8009d16:	f008 ffb1 	bl	8012c7c <_ZN8touchgfx8Gestures4tickEv>
 8009d1a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8009d1e:	b30b      	cbz	r3, 8009d64 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009d20:	6920      	ldr	r0, [r4, #16]
 8009d22:	6803      	ldr	r3, [r0, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	4798      	blx	r3
 8009d28:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	b903      	cbnz	r3, 8009d30 <_ZN8touchgfx3HAL4tickEv+0x100>
 8009d2e:	6760      	str	r0, [r4, #116]	@ 0x74
 8009d30:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009d32:	4a1e      	ldr	r2, [pc, #120]	@ (8009dac <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8009d34:	1af3      	subs	r3, r6, r3
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d914      	bls.n	8009d64 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009d3a:	6920      	ldr	r0, [r4, #16]
 8009d3c:	6803      	ldr	r3, [r0, #0]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	4798      	blx	r3
 8009d42:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009d44:	2264      	movs	r2, #100	@ 0x64
 8009d46:	1af3      	subs	r3, r6, r3
 8009d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009d50:	2800      	cmp	r0, #0
 8009d52:	dc1d      	bgt.n	8009d90 <_ZN8touchgfx3HAL4tickEv+0x160>
 8009d54:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8009d58:	6920      	ldr	r0, [r4, #16]
 8009d5a:	6803      	ldr	r3, [r0, #0]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	4798      	blx	r3
 8009d62:	6766      	str	r6, [r4, #116]	@ 0x74
 8009d64:	f003 f900 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
 8009d68:	6803      	ldr	r3, [r0, #0]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6c:	4798      	blx	r3
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	4620      	mov	r0, r4
 8009d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d76:	4798      	blx	r3
 8009d78:	2001      	movs	r0, #1
 8009d7a:	f7f7 ff11 	bl	8001ba0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	702b      	strb	r3, [r5, #0]
 8009d82:	b004      	add	sp, #16
 8009d84:	bd70      	pop	{r4, r5, r6, pc}
 8009d86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4798      	blx	r3
 8009d8e:	e7af      	b.n	8009cf0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8009d90:	2863      	cmp	r0, #99	@ 0x63
 8009d92:	bfcb      	itete	gt
 8009d94:	2300      	movgt	r3, #0
 8009d96:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8009d9a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8009d9e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8009da2:	e7d9      	b.n	8009d58 <_ZN8touchgfx3HAL4tickEv+0x128>
 8009da4:	20015440 	.word	0x20015440
 8009da8:	20015441 	.word	0x20015441
 8009dac:	05f5e100 	.word	0x05f5e100

08009db0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8009db0:	b510      	push	{r4, lr}
 8009db2:	4604      	mov	r4, r0
 8009db4:	f7f8 f872 	bl	8001e9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	729a      	strb	r2, [r3, #10]
 8009dbe:	bd10      	pop	{r4, pc}

08009dc0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8009dc0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8009dc2:	301c      	adds	r0, #28
 8009dc4:	f008 bf58 	b.w	8012c78 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08009dc8 <_ZN8touchgfx3HAL5touchEll>:
 8009dc8:	b530      	push	{r4, r5, lr}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	4604      	mov	r4, r0
 8009dce:	a804      	add	r0, sp, #16
 8009dd0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009dd4:	f002 feb0 	bl	800cb38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009dde:	a906      	add	r1, sp, #24
 8009de0:	9b05      	ldr	r3, [sp, #20]
 8009de2:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8009de6:	a803      	add	r0, sp, #12
 8009de8:	f002 fef8 	bl	800cbdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8009dec:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8009df0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009df4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009df8:	f104 001c 	add.w	r0, r4, #28
 8009dfc:	b189      	cbz	r1, 8009e22 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8009dfe:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8009e08:	4613      	mov	r3, r2
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	f008 ff44 	bl	8012c98 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8009e10:	b128      	cbz	r0, 8009e1e <_ZN8touchgfx3HAL5touchEll+0x56>
 8009e12:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8009e16:	6623      	str	r3, [r4, #96]	@ 0x60
 8009e18:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8009e1c:	6663      	str	r3, [r4, #100]	@ 0x64
 8009e1e:	b007      	add	sp, #28
 8009e20:	bd30      	pop	{r4, r5, pc}
 8009e22:	f008 ff79 	bl	8012d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009e26:	2301      	movs	r3, #1
 8009e28:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009e2c:	e7f1      	b.n	8009e12 <_ZN8touchgfx3HAL5touchEll+0x4a>

08009e2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d046      	beq.n	8009ec2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009e34:	ea81 0002 	eor.w	r0, r1, r2
 8009e38:	07c4      	lsls	r4, r0, #31
 8009e3a:	d508      	bpl.n	8009e4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8009e3c:	440b      	add	r3, r1
 8009e3e:	3a01      	subs	r2, #1
 8009e40:	428b      	cmp	r3, r1
 8009e42:	d93e      	bls.n	8009ec2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009e44:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009e48:	f801 0b01 	strb.w	r0, [r1], #1
 8009e4c:	e7f8      	b.n	8009e40 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8009e4e:	07d0      	lsls	r0, r2, #31
 8009e50:	bf42      	ittt	mi
 8009e52:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8009e56:	f801 0b01 	strbmi.w	r0, [r1], #1
 8009e5a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d911      	bls.n	8009e86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009e62:	ea81 0402 	eor.w	r4, r1, r2
 8009e66:	07a4      	lsls	r4, r4, #30
 8009e68:	4610      	mov	r0, r2
 8009e6a:	d022      	beq.n	8009eb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8009e6c:	f023 0401 	bic.w	r4, r3, #1
 8009e70:	440c      	add	r4, r1
 8009e72:	428c      	cmp	r4, r1
 8009e74:	4602      	mov	r2, r0
 8009e76:	d904      	bls.n	8009e82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8009e78:	8812      	ldrh	r2, [r2, #0]
 8009e7a:	f821 2b02 	strh.w	r2, [r1], #2
 8009e7e:	3002      	adds	r0, #2
 8009e80:	e7f7      	b.n	8009e72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	f023 0003 	bic.w	r0, r3, #3
 8009e8a:	4408      	add	r0, r1
 8009e8c:	4288      	cmp	r0, r1
 8009e8e:	4614      	mov	r4, r2
 8009e90:	d904      	bls.n	8009e9c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8009e92:	6824      	ldr	r4, [r4, #0]
 8009e94:	f841 4b04 	str.w	r4, [r1], #4
 8009e98:	3204      	adds	r2, #4
 8009e9a:	e7f7      	b.n	8009e8c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	440b      	add	r3, r1
 8009ea2:	3a01      	subs	r2, #1
 8009ea4:	428b      	cmp	r3, r1
 8009ea6:	d90c      	bls.n	8009ec2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009ea8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009eac:	f801 0b01 	strb.w	r0, [r1], #1
 8009eb0:	e7f8      	b.n	8009ea4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8009eb2:	0790      	lsls	r0, r2, #30
 8009eb4:	d0e7      	beq.n	8009e86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009eb6:	f832 0b02 	ldrh.w	r0, [r2], #2
 8009eba:	f821 0b02 	strh.w	r0, [r1], #2
 8009ebe:	3b02      	subs	r3, #2
 8009ec0:	e7e1      	b.n	8009e86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	bd10      	pop	{r4, pc}

08009ec6 <_ZN8touchgfx3HAL7noTouchEv>:
 8009ec6:	b510      	push	{r4, lr}
 8009ec8:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8009ecc:	4604      	mov	r4, r0
 8009ece:	b153      	cbz	r3, 8009ee6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8009ed0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8009ed4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8009ed8:	2101      	movs	r1, #1
 8009eda:	301c      	adds	r0, #28
 8009edc:	f008 ff1c 	bl	8012d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009ee6:	bd10      	pop	{r4, pc}

08009ee8 <_ZN8touchgfx3HAL3lcdEv>:
 8009ee8:	4b04      	ldr	r3, [pc, #16]	@ (8009efc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009ef0:	b10a      	cbz	r2, 8009ef6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8009ef2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009ef4:	b900      	cbnz	r0, 8009ef8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8009ef6:	6898      	ldr	r0, [r3, #8]
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	2001543c 	.word	0x2001543c

08009f00 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8009f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f04:	b085      	sub	sp, #20
 8009f06:	ad04      	add	r5, sp, #16
 8009f08:	4604      	mov	r4, r0
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009f10:	69a0      	ldr	r0, [r4, #24]
 8009f12:	6806      	ldr	r6, [r0, #0]
 8009f14:	9501      	str	r5, [sp, #4]
 8009f16:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8009f1a:	9500      	str	r5, [sp, #0]
 8009f1c:	6835      	ldr	r5, [r6, #0]
 8009f1e:	4699      	mov	r9, r3
 8009f20:	460f      	mov	r7, r1
 8009f22:	4690      	mov	r8, r2
 8009f24:	47a8      	blx	r5
 8009f26:	4d10      	ldr	r5, [pc, #64]	@ (8009f68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8009f28:	4606      	mov	r6, r0
 8009f2a:	f8a5 9000 	strh.w	r9, [r5]
 8009f2e:	f7ff ffdb 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 8009f32:	6803      	ldr	r3, [r0, #0]
 8009f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f36:	4798      	blx	r3
 8009f38:	b128      	cbz	r0, 8009f46 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8009f3a:	2801      	cmp	r0, #1
 8009f3c:	d00b      	beq.n	8009f56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8009f3e:	4630      	mov	r0, r6
 8009f40:	b005      	add	sp, #20
 8009f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f46:	882b      	ldrh	r3, [r5, #0]
 8009f48:	fb08 7203 	mla	r2, r8, r3, r7
 8009f4c:	9b03      	ldr	r3, [sp, #12]
 8009f4e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8009f52:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009f54:	e7f3      	b.n	8009f3e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009f56:	882a      	ldrh	r2, [r5, #0]
 8009f58:	9b03      	ldr	r3, [sp, #12]
 8009f5a:	fb08 7202 	mla	r2, r8, r2, r7
 8009f5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009f62:	1a9a      	subs	r2, r3, r2
 8009f64:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8009f66:	e7ea      	b.n	8009f3e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009f68:	20015436 	.word	0x20015436

08009f6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8009f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f6e:	b08b      	sub	sp, #44	@ 0x2c
 8009f70:	4617      	mov	r7, r2
 8009f72:	4604      	mov	r4, r0
 8009f74:	460e      	mov	r6, r1
 8009f76:	461d      	mov	r5, r3
 8009f78:	f7ff ffb6 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 8009f7c:	6803      	ldr	r3, [r0, #0]
 8009f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f80:	4798      	blx	r3
 8009f82:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009f86:	9007      	str	r0, [sp, #28]
 8009f88:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8009f8e:	6822      	ldr	r2, [r4, #0]
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	9306      	str	r3, [sp, #24]
 8009f94:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009f98:	9305      	str	r3, [sp, #20]
 8009f9a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009fa4:	9303      	str	r3, [sp, #12]
 8009fa6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009fb0:	e9cd 5300 	strd	r5, r3, [sp]
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8009fb8:	463b      	mov	r3, r7
 8009fba:	2200      	movs	r2, #0
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	47a8      	blx	r5
 8009fc0:	b00b      	add	sp, #44	@ 0x2c
 8009fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc4:	20015436 	.word	0x20015436

08009fc8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8009fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fcc:	4698      	mov	r8, r3
 8009fce:	6803      	ldr	r3, [r0, #0]
 8009fd0:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8009fd2:	4b15      	ldr	r3, [pc, #84]	@ (800a028 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8009fd4:	b08b      	sub	sp, #44	@ 0x2c
 8009fd6:	4617      	mov	r7, r2
 8009fd8:	f8b3 9000 	ldrh.w	r9, [r3]
 8009fdc:	460e      	mov	r6, r1
 8009fde:	4604      	mov	r4, r0
 8009fe0:	f7ff ff82 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 8009fe4:	6803      	ldr	r3, [r0, #0]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe8:	4798      	blx	r3
 8009fea:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009fee:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	9305      	str	r3, [sp, #20]
 8009ffc:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800a006:	9303      	str	r3, [sp, #12]
 800a008:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a00c:	9302      	str	r3, [sp, #8]
 800a00e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a012:	2200      	movs	r2, #0
 800a014:	e9cd 8300 	strd	r8, r3, [sp]
 800a018:	4631      	mov	r1, r6
 800a01a:	463b      	mov	r3, r7
 800a01c:	4620      	mov	r0, r4
 800a01e:	47a8      	blx	r5
 800a020:	b00b      	add	sp, #44	@ 0x2c
 800a022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a026:	bf00      	nop
 800a028:	20015436 	.word	0x20015436

0800a02c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800a02c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a030:	4698      	mov	r8, r3
 800a032:	6803      	ldr	r3, [r0, #0]
 800a034:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800a036:	4b11      	ldr	r3, [pc, #68]	@ (800a07c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800a038:	b087      	sub	sp, #28
 800a03a:	f8b3 9000 	ldrh.w	r9, [r3]
 800a03e:	460e      	mov	r6, r1
 800a040:	4617      	mov	r7, r2
 800a042:	4604      	mov	r4, r0
 800a044:	f7ff ff50 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 800a048:	6803      	ldr	r3, [r0, #0]
 800a04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04c:	4798      	blx	r3
 800a04e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800a052:	f8cd 900c 	str.w	r9, [sp, #12]
 800a056:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800a05a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800a05e:	9302      	str	r3, [sp, #8]
 800a060:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800a064:	9301      	str	r3, [sp, #4]
 800a066:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	463a      	mov	r2, r7
 800a06e:	4643      	mov	r3, r8
 800a070:	4631      	mov	r1, r6
 800a072:	4620      	mov	r0, r4
 800a074:	47a8      	blx	r5
 800a076:	b007      	add	sp, #28
 800a078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a07c:	20015436 	.word	0x20015436

0800a080 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	4604      	mov	r4, r0
 800a086:	b08f      	sub	sp, #60	@ 0x3c
 800a088:	4610      	mov	r0, r2
 800a08a:	460d      	mov	r5, r1
 800a08c:	4691      	mov	r9, r2
 800a08e:	461e      	mov	r6, r3
 800a090:	f005 ffb6 	bl	8010000 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a094:	2800      	cmp	r0, #0
 800a096:	f000 809d 	beq.w	800a1d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800a238 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a2:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800a23c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800a0a6:	4f61      	ldr	r7, [pc, #388]	@ (800a22c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	4798      	blx	r3
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b2:	4798      	blx	r3
 800a0b4:	f8bb 3000 	ldrh.w	r3, [fp]
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800a0be:	f8ba 3000 	ldrh.w	r3, [sl]
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	883b      	ldrh	r3, [r7, #0]
 800a0c6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800a0ca:	9303      	str	r3, [sp, #12]
 800a0cc:	4b58      	ldr	r3, [pc, #352]	@ (800a230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a0ce:	9305      	str	r3, [sp, #20]
 800a0d0:	881a      	ldrh	r2, [r3, #0]
 800a0d2:	9204      	str	r2, [sp, #16]
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	f006 f827 	bl	8010128 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a0da:	8038      	strh	r0, [r7, #0]
 800a0dc:	4640      	mov	r0, r8
 800a0de:	f006 f857 	bl	8010190 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a0e2:	9b05      	ldr	r3, [sp, #20]
 800a0e4:	b280      	uxth	r0, r0
 800a0e6:	8018      	strh	r0, [r3, #0]
 800a0e8:	4b52      	ldr	r3, [pc, #328]	@ (800a234 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d174      	bne.n	800a1da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800a0f0:	883b      	ldrh	r3, [r7, #0]
 800a0f2:	f8ab 3000 	strh.w	r3, [fp]
 800a0f6:	f8aa 0000 	strh.w	r0, [sl]
 800a0fa:	4648      	mov	r0, r9
 800a0fc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800a100:	f005 ff7e 	bl	8010000 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a104:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800a108:	2200      	movs	r2, #0
 800a10a:	4611      	mov	r1, r2
 800a10c:	4628      	mov	r0, r5
 800a10e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800a112:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800a116:	f7f9 f87f 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
 800a11a:	2301      	movs	r3, #1
 800a11c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800a120:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a124:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dd5c      	ble.n	800a1e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800a12c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800a130:	2b00      	cmp	r3, #0
 800a132:	dd58      	ble.n	800a1e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800a134:	462a      	mov	r2, r5
 800a136:	ab0a      	add	r3, sp, #40	@ 0x28
 800a138:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a13c:	6851      	ldr	r1, [r2, #4]
 800a13e:	c303      	stmia	r3!, {r0, r1}
 800a140:	4631      	mov	r1, r6
 800a142:	a80a      	add	r0, sp, #40	@ 0x28
 800a144:	f7ff fbfa 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800a148:	4b38      	ldr	r3, [pc, #224]	@ (800a22c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a14a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a14e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800a152:	2100      	movs	r1, #0
 800a154:	aa0a      	add	r2, sp, #40	@ 0x28
 800a156:	4b36      	ldr	r3, [pc, #216]	@ (800a230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a158:	910c      	str	r1, [sp, #48]	@ 0x30
 800a15a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a15e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a162:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800a166:	ab08      	add	r3, sp, #32
 800a168:	e883 0003 	stmia.w	r3, {r0, r1}
 800a16c:	4618      	mov	r0, r3
 800a16e:	a90c      	add	r1, sp, #48	@ 0x30
 800a170:	f7ff fbe4 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800a174:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a176:	2b00      	cmp	r3, #0
 800a178:	d13c      	bne.n	800a1f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800a17a:	2000      	movs	r0, #0
 800a17c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800a180:	2600      	movs	r6, #0
 800a182:	682a      	ldr	r2, [r5, #0]
 800a184:	696b      	ldr	r3, [r5, #20]
 800a186:	616e      	str	r6, [r5, #20]
 800a188:	9305      	str	r3, [sp, #20]
 800a18a:	6892      	ldr	r2, [r2, #8]
 800a18c:	a908      	add	r1, sp, #32
 800a18e:	4628      	mov	r0, r5
 800a190:	4790      	blx	r2
 800a192:	9b05      	ldr	r3, [sp, #20]
 800a194:	616b      	str	r3, [r5, #20]
 800a196:	4652      	mov	r2, sl
 800a198:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800a19c:	4649      	mov	r1, r9
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800a1a4:	f7f9 f838 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
 800a1a8:	4b23      	ldr	r3, [pc, #140]	@ (800a238 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800a1aa:	9a01      	ldr	r2, [sp, #4]
 800a1ac:	801a      	strh	r2, [r3, #0]
 800a1ae:	4b23      	ldr	r3, [pc, #140]	@ (800a23c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800a1b0:	9a02      	ldr	r2, [sp, #8]
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a22c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a1b6:	9a03      	ldr	r2, [sp, #12]
 800a1b8:	801a      	strh	r2, [r3, #0]
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a230 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a1bc:	9a04      	ldr	r2, [sp, #16]
 800a1be:	801a      	strh	r2, [r3, #0]
 800a1c0:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ca:	4798      	blx	r3
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d2:	4798      	blx	r3
 800a1d4:	b00f      	add	sp, #60	@ 0x3c
 800a1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1da:	883b      	ldrh	r3, [r7, #0]
 800a1dc:	f8ab 0000 	strh.w	r0, [fp]
 800a1e0:	f8aa 3000 	strh.w	r3, [sl]
 800a1e4:	e789      	b.n	800a0fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1ea:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a1ee:	6851      	ldr	r1, [r2, #4]
 800a1f0:	c303      	stmia	r3!, {r0, r1}
 800a1f2:	e7a9      	b.n	800a148 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800a1f4:	a807      	add	r0, sp, #28
 800a1f6:	f006 f90d 	bl	8010414 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a1fe:	6803      	ldr	r3, [r0, #0]
 800a200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a202:	4798      	blx	r3
 800a204:	4286      	cmp	r6, r0
 800a206:	d1b8      	bne.n	800a17a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800a208:	f7ff fe6e 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 800a20c:	6803      	ldr	r3, [r0, #0]
 800a20e:	4606      	mov	r6, r0
 800a210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	a807      	add	r0, sp, #28
 800a216:	f006 f8fd 	bl	8010414 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	4601      	mov	r1, r0
 800a21e:	4630      	mov	r0, r6
 800a220:	4798      	blx	r3
 800a222:	f080 0001 	eor.w	r0, r0, #1
 800a226:	b2c0      	uxtb	r0, r0
 800a228:	e7a8      	b.n	800a17c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800a22a:	bf00      	nop
 800a22c:	20015430 	.word	0x20015430
 800a230:	20015432 	.word	0x20015432
 800a234:	20015434 	.word	0x20015434
 800a238:	20015436 	.word	0x20015436
 800a23c:	20015438 	.word	0x20015438

0800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800a240:	b510      	push	{r4, lr}
 800a242:	4b07      	ldr	r3, [pc, #28]	@ (800a260 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	4604      	mov	r4, r0
 800a248:	b13b      	cbz	r3, 800a25a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a24a:	6803      	ldr	r3, [r0, #0]
 800a24c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a24e:	4798      	blx	r3
 800a250:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a252:	4283      	cmp	r3, r0
 800a254:	d101      	bne.n	800a25a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a256:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800a258:	bd10      	pop	{r4, pc}
 800a25a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a25c:	e7fc      	b.n	800a258 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800a25e:	bf00      	nop
 800a260:	2001543a 	.word	0x2001543a

0800a264 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a268:	b08a      	sub	sp, #40	@ 0x28
 800a26a:	461d      	mov	r5, r3
 800a26c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a270:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a274:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a278:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a27c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a280:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a284:	2400      	movs	r4, #0
 800a286:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a28a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800a28e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a292:	4690      	mov	r8, r2
 800a294:	4607      	mov	r7, r0
 800a296:	9404      	str	r4, [sp, #16]
 800a298:	f88d 4020 	strb.w	r4, [sp, #32]
 800a29c:	f7ff ffd0 	bl	800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a2a0:	fb06 8505 	mla	r5, r6, r5, r8
 800a2a4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	9505      	str	r5, [sp, #20]
 800a2ac:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a2b0:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a2b4:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800a2b8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800a2bc:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800a2c0:	6803      	ldr	r3, [r0, #0]
 800a2c2:	a901      	add	r1, sp, #4
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4798      	blx	r3
 800a2c8:	b00a      	add	sp, #40	@ 0x28
 800a2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2ce <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800a2ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2d2:	b08b      	sub	sp, #44	@ 0x2c
 800a2d4:	2400      	movs	r4, #0
 800a2d6:	461d      	mov	r5, r3
 800a2d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2dc:	4688      	mov	r8, r1
 800a2de:	4691      	mov	r9, r2
 800a2e0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800a2e4:	9404      	str	r4, [sp, #16]
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2ec:	f7ff ffa8 	bl	800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a2f0:	fb06 9505 	mla	r5, r6, r5, r9
 800a2f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a2f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a2fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a300:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	9505      	str	r5, [sp, #20]
 800a308:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a30c:	f8ad 401c 	strh.w	r4, [sp, #28]
 800a310:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a314:	f8cd 8010 	str.w	r8, [sp, #16]
 800a318:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a31c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a320:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800a324:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800a328:	6803      	ldr	r3, [r0, #0]
 800a32a:	a901      	add	r1, sp, #4
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	4798      	blx	r3
 800a330:	b00b      	add	sp, #44	@ 0x2c
 800a332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a338 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800a338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33c:	b08a      	sub	sp, #40	@ 0x28
 800a33e:	4698      	mov	r8, r3
 800a340:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800a344:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800a348:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800a34c:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800a350:	2300      	movs	r3, #0
 800a352:	2d0b      	cmp	r5, #11
 800a354:	4606      	mov	r6, r0
 800a356:	9304      	str	r3, [sp, #16]
 800a358:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800a35c:	d138      	bne.n	800a3d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 800a35e:	2380      	movs	r3, #128	@ 0x80
 800a360:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a364:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a368:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a36c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a370:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a374:	f88d 0020 	strb.w	r0, [sp, #32]
 800a378:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a37c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a380:	4630      	mov	r0, r6
 800a382:	9203      	str	r2, [sp, #12]
 800a384:	f7ff ff5c 	bl	800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a388:	2c0b      	cmp	r4, #11
 800a38a:	bf98      	it	ls
 800a38c:	4b1b      	ldrls	r3, [pc, #108]	@ (800a3fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800a38e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800a392:	bf98      	it	ls
 800a394:	5d19      	ldrbls	r1, [r3, r4]
 800a396:	f8ad 701e 	strh.w	r7, [sp, #30]
 800a39a:	bf88      	it	hi
 800a39c:	2100      	movhi	r1, #0
 800a39e:	fb02 8307 	mla	r3, r2, r7, r8
 800a3a2:	10c9      	asrs	r1, r1, #3
 800a3a4:	fb01 0003 	mla	r0, r1, r3, r0
 800a3a8:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800a3ac:	9005      	str	r0, [sp, #20]
 800a3ae:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800a3b2:	6870      	ldr	r0, [r6, #4]
 800a3b4:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a3be:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a3c2:	6803      	ldr	r3, [r0, #0]
 800a3c4:	a901      	add	r1, sp, #4
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	4798      	blx	r3
 800a3ca:	b00a      	add	sp, #40	@ 0x28
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	2d02      	cmp	r5, #2
 800a3d2:	d109      	bne.n	800a3e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 800a3d4:	28ff      	cmp	r0, #255	@ 0xff
 800a3d6:	d105      	bne.n	800a3e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 800a3d8:	f1bc 0f00 	cmp.w	ip, #0
 800a3dc:	bf14      	ite	ne
 800a3de:	2340      	movne	r3, #64	@ 0x40
 800a3e0:	2320      	moveq	r3, #32
 800a3e2:	e7bd      	b.n	800a360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a3e4:	2340      	movs	r3, #64	@ 0x40
 800a3e6:	e7bb      	b.n	800a360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a3e8:	28ff      	cmp	r0, #255	@ 0xff
 800a3ea:	d105      	bne.n	800a3f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 800a3ec:	f1bc 0f00 	cmp.w	ip, #0
 800a3f0:	bf14      	ite	ne
 800a3f2:	2304      	movne	r3, #4
 800a3f4:	2301      	moveq	r3, #1
 800a3f6:	e7b3      	b.n	800a360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	e7b1      	b.n	800a360 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a3fc:	08015a64 	.word	0x08015a64

0800a400 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	b08b      	sub	sp, #44	@ 0x2c
 800a406:	461d      	mov	r5, r3
 800a408:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800a40c:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800a410:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800a414:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800a418:	bf14      	ite	ne
 800a41a:	2308      	movne	r3, #8
 800a41c:	2302      	moveq	r3, #2
 800a41e:	2400      	movs	r4, #0
 800a420:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a424:	4688      	mov	r8, r1
 800a426:	4693      	mov	fp, r2
 800a428:	9404      	str	r4, [sp, #16]
 800a42a:	4607      	mov	r7, r0
 800a42c:	f7ff ff08 	bl	800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a430:	2e0b      	cmp	r6, #11
 800a432:	bf98      	it	ls
 800a434:	4b15      	ldrls	r3, [pc, #84]	@ (800a48c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800a436:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800a43a:	bf98      	it	ls
 800a43c:	5d9c      	ldrbls	r4, [r3, r6]
 800a43e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800a442:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a446:	fb05 b50a 	mla	r5, r5, sl, fp
 800a44a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800a44e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a452:	10e4      	asrs	r4, r4, #3
 800a454:	fb04 0405 	mla	r4, r4, r5, r0
 800a458:	2300      	movs	r3, #0
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	9405      	str	r4, [sp, #20]
 800a45e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a462:	f8ad a01e 	strh.w	sl, [sp, #30]
 800a466:	f8cd 8010 	str.w	r8, [sp, #16]
 800a46a:	f88d 9020 	strb.w	r9, [sp, #32]
 800a46e:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800a472:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a476:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800a47a:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800a47e:	6803      	ldr	r3, [r0, #0]
 800a480:	a901      	add	r1, sp, #4
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	4798      	blx	r3
 800a486:	b00b      	add	sp, #44	@ 0x2c
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	08015a64 	.word	0x08015a64

0800a490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a494:	461e      	mov	r6, r3
 800a496:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800a498:	460f      	mov	r7, r1
 800a49a:	881d      	ldrh	r5, [r3, #0]
 800a49c:	4690      	mov	r8, r2
 800a49e:	f7ff fd23 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 800a4a2:	6803      	ldr	r3, [r0, #0]
 800a4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a6:	4798      	blx	r3
 800a4a8:	280b      	cmp	r0, #11
 800a4aa:	bf9a      	itte	ls
 800a4ac:	4b05      	ldrls	r3, [pc, #20]	@ (800a4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800a4ae:	5c1c      	ldrbls	r4, [r3, r0]
 800a4b0:	2400      	movhi	r4, #0
 800a4b2:	fb08 7005 	mla	r0, r8, r5, r7
 800a4b6:	10e4      	asrs	r4, r4, #3
 800a4b8:	fb04 6000 	mla	r0, r4, r0, r6
 800a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c0:	20015436 	.word	0x20015436
 800a4c4:	08015a64 	.word	0x08015a64

0800a4c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800a4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ca:	b08b      	sub	sp, #44	@ 0x2c
 800a4cc:	461f      	mov	r7, r3
 800a4ce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800a4d2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a4d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a4da:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a4de:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a4e2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a4e6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a4ea:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a4ee:	2500      	movs	r5, #0
 800a4f0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800a4f4:	f88d 3020 	strb.w	r3, [sp, #32]
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	4616      	mov	r6, r2
 800a4fc:	9504      	str	r5, [sp, #16]
 800a4fe:	f7ff fe9f 	bl	800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a502:	463a      	mov	r2, r7
 800a504:	4631      	mov	r1, r6
 800a506:	4603      	mov	r3, r0
 800a508:	4620      	mov	r0, r4
 800a50a:	f7ff ffc1 	bl	800a490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a50e:	4b0e      	ldr	r3, [pc, #56]	@ (800a548 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800a510:	9005      	str	r0, [sp, #20]
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a518:	f7ff fce6 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 800a51c:	6803      	ldr	r3, [r0, #0]
 800a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a520:	4798      	blx	r3
 800a522:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a524:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800a528:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a52c:	9304      	str	r3, [sp, #16]
 800a52e:	6860      	ldr	r0, [r4, #4]
 800a530:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800a534:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800a538:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800a53c:	6803      	ldr	r3, [r0, #0]
 800a53e:	a901      	add	r1, sp, #4
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	4798      	blx	r3
 800a544:	b00b      	add	sp, #44	@ 0x2c
 800a546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a548:	20015436 	.word	0x20015436

0800a54c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800a54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54e:	b08d      	sub	sp, #52	@ 0x34
 800a550:	466b      	mov	r3, sp
 800a552:	e883 0006 	stmia.w	r3, {r1, r2}
 800a556:	2300      	movs	r3, #0
 800a558:	9306      	str	r3, [sp, #24]
 800a55a:	6803      	ldr	r3, [r0, #0]
 800a55c:	f8bd 6000 	ldrh.w	r6, [sp]
 800a560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a562:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800a566:	2501      	movs	r5, #1
 800a568:	9503      	str	r5, [sp, #12]
 800a56a:	4604      	mov	r4, r0
 800a56c:	4798      	blx	r3
 800a56e:	463a      	mov	r2, r7
 800a570:	4631      	mov	r1, r6
 800a572:	4603      	mov	r3, r0
 800a574:	4620      	mov	r0, r4
 800a576:	f7ff ff8b 	bl	800a490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a57a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a57c:	9307      	str	r3, [sp, #28]
 800a57e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a582:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a586:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a58a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a58e:	4b0f      	ldr	r3, [pc, #60]	@ (800a5cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800a590:	9004      	str	r0, [sp, #16]
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a598:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a59c:	f7ff fca4 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 800a5a0:	6803      	ldr	r3, [r0, #0]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a4:	4798      	blx	r3
 800a5a6:	23ff      	movs	r3, #255	@ 0xff
 800a5a8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a5ac:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a5b0:	6860      	ldr	r0, [r4, #4]
 800a5b2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a5b6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a5ba:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a5be:	6803      	ldr	r3, [r0, #0]
 800a5c0:	a903      	add	r1, sp, #12
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	4798      	blx	r3
 800a5c6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a5c8:	b00d      	add	sp, #52	@ 0x34
 800a5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5cc:	20015436 	.word	0x20015436

0800a5d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	b08c      	sub	sp, #48	@ 0x30
 800a5d6:	461e      	mov	r6, r3
 800a5d8:	466d      	mov	r5, sp
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e885 0006 	stmia.w	r5, {r1, r2}
 800a5e0:	9306      	str	r3, [sp, #24]
 800a5e2:	6803      	ldr	r3, [r0, #0]
 800a5e4:	f8bd 7000 	ldrh.w	r7, [sp]
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ea:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800a5ee:	2501      	movs	r5, #1
 800a5f0:	9503      	str	r5, [sp, #12]
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4798      	blx	r3
 800a5f6:	4642      	mov	r2, r8
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f7ff ff47 	bl	800a490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a602:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a606:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a60a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a60e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a612:	4b11      	ldr	r3, [pc, #68]	@ (800a658 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800a614:	9004      	str	r0, [sp, #16]
 800a616:	881b      	ldrh	r3, [r3, #0]
 800a618:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a61c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a61e:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a622:	9607      	str	r6, [sp, #28]
 800a624:	f7ff fc60 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 800a628:	6803      	ldr	r3, [r0, #0]
 800a62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62c:	4798      	blx	r3
 800a62e:	23ff      	movs	r3, #255	@ 0xff
 800a630:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a634:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a638:	6860      	ldr	r0, [r4, #4]
 800a63a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a63e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a642:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a646:	6803      	ldr	r3, [r0, #0]
 800a648:	a903      	add	r1, sp, #12
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	4798      	blx	r3
 800a64e:	4630      	mov	r0, r6
 800a650:	b00c      	add	sp, #48	@ 0x30
 800a652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a656:	bf00      	nop
 800a658:	20015436 	.word	0x20015436

0800a65c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800a65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65e:	b085      	sub	sp, #20
 800a660:	ac02      	add	r4, sp, #8
 800a662:	e884 0006 	stmia.w	r4, {r1, r2}
 800a666:	4605      	mov	r5, r0
 800a668:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800a66c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800a670:	f7ff fde6 	bl	800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a674:	463a      	mov	r2, r7
 800a676:	4603      	mov	r3, r0
 800a678:	4631      	mov	r1, r6
 800a67a:	4628      	mov	r0, r5
 800a67c:	f7ff ff08 	bl	800a490 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a680:	4a05      	ldr	r2, [pc, #20]	@ (800a698 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800a682:	682b      	ldr	r3, [r5, #0]
 800a684:	8812      	ldrh	r2, [r2, #0]
 800a686:	9200      	str	r2, [sp, #0]
 800a688:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800a68a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800a68e:	4603      	mov	r3, r0
 800a690:	4628      	mov	r0, r5
 800a692:	47b0      	blx	r6
 800a694:	b005      	add	sp, #20
 800a696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a698:	20015436 	.word	0x20015436

0800a69c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	b19b      	cbz	r3, 800a6ce <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800a6a6:	2002      	movs	r0, #2
 800a6a8:	f7f7 faa4 	bl	8001bf4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800a6b2:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800a6be:	f7ff fdbf 	bl	800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	4601      	mov	r1, r0
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6cc:	4718      	bx	r3
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}

0800a6d0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a6d6:	428b      	cmp	r3, r1
 800a6d8:	4604      	mov	r4, r0
 800a6da:	460d      	mov	r5, r1
 800a6dc:	d006      	beq.n	800a6ec <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800a6de:	6803      	ldr	r3, [r0, #0]
 800a6e0:	b929      	cbnz	r1, 800a6ee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800a6e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a6e6:	4798      	blx	r3
 800a6e8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800a6ec:	bd38      	pop	{r3, r4, r5, pc}
 800a6ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a6f2:	e7f8      	b.n	800a6e6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800a6f4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a72c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	b95b      	cbnz	r3, 800a716 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a6fe:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800a702:	2b02      	cmp	r3, #2
 800a704:	d007      	beq.n	800a716 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a706:	6840      	ldr	r0, [r0, #4]
 800a708:	f000 f912 	bl	800a930 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800a70c:	b118      	cbz	r0, 800a716 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a70e:	6862      	ldr	r2, [r4, #4]
 800a710:	7a53      	ldrb	r3, [r2, #9]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0fc      	beq.n	800a710 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800a716:	f7f7 fbb9 	bl	8001e8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a71a:	4620      	mov	r0, r4
 800a71c:	2100      	movs	r1, #0
 800a71e:	f7ff ffd7 	bl	800a6d0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a722:	4620      	mov	r0, r4
 800a724:	f7ff fd8c 	bl	800a240 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a728:	bd10      	pop	{r4, pc}
 800a72a:	bf00      	nop
 800a72c:	2001543a 	.word	0x2001543a

0800a730 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800a730:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800a734:	1a13      	subs	r3, r2, r0
 800a736:	4258      	negs	r0, r3
 800a738:	4158      	adcs	r0, r3
 800a73a:	4770      	bx	lr

0800a73c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800a73c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800a740:	1a9b      	subs	r3, r3, r2
 800a742:	2b00      	cmp	r3, #0
 800a744:	bfdc      	itt	le
 800a746:	6882      	ldrle	r2, [r0, #8]
 800a748:	189b      	addle	r3, r3, r2
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	bfcc      	ite	gt
 800a74e:	2000      	movgt	r0, #0
 800a750:	2001      	movle	r0, #1
 800a752:	4770      	bx	lr

0800a754 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800a754:	6902      	ldr	r2, [r0, #16]
 800a756:	6843      	ldr	r3, [r0, #4]
 800a758:	2024      	movs	r0, #36	@ 0x24
 800a75a:	fb00 3002 	mla	r0, r0, r2, r3
 800a75e:	4770      	bx	lr

0800a760 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800a760:	6803      	ldr	r3, [r0, #0]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	4718      	bx	r3

0800a766 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800a766:	b570      	push	{r4, r5, r6, lr}
 800a768:	2301      	movs	r3, #1
 800a76a:	7203      	strb	r3, [r0, #8]
 800a76c:	4604      	mov	r4, r0
 800a76e:	6840      	ldr	r0, [r0, #4]
 800a770:	6803      	ldr	r3, [r0, #0]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	4798      	blx	r3
 800a776:	6803      	ldr	r3, [r0, #0]
 800a778:	2b40      	cmp	r3, #64	@ 0x40
 800a77a:	4605      	mov	r5, r0
 800a77c:	d00c      	beq.n	800a798 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a77e:	d810      	bhi.n	800a7a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800a780:	2b04      	cmp	r3, #4
 800a782:	d01d      	beq.n	800a7c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800a784:	d804      	bhi.n	800a790 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800a786:	2b01      	cmp	r3, #1
 800a788:	d006      	beq.n	800a798 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d02c      	beq.n	800a7e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	2b08      	cmp	r3, #8
 800a792:	d01d      	beq.n	800a7d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800a794:	2b20      	cmp	r3, #32
 800a796:	d1fa      	bne.n	800a78e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	4620      	mov	r0, r4
 800a79c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a79e:	4798      	blx	r3
 800a7a0:	e013      	b.n	800a7ca <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800a7a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7a6:	d0f7      	beq.n	800a798 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a7a8:	d804      	bhi.n	800a7b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800a7aa:	2b80      	cmp	r3, #128	@ 0x80
 800a7ac:	d0f4      	beq.n	800a798 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b2:	e7f0      	b.n	800a796 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800a7b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7b8:	d0ee      	beq.n	800a798 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a7ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7be:	e7e5      	b.n	800a78c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	7f01      	ldrb	r1, [r0, #28]
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	4798      	blx	r3
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ce:	e006      	b.n	800a7de <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	7f01      	ldrb	r1, [r0, #28]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	4798      	blx	r3
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7e6:	4718      	bx	r3
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ee:	4798      	blx	r3
 800a7f0:	e7f3      	b.n	800a7da <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800a7f2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800a7f2:	4770      	bx	lr

0800a7f4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800a7f4:	4770      	bx	lr

0800a7f6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800a7f6:	4770      	bx	lr

0800a7f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800a7f8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800a7fc:	1ad2      	subs	r2, r2, r3
 800a7fe:	2a00      	cmp	r2, #0
 800a800:	b510      	push	{r4, lr}
 800a802:	bfdc      	itt	le
 800a804:	6884      	ldrle	r4, [r0, #8]
 800a806:	1912      	addle	r2, r2, r4
 800a808:	2a01      	cmp	r2, #1
 800a80a:	dd16      	ble.n	800a83a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800a80c:	6842      	ldr	r2, [r0, #4]
 800a80e:	2424      	movs	r4, #36	@ 0x24
 800a810:	fb04 2303 	mla	r3, r4, r3, r2
 800a814:	f101 0220 	add.w	r2, r1, #32
 800a818:	f851 4b04 	ldr.w	r4, [r1], #4
 800a81c:	f843 4b04 	str.w	r4, [r3], #4
 800a820:	4291      	cmp	r1, r2
 800a822:	d1f9      	bne.n	800a818 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800a824:	780a      	ldrb	r2, [r1, #0]
 800a826:	701a      	strb	r2, [r3, #0]
 800a828:	68c3      	ldr	r3, [r0, #12]
 800a82a:	6882      	ldr	r2, [r0, #8]
 800a82c:	f3bf 8f5b 	dmb	ish
 800a830:	3301      	adds	r3, #1
 800a832:	429a      	cmp	r2, r3
 800a834:	bfd8      	it	le
 800a836:	1a9b      	suble	r3, r3, r2
 800a838:	60c3      	str	r3, [r0, #12]
 800a83a:	bd10      	pop	{r4, pc}

0800a83c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800a83c:	6903      	ldr	r3, [r0, #16]
 800a83e:	6882      	ldr	r2, [r0, #8]
 800a840:	f3bf 8f5b 	dmb	ish
 800a844:	3301      	adds	r3, #1
 800a846:	429a      	cmp	r2, r3
 800a848:	bfd8      	it	le
 800a84a:	1a9b      	suble	r3, r3, r2
 800a84c:	6103      	str	r3, [r0, #16]
 800a84e:	4770      	bx	lr

0800a850 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	4604      	mov	r4, r0
 800a854:	460e      	mov	r6, r1
 800a856:	6860      	ldr	r0, [r4, #4]
 800a858:	6803      	ldr	r3, [r0, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4798      	blx	r3
 800a85e:	2800      	cmp	r0, #0
 800a860:	d1f9      	bne.n	800a856 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800a862:	4d0d      	ldr	r5, [pc, #52]	@ (800a898 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800a864:	6828      	ldr	r0, [r5, #0]
 800a866:	6803      	ldr	r3, [r0, #0]
 800a868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a86a:	4798      	blx	r3
 800a86c:	f7f7 fb1c 	bl	8001ea8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800a870:	6828      	ldr	r0, [r5, #0]
 800a872:	2101      	movs	r1, #1
 800a874:	f7ff ff2c 	bl	800a6d0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a878:	6860      	ldr	r0, [r4, #4]
 800a87a:	6803      	ldr	r3, [r0, #0]
 800a87c:	4631      	mov	r1, r6
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	4798      	blx	r3
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	4620      	mov	r0, r4
 800a886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a888:	4798      	blx	r3
 800a88a:	6828      	ldr	r0, [r5, #0]
 800a88c:	6803      	ldr	r3, [r0, #0]
 800a88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a892:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a894:	4718      	bx	r3
 800a896:	bf00      	nop
 800a898:	2001543c 	.word	0x2001543c

0800a89c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800a89c:	b508      	push	{r3, lr}
 800a89e:	f7f7 faf5 	bl	8001e8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a8a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8a6:	f7f7 baf9 	b.w	8001e9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800a8aa <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800a8aa:	b510      	push	{r4, lr}
 800a8ac:	2114      	movs	r1, #20
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	f008 fab8 	bl	8012e24 <_ZdlPvj>
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	bd10      	pop	{r4, pc}

0800a8b8 <_ZN8touchgfx13DMA_Interface5startEv>:
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	6840      	ldr	r0, [r0, #4]
 800a8be:	6803      	ldr	r3, [r0, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4798      	blx	r3
 800a8c4:	b948      	cbnz	r0, 800a8da <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a8c6:	7a63      	ldrb	r3, [r4, #9]
 800a8c8:	b13b      	cbz	r3, 800a8da <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a8ca:	7a23      	ldrb	r3, [r4, #8]
 800a8cc:	b92b      	cbnz	r3, 800a8da <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d8:	4718      	bx	r3
 800a8da:	bd10      	pop	{r4, pc}

0800a8dc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	4604      	mov	r4, r0
 800a8e0:	6840      	ldr	r0, [r0, #4]
 800a8e2:	6803      	ldr	r3, [r0, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4798      	blx	r3
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	b930      	cbnz	r0, 800a8fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800a8ec:	7a23      	ldrb	r3, [r4, #8]
 800a8ee:	b123      	cbz	r3, 800a8fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800a8f0:	6860      	ldr	r0, [r4, #4]
 800a8f2:	6803      	ldr	r3, [r0, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	4798      	blx	r3
 800a8f8:	7225      	strb	r5, [r4, #8]
 800a8fa:	6860      	ldr	r0, [r4, #4]
 800a8fc:	6803      	ldr	r3, [r0, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4798      	blx	r3
 800a902:	b928      	cbnz	r0, 800a910 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	4620      	mov	r0, r4
 800a908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a90e:	4718      	bx	r3
 800a910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a914:	f7f7 bad0 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800a918 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800a918:	b510      	push	{r4, lr}
 800a91a:	4c04      	ldr	r4, [pc, #16]	@ (800a92c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800a91c:	6082      	str	r2, [r0, #8]
 800a91e:	2200      	movs	r2, #0
 800a920:	e9c0 4100 	strd	r4, r1, [r0]
 800a924:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	bf00      	nop
 800a92c:	08015a78 	.word	0x08015a78

0800a930 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800a930:	6840      	ldr	r0, [r0, #4]
 800a932:	6803      	ldr	r3, [r0, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4718      	bx	r3

0800a938 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800a938:	2000      	movs	r0, #0
 800a93a:	4770      	bx	lr

0800a93c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800a93c:	4b07      	ldr	r3, [pc, #28]	@ (800a95c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800a93e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	4293      	cmp	r3, r2
 800a944:	bf81      	itttt	hi
 800a946:	4b06      	ldrhi	r3, [pc, #24]	@ (800a960 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800a948:	681b      	ldrhi	r3, [r3, #0]
 800a94a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800a94e:	7858      	ldrbhi	r0, [r3, #1]
 800a950:	bf8c      	ite	hi
 800a952:	f000 0003 	andhi.w	r0, r0, #3
 800a956:	2000      	movls	r0, #0
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	20015490 	.word	0x20015490
 800a960:	2001548c 	.word	0x2001548c

0800a964 <_ZN8touchgfx8TextAreaD1Ev>:
 800a964:	4770      	bx	lr
	...

0800a968 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	4b10      	ldr	r3, [pc, #64]	@ (800a9b0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800a96e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	428b      	cmp	r3, r1
 800a974:	4604      	mov	r4, r0
 800a976:	d918      	bls.n	800a9aa <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800a978:	6803      	ldr	r3, [r0, #0]
 800a97a:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 800a97c:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	f7f9 f978 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	4606      	mov	r6, r0
 800a988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a98a:	4620      	mov	r0, r4
 800a98c:	4798      	blx	r3
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	4607      	mov	r7, r0
 800a992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a996:	4620      	mov	r0, r4
 800a998:	4798      	blx	r3
 800a99a:	463a      	mov	r2, r7
 800a99c:	4603      	mov	r3, r0
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	46ac      	mov	ip, r5
 800a9a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a8:	4760      	bx	ip
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b0:	20015490 	.word	0x20015490
 800a9b4:	20015498 	.word	0x20015498

0800a9b8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800a9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9bc:	4b17      	ldr	r3, [pc, #92]	@ (800aa1c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800a9be:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	428b      	cmp	r3, r1
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	d926      	bls.n	800aa16 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800a9c8:	4b15      	ldr	r3, [pc, #84]	@ (800aa20 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800a9d0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800a9d4:	4b13      	ldr	r3, [pc, #76]	@ (800aa24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800a9d6:	7855      	ldrb	r5, [r2, #1]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a9de:	6833      	ldr	r3, [r6, #0]
 800a9e0:	69df      	ldr	r7, [r3, #28]
 800a9e2:	4b11      	ldr	r3, [pc, #68]	@ (800aa28 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	f7f9 f945 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	4798      	blx	r3
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	4681      	mov	r9, r0
 800a9f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4798      	blx	r3
 800aa00:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800aa04:	9000      	str	r0, [sp, #0]
 800aa06:	464b      	mov	r3, r9
 800aa08:	4642      	mov	r2, r8
 800aa0a:	4629      	mov	r1, r5
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	47b8      	blx	r7
 800aa10:	b003      	add	sp, #12
 800aa12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa16:	2000      	movs	r0, #0
 800aa18:	e7fa      	b.n	800aa10 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800aa1a:	bf00      	nop
 800aa1c:	20015490 	.word	0x20015490
 800aa20:	2001548c 	.word	0x2001548c
 800aa24:	20015494 	.word	0x20015494
 800aa28:	20015498 	.word	0x20015498

0800aa2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800aa2c:	b40e      	push	{r1, r2, r3}
 800aa2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa32:	4b2f      	ldr	r3, [pc, #188]	@ (800aaf0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800aa34:	881a      	ldrh	r2, [r3, #0]
 800aa36:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	b09d      	sub	sp, #116	@ 0x74
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	d954      	bls.n	800aaea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800aa40:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800aaf4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800aa44:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800aaf8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800aa48:	aa26      	add	r2, sp, #152	@ 0x98
 800aa4a:	9202      	str	r2, [sp, #8]
 800aa4c:	f8d9 2000 	ldr.w	r2, [r9]
 800aa50:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800aa54:	f8d8 3000 	ldr.w	r3, [r8]
 800aa58:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	4628      	mov	r0, r5
 800aa60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa62:	4798      	blx	r3
 800aa64:	b207      	sxth	r7, r0
 800aa66:	4606      	mov	r6, r0
 800aa68:	a803      	add	r0, sp, #12
 800aa6a:	f003 ffa8 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800aa6e:	682b      	ldr	r3, [r5, #0]
 800aa70:	4628      	mov	r0, r5
 800aa72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa74:	4798      	blx	r3
 800aa76:	682b      	ldr	r3, [r5, #0]
 800aa78:	4682      	mov	sl, r0
 800aa7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	4798      	blx	r3
 800aa80:	4653      	mov	r3, sl
 800aa82:	9000      	str	r0, [sp, #0]
 800aa84:	9a02      	ldr	r2, [sp, #8]
 800aa86:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800aa88:	a803      	add	r0, sp, #12
 800aa8a:	f003 fff3 	bl	800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800aa8e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800aa90:	f8d9 3000 	ldr.w	r3, [r9]
 800aa94:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800aa98:	8925      	ldrh	r5, [r4, #8]
 800aa9a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800aa9e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800aaa2:	eba5 050c 	sub.w	r5, r5, ip
 800aaa6:	784a      	ldrb	r2, [r1, #1]
 800aaa8:	f8d8 3000 	ldr.w	r3, [r8]
 800aaac:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800aab0:	b22d      	sxth	r5, r5
 800aab2:	9500      	str	r5, [sp, #0]
 800aab4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800aab8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800aabc:	a803      	add	r0, sp, #12
 800aabe:	f001 fdc1 	bl	800c644 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800aac2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800aac6:	18b9      	adds	r1, r7, r2
 800aac8:	2900      	cmp	r1, #0
 800aaca:	b203      	sxth	r3, r0
 800aacc:	dd0b      	ble.n	800aae6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800aace:	3b01      	subs	r3, #1
 800aad0:	fb13 f302 	smulbb	r3, r3, r2
 800aad4:	fb16 3300 	smlabb	r3, r6, r0, r3
 800aad8:	b21f      	sxth	r7, r3
 800aada:	4638      	mov	r0, r7
 800aadc:	b01d      	add	sp, #116	@ 0x74
 800aade:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae2:	b003      	add	sp, #12
 800aae4:	4770      	bx	lr
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	dcf7      	bgt.n	800aada <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800aaea:	2700      	movs	r7, #0
 800aaec:	e7f5      	b.n	800aada <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800aaee:	bf00      	nop
 800aaf0:	20015490 	.word	0x20015490
 800aaf4:	2001548c 	.word	0x2001548c
 800aaf8:	20015494 	.word	0x20015494

0800aafc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab00:	4bbc      	ldr	r3, [pc, #752]	@ (800adf4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800ab02:	460c      	mov	r4, r1
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800ab08:	428b      	cmp	r3, r1
 800ab0a:	b0a9      	sub	sp, #164	@ 0xa4
 800ab0c:	4680      	mov	r8, r0
 800ab0e:	d809      	bhi.n	800ab24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800ab10:	2300      	movs	r3, #0
 800ab12:	f04f 32ff 	mov.w	r2, #4294967295
 800ab16:	e9c0 3200 	strd	r3, r2, [r0]
 800ab1a:	6083      	str	r3, [r0, #8]
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	b029      	add	sp, #164	@ 0xa4
 800ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab24:	4eb4      	ldr	r6, [pc, #720]	@ (800adf8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800ab26:	6833      	ldr	r3, [r6, #0]
 800ab28:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800ab2c:	4bb3      	ldr	r3, [pc, #716]	@ (800adfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ab34:	4bb2      	ldr	r3, [pc, #712]	@ (800ae00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800ab36:	6818      	ldr	r0, [r3, #0]
 800ab38:	f7f9 f89c 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	4681      	mov	r9, r0
 800ab40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab42:	4628      	mov	r0, r5
 800ab44:	4798      	blx	r3
 800ab46:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800ab48:	b203      	sxth	r3, r0
 800ab4a:	4407      	add	r7, r0
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	b2bb      	uxth	r3, r7
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800ab56:	4682      	mov	sl, r0
 800ab58:	a80f      	add	r0, sp, #60	@ 0x3c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f040 80a6 	bne.w	800acac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800ab60:	f003 ff2d 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	4628      	mov	r0, r5
 800ab68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab6a:	4798      	blx	r3
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	4606      	mov	r6, r0
 800ab70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab72:	4628      	mov	r0, r5
 800ab74:	4798      	blx	r3
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	4607      	mov	r7, r0
 800ab7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	4798      	blx	r3
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	4683      	mov	fp, r0
 800ab84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab88:	4620      	mov	r0, r4
 800ab8a:	4798      	blx	r3
 800ab8c:	463b      	mov	r3, r7
 800ab8e:	e9cd b000 	strd	fp, r0, [sp]
 800ab92:	4649      	mov	r1, r9
 800ab94:	4632      	mov	r2, r6
 800ab96:	a80f      	add	r0, sp, #60	@ 0x3c
 800ab98:	f003 ff81 	bl	800ea9e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800ab9c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800aba0:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800adf8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800aba4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800aba8:	f04f 0600 	mov.w	r6, #0
 800abac:	bf0c      	ite	eq
 800abae:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800abb2:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800abb6:	4637      	mov	r7, r6
 800abb8:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800abba:	f8db 3000 	ldr.w	r3, [fp]
 800abbe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800abc2:	4629      	mov	r1, r5
 800abc4:	785b      	ldrb	r3, [r3, #1]
 800abc6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800abca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800abce:	a80f      	add	r0, sp, #60	@ 0x3c
 800abd0:	f001 fa3f 	bl	800c052 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	4286      	cmp	r6, r0
 800abd8:	bfb8      	it	lt
 800abda:	4606      	movlt	r6, r0
 800abdc:	3701      	adds	r7, #1
 800abde:	eba9 0903 	sub.w	r9, r9, r3
 800abe2:	a80f      	add	r0, sp, #60	@ 0x3c
 800abe4:	b236      	sxth	r6, r6
 800abe6:	b2bf      	uxth	r7, r7
 800abe8:	fa0f f989 	sxth.w	r9, r9
 800abec:	f003 ff0e 	bl	800ea0c <_ZN8touchgfx12TextProvider11endOfStringEv>
 800abf0:	b918      	cbnz	r0, 800abfa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800abf2:	7a2b      	ldrb	r3, [r5, #8]
 800abf4:	444b      	add	r3, r9
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dcde      	bgt.n	800abb8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800abfa:	9b03      	ldr	r3, [sp, #12]
 800abfc:	9a04      	ldr	r2, [sp, #16]
 800abfe:	f895 9009 	ldrb.w	r9, [r5, #9]
 800ac02:	fb13 f707 	smulbb	r7, r3, r7
 800ac06:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800ac08:	1aff      	subs	r7, r7, r3
 800ac0a:	b2bf      	uxth	r7, r7
 800ac0c:	b23b      	sxth	r3, r7
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	bfa8      	it	ge
 800ac12:	4657      	movge	r7, sl
 800ac14:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800ac18:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	bf08      	it	eq
 800ac20:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800ac24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac26:	bf18      	it	ne
 800ac28:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4798      	blx	r3
 800ac30:	444f      	add	r7, r9
 800ac32:	fa1f f987 	uxth.w	r9, r7
 800ac36:	2801      	cmp	r0, #1
 800ac38:	fa0f f789 	sxth.w	r7, r9
 800ac3c:	b2b3      	uxth	r3, r6
 800ac3e:	f000 80e1 	beq.w	800ae04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800ac42:	2802      	cmp	r0, #2
 800ac44:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800ac48:	f000 80e2 	beq.w	800ae10 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800ac4c:	7aea      	ldrb	r2, [r5, #11]
 800ac4e:	7b2d      	ldrb	r5, [r5, #12]
 800ac50:	b236      	sxth	r6, r6
 800ac52:	1ab6      	subs	r6, r6, r2
 800ac54:	442a      	add	r2, r5
 800ac56:	4413      	add	r3, r2
 800ac58:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800ac5c:	fa1f fa86 	uxth.w	sl, r6
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	2a02      	cmp	r2, #2
 800ac64:	fa0f fb8a 	sxth.w	fp, sl
 800ac68:	b21e      	sxth	r6, r3
 800ac6a:	f000 80d5 	beq.w	800ae18 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800ac6e:	2a03      	cmp	r2, #3
 800ac70:	f000 80dd 	beq.w	800ae2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800ac74:	2a01      	cmp	r2, #1
 800ac76:	f040 80e5 	bne.w	800ae44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800ac7a:	8925      	ldrh	r5, [r4, #8]
 800ac7c:	4633      	mov	r3, r6
 800ac7e:	eba5 0909 	sub.w	r9, r5, r9
 800ac82:	463e      	mov	r6, r7
 800ac84:	465d      	mov	r5, fp
 800ac86:	461f      	mov	r7, r3
 800ac88:	fa0f fb89 	sxth.w	fp, r9
 800ac8c:	4b5c      	ldr	r3, [pc, #368]	@ (800ae00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800ac8e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	f7f8 ffef 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 800ac96:	f8a8 b000 	strh.w	fp, [r8]
 800ac9a:	f8a8 5002 	strh.w	r5, [r8, #2]
 800ac9e:	f8a8 6004 	strh.w	r6, [r8, #4]
 800aca2:	f8a8 7006 	strh.w	r7, [r8, #6]
 800aca6:	f8c8 0008 	str.w	r0, [r8, #8]
 800acaa:	e737      	b.n	800ab1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800acac:	f003 fe87 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	4628      	mov	r0, r5
 800acb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acb6:	4798      	blx	r3
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	4607      	mov	r7, r0
 800acbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acbe:	4628      	mov	r0, r5
 800acc0:	4798      	blx	r3
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	4683      	mov	fp, r0
 800acc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acc8:	4620      	mov	r0, r4
 800acca:	4798      	blx	r3
 800accc:	6822      	ldr	r2, [r4, #0]
 800acce:	9005      	str	r0, [sp, #20]
 800acd0:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800acd4:	4620      	mov	r0, r4
 800acd6:	4790      	blx	r2
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	9001      	str	r0, [sp, #4]
 800acdc:	463a      	mov	r2, r7
 800acde:	4649      	mov	r1, r9
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	a80f      	add	r0, sp, #60	@ 0x3c
 800ace4:	465b      	mov	r3, fp
 800ace6:	f003 feda 	bl	800ea9e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800acea:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800acee:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800acf2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800acf4:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800acf8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800acfc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ad00:	bf0a      	itet	eq
 800ad02:	464a      	moveq	r2, r9
 800ad04:	461a      	movne	r2, r3
 800ad06:	4699      	moveq	r9, r3
 800ad08:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800ad0c:	1ad2      	subs	r2, r2, r3
 800ad0e:	6833      	ldr	r3, [r6, #0]
 800ad10:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800ad14:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ad18:	af0f      	add	r7, sp, #60	@ 0x3c
 800ad1a:	7859      	ldrb	r1, [r3, #1]
 800ad1c:	9707      	str	r7, [sp, #28]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800ad24:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ad28:	f88d 1020 	strb.w	r1, [sp, #32]
 800ad2c:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800ad30:	9509      	str	r5, [sp, #36]	@ 0x24
 800ad32:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800ad36:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800ad3a:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800ad3e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800ad42:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800ad46:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800ad4a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800ad4e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800ad52:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800ad56:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ad5a:	b350      	cbz	r0, 800adb2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	4628      	mov	r0, r5
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	4798      	blx	r3
 800ad64:	4607      	mov	r7, r0
 800ad66:	b320      	cbz	r0, 800adb2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800ad68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad6a:	6803      	ldr	r3, [r0, #0]
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	4798      	blx	r3
 800ad72:	4606      	mov	r6, r0
 800ad74:	b1e8      	cbz	r0, 800adb2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800ad76:	7b43      	ldrb	r3, [r0, #13]
 800ad78:	7a82      	ldrb	r2, [r0, #10]
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad80:	4313      	orrs	r3, r2
 800ad82:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800ad86:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800ad8a:	2b06      	cmp	r3, #6
 800ad8c:	d111      	bne.n	800adb2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800ad8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad90:	6803      	ldr	r3, [r0, #0]
 800ad92:	4632      	mov	r2, r6
 800ad94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad96:	4639      	mov	r1, r7
 800ad98:	4798      	blx	r3
 800ad9a:	7b73      	ldrb	r3, [r6, #13]
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ada2:	7ab3      	ldrb	r3, [r6, #10]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	4418      	add	r0, r3
 800ada8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800adac:	4418      	add	r0, r3
 800adae:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800adb2:	2600      	movs	r6, #0
 800adb4:	4637      	mov	r7, r6
 800adb6:	a806      	add	r0, sp, #24
 800adb8:	f001 fb40 	bl	800c43c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800adbc:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800adc0:	9b03      	ldr	r3, [sp, #12]
 800adc2:	4286      	cmp	r6, r0
 800adc4:	eba9 0903 	sub.w	r9, r9, r3
 800adc8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800adcc:	bfb8      	it	lt
 800adce:	4606      	movlt	r6, r0
 800add0:	3701      	adds	r7, #1
 800add2:	b236      	sxth	r6, r6
 800add4:	b2bf      	uxth	r7, r7
 800add6:	fa0f f989 	sxth.w	r9, r9
 800adda:	2b00      	cmp	r3, #0
 800addc:	f43f af0d 	beq.w	800abfa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800ade0:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f47f af08 	bne.w	800abfa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800adea:	7a2b      	ldrb	r3, [r5, #8]
 800adec:	444b      	add	r3, r9
 800adee:	2b00      	cmp	r3, #0
 800adf0:	dce1      	bgt.n	800adb6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800adf2:	e702      	b.n	800abfa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800adf4:	20015490 	.word	0x20015490
 800adf8:	2001548c 	.word	0x2001548c
 800adfc:	20015494 	.word	0x20015494
 800ae00:	20015498 	.word	0x20015498
 800ae04:	ebaa 0606 	sub.w	r6, sl, r6
 800ae08:	2002      	movs	r0, #2
 800ae0a:	fb96 f6f0 	sdiv	r6, r6, r0
 800ae0e:	e71d      	b.n	800ac4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800ae10:	441e      	add	r6, r3
 800ae12:	ebaa 0606 	sub.w	r6, sl, r6
 800ae16:	e719      	b.n	800ac4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800ae18:	8925      	ldrh	r5, [r4, #8]
 800ae1a:	1aed      	subs	r5, r5, r3
 800ae1c:	eba5 050a 	sub.w	r5, r5, sl
 800ae20:	fa0f fb85 	sxth.w	fp, r5
 800ae24:	8965      	ldrh	r5, [r4, #10]
 800ae26:	eba5 0509 	sub.w	r5, r5, r9
 800ae2a:	b22d      	sxth	r5, r5
 800ae2c:	e72e      	b.n	800ac8c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800ae2e:	8965      	ldrh	r5, [r4, #10]
 800ae30:	1aed      	subs	r5, r5, r3
 800ae32:	eba5 050a 	sub.w	r5, r5, sl
 800ae36:	4633      	mov	r3, r6
 800ae38:	b22d      	sxth	r5, r5
 800ae3a:	463e      	mov	r6, r7
 800ae3c:	f04f 0b00 	mov.w	fp, #0
 800ae40:	461f      	mov	r7, r3
 800ae42:	e723      	b.n	800ac8c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800ae44:	2500      	movs	r5, #0
 800ae46:	e721      	b.n	800ac8c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800ae48 <_ZN8touchgfx8TextAreaD0Ev>:
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	2148      	movs	r1, #72	@ 0x48
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	f007 ffe9 	bl	8012e24 <_ZdlPvj>
 800ae52:	4620      	mov	r0, r4
 800ae54:	bd10      	pop	{r4, pc}
	...

0800ae58 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800ae58:	b513      	push	{r0, r1, r4, lr}
 800ae5a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800ae5e:	4604      	mov	r4, r0
 800ae60:	b1fb      	cbz	r3, 800aea2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800ae62:	4b16      	ldr	r3, [pc, #88]	@ (800aebc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800ae64:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	428b      	cmp	r3, r1
 800ae6a:	d91a      	bls.n	800aea2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800ae6c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	dd16      	ble.n	800aea2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800ae74:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	dd12      	ble.n	800aea2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800ae7c:	4b10      	ldr	r3, [pc, #64]	@ (800aec0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800ae7e:	6818      	ldr	r0, [r3, #0]
 800ae80:	f7f8 fef8 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 800ae84:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800ae88:	6822      	ldr	r2, [r4, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	db06      	blt.n	800ae9c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800ae8e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	db02      	blt.n	800ae9c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800ae96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ae98:	4298      	cmp	r0, r3
 800ae9a:	d004      	beq.n	800aea6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800ae9c:	6953      	ldr	r3, [r2, #20]
 800ae9e:	4620      	mov	r0, r4
 800aea0:	4798      	blx	r3
 800aea2:	b002      	add	sp, #8
 800aea4:	bd10      	pop	{r4, pc}
 800aea6:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800aeaa:	c903      	ldmia	r1, {r0, r1}
 800aeac:	466b      	mov	r3, sp
 800aeae:	e883 0003 	stmia.w	r3, {r0, r1}
 800aeb2:	6912      	ldr	r2, [r2, #16]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4790      	blx	r2
 800aeba:	e7f2      	b.n	800aea2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800aebc:	20015490 	.word	0x20015490
 800aec0:	20015498 	.word	0x20015498

0800aec4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec8:	4b44      	ldr	r3, [pc, #272]	@ (800afdc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800aeca:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	4293      	cmp	r3, r2
 800aed0:	b08e      	sub	sp, #56	@ 0x38
 800aed2:	4604      	mov	r4, r0
 800aed4:	d97e      	bls.n	800afd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800aed6:	6808      	ldr	r0, [r1, #0]
 800aed8:	4d41      	ldr	r5, [pc, #260]	@ (800afe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800aeda:	6849      	ldr	r1, [r1, #4]
 800aedc:	ab05      	add	r3, sp, #20
 800aede:	c303      	stmia	r3!, {r0, r1}
 800aee0:	4611      	mov	r1, r2
 800aee2:	6828      	ldr	r0, [r5, #0]
 800aee4:	f7f8 fec6 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 800aee8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	db11      	blt.n	800af14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800aef0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	db0d      	blt.n	800af14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800aef8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800aefa:	4298      	cmp	r0, r3
 800aefc:	d10a      	bne.n	800af14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800aefe:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800af02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af06:	ab09      	add	r3, sp, #36	@ 0x24
 800af08:	e883 0003 	stmia.w	r3, {r0, r1}
 800af0c:	4619      	mov	r1, r3
 800af0e:	a805      	add	r0, sp, #20
 800af10:	f7fe fd14 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800af14:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dd5b      	ble.n	800afd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800af1c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd57      	ble.n	800afd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800af24:	4f2f      	ldr	r7, [pc, #188]	@ (800afe4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800af26:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800af2e:	4b2e      	ldr	r3, [pc, #184]	@ (800afe8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800af36:	2e00      	cmp	r6, #0
 800af38:	d04c      	beq.n	800afd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800af40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af42:	4620      	mov	r0, r4
 800af44:	4798      	blx	r3
 800af46:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800af4e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800af52:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800af56:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800af58:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800af5c:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800af60:	785b      	ldrb	r3, [r3, #1]
 800af62:	9609      	str	r6, [sp, #36]	@ 0x24
 800af64:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800af68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af6c:	4b1f      	ldr	r3, [pc, #124]	@ (800afec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800af6e:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800af78:	910b      	str	r1, [sp, #44]	@ 0x2c
 800af7a:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800af7e:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800af82:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800af86:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800af8a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800af8e:	b10a      	cbz	r2, 800af94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800af90:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800af92:	b906      	cbnz	r6, 800af96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800af94:	689e      	ldr	r6, [r3, #8]
 800af96:	af07      	add	r7, sp, #28
 800af98:	4621      	mov	r1, r4
 800af9a:	4638      	mov	r0, r7
 800af9c:	f003 f91e 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800afa0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800afa2:	6828      	ldr	r0, [r5, #0]
 800afa4:	f7f8 fe66 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	4605      	mov	r5, r0
 800afac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afae:	4620      	mov	r0, r4
 800afb0:	4798      	blx	r3
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	4680      	mov	r8, r0
 800afb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afba:	4620      	mov	r0, r4
 800afbc:	4798      	blx	r3
 800afbe:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800afc2:	ab09      	add	r3, sp, #36	@ 0x24
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	9501      	str	r5, [sp, #4]
 800afc8:	ab05      	add	r3, sp, #20
 800afca:	e897 0006 	ldmia.w	r7, {r1, r2}
 800afce:	4630      	mov	r0, r6
 800afd0:	f7f8 fe02 	bl	8003bd8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800afd4:	b00e      	add	sp, #56	@ 0x38
 800afd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afda:	bf00      	nop
 800afdc:	20015490 	.word	0x20015490
 800afe0:	20015498 	.word	0x20015498
 800afe4:	2001548c 	.word	0x2001548c
 800afe8:	20015494 	.word	0x20015494
 800afec:	2001543c 	.word	0x2001543c

0800aff0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800aff0:	b570      	push	{r4, r5, r6, lr}
 800aff2:	6803      	ldr	r3, [r0, #0]
 800aff4:	4604      	mov	r4, r0
 800aff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff8:	4615      	mov	r5, r2
 800affa:	4798      	blx	r3
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	4629      	mov	r1, r5
 800b000:	4620      	mov	r0, r4
 800b002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b008:	4718      	bx	r3
	...

0800b00c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4b0e      	ldr	r3, [pc, #56]	@ (800b048 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800b010:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	4604      	mov	r4, r0
 800b018:	d214      	bcs.n	800b044 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800b01a:	6803      	ldr	r3, [r0, #0]
 800b01c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b01e:	4798      	blx	r3
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	4605      	mov	r5, r0
 800b024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b026:	4620      	mov	r0, r4
 800b028:	4798      	blx	r3
 800b02a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800b02e:	b22d      	sxth	r5, r5
 800b030:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800b034:	4601      	mov	r1, r0
 800b036:	bf06      	itte	eq
 800b038:	4602      	moveq	r2, r0
 800b03a:	4629      	moveq	r1, r5
 800b03c:	462a      	movne	r2, r5
 800b03e:	4620      	mov	r0, r4
 800b040:	f7ff ffd6 	bl	800aff0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800b044:	bd38      	pop	{r3, r4, r5, pc}
 800b046:	bf00      	nop
 800b048:	20015490 	.word	0x20015490

0800b04c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800b04c:	b530      	push	{r4, r5, lr}
 800b04e:	888b      	ldrh	r3, [r1, #4]
 800b050:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800b052:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800b056:	b085      	sub	sp, #20
 800b058:	4604      	mov	r4, r0
 800b05a:	b923      	cbnz	r3, 800b066 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800b05c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800b060:	b90b      	cbnz	r3, 800b066 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800b062:	f7ff ffd3 	bl	800b00c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	466d      	mov	r5, sp
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b072:	4798      	blx	r3
 800b074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b078:	343c      	adds	r4, #60	@ 0x3c
 800b07a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b07e:	b005      	add	sp, #20
 800b080:	bd30      	pop	{r4, r5, pc}

0800b082 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800b082:	2300      	movs	r3, #0
 800b084:	8083      	strh	r3, [r0, #4]
 800b086:	80c3      	strh	r3, [r0, #6]
 800b088:	8003      	strh	r3, [r0, #0]
 800b08a:	8043      	strh	r3, [r0, #2]
 800b08c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800b090:	2bff      	cmp	r3, #255	@ 0xff
 800b092:	bf01      	itttt	eq
 800b094:	890b      	ldrheq	r3, [r1, #8]
 800b096:	8083      	strheq	r3, [r0, #4]
 800b098:	894b      	ldrheq	r3, [r1, #10]
 800b09a:	80c3      	strheq	r3, [r0, #6]
 800b09c:	4770      	bx	lr
	...

0800b0a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800b0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	6808      	ldr	r0, [r1, #0]
 800b0a6:	6849      	ldr	r1, [r1, #4]
 800b0a8:	466b      	mov	r3, sp
 800b0aa:	c303      	stmia	r3!, {r0, r1}
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	4669      	mov	r1, sp
 800b0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	4798      	blx	r3
 800b0b6:	4b08      	ldr	r3, [pc, #32]	@ (800b0d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b0be:	b10a      	cbz	r2, 800b0c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800b0c0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b0c2:	b900      	cbnz	r0, 800b0c6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800b0c4:	6898      	ldr	r0, [r3, #8]
 800b0c6:	6803      	ldr	r3, [r0, #0]
 800b0c8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b0ca:	6a1d      	ldr	r5, [r3, #32]
 800b0cc:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b0d0:	4669      	mov	r1, sp
 800b0d2:	47a8      	blx	r5
 800b0d4:	b003      	add	sp, #12
 800b0d6:	bd30      	pop	{r4, r5, pc}
 800b0d8:	2001543c 	.word	0x2001543c

0800b0dc <_ZN8touchgfx3BoxD1Ev>:
 800b0dc:	4770      	bx	lr

0800b0de <_ZN8touchgfx3BoxD0Ev>:
 800b0de:	b510      	push	{r4, lr}
 800b0e0:	212c      	movs	r1, #44	@ 0x2c
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	f007 fe9e 	bl	8012e24 <_ZdlPvj>
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	bd10      	pop	{r4, pc}

0800b0ec <_ZNK8touchgfx3Box17invalidateContentEv>:
 800b0ec:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800b0f0:	b12a      	cbz	r2, 800b0fe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800b0f2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800b0f6:	b112      	cbz	r2, 800b0fe <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800b0f8:	6803      	ldr	r3, [r0, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	4718      	bx	r3
 800b0fe:	4770      	bx	lr

0800b100 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800b100:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800b104:	4770      	bx	lr

0800b106 <_ZN8touchgfx6ButtonD1Ev>:
 800b106:	4770      	bx	lr

0800b108 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	880b      	ldrh	r3, [r1, #0]
 800b10c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800b10e:	4605      	mov	r5, r0
 800b110:	8813      	ldrh	r3, [r2, #0]
 800b112:	f825 3f30 	strh.w	r3, [r5, #48]!
 800b116:	4604      	mov	r4, r0
 800b118:	4628      	mov	r0, r5
 800b11a:	f005 f805 	bl	8010128 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b11e:	4606      	mov	r6, r0
 800b120:	4628      	mov	r0, r5
 800b122:	f005 f835 	bl	8010190 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	4605      	mov	r5, r0
 800b12a:	4631      	mov	r1, r6
 800b12c:	4620      	mov	r0, r4
 800b12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b130:	4798      	blx	r3
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b13a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b13e:	4718      	bx	r3

0800b140 <_ZN8touchgfx6ButtonD0Ev>:
 800b140:	b510      	push	{r4, lr}
 800b142:	2134      	movs	r1, #52	@ 0x34
 800b144:	4604      	mov	r4, r0
 800b146:	f007 fe6d 	bl	8012e24 <_ZdlPvj>
 800b14a:	4620      	mov	r0, r4
 800b14c:	bd10      	pop	{r4, pc}

0800b14e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800b14e:	b510      	push	{r4, lr}
 800b150:	4604      	mov	r4, r0
 800b152:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800b154:	b150      	cbz	r0, 800b16c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800b156:	6803      	ldr	r3, [r0, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	4798      	blx	r3
 800b15c:	b130      	cbz	r0, 800b16c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800b15e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b160:	6803      	ldr	r3, [r0, #0]
 800b162:	4621      	mov	r1, r4
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b16a:	4718      	bx	r3
 800b16c:	bd10      	pop	{r4, pc}

0800b16e <_ZNK8touchgfx6Button12getSolidRectEv>:
 800b16e:	b510      	push	{r4, lr}
 800b170:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800b174:	2bff      	cmp	r3, #255	@ 0xff
 800b176:	4604      	mov	r4, r0
 800b178:	d006      	beq.n	800b188 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800b17a:	2300      	movs	r3, #0
 800b17c:	8003      	strh	r3, [r0, #0]
 800b17e:	8043      	strh	r3, [r0, #2]
 800b180:	8083      	strh	r3, [r0, #4]
 800b182:	80c3      	strh	r3, [r0, #6]
 800b184:	4620      	mov	r0, r4
 800b186:	bd10      	pop	{r4, pc}
 800b188:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800b18c:	b11b      	cbz	r3, 800b196 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800b18e:	3130      	adds	r1, #48	@ 0x30
 800b190:	f005 f832 	bl	80101f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b194:	e7f6      	b.n	800b184 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800b196:	312e      	adds	r1, #46	@ 0x2e
 800b198:	e7fa      	b.n	800b190 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800b19c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b1a4:	b08a      	sub	sp, #40	@ 0x28
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	4688      	mov	r8, r1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d066      	beq.n	800b27c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800b1ae:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b1b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b1b4:	a805      	add	r0, sp, #20
 800b1b6:	f004 ffb7 	bl	8010128 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	a805      	add	r0, sp, #20
 800b1be:	f004 ffe7 	bl	8010190 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b1c2:	f9b8 6000 	ldrsh.w	r6, [r8]
 800b1c6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800b1ca:	4432      	add	r2, r6
 800b1cc:	b292      	uxth	r2, r2
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	fa0f fc82 	sxth.w	ip, r2
 800b1d4:	459c      	cmp	ip, r3
 800b1d6:	9306      	str	r3, [sp, #24]
 800b1d8:	dd52      	ble.n	800b280 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800b1da:	42b7      	cmp	r7, r6
 800b1dc:	dd50      	ble.n	800b280 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800b1de:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800b1e2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800b1e6:	442b      	add	r3, r5
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	b219      	sxth	r1, r3
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	dd47      	ble.n	800b280 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800b1f0:	42a8      	cmp	r0, r5
 800b1f2:	dd45      	ble.n	800b280 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800b1f4:	4567      	cmp	r7, ip
 800b1f6:	bfb8      	it	lt
 800b1f8:	b2ba      	uxthlt	r2, r7
 800b1fa:	4288      	cmp	r0, r1
 800b1fc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800b200:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800b204:	bfb8      	it	lt
 800b206:	b283      	uxthlt	r3, r0
 800b208:	1b92      	subs	r2, r2, r6
 800b20a:	1b5b      	subs	r3, r3, r5
 800b20c:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b210:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b214:	f8ad 6018 	strh.w	r6, [sp, #24]
 800b218:	f8ad 501a 	strh.w	r5, [sp, #26]
 800b21c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800b220:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b224:	429a      	cmp	r2, r3
 800b226:	d026      	beq.n	800b276 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800b228:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dd22      	ble.n	800b276 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800b230:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800b234:	2b00      	cmp	r3, #0
 800b236:	dd1e      	ble.n	800b276 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800b238:	2300      	movs	r3, #0
 800b23a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	a908      	add	r1, sp, #32
 800b242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b244:	4620      	mov	r0, r4
 800b246:	4798      	blx	r3
 800b248:	4b0f      	ldr	r3, [pc, #60]	@ (800b288 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b250:	b10a      	cbz	r2, 800b256 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800b252:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b254:	b900      	cbnz	r0, 800b258 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800b256:	6898      	ldr	r0, [r3, #8]
 800b258:	6801      	ldr	r1, [r0, #0]
 800b25a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800b25e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800b262:	2501      	movs	r5, #1
 800b264:	9502      	str	r5, [sp, #8]
 800b266:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800b26a:	9401      	str	r4, [sp, #4]
 800b26c:	ac06      	add	r4, sp, #24
 800b26e:	9400      	str	r4, [sp, #0]
 800b270:	688c      	ldr	r4, [r1, #8]
 800b272:	a905      	add	r1, sp, #20
 800b274:	47a0      	blx	r4
 800b276:	b00a      	add	sp, #40	@ 0x28
 800b278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b27c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800b27e:	e797      	b.n	800b1b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800b280:	2300      	movs	r3, #0
 800b282:	9307      	str	r3, [sp, #28]
 800b284:	e7ca      	b.n	800b21c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800b286:	bf00      	nop
 800b288:	2001543c 	.word	0x2001543c

0800b28c <_ZNK8touchgfx6Button17invalidateContentEv>:
 800b28c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800b290:	b12a      	cbz	r2, 800b29e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800b292:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800b296:	b112      	cbz	r2, 800b29e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800b298:	6803      	ldr	r3, [r0, #0]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	4718      	bx	r3
 800b29e:	4770      	bx	lr

0800b2a0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800b2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2a4:	4b2f      	ldr	r3, [pc, #188]	@ (800b364 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800b2a6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800b2a8:	881b      	ldrh	r3, [r3, #0]
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	b08d      	sub	sp, #52	@ 0x34
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	460f      	mov	r7, r1
 800b2b2:	d954      	bls.n	800b35e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800b2b4:	4b2c      	ldr	r3, [pc, #176]	@ (800b368 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800b2b6:	6819      	ldr	r1, [r3, #0]
 800b2b8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800b2bc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800b2c0:	4a2a      	ldr	r2, [pc, #168]	@ (800b36c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800b2c2:	6812      	ldr	r2, [r2, #0]
 800b2c4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800b2c8:	2900      	cmp	r1, #0
 800b2ca:	d048      	beq.n	800b35e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800b2cc:	785a      	ldrb	r2, [r3, #1]
 800b2ce:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800b2d2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800b2d6:	4b26      	ldr	r3, [pc, #152]	@ (800b370 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800b2d8:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800b2dc:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800b2e0:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800b2e4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800b2e6:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800b2ea:	9107      	str	r1, [sp, #28]
 800b2ec:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800b2f0:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800b2f4:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	f88d 8020 	strb.w	r8, [sp, #32]
 800b2fe:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800b302:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800b306:	9609      	str	r6, [sp, #36]	@ 0x24
 800b308:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800b30c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800b310:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800b314:	b10b      	cbz	r3, 800b31a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800b316:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800b318:	b905      	cbnz	r5, 800b31c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800b31a:	6895      	ldr	r5, [r2, #8]
 800b31c:	ae05      	add	r6, sp, #20
 800b31e:	4621      	mov	r1, r4
 800b320:	4630      	mov	r0, r6
 800b322:	f002 ff5b 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b326:	4b13      	ldr	r3, [pc, #76]	@ (800b374 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800b328:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800b32a:	6818      	ldr	r0, [r3, #0]
 800b32c:	f7f8 fca2 	bl	8003c74 <_ZNK8touchgfx5Texts7getTextEt>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	4680      	mov	r8, r0
 800b334:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b336:	4620      	mov	r0, r4
 800b338:	4798      	blx	r3
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	4681      	mov	r9, r0
 800b33e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b342:	4620      	mov	r0, r4
 800b344:	4798      	blx	r3
 800b346:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800b34a:	ab07      	add	r3, sp, #28
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	f8cd 8004 	str.w	r8, [sp, #4]
 800b352:	463b      	mov	r3, r7
 800b354:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b358:	4628      	mov	r0, r5
 800b35a:	f7f8 fc3d 	bl	8003bd8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800b35e:	b00d      	add	sp, #52	@ 0x34
 800b360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b364:	20015490 	.word	0x20015490
 800b368:	2001548c 	.word	0x2001548c
 800b36c:	20015494 	.word	0x20015494
 800b370:	2001543c 	.word	0x2001543c
 800b374:	20015498 	.word	0x20015498

0800b378 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800b378:	4770      	bx	lr

0800b37a <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800b37a:	b510      	push	{r4, lr}
 800b37c:	2134      	movs	r1, #52	@ 0x34
 800b37e:	4604      	mov	r4, r0
 800b380:	f007 fd50 	bl	8012e24 <_ZdlPvj>
 800b384:	4620      	mov	r0, r4
 800b386:	bd10      	pop	{r4, pc}

0800b388 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	4604      	mov	r4, r0
 800b38e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b390:	8962      	ldrh	r2, [r4, #10]
 800b392:	b218      	sxth	r0, r3
 800b394:	460e      	mov	r6, r1
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	8921      	ldrh	r1, [r4, #8]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	1ac9      	subs	r1, r1, r3
 800b39e:	b08e      	sub	sp, #56	@ 0x38
 800b3a0:	b209      	sxth	r1, r1
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	b21b      	sxth	r3, r3
 800b3a6:	2900      	cmp	r1, #0
 800b3a8:	f8ad 0000 	strh.w	r0, [sp]
 800b3ac:	f8ad 0002 	strh.w	r0, [sp, #2]
 800b3b0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800b3b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b3b8:	dd5e      	ble.n	800b478 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	dd5c      	ble.n	800b478 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800b3be:	6830      	ldr	r0, [r6, #0]
 800b3c0:	6871      	ldr	r1, [r6, #4]
 800b3c2:	ab02      	add	r3, sp, #8
 800b3c4:	c303      	stmia	r3!, {r0, r1}
 800b3c6:	4669      	mov	r1, sp
 800b3c8:	a802      	add	r0, sp, #8
 800b3ca:	f7fe fab7 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	a902      	add	r1, sp, #8
 800b3d2:	f7ff fe65 	bl	800b0a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800b3d6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d05f      	beq.n	800b49c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800b3dc:	8963      	ldrh	r3, [r4, #10]
 800b3de:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b3e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b3e6:	1a1f      	subs	r7, r3, r0
 800b3e8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800b3ec:	b202      	sxth	r2, r0
 800b3ee:	2500      	movs	r5, #0
 800b3f0:	b21b      	sxth	r3, r3
 800b3f2:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 800b3f6:	1a09      	subs	r1, r1, r0
 800b3f8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800b3fc:	9506      	str	r5, [sp, #24]
 800b3fe:	f8ad 201e 	strh.w	r2, [sp, #30]
 800b402:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b406:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 800b40a:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 800b40e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800b412:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800b416:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800b41a:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 800b41e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800b422:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800b426:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800b42a:	af04      	add	r7, sp, #16
 800b42c:	ab06      	add	r3, sp, #24
 800b42e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b432:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b436:	e887 0003 	stmia.w	r7, {r0, r1}
 800b43a:	4631      	mov	r1, r6
 800b43c:	4638      	mov	r0, r7
 800b43e:	f7fe fa7d 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800b442:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd12      	ble.n	800b470 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800b44a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	dd0e      	ble.n	800b470 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	4639      	mov	r1, r7
 800b456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b458:	4620      	mov	r0, r4
 800b45a:	4798      	blx	r3
 800b45c:	f7fe fd44 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 800b460:	6803      	ldr	r3, [r0, #0]
 800b462:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b464:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800b468:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b46c:	4639      	mov	r1, r7
 800b46e:	47c0      	blx	r8
 800b470:	3501      	adds	r5, #1
 800b472:	2d04      	cmp	r5, #4
 800b474:	d1da      	bne.n	800b42c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800b476:	e011      	b.n	800b49c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800b478:	6830      	ldr	r0, [r6, #0]
 800b47a:	6871      	ldr	r1, [r6, #4]
 800b47c:	ab06      	add	r3, sp, #24
 800b47e:	c303      	stmia	r3!, {r0, r1}
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	a906      	add	r1, sp, #24
 800b484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b486:	4620      	mov	r0, r4
 800b488:	4798      	blx	r3
 800b48a:	f7fe fd2d 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 800b48e:	6803      	ldr	r3, [r0, #0]
 800b490:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b492:	6a1d      	ldr	r5, [r3, #32]
 800b494:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b498:	a906      	add	r1, sp, #24
 800b49a:	47a8      	blx	r5
 800b49c:	b00e      	add	sp, #56	@ 0x38
 800b49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4a2 <_ZN8touchgfx5ImageD1Ev>:
 800b4a2:	4770      	bx	lr

0800b4a4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	880b      	ldrh	r3, [r1, #0]
 800b4a8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	f004 fe3a 	bl	8010128 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f004 fe6a 	bl	8010190 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	4605      	mov	r5, r0
 800b4c0:	4631      	mov	r1, r6
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4c6:	4798      	blx	r3
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4d4:	4718      	bx	r3

0800b4d6 <_ZN8touchgfx5ImageD0Ev>:
 800b4d6:	b510      	push	{r4, lr}
 800b4d8:	212c      	movs	r1, #44	@ 0x2c
 800b4da:	4604      	mov	r4, r0
 800b4dc:	f007 fca2 	bl	8012e24 <_ZdlPvj>
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	bd10      	pop	{r4, pc}

0800b4e4 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800b4e4:	b510      	push	{r4, lr}
 800b4e6:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800b4ea:	2bff      	cmp	r3, #255	@ 0xff
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	d006      	beq.n	800b4fe <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	8003      	strh	r3, [r0, #0]
 800b4f4:	8043      	strh	r3, [r0, #2]
 800b4f6:	8083      	strh	r3, [r0, #4]
 800b4f8:	80c3      	strh	r3, [r0, #6]
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	3126      	adds	r1, #38	@ 0x26
 800b500:	f004 fe7a 	bl	80101f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b504:	e7f9      	b.n	800b4fa <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800b506 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800b506:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800b50a:	b12a      	cbz	r2, 800b518 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800b50c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800b510:	b112      	cbz	r2, 800b518 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800b512:	6803      	ldr	r3, [r0, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	4718      	bx	r3
 800b518:	4770      	bx	lr
	...

0800b51c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800b51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b520:	4604      	mov	r4, r0
 800b522:	b088      	sub	sp, #32
 800b524:	f854 3b26 	ldr.w	r3, [r4], #38
 800b528:	2500      	movs	r5, #0
 800b52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52c:	460f      	mov	r7, r1
 800b52e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b532:	a904      	add	r1, sp, #16
 800b534:	4606      	mov	r6, r0
 800b536:	4798      	blx	r3
 800b538:	4620      	mov	r0, r4
 800b53a:	f004 fdf5 	bl	8010128 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b53e:	4680      	mov	r8, r0
 800b540:	4620      	mov	r0, r4
 800b542:	f004 fe25 	bl	8010190 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b546:	9506      	str	r5, [sp, #24]
 800b548:	ad06      	add	r5, sp, #24
 800b54a:	f8ad 001e 	strh.w	r0, [sp, #30]
 800b54e:	4639      	mov	r1, r7
 800b550:	4628      	mov	r0, r5
 800b552:	f8ad 801c 	strh.w	r8, [sp, #28]
 800b556:	f7fe f9f1 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800b55a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	dd19      	ble.n	800b596 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b562:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800b566:	2b00      	cmp	r3, #0
 800b568:	dd15      	ble.n	800b596 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b56a:	4b0c      	ldr	r3, [pc, #48]	@ (800b59c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b572:	b10a      	cbz	r2, 800b578 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800b574:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b576:	b900      	cbnz	r0, 800b57a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800b578:	6898      	ldr	r0, [r3, #8]
 800b57a:	6801      	ldr	r1, [r0, #0]
 800b57c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800b580:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800b584:	2701      	movs	r7, #1
 800b586:	9702      	str	r7, [sp, #8]
 800b588:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800b58c:	e9cd 5600 	strd	r5, r6, [sp]
 800b590:	688d      	ldr	r5, [r1, #8]
 800b592:	4621      	mov	r1, r4
 800b594:	47a8      	blx	r5
 800b596:	b008      	add	sp, #32
 800b598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59c:	2001543c 	.word	0x2001543c

0800b5a0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800b5a0:	b510      	push	{r4, lr}
 800b5a2:	6803      	ldr	r3, [r0, #0]
 800b5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	4798      	blx	r3
 800b5aa:	1b03      	subs	r3, r0, r4
 800b5ac:	4258      	negs	r0, r3
 800b5ae:	4158      	adcs	r0, r3
 800b5b0:	bd10      	pop	{r4, pc}
	...

0800b5b4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800b5b4:	4b01      	ldr	r3, [pc, #4]	@ (800b5bc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800b5b6:	6019      	str	r1, [r3, #0]
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	20015444 	.word	0x20015444

0800b5c0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	4696      	mov	lr, r2
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	4614      	mov	r4, r2
 800b5ca:	460e      	mov	r6, r1
 800b5cc:	461f      	mov	r7, r3
 800b5ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b5d2:	b097      	sub	sp, #92	@ 0x5c
 800b5d4:	f10d 0c1c 	add.w	ip, sp, #28
 800b5d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b5dc:	f8de 3000 	ldr.w	r3, [lr]
 800b5e0:	f8cc 3000 	str.w	r3, [ip]
 800b5e4:	f104 0e14 	add.w	lr, r4, #20
 800b5e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b5ec:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b5f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b5f4:	f8de 3000 	ldr.w	r3, [lr]
 800b5f8:	f8cc 3000 	str.w	r3, [ip]
 800b5fc:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b600:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b604:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b60c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800b610:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800b614:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800b618:	f8de 3000 	ldr.w	r3, [lr]
 800b61c:	f8cc 3000 	str.w	r3, [ip]
 800b620:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b622:	682b      	ldr	r3, [r5, #0]
 800b624:	9201      	str	r2, [sp, #4]
 800b626:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b62a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b62c:	9200      	str	r2, [sp, #0]
 800b62e:	f8cd 8008 	str.w	r8, [sp, #8]
 800b632:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800b636:	aa07      	add	r2, sp, #28
 800b638:	463b      	mov	r3, r7
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47d8      	blx	fp
 800b640:	46a6      	mov	lr, r4
 800b642:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b646:	f10d 0c1c 	add.w	ip, sp, #28
 800b64a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b64e:	f8de 3000 	ldr.w	r3, [lr]
 800b652:	f8cc 3000 	str.w	r3, [ip]
 800b656:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b65a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b65e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b662:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b666:	343c      	adds	r4, #60	@ 0x3c
 800b668:	f8de 3000 	ldr.w	r3, [lr]
 800b66c:	f8cc 3000 	str.w	r3, [ip]
 800b670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b672:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b676:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b67a:	6823      	ldr	r3, [r4, #0]
 800b67c:	f8cc 3000 	str.w	r3, [ip]
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b686:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b688:	9201      	str	r2, [sp, #4]
 800b68a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b68c:	9200      	str	r2, [sp, #0]
 800b68e:	f8cd 8008 	str.w	r8, [sp, #8]
 800b692:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800b694:	aa07      	add	r2, sp, #28
 800b696:	463b      	mov	r3, r7
 800b698:	4631      	mov	r1, r6
 800b69a:	4628      	mov	r0, r5
 800b69c:	47a0      	blx	r4
 800b69e:	b017      	add	sp, #92	@ 0x5c
 800b6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	b08d      	sub	sp, #52	@ 0x34
 800b6aa:	4688      	mov	r8, r1
 800b6ac:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b6ae:	f8d3 c000 	ldr.w	ip, [r3]
 800b6b2:	680f      	ldr	r7, [r1, #0]
 800b6b4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800b6b8:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800b6bc:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800b6c0:	edd3 6a07 	vldr	s13, [r3, #28]
 800b6c4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b6c6:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800b6ca:	f9b1 9000 	ldrsh.w	r9, [r1]
 800b6ce:	f9ba 1000 	ldrsh.w	r1, [sl]
 800b6d2:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800b6d6:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800b6da:	eba7 070c 	sub.w	r7, r7, ip
 800b6de:	42bc      	cmp	r4, r7
 800b6e0:	bfa8      	it	ge
 800b6e2:	463c      	movge	r4, r7
 800b6e4:	ee07 4a90 	vmov	s15, r4
 800b6e8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800b6ec:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800b6f0:	ee25 4a04 	vmul.f32	s8, s10, s8
 800b6f4:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b6f8:	ee25 5a27 	vmul.f32	s10, s10, s15
 800b6fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b700:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b704:	eb09 0e0c 	add.w	lr, r9, ip
 800b708:	4571      	cmp	r1, lr
 800b70a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800b70e:	ee32 1a05 	vadd.f32	s2, s4, s10
 800b712:	ee36 0a84 	vadd.f32	s0, s13, s8
 800b716:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b71a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b71e:	f340 808d 	ble.w	800b83c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800b722:	eba1 060e 	sub.w	r6, r1, lr
 800b726:	fb96 f5f4 	sdiv	r5, r6, r4
 800b72a:	ee07 5a10 	vmov	s14, r5
 800b72e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b732:	2d00      	cmp	r5, #0
 800b734:	fb04 6615 	mls	r6, r4, r5, r6
 800b738:	eea7 0a04 	vfma.f32	s0, s14, s8
 800b73c:	eee7 0a24 	vfma.f32	s1, s14, s9
 800b740:	eea7 1a05 	vfma.f32	s2, s14, s10
 800b744:	dd13      	ble.n	800b76e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800b746:	ee70 6a44 	vsub.f32	s13, s0, s8
 800b74a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800b74e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b756:	bf18      	it	ne
 800b758:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800b75c:	ee31 2a45 	vsub.f32	s4, s2, s10
 800b760:	bf08      	it	eq
 800b762:	eeb0 7a67 	vmoveq.f32	s14, s15
 800b766:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b76a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b76e:	fb05 f204 	mul.w	r2, r5, r4
 800b772:	1abf      	subs	r7, r7, r2
 800b774:	4494      	add	ip, r2
 800b776:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800b77a:	4411      	add	r1, r2
 800b77c:	eb09 020c 	add.w	r2, r9, ip
 800b780:	443a      	add	r2, r7
 800b782:	b209      	sxth	r1, r1
 800b784:	428a      	cmp	r2, r1
 800b786:	bfc4      	itt	gt
 800b788:	eba1 0209 	subgt.w	r2, r1, r9
 800b78c:	eba2 070c 	subgt.w	r7, r2, ip
 800b790:	2f00      	cmp	r7, #0
 800b792:	dd50      	ble.n	800b836 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800b794:	fb97 f1f4 	sdiv	r1, r7, r4
 800b798:	fb04 7211 	mls	r2, r4, r1, r7
 800b79c:	b90a      	cbnz	r2, 800b7a2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800b79e:	3901      	subs	r1, #1
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800b7a6:	6840      	ldr	r0, [r0, #4]
 800b7a8:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b7aa:	f8d0 a000 	ldr.w	sl, [r0]
 800b7ae:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b7b0:	9008      	str	r0, [sp, #32]
 800b7b2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800b7b6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b7b8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b7bc:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b7c4:	445b      	add	r3, fp
 800b7c6:	eef0 6a42 	vmov.f32	s13, s4
 800b7ca:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800b7ce:	ee21 3a23 	vmul.f32	s6, s2, s7
 800b7d2:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800b7d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800b7da:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	ee17 7a90 	vmov	r7, s15
 800b7e4:	ee73 7a42 	vsub.f32	s15, s6, s4
 800b7e8:	eeb0 7a61 	vmov.f32	s14, s3
 800b7ec:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b7f0:	ee16 3a90 	vmov	r3, s13
 800b7f4:	fb97 f7f4 	sdiv	r7, r7, r4
 800b7f8:	ee17 ca90 	vmov	ip, s15
 800b7fc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800b800:	fb9c fcf4 	sdiv	ip, ip, r4
 800b804:	fb0c 3306 	mla	r3, ip, r6, r3
 800b808:	9302      	str	r3, [sp, #8]
 800b80a:	ee17 3a10 	vmov	r3, s14
 800b80e:	44b6      	add	lr, r6
 800b810:	fb04 e505 	mla	r5, r4, r5, lr
 800b814:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800b818:	fb07 3706 	mla	r7, r7, r6, r3
 800b81c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800b820:	e9cd 4700 	strd	r4, r7, [sp]
 800b824:	2900      	cmp	r1, #0
 800b826:	bfcc      	ite	gt
 800b828:	46a1      	movgt	r9, r4
 800b82a:	4691      	movle	r9, r2
 800b82c:	eba9 0306 	sub.w	r3, r9, r6
 800b830:	f8da 4008 	ldr.w	r4, [sl, #8]
 800b834:	47a0      	blx	r4
 800b836:	b00d      	add	sp, #52	@ 0x34
 800b838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83c:	2500      	movs	r5, #0
 800b83e:	462e      	mov	r6, r5
 800b840:	e799      	b.n	800b776 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800b844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	b0db      	sub	sp, #364	@ 0x16c
 800b84a:	461d      	mov	r5, r3
 800b84c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800b850:	930a      	str	r3, [sp, #40]	@ 0x28
 800b852:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800b856:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b858:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800b85c:	9310      	str	r3, [sp, #64]	@ 0x40
 800b85e:	6803      	ldr	r3, [r0, #0]
 800b860:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b862:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800b864:	9009      	str	r0, [sp, #36]	@ 0x24
 800b866:	4614      	mov	r4, r2
 800b868:	4629      	mov	r1, r5
 800b86a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b86e:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800b872:	47b8      	blx	r7
 800b874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b876:	6058      	str	r0, [r3, #4]
 800b878:	2800      	cmp	r0, #0
 800b87a:	f000 83a1 	beq.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b87e:	682b      	ldr	r3, [r5, #0]
 800b880:	9314      	str	r3, [sp, #80]	@ 0x50
 800b882:	686b      	ldr	r3, [r5, #4]
 800b884:	9315      	str	r3, [sp, #84]	@ 0x54
 800b886:	4bc4      	ldr	r3, [pc, #784]	@ (800bb98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800b888:	ed94 7a02 	vldr	s14, [r4, #8]
 800b88c:	7819      	ldrb	r1, [r3, #0]
 800b88e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b892:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800b896:	2900      	cmp	r1, #0
 800b898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b89c:	bf16      	itet	ne
 800b89e:	4619      	movne	r1, r3
 800b8a0:	4611      	moveq	r1, r2
 800b8a2:	4613      	movne	r3, r2
 800b8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a8:	9116      	str	r1, [sp, #88]	@ 0x58
 800b8aa:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800b8ae:	f240 8387 	bls.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8b2:	ed94 7a07 	vldr	s14, [r4, #28]
 800b8b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8be:	f240 837f 	bls.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8c2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800b8c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ce:	f240 8377 	bls.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	4bb1      	ldr	r3, [pc, #708]	@ (800bb9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	f2c0 8372 	blt.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8dc:	49b0      	ldr	r1, [pc, #704]	@ (800bba0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800b8de:	6963      	ldr	r3, [r4, #20]
 800b8e0:	428a      	cmp	r2, r1
 800b8e2:	f300 836d 	bgt.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8e6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b8ea:	48ae      	ldr	r0, [pc, #696]	@ (800bba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800b8ec:	33ff      	adds	r3, #255	@ 0xff
 800b8ee:	4283      	cmp	r3, r0
 800b8f0:	f200 8366 	bhi.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b8f6:	4dac      	ldr	r5, [pc, #688]	@ (800bba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800b8f8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b8fc:	33ff      	adds	r3, #255	@ 0xff
 800b8fe:	42ab      	cmp	r3, r5
 800b900:	f200 835e 	bhi.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b904:	6862      	ldr	r2, [r4, #4]
 800b906:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800b90a:	33ff      	adds	r3, #255	@ 0xff
 800b90c:	4283      	cmp	r3, r0
 800b90e:	f200 8357 	bhi.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b912:	69a1      	ldr	r1, [r4, #24]
 800b914:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800b918:	33ff      	adds	r3, #255	@ 0xff
 800b91a:	4283      	cmp	r3, r0
 800b91c:	f200 8350 	bhi.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b920:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b922:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800b926:	30ff      	adds	r0, #255	@ 0xff
 800b928:	42a8      	cmp	r0, r5
 800b92a:	f200 8349 	bhi.w	800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b92e:	428a      	cmp	r2, r1
 800b930:	f280 8110 	bge.w	800bb54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800b934:	429a      	cmp	r2, r3
 800b936:	f300 8119 	bgt.w	800bb6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800b93a:	4299      	cmp	r1, r3
 800b93c:	f280 811d 	bge.w	800bb7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800b940:	2502      	movs	r5, #2
 800b942:	2701      	movs	r7, #1
 800b944:	46a9      	mov	r9, r5
 800b946:	46b8      	mov	r8, r7
 800b948:	f04f 0a00 	mov.w	sl, #0
 800b94c:	4621      	mov	r1, r4
 800b94e:	a849      	add	r0, sp, #292	@ 0x124
 800b950:	f003 fda6 	bl	800f4a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800b954:	4622      	mov	r2, r4
 800b956:	4653      	mov	r3, sl
 800b958:	a949      	add	r1, sp, #292	@ 0x124
 800b95a:	f8cd 9000 	str.w	r9, [sp]
 800b95e:	a819      	add	r0, sp, #100	@ 0x64
 800b960:	f003 fece 	bl	800f700 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b964:	4622      	mov	r2, r4
 800b966:	4653      	mov	r3, sl
 800b968:	a949      	add	r1, sp, #292	@ 0x124
 800b96a:	f8cd 8000 	str.w	r8, [sp]
 800b96e:	a829      	add	r0, sp, #164	@ 0xa4
 800b970:	f003 fec6 	bl	800f700 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b974:	4643      	mov	r3, r8
 800b976:	4622      	mov	r2, r4
 800b978:	a949      	add	r1, sp, #292	@ 0x124
 800b97a:	f8cd 9000 	str.w	r9, [sp]
 800b97e:	a839      	add	r0, sp, #228	@ 0xe4
 800b980:	f003 febe 	bl	800f700 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b984:	42af      	cmp	r7, r5
 800b986:	bfb5      	itete	lt
 800b988:	2300      	movlt	r3, #0
 800b98a:	2301      	movge	r3, #1
 800b98c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800b98e:	930e      	strge	r3, [sp, #56]	@ 0x38
 800b990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b992:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b996:	af12      	add	r7, sp, #72	@ 0x48
 800b998:	bfb9      	ittee	lt
 800b99a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800b99c:	ac19      	addlt	r4, sp, #100	@ 0x64
 800b99e:	ad19      	addge	r5, sp, #100	@ 0x64
 800b9a0:	ac29      	addge	r4, sp, #164	@ 0xa4
 800b9a2:	e887 0003 	stmia.w	r7, {r0, r1}
 800b9a6:	b928      	cbnz	r0, 800b9b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800b9a8:	4b80      	ldr	r3, [pc, #512]	@ (800bbac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	6803      	ldr	r3, [r0, #0]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b0:	4798      	blx	r3
 800b9b2:	6038      	str	r0, [r7, #0]
 800b9b4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b9b6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b9ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b9be:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b9c2:	6963      	ldr	r3, [r4, #20]
 800b9c4:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800b9c6:	440b      	add	r3, r1
 800b9c8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b9cc:	4408      	add	r0, r1
 800b9ce:	b200      	sxth	r0, r0
 800b9d0:	4283      	cmp	r3, r0
 800b9d2:	900d      	str	r0, [sp, #52]	@ 0x34
 800b9d4:	f280 80dd 	bge.w	800bb92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800b9d8:	428b      	cmp	r3, r1
 800b9da:	da08      	bge.n	800b9ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b9dc:	2a00      	cmp	r2, #0
 800b9de:	dd06      	ble.n	800b9ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b9e0:	1acb      	subs	r3, r1, r3
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	f2c0 80e4 	blt.w	800bbb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f300 80e2 	bgt.w	800bbb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800b9ee:	6967      	ldr	r7, [r4, #20]
 800b9f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9f2:	443b      	add	r3, r7
 800b9f4:	461f      	mov	r7, r3
 800b9f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9f8:	1bdf      	subs	r7, r3, r7
 800b9fa:	4297      	cmp	r7, r2
 800b9fc:	bfa8      	it	ge
 800b9fe:	4617      	movge	r7, r2
 800ba00:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800ba04:	2f00      	cmp	r7, #0
 800ba06:	f340 8166 	ble.w	800bcd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800ba0a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ba0c:	6829      	ldr	r1, [r5, #0]
 800ba0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ba12:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ba16:	6820      	ldr	r0, [r4, #0]
 800ba18:	4411      	add	r1, r2
 800ba1a:	4299      	cmp	r1, r3
 800ba1c:	dd1a      	ble.n	800ba54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800ba1e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ba22:	440b      	add	r3, r1
 800ba24:	4402      	add	r2, r0
 800ba26:	b21b      	sxth	r3, r3
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	dc13      	bgt.n	800ba54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800ba2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba2e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	9206      	str	r2, [sp, #24]
 800ba34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba36:	9205      	str	r2, [sp, #20]
 800ba38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba3a:	9500      	str	r5, [sp, #0]
 800ba3c:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ba40:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800ba42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba44:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800ba48:	a912      	add	r1, sp, #72	@ 0x48
 800ba4a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800ba4e:	aa49      	add	r2, sp, #292	@ 0x124
 800ba50:	4623      	mov	r3, r4
 800ba52:	47c8      	blx	r9
 800ba54:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba58:	441a      	add	r2, r3
 800ba5a:	6963      	ldr	r3, [r4, #20]
 800ba5c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800ba60:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800ba64:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800ba68:	68a1      	ldr	r1, [r4, #8]
 800ba6a:	ed94 6a08 	vldr	s12, [r4, #32]
 800ba6e:	6022      	str	r2, [r4, #0]
 800ba70:	3301      	adds	r3, #1
 800ba72:	6163      	str	r3, [r4, #20]
 800ba74:	69a3      	ldr	r3, [r4, #24]
 800ba76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800ba80:	61a3      	str	r3, [r4, #24]
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800ba88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba8c:	edd4 6a07 	vldr	s13, [r4, #28]
 800ba90:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800ba94:	440b      	add	r3, r1
 800ba96:	68e1      	ldr	r1, [r4, #12]
 800ba98:	6123      	str	r3, [r4, #16]
 800ba9a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ba9e:	428b      	cmp	r3, r1
 800baa0:	edc4 6a07 	vstr	s13, [r4, #28]
 800baa4:	db15      	blt.n	800bad2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800baa6:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800baaa:	ee76 6a26 	vadd.f32	s13, s12, s13
 800baae:	3201      	adds	r2, #1
 800bab0:	edc4 6a07 	vstr	s13, [r4, #28]
 800bab4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800bab8:	6022      	str	r2, [r4, #0]
 800baba:	ee36 7a87 	vadd.f32	s14, s13, s14
 800babe:	1a5b      	subs	r3, r3, r1
 800bac0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800bac4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800bac8:	6123      	str	r3, [r4, #16]
 800baca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bace:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800bad2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bad6:	441a      	add	r2, r3
 800bad8:	696b      	ldr	r3, [r5, #20]
 800bada:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800bade:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800bae2:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800bae6:	68a9      	ldr	r1, [r5, #8]
 800bae8:	ed95 6a08 	vldr	s12, [r5, #32]
 800baec:	602a      	str	r2, [r5, #0]
 800baee:	3301      	adds	r3, #1
 800baf0:	616b      	str	r3, [r5, #20]
 800baf2:	69ab      	ldr	r3, [r5, #24]
 800baf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800baf8:	3b01      	subs	r3, #1
 800bafa:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800bafe:	61ab      	str	r3, [r5, #24]
 800bb00:	692b      	ldr	r3, [r5, #16]
 800bb02:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800bb06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb0a:	edd5 6a07 	vldr	s13, [r5, #28]
 800bb0e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bb12:	440b      	add	r3, r1
 800bb14:	68e9      	ldr	r1, [r5, #12]
 800bb16:	612b      	str	r3, [r5, #16]
 800bb18:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bb1c:	428b      	cmp	r3, r1
 800bb1e:	edc5 6a07 	vstr	s13, [r5, #28]
 800bb22:	db15      	blt.n	800bb50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800bb24:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800bb28:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bb2c:	3201      	adds	r2, #1
 800bb2e:	edc5 6a07 	vstr	s13, [r5, #28]
 800bb32:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800bb36:	602a      	str	r2, [r5, #0]
 800bb38:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bb3c:	1a5b      	subs	r3, r3, r1
 800bb3e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800bb42:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800bb46:	612b      	str	r3, [r5, #16]
 800bb48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb4c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bb50:	3f01      	subs	r7, #1
 800bb52:	e757      	b.n	800ba04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800bb54:	4299      	cmp	r1, r3
 800bb56:	dc13      	bgt.n	800bb80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	da14      	bge.n	800bb86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800bb5c:	2502      	movs	r5, #2
 800bb5e:	2703      	movs	r7, #3
 800bb60:	46a9      	mov	r9, r5
 800bb62:	f04f 0800 	mov.w	r8, #0
 800bb66:	f04f 0a01 	mov.w	sl, #1
 800bb6a:	e6ef      	b.n	800b94c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800bb6c:	2501      	movs	r5, #1
 800bb6e:	2700      	movs	r7, #0
 800bb70:	46a9      	mov	r9, r5
 800bb72:	46b8      	mov	r8, r7
 800bb74:	f04f 0a02 	mov.w	sl, #2
 800bb78:	e6e8      	b.n	800b94c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800bb7a:	2501      	movs	r5, #1
 800bb7c:	2702      	movs	r7, #2
 800bb7e:	e6e1      	b.n	800b944 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800bb80:	2500      	movs	r5, #0
 800bb82:	2701      	movs	r7, #1
 800bb84:	e7f4      	b.n	800bb70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800bb86:	2702      	movs	r7, #2
 800bb88:	2503      	movs	r5, #3
 800bb8a:	f04f 0900 	mov.w	r9, #0
 800bb8e:	46b8      	mov	r8, r7
 800bb90:	e7e9      	b.n	800bb66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800bb92:	4613      	mov	r3, r2
 800bb94:	e728      	b.n	800b9e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800bb96:	bf00      	nop
 800bb98:	20015434 	.word	0x20015434
 800bb9c:	fffd8f01 	.word	0xfffd8f01
 800bba0:	00027100 	.word	0x00027100
 800bba4:	0004e1ff 	.word	0x0004e1ff
 800bba8:	0004e1fe 	.word	0x0004e1fe
 800bbac:	2001543c 	.word	0x2001543c
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800bbb4:	9111      	str	r1, [sp, #68]	@ 0x44
 800bbb6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800bbba:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800bbbe:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800bbc0:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800bbc4:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800bbc8:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800bbcc:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800bbd0:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800bbd4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bbd8:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800bbdc:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800bbe0:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	469c      	mov	ip, r3
 800bbe8:	f04f 0900 	mov.w	r9, #0
 800bbec:	f1bc 0f00 	cmp.w	ip, #0
 800bbf0:	d147      	bne.n	800bc82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800bbf2:	eb03 0c07 	add.w	ip, r3, r7
 800bbf6:	1ad7      	subs	r7, r2, r3
 800bbf8:	f1b9 0f00 	cmp.w	r9, #0
 800bbfc:	d009      	beq.n	800bc12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800bbfe:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800bc02:	9029      	str	r0, [sp, #164]	@ 0xa4
 800bc04:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800bc08:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800bc0c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800bc10:	912d      	str	r1, [sp, #180]	@ 0xb4
 800bc12:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bc14:	9111      	str	r1, [sp, #68]	@ 0x44
 800bc16:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800bc1a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800bc1e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800bc22:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800bc26:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800bc2a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800bc2e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800bc32:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800bc36:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800bc3a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800bc3e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800bc42:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800bc46:	f04f 0800 	mov.w	r8, #0
 800bc4a:	f1be 0f00 	cmp.w	lr, #0
 800bc4e:	d031      	beq.n	800bcb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800bc50:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bc52:	4431      	add	r1, r6
 800bc54:	4549      	cmp	r1, r9
 800bc56:	4450      	add	r0, sl
 800bc58:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bc5c:	ee37 7a04 	vadd.f32	s14, s14, s8
 800bc60:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bc64:	db08      	blt.n	800bc78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800bc66:	ee77 7a85 	vadd.f32	s15, s15, s10
 800bc6a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bc6e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bc72:	3001      	adds	r0, #1
 800bc74:	eba1 0109 	sub.w	r1, r1, r9
 800bc78:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bc7c:	f04f 0801 	mov.w	r8, #1
 800bc80:	e7e3      	b.n	800bc4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800bc82:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bc84:	4431      	add	r1, r6
 800bc86:	4541      	cmp	r1, r8
 800bc88:	4450      	add	r0, sl
 800bc8a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bc8e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bc92:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800bc96:	db08      	blt.n	800bcaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800bc98:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bc9c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bca0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bca4:	3001      	adds	r0, #1
 800bca6:	eba1 0108 	sub.w	r1, r1, r8
 800bcaa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bcae:	f04f 0901 	mov.w	r9, #1
 800bcb2:	e79b      	b.n	800bbec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800bcb4:	449c      	add	ip, r3
 800bcb6:	1aff      	subs	r7, r7, r3
 800bcb8:	f1b8 0f00 	cmp.w	r8, #0
 800bcbc:	d009      	beq.n	800bcd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800bcbe:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800bcc2:	9019      	str	r0, [sp, #100]	@ 0x64
 800bcc4:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800bcc8:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800bccc:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800bcd0:	911d      	str	r1, [sp, #116]	@ 0x74
 800bcd2:	1ad2      	subs	r2, r2, r3
 800bcd4:	e68b      	b.n	800b9ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800bcd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcd8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 80d1 	beq.w	800be82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800bce0:	ad19      	add	r5, sp, #100	@ 0x64
 800bce2:	ac39      	add	r4, sp, #228	@ 0xe4
 800bce4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800bce6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800bcea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bcee:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bcf2:	6963      	ldr	r3, [r4, #20]
 800bcf4:	440b      	add	r3, r1
 800bcf6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800bcfa:	4408      	add	r0, r1
 800bcfc:	b200      	sxth	r0, r0
 800bcfe:	4283      	cmp	r3, r0
 800bd00:	900d      	str	r0, [sp, #52]	@ 0x34
 800bd02:	f280 80c1 	bge.w	800be88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800bd06:	428b      	cmp	r3, r1
 800bd08:	da08      	bge.n	800bd1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bd0a:	2a00      	cmp	r2, #0
 800bd0c:	dd06      	ble.n	800bd1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bd0e:	1acb      	subs	r3, r1, r3
 800bd10:	429a      	cmp	r2, r3
 800bd12:	f2c0 80bb 	blt.w	800be8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f300 80b9 	bgt.w	800be8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800bd1c:	6967      	ldr	r7, [r4, #20]
 800bd1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd20:	443b      	add	r3, r7
 800bd22:	461f      	mov	r7, r3
 800bd24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd26:	1bdf      	subs	r7, r3, r7
 800bd28:	4297      	cmp	r7, r2
 800bd2a:	bfa8      	it	ge
 800bd2c:	4617      	movge	r7, r2
 800bd2e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800bd32:	2f00      	cmp	r7, #0
 800bd34:	f340 813c 	ble.w	800bfb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800bd38:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800bd3a:	6829      	ldr	r1, [r5, #0]
 800bd3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bd40:	f9bb 3000 	ldrsh.w	r3, [fp]
 800bd44:	6820      	ldr	r0, [r4, #0]
 800bd46:	4411      	add	r1, r2
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	dd1a      	ble.n	800bd82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800bd4c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800bd50:	440b      	add	r3, r1
 800bd52:	4402      	add	r2, r0
 800bd54:	b21b      	sxth	r3, r3
 800bd56:	429a      	cmp	r2, r3
 800bd58:	dc13      	bgt.n	800bd82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800bd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	9206      	str	r2, [sp, #24]
 800bd62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd64:	9205      	str	r2, [sp, #20]
 800bd66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd68:	9500      	str	r5, [sp, #0]
 800bd6a:	e9cd b203 	strd	fp, r2, [sp, #12]
 800bd6e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800bd70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd72:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800bd76:	a912      	add	r1, sp, #72	@ 0x48
 800bd78:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800bd7c:	aa49      	add	r2, sp, #292	@ 0x124
 800bd7e:	4623      	mov	r3, r4
 800bd80:	47c8      	blx	r9
 800bd82:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd86:	441a      	add	r2, r3
 800bd88:	6963      	ldr	r3, [r4, #20]
 800bd8a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800bd8e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800bd92:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800bd96:	68a1      	ldr	r1, [r4, #8]
 800bd98:	ed94 6a08 	vldr	s12, [r4, #32]
 800bd9c:	6022      	str	r2, [r4, #0]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	6163      	str	r3, [r4, #20]
 800bda2:	69a3      	ldr	r3, [r4, #24]
 800bda4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800bdae:	61a3      	str	r3, [r4, #24]
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800bdb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdba:	edd4 6a07 	vldr	s13, [r4, #28]
 800bdbe:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800bdc2:	440b      	add	r3, r1
 800bdc4:	68e1      	ldr	r1, [r4, #12]
 800bdc6:	6123      	str	r3, [r4, #16]
 800bdc8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bdcc:	428b      	cmp	r3, r1
 800bdce:	edc4 6a07 	vstr	s13, [r4, #28]
 800bdd2:	db15      	blt.n	800be00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800bdd4:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800bdd8:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bddc:	3201      	adds	r2, #1
 800bdde:	edc4 6a07 	vstr	s13, [r4, #28]
 800bde2:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800bde6:	6022      	str	r2, [r4, #0]
 800bde8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bdec:	1a5b      	subs	r3, r3, r1
 800bdee:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800bdf2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800bdf6:	6123      	str	r3, [r4, #16]
 800bdf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdfc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800be00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be04:	441a      	add	r2, r3
 800be06:	696b      	ldr	r3, [r5, #20]
 800be08:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800be0c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800be10:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800be14:	68a9      	ldr	r1, [r5, #8]
 800be16:	ed95 6a08 	vldr	s12, [r5, #32]
 800be1a:	602a      	str	r2, [r5, #0]
 800be1c:	3301      	adds	r3, #1
 800be1e:	616b      	str	r3, [r5, #20]
 800be20:	69ab      	ldr	r3, [r5, #24]
 800be22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be26:	3b01      	subs	r3, #1
 800be28:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800be2c:	61ab      	str	r3, [r5, #24]
 800be2e:	692b      	ldr	r3, [r5, #16]
 800be30:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800be34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be38:	edd5 6a07 	vldr	s13, [r5, #28]
 800be3c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800be40:	440b      	add	r3, r1
 800be42:	68e9      	ldr	r1, [r5, #12]
 800be44:	612b      	str	r3, [r5, #16]
 800be46:	ee76 6a86 	vadd.f32	s13, s13, s12
 800be4a:	428b      	cmp	r3, r1
 800be4c:	edc5 6a07 	vstr	s13, [r5, #28]
 800be50:	db15      	blt.n	800be7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800be52:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800be56:	ee76 6a26 	vadd.f32	s13, s12, s13
 800be5a:	3201      	adds	r2, #1
 800be5c:	edc5 6a07 	vstr	s13, [r5, #28]
 800be60:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800be64:	602a      	str	r2, [r5, #0]
 800be66:	ee36 7a87 	vadd.f32	s14, s13, s14
 800be6a:	1a5b      	subs	r3, r3, r1
 800be6c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800be70:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800be74:	612b      	str	r3, [r5, #16]
 800be76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be7a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800be7e:	3f01      	subs	r7, #1
 800be80:	e757      	b.n	800bd32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800be82:	ad39      	add	r5, sp, #228	@ 0xe4
 800be84:	ac19      	add	r4, sp, #100	@ 0x64
 800be86:	e72d      	b.n	800bce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800be88:	4613      	mov	r3, r2
 800be8a:	e744      	b.n	800bd16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800be8c:	4613      	mov	r3, r2
 800be8e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800be92:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800be94:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800be98:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800be9c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800bea0:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800bea4:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800bea8:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800beac:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800beb0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800beb2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800beb6:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800beba:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800bebe:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800bec2:	960e      	str	r6, [sp, #56]	@ 0x38
 800bec4:	469e      	mov	lr, r3
 800bec6:	461f      	mov	r7, r3
 800bec8:	f04f 0900 	mov.w	r9, #0
 800becc:	2f00      	cmp	r7, #0
 800bece:	d146      	bne.n	800bf5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800bed0:	449c      	add	ip, r3
 800bed2:	1ad7      	subs	r7, r2, r3
 800bed4:	f1b9 0f00 	cmp.w	r9, #0
 800bed8:	d009      	beq.n	800beee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800beda:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800bede:	9039      	str	r0, [sp, #228]	@ 0xe4
 800bee0:	913d      	str	r1, [sp, #244]	@ 0xf4
 800bee2:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800bee6:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800beea:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800beee:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bef0:	910e      	str	r1, [sp, #56]	@ 0x38
 800bef2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800bef6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800befa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800befe:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800bf02:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800bf06:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800bf0a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800bf0e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800bf12:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800bf16:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800bf1a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800bf1e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800bf22:	f04f 0800 	mov.w	r8, #0
 800bf26:	f1be 0f00 	cmp.w	lr, #0
 800bf2a:	d030      	beq.n	800bf8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800bf2c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bf2e:	4431      	add	r1, r6
 800bf30:	4549      	cmp	r1, r9
 800bf32:	4450      	add	r0, sl
 800bf34:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bf38:	ee37 7a04 	vadd.f32	s14, s14, s8
 800bf3c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bf40:	db08      	blt.n	800bf54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800bf42:	ee77 7a85 	vadd.f32	s15, s15, s10
 800bf46:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bf4a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bf4e:	3001      	adds	r0, #1
 800bf50:	eba1 0109 	sub.w	r1, r1, r9
 800bf54:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bf58:	f04f 0801 	mov.w	r8, #1
 800bf5c:	e7e3      	b.n	800bf26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800bf5e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bf60:	4431      	add	r1, r6
 800bf62:	4541      	cmp	r1, r8
 800bf64:	4450      	add	r0, sl
 800bf66:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bf6a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bf6e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800bf72:	db08      	blt.n	800bf86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800bf74:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bf78:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bf7c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bf80:	3001      	adds	r0, #1
 800bf82:	eba1 0108 	sub.w	r1, r1, r8
 800bf86:	3f01      	subs	r7, #1
 800bf88:	f04f 0901 	mov.w	r9, #1
 800bf8c:	e79e      	b.n	800becc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800bf8e:	449c      	add	ip, r3
 800bf90:	1aff      	subs	r7, r7, r3
 800bf92:	f1b8 0f00 	cmp.w	r8, #0
 800bf96:	d009      	beq.n	800bfac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800bf98:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800bf9c:	9019      	str	r0, [sp, #100]	@ 0x64
 800bf9e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800bfa2:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800bfa6:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800bfaa:	911d      	str	r1, [sp, #116]	@ 0x74
 800bfac:	1ad2      	subs	r2, r2, r3
 800bfae:	e6b5      	b.n	800bd1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bfb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	b923      	cbnz	r3, 800bfc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bfb6:	4b04      	ldr	r3, [pc, #16]	@ (800bfc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800bfb8:	6818      	ldr	r0, [r3, #0]
 800bfba:	6803      	ldr	r3, [r0, #0]
 800bfbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfbe:	4798      	blx	r3
 800bfc0:	b05b      	add	sp, #364	@ 0x16c
 800bfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc6:	bf00      	nop
 800bfc8:	2001543c 	.word	0x2001543c

0800bfcc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800bfcc:	b570      	push	{r4, r5, r6, lr}
 800bfce:	4604      	mov	r4, r0
 800bfd0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800bfd4:	9805      	ldr	r0, [sp, #20]
 800bfd6:	6061      	str	r1, [r4, #4]
 800bfd8:	2500      	movs	r5, #0
 800bfda:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800bfde:	8263      	strh	r3, [r4, #18]
 800bfe0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800bfe4:	8025      	strh	r5, [r4, #0]
 800bfe6:	7221      	strb	r1, [r4, #8]
 800bfe8:	7266      	strb	r6, [r4, #9]
 800bfea:	60e0      	str	r0, [r4, #12]
 800bfec:	8222      	strh	r2, [r4, #16]
 800bfee:	82a3      	strh	r3, [r4, #20]
 800bff0:	82e5      	strh	r5, [r4, #22]
 800bff2:	8325      	strh	r5, [r4, #24]
 800bff4:	8365      	strh	r5, [r4, #26]
 800bff6:	83a5      	strh	r5, [r4, #28]
 800bff8:	83e5      	strh	r5, [r4, #30]
 800bffa:	8425      	strh	r5, [r4, #32]
 800bffc:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800c000:	b32e      	cbz	r6, 800c04e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c002:	6803      	ldr	r3, [r0, #0]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	4798      	blx	r3
 800c008:	4606      	mov	r6, r0
 800c00a:	b300      	cbz	r0, 800c04e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c00c:	68e0      	ldr	r0, [r4, #12]
 800c00e:	6803      	ldr	r3, [r0, #0]
 800c010:	4631      	mov	r1, r6
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	4798      	blx	r3
 800c016:	4605      	mov	r5, r0
 800c018:	b1c8      	cbz	r0, 800c04e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c01a:	7b43      	ldrb	r3, [r0, #13]
 800c01c:	7a82      	ldrb	r2, [r0, #10]
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c024:	4313      	orrs	r3, r2
 800c026:	8423      	strh	r3, [r4, #32]
 800c028:	7a63      	ldrb	r3, [r4, #9]
 800c02a:	2b06      	cmp	r3, #6
 800c02c:	d10f      	bne.n	800c04e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c02e:	68e0      	ldr	r0, [r4, #12]
 800c030:	6803      	ldr	r3, [r0, #0]
 800c032:	462a      	mov	r2, r5
 800c034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c036:	4631      	mov	r1, r6
 800c038:	4798      	blx	r3
 800c03a:	7b6b      	ldrb	r3, [r5, #13]
 800c03c:	005b      	lsls	r3, r3, #1
 800c03e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c042:	7aab      	ldrb	r3, [r5, #10]
 800c044:	4313      	orrs	r3, r2
 800c046:	4418      	add	r0, r3
 800c048:	8c23      	ldrh	r3, [r4, #32]
 800c04a:	4418      	add	r0, r3
 800c04c:	8420      	strh	r0, [r4, #32]
 800c04e:	4620      	mov	r0, r4
 800c050:	bd70      	pop	{r4, r5, r6, pc}

0800c052 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800c052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c056:	2400      	movs	r4, #0
 800c058:	b085      	sub	sp, #20
 800c05a:	4681      	mov	r9, r0
 800c05c:	4688      	mov	r8, r1
 800c05e:	4692      	mov	sl, r2
 800c060:	469b      	mov	fp, r3
 800c062:	4627      	mov	r7, r4
 800c064:	4625      	mov	r5, r4
 800c066:	4626      	mov	r6, r4
 800c068:	4554      	cmp	r4, sl
 800c06a:	da2a      	bge.n	800c0c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c06c:	2300      	movs	r3, #0
 800c06e:	9303      	str	r3, [sp, #12]
 800c070:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c074:	429d      	cmp	r5, r3
 800c076:	d004      	beq.n	800c082 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800c078:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c07c:	429d      	cmp	r5, r3
 800c07e:	bf18      	it	ne
 800c080:	462f      	movne	r7, r5
 800c082:	ab03      	add	r3, sp, #12
 800c084:	4642      	mov	r2, r8
 800c086:	4659      	mov	r1, fp
 800c088:	4648      	mov	r0, r9
 800c08a:	f003 f81f 	bl	800f0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c08e:	4605      	mov	r5, r0
 800c090:	b1b8      	cbz	r0, 800c0c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c092:	280a      	cmp	r0, #10
 800c094:	d015      	beq.n	800c0c2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c096:	9a03      	ldr	r2, [sp, #12]
 800c098:	b18a      	cbz	r2, 800c0be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800c09a:	7b50      	ldrb	r0, [r2, #13]
 800c09c:	7a93      	ldrb	r3, [r2, #10]
 800c09e:	8895      	ldrh	r5, [r2, #4]
 800c0a0:	0040      	lsls	r0, r0, #1
 800c0a2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800c0a6:	4303      	orrs	r3, r0
 800c0a8:	9301      	str	r3, [sp, #4]
 800c0aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0b2:	4640      	mov	r0, r8
 800c0b4:	4798      	blx	r3
 800c0b6:	9b01      	ldr	r3, [sp, #4]
 800c0b8:	4418      	add	r0, r3
 800c0ba:	4406      	add	r6, r0
 800c0bc:	b2b6      	uxth	r6, r6
 800c0be:	3401      	adds	r4, #1
 800c0c0:	e7d2      	b.n	800c068 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	b005      	add	sp, #20
 800c0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0ca <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800c0ca:	2a02      	cmp	r2, #2
 800c0cc:	b530      	push	{r4, r5, lr}
 800c0ce:	d011      	beq.n	800c0f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800c0d0:	2a03      	cmp	r2, #3
 800c0d2:	d01c      	beq.n	800c10e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800c0d4:	2a01      	cmp	r2, #1
 800c0d6:	d10c      	bne.n	800c0f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800c0d8:	888b      	ldrh	r3, [r1, #4]
 800c0da:	8801      	ldrh	r1, [r0, #0]
 800c0dc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c0e0:	8844      	ldrh	r4, [r0, #2]
 800c0e2:	8004      	strh	r4, [r0, #0]
 800c0e4:	1a5b      	subs	r3, r3, r1
 800c0e6:	1a9b      	subs	r3, r3, r2
 800c0e8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c0ec:	8043      	strh	r3, [r0, #2]
 800c0ee:	8081      	strh	r1, [r0, #4]
 800c0f0:	80c2      	strh	r2, [r0, #6]
 800c0f2:	bd30      	pop	{r4, r5, pc}
 800c0f4:	88cb      	ldrh	r3, [r1, #6]
 800c0f6:	8842      	ldrh	r2, [r0, #2]
 800c0f8:	1a9b      	subs	r3, r3, r2
 800c0fa:	88c2      	ldrh	r2, [r0, #6]
 800c0fc:	1a9b      	subs	r3, r3, r2
 800c0fe:	888a      	ldrh	r2, [r1, #4]
 800c100:	8801      	ldrh	r1, [r0, #0]
 800c102:	8043      	strh	r3, [r0, #2]
 800c104:	1a52      	subs	r2, r2, r1
 800c106:	8881      	ldrh	r1, [r0, #4]
 800c108:	1a52      	subs	r2, r2, r1
 800c10a:	8002      	strh	r2, [r0, #0]
 800c10c:	e7f1      	b.n	800c0f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800c10e:	88cb      	ldrh	r3, [r1, #6]
 800c110:	8841      	ldrh	r1, [r0, #2]
 800c112:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800c116:	f9b0 5000 	ldrsh.w	r5, [r0]
 800c11a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c11e:	8045      	strh	r5, [r0, #2]
 800c120:	1a5b      	subs	r3, r3, r1
 800c122:	1a9b      	subs	r3, r3, r2
 800c124:	8003      	strh	r3, [r0, #0]
 800c126:	8082      	strh	r2, [r0, #4]
 800c128:	80c4      	strh	r4, [r0, #6]
 800c12a:	e7e2      	b.n	800c0f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800c12c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c130:	b09f      	sub	sp, #124	@ 0x7c
 800c132:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c134:	9312      	str	r3, [sp, #72]	@ 0x48
 800c136:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c138:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c13a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800c13c:	8812      	ldrh	r2, [r2, #0]
 800c13e:	889b      	ldrh	r3, [r3, #4]
 800c140:	900e      	str	r0, [sp, #56]	@ 0x38
 800c142:	4413      	add	r3, r2
 800c144:	6828      	ldr	r0, [r5, #0]
 800c146:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c148:	b21b      	sxth	r3, r3
 800c14a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c14c:	6803      	ldr	r3, [r0, #0]
 800c14e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800c152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c154:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800c158:	4798      	blx	r3
 800c15a:	682b      	ldr	r3, [r5, #0]
 800c15c:	9013      	str	r0, [sp, #76]	@ 0x4c
 800c15e:	7b1a      	ldrb	r2, [r3, #12]
 800c160:	7adb      	ldrb	r3, [r3, #11]
 800c162:	9215      	str	r2, [sp, #84]	@ 0x54
 800c164:	9316      	str	r3, [sp, #88]	@ 0x58
 800c166:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	d067      	beq.n	800c23e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800c16e:	7c2b      	ldrb	r3, [r5, #16]
 800c170:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800c172:	2b06      	cmp	r3, #6
 800c174:	bf14      	ite	ne
 800c176:	2301      	movne	r3, #1
 800c178:	2302      	moveq	r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	f04f 0900 	mov.w	r9, #0
 800c180:	9310      	str	r3, [sp, #64]	@ 0x40
 800c182:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800c186:	464c      	mov	r4, r9
 800c188:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800c18c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c18e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c190:	4293      	cmp	r3, r2
 800c192:	f280 808b 	bge.w	800c2ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800c196:	2300      	movs	r3, #0
 800c198:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800c19c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800c1a0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c1a4:	429c      	cmp	r4, r3
 800c1a6:	d006      	beq.n	800c1b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800c1a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1aa:	f242 020b 	movw	r2, #8203	@ 0x200b
 800c1ae:	4294      	cmp	r4, r2
 800c1b0:	bf18      	it	ne
 800c1b2:	4623      	movne	r3, r4
 800c1b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1b8:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800c1ba:	682a      	ldr	r2, [r5, #0]
 800c1bc:	428b      	cmp	r3, r1
 800c1be:	db40      	blt.n	800c242 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800c1c0:	6813      	ldr	r3, [r2, #0]
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	4798      	blx	r3
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	6828      	ldr	r0, [r5, #0]
 800c1cc:	6803      	ldr	r3, [r0, #0]
 800c1ce:	aa1d      	add	r2, sp, #116	@ 0x74
 800c1d0:	689f      	ldr	r7, [r3, #8]
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800c1d8:	47b8      	blx	r7
 800c1da:	901c      	str	r0, [sp, #112]	@ 0x70
 800c1dc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c1e0:	429c      	cmp	r4, r3
 800c1e2:	f000 80ea 	beq.w	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c1e6:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c1ea:	429c      	cmp	r4, r3
 800c1ec:	f000 80e5 	beq.w	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c1f0:	2c00      	cmp	r4, #0
 800c1f2:	f000 810c 	beq.w	800c40e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c1f6:	2c0a      	cmp	r4, #10
 800c1f8:	d05e      	beq.n	800c2b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800c1fa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c1fc:	b36a      	cbz	r2, 800c25a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800c1fe:	8894      	ldrh	r4, [r2, #4]
 800c200:	f1bb 0f00 	cmp.w	fp, #0
 800c204:	d03a      	beq.n	800c27c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800c206:	f892 900d 	ldrb.w	r9, [r2, #13]
 800c20a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800c20e:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800c212:	f892 900a 	ldrb.w	r9, [r2, #10]
 800c216:	f1bb 0f01 	cmp.w	fp, #1
 800c21a:	ea49 0903 	orr.w	r9, r9, r3
 800c21e:	d133      	bne.n	800c288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800c220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c222:	eba6 0609 	sub.w	r6, r6, r9
 800c226:	2b00      	cmp	r3, #0
 800c228:	d14d      	bne.n	800c2c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800c22a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c22c:	eb09 0306 	add.w	r3, r9, r6
 800c230:	4413      	add	r3, r2
 800c232:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c234:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c238:	4293      	cmp	r3, r2
 800c23a:	da4e      	bge.n	800c2da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800c23c:	e036      	b.n	800c2ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800c23e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c240:	e79c      	b.n	800c17c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800c242:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800c246:	9301      	str	r3, [sp, #4]
 800c248:	ab1d      	add	r3, sp, #116	@ 0x74
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	4659      	mov	r1, fp
 800c24e:	ab1c      	add	r3, sp, #112	@ 0x70
 800c250:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800c252:	f002 ff84 	bl	800f15e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800c256:	4604      	mov	r4, r0
 800c258:	e7c0      	b.n	800c1dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800c25a:	6828      	ldr	r0, [r5, #0]
 800c25c:	6803      	ldr	r3, [r0, #0]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	4798      	blx	r3
 800c262:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c266:	4298      	cmp	r0, r3
 800c268:	f000 80a7 	beq.w	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c26c:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c270:	4298      	cmp	r0, r3
 800c272:	f000 80a2 	beq.w	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c276:	f1bb 0f00 	cmp.w	fp, #0
 800c27a:	d100      	bne.n	800c27e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800c27c:	444e      	add	r6, r9
 800c27e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c280:	2a00      	cmp	r2, #0
 800c282:	d1c0      	bne.n	800c206 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800c284:	4691      	mov	r9, r2
 800c286:	e098      	b.n	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f000 80c1 	beq.w	800c412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800c290:	f1bb 0f00 	cmp.w	fp, #0
 800c294:	d117      	bne.n	800c2c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800c296:	6828      	ldr	r0, [r5, #0]
 800c298:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c29a:	6803      	ldr	r3, [r0, #0]
 800c29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c29e:	4798      	blx	r3
 800c2a0:	4406      	add	r6, r0
 800c2a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c2a6:	1af3      	subs	r3, r6, r3
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	dd16      	ble.n	800c2da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800c2ac:	2c00      	cmp	r4, #0
 800c2ae:	f000 80ae 	beq.w	800c40e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c2b2:	2c0a      	cmp	r4, #10
 800c2b4:	f040 809c 	bne.w	800c3f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800c2b8:	240a      	movs	r4, #10
 800c2ba:	fab4 f084 	clz	r0, r4
 800c2be:	0940      	lsrs	r0, r0, #5
 800c2c0:	b01f      	add	sp, #124	@ 0x7c
 800c2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c6:	6828      	ldr	r0, [r5, #0]
 800c2c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c2ca:	6803      	ldr	r3, [r0, #0]
 800c2cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2ce:	4798      	blx	r3
 800c2d0:	f1bb 0f01 	cmp.w	fp, #1
 800c2d4:	eba6 0600 	sub.w	r6, r6, r0
 800c2d8:	d0a7      	beq.n	800c22a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800c2da:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800c2dc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c2de:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800c2e2:	f9b3 8000 	ldrsh.w	r8, [r3]
 800c2e6:	7b43      	ldrb	r3, [r0, #13]
 800c2e8:	015b      	lsls	r3, r3, #5
 800c2ea:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c2ee:	7983      	ldrb	r3, [r0, #6]
 800c2f0:	4431      	add	r1, r6
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	440b      	add	r3, r1
 800c2f6:	4543      	cmp	r3, r8
 800c2f8:	db5f      	blt.n	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c2fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c2fc:	4299      	cmp	r1, r3
 800c2fe:	da5c      	bge.n	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c300:	6828      	ldr	r0, [r5, #0]
 800c302:	6803      	ldr	r3, [r0, #0]
 800c304:	45b0      	cmp	r8, r6
 800c306:	bfc8      	it	gt
 800c308:	eba8 0806 	subgt.w	r8, r8, r6
 800c30c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c30e:	bfcc      	ite	gt
 800c310:	fa1f f888 	uxthgt.w	r8, r8
 800c314:	f04f 0800 	movle.w	r8, #0
 800c318:	4798      	blx	r3
 800c31a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c31c:	7b53      	ldrb	r3, [r2, #13]
 800c31e:	00d9      	lsls	r1, r3, #3
 800c320:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800c324:	7a11      	ldrb	r1, [r2, #8]
 800c326:	4339      	orrs	r1, r7
 800c328:	065f      	lsls	r7, r3, #25
 800c32a:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c32c:	bf44      	itt	mi
 800c32e:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800c332:	b209      	sxthmi	r1, r1
 800c334:	19c7      	adds	r7, r0, r7
 800c336:	1a7f      	subs	r7, r7, r1
 800c338:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800c33a:	b2bf      	uxth	r7, r7
 800c33c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800c340:	fa0f fa87 	sxth.w	sl, r7
 800c344:	4551      	cmp	r1, sl
 800c346:	dd3c      	ble.n	800c3c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800c348:	011b      	lsls	r3, r3, #4
 800c34a:	79d0      	ldrb	r0, [r2, #7]
 800c34c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c350:	4303      	orrs	r3, r0
 800c352:	449a      	add	sl, r3
 800c354:	4551      	cmp	r1, sl
 800c356:	dc30      	bgt.n	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c358:	1bcf      	subs	r7, r1, r7
 800c35a:	b23f      	sxth	r7, r7
 800c35c:	468a      	mov	sl, r1
 800c35e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c360:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c362:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c364:	6828      	ldr	r0, [r5, #0]
 800c366:	2a00      	cmp	r2, #0
 800c368:	d12d      	bne.n	800c3c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800c36a:	9318      	str	r3, [sp, #96]	@ 0x60
 800c36c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c36e:	6819      	ldr	r1, [r3, #0]
 800c370:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800c372:	6801      	ldr	r1, [r0, #0]
 800c374:	9314      	str	r3, [sp, #80]	@ 0x50
 800c376:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c378:	4788      	blx	r1
 800c37a:	79a9      	ldrb	r1, [r5, #6]
 800c37c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c37e:	7ba9      	ldrb	r1, [r5, #14]
 800c380:	910a      	str	r1, [sp, #40]	@ 0x28
 800c382:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800c386:	9109      	str	r1, [sp, #36]	@ 0x24
 800c388:	68a9      	ldr	r1, [r5, #8]
 800c38a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c38c:	9306      	str	r3, [sp, #24]
 800c38e:	b2bf      	uxth	r7, r7
 800c390:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800c394:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c396:	9304      	str	r3, [sp, #16]
 800c398:	44b0      	add	r8, r6
 800c39a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800c39e:	fa0f f388 	sxth.w	r3, r8
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3a8:	9205      	str	r2, [sp, #20]
 800c3aa:	f8cd a004 	str.w	sl, [sp, #4]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c3b6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800c3b8:	47b8      	blx	r7
 800c3ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3bc:	3301      	adds	r3, #1
 800c3be:	930d      	str	r3, [sp, #52]	@ 0x34
 800c3c0:	e6e4      	b.n	800c18c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800c3c2:	2700      	movs	r7, #0
 800c3c4:	e7cb      	b.n	800c35e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800c3c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3c8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c3cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c3ce:	f8dc 1000 	ldr.w	r1, [ip]
 800c3d2:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800c3d6:	79aa      	ldrb	r2, [r5, #6]
 800c3d8:	9203      	str	r2, [sp, #12]
 800c3da:	7baa      	ldrb	r2, [r5, #14]
 800c3dc:	9202      	str	r2, [sp, #8]
 800c3de:	68aa      	ldr	r2, [r5, #8]
 800c3e0:	e9cd 0200 	strd	r0, r2, [sp]
 800c3e4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c3e6:	688f      	ldr	r7, [r1, #8]
 800c3e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3ea:	4660      	mov	r0, ip
 800c3ec:	47b8      	blx	r7
 800c3ee:	e7e4      	b.n	800c3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c3f0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c3f2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c3f4:	3501      	adds	r5, #1
 800c3f6:	429d      	cmp	r5, r3
 800c3f8:	f6bf af5f 	bge.w	800c2ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800c3fc:	4659      	mov	r1, fp
 800c3fe:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800c400:	f7f7 fba6 	bl	8003b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c404:	4604      	mov	r4, r0
 800c406:	b110      	cbz	r0, 800c40e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c408:	280a      	cmp	r0, #10
 800c40a:	d1f2      	bne.n	800c3f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800c40c:	e754      	b.n	800c2b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800c40e:	2400      	movs	r4, #0
 800c410:	e753      	b.n	800c2ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800c412:	f1bb 0f00 	cmp.w	fp, #0
 800c416:	f43f af44 	beq.w	800c2a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800c41a:	e75e      	b.n	800c2da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800c41c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800c41c:	b530      	push	{r4, r5, lr}
 800c41e:	8ac4      	ldrh	r4, [r0, #22]
 800c420:	8b45      	ldrh	r5, [r0, #26]
 800c422:	8343      	strh	r3, [r0, #26]
 800c424:	442c      	add	r4, r5
 800c426:	1ae4      	subs	r4, r4, r3
 800c428:	82c4      	strh	r4, [r0, #22]
 800c42a:	8b83      	ldrh	r3, [r0, #28]
 800c42c:	8b04      	ldrh	r4, [r0, #24]
 800c42e:	4422      	add	r2, r4
 800c430:	440c      	add	r4, r1
 800c432:	1a59      	subs	r1, r3, r1
 800c434:	83c2      	strh	r2, [r0, #30]
 800c436:	8304      	strh	r4, [r0, #24]
 800c438:	8381      	strh	r1, [r0, #28]
 800c43a:	bd30      	pop	{r4, r5, pc}

0800c43c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800c43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c440:	4604      	mov	r4, r0
 800c442:	8a47      	ldrh	r7, [r0, #18]
 800c444:	68c0      	ldr	r0, [r0, #12]
 800c446:	6803      	ldr	r3, [r0, #0]
 800c448:	b085      	sub	sp, #20
 800c44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c44c:	4798      	blx	r3
 800c44e:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800c452:	7a63      	ldrb	r3, [r4, #9]
 800c454:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800c458:	42b7      	cmp	r7, r6
 800c45a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c45e:	bfac      	ite	ge
 800c460:	f04f 0900 	movge.w	r9, #0
 800c464:	f04f 0901 	movlt.w	r9, #1
 800c468:	2b05      	cmp	r3, #5
 800c46a:	d804      	bhi.n	800c476 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800c46c:	e8df f003 	tbb	[pc, r3]
 800c470:	470e0854 	.word	0x470e0854
 800c474:	4c4c      	.short	0x4c4c
 800c476:	2500      	movs	r5, #0
 800c478:	46a9      	mov	r9, r5
 800c47a:	462e      	mov	r6, r5
 800c47c:	462f      	mov	r7, r5
 800c47e:	e00d      	b.n	800c49c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c480:	42b7      	cmp	r7, r6
 800c482:	bfb4      	ite	lt
 800c484:	2600      	movlt	r6, #0
 800c486:	2601      	movge	r6, #1
 800c488:	2500      	movs	r5, #0
 800c48a:	e7f7      	b.n	800c47c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c48c:	42b7      	cmp	r7, r6
 800c48e:	464d      	mov	r5, r9
 800c490:	f04f 0900 	mov.w	r9, #0
 800c494:	bfb4      	ite	lt
 800c496:	2600      	movlt	r6, #0
 800c498:	2601      	movge	r6, #1
 800c49a:	464f      	mov	r7, r9
 800c49c:	f04f 0800 	mov.w	r8, #0
 800c4a0:	f8a4 8016 	strh.w	r8, [r4, #22]
 800c4a4:	f8a4 8018 	strh.w	r8, [r4, #24]
 800c4a8:	f8cd 8004 	str.w	r8, [sp, #4]
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	9303      	str	r3, [sp, #12]
 800c4b0:	8823      	ldrh	r3, [r4, #0]
 800c4b2:	2b20      	cmp	r3, #32
 800c4b4:	d034      	beq.n	800c520 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800c4b6:	f242 010b 	movw	r1, #8203	@ 0x200b
 800c4ba:	1a5a      	subs	r2, r3, r1
 800c4bc:	f1d2 0a00 	rsbs	sl, r2, #0
 800c4c0:	eb4a 0a02 	adc.w	sl, sl, r2
 800c4c4:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d009      	beq.n	800c4e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	9a01      	ldr	r2, [sp, #4]
 800c4d0:	bf18      	it	ne
 800c4d2:	461a      	movne	r2, r3
 800c4d4:	9201      	str	r2, [sp, #4]
 800c4d6:	bf0c      	ite	eq
 800c4d8:	f04f 0a01 	moveq.w	sl, #1
 800c4dc:	f04f 0a00 	movne.w	sl, #0
 800c4e0:	ab03      	add	r3, sp, #12
 800c4e2:	68e2      	ldr	r2, [r4, #12]
 800c4e4:	7a21      	ldrb	r1, [r4, #8]
 800c4e6:	6860      	ldr	r0, [r4, #4]
 800c4e8:	f002 fdf0 	bl	800f0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c4ec:	8020      	strh	r0, [r4, #0]
 800c4ee:	b9d8      	cbnz	r0, 800c528 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800c4f0:	8ba2      	ldrh	r2, [r4, #28]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7ff ff90 	bl	800c41c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c4fc:	e06e      	b.n	800c5dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c4fe:	2500      	movs	r5, #0
 800c500:	46a9      	mov	r9, r5
 800c502:	462e      	mov	r6, r5
 800c504:	2701      	movs	r7, #1
 800c506:	e7c9      	b.n	800c49c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c508:	42b7      	cmp	r7, r6
 800c50a:	f04f 0500 	mov.w	r5, #0
 800c50e:	bfb4      	ite	lt
 800c510:	2700      	movlt	r7, #0
 800c512:	2701      	movge	r7, #1
 800c514:	462e      	mov	r6, r5
 800c516:	e7c1      	b.n	800c49c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c518:	2500      	movs	r5, #0
 800c51a:	46a9      	mov	r9, r5
 800c51c:	2601      	movs	r6, #1
 800c51e:	e7ad      	b.n	800c47c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	f04f 0a01 	mov.w	sl, #1
 800c526:	e7db      	b.n	800c4e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c528:	8b63      	ldrh	r3, [r4, #26]
 800c52a:	280a      	cmp	r0, #10
 800c52c:	f103 0301 	add.w	r3, r3, #1
 800c530:	8363      	strh	r3, [r4, #26]
 800c532:	d0dd      	beq.n	800c4f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800c534:	9a03      	ldr	r2, [sp, #12]
 800c536:	bb62      	cbnz	r2, 800c592 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800c538:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c53c:	4298      	cmp	r0, r3
 800c53e:	d003      	beq.n	800c548 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c540:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c544:	4298      	cmp	r0, r3
 800c546:	d1b1      	bne.n	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c548:	8823      	ldrh	r3, [r4, #0]
 800c54a:	8ba1      	ldrh	r1, [r4, #28]
 800c54c:	2b20      	cmp	r3, #32
 800c54e:	d003      	beq.n	800c558 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800c550:	f242 000b 	movw	r0, #8203	@ 0x200b
 800c554:	4283      	cmp	r3, r0
 800c556:	d131      	bne.n	800c5bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800c558:	f1ba 0f00 	cmp.w	sl, #0
 800c55c:	bf0a      	itet	eq
 800c55e:	4688      	moveq	r8, r1
 800c560:	4650      	movne	r0, sl
 800c562:	2001      	moveq	r0, #1
 800c564:	440a      	add	r2, r1
 800c566:	8b23      	ldrh	r3, [r4, #24]
 800c568:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800c56c:	b292      	uxth	r2, r2
 800c56e:	83a2      	strh	r2, [r4, #28]
 800c570:	4413      	add	r3, r2
 800c572:	f1b9 0f00 	cmp.w	r9, #0
 800c576:	d102      	bne.n	800c57e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800c578:	2d00      	cmp	r5, #0
 800c57a:	d042      	beq.n	800c602 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800c57c:	b300      	cbz	r0, 800c5c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800c57e:	8c21      	ldrh	r1, [r4, #32]
 800c580:	4419      	add	r1, r3
 800c582:	458c      	cmp	ip, r1
 800c584:	da37      	bge.n	800c5f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c586:	8ae1      	ldrh	r1, [r4, #22]
 800c588:	2900      	cmp	r1, #0
 800c58a:	d034      	beq.n	800c5f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c58c:	4563      	cmp	r3, ip
 800c58e:	dd8d      	ble.n	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c590:	e01d      	b.n	800c5ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800c592:	8893      	ldrh	r3, [r2, #4]
 800c594:	8023      	strh	r3, [r4, #0]
 800c596:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800c59a:	9901      	ldr	r1, [sp, #4]
 800c59c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c5a0:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800c5a4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800c5a8:	ea4b 0b00 	orr.w	fp, fp, r0
 800c5ac:	68e0      	ldr	r0, [r4, #12]
 800c5ae:	6803      	ldr	r3, [r0, #0]
 800c5b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5b2:	4798      	blx	r3
 800c5b4:	eb0b 0200 	add.w	r2, fp, r0
 800c5b8:	b292      	uxth	r2, r2
 800c5ba:	e7c5      	b.n	800c548 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c5bc:	2000      	movs	r0, #0
 800c5be:	e7d1      	b.n	800c564 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800c5c0:	4563      	cmp	r3, ip
 800c5c2:	f77f af73 	ble.w	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c5c6:	8ae3      	ldrh	r3, [r4, #22]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f43f af6f 	beq.w	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800c5d4:	8c22      	ldrh	r2, [r4, #32]
 800c5d6:	8be3      	ldrh	r3, [r4, #30]
 800c5d8:	4413      	add	r3, r2
 800c5da:	83e3      	strh	r3, [r4, #30]
 800c5dc:	68e0      	ldr	r0, [r4, #12]
 800c5de:	6803      	ldr	r3, [r0, #0]
 800c5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5e2:	4798      	blx	r3
 800c5e4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800c5e8:	4418      	add	r0, r3
 800c5ea:	8a63      	ldrh	r3, [r4, #18]
 800c5ec:	1a18      	subs	r0, r3, r0
 800c5ee:	8260      	strh	r0, [r4, #18]
 800c5f0:	b005      	add	sp, #20
 800c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7ff ff0e 	bl	800c41c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c600:	e754      	b.n	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c602:	4563      	cmp	r3, ip
 800c604:	dd14      	ble.n	800c630 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800c606:	b117      	cbz	r7, 800c60e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800c608:	2301      	movs	r3, #1
 800c60a:	460a      	mov	r2, r1
 800c60c:	e772      	b.n	800c4f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800c60e:	2e00      	cmp	r6, #0
 800c610:	f43f af4c 	beq.w	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c614:	2800      	cmp	r0, #0
 800c616:	f47f af49 	bne.w	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c61a:	f1ba 0f00 	cmp.w	sl, #0
 800c61e:	d002      	beq.n	800c626 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800c620:	2301      	movs	r3, #1
 800c622:	4642      	mov	r2, r8
 800c624:	e767      	b.n	800c4f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800c626:	8ae3      	ldrh	r3, [r4, #22]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f43f af3f 	beq.w	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c62e:	e7d5      	b.n	800c5dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c630:	2800      	cmp	r0, #0
 800c632:	f47f af3b 	bne.w	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c636:	f1ba 0f00 	cmp.w	sl, #0
 800c63a:	f43f af37 	beq.w	800c4ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c63e:	2301      	movs	r3, #1
 800c640:	4642      	mov	r2, r8
 800c642:	e7da      	b.n	800c5fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800c644 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800c644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c646:	4605      	mov	r5, r0
 800c648:	b08f      	sub	sp, #60	@ 0x3c
 800c64a:	4617      	mov	r7, r2
 800c64c:	461c      	mov	r4, r3
 800c64e:	460e      	mov	r6, r1
 800c650:	b1d1      	cbz	r1, 800c688 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4620      	mov	r0, r4
 800c656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c658:	4798      	blx	r3
 800c65a:	4240      	negs	r0, r0
 800c65c:	b200      	sxth	r0, r0
 800c65e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c662:	9603      	str	r6, [sp, #12]
 800c664:	9700      	str	r7, [sp, #0]
 800c666:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c66a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800c66e:	4629      	mov	r1, r5
 800c670:	a805      	add	r0, sp, #20
 800c672:	f7ff fcab 	bl	800bfcc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c676:	2401      	movs	r4, #1
 800c678:	a805      	add	r0, sp, #20
 800c67a:	f7ff fedf 	bl	800c43c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c67e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c682:	b163      	cbz	r3, 800c69e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800c684:	3401      	adds	r4, #1
 800c686:	e7f7      	b.n	800c678 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800c688:	f002 fdee 	bl	800f268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c68c:	2401      	movs	r4, #1
 800c68e:	280a      	cmp	r0, #10
 800c690:	4628      	mov	r0, r5
 800c692:	bf08      	it	eq
 800c694:	3401      	addeq	r4, #1
 800c696:	f002 fde7 	bl	800f268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	d1f7      	bne.n	800c68e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800c69e:	b2a0      	uxth	r0, r4
 800c6a0:	b00f      	add	sp, #60	@ 0x3c
 800c6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	b0e3      	sub	sp, #396	@ 0x18c
 800c6aa:	461c      	mov	r4, r3
 800c6ac:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 800c6ae:	4683      	mov	fp, r0
 800c6b0:	4688      	mov	r8, r1
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 8112 	beq.w	800c8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f000 810e 	beq.w	800c8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c6c0:	7ba3      	ldrb	r3, [r4, #14]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 810a 	beq.w	800c8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c6c8:	6810      	ldr	r0, [r2, #0]
 800c6ca:	6851      	ldr	r1, [r2, #4]
 800c6cc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800c6d0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800c6d4:	ad0a      	add	r5, sp, #40	@ 0x28
 800c6d6:	462b      	mov	r3, r5
 800c6d8:	c303      	stmia	r3!, {r0, r1}
 800c6da:	2100      	movs	r1, #0
 800c6dc:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800c6e0:	910c      	str	r1, [sp, #48]	@ 0x30
 800c6e2:	79a2      	ldrb	r2, [r4, #6]
 800c6e4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c6e8:	a90c      	add	r1, sp, #48	@ 0x30
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f7ff fced 	bl	800c0ca <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c6f0:	a90c      	add	r1, sp, #48	@ 0x30
 800c6f2:	4608      	mov	r0, r1
 800c6f4:	79a2      	ldrb	r2, [r4, #6]
 800c6f6:	f7ff fce8 	bl	800c0ca <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c6fa:	a817      	add	r0, sp, #92	@ 0x5c
 800c6fc:	f002 f95f 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800c700:	6820      	ldr	r0, [r4, #0]
 800c702:	6803      	ldr	r3, [r0, #0]
 800c704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c706:	4798      	blx	r3
 800c708:	4606      	mov	r6, r0
 800c70a:	6820      	ldr	r0, [r4, #0]
 800c70c:	6803      	ldr	r3, [r0, #0]
 800c70e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c710:	4798      	blx	r3
 800c712:	4633      	mov	r3, r6
 800c714:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800c716:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800c718:	9000      	str	r0, [sp, #0]
 800c71a:	a817      	add	r0, sp, #92	@ 0x5c
 800c71c:	f002 f9aa 	bl	800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c720:	6820      	ldr	r0, [r4, #0]
 800c722:	f894 a004 	ldrb.w	sl, [r4, #4]
 800c726:	6803      	ldr	r3, [r0, #0]
 800c728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c72a:	4798      	blx	r3
 800c72c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	4607      	mov	r7, r0
 800c734:	4406      	add	r6, r0
 800c736:	a830      	add	r0, sp, #192	@ 0xc0
 800c738:	f893 9009 	ldrb.w	r9, [r3, #9]
 800c73c:	f002 f93f 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800c740:	7c23      	ldrb	r3, [r4, #16]
 800c742:	b17b      	cbz	r3, 800c764 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 800c744:	6820      	ldr	r0, [r4, #0]
 800c746:	6803      	ldr	r3, [r0, #0]
 800c748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c74a:	4798      	blx	r3
 800c74c:	9009      	str	r0, [sp, #36]	@ 0x24
 800c74e:	6820      	ldr	r0, [r4, #0]
 800c750:	6802      	ldr	r2, [r0, #0]
 800c752:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c754:	4790      	blx	r2
 800c756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c758:	9000      	str	r0, [sp, #0]
 800c75a:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800c75c:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800c75e:	a830      	add	r0, sp, #192	@ 0xc0
 800c760:	f002 f988 	bl	800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c764:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800c768:	7be2      	ldrb	r2, [r4, #15]
 800c76a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c76e:	1a8a      	subs	r2, r1, r2
 800c770:	7c21      	ldrb	r1, [r4, #16]
 800c772:	9103      	str	r1, [sp, #12]
 800c774:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800c778:	9102      	str	r1, [sp, #8]
 800c77a:	6821      	ldr	r1, [r4, #0]
 800c77c:	9101      	str	r1, [sp, #4]
 800c77e:	7961      	ldrb	r1, [r4, #5]
 800c780:	9100      	str	r1, [sp, #0]
 800c782:	b292      	uxth	r2, r2
 800c784:	a930      	add	r1, sp, #192	@ 0xc0
 800c786:	a80e      	add	r0, sp, #56	@ 0x38
 800c788:	f7ff fc20 	bl	800bfcc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c78c:	2e00      	cmp	r6, #0
 800c78e:	dc5b      	bgt.n	800c848 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c790:	af17      	add	r7, sp, #92	@ 0x5c
 800c792:	f04f 0900 	mov.w	r9, #0
 800c796:	7c23      	ldrb	r3, [r4, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 80b1 	beq.w	800c900 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800c79e:	a80e      	add	r0, sp, #56	@ 0x38
 800c7a0:	f7ff fe4c 	bl	800c43c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c7a4:	f1ba 0f00 	cmp.w	sl, #0
 800c7a8:	f000 80a5 	beq.w	800c8f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800c7ac:	7c23      	ldrb	r3, [r4, #16]
 800c7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7b0:	2264      	movs	r2, #100	@ 0x64
 800c7b2:	4639      	mov	r1, r7
 800c7b4:	a849      	add	r0, sp, #292	@ 0x124
 800c7b6:	f006 fe3a 	bl	801342e <memcpy>
 800c7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f000 80a7 	beq.w	800c910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800c7c2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800c7c6:	7922      	ldrb	r2, [r4, #4]
 800c7c8:	2a01      	cmp	r2, #1
 800c7ca:	f040 808a 	bne.w	800c8e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 800c7ce:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 800c7d2:	1ac0      	subs	r0, r0, r3
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	fb90 f0f3 	sdiv	r0, r0, r3
 800c7da:	b200      	sxth	r0, r0
 800c7dc:	7c23      	ldrb	r3, [r4, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f000 808b 	beq.w	800c8fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800c7e4:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 800c7e8:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 800c7ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c7f0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800c7f4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800c7f8:	4410      	add	r0, r2
 800c7fa:	b200      	sxth	r0, r0
 800c7fc:	9000      	str	r0, [sp, #0]
 800c7fe:	e9cd 9703 	strd	r9, r7, [sp, #12]
 800c802:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800c806:	4642      	mov	r2, r8
 800c808:	2100      	movs	r1, #0
 800c80a:	4658      	mov	r0, fp
 800c80c:	f7ff fc8e 	bl	800c12c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800c810:	2800      	cmp	r0, #0
 800c812:	d163      	bne.n	800c8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c814:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c818:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800c81c:	b2b2      	uxth	r2, r6
 800c81e:	4413      	add	r3, r2
 800c820:	1a8a      	subs	r2, r1, r2
 800c822:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800c826:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 800c82a:	b21b      	sxth	r3, r3
 800c82c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c830:	2a00      	cmp	r2, #0
 800c832:	d153      	bne.n	800c8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c834:	6822      	ldr	r2, [r4, #0]
 800c836:	8869      	ldrh	r1, [r5, #2]
 800c838:	7a12      	ldrb	r2, [r2, #8]
 800c83a:	1a9b      	subs	r3, r3, r2
 800c83c:	88ea      	ldrh	r2, [r5, #6]
 800c83e:	440a      	add	r2, r1
 800c840:	b212      	sxth	r2, r2
 800c842:	4293      	cmp	r3, r2
 800c844:	dda7      	ble.n	800c796 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 800c846:	e049      	b.n	800c8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c848:	7c23      	ldrb	r3, [r4, #16]
 800c84a:	444f      	add	r7, r9
 800c84c:	b1c3      	cbz	r3, 800c880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 800c84e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800c852:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c856:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c85a:	443b      	add	r3, r7
 800c85c:	4293      	cmp	r3, r2
 800c85e:	da97      	bge.n	800c790 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800c860:	a80e      	add	r0, sp, #56	@ 0x38
 800c862:	f7ff fdeb 	bl	800c43c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c866:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 800c86a:	3b01      	subs	r3, #1
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	454b      	cmp	r3, r9
 800c870:	9309      	str	r3, [sp, #36]	@ 0x24
 800c872:	d021      	beq.n	800c8b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 800c874:	7961      	ldrb	r1, [r4, #5]
 800c876:	a817      	add	r0, sp, #92	@ 0x5c
 800c878:	f7f7 f96a 	bl	8003b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c87e:	e7f4      	b.n	800c86a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 800c880:	fa1f f986 	uxth.w	r9, r6
 800c884:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c888:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c88c:	443b      	add	r3, r7
 800c88e:	4293      	cmp	r3, r2
 800c890:	f6bf af7e 	bge.w	800c790 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800c894:	a817      	add	r0, sp, #92	@ 0x5c
 800c896:	f002 fce7 	bl	800f268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c89a:	b1f8      	cbz	r0, 800c8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c89c:	280a      	cmp	r0, #10
 800c89e:	d1f1      	bne.n	800c884 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800c8a0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c8a4:	444b      	add	r3, r9
 800c8a6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c8aa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c8ae:	eba3 0309 	sub.w	r3, r3, r9
 800c8b2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c8b6:	e7e5      	b.n	800c884 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800c8b8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800c8bc:	b2b3      	uxth	r3, r6
 800c8be:	441a      	add	r2, r3
 800c8c0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800c8c4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c8ce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800c8d2:	b11b      	cbz	r3, 800c8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c8d4:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0ba      	beq.n	800c852 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 800c8dc:	b063      	add	sp, #396	@ 0x18c
 800c8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e2:	2a02      	cmp	r2, #2
 800c8e4:	d105      	bne.n	800c8f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 800c8e6:	7be2      	ldrb	r2, [r4, #15]
 800c8e8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800c8ec:	1a80      	subs	r0, r0, r2
 800c8ee:	1ac0      	subs	r0, r0, r3
 800c8f0:	e773      	b.n	800c7da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	e772      	b.n	800c7dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800c8f6:	7be0      	ldrb	r0, [r4, #15]
 800c8f8:	e770      	b.n	800c7dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800c8fa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c8fe:	e773      	b.n	800c7e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 800c900:	f1ba 0f00 	cmp.w	sl, #0
 800c904:	d0f7      	beq.n	800c8f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800c906:	2264      	movs	r2, #100	@ 0x64
 800c908:	4639      	mov	r1, r7
 800c90a:	a849      	add	r0, sp, #292	@ 0x124
 800c90c:	f006 fd8f 	bl	801342e <memcpy>
 800c910:	2300      	movs	r3, #0
 800c912:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c916:	6821      	ldr	r1, [r4, #0]
 800c918:	a849      	add	r0, sp, #292	@ 0x124
 800c91a:	f7ff fb9a 	bl	800c052 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800c91e:	b203      	sxth	r3, r0
 800c920:	e751      	b.n	800c7c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0800c922 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800c922:	2b03      	cmp	r3, #3
 800c924:	d818      	bhi.n	800c958 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800c926:	e8df f003 	tbb	[pc, r3]
 800c92a:	0602      	.short	0x0602
 800c92c:	130d      	.short	0x130d
 800c92e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c932:	1850      	adds	r0, r2, r1
 800c934:	4770      	bx	lr
 800c936:	8803      	ldrh	r3, [r0, #0]
 800c938:	8880      	ldrh	r0, [r0, #4]
 800c93a:	4418      	add	r0, r3
 800c93c:	b200      	sxth	r0, r0
 800c93e:	1a80      	subs	r0, r0, r2
 800c940:	3801      	subs	r0, #1
 800c942:	4770      	bx	lr
 800c944:	8803      	ldrh	r3, [r0, #0]
 800c946:	8880      	ldrh	r0, [r0, #4]
 800c948:	4418      	add	r0, r3
 800c94a:	b200      	sxth	r0, r0
 800c94c:	1a40      	subs	r0, r0, r1
 800c94e:	e7f7      	b.n	800c940 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800c950:	f9b0 0000 	ldrsh.w	r0, [r0]
 800c954:	4410      	add	r0, r2
 800c956:	4770      	bx	lr
 800c958:	2000      	movs	r0, #0
 800c95a:	4770      	bx	lr

0800c95c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	d817      	bhi.n	800c990 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800c960:	e8df f003 	tbb	[pc, r3]
 800c964:	10090602 	.word	0x10090602
 800c968:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c96c:	1850      	adds	r0, r2, r1
 800c96e:	4770      	bx	lr
 800c970:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c974:	e7fa      	b.n	800c96c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800c976:	8843      	ldrh	r3, [r0, #2]
 800c978:	88c0      	ldrh	r0, [r0, #6]
 800c97a:	4418      	add	r0, r3
 800c97c:	b200      	sxth	r0, r0
 800c97e:	1a80      	subs	r0, r0, r2
 800c980:	3801      	subs	r0, #1
 800c982:	4770      	bx	lr
 800c984:	8843      	ldrh	r3, [r0, #2]
 800c986:	88c0      	ldrh	r0, [r0, #6]
 800c988:	4418      	add	r0, r3
 800c98a:	b200      	sxth	r0, r0
 800c98c:	1a40      	subs	r0, r0, r1
 800c98e:	e7f7      	b.n	800c980 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800c990:	2000      	movs	r0, #0
 800c992:	4770      	bx	lr

0800c994 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800c994:	4b01      	ldr	r3, [pc, #4]	@ (800c99c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
 800c99a:	4770      	bx	lr
 800c99c:	20015444 	.word	0x20015444

0800c9a0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	b1c8      	cbz	r0, 800c9d8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800c9a4:	0c02      	lsrs	r2, r0, #16
 800c9a6:	0412      	lsls	r2, r2, #16
 800c9a8:	b9a2      	cbnz	r2, 800c9d4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800c9aa:	0403      	lsls	r3, r0, #16
 800c9ac:	2010      	movs	r0, #16
 800c9ae:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800c9b2:	bf04      	itt	eq
 800c9b4:	021b      	lsleq	r3, r3, #8
 800c9b6:	3008      	addeq	r0, #8
 800c9b8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800c9bc:	bf04      	itt	eq
 800c9be:	011b      	lsleq	r3, r3, #4
 800c9c0:	3004      	addeq	r0, #4
 800c9c2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800c9c6:	bf04      	itt	eq
 800c9c8:	009b      	lsleq	r3, r3, #2
 800c9ca:	3002      	addeq	r0, #2
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	db04      	blt.n	800c9da <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	4770      	bx	lr
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	e7ea      	b.n	800c9ae <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800c9d8:	2020      	movs	r0, #32
 800c9da:	4770      	bx	lr

0800c9dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e0:	b087      	sub	sp, #28
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	4616      	mov	r6, r2
 800c9e6:	4698      	mov	r8, r3
 800c9e8:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800c9ec:	4601      	mov	r1, r0
 800c9ee:	b120      	cbz	r0, 800c9fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c9f0:	b11a      	cbz	r2, 800c9fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c9f2:	2d1f      	cmp	r5, #31
 800c9f4:	d801      	bhi.n	800c9fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c9f6:	2b1f      	cmp	r3, #31
 800c9f8:	d904      	bls.n	800ca04 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	6038      	str	r0, [r7, #0]
 800c9fe:	b007      	add	sp, #28
 800ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca04:	b97d      	cbnz	r5, 800ca26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800ca06:	b143      	cbz	r3, 800ca1a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	e9cd 4700 	strd	r4, r7, [sp]
 800ca0e:	462b      	mov	r3, r5
 800ca10:	4641      	mov	r1, r8
 800ca12:	4630      	mov	r0, r6
 800ca14:	f7ff ffe2 	bl	800c9dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ca18:	e7f1      	b.n	800c9fe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800ca1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800ca24:	e7eb      	b.n	800c9fe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800ca26:	fa32 fa05 	lsrs.w	sl, r2, r5
 800ca2a:	d106      	bne.n	800ca3a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800ca2c:	4346      	muls	r6, r0
 800ca2e:	fbb6 f0f4 	udiv	r0, r6, r4
 800ca32:	fb04 6610 	mls	r6, r4, r0, r6
 800ca36:	603e      	str	r6, [r7, #0]
 800ca38:	e7e1      	b.n	800c9fe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	40aa      	lsls	r2, r5
 800ca3e:	3a01      	subs	r2, #1
 800ca40:	4016      	ands	r6, r2
 800ca42:	fa00 fb05 	lsl.w	fp, r0, r5
 800ca46:	4630      	mov	r0, r6
 800ca48:	fbbb f9f4 	udiv	r9, fp, r4
 800ca4c:	fb0a f309 	mul.w	r3, sl, r9
 800ca50:	9303      	str	r3, [sp, #12]
 800ca52:	f7ff ffa5 	bl	800c9a0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ca56:	462b      	mov	r3, r5
 800ca58:	460a      	mov	r2, r1
 800ca5a:	e9cd 4700 	strd	r4, r7, [sp]
 800ca5e:	4601      	mov	r1, r0
 800ca60:	4630      	mov	r0, r6
 800ca62:	f7ff ffbb 	bl	800c9dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ca66:	fb04 b919 	mls	r9, r4, r9, fp
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	4648      	mov	r0, r9
 800ca6e:	eb05 0108 	add.w	r1, r5, r8
 800ca72:	f7ff ff95 	bl	800c9a0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800ca76:	ab05      	add	r3, sp, #20
 800ca78:	e9cd 4300 	strd	r4, r3, [sp]
 800ca7c:	464a      	mov	r2, r9
 800ca7e:	4603      	mov	r3, r0
 800ca80:	4650      	mov	r0, sl
 800ca82:	f7ff ffab 	bl	800c9dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	9a05      	ldr	r2, [sp, #20]
 800ca8a:	9b03      	ldr	r3, [sp, #12]
 800ca8c:	4411      	add	r1, r2
 800ca8e:	fbb1 f2f4 	udiv	r2, r1, r4
 800ca92:	18d3      	adds	r3, r2, r3
 800ca94:	441e      	add	r6, r3
 800ca96:	fb04 1412 	mls	r4, r4, r2, r1
 800ca9a:	4430      	add	r0, r6
 800ca9c:	603c      	str	r4, [r7, #0]
 800ca9e:	e7ae      	b.n	800c9fe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800caa0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800caa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800caa4:	b085      	sub	sp, #20
 800caa6:	f1b0 0900 	subs.w	r9, r0, #0
 800caaa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800caac:	461d      	mov	r5, r3
 800caae:	bfbf      	itttt	lt
 800cab0:	6823      	ldrlt	r3, [r4, #0]
 800cab2:	425b      	neglt	r3, r3
 800cab4:	f1c9 0900 	rsblt	r9, r9, #0
 800cab8:	6023      	strlt	r3, [r4, #0]
 800caba:	bfb4      	ite	lt
 800cabc:	f04f 36ff 	movlt.w	r6, #4294967295
 800cac0:	2601      	movge	r6, #1
 800cac2:	2a00      	cmp	r2, #0
 800cac4:	4617      	mov	r7, r2
 800cac6:	da04      	bge.n	800cad2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	425b      	negs	r3, r3
 800cacc:	4257      	negs	r7, r2
 800cace:	4276      	negs	r6, r6
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	2d00      	cmp	r5, #0
 800cad4:	4638      	mov	r0, r7
 800cad6:	bfba      	itte	lt
 800cad8:	426d      	neglt	r5, r5
 800cada:	f04f 38ff 	movlt.w	r8, #4294967295
 800cade:	f04f 0801 	movge.w	r8, #1
 800cae2:	f7ff ff5d 	bl	800c9a0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800cae6:	ab03      	add	r3, sp, #12
 800cae8:	e9cd 5300 	strd	r5, r3, [sp]
 800caec:	463a      	mov	r2, r7
 800caee:	4603      	mov	r3, r0
 800caf0:	4648      	mov	r0, r9
 800caf2:	f7ff ff73 	bl	800c9dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	9a03      	ldr	r2, [sp, #12]
 800cafa:	4546      	cmp	r6, r8
 800cafc:	441a      	add	r2, r3
 800cafe:	fb92 f3f5 	sdiv	r3, r2, r5
 800cb02:	4418      	add	r0, r3
 800cb04:	bf18      	it	ne
 800cb06:	4240      	negne	r0, r0
 800cb08:	fb05 2313 	mls	r3, r5, r3, r2
 800cb0c:	1c72      	adds	r2, r6, #1
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	d105      	bne.n	800cb1e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f1c3 0200 	rsb	r2, r3, #0
 800cb18:	db0b      	blt.n	800cb32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800cb1a:	6022      	str	r2, [r4, #0]
 800cb1c:	e006      	b.n	800cb2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cb1e:	2e01      	cmp	r6, #1
 800cb20:	d104      	bne.n	800cb2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	da02      	bge.n	800cb2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800cb26:	442b      	add	r3, r5
 800cb28:	3801      	subs	r0, #1
 800cb2a:	6023      	str	r3, [r4, #0]
 800cb2c:	b005      	add	sp, #20
 800cb2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb32:	3801      	subs	r0, #1
 800cb34:	1b52      	subs	r2, r2, r5
 800cb36:	e7f0      	b.n	800cb1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800cb38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800cb38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cb3c:	4c1c      	ldr	r4, [pc, #112]	@ (800cbb0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800cb3e:	6807      	ldr	r7, [r0, #0]
 800cb40:	69a3      	ldr	r3, [r4, #24]
 800cb42:	4605      	mov	r5, r0
 800cb44:	b92b      	cbnz	r3, 800cb52 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800cb46:	6840      	ldr	r0, [r0, #4]
 800cb48:	e9c5 7000 	strd	r7, r0, [r5]
 800cb4c:	b004      	add	sp, #16
 800cb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb52:	68a2      	ldr	r2, [r4, #8]
 800cb54:	6820      	ldr	r0, [r4, #0]
 800cb56:	ae04      	add	r6, sp, #16
 800cb58:	f04f 0802 	mov.w	r8, #2
 800cb5c:	fb93 f1f8 	sdiv	r1, r3, r8
 800cb60:	440a      	add	r2, r1
 800cb62:	f846 2d04 	str.w	r2, [r6, #-4]!
 800cb66:	69e1      	ldr	r1, [r4, #28]
 800cb68:	9600      	str	r6, [sp, #0]
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	f7ff ff98 	bl	800caa0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cb70:	69a3      	ldr	r3, [r4, #24]
 800cb72:	686a      	ldr	r2, [r5, #4]
 800cb74:	6a21      	ldr	r1, [r4, #32]
 800cb76:	9600      	str	r6, [sp, #0]
 800cb78:	4607      	mov	r7, r0
 800cb7a:	6860      	ldr	r0, [r4, #4]
 800cb7c:	f7ff ff90 	bl	800caa0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cb80:	6962      	ldr	r2, [r4, #20]
 800cb82:	69a3      	ldr	r3, [r4, #24]
 800cb84:	fb93 f8f8 	sdiv	r8, r3, r8
 800cb88:	4442      	add	r2, r8
 800cb8a:	9203      	str	r2, [sp, #12]
 800cb8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800cb8e:	682a      	ldr	r2, [r5, #0]
 800cb90:	9600      	str	r6, [sp, #0]
 800cb92:	4407      	add	r7, r0
 800cb94:	68e0      	ldr	r0, [r4, #12]
 800cb96:	f7ff ff83 	bl	800caa0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cb9a:	9600      	str	r6, [sp, #0]
 800cb9c:	4680      	mov	r8, r0
 800cb9e:	69a3      	ldr	r3, [r4, #24]
 800cba0:	686a      	ldr	r2, [r5, #4]
 800cba2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800cba4:	6920      	ldr	r0, [r4, #16]
 800cba6:	f7ff ff7b 	bl	800caa0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800cbaa:	4440      	add	r0, r8
 800cbac:	e7cc      	b.n	800cb48 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800cbae:	bf00      	nop
 800cbb0:	20015448 	.word	0x20015448

0800cbb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800cbb4:	4b07      	ldr	r3, [pc, #28]	@ (800cbd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d109      	bne.n	800cbd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800cbbc:	f9b1 3000 	ldrsh.w	r3, [r1]
 800cbc0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cbc4:	8003      	strh	r3, [r0, #0]
 800cbc6:	4b04      	ldr	r3, [pc, #16]	@ (800cbd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	1a9b      	subs	r3, r3, r2
 800cbce:	800b      	strh	r3, [r1, #0]
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20015434 	.word	0x20015434
 800cbd8:	20015430 	.word	0x20015430

0800cbdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	4b07      	ldr	r3, [pc, #28]	@ (800cbfc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d108      	bne.n	800cbf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800cbe6:	4b06      	ldr	r3, [pc, #24]	@ (800cc00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800cbe8:	880c      	ldrh	r4, [r1, #0]
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	f9b0 2000 	ldrsh.w	r2, [r0]
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	1b1b      	subs	r3, r3, r4
 800cbf4:	8003      	strh	r3, [r0, #0]
 800cbf6:	800a      	strh	r2, [r1, #0]
 800cbf8:	bd10      	pop	{r4, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20015434 	.word	0x20015434
 800cc00:	20015430 	.word	0x20015430

0800cc04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800cc04:	b510      	push	{r4, lr}
 800cc06:	4b0a      	ldr	r3, [pc, #40]	@ (800cc30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d10e      	bne.n	800cc2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800cc0e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800cc12:	8843      	ldrh	r3, [r0, #2]
 800cc14:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cc18:	8044      	strh	r4, [r0, #2]
 800cc1a:	18ca      	adds	r2, r1, r3
 800cc1c:	4b05      	ldr	r3, [pc, #20]	@ (800cc34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	1a9b      	subs	r3, r3, r2
 800cc22:	8003      	strh	r3, [r0, #0]
 800cc24:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cc28:	80c3      	strh	r3, [r0, #6]
 800cc2a:	8081      	strh	r1, [r0, #4]
 800cc2c:	bd10      	pop	{r4, pc}
 800cc2e:	bf00      	nop
 800cc30:	20015434 	.word	0x20015434
 800cc34:	20015430 	.word	0x20015430

0800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800cc38:	4b08      	ldr	r3, [pc, #32]	@ (800cc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d10c      	bne.n	800cc5a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800cc40:	8803      	ldrh	r3, [r0, #0]
 800cc42:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800cc46:	8842      	ldrh	r2, [r0, #2]
 800cc48:	8002      	strh	r2, [r0, #0]
 800cc4a:	185a      	adds	r2, r3, r1
 800cc4c:	4b04      	ldr	r3, [pc, #16]	@ (800cc60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800cc4e:	881b      	ldrh	r3, [r3, #0]
 800cc50:	1a9b      	subs	r3, r3, r2
 800cc52:	8043      	strh	r3, [r0, #2]
 800cc54:	88c3      	ldrh	r3, [r0, #6]
 800cc56:	8083      	strh	r3, [r0, #4]
 800cc58:	80c1      	strh	r1, [r0, #6]
 800cc5a:	4770      	bx	lr
 800cc5c:	20015434 	.word	0x20015434
 800cc60:	20015430 	.word	0x20015430

0800cc64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800cc64:	b510      	push	{r4, lr}
 800cc66:	4b07      	ldr	r3, [pc, #28]	@ (800cc84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d108      	bne.n	800cc80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800cc6e:	f9b1 3000 	ldrsh.w	r3, [r1]
 800cc72:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cc76:	8003      	strh	r3, [r0, #0]
 800cc78:	8893      	ldrh	r3, [r2, #4]
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	1b1b      	subs	r3, r3, r4
 800cc7e:	800b      	strh	r3, [r1, #0]
 800cc80:	bd10      	pop	{r4, pc}
 800cc82:	bf00      	nop
 800cc84:	20015434 	.word	0x20015434

0800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800cc88:	b510      	push	{r4, lr}
 800cc8a:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	460a      	mov	r2, r1
 800cc92:	d10d      	bne.n	800ccb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800cc94:	8881      	ldrh	r1, [r0, #4]
 800cc96:	8803      	ldrh	r3, [r0, #0]
 800cc98:	440b      	add	r3, r1
 800cc9a:	4601      	mov	r1, r0
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	f821 3b02 	strh.w	r3, [r1], #2
 800cca2:	f7ff ffdf 	bl	800cc64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800cca6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ccaa:	88c2      	ldrh	r2, [r0, #6]
 800ccac:	8082      	strh	r2, [r0, #4]
 800ccae:	80c3      	strh	r3, [r0, #6]
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	bf00      	nop
 800ccb4:	20015434 	.word	0x20015434

0800ccb8 <_ZN8touchgfx11Application13requestRedrawEv>:
 800ccb8:	4b06      	ldr	r3, [pc, #24]	@ (800ccd4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800ccba:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ccbe:	4b06      	ldr	r3, [pc, #24]	@ (800ccd8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800ccc0:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800ccc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccc8:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800cccc:	2100      	movs	r1, #0
 800ccce:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800ccd2:	4770      	bx	lr
 800ccd4:	20015430 	.word	0x20015430
 800ccd8:	20015432 	.word	0x20015432

0800ccdc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800ccdc:	4b03      	ldr	r3, [pc, #12]	@ (800ccec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800ccde:	6818      	ldr	r0, [r3, #0]
 800cce0:	b110      	cbz	r0, 800cce8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800cce2:	6803      	ldr	r3, [r0, #0]
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	4718      	bx	r3
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	20015478 	.word	0x20015478

0800ccf0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800ccf0:	4770      	bx	lr
	...

0800ccf4 <_ZN8touchgfx11Application4drawEv>:
 800ccf4:	b507      	push	{r0, r1, r2, lr}
 800ccf6:	4b09      	ldr	r3, [pc, #36]	@ (800cd1c <_ZN8touchgfx11Application4drawEv+0x28>)
 800ccf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ccfc:	4b08      	ldr	r3, [pc, #32]	@ (800cd20 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800ccfe:	f8ad 2004 	strh.w	r2, [sp, #4]
 800cd02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd06:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cd0a:	6803      	ldr	r3, [r0, #0]
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	9100      	str	r1, [sp, #0]
 800cd10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd12:	4669      	mov	r1, sp
 800cd14:	4798      	blx	r3
 800cd16:	b003      	add	sp, #12
 800cd18:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd1c:	20015430 	.word	0x20015430
 800cd20:	20015432 	.word	0x20015432

0800cd24 <_ZN8touchgfx11Application10invalidateEv>:
 800cd24:	4b09      	ldr	r3, [pc, #36]	@ (800cd4c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800cd26:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cd2a:	4b09      	ldr	r3, [pc, #36]	@ (800cd50 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800cd2c:	b082      	sub	sp, #8
 800cd2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd32:	f8ad 2004 	strh.w	r2, [sp, #4]
 800cd36:	2100      	movs	r1, #0
 800cd38:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cd3c:	9100      	str	r1, [sp, #0]
 800cd3e:	6803      	ldr	r3, [r0, #0]
 800cd40:	aa02      	add	r2, sp, #8
 800cd42:	e912 0006 	ldmdb	r2, {r1, r2}
 800cd46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd48:	b002      	add	sp, #8
 800cd4a:	4718      	bx	r3
 800cd4c:	20015430 	.word	0x20015430
 800cd50:	20015432 	.word	0x20015432

0800cd54 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800cd54:	4b03      	ldr	r3, [pc, #12]	@ (800cd64 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800cd56:	6818      	ldr	r0, [r3, #0]
 800cd58:	b110      	cbz	r0, 800cd60 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800cd5a:	6803      	ldr	r3, [r0, #0]
 800cd5c:	69db      	ldr	r3, [r3, #28]
 800cd5e:	4718      	bx	r3
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	20015478 	.word	0x20015478

0800cd68 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800cd68:	4b03      	ldr	r3, [pc, #12]	@ (800cd78 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800cd6a:	6818      	ldr	r0, [r3, #0]
 800cd6c:	b110      	cbz	r0, 800cd74 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800cd6e:	6803      	ldr	r3, [r0, #0]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	4718      	bx	r3
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	20015478 	.word	0x20015478

0800cd7c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800cd82:	4770      	bx	lr

0800cd84 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800cd84:	4b03      	ldr	r3, [pc, #12]	@ (800cd94 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800cd86:	6818      	ldr	r0, [r3, #0]
 800cd88:	b110      	cbz	r0, 800cd90 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800cd8a:	6803      	ldr	r3, [r0, #0]
 800cd8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd8e:	4718      	bx	r3
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	20015478 	.word	0x20015478

0800cd98 <_ZN8touchgfx11ApplicationD1Ev>:
 800cd98:	4770      	bx	lr

0800cd9a <_ZN8touchgfx11ApplicationD0Ev>:
 800cd9a:	b510      	push	{r4, lr}
 800cd9c:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800cda0:	4604      	mov	r4, r0
 800cda2:	f006 f83f 	bl	8012e24 <_ZdlPvj>
 800cda6:	4620      	mov	r0, r4
 800cda8:	bd10      	pop	{r4, pc}

0800cdaa <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800cdaa:	b510      	push	{r4, lr}
 800cdac:	f9b1 4000 	ldrsh.w	r4, [r1]
 800cdb0:	888a      	ldrh	r2, [r1, #4]
 800cdb2:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cdb6:	4422      	add	r2, r4
 800cdb8:	b212      	sxth	r2, r2
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	da15      	bge.n	800cdea <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cdbe:	8882      	ldrh	r2, [r0, #4]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	b21b      	sxth	r3, r3
 800cdc4:	429c      	cmp	r4, r3
 800cdc6:	da10      	bge.n	800cdea <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cdc8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800cdcc:	88c9      	ldrh	r1, [r1, #6]
 800cdce:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cdd2:	4419      	add	r1, r3
 800cdd4:	b209      	sxth	r1, r1
 800cdd6:	428a      	cmp	r2, r1
 800cdd8:	da07      	bge.n	800cdea <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cdda:	88c0      	ldrh	r0, [r0, #6]
 800cddc:	4410      	add	r0, r2
 800cdde:	b200      	sxth	r0, r0
 800cde0:	4283      	cmp	r3, r0
 800cde2:	bfac      	ite	ge
 800cde4:	2000      	movge	r0, #0
 800cde6:	2001      	movlt	r0, #1
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	2000      	movs	r0, #0
 800cdec:	e7fc      	b.n	800cde8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800cdee <_ZN8touchgfx4Rect10restrictToEss>:
 800cdee:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	da04      	bge.n	800ce02 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800cdf8:	8884      	ldrh	r4, [r0, #4]
 800cdfa:	4423      	add	r3, r4
 800cdfc:	8083      	strh	r3, [r0, #4]
 800cdfe:	2300      	movs	r3, #0
 800ce00:	8003      	strh	r3, [r0, #0]
 800ce02:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ce06:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ce0a:	1b09      	subs	r1, r1, r4
 800ce0c:	428b      	cmp	r3, r1
 800ce0e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ce12:	bfc8      	it	gt
 800ce14:	8081      	strhgt	r1, [r0, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	da04      	bge.n	800ce24 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800ce1a:	88c1      	ldrh	r1, [r0, #6]
 800ce1c:	440b      	add	r3, r1
 800ce1e:	80c3      	strh	r3, [r0, #6]
 800ce20:	2300      	movs	r3, #0
 800ce22:	8043      	strh	r3, [r0, #2]
 800ce24:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800ce28:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ce2c:	1a52      	subs	r2, r2, r1
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	bfc8      	it	gt
 800ce32:	80c2      	strhgt	r2, [r0, #6]
 800ce34:	bd10      	pop	{r4, pc}
	...

0800ce38 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	4b10      	ldr	r3, [pc, #64]	@ (800ce7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800ce3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ce40:	4b0f      	ldr	r3, [pc, #60]	@ (800ce80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800ce42:	460c      	mov	r4, r1
 800ce44:	4620      	mov	r0, r4
 800ce46:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ce4a:	f7ff ffd0 	bl	800cdee <_ZN8touchgfx4Rect10restrictToEss>
 800ce4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800ce50:	6818      	ldr	r0, [r3, #0]
 800ce52:	b190      	cbz	r0, 800ce7a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800ce54:	6803      	ldr	r3, [r0, #0]
 800ce56:	4621      	mov	r1, r4
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	4798      	blx	r3
 800ce5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800ce5e:	6818      	ldr	r0, [r3, #0]
 800ce60:	b118      	cbz	r0, 800ce6a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800ce62:	6803      	ldr	r3, [r0, #0]
 800ce64:	4621      	mov	r1, r4
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	4798      	blx	r3
 800ce6a:	4b08      	ldr	r3, [pc, #32]	@ (800ce8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	6803      	ldr	r3, [r0, #0]
 800ce70:	4621      	mov	r1, r4
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce78:	4718      	bx	r3
 800ce7a:	bd10      	pop	{r4, pc}
 800ce7c:	20015432 	.word	0x20015432
 800ce80:	20015430 	.word	0x20015430
 800ce84:	20015478 	.word	0x20015478
 800ce88:	20015474 	.word	0x20015474
 800ce8c:	2001543c 	.word	0x2001543c

0800ce90 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce92:	4606      	mov	r6, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	460f      	mov	r7, r1
 800ce98:	f7fc fd93 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ce9c:	b9e8      	cbnz	r0, 800ceda <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ce9e:	f9b7 5000 	ldrsh.w	r5, [r7]
 800cea2:	f9b6 4000 	ldrsh.w	r4, [r6]
 800cea6:	42a5      	cmp	r5, r4
 800cea8:	db17      	blt.n	800ceda <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ceaa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ceae:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	db11      	blt.n	800ceda <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ceb6:	88b9      	ldrh	r1, [r7, #4]
 800ceb8:	440d      	add	r5, r1
 800ceba:	88b1      	ldrh	r1, [r6, #4]
 800cebc:	440c      	add	r4, r1
 800cebe:	b22d      	sxth	r5, r5
 800cec0:	b224      	sxth	r4, r4
 800cec2:	42a5      	cmp	r5, r4
 800cec4:	dc09      	bgt.n	800ceda <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cec6:	88f8      	ldrh	r0, [r7, #6]
 800cec8:	4410      	add	r0, r2
 800ceca:	88f2      	ldrh	r2, [r6, #6]
 800cecc:	4413      	add	r3, r2
 800cece:	b200      	sxth	r0, r0
 800ced0:	b21b      	sxth	r3, r3
 800ced2:	4298      	cmp	r0, r3
 800ced4:	bfcc      	ite	gt
 800ced6:	2000      	movgt	r0, #0
 800ced8:	2001      	movle	r0, #1
 800ceda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cedc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	4608      	mov	r0, r1
 800cee2:	460d      	mov	r5, r1
 800cee4:	f7fc fd6d 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cee8:	b978      	cbnz	r0, 800cf0a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800ceea:	4620      	mov	r0, r4
 800ceec:	f7fc fd69 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cef0:	f9b5 6000 	ldrsh.w	r6, [r5]
 800cef4:	b150      	cbz	r0, 800cf0c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800cef6:	8026      	strh	r6, [r4, #0]
 800cef8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800cefc:	8063      	strh	r3, [r4, #2]
 800cefe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800cf02:	80a3      	strh	r3, [r4, #4]
 800cf04:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cf08:	80e3      	strh	r3, [r4, #6]
 800cf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf0c:	f9b4 1000 	ldrsh.w	r1, [r4]
 800cf10:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800cf14:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800cf18:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800cf1c:	88ed      	ldrh	r5, [r5, #6]
 800cf1e:	42b1      	cmp	r1, r6
 800cf20:	460f      	mov	r7, r1
 800cf22:	bfa8      	it	ge
 800cf24:	4637      	movge	r7, r6
 800cf26:	4293      	cmp	r3, r2
 800cf28:	4618      	mov	r0, r3
 800cf2a:	4466      	add	r6, ip
 800cf2c:	bfa8      	it	ge
 800cf2e:	4610      	movge	r0, r2
 800cf30:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800cf34:	8027      	strh	r7, [r4, #0]
 800cf36:	442a      	add	r2, r5
 800cf38:	88e5      	ldrh	r5, [r4, #6]
 800cf3a:	8060      	strh	r0, [r4, #2]
 800cf3c:	4461      	add	r1, ip
 800cf3e:	442b      	add	r3, r5
 800cf40:	b236      	sxth	r6, r6
 800cf42:	b209      	sxth	r1, r1
 800cf44:	b212      	sxth	r2, r2
 800cf46:	b21b      	sxth	r3, r3
 800cf48:	428e      	cmp	r6, r1
 800cf4a:	bfac      	ite	ge
 800cf4c:	ebc7 0106 	rsbge	r1, r7, r6
 800cf50:	ebc7 0101 	rsblt	r1, r7, r1
 800cf54:	429a      	cmp	r2, r3
 800cf56:	bfac      	ite	ge
 800cf58:	ebc0 0202 	rsbge	r2, r0, r2
 800cf5c:	ebc0 0203 	rsblt	r2, r0, r3
 800cf60:	80a1      	strh	r1, [r4, #4]
 800cf62:	80e2      	strh	r2, [r4, #6]
 800cf64:	e7d1      	b.n	800cf0a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800cf68 <_ZN8touchgfx11Application11getInstanceEv>:
 800cf68:	4b01      	ldr	r3, [pc, #4]	@ (800cf70 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800cf6a:	6818      	ldr	r0, [r3, #0]
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	20015488 	.word	0x20015488

0800cf74 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf76:	4b10      	ldr	r3, [pc, #64]	@ (800cfb8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	b1d3      	cbz	r3, 800cfb4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800cf7e:	4b0f      	ldr	r3, [pc, #60]	@ (800cfbc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800cf80:	4f0f      	ldr	r7, [pc, #60]	@ (800cfc0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800cf82:	881c      	ldrh	r4, [r3, #0]
 800cf84:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800cf88:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800cf8c:	42a3      	cmp	r3, r4
 800cf8e:	d90e      	bls.n	800cfae <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800cf96:	b10a      	cbz	r2, 800cf9c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800cf98:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800cf9a:	b900      	cbnz	r0, 800cf9e <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800cf9c:	6898      	ldr	r0, [r3, #8]
 800cf9e:	6803      	ldr	r3, [r0, #0]
 800cfa0:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800cfa4:	69db      	ldr	r3, [r3, #28]
 800cfa6:	3401      	adds	r4, #1
 800cfa8:	4798      	blx	r3
 800cfaa:	b2a4      	uxth	r4, r4
 800cfac:	e7ec      	b.n	800cf88 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800cfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	2001543a 	.word	0x2001543a
 800cfbc:	20000088 	.word	0x20000088
 800cfc0:	2001543c 	.word	0x2001543c

0800cfc4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800cfc4:	b510      	push	{r4, lr}
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800cfcc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cfd0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800cfda:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d90e      	bls.n	800d000 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800cfe2:	18e2      	adds	r2, r4, r3
 800cfe4:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800cfe8:	b122      	cbz	r2, 800cff4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800cfea:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800cfee:	6803      	ldr	r3, [r0, #0]
 800cff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cff2:	4798      	blx	r3
 800cff4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800cff8:	3301      	adds	r3, #1
 800cffa:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800cffe:	e7ea      	b.n	800cfd6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800d000:	bd10      	pop	{r4, pc}

0800d002 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800d002:	2300      	movs	r3, #0
 800d004:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800d008:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800d00c:	30a4      	adds	r0, #164	@ 0xa4
 800d00e:	f802 3b01 	strb.w	r3, [r2], #1
 800d012:	4282      	cmp	r2, r0
 800d014:	d1fb      	bne.n	800d00e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800d016:	4770      	bx	lr

0800d018 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	4c0b      	ldr	r4, [pc, #44]	@ (800d048 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800d01c:	4605      	mov	r5, r0
 800d01e:	6820      	ldr	r0, [r4, #0]
 800d020:	460e      	mov	r6, r1
 800d022:	b110      	cbz	r0, 800d02a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800d024:	6803      	ldr	r3, [r0, #0]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	4798      	blx	r3
 800d02a:	1d28      	adds	r0, r5, #4
 800d02c:	f7ff ffe9 	bl	800d002 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800d030:	6026      	str	r6, [r4, #0]
 800d032:	6833      	ldr	r3, [r6, #0]
 800d034:	4630      	mov	r0, r6
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	4798      	blx	r3
 800d03a:	682b      	ldr	r3, [r5, #0]
 800d03c:	4628      	mov	r0, r5
 800d03e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d044:	4718      	bx	r3
 800d046:	bf00      	nop
 800d048:	20015478 	.word	0x20015478

0800d04c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800d04c:	2300      	movs	r3, #0
 800d04e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800d052:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800d056:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d058:	461a      	mov	r2, r3
 800d05a:	461c      	mov	r4, r3
 800d05c:	461d      	mov	r5, r3
 800d05e:	459c      	cmp	ip, r3
 800d060:	dd1a      	ble.n	800d098 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800d062:	18c6      	adds	r6, r0, r3
 800d064:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800d068:	b16e      	cbz	r6, 800d086 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d008      	beq.n	800d080 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800d06e:	fa1f fe82 	uxth.w	lr, r2
 800d072:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800d076:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800d07a:	1887      	adds	r7, r0, r2
 800d07c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800d080:	3201      	adds	r2, #1
 800d082:	3301      	adds	r3, #1
 800d084:	e7eb      	b.n	800d05e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800d086:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800d08a:	4299      	cmp	r1, r3
 800d08c:	bfa8      	it	ge
 800d08e:	3501      	addge	r5, #1
 800d090:	429e      	cmp	r6, r3
 800d092:	bfc8      	it	gt
 800d094:	3401      	addgt	r4, #1
 800d096:	e7f4      	b.n	800d082 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800d098:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800d09c:	1b49      	subs	r1, r1, r5
 800d09e:	1b1b      	subs	r3, r3, r4
 800d0a0:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800d0a4:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800d0a8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	dd03      	ble.n	800d0b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800d0b6:	e7f7      	b.n	800d0a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800d0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d0bc <_ZN8touchgfx11Application15handleTickEventEv>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	4d16      	ldr	r5, [pc, #88]	@ (800d118 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	6828      	ldr	r0, [r5, #0]
 800d0c4:	b140      	cbz	r0, 800d0d8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800d0c6:	7a03      	ldrb	r3, [r0, #8]
 800d0c8:	b933      	cbnz	r3, 800d0d8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800d0ca:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800d0ce:	6803      	ldr	r3, [r0, #0]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0d6:	4718      	bx	r3
 800d0d8:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800d0dc:	4e0f      	ldr	r6, [pc, #60]	@ (800d11c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800d0de:	b973      	cbnz	r3, 800d0fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d0e0:	b168      	cbz	r0, 800d0fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d0e2:	7a03      	ldrb	r3, [r0, #8]
 800d0e4:	b15b      	cbz	r3, 800d0fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d0e6:	6830      	ldr	r0, [r6, #0]
 800d0e8:	b110      	cbz	r0, 800d0f0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800d0ea:	6803      	ldr	r3, [r0, #0]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	4798      	blx	r3
 800d0f0:	6828      	ldr	r0, [r5, #0]
 800d0f2:	6803      	ldr	r3, [r0, #0]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	4798      	blx	r3
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800d0fe:	3404      	adds	r4, #4
 800d100:	4620      	mov	r0, r4
 800d102:	f7ff ff5f 	bl	800cfc4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800d106:	4620      	mov	r0, r4
 800d108:	f7ff ffa0 	bl	800d04c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800d10c:	6830      	ldr	r0, [r6, #0]
 800d10e:	b110      	cbz	r0, 800d116 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800d110:	6803      	ldr	r3, [r0, #0]
 800d112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d114:	e7dd      	b.n	800d0d2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800d116:	bd70      	pop	{r4, r5, r6, pc}
 800d118:	2001547c 	.word	0x2001547c
 800d11c:	20015478 	.word	0x20015478

0800d120 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800d120:	4603      	mov	r3, r0
 800d122:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800d126:	2200      	movs	r2, #0
 800d128:	801a      	strh	r2, [r3, #0]
 800d12a:	805a      	strh	r2, [r3, #2]
 800d12c:	809a      	strh	r2, [r3, #4]
 800d12e:	80da      	strh	r2, [r3, #6]
 800d130:	3308      	adds	r3, #8
 800d132:	428b      	cmp	r3, r1
 800d134:	d1f8      	bne.n	800d128 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800d136:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800d13a:	4770      	bx	lr

0800d13c <_ZN8touchgfx11ApplicationC1Ev>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	4606      	mov	r6, r0
 800d140:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800d142:	f846 3b04 	str.w	r3, [r6], #4
 800d146:	4604      	mov	r4, r0
 800d148:	2500      	movs	r5, #0
 800d14a:	22a8      	movs	r2, #168	@ 0xa8
 800d14c:	2100      	movs	r1, #0
 800d14e:	4630      	mov	r0, r6
 800d150:	f006 f89d 	bl	801328e <memset>
 800d154:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800d158:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d15c:	f7ff ffe0 	bl	800d120 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d160:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800d164:	f7ff ffdc 	bl	800d120 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d168:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800d16c:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800d170:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800d174:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800d178:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800d17c:	490e      	ldr	r1, [pc, #56]	@ (800d1b8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800d17e:	480f      	ldr	r0, [pc, #60]	@ (800d1bc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800d180:	4f0f      	ldr	r7, [pc, #60]	@ (800d1c0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800d182:	f005 fd07 	bl	8012b94 <CRC_Lock>
 800d186:	4b0f      	ldr	r3, [pc, #60]	@ (800d1c4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800d188:	b158      	cbz	r0, 800d1a2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800d18a:	801d      	strh	r5, [r3, #0]
 800d18c:	4a0e      	ldr	r2, [pc, #56]	@ (800d1c8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800d18e:	2300      	movs	r3, #0
 800d190:	6013      	str	r3, [r2, #0]
 800d192:	4a0e      	ldr	r2, [pc, #56]	@ (800d1cc <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800d194:	603b      	str	r3, [r7, #0]
 800d196:	4630      	mov	r0, r6
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	f7ff ff32 	bl	800d002 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800d19e:	4620      	mov	r0, r4
 800d1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d1a6:	2002      	movs	r0, #2
 800d1a8:	801a      	strh	r2, [r3, #0]
 800d1aa:	6038      	str	r0, [r7, #0]
 800d1ac:	f001 fa5a 	bl	800e664 <_ZN8touchgfx6Screen4drawEv>
 800d1b0:	e7ec      	b.n	800d18c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800d1b2:	bf00      	nop
 800d1b4:	08015cdc 	.word	0x08015cdc
 800d1b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800d1bc:	f407a5c2 	.word	0xf407a5c2
 800d1c0:	20015478 	.word	0x20015478
 800d1c4:	20000088 	.word	0x20000088
 800d1c8:	20015488 	.word	0x20015488
 800d1cc:	2001547c 	.word	0x2001547c

0800d1d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800d1d0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	428b      	cmp	r3, r1
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800d1e0:	d908      	bls.n	800d1f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800d1e2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d1e6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800d1f0:	685a      	ldr	r2, [r3, #4]
 800d1f2:	6062      	str	r2, [r4, #4]
 800d1f4:	bd10      	pop	{r4, pc}
	...

0800d1f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	4b8f      	ldr	r3, [pc, #572]	@ (800d43c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800d1fe:	b08f      	sub	sp, #60	@ 0x3c
 800d200:	ac0a      	add	r4, sp, #40	@ 0x28
 800d202:	e884 0006 	stmia.w	r4, {r1, r2}
 800d206:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d20a:	4b8d      	ldr	r3, [pc, #564]	@ (800d440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800d20c:	4683      	mov	fp, r0
 800d20e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d212:	4620      	mov	r0, r4
 800d214:	f7ff fdeb 	bl	800cdee <_ZN8touchgfx4Rect10restrictToEss>
 800d218:	4620      	mov	r0, r4
 800d21a:	f7fc fbd2 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d21e:	2800      	cmp	r0, #0
 800d220:	d16a      	bne.n	800d2f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d222:	9403      	str	r4, [sp, #12]
 800d224:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d228:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d22c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800d230:	35a4      	adds	r5, #164	@ 0xa4
 800d232:	9301      	str	r3, [sp, #4]
 800d234:	b15c      	cbz	r4, 800d24e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800d236:	4629      	mov	r1, r5
 800d238:	9803      	ldr	r0, [sp, #12]
 800d23a:	f7ff fe29 	bl	800ce90 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d23e:	3c01      	subs	r4, #1
 800d240:	b118      	cbz	r0, 800d24a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800d242:	b2a1      	uxth	r1, r4
 800d244:	9801      	ldr	r0, [sp, #4]
 800d246:	f7ff ffc3 	bl	800d1d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d24a:	3d08      	subs	r5, #8
 800d24c:	e7f2      	b.n	800d234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800d24e:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800d252:	f8cd a010 	str.w	sl, [sp, #16]
 800d256:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d25a:	9302      	str	r3, [sp, #8]
 800d25c:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d260:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800d264:	9306      	str	r3, [sp, #24]
 800d266:	445c      	add	r4, fp
 800d268:	2500      	movs	r5, #0
 800d26a:	4626      	mov	r6, r4
 800d26c:	f8cd a014 	str.w	sl, [sp, #20]
 800d270:	462f      	mov	r7, r5
 800d272:	9b05      	ldr	r3, [sp, #20]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d073      	beq.n	800d360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800d278:	9903      	ldr	r1, [sp, #12]
 800d27a:	4630      	mov	r0, r6
 800d27c:	f7ff fd95 	bl	800cdaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d280:	b350      	cbz	r0, 800d2d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d282:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800d286:	f9b6 c000 	ldrsh.w	ip, [r6]
 800d28a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800d28e:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800d292:	45e6      	cmp	lr, ip
 800d294:	db33      	blt.n	800d2fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d296:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d29a:	88b3      	ldrh	r3, [r6, #4]
 800d29c:	4472      	add	r2, lr
 800d29e:	4463      	add	r3, ip
 800d2a0:	b212      	sxth	r2, r2
 800d2a2:	b21b      	sxth	r3, r3
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	dc2a      	bgt.n	800d2fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800d2a8:	88f3      	ldrh	r3, [r6, #6]
 800d2aa:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d2ae:	fa1f f289 	uxth.w	r2, r9
 800d2b2:	4413      	add	r3, r2
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	45c8      	cmp	r8, r9
 800d2b8:	fa1f fc88 	uxth.w	ip, r8
 800d2bc:	fa0f fe83 	sxth.w	lr, r3
 800d2c0:	db0f      	blt.n	800d2e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800d2c2:	eba3 030c 	sub.w	r3, r3, ip
 800d2c6:	1ac9      	subs	r1, r1, r3
 800d2c8:	b209      	sxth	r1, r1
 800d2ca:	2900      	cmp	r1, #0
 800d2cc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d2d0:	dd12      	ble.n	800d2f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d2d2:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	9b05      	ldr	r3, [sp, #20]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	9305      	str	r3, [sp, #20]
 800d2de:	3e08      	subs	r6, #8
 800d2e0:	e7c7      	b.n	800d272 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800d2e2:	4461      	add	r1, ip
 800d2e4:	b209      	sxth	r1, r1
 800d2e6:	4571      	cmp	r1, lr
 800d2e8:	dc38      	bgt.n	800d35c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d2ea:	eba2 020c 	sub.w	r2, r2, ip
 800d2ee:	b212      	sxth	r2, r2
 800d2f0:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800d2f4:	2a00      	cmp	r2, #0
 800d2f6:	dcee      	bgt.n	800d2d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d2f8:	b00f      	add	sp, #60	@ 0x3c
 800d2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fe:	45c8      	cmp	r8, r9
 800d300:	db2c      	blt.n	800d35c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d302:	88f3      	ldrh	r3, [r6, #6]
 800d304:	4499      	add	r9, r3
 800d306:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800d30a:	4498      	add	r8, r3
 800d30c:	fa0f f989 	sxth.w	r9, r9
 800d310:	fa0f f888 	sxth.w	r8, r8
 800d314:	45c1      	cmp	r9, r8
 800d316:	db21      	blt.n	800d35c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d318:	88b3      	ldrh	r3, [r6, #4]
 800d31a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800d31e:	fa1f f28c 	uxth.w	r2, ip
 800d322:	4413      	add	r3, r2
 800d324:	b29b      	uxth	r3, r3
 800d326:	45e6      	cmp	lr, ip
 800d328:	fa1f f88e 	uxth.w	r8, lr
 800d32c:	fa0f f983 	sxth.w	r9, r3
 800d330:	db0a      	blt.n	800d348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800d332:	eba3 0308 	sub.w	r3, r3, r8
 800d336:	1ac9      	subs	r1, r1, r3
 800d338:	b209      	sxth	r1, r1
 800d33a:	2900      	cmp	r1, #0
 800d33c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800d340:	ddda      	ble.n	800d2f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d342:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d346:	e7c6      	b.n	800d2d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d348:	4441      	add	r1, r8
 800d34a:	b209      	sxth	r1, r1
 800d34c:	4549      	cmp	r1, r9
 800d34e:	dc05      	bgt.n	800d35c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d350:	eba2 0208 	sub.w	r2, r2, r8
 800d354:	b212      	sxth	r2, r2
 800d356:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800d35a:	e7cb      	b.n	800d2f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800d35c:	4607      	mov	r7, r0
 800d35e:	e7bb      	b.n	800d2d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d360:	2d00      	cmp	r5, #0
 800d362:	d181      	bne.n	800d268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800d364:	2f00      	cmp	r7, #0
 800d366:	f000 81dd 	beq.w	800d724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d36a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800d36e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800d372:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800d376:	b2b3      	uxth	r3, r6
 800d378:	9305      	str	r3, [sp, #20]
 800d37a:	9a05      	ldr	r2, [sp, #20]
 800d37c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800d380:	4413      	add	r3, r2
 800d382:	b2ba      	uxth	r2, r7
 800d384:	4492      	add	sl, r2
 800d386:	b29b      	uxth	r3, r3
 800d388:	fa1f fa8a 	uxth.w	sl, sl
 800d38c:	fa0f f883 	sxth.w	r8, r3
 800d390:	fa0f f98a 	sxth.w	r9, sl
 800d394:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800d398:	9b04      	ldr	r3, [sp, #16]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d052      	beq.n	800d444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800d39e:	9903      	ldr	r1, [sp, #12]
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f7ff fd02 	bl	800cdaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d3a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d3aa:	b1c0      	cbz	r0, 800d3de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d3ac:	f9b4 e000 	ldrsh.w	lr, [r4]
 800d3b0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d3b4:	4576      	cmp	r6, lr
 800d3b6:	dc22      	bgt.n	800d3fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800d3b8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d3bc:	44f4      	add	ip, lr
 800d3be:	fa0f fc8c 	sxth.w	ip, ip
 800d3c2:	45e0      	cmp	r8, ip
 800d3c4:	db1b      	blt.n	800d3fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800d3c6:	428f      	cmp	r7, r1
 800d3c8:	fa1f fc81 	uxth.w	ip, r1
 800d3cc:	88e1      	ldrh	r1, [r4, #6]
 800d3ce:	dc0d      	bgt.n	800d3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800d3d0:	ebaa 0c0c 	sub.w	ip, sl, ip
 800d3d4:	eba1 010c 	sub.w	r1, r1, ip
 800d3d8:	f8a4 9002 	strh.w	r9, [r4, #2]
 800d3dc:	80e1      	strh	r1, [r4, #6]
 800d3de:	4628      	mov	r0, r5
 800d3e0:	9904      	ldr	r1, [sp, #16]
 800d3e2:	3901      	subs	r1, #1
 800d3e4:	9104      	str	r1, [sp, #16]
 800d3e6:	3c08      	subs	r4, #8
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	e7d3      	b.n	800d394 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800d3ec:	4461      	add	r1, ip
 800d3ee:	b209      	sxth	r1, r1
 800d3f0:	4549      	cmp	r1, r9
 800d3f2:	dcf5      	bgt.n	800d3e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d3f4:	eba2 0c0c 	sub.w	ip, r2, ip
 800d3f8:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d3fc:	e7ef      	b.n	800d3de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d3fe:	428f      	cmp	r7, r1
 800d400:	dcee      	bgt.n	800d3e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d402:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800d406:	4461      	add	r1, ip
 800d408:	b209      	sxth	r1, r1
 800d40a:	4589      	cmp	r9, r1
 800d40c:	dbe8      	blt.n	800d3e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d40e:	4576      	cmp	r6, lr
 800d410:	fa1f fc8e 	uxth.w	ip, lr
 800d414:	88a1      	ldrh	r1, [r4, #4]
 800d416:	dc07      	bgt.n	800d428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800d418:	eba3 0c0c 	sub.w	ip, r3, ip
 800d41c:	eba1 010c 	sub.w	r1, r1, ip
 800d420:	f8a4 8000 	strh.w	r8, [r4]
 800d424:	80a1      	strh	r1, [r4, #4]
 800d426:	e7da      	b.n	800d3de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d428:	4461      	add	r1, ip
 800d42a:	b209      	sxth	r1, r1
 800d42c:	4588      	cmp	r8, r1
 800d42e:	dbd7      	blt.n	800d3e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d430:	9905      	ldr	r1, [sp, #20]
 800d432:	eba1 0c0c 	sub.w	ip, r1, ip
 800d436:	f8a4 c004 	strh.w	ip, [r4, #4]
 800d43a:	e7d0      	b.n	800d3de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d43c:	20015432 	.word	0x20015432
 800d440:	20015430 	.word	0x20015430
 800d444:	2d00      	cmp	r5, #0
 800d446:	f000 816d 	beq.w	800d724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d44a:	9b06      	ldr	r3, [sp, #24]
 800d44c:	445b      	add	r3, fp
 800d44e:	461c      	mov	r4, r3
 800d450:	9b02      	ldr	r3, [sp, #8]
 800d452:	3301      	adds	r3, #1
 800d454:	f000 8166 	beq.w	800d724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d458:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800d45c:	4629      	mov	r1, r5
 800d45e:	9803      	ldr	r0, [sp, #12]
 800d460:	f7ff fd16 	bl	800ce90 <_ZNK8touchgfx4Rect8includesERKS0_>
 800d464:	b120      	cbz	r0, 800d470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800d466:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d46a:	9801      	ldr	r0, [sp, #4]
 800d46c:	f7ff feb0 	bl	800d1d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d470:	9903      	ldr	r1, [sp, #12]
 800d472:	4628      	mov	r0, r5
 800d474:	f7ff fc99 	bl	800cdaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d478:	2800      	cmp	r0, #0
 800d47a:	f000 809c 	beq.w	800d5b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d47e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800d482:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d486:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d48a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d48c:	fa1f f189 	uxth.w	r1, r9
 800d490:	eb01 0c03 	add.w	ip, r1, r3
 800d494:	fa1f fa8c 	uxth.w	sl, ip
 800d498:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800d49c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800d4a0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800d4a4:	b283      	uxth	r3, r0
 800d4a6:	eb03 050c 	add.w	r5, r3, ip
 800d4aa:	b2ad      	uxth	r5, r5
 800d4ac:	9505      	str	r5, [sp, #20]
 800d4ae:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800d4b2:	9504      	str	r5, [sp, #16]
 800d4b4:	4548      	cmp	r0, r9
 800d4b6:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800d4ba:	f340 8099 	ble.w	800d5f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800d4be:	1a5b      	subs	r3, r3, r1
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	4596      	cmp	lr, r2
 800d4c4:	fa0f f08a 	sxth.w	r0, sl
 800d4c8:	b21e      	sxth	r6, r3
 800d4ca:	dd2e      	ble.n	800d52a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800d4cc:	9f02      	ldr	r7, [sp, #8]
 800d4ce:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800d4d2:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d4d6:	9f04      	ldr	r7, [sp, #16]
 800d4d8:	1a3f      	subs	r7, r7, r0
 800d4da:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800d4de:	fa1f fe8e 	uxth.w	lr, lr
 800d4e2:	b292      	uxth	r2, r2
 800d4e4:	ebae 0102 	sub.w	r1, lr, r2
 800d4e8:	44a6      	add	lr, r4
 800d4ea:	4402      	add	r2, r0
 800d4ec:	b289      	uxth	r1, r1
 800d4ee:	fa0f fe8e 	sxth.w	lr, lr
 800d4f2:	b212      	sxth	r2, r2
 800d4f4:	b20d      	sxth	r5, r1
 800d4f6:	ebae 0202 	sub.w	r2, lr, r2
 800d4fa:	436f      	muls	r7, r5
 800d4fc:	4372      	muls	r2, r6
 800d4fe:	4297      	cmp	r7, r2
 800d500:	db09      	blt.n	800d516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800d502:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800d506:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800d50a:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d50e:	449c      	add	ip, r3
 800d510:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d514:	e686      	b.n	800d224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d516:	4421      	add	r1, r4
 800d518:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800d51c:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800d520:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d524:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d528:	e67c      	b.n	800d224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d52a:	9f04      	ldr	r7, [sp, #16]
 800d52c:	42b8      	cmp	r0, r7
 800d52e:	da27      	bge.n	800d580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800d530:	9902      	ldr	r1, [sp, #8]
 800d532:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800d536:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800d53a:	eb05 010e 	add.w	r1, r5, lr
 800d53e:	fa1f f881 	uxth.w	r8, r1
 800d542:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800d546:	4411      	add	r1, r2
 800d548:	eba1 0108 	sub.w	r1, r1, r8
 800d54c:	b289      	uxth	r1, r1
 800d54e:	fa0f f988 	sxth.w	r9, r8
 800d552:	eba2 020e 	sub.w	r2, r2, lr
 800d556:	fa0f f881 	sxth.w	r8, r1
 800d55a:	1a3f      	subs	r7, r7, r0
 800d55c:	4372      	muls	r2, r6
 800d55e:	fb08 f707 	mul.w	r7, r8, r7
 800d562:	42ba      	cmp	r2, r7
 800d564:	dc06      	bgt.n	800d574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800d566:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800d56a:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800d56e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800d572:	e7ca      	b.n	800d50a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800d574:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800d578:	4429      	add	r1, r5
 800d57a:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d57e:	e651      	b.n	800d224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d580:	9805      	ldr	r0, [sp, #20]
 800d582:	ebaa 0000 	sub.w	r0, sl, r0
 800d586:	b280      	uxth	r0, r0
 800d588:	2d06      	cmp	r5, #6
 800d58a:	fa0f fe80 	sxth.w	lr, r0
 800d58e:	d817      	bhi.n	800d5c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800d590:	9b04      	ldr	r3, [sp, #16]
 800d592:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d596:	1c6b      	adds	r3, r5, #1
 800d598:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800d59c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800d5a0:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d5a4:	9b01      	ldr	r3, [sp, #4]
 800d5a6:	9801      	ldr	r0, [sp, #4]
 800d5a8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d5ac:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800d5b0:	805a      	strh	r2, [r3, #2]
 800d5b2:	809e      	strh	r6, [r3, #4]
 800d5b4:	80d9      	strh	r1, [r3, #6]
 800d5b6:	9b02      	ldr	r3, [sp, #8]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	9302      	str	r3, [sp, #8]
 800d5bc:	3c08      	subs	r4, #8
 800d5be:	e747      	b.n	800d450 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800d5c0:	9a02      	ldr	r2, [sp, #8]
 800d5c2:	45b6      	cmp	lr, r6
 800d5c4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d5c8:	db0d      	blt.n	800d5e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800d5ca:	449c      	add	ip, r3
 800d5cc:	fa1f fc8c 	uxth.w	ip, ip
 800d5d0:	445a      	add	r2, fp
 800d5d2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d5d6:	448c      	add	ip, r1
 800d5d8:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d5dc:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800d5e0:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800d5e4:	e61e      	b.n	800d224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d5e6:	445a      	add	r2, fp
 800d5e8:	4484      	add	ip, r0
 800d5ea:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800d5ee:	e78f      	b.n	800d510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d5f0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800d5f4:	fa1f f18e 	uxth.w	r1, lr
 800d5f8:	eb01 0806 	add.w	r8, r1, r6
 800d5fc:	b293      	uxth	r3, r2
 800d5fe:	fa1f f888 	uxth.w	r8, r8
 800d602:	9306      	str	r3, [sp, #24]
 800d604:	fa0f f388 	sxth.w	r3, r8
 800d608:	9307      	str	r3, [sp, #28]
 800d60a:	9f06      	ldr	r7, [sp, #24]
 800d60c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d610:	443b      	add	r3, r7
 800d612:	b29b      	uxth	r3, r3
 800d614:	4596      	cmp	lr, r2
 800d616:	9308      	str	r3, [sp, #32]
 800d618:	da24      	bge.n	800d664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800d61a:	9905      	ldr	r1, [sp, #20]
 800d61c:	eba3 0308 	sub.w	r3, r3, r8
 800d620:	ebaa 0401 	sub.w	r4, sl, r1
 800d624:	b2a4      	uxth	r4, r4
 800d626:	b29b      	uxth	r3, r3
 800d628:	b225      	sxth	r5, r4
 800d62a:	b219      	sxth	r1, r3
 800d62c:	eba2 020e 	sub.w	r2, r2, lr
 800d630:	eba9 0000 	sub.w	r0, r9, r0
 800d634:	436a      	muls	r2, r5
 800d636:	4348      	muls	r0, r1
 800d638:	4282      	cmp	r2, r0
 800d63a:	9a02      	ldr	r2, [sp, #8]
 800d63c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d640:	445a      	add	r2, fp
 800d642:	dc06      	bgt.n	800d652 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800d644:	9b07      	ldr	r3, [sp, #28]
 800d646:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800d64a:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800d64e:	44a4      	add	ip, r4
 800d650:	e75e      	b.n	800d510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d652:	9904      	ldr	r1, [sp, #16]
 800d654:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800d658:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800d65c:	4433      	add	r3, r6
 800d65e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d662:	e5df      	b.n	800d224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d664:	9f06      	ldr	r7, [sp, #24]
 800d666:	9b04      	ldr	r3, [sp, #16]
 800d668:	1bc9      	subs	r1, r1, r7
 800d66a:	fa0f f78a 	sxth.w	r7, sl
 800d66e:	b289      	uxth	r1, r1
 800d670:	429f      	cmp	r7, r3
 800d672:	fa0f fe81 	sxth.w	lr, r1
 800d676:	dd23      	ble.n	800d6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800d678:	9a05      	ldr	r2, [sp, #20]
 800d67a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d67e:	9d07      	ldr	r5, [sp, #28]
 800d680:	ebaa 0202 	sub.w	r2, sl, r2
 800d684:	b292      	uxth	r2, r2
 800d686:	eba5 0a03 	sub.w	sl, r5, r3
 800d68a:	b214      	sxth	r4, r2
 800d68c:	eba9 0000 	sub.w	r0, r9, r0
 800d690:	9b02      	ldr	r3, [sp, #8]
 800d692:	fb0e f000 	mul.w	r0, lr, r0
 800d696:	fb04 fa0a 	mul.w	sl, r4, sl
 800d69a:	00db      	lsls	r3, r3, #3
 800d69c:	4550      	cmp	r0, sl
 800d69e:	445b      	add	r3, fp
 800d6a0:	db03      	blt.n	800d6aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800d6a2:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800d6a6:	4494      	add	ip, r2
 800d6a8:	e732      	b.n	800d510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d6aa:	9a04      	ldr	r2, [sp, #16]
 800d6ac:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800d6b0:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800d6b4:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800d6b8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d6bc:	4431      	add	r1, r6
 800d6be:	e75c      	b.n	800d57a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800d6c0:	9b08      	ldr	r3, [sp, #32]
 800d6c2:	eba3 0308 	sub.w	r3, r3, r8
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	2d06      	cmp	r5, #6
 800d6ca:	b218      	sxth	r0, r3
 800d6cc:	d813      	bhi.n	800d6f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800d6ce:	9b07      	ldr	r3, [sp, #28]
 800d6d0:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800d6d4:	1c6b      	adds	r3, r5, #1
 800d6d6:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800d6da:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d6de:	9b01      	ldr	r3, [sp, #4]
 800d6e0:	9901      	ldr	r1, [sp, #4]
 800d6e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d6e6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800d6ea:	805a      	strh	r2, [r3, #2]
 800d6ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ee:	809a      	strh	r2, [r3, #4]
 800d6f0:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d6f4:	e75f      	b.n	800d5b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d6f6:	9c02      	ldr	r4, [sp, #8]
 800d6f8:	4570      	cmp	r0, lr
 800d6fa:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d6fe:	db0d      	blt.n	800d71c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800d700:	4431      	add	r1, r6
 800d702:	9b06      	ldr	r3, [sp, #24]
 800d704:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d708:	b289      	uxth	r1, r1
 800d70a:	445c      	add	r4, fp
 800d70c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d710:	4419      	add	r1, r3
 800d712:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800d716:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800d71a:	e583      	b.n	800d224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d71c:	445c      	add	r4, fp
 800d71e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800d722:	e79b      	b.n	800d65c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800d724:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d728:	1e65      	subs	r5, r4, #1
 800d72a:	b2ad      	uxth	r5, r5
 800d72c:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d730:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800d734:	42b5      	cmp	r5, r6
 800d736:	d044      	beq.n	800d7c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800d738:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d73c:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800d740:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800d744:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800d748:	4282      	cmp	r2, r0
 800d74a:	d11f      	bne.n	800d78c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d74c:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800d750:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d754:	459c      	cmp	ip, r3
 800d756:	d119      	bne.n	800d78c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d758:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800d75c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d760:	19d8      	adds	r0, r3, r7
 800d762:	b200      	sxth	r0, r0
 800d764:	4288      	cmp	r0, r1
 800d766:	d109      	bne.n	800d77c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800d768:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800d76c:	4413      	add	r3, r2
 800d76e:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d772:	4629      	mov	r1, r5
 800d774:	9801      	ldr	r0, [sp, #4]
 800d776:	f7ff fd2b 	bl	800d1d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d77a:	e003      	b.n	800d784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d77c:	4411      	add	r1, r2
 800d77e:	b209      	sxth	r1, r1
 800d780:	42b9      	cmp	r1, r7
 800d782:	d0f3      	beq.n	800d76c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800d784:	3d01      	subs	r5, #1
 800d786:	b2ad      	uxth	r5, r5
 800d788:	3c08      	subs	r4, #8
 800d78a:	e7d3      	b.n	800d734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d78c:	42b9      	cmp	r1, r7
 800d78e:	d1f9      	bne.n	800d784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d790:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800d794:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d798:	4299      	cmp	r1, r3
 800d79a:	d1f3      	bne.n	800d784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d79c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d7a0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d7a4:	181f      	adds	r7, r3, r0
 800d7a6:	b23f      	sxth	r7, r7
 800d7a8:	42ba      	cmp	r2, r7
 800d7aa:	d105      	bne.n	800d7b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800d7ac:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800d7b0:	440b      	add	r3, r1
 800d7b2:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d7b6:	e7dc      	b.n	800d772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800d7b8:	440a      	add	r2, r1
 800d7ba:	b212      	sxth	r2, r2
 800d7bc:	4290      	cmp	r0, r2
 800d7be:	d1e1      	bne.n	800d784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d7c0:	e7f6      	b.n	800d7b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800d7c2:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800d7c6:	2e07      	cmp	r6, #7
 800d7c8:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d7cc:	d812      	bhi.n	800d7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d7ce:	1c75      	adds	r5, r6, #1
 800d7d0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800d7d4:	9d01      	ldr	r5, [sp, #4]
 800d7d6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d7da:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800d7de:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800d7e2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800d7e6:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d7ea:	442c      	add	r4, r5
 800d7ec:	8061      	strh	r1, [r4, #2]
 800d7ee:	80a2      	strh	r2, [r4, #4]
 800d7f0:	80e3      	strh	r3, [r4, #6]
 800d7f2:	e581      	b.n	800d2f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d7f4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d7f8:	3e01      	subs	r6, #1
 800d7fa:	445c      	add	r4, fp
 800d7fc:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800d800:	f04f 37ff 	mov.w	r7, #4294967295
 800d804:	2500      	movs	r5, #0
 800d806:	9305      	str	r3, [sp, #20]
 800d808:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d80c:	9302      	str	r3, [sp, #8]
 800d80e:	1e72      	subs	r2, r6, #1
 800d810:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d814:	9304      	str	r3, [sp, #16]
 800d816:	4691      	mov	r9, r2
 800d818:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800d81c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d820:	bf14      	ite	ne
 800d822:	9905      	ldrne	r1, [sp, #20]
 800d824:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d828:	6818      	ldr	r0, [r3, #0]
 800d82a:	9207      	str	r2, [sp, #28]
 800d82c:	bf18      	it	ne
 800d82e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d832:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d836:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d83a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d83e:	9306      	str	r3, [sp, #24]
 800d840:	fb18 f801 	smulbb	r8, r8, r1
 800d844:	6859      	ldr	r1, [r3, #4]
 800d846:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d84a:	4671      	mov	r1, lr
 800d84c:	a80c      	add	r0, sp, #48	@ 0x30
 800d84e:	f7ff fb45 	bl	800cedc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d852:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800d856:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800d85a:	9b04      	ldr	r3, [sp, #16]
 800d85c:	9a02      	ldr	r2, [sp, #8]
 800d85e:	fb10 f001 	smulbb	r0, r0, r1
 800d862:	fb02 8803 	mla	r8, r2, r3, r8
 800d866:	eba0 0108 	sub.w	r1, r0, r8
 800d86a:	f04f 0c08 	mov.w	ip, #8
 800d86e:	fb90 f0fc 	sdiv	r0, r0, ip
 800d872:	4288      	cmp	r0, r1
 800d874:	dc20      	bgt.n	800d8b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d876:	4551      	cmp	r1, sl
 800d878:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d87c:	da03      	bge.n	800d886 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800d87e:	b1d9      	cbz	r1, 800d8b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d880:	468a      	mov	sl, r1
 800d882:	464f      	mov	r7, r9
 800d884:	4635      	mov	r5, r6
 800d886:	f109 39ff 	add.w	r9, r9, #4294967295
 800d88a:	f119 0f02 	cmn.w	r9, #2
 800d88e:	d1c5      	bne.n	800d81c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d890:	4616      	mov	r6, r2
 800d892:	3201      	adds	r2, #1
 800d894:	f1a4 0408 	sub.w	r4, r4, #8
 800d898:	d1b6      	bne.n	800d808 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d89a:	9b01      	ldr	r3, [sp, #4]
 800d89c:	b2ac      	uxth	r4, r5
 800d89e:	00ed      	lsls	r5, r5, #3
 800d8a0:	1958      	adds	r0, r3, r5
 800d8a2:	1c7b      	adds	r3, r7, #1
 800d8a4:	d10b      	bne.n	800d8be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800d8a6:	4601      	mov	r1, r0
 800d8a8:	9803      	ldr	r0, [sp, #12]
 800d8aa:	f7ff fb17 	bl	800cedc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	9801      	ldr	r0, [sp, #4]
 800d8b2:	f7ff fc8d 	bl	800d1d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d8b6:	e4b5      	b.n	800d224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d8b8:	464f      	mov	r7, r9
 800d8ba:	4635      	mov	r5, r6
 800d8bc:	e7ed      	b.n	800d89a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800d8be:	9b01      	ldr	r3, [sp, #4]
 800d8c0:	00ff      	lsls	r7, r7, #3
 800d8c2:	19d9      	adds	r1, r3, r7
 800d8c4:	f7ff fb0a 	bl	800cedc <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d8c8:	9b03      	ldr	r3, [sp, #12]
 800d8ca:	cb03      	ldmia	r3!, {r0, r1}
 800d8cc:	445f      	add	r7, fp
 800d8ce:	445d      	add	r5, fp
 800d8d0:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d8d4:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800d8d8:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800d8dc:	9b03      	ldr	r3, [sp, #12]
 800d8de:	6869      	ldr	r1, [r5, #4]
 800d8e0:	c303      	stmia	r3!, {r0, r1}
 800d8e2:	e7e4      	b.n	800d8ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800d8e4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e8:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800d8ec:	b09b      	sub	sp, #108	@ 0x6c
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f7fc f866 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	b948      	cbnz	r0, 800d90e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d902:	4620      	mov	r0, r4
 800d904:	4798      	blx	r3
 800d906:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800d90a:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800d90e:	4bc6      	ldr	r3, [pc, #792]	@ (800dc28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d03f      	beq.n	800d996 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d916:	4dc5      	ldr	r5, [pc, #788]	@ (800dc2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800d918:	4628      	mov	r0, r5
 800d91a:	f7fc f852 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d91e:	4606      	mov	r6, r0
 800d920:	2800      	cmp	r0, #0
 800d922:	d138      	bne.n	800d996 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d924:	4628      	mov	r0, r5
 800d926:	f7ff f96d 	bl	800cc04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d92a:	6823      	ldr	r3, [r4, #0]
 800d92c:	6829      	ldr	r1, [r5, #0]
 800d92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d930:	686a      	ldr	r2, [r5, #4]
 800d932:	4620      	mov	r0, r4
 800d934:	4798      	blx	r3
 800d936:	802e      	strh	r6, [r5, #0]
 800d938:	806e      	strh	r6, [r5, #2]
 800d93a:	80ae      	strh	r6, [r5, #4]
 800d93c:	80ee      	strh	r6, [r5, #6]
 800d93e:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800d942:	4dbb      	ldr	r5, [pc, #748]	@ (800dc30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800d944:	4640      	mov	r0, r8
 800d946:	f7ff fbeb 	bl	800d120 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d94a:	882e      	ldrh	r6, [r5, #0]
 800d94c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d950:	4633      	mov	r3, r6
 800d952:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d956:	42bb      	cmp	r3, r7
 800d958:	d224      	bcs.n	800d9a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d95a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800d95e:	2907      	cmp	r1, #7
 800d960:	d816      	bhi.n	800d990 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800d962:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d966:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800d96a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800d96e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800d972:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800d976:	1c4a      	adds	r2, r1, #1
 800d978:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800d97c:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800d980:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800d984:	f8a2 a002 	strh.w	sl, [r2, #2]
 800d988:	f8a2 e004 	strh.w	lr, [r2, #4]
 800d98c:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d990:	3301      	adds	r3, #1
 800d992:	b29b      	uxth	r3, r3
 800d994:	e7df      	b.n	800d956 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800d996:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1cf      	bne.n	800d93e <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800d99e:	b01b      	add	sp, #108	@ 0x6c
 800d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800d9a8:	42b3      	cmp	r3, r6
 800d9aa:	d90c      	bls.n	800d9c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800d9ac:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800d9b6:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800d9b8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800d9bc:	4620      	mov	r0, r4
 800d9be:	3601      	adds	r6, #1
 800d9c0:	47b8      	blx	r7
 800d9c2:	b2b6      	uxth	r6, r6
 800d9c4:	e7ee      	b.n	800d9a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d9c6:	4a9b      	ldr	r2, [pc, #620]	@ (800dc34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d9c8:	6813      	ldr	r3, [r2, #0]
 800d9ca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	4691      	mov	r9, r2
 800d9d2:	f040 80e2 	bne.w	800db9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800d9d6:	8829      	ldrh	r1, [r5, #0]
 800d9d8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d9dc:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800d9e0:	33ae      	adds	r3, #174	@ 0xae
 800d9e2:	2600      	movs	r6, #0
 800d9e4:	428f      	cmp	r7, r1
 800d9e6:	f103 0308 	add.w	r3, r3, #8
 800d9ea:	dd0a      	ble.n	800da02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800d9ec:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d9f0:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800d9f4:	4402      	add	r2, r0
 800d9f6:	b212      	sxth	r2, r2
 800d9f8:	4296      	cmp	r6, r2
 800d9fa:	bfb8      	it	lt
 800d9fc:	4616      	movlt	r6, r2
 800d9fe:	3101      	adds	r1, #1
 800da00:	e7f0      	b.n	800d9e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800da02:	4b8d      	ldr	r3, [pc, #564]	@ (800dc38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800da04:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800dc34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	2b0f      	cmp	r3, #15
 800da0c:	bf88      	it	hi
 800da0e:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800da12:	f04f 0300 	mov.w	r3, #0
 800da16:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800da1a:	bf98      	it	ls
 800da1c:	f04f 0b01 	movls.w	fp, #1
 800da20:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800da24:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800da28:	4b82      	ldr	r3, [pc, #520]	@ (800dc34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800da2a:	4438      	add	r0, r7
 800da2c:	b207      	sxth	r7, r0
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	42b7      	cmp	r7, r6
 800da32:	6803      	ldr	r3, [r0, #0]
 800da34:	f280 8083 	bge.w	800db3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800da38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800da3c:	4798      	blx	r3
 800da3e:	eb07 030b 	add.w	r3, r7, fp
 800da42:	4298      	cmp	r0, r3
 800da44:	da07      	bge.n	800da56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800da46:	42b0      	cmp	r0, r6
 800da48:	da05      	bge.n	800da56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800da4a:	4287      	cmp	r7, r0
 800da4c:	dd6c      	ble.n	800db28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800da4e:	2f00      	cmp	r7, #0
 800da50:	dd6a      	ble.n	800db28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800da52:	4630      	mov	r0, r6
 800da54:	e004      	b.n	800da60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800da56:	4287      	cmp	r7, r0
 800da58:	dcfb      	bgt.n	800da52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800da5a:	42b0      	cmp	r0, r6
 800da5c:	bfa8      	it	ge
 800da5e:	4630      	movge	r0, r6
 800da60:	4b76      	ldr	r3, [pc, #472]	@ (800dc3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800da62:	f8ad 7016 	strh.w	r7, [sp, #22]
 800da66:	1bc0      	subs	r0, r0, r7
 800da68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da6c:	882f      	ldrh	r7, [r5, #0]
 800da6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800da72:	2200      	movs	r2, #0
 800da74:	f8ad 2014 	strh.w	r2, [sp, #20]
 800da78:	f8ad 001a 	strh.w	r0, [sp, #26]
 800da7c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800da80:	42bb      	cmp	r3, r7
 800da82:	d9cd      	bls.n	800da20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800da84:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800da88:	ab07      	add	r3, sp, #28
 800da8a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800da8e:	6851      	ldr	r1, [r2, #4]
 800da90:	c303      	stmia	r3!, {r0, r1}
 800da92:	a905      	add	r1, sp, #20
 800da94:	a807      	add	r0, sp, #28
 800da96:	f7ff f988 	bl	800cdaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d04c      	beq.n	800db38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800da9e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800daa2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800daa6:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800daaa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800daae:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800dab2:	9302      	str	r3, [sp, #8]
 800dab4:	4686      	mov	lr, r0
 800dab6:	4290      	cmp	r0, r2
 800dab8:	4450      	add	r0, sl
 800daba:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800dabe:	bfb8      	it	lt
 800dac0:	4696      	movlt	lr, r2
 800dac2:	4452      	add	r2, sl
 800dac4:	4299      	cmp	r1, r3
 800dac6:	b280      	uxth	r0, r0
 800dac8:	b292      	uxth	r2, r2
 800daca:	468c      	mov	ip, r1
 800dacc:	fa0f fa82 	sxth.w	sl, r2
 800dad0:	bfb8      	it	lt
 800dad2:	469c      	movlt	ip, r3
 800dad4:	b203      	sxth	r3, r0
 800dad6:	4553      	cmp	r3, sl
 800dad8:	bfb8      	it	lt
 800dada:	4602      	movlt	r2, r0
 800dadc:	eba2 020e 	sub.w	r2, r2, lr
 800dae0:	f8ad 2020 	strh.w	r2, [sp, #32]
 800dae4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800dae8:	9b02      	ldr	r3, [sp, #8]
 800daea:	f8ad e01c 	strh.w	lr, [sp, #28]
 800daee:	4411      	add	r1, r2
 800daf0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800daf4:	f8ad c01e 	strh.w	ip, [sp, #30]
 800daf8:	4413      	add	r3, r2
 800dafa:	b289      	uxth	r1, r1
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	b208      	sxth	r0, r1
 800db00:	b21a      	sxth	r2, r3
 800db02:	4290      	cmp	r0, r2
 800db04:	bfb8      	it	lt
 800db06:	460b      	movlt	r3, r1
 800db08:	eba3 030c 	sub.w	r3, r3, ip
 800db0c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800db10:	a807      	add	r0, sp, #28
 800db12:	f7fb ff56 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800db16:	b920      	cbnz	r0, 800db22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800db18:	6823      	ldr	r3, [r4, #0]
 800db1a:	a907      	add	r1, sp, #28
 800db1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db1e:	4620      	mov	r0, r4
 800db20:	4798      	blx	r3
 800db22:	3701      	adds	r7, #1
 800db24:	b2bf      	uxth	r7, r7
 800db26:	e7a9      	b.n	800da7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800db28:	f8d9 0000 	ldr.w	r0, [r9]
 800db2c:	6803      	ldr	r3, [r0, #0]
 800db2e:	2101      	movs	r1, #1
 800db30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db34:	4798      	blx	r3
 800db36:	e773      	b.n	800da20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800db38:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800db3c:	e7e8      	b.n	800db10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800db3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db40:	4798      	blx	r3
 800db42:	4b3f      	ldr	r3, [pc, #252]	@ (800dc40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	f43f af29 	beq.w	800d99e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800db4c:	2300      	movs	r3, #0
 800db4e:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800db52:	882b      	ldrh	r3, [r5, #0]
 800db54:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800db58:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800db5c:	42ab      	cmp	r3, r5
 800db5e:	f4bf af1e 	bcs.w	800d99e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800db62:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800db66:	2907      	cmp	r1, #7
 800db68:	d814      	bhi.n	800db94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800db6a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800db6e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800db72:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800db76:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800db7a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800db7e:	1c4a      	adds	r2, r1, #1
 800db80:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800db84:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800db88:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800db8c:	f8a2 c002 	strh.w	ip, [r2, #2]
 800db90:	8097      	strh	r7, [r2, #4]
 800db92:	80d6      	strh	r6, [r2, #6]
 800db94:	3301      	adds	r3, #1
 800db96:	b29b      	uxth	r3, r3
 800db98:	e7e0      	b.n	800db5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	f040 8133 	bne.w	800de06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800dba0:	4b28      	ldr	r3, [pc, #160]	@ (800dc44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800dbaa:	f000 8098 	beq.w	800dcde <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800dbae:	882a      	ldrh	r2, [r5, #0]
 800dbb0:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800dbb4:	3201      	adds	r2, #1
 800dbb6:	b292      	uxth	r2, r2
 800dbb8:	2900      	cmp	r1, #0
 800dbba:	d0c2      	beq.n	800db42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800dbbc:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800dbc0:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800dbc4:	441e      	add	r6, r3
 800dbc6:	b236      	sxth	r6, r6
 800dbc8:	4694      	mov	ip, r2
 800dbca:	f04f 0900 	mov.w	r9, #0
 800dbce:	fa1f f38c 	uxth.w	r3, ip
 800dbd2:	4299      	cmp	r1, r3
 800dbd4:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800dbd8:	f240 80bf 	bls.w	800dd5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800dbdc:	4427      	add	r7, r4
 800dbde:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800dbe2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800dbe6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800dbea:	4283      	cmp	r3, r0
 800dbec:	f340 80a1 	ble.w	800dd32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800dbf0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800dbf4:	4406      	add	r6, r0
 800dbf6:	b236      	sxth	r6, r6
 800dbf8:	429e      	cmp	r6, r3
 800dbfa:	bfa8      	it	ge
 800dbfc:	461e      	movge	r6, r3
 800dbfe:	46e1      	mov	r9, ip
 800dc00:	f10c 0c01 	add.w	ip, ip, #1
 800dc04:	e7e3      	b.n	800dbce <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800dc06:	d10a      	bne.n	800dc1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800dc08:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800dc0c:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800dc10:	4562      	cmp	r2, ip
 800dc12:	bfb8      	it	lt
 800dc14:	4662      	movlt	r2, ip
 800dc16:	4288      	cmp	r0, r1
 800dc18:	bfb8      	it	lt
 800dc1a:	461f      	movlt	r7, r3
 800dc1c:	e087      	b.n	800dd2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800dc1e:	428a      	cmp	r2, r1
 800dc20:	bfb8      	it	lt
 800dc22:	460a      	movlt	r2, r1
 800dc24:	e083      	b.n	800dd2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800dc26:	bf00      	nop
 800dc28:	20015474 	.word	0x20015474
 800dc2c:	20015480 	.word	0x20015480
 800dc30:	20000088 	.word	0x20000088
 800dc34:	2001543c 	.word	0x2001543c
 800dc38:	20015432 	.word	0x20015432
 800dc3c:	20015430 	.word	0x20015430
 800dc40:	2001543a 	.word	0x2001543a
 800dc44:	20015434 	.word	0x20015434
 800dc48:	19a1      	adds	r1, r4, r6
 800dc4a:	ab07      	add	r3, sp, #28
 800dc4c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800dc50:	6849      	ldr	r1, [r1, #4]
 800dc52:	c303      	stmia	r3!, {r0, r1}
 800dc54:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800dc58:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dc5c:	2b13      	cmp	r3, #19
 800dc5e:	bfd8      	it	le
 800dc60:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800dc64:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dc68:	440b      	add	r3, r1
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	a807      	add	r0, sp, #28
 800dc6e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dc72:	f7fe ffe1 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dc76:	a807      	add	r0, sp, #28
 800dc78:	f7fb fea3 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc7c:	bb78      	cbnz	r0, 800dcde <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800dc7e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800dc82:	f8d9 0000 	ldr.w	r0, [r9]
 800dc86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800dc8a:	f8d0 e000 	ldr.w	lr, [r0]
 800dc8e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dc92:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800dc96:	f1bc 0f14 	cmp.w	ip, #20
 800dc9a:	bfa8      	it	ge
 800dc9c:	f04f 0c14 	movge.w	ip, #20
 800dca0:	fa1f fc8c 	uxth.w	ip, ip
 800dca4:	f8cd c000 	str.w	ip, [sp]
 800dca8:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800dcac:	47d8      	blx	fp
 800dcae:	4683      	mov	fp, r0
 800dcb0:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800dcb4:	a807      	add	r0, sp, #28
 800dcb6:	f7fe ffa5 	bl	800cc04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	4426      	add	r6, r4
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dcc2:	a907      	add	r1, sp, #28
 800dcc4:	4798      	blx	r3
 800dcc6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800dcca:	eba0 000b 	sub.w	r0, r0, fp
 800dcce:	b200      	sxth	r0, r0
 800dcd0:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800dcd4:	b918      	cbnz	r0, 800dcde <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800dcd6:	b2b9      	uxth	r1, r7
 800dcd8:	4650      	mov	r0, sl
 800dcda:	f7ff fa79 	bl	800d1d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800dcde:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800dce2:	f1bb 0f00 	cmp.w	fp, #0
 800dce6:	f43f af2c 	beq.w	800db42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800dcea:	882b      	ldrh	r3, [r5, #0]
 800dcec:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	2700      	movs	r7, #0
 800dcf6:	b299      	uxth	r1, r3
 800dcf8:	458b      	cmp	fp, r1
 800dcfa:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800dcfe:	d9a3      	bls.n	800dc48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800dd00:	4426      	add	r6, r4
 800dd02:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800dd06:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800dd0a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800dd0e:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800dd12:	4408      	add	r0, r1
 800dd14:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800dd18:	4461      	add	r1, ip
 800dd1a:	b200      	sxth	r0, r0
 800dd1c:	b209      	sxth	r1, r1
 800dd1e:	4288      	cmp	r0, r1
 800dd20:	f6bf af71 	bge.w	800dc06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800dd24:	4584      	cmp	ip, r0
 800dd26:	4662      	mov	r2, ip
 800dd28:	461f      	mov	r7, r3
 800dd2a:	bfb8      	it	lt
 800dd2c:	4602      	movlt	r2, r0
 800dd2e:	3301      	adds	r3, #1
 800dd30:	e7e1      	b.n	800dcf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800dd32:	d10e      	bne.n	800dd52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800dd34:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800dd38:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800dd3c:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800dd40:	4473      	add	r3, lr
 800dd42:	b21b      	sxth	r3, r3
 800dd44:	429e      	cmp	r6, r3
 800dd46:	bfa8      	it	ge
 800dd48:	461e      	movge	r6, r3
 800dd4a:	4287      	cmp	r7, r0
 800dd4c:	bfb8      	it	lt
 800dd4e:	46e1      	movlt	r9, ip
 800dd50:	e756      	b.n	800dc00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800dd52:	4286      	cmp	r6, r0
 800dd54:	bfa8      	it	ge
 800dd56:	4606      	movge	r6, r0
 800dd58:	e752      	b.n	800dc00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800dd5a:	eb0a 0007 	add.w	r0, sl, r7
 800dd5e:	4427      	add	r7, r4
 800dd60:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800dd64:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800dd68:	f1bb 0f13 	cmp.w	fp, #19
 800dd6c:	bfde      	ittt	le
 800dd6e:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800dd72:	445e      	addle	r6, fp
 800dd74:	b236      	sxthle	r6, r6
 800dd76:	f7fb fe24 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dd7a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	f47f af1a 	bne.w	800dbb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800dd84:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800dd88:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800dd8c:	482a      	ldr	r0, [pc, #168]	@ (800de38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800dd8e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800dd92:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800dd96:	6800      	ldr	r0, [r0, #0]
 800dd98:	f8ad 101c 	strh.w	r1, [sp, #28]
 800dd9c:	1ab6      	subs	r6, r6, r2
 800dd9e:	2e14      	cmp	r6, #20
 800dda0:	f8ad 201e 	strh.w	r2, [sp, #30]
 800dda4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dda8:	bfa8      	it	ge
 800ddaa:	2614      	movge	r6, #20
 800ddac:	f8d0 c000 	ldr.w	ip, [r0]
 800ddb0:	b2b6      	uxth	r6, r6
 800ddb2:	fa1f fb8b 	uxth.w	fp, fp
 800ddb6:	455e      	cmp	r6, fp
 800ddb8:	bf94      	ite	ls
 800ddba:	9600      	strls	r6, [sp, #0]
 800ddbc:	f8cd b000 	strhi.w	fp, [sp]
 800ddc0:	b292      	uxth	r2, r2
 800ddc2:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	b289      	uxth	r1, r1
 800ddca:	47b0      	blx	r6
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800ddd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddd4:	a907      	add	r1, sp, #28
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	4798      	blx	r3
 800ddda:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800ddde:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800dde2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800dde6:	1a5b      	subs	r3, r3, r1
 800dde8:	440a      	add	r2, r1
 800ddea:	b21b      	sxth	r3, r3
 800ddec:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800ddf0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f47f aeda 	bne.w	800dbae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ddfa:	fa1f f189 	uxth.w	r1, r9
 800ddfe:	4650      	mov	r0, sl
 800de00:	f7ff f9e6 	bl	800d1d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800de04:	e6d3      	b.n	800dbae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800de06:	882e      	ldrh	r6, [r5, #0]
 800de08:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800de0c:	42b3      	cmp	r3, r6
 800de0e:	f67f ae98 	bls.w	800db42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800de12:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800de16:	ab07      	add	r3, sp, #28
 800de18:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800de1c:	6851      	ldr	r1, [r2, #4]
 800de1e:	c303      	stmia	r3!, {r0, r1}
 800de20:	a807      	add	r0, sp, #28
 800de22:	f7fb fdce 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800de26:	b920      	cbnz	r0, 800de32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800de28:	6823      	ldr	r3, [r4, #0]
 800de2a:	a907      	add	r1, sp, #28
 800de2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de2e:	4620      	mov	r0, r4
 800de30:	4798      	blx	r3
 800de32:	3601      	adds	r6, #1
 800de34:	b2b6      	uxth	r6, r6
 800de36:	e7e7      	b.n	800de08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800de38:	2001543c 	.word	0x2001543c

0800de3c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800de3c:	4b03      	ldr	r3, [pc, #12]	@ (800de4c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800de3e:	2200      	movs	r2, #0
 800de40:	801a      	strh	r2, [r3, #0]
 800de42:	805a      	strh	r2, [r3, #2]
 800de44:	809a      	strh	r2, [r3, #4]
 800de46:	80da      	strh	r2, [r3, #6]
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	20015480 	.word	0x20015480

0800de50 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	4606      	mov	r6, r0
 800de56:	b09d      	sub	sp, #116	@ 0x74
 800de58:	a803      	add	r0, sp, #12
 800de5a:	4614      	mov	r4, r2
 800de5c:	468a      	mov	sl, r1
 800de5e:	461d      	mov	r5, r3
 800de60:	f000 fdad 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800de64:	6833      	ldr	r3, [r6, #0]
 800de66:	4630      	mov	r0, r6
 800de68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de6a:	4798      	blx	r3
 800de6c:	6833      	ldr	r3, [r6, #0]
 800de6e:	4607      	mov	r7, r0
 800de70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de72:	4630      	mov	r0, r6
 800de74:	4798      	blx	r3
 800de76:	462a      	mov	r2, r5
 800de78:	9000      	str	r0, [sp, #0]
 800de7a:	4621      	mov	r1, r4
 800de7c:	463b      	mov	r3, r7
 800de7e:	a803      	add	r0, sp, #12
 800de80:	f000 fdf8 	bl	800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800de84:	2500      	movs	r5, #0
 800de86:	462c      	mov	r4, r5
 800de88:	46a9      	mov	r9, r5
 800de8a:	46a8      	mov	r8, r5
 800de8c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800de90:	2300      	movs	r3, #0
 800de92:	9302      	str	r3, [sp, #8]
 800de94:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800de98:	429c      	cmp	r4, r3
 800de9a:	d002      	beq.n	800dea2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800de9c:	455c      	cmp	r4, fp
 800de9e:	bf18      	it	ne
 800dea0:	4625      	movne	r5, r4
 800dea2:	ab02      	add	r3, sp, #8
 800dea4:	4632      	mov	r2, r6
 800dea6:	4651      	mov	r1, sl
 800dea8:	a803      	add	r0, sp, #12
 800deaa:	f001 f90f 	bl	800f0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800deae:	4604      	mov	r4, r0
 800deb0:	b108      	cbz	r0, 800deb6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800deb2:	280a      	cmp	r0, #10
 800deb4:	d10a      	bne.n	800decc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800deb6:	45c1      	cmp	r9, r8
 800deb8:	bf38      	it	cc
 800deba:	46c1      	movcc	r9, r8
 800debc:	f04f 0800 	mov.w	r8, #0
 800dec0:	2c00      	cmp	r4, #0
 800dec2:	d1e5      	bne.n	800de90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800dec4:	4648      	mov	r0, r9
 800dec6:	b01d      	add	sp, #116	@ 0x74
 800dec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800decc:	9a02      	ldr	r2, [sp, #8]
 800dece:	2a00      	cmp	r2, #0
 800ded0:	d0de      	beq.n	800de90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800ded2:	7b57      	ldrb	r7, [r2, #13]
 800ded4:	6833      	ldr	r3, [r6, #0]
 800ded6:	8894      	ldrh	r4, [r2, #4]
 800ded8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deda:	007f      	lsls	r7, r7, #1
 800dedc:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800dee0:	7a97      	ldrb	r7, [r2, #10]
 800dee2:	4629      	mov	r1, r5
 800dee4:	4307      	orrs	r7, r0
 800dee6:	4630      	mov	r0, r6
 800dee8:	4798      	blx	r3
 800deea:	4438      	add	r0, r7
 800deec:	4480      	add	r8, r0
 800deee:	fa1f f888 	uxth.w	r8, r8
 800def2:	e7e5      	b.n	800dec0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800def4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800def4:	b508      	push	{r3, lr}
 800def6:	6803      	ldr	r3, [r0, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4798      	blx	r3
 800defc:	b128      	cbz	r0, 800df0a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800defe:	7b43      	ldrb	r3, [r0, #13]
 800df00:	7a80      	ldrb	r0, [r0, #10]
 800df02:	005b      	lsls	r3, r3, #1
 800df04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df08:	4318      	orrs	r0, r3
 800df0a:	bd08      	pop	{r3, pc}

0800df0c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800df0c:	b40e      	push	{r1, r2, r3}
 800df0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df10:	b09e      	sub	sp, #120	@ 0x78
 800df12:	ab23      	add	r3, sp, #140	@ 0x8c
 800df14:	4605      	mov	r5, r0
 800df16:	f853 4b04 	ldr.w	r4, [r3], #4
 800df1a:	9303      	str	r3, [sp, #12]
 800df1c:	a805      	add	r0, sp, #20
 800df1e:	f000 fd4e 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800df22:	682b      	ldr	r3, [r5, #0]
 800df24:	4628      	mov	r0, r5
 800df26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df28:	4798      	blx	r3
 800df2a:	682b      	ldr	r3, [r5, #0]
 800df2c:	4606      	mov	r6, r0
 800df2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df30:	4628      	mov	r0, r5
 800df32:	4798      	blx	r3
 800df34:	4633      	mov	r3, r6
 800df36:	ae1e      	add	r6, sp, #120	@ 0x78
 800df38:	4621      	mov	r1, r4
 800df3a:	9000      	str	r0, [sp, #0]
 800df3c:	9a03      	ldr	r2, [sp, #12]
 800df3e:	2400      	movs	r4, #0
 800df40:	a805      	add	r0, sp, #20
 800df42:	f000 fd97 	bl	800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800df46:	f846 4d68 	str.w	r4, [r6, #-104]!
 800df4a:	462a      	mov	r2, r5
 800df4c:	4633      	mov	r3, r6
 800df4e:	4621      	mov	r1, r4
 800df50:	a805      	add	r0, sp, #20
 800df52:	f001 f8bb 	bl	800f0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df56:	b1f0      	cbz	r0, 800df96 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800df58:	280a      	cmp	r0, #10
 800df5a:	d018      	beq.n	800df8e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800df5c:	9f04      	ldr	r7, [sp, #16]
 800df5e:	b1b7      	cbz	r7, 800df8e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800df60:	7b78      	ldrb	r0, [r7, #13]
 800df62:	7a3b      	ldrb	r3, [r7, #8]
 800df64:	88ea      	ldrh	r2, [r5, #6]
 800df66:	00c1      	lsls	r1, r0, #3
 800df68:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800df6c:	4319      	orrs	r1, r3
 800df6e:	0643      	lsls	r3, r0, #25
 800df70:	bf44      	itt	mi
 800df72:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800df76:	b219      	sxthmi	r1, r3
 800df78:	0100      	lsls	r0, r0, #4
 800df7a:	79fb      	ldrb	r3, [r7, #7]
 800df7c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800df80:	4303      	orrs	r3, r0
 800df82:	4413      	add	r3, r2
 800df84:	1a5b      	subs	r3, r3, r1
 800df86:	b21b      	sxth	r3, r3
 800df88:	429c      	cmp	r4, r3
 800df8a:	bfb8      	it	lt
 800df8c:	461c      	movlt	r4, r3
 800df8e:	4633      	mov	r3, r6
 800df90:	462a      	mov	r2, r5
 800df92:	2100      	movs	r1, #0
 800df94:	e7dc      	b.n	800df50 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800df96:	b2a0      	uxth	r0, r4
 800df98:	b01e      	add	sp, #120	@ 0x78
 800df9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df9e:	b003      	add	sp, #12
 800dfa0:	4770      	bx	lr

0800dfa2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800dfa2:	7a43      	ldrb	r3, [r0, #9]
 800dfa4:	8880      	ldrh	r0, [r0, #4]
 800dfa6:	4418      	add	r0, r3
 800dfa8:	b280      	uxth	r0, r0
 800dfaa:	4770      	bx	lr

0800dfac <_ZNK8touchgfx4Font13getFontHeightEv>:
 800dfac:	6803      	ldr	r3, [r0, #0]
 800dfae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfb0:	4718      	bx	r3

0800dfb2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800dfb2:	b40e      	push	{r1, r2, r3}
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	b09d      	sub	sp, #116	@ 0x74
 800dfb8:	ab21      	add	r3, sp, #132	@ 0x84
 800dfba:	4604      	mov	r4, r0
 800dfbc:	f853 5b04 	ldr.w	r5, [r3], #4
 800dfc0:	9302      	str	r3, [sp, #8]
 800dfc2:	a803      	add	r0, sp, #12
 800dfc4:	f000 fcfb 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800dfc8:	6823      	ldr	r3, [r4, #0]
 800dfca:	4620      	mov	r0, r4
 800dfcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dfce:	4798      	blx	r3
 800dfd0:	6823      	ldr	r3, [r4, #0]
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	4798      	blx	r3
 800dfda:	4633      	mov	r3, r6
 800dfdc:	9000      	str	r0, [sp, #0]
 800dfde:	9a02      	ldr	r2, [sp, #8]
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	a803      	add	r0, sp, #12
 800dfe4:	f000 fd46 	bl	800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dfe8:	a803      	add	r0, sp, #12
 800dfea:	f001 f93d 	bl	800f268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dfee:	2401      	movs	r4, #1
 800dff0:	b2a3      	uxth	r3, r4
 800dff2:	b140      	cbz	r0, 800e006 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800dff4:	280a      	cmp	r0, #10
 800dff6:	bf08      	it	eq
 800dff8:	3301      	addeq	r3, #1
 800dffa:	a803      	add	r0, sp, #12
 800dffc:	bf08      	it	eq
 800dffe:	b21c      	sxtheq	r4, r3
 800e000:	f001 f932 	bl	800f268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e004:	e7f4      	b.n	800dff0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800e006:	4618      	mov	r0, r3
 800e008:	b01d      	add	sp, #116	@ 0x74
 800e00a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e00e:	b003      	add	sp, #12
 800e010:	4770      	bx	lr

0800e012 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800e012:	b40e      	push	{r1, r2, r3}
 800e014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e016:	b09e      	sub	sp, #120	@ 0x78
 800e018:	ab23      	add	r3, sp, #140	@ 0x8c
 800e01a:	4604      	mov	r4, r0
 800e01c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e020:	9303      	str	r3, [sp, #12]
 800e022:	a805      	add	r0, sp, #20
 800e024:	f000 fccb 	bl	800e9be <_ZN8touchgfx12TextProviderC1Ev>
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	4620      	mov	r0, r4
 800e02c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e02e:	4798      	blx	r3
 800e030:	6823      	ldr	r3, [r4, #0]
 800e032:	4606      	mov	r6, r0
 800e034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e036:	4620      	mov	r0, r4
 800e038:	4798      	blx	r3
 800e03a:	4633      	mov	r3, r6
 800e03c:	4629      	mov	r1, r5
 800e03e:	9000      	str	r0, [sp, #0]
 800e040:	9a03      	ldr	r2, [sp, #12]
 800e042:	a805      	add	r0, sp, #20
 800e044:	ad1e      	add	r5, sp, #120	@ 0x78
 800e046:	f000 fd15 	bl	800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e04a:	2100      	movs	r1, #0
 800e04c:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e050:	4622      	mov	r2, r4
 800e052:	462b      	mov	r3, r5
 800e054:	a805      	add	r0, sp, #20
 800e056:	f001 f839 	bl	800f0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e05a:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800e05e:	b1d8      	cbz	r0, 800e098 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800e060:	280a      	cmp	r0, #10
 800e062:	d012      	beq.n	800e08a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e064:	9804      	ldr	r0, [sp, #16]
 800e066:	b180      	cbz	r0, 800e08a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e068:	7b47      	ldrb	r7, [r0, #13]
 800e06a:	88e2      	ldrh	r2, [r4, #6]
 800e06c:	00fb      	lsls	r3, r7, #3
 800e06e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e072:	7a03      	ldrb	r3, [r0, #8]
 800e074:	430b      	orrs	r3, r1
 800e076:	0679      	lsls	r1, r7, #25
 800e078:	bf44      	itt	mi
 800e07a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e07e:	b21b      	sxthmi	r3, r3
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	b21b      	sxth	r3, r3
 800e084:	429e      	cmp	r6, r3
 800e086:	bfa8      	it	ge
 800e088:	461e      	movge	r6, r3
 800e08a:	462b      	mov	r3, r5
 800e08c:	4622      	mov	r2, r4
 800e08e:	2100      	movs	r1, #0
 800e090:	a805      	add	r0, sp, #20
 800e092:	f001 f81b 	bl	800f0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e096:	e7e2      	b.n	800e05e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800e098:	4630      	mov	r0, r6
 800e09a:	b01e      	add	sp, #120	@ 0x78
 800e09c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e0a0:	b003      	add	sp, #12
 800e0a2:	4770      	bx	lr

0800e0a4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800e0a4:	b513      	push	{r0, r1, r4, lr}
 800e0a6:	6803      	ldr	r3, [r0, #0]
 800e0a8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e0ac:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e0b0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e0b4:	2400      	movs	r4, #0
 800e0b6:	9400      	str	r4, [sp, #0]
 800e0b8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	4669      	mov	r1, sp
 800e0c0:	4798      	blx	r3
 800e0c2:	b002      	add	sp, #8
 800e0c4:	bd10      	pop	{r4, pc}

0800e0c6 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800e0c6:	b538      	push	{r3, r4, r5, lr}
 800e0c8:	680b      	ldr	r3, [r1, #0]
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	4798      	blx	r3
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d8:	4629      	mov	r1, r5
 800e0da:	4798      	blx	r3
 800e0dc:	4628      	mov	r0, r5
 800e0de:	bd38      	pop	{r3, r4, r5, pc}

0800e0e0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800e0e0:	b410      	push	{r4}
 800e0e2:	880a      	ldrh	r2, [r1, #0]
 800e0e4:	8884      	ldrh	r4, [r0, #4]
 800e0e6:	4422      	add	r2, r4
 800e0e8:	800a      	strh	r2, [r1, #0]
 800e0ea:	88c4      	ldrh	r4, [r0, #6]
 800e0ec:	884a      	ldrh	r2, [r1, #2]
 800e0ee:	4422      	add	r2, r4
 800e0f0:	804a      	strh	r2, [r1, #2]
 800e0f2:	6940      	ldr	r0, [r0, #20]
 800e0f4:	b120      	cbz	r0, 800e100 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800e0f6:	6803      	ldr	r3, [r0, #0]
 800e0f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0fe:	4718      	bx	r3
 800e100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e104:	4770      	bx	lr

0800e106 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800e106:	b570      	push	{r4, r5, r6, lr}
 800e108:	8882      	ldrh	r2, [r0, #4]
 800e10a:	880b      	ldrh	r3, [r1, #0]
 800e10c:	4413      	add	r3, r2
 800e10e:	800b      	strh	r3, [r1, #0]
 800e110:	88c2      	ldrh	r2, [r0, #6]
 800e112:	884b      	ldrh	r3, [r1, #2]
 800e114:	460c      	mov	r4, r1
 800e116:	4413      	add	r3, r2
 800e118:	804b      	strh	r3, [r1, #2]
 800e11a:	4605      	mov	r5, r0
 800e11c:	1d01      	adds	r1, r0, #4
 800e11e:	4620      	mov	r0, r4
 800e120:	f7fb fc0c 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800e124:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	dd0b      	ble.n	800e144 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e12c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e130:	2b00      	cmp	r3, #0
 800e132:	dd07      	ble.n	800e144 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e134:	6968      	ldr	r0, [r5, #20]
 800e136:	b128      	cbz	r0, 800e144 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e138:	6803      	ldr	r3, [r0, #0]
 800e13a:	4621      	mov	r1, r4
 800e13c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e13e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e142:	4718      	bx	r3
 800e144:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e148 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	8882      	ldrh	r2, [r0, #4]
 800e14c:	880b      	ldrh	r3, [r1, #0]
 800e14e:	4413      	add	r3, r2
 800e150:	800b      	strh	r3, [r1, #0]
 800e152:	88c2      	ldrh	r2, [r0, #6]
 800e154:	884b      	ldrh	r3, [r1, #2]
 800e156:	460c      	mov	r4, r1
 800e158:	4413      	add	r3, r2
 800e15a:	804b      	strh	r3, [r1, #2]
 800e15c:	4605      	mov	r5, r0
 800e15e:	1d01      	adds	r1, r0, #4
 800e160:	4620      	mov	r0, r4
 800e162:	f7fb fbeb 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800e166:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	dd19      	ble.n	800e1a2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e16e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e172:	2b00      	cmp	r3, #0
 800e174:	dd15      	ble.n	800e1a2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e176:	6968      	ldr	r0, [r5, #20]
 800e178:	b128      	cbz	r0, 800e186 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800e17a:	6803      	ldr	r3, [r0, #0]
 800e17c:	4621      	mov	r1, r4
 800e17e:	691b      	ldr	r3, [r3, #16]
 800e180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e184:	4718      	bx	r3
 800e186:	4b07      	ldr	r3, [pc, #28]	@ (800e1a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3304      	adds	r3, #4
 800e18c:	429d      	cmp	r5, r3
 800e18e:	d108      	bne.n	800e1a2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e190:	f7fe feea 	bl	800cf68 <_ZN8touchgfx11Application11getInstanceEv>
 800e194:	6803      	ldr	r3, [r0, #0]
 800e196:	6821      	ldr	r1, [r4, #0]
 800e198:	6862      	ldr	r2, [r4, #4]
 800e19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e19c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1a0:	4718      	bx	r3
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}
 800e1a4:	20015478 	.word	0x20015478

0800e1a8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800e1a8:	b570      	push	{r4, r5, r6, lr}
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	4616      	mov	r6, r2
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	b901      	cbnz	r1, 800e1b4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800e1b2:	b192      	cbz	r2, 800e1da <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	699b      	ldr	r3, [r3, #24]
 800e1ba:	4798      	blx	r3
 800e1bc:	88e2      	ldrh	r2, [r4, #6]
 800e1be:	88a1      	ldrh	r1, [r4, #4]
 800e1c0:	4432      	add	r2, r6
 800e1c2:	4429      	add	r1, r5
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	b212      	sxth	r2, r2
 800e1c8:	b209      	sxth	r1, r1
 800e1ca:	f7f5 f825 	bl	8003218 <_ZN8touchgfx8Drawable5setXYEss>
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	699b      	ldr	r3, [r3, #24]
 800e1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1d8:	4718      	bx	r3
 800e1da:	bd70      	pop	{r4, r5, r6, pc}

0800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800e1dc:	b510      	push	{r4, lr}
 800e1de:	4604      	mov	r4, r0
 800e1e0:	4608      	mov	r0, r1
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	8023      	strh	r3, [r4, #0]
 800e1e6:	8063      	strh	r3, [r4, #2]
 800e1e8:	6803      	ldr	r3, [r0, #0]
 800e1ea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e1ee:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800e1f2:	80a1      	strh	r1, [r4, #4]
 800e1f4:	80e2      	strh	r2, [r4, #6]
 800e1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f8:	4621      	mov	r1, r4
 800e1fa:	4798      	blx	r3
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	bd10      	pop	{r4, pc}

0800e200 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800e200:	b530      	push	{r4, r5, lr}
 800e202:	8083      	strh	r3, [r0, #4]
 800e204:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e208:	80c3      	strh	r3, [r0, #6]
 800e20a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e20e:	7203      	strb	r3, [r0, #8]
 800e210:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e214:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e218:	7243      	strb	r3, [r0, #9]
 800e21a:	7a83      	ldrb	r3, [r0, #10]
 800e21c:	6141      	str	r1, [r0, #20]
 800e21e:	f365 0306 	bfi	r3, r5, #0, #7
 800e222:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800e226:	8302      	strh	r2, [r0, #24]
 800e228:	f365 13c7 	bfi	r3, r5, #7, #1
 800e22c:	7283      	strb	r3, [r0, #10]
 800e22e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800e232:	72c3      	strb	r3, [r0, #11]
 800e234:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e238:	7303      	strb	r3, [r0, #12]
 800e23a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800e23e:	81c3      	strh	r3, [r0, #14]
 800e240:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800e244:	8203      	strh	r3, [r0, #16]
 800e246:	4b01      	ldr	r3, [pc, #4]	@ (800e24c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800e248:	6003      	str	r3, [r0, #0]
 800e24a:	bd30      	pop	{r4, r5, pc}
 800e24c:	08015d30 	.word	0x08015d30

0800e250 <_ZNK8touchgfx9ConstFont4findEt>:
 800e250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e252:	6944      	ldr	r4, [r0, #20]
 800e254:	b3bc      	cbz	r4, 800e2c6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e256:	88a3      	ldrh	r3, [r4, #4]
 800e258:	8b02      	ldrh	r2, [r0, #24]
 800e25a:	1acb      	subs	r3, r1, r3
 800e25c:	f102 32ff 	add.w	r2, r2, #4294967295
 800e260:	d431      	bmi.n	800e2c6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e262:	4293      	cmp	r3, r2
 800e264:	dd0c      	ble.n	800e280 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e266:	230e      	movs	r3, #14
 800e268:	fb03 4302 	mla	r3, r3, r2, r4
 800e26c:	889b      	ldrh	r3, [r3, #4]
 800e26e:	1a5b      	subs	r3, r3, r1
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	429a      	cmp	r2, r3
 800e274:	db27      	blt.n	800e2c6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e276:	2b00      	cmp	r3, #0
 800e278:	bfbc      	itt	lt
 800e27a:	2302      	movlt	r3, #2
 800e27c:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e280:	2500      	movs	r5, #0
 800e282:	260e      	movs	r6, #14
 800e284:	4295      	cmp	r5, r2
 800e286:	dc1e      	bgt.n	800e2c6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e288:	fb06 4003 	mla	r0, r6, r3, r4
 800e28c:	8887      	ldrh	r7, [r0, #4]
 800e28e:	42b9      	cmp	r1, r7
 800e290:	d01a      	beq.n	800e2c8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e292:	d20d      	bcs.n	800e2b0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e294:	1e5a      	subs	r2, r3, #1
 800e296:	4295      	cmp	r5, r2
 800e298:	dc15      	bgt.n	800e2c6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e29a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e29e:	1a5b      	subs	r3, r3, r1
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	db0f      	blt.n	800e2c6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e2a6:	429d      	cmp	r5, r3
 800e2a8:	ddec      	ble.n	800e284 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e2aa:	1953      	adds	r3, r2, r5
 800e2ac:	105b      	asrs	r3, r3, #1
 800e2ae:	e7e9      	b.n	800e284 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e2b0:	1c5d      	adds	r5, r3, #1
 800e2b2:	42aa      	cmp	r2, r5
 800e2b4:	db07      	blt.n	800e2c6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e2b6:	8a43      	ldrh	r3, [r0, #18]
 800e2b8:	1acb      	subs	r3, r1, r3
 800e2ba:	442b      	add	r3, r5
 800e2bc:	429d      	cmp	r5, r3
 800e2be:	dc02      	bgt.n	800e2c6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	dadf      	bge.n	800e284 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e2c4:	e7f1      	b.n	800e2aa <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e2c6:	2000      	movs	r0, #0
 800e2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	4617      	mov	r7, r2
 800e2d0:	461e      	mov	r6, r3
 800e2d2:	b911      	cbnz	r1, 800e2da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e2d4:	2500      	movs	r5, #0
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2da:	290a      	cmp	r1, #10
 800e2dc:	d0fa      	beq.n	800e2d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2de:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800e2e2:	4291      	cmp	r1, r2
 800e2e4:	d0f6      	beq.n	800e2d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2e6:	f242 020b 	movw	r2, #8203	@ 0x200b
 800e2ea:	4291      	cmp	r1, r2
 800e2ec:	d0f2      	beq.n	800e2d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e2ee:	f7ff ffaf 	bl	800e250 <_ZNK8touchgfx9ConstFont4findEt>
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	b950      	cbnz	r0, 800e30c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	691b      	ldr	r3, [r3, #16]
 800e2fc:	4798      	blx	r3
 800e2fe:	4601      	mov	r1, r0
 800e300:	4620      	mov	r0, r4
 800e302:	f7ff ffa5 	bl	800e250 <_ZNK8touchgfx9ConstFont4findEt>
 800e306:	4605      	mov	r5, r0
 800e308:	2800      	cmp	r0, #0
 800e30a:	d0e3      	beq.n	800e2d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e30c:	6823      	ldr	r3, [r4, #0]
 800e30e:	4629      	mov	r1, r5
 800e310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e312:	4620      	mov	r0, r4
 800e314:	4798      	blx	r3
 800e316:	6038      	str	r0, [r7, #0]
 800e318:	6823      	ldr	r3, [r4, #0]
 800e31a:	4620      	mov	r0, r4
 800e31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e31e:	4798      	blx	r3
 800e320:	7030      	strb	r0, [r6, #0]
 800e322:	e7d8      	b.n	800e2d6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e324 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800e324:	2000      	movs	r0, #0
 800e326:	4770      	bx	lr

0800e328 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800e328:	2001      	movs	r0, #1
 800e32a:	4770      	bx	lr

0800e32c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800e32c:	2002      	movs	r0, #2
 800e32e:	4770      	bx	lr

0800e330 <_ZN8touchgfx6ScreenD1Ev>:
 800e330:	4770      	bx	lr

0800e332 <_ZN8touchgfx12GestureEventD1Ev>:
 800e332:	4770      	bx	lr

0800e334 <_ZN8touchgfx9DragEventD1Ev>:
 800e334:	4770      	bx	lr

0800e336 <_ZN8touchgfx10ClickEventD1Ev>:
 800e336:	4770      	bx	lr

0800e338 <_ZN8touchgfx10ClickEventD0Ev>:
 800e338:	b510      	push	{r4, lr}
 800e33a:	210c      	movs	r1, #12
 800e33c:	4604      	mov	r4, r0
 800e33e:	f004 fd71 	bl	8012e24 <_ZdlPvj>
 800e342:	4620      	mov	r0, r4
 800e344:	bd10      	pop	{r4, pc}

0800e346 <_ZN8touchgfx9DragEventD0Ev>:
 800e346:	b510      	push	{r4, lr}
 800e348:	2110      	movs	r1, #16
 800e34a:	4604      	mov	r4, r0
 800e34c:	f004 fd6a 	bl	8012e24 <_ZdlPvj>
 800e350:	4620      	mov	r0, r4
 800e352:	bd10      	pop	{r4, pc}

0800e354 <_ZN8touchgfx12GestureEventD0Ev>:
 800e354:	b510      	push	{r4, lr}
 800e356:	210c      	movs	r1, #12
 800e358:	4604      	mov	r4, r0
 800e35a:	f004 fd63 	bl	8012e24 <_ZdlPvj>
 800e35e:	4620      	mov	r0, r4
 800e360:	bd10      	pop	{r4, pc}

0800e362 <_ZN8touchgfx6ScreenD0Ev>:
 800e362:	b510      	push	{r4, lr}
 800e364:	213c      	movs	r1, #60	@ 0x3c
 800e366:	4604      	mov	r4, r0
 800e368:	f004 fd5c 	bl	8012e24 <_ZdlPvj>
 800e36c:	4620      	mov	r0, r4
 800e36e:	bd10      	pop	{r4, pc}

0800e370 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800e370:	b530      	push	{r4, r5, lr}
 800e372:	460d      	mov	r5, r1
 800e374:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e376:	b087      	sub	sp, #28
 800e378:	4604      	mov	r4, r0
 800e37a:	b301      	cbz	r1, 800e3be <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800e37c:	a801      	add	r0, sp, #4
 800e37e:	f7ff ff2d 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e382:	892a      	ldrh	r2, [r5, #8]
 800e384:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e388:	7928      	ldrb	r0, [r5, #4]
 800e38a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800e38e:	f88d 0010 	strb.w	r0, [sp, #16]
 800e392:	1ad2      	subs	r2, r2, r3
 800e394:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e396:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e398:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e39c:	441a      	add	r2, r3
 800e39e:	896b      	ldrh	r3, [r5, #10]
 800e3a0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e3a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e3a8:	1b5b      	subs	r3, r3, r5
 800e3aa:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800e3ac:	442b      	add	r3, r5
 800e3ae:	4d05      	ldr	r5, [pc, #20]	@ (800e3c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800e3b0:	9503      	str	r5, [sp, #12]
 800e3b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e3b6:	6803      	ldr	r3, [r0, #0]
 800e3b8:	a903      	add	r1, sp, #12
 800e3ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e3bc:	4798      	blx	r3
 800e3be:	b007      	add	sp, #28
 800e3c0:	bd30      	pop	{r4, r5, pc}
 800e3c2:	bf00      	nop
 800e3c4:	08015dc0 	.word	0x08015dc0

0800e3c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800e3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e3ce:	b08a      	sub	sp, #40	@ 0x28
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	460d      	mov	r5, r1
 800e3d4:	b113      	cbz	r3, 800e3dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800e3d6:	790b      	ldrb	r3, [r1, #4]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d044      	beq.n	800e466 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e3dc:	f104 0804 	add.w	r8, r4, #4
 800e3e0:	4641      	mov	r1, r8
 800e3e2:	a803      	add	r0, sp, #12
 800e3e4:	f7ff fefa 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e3e8:	792b      	ldrb	r3, [r5, #4]
 800e3ea:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e3ee:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800e3f2:	b983      	cbnz	r3, 800e416 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800e3f4:	892a      	ldrh	r2, [r5, #8]
 800e3f6:	88e9      	ldrh	r1, [r5, #6]
 800e3f8:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800e3fc:	1b92      	subs	r2, r2, r6
 800e3fe:	1bc9      	subs	r1, r1, r7
 800e400:	9301      	str	r3, [sp, #4]
 800e402:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	b212      	sxth	r2, r2
 800e40a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800e40e:	b209      	sxth	r1, r1
 800e410:	4640      	mov	r0, r8
 800e412:	f7fb f9af 	bl	8009774 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e416:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e418:	b329      	cbz	r1, 800e466 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e41a:	a805      	add	r0, sp, #20
 800e41c:	f7ff fede 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e420:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e424:	792b      	ldrb	r3, [r5, #4]
 800e426:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e428:	f88d 3020 	strb.w	r3, [sp, #32]
 800e42c:	1abf      	subs	r7, r7, r2
 800e42e:	88ea      	ldrh	r2, [r5, #6]
 800e430:	4417      	add	r7, r2
 800e432:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800e434:	4417      	add	r7, r2
 800e436:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e43a:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800e43e:	1ab6      	subs	r6, r6, r2
 800e440:	892a      	ldrh	r2, [r5, #8]
 800e442:	4416      	add	r6, r2
 800e444:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e446:	4416      	add	r6, r2
 800e448:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800e44c:	4a07      	ldr	r2, [pc, #28]	@ (800e46c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e44e:	9207      	str	r2, [sp, #28]
 800e450:	2600      	movs	r6, #0
 800e452:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800e456:	6803      	ldr	r3, [r0, #0]
 800e458:	a907      	add	r1, sp, #28
 800e45a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e45c:	4798      	blx	r3
 800e45e:	792b      	ldrb	r3, [r5, #4]
 800e460:	b10b      	cbz	r3, 800e466 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e462:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800e466:	b00a      	add	sp, #40	@ 0x28
 800e468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e46c:	08015d98 	.word	0x08015d98

0800e470 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e474:	460c      	mov	r4, r1
 800e476:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e478:	b088      	sub	sp, #32
 800e47a:	4605      	mov	r5, r0
 800e47c:	2900      	cmp	r1, #0
 800e47e:	d06d      	beq.n	800e55c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e480:	4668      	mov	r0, sp
 800e482:	f7ff feab 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e486:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800e488:	88e3      	ldrh	r3, [r4, #6]
 800e48a:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e48e:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e492:	440b      	add	r3, r1
 800e494:	b21b      	sxth	r3, r3
 800e496:	4543      	cmp	r3, r8
 800e498:	db31      	blt.n	800e4fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e49a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e49e:	44c4      	add	ip, r8
 800e4a0:	fa0f fc8c 	sxth.w	ip, ip
 800e4a4:	4563      	cmp	r3, ip
 800e4a6:	da2a      	bge.n	800e4fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e4a8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800e4aa:	8926      	ldrh	r6, [r4, #8]
 800e4ac:	4416      	add	r6, r2
 800e4ae:	b236      	sxth	r6, r6
 800e4b0:	42be      	cmp	r6, r7
 800e4b2:	db24      	blt.n	800e4fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e4b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e4b8:	4438      	add	r0, r7
 800e4ba:	b200      	sxth	r0, r0
 800e4bc:	4286      	cmp	r6, r0
 800e4be:	da1e      	bge.n	800e4fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e4c0:	8963      	ldrh	r3, [r4, #10]
 800e4c2:	4419      	add	r1, r3
 800e4c4:	b209      	sxth	r1, r1
 800e4c6:	4541      	cmp	r1, r8
 800e4c8:	db08      	blt.n	800e4dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e4ca:	4561      	cmp	r1, ip
 800e4cc:	da06      	bge.n	800e4dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e4ce:	89a3      	ldrh	r3, [r4, #12]
 800e4d0:	441a      	add	r2, r3
 800e4d2:	b212      	sxth	r2, r2
 800e4d4:	42ba      	cmp	r2, r7
 800e4d6:	db01      	blt.n	800e4dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e4d8:	4282      	cmp	r2, r0
 800e4da:	db10      	blt.n	800e4fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e4dc:	4b21      	ldr	r3, [pc, #132]	@ (800e564 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	f88d 3014 	strb.w	r3, [sp, #20]
 800e4e6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e4f2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e4f6:	6803      	ldr	r3, [r0, #0]
 800e4f8:	a904      	add	r1, sp, #16
 800e4fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4fc:	4798      	blx	r3
 800e4fe:	1d29      	adds	r1, r5, #4
 800e500:	a802      	add	r0, sp, #8
 800e502:	f7ff fe6b 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e506:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e50a:	88e0      	ldrh	r0, [r4, #6]
 800e50c:	7921      	ldrb	r1, [r4, #4]
 800e50e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800e512:	8922      	ldrh	r2, [r4, #8]
 800e514:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800e516:	f88d 1014 	strb.w	r1, [sp, #20]
 800e51a:	eba3 0808 	sub.w	r8, r3, r8
 800e51e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e522:	1bdf      	subs	r7, r3, r7
 800e524:	b2bb      	uxth	r3, r7
 800e526:	fa1f f888 	uxth.w	r8, r8
 800e52a:	8967      	ldrh	r7, [r4, #10]
 800e52c:	89a4      	ldrh	r4, [r4, #12]
 800e52e:	4440      	add	r0, r8
 800e530:	4460      	add	r0, ip
 800e532:	441a      	add	r2, r3
 800e534:	44b8      	add	r8, r7
 800e536:	4423      	add	r3, r4
 800e538:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e53c:	4433      	add	r3, r6
 800e53e:	4432      	add	r2, r6
 800e540:	44e0      	add	r8, ip
 800e542:	4c09      	ldr	r4, [pc, #36]	@ (800e568 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e544:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e546:	9404      	str	r4, [sp, #16]
 800e548:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e54c:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e550:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e554:	6803      	ldr	r3, [r0, #0]
 800e556:	a904      	add	r1, sp, #16
 800e558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e55a:	4798      	blx	r3
 800e55c:	b008      	add	sp, #32
 800e55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e562:	bf00      	nop
 800e564:	08015d98 	.word	0x08015d98
 800e568:	08015dac 	.word	0x08015dac

0800e56c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e56e:	4604      	mov	r4, r0
 800e570:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e574:	3201      	adds	r2, #1
 800e576:	d112      	bne.n	800e59e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e578:	6803      	ldr	r3, [r0, #0]
 800e57a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e57e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e582:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e586:	2500      	movs	r5, #0
 800e588:	9500      	str	r5, [sp, #0]
 800e58a:	466d      	mov	r5, sp
 800e58c:	4629      	mov	r1, r5
 800e58e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e594:	4798      	blx	r3
 800e596:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e59a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e59e:	4620      	mov	r0, r4
 800e5a0:	b003      	add	sp, #12
 800e5a2:	bd30      	pop	{r4, r5, pc}

0800e5a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e5a4:	b513      	push	{r0, r1, r4, lr}
 800e5a6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	d109      	bne.n	800e5c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e5b0:	4601      	mov	r1, r0
 800e5b2:	4668      	mov	r0, sp
 800e5b4:	f7ff fe12 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5bc:	8423      	strh	r3, [r4, #32]
 800e5be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e5c2:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e5c4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e5c8:	b002      	add	sp, #8
 800e5ca:	bd10      	pop	{r4, pc}

0800e5cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e5cc:	b513      	push	{r0, r1, r4, lr}
 800e5ce:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	4604      	mov	r4, r0
 800e5d6:	d109      	bne.n	800e5ec <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e5d8:	4601      	mov	r1, r0
 800e5da:	4668      	mov	r0, sp
 800e5dc:	f7ff fdfe 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5e4:	8423      	strh	r3, [r4, #32]
 800e5e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e5ea:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e5ec:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800e5f0:	b002      	add	sp, #8
 800e5f2:	bd10      	pop	{r4, pc}

0800e5f4 <_ZN8touchgfx6ScreenC1Ev>:
 800e5f4:	b570      	push	{r4, r5, r6, lr}
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	4b16      	ldr	r3, [pc, #88]	@ (800e654 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e5fa:	f845 3b04 	str.w	r3, [r5], #4
 800e5fe:	2300      	movs	r3, #0
 800e600:	8103      	strh	r3, [r0, #8]
 800e602:	8143      	strh	r3, [r0, #10]
 800e604:	8183      	strh	r3, [r0, #12]
 800e606:	81c3      	strh	r3, [r0, #14]
 800e608:	8203      	strh	r3, [r0, #16]
 800e60a:	8243      	strh	r3, [r0, #18]
 800e60c:	8283      	strh	r3, [r0, #20]
 800e60e:	82c3      	strh	r3, [r0, #22]
 800e610:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e614:	6203      	str	r3, [r0, #32]
 800e616:	8483      	strh	r3, [r0, #36]	@ 0x24
 800e618:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e61a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800e61e:	4a0e      	ldr	r2, [pc, #56]	@ (800e658 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e620:	6343      	str	r3, [r0, #52]	@ 0x34
 800e622:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800e626:	4b0d      	ldr	r3, [pc, #52]	@ (800e65c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e628:	6042      	str	r2, [r0, #4]
 800e62a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e62e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e630:	4a0b      	ldr	r2, [pc, #44]	@ (800e660 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e632:	4604      	mov	r4, r0
 800e634:	2101      	movs	r1, #1
 800e636:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800e63a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e63e:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e642:	4628      	mov	r0, r5
 800e644:	4798      	blx	r3
 800e646:	6863      	ldr	r3, [r4, #4]
 800e648:	4628      	mov	r0, r5
 800e64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e64c:	4631      	mov	r1, r6
 800e64e:	4798      	blx	r3
 800e650:	4620      	mov	r0, r4
 800e652:	bd70      	pop	{r4, r5, r6, pc}
 800e654:	08015dd4 	.word	0x08015dd4
 800e658:	080159dc 	.word	0x080159dc
 800e65c:	20015432 	.word	0x20015432
 800e660:	20015430 	.word	0x20015430

0800e664 <_ZN8touchgfx6Screen4drawEv>:
 800e664:	b507      	push	{r0, r1, r2, lr}
 800e666:	4b09      	ldr	r3, [pc, #36]	@ (800e68c <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e668:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e66c:	4b08      	ldr	r3, [pc, #32]	@ (800e690 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e66e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e672:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e676:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e67a:	6803      	ldr	r3, [r0, #0]
 800e67c:	2100      	movs	r1, #0
 800e67e:	9100      	str	r1, [sp, #0]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	4669      	mov	r1, sp
 800e684:	4798      	blx	r3
 800e686:	b003      	add	sp, #12
 800e688:	f85d fb04 	ldr.w	pc, [sp], #4
 800e68c:	20015430 	.word	0x20015430
 800e690:	20015432 	.word	0x20015432

0800e694 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e698:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	b089      	sub	sp, #36	@ 0x24
 800e6a0:	4680      	mov	r8, r0
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	4615      	mov	r5, r2
 800e6a6:	dd0e      	ble.n	800e6c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e6a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	dd0a      	ble.n	800e6c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	f7ff ff5b 	bl	800e56c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	f7fe fb77 	bl	800cdaa <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e6bc:	69eb      	ldr	r3, [r5, #28]
 800e6be:	b928      	cbnz	r0, 800e6cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e6c0:	461d      	mov	r5, r3
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1f4      	bne.n	800e6b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e6c6:	b009      	add	sp, #36	@ 0x24
 800e6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6cc:	ae04      	add	r6, sp, #16
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	f000 80b5 	beq.w	800e83e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	a802      	add	r0, sp, #8
 800e6dc:	4798      	blx	r3
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f7ff ff60 	bl	800e5a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e6e4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e6e8:	4407      	add	r7, r0
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	f7ff ff6e 	bl	800e5cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e6f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e6f4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e6f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e6fc:	4418      	add	r0, r3
 800e6fe:	4621      	mov	r1, r4
 800e700:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e704:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e708:	b23f      	sxth	r7, r7
 800e70a:	4630      	mov	r0, r6
 800e70c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e710:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e714:	f7fb f912 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800e718:	4628      	mov	r0, r5
 800e71a:	f7ff ff27 	bl	800e56c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e71e:	4602      	mov	r2, r0
 800e720:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e724:	ab06      	add	r3, sp, #24
 800e726:	e883 0003 	stmia.w	r3, {r0, r1}
 800e72a:	4611      	mov	r1, r2
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7fb f905 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800e732:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e736:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e73a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e73e:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e742:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e746:	4299      	cmp	r1, r3
 800e748:	d10b      	bne.n	800e762 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e74a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e74e:	4552      	cmp	r2, sl
 800e750:	d107      	bne.n	800e762 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e752:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e756:	455a      	cmp	r2, fp
 800e758:	d103      	bne.n	800e762 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e75a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e75e:	454a      	cmp	r2, r9
 800e760:	d06d      	beq.n	800e83e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e762:	f1bb 0f00 	cmp.w	fp, #0
 800e766:	dd65      	ble.n	800e834 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e768:	f1b9 0f00 	cmp.w	r9, #0
 800e76c:	dd62      	ble.n	800e834 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e76e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e772:	fa1f f08a 	uxth.w	r0, sl
 800e776:	4552      	cmp	r2, sl
 800e778:	9000      	str	r0, [sp, #0]
 800e77a:	da12      	bge.n	800e7a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	9b00      	ldr	r3, [sp, #0]
 800e780:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e784:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e788:	1a9a      	subs	r2, r3, r2
 800e78a:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e78e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e792:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e796:	69ea      	ldr	r2, [r5, #28]
 800e798:	4631      	mov	r1, r6
 800e79a:	4640      	mov	r0, r8
 800e79c:	f7ff ff7a 	bl	800e694 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7a0:	9b01      	ldr	r3, [sp, #4]
 800e7a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	b29f      	uxth	r7, r3
 800e7aa:	da0d      	bge.n	800e7c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e7ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e7b0:	1aba      	subs	r2, r7, r2
 800e7b2:	f8ad a012 	strh.w	sl, [sp, #18]
 800e7b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e7ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e7be:	69ea      	ldr	r2, [r5, #28]
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7ff ff66 	bl	800e694 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7c8:	8822      	ldrh	r2, [r4, #0]
 800e7ca:	88a3      	ldrh	r3, [r4, #4]
 800e7cc:	445f      	add	r7, fp
 800e7ce:	4413      	add	r3, r2
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	b2bf      	uxth	r7, r7
 800e7d4:	b23a      	sxth	r2, r7
 800e7d6:	b219      	sxth	r1, r3
 800e7d8:	4291      	cmp	r1, r2
 800e7da:	dd0d      	ble.n	800e7f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e7dc:	1bdb      	subs	r3, r3, r7
 800e7de:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e7e2:	f8ad a012 	strh.w	sl, [sp, #18]
 800e7e6:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e7ea:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e7ee:	69ea      	ldr	r2, [r5, #28]
 800e7f0:	4631      	mov	r1, r6
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	f7ff ff4e 	bl	800e694 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e7f8:	88e2      	ldrh	r2, [r4, #6]
 800e7fa:	8863      	ldrh	r3, [r4, #2]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	9a00      	ldr	r2, [sp, #0]
 800e800:	444a      	add	r2, r9
 800e802:	b29b      	uxth	r3, r3
 800e804:	fa1f f982 	uxth.w	r9, r2
 800e808:	fa0f f289 	sxth.w	r2, r9
 800e80c:	b219      	sxth	r1, r3
 800e80e:	428a      	cmp	r2, r1
 800e810:	da15      	bge.n	800e83e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e812:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e816:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e81a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e81e:	eba3 0309 	sub.w	r3, r3, r9
 800e822:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e826:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e82a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e82e:	69ea      	ldr	r2, [r5, #28]
 800e830:	4631      	mov	r1, r6
 800e832:	e001      	b.n	800e838 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e834:	69ea      	ldr	r2, [r5, #28]
 800e836:	4621      	mov	r1, r4
 800e838:	4640      	mov	r0, r8
 800e83a:	f7ff ff2b 	bl	800e694 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e83e:	4628      	mov	r0, r5
 800e840:	f7ff fe94 	bl	800e56c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e844:	6861      	ldr	r1, [r4, #4]
 800e846:	4602      	mov	r2, r0
 800e848:	6820      	ldr	r0, [r4, #0]
 800e84a:	4633      	mov	r3, r6
 800e84c:	c303      	stmia	r3!, {r0, r1}
 800e84e:	4611      	mov	r1, r2
 800e850:	4630      	mov	r0, r6
 800e852:	f7fb f873 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800e856:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f77f af33 	ble.w	800e6c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e860:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e864:	2b00      	cmp	r3, #0
 800e866:	f77f af2e 	ble.w	800e6c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e86a:	4628      	mov	r0, r5
 800e86c:	f7ff fe9a 	bl	800e5a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e870:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e874:	1a18      	subs	r0, r3, r0
 800e876:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e87a:	4628      	mov	r0, r5
 800e87c:	f7ff fea6 	bl	800e5cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e880:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e884:	1a18      	subs	r0, r3, r0
 800e886:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e88a:	682b      	ldr	r3, [r5, #0]
 800e88c:	4631      	mov	r1, r6
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	4628      	mov	r0, r5
 800e892:	4798      	blx	r3
 800e894:	e717      	b.n	800e6c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e896 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e896:	b570      	push	{r4, r5, r6, lr}
 800e898:	460c      	mov	r4, r1
 800e89a:	b086      	sub	sp, #24
 800e89c:	1d06      	adds	r6, r0, #4
 800e89e:	2300      	movs	r3, #0
 800e8a0:	4631      	mov	r1, r6
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	a802      	add	r0, sp, #8
 800e8a6:	9301      	str	r3, [sp, #4]
 800e8a8:	f7ff fc98 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e8ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e8b0:	8822      	ldrh	r2, [r4, #0]
 800e8b2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e8b6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e8ba:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e8be:	1ad2      	subs	r2, r2, r3
 800e8c0:	8863      	ldrh	r3, [r4, #2]
 800e8c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e8c6:	1a5b      	subs	r3, r3, r1
 800e8c8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e8cc:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e8d0:	aa01      	add	r2, sp, #4
 800e8d2:	a904      	add	r1, sp, #16
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e8da:	f7fb f907 	bl	8009aec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e8de:	9a01      	ldr	r2, [sp, #4]
 800e8e0:	b11a      	cbz	r2, 800e8ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	f7ff fed5 	bl	800e694 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e8ea:	b006      	add	sp, #24
 800e8ec:	bd70      	pop	{r4, r5, r6, pc}

0800e8ee <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e8ee:	b530      	push	{r4, r5, lr}
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e8f8:	b085      	sub	sp, #20
 800e8fa:	460d      	mov	r5, r1
 800e8fc:	6851      	ldr	r1, [r2, #4]
 800e8fe:	466b      	mov	r3, sp
 800e900:	c303      	stmia	r3!, {r0, r1}
 800e902:	4629      	mov	r1, r5
 800e904:	4668      	mov	r0, sp
 800e906:	f7fb f819 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 800e90a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e90e:	b12b      	cbz	r3, 800e91c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e910:	4669      	mov	r1, sp
 800e912:	4620      	mov	r0, r4
 800e914:	f7ff ffbf 	bl	800e896 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e918:	b005      	add	sp, #20
 800e91a:	bd30      	pop	{r4, r5, pc}
 800e91c:	3404      	adds	r4, #4
 800e91e:	4621      	mov	r1, r4
 800e920:	a802      	add	r0, sp, #8
 800e922:	f7ff fc5b 	bl	800e1dc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e926:	f8bd 3000 	ldrh.w	r3, [sp]
 800e92a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e92e:	1a9b      	subs	r3, r3, r2
 800e930:	f8ad 3000 	strh.w	r3, [sp]
 800e934:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e938:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e93c:	4669      	mov	r1, sp
 800e93e:	1a9b      	subs	r3, r3, r2
 800e940:	4620      	mov	r0, r4
 800e942:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e946:	f7fb f898 	bl	8009a7a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e94a:	e7e5      	b.n	800e918 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e94c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e94c:	680a      	ldr	r2, [r1, #0]
 800e94e:	460b      	mov	r3, r1
 800e950:	6992      	ldr	r2, [r2, #24]
 800e952:	1d01      	adds	r1, r0, #4
 800e954:	4618      	mov	r0, r3
 800e956:	4710      	bx	r2

0800e958 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800e958:	4298      	cmp	r0, r3
 800e95a:	d200      	bcs.n	800e95e <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800e95c:	b913      	cbnz	r3, 800e964 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800e95e:	440a      	add	r2, r1
 800e960:	b210      	sxth	r0, r2
 800e962:	4770      	bx	lr
 800e964:	ee07 0a90 	vmov	s15, r0
 800e968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e96c:	ee07 3a90 	vmov	s15, r3
 800e970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e97c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e980:	ee07 2a90 	vmov	s15, r2
 800e984:	ee67 5a07 	vmul.f32	s11, s14, s14
 800e988:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800e98c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800e990:	ee07 1a90 	vmov	s15, r1
 800e994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e998:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e99c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e9a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a8:	bfcc      	ite	gt
 800e9aa:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800e9ae:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800e9b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9b6:	ee17 3a90 	vmov	r3, s15
 800e9ba:	b218      	sxth	r0, r3
 800e9bc:	4770      	bx	lr

0800e9be <_ZN8touchgfx12TextProviderC1Ev>:
 800e9be:	b538      	push	{r3, r4, r5, lr}
 800e9c0:	2500      	movs	r5, #0
 800e9c2:	2302      	movs	r3, #2
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	e9c0 5500 	strd	r5, r5, [r0]
 800e9ca:	7403      	strb	r3, [r0, #16]
 800e9cc:	6145      	str	r5, [r0, #20]
 800e9ce:	7605      	strb	r5, [r0, #24]
 800e9d0:	83c5      	strh	r5, [r0, #30]
 800e9d2:	8405      	strh	r5, [r0, #32]
 800e9d4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e9d6:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e9d8:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e9da:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e9de:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e9e2:	220e      	movs	r2, #14
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	304c      	adds	r0, #76	@ 0x4c
 800e9e8:	f004 fc51 	bl	801328e <memset>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e9f4:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e9f8:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e9fc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800ea00:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800ea04:	f7f5 f8e6 	bl	8003bd4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800ea08:	4620      	mov	r0, r4
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}

0800ea0c <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800ea0c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ea0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ea12:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800ea14:	fab0 f080 	clz	r0, r0
 800ea18:	0940      	lsrs	r0, r0, #5
 800ea1a:	4770      	bx	lr

0800ea1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800ea1c:	b530      	push	{r4, r5, lr}
 800ea1e:	2500      	movs	r5, #0
 800ea20:	2401      	movs	r4, #1
 800ea22:	6843      	ldr	r3, [r0, #4]
 800ea24:	b913      	cbnz	r3, 800ea2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800ea26:	6803      	ldr	r3, [r0, #0]
 800ea28:	b313      	cbz	r3, 800ea70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800ea2a:	6043      	str	r3, [r0, #4]
 800ea2c:	7e03      	ldrb	r3, [r0, #24]
 800ea2e:	b143      	cbz	r3, 800ea42 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800ea30:	6943      	ldr	r3, [r0, #20]
 800ea32:	b12b      	cbz	r3, 800ea40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800ea34:	881a      	ldrh	r2, [r3, #0]
 800ea36:	b11a      	cbz	r2, 800ea40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800ea38:	1c9a      	adds	r2, r3, #2
 800ea3a:	6142      	str	r2, [r0, #20]
 800ea3c:	8818      	ldrh	r0, [r3, #0]
 800ea3e:	bd30      	pop	{r4, r5, pc}
 800ea40:	7605      	strb	r5, [r0, #24]
 800ea42:	6843      	ldr	r3, [r0, #4]
 800ea44:	8819      	ldrh	r1, [r3, #0]
 800ea46:	b199      	cbz	r1, 800ea70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800ea48:	1c9a      	adds	r2, r3, #2
 800ea4a:	2902      	cmp	r1, #2
 800ea4c:	6042      	str	r2, [r0, #4]
 800ea4e:	d1f5      	bne.n	800ea3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800ea50:	7c03      	ldrb	r3, [r0, #16]
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d8e5      	bhi.n	800ea22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800ea56:	1c5a      	adds	r2, r3, #1
 800ea58:	3302      	adds	r3, #2
 800ea5a:	7402      	strb	r2, [r0, #16]
 800ea5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ea60:	6143      	str	r3, [r0, #20]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d0dd      	beq.n	800ea22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800ea66:	881b      	ldrh	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d0da      	beq.n	800ea22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800ea6c:	7604      	strb	r4, [r0, #24]
 800ea6e:	e7d8      	b.n	800ea22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800ea70:	2000      	movs	r0, #0
 800ea72:	e7e4      	b.n	800ea3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800ea74:	b430      	push	{r4, r5}
 800ea76:	6001      	str	r1, [r0, #0]
 800ea78:	2100      	movs	r1, #0
 800ea7a:	6041      	str	r1, [r0, #4]
 800ea7c:	6815      	ldr	r5, [r2, #0]
 800ea7e:	6085      	str	r5, [r0, #8]
 800ea80:	6852      	ldr	r2, [r2, #4]
 800ea82:	6443      	str	r3, [r0, #68]	@ 0x44
 800ea84:	9b02      	ldr	r3, [sp, #8]
 800ea86:	60c2      	str	r2, [r0, #12]
 800ea88:	7401      	strb	r1, [r0, #16]
 800ea8a:	6141      	str	r1, [r0, #20]
 800ea8c:	7601      	strb	r1, [r0, #24]
 800ea8e:	8701      	strh	r1, [r0, #56]	@ 0x38
 800ea90:	8401      	strh	r1, [r0, #32]
 800ea92:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800ea96:	6483      	str	r3, [r0, #72]	@ 0x48
 800ea98:	bc30      	pop	{r4, r5}
 800ea9a:	f7f5 b89b 	b.w	8003bd4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800ea9e <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800ea9e:	b408      	push	{r3}
 800eaa0:	b510      	push	{r4, lr}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	ac07      	add	r4, sp, #28
 800eaa6:	f854 3b04 	ldr.w	r3, [r4], #4
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	4613      	mov	r3, r2
 800eaae:	4622      	mov	r2, r4
 800eab0:	9403      	str	r4, [sp, #12]
 800eab2:	f7ff ffdf 	bl	800ea74 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800eab6:	b005      	add	sp, #20
 800eab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eabc:	b001      	add	sp, #4
 800eabe:	4770      	bx	lr

0800eac0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800eac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eac2:	4605      	mov	r5, r0
 800eac4:	4608      	mov	r0, r1
 800eac6:	b1e9      	cbz	r1, 800eb04 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800eac8:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800eacc:	460b      	mov	r3, r1
 800eace:	f101 0708 	add.w	r7, r1, #8
 800ead2:	4622      	mov	r2, r4
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	6859      	ldr	r1, [r3, #4]
 800ead8:	4626      	mov	r6, r4
 800eada:	c603      	stmia	r6!, {r0, r1}
 800eadc:	3308      	adds	r3, #8
 800eade:	42bb      	cmp	r3, r7
 800eae0:	4634      	mov	r4, r6
 800eae2:	d1f7      	bne.n	800ead4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800eae4:	6818      	ldr	r0, [r3, #0]
 800eae6:	6030      	str	r0, [r6, #0]
 800eae8:	889b      	ldrh	r3, [r3, #4]
 800eaea:	80b3      	strh	r3, [r6, #4]
 800eaec:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800eaf0:	015b      	lsls	r3, r3, #5
 800eaf2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800eaf6:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800eafa:	430b      	orrs	r3, r1
 800eafc:	425b      	negs	r3, r3
 800eafe:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800eb02:	4610      	mov	r0, r2
 800eb04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb06 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800eb06:	b538      	push	{r3, r4, r5, lr}
 800eb08:	460c      	mov	r4, r1
 800eb0a:	6811      	ldr	r1, [r2, #0]
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	68cd      	ldr	r5, [r1, #12]
 800eb10:	4619      	mov	r1, r3
 800eb12:	47a8      	blx	r5
 800eb14:	2800      	cmp	r0, #0
 800eb16:	bf08      	it	eq
 800eb18:	4620      	moveq	r0, r4
 800eb1a:	bd38      	pop	{r3, r4, r5, pc}

0800eb1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800eb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb20:	468c      	mov	ip, r1
 800eb22:	4605      	mov	r5, r0
 800eb24:	4614      	mov	r4, r2
 800eb26:	b942      	cbnz	r2, 800eb3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800eb28:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800eb2c:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800eb30:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800eb34:	4620      	mov	r0, r4
 800eb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3a:	7b50      	ldrb	r0, [r2, #13]
 800eb3c:	8893      	ldrh	r3, [r2, #4]
 800eb3e:	0106      	lsls	r6, r0, #4
 800eb40:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800eb44:	79e6      	ldrb	r6, [r4, #7]
 800eb46:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800eb4a:	4316      	orrs	r6, r2
 800eb4c:	185a      	adds	r2, r3, r1
 800eb4e:	b291      	uxth	r1, r2
 800eb50:	291d      	cmp	r1, #29
 800eb52:	b2b7      	uxth	r7, r6
 800eb54:	d87e      	bhi.n	800ec54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800eb56:	2201      	movs	r2, #1
 800eb58:	408a      	lsls	r2, r1
 800eb5a:	498a      	ldr	r1, [pc, #552]	@ (800ed84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 800eb5c:	420a      	tst	r2, r1
 800eb5e:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800eb62:	d12d      	bne.n	800ebc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800eb64:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800eb68:	d074      	beq.n	800ec54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800eb6a:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800eb6e:	4623      	mov	r3, r4
 800eb70:	f104 0e08 	add.w	lr, r4, #8
 800eb74:	4614      	mov	r4, r2
 800eb76:	6818      	ldr	r0, [r3, #0]
 800eb78:	6859      	ldr	r1, [r3, #4]
 800eb7a:	4694      	mov	ip, r2
 800eb7c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800eb80:	3308      	adds	r3, #8
 800eb82:	4573      	cmp	r3, lr
 800eb84:	4662      	mov	r2, ip
 800eb86:	d1f6      	bne.n	800eb76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800eb88:	6818      	ldr	r0, [r3, #0]
 800eb8a:	f8cc 0000 	str.w	r0, [ip]
 800eb8e:	889b      	ldrh	r3, [r3, #4]
 800eb90:	f8ac 3004 	strh.w	r3, [ip, #4]
 800eb94:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800eb98:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800eb9c:	b2b3      	uxth	r3, r6
 800eb9e:	1aca      	subs	r2, r1, r3
 800eba0:	b292      	uxth	r2, r2
 800eba2:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800eba6:	10d2      	asrs	r2, r2, #3
 800eba8:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800ebac:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800ebb0:	4302      	orrs	r2, r0
 800ebb2:	1bcf      	subs	r7, r1, r7
 800ebb4:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800ebb8:	1afb      	subs	r3, r7, r3
 800ebba:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800ebbe:	e7b9      	b.n	800eb34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800ebc0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800ebc4:	4623      	mov	r3, r4
 800ebc6:	f104 0808 	add.w	r8, r4, #8
 800ebca:	4614      	mov	r4, r2
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	6859      	ldr	r1, [r3, #4]
 800ebd0:	4696      	mov	lr, r2
 800ebd2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ebd6:	3308      	adds	r3, #8
 800ebd8:	4543      	cmp	r3, r8
 800ebda:	4672      	mov	r2, lr
 800ebdc:	d1f6      	bne.n	800ebcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800ebde:	6818      	ldr	r0, [r3, #0]
 800ebe0:	f8ce 0000 	str.w	r0, [lr]
 800ebe4:	889b      	ldrh	r3, [r3, #4]
 800ebe6:	f8ae 3004 	strh.w	r3, [lr, #4]
 800ebea:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800ebec:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ebf0:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800ebf2:	f640 6333 	movw	r3, #3635	@ 0xe33
 800ebf6:	4299      	cmp	r1, r3
 800ebf8:	d111      	bne.n	800ec1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800ebfa:	f8dc 3000 	ldr.w	r3, [ip]
 800ebfe:	4660      	mov	r0, ip
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	4798      	blx	r3
 800ec04:	7b41      	ldrb	r1, [r0, #13]
 800ec06:	00cb      	lsls	r3, r1, #3
 800ec08:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ec0c:	7a03      	ldrb	r3, [r0, #8]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	064a      	lsls	r2, r1, #25
 800ec12:	bf44      	itt	mi
 800ec14:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ec18:	b21b      	sxthmi	r3, r3
 800ec1a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800ec1e:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800ec22:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800ec26:	443b      	add	r3, r7
 800ec28:	4433      	add	r3, r6
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800ec30:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800ec34:	10db      	asrs	r3, r3, #3
 800ec36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ec3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800ec44:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800ec48:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800ec4c:	1a9b      	subs	r3, r3, r2
 800ec4e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800ec52:	e76f      	b.n	800eb34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800ec54:	f023 0204 	bic.w	r2, r3, #4
 800ec58:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800ec5c:	428a      	cmp	r2, r1
 800ec5e:	d003      	beq.n	800ec68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800ec60:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d137      	bne.n	800ecd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 800ec68:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800ec6c:	4622      	mov	r2, r4
 800ec6e:	f104 0808 	add.w	r8, r4, #8
 800ec72:	4634      	mov	r4, r6
 800ec74:	6810      	ldr	r0, [r2, #0]
 800ec76:	6851      	ldr	r1, [r2, #4]
 800ec78:	46b6      	mov	lr, r6
 800ec7a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ec7e:	3208      	adds	r2, #8
 800ec80:	4542      	cmp	r2, r8
 800ec82:	4676      	mov	r6, lr
 800ec84:	d1f6      	bne.n	800ec74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800ec86:	6810      	ldr	r0, [r2, #0]
 800ec88:	f8ce 0000 	str.w	r0, [lr]
 800ec8c:	8892      	ldrh	r2, [r2, #4]
 800ec8e:	f8ae 2004 	strh.w	r2, [lr, #4]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	4662      	mov	r2, ip
 800ec98:	4621      	mov	r1, r4
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	f7ff ff33 	bl	800eb06 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800eca0:	7b41      	ldrb	r1, [r0, #13]
 800eca2:	00cb      	lsls	r3, r1, #3
 800eca4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800eca8:	7a03      	ldrb	r3, [r0, #8]
 800ecaa:	0648      	lsls	r0, r1, #25
 800ecac:	ea43 0302 	orr.w	r3, r3, r2
 800ecb0:	bf44      	itt	mi
 800ecb2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ecb6:	b21b      	sxthmi	r3, r3
 800ecb8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800ecbc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800ecc0:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800ecc4:	005b      	lsls	r3, r3, #1
 800ecc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecca:	4313      	orrs	r3, r2
 800eccc:	115a      	asrs	r2, r3, #5
 800ecce:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800ecd2:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800ecd6:	e046      	b.n	800ed66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 800ecd8:	00c2      	lsls	r2, r0, #3
 800ecda:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800ecde:	7a22      	ldrb	r2, [r4, #8]
 800ece0:	430a      	orrs	r2, r1
 800ece2:	0641      	lsls	r1, r0, #25
 800ece4:	bf44      	itt	mi
 800ece6:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800ecea:	b212      	sxthmi	r2, r2
 800ecec:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800ecf0:	f640 6109 	movw	r1, #3593	@ 0xe09
 800ecf4:	f023 0210 	bic.w	r2, r3, #16
 800ecf8:	428a      	cmp	r2, r1
 800ecfa:	d003      	beq.n	800ed04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 800ecfc:	f640 6213 	movw	r2, #3603	@ 0xe13
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d13d      	bne.n	800ed80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 800ed04:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800ed08:	f104 0808 	add.w	r8, r4, #8
 800ed0c:	4696      	mov	lr, r2
 800ed0e:	6820      	ldr	r0, [r4, #0]
 800ed10:	6861      	ldr	r1, [r4, #4]
 800ed12:	4616      	mov	r6, r2
 800ed14:	c603      	stmia	r6!, {r0, r1}
 800ed16:	3408      	adds	r4, #8
 800ed18:	4544      	cmp	r4, r8
 800ed1a:	4632      	mov	r2, r6
 800ed1c:	d1f7      	bne.n	800ed0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 800ed1e:	6820      	ldr	r0, [r4, #0]
 800ed20:	6030      	str	r0, [r6, #0]
 800ed22:	88a1      	ldrh	r1, [r4, #4]
 800ed24:	80b1      	strh	r1, [r6, #4]
 800ed26:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800ed2a:	0076      	lsls	r6, r6, #1
 800ed2c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800ed30:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800ed34:	4316      	orrs	r6, r2
 800ed36:	f640 6213 	movw	r2, #3603	@ 0xe13
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	bf1a      	itte	ne
 800ed3e:	f103 33ff 	addne.w	r3, r3, #4294967295
 800ed42:	b29b      	uxthne	r3, r3
 800ed44:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800ed48:	4662      	mov	r2, ip
 800ed4a:	4671      	mov	r1, lr
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	4674      	mov	r4, lr
 800ed50:	f7ff fed9 	bl	800eb06 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800ed54:	7b43      	ldrb	r3, [r0, #13]
 800ed56:	7a82      	ldrb	r2, [r0, #10]
 800ed58:	005b      	lsls	r3, r3, #1
 800ed5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	1af6      	subs	r6, r6, r3
 800ed62:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800ed66:	7b61      	ldrb	r1, [r4, #13]
 800ed68:	00cb      	lsls	r3, r1, #3
 800ed6a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ed6e:	7a23      	ldrb	r3, [r4, #8]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	064a      	lsls	r2, r1, #25
 800ed74:	bf44      	itt	mi
 800ed76:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ed7a:	b21b      	sxthmi	r3, r3
 800ed7c:	1bdb      	subs	r3, r3, r7
 800ed7e:	e71c      	b.n	800ebba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800ed80:	2300      	movs	r3, #0
 800ed82:	e7a6      	b.n	800ecd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 800ed84:	3fc00079 	.word	0x3fc00079

0800ed88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800ed88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	b942      	cbnz	r2, 800eda2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800ed90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed94:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800ed98:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800ed9c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800eda0:	e047      	b.n	800ee32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800eda2:	7b51      	ldrb	r1, [r2, #13]
 800eda4:	8893      	ldrh	r3, [r2, #4]
 800eda6:	010d      	lsls	r5, r1, #4
 800eda8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800edac:	79d5      	ldrb	r5, [r2, #7]
 800edae:	4305      	orrs	r5, r0
 800edb0:	2d04      	cmp	r5, #4
 800edb2:	bfcc      	ite	gt
 800edb4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800edb8:	f04f 0e01 	movle.w	lr, #1
 800edbc:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800edc0:	f200 80ab 	bhi.w	800ef1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800edc4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800edc8:	4283      	cmp	r3, r0
 800edca:	d216      	bcs.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800edcc:	f240 605b 	movw	r0, #1627	@ 0x65b
 800edd0:	4283      	cmp	r3, r0
 800edd2:	d859      	bhi.n	800ee88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800edd4:	f240 6057 	movw	r0, #1623	@ 0x657
 800edd8:	4283      	cmp	r3, r0
 800edda:	d20e      	bcs.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eddc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800ede0:	d24a      	bcs.n	800ee78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800ede2:	f240 604e 	movw	r0, #1614	@ 0x64e
 800ede6:	4283      	cmp	r3, r0
 800ede8:	d207      	bcs.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800edea:	f240 601a 	movw	r0, #1562	@ 0x61a
 800edee:	4283      	cmp	r3, r0
 800edf0:	d02a      	beq.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800edf2:	d821      	bhi.n	800ee38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800edf4:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800edf8:	d35b      	bcc.n	800eeb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800edfa:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800edfe:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ee02:	f040 80d0 	bne.w	800efa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ee06:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800ee0a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ee0e:	f040 80ca 	bne.w	800efa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ee12:	00cb      	lsls	r3, r1, #3
 800ee14:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ee18:	7a13      	ldrb	r3, [r2, #8]
 800ee1a:	0649      	lsls	r1, r1, #25
 800ee1c:	ea43 0300 	orr.w	r3, r3, r0
 800ee20:	bf44      	itt	mi
 800ee22:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ee26:	b21b      	sxthmi	r3, r3
 800ee28:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ee2c:	1b5d      	subs	r5, r3, r5
 800ee2e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ee32:	4610      	mov	r0, r2
 800ee34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee38:	f240 604b 	movw	r0, #1611	@ 0x64b
 800ee3c:	4283      	cmp	r3, r0
 800ee3e:	d338      	bcc.n	800eeb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ee40:	f240 604c 	movw	r0, #1612	@ 0x64c
 800ee44:	4283      	cmp	r3, r0
 800ee46:	d9d8      	bls.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee48:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800ee4c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800ee50:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ee54:	f040 80f2 	bne.w	800f03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800ee58:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ee5c:	f040 80ee 	bne.w	800f03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800ee60:	00cb      	lsls	r3, r1, #3
 800ee62:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ee66:	7a13      	ldrb	r3, [r2, #8]
 800ee68:	064e      	lsls	r6, r1, #25
 800ee6a:	ea43 0300 	orr.w	r3, r3, r0
 800ee6e:	bf44      	itt	mi
 800ee70:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ee74:	b21b      	sxthmi	r3, r3
 800ee76:	e7d9      	b.n	800ee2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800ee78:	f240 6054 	movw	r0, #1620	@ 0x654
 800ee7c:	4283      	cmp	r3, r0
 800ee7e:	d8e3      	bhi.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee80:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800ee84:	d9e0      	bls.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ee86:	e7b8      	b.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee88:	f240 6074 	movw	r0, #1652	@ 0x674
 800ee8c:	4283      	cmp	r3, r0
 800ee8e:	d0b4      	beq.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ee90:	d82d      	bhi.n	800eeee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800ee92:	f240 605e 	movw	r0, #1630	@ 0x65e
 800ee96:	4283      	cmp	r3, r0
 800ee98:	d804      	bhi.n	800eea4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800ee9a:	f240 605d 	movw	r0, #1629	@ 0x65d
 800ee9e:	4283      	cmp	r3, r0
 800eea0:	d3d2      	bcc.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eea2:	e7aa      	b.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eea4:	f240 605f 	movw	r0, #1631	@ 0x65f
 800eea8:	4283      	cmp	r3, r0
 800eeaa:	d0cd      	beq.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eeac:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800eeb0:	d0a3      	beq.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eeb2:	00cb      	lsls	r3, r1, #3
 800eeb4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800eeb8:	7a13      	ldrb	r3, [r2, #8]
 800eeba:	0649      	lsls	r1, r1, #25
 800eebc:	ea43 0300 	orr.w	r3, r3, r0
 800eec0:	bf44      	itt	mi
 800eec2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eec6:	b21b      	sxthmi	r3, r3
 800eec8:	1b5d      	subs	r5, r3, r5
 800eeca:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eece:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800eed2:	7b53      	ldrb	r3, [r2, #13]
 800eed4:	015b      	lsls	r3, r3, #5
 800eed6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800eeda:	7993      	ldrb	r3, [r2, #6]
 800eedc:	430b      	orrs	r3, r1
 800eede:	005b      	lsls	r3, r3, #1
 800eee0:	2105      	movs	r1, #5
 800eee2:	fb93 f3f1 	sdiv	r3, r3, r1
 800eee6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800eeea:	440b      	add	r3, r1
 800eeec:	e756      	b.n	800ed9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800eeee:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800eef2:	4283      	cmp	r3, r0
 800eef4:	d809      	bhi.n	800ef0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800eef6:	f240 60df 	movw	r0, #1759	@ 0x6df
 800eefa:	4283      	cmp	r3, r0
 800eefc:	f4bf af7d 	bcs.w	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef00:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800ef04:	2b05      	cmp	r3, #5
 800ef06:	d8d4      	bhi.n	800eeb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ef08:	e777      	b.n	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef0a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800ef0e:	4283      	cmp	r3, r0
 800ef10:	d09a      	beq.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef12:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800ef16:	4283      	cmp	r3, r0
 800ef18:	e7ca      	b.n	800eeb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800ef1a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800ef1e:	d22b      	bcs.n	800ef78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800ef20:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800ef24:	4283      	cmp	r3, r0
 800ef26:	d28f      	bcs.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef28:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800ef2c:	4283      	cmp	r3, r0
 800ef2e:	d816      	bhi.n	800ef5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800ef30:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800ef34:	4283      	cmp	r3, r0
 800ef36:	f4bf af60 	bcs.w	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef3a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800ef3e:	4283      	cmp	r3, r0
 800ef40:	d80a      	bhi.n	800ef58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800ef42:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800ef46:	4283      	cmp	r3, r0
 800ef48:	f4bf af57 	bcs.w	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef4c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800ef50:	4283      	cmp	r3, r0
 800ef52:	f43f af79 	beq.w	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef56:	e7ac      	b.n	800eeb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ef58:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800ef5c:	e7f8      	b.n	800ef50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ef5e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800ef62:	4283      	cmp	r3, r0
 800ef64:	d802      	bhi.n	800ef6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ef66:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800ef6a:	e798      	b.n	800ee9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800ef6c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800ef70:	4283      	cmp	r3, r0
 800ef72:	f47f af42 	bne.w	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef76:	e767      	b.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef78:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800ef7c:	4283      	cmp	r3, r0
 800ef7e:	f43f af63 	beq.w	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef82:	d802      	bhi.n	800ef8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ef84:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800ef88:	e7f2      	b.n	800ef70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800ef8a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800ef8e:	4283      	cmp	r3, r0
 800ef90:	d805      	bhi.n	800ef9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ef92:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800ef96:	4283      	cmp	r3, r0
 800ef98:	f4ff af2f 	bcc.w	800edfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ef9c:	e754      	b.n	800ee48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ef9e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800efa2:	4283      	cmp	r3, r0
 800efa4:	e7af      	b.n	800ef06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800efa6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800efaa:	4617      	mov	r7, r2
 800efac:	f102 0808 	add.w	r8, r2, #8
 800efb0:	4666      	mov	r6, ip
 800efb2:	6838      	ldr	r0, [r7, #0]
 800efb4:	6879      	ldr	r1, [r7, #4]
 800efb6:	46e6      	mov	lr, ip
 800efb8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800efbc:	3708      	adds	r7, #8
 800efbe:	4547      	cmp	r7, r8
 800efc0:	46f4      	mov	ip, lr
 800efc2:	d1f6      	bne.n	800efb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800efc4:	6838      	ldr	r0, [r7, #0]
 800efc6:	f8ce 0000 	str.w	r0, [lr]
 800efca:	88b9      	ldrh	r1, [r7, #4]
 800efcc:	f8ae 1004 	strh.w	r1, [lr, #4]
 800efd0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800efd4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800efd8:	d009      	beq.n	800efee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800efda:	7b51      	ldrb	r1, [r2, #13]
 800efdc:	7992      	ldrb	r2, [r2, #6]
 800efde:	0149      	lsls	r1, r1, #5
 800efe0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800efe4:	4311      	orrs	r1, r2
 800efe6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800efea:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800efee:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800eff2:	b2ad      	uxth	r5, r5
 800eff4:	d00d      	beq.n	800f012 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800eff6:	442b      	add	r3, r5
 800eff8:	b29b      	uxth	r3, r3
 800effa:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800effe:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f002:	10db      	asrs	r3, r3, #3
 800f004:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f008:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f00c:	4313      	orrs	r3, r2
 800f00e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f012:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f016:	00cb      	lsls	r3, r1, #3
 800f018:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f01c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f020:	064f      	lsls	r7, r1, #25
 800f022:	ea43 0302 	orr.w	r3, r3, r2
 800f026:	bf44      	itt	mi
 800f028:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f02c:	b21b      	sxthmi	r3, r3
 800f02e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f032:	1b5b      	subs	r3, r3, r5
 800f034:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800f038:	4632      	mov	r2, r6
 800f03a:	e6fa      	b.n	800ee32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800f03c:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f040:	4617      	mov	r7, r2
 800f042:	f102 0908 	add.w	r9, r2, #8
 800f046:	4666      	mov	r6, ip
 800f048:	6838      	ldr	r0, [r7, #0]
 800f04a:	6879      	ldr	r1, [r7, #4]
 800f04c:	46e0      	mov	r8, ip
 800f04e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800f052:	3708      	adds	r7, #8
 800f054:	454f      	cmp	r7, r9
 800f056:	46c4      	mov	ip, r8
 800f058:	d1f6      	bne.n	800f048 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800f05a:	6838      	ldr	r0, [r7, #0]
 800f05c:	f8c8 0000 	str.w	r0, [r8]
 800f060:	88b9      	ldrh	r1, [r7, #4]
 800f062:	f8a8 1004 	strh.w	r1, [r8, #4]
 800f066:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f06a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f06e:	d009      	beq.n	800f084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800f070:	7b51      	ldrb	r1, [r2, #13]
 800f072:	7992      	ldrb	r2, [r2, #6]
 800f074:	0149      	lsls	r1, r1, #5
 800f076:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f07a:	4311      	orrs	r1, r2
 800f07c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f080:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f084:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f088:	d00e      	beq.n	800f0a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800f08a:	eba3 030e 	sub.w	r3, r3, lr
 800f08e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f092:	b29b      	uxth	r3, r3
 800f094:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f098:	10db      	asrs	r3, r3, #3
 800f09a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f09e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f0a8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f0ac:	00cb      	lsls	r3, r1, #3
 800f0ae:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f0b2:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f0b6:	0648      	lsls	r0, r1, #25
 800f0b8:	ea43 0302 	orr.w	r3, r3, r2
 800f0bc:	bf44      	itt	mi
 800f0be:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f0c2:	b21b      	sxthmi	r3, r3
 800f0c4:	1b5d      	subs	r5, r3, r5
 800f0c6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f0ca:	e7b5      	b.n	800f038 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800f0cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800f0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d0:	461e      	mov	r6, r3
 800f0d2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f0d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f0d8:	4604      	mov	r4, r0
 800f0da:	4617      	mov	r7, r2
 800f0dc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f0e0:	f7f4 fd36 	bl	8003b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	b918      	cbnz	r0, 800f0f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800f0e8:	6030      	str	r0, [r6, #0]
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	4601      	mov	r1, r0
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	4638      	mov	r0, r7
 800f0f8:	4798      	blx	r3
 800f0fa:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f0fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f102:	4602      	mov	r2, r0
 800f104:	6030      	str	r0, [r6, #0]
 800f106:	d213      	bcs.n	800f130 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800f108:	4643      	mov	r3, r8
 800f10a:	4639      	mov	r1, r7
 800f10c:	4620      	mov	r0, r4
 800f10e:	f7ff fe3b 	bl	800ed88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f112:	6030      	str	r0, [r6, #0]
 800f114:	6833      	ldr	r3, [r6, #0]
 800f116:	b143      	cbz	r3, 800f12a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800f118:	7b5a      	ldrb	r2, [r3, #13]
 800f11a:	7a9b      	ldrb	r3, [r3, #10]
 800f11c:	0052      	lsls	r2, r2, #1
 800f11e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f122:	4313      	orrs	r3, r2
 800f124:	bf0c      	ite	eq
 800f126:	2301      	moveq	r3, #1
 800f128:	2300      	movne	r3, #0
 800f12a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f12e:	e7dc      	b.n	800f0ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800f130:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f134:	b29b      	uxth	r3, r3
 800f136:	2b7f      	cmp	r3, #127	@ 0x7f
 800f138:	d804      	bhi.n	800f144 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800f13a:	4639      	mov	r1, r7
 800f13c:	4620      	mov	r0, r4
 800f13e:	f7ff fced 	bl	800eb1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f142:	e7e6      	b.n	800f112 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800f144:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d0e3      	beq.n	800f114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f14c:	f640 1302 	movw	r3, #2306	@ 0x902
 800f150:	429d      	cmp	r5, r3
 800f152:	d1df      	bne.n	800f114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f154:	4601      	mov	r1, r0
 800f156:	4620      	mov	r0, r4
 800f158:	f7ff fcb2 	bl	800eac0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f15c:	e7d9      	b.n	800f112 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800f15e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800f15e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f162:	461e      	mov	r6, r3
 800f164:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f166:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f16a:	4604      	mov	r4, r0
 800f16c:	4617      	mov	r7, r2
 800f16e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f172:	f7f4 fced 	bl	8003b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f176:	4605      	mov	r5, r0
 800f178:	b918      	cbnz	r0, 800f182 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800f17a:	6030      	str	r0, [r6, #0]
 800f17c:	4628      	mov	r0, r5
 800f17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	4601      	mov	r1, r0
 800f186:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f18a:	4638      	mov	r0, r7
 800f18c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f190:	47c8      	blx	r9
 800f192:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f19a:	4602      	mov	r2, r0
 800f19c:	6030      	str	r0, [r6, #0]
 800f19e:	d213      	bcs.n	800f1c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800f1a0:	4643      	mov	r3, r8
 800f1a2:	4639      	mov	r1, r7
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f7ff fdef 	bl	800ed88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f1aa:	6030      	str	r0, [r6, #0]
 800f1ac:	6833      	ldr	r3, [r6, #0]
 800f1ae:	b143      	cbz	r3, 800f1c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800f1b0:	7b5a      	ldrb	r2, [r3, #13]
 800f1b2:	7a9b      	ldrb	r3, [r3, #10]
 800f1b4:	0052      	lsls	r2, r2, #1
 800f1b6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	bf0c      	ite	eq
 800f1be:	2301      	moveq	r3, #1
 800f1c0:	2300      	movne	r3, #0
 800f1c2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f1c6:	e7d9      	b.n	800f17c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800f1c8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1d0:	d804      	bhi.n	800f1dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800f1d2:	4639      	mov	r1, r7
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f7ff fca1 	bl	800eb1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f1da:	e7e6      	b.n	800f1aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800f1dc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d0e3      	beq.n	800f1ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800f1e4:	f640 1302 	movw	r3, #2306	@ 0x902
 800f1e8:	429d      	cmp	r5, r3
 800f1ea:	d1df      	bne.n	800f1ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800f1ec:	4601      	mov	r1, r0
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f7ff fc66 	bl	800eac0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f1f4:	e7d9      	b.n	800f1aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800f1f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800f1f6:	b510      	push	{r4, lr}
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800f1fe:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f200:	b1f1      	cbz	r1, 800f240 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800f202:	2b0a      	cmp	r3, #10
 800f204:	d02f      	beq.n	800f266 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800f206:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800f208:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800f20c:	3901      	subs	r1, #1
 800f20e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800f210:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800f214:	1c51      	adds	r1, r2, #1
 800f216:	b289      	uxth	r1, r1
 800f218:	2901      	cmp	r1, #1
 800f21a:	bf84      	itt	hi
 800f21c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f220:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800f222:	f103 0201 	add.w	r2, r3, #1
 800f226:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f228:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f22a:	bf98      	it	ls
 800f22c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800f22e:	4413      	add	r3, r2
 800f230:	b29b      	uxth	r3, r3
 800f232:	2b09      	cmp	r3, #9
 800f234:	bf88      	it	hi
 800f236:	3b0a      	subhi	r3, #10
 800f238:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f23c:	8458      	strh	r0, [r3, #34]	@ 0x22
 800f23e:	e7dc      	b.n	800f1fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800f240:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f242:	2b0a      	cmp	r3, #10
 800f244:	d00f      	beq.n	800f266 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800f246:	4620      	mov	r0, r4
 800f248:	f7ff fbe8 	bl	800ea1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800f24c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f24e:	1c5a      	adds	r2, r3, #1
 800f250:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f252:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f254:	4413      	add	r3, r2
 800f256:	b29b      	uxth	r3, r3
 800f258:	2b09      	cmp	r3, #9
 800f25a:	bf88      	it	hi
 800f25c:	3b0a      	subhi	r3, #10
 800f25e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f262:	8458      	strh	r0, [r3, #34]	@ 0x22
 800f264:	e7ec      	b.n	800f240 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800f266:	bd10      	pop	{r4, pc}

0800f268 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f26c:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800f270:	4604      	mov	r4, r0
 800f272:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800f274:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800f276:	3a01      	subs	r2, #1
 800f278:	8702      	strh	r2, [r0, #56]	@ 0x38
 800f27a:	1c5a      	adds	r2, r3, #1
 800f27c:	b292      	uxth	r2, r2
 800f27e:	2a09      	cmp	r2, #9
 800f280:	bf86      	itte	hi
 800f282:	3b09      	subhi	r3, #9
 800f284:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800f286:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800f288:	f7ff ffb5 	bl	800f1f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800f28c:	8c23      	ldrh	r3, [r4, #32]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	bf9c      	itt	ls
 800f292:	3301      	addls	r3, #1
 800f294:	8423      	strhls	r3, [r4, #32]
 800f296:	8be3      	ldrh	r3, [r4, #30]
 800f298:	b90b      	cbnz	r3, 800f29e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800f29a:	2302      	movs	r3, #2
 800f29c:	83e3      	strh	r3, [r4, #30]
 800f29e:	8be3      	ldrh	r3, [r4, #30]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	83e3      	strh	r3, [r4, #30]
 800f2a6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	8365      	strh	r5, [r4, #26]
 800f2ae:	bd38      	pop	{r3, r4, r5, pc}

0800f2b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800f2b0:	428a      	cmp	r2, r1
 800f2b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800f2b8:	d931      	bls.n	800f31e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800f2ba:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800f2bc:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800f2c0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800f2c4:	19ee      	adds	r6, r5, r7
 800f2c6:	1a54      	subs	r4, r2, r1
 800f2c8:	3e01      	subs	r6, #1
 800f2ca:	fa1f fe84 	uxth.w	lr, r4
 800f2ce:	b2b4      	uxth	r4, r6
 800f2d0:	eba4 090e 	sub.w	r9, r4, lr
 800f2d4:	fa1f f989 	uxth.w	r9, r9
 800f2d8:	2c09      	cmp	r4, #9
 800f2da:	4626      	mov	r6, r4
 800f2dc:	bf88      	it	hi
 800f2de:	f1a4 060a 	subhi.w	r6, r4, #10
 800f2e2:	f1bc 0f00 	cmp.w	ip, #0
 800f2e6:	bf08      	it	eq
 800f2e8:	f04f 0c02 	moveq.w	ip, #2
 800f2ec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f2f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f2f4:	fa1f fc8c 	uxth.w	ip, ip
 800f2f8:	3c01      	subs	r4, #1
 800f2fa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800f2fe:	b2a4      	uxth	r4, r4
 800f300:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800f304:	454c      	cmp	r4, r9
 800f306:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800f30a:	d1e5      	bne.n	800f2d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800f30c:	eba5 050e 	sub.w	r5, r5, lr
 800f310:	eb0e 0408 	add.w	r4, lr, r8
 800f314:	8705      	strh	r5, [r0, #56]	@ 0x38
 800f316:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800f31a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800f31e:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800f320:	1a64      	subs	r4, r4, r1
 800f322:	4439      	add	r1, r7
 800f324:	b289      	uxth	r1, r1
 800f326:	2909      	cmp	r1, #9
 800f328:	bf88      	it	hi
 800f32a:	390a      	subhi	r1, #10
 800f32c:	8704      	strh	r4, [r0, #56]	@ 0x38
 800f32e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f330:	250a      	movs	r5, #10
 800f332:	b18a      	cbz	r2, 800f358 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800f334:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800f336:	3a01      	subs	r2, #1
 800f338:	b292      	uxth	r2, r2
 800f33a:	3101      	adds	r1, #1
 800f33c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800f340:	8701      	strh	r1, [r0, #56]	@ 0x38
 800f342:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f344:	b901      	cbnz	r1, 800f348 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800f346:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800f348:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f34a:	3901      	subs	r1, #1
 800f34c:	b289      	uxth	r1, r1
 800f34e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f350:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f354:	844c      	strh	r4, [r1, #34]	@ 0x22
 800f356:	e7ec      	b.n	800f332 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800f358:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f35c:	f7ff bf4b 	b.w	800f1f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800f360 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800f360:	b570      	push	{r4, r5, r6, lr}
 800f362:	2500      	movs	r5, #0
 800f364:	4295      	cmp	r5, r2
 800f366:	d011      	beq.n	800f38c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800f368:	8bc4      	ldrh	r4, [r0, #30]
 800f36a:	f831 6b02 	ldrh.w	r6, [r1], #2
 800f36e:	4414      	add	r4, r2
 800f370:	3c01      	subs	r4, #1
 800f372:	1b64      	subs	r4, r4, r5
 800f374:	b2a4      	uxth	r4, r4
 800f376:	2c01      	cmp	r4, #1
 800f378:	bf88      	it	hi
 800f37a:	3c02      	subhi	r4, #2
 800f37c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f380:	8b64      	ldrh	r4, [r4, #26]
 800f382:	42b4      	cmp	r4, r6
 800f384:	d117      	bne.n	800f3b6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800f386:	3501      	adds	r5, #1
 800f388:	b2ad      	uxth	r5, r5
 800f38a:	e7eb      	b.n	800f364 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800f38c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f390:	2400      	movs	r4, #0
 800f392:	4413      	add	r3, r2
 800f394:	b2a2      	uxth	r2, r4
 800f396:	429a      	cmp	r2, r3
 800f398:	da0f      	bge.n	800f3ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800f39a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800f39c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800f3a0:	4432      	add	r2, r6
 800f3a2:	b292      	uxth	r2, r2
 800f3a4:	2a09      	cmp	r2, #9
 800f3a6:	bf88      	it	hi
 800f3a8:	3a0a      	subhi	r2, #10
 800f3aa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f3ae:	3401      	adds	r4, #1
 800f3b0:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800f3b2:	42aa      	cmp	r2, r5
 800f3b4:	d0ee      	beq.n	800f394 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ba:	2001      	movs	r0, #1
 800f3bc:	e7fc      	b.n	800f3b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800f3be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800f3be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	4616      	mov	r6, r2
 800f3c6:	1c8c      	adds	r4, r1, #2
 800f3c8:	8809      	ldrh	r1, [r1, #0]
 800f3ca:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800f3ce:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800f3d2:	42b3      	cmp	r3, r6
 800f3d4:	d124      	bne.n	800f420 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800f3d6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800f3da:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800f3de:	f001 070f 	and.w	r7, r1, #15
 800f3e2:	f8cd 8000 	str.w	r8, [sp]
 800f3e6:	464b      	mov	r3, r9
 800f3e8:	4652      	mov	r2, sl
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f7ff ffb7 	bl	800f360 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800f3f2:	4683      	mov	fp, r0
 800f3f4:	b168      	cbz	r0, 800f412 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800f3f6:	eb0a 0109 	add.w	r1, sl, r9
 800f3fa:	4441      	add	r1, r8
 800f3fc:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800f400:	463a      	mov	r2, r7
 800f402:	4649      	mov	r1, r9
 800f404:	4628      	mov	r0, r5
 800f406:	f7ff ff53 	bl	800f2b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f40a:	4658      	mov	r0, fp
 800f40c:	b003      	add	sp, #12
 800f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f412:	eb07 010a 	add.w	r1, r7, sl
 800f416:	4449      	add	r1, r9
 800f418:	4441      	add	r1, r8
 800f41a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f41e:	e7d2      	b.n	800f3c6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f420:	f04f 0b00 	mov.w	fp, #0
 800f424:	e7f1      	b.n	800f40a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f426 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f426:	b570      	push	{r4, r5, r6, lr}
 800f428:	8810      	ldrh	r0, [r2, #0]
 800f42a:	4298      	cmp	r0, r3
 800f42c:	d817      	bhi.n	800f45e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f42e:	1e48      	subs	r0, r1, #1
 800f430:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f434:	4298      	cmp	r0, r3
 800f436:	d312      	bcc.n	800f45e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f438:	2400      	movs	r4, #0
 800f43a:	428c      	cmp	r4, r1
 800f43c:	d20f      	bcs.n	800f45e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f43e:	1860      	adds	r0, r4, r1
 800f440:	1040      	asrs	r0, r0, #1
 800f442:	0085      	lsls	r5, r0, #2
 800f444:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f448:	42b3      	cmp	r3, r6
 800f44a:	d902      	bls.n	800f452 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f44c:	3001      	adds	r0, #1
 800f44e:	b284      	uxth	r4, r0
 800f450:	e7f3      	b.n	800f43a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f452:	d201      	bcs.n	800f458 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f454:	b281      	uxth	r1, r0
 800f456:	e7f0      	b.n	800f43a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f458:	442a      	add	r2, r5
 800f45a:	8850      	ldrh	r0, [r2, #2]
 800f45c:	bd70      	pop	{r4, r5, r6, pc}
 800f45e:	2000      	movs	r0, #0
 800f460:	e7fc      	b.n	800f45c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f462 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f466:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f468:	886f      	ldrh	r7, [r5, #2]
 800f46a:	4604      	mov	r4, r0
 800f46c:	087f      	lsrs	r7, r7, #1
 800f46e:	260b      	movs	r6, #11
 800f470:	3e01      	subs	r6, #1
 800f472:	d013      	beq.n	800f49c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f474:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f476:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f47a:	462a      	mov	r2, r5
 800f47c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f480:	4639      	mov	r1, r7
 800f482:	4643      	mov	r3, r8
 800f484:	4620      	mov	r0, r4
 800f486:	f7ff ffce 	bl	800f426 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f48a:	b138      	cbz	r0, 800f49c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f48c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f490:	4642      	mov	r2, r8
 800f492:	4620      	mov	r0, r4
 800f494:	f7ff ff93 	bl	800f3be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d1e9      	bne.n	800f470 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f4a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800f4a0:	b570      	push	{r4, r5, r6, lr}
 800f4a2:	694a      	ldr	r2, [r1, #20]
 800f4a4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800f4a6:	684b      	ldr	r3, [r1, #4]
 800f4a8:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800f4aa:	1b54      	subs	r4, r2, r5
 800f4ac:	f000 8106 	beq.w	800f6bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800f4b0:	1b9b      	subs	r3, r3, r6
 800f4b2:	d003      	beq.n	800f4bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f4b4:	4363      	muls	r3, r4
 800f4b6:	2210      	movs	r2, #16
 800f4b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4bc:	680c      	ldr	r4, [r1, #0]
 800f4be:	698a      	ldr	r2, [r1, #24]
 800f4c0:	1b65      	subs	r5, r4, r5
 800f4c2:	f000 80fd 	beq.w	800f6c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800f4c6:	1b92      	subs	r2, r2, r6
 800f4c8:	d003      	beq.n	800f4d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f4ca:	436a      	muls	r2, r5
 800f4cc:	2410      	movs	r4, #16
 800f4ce:	fb92 f2f4 	sdiv	r2, r2, r4
 800f4d2:	1a9b      	subs	r3, r3, r2
 800f4d4:	ee07 3a90 	vmov	s15, r3
 800f4d8:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800f6fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800f4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f4e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f4e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f4e8:	460a      	mov	r2, r1
 800f4ea:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	f100 040c 	add.w	r4, r0, #12
 800f4f4:	eeb1 6a43 	vneg.f32	s12, s6
 800f4f8:	edd2 7a02 	vldr	s15, [r2, #8]
 800f4fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f500:	3214      	adds	r2, #20
 800f502:	ece3 6a01 	vstmia	r3!, {s13}
 800f506:	ed52 7a02 	vldr	s15, [r2, #-8]
 800f50a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f50e:	429c      	cmp	r4, r3
 800f510:	edc3 7a02 	vstr	s15, [r3, #8]
 800f514:	ed52 7a01 	vldr	s15, [r2, #-4]
 800f518:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f51c:	edc3 7a05 	vstr	s15, [r3, #20]
 800f520:	d1ea      	bne.n	800f4f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800f522:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f524:	698b      	ldr	r3, [r1, #24]
 800f526:	edd0 4a02 	vldr	s9, [r0, #8]
 800f52a:	edd0 3a00 	vldr	s7, [r0]
 800f52e:	edd0 6a01 	vldr	s13, [r0, #4]
 800f532:	ed90 5a05 	vldr	s10, [r0, #20]
 800f536:	ed90 2a03 	vldr	s4, [r0, #12]
 800f53a:	edd0 5a04 	vldr	s11, [r0, #16]
 800f53e:	ed90 1a07 	vldr	s2, [r0, #28]
 800f542:	edd0 2a06 	vldr	s5, [r0, #24]
 800f546:	1a9b      	subs	r3, r3, r2
 800f548:	ee07 3a90 	vmov	s15, r3
 800f54c:	684b      	ldr	r3, [r1, #4]
 800f54e:	1a9b      	subs	r3, r3, r2
 800f550:	ee07 3a10 	vmov	s14, r3
 800f554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f558:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f55c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f560:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800f564:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f568:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800f56c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f570:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f574:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f578:	ee32 5a45 	vsub.f32	s10, s4, s10
 800f57c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f580:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800f584:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f586:	694a      	ldr	r2, [r1, #20]
 800f588:	1b13      	subs	r3, r2, r4
 800f58a:	ee07 3a10 	vmov	s14, r3
 800f58e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f592:	680b      	ldr	r3, [r1, #0]
 800f594:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f598:	1b1b      	subs	r3, r3, r4
 800f59a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800f59e:	ee07 3a10 	vmov	s14, r3
 800f5a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f5a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f5aa:	eee6 4a87 	vfma.f32	s9, s13, s14
 800f5ae:	ee64 4a86 	vmul.f32	s9, s9, s12
 800f5b2:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800f5b6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f5b8:	698b      	ldr	r3, [r1, #24]
 800f5ba:	1a9b      	subs	r3, r3, r2
 800f5bc:	ee06 3a90 	vmov	s13, r3
 800f5c0:	684b      	ldr	r3, [r1, #4]
 800f5c2:	1a9b      	subs	r3, r3, r2
 800f5c4:	ee07 3a10 	vmov	s14, r3
 800f5c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f5cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f5d0:	ee66 6a84 	vmul.f32	s13, s13, s8
 800f5d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f5d8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800f5dc:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f5e0:	ee66 6a83 	vmul.f32	s13, s13, s6
 800f5e4:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800f5e8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f5ea:	694a      	ldr	r2, [r1, #20]
 800f5ec:	1b13      	subs	r3, r2, r4
 800f5ee:	ee07 3a10 	vmov	s14, r3
 800f5f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f5f6:	680b      	ldr	r3, [r1, #0]
 800f5f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f5fc:	1b1b      	subs	r3, r3, r4
 800f5fe:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800f602:	ee07 3a10 	vmov	s14, r3
 800f606:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f60a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f60e:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f612:	edd0 5a08 	vldr	s11, [r0, #32]
 800f616:	ee25 5a06 	vmul.f32	s10, s10, s12
 800f61a:	ee31 1a65 	vsub.f32	s2, s2, s11
 800f61e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800f622:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f624:	698b      	ldr	r3, [r1, #24]
 800f626:	1a9b      	subs	r3, r3, r2
 800f628:	ee07 3a10 	vmov	s14, r3
 800f62c:	684b      	ldr	r3, [r1, #4]
 800f62e:	1a9b      	subs	r3, r3, r2
 800f630:	ee01 3a90 	vmov	s3, r3
 800f634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f638:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800f63c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f640:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800f644:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800f648:	ee61 1a84 	vmul.f32	s3, s3, s8
 800f64c:	eea1 7a21 	vfma.f32	s14, s2, s3
 800f650:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f654:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800f658:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f65a:	694a      	ldr	r2, [r1, #20]
 800f65c:	1b13      	subs	r3, r2, r4
 800f65e:	ee03 3a10 	vmov	s6, r3
 800f662:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f666:	680b      	ldr	r3, [r1, #0]
 800f668:	ee23 3a04 	vmul.f32	s6, s6, s8
 800f66c:	1b1b      	subs	r3, r3, r4
 800f66e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800f672:	ee03 3a10 	vmov	s6, r3
 800f676:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f67a:	ee23 4a04 	vmul.f32	s8, s6, s8
 800f67e:	eee1 5a04 	vfma.f32	s11, s2, s8
 800f682:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f686:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800f68a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800f68e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800f692:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69a:	dd13      	ble.n	800f6c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800f69c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6a0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800f6a4:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800f6a6:	eee3 7a87 	vfma.f32	s15, s7, s14
 800f6aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b2:	dd15      	ble.n	800f6e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800f6b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6b8:	6403      	str	r3, [r0, #64]	@ 0x40
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	4623      	mov	r3, r4
 800f6be:	e6fd      	b.n	800f4bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f6c0:	462a      	mov	r2, r5
 800f6c2:	e706      	b.n	800f4d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f6c4:	d502      	bpl.n	800f6cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800f6c6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800f6ca:	e7e9      	b.n	800f6a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800f6cc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800f6d0:	eea3 2a85 	vfma.f32	s4, s7, s10
 800f6d4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800f6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6dc:	dade      	bge.n	800f69c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800f6de:	e7f2      	b.n	800f6c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800f6e0:	d502      	bpl.n	800f6e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800f6e2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800f6e6:	e7e7      	b.n	800f6b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800f6e8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800f6ec:	eee3 4a86 	vfma.f32	s9, s7, s12
 800f6f0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800f6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f8:	dadc      	bge.n	800f6b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800f6fa:	e7f2      	b.n	800f6e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800f6fc:	3d800000 	.word	0x3d800000

0800f700 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800f700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f704:	2714      	movs	r7, #20
 800f706:	435f      	muls	r7, r3
 800f708:	eb02 0c07 	add.w	ip, r2, r7
 800f70c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800f710:	f115 0e0f 	adds.w	lr, r5, #15
 800f714:	f100 80a2 	bmi.w	800f85c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800f718:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800f71c:	9c08      	ldr	r4, [sp, #32]
 800f71e:	f8c0 e014 	str.w	lr, [r0, #20]
 800f722:	2614      	movs	r6, #20
 800f724:	4366      	muls	r6, r4
 800f726:	eb02 0806 	add.w	r8, r2, r6
 800f72a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f72e:	f115 040f 	adds.w	r4, r5, #15
 800f732:	f100 809f 	bmi.w	800f874 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800f736:	1124      	asrs	r4, r4, #4
 800f738:	eba4 040e 	sub.w	r4, r4, lr
 800f73c:	6184      	str	r4, [r0, #24]
 800f73e:	2c00      	cmp	r4, #0
 800f740:	f000 808a 	beq.w	800f858 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800f744:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800f748:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f74c:	5995      	ldr	r5, [r2, r6]
 800f74e:	eba4 0809 	sub.w	r8, r4, r9
 800f752:	59d4      	ldr	r4, [r2, r7]
 800f754:	eba5 0a04 	sub.w	sl, r5, r4
 800f758:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800f75c:	fb0e fe05 	mul.w	lr, lr, r5
 800f760:	fb0a ee19 	mls	lr, sl, r9, lr
 800f764:	fb08 e404 	mla	r4, r8, r4, lr
 800f768:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800f76c:	3c01      	subs	r4, #1
 800f76e:	19a4      	adds	r4, r4, r6
 800f770:	f100 808c 	bmi.w	800f88c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800f774:	fb94 fef6 	sdiv	lr, r4, r6
 800f778:	f8c0 e000 	str.w	lr, [r0]
 800f77c:	fb06 441e 	mls	r4, r6, lr, r4
 800f780:	6104      	str	r4, [r0, #16]
 800f782:	2d00      	cmp	r5, #0
 800f784:	f2c0 8095 	blt.w	800f8b2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800f788:	fb95 f4f6 	sdiv	r4, r5, r6
 800f78c:	6044      	str	r4, [r0, #4]
 800f78e:	fb06 5514 	mls	r5, r6, r4, r5
 800f792:	6085      	str	r5, [r0, #8]
 800f794:	60c6      	str	r6, [r0, #12]
 800f796:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f79a:	6945      	ldr	r5, [r0, #20]
 800f79c:	59d2      	ldr	r2, [r2, r7]
 800f79e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800f8d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800f7a2:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800f7a6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800f7aa:	ee07 4a10 	vmov	s14, r4
 800f7ae:	6804      	ldr	r4, [r0, #0]
 800f7b0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800f7b4:	ee07 2a90 	vmov	s15, r2
 800f7b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f7bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f7c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f7c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f7cc:	edd3 6a00 	vldr	s13, [r3]
 800f7d0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f7d4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800f7d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f7dc:	edc0 6a07 	vstr	s13, [r0, #28]
 800f7e0:	edd0 6a01 	vldr	s13, [r0, #4]
 800f7e4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800f7e8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800f7ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f7f0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f7f4:	ed80 6a08 	vstr	s12, [r0, #32]
 800f7f8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800f7fa:	6242      	str	r2, [r0, #36]	@ 0x24
 800f7fc:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800f800:	ed93 6a03 	vldr	s12, [r3, #12]
 800f804:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f808:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800f80c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f810:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800f814:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800f818:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800f81c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f820:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800f824:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f826:	6302      	str	r2, [r0, #48]	@ 0x30
 800f828:	ed93 6a06 	vldr	s12, [r3, #24]
 800f82c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800f830:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f834:	eeb0 7a46 	vmov.f32	s14, s12
 800f838:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800f83c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f840:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800f844:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800f848:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800f84c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f850:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800f854:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800f856:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800f858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f85c:	f1c5 0501 	rsb	r5, r5, #1
 800f860:	f015 050f 	ands.w	r5, r5, #15
 800f864:	bf18      	it	ne
 800f866:	2501      	movne	r5, #1
 800f868:	2410      	movs	r4, #16
 800f86a:	fb9e fef4 	sdiv	lr, lr, r4
 800f86e:	ebae 0e05 	sub.w	lr, lr, r5
 800f872:	e753      	b.n	800f71c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800f874:	f1c5 0501 	rsb	r5, r5, #1
 800f878:	f015 050f 	ands.w	r5, r5, #15
 800f87c:	bf18      	it	ne
 800f87e:	2501      	movne	r5, #1
 800f880:	f04f 0910 	mov.w	r9, #16
 800f884:	fb94 f4f9 	sdiv	r4, r4, r9
 800f888:	1b64      	subs	r4, r4, r5
 800f88a:	e755      	b.n	800f738 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800f88c:	4264      	negs	r4, r4
 800f88e:	fb94 fef6 	sdiv	lr, r4, r6
 800f892:	f1ce 0800 	rsb	r8, lr, #0
 800f896:	fb06 441e 	mls	r4, r6, lr, r4
 800f89a:	f8c0 8000 	str.w	r8, [r0]
 800f89e:	6104      	str	r4, [r0, #16]
 800f8a0:	2c00      	cmp	r4, #0
 800f8a2:	f43f af6e 	beq.w	800f782 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800f8a6:	ea6f 0e0e 	mvn.w	lr, lr
 800f8aa:	f8c0 e000 	str.w	lr, [r0]
 800f8ae:	1b34      	subs	r4, r6, r4
 800f8b0:	e766      	b.n	800f780 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800f8b2:	426d      	negs	r5, r5
 800f8b4:	fb95 f4f6 	sdiv	r4, r5, r6
 800f8b8:	f1c4 0e00 	rsb	lr, r4, #0
 800f8bc:	fb06 5514 	mls	r5, r6, r4, r5
 800f8c0:	f8c0 e004 	str.w	lr, [r0, #4]
 800f8c4:	6085      	str	r5, [r0, #8]
 800f8c6:	2d00      	cmp	r5, #0
 800f8c8:	f43f af64 	beq.w	800f794 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800f8cc:	43e4      	mvns	r4, r4
 800f8ce:	6044      	str	r4, [r0, #4]
 800f8d0:	1b75      	subs	r5, r6, r5
 800f8d2:	e75e      	b.n	800f792 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800f8d4:	3d800000 	.word	0x3d800000

0800f8d8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 800f8d8:	4602      	mov	r2, r0
 800f8da:	b148      	cbz	r0, 800f8f0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	b298      	uxth	r0, r3
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800f8e6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 800f8ea:	2900      	cmp	r1, #0
 800f8ec:	d1f7      	bne.n	800f8de <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 800f8ee:	4770      	bx	lr
 800f8f0:	4770      	bx	lr

0800f8f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 800f8f2:	b530      	push	{r4, r5, lr}
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	b159      	cbz	r1, 800f910 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 800f8f8:	b148      	cbz	r0, 800f90e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	b298      	uxth	r0, r3
 800f8fe:	4282      	cmp	r2, r0
 800f900:	d905      	bls.n	800f90e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800f902:	5ccd      	ldrb	r5, [r1, r3]
 800f904:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 800f908:	3301      	adds	r3, #1
 800f90a:	2d00      	cmp	r5, #0
 800f90c:	d1f6      	bne.n	800f8fc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 800f90e:	bd30      	pop	{r4, r5, pc}
 800f910:	4608      	mov	r0, r1
 800f912:	e7fc      	b.n	800f90e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0800f914 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 800f914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f916:	b08b      	sub	sp, #44	@ 0x2c
 800f918:	468c      	mov	ip, r1
 800f91a:	2100      	movs	r1, #0
 800f91c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f920:	4604      	mov	r4, r0
 800f922:	261f      	movs	r6, #31
 800f924:	af01      	add	r7, sp, #4
 800f926:	fb94 fef3 	sdiv	lr, r4, r3
 800f92a:	fb03 441e 	mls	r4, r3, lr, r4
 800f92e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f932:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 800f936:	b2ec      	uxtb	r4, r5
 800f938:	2d09      	cmp	r5, #9
 800f93a:	bfd4      	ite	le
 800f93c:	3430      	addle	r4, #48	@ 0x30
 800f93e:	3457      	addgt	r4, #87	@ 0x57
 800f940:	b2e4      	uxtb	r4, r4
 800f942:	55bc      	strb	r4, [r7, r6]
 800f944:	4674      	mov	r4, lr
 800f946:	1e71      	subs	r1, r6, #1
 800f948:	b974      	cbnz	r4, 800f968 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	da05      	bge.n	800f95a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 800f94e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f950:	4419      	add	r1, r3
 800f952:	232d      	movs	r3, #45	@ 0x2d
 800f954:	f801 3c24 	strb.w	r3, [r1, #-36]
 800f958:	1eb1      	subs	r1, r6, #2
 800f95a:	3101      	adds	r1, #1
 800f95c:	4439      	add	r1, r7
 800f95e:	4660      	mov	r0, ip
 800f960:	f7ff ffc7 	bl	800f8f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800f964:	b00b      	add	sp, #44	@ 0x2c
 800f966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f968:	460e      	mov	r6, r1
 800f96a:	e7dc      	b.n	800f926 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0800f96c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 800f96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f96e:	b08b      	sub	sp, #44	@ 0x2c
 800f970:	468c      	mov	ip, r1
 800f972:	2100      	movs	r1, #0
 800f974:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f978:	ae01      	add	r6, sp, #4
 800f97a:	211f      	movs	r1, #31
 800f97c:	fbb0 f7f3 	udiv	r7, r0, r3
 800f980:	fb03 0517 	mls	r5, r3, r7, r0
 800f984:	b2ec      	uxtb	r4, r5
 800f986:	2d09      	cmp	r5, #9
 800f988:	bfd4      	ite	le
 800f98a:	3430      	addle	r4, #48	@ 0x30
 800f98c:	3457      	addgt	r4, #87	@ 0x57
 800f98e:	b2e4      	uxtb	r4, r4
 800f990:	558c      	strb	r4, [r1, r6]
 800f992:	4638      	mov	r0, r7
 800f994:	1e4c      	subs	r4, r1, #1
 800f996:	b92f      	cbnz	r7, 800f9a4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 800f998:	4431      	add	r1, r6
 800f99a:	4660      	mov	r0, ip
 800f99c:	f7ff ffa9 	bl	800f8f2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800f9a0:	b00b      	add	sp, #44	@ 0x2c
 800f9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	e7e9      	b.n	800f97c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0800f9a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 800f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	4691      	mov	r9, r2
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	6802      	ldr	r2, [r0, #0]
 800f9b2:	9201      	str	r2, [sp, #4]
 800f9b4:	4688      	mov	r8, r1
 800f9b6:	4683      	mov	fp, r0
 800f9b8:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800f9bc:	9103      	str	r1, [sp, #12]
 800f9be:	4610      	mov	r0, r2
 800f9c0:	461c      	mov	r4, r3
 800f9c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800f9c6:	9302      	str	r3, [sp, #8]
 800f9c8:	f7ff ff86 	bl	800f8d8 <_ZN8touchgfx7Unicode6strlenEPKt>
 800f9cc:	f1b8 0f00 	cmp.w	r8, #0
 800f9d0:	bf0c      	ite	eq
 800f9d2:	4684      	moveq	ip, r0
 800f9d4:	f100 0c01 	addne.w	ip, r0, #1
 800f9d8:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 800f9dc:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 800f9e0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800f9e2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800f9e4:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 800f9e8:	9903      	ldr	r1, [sp, #12]
 800f9ea:	fa1f fc8c 	uxth.w	ip, ip
 800f9ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f9f2:	d041      	beq.n	800fa78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800f9f4:	d834      	bhi.n	800fa60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 800f9f6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800f9fa:	d059      	beq.n	800fab0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 800f9fc:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 800fa00:	d03a      	beq.n	800fa78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800fa02:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 800fa06:	d034      	beq.n	800fa72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800fa08:	2400      	movs	r4, #0
 800fa0a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800fa0e:	3a01      	subs	r2, #1
 800fa10:	b169      	cbz	r1, 800fa2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800fa12:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fa14:	458c      	cmp	ip, r1
 800fa16:	da09      	bge.n	800fa2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800fa18:	eba1 010c 	sub.w	r1, r1, ip
 800fa1c:	b289      	uxth	r1, r1
 800fa1e:	b933      	cbnz	r3, 800fa2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800fa20:	2e00      	cmp	r6, #0
 800fa22:	d051      	beq.n	800fac8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800fa24:	2800      	cmp	r0, #0
 800fa26:	d04f      	beq.n	800fac8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800fa28:	440c      	add	r4, r1
 800fa2a:	b2a4      	uxth	r4, r4
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	682b      	ldr	r3, [r5, #0]
 800fa30:	4293      	cmp	r3, r2
 800fa32:	da07      	bge.n	800fa44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800fa34:	f1b8 0f00 	cmp.w	r8, #0
 800fa38:	d004      	beq.n	800fa44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800fa3a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 800fa3e:	682b      	ldr	r3, [r5, #0]
 800fa40:	3301      	adds	r3, #1
 800fa42:	602b      	str	r3, [r5, #0]
 800fa44:	2730      	movs	r7, #48	@ 0x30
 800fa46:	2c00      	cmp	r4, #0
 800fa48:	d04e      	beq.n	800fae8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800fa4a:	682e      	ldr	r6, [r5, #0]
 800fa4c:	3c01      	subs	r4, #1
 800fa4e:	42b2      	cmp	r2, r6
 800fa50:	b2a4      	uxth	r4, r4
 800fa52:	dd49      	ble.n	800fae8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800fa54:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800fa58:	682b      	ldr	r3, [r5, #0]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	602b      	str	r3, [r5, #0]
 800fa5e:	e7f2      	b.n	800fa46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 800fa60:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 800fa64:	d01d      	beq.n	800faa2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 800fa66:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 800fa6a:	d002      	beq.n	800fa72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800fa6c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 800fa70:	e7c9      	b.n	800fa06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 800fa72:	4684      	mov	ip, r0
 800fa74:	f04f 0800 	mov.w	r8, #0
 800fa78:	2c00      	cmp	r4, #0
 800fa7a:	d0c6      	beq.n	800fa0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800fa7c:	b947      	cbnz	r7, 800fa90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800fa7e:	2801      	cmp	r0, #1
 800fa80:	d106      	bne.n	800fa90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800fa82:	8814      	ldrh	r4, [r2, #0]
 800fa84:	2c30      	cmp	r4, #48	@ 0x30
 800fa86:	bf02      	ittt	eq
 800fa88:	3202      	addeq	r2, #2
 800fa8a:	f8cb 2000 	streq.w	r2, [fp]
 800fa8e:	4638      	moveq	r0, r7
 800fa90:	45bc      	cmp	ip, r7
 800fa92:	da14      	bge.n	800fabe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 800fa94:	b2bf      	uxth	r7, r7
 800fa96:	eba7 040c 	sub.w	r4, r7, ip
 800fa9a:	b2a4      	uxth	r4, r4
 800fa9c:	46bc      	mov	ip, r7
 800fa9e:	2600      	movs	r6, #0
 800faa0:	e7b3      	b.n	800fa0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800faa2:	4684      	mov	ip, r0
 800faa4:	b16c      	cbz	r4, 800fac2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 800faa6:	42b8      	cmp	r0, r7
 800faa8:	dd00      	ble.n	800faac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 800faaa:	b2b8      	uxth	r0, r7
 800faac:	2400      	movs	r4, #0
 800faae:	e003      	b.n	800fab8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 800fab0:	f04f 0c01 	mov.w	ip, #1
 800fab4:	2400      	movs	r4, #0
 800fab6:	4660      	mov	r0, ip
 800fab8:	4626      	mov	r6, r4
 800faba:	46a0      	mov	r8, r4
 800fabc:	e7a5      	b.n	800fa0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800fabe:	2400      	movs	r4, #0
 800fac0:	e7ed      	b.n	800fa9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 800fac2:	4626      	mov	r6, r4
 800fac4:	46a0      	mov	r8, r4
 800fac6:	e7a0      	b.n	800fa0a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800fac8:	2900      	cmp	r1, #0
 800faca:	d0b0      	beq.n	800fa2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800facc:	2720      	movs	r7, #32
 800face:	682e      	ldr	r6, [r5, #0]
 800fad0:	2900      	cmp	r1, #0
 800fad2:	d0ac      	beq.n	800fa2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800fad4:	3901      	subs	r1, #1
 800fad6:	4296      	cmp	r6, r2
 800fad8:	b289      	uxth	r1, r1
 800fada:	daa7      	bge.n	800fa2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800fadc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	3301      	adds	r3, #1
 800fae4:	602b      	str	r3, [r5, #0]
 800fae6:	e7f2      	b.n	800face <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 800fae8:	b188      	cbz	r0, 800fb0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800faea:	682b      	ldr	r3, [r5, #0]
 800faec:	3801      	subs	r0, #1
 800faee:	429a      	cmp	r2, r3
 800faf0:	b280      	uxth	r0, r0
 800faf2:	dd0c      	ble.n	800fb0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800faf4:	f8db 3000 	ldr.w	r3, [fp]
 800faf8:	1c9c      	adds	r4, r3, #2
 800fafa:	f8cb 4000 	str.w	r4, [fp]
 800fafe:	881c      	ldrh	r4, [r3, #0]
 800fb00:	682b      	ldr	r3, [r5, #0]
 800fb02:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 800fb06:	682b      	ldr	r3, [r5, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	602b      	str	r3, [r5, #0]
 800fb0c:	e7ec      	b.n	800fae8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800fb0e:	2620      	movs	r6, #32
 800fb10:	b151      	cbz	r1, 800fb28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800fb12:	6828      	ldr	r0, [r5, #0]
 800fb14:	3901      	subs	r1, #1
 800fb16:	4282      	cmp	r2, r0
 800fb18:	b289      	uxth	r1, r1
 800fb1a:	dd05      	ble.n	800fb28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800fb1c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	3301      	adds	r3, #1
 800fb24:	602b      	str	r3, [r5, #0]
 800fb26:	e7f3      	b.n	800fb10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 800fb28:	b005      	add	sp, #20
 800fb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 800fb2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb32:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 800fb36:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 800fb3a:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 800fb3e:	2400      	movs	r4, #0
 800fb40:	8014      	strh	r4, [r2, #0]
 800fb42:	701c      	strb	r4, [r3, #0]
 800fb44:	f888 4000 	strb.w	r4, [r8]
 800fb48:	f88c 4000 	strb.w	r4, [ip]
 800fb4c:	f88e 4000 	strb.w	r4, [lr]
 800fb50:	703c      	strb	r4, [r7, #0]
 800fb52:	6804      	ldr	r4, [r0, #0]
 800fb54:	b1a4      	cbz	r4, 800fb80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 800fb56:	8824      	ldrh	r4, [r4, #0]
 800fb58:	f04f 0901 	mov.w	r9, #1
 800fb5c:	b314      	cbz	r4, 800fba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800fb5e:	2c2b      	cmp	r4, #43	@ 0x2b
 800fb60:	d001      	beq.n	800fb66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 800fb62:	2c20      	cmp	r4, #32
 800fb64:	d110      	bne.n	800fb88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 800fb66:	8014      	strh	r4, [r2, #0]
 800fb68:	6804      	ldr	r4, [r0, #0]
 800fb6a:	b10c      	cbz	r4, 800fb70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 800fb6c:	3402      	adds	r4, #2
 800fb6e:	6004      	str	r4, [r0, #0]
 800fb70:	680c      	ldr	r4, [r1, #0]
 800fb72:	b10c      	cbz	r4, 800fb78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 800fb74:	3401      	adds	r4, #1
 800fb76:	600c      	str	r4, [r1, #0]
 800fb78:	6804      	ldr	r4, [r0, #0]
 800fb7a:	b17c      	cbz	r4, 800fb9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 800fb7c:	8824      	ldrh	r4, [r4, #0]
 800fb7e:	e7ed      	b.n	800fb5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800fb80:	680c      	ldr	r4, [r1, #0]
 800fb82:	b17c      	cbz	r4, 800fba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800fb84:	7824      	ldrb	r4, [r4, #0]
 800fb86:	e7e7      	b.n	800fb58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 800fb88:	2c2d      	cmp	r4, #45	@ 0x2d
 800fb8a:	d102      	bne.n	800fb92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 800fb8c:	f883 9000 	strb.w	r9, [r3]
 800fb90:	e7ea      	b.n	800fb68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800fb92:	2c23      	cmp	r4, #35	@ 0x23
 800fb94:	d107      	bne.n	800fba6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 800fb96:	f888 9000 	strb.w	r9, [r8]
 800fb9a:	e7e5      	b.n	800fb68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800fb9c:	680c      	ldr	r4, [r1, #0]
 800fb9e:	b10c      	cbz	r4, 800fba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800fba0:	7824      	ldrb	r4, [r4, #0]
 800fba2:	e7db      	b.n	800fb5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800fba4:	2400      	movs	r4, #0
 800fba6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800fbaa:	2b09      	cmp	r3, #9
 800fbac:	d901      	bls.n	800fbb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 800fbae:	2c2a      	cmp	r4, #42	@ 0x2a
 800fbb0:	d122      	bne.n	800fbf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	2c30      	cmp	r4, #48	@ 0x30
 800fbb6:	f88e 3000 	strb.w	r3, [lr]
 800fbba:	d10d      	bne.n	800fbd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800fbbc:	f88c 3000 	strb.w	r3, [ip]
 800fbc0:	6803      	ldr	r3, [r0, #0]
 800fbc2:	b10b      	cbz	r3, 800fbc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 800fbc4:	3302      	adds	r3, #2
 800fbc6:	6003      	str	r3, [r0, #0]
 800fbc8:	680b      	ldr	r3, [r1, #0]
 800fbca:	b10b      	cbz	r3, 800fbd0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 800fbcc:	3301      	adds	r3, #1
 800fbce:	600b      	str	r3, [r1, #0]
 800fbd0:	6803      	ldr	r3, [r0, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d02f      	beq.n	800fc36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 800fbd6:	881c      	ldrh	r4, [r3, #0]
 800fbd8:	2c2a      	cmp	r4, #42	@ 0x2a
 800fbda:	d135      	bne.n	800fc48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800fbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe0:	6033      	str	r3, [r6, #0]
 800fbe2:	6803      	ldr	r3, [r0, #0]
 800fbe4:	b10b      	cbz	r3, 800fbea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 800fbe6:	3302      	adds	r3, #2
 800fbe8:	6003      	str	r3, [r0, #0]
 800fbea:	680b      	ldr	r3, [r1, #0]
 800fbec:	b10b      	cbz	r3, 800fbf2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 800fbee:	3301      	adds	r3, #1
 800fbf0:	600b      	str	r3, [r1, #0]
 800fbf2:	6803      	ldr	r3, [r0, #0]
 800fbf4:	b31b      	cbz	r3, 800fc3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 800fbf6:	881c      	ldrh	r4, [r3, #0]
 800fbf8:	2c2e      	cmp	r4, #46	@ 0x2e
 800fbfa:	d11a      	bne.n	800fc32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	703b      	strb	r3, [r7, #0]
 800fc00:	6803      	ldr	r3, [r0, #0]
 800fc02:	b10b      	cbz	r3, 800fc08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 800fc04:	3302      	adds	r3, #2
 800fc06:	6003      	str	r3, [r0, #0]
 800fc08:	680b      	ldr	r3, [r1, #0]
 800fc0a:	b10b      	cbz	r3, 800fc10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	600b      	str	r3, [r1, #0]
 800fc10:	6803      	ldr	r3, [r0, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d036      	beq.n	800fc84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 800fc16:	881b      	ldrh	r3, [r3, #0]
 800fc18:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc1a:	d137      	bne.n	800fc8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800fc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc20:	602b      	str	r3, [r5, #0]
 800fc22:	6803      	ldr	r3, [r0, #0]
 800fc24:	b10b      	cbz	r3, 800fc2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 800fc26:	3302      	adds	r3, #2
 800fc28:	6003      	str	r3, [r0, #0]
 800fc2a:	680b      	ldr	r3, [r1, #0]
 800fc2c:	b10b      	cbz	r3, 800fc32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800fc2e:	3301      	adds	r3, #1
 800fc30:	600b      	str	r3, [r1, #0]
 800fc32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc36:	680c      	ldr	r4, [r1, #0]
 800fc38:	b134      	cbz	r4, 800fc48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800fc3a:	7824      	ldrb	r4, [r4, #0]
 800fc3c:	e7cc      	b.n	800fbd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800fc3e:	680b      	ldr	r3, [r1, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d0f6      	beq.n	800fc32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800fc44:	781c      	ldrb	r4, [r3, #0]
 800fc46:	e7d7      	b.n	800fbf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800fc48:	2300      	movs	r3, #0
 800fc4a:	6033      	str	r3, [r6, #0]
 800fc4c:	220a      	movs	r2, #10
 800fc4e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fc52:	fa1f f38c 	uxth.w	r3, ip
 800fc56:	2b09      	cmp	r3, #9
 800fc58:	d8ce      	bhi.n	800fbf8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800fc5a:	6833      	ldr	r3, [r6, #0]
 800fc5c:	fb02 c303 	mla	r3, r2, r3, ip
 800fc60:	6033      	str	r3, [r6, #0]
 800fc62:	6803      	ldr	r3, [r0, #0]
 800fc64:	b10b      	cbz	r3, 800fc6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 800fc66:	3302      	adds	r3, #2
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	680b      	ldr	r3, [r1, #0]
 800fc6c:	b10b      	cbz	r3, 800fc72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 800fc6e:	3301      	adds	r3, #1
 800fc70:	600b      	str	r3, [r1, #0]
 800fc72:	6803      	ldr	r3, [r0, #0]
 800fc74:	b10b      	cbz	r3, 800fc7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 800fc76:	881c      	ldrh	r4, [r3, #0]
 800fc78:	e7e9      	b.n	800fc4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800fc7a:	680c      	ldr	r4, [r1, #0]
 800fc7c:	2c00      	cmp	r4, #0
 800fc7e:	d0e6      	beq.n	800fc4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800fc80:	7824      	ldrb	r4, [r4, #0]
 800fc82:	e7e4      	b.n	800fc4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800fc84:	680b      	ldr	r3, [r1, #0]
 800fc86:	b10b      	cbz	r3, 800fc8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	e7c5      	b.n	800fc18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	602a      	str	r2, [r5, #0]
 800fc90:	240a      	movs	r4, #10
 800fc92:	3b30      	subs	r3, #48	@ 0x30
 800fc94:	b29e      	uxth	r6, r3
 800fc96:	2e09      	cmp	r6, #9
 800fc98:	682a      	ldr	r2, [r5, #0]
 800fc9a:	d813      	bhi.n	800fcc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 800fc9c:	fb04 3302 	mla	r3, r4, r2, r3
 800fca0:	602b      	str	r3, [r5, #0]
 800fca2:	6803      	ldr	r3, [r0, #0]
 800fca4:	b10b      	cbz	r3, 800fcaa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 800fca6:	3302      	adds	r3, #2
 800fca8:	6003      	str	r3, [r0, #0]
 800fcaa:	680b      	ldr	r3, [r1, #0]
 800fcac:	b10b      	cbz	r3, 800fcb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 800fcae:	3301      	adds	r3, #1
 800fcb0:	600b      	str	r3, [r1, #0]
 800fcb2:	6803      	ldr	r3, [r0, #0]
 800fcb4:	b10b      	cbz	r3, 800fcba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 800fcb6:	881b      	ldrh	r3, [r3, #0]
 800fcb8:	e7eb      	b.n	800fc92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800fcba:	680b      	ldr	r3, [r1, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d0e8      	beq.n	800fc92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	e7e6      	b.n	800fc92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800fcc4:	2a06      	cmp	r2, #6
 800fcc6:	bfa8      	it	ge
 800fcc8:	2206      	movge	r2, #6
 800fcca:	602a      	str	r2, [r5, #0]
 800fccc:	e7b1      	b.n	800fc32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0800fcce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 800fcce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd2:	b0a3      	sub	sp, #140	@ 0x8c
 800fcd4:	2600      	movs	r6, #0
 800fcd6:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 800fcda:	4607      	mov	r7, r0
 800fcdc:	4688      	mov	r8, r1
 800fcde:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fce2:	4631      	mov	r1, r6
 800fce4:	2242      	movs	r2, #66	@ 0x42
 800fce6:	4648      	mov	r0, r9
 800fce8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800fcea:	960d      	str	r6, [sp, #52]	@ 0x34
 800fcec:	f003 facf 	bl	801328e <memset>
 800fcf0:	b15f      	cbz	r7, 800fd0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 800fcf2:	f108 3aff 	add.w	sl, r8, #4294967295
 800fcf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fcf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcfa:	b152      	cbz	r2, 800fd12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 800fcfc:	8812      	ldrh	r2, [r2, #0]
 800fcfe:	b10a      	cbz	r2, 800fd04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800fd00:	459a      	cmp	sl, r3
 800fd02:	dc2e      	bgt.n	800fd62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 800fd04:	2200      	movs	r2, #0
 800fd06:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	b023      	add	sp, #140	@ 0x8c
 800fd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd12:	9a08      	ldr	r2, [sp, #32]
 800fd14:	2a00      	cmp	r2, #0
 800fd16:	d0f5      	beq.n	800fd04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800fd18:	7812      	ldrb	r2, [r2, #0]
 800fd1a:	e7f0      	b.n	800fcfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 800fd1c:	2d00      	cmp	r5, #0
 800fd1e:	d0ea      	beq.n	800fcf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fd20:	782a      	ldrb	r2, [r5, #0]
 800fd22:	b142      	cbz	r2, 800fd36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 800fd24:	2a25      	cmp	r2, #37	@ 0x25
 800fd26:	d001      	beq.n	800fd2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 800fd28:	459a      	cmp	sl, r3
 800fd2a:	dc08      	bgt.n	800fd3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 800fd2c:	f1bb 0f00 	cmp.w	fp, #0
 800fd30:	d121      	bne.n	800fd76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 800fd32:	2d00      	cmp	r5, #0
 800fd34:	d0df      	beq.n	800fcf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fd36:	782a      	ldrb	r2, [r5, #0]
 800fd38:	f04f 0b00 	mov.w	fp, #0
 800fd3c:	e01d      	b.n	800fd7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 800fd3e:	f1bb 0f00 	cmp.w	fp, #0
 800fd42:	d078      	beq.n	800fe36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 800fd44:	f8bb 2000 	ldrh.w	r2, [fp]
 800fd48:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800fd4c:	f1bb 0f00 	cmp.w	fp, #0
 800fd50:	d002      	beq.n	800fd58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 800fd52:	f10b 0202 	add.w	r2, fp, #2
 800fd56:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd58:	b10d      	cbz	r5, 800fd5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 800fd5a:	3501      	adds	r5, #1
 800fd5c:	9508      	str	r5, [sp, #32]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd62:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 800fd66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd68:	f1bb 0f00 	cmp.w	fp, #0
 800fd6c:	d0d6      	beq.n	800fd1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 800fd6e:	f8bb 2000 	ldrh.w	r2, [fp]
 800fd72:	2a00      	cmp	r2, #0
 800fd74:	d1d6      	bne.n	800fd24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 800fd76:	f8bb 2000 	ldrh.w	r2, [fp]
 800fd7a:	2a00      	cmp	r2, #0
 800fd7c:	d0bb      	beq.n	800fcf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fd7e:	459a      	cmp	sl, r3
 800fd80:	ddb9      	ble.n	800fcf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fd82:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 800fd86:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800fd8a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 800fd8e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 800fd92:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 800fd96:	960e      	str	r6, [sp, #56]	@ 0x38
 800fd98:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 800fd9c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800fd9e:	f1bb 0f00 	cmp.w	fp, #0
 800fda2:	d002      	beq.n	800fdaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 800fda4:	f10b 0302 	add.w	r3, fp, #2
 800fda8:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdaa:	b10d      	cbz	r5, 800fdb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 800fdac:	1c6b      	adds	r3, r5, #1
 800fdae:	9308      	str	r3, [sp, #32]
 800fdb0:	ab0f      	add	r3, sp, #60	@ 0x3c
 800fdb2:	9305      	str	r3, [sp, #20]
 800fdb4:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	ab0e      	add	r3, sp, #56	@ 0x38
 800fdbc:	9303      	str	r3, [sp, #12]
 800fdbe:	ab0c      	add	r3, sp, #48	@ 0x30
 800fdc0:	9302      	str	r3, [sp, #8]
 800fdc2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800fdc6:	9301      	str	r3, [sp, #4]
 800fdc8:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800fdd2:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 800fdd6:	a908      	add	r1, sp, #32
 800fdd8:	a809      	add	r0, sp, #36	@ 0x24
 800fdda:	f7ff fea8 	bl	800fb2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 800fdde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	bfbe      	ittt	lt
 800fde4:	6823      	ldrlt	r3, [r4, #0]
 800fde6:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800fdea:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800fdec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdee:	bfb8      	it	lt
 800fdf0:	3404      	addlt	r4, #4
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	bfb8      	it	lt
 800fdf6:	6823      	ldrlt	r3, [r4, #0]
 800fdf8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800fdfc:	bfbe      	ittt	lt
 800fdfe:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800fe02:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 800fe04:	3404      	addlt	r4, #4
 800fe06:	b1d9      	cbz	r1, 800fe40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 800fe08:	880b      	ldrh	r3, [r1, #0]
 800fe0a:	2b69      	cmp	r3, #105	@ 0x69
 800fe0c:	d01f      	beq.n	800fe4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fe0e:	d82f      	bhi.n	800fe70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 800fe10:	2b58      	cmp	r3, #88	@ 0x58
 800fe12:	d01c      	beq.n	800fe4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fe14:	d818      	bhi.n	800fe48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 800fe16:	2b25      	cmp	r3, #37	@ 0x25
 800fe18:	d034      	beq.n	800fe84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 800fe1a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 800fe1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe20:	f1bb 0f00 	cmp.w	fp, #0
 800fe24:	f000 80b8 	beq.w	800ff98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 800fe28:	f8bb 5000 	ldrh.w	r5, [fp]
 800fe2c:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 800fe30:	3301      	adds	r3, #1
 800fe32:	930d      	str	r3, [sp, #52]	@ 0x34
 800fe34:	e029      	b.n	800fe8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800fe36:	b10d      	cbz	r5, 800fe3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 800fe38:	782a      	ldrb	r2, [r5, #0]
 800fe3a:	e785      	b.n	800fd48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800fe3c:	462a      	mov	r2, r5
 800fe3e:	e783      	b.n	800fd48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800fe40:	2a00      	cmp	r2, #0
 800fe42:	d0ea      	beq.n	800fe1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800fe44:	7813      	ldrb	r3, [r2, #0]
 800fe46:	e7e0      	b.n	800fe0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 800fe48:	3b63      	subs	r3, #99	@ 0x63
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d8e5      	bhi.n	800fe1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800fe4e:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800fe52:	b329      	cbz	r1, 800fea0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 800fe54:	880b      	ldrh	r3, [r1, #0]
 800fe56:	2b69      	cmp	r3, #105	@ 0x69
 800fe58:	d063      	beq.n	800ff22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800fe5a:	d825      	bhi.n	800fea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 800fe5c:	2b63      	cmp	r3, #99	@ 0x63
 800fe5e:	d038      	beq.n	800fed2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 800fe60:	2b64      	cmp	r3, #100	@ 0x64
 800fe62:	d05e      	beq.n	800ff22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800fe64:	2b58      	cmp	r3, #88	@ 0x58
 800fe66:	d07b      	beq.n	800ff60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 800fe68:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 800fe6c:	4625      	mov	r5, r4
 800fe6e:	e036      	b.n	800fede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fe70:	2b73      	cmp	r3, #115	@ 0x73
 800fe72:	d0ec      	beq.n	800fe4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fe74:	d802      	bhi.n	800fe7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 800fe76:	2b6f      	cmp	r3, #111	@ 0x6f
 800fe78:	d1cf      	bne.n	800fe1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800fe7a:	e7e8      	b.n	800fe4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fe7c:	2b75      	cmp	r3, #117	@ 0x75
 800fe7e:	d0e6      	beq.n	800fe4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fe80:	2b78      	cmp	r3, #120	@ 0x78
 800fe82:	e7f9      	b.n	800fe78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 800fe84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fe86:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 800fe8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe8c:	b10b      	cbz	r3, 800fe92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 800fe8e:	3302      	adds	r3, #2
 800fe90:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe92:	9b08      	ldr	r3, [sp, #32]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f43f af2e 	beq.w	800fcf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	9308      	str	r3, [sp, #32]
 800fe9e:	e72a      	b.n	800fcf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fea0:	2a00      	cmp	r2, #0
 800fea2:	d0e1      	beq.n	800fe68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800fea4:	7813      	ldrb	r3, [r2, #0]
 800fea6:	e7d6      	b.n	800fe56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 800fea8:	2b73      	cmp	r3, #115	@ 0x73
 800feaa:	d036      	beq.n	800ff1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 800feac:	d807      	bhi.n	800febe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 800feae:	2b6f      	cmp	r3, #111	@ 0x6f
 800feb0:	d1da      	bne.n	800fe68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800feb2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800feb4:	1d25      	adds	r5, r4, #4
 800feb6:	eba8 0202 	sub.w	r2, r8, r2
 800feba:	2308      	movs	r3, #8
 800febc:	e04a      	b.n	800ff54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800febe:	2b75      	cmp	r3, #117	@ 0x75
 800fec0:	d043      	beq.n	800ff4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 800fec2:	2b78      	cmp	r3, #120	@ 0x78
 800fec4:	d1d0      	bne.n	800fe68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800fec6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fec8:	1d25      	adds	r5, r4, #4
 800feca:	eba8 0202 	sub.w	r2, r8, r2
 800fece:	2310      	movs	r3, #16
 800fed0:	e040      	b.n	800ff54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800fed2:	6823      	ldr	r3, [r4, #0]
 800fed4:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800fed8:	1d25      	adds	r5, r4, #4
 800feda:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 800fede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d052      	beq.n	800ff8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 800fee8:	881a      	ldrh	r2, [r3, #0]
 800feea:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 800feee:	a80d      	add	r0, sp, #52	@ 0x34
 800fef0:	9005      	str	r0, [sp, #20]
 800fef2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 800fef6:	9004      	str	r0, [sp, #16]
 800fef8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800fefa:	9003      	str	r0, [sp, #12]
 800fefc:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 800ff00:	9002      	str	r0, [sp, #8]
 800ff02:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800ff04:	9001      	str	r0, [sp, #4]
 800ff06:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 800ff0a:	9000      	str	r0, [sp, #0]
 800ff0c:	e9cd 8706 	strd	r8, r7, [sp, #24]
 800ff10:	a810      	add	r0, sp, #64	@ 0x40
 800ff12:	f7ff fd49 	bl	800f9a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 800ff16:	462c      	mov	r4, r5
 800ff18:	e7b7      	b.n	800fe8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	1d25      	adds	r5, r4, #4
 800ff1e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff20:	e7dd      	b.n	800fede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800ff22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff24:	6820      	ldr	r0, [r4, #0]
 800ff26:	eba8 0202 	sub.w	r2, r8, r2
 800ff2a:	230a      	movs	r3, #10
 800ff2c:	b292      	uxth	r2, r2
 800ff2e:	4649      	mov	r1, r9
 800ff30:	f7ff fcf0 	bl	800f914 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 800ff34:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ff38:	2b2d      	cmp	r3, #45	@ 0x2d
 800ff3a:	f104 0504 	add.w	r5, r4, #4
 800ff3e:	d1ce      	bne.n	800fede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800ff40:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800ff44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff46:	3302      	adds	r3, #2
 800ff48:	e7e9      	b.n	800ff1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 800ff4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff4c:	1d25      	adds	r5, r4, #4
 800ff4e:	eba8 0202 	sub.w	r2, r8, r2
 800ff52:	230a      	movs	r3, #10
 800ff54:	b292      	uxth	r2, r2
 800ff56:	4649      	mov	r1, r9
 800ff58:	6820      	ldr	r0, [r4, #0]
 800ff5a:	f7ff fd07 	bl	800f96c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 800ff5e:	e7be      	b.n	800fede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800ff60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff62:	6820      	ldr	r0, [r4, #0]
 800ff64:	eba8 0202 	sub.w	r2, r8, r2
 800ff68:	b292      	uxth	r2, r2
 800ff6a:	2310      	movs	r3, #16
 800ff6c:	4649      	mov	r1, r9
 800ff6e:	f7ff fcfd 	bl	800f96c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 800ff72:	1d25      	adds	r5, r4, #4
 800ff74:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 800ff78:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d0ae      	beq.n	800fede <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800ff80:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 800ff84:	2919      	cmp	r1, #25
 800ff86:	d8f7      	bhi.n	800ff78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800ff88:	3b20      	subs	r3, #32
 800ff8a:	8013      	strh	r3, [r2, #0]
 800ff8c:	e7f4      	b.n	800ff78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800ff8e:	9a08      	ldr	r2, [sp, #32]
 800ff90:	2a00      	cmp	r2, #0
 800ff92:	d0aa      	beq.n	800feea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800ff94:	7812      	ldrb	r2, [r2, #0]
 800ff96:	e7a8      	b.n	800feea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800ff98:	2d00      	cmp	r5, #0
 800ff9a:	f43f af47 	beq.w	800fe2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 800ff9e:	782d      	ldrb	r5, [r5, #0]
 800ffa0:	e744      	b.n	800fe2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0800ffa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 800ffa2:	b507      	push	{r0, r1, r2, lr}
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f7ff fe90 	bl	800fcce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 800ffae:	b003      	add	sp, #12
 800ffb0:	f85d fb04 	ldr.w	pc, [sp], #4

0800ffb4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 800ffb4:	b40c      	push	{r2, r3}
 800ffb6:	b507      	push	{r0, r1, r2, lr}
 800ffb8:	ab04      	add	r3, sp, #16
 800ffba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffbe:	9301      	str	r3, [sp, #4]
 800ffc0:	f7ff ffef 	bl	800ffa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 800ffc4:	b003      	add	sp, #12
 800ffc6:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffca:	b002      	add	sp, #8
 800ffcc:	4770      	bx	lr
	...

0800ffd0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800ffd0:	4b01      	ldr	r3, [pc, #4]	@ (800ffd8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800ffd2:	6018      	str	r0, [r3, #0]
 800ffd4:	4770      	bx	lr
 800ffd6:	bf00      	nop
 800ffd8:	2001549c 	.word	0x2001549c

0800ffdc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800ffdc:	4b06      	ldr	r3, [pc, #24]	@ (800fff8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800ffde:	881a      	ldrh	r2, [r3, #0]
 800ffe0:	4282      	cmp	r2, r0
 800ffe2:	d807      	bhi.n	800fff4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800ffe4:	4b05      	ldr	r3, [pc, #20]	@ (800fffc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800ffe6:	881b      	ldrh	r3, [r3, #0]
 800ffe8:	4413      	add	r3, r2
 800ffea:	4298      	cmp	r0, r3
 800ffec:	bfac      	ite	ge
 800ffee:	2000      	movge	r0, #0
 800fff0:	2001      	movlt	r0, #1
 800fff2:	4770      	bx	lr
 800fff4:	2000      	movs	r0, #0
 800fff6:	4770      	bx	lr
 800fff8:	200154bc 	.word	0x200154bc
 800fffc:	200154c0 	.word	0x200154c0

08010000 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8010000:	b508      	push	{r3, lr}
 8010002:	4601      	mov	r1, r0
 8010004:	f7ff ffea 	bl	800ffdc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010008:	b118      	cbz	r0, 8010012 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801000a:	4b02      	ldr	r3, [pc, #8]	@ (8010014 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010012:	bd08      	pop	{r3, pc}
 8010014:	200154a0 	.word	0x200154a0

08010018 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8010018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801001a:	4c24      	ldr	r4, [pc, #144]	@ (80100ac <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d042      	beq.n	80100a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010022:	4a23      	ldr	r2, [pc, #140]	@ (80100b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8010024:	4d23      	ldr	r5, [pc, #140]	@ (80100b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8010026:	8811      	ldrh	r1, [r2, #0]
 8010028:	f8b5 c000 	ldrh.w	ip, [r5]
 801002c:	4822      	ldr	r0, [pc, #136]	@ (80100b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801002e:	4461      	add	r1, ip
 8010030:	1c4a      	adds	r2, r1, #1
 8010032:	f022 0201 	bic.w	r2, r2, #1
 8010036:	008f      	lsls	r7, r1, #2
 8010038:	0412      	lsls	r2, r2, #16
 801003a:	19de      	adds	r6, r3, r7
 801003c:	0c12      	lsrs	r2, r2, #16
 801003e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8010042:	6006      	str	r6, [r0, #0]
 8010044:	4e1d      	ldr	r6, [pc, #116]	@ (80100bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8010046:	19da      	adds	r2, r3, r7
 8010048:	6032      	str	r2, [r6, #0]
 801004a:	220e      	movs	r2, #14
 801004c:	fb02 f20c 	mul.w	r2, r2, ip
 8010050:	3203      	adds	r2, #3
 8010052:	f022 0203 	bic.w	r2, r2, #3
 8010056:	443a      	add	r2, r7
 8010058:	4f19      	ldr	r7, [pc, #100]	@ (80100c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801005a:	4413      	add	r3, r2
 801005c:	603b      	str	r3, [r7, #0]
 801005e:	4f19      	ldr	r7, [pc, #100]	@ (80100c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010060:	2300      	movs	r3, #0
 8010062:	803b      	strh	r3, [r7, #0]
 8010064:	4f18      	ldr	r7, [pc, #96]	@ (80100c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8010066:	683f      	ldr	r7, [r7, #0]
 8010068:	1aba      	subs	r2, r7, r2
 801006a:	4f18      	ldr	r7, [pc, #96]	@ (80100cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801006c:	603a      	str	r2, [r7, #0]
 801006e:	4a18      	ldr	r2, [pc, #96]	@ (80100d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010070:	469c      	mov	ip, r3
 8010072:	8013      	strh	r3, [r2, #0]
 8010074:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8010078:	428b      	cmp	r3, r1
 801007a:	d10d      	bne.n	8010098 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801007c:	882d      	ldrh	r5, [r5, #0]
 801007e:	6830      	ldr	r0, [r6, #0]
 8010080:	2300      	movs	r3, #0
 8010082:	240e      	movs	r4, #14
 8010084:	429d      	cmp	r5, r3
 8010086:	d90f      	bls.n	80100a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010088:	fb04 0203 	mla	r2, r4, r3, r0
 801008c:	3301      	adds	r3, #1
 801008e:	7b11      	ldrb	r1, [r2, #12]
 8010090:	f36f 1145 	bfc	r1, #5, #1
 8010094:	7311      	strb	r1, [r2, #12]
 8010096:	e7f5      	b.n	8010084 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8010098:	6822      	ldr	r2, [r4, #0]
 801009a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801009e:	6802      	ldr	r2, [r0, #0]
 80100a0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80100a4:	3301      	adds	r3, #1
 80100a6:	e7e7      	b.n	8010078 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80100a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100aa:	bf00      	nop
 80100ac:	200154a0 	.word	0x200154a0
 80100b0:	200154bc 	.word	0x200154bc
 80100b4:	200154c0 	.word	0x200154c0
 80100b8:	200154b4 	.word	0x200154b4
 80100bc:	200154a4 	.word	0x200154a4
 80100c0:	200154ac 	.word	0x200154ac
 80100c4:	200154be 	.word	0x200154be
 80100c8:	200154a8 	.word	0x200154a8
 80100cc:	200154b8 	.word	0x200154b8
 80100d0:	200154b0 	.word	0x200154b0

080100d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80100d4:	4b06      	ldr	r3, [pc, #24]	@ (80100f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	b943      	cbnz	r3, 80100ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80100da:	b139      	cbz	r1, 80100ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80100dc:	4b05      	ldr	r3, [pc, #20]	@ (80100f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80100de:	801a      	strh	r2, [r3, #0]
 80100e0:	4b05      	ldr	r3, [pc, #20]	@ (80100f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80100e2:	6019      	str	r1, [r3, #0]
 80100e4:	4b05      	ldr	r3, [pc, #20]	@ (80100fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80100e6:	6018      	str	r0, [r3, #0]
 80100e8:	f7ff bf96 	b.w	8010018 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop
 80100f0:	200154ac 	.word	0x200154ac
 80100f4:	200154c0 	.word	0x200154c0
 80100f8:	200154a8 	.word	0x200154a8
 80100fc:	200154a0 	.word	0x200154a0

08010100 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8010100:	b470      	push	{r4, r5, r6}
 8010102:	4c07      	ldr	r4, [pc, #28]	@ (8010120 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8010104:	6826      	ldr	r6, [r4, #0]
 8010106:	4605      	mov	r5, r0
 8010108:	4610      	mov	r0, r2
 801010a:	9a03      	ldr	r2, [sp, #12]
 801010c:	b936      	cbnz	r6, 801011c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801010e:	6025      	str	r5, [r4, #0]
 8010110:	4c04      	ldr	r4, [pc, #16]	@ (8010124 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8010112:	8021      	strh	r1, [r4, #0]
 8010114:	bc70      	pop	{r4, r5, r6}
 8010116:	4619      	mov	r1, r3
 8010118:	f7ff bfdc 	b.w	80100d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801011c:	bc70      	pop	{r4, r5, r6}
 801011e:	4770      	bx	lr
 8010120:	200154c4 	.word	0x200154c4
 8010124:	200154bc 	.word	0x200154bc

08010128 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8010128:	4a12      	ldr	r2, [pc, #72]	@ (8010174 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801012a:	8803      	ldrh	r3, [r0, #0]
 801012c:	8812      	ldrh	r2, [r2, #0]
 801012e:	4293      	cmp	r3, r2
 8010130:	d207      	bcs.n	8010142 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8010132:	4a11      	ldr	r2, [pc, #68]	@ (8010178 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8010134:	6812      	ldr	r2, [r2, #0]
 8010136:	2114      	movs	r1, #20
 8010138:	fb01 2303 	mla	r3, r1, r3, r2
 801013c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8010140:	4770      	bx	lr
 8010142:	490e      	ldr	r1, [pc, #56]	@ (801017c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8010144:	8809      	ldrh	r1, [r1, #0]
 8010146:	4411      	add	r1, r2
 8010148:	428b      	cmp	r3, r1
 801014a:	da04      	bge.n	8010156 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801014c:	1a9b      	subs	r3, r3, r2
 801014e:	4a0c      	ldr	r2, [pc, #48]	@ (8010180 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8010150:	210e      	movs	r1, #14
 8010152:	6812      	ldr	r2, [r2, #0]
 8010154:	e7f0      	b.n	8010138 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8010156:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801015a:	4293      	cmp	r3, r2
 801015c:	d108      	bne.n	8010170 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801015e:	4b09      	ldr	r3, [pc, #36]	@ (8010184 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	b91b      	cbnz	r3, 801016c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8010164:	4b08      	ldr	r3, [pc, #32]	@ (8010188 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8010166:	f9b3 0000 	ldrsh.w	r0, [r3]
 801016a:	4770      	bx	lr
 801016c:	4b07      	ldr	r3, [pc, #28]	@ (801018c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801016e:	e7fa      	b.n	8010166 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8010170:	2000      	movs	r0, #0
 8010172:	4770      	bx	lr
 8010174:	200154bc 	.word	0x200154bc
 8010178:	200154c4 	.word	0x200154c4
 801017c:	200154c0 	.word	0x200154c0
 8010180:	200154a4 	.word	0x200154a4
 8010184:	20015434 	.word	0x20015434
 8010188:	20015436 	.word	0x20015436
 801018c:	20015438 	.word	0x20015438

08010190 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8010190:	4a12      	ldr	r2, [pc, #72]	@ (80101dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8010192:	8803      	ldrh	r3, [r0, #0]
 8010194:	8812      	ldrh	r2, [r2, #0]
 8010196:	4293      	cmp	r3, r2
 8010198:	d207      	bcs.n	80101aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801019a:	4a11      	ldr	r2, [pc, #68]	@ (80101e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801019c:	6812      	ldr	r2, [r2, #0]
 801019e:	2114      	movs	r1, #20
 80101a0:	fb01 2303 	mla	r3, r1, r3, r2
 80101a4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80101a8:	4770      	bx	lr
 80101aa:	490e      	ldr	r1, [pc, #56]	@ (80101e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80101ac:	8809      	ldrh	r1, [r1, #0]
 80101ae:	4411      	add	r1, r2
 80101b0:	428b      	cmp	r3, r1
 80101b2:	da04      	bge.n	80101be <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	4a0c      	ldr	r2, [pc, #48]	@ (80101e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80101b8:	210e      	movs	r1, #14
 80101ba:	6812      	ldr	r2, [r2, #0]
 80101bc:	e7f0      	b.n	80101a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80101be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d108      	bne.n	80101d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80101c6:	4b09      	ldr	r3, [pc, #36]	@ (80101ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	b91b      	cbnz	r3, 80101d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80101cc:	4b08      	ldr	r3, [pc, #32]	@ (80101f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80101ce:	f9b3 0000 	ldrsh.w	r0, [r3]
 80101d2:	4770      	bx	lr
 80101d4:	4b07      	ldr	r3, [pc, #28]	@ (80101f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80101d6:	e7fa      	b.n	80101ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80101d8:	2000      	movs	r0, #0
 80101da:	4770      	bx	lr
 80101dc:	200154bc 	.word	0x200154bc
 80101e0:	200154c4 	.word	0x200154c4
 80101e4:	200154c0 	.word	0x200154c0
 80101e8:	200154a4 	.word	0x200154a4
 80101ec:	20015434 	.word	0x20015434
 80101f0:	20015438 	.word	0x20015438
 80101f4:	20015436 	.word	0x20015436

080101f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80101f8:	b530      	push	{r4, r5, lr}
 80101fa:	4a22      	ldr	r2, [pc, #136]	@ (8010284 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80101fc:	880b      	ldrh	r3, [r1, #0]
 80101fe:	8812      	ldrh	r2, [r2, #0]
 8010200:	4293      	cmp	r3, r2
 8010202:	d213      	bcs.n	801022c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8010204:	4a20      	ldr	r2, [pc, #128]	@ (8010288 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8010206:	6812      	ldr	r2, [r2, #0]
 8010208:	2114      	movs	r1, #20
 801020a:	fb01 2303 	mla	r3, r1, r3, r2
 801020e:	8a1a      	ldrh	r2, [r3, #16]
 8010210:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8010214:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8010218:	8a5b      	ldrh	r3, [r3, #18]
 801021a:	8004      	strh	r4, [r0, #0]
 801021c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010224:	8041      	strh	r1, [r0, #2]
 8010226:	8082      	strh	r2, [r0, #4]
 8010228:	80c3      	strh	r3, [r0, #6]
 801022a:	e024      	b.n	8010276 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801022c:	4917      	ldr	r1, [pc, #92]	@ (801028c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801022e:	8809      	ldrh	r1, [r1, #0]
 8010230:	4411      	add	r1, r2
 8010232:	428b      	cmp	r3, r1
 8010234:	da10      	bge.n	8010258 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8010236:	1a9b      	subs	r3, r3, r2
 8010238:	220e      	movs	r2, #14
 801023a:	4353      	muls	r3, r2
 801023c:	4a14      	ldr	r2, [pc, #80]	@ (8010290 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801023e:	6811      	ldr	r1, [r2, #0]
 8010240:	18ca      	adds	r2, r1, r3
 8010242:	5ecd      	ldrsh	r5, [r1, r3]
 8010244:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8010248:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801024c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010250:	8005      	strh	r5, [r0, #0]
 8010252:	8044      	strh	r4, [r0, #2]
 8010254:	8081      	strh	r1, [r0, #4]
 8010256:	e7e7      	b.n	8010228 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010258:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801025c:	4293      	cmp	r3, r2
 801025e:	d10b      	bne.n	8010278 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8010260:	4b0c      	ldr	r3, [pc, #48]	@ (8010294 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8010262:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010266:	4b0c      	ldr	r3, [pc, #48]	@ (8010298 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8010268:	8081      	strh	r1, [r0, #4]
 801026a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801026e:	80c2      	strh	r2, [r0, #6]
 8010270:	2300      	movs	r3, #0
 8010272:	8003      	strh	r3, [r0, #0]
 8010274:	8043      	strh	r3, [r0, #2]
 8010276:	bd30      	pop	{r4, r5, pc}
 8010278:	2300      	movs	r3, #0
 801027a:	8003      	strh	r3, [r0, #0]
 801027c:	8043      	strh	r3, [r0, #2]
 801027e:	8083      	strh	r3, [r0, #4]
 8010280:	e7d2      	b.n	8010228 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010282:	bf00      	nop
 8010284:	200154bc 	.word	0x200154bc
 8010288:	200154c4 	.word	0x200154c4
 801028c:	200154c0 	.word	0x200154c0
 8010290:	200154a4 	.word	0x200154a4
 8010294:	20015430 	.word	0x20015430
 8010298:	20015432 	.word	0x20015432

0801029c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801029c:	4a17      	ldr	r2, [pc, #92]	@ (80102fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801029e:	8803      	ldrh	r3, [r0, #0]
 80102a0:	8812      	ldrh	r2, [r2, #0]
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d213      	bcs.n	80102ce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80102a6:	4a16      	ldr	r2, [pc, #88]	@ (8010300 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80102a8:	6812      	ldr	r2, [r2, #0]
 80102aa:	2114      	movs	r1, #20
 80102ac:	fb01 2303 	mla	r3, r1, r3, r2
 80102b0:	8a1a      	ldrh	r2, [r3, #16]
 80102b2:	8919      	ldrh	r1, [r3, #8]
 80102b4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80102b8:	428a      	cmp	r2, r1
 80102ba:	db1d      	blt.n	80102f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80102bc:	8a58      	ldrh	r0, [r3, #18]
 80102be:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80102c2:	895b      	ldrh	r3, [r3, #10]
 80102c4:	4298      	cmp	r0, r3
 80102c6:	bfac      	ite	ge
 80102c8:	2000      	movge	r0, #0
 80102ca:	2001      	movlt	r0, #1
 80102cc:	4770      	bx	lr
 80102ce:	490d      	ldr	r1, [pc, #52]	@ (8010304 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80102d0:	8809      	ldrh	r1, [r1, #0]
 80102d2:	4411      	add	r1, r2
 80102d4:	428b      	cmp	r3, r1
 80102d6:	da0d      	bge.n	80102f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80102d8:	1a9b      	subs	r3, r3, r2
 80102da:	4a0b      	ldr	r2, [pc, #44]	@ (8010308 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80102dc:	6812      	ldr	r2, [r2, #0]
 80102de:	210e      	movs	r1, #14
 80102e0:	fb01 2303 	mla	r3, r1, r3, r2
 80102e4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80102e8:	891a      	ldrh	r2, [r3, #8]
 80102ea:	4291      	cmp	r1, r2
 80102ec:	db04      	blt.n	80102f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80102ee:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80102f2:	e7e6      	b.n	80102c2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80102f4:	2000      	movs	r0, #0
 80102f6:	4770      	bx	lr
 80102f8:	2001      	movs	r0, #1
 80102fa:	4770      	bx	lr
 80102fc:	200154bc 	.word	0x200154bc
 8010300:	200154c4 	.word	0x200154c4
 8010304:	200154c0 	.word	0x200154c0
 8010308:	200154a4 	.word	0x200154a4

0801030c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801030c:	4a12      	ldr	r2, [pc, #72]	@ (8010358 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801030e:	8803      	ldrh	r3, [r0, #0]
 8010310:	8811      	ldrh	r1, [r2, #0]
 8010312:	428b      	cmp	r3, r1
 8010314:	d20b      	bcs.n	801032e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8010316:	4a11      	ldr	r2, [pc, #68]	@ (801035c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010318:	6812      	ldr	r2, [r2, #0]
 801031a:	b112      	cbz	r2, 8010322 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801031c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010320:	b9c0      	cbnz	r0, 8010354 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8010322:	4a0f      	ldr	r2, [pc, #60]	@ (8010360 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010324:	6811      	ldr	r1, [r2, #0]
 8010326:	2214      	movs	r2, #20
 8010328:	4353      	muls	r3, r2
 801032a:	58c8      	ldr	r0, [r1, r3]
 801032c:	4770      	bx	lr
 801032e:	4a0d      	ldr	r2, [pc, #52]	@ (8010364 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010330:	8812      	ldrh	r2, [r2, #0]
 8010332:	440a      	add	r2, r1
 8010334:	4293      	cmp	r3, r2
 8010336:	da04      	bge.n	8010342 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8010338:	4a08      	ldr	r2, [pc, #32]	@ (801035c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801033a:	6812      	ldr	r2, [r2, #0]
 801033c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010340:	4770      	bx	lr
 8010342:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010346:	4293      	cmp	r3, r2
 8010348:	d103      	bne.n	8010352 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801034a:	4b07      	ldr	r3, [pc, #28]	@ (8010368 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8010350:	4770      	bx	lr
 8010352:	2000      	movs	r0, #0
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop
 8010358:	200154bc 	.word	0x200154bc
 801035c:	200154a0 	.word	0x200154a0
 8010360:	200154c4 	.word	0x200154c4
 8010364:	200154c0 	.word	0x200154c0
 8010368:	2001543c 	.word	0x2001543c

0801036c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801036c:	4b24      	ldr	r3, [pc, #144]	@ (8010400 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801036e:	8802      	ldrh	r2, [r0, #0]
 8010370:	8818      	ldrh	r0, [r3, #0]
 8010372:	4282      	cmp	r2, r0
 8010374:	d221      	bcs.n	80103ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8010376:	4b23      	ldr	r3, [pc, #140]	@ (8010404 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8010378:	6819      	ldr	r1, [r3, #0]
 801037a:	2314      	movs	r3, #20
 801037c:	fb03 1302 	mla	r3, r3, r2, r1
 8010380:	6858      	ldr	r0, [r3, #4]
 8010382:	2800      	cmp	r0, #0
 8010384:	d03a      	beq.n	80103fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010386:	4920      	ldr	r1, [pc, #128]	@ (8010408 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010388:	6809      	ldr	r1, [r1, #0]
 801038a:	2900      	cmp	r1, #0
 801038c:	d036      	beq.n	80103fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801038e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010392:	2900      	cmp	r1, #0
 8010394:	d032      	beq.n	80103fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010396:	891a      	ldrh	r2, [r3, #8]
 8010398:	8958      	ldrh	r0, [r3, #10]
 801039a:	4350      	muls	r0, r2
 801039c:	7c5a      	ldrb	r2, [r3, #17]
 801039e:	7cdb      	ldrb	r3, [r3, #19]
 80103a0:	0952      	lsrs	r2, r2, #5
 80103a2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80103a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80103aa:	2b0b      	cmp	r3, #11
 80103ac:	bf18      	it	ne
 80103ae:	0040      	lslne	r0, r0, #1
 80103b0:	3003      	adds	r0, #3
 80103b2:	f020 0003 	bic.w	r0, r0, #3
 80103b6:	4408      	add	r0, r1
 80103b8:	4770      	bx	lr
 80103ba:	4b14      	ldr	r3, [pc, #80]	@ (801040c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80103bc:	881b      	ldrh	r3, [r3, #0]
 80103be:	4403      	add	r3, r0
 80103c0:	429a      	cmp	r2, r3
 80103c2:	da1a      	bge.n	80103fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80103c4:	4b12      	ldr	r3, [pc, #72]	@ (8010410 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	1a10      	subs	r0, r2, r0
 80103ca:	210e      	movs	r1, #14
 80103cc:	fb01 3000 	mla	r0, r1, r0, r3
 80103d0:	7b03      	ldrb	r3, [r0, #12]
 80103d2:	f003 031f 	and.w	r3, r3, #31
 80103d6:	2b0b      	cmp	r3, #11
 80103d8:	d10b      	bne.n	80103f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80103da:	8903      	ldrh	r3, [r0, #8]
 80103dc:	8940      	ldrh	r0, [r0, #10]
 80103de:	4358      	muls	r0, r3
 80103e0:	4b09      	ldr	r3, [pc, #36]	@ (8010408 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80103e2:	6819      	ldr	r1, [r3, #0]
 80103e4:	3003      	adds	r0, #3
 80103e6:	f020 0303 	bic.w	r3, r0, #3
 80103ea:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80103ee:	4418      	add	r0, r3
 80103f0:	4770      	bx	lr
 80103f2:	2b0d      	cmp	r3, #13
 80103f4:	d101      	bne.n	80103fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80103f6:	300d      	adds	r0, #13
 80103f8:	4770      	bx	lr
 80103fa:	2000      	movs	r0, #0
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	200154bc 	.word	0x200154bc
 8010404:	200154c4 	.word	0x200154c4
 8010408:	200154a0 	.word	0x200154a0
 801040c:	200154c0 	.word	0x200154c0
 8010410:	200154a4 	.word	0x200154a4

08010414 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010414:	b510      	push	{r4, lr}
 8010416:	4b1f      	ldr	r3, [pc, #124]	@ (8010494 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8010418:	8802      	ldrh	r2, [r0, #0]
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	429a      	cmp	r2, r3
 801041e:	d21a      	bcs.n	8010456 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8010420:	4b1d      	ldr	r3, [pc, #116]	@ (8010498 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2114      	movs	r1, #20
 8010426:	fb01 3102 	mla	r1, r1, r2, r3
 801042a:	7c4b      	ldrb	r3, [r1, #17]
 801042c:	0958      	lsrs	r0, r3, #5
 801042e:	7ccb      	ldrb	r3, [r1, #19]
 8010430:	491a      	ldr	r1, [pc, #104]	@ (801049c <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8010432:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010436:	6809      	ldr	r1, [r1, #0]
 8010438:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801043c:	b2d8      	uxtb	r0, r3
 801043e:	b149      	cbz	r1, 8010454 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010440:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010444:	b132      	cbz	r2, 8010454 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010446:	2b0e      	cmp	r3, #14
 8010448:	d021      	beq.n	801048e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801044a:	280f      	cmp	r0, #15
 801044c:	d01d      	beq.n	801048a <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801044e:	2810      	cmp	r0, #16
 8010450:	bf08      	it	eq
 8010452:	2002      	moveq	r0, #2
 8010454:	bd10      	pop	{r4, pc}
 8010456:	4912      	ldr	r1, [pc, #72]	@ (80104a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8010458:	8809      	ldrh	r1, [r1, #0]
 801045a:	4419      	add	r1, r3
 801045c:	428a      	cmp	r2, r1
 801045e:	da09      	bge.n	8010474 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8010460:	1ad3      	subs	r3, r2, r3
 8010462:	4a10      	ldr	r2, [pc, #64]	@ (80104a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8010464:	6812      	ldr	r2, [r2, #0]
 8010466:	210e      	movs	r1, #14
 8010468:	fb01 2303 	mla	r3, r1, r3, r2
 801046c:	7b18      	ldrb	r0, [r3, #12]
 801046e:	f000 001f 	and.w	r0, r0, #31
 8010472:	e7ef      	b.n	8010454 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010474:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8010478:	429a      	cmp	r2, r3
 801047a:	d108      	bne.n	801048e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801047c:	f7f9 fd34 	bl	8009ee8 <_ZN8touchgfx3HAL3lcdEv>
 8010480:	6803      	ldr	r3, [r0, #0]
 8010482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010488:	4718      	bx	r3
 801048a:	2001      	movs	r0, #1
 801048c:	e7e2      	b.n	8010454 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801048e:	2000      	movs	r0, #0
 8010490:	e7e0      	b.n	8010454 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010492:	bf00      	nop
 8010494:	200154bc 	.word	0x200154bc
 8010498:	200154c4 	.word	0x200154c4
 801049c:	200154a0 	.word	0x200154a0
 80104a0:	200154c0 	.word	0x200154c0
 80104a4:	200154a4 	.word	0x200154a4

080104a8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80104a8:	2010      	movs	r0, #16
 80104aa:	4770      	bx	lr

080104ac <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80104ac:	2000      	movs	r0, #0
 80104ae:	4770      	bx	lr

080104b0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80104b0:	4b02      	ldr	r3, [pc, #8]	@ (80104bc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80104b2:	8818      	ldrh	r0, [r3, #0]
 80104b4:	0040      	lsls	r0, r0, #1
 80104b6:	b280      	uxth	r0, r0
 80104b8:	4770      	bx	lr
 80104ba:	bf00      	nop
 80104bc:	20015436 	.word	0x20015436

080104c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80104c0:	2bff      	cmp	r3, #255	@ 0xff
 80104c2:	d05e      	beq.n	8010582 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 80104c4:	2a0b      	cmp	r2, #11
 80104c6:	d058      	beq.n	801057a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80104c8:	d80e      	bhi.n	80104e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80104ca:	2a03      	cmp	r2, #3
 80104cc:	d04d      	beq.n	801056a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 80104ce:	d804      	bhi.n	80104da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80104d0:	2a01      	cmp	r2, #1
 80104d2:	d04c      	beq.n	801056e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 80104d4:	d94d      	bls.n	8010572 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 80104d6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80104d8:	e031      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80104da:	2a09      	cmp	r2, #9
 80104dc:	d04d      	beq.n	801057a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80104de:	d84a      	bhi.n	8010576 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80104e0:	2a08      	cmp	r2, #8
 80104e2:	d048      	beq.n	8010576 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80104e4:	2300      	movs	r3, #0
 80104e6:	e02a      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80104e8:	2a2f      	cmp	r2, #47	@ 0x2f
 80104ea:	d02c      	beq.n	8010546 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80104ec:	d811      	bhi.n	8010512 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80104ee:	2a2d      	cmp	r2, #45	@ 0x2d
 80104f0:	d018      	beq.n	8010524 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 80104f2:	d831      	bhi.n	8010558 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 80104f4:	2a2c      	cmp	r2, #44	@ 0x2c
 80104f6:	d1f5      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80104f8:	684a      	ldr	r2, [r1, #4]
 80104fa:	7813      	ldrb	r3, [r2, #0]
 80104fc:	7852      	ldrb	r2, [r2, #1]
 80104fe:	2a00      	cmp	r2, #0
 8010500:	d1f0      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010502:	2b01      	cmp	r3, #1
 8010504:	d01d      	beq.n	8010542 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8010506:	2b00      	cmp	r3, #0
 8010508:	d02d      	beq.n	8010566 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801050a:	2b02      	cmp	r3, #2
 801050c:	d1ea      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801050e:	68c3      	ldr	r3, [r0, #12]
 8010510:	e015      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010512:	2a31      	cmp	r2, #49	@ 0x31
 8010514:	d004      	beq.n	8010520 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8010516:	d332      	bcc.n	801057e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010518:	2a32      	cmp	r2, #50	@ 0x32
 801051a:	d030      	beq.n	801057e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801051c:	2a33      	cmp	r2, #51	@ 0x33
 801051e:	d1e1      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010520:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8010522:	e00c      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010524:	684a      	ldr	r2, [r1, #4]
 8010526:	7813      	ldrb	r3, [r2, #0]
 8010528:	7852      	ldrb	r2, [r2, #1]
 801052a:	2a00      	cmp	r2, #0
 801052c:	d1da      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801052e:	2b01      	cmp	r3, #1
 8010530:	d004      	beq.n	801053c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 8010532:	d30f      	bcc.n	8010554 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 8010534:	2b02      	cmp	r3, #2
 8010536:	d1d5      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010538:	6943      	ldr	r3, [r0, #20]
 801053a:	e000      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801053c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801053e:	4618      	mov	r0, r3
 8010540:	4770      	bx	lr
 8010542:	69c3      	ldr	r3, [r0, #28]
 8010544:	e7fb      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010546:	684b      	ldr	r3, [r1, #4]
 8010548:	781a      	ldrb	r2, [r3, #0]
 801054a:	785b      	ldrb	r3, [r3, #1]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d1c9      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010550:	2a00      	cmp	r2, #0
 8010552:	d1f4      	bne.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010554:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010556:	e7f2      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010558:	684b      	ldr	r3, [r1, #4]
 801055a:	781a      	ldrb	r2, [r3, #0]
 801055c:	785b      	ldrb	r3, [r3, #1]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d1c0      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010562:	2a00      	cmp	r2, #0
 8010564:	d1eb      	bne.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010566:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010568:	e7e9      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801056a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801056c:	e7e7      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801056e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8010570:	e7e5      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010572:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8010574:	e7e3      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010576:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8010578:	e7e1      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801057a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801057c:	e7df      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801057e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8010580:	e7dd      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010582:	2a0b      	cmp	r2, #11
 8010584:	d059      	beq.n	801063a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010586:	d80e      	bhi.n	80105a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8010588:	2a03      	cmp	r2, #3
 801058a:	d050      	beq.n	801062e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801058c:	d804      	bhi.n	8010598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801058e:	2a01      	cmp	r2, #1
 8010590:	d04f      	beq.n	8010632 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8010592:	d950      	bls.n	8010636 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8010594:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010596:	e7d2      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010598:	2a09      	cmp	r2, #9
 801059a:	d04e      	beq.n	801063a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801059c:	d801      	bhi.n	80105a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801059e:	2a08      	cmp	r2, #8
 80105a0:	d1a0      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105a2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80105a4:	e7cb      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80105a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80105a8:	d02d      	beq.n	8010606 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 80105aa:	d811      	bhi.n	80105d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80105ac:	2a2d      	cmp	r2, #45	@ 0x2d
 80105ae:	d018      	beq.n	80105e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 80105b0:	d833      	bhi.n	801061a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 80105b2:	2a2c      	cmp	r2, #44	@ 0x2c
 80105b4:	d196      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105b6:	684a      	ldr	r2, [r1, #4]
 80105b8:	7813      	ldrb	r3, [r2, #0]
 80105ba:	7852      	ldrb	r2, [r2, #1]
 80105bc:	2a00      	cmp	r2, #0
 80105be:	d191      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d01e      	beq.n	8010602 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d030      	beq.n	801062a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 80105c8:	2b02      	cmp	r3, #2
 80105ca:	d18b      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105cc:	6903      	ldr	r3, [r0, #16]
 80105ce:	e7b6      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80105d0:	2a31      	cmp	r2, #49	@ 0x31
 80105d2:	d004      	beq.n	80105de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 80105d4:	d333      	bcc.n	801063e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 80105d6:	2a32      	cmp	r2, #50	@ 0x32
 80105d8:	d031      	beq.n	801063e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 80105da:	2a33      	cmp	r2, #51	@ 0x33
 80105dc:	d182      	bne.n	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105de:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80105e0:	e7ad      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80105e2:	684a      	ldr	r2, [r1, #4]
 80105e4:	7813      	ldrb	r3, [r2, #0]
 80105e6:	7852      	ldrb	r2, [r2, #1]
 80105e8:	2a00      	cmp	r2, #0
 80105ea:	f47f af7b 	bne.w	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d005      	beq.n	80105fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80105f2:	d310      	bcc.n	8010616 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 80105f4:	2b02      	cmp	r3, #2
 80105f6:	f47f af75 	bne.w	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80105fa:	6983      	ldr	r3, [r0, #24]
 80105fc:	e79f      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80105fe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010600:	e79d      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010602:	6a03      	ldr	r3, [r0, #32]
 8010604:	e79b      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010606:	684b      	ldr	r3, [r1, #4]
 8010608:	781a      	ldrb	r2, [r3, #0]
 801060a:	785b      	ldrb	r3, [r3, #1]
 801060c:	2b00      	cmp	r3, #0
 801060e:	f47f af69 	bne.w	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010612:	2a00      	cmp	r2, #0
 8010614:	d193      	bne.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010616:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010618:	e791      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801061a:	684b      	ldr	r3, [r1, #4]
 801061c:	781a      	ldrb	r2, [r3, #0]
 801061e:	785b      	ldrb	r3, [r3, #1]
 8010620:	2b00      	cmp	r3, #0
 8010622:	f47f af5f 	bne.w	80104e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010626:	2a00      	cmp	r2, #0
 8010628:	d189      	bne.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801062a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801062c:	e787      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801062e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010630:	e785      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010632:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8010634:	e783      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010636:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8010638:	e781      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801063a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801063c:	e77f      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801063e:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8010640:	e77d      	b.n	801053e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

08010642 <_ZN8touchgfx8LCD16bppD1Ev>:
 8010642:	4770      	bx	lr

08010644 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8010644:	4770      	bx	lr

08010646 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8010646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801064a:	b088      	sub	sp, #32
 801064c:	ac08      	add	r4, sp, #32
 801064e:	4606      	mov	r6, r0
 8010650:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8010654:	4620      	mov	r0, r4
 8010656:	4688      	mov	r8, r1
 8010658:	4691      	mov	r9, r2
 801065a:	f7ff fe57 	bl	801030c <_ZNK8touchgfx6Bitmap7getDataEv>
 801065e:	6833      	ldr	r3, [r6, #0]
 8010660:	4605      	mov	r5, r0
 8010662:	4620      	mov	r0, r4
 8010664:	699f      	ldr	r7, [r3, #24]
 8010666:	f7ff fd5f 	bl	8010128 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801066a:	4682      	mov	sl, r0
 801066c:	4620      	mov	r0, r4
 801066e:	f7ff fd8f 	bl	8010190 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010672:	9500      	str	r5, [sp, #0]
 8010674:	e9cd a001 	strd	sl, r0, [sp, #4]
 8010678:	464b      	mov	r3, r9
 801067a:	a806      	add	r0, sp, #24
 801067c:	4642      	mov	r2, r8
 801067e:	4631      	mov	r1, r6
 8010680:	47b8      	blx	r7
 8010682:	4628      	mov	r0, r5
 8010684:	b008      	add	sp, #32
 8010686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801068c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801068c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010690:	2300      	movs	r3, #0
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	4b3d      	ldr	r3, [pc, #244]	@ (801078c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d137      	bne.n	801070c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801069c:	4a3c      	ldr	r2, [pc, #240]	@ (8010790 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801069e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80106a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d132      	bne.n	8010710 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80106aa:	4b3a      	ldr	r3, [pc, #232]	@ (8010794 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80106ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106b0:	6808      	ldr	r0, [r1, #0]
 80106b2:	6849      	ldr	r1, [r1, #4]
 80106b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80106b8:	ac02      	add	r4, sp, #8
 80106ba:	ab02      	add	r3, sp, #8
 80106bc:	c303      	stmia	r3!, {r0, r1}
 80106be:	4669      	mov	r1, sp
 80106c0:	4620      	mov	r0, r4
 80106c2:	f7fc fae1 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80106c6:	4668      	mov	r0, sp
 80106c8:	f7fc fab6 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80106cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80106d0:	f8bd 2000 	ldrh.w	r2, [sp]
 80106d4:	4d30      	ldr	r5, [pc, #192]	@ (8010798 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80106d6:	4413      	add	r3, r2
 80106d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80106dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80106e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80106e4:	6828      	ldr	r0, [r5, #0]
 80106e6:	4413      	add	r3, r2
 80106e8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80106ec:	6803      	ldr	r3, [r0, #0]
 80106ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106f0:	4798      	blx	r3
 80106f2:	f010 0f01 	tst.w	r0, #1
 80106f6:	462f      	mov	r7, r5
 80106f8:	d00c      	beq.n	8010714 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80106fa:	6828      	ldr	r0, [r5, #0]
 80106fc:	6803      	ldr	r3, [r0, #0]
 80106fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010704:	4798      	blx	r3
 8010706:	b004      	add	sp, #16
 8010708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801070c:	4a21      	ldr	r2, [pc, #132]	@ (8010794 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801070e:	e7c6      	b.n	801069e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8010710:	4b1f      	ldr	r3, [pc, #124]	@ (8010790 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010712:	e7cb      	b.n	80106ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8010714:	6838      	ldr	r0, [r7, #0]
 8010716:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801071a:	6803      	ldr	r3, [r0, #0]
 801071c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8010720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010722:	4798      	blx	r3
 8010724:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8010728:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801072c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8010730:	fb16 3602 	smlabb	r6, r6, r2, r3
 8010734:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010738:	6838      	ldr	r0, [r7, #0]
 801073a:	6803      	ldr	r3, [r0, #0]
 801073c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801073e:	4798      	blx	r3
 8010740:	4a13      	ldr	r2, [pc, #76]	@ (8010790 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010742:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8010746:	8813      	ldrh	r3, [r2, #0]
 8010748:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801074c:	fb03 1404 	mla	r4, r3, r4, r1
 8010750:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010754:	435d      	muls	r5, r3
 8010756:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801075a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801075e:	4691      	mov	r9, r2
 8010760:	6838      	ldr	r0, [r7, #0]
 8010762:	42ac      	cmp	r4, r5
 8010764:	6803      	ldr	r3, [r0, #0]
 8010766:	d20e      	bcs.n	8010786 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8010768:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 801076c:	4632      	mov	r2, r6
 801076e:	4643      	mov	r3, r8
 8010770:	4621      	mov	r1, r4
 8010772:	47d0      	blx	sl
 8010774:	f8b9 3000 	ldrh.w	r3, [r9]
 8010778:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801077c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010780:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010784:	e7ec      	b.n	8010760 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8010786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010788:	4798      	blx	r3
 801078a:	e7bc      	b.n	8010706 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801078c:	20015434 	.word	0x20015434
 8010790:	20015436 	.word	0x20015436
 8010794:	20015438 	.word	0x20015438
 8010798:	2001543c 	.word	0x2001543c

0801079c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a0:	b08b      	sub	sp, #44	@ 0x2c
 80107a2:	460f      	mov	r7, r1
 80107a4:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 80107a8:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 80107ac:	4616      	mov	r6, r2
 80107ae:	f1bb 0f00 	cmp.w	fp, #0
 80107b2:	d04a      	beq.n	801084a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80107b4:	6810      	ldr	r0, [r2, #0]
 80107b6:	6851      	ldr	r1, [r2, #4]
 80107b8:	ad06      	add	r5, sp, #24
 80107ba:	c503      	stmia	r5!, {r0, r1}
 80107bc:	6818      	ldr	r0, [r3, #0]
 80107be:	6859      	ldr	r1, [r3, #4]
 80107c0:	ad08      	add	r5, sp, #32
 80107c2:	c503      	stmia	r5!, {r0, r1}
 80107c4:	a806      	add	r0, sp, #24
 80107c6:	f7fc fa37 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80107ca:	4631      	mov	r1, r6
 80107cc:	a808      	add	r0, sp, #32
 80107ce:	f7fc fa5b 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80107d2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80107d6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80107da:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80107de:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80107e2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80107e6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80107ea:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80107ee:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80107f2:	4f5f      	ldr	r7, [pc, #380]	@ (8010970 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80107f4:	440a      	add	r2, r1
 80107f6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80107fa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80107fe:	6838      	ldr	r0, [r7, #0]
 8010800:	4413      	add	r3, r2
 8010802:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010806:	6803      	ldr	r3, [r0, #0]
 8010808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801080a:	4798      	blx	r3
 801080c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8010810:	46b9      	mov	r9, r7
 8010812:	d11d      	bne.n	8010850 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8010814:	b9fc      	cbnz	r4, 8010856 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8010816:	f010 0f01 	tst.w	r0, #1
 801081a:	d01c      	beq.n	8010856 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801081c:	f8d9 0000 	ldr.w	r0, [r9]
 8010820:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8010824:	6801      	ldr	r1, [r0, #0]
 8010826:	f8cd b00c 	str.w	fp, [sp, #12]
 801082a:	2700      	movs	r7, #0
 801082c:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8010830:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8010834:	9402      	str	r4, [sp, #8]
 8010836:	b2ad      	uxth	r5, r5
 8010838:	fa1f f488 	uxth.w	r4, r8
 801083c:	9501      	str	r5, [sp, #4]
 801083e:	9400      	str	r4, [sp, #0]
 8010840:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8010842:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8010846:	4631      	mov	r1, r6
 8010848:	47a0      	blx	r4
 801084a:	b00b      	add	sp, #44	@ 0x2c
 801084c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010850:	f010 0f04 	tst.w	r0, #4
 8010854:	e7e1      	b.n	801081a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8010856:	f8d9 0000 	ldr.w	r0, [r9]
 801085a:	6803      	ldr	r3, [r0, #0]
 801085c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801085e:	4798      	blx	r3
 8010860:	4b44      	ldr	r3, [pc, #272]	@ (8010974 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8010862:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8010866:	881a      	ldrh	r2, [r3, #0]
 8010868:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801086c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8010870:	fb02 1404 	mla	r4, r2, r4, r1
 8010874:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010878:	469a      	mov	sl, r3
 801087a:	fb05 f502 	mul.w	r5, r5, r2
 801087e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8010882:	d059      	beq.n	8010938 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8010884:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8010888:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801088c:	fa1f f28b 	uxth.w	r2, fp
 8010890:	fa1f f989 	uxth.w	r9, r9
 8010894:	469e      	mov	lr, r3
 8010896:	42ac      	cmp	r4, r5
 8010898:	d264      	bcs.n	8010964 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801089a:	eb04 0a07 	add.w	sl, r4, r7
 801089e:	4554      	cmp	r4, sl
 80108a0:	d23d      	bcs.n	801091e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80108a2:	8821      	ldrh	r1, [r4, #0]
 80108a4:	f836 3b02 	ldrh.w	r3, [r6], #2
 80108a8:	1208      	asrs	r0, r1, #8
 80108aa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80108ae:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80108b2:	fb10 f009 	smulbb	r0, r0, r9
 80108b6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80108ba:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80108be:	00c9      	lsls	r1, r1, #3
 80108c0:	fb0c 0c02 	mla	ip, ip, r2, r0
 80108c4:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80108c8:	10d8      	asrs	r0, r3, #3
 80108ca:	b2c9      	uxtb	r1, r1
 80108cc:	00db      	lsls	r3, r3, #3
 80108ce:	fa1f fc8c 	uxth.w	ip, ip
 80108d2:	fb1b fb09 	smulbb	fp, fp, r9
 80108d6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	fb11 f109 	smulbb	r1, r1, r9
 80108e0:	fb00 b002 	mla	r0, r0, r2, fp
 80108e4:	fb03 1302 	mla	r3, r3, r2, r1
 80108e8:	f10c 0b01 	add.w	fp, ip, #1
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80108f2:	b280      	uxth	r0, r0
 80108f4:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 80108f8:	f103 0c01 	add.w	ip, r3, #1
 80108fc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8010906:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801090a:	0940      	lsrs	r0, r0, #5
 801090c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8010910:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8010914:	ea4c 0c00 	orr.w	ip, ip, r0
 8010918:	f824 cb02 	strh.w	ip, [r4], #2
 801091c:	e7bf      	b.n	801089e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801091e:	f8be 3000 	ldrh.w	r3, [lr]
 8010922:	eba3 0308 	sub.w	r3, r3, r8
 8010926:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801092a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801092e:	eba3 0308 	sub.w	r3, r3, r8
 8010932:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010936:	e7ae      	b.n	8010896 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8010938:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801093c:	f8d9 0000 	ldr.w	r0, [r9]
 8010940:	42ac      	cmp	r4, r5
 8010942:	6803      	ldr	r3, [r0, #0]
 8010944:	d20e      	bcs.n	8010964 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010946:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 801094a:	4632      	mov	r2, r6
 801094c:	463b      	mov	r3, r7
 801094e:	4621      	mov	r1, r4
 8010950:	47c0      	blx	r8
 8010952:	f8ba 3000 	ldrh.w	r3, [sl]
 8010956:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801095a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801095e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010962:	e7eb      	b.n	801093c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8010964:	4b02      	ldr	r3, [pc, #8]	@ (8010970 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8010966:	6818      	ldr	r0, [r3, #0]
 8010968:	6803      	ldr	r3, [r0, #0]
 801096a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801096c:	4798      	blx	r3
 801096e:	e76c      	b.n	801084a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8010970:	2001543c 	.word	0x2001543c
 8010974:	20015436 	.word	0x20015436

08010978 <_ZN8touchgfx8LCD16bppD0Ev>:
 8010978:	b510      	push	{r4, lr}
 801097a:	218c      	movs	r1, #140	@ 0x8c
 801097c:	4604      	mov	r4, r0
 801097e:	f002 fa51 	bl	8012e24 <_ZdlPvj>
 8010982:	4620      	mov	r0, r4
 8010984:	bd10      	pop	{r4, pc}

08010986 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8010986:	b510      	push	{r4, lr}
 8010988:	2104      	movs	r1, #4
 801098a:	4604      	mov	r4, r0
 801098c:	f002 fa4a 	bl	8012e24 <_ZdlPvj>
 8010990:	4620      	mov	r0, r4
 8010992:	bd10      	pop	{r4, pc}

08010994 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8010994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010998:	b091      	sub	sp, #68	@ 0x44
 801099a:	469b      	mov	fp, r3
 801099c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80109a0:	4616      	mov	r6, r2
 80109a2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 80109a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80109aa:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80109ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80109b2:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80109b6:	4604      	mov	r4, r0
 80109b8:	460d      	mov	r5, r1
 80109ba:	4640      	mov	r0, r8
 80109bc:	4659      	mov	r1, fp
 80109be:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80109c2:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 80109c6:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 80109ca:	f7f8 ffb7 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 80109ce:	4631      	mov	r1, r6
 80109d0:	4640      	mov	r0, r8
 80109d2:	f7f8 ffb3 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 80109d6:	4b74      	ldr	r3, [pc, #464]	@ (8010ba8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 80109d8:	8818      	ldrh	r0, [r3, #0]
 80109da:	4b74      	ldr	r3, [pc, #464]	@ (8010bac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 80109dc:	8819      	ldrh	r1, [r3, #0]
 80109de:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	b202      	sxth	r2, r0
 80109e6:	b20e      	sxth	r6, r1
 80109e8:	da07      	bge.n	80109fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80109ea:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80109ee:	4463      	add	r3, ip
 80109f0:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80109f4:	2300      	movs	r3, #0
 80109f6:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80109fa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80109fe:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8010a02:	1ad2      	subs	r2, r2, r3
 8010a04:	4594      	cmp	ip, r2
 8010a06:	bfc4      	itt	gt
 8010a08:	1ac2      	subgt	r2, r0, r3
 8010a0a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8010a0e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010a12:	2a00      	cmp	r2, #0
 8010a14:	da07      	bge.n	8010a26 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8010a16:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8010a1a:	4462      	add	r2, ip
 8010a1c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8010a20:	2200      	movs	r2, #0
 8010a22:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8010a26:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8010a2a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8010a2e:	eba6 060a 	sub.w	r6, r6, sl
 8010a32:	42b2      	cmp	r2, r6
 8010a34:	bfc4      	itt	gt
 8010a36:	eba1 020a 	subgt.w	r2, r1, sl
 8010a3a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8010a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8010bb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8010a40:	7812      	ldrb	r2, [r2, #0]
 8010a42:	b9a2      	cbnz	r2, 8010a6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8010a44:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8010a48:	4286      	cmp	r6, r0
 8010a4a:	4640      	mov	r0, r8
 8010a4c:	9303      	str	r3, [sp, #12]
 8010a4e:	bf14      	ite	ne
 8010a50:	2600      	movne	r6, #0
 8010a52:	2601      	moveq	r6, #1
 8010a54:	f7f8 ffb5 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a58:	9b03      	ldr	r3, [sp, #12]
 8010a5a:	b160      	cbz	r0, 8010a76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	8023      	strh	r3, [r4, #0]
 8010a60:	8063      	strh	r3, [r4, #2]
 8010a62:	80a3      	strh	r3, [r4, #4]
 8010a64:	4620      	mov	r0, r4
 8010a66:	80e3      	strh	r3, [r4, #6]
 8010a68:	b011      	add	sp, #68	@ 0x44
 8010a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a6e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8010a72:	428e      	cmp	r6, r1
 8010a74:	e7e9      	b.n	8010a4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8010a76:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8010a7a:	9205      	str	r2, [sp, #20]
 8010a7c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8010a80:	9206      	str	r2, [sp, #24]
 8010a82:	f8bb 2000 	ldrh.w	r2, [fp]
 8010a86:	900e      	str	r0, [sp, #56]	@ 0x38
 8010a88:	1a9b      	subs	r3, r3, r2
 8010a8a:	b21b      	sxth	r3, r3
 8010a8c:	9303      	str	r3, [sp, #12]
 8010a8e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8010a92:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8010a96:	ebaa 0a03 	sub.w	sl, sl, r3
 8010a9a:	fa0f f38a 	sxth.w	r3, sl
 8010a9e:	9304      	str	r3, [sp, #16]
 8010aa0:	9b03      	ldr	r3, [sp, #12]
 8010aa2:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8010aa6:	9b04      	ldr	r3, [sp, #16]
 8010aa8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010aac:	9b05      	ldr	r3, [sp, #20]
 8010aae:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010ab2:	a90e      	add	r1, sp, #56	@ 0x38
 8010ab4:	9b06      	ldr	r3, [sp, #24]
 8010ab6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010aba:	a80c      	add	r0, sp, #48	@ 0x30
 8010abc:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8010ac0:	f7fc f8e2 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	f7fc f8b7 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010aca:	a80e      	add	r0, sp, #56	@ 0x38
 8010acc:	f7fc f8b4 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010ad0:	4b38      	ldr	r3, [pc, #224]	@ (8010bb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8010ad2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8010ad6:	881b      	ldrh	r3, [r3, #0]
 8010ad8:	9307      	str	r3, [sp, #28]
 8010ada:	682b      	ldr	r3, [r5, #0]
 8010adc:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8010bb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8010ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	4798      	blx	r3
 8010ae6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8010aea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8010aee:	4681      	mov	r9, r0
 8010af0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8010af4:	f8db 0000 	ldr.w	r0, [fp]
 8010af8:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8010afa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8010afe:	6803      	ldr	r3, [r0, #0]
 8010b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b02:	4798      	blx	r3
 8010b04:	4607      	mov	r7, r0
 8010b06:	f8db 0000 	ldr.w	r0, [fp]
 8010b0a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8010b0e:	6803      	ldr	r3, [r0, #0]
 8010b10:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010b14:	9109      	str	r1, [sp, #36]	@ 0x24
 8010b16:	9208      	str	r2, [sp, #32]
 8010b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b1a:	4798      	blx	r3
 8010b1c:	f010 0f01 	tst.w	r0, #1
 8010b20:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8010b24:	d012      	beq.n	8010b4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8010b26:	f8db 0000 	ldr.w	r0, [fp]
 8010b2a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8010b2e:	6803      	ldr	r3, [r0, #0]
 8010b30:	9200      	str	r2, [sp, #0]
 8010b32:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8010b34:	e898 0006 	ldmia.w	r8, {r1, r2}
 8010b38:	462b      	mov	r3, r5
 8010b3a:	47b0      	blx	r6
 8010b3c:	9b03      	ldr	r3, [sp, #12]
 8010b3e:	8023      	strh	r3, [r4, #0]
 8010b40:	9b04      	ldr	r3, [sp, #16]
 8010b42:	8063      	strh	r3, [r4, #2]
 8010b44:	9b05      	ldr	r3, [sp, #20]
 8010b46:	80a3      	strh	r3, [r4, #4]
 8010b48:	9b06      	ldr	r3, [sp, #24]
 8010b4a:	e78b      	b.n	8010a64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8010b4c:	fb09 f202 	mul.w	r2, r9, r2
 8010b50:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010b54:	440f      	add	r7, r1
 8010b56:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8010b5a:	b166      	cbz	r6, 8010b76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8010b5c:	9a07      	ldr	r2, [sp, #28]
 8010b5e:	4592      	cmp	sl, r2
 8010b60:	d109      	bne.n	8010b76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8010b62:	f8db 0000 	ldr.w	r0, [fp]
 8010b66:	6802      	ldr	r2, [r0, #0]
 8010b68:	fb09 f303 	mul.w	r3, r9, r3
 8010b6c:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8010b6e:	4629      	mov	r1, r5
 8010b70:	463a      	mov	r2, r7
 8010b72:	47b0      	blx	r6
 8010b74:	e7e2      	b.n	8010b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8010b76:	fb0a f303 	mul.w	r3, sl, r3
 8010b7a:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8010bb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8010b7e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8010b82:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8010b86:	4545      	cmp	r5, r8
 8010b88:	d2d8      	bcs.n	8010b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8010b8a:	f8db 0000 	ldr.w	r0, [fp]
 8010b8e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8010b92:	6802      	ldr	r2, [r0, #0]
 8010b94:	4629      	mov	r1, r5
 8010b96:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8010b9a:	005b      	lsls	r3, r3, #1
 8010b9c:	463a      	mov	r2, r7
 8010b9e:	47d0      	blx	sl
 8010ba0:	444f      	add	r7, r9
 8010ba2:	4435      	add	r5, r6
 8010ba4:	e7ef      	b.n	8010b86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8010ba6:	bf00      	nop
 8010ba8:	20015430 	.word	0x20015430
 8010bac:	20015432 	.word	0x20015432
 8010bb0:	20015434 	.word	0x20015434
 8010bb4:	20015436 	.word	0x20015436
 8010bb8:	2001543c 	.word	0x2001543c

08010bbc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8010bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bbe:	4606      	mov	r6, r0
 8010bc0:	b087      	sub	sp, #28
 8010bc2:	460c      	mov	r4, r1
 8010bc4:	4617      	mov	r7, r2
 8010bc6:	461d      	mov	r5, r3
 8010bc8:	b333      	cbz	r3, 8010c18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8010bca:	4608      	mov	r0, r1
 8010bcc:	f7f8 fef9 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010bd0:	bb10      	cbnz	r0, 8010c18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8010bd2:	6820      	ldr	r0, [r4, #0]
 8010bd4:	6861      	ldr	r1, [r4, #4]
 8010bd6:	4c1c      	ldr	r4, [pc, #112]	@ (8010c48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8010bd8:	ab04      	add	r3, sp, #16
 8010bda:	c303      	stmia	r3!, {r0, r1}
 8010bdc:	a804      	add	r0, sp, #16
 8010bde:	f7fc f82b 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010be2:	6820      	ldr	r0, [r4, #0]
 8010be4:	6803      	ldr	r3, [r0, #0]
 8010be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010be8:	4798      	blx	r3
 8010bea:	2dff      	cmp	r5, #255	@ 0xff
 8010bec:	d016      	beq.n	8010c1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8010bee:	f010 0f08 	tst.w	r0, #8
 8010bf2:	6820      	ldr	r0, [r4, #0]
 8010bf4:	d015      	beq.n	8010c22 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8010bf6:	2400      	movs	r4, #0
 8010bf8:	6801      	ldr	r1, [r0, #0]
 8010bfa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010bfe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010c02:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8010c06:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8010c0a:	9401      	str	r4, [sp, #4]
 8010c0c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8010c10:	9400      	str	r4, [sp, #0]
 8010c12:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8010c14:	4639      	mov	r1, r7
 8010c16:	47a0      	blx	r4
 8010c18:	b007      	add	sp, #28
 8010c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c1c:	f010 0f02 	tst.w	r0, #2
 8010c20:	e7e7      	b.n	8010bf2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8010c22:	6803      	ldr	r3, [r0, #0]
 8010c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c26:	4798      	blx	r3
 8010c28:	4b08      	ldr	r3, [pc, #32]	@ (8010c4c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8010c2a:	881a      	ldrh	r2, [r3, #0]
 8010c2c:	6833      	ldr	r3, [r6, #0]
 8010c2e:	e9cd 7500 	strd	r7, r5, [sp]
 8010c32:	4601      	mov	r1, r0
 8010c34:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010c36:	4630      	mov	r0, r6
 8010c38:	ab04      	add	r3, sp, #16
 8010c3a:	47a8      	blx	r5
 8010c3c:	6820      	ldr	r0, [r4, #0]
 8010c3e:	6803      	ldr	r3, [r0, #0]
 8010c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c42:	4798      	blx	r3
 8010c44:	e7e8      	b.n	8010c18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8010c46:	bf00      	nop
 8010c48:	2001543c 	.word	0x2001543c
 8010c4c:	20015436 	.word	0x20015436

08010c50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8010c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c54:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8010c58:	9e08      	ldr	r6, [sp, #32]
 8010c5a:	4688      	mov	r8, r1
 8010c5c:	4614      	mov	r4, r2
 8010c5e:	461d      	mov	r5, r3
 8010c60:	2f00      	cmp	r7, #0
 8010c62:	f000 80a9 	beq.w	8010db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7f8 feab 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	f040 80a3 	bne.w	8010db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010c72:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010c76:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010c7a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8010c7e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8010c82:	fb04 1303 	mla	r3, r4, r3, r1
 8010c86:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8010c8a:	4365      	muls	r5, r4
 8010c8c:	2fff      	cmp	r7, #255	@ 0xff
 8010c8e:	eba4 0200 	sub.w	r2, r4, r0
 8010c92:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8010c96:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8010c9a:	d04a      	beq.n	8010d32 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8010c9c:	b2bc      	uxth	r4, r7
 8010c9e:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8010ca2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8010ca6:	fa5f f788 	uxtb.w	r7, r8
 8010caa:	b2f3      	uxtb	r3, r6
 8010cac:	0040      	lsls	r0, r0, #1
 8010cae:	fb0e fe04 	mul.w	lr, lr, r4
 8010cb2:	4367      	muls	r7, r4
 8010cb4:	4363      	muls	r3, r4
 8010cb6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8010cba:	fa1f fc8c 	uxth.w	ip, ip
 8010cbe:	42a9      	cmp	r1, r5
 8010cc0:	d27a      	bcs.n	8010db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010cc2:	eb01 0900 	add.w	r9, r1, r0
 8010cc6:	4549      	cmp	r1, r9
 8010cc8:	d231      	bcs.n	8010d2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8010cca:	880a      	ldrh	r2, [r1, #0]
 8010ccc:	1214      	asrs	r4, r2, #8
 8010cce:	10d6      	asrs	r6, r2, #3
 8010cd0:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8010cd4:	00d2      	lsls	r2, r2, #3
 8010cd6:	b2d2      	uxtb	r2, r2
 8010cd8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8010cdc:	fb14 f40c 	smulbb	r4, r4, ip
 8010ce0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8010ce4:	4474      	add	r4, lr
 8010ce6:	fb12 f20c 	smulbb	r2, r2, ip
 8010cea:	b2a4      	uxth	r4, r4
 8010cec:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8010cf0:	441a      	add	r2, r3
 8010cf2:	b292      	uxth	r2, r2
 8010cf4:	f104 0a01 	add.w	sl, r4, #1
 8010cf8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8010cfc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8010d00:	fb16 f60c 	smulbb	r6, r6, ip
 8010d04:	f102 0a01 	add.w	sl, r2, #1
 8010d08:	443e      	add	r6, r7
 8010d0a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8010d0e:	b2b6      	uxth	r6, r6
 8010d10:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8010d14:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8010d18:	4322      	orrs	r2, r4
 8010d1a:	1c74      	adds	r4, r6, #1
 8010d1c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8010d20:	0976      	lsrs	r6, r6, #5
 8010d22:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8010d26:	4332      	orrs	r2, r6
 8010d28:	f821 2b02 	strh.w	r2, [r1], #2
 8010d2c:	e7cb      	b.n	8010cc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8010d2e:	4441      	add	r1, r8
 8010d30:	e7c5      	b.n	8010cbe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8010d32:	4f22      	ldr	r7, [pc, #136]	@ (8010dbc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8010d34:	0973      	lsrs	r3, r6, #5
 8010d36:	ea08 0707 	and.w	r7, r8, r7
 8010d3a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010d3e:	433b      	orrs	r3, r7
 8010d40:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8010d44:	4333      	orrs	r3, r6
 8010d46:	07e7      	lsls	r7, r4, #31
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	d50b      	bpl.n	8010d64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8010d4c:	0040      	lsls	r0, r0, #1
 8010d4e:	0052      	lsls	r2, r2, #1
 8010d50:	42a9      	cmp	r1, r5
 8010d52:	d231      	bcs.n	8010db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010d54:	180c      	adds	r4, r1, r0
 8010d56:	42a1      	cmp	r1, r4
 8010d58:	d202      	bcs.n	8010d60 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8010d5a:	f821 3b02 	strh.w	r3, [r1], #2
 8010d5e:	e7fa      	b.n	8010d56 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8010d60:	4411      	add	r1, r2
 8010d62:	e7f5      	b.n	8010d50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8010d64:	078e      	lsls	r6, r1, #30
 8010d66:	d008      	beq.n	8010d7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8010d68:	0066      	lsls	r6, r4, #1
 8010d6a:	460a      	mov	r2, r1
 8010d6c:	42aa      	cmp	r2, r5
 8010d6e:	d202      	bcs.n	8010d76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8010d70:	8013      	strh	r3, [r2, #0]
 8010d72:	4432      	add	r2, r6
 8010d74:	e7fa      	b.n	8010d6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8010d76:	3102      	adds	r1, #2
 8010d78:	3801      	subs	r0, #1
 8010d7a:	07c2      	lsls	r2, r0, #31
 8010d7c:	d50b      	bpl.n	8010d96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8010d7e:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8010d82:	3a01      	subs	r2, #1
 8010d84:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010d88:	0066      	lsls	r6, r4, #1
 8010d8a:	42aa      	cmp	r2, r5
 8010d8c:	d202      	bcs.n	8010d94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8010d8e:	8013      	strh	r3, [r2, #0]
 8010d90:	4432      	add	r2, r6
 8010d92:	e7fa      	b.n	8010d8a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8010d94:	3801      	subs	r0, #1
 8010d96:	b178      	cbz	r0, 8010db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010d98:	1040      	asrs	r0, r0, #1
 8010d9a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8010d9e:	0080      	lsls	r0, r0, #2
 8010da0:	0064      	lsls	r4, r4, #1
 8010da2:	42a9      	cmp	r1, r5
 8010da4:	d208      	bcs.n	8010db8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010da6:	180e      	adds	r6, r1, r0
 8010da8:	460a      	mov	r2, r1
 8010daa:	42b2      	cmp	r2, r6
 8010dac:	d202      	bcs.n	8010db4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8010dae:	f842 3b04 	str.w	r3, [r2], #4
 8010db2:	e7fa      	b.n	8010daa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8010db4:	4421      	add	r1, r4
 8010db6:	e7f4      	b.n	8010da2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8010db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dbc:	00fff800 	.word	0x00fff800

08010dc0 <_ZN8touchgfx8LCD16bppC1Ev>:
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	4912      	ldr	r1, [pc, #72]	@ (8010e0c <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8010dc4:	6001      	str	r1, [r0, #0]
 8010dc6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8010dca:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010dce:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010dd2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8010dd6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8010dda:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8010dde:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8010de2:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8010de6:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8010dea:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8010dee:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8010df2:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8010df6:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8010dfa:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8010dfe:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8010e02:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8010e06:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8010e0a:	4770      	bx	lr
 8010e0c:	08015e24 	.word	0x08015e24

08010e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8010e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e14:	460d      	mov	r5, r1
 8010e16:	b08d      	sub	sp, #52	@ 0x34
 8010e18:	4604      	mov	r4, r0
 8010e1a:	6808      	ldr	r0, [r1, #0]
 8010e1c:	6849      	ldr	r1, [r1, #4]
 8010e1e:	4699      	mov	r9, r3
 8010e20:	ab08      	add	r3, sp, #32
 8010e22:	c303      	stmia	r3!, {r0, r1}
 8010e24:	6810      	ldr	r0, [r2, #0]
 8010e26:	6851      	ldr	r1, [r2, #4]
 8010e28:	ab0a      	add	r3, sp, #40	@ 0x28
 8010e2a:	c303      	stmia	r3!, {r0, r1}
 8010e2c:	a808      	add	r0, sp, #32
 8010e2e:	f7fb ff03 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010e32:	4629      	mov	r1, r5
 8010e34:	a80a      	add	r0, sp, #40	@ 0x28
 8010e36:	f7fb ff27 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010e3a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8010e3e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8010e42:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8010e46:	4d63      	ldr	r5, [pc, #396]	@ (8010fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8010e48:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8010e4c:	6828      	ldr	r0, [r5, #0]
 8010e4e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8010e52:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010e56:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8010e5a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8010e5e:	440a      	add	r2, r1
 8010e60:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010e64:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8010e68:	4413      	add	r3, r2
 8010e6a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010e6e:	6803      	ldr	r3, [r0, #0]
 8010e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e72:	4798      	blx	r3
 8010e74:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010e78:	d119      	bne.n	8010eae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8010e7a:	f010 0f20 	tst.w	r0, #32
 8010e7e:	6828      	ldr	r0, [r5, #0]
 8010e80:	d018      	beq.n	8010eb4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8010e82:	2500      	movs	r5, #0
 8010e84:	6801      	ldr	r1, [r0, #0]
 8010e86:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8010e8a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8010e8e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8010e92:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8010e96:	9502      	str	r5, [sp, #8]
 8010e98:	b2b6      	uxth	r6, r6
 8010e9a:	fa1f f588 	uxth.w	r5, r8
 8010e9e:	9601      	str	r6, [sp, #4]
 8010ea0:	9500      	str	r5, [sp, #0]
 8010ea2:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	47a8      	blx	r5
 8010ea8:	b00d      	add	sp, #52	@ 0x34
 8010eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eae:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8010eb2:	e7e4      	b.n	8010e7e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8010eb4:	6803      	ldr	r3, [r0, #0]
 8010eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010eb8:	4798      	blx	r3
 8010eba:	4947      	ldr	r1, [pc, #284]	@ (8010fd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8010ebc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010ec0:	880b      	ldrh	r3, [r1, #0]
 8010ec2:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8010ec6:	fb03 5202 	mla	r2, r3, r2, r5
 8010eca:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010ece:	4373      	muls	r3, r6
 8010ed0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010ed4:	9307      	str	r3, [sp, #28]
 8010ed6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8010eda:	9306      	str	r3, [sp, #24]
 8010edc:	468a      	mov	sl, r1
 8010ede:	9b07      	ldr	r3, [sp, #28]
 8010ee0:	4298      	cmp	r0, r3
 8010ee2:	d270      	bcs.n	8010fc6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8010ee4:	9b06      	ldr	r3, [sp, #24]
 8010ee6:	4621      	mov	r1, r4
 8010ee8:	eb00 0b03 	add.w	fp, r0, r3
 8010eec:	4558      	cmp	r0, fp
 8010eee:	d25d      	bcs.n	8010fac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8010ef0:	f851 4b04 	ldr.w	r4, [r1], #4
 8010ef4:	0e23      	lsrs	r3, r4, #24
 8010ef6:	d014      	beq.n	8010f22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8010ef8:	2bff      	cmp	r3, #255	@ 0xff
 8010efa:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8010efe:	d112      	bne.n	8010f26 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8010f00:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010f04:	d10f      	bne.n	8010f26 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8010f06:	0963      	lsrs	r3, r4, #5
 8010f08:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8010f0c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010f10:	f02c 0c07 	bic.w	ip, ip, #7
 8010f14:	ea43 0c0c 	orr.w	ip, r3, ip
 8010f18:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8010f1c:	ea4c 0404 	orr.w	r4, ip, r4
 8010f20:	8004      	strh	r4, [r0, #0]
 8010f22:	3002      	adds	r0, #2
 8010f24:	e7e2      	b.n	8010eec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8010f26:	fb09 f303 	mul.w	r3, r9, r3
 8010f2a:	8807      	ldrh	r7, [r0, #0]
 8010f2c:	1c5a      	adds	r2, r3, #1
 8010f2e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8010f32:	1212      	asrs	r2, r2, #8
 8010f34:	123e      	asrs	r6, r7, #8
 8010f36:	b293      	uxth	r3, r2
 8010f38:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8010f3c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8010f40:	43d2      	mvns	r2, r2
 8010f42:	b2d2      	uxtb	r2, r2
 8010f44:	10fd      	asrs	r5, r7, #3
 8010f46:	fb1e fe03 	smulbb	lr, lr, r3
 8010f4a:	00ff      	lsls	r7, r7, #3
 8010f4c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8010f50:	fb06 e602 	mla	r6, r6, r2, lr
 8010f54:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8010f58:	b2ff      	uxtb	r7, r7
 8010f5a:	fa5f fc8c 	uxtb.w	ip, ip
 8010f5e:	b2e4      	uxtb	r4, r4
 8010f60:	b2b6      	uxth	r6, r6
 8010f62:	fb1c fc03 	smulbb	ip, ip, r3
 8010f66:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8010f6a:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8010f6e:	fb14 f403 	smulbb	r4, r4, r3
 8010f72:	fb05 c502 	mla	r5, r5, r2, ip
 8010f76:	f106 0e01 	add.w	lr, r6, #1
 8010f7a:	fb07 4702 	mla	r7, r7, r2, r4
 8010f7e:	b2ad      	uxth	r5, r5
 8010f80:	b2bf      	uxth	r7, r7
 8010f82:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8010f86:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8010f8a:	f105 0c01 	add.w	ip, r5, #1
 8010f8e:	1c7e      	adds	r6, r7, #1
 8010f90:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8010f94:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8010f98:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8010f9c:	096d      	lsrs	r5, r5, #5
 8010f9e:	ea46 060e 	orr.w	r6, r6, lr
 8010fa2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8010fa6:	432e      	orrs	r6, r5
 8010fa8:	8006      	strh	r6, [r0, #0]
 8010faa:	e7ba      	b.n	8010f22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8010fac:	f8ba 3000 	ldrh.w	r3, [sl]
 8010fb0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8010fb4:	eba3 0308 	sub.w	r3, r3, r8
 8010fb8:	eba4 0408 	sub.w	r4, r4, r8
 8010fbc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010fc0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8010fc4:	e78b      	b.n	8010ede <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8010fc6:	4b03      	ldr	r3, [pc, #12]	@ (8010fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8010fc8:	6818      	ldr	r0, [r3, #0]
 8010fca:	6803      	ldr	r3, [r0, #0]
 8010fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fce:	4798      	blx	r3
 8010fd0:	e76a      	b.n	8010ea8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8010fd2:	bf00      	nop
 8010fd4:	2001543c 	.word	0x2001543c
 8010fd8:	20015436 	.word	0x20015436

08010fdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8010fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	b085      	sub	sp, #20
 8010fe4:	6810      	ldr	r0, [r2, #0]
 8010fe6:	6851      	ldr	r1, [r2, #4]
 8010fe8:	466d      	mov	r5, sp
 8010fea:	c503      	stmia	r5!, {r0, r1}
 8010fec:	6818      	ldr	r0, [r3, #0]
 8010fee:	6859      	ldr	r1, [r3, #4]
 8010ff0:	4616      	mov	r6, r2
 8010ff2:	c503      	stmia	r5!, {r0, r1}
 8010ff4:	4668      	mov	r0, sp
 8010ff6:	f7fb fe1f 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	a802      	add	r0, sp, #8
 8010ffe:	f7fb fe43 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011002:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8011006:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801100a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801100e:	4d28      	ldr	r5, [pc, #160]	@ (80110b0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8011010:	4e28      	ldr	r6, [pc, #160]	@ (80110b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8011012:	6828      	ldr	r0, [r5, #0]
 8011014:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8011018:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801101c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011020:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8011024:	f8bd 1000 	ldrh.w	r1, [sp]
 8011028:	440a      	add	r2, r1
 801102a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801102e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011032:	4413      	add	r3, r2
 8011034:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011038:	6803      	ldr	r3, [r0, #0]
 801103a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801103c:	4798      	blx	r3
 801103e:	8833      	ldrh	r3, [r6, #0]
 8011040:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8011044:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8011048:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 80110b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801104c:	fb03 1202 	mla	r2, r3, r2, r1
 8011050:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011054:	fb08 f303 	mul.w	r3, r8, r3
 8011058:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801105c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8011060:	4298      	cmp	r0, r3
 8011062:	d21d      	bcs.n	80110a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8011064:	eb00 080c 	add.w	r8, r0, ip
 8011068:	4540      	cmp	r0, r8
 801106a:	d20f      	bcs.n	801108c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801106c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011070:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8011074:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8011078:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801107c:	ea42 0209 	orr.w	r2, r2, r9
 8011080:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8011084:	430a      	orrs	r2, r1
 8011086:	f820 2b02 	strh.w	r2, [r0], #2
 801108a:	e7ed      	b.n	8011068 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801108c:	8832      	ldrh	r2, [r6, #0]
 801108e:	1bd2      	subs	r2, r2, r7
 8011090:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011094:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8011098:	1bd2      	subs	r2, r2, r7
 801109a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801109e:	e7df      	b.n	8011060 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80110a0:	6828      	ldr	r0, [r5, #0]
 80110a2:	6803      	ldr	r3, [r0, #0]
 80110a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110a6:	4798      	blx	r3
 80110a8:	b005      	add	sp, #20
 80110aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110ae:	bf00      	nop
 80110b0:	2001543c 	.word	0x2001543c
 80110b4:	20015436 	.word	0x20015436
 80110b8:	fffff800 	.word	0xfffff800

080110bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80110bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110c0:	460e      	mov	r6, r1
 80110c2:	b08e      	sub	sp, #56	@ 0x38
 80110c4:	4604      	mov	r4, r0
 80110c6:	6808      	ldr	r0, [r1, #0]
 80110c8:	6849      	ldr	r1, [r1, #4]
 80110ca:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 80112a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80110ce:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 80112a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80110d2:	461d      	mov	r5, r3
 80110d4:	ab0a      	add	r3, sp, #40	@ 0x28
 80110d6:	c303      	stmia	r3!, {r0, r1}
 80110d8:	6810      	ldr	r0, [r2, #0]
 80110da:	6851      	ldr	r1, [r2, #4]
 80110dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80110de:	c303      	stmia	r3!, {r0, r1}
 80110e0:	a80a      	add	r0, sp, #40	@ 0x28
 80110e2:	f7fb fda9 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80110e6:	4631      	mov	r1, r6
 80110e8:	a80c      	add	r0, sp, #48	@ 0x30
 80110ea:	f7fb fdcd 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80110ee:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80110f2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80110f6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80110fa:	f8d8 0000 	ldr.w	r0, [r8]
 80110fe:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8011102:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8011106:	fb11 2103 	smlabb	r1, r1, r3, r2
 801110a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801110e:	440c      	add	r4, r1
 8011110:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8011114:	440a      	add	r2, r1
 8011116:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801111a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801111e:	4413      	add	r3, r2
 8011120:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8011124:	6803      	ldr	r3, [r0, #0]
 8011126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011128:	4798      	blx	r3
 801112a:	2dff      	cmp	r5, #255	@ 0xff
 801112c:	d124      	bne.n	8011178 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801112e:	f010 0f01 	tst.w	r0, #1
 8011132:	f8d8 0000 	ldr.w	r0, [r8]
 8011136:	d022      	beq.n	801117e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8011138:	2100      	movs	r1, #0
 801113a:	f8d0 c000 	ldr.w	ip, [r0]
 801113e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8011142:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8011146:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801114a:	f04f 0e01 	mov.w	lr, #1
 801114e:	f8cd e018 	str.w	lr, [sp, #24]
 8011152:	f8b9 e000 	ldrh.w	lr, [r9]
 8011156:	9503      	str	r5, [sp, #12]
 8011158:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801115c:	b2b6      	uxth	r6, r6
 801115e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8011162:	9102      	str	r1, [sp, #8]
 8011164:	b2bf      	uxth	r7, r7
 8011166:	9601      	str	r6, [sp, #4]
 8011168:	9700      	str	r7, [sp, #0]
 801116a:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 801116e:	4621      	mov	r1, r4
 8011170:	47a8      	blx	r5
 8011172:	b00e      	add	sp, #56	@ 0x38
 8011174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011178:	f010 0f04 	tst.w	r0, #4
 801117c:	e7d9      	b.n	8011132 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801117e:	6803      	ldr	r3, [r0, #0]
 8011180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011182:	4798      	blx	r3
 8011184:	f8b9 3000 	ldrh.w	r3, [r9]
 8011188:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801118c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8011190:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8011194:	fb03 1202 	mla	r2, r3, r2, r1
 8011198:	ebac 0c07 	sub.w	ip, ip, r7
 801119c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80111a0:	435e      	muls	r6, r3
 80111a2:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80111a6:	2dff      	cmp	r5, #255	@ 0xff
 80111a8:	eba3 0707 	sub.w	r7, r3, r7
 80111ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80111b0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80111b4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80111b8:	d049      	beq.n	801124e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80111ba:	43eb      	mvns	r3, r5
 80111bc:	fa1f f985 	uxth.w	r9, r5
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	42b0      	cmp	r0, r6
 80111c4:	d266      	bcs.n	8011294 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80111c6:	eb00 0a0e 	add.w	sl, r0, lr
 80111ca:	4550      	cmp	r0, sl
 80111cc:	4621      	mov	r1, r4
 80111ce:	f104 0403 	add.w	r4, r4, #3
 80111d2:	d25b      	bcs.n	801128c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80111d4:	8802      	ldrh	r2, [r0, #0]
 80111d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80111da:	ea4f 2822 	mov.w	r8, r2, asr #8
 80111de:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80111e2:	fb11 f109 	smulbb	r1, r1, r9
 80111e6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80111ea:	10d5      	asrs	r5, r2, #3
 80111ec:	fb08 1803 	mla	r8, r8, r3, r1
 80111f0:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80111f4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80111f8:	fb11 f109 	smulbb	r1, r1, r9
 80111fc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8011200:	fb05 1503 	mla	r5, r5, r3, r1
 8011204:	00d2      	lsls	r2, r2, #3
 8011206:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801120a:	b2d2      	uxtb	r2, r2
 801120c:	fb11 f109 	smulbb	r1, r1, r9
 8011210:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8011214:	fa1f f888 	uxth.w	r8, r8
 8011218:	fb02 1203 	mla	r2, r2, r3, r1
 801121c:	b292      	uxth	r2, r2
 801121e:	f108 0101 	add.w	r1, r8, #1
 8011222:	b2ad      	uxth	r5, r5
 8011224:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8011228:	1c51      	adds	r1, r2, #1
 801122a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801122e:	1c69      	adds	r1, r5, #1
 8011230:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8011234:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8011238:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801123c:	096d      	lsrs	r5, r5, #5
 801123e:	ea42 0208 	orr.w	r2, r2, r8
 8011242:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011246:	432a      	orrs	r2, r5
 8011248:	f820 2b02 	strh.w	r2, [r0], #2
 801124c:	e7bd      	b.n	80111ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801124e:	4a14      	ldr	r2, [pc, #80]	@ (80112a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8011250:	42b0      	cmp	r0, r6
 8011252:	d21f      	bcs.n	8011294 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8011254:	eb00 050e 	add.w	r5, r0, lr
 8011258:	42a8      	cmp	r0, r5
 801125a:	4621      	mov	r1, r4
 801125c:	f104 0403 	add.w	r4, r4, #3
 8011260:	d210      	bcs.n	8011284 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8011262:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8011266:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8011270:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011274:	430b      	orrs	r3, r1
 8011276:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801127a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801127e:	f820 3b02 	strh.w	r3, [r0], #2
 8011282:	e7e9      	b.n	8011258 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8011284:	4438      	add	r0, r7
 8011286:	eb01 040c 	add.w	r4, r1, ip
 801128a:	e7e1      	b.n	8011250 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801128c:	4438      	add	r0, r7
 801128e:	eb01 040c 	add.w	r4, r1, ip
 8011292:	e796      	b.n	80111c2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8011294:	4b03      	ldr	r3, [pc, #12]	@ (80112a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8011296:	6818      	ldr	r0, [r3, #0]
 8011298:	6803      	ldr	r3, [r0, #0]
 801129a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129c:	4798      	blx	r3
 801129e:	e768      	b.n	8011172 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80112a0:	fffff800 	.word	0xfffff800
 80112a4:	2001543c 	.word	0x2001543c
 80112a8:	20015436 	.word	0x20015436

080112ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80112ac:	b4f0      	push	{r4, r5, r6, r7}
 80112ae:	4616      	mov	r6, r2
 80112b0:	2e01      	cmp	r6, #1
 80112b2:	461c      	mov	r4, r3
 80112b4:	460d      	mov	r5, r1
 80112b6:	9a04      	ldr	r2, [sp, #16]
 80112b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80112bc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80112c0:	d012      	beq.n	80112e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80112c2:	d303      	bcc.n	80112cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80112c4:	2e02      	cmp	r6, #2
 80112c6:	d00a      	beq.n	80112de <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80112c8:	bcf0      	pop	{r4, r5, r6, r7}
 80112ca:	4770      	bx	lr
 80112cc:	6805      	ldr	r5, [r0, #0]
 80112ce:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80112d2:	68ed      	ldr	r5, [r5, #12]
 80112d4:	4613      	mov	r3, r2
 80112d6:	46ac      	mov	ip, r5
 80112d8:	4622      	mov	r2, r4
 80112da:	bcf0      	pop	{r4, r5, r6, r7}
 80112dc:	4760      	bx	ip
 80112de:	4621      	mov	r1, r4
 80112e0:	4628      	mov	r0, r5
 80112e2:	bcf0      	pop	{r4, r5, r6, r7}
 80112e4:	f7ff bd94 	b.w	8010e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80112e8:	4621      	mov	r1, r4
 80112ea:	4628      	mov	r0, r5
 80112ec:	bcf0      	pop	{r4, r5, r6, r7}
 80112ee:	f7ff bee5 	b.w	80110bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080112f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80112f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f8:	4681      	mov	r9, r0
 80112fa:	b093      	sub	sp, #76	@ 0x4c
 80112fc:	6810      	ldr	r0, [r2, #0]
 80112fe:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8011302:	4f6d      	ldr	r7, [pc, #436]	@ (80114b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8011304:	4688      	mov	r8, r1
 8011306:	6851      	ldr	r1, [r2, #4]
 8011308:	ac0e      	add	r4, sp, #56	@ 0x38
 801130a:	c403      	stmia	r4!, {r0, r1}
 801130c:	6818      	ldr	r0, [r3, #0]
 801130e:	6859      	ldr	r1, [r3, #4]
 8011310:	ac10      	add	r4, sp, #64	@ 0x40
 8011312:	4616      	mov	r6, r2
 8011314:	c403      	stmia	r4!, {r0, r1}
 8011316:	a80e      	add	r0, sp, #56	@ 0x38
 8011318:	f7fb fc8e 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801131c:	4631      	mov	r1, r6
 801131e:	a810      	add	r0, sp, #64	@ 0x40
 8011320:	f7fb fcb2 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011324:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8011328:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801132c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8011330:	4e62      	ldr	r6, [pc, #392]	@ (80114bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8011332:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8011336:	6830      	ldr	r0, [r6, #0]
 8011338:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801133c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011340:	4489      	add	r9, r1
 8011342:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8011346:	440a      	add	r2, r1
 8011348:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801134c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011350:	4413      	add	r3, r2
 8011352:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8011356:	6803      	ldr	r3, [r0, #0]
 8011358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801135a:	4798      	blx	r3
 801135c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011360:	6830      	ldr	r0, [r6, #0]
 8011362:	d01d      	beq.n	80113a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8011364:	2200      	movs	r2, #0
 8011366:	6801      	ldr	r1, [r0, #0]
 8011368:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801136c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8011370:	220b      	movs	r2, #11
 8011372:	9207      	str	r2, [sp, #28]
 8011374:	883a      	ldrh	r2, [r7, #0]
 8011376:	9206      	str	r2, [sp, #24]
 8011378:	2201      	movs	r2, #1
 801137a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801137e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8011382:	9203      	str	r2, [sp, #12]
 8011384:	b2a4      	uxth	r4, r4
 8011386:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801138a:	9200      	str	r2, [sp, #0]
 801138c:	b2ad      	uxth	r5, r5
 801138e:	9502      	str	r5, [sp, #8]
 8011390:	9401      	str	r4, [sp, #4]
 8011392:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8011394:	4642      	mov	r2, r8
 8011396:	4649      	mov	r1, r9
 8011398:	47a0      	blx	r4
 801139a:	b013      	add	sp, #76	@ 0x4c
 801139c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a0:	6803      	ldr	r3, [r0, #0]
 80113a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113a4:	4798      	blx	r3
 80113a6:	883b      	ldrh	r3, [r7, #0]
 80113a8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80113ac:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80113b0:	fb03 1202 	mla	r2, r3, r2, r1
 80113b4:	435d      	muls	r5, r3
 80113b6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80113ba:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80113be:	920c      	str	r2, [sp, #48]	@ 0x30
 80113c0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80113c4:	1b12      	subs	r2, r2, r4
 80113c6:	920d      	str	r2, [sp, #52]	@ 0x34
 80113c8:	0062      	lsls	r2, r4, #1
 80113ca:	1b1c      	subs	r4, r3, r4
 80113cc:	0063      	lsls	r3, r4, #1
 80113ce:	920a      	str	r2, [sp, #40]	@ 0x28
 80113d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113d2:	f04f 0e04 	mov.w	lr, #4
 80113d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113d8:	4298      	cmp	r0, r3
 80113da:	d266      	bcs.n	80114aa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80113dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113de:	eb00 0b03 	add.w	fp, r0, r3
 80113e2:	4558      	cmp	r0, fp
 80113e4:	d25c      	bcs.n	80114a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80113e6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80113ea:	fb1e e303 	smlabb	r3, lr, r3, lr
 80113ee:	f858 2003 	ldr.w	r2, [r8, r3]
 80113f2:	0e11      	lsrs	r1, r2, #24
 80113f4:	d012      	beq.n	801141c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80113f6:	29ff      	cmp	r1, #255	@ 0xff
 80113f8:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80113fc:	d110      	bne.n	8011420 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80113fe:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011402:	d10d      	bne.n	8011420 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011404:	0953      	lsrs	r3, r2, #5
 8011406:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 801140a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801140e:	f027 0707 	bic.w	r7, r7, #7
 8011412:	431f      	orrs	r7, r3
 8011414:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8011418:	433a      	orrs	r2, r7
 801141a:	8002      	strh	r2, [r0, #0]
 801141c:	3002      	adds	r0, #2
 801141e:	e7e0      	b.n	80113e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8011420:	fb0a f101 	mul.w	r1, sl, r1
 8011424:	8806      	ldrh	r6, [r0, #0]
 8011426:	1c4b      	adds	r3, r1, #1
 8011428:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801142c:	1235      	asrs	r5, r6, #8
 801142e:	10f4      	asrs	r4, r6, #3
 8011430:	121b      	asrs	r3, r3, #8
 8011432:	00f6      	lsls	r6, r6, #3
 8011434:	b299      	uxth	r1, r3
 8011436:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801143a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801143e:	b2f6      	uxtb	r6, r6
 8011440:	43db      	mvns	r3, r3
 8011442:	b2d2      	uxtb	r2, r2
 8011444:	b2db      	uxtb	r3, r3
 8011446:	fb1c fc01 	smulbb	ip, ip, r1
 801144a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801144e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011452:	fb12 f201 	smulbb	r2, r2, r1
 8011456:	fb05 c503 	mla	r5, r5, r3, ip
 801145a:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801145e:	b2ff      	uxtb	r7, r7
 8011460:	fb06 2203 	mla	r2, r6, r3, r2
 8011464:	b2ad      	uxth	r5, r5
 8011466:	fb17 f701 	smulbb	r7, r7, r1
 801146a:	b292      	uxth	r2, r2
 801146c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8011470:	fb04 7403 	mla	r4, r4, r3, r7
 8011474:	f105 0c01 	add.w	ip, r5, #1
 8011478:	1c57      	adds	r7, r2, #1
 801147a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801147e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8011482:	b2a4      	uxth	r4, r4
 8011484:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011488:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801148c:	433d      	orrs	r5, r7
 801148e:	1c67      	adds	r7, r4, #1
 8011490:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8011494:	0964      	lsrs	r4, r4, #5
 8011496:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801149a:	4325      	orrs	r5, r4
 801149c:	8005      	strh	r5, [r0, #0]
 801149e:	e7bd      	b.n	801141c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80114a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114a2:	4418      	add	r0, r3
 80114a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114a6:	4499      	add	r9, r3
 80114a8:	e795      	b.n	80113d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80114aa:	4b04      	ldr	r3, [pc, #16]	@ (80114bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80114ac:	6818      	ldr	r0, [r3, #0]
 80114ae:	6803      	ldr	r3, [r0, #0]
 80114b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114b2:	4798      	blx	r3
 80114b4:	e771      	b.n	801139a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80114b6:	bf00      	nop
 80114b8:	20015436 	.word	0x20015436
 80114bc:	2001543c 	.word	0x2001543c

080114c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80114c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c4:	b087      	sub	sp, #28
 80114c6:	4680      	mov	r8, r0
 80114c8:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80114cc:	460d      	mov	r5, r1
 80114ce:	4614      	mov	r4, r2
 80114d0:	2e00      	cmp	r6, #0
 80114d2:	f000 80b9 	beq.w	8011648 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80114d6:	6810      	ldr	r0, [r2, #0]
 80114d8:	6851      	ldr	r1, [r2, #4]
 80114da:	af02      	add	r7, sp, #8
 80114dc:	c703      	stmia	r7!, {r0, r1}
 80114de:	6818      	ldr	r0, [r3, #0]
 80114e0:	6859      	ldr	r1, [r3, #4]
 80114e2:	af04      	add	r7, sp, #16
 80114e4:	c703      	stmia	r7!, {r0, r1}
 80114e6:	a802      	add	r0, sp, #8
 80114e8:	f7fb fba6 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80114ec:	4621      	mov	r1, r4
 80114ee:	a804      	add	r0, sp, #16
 80114f0:	f7fb fbca 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80114f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80114f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80114fc:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8011500:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8011504:	fb14 2103 	smlabb	r1, r4, r3, r2
 8011508:	eb08 0401 	add.w	r4, r8, r1
 801150c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011510:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011514:	440a      	add	r2, r1
 8011516:	f8ad 2010 	strh.w	r2, [sp, #16]
 801151a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801151e:	4413      	add	r3, r2
 8011520:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011524:	4b4a      	ldr	r3, [pc, #296]	@ (8011650 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011526:	6818      	ldr	r0, [r3, #0]
 8011528:	6803      	ldr	r3, [r0, #0]
 801152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801152c:	4798      	blx	r3
 801152e:	4b49      	ldr	r3, [pc, #292]	@ (8011654 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8011530:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011534:	881a      	ldrh	r2, [r3, #0]
 8011536:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801153a:	2eff      	cmp	r6, #255	@ 0xff
 801153c:	fb02 c101 	mla	r1, r2, r1, ip
 8011540:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011544:	fb02 f207 	mul.w	r2, r2, r7
 8011548:	f105 0104 	add.w	r1, r5, #4
 801154c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8011550:	461d      	mov	r5, r3
 8011552:	d05a      	beq.n	801160a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8011554:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8011558:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801155c:	b2b6      	uxth	r6, r6
 801155e:	fa1f fe8e 	uxth.w	lr, lr
 8011562:	9301      	str	r3, [sp, #4]
 8011564:	4282      	cmp	r2, r0
 8011566:	d96a      	bls.n	801163e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011568:	eb00 0b0a 	add.w	fp, r0, sl
 801156c:	4583      	cmp	fp, r0
 801156e:	d940      	bls.n	80115f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8011570:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011574:	8805      	ldrh	r5, [r0, #0]
 8011576:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801157a:	122f      	asrs	r7, r5, #8
 801157c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8011580:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011584:	fb17 f70e 	smulbb	r7, r7, lr
 8011588:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801158c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011590:	00ed      	lsls	r5, r5, #3
 8011592:	fb0c 7c06 	mla	ip, ip, r6, r7
 8011596:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801159a:	10df      	asrs	r7, r3, #3
 801159c:	b2ed      	uxtb	r5, r5
 801159e:	00db      	lsls	r3, r3, #3
 80115a0:	fa1f fc8c 	uxth.w	ip, ip
 80115a4:	fb19 f90e 	smulbb	r9, r9, lr
 80115a8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	fb15 f50e 	smulbb	r5, r5, lr
 80115b2:	fb07 9706 	mla	r7, r7, r6, r9
 80115b6:	fb03 5306 	mla	r3, r3, r6, r5
 80115ba:	f10c 0901 	add.w	r9, ip, #1
 80115be:	b29b      	uxth	r3, r3
 80115c0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80115c4:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80115c8:	f103 0c01 	add.w	ip, r3, #1
 80115cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80115d0:	b2bf      	uxth	r7, r7
 80115d2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80115d6:	ea4c 0c09 	orr.w	ip, ip, r9
 80115da:	f107 0901 	add.w	r9, r7, #1
 80115de:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80115e2:	097f      	lsrs	r7, r7, #5
 80115e4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80115e8:	ea4c 0c07 	orr.w	ip, ip, r7
 80115ec:	f820 cb02 	strh.w	ip, [r0], #2
 80115f0:	e7bc      	b.n	801156c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80115f2:	9b01      	ldr	r3, [sp, #4]
 80115f4:	881b      	ldrh	r3, [r3, #0]
 80115f6:	eba3 0308 	sub.w	r3, r3, r8
 80115fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80115fe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011602:	eba3 0308 	sub.w	r3, r3, r8
 8011606:	441c      	add	r4, r3
 8011608:	e7ac      	b.n	8011564 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801160a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801160e:	4282      	cmp	r2, r0
 8011610:	d915      	bls.n	801163e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011612:	eb00 060a 	add.w	r6, r0, sl
 8011616:	4286      	cmp	r6, r0
 8011618:	d906      	bls.n	8011628 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801161a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801161e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011622:	f820 3b02 	strh.w	r3, [r0], #2
 8011626:	e7f6      	b.n	8011616 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8011628:	882b      	ldrh	r3, [r5, #0]
 801162a:	eba3 0308 	sub.w	r3, r3, r8
 801162e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011632:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011636:	eba3 0308 	sub.w	r3, r3, r8
 801163a:	441c      	add	r4, r3
 801163c:	e7e7      	b.n	801160e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801163e:	4b04      	ldr	r3, [pc, #16]	@ (8011650 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011640:	6818      	ldr	r0, [r3, #0]
 8011642:	6803      	ldr	r3, [r0, #0]
 8011644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011646:	4798      	blx	r3
 8011648:	b007      	add	sp, #28
 801164a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801164e:	bf00      	nop
 8011650:	2001543c 	.word	0x2001543c
 8011654:	20015436 	.word	0x20015436

08011658 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165c:	b091      	sub	sp, #68	@ 0x44
 801165e:	4680      	mov	r8, r0
 8011660:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8011664:	460f      	mov	r7, r1
 8011666:	4614      	mov	r4, r2
 8011668:	2d00      	cmp	r5, #0
 801166a:	d051      	beq.n	8011710 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801166c:	6810      	ldr	r0, [r2, #0]
 801166e:	6851      	ldr	r1, [r2, #4]
 8011670:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8011874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8011674:	ae0c      	add	r6, sp, #48	@ 0x30
 8011676:	c603      	stmia	r6!, {r0, r1}
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	6859      	ldr	r1, [r3, #4]
 801167c:	ae0e      	add	r6, sp, #56	@ 0x38
 801167e:	c603      	stmia	r6!, {r0, r1}
 8011680:	a80c      	add	r0, sp, #48	@ 0x30
 8011682:	f7fb fad9 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011686:	4621      	mov	r1, r4
 8011688:	a80e      	add	r0, sp, #56	@ 0x38
 801168a:	f7fb fafd 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801168e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8011692:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011696:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801169a:	f8d9 0000 	ldr.w	r0, [r9]
 801169e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80116a2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80116a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80116aa:	eb08 0401 	add.w	r4, r8, r1
 80116ae:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80116b2:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8011878 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80116b6:	440a      	add	r2, r1
 80116b8:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80116bc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80116c0:	4413      	add	r3, r2
 80116c2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80116c6:	6803      	ldr	r3, [r0, #0]
 80116c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116ca:	4798      	blx	r3
 80116cc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80116d0:	f8d9 0000 	ldr.w	r0, [r9]
 80116d4:	d01f      	beq.n	8011716 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80116d6:	2200      	movs	r2, #0
 80116d8:	6801      	ldr	r1, [r0, #0]
 80116da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80116de:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80116e2:	220b      	movs	r2, #11
 80116e4:	9207      	str	r2, [sp, #28]
 80116e6:	f8b8 2000 	ldrh.w	r2, [r8]
 80116ea:	9206      	str	r2, [sp, #24]
 80116ec:	2201      	movs	r2, #1
 80116ee:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80116f2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80116f6:	9203      	str	r2, [sp, #12]
 80116f8:	fa1f f28a 	uxth.w	r2, sl
 80116fc:	9202      	str	r2, [sp, #8]
 80116fe:	b2b6      	uxth	r6, r6
 8011700:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011704:	9200      	str	r2, [sp, #0]
 8011706:	9601      	str	r6, [sp, #4]
 8011708:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801170a:	463a      	mov	r2, r7
 801170c:	4621      	mov	r1, r4
 801170e:	47a8      	blx	r5
 8011710:	b011      	add	sp, #68	@ 0x44
 8011712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011716:	6803      	ldr	r3, [r0, #0]
 8011718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801171a:	4798      	blx	r3
 801171c:	f8b8 2000 	ldrh.w	r2, [r8]
 8011720:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011724:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8011728:	2dff      	cmp	r5, #255	@ 0xff
 801172a:	fb02 1303 	mla	r3, r2, r3, r1
 801172e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011732:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8011736:	fb0a fa02 	mul.w	sl, sl, r2
 801173a:	d062      	beq.n	8011802 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801173c:	ea6f 0c05 	mvn.w	ip, r5
 8011740:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8011744:	930a      	str	r3, [sp, #40]	@ 0x28
 8011746:	b2ad      	uxth	r5, r5
 8011748:	fa5f fc8c 	uxtb.w	ip, ip
 801174c:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8011750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011752:	4298      	cmp	r0, r3
 8011754:	f080 8085 	bcs.w	8011862 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011758:	eb00 0b09 	add.w	fp, r0, r9
 801175c:	4558      	cmp	r0, fp
 801175e:	d246      	bcs.n	80117ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8011760:	f814 eb01 	ldrb.w	lr, [r4], #1
 8011764:	2303      	movs	r3, #3
 8011766:	2204      	movs	r2, #4
 8011768:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801176c:	eb07 0a0e 	add.w	sl, r7, lr
 8011770:	8803      	ldrh	r3, [r0, #0]
 8011772:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8011776:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801177a:	1219      	asrs	r1, r3, #8
 801177c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8011780:	fb18 f805 	smulbb	r8, r8, r5
 8011784:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8011788:	10da      	asrs	r2, r3, #3
 801178a:	fb01 810c 	mla	r1, r1, ip, r8
 801178e:	00db      	lsls	r3, r3, #3
 8011790:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8011794:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8011798:	b2db      	uxtb	r3, r3
 801179a:	fb18 f805 	smulbb	r8, r8, r5
 801179e:	fb1e fe05 	smulbb	lr, lr, r5
 80117a2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80117a6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80117aa:	b289      	uxth	r1, r1
 80117ac:	fb02 820c 	mla	r2, r2, ip, r8
 80117b0:	fb03 e30c 	mla	r3, r3, ip, lr
 80117b4:	b292      	uxth	r2, r2
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	f101 0801 	add.w	r8, r1, #1
 80117bc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80117c0:	f103 0e01 	add.w	lr, r3, #1
 80117c4:	f102 0801 	add.w	r8, r2, #1
 80117c8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80117cc:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80117d0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80117d4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80117d8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80117dc:	ea4e 0101 	orr.w	r1, lr, r1
 80117e0:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80117e4:	ea41 0108 	orr.w	r1, r1, r8
 80117e8:	f820 1b02 	strh.w	r1, [r0], #2
 80117ec:	e7b6      	b.n	801175c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80117ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80117f0:	881b      	ldrh	r3, [r3, #0]
 80117f2:	1b9b      	subs	r3, r3, r6
 80117f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80117f8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80117fc:	1b9b      	subs	r3, r3, r6
 80117fe:	441c      	add	r4, r3
 8011800:	e7a6      	b.n	8011750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8011802:	491b      	ldr	r1, [pc, #108]	@ (8011870 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8011804:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8011808:	2203      	movs	r2, #3
 801180a:	2504      	movs	r5, #4
 801180c:	4550      	cmp	r0, sl
 801180e:	d228      	bcs.n	8011862 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011810:	eb00 0c09 	add.w	ip, r0, r9
 8011814:	4560      	cmp	r0, ip
 8011816:	4623      	mov	r3, r4
 8011818:	d219      	bcs.n	801184e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801181a:	f893 e000 	ldrb.w	lr, [r3]
 801181e:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8011822:	eb07 0b0e 	add.w	fp, r7, lr
 8011826:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801182a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801182e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8011832:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011836:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801183a:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801183e:	ea43 030b 	orr.w	r3, r3, fp
 8011842:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8011846:	3401      	adds	r4, #1
 8011848:	f820 3b02 	strh.w	r3, [r0], #2
 801184c:	e7e2      	b.n	8011814 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801184e:	f8b8 3000 	ldrh.w	r3, [r8]
 8011852:	1b9b      	subs	r3, r3, r6
 8011854:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011858:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801185c:	1b9b      	subs	r3, r3, r6
 801185e:	441c      	add	r4, r3
 8011860:	e7d4      	b.n	801180c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8011862:	4b04      	ldr	r3, [pc, #16]	@ (8011874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8011864:	6818      	ldr	r0, [r3, #0]
 8011866:	6803      	ldr	r3, [r0, #0]
 8011868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801186a:	4798      	blx	r3
 801186c:	e750      	b.n	8011710 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801186e:	bf00      	nop
 8011870:	fffff800 	.word	0xfffff800
 8011874:	2001543c 	.word	0x2001543c
 8011878:	20015436 	.word	0x20015436

0801187c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801187c:	b4f0      	push	{r4, r5, r6, r7}
 801187e:	460c      	mov	r4, r1
 8011880:	4611      	mov	r1, r2
 8011882:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8011886:	780f      	ldrb	r7, [r1, #0]
 8011888:	784e      	ldrb	r6, [r1, #1]
 801188a:	2f01      	cmp	r7, #1
 801188c:	461a      	mov	r2, r3
 801188e:	9b04      	ldr	r3, [sp, #16]
 8011890:	d038      	beq.n	8011904 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8011892:	d31f      	bcc.n	80118d4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8011894:	2f02      	cmp	r7, #2
 8011896:	d14d      	bne.n	8011934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011898:	2e03      	cmp	r6, #3
 801189a:	d84b      	bhi.n	8011934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801189c:	e8df f006 	tbb	[pc, r6]
 80118a0:	17140702 	.word	0x17140702
 80118a4:	9504      	str	r5, [sp, #16]
 80118a6:	4620      	mov	r0, r4
 80118a8:	bcf0      	pop	{r4, r5, r6, r7}
 80118aa:	f7ff be09 	b.w	80114c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80118ae:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d03f      	beq.n	8011934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80118b4:	6806      	ldr	r6, [r0, #0]
 80118b6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80118ba:	68b5      	ldr	r5, [r6, #8]
 80118bc:	4613      	mov	r3, r2
 80118be:	46ac      	mov	ip, r5
 80118c0:	460a      	mov	r2, r1
 80118c2:	4621      	mov	r1, r4
 80118c4:	bcf0      	pop	{r4, r5, r6, r7}
 80118c6:	4760      	bx	ip
 80118c8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80118cc:	e7f0      	b.n	80118b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80118ce:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80118d2:	e7ed      	b.n	80118b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80118d4:	2e03      	cmp	r6, #3
 80118d6:	d82d      	bhi.n	8011934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80118d8:	e8df f006 	tbb	[pc, r6]
 80118dc:	110e0702 	.word	0x110e0702
 80118e0:	9504      	str	r5, [sp, #16]
 80118e2:	4620      	mov	r0, r4
 80118e4:	bcf0      	pop	{r4, r5, r6, r7}
 80118e6:	f7ff bd05 	b.w	80112f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80118ea:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80118ec:	b310      	cbz	r0, 8011934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80118ee:	6806      	ldr	r6, [r0, #0]
 80118f0:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80118f4:	68f5      	ldr	r5, [r6, #12]
 80118f6:	e7e1      	b.n	80118bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80118f8:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80118fc:	e7f6      	b.n	80118ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80118fe:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011902:	e7f3      	b.n	80118ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8011904:	2e03      	cmp	r6, #3
 8011906:	d815      	bhi.n	8011934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011908:	e8df f006 	tbb	[pc, r6]
 801190c:	110e0702 	.word	0x110e0702
 8011910:	9504      	str	r5, [sp, #16]
 8011912:	4620      	mov	r0, r4
 8011914:	bcf0      	pop	{r4, r5, r6, r7}
 8011916:	f7ff be9f 	b.w	8011658 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801191a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801191c:	b150      	cbz	r0, 8011934 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801191e:	6806      	ldr	r6, [r0, #0]
 8011920:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011924:	6935      	ldr	r5, [r6, #16]
 8011926:	e7c9      	b.n	80118bc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8011928:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801192c:	e7f6      	b.n	801191c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801192e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011932:	e7f3      	b.n	801191c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8011934:	bcf0      	pop	{r4, r5, r6, r7}
 8011936:	4770      	bx	lr

08011938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8011938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193c:	4604      	mov	r4, r0
 801193e:	b087      	sub	sp, #28
 8011940:	6810      	ldr	r0, [r2, #0]
 8011942:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8011946:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 8011b80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801194a:	460e      	mov	r6, r1
 801194c:	6851      	ldr	r1, [r2, #4]
 801194e:	ad02      	add	r5, sp, #8
 8011950:	c503      	stmia	r5!, {r0, r1}
 8011952:	6818      	ldr	r0, [r3, #0]
 8011954:	6859      	ldr	r1, [r3, #4]
 8011956:	ad04      	add	r5, sp, #16
 8011958:	4617      	mov	r7, r2
 801195a:	c503      	stmia	r5!, {r0, r1}
 801195c:	a802      	add	r0, sp, #8
 801195e:	f7fb f96b 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011962:	4639      	mov	r1, r7
 8011964:	a804      	add	r0, sp, #16
 8011966:	f7fb f98f 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801196a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801196e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011972:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011976:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801197a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801197e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011982:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8011986:	440e      	add	r6, r1
 8011988:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801198c:	440a      	add	r2, r1
 801198e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011992:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011996:	4413      	add	r3, r2
 8011998:	f8ad 3012 	strh.w	r3, [sp, #18]
 801199c:	4b77      	ldr	r3, [pc, #476]	@ (8011b7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801199e:	6818      	ldr	r0, [r3, #0]
 80119a0:	6803      	ldr	r3, [r0, #0]
 80119a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119a4:	4798      	blx	r3
 80119a6:	f8b9 b000 	ldrh.w	fp, [r9]
 80119aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80119ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80119b2:	fb0b 2303 	mla	r3, fp, r3, r2
 80119b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80119ba:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80119be:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80119c2:	fb05 f50b 	mul.w	r5, r5, fp
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	d069      	beq.n	8011a9e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80119ca:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80119ce:	4558      	cmp	r0, fp
 80119d0:	f080 80cc 	bcs.w	8011b6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80119d4:	9b00      	ldr	r3, [sp, #0]
 80119d6:	18c3      	adds	r3, r0, r3
 80119d8:	9301      	str	r3, [sp, #4]
 80119da:	4631      	mov	r1, r6
 80119dc:	9b01      	ldr	r3, [sp, #4]
 80119de:	4298      	cmp	r0, r3
 80119e0:	d24f      	bcs.n	8011a82 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80119e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119e6:	2a00      	cmp	r2, #0
 80119e8:	d048      	beq.n	8011a7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80119ea:	fb0a f202 	mul.w	r2, sl, r2
 80119ee:	1c53      	adds	r3, r2, #1
 80119f0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80119f4:	121b      	asrs	r3, r3, #8
 80119f6:	d041      	beq.n	8011a7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80119f8:	8802      	ldrh	r2, [r0, #0]
 80119fa:	f8b4 c000 	ldrh.w	ip, [r4]
 80119fe:	b29e      	uxth	r6, r3
 8011a00:	1215      	asrs	r5, r2, #8
 8011a02:	43db      	mvns	r3, r3
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	ea4f 272c 	mov.w	r7, ip, asr #8
 8011a0a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8011a0e:	fb15 f503 	smulbb	r5, r5, r3
 8011a12:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8011a16:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011a1a:	00d2      	lsls	r2, r2, #3
 8011a1c:	fb07 5706 	mla	r7, r7, r6, r5
 8011a20:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8011a24:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8011a28:	b2d2      	uxtb	r2, r2
 8011a2a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8011a2e:	b2bf      	uxth	r7, r7
 8011a30:	fb1e fe03 	smulbb	lr, lr, r3
 8011a34:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8011a38:	fa5f fc8c 	uxtb.w	ip, ip
 8011a3c:	fb12 f203 	smulbb	r2, r2, r3
 8011a40:	fb05 e506 	mla	r5, r5, r6, lr
 8011a44:	fb0c 2c06 	mla	ip, ip, r6, r2
 8011a48:	f107 0e01 	add.w	lr, r7, #1
 8011a4c:	fa1f fc8c 	uxth.w	ip, ip
 8011a50:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011a54:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8011a58:	f10c 0701 	add.w	r7, ip, #1
 8011a5c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8011a60:	b2ad      	uxth	r5, r5
 8011a62:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011a66:	ea47 070e 	orr.w	r7, r7, lr
 8011a6a:	f105 0e01 	add.w	lr, r5, #1
 8011a6e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8011a72:	096d      	lsrs	r5, r5, #5
 8011a74:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011a78:	432f      	orrs	r7, r5
 8011a7a:	8007      	strh	r7, [r0, #0]
 8011a7c:	3002      	adds	r0, #2
 8011a7e:	3402      	adds	r4, #2
 8011a80:	e7ac      	b.n	80119dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8011a82:	f8b9 3000 	ldrh.w	r3, [r9]
 8011a86:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011a8a:	eba3 0308 	sub.w	r3, r3, r8
 8011a8e:	eba6 0608 	sub.w	r6, r6, r8
 8011a92:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011a96:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011a9a:	440e      	add	r6, r1
 8011a9c:	e797      	b.n	80119ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8011a9e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011aa2:	42a8      	cmp	r0, r5
 8011aa4:	d262      	bcs.n	8011b6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011aa6:	9b00      	ldr	r3, [sp, #0]
 8011aa8:	4631      	mov	r1, r6
 8011aaa:	eb00 0b03 	add.w	fp, r0, r3
 8011aae:	4558      	cmp	r0, fp
 8011ab0:	d24e      	bcs.n	8011b50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8011ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ab6:	b12b      	cbz	r3, 8011ac4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8011ab8:	2bff      	cmp	r3, #255	@ 0xff
 8011aba:	f8b4 e000 	ldrh.w	lr, [r4]
 8011abe:	d104      	bne.n	8011aca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8011ac0:	f8a0 e000 	strh.w	lr, [r0]
 8011ac4:	3002      	adds	r0, #2
 8011ac6:	3402      	adds	r4, #2
 8011ac8:	e7f1      	b.n	8011aae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8011aca:	8802      	ldrh	r2, [r0, #0]
 8011acc:	b29f      	uxth	r7, r3
 8011ace:	1216      	asrs	r6, r2, #8
 8011ad0:	43db      	mvns	r3, r3
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8011ad8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011adc:	fb16 f603 	smulbb	r6, r6, r3
 8011ae0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8011ae4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011ae8:	00d2      	lsls	r2, r2, #3
 8011aea:	fb0c 6c07 	mla	ip, ip, r7, r6
 8011aee:	b2d2      	uxtb	r2, r2
 8011af0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8011af4:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8011af8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8011afc:	fb1a fa03 	smulbb	sl, sl, r3
 8011b00:	fa1f fc8c 	uxth.w	ip, ip
 8011b04:	fb12 f303 	smulbb	r3, r2, r3
 8011b08:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8011b0c:	fa5f fe8e 	uxtb.w	lr, lr
 8011b10:	fb06 a607 	mla	r6, r6, r7, sl
 8011b14:	f10c 0201 	add.w	r2, ip, #1
 8011b18:	fb0e 3307 	mla	r3, lr, r7, r3
 8011b1c:	b2b6      	uxth	r6, r6
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8011b24:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8011b28:	f106 0a01 	add.w	sl, r6, #1
 8011b2c:	f103 0c01 	add.w	ip, r3, #1
 8011b30:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8011b34:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8011b38:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8011b3c:	0976      	lsrs	r6, r6, #5
 8011b3e:	ea4c 0c02 	orr.w	ip, ip, r2
 8011b42:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8011b46:	ea4c 0c06 	orr.w	ip, ip, r6
 8011b4a:	f8a0 c000 	strh.w	ip, [r0]
 8011b4e:	e7b9      	b.n	8011ac4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8011b50:	f8b9 3000 	ldrh.w	r3, [r9]
 8011b54:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011b58:	eba3 0308 	sub.w	r3, r3, r8
 8011b5c:	eba6 0608 	sub.w	r6, r6, r8
 8011b60:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011b64:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011b68:	440e      	add	r6, r1
 8011b6a:	e79a      	b.n	8011aa2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8011b6c:	4b03      	ldr	r3, [pc, #12]	@ (8011b7c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8011b6e:	6818      	ldr	r0, [r3, #0]
 8011b70:	6803      	ldr	r3, [r0, #0]
 8011b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b74:	4798      	blx	r3
 8011b76:	b007      	add	sp, #28
 8011b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7c:	2001543c 	.word	0x2001543c
 8011b80:	20015436 	.word	0x20015436

08011b84 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8011b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b88:	b089      	sub	sp, #36	@ 0x24
 8011b8a:	4607      	mov	r7, r0
 8011b8c:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8011b90:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8011b92:	4688      	mov	r8, r1
 8011b94:	4692      	mov	sl, r2
 8011b96:	4699      	mov	r9, r3
 8011b98:	2e00      	cmp	r6, #0
 8011b9a:	d048      	beq.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011b9c:	4608      	mov	r0, r1
 8011b9e:	f7fe fac3 	bl	8010128 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011ba2:	4605      	mov	r5, r0
 8011ba4:	4640      	mov	r0, r8
 8011ba6:	f7fe faf3 	bl	8010190 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011baa:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011bae:	4640      	mov	r0, r8
 8011bb0:	f8ad a008 	strh.w	sl, [sp, #8]
 8011bb4:	f8ad 500c 	strh.w	r5, [sp, #12]
 8011bb8:	f8ad 900a 	strh.w	r9, [sp, #10]
 8011bbc:	f7fe fba6 	bl	801030c <_ZNK8touchgfx6Bitmap7getDataEv>
 8011bc0:	4605      	mov	r5, r0
 8011bc2:	4640      	mov	r0, r8
 8011bc4:	f7fe fbd2 	bl	801036c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8011bc8:	4682      	mov	sl, r0
 8011bca:	4640      	mov	r0, r8
 8011bcc:	f7fe fc22 	bl	8010414 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011bd0:	2810      	cmp	r0, #16
 8011bd2:	d82c      	bhi.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011bd4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011bd8:	00ba00ca 	.word	0x00ba00ca
 8011bdc:	002b0011 	.word	0x002b0011
 8011be0:	002b002b 	.word	0x002b002b
 8011be4:	002b002b 	.word	0x002b002b
 8011be8:	002b002b 	.word	0x002b002b
 8011bec:	00c1002b 	.word	0x00c1002b
 8011bf0:	002b002b 	.word	0x002b002b
 8011bf4:	002b0180 	.word	0x002b0180
 8011bf8:	0173      	.short	0x0173
 8011bfa:	4bbc      	ldr	r3, [pc, #752]	@ (8011eec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8011bfc:	6818      	ldr	r0, [r3, #0]
 8011bfe:	6803      	ldr	r3, [r0, #0]
 8011c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c02:	4798      	blx	r3
 8011c04:	2eff      	cmp	r6, #255	@ 0xff
 8011c06:	d101      	bne.n	8011c0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8011c08:	0683      	lsls	r3, r0, #26
 8011c0a:	d506      	bpl.n	8011c1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8011c0c:	4633      	mov	r3, r6
 8011c0e:	4622      	mov	r2, r4
 8011c10:	a902      	add	r1, sp, #8
 8011c12:	4628      	mov	r0, r5
 8011c14:	f7ff f8fc 	bl	8010e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011c18:	e009      	b.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011c1a:	4640      	mov	r0, r8
 8011c1c:	f7fe fb3e 	bl	801029c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8011c20:	b940      	cbnz	r0, 8011c34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8011c22:	4623      	mov	r3, r4
 8011c24:	aa02      	add	r2, sp, #8
 8011c26:	4629      	mov	r1, r5
 8011c28:	4638      	mov	r0, r7
 8011c2a:	f7ff f9d7 	bl	8010fdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8011c2e:	b009      	add	sp, #36	@ 0x24
 8011c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c34:	f10d 0918 	add.w	r9, sp, #24
 8011c38:	4641      	mov	r1, r8
 8011c3a:	4648      	mov	r0, r9
 8011c3c:	f7fe fadc 	bl	80101f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011c40:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011c44:	f10d 0810 	add.w	r8, sp, #16
 8011c48:	e888 0003 	stmia.w	r8, {r0, r1}
 8011c4c:	4640      	mov	r0, r8
 8011c4e:	4621      	mov	r1, r4
 8011c50:	f7f7 fe74 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 8011c54:	4640      	mov	r0, r8
 8011c56:	f7f7 feb4 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	d1d6      	bne.n	8011c0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8011c5e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011c62:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011c66:	4293      	cmp	r3, r2
 8011c68:	dd12      	ble.n	8011c90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8011c6a:	1a9b      	subs	r3, r3, r2
 8011c6c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011c70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011c74:	f8ad 0018 	strh.w	r0, [sp, #24]
 8011c78:	f8ad 201a 	strh.w	r2, [sp, #26]
 8011c7c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011c80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011c84:	464a      	mov	r2, r9
 8011c86:	4633      	mov	r3, r6
 8011c88:	a902      	add	r1, sp, #8
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	f7ff f8c0 	bl	8010e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011c90:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011c94:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011c98:	4293      	cmp	r3, r2
 8011c9a:	dd12      	ble.n	8011cc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8011c9c:	1a9b      	subs	r3, r3, r2
 8011c9e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8011ca2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8011ca6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011caa:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011cae:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011cb2:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011cb6:	23ff      	movs	r3, #255	@ 0xff
 8011cb8:	464a      	mov	r2, r9
 8011cba:	a902      	add	r1, sp, #8
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	f7ff f8a7 	bl	8010e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011cc2:	4643      	mov	r3, r8
 8011cc4:	aa02      	add	r2, sp, #8
 8011cc6:	4629      	mov	r1, r5
 8011cc8:	4638      	mov	r0, r7
 8011cca:	f7ff f987 	bl	8010fdc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8011cce:	88a2      	ldrh	r2, [r4, #4]
 8011cd0:	8823      	ldrh	r3, [r4, #0]
 8011cd2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8011cd6:	4413      	add	r3, r2
 8011cd8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011cdc:	440a      	add	r2, r1
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	b292      	uxth	r2, r2
 8011ce2:	b211      	sxth	r1, r2
 8011ce4:	b218      	sxth	r0, r3
 8011ce6:	4288      	cmp	r0, r1
 8011ce8:	dd12      	ble.n	8011d10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8011cea:	1a9b      	subs	r3, r3, r2
 8011cec:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8011cf0:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8011cf4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8011cf8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011cfc:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011d00:	23ff      	movs	r3, #255	@ 0xff
 8011d02:	464a      	mov	r2, r9
 8011d04:	a902      	add	r1, sp, #8
 8011d06:	4628      	mov	r0, r5
 8011d08:	f8ad 601a 	strh.w	r6, [sp, #26]
 8011d0c:	f7ff f880 	bl	8010e10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011d10:	88e2      	ldrh	r2, [r4, #6]
 8011d12:	8863      	ldrh	r3, [r4, #2]
 8011d14:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8011d18:	4413      	add	r3, r2
 8011d1a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011d1e:	440a      	add	r2, r1
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	b292      	uxth	r2, r2
 8011d24:	b211      	sxth	r1, r2
 8011d26:	b218      	sxth	r0, r3
 8011d28:	4288      	cmp	r0, r1
 8011d2a:	dd80      	ble.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011d2c:	1a9b      	subs	r3, r3, r2
 8011d2e:	f9b4 6000 	ldrsh.w	r6, [r4]
 8011d32:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011d36:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011d3a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011d3e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8011d42:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011d46:	23ff      	movs	r3, #255	@ 0xff
 8011d48:	464a      	mov	r2, r9
 8011d4a:	e761      	b.n	8011c10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8011d4c:	4633      	mov	r3, r6
 8011d4e:	4622      	mov	r2, r4
 8011d50:	a902      	add	r1, sp, #8
 8011d52:	4628      	mov	r0, r5
 8011d54:	f7ff f9b2 	bl	80110bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8011d58:	e769      	b.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011d5a:	e9cd 4600 	strd	r4, r6, [sp]
 8011d5e:	ab02      	add	r3, sp, #8
 8011d60:	4652      	mov	r2, sl
 8011d62:	4629      	mov	r1, r5
 8011d64:	4638      	mov	r0, r7
 8011d66:	f7ff fd89 	bl	801187c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8011d6a:	e760      	b.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011d6c:	4640      	mov	r0, r8
 8011d6e:	f7fe fa95 	bl	801029c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8011d72:	b948      	cbnz	r0, 8011d88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	e9cd 6000 	strd	r6, r0, [sp]
 8011d7a:	aa02      	add	r2, sp, #8
 8011d7c:	68de      	ldr	r6, [r3, #12]
 8011d7e:	4629      	mov	r1, r5
 8011d80:	4623      	mov	r3, r4
 8011d82:	4638      	mov	r0, r7
 8011d84:	47b0      	blx	r6
 8011d86:	e752      	b.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011d88:	f10d 0918 	add.w	r9, sp, #24
 8011d8c:	4641      	mov	r1, r8
 8011d8e:	4648      	mov	r0, r9
 8011d90:	f7fe fa32 	bl	80101f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011d94:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011d98:	f10d 0810 	add.w	r8, sp, #16
 8011d9c:	e888 0003 	stmia.w	r8, {r0, r1}
 8011da0:	4640      	mov	r0, r8
 8011da2:	4621      	mov	r1, r4
 8011da4:	f7f7 fdca 	bl	800993c <_ZN8touchgfx4RectaNERKS0_>
 8011da8:	4640      	mov	r0, r8
 8011daa:	f7f7 fe0a 	bl	80099c2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011dae:	b138      	cbz	r0, 8011dc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8011db0:	9600      	str	r6, [sp, #0]
 8011db2:	4623      	mov	r3, r4
 8011db4:	aa02      	add	r2, sp, #8
 8011db6:	4651      	mov	r1, sl
 8011db8:	4628      	mov	r0, r5
 8011dba:	f7ff fdbd 	bl	8011938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011dbe:	e736      	b.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	e9cd 6000 	strd	r6, r0, [sp]
 8011dc6:	aa02      	add	r2, sp, #8
 8011dc8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8011dcc:	4629      	mov	r1, r5
 8011dce:	4643      	mov	r3, r8
 8011dd0:	4638      	mov	r0, r7
 8011dd2:	47d8      	blx	fp
 8011dd4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011dd8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	dd13      	ble.n	8011e08 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8011de0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011de4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011de8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8011dec:	1a9b      	subs	r3, r3, r2
 8011dee:	f8ad 201a 	strh.w	r2, [sp, #26]
 8011df2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011df6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011dfa:	9600      	str	r6, [sp, #0]
 8011dfc:	464b      	mov	r3, r9
 8011dfe:	aa02      	add	r2, sp, #8
 8011e00:	4651      	mov	r1, sl
 8011e02:	4628      	mov	r0, r5
 8011e04:	f7ff fd98 	bl	8011938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011e08:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011e0c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011e10:	4293      	cmp	r3, r2
 8011e12:	dd13      	ble.n	8011e3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8011e14:	1a9b      	subs	r3, r3, r2
 8011e16:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8011e1a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8011e1e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011e22:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011e26:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011e2a:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011e2e:	9600      	str	r6, [sp, #0]
 8011e30:	464b      	mov	r3, r9
 8011e32:	aa02      	add	r2, sp, #8
 8011e34:	4651      	mov	r1, sl
 8011e36:	4628      	mov	r0, r5
 8011e38:	f7ff fd7e 	bl	8011938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011e3c:	88a2      	ldrh	r2, [r4, #4]
 8011e3e:	8823      	ldrh	r3, [r4, #0]
 8011e40:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8011e44:	4413      	add	r3, r2
 8011e46:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011e4a:	440a      	add	r2, r1
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	b292      	uxth	r2, r2
 8011e50:	b211      	sxth	r1, r2
 8011e52:	b218      	sxth	r0, r3
 8011e54:	4288      	cmp	r0, r1
 8011e56:	dd13      	ble.n	8011e80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8011e58:	1a9b      	subs	r3, r3, r2
 8011e5a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8011e5e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8011e62:	f8ad 1018 	strh.w	r1, [sp, #24]
 8011e66:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011e6a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011e6e:	9600      	str	r6, [sp, #0]
 8011e70:	464b      	mov	r3, r9
 8011e72:	aa02      	add	r2, sp, #8
 8011e74:	4651      	mov	r1, sl
 8011e76:	4628      	mov	r0, r5
 8011e78:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011e7c:	f7ff fd5c 	bl	8011938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011e80:	88e2      	ldrh	r2, [r4, #6]
 8011e82:	8863      	ldrh	r3, [r4, #2]
 8011e84:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8011e88:	4413      	add	r3, r2
 8011e8a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011e8e:	440a      	add	r2, r1
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	b292      	uxth	r2, r2
 8011e94:	b211      	sxth	r1, r2
 8011e96:	b218      	sxth	r0, r3
 8011e98:	4288      	cmp	r0, r1
 8011e9a:	f77f aec8 	ble.w	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011e9e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8011ea2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011ea6:	f8ad 7018 	strh.w	r7, [sp, #24]
 8011eaa:	1a9b      	subs	r3, r3, r2
 8011eac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011eb0:	f8ad 101a 	strh.w	r1, [sp, #26]
 8011eb4:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011eb8:	9600      	str	r6, [sp, #0]
 8011eba:	464b      	mov	r3, r9
 8011ebc:	e77a      	b.n	8011db4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8011ebe:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8011ec2:	2800      	cmp	r0, #0
 8011ec4:	f43f aeb3 	beq.w	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011ec8:	6803      	ldr	r3, [r0, #0]
 8011eca:	9600      	str	r6, [sp, #0]
 8011ecc:	68de      	ldr	r6, [r3, #12]
 8011ece:	4623      	mov	r3, r4
 8011ed0:	aa02      	add	r2, sp, #8
 8011ed2:	4629      	mov	r1, r5
 8011ed4:	47b0      	blx	r6
 8011ed6:	e6aa      	b.n	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011ed8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8011edc:	2800      	cmp	r0, #0
 8011ede:	f43f aea6 	beq.w	8011c2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011ee2:	6803      	ldr	r3, [r0, #0]
 8011ee4:	9600      	str	r6, [sp, #0]
 8011ee6:	689e      	ldr	r6, [r3, #8]
 8011ee8:	e7f1      	b.n	8011ece <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8011eea:	bf00      	nop
 8011eec:	2001543c 	.word	0x2001543c

08011ef0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8011ef0:	b180      	cbz	r0, 8011f14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8011ef2:	2903      	cmp	r1, #3
 8011ef4:	d81c      	bhi.n	8011f30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8011ef6:	e8df f001 	tbb	[pc, r1]
 8011efa:	1d02      	.short	0x1d02
 8011efc:	1f08      	.short	0x1f08
 8011efe:	4b10      	ldr	r3, [pc, #64]	@ (8011f40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8011f00:	8818      	ldrh	r0, [r3, #0]
 8011f02:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011f06:	4240      	negs	r0, r0
 8011f08:	4770      	bx	lr
 8011f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8011f40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8011f0c:	8818      	ldrh	r0, [r3, #0]
 8011f0e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011f12:	4770      	bx	lr
 8011f14:	2903      	cmp	r1, #3
 8011f16:	d80b      	bhi.n	8011f30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8011f18:	a301      	add	r3, pc, #4	@ (adr r3, 8011f20 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8011f1a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011f1e:	bf00      	nop
 8011f20:	08011f35 	.word	0x08011f35
 8011f24:	08011f0b 	.word	0x08011f0b
 8011f28:	08011f39 	.word	0x08011f39
 8011f2c:	08011eff 	.word	0x08011eff
 8011f30:	2000      	movs	r0, #0
 8011f32:	4770      	bx	lr
 8011f34:	2001      	movs	r0, #1
 8011f36:	4770      	bx	lr
 8011f38:	f04f 30ff 	mov.w	r0, #4294967295
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop
 8011f40:	20015436 	.word	0x20015436

08011f44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8011f44:	b180      	cbz	r0, 8011f68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8011f46:	2903      	cmp	r1, #3
 8011f48:	d81c      	bhi.n	8011f84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8011f4a:	e8df f001 	tbb	[pc, r1]
 8011f4e:	021d      	.short	0x021d
 8011f50:	071f      	.short	0x071f
 8011f52:	4b10      	ldr	r3, [pc, #64]	@ (8011f94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8011f54:	8818      	ldrh	r0, [r3, #0]
 8011f56:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011f5a:	4770      	bx	lr
 8011f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8011f94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8011f5e:	8818      	ldrh	r0, [r3, #0]
 8011f60:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011f64:	4240      	negs	r0, r0
 8011f66:	4770      	bx	lr
 8011f68:	2903      	cmp	r1, #3
 8011f6a:	d80b      	bhi.n	8011f84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8011f6c:	a301      	add	r3, pc, #4	@ (adr r3, 8011f74 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8011f6e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011f72:	bf00      	nop
 8011f74:	08011f53 	.word	0x08011f53
 8011f78:	08011f8d 	.word	0x08011f8d
 8011f7c:	08011f5d 	.word	0x08011f5d
 8011f80:	08011f89 	.word	0x08011f89
 8011f84:	2000      	movs	r0, #0
 8011f86:	4770      	bx	lr
 8011f88:	2001      	movs	r0, #1
 8011f8a:	4770      	bx	lr
 8011f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f90:	4770      	bx	lr
 8011f92:	bf00      	nop
 8011f94:	20015436 	.word	0x20015436

08011f98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8011f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f9c:	b099      	sub	sp, #100	@ 0x64
 8011f9e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011fa0:	a914      	add	r1, sp, #80	@ 0x50
 8011fa2:	e881 000c 	stmia.w	r1, {r2, r3}
 8011fa6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8011faa:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8011fae:	f891 900d 	ldrb.w	r9, [r1, #13]
 8011fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fb4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8011fb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8011fba:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8011fbe:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011fc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8011fc4:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 8011fc8:	798f      	ldrb	r7, [r1, #6]
 8011fca:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8011fce:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8011fd2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8011fd6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8011fda:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8011fde:	431f      	orrs	r7, r3
 8011fe0:	f000 8195 	beq.w	801230e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011fe4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8011fe8:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8011fec:	f891 9007 	ldrb.w	r9, [r1, #7]
 8011ff0:	ea59 0903 	orrs.w	r9, r9, r3
 8011ff4:	f000 818b 	beq.w	801230e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011ff8:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	2d00      	cmp	r5, #0
 8012000:	f000 812e 	beq.w	8012260 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8012004:	1aed      	subs	r5, r5, r3
 8012006:	b2ad      	uxth	r5, r5
 8012008:	042b      	lsls	r3, r5, #16
 801200a:	d502      	bpl.n	8012012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801200c:	1b64      	subs	r4, r4, r5
 801200e:	b224      	sxth	r4, r4
 8012010:	2500      	movs	r5, #0
 8012012:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012016:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801201a:	428c      	cmp	r4, r1
 801201c:	b28b      	uxth	r3, r1
 801201e:	bfbf      	itttt	lt
 8012020:	18ed      	addlt	r5, r5, r3
 8012022:	1b2c      	sublt	r4, r5, r4
 8012024:	b2a5      	uxthlt	r5, r4
 8012026:	460c      	movlt	r4, r1
 8012028:	8891      	ldrh	r1, [r2, #4]
 801202a:	440b      	add	r3, r1
 801202c:	b21b      	sxth	r3, r3
 801202e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012030:	88d3      	ldrh	r3, [r2, #6]
 8012032:	8852      	ldrh	r2, [r2, #2]
 8012034:	4413      	add	r3, r2
 8012036:	b21b      	sxth	r3, r3
 8012038:	930d      	str	r3, [sp, #52]	@ 0x34
 801203a:	4bbe      	ldr	r3, [pc, #760]	@ (8012334 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801203c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801203e:	f893 b000 	ldrb.w	fp, [r3]
 8012042:	f10b 3cff 	add.w	ip, fp, #4294967295
 8012046:	f1dc 0300 	rsbs	r3, ip, #0
 801204a:	eb43 030c 	adc.w	r3, r3, ip
 801204e:	930e      	str	r3, [sp, #56]	@ 0x38
 8012050:	4621      	mov	r1, r4
 8012052:	4653      	mov	r3, sl
 8012054:	a814      	add	r0, sp, #80	@ 0x50
 8012056:	f7fa fc64 	bl	800c922 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801205a:	4621      	mov	r1, r4
 801205c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8012060:	4653      	mov	r3, sl
 8012062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012064:	a814      	add	r0, sp, #80	@ 0x50
 8012066:	f7fa fc79 	bl	800c95c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801206a:	a918      	add	r1, sp, #96	@ 0x60
 801206c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8012070:	a817      	add	r0, sp, #92	@ 0x5c
 8012072:	f7fa fd9f 	bl	800cbb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8012076:	f1ba 0f00 	cmp.w	sl, #0
 801207a:	f040 80f4 	bne.w	8012266 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801207e:	f1bb 0f01 	cmp.w	fp, #1
 8012082:	f040 80f8 	bne.w	8012276 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8012086:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012088:	2b00      	cmp	r3, #0
 801208a:	f040 8145 	bne.w	8012318 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801208e:	b2ba      	uxth	r2, r7
 8012090:	b905      	cbnz	r5, 8012094 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8012092:	b16e      	cbz	r6, 80120b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8012094:	fb06 5302 	mla	r3, r6, r2, r5
 8012098:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801209a:	fb08 f303 	mul.w	r3, r8, r3
 801209e:	4631      	mov	r1, r6
 80120a0:	f003 0607 	and.w	r6, r3, #7
 80120a4:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80120a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80120aa:	eba9 0301 	sub.w	r3, r9, r1
 80120ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80120b0:	4651      	mov	r1, sl
 80120b2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80120b4:	f7ff ff1c 	bl	8011ef0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80120b8:	4681      	mov	r9, r0
 80120ba:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80120bc:	f7ff ff42 	bl	8011f44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80120c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80120c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80120c4:	eba3 0a01 	sub.w	sl, r3, r1
 80120c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120ca:	459a      	cmp	sl, r3
 80120cc:	bfa8      	it	ge
 80120ce:	469a      	movge	sl, r3
 80120d0:	f1ba 0f00 	cmp.w	sl, #0
 80120d4:	4683      	mov	fp, r0
 80120d6:	f340 811a 	ble.w	801230e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80120da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120dc:	1b64      	subs	r4, r4, r5
 80120de:	1b1c      	subs	r4, r3, r4
 80120e0:	42bc      	cmp	r4, r7
 80120e2:	bfd4      	ite	le
 80120e4:	ebc5 0504 	rsble	r5, r5, r4
 80120e8:	ebc5 0507 	rsbgt	r5, r5, r7
 80120ec:	2d00      	cmp	r5, #0
 80120ee:	f340 810e 	ble.w	801230e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80120f2:	1b52      	subs	r2, r2, r5
 80120f4:	fb08 f302 	mul.w	r3, r8, r2
 80120f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80120fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f040 8116 	bne.w	801232e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8012102:	4b8d      	ldr	r3, [pc, #564]	@ (8012338 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8012104:	6818      	ldr	r0, [r3, #0]
 8012106:	6803      	ldr	r3, [r0, #0]
 8012108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801210a:	4798      	blx	r3
 801210c:	2301      	movs	r3, #1
 801210e:	fa03 f308 	lsl.w	r3, r3, r8
 8012112:	4a8a      	ldr	r2, [pc, #552]	@ (801233c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8012114:	3b01      	subs	r3, #1
 8012116:	b2db      	uxtb	r3, r3
 8012118:	8811      	ldrh	r1, [r2, #0]
 801211a:	930e      	str	r3, [sp, #56]	@ 0x38
 801211c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8012120:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8012124:	fb01 2303 	mla	r3, r1, r3, r2
 8012128:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801212c:	930a      	str	r3, [sp, #40]	@ 0x28
 801212e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012130:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8012134:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012136:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012138:	0a19      	lsrs	r1, r3, #8
 801213a:	b2cb      	uxtb	r3, r1
 801213c:	9312      	str	r3, [sp, #72]	@ 0x48
 801213e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012140:	b2db      	uxtb	r3, r3
 8012142:	9311      	str	r3, [sp, #68]	@ 0x44
 8012144:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012146:	095a      	lsrs	r2, r3, #5
 8012148:	4b7d      	ldr	r3, [pc, #500]	@ (8012340 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801214a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801214e:	400b      	ands	r3, r1
 8012150:	4313      	orrs	r3, r2
 8012152:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8012154:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8012158:	4313      	orrs	r3, r2
 801215a:	b29b      	uxth	r3, r3
 801215c:	9310      	str	r3, [sp, #64]	@ 0x40
 801215e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012160:	781a      	ldrb	r2, [r3, #0]
 8012162:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8012166:	4132      	asrs	r2, r6
 8012168:	fb05 b919 	mls	r9, r5, r9, fp
 801216c:	fb03 fb05 	mul.w	fp, r3, r5
 8012170:	b2d2      	uxtb	r2, r2
 8012172:	930d      	str	r3, [sp, #52]	@ 0x34
 8012174:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8012178:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801217c:	f0c0 80f5 	bcc.w	801236a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8012180:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8012184:	46ae      	mov	lr, r5
 8012186:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801218a:	f0c0 80dd 	bcc.w	8012348 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801218e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012190:	4013      	ands	r3, r2
 8012192:	d055      	beq.n	8012240 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8012194:	20ff      	movs	r0, #255	@ 0xff
 8012196:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012198:	fb90 f1f1 	sdiv	r1, r0, r1
 801219c:	434b      	muls	r3, r1
 801219e:	2bfe      	cmp	r3, #254	@ 0xfe
 80121a0:	dd03      	ble.n	80121aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80121a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80121a4:	4281      	cmp	r1, r0
 80121a6:	f000 80cd 	beq.w	8012344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80121aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80121ac:	f8bc 4000 	ldrh.w	r4, [ip]
 80121b0:	fb11 f303 	smulbb	r3, r1, r3
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	1c59      	adds	r1, r3, #1
 80121b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80121bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80121c0:	b29f      	uxth	r7, r3
 80121c2:	43db      	mvns	r3, r3
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80121c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80121ca:	1220      	asrs	r0, r4, #8
 80121cc:	fb13 f907 	smulbb	r9, r3, r7
 80121d0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80121d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121d6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80121da:	fb00 9003 	mla	r0, r0, r3, r9
 80121de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80121e0:	10e1      	asrs	r1, r4, #3
 80121e2:	fb13 f907 	smulbb	r9, r3, r7
 80121e6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80121ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ec:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80121f0:	fb01 9103 	mla	r1, r1, r3, r9
 80121f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80121f6:	00e4      	lsls	r4, r4, #3
 80121f8:	fb13 f707 	smulbb	r7, r3, r7
 80121fc:	b2e4      	uxtb	r4, r4
 80121fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012200:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012204:	fb04 7403 	mla	r4, r4, r3, r7
 8012208:	b280      	uxth	r0, r0
 801220a:	b2a4      	uxth	r4, r4
 801220c:	1c43      	adds	r3, r0, #1
 801220e:	f104 0901 	add.w	r9, r4, #1
 8012212:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8012216:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801221a:	b289      	uxth	r1, r1
 801221c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8012220:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8012224:	ea49 0000 	orr.w	r0, r9, r0
 8012228:	f101 0901 	add.w	r9, r1, #1
 801222c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8012230:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012234:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8012238:	ea40 0009 	orr.w	r0, r0, r9
 801223c:	f8ac 0000 	strh.w	r0, [ip]
 8012240:	4446      	add	r6, r8
 8012242:	b2b6      	uxth	r6, r6
 8012244:	2e07      	cmp	r6, #7
 8012246:	bf81      	itttt	hi
 8012248:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 801224a:	785a      	ldrbhi	r2, [r3, #1]
 801224c:	3301      	addhi	r3, #1
 801224e:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8012250:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012252:	bf9a      	itte	ls
 8012254:	fa42 f208 	asrls.w	r2, r2, r8
 8012258:	b2d2      	uxtbls	r2, r2
 801225a:	2600      	movhi	r6, #0
 801225c:	449c      	add	ip, r3
 801225e:	e792      	b.n	8012186 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8012260:	441c      	add	r4, r3
 8012262:	b224      	sxth	r4, r4
 8012264:	e6d5      	b.n	8012012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8012266:	f1ba 0f01 	cmp.w	sl, #1
 801226a:	f47f af0c 	bne.w	8012086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801226e:	f1bb 0f01 	cmp.w	fp, #1
 8012272:	f47f af08 	bne.w	8012086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012276:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 8012338 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801227a:	f8db 0000 	ldr.w	r0, [fp]
 801227e:	6803      	ldr	r3, [r0, #0]
 8012280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012282:	4798      	blx	r3
 8012284:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8012288:	465a      	mov	r2, fp
 801228a:	d006      	beq.n	801229a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801228c:	f1b8 0f04 	cmp.w	r8, #4
 8012290:	d140      	bne.n	8012314 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8012292:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012294:	3300      	adds	r3, #0
 8012296:	bf18      	it	ne
 8012298:	2301      	movne	r3, #1
 801229a:	0580      	lsls	r0, r0, #22
 801229c:	d56e      	bpl.n	801237c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801229e:	f1b8 0f08 	cmp.w	r8, #8
 80122a2:	d16b      	bne.n	801237c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	bf0c      	ite	eq
 80122a8:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80122ac:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80122b0:	2d00      	cmp	r5, #0
 80122b2:	f47f aee8 	bne.w	8012086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80122b6:	2e00      	cmp	r6, #0
 80122b8:	f47f aee5 	bne.w	8012086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80122bc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80122be:	19e3      	adds	r3, r4, r7
 80122c0:	4283      	cmp	r3, r0
 80122c2:	f73f aee0 	bgt.w	8012086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80122c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80122ca:	444b      	add	r3, r9
 80122cc:	4283      	cmp	r3, r0
 80122ce:	f73f aeda 	bgt.w	8012086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80122d2:	6810      	ldr	r0, [r2, #0]
 80122d4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 80122d8:	6804      	ldr	r4, [r0, #0]
 80122da:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80122de:	b2bf      	uxth	r7, r7
 80122e0:	f1b8 0f08 	cmp.w	r8, #8
 80122e4:	f04f 0500 	mov.w	r5, #0
 80122e8:	bf18      	it	ne
 80122ea:	3701      	addne	r7, #1
 80122ec:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80122f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80122f2:	9104      	str	r1, [sp, #16]
 80122f4:	bf18      	it	ne
 80122f6:	f027 0701 	bicne.w	r7, r7, #1
 80122fa:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80122fc:	bf18      	it	ne
 80122fe:	b2bf      	uxthne	r7, r7
 8012300:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8012304:	e9cd 7900 	strd	r7, r9, [sp]
 8012308:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801230a:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801230c:	47a0      	blx	r4
 801230e:	b019      	add	sp, #100	@ 0x64
 8012310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012314:	2300      	movs	r3, #0
 8012316:	e7c0      	b.n	801229a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8012318:	2208      	movs	r2, #8
 801231a:	fb92 f3f8 	sdiv	r3, r2, r8
 801231e:	1e5a      	subs	r2, r3, #1
 8012320:	443a      	add	r2, r7
 8012322:	fb92 f2f3 	sdiv	r2, r2, r3
 8012326:	fb12 f203 	smulbb	r2, r2, r3
 801232a:	b292      	uxth	r2, r2
 801232c:	e6b0      	b.n	8012090 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801232e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012330:	e6ec      	b.n	801210c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8012332:	bf00      	nop
 8012334:	20015434 	.word	0x20015434
 8012338:	2001543c 	.word	0x2001543c
 801233c:	20015436 	.word	0x20015436
 8012340:	00fff800 	.word	0x00fff800
 8012344:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012346:	e779      	b.n	801223c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8012348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801234a:	b153      	cbz	r3, 8012362 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801234c:	441e      	add	r6, r3
 801234e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012350:	b2b6      	uxth	r6, r6
 8012352:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8012356:	f006 0607 	and.w	r6, r6, #7
 801235a:	781a      	ldrb	r2, [r3, #0]
 801235c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801235e:	4132      	asrs	r2, r6
 8012360:	b2d2      	uxtb	r2, r2
 8012362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012364:	445b      	add	r3, fp
 8012366:	930a      	str	r3, [sp, #40]	@ 0x28
 8012368:	e706      	b.n	8012178 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801236a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1ce      	bne.n	801230e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012370:	4b05      	ldr	r3, [pc, #20]	@ (8012388 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8012372:	6818      	ldr	r0, [r3, #0]
 8012374:	6803      	ldr	r3, [r0, #0]
 8012376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012378:	4798      	blx	r3
 801237a:	e7c8      	b.n	801230e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801237c:	2b00      	cmp	r3, #0
 801237e:	f43f ae82 	beq.w	8012086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012386:	e793      	b.n	80122b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8012388:	2001543c 	.word	0x2001543c

0801238c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 801238c:	b538      	push	{r3, r4, r5, lr}
 801238e:	4c0b      	ldr	r4, [pc, #44]	@ (80123bc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8012390:	7823      	ldrb	r3, [r4, #0]
 8012392:	f3bf 8f5b 	dmb	ish
 8012396:	07db      	lsls	r3, r3, #31
 8012398:	4605      	mov	r5, r0
 801239a:	d40b      	bmi.n	80123b4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801239c:	4620      	mov	r0, r4
 801239e:	f000 fd43 	bl	8012e28 <__cxa_guard_acquire>
 80123a2:	b138      	cbz	r0, 80123b4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 80123a4:	4620      	mov	r0, r4
 80123a6:	f000 fd4b 	bl	8012e40 <__cxa_guard_release>
 80123aa:	4a05      	ldr	r2, [pc, #20]	@ (80123c0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 80123ac:	4905      	ldr	r1, [pc, #20]	@ (80123c4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 80123ae:	4806      	ldr	r0, [pc, #24]	@ (80123c8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80123b0:	f000 fd33 	bl	8012e1a <__aeabi_atexit>
 80123b4:	4b04      	ldr	r3, [pc, #16]	@ (80123c8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80123b6:	67eb      	str	r3, [r5, #124]	@ 0x7c
 80123b8:	bd38      	pop	{r3, r4, r5, pc}
 80123ba:	bf00      	nop
 80123bc:	200154c8 	.word	0x200154c8
 80123c0:	20000000 	.word	0x20000000
 80123c4:	08010645 	.word	0x08010645
 80123c8:	2000008c 	.word	0x2000008c

080123cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 80123cc:	b570      	push	{r4, r5, r6, lr}
 80123ce:	1208      	asrs	r0, r1, #8
 80123d0:	b29e      	uxth	r6, r3
 80123d2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80123d6:	1213      	asrs	r3, r2, #8
 80123d8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80123dc:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80123e0:	fb13 f305 	smulbb	r3, r3, r5
 80123e4:	fb10 f006 	smulbb	r0, r0, r6
 80123e8:	4418      	add	r0, r3
 80123ea:	10cc      	asrs	r4, r1, #3
 80123ec:	10d3      	asrs	r3, r2, #3
 80123ee:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80123f2:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80123f6:	fb13 f305 	smulbb	r3, r3, r5
 80123fa:	fb14 f406 	smulbb	r4, r4, r6
 80123fe:	00c9      	lsls	r1, r1, #3
 8012400:	00d2      	lsls	r2, r2, #3
 8012402:	441c      	add	r4, r3
 8012404:	b2d2      	uxtb	r2, r2
 8012406:	b2cb      	uxtb	r3, r1
 8012408:	fb12 f205 	smulbb	r2, r2, r5
 801240c:	b280      	uxth	r0, r0
 801240e:	fb13 f306 	smulbb	r3, r3, r6
 8012412:	4413      	add	r3, r2
 8012414:	1c42      	adds	r2, r0, #1
 8012416:	b29b      	uxth	r3, r3
 8012418:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801241c:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8012420:	1c58      	adds	r0, r3, #1
 8012422:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012426:	b2a4      	uxth	r4, r4
 8012428:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801242c:	4310      	orrs	r0, r2
 801242e:	1c62      	adds	r2, r4, #1
 8012430:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8012434:	0964      	lsrs	r4, r4, #5
 8012436:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801243a:	4320      	orrs	r0, r4
 801243c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012440 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	b08f      	sub	sp, #60	@ 0x3c
 8012446:	461c      	mov	r4, r3
 8012448:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 801244c:	9004      	str	r0, [sp, #16]
 801244e:	460d      	mov	r5, r1
 8012450:	4616      	mov	r6, r2
 8012452:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012454:	2f00      	cmp	r7, #0
 8012456:	f000 80f6 	beq.w	8012646 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801245a:	6820      	ldr	r0, [r4, #0]
 801245c:	6861      	ldr	r1, [r4, #4]
 801245e:	aa0a      	add	r2, sp, #40	@ 0x28
 8012460:	c203      	stmia	r2!, {r0, r1}
 8012462:	6818      	ldr	r0, [r3, #0]
 8012464:	6859      	ldr	r1, [r3, #4]
 8012466:	aa0c      	add	r2, sp, #48	@ 0x30
 8012468:	c203      	stmia	r2!, {r0, r1}
 801246a:	a80a      	add	r0, sp, #40	@ 0x28
 801246c:	f7fa fbe4 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012470:	4621      	mov	r1, r4
 8012472:	a80c      	add	r0, sp, #48	@ 0x30
 8012474:	f7fa fc08 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012478:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801247c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012480:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8012484:	f002 0301 	and.w	r3, r2, #1
 8012488:	9306      	str	r3, [sp, #24]
 801248a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801248e:	f003 0101 	and.w	r1, r3, #1
 8012492:	9105      	str	r1, [sp, #20]
 8012494:	9805      	ldr	r0, [sp, #20]
 8012496:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801249a:	4403      	add	r3, r0
 801249c:	fb01 2303 	mla	r3, r1, r3, r2
 80124a0:	f04f 0802 	mov.w	r8, #2
 80124a4:	fb93 f3f8 	sdiv	r3, r3, r8
 80124a8:	441d      	add	r5, r3
 80124aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80124ae:	441a      	add	r2, r3
 80124b0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80124b4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80124b8:	4419      	add	r1, r3
 80124ba:	4b64      	ldr	r3, [pc, #400]	@ (801264c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80124bc:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80124c0:	6818      	ldr	r0, [r3, #0]
 80124c2:	6803      	ldr	r3, [r0, #0]
 80124c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124c6:	4798      	blx	r3
 80124c8:	4a61      	ldr	r2, [pc, #388]	@ (8012650 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 80124ca:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80124ce:	8813      	ldrh	r3, [r2, #0]
 80124d0:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 80124d4:	2fff      	cmp	r7, #255	@ 0xff
 80124d6:	fb03 a404 	mla	r4, r3, r4, sl
 80124da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80124de:	f106 0604 	add.w	r6, r6, #4
 80124e2:	4611      	mov	r1, r2
 80124e4:	fb03 fb0b 	mul.w	fp, r3, fp
 80124e8:	d06b      	beq.n	80125c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 80124ea:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 80124ee:	9303      	str	r3, [sp, #12]
 80124f0:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 80124f4:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80124f8:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80124fc:	9b07      	ldr	r3, [sp, #28]
 80124fe:	42a3      	cmp	r3, r4
 8012500:	f240 809c 	bls.w	801263c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8012504:	9b06      	ldr	r3, [sp, #24]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d039      	beq.n	801257e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801250a:	782b      	ldrb	r3, [r5, #0]
 801250c:	8822      	ldrh	r2, [r4, #0]
 801250e:	9804      	ldr	r0, [sp, #16]
 8012510:	f003 030f 	and.w	r3, r3, #15
 8012514:	f105 0801 	add.w	r8, r5, #1
 8012518:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801251c:	9b03      	ldr	r3, [sp, #12]
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	463b      	mov	r3, r7
 8012522:	f7ff ff53 	bl	80123cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012526:	f824 0b02 	strh.w	r0, [r4], #2
 801252a:	f109 3bff 	add.w	fp, r9, #4294967295
 801252e:	f1bb 0f01 	cmp.w	fp, #1
 8012532:	46a2      	mov	sl, r4
 8012534:	f104 0404 	add.w	r4, r4, #4
 8012538:	dd24      	ble.n	8012584 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 801253a:	f898 3000 	ldrb.w	r3, [r8]
 801253e:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8012542:	9804      	ldr	r0, [sp, #16]
 8012544:	091b      	lsrs	r3, r3, #4
 8012546:	f1ab 0b02 	sub.w	fp, fp, #2
 801254a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801254e:	9b03      	ldr	r3, [sp, #12]
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	463b      	mov	r3, r7
 8012554:	f7ff ff3a 	bl	80123cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012558:	f824 0c04 	strh.w	r0, [r4, #-4]
 801255c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012560:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012564:	9804      	ldr	r0, [sp, #16]
 8012566:	f003 030f 	and.w	r3, r3, #15
 801256a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801256e:	9b03      	ldr	r3, [sp, #12]
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	463b      	mov	r3, r7
 8012574:	f7ff ff2a 	bl	80123cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012578:	f824 0c02 	strh.w	r0, [r4, #-2]
 801257c:	e7d7      	b.n	801252e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 801257e:	46a8      	mov	r8, r5
 8012580:	46cb      	mov	fp, r9
 8012582:	e7d4      	b.n	801252e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012584:	d10e      	bne.n	80125a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8012586:	f898 3000 	ldrb.w	r3, [r8]
 801258a:	f8ba 2000 	ldrh.w	r2, [sl]
 801258e:	9804      	ldr	r0, [sp, #16]
 8012590:	091b      	lsrs	r3, r3, #4
 8012592:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012596:	9b03      	ldr	r3, [sp, #12]
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	463b      	mov	r3, r7
 801259c:	f7ff ff16 	bl	80123cc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80125a0:	f82a 0b02 	strh.w	r0, [sl], #2
 80125a4:	9b08      	ldr	r3, [sp, #32]
 80125a6:	9a05      	ldr	r2, [sp, #20]
 80125a8:	881c      	ldrh	r4, [r3, #0]
 80125aa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80125ae:	eba4 0409 	sub.w	r4, r4, r9
 80125b2:	4413      	add	r3, r2
 80125b4:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 80125b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80125ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80125be:	441d      	add	r5, r3
 80125c0:	e79c      	b.n	80124fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 80125c2:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 80125c6:	45a3      	cmp	fp, r4
 80125c8:	d938      	bls.n	801263c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 80125ca:	9b06      	ldr	r3, [sp, #24]
 80125cc:	b1f3      	cbz	r3, 801260c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 80125ce:	782b      	ldrb	r3, [r5, #0]
 80125d0:	f003 030f 	and.w	r3, r3, #15
 80125d4:	1c6a      	adds	r2, r5, #1
 80125d6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80125da:	8023      	strh	r3, [r4, #0]
 80125dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80125e0:	3402      	adds	r4, #2
 80125e2:	2801      	cmp	r0, #1
 80125e4:	4623      	mov	r3, r4
 80125e6:	f104 0404 	add.w	r4, r4, #4
 80125ea:	dd12      	ble.n	8012612 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 80125ec:	7813      	ldrb	r3, [r2, #0]
 80125ee:	091b      	lsrs	r3, r3, #4
 80125f0:	3802      	subs	r0, #2
 80125f2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80125f6:	f824 3c04 	strh.w	r3, [r4, #-4]
 80125fa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80125fe:	f003 030f 	and.w	r3, r3, #15
 8012602:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012606:	f824 3c02 	strh.w	r3, [r4, #-2]
 801260a:	e7ea      	b.n	80125e2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 801260c:	462a      	mov	r2, r5
 801260e:	4648      	mov	r0, r9
 8012610:	e7e7      	b.n	80125e2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8012612:	d106      	bne.n	8012622 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8012614:	7812      	ldrb	r2, [r2, #0]
 8012616:	0912      	lsrs	r2, r2, #4
 8012618:	3302      	adds	r3, #2
 801261a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801261e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012622:	880c      	ldrh	r4, [r1, #0]
 8012624:	9a05      	ldr	r2, [sp, #20]
 8012626:	eba4 0409 	sub.w	r4, r4, r9
 801262a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801262e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012632:	4413      	add	r3, r2
 8012634:	fb93 f3f8 	sdiv	r3, r3, r8
 8012638:	441d      	add	r5, r3
 801263a:	e7c4      	b.n	80125c6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 801263c:	4b03      	ldr	r3, [pc, #12]	@ (801264c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 801263e:	6818      	ldr	r0, [r3, #0]
 8012640:	6803      	ldr	r3, [r0, #0]
 8012642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012644:	4798      	blx	r3
 8012646:	b00f      	add	sp, #60	@ 0x3c
 8012648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801264c:	2001543c 	.word	0x2001543c
 8012650:	20015436 	.word	0x20015436

08012654 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8012654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012656:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801265a:	2dff      	cmp	r5, #255	@ 0xff
 801265c:	ea4f 2711 	mov.w	r7, r1, lsr #8
 8012660:	d10c      	bne.n	801267c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012662:	2bff      	cmp	r3, #255	@ 0xff
 8012664:	d10a      	bne.n	801267c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012666:	4b25      	ldr	r3, [pc, #148]	@ (80126fc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8012668:	0948      	lsrs	r0, r1, #5
 801266a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801266e:	403b      	ands	r3, r7
 8012670:	4318      	orrs	r0, r3
 8012672:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8012676:	4308      	orrs	r0, r1
 8012678:	b280      	uxth	r0, r0
 801267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801267c:	fb15 f503 	smulbb	r5, r5, r3
 8012680:	b2ab      	uxth	r3, r5
 8012682:	1c5d      	adds	r5, r3, #1
 8012684:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8012688:	1214      	asrs	r4, r2, #8
 801268a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801268e:	fa1f fc85 	uxth.w	ip, r5
 8012692:	10d6      	asrs	r6, r2, #3
 8012694:	00d0      	lsls	r0, r2, #3
 8012696:	43ed      	mvns	r5, r5
 8012698:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801269c:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80126a0:	b2eb      	uxtb	r3, r5
 80126a2:	b2c0      	uxtb	r0, r0
 80126a4:	fb12 f20c 	smulbb	r2, r2, ip
 80126a8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80126ac:	fb04 2403 	mla	r4, r4, r3, r2
 80126b0:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 80126b4:	b2c8      	uxtb	r0, r1
 80126b6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80126ba:	b2fd      	uxtb	r5, r7
 80126bc:	fb10 f00c 	smulbb	r0, r0, ip
 80126c0:	b2a4      	uxth	r4, r4
 80126c2:	fb02 0003 	mla	r0, r2, r3, r0
 80126c6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80126ca:	fb15 f50c 	smulbb	r5, r5, ip
 80126ce:	fb06 5503 	mla	r5, r6, r3, r5
 80126d2:	b283      	uxth	r3, r0
 80126d4:	1c60      	adds	r0, r4, #1
 80126d6:	b2ad      	uxth	r5, r5
 80126d8:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80126dc:	1c58      	adds	r0, r3, #1
 80126de:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80126e2:	1c6b      	adds	r3, r5, #1
 80126e4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80126e8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80126ec:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80126f0:	096d      	lsrs	r5, r5, #5
 80126f2:	4320      	orrs	r0, r4
 80126f4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80126f8:	4328      	orrs	r0, r5
 80126fa:	e7be      	b.n	801267a <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80126fc:	00fff800 	.word	0x00fff800

08012700 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8012700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012704:	461c      	mov	r4, r3
 8012706:	b08d      	sub	sp, #52	@ 0x34
 8012708:	460d      	mov	r5, r1
 801270a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801270c:	6861      	ldr	r1, [r4, #4]
 801270e:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8012712:	4680      	mov	r8, r0
 8012714:	6820      	ldr	r0, [r4, #0]
 8012716:	4616      	mov	r6, r2
 8012718:	aa08      	add	r2, sp, #32
 801271a:	c203      	stmia	r2!, {r0, r1}
 801271c:	6818      	ldr	r0, [r3, #0]
 801271e:	6859      	ldr	r1, [r3, #4]
 8012720:	aa0a      	add	r2, sp, #40	@ 0x28
 8012722:	c203      	stmia	r2!, {r0, r1}
 8012724:	a808      	add	r0, sp, #32
 8012726:	f7fa fa87 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801272a:	4621      	mov	r1, r4
 801272c:	a80a      	add	r0, sp, #40	@ 0x28
 801272e:	f7fa faab 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012732:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8012736:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 801273a:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 801273e:	f002 0301 	and.w	r3, r2, #1
 8012742:	9303      	str	r3, [sp, #12]
 8012744:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012748:	f003 0101 	and.w	r1, r3, #1
 801274c:	9102      	str	r1, [sp, #8]
 801274e:	9802      	ldr	r0, [sp, #8]
 8012750:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012754:	4403      	add	r3, r0
 8012756:	fb01 2303 	mla	r3, r1, r3, r2
 801275a:	f04f 0a02 	mov.w	sl, #2
 801275e:	fb93 f3fa 	sdiv	r3, r3, sl
 8012762:	441d      	add	r5, r3
 8012764:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012768:	441a      	add	r2, r3
 801276a:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801276e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8012772:	4a3f      	ldr	r2, [pc, #252]	@ (8012870 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8012774:	9205      	str	r2, [sp, #20]
 8012776:	4419      	add	r1, r3
 8012778:	6810      	ldr	r0, [r2, #0]
 801277a:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 801277e:	6803      	ldr	r3, [r0, #0]
 8012780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012782:	4798      	blx	r3
 8012784:	4b3b      	ldr	r3, [pc, #236]	@ (8012874 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8012786:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 801278a:	8819      	ldrh	r1, [r3, #0]
 801278c:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8012790:	fb01 c404 	mla	r4, r1, r4, ip
 8012794:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012798:	434f      	muls	r7, r1
 801279a:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 801279e:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 80127a2:	3604      	adds	r6, #4
 80127a4:	9204      	str	r2, [sp, #16]
 80127a6:	9b04      	ldr	r3, [sp, #16]
 80127a8:	429c      	cmp	r4, r3
 80127aa:	d258      	bcs.n	801285e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 80127ac:	9b03      	ldr	r3, [sp, #12]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d034      	beq.n	801281c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80127b2:	782b      	ldrb	r3, [r5, #0]
 80127b4:	f003 030f 	and.w	r3, r3, #15
 80127b8:	1c6f      	adds	r7, r5, #1
 80127ba:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80127be:	0e0b      	lsrs	r3, r1, #24
 80127c0:	d006      	beq.n	80127d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 80127c2:	8822      	ldrh	r2, [r4, #0]
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	4640      	mov	r0, r8
 80127c8:	464b      	mov	r3, r9
 80127ca:	f7ff ff43 	bl	8012654 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80127ce:	8020      	strh	r0, [r4, #0]
 80127d0:	3402      	adds	r4, #2
 80127d2:	f10b 3aff 	add.w	sl, fp, #4294967295
 80127d6:	f1ba 0f01 	cmp.w	sl, #1
 80127da:	dd22      	ble.n	8012822 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80127dc:	783b      	ldrb	r3, [r7, #0]
 80127de:	091b      	lsrs	r3, r3, #4
 80127e0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80127e4:	0e0b      	lsrs	r3, r1, #24
 80127e6:	d006      	beq.n	80127f6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 80127e8:	8822      	ldrh	r2, [r4, #0]
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	4640      	mov	r0, r8
 80127ee:	464b      	mov	r3, r9
 80127f0:	f7ff ff30 	bl	8012654 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80127f4:	8020      	strh	r0, [r4, #0]
 80127f6:	f817 3b01 	ldrb.w	r3, [r7], #1
 80127fa:	f003 030f 	and.w	r3, r3, #15
 80127fe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012802:	0e0b      	lsrs	r3, r1, #24
 8012804:	d006      	beq.n	8012814 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8012806:	8862      	ldrh	r2, [r4, #2]
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	4640      	mov	r0, r8
 801280c:	464b      	mov	r3, r9
 801280e:	f7ff ff21 	bl	8012654 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012812:	8060      	strh	r0, [r4, #2]
 8012814:	3404      	adds	r4, #4
 8012816:	f1aa 0a02 	sub.w	sl, sl, #2
 801281a:	e7dc      	b.n	80127d6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 801281c:	462f      	mov	r7, r5
 801281e:	46da      	mov	sl, fp
 8012820:	e7d9      	b.n	80127d6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8012822:	d10d      	bne.n	8012840 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8012824:	783b      	ldrb	r3, [r7, #0]
 8012826:	091b      	lsrs	r3, r3, #4
 8012828:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801282c:	0e0b      	lsrs	r3, r1, #24
 801282e:	d006      	beq.n	801283e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8012830:	8822      	ldrh	r2, [r4, #0]
 8012832:	9300      	str	r3, [sp, #0]
 8012834:	4640      	mov	r0, r8
 8012836:	464b      	mov	r3, r9
 8012838:	f7ff ff0c 	bl	8012654 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801283c:	8020      	strh	r0, [r4, #0]
 801283e:	3402      	adds	r4, #2
 8012840:	9b06      	ldr	r3, [sp, #24]
 8012842:	9a02      	ldr	r2, [sp, #8]
 8012844:	881b      	ldrh	r3, [r3, #0]
 8012846:	eba3 030b 	sub.w	r3, r3, fp
 801284a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801284e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012852:	4413      	add	r3, r2
 8012854:	9a07      	ldr	r2, [sp, #28]
 8012856:	fb93 f3f2 	sdiv	r3, r3, r2
 801285a:	441d      	add	r5, r3
 801285c:	e7a3      	b.n	80127a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 801285e:	9b05      	ldr	r3, [sp, #20]
 8012860:	6818      	ldr	r0, [r3, #0]
 8012862:	6803      	ldr	r3, [r0, #0]
 8012864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012866:	4798      	blx	r3
 8012868:	b00d      	add	sp, #52	@ 0x34
 801286a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286e:	bf00      	nop
 8012870:	2001543c 	.word	0x2001543c
 8012874:	20015436 	.word	0x20015436

08012878 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8012878:	b570      	push	{r4, r5, r6, lr}
 801287a:	1214      	asrs	r4, r2, #8
 801287c:	788d      	ldrb	r5, [r1, #2]
 801287e:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8012882:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012886:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801288a:	fb15 f503 	smulbb	r5, r5, r3
 801288e:	fb04 5506 	mla	r5, r4, r6, r5
 8012892:	10d0      	asrs	r0, r2, #3
 8012894:	784c      	ldrb	r4, [r1, #1]
 8012896:	7809      	ldrb	r1, [r1, #0]
 8012898:	00d2      	lsls	r2, r2, #3
 801289a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801289e:	b2d2      	uxtb	r2, r2
 80128a0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80128a4:	fb14 f403 	smulbb	r4, r4, r3
 80128a8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80128ac:	fb11 f303 	smulbb	r3, r1, r3
 80128b0:	fb00 4406 	mla	r4, r0, r6, r4
 80128b4:	fb02 3306 	mla	r3, r2, r6, r3
 80128b8:	b2ad      	uxth	r5, r5
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	b2a4      	uxth	r4, r4
 80128be:	1c68      	adds	r0, r5, #1
 80128c0:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 80128c4:	1c62      	adds	r2, r4, #1
 80128c6:	1c58      	adds	r0, r3, #1
 80128c8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80128cc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80128d0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80128d4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80128d8:	0964      	lsrs	r4, r4, #5
 80128da:	4328      	orrs	r0, r5
 80128dc:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80128e0:	4320      	orrs	r0, r4
 80128e2:	bd70      	pop	{r4, r5, r6, pc}

080128e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80128e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e8:	b08f      	sub	sp, #60	@ 0x3c
 80128ea:	461c      	mov	r4, r3
 80128ec:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80128f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80128f2:	4682      	mov	sl, r0
 80128f4:	460e      	mov	r6, r1
 80128f6:	4615      	mov	r5, r2
 80128f8:	2f00      	cmp	r7, #0
 80128fa:	f000 8142 	beq.w	8012b82 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 80128fe:	6820      	ldr	r0, [r4, #0]
 8012900:	6861      	ldr	r1, [r4, #4]
 8012902:	aa0a      	add	r2, sp, #40	@ 0x28
 8012904:	c203      	stmia	r2!, {r0, r1}
 8012906:	6818      	ldr	r0, [r3, #0]
 8012908:	6859      	ldr	r1, [r3, #4]
 801290a:	aa0c      	add	r2, sp, #48	@ 0x30
 801290c:	c203      	stmia	r2!, {r0, r1}
 801290e:	a80a      	add	r0, sp, #40	@ 0x28
 8012910:	f7fa f992 	bl	800cc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012914:	4621      	mov	r1, r4
 8012916:	a80c      	add	r0, sp, #48	@ 0x30
 8012918:	f7fa f9b6 	bl	800cc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801291c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8012920:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012924:	f002 0301 	and.w	r3, r2, #1
 8012928:	9306      	str	r3, [sp, #24]
 801292a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801292e:	f003 0101 	and.w	r1, r3, #1
 8012932:	9105      	str	r1, [sp, #20]
 8012934:	9805      	ldr	r0, [sp, #20]
 8012936:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801293a:	4403      	add	r3, r0
 801293c:	fb01 2303 	mla	r3, r1, r3, r2
 8012940:	f04f 0802 	mov.w	r8, #2
 8012944:	fb93 f3f8 	sdiv	r3, r3, r8
 8012948:	441e      	add	r6, r3
 801294a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801294e:	441a      	add	r2, r3
 8012950:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8012954:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012958:	4419      	add	r1, r3
 801295a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801295e:	9303      	str	r3, [sp, #12]
 8012960:	4b89      	ldr	r3, [pc, #548]	@ (8012b88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8012962:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8012966:	6818      	ldr	r0, [r3, #0]
 8012968:	6803      	ldr	r3, [r0, #0]
 801296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801296c:	4798      	blx	r3
 801296e:	4a87      	ldr	r2, [pc, #540]	@ (8012b8c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8012970:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8012974:	8813      	ldrh	r3, [r2, #0]
 8012976:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 801297a:	2fff      	cmp	r7, #255	@ 0xff
 801297c:	fb03 9404 	mla	r4, r3, r4, r9
 8012980:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012984:	f105 0504 	add.w	r5, r5, #4
 8012988:	4694      	mov	ip, r2
 801298a:	fb03 f30b 	mul.w	r3, r3, fp
 801298e:	d071      	beq.n	8012a74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8012990:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012994:	43f9      	mvns	r1, r7
 8012996:	e9cd 3207 	strd	r3, r2, [sp, #28]
 801299a:	b2c9      	uxtb	r1, r1
 801299c:	9104      	str	r1, [sp, #16]
 801299e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80129a2:	9b07      	ldr	r3, [sp, #28]
 80129a4:	42a3      	cmp	r3, r4
 80129a6:	f240 80e7 	bls.w	8012b78 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 80129aa:	9b06      	ldr	r3, [sp, #24]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d03d      	beq.n	8012a2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 80129b0:	7831      	ldrb	r1, [r6, #0]
 80129b2:	9b04      	ldr	r3, [sp, #16]
 80129b4:	8822      	ldrh	r2, [r4, #0]
 80129b6:	9300      	str	r3, [sp, #0]
 80129b8:	f001 010f 	and.w	r1, r1, #15
 80129bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80129c0:	463b      	mov	r3, r7
 80129c2:	4429      	add	r1, r5
 80129c4:	4650      	mov	r0, sl
 80129c6:	f7ff ff57 	bl	8012878 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80129ca:	9b03      	ldr	r3, [sp, #12]
 80129cc:	f824 0b02 	strh.w	r0, [r4], #2
 80129d0:	f106 0801 	add.w	r8, r6, #1
 80129d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80129d8:	f1bb 0f01 	cmp.w	fp, #1
 80129dc:	46a1      	mov	r9, r4
 80129de:	f104 0404 	add.w	r4, r4, #4
 80129e2:	dd27      	ble.n	8012a34 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 80129e4:	f898 1000 	ldrb.w	r1, [r8]
 80129e8:	9b04      	ldr	r3, [sp, #16]
 80129ea:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	0909      	lsrs	r1, r1, #4
 80129f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80129f6:	463b      	mov	r3, r7
 80129f8:	4429      	add	r1, r5
 80129fa:	4650      	mov	r0, sl
 80129fc:	f7ff ff3c 	bl	8012878 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012a00:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012a04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012a08:	9b04      	ldr	r3, [sp, #16]
 8012a0a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012a0e:	9300      	str	r3, [sp, #0]
 8012a10:	f001 010f 	and.w	r1, r1, #15
 8012a14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012a18:	463b      	mov	r3, r7
 8012a1a:	4429      	add	r1, r5
 8012a1c:	4650      	mov	r0, sl
 8012a1e:	f7ff ff2b 	bl	8012878 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012a22:	f1ab 0b02 	sub.w	fp, fp, #2
 8012a26:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012a2a:	e7d5      	b.n	80129d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012a2c:	46b0      	mov	r8, r6
 8012a2e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012a32:	e7d1      	b.n	80129d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012a34:	d10f      	bne.n	8012a56 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8012a36:	f898 1000 	ldrb.w	r1, [r8]
 8012a3a:	9b04      	ldr	r3, [sp, #16]
 8012a3c:	f8b9 2000 	ldrh.w	r2, [r9]
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	0909      	lsrs	r1, r1, #4
 8012a44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012a48:	463b      	mov	r3, r7
 8012a4a:	4429      	add	r1, r5
 8012a4c:	4650      	mov	r0, sl
 8012a4e:	f7ff ff13 	bl	8012878 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012a52:	f829 0b02 	strh.w	r0, [r9], #2
 8012a56:	9b08      	ldr	r3, [sp, #32]
 8012a58:	9a05      	ldr	r2, [sp, #20]
 8012a5a:	881c      	ldrh	r4, [r3, #0]
 8012a5c:	9b03      	ldr	r3, [sp, #12]
 8012a5e:	1ae4      	subs	r4, r4, r3
 8012a60:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012a64:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8012a68:	4413      	add	r3, r2
 8012a6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a70:	441e      	add	r6, r3
 8012a72:	e796      	b.n	80129a2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8012a74:	4f46      	ldr	r7, [pc, #280]	@ (8012b90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8012a76:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012a7a:	42a3      	cmp	r3, r4
 8012a7c:	d97c      	bls.n	8012b78 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8012a7e:	9a06      	ldr	r2, [sp, #24]
 8012a80:	2a00      	cmp	r2, #0
 8012a82:	d054      	beq.n	8012b2e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8012a84:	7830      	ldrb	r0, [r6, #0]
 8012a86:	f000 000f 	and.w	r0, r0, #15
 8012a8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012a8e:	eb05 0e00 	add.w	lr, r5, r0
 8012a92:	5c28      	ldrb	r0, [r5, r0]
 8012a94:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8012a98:	f89e e001 	ldrb.w	lr, [lr, #1]
 8012a9c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012aa0:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8012aa4:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8012aa8:	ea42 020e 	orr.w	r2, r2, lr
 8012aac:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8012ab0:	f824 2b02 	strh.w	r2, [r4], #2
 8012ab4:	9a03      	ldr	r2, [sp, #12]
 8012ab6:	1c71      	adds	r1, r6, #1
 8012ab8:	f102 3eff 	add.w	lr, r2, #4294967295
 8012abc:	f1be 0f01 	cmp.w	lr, #1
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f104 0404 	add.w	r4, r4, #4
 8012ac6:	dd36      	ble.n	8012b36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8012ac8:	7808      	ldrb	r0, [r1, #0]
 8012aca:	0900      	lsrs	r0, r0, #4
 8012acc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012ad0:	eb05 0a00 	add.w	sl, r5, r0
 8012ad4:	f1ae 0e02 	sub.w	lr, lr, #2
 8012ad8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8012adc:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012ae0:	00d2      	lsls	r2, r2, #3
 8012ae2:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8012ae6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012aea:	ea49 0202 	orr.w	r2, r9, r2
 8012aee:	f815 9000 	ldrb.w	r9, [r5, r0]
 8012af2:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8012af6:	f824 2c04 	strh.w	r2, [r4, #-4]
 8012afa:	f811 0b01 	ldrb.w	r0, [r1], #1
 8012afe:	f000 000f 	and.w	r0, r0, #15
 8012b02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012b06:	eb05 0a00 	add.w	sl, r5, r0
 8012b0a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8012b0e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012b12:	00d2      	lsls	r2, r2, #3
 8012b14:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8012b18:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012b1c:	ea49 0202 	orr.w	r2, r9, r2
 8012b20:	f815 9000 	ldrb.w	r9, [r5, r0]
 8012b24:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8012b28:	f824 2c02 	strh.w	r2, [r4, #-2]
 8012b2c:	e7c6      	b.n	8012abc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8012b2e:	4631      	mov	r1, r6
 8012b30:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8012b34:	e7c2      	b.n	8012abc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8012b36:	d111      	bne.n	8012b5c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8012b38:	7809      	ldrb	r1, [r1, #0]
 8012b3a:	0909      	lsrs	r1, r1, #4
 8012b3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012b40:	186c      	adds	r4, r5, r1
 8012b42:	5c69      	ldrb	r1, [r5, r1]
 8012b44:	78a2      	ldrb	r2, [r4, #2]
 8012b46:	7864      	ldrb	r4, [r4, #1]
 8012b48:	00e4      	lsls	r4, r4, #3
 8012b4a:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8012b4e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8012b52:	4322      	orrs	r2, r4
 8012b54:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8012b58:	f820 2b02 	strh.w	r2, [r0], #2
 8012b5c:	9a03      	ldr	r2, [sp, #12]
 8012b5e:	f8bc 4000 	ldrh.w	r4, [ip]
 8012b62:	9905      	ldr	r1, [sp, #20]
 8012b64:	1aa4      	subs	r4, r4, r2
 8012b66:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8012b6a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012b6e:	440a      	add	r2, r1
 8012b70:	fb92 f2f8 	sdiv	r2, r2, r8
 8012b74:	4416      	add	r6, r2
 8012b76:	e780      	b.n	8012a7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8012b78:	4b03      	ldr	r3, [pc, #12]	@ (8012b88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8012b7a:	6818      	ldr	r0, [r3, #0]
 8012b7c:	6803      	ldr	r3, [r0, #0]
 8012b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b80:	4798      	blx	r3
 8012b82:	b00f      	add	sp, #60	@ 0x3c
 8012b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b88:	2001543c 	.word	0x2001543c
 8012b8c:	20015436 	.word	0x20015436
 8012b90:	fffff800 	.word	0xfffff800

08012b94 <CRC_Lock>:
 8012b94:	b530      	push	{r4, r5, lr}
 8012b96:	4a2d      	ldr	r2, [pc, #180]	@ (8012c4c <CRC_Lock+0xb8>)
 8012b98:	6813      	ldr	r3, [r2, #0]
 8012b9a:	f023 0301 	bic.w	r3, r3, #1
 8012b9e:	6013      	str	r3, [r2, #0]
 8012ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8012c50 <CRC_Lock+0xbc>)
 8012ba2:	681c      	ldr	r4, [r3, #0]
 8012ba4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8012ba8:	4014      	ands	r4, r2
 8012baa:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8012bae:	42ac      	cmp	r4, r5
 8012bb0:	d005      	beq.n	8012bbe <CRC_Lock+0x2a>
 8012bb2:	681c      	ldr	r4, [r3, #0]
 8012bb4:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8012bb8:	4014      	ands	r4, r2
 8012bba:	42ac      	cmp	r4, r5
 8012bbc:	d125      	bne.n	8012c0a <CRC_Lock+0x76>
 8012bbe:	4b25      	ldr	r3, [pc, #148]	@ (8012c54 <CRC_Lock+0xc0>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d139      	bne.n	8012c3a <CRC_Lock+0xa6>
 8012bc6:	4b24      	ldr	r3, [pc, #144]	@ (8012c58 <CRC_Lock+0xc4>)
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8012bce:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8012bd2:	d00d      	beq.n	8012bf0 <CRC_Lock+0x5c>
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	f240 4483 	movw	r4, #1155	@ 0x483
 8012bda:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8012bde:	42a2      	cmp	r2, r4
 8012be0:	d006      	beq.n	8012bf0 <CRC_Lock+0x5c>
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	f240 4285 	movw	r2, #1157	@ 0x485
 8012be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012bec:	4293      	cmp	r3, r2
 8012bee:	d124      	bne.n	8012c3a <CRC_Lock+0xa6>
 8012bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8012c5c <CRC_Lock+0xc8>)
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	601a      	str	r2, [r3, #0]
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	2a00      	cmp	r2, #0
 8012bfa:	d1fc      	bne.n	8012bf6 <CRC_Lock+0x62>
 8012bfc:	4b18      	ldr	r3, [pc, #96]	@ (8012c60 <CRC_Lock+0xcc>)
 8012bfe:	6018      	str	r0, [r3, #0]
 8012c00:	6818      	ldr	r0, [r3, #0]
 8012c02:	1a43      	subs	r3, r0, r1
 8012c04:	4258      	negs	r0, r3
 8012c06:	4158      	adcs	r0, r3
 8012c08:	e00e      	b.n	8012c28 <CRC_Lock+0x94>
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4013      	ands	r3, r2
 8012c0e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d111      	bne.n	8012c3a <CRC_Lock+0xa6>
 8012c16:	4b13      	ldr	r3, [pc, #76]	@ (8012c64 <CRC_Lock+0xd0>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	f240 4286 	movw	r2, #1158	@ 0x486
 8012c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012c22:	4293      	cmp	r3, r2
 8012c24:	d001      	beq.n	8012c2a <CRC_Lock+0x96>
 8012c26:	2000      	movs	r0, #0
 8012c28:	bd30      	pop	{r4, r5, pc}
 8012c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8012c68 <CRC_Lock+0xd4>)
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	601a      	str	r2, [r3, #0]
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	2a00      	cmp	r2, #0
 8012c34:	d1fc      	bne.n	8012c30 <CRC_Lock+0x9c>
 8012c36:	4b0d      	ldr	r3, [pc, #52]	@ (8012c6c <CRC_Lock+0xd8>)
 8012c38:	e7e1      	b.n	8012bfe <CRC_Lock+0x6a>
 8012c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c70 <CRC_Lock+0xdc>)
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	601a      	str	r2, [r3, #0]
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	2a00      	cmp	r2, #0
 8012c44:	d1fc      	bne.n	8012c40 <CRC_Lock+0xac>
 8012c46:	4b0b      	ldr	r3, [pc, #44]	@ (8012c74 <CRC_Lock+0xe0>)
 8012c48:	e7d9      	b.n	8012bfe <CRC_Lock+0x6a>
 8012c4a:	bf00      	nop
 8012c4c:	e0002000 	.word	0xe0002000
 8012c50:	e000ed00 	.word	0xe000ed00
 8012c54:	e0042000 	.word	0xe0042000
 8012c58:	5c001000 	.word	0x5c001000
 8012c5c:	58024c08 	.word	0x58024c08
 8012c60:	58024c00 	.word	0x58024c00
 8012c64:	46008ff0 	.word	0x46008ff0
 8012c68:	46024c08 	.word	0x46024c08
 8012c6c:	46024c00 	.word	0x46024c00
 8012c70:	40023008 	.word	0x40023008
 8012c74:	40023000 	.word	0x40023000

08012c78 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8012c78:	6101      	str	r1, [r0, #16]
 8012c7a:	4770      	bx	lr

08012c7c <_ZN8touchgfx8Gestures4tickEv>:
 8012c7c:	7b83      	ldrb	r3, [r0, #14]
 8012c7e:	b14b      	cbz	r3, 8012c94 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8012c80:	8903      	ldrh	r3, [r0, #8]
 8012c82:	3301      	adds	r3, #1
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	2b07      	cmp	r3, #7
 8012c88:	8103      	strh	r3, [r0, #8]
 8012c8a:	bf81      	itttt	hi
 8012c8c:	2300      	movhi	r3, #0
 8012c8e:	8143      	strhhi	r3, [r0, #10]
 8012c90:	8183      	strhhi	r3, [r0, #12]
 8012c92:	7383      	strbhi	r3, [r0, #14]
 8012c94:	4770      	bx	lr
	...

08012c98 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8012c98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012c9c:	4698      	mov	r8, r3
 8012c9e:	8883      	ldrh	r3, [r0, #4]
 8012ca0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012ca4:	eba8 0303 	sub.w	r3, r8, r3
 8012ca8:	b21b      	sxth	r3, r3
 8012caa:	4604      	mov	r4, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	4617      	mov	r7, r2
 8012cb0:	4a18      	ldr	r2, [pc, #96]	@ (8012d14 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8012cb2:	9200      	str	r2, [sp, #0]
 8012cb4:	bfb8      	it	lt
 8012cb6:	425b      	neglt	r3, r3
 8012cb8:	8aa2      	ldrh	r2, [r4, #20]
 8012cba:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8012cbe:	f8ad 800a 	strh.w	r8, [sp, #10]
 8012cc2:	b21b      	sxth	r3, r3
 8012cc4:	460e      	mov	r6, r1
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	88c1      	ldrh	r1, [r0, #6]
 8012cca:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012cce:	f04f 0000 	mov.w	r0, #0
 8012cd2:	f88d 0004 	strb.w	r0, [sp, #4]
 8012cd6:	f8ad 500c 	strh.w	r5, [sp, #12]
 8012cda:	dc07      	bgt.n	8012cec <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8012cdc:	1a69      	subs	r1, r5, r1
 8012cde:	b209      	sxth	r1, r1
 8012ce0:	2900      	cmp	r1, #0
 8012ce2:	bfb8      	it	lt
 8012ce4:	4249      	neglt	r1, r1
 8012ce6:	b209      	sxth	r1, r1
 8012ce8:	428a      	cmp	r2, r1
 8012cea:	da10      	bge.n	8012d0e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8012cec:	6920      	ldr	r0, [r4, #16]
 8012cee:	6803      	ldr	r3, [r0, #0]
 8012cf0:	4669      	mov	r1, sp
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	4798      	blx	r3
 8012cf6:	eba8 0606 	sub.w	r6, r8, r6
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	1bef      	subs	r7, r5, r7
 8012cfe:	2001      	movs	r0, #1
 8012d00:	8123      	strh	r3, [r4, #8]
 8012d02:	8166      	strh	r6, [r4, #10]
 8012d04:	81a7      	strh	r7, [r4, #12]
 8012d06:	f8a4 8004 	strh.w	r8, [r4, #4]
 8012d0a:	80e5      	strh	r5, [r4, #6]
 8012d0c:	73a0      	strb	r0, [r4, #14]
 8012d0e:	b004      	add	sp, #16
 8012d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d14:	08015dac 	.word	0x08015dac

08012d18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8012d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d1a:	461e      	mov	r6, r3
 8012d1c:	1e4b      	subs	r3, r1, #1
 8012d1e:	2b01      	cmp	r3, #1
 8012d20:	b085      	sub	sp, #20
 8012d22:	4604      	mov	r4, r0
 8012d24:	460d      	mov	r5, r1
 8012d26:	4617      	mov	r7, r2
 8012d28:	d84b      	bhi.n	8012dc2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8012d2a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012d2e:	1cd3      	adds	r3, r2, #3
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	2b06      	cmp	r3, #6
 8012d34:	d916      	bls.n	8012d64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8012d36:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8012dd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8012d3a:	f8cd c004 	str.w	ip, [sp, #4]
 8012d3e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012d42:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012d46:	6900      	ldr	r0, [r0, #16]
 8012d48:	f8ad 100c 	strh.w	r1, [sp, #12]
 8012d4c:	f04f 0c00 	mov.w	ip, #0
 8012d50:	f88d c008 	strb.w	ip, [sp, #8]
 8012d54:	f8ad 200a 	strh.w	r2, [sp, #10]
 8012d58:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012d5c:	6803      	ldr	r3, [r0, #0]
 8012d5e:	a901      	add	r1, sp, #4
 8012d60:	689b      	ldr	r3, [r3, #8]
 8012d62:	4798      	blx	r3
 8012d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d68:	1cd3      	adds	r3, r2, #3
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	2b06      	cmp	r3, #6
 8012d6e:	d916      	bls.n	8012d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8012d70:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8012dd8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8012d74:	f8cd c004 	str.w	ip, [sp, #4]
 8012d78:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012d7c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012d80:	6920      	ldr	r0, [r4, #16]
 8012d82:	f8ad 100c 	strh.w	r1, [sp, #12]
 8012d86:	f04f 0c01 	mov.w	ip, #1
 8012d8a:	f88d c008 	strb.w	ip, [sp, #8]
 8012d8e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8012d92:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012d96:	6803      	ldr	r3, [r0, #0]
 8012d98:	a901      	add	r1, sp, #4
 8012d9a:	689b      	ldr	r3, [r3, #8]
 8012d9c:	4798      	blx	r3
 8012d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012dd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8012da0:	9301      	str	r3, [sp, #4]
 8012da2:	6920      	ldr	r0, [r4, #16]
 8012da4:	f88d 5008 	strb.w	r5, [sp, #8]
 8012da8:	2300      	movs	r3, #0
 8012daa:	f8ad 700a 	strh.w	r7, [sp, #10]
 8012dae:	f8ad 600c 	strh.w	r6, [sp, #12]
 8012db2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012db6:	6803      	ldr	r3, [r0, #0]
 8012db8:	a901      	add	r1, sp, #4
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	4798      	blx	r3
 8012dbe:	b005      	add	sp, #20
 8012dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc2:	2900      	cmp	r1, #0
 8012dc4:	d1eb      	bne.n	8012d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8012dc6:	80a2      	strh	r2, [r4, #4]
 8012dc8:	80c6      	strh	r6, [r0, #6]
 8012dca:	60a1      	str	r1, [r4, #8]
 8012dcc:	81a1      	strh	r1, [r4, #12]
 8012dce:	73a1      	strb	r1, [r4, #14]
 8012dd0:	e7e5      	b.n	8012d9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8012dd2:	bf00      	nop
 8012dd4:	08015d98 	.word	0x08015d98
 8012dd8:	08015dc0 	.word	0x08015dc0

08012ddc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8012ddc:	b570      	push	{r4, r5, r6, lr}
 8012dde:	790b      	ldrb	r3, [r1, #4]
 8012de0:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	bf0c      	ite	eq
 8012de8:	2301      	moveq	r3, #1
 8012dea:	2300      	movne	r3, #0
 8012dec:	4604      	mov	r4, r0
 8012dee:	460e      	mov	r6, r1
 8012df0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8012df4:	d109      	bne.n	8012e0a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8012df6:	b14d      	cbz	r5, 8012e0c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8012df8:	7933      	ldrb	r3, [r6, #4]
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d10c      	bne.n	8012e18 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012dfe:	6823      	ldr	r3, [r4, #0]
 8012e00:	4620      	mov	r0, r4
 8012e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e08:	4718      	bx	r3
 8012e0a:	b12d      	cbz	r5, 8012e18 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012e0c:	6823      	ldr	r3, [r4, #0]
 8012e0e:	4620      	mov	r0, r4
 8012e10:	695b      	ldr	r3, [r3, #20]
 8012e12:	4798      	blx	r3
 8012e14:	2d00      	cmp	r5, #0
 8012e16:	d1ef      	bne.n	8012df8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8012e18:	bd70      	pop	{r4, r5, r6, pc}

08012e1a <__aeabi_atexit>:
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	4601      	mov	r1, r0
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f000 b910 	b.w	8013044 <__cxa_atexit>

08012e24 <_ZdlPvj>:
 8012e24:	f000 b812 	b.w	8012e4c <_ZdlPv>

08012e28 <__cxa_guard_acquire>:
 8012e28:	6802      	ldr	r2, [r0, #0]
 8012e2a:	07d2      	lsls	r2, r2, #31
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	d405      	bmi.n	8012e3c <__cxa_guard_acquire+0x14>
 8012e30:	7842      	ldrb	r2, [r0, #1]
 8012e32:	b102      	cbz	r2, 8012e36 <__cxa_guard_acquire+0xe>
 8012e34:	deff      	udf	#255	@ 0xff
 8012e36:	2001      	movs	r0, #1
 8012e38:	7058      	strb	r0, [r3, #1]
 8012e3a:	4770      	bx	lr
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	4770      	bx	lr

08012e40 <__cxa_guard_release>:
 8012e40:	2301      	movs	r3, #1
 8012e42:	6003      	str	r3, [r0, #0]
 8012e44:	4770      	bx	lr

08012e46 <__cxa_pure_virtual>:
 8012e46:	b508      	push	{r3, lr}
 8012e48:	f000 f80e 	bl	8012e68 <_ZSt9terminatev>

08012e4c <_ZdlPv>:
 8012e4c:	f000 b844 	b.w	8012ed8 <free>

08012e50 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012e50:	b508      	push	{r3, lr}
 8012e52:	4780      	blx	r0
 8012e54:	f000 f80d 	bl	8012e72 <abort>

08012e58 <_ZSt13get_terminatev>:
 8012e58:	4b02      	ldr	r3, [pc, #8]	@ (8012e64 <_ZSt13get_terminatev+0xc>)
 8012e5a:	6818      	ldr	r0, [r3, #0]
 8012e5c:	f3bf 8f5b 	dmb	ish
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop
 8012e64:	20000090 	.word	0x20000090

08012e68 <_ZSt9terminatev>:
 8012e68:	b508      	push	{r3, lr}
 8012e6a:	f7ff fff5 	bl	8012e58 <_ZSt13get_terminatev>
 8012e6e:	f7ff ffef 	bl	8012e50 <_ZN10__cxxabiv111__terminateEPFvvE>

08012e72 <abort>:
 8012e72:	b508      	push	{r3, lr}
 8012e74:	2006      	movs	r0, #6
 8012e76:	f000 fa3b 	bl	80132f0 <raise>
 8012e7a:	2001      	movs	r0, #1
 8012e7c:	f7ee fd62 	bl	8001944 <_exit>

08012e80 <__assert_func>:
 8012e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e82:	4614      	mov	r4, r2
 8012e84:	461a      	mov	r2, r3
 8012e86:	4b09      	ldr	r3, [pc, #36]	@ (8012eac <__assert_func+0x2c>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4605      	mov	r5, r0
 8012e8c:	68d8      	ldr	r0, [r3, #12]
 8012e8e:	b14c      	cbz	r4, 8012ea4 <__assert_func+0x24>
 8012e90:	4b07      	ldr	r3, [pc, #28]	@ (8012eb0 <__assert_func+0x30>)
 8012e92:	9100      	str	r1, [sp, #0]
 8012e94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e98:	4906      	ldr	r1, [pc, #24]	@ (8012eb4 <__assert_func+0x34>)
 8012e9a:	462b      	mov	r3, r5
 8012e9c:	f000 f984 	bl	80131a8 <fiprintf>
 8012ea0:	f7ff ffe7 	bl	8012e72 <abort>
 8012ea4:	4b04      	ldr	r3, [pc, #16]	@ (8012eb8 <__assert_func+0x38>)
 8012ea6:	461c      	mov	r4, r3
 8012ea8:	e7f3      	b.n	8012e92 <__assert_func+0x12>
 8012eaa:	bf00      	nop
 8012eac:	200000a0 	.word	0x200000a0
 8012eb0:	08014ce2 	.word	0x08014ce2
 8012eb4:	08014cef 	.word	0x08014cef
 8012eb8:	08014d1d 	.word	0x08014d1d

08012ebc <atexit>:
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	4601      	mov	r1, r0
 8012ec0:	461a      	mov	r2, r3
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 bac2 	b.w	801344c <__register_exitproc>

08012ec8 <malloc>:
 8012ec8:	4b02      	ldr	r3, [pc, #8]	@ (8012ed4 <malloc+0xc>)
 8012eca:	4601      	mov	r1, r0
 8012ecc:	6818      	ldr	r0, [r3, #0]
 8012ece:	f000 b82d 	b.w	8012f2c <_malloc_r>
 8012ed2:	bf00      	nop
 8012ed4:	200000a0 	.word	0x200000a0

08012ed8 <free>:
 8012ed8:	4b02      	ldr	r3, [pc, #8]	@ (8012ee4 <free+0xc>)
 8012eda:	4601      	mov	r1, r0
 8012edc:	6818      	ldr	r0, [r3, #0]
 8012ede:	f000 bb11 	b.w	8013504 <_free_r>
 8012ee2:	bf00      	nop
 8012ee4:	200000a0 	.word	0x200000a0

08012ee8 <sbrk_aligned>:
 8012ee8:	b570      	push	{r4, r5, r6, lr}
 8012eea:	4e0f      	ldr	r6, [pc, #60]	@ (8012f28 <sbrk_aligned+0x40>)
 8012eec:	460c      	mov	r4, r1
 8012eee:	6831      	ldr	r1, [r6, #0]
 8012ef0:	4605      	mov	r5, r0
 8012ef2:	b911      	cbnz	r1, 8012efa <sbrk_aligned+0x12>
 8012ef4:	f000 fa4c 	bl	8013390 <_sbrk_r>
 8012ef8:	6030      	str	r0, [r6, #0]
 8012efa:	4621      	mov	r1, r4
 8012efc:	4628      	mov	r0, r5
 8012efe:	f000 fa47 	bl	8013390 <_sbrk_r>
 8012f02:	1c43      	adds	r3, r0, #1
 8012f04:	d103      	bne.n	8012f0e <sbrk_aligned+0x26>
 8012f06:	f04f 34ff 	mov.w	r4, #4294967295
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	bd70      	pop	{r4, r5, r6, pc}
 8012f0e:	1cc4      	adds	r4, r0, #3
 8012f10:	f024 0403 	bic.w	r4, r4, #3
 8012f14:	42a0      	cmp	r0, r4
 8012f16:	d0f8      	beq.n	8012f0a <sbrk_aligned+0x22>
 8012f18:	1a21      	subs	r1, r4, r0
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f000 fa38 	bl	8013390 <_sbrk_r>
 8012f20:	3001      	adds	r0, #1
 8012f22:	d1f2      	bne.n	8012f0a <sbrk_aligned+0x22>
 8012f24:	e7ef      	b.n	8012f06 <sbrk_aligned+0x1e>
 8012f26:	bf00      	nop
 8012f28:	200154cc 	.word	0x200154cc

08012f2c <_malloc_r>:
 8012f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f30:	1ccd      	adds	r5, r1, #3
 8012f32:	f025 0503 	bic.w	r5, r5, #3
 8012f36:	3508      	adds	r5, #8
 8012f38:	2d0c      	cmp	r5, #12
 8012f3a:	bf38      	it	cc
 8012f3c:	250c      	movcc	r5, #12
 8012f3e:	2d00      	cmp	r5, #0
 8012f40:	4606      	mov	r6, r0
 8012f42:	db01      	blt.n	8012f48 <_malloc_r+0x1c>
 8012f44:	42a9      	cmp	r1, r5
 8012f46:	d904      	bls.n	8012f52 <_malloc_r+0x26>
 8012f48:	230c      	movs	r3, #12
 8012f4a:	6033      	str	r3, [r6, #0]
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013028 <_malloc_r+0xfc>
 8012f56:	f000 f869 	bl	801302c <__malloc_lock>
 8012f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8012f5e:	461c      	mov	r4, r3
 8012f60:	bb44      	cbnz	r4, 8012fb4 <_malloc_r+0x88>
 8012f62:	4629      	mov	r1, r5
 8012f64:	4630      	mov	r0, r6
 8012f66:	f7ff ffbf 	bl	8012ee8 <sbrk_aligned>
 8012f6a:	1c43      	adds	r3, r0, #1
 8012f6c:	4604      	mov	r4, r0
 8012f6e:	d158      	bne.n	8013022 <_malloc_r+0xf6>
 8012f70:	f8d8 4000 	ldr.w	r4, [r8]
 8012f74:	4627      	mov	r7, r4
 8012f76:	2f00      	cmp	r7, #0
 8012f78:	d143      	bne.n	8013002 <_malloc_r+0xd6>
 8012f7a:	2c00      	cmp	r4, #0
 8012f7c:	d04b      	beq.n	8013016 <_malloc_r+0xea>
 8012f7e:	6823      	ldr	r3, [r4, #0]
 8012f80:	4639      	mov	r1, r7
 8012f82:	4630      	mov	r0, r6
 8012f84:	eb04 0903 	add.w	r9, r4, r3
 8012f88:	f000 fa02 	bl	8013390 <_sbrk_r>
 8012f8c:	4581      	cmp	r9, r0
 8012f8e:	d142      	bne.n	8013016 <_malloc_r+0xea>
 8012f90:	6821      	ldr	r1, [r4, #0]
 8012f92:	1a6d      	subs	r5, r5, r1
 8012f94:	4629      	mov	r1, r5
 8012f96:	4630      	mov	r0, r6
 8012f98:	f7ff ffa6 	bl	8012ee8 <sbrk_aligned>
 8012f9c:	3001      	adds	r0, #1
 8012f9e:	d03a      	beq.n	8013016 <_malloc_r+0xea>
 8012fa0:	6823      	ldr	r3, [r4, #0]
 8012fa2:	442b      	add	r3, r5
 8012fa4:	6023      	str	r3, [r4, #0]
 8012fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8012faa:	685a      	ldr	r2, [r3, #4]
 8012fac:	bb62      	cbnz	r2, 8013008 <_malloc_r+0xdc>
 8012fae:	f8c8 7000 	str.w	r7, [r8]
 8012fb2:	e00f      	b.n	8012fd4 <_malloc_r+0xa8>
 8012fb4:	6822      	ldr	r2, [r4, #0]
 8012fb6:	1b52      	subs	r2, r2, r5
 8012fb8:	d420      	bmi.n	8012ffc <_malloc_r+0xd0>
 8012fba:	2a0b      	cmp	r2, #11
 8012fbc:	d917      	bls.n	8012fee <_malloc_r+0xc2>
 8012fbe:	1961      	adds	r1, r4, r5
 8012fc0:	42a3      	cmp	r3, r4
 8012fc2:	6025      	str	r5, [r4, #0]
 8012fc4:	bf18      	it	ne
 8012fc6:	6059      	strne	r1, [r3, #4]
 8012fc8:	6863      	ldr	r3, [r4, #4]
 8012fca:	bf08      	it	eq
 8012fcc:	f8c8 1000 	streq.w	r1, [r8]
 8012fd0:	5162      	str	r2, [r4, r5]
 8012fd2:	604b      	str	r3, [r1, #4]
 8012fd4:	4630      	mov	r0, r6
 8012fd6:	f000 f82f 	bl	8013038 <__malloc_unlock>
 8012fda:	f104 000b 	add.w	r0, r4, #11
 8012fde:	1d23      	adds	r3, r4, #4
 8012fe0:	f020 0007 	bic.w	r0, r0, #7
 8012fe4:	1ac2      	subs	r2, r0, r3
 8012fe6:	bf1c      	itt	ne
 8012fe8:	1a1b      	subne	r3, r3, r0
 8012fea:	50a3      	strne	r3, [r4, r2]
 8012fec:	e7af      	b.n	8012f4e <_malloc_r+0x22>
 8012fee:	6862      	ldr	r2, [r4, #4]
 8012ff0:	42a3      	cmp	r3, r4
 8012ff2:	bf0c      	ite	eq
 8012ff4:	f8c8 2000 	streq.w	r2, [r8]
 8012ff8:	605a      	strne	r2, [r3, #4]
 8012ffa:	e7eb      	b.n	8012fd4 <_malloc_r+0xa8>
 8012ffc:	4623      	mov	r3, r4
 8012ffe:	6864      	ldr	r4, [r4, #4]
 8013000:	e7ae      	b.n	8012f60 <_malloc_r+0x34>
 8013002:	463c      	mov	r4, r7
 8013004:	687f      	ldr	r7, [r7, #4]
 8013006:	e7b6      	b.n	8012f76 <_malloc_r+0x4a>
 8013008:	461a      	mov	r2, r3
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	42a3      	cmp	r3, r4
 801300e:	d1fb      	bne.n	8013008 <_malloc_r+0xdc>
 8013010:	2300      	movs	r3, #0
 8013012:	6053      	str	r3, [r2, #4]
 8013014:	e7de      	b.n	8012fd4 <_malloc_r+0xa8>
 8013016:	230c      	movs	r3, #12
 8013018:	6033      	str	r3, [r6, #0]
 801301a:	4630      	mov	r0, r6
 801301c:	f000 f80c 	bl	8013038 <__malloc_unlock>
 8013020:	e794      	b.n	8012f4c <_malloc_r+0x20>
 8013022:	6005      	str	r5, [r0, #0]
 8013024:	e7d6      	b.n	8012fd4 <_malloc_r+0xa8>
 8013026:	bf00      	nop
 8013028:	200154d0 	.word	0x200154d0

0801302c <__malloc_lock>:
 801302c:	4801      	ldr	r0, [pc, #4]	@ (8013034 <__malloc_lock+0x8>)
 801302e:	f000 b9fc 	b.w	801342a <__retarget_lock_acquire_recursive>
 8013032:	bf00      	nop
 8013034:	20015614 	.word	0x20015614

08013038 <__malloc_unlock>:
 8013038:	4801      	ldr	r0, [pc, #4]	@ (8013040 <__malloc_unlock+0x8>)
 801303a:	f000 b9f7 	b.w	801342c <__retarget_lock_release_recursive>
 801303e:	bf00      	nop
 8013040:	20015614 	.word	0x20015614

08013044 <__cxa_atexit>:
 8013044:	b510      	push	{r4, lr}
 8013046:	4604      	mov	r4, r0
 8013048:	4804      	ldr	r0, [pc, #16]	@ (801305c <__cxa_atexit+0x18>)
 801304a:	4613      	mov	r3, r2
 801304c:	b120      	cbz	r0, 8013058 <__cxa_atexit+0x14>
 801304e:	460a      	mov	r2, r1
 8013050:	2002      	movs	r0, #2
 8013052:	4621      	mov	r1, r4
 8013054:	f000 f9fa 	bl	801344c <__register_exitproc>
 8013058:	bd10      	pop	{r4, pc}
 801305a:	bf00      	nop
 801305c:	0801344d 	.word	0x0801344d

08013060 <std>:
 8013060:	2300      	movs	r3, #0
 8013062:	b510      	push	{r4, lr}
 8013064:	4604      	mov	r4, r0
 8013066:	e9c0 3300 	strd	r3, r3, [r0]
 801306a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801306e:	6083      	str	r3, [r0, #8]
 8013070:	8181      	strh	r1, [r0, #12]
 8013072:	6643      	str	r3, [r0, #100]	@ 0x64
 8013074:	81c2      	strh	r2, [r0, #14]
 8013076:	6183      	str	r3, [r0, #24]
 8013078:	4619      	mov	r1, r3
 801307a:	2208      	movs	r2, #8
 801307c:	305c      	adds	r0, #92	@ 0x5c
 801307e:	f000 f906 	bl	801328e <memset>
 8013082:	4b0d      	ldr	r3, [pc, #52]	@ (80130b8 <std+0x58>)
 8013084:	6263      	str	r3, [r4, #36]	@ 0x24
 8013086:	4b0d      	ldr	r3, [pc, #52]	@ (80130bc <std+0x5c>)
 8013088:	62a3      	str	r3, [r4, #40]	@ 0x28
 801308a:	4b0d      	ldr	r3, [pc, #52]	@ (80130c0 <std+0x60>)
 801308c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801308e:	4b0d      	ldr	r3, [pc, #52]	@ (80130c4 <std+0x64>)
 8013090:	6323      	str	r3, [r4, #48]	@ 0x30
 8013092:	4b0d      	ldr	r3, [pc, #52]	@ (80130c8 <std+0x68>)
 8013094:	6224      	str	r4, [r4, #32]
 8013096:	429c      	cmp	r4, r3
 8013098:	d006      	beq.n	80130a8 <std+0x48>
 801309a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801309e:	4294      	cmp	r4, r2
 80130a0:	d002      	beq.n	80130a8 <std+0x48>
 80130a2:	33d0      	adds	r3, #208	@ 0xd0
 80130a4:	429c      	cmp	r4, r3
 80130a6:	d105      	bne.n	80130b4 <std+0x54>
 80130a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80130ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130b0:	f000 b9ba 	b.w	8013428 <__retarget_lock_init_recursive>
 80130b4:	bd10      	pop	{r4, pc}
 80130b6:	bf00      	nop
 80130b8:	08013209 	.word	0x08013209
 80130bc:	0801322b 	.word	0x0801322b
 80130c0:	08013263 	.word	0x08013263
 80130c4:	08013287 	.word	0x08013287
 80130c8:	200154d4 	.word	0x200154d4

080130cc <stdio_exit_handler>:
 80130cc:	4a02      	ldr	r2, [pc, #8]	@ (80130d8 <stdio_exit_handler+0xc>)
 80130ce:	4903      	ldr	r1, [pc, #12]	@ (80130dc <stdio_exit_handler+0x10>)
 80130d0:	4803      	ldr	r0, [pc, #12]	@ (80130e0 <stdio_exit_handler+0x14>)
 80130d2:	f000 b87b 	b.w	80131cc <_fwalk_sglue>
 80130d6:	bf00      	nop
 80130d8:	20000094 	.word	0x20000094
 80130dc:	08013c3d 	.word	0x08013c3d
 80130e0:	200000a4 	.word	0x200000a4

080130e4 <cleanup_stdio>:
 80130e4:	6841      	ldr	r1, [r0, #4]
 80130e6:	4b0c      	ldr	r3, [pc, #48]	@ (8013118 <cleanup_stdio+0x34>)
 80130e8:	4299      	cmp	r1, r3
 80130ea:	b510      	push	{r4, lr}
 80130ec:	4604      	mov	r4, r0
 80130ee:	d001      	beq.n	80130f4 <cleanup_stdio+0x10>
 80130f0:	f000 fda4 	bl	8013c3c <_fflush_r>
 80130f4:	68a1      	ldr	r1, [r4, #8]
 80130f6:	4b09      	ldr	r3, [pc, #36]	@ (801311c <cleanup_stdio+0x38>)
 80130f8:	4299      	cmp	r1, r3
 80130fa:	d002      	beq.n	8013102 <cleanup_stdio+0x1e>
 80130fc:	4620      	mov	r0, r4
 80130fe:	f000 fd9d 	bl	8013c3c <_fflush_r>
 8013102:	68e1      	ldr	r1, [r4, #12]
 8013104:	4b06      	ldr	r3, [pc, #24]	@ (8013120 <cleanup_stdio+0x3c>)
 8013106:	4299      	cmp	r1, r3
 8013108:	d004      	beq.n	8013114 <cleanup_stdio+0x30>
 801310a:	4620      	mov	r0, r4
 801310c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013110:	f000 bd94 	b.w	8013c3c <_fflush_r>
 8013114:	bd10      	pop	{r4, pc}
 8013116:	bf00      	nop
 8013118:	200154d4 	.word	0x200154d4
 801311c:	2001553c 	.word	0x2001553c
 8013120:	200155a4 	.word	0x200155a4

08013124 <global_stdio_init.part.0>:
 8013124:	b510      	push	{r4, lr}
 8013126:	4b0b      	ldr	r3, [pc, #44]	@ (8013154 <global_stdio_init.part.0+0x30>)
 8013128:	4c0b      	ldr	r4, [pc, #44]	@ (8013158 <global_stdio_init.part.0+0x34>)
 801312a:	4a0c      	ldr	r2, [pc, #48]	@ (801315c <global_stdio_init.part.0+0x38>)
 801312c:	601a      	str	r2, [r3, #0]
 801312e:	4620      	mov	r0, r4
 8013130:	2200      	movs	r2, #0
 8013132:	2104      	movs	r1, #4
 8013134:	f7ff ff94 	bl	8013060 <std>
 8013138:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801313c:	2201      	movs	r2, #1
 801313e:	2109      	movs	r1, #9
 8013140:	f7ff ff8e 	bl	8013060 <std>
 8013144:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013148:	2202      	movs	r2, #2
 801314a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801314e:	2112      	movs	r1, #18
 8013150:	f7ff bf86 	b.w	8013060 <std>
 8013154:	2001560c 	.word	0x2001560c
 8013158:	200154d4 	.word	0x200154d4
 801315c:	080130cd 	.word	0x080130cd

08013160 <__sfp_lock_acquire>:
 8013160:	4801      	ldr	r0, [pc, #4]	@ (8013168 <__sfp_lock_acquire+0x8>)
 8013162:	f000 b962 	b.w	801342a <__retarget_lock_acquire_recursive>
 8013166:	bf00      	nop
 8013168:	20015616 	.word	0x20015616

0801316c <__sfp_lock_release>:
 801316c:	4801      	ldr	r0, [pc, #4]	@ (8013174 <__sfp_lock_release+0x8>)
 801316e:	f000 b95d 	b.w	801342c <__retarget_lock_release_recursive>
 8013172:	bf00      	nop
 8013174:	20015616 	.word	0x20015616

08013178 <__sinit>:
 8013178:	b510      	push	{r4, lr}
 801317a:	4604      	mov	r4, r0
 801317c:	f7ff fff0 	bl	8013160 <__sfp_lock_acquire>
 8013180:	6a23      	ldr	r3, [r4, #32]
 8013182:	b11b      	cbz	r3, 801318c <__sinit+0x14>
 8013184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013188:	f7ff bff0 	b.w	801316c <__sfp_lock_release>
 801318c:	4b04      	ldr	r3, [pc, #16]	@ (80131a0 <__sinit+0x28>)
 801318e:	6223      	str	r3, [r4, #32]
 8013190:	4b04      	ldr	r3, [pc, #16]	@ (80131a4 <__sinit+0x2c>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d1f5      	bne.n	8013184 <__sinit+0xc>
 8013198:	f7ff ffc4 	bl	8013124 <global_stdio_init.part.0>
 801319c:	e7f2      	b.n	8013184 <__sinit+0xc>
 801319e:	bf00      	nop
 80131a0:	080130e5 	.word	0x080130e5
 80131a4:	2001560c 	.word	0x2001560c

080131a8 <fiprintf>:
 80131a8:	b40e      	push	{r1, r2, r3}
 80131aa:	b503      	push	{r0, r1, lr}
 80131ac:	4601      	mov	r1, r0
 80131ae:	ab03      	add	r3, sp, #12
 80131b0:	4805      	ldr	r0, [pc, #20]	@ (80131c8 <fiprintf+0x20>)
 80131b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80131b6:	6800      	ldr	r0, [r0, #0]
 80131b8:	9301      	str	r3, [sp, #4]
 80131ba:	f000 fa17 	bl	80135ec <_vfiprintf_r>
 80131be:	b002      	add	sp, #8
 80131c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80131c4:	b003      	add	sp, #12
 80131c6:	4770      	bx	lr
 80131c8:	200000a0 	.word	0x200000a0

080131cc <_fwalk_sglue>:
 80131cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131d0:	4607      	mov	r7, r0
 80131d2:	4688      	mov	r8, r1
 80131d4:	4614      	mov	r4, r2
 80131d6:	2600      	movs	r6, #0
 80131d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80131dc:	f1b9 0901 	subs.w	r9, r9, #1
 80131e0:	d505      	bpl.n	80131ee <_fwalk_sglue+0x22>
 80131e2:	6824      	ldr	r4, [r4, #0]
 80131e4:	2c00      	cmp	r4, #0
 80131e6:	d1f7      	bne.n	80131d8 <_fwalk_sglue+0xc>
 80131e8:	4630      	mov	r0, r6
 80131ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131ee:	89ab      	ldrh	r3, [r5, #12]
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d907      	bls.n	8013204 <_fwalk_sglue+0x38>
 80131f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131f8:	3301      	adds	r3, #1
 80131fa:	d003      	beq.n	8013204 <_fwalk_sglue+0x38>
 80131fc:	4629      	mov	r1, r5
 80131fe:	4638      	mov	r0, r7
 8013200:	47c0      	blx	r8
 8013202:	4306      	orrs	r6, r0
 8013204:	3568      	adds	r5, #104	@ 0x68
 8013206:	e7e9      	b.n	80131dc <_fwalk_sglue+0x10>

08013208 <__sread>:
 8013208:	b510      	push	{r4, lr}
 801320a:	460c      	mov	r4, r1
 801320c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013210:	f000 f898 	bl	8013344 <_read_r>
 8013214:	2800      	cmp	r0, #0
 8013216:	bfab      	itete	ge
 8013218:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801321a:	89a3      	ldrhlt	r3, [r4, #12]
 801321c:	181b      	addge	r3, r3, r0
 801321e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013222:	bfac      	ite	ge
 8013224:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013226:	81a3      	strhlt	r3, [r4, #12]
 8013228:	bd10      	pop	{r4, pc}

0801322a <__swrite>:
 801322a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801322e:	461f      	mov	r7, r3
 8013230:	898b      	ldrh	r3, [r1, #12]
 8013232:	05db      	lsls	r3, r3, #23
 8013234:	4605      	mov	r5, r0
 8013236:	460c      	mov	r4, r1
 8013238:	4616      	mov	r6, r2
 801323a:	d505      	bpl.n	8013248 <__swrite+0x1e>
 801323c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013240:	2302      	movs	r3, #2
 8013242:	2200      	movs	r2, #0
 8013244:	f000 f86c 	bl	8013320 <_lseek_r>
 8013248:	89a3      	ldrh	r3, [r4, #12]
 801324a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801324e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013252:	81a3      	strh	r3, [r4, #12]
 8013254:	4632      	mov	r2, r6
 8013256:	463b      	mov	r3, r7
 8013258:	4628      	mov	r0, r5
 801325a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801325e:	f000 b8a7 	b.w	80133b0 <_write_r>

08013262 <__sseek>:
 8013262:	b510      	push	{r4, lr}
 8013264:	460c      	mov	r4, r1
 8013266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801326a:	f000 f859 	bl	8013320 <_lseek_r>
 801326e:	1c43      	adds	r3, r0, #1
 8013270:	89a3      	ldrh	r3, [r4, #12]
 8013272:	bf15      	itete	ne
 8013274:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013276:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801327a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801327e:	81a3      	strheq	r3, [r4, #12]
 8013280:	bf18      	it	ne
 8013282:	81a3      	strhne	r3, [r4, #12]
 8013284:	bd10      	pop	{r4, pc}

08013286 <__sclose>:
 8013286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801328a:	f000 b839 	b.w	8013300 <_close_r>

0801328e <memset>:
 801328e:	4402      	add	r2, r0
 8013290:	4603      	mov	r3, r0
 8013292:	4293      	cmp	r3, r2
 8013294:	d100      	bne.n	8013298 <memset+0xa>
 8013296:	4770      	bx	lr
 8013298:	f803 1b01 	strb.w	r1, [r3], #1
 801329c:	e7f9      	b.n	8013292 <memset+0x4>

0801329e <_raise_r>:
 801329e:	291f      	cmp	r1, #31
 80132a0:	b538      	push	{r3, r4, r5, lr}
 80132a2:	4605      	mov	r5, r0
 80132a4:	460c      	mov	r4, r1
 80132a6:	d904      	bls.n	80132b2 <_raise_r+0x14>
 80132a8:	2316      	movs	r3, #22
 80132aa:	6003      	str	r3, [r0, #0]
 80132ac:	f04f 30ff 	mov.w	r0, #4294967295
 80132b0:	bd38      	pop	{r3, r4, r5, pc}
 80132b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80132b4:	b112      	cbz	r2, 80132bc <_raise_r+0x1e>
 80132b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80132ba:	b94b      	cbnz	r3, 80132d0 <_raise_r+0x32>
 80132bc:	4628      	mov	r0, r5
 80132be:	f000 f865 	bl	801338c <_getpid_r>
 80132c2:	4622      	mov	r2, r4
 80132c4:	4601      	mov	r1, r0
 80132c6:	4628      	mov	r0, r5
 80132c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132cc:	f000 b84c 	b.w	8013368 <_kill_r>
 80132d0:	2b01      	cmp	r3, #1
 80132d2:	d00a      	beq.n	80132ea <_raise_r+0x4c>
 80132d4:	1c59      	adds	r1, r3, #1
 80132d6:	d103      	bne.n	80132e0 <_raise_r+0x42>
 80132d8:	2316      	movs	r3, #22
 80132da:	6003      	str	r3, [r0, #0]
 80132dc:	2001      	movs	r0, #1
 80132de:	e7e7      	b.n	80132b0 <_raise_r+0x12>
 80132e0:	2100      	movs	r1, #0
 80132e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80132e6:	4620      	mov	r0, r4
 80132e8:	4798      	blx	r3
 80132ea:	2000      	movs	r0, #0
 80132ec:	e7e0      	b.n	80132b0 <_raise_r+0x12>
	...

080132f0 <raise>:
 80132f0:	4b02      	ldr	r3, [pc, #8]	@ (80132fc <raise+0xc>)
 80132f2:	4601      	mov	r1, r0
 80132f4:	6818      	ldr	r0, [r3, #0]
 80132f6:	f7ff bfd2 	b.w	801329e <_raise_r>
 80132fa:	bf00      	nop
 80132fc:	200000a0 	.word	0x200000a0

08013300 <_close_r>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	4d06      	ldr	r5, [pc, #24]	@ (801331c <_close_r+0x1c>)
 8013304:	2300      	movs	r3, #0
 8013306:	4604      	mov	r4, r0
 8013308:	4608      	mov	r0, r1
 801330a:	602b      	str	r3, [r5, #0]
 801330c:	f7ee fb3c 	bl	8001988 <_close>
 8013310:	1c43      	adds	r3, r0, #1
 8013312:	d102      	bne.n	801331a <_close_r+0x1a>
 8013314:	682b      	ldr	r3, [r5, #0]
 8013316:	b103      	cbz	r3, 801331a <_close_r+0x1a>
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	20015610 	.word	0x20015610

08013320 <_lseek_r>:
 8013320:	b538      	push	{r3, r4, r5, lr}
 8013322:	4d07      	ldr	r5, [pc, #28]	@ (8013340 <_lseek_r+0x20>)
 8013324:	4604      	mov	r4, r0
 8013326:	4608      	mov	r0, r1
 8013328:	4611      	mov	r1, r2
 801332a:	2200      	movs	r2, #0
 801332c:	602a      	str	r2, [r5, #0]
 801332e:	461a      	mov	r2, r3
 8013330:	f7ee fb34 	bl	800199c <_lseek>
 8013334:	1c43      	adds	r3, r0, #1
 8013336:	d102      	bne.n	801333e <_lseek_r+0x1e>
 8013338:	682b      	ldr	r3, [r5, #0]
 801333a:	b103      	cbz	r3, 801333e <_lseek_r+0x1e>
 801333c:	6023      	str	r3, [r4, #0]
 801333e:	bd38      	pop	{r3, r4, r5, pc}
 8013340:	20015610 	.word	0x20015610

08013344 <_read_r>:
 8013344:	b538      	push	{r3, r4, r5, lr}
 8013346:	4d07      	ldr	r5, [pc, #28]	@ (8013364 <_read_r+0x20>)
 8013348:	4604      	mov	r4, r0
 801334a:	4608      	mov	r0, r1
 801334c:	4611      	mov	r1, r2
 801334e:	2200      	movs	r2, #0
 8013350:	602a      	str	r2, [r5, #0]
 8013352:	461a      	mov	r2, r3
 8013354:	f7ee fafc 	bl	8001950 <_read>
 8013358:	1c43      	adds	r3, r0, #1
 801335a:	d102      	bne.n	8013362 <_read_r+0x1e>
 801335c:	682b      	ldr	r3, [r5, #0]
 801335e:	b103      	cbz	r3, 8013362 <_read_r+0x1e>
 8013360:	6023      	str	r3, [r4, #0]
 8013362:	bd38      	pop	{r3, r4, r5, pc}
 8013364:	20015610 	.word	0x20015610

08013368 <_kill_r>:
 8013368:	b538      	push	{r3, r4, r5, lr}
 801336a:	4d07      	ldr	r5, [pc, #28]	@ (8013388 <_kill_r+0x20>)
 801336c:	2300      	movs	r3, #0
 801336e:	4604      	mov	r4, r0
 8013370:	4608      	mov	r0, r1
 8013372:	4611      	mov	r1, r2
 8013374:	602b      	str	r3, [r5, #0]
 8013376:	f7ee fadd 	bl	8001934 <_kill>
 801337a:	1c43      	adds	r3, r0, #1
 801337c:	d102      	bne.n	8013384 <_kill_r+0x1c>
 801337e:	682b      	ldr	r3, [r5, #0]
 8013380:	b103      	cbz	r3, 8013384 <_kill_r+0x1c>
 8013382:	6023      	str	r3, [r4, #0]
 8013384:	bd38      	pop	{r3, r4, r5, pc}
 8013386:	bf00      	nop
 8013388:	20015610 	.word	0x20015610

0801338c <_getpid_r>:
 801338c:	f7ee bad0 	b.w	8001930 <_getpid>

08013390 <_sbrk_r>:
 8013390:	b538      	push	{r3, r4, r5, lr}
 8013392:	4d06      	ldr	r5, [pc, #24]	@ (80133ac <_sbrk_r+0x1c>)
 8013394:	2300      	movs	r3, #0
 8013396:	4604      	mov	r4, r0
 8013398:	4608      	mov	r0, r1
 801339a:	602b      	str	r3, [r5, #0]
 801339c:	f7ee fb00 	bl	80019a0 <_sbrk>
 80133a0:	1c43      	adds	r3, r0, #1
 80133a2:	d102      	bne.n	80133aa <_sbrk_r+0x1a>
 80133a4:	682b      	ldr	r3, [r5, #0]
 80133a6:	b103      	cbz	r3, 80133aa <_sbrk_r+0x1a>
 80133a8:	6023      	str	r3, [r4, #0]
 80133aa:	bd38      	pop	{r3, r4, r5, pc}
 80133ac:	20015610 	.word	0x20015610

080133b0 <_write_r>:
 80133b0:	b538      	push	{r3, r4, r5, lr}
 80133b2:	4d07      	ldr	r5, [pc, #28]	@ (80133d0 <_write_r+0x20>)
 80133b4:	4604      	mov	r4, r0
 80133b6:	4608      	mov	r0, r1
 80133b8:	4611      	mov	r1, r2
 80133ba:	2200      	movs	r2, #0
 80133bc:	602a      	str	r2, [r5, #0]
 80133be:	461a      	mov	r2, r3
 80133c0:	f7ee fad4 	bl	800196c <_write>
 80133c4:	1c43      	adds	r3, r0, #1
 80133c6:	d102      	bne.n	80133ce <_write_r+0x1e>
 80133c8:	682b      	ldr	r3, [r5, #0]
 80133ca:	b103      	cbz	r3, 80133ce <_write_r+0x1e>
 80133cc:	6023      	str	r3, [r4, #0]
 80133ce:	bd38      	pop	{r3, r4, r5, pc}
 80133d0:	20015610 	.word	0x20015610

080133d4 <__errno>:
 80133d4:	4b01      	ldr	r3, [pc, #4]	@ (80133dc <__errno+0x8>)
 80133d6:	6818      	ldr	r0, [r3, #0]
 80133d8:	4770      	bx	lr
 80133da:	bf00      	nop
 80133dc:	200000a0 	.word	0x200000a0

080133e0 <__libc_init_array>:
 80133e0:	b570      	push	{r4, r5, r6, lr}
 80133e2:	4d0d      	ldr	r5, [pc, #52]	@ (8013418 <__libc_init_array+0x38>)
 80133e4:	4c0d      	ldr	r4, [pc, #52]	@ (801341c <__libc_init_array+0x3c>)
 80133e6:	1b64      	subs	r4, r4, r5
 80133e8:	10a4      	asrs	r4, r4, #2
 80133ea:	2600      	movs	r6, #0
 80133ec:	42a6      	cmp	r6, r4
 80133ee:	d109      	bne.n	8013404 <__libc_init_array+0x24>
 80133f0:	4d0b      	ldr	r5, [pc, #44]	@ (8013420 <__libc_init_array+0x40>)
 80133f2:	4c0c      	ldr	r4, [pc, #48]	@ (8013424 <__libc_init_array+0x44>)
 80133f4:	f000 fd62 	bl	8013ebc <_init>
 80133f8:	1b64      	subs	r4, r4, r5
 80133fa:	10a4      	asrs	r4, r4, #2
 80133fc:	2600      	movs	r6, #0
 80133fe:	42a6      	cmp	r6, r4
 8013400:	d105      	bne.n	801340e <__libc_init_array+0x2e>
 8013402:	bd70      	pop	{r4, r5, r6, pc}
 8013404:	f855 3b04 	ldr.w	r3, [r5], #4
 8013408:	4798      	blx	r3
 801340a:	3601      	adds	r6, #1
 801340c:	e7ee      	b.n	80133ec <__libc_init_array+0xc>
 801340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013412:	4798      	blx	r3
 8013414:	3601      	adds	r6, #1
 8013416:	e7f2      	b.n	80133fe <__libc_init_array+0x1e>
 8013418:	080f02d4 	.word	0x080f02d4
 801341c:	080f02d4 	.word	0x080f02d4
 8013420:	080f02d4 	.word	0x080f02d4
 8013424:	080f02e8 	.word	0x080f02e8

08013428 <__retarget_lock_init_recursive>:
 8013428:	4770      	bx	lr

0801342a <__retarget_lock_acquire_recursive>:
 801342a:	4770      	bx	lr

0801342c <__retarget_lock_release_recursive>:
 801342c:	4770      	bx	lr

0801342e <memcpy>:
 801342e:	440a      	add	r2, r1
 8013430:	4291      	cmp	r1, r2
 8013432:	f100 33ff 	add.w	r3, r0, #4294967295
 8013436:	d100      	bne.n	801343a <memcpy+0xc>
 8013438:	4770      	bx	lr
 801343a:	b510      	push	{r4, lr}
 801343c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013444:	4291      	cmp	r1, r2
 8013446:	d1f9      	bne.n	801343c <memcpy+0xe>
 8013448:	bd10      	pop	{r4, pc}
	...

0801344c <__register_exitproc>:
 801344c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013450:	4d27      	ldr	r5, [pc, #156]	@ (80134f0 <__register_exitproc+0xa4>)
 8013452:	4607      	mov	r7, r0
 8013454:	6828      	ldr	r0, [r5, #0]
 8013456:	4691      	mov	r9, r2
 8013458:	460e      	mov	r6, r1
 801345a:	4698      	mov	r8, r3
 801345c:	f7ff ffe5 	bl	801342a <__retarget_lock_acquire_recursive>
 8013460:	4a24      	ldr	r2, [pc, #144]	@ (80134f4 <__register_exitproc+0xa8>)
 8013462:	6814      	ldr	r4, [r2, #0]
 8013464:	b93c      	cbnz	r4, 8013476 <__register_exitproc+0x2a>
 8013466:	4b24      	ldr	r3, [pc, #144]	@ (80134f8 <__register_exitproc+0xac>)
 8013468:	6013      	str	r3, [r2, #0]
 801346a:	4a24      	ldr	r2, [pc, #144]	@ (80134fc <__register_exitproc+0xb0>)
 801346c:	b112      	cbz	r2, 8013474 <__register_exitproc+0x28>
 801346e:	6812      	ldr	r2, [r2, #0]
 8013470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013474:	4c20      	ldr	r4, [pc, #128]	@ (80134f8 <__register_exitproc+0xac>)
 8013476:	6863      	ldr	r3, [r4, #4]
 8013478:	2b1f      	cmp	r3, #31
 801347a:	dd06      	ble.n	801348a <__register_exitproc+0x3e>
 801347c:	6828      	ldr	r0, [r5, #0]
 801347e:	f7ff ffd5 	bl	801342c <__retarget_lock_release_recursive>
 8013482:	f04f 30ff 	mov.w	r0, #4294967295
 8013486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801348a:	b32f      	cbz	r7, 80134d8 <__register_exitproc+0x8c>
 801348c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8013490:	b968      	cbnz	r0, 80134ae <__register_exitproc+0x62>
 8013492:	4b1b      	ldr	r3, [pc, #108]	@ (8013500 <__register_exitproc+0xb4>)
 8013494:	2b00      	cmp	r3, #0
 8013496:	d0f1      	beq.n	801347c <__register_exitproc+0x30>
 8013498:	f44f 7084 	mov.w	r0, #264	@ 0x108
 801349c:	f7ff fd14 	bl	8012ec8 <malloc>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	d0eb      	beq.n	801347c <__register_exitproc+0x30>
 80134a4:	2300      	movs	r3, #0
 80134a6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80134aa:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80134ae:	6863      	ldr	r3, [r4, #4]
 80134b0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80134b4:	2201      	movs	r2, #1
 80134b6:	409a      	lsls	r2, r3
 80134b8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80134bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80134c0:	4313      	orrs	r3, r2
 80134c2:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80134c6:	2f02      	cmp	r7, #2
 80134c8:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80134cc:	bf02      	ittt	eq
 80134ce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80134d2:	4313      	orreq	r3, r2
 80134d4:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80134d8:	6863      	ldr	r3, [r4, #4]
 80134da:	6828      	ldr	r0, [r5, #0]
 80134dc:	1c5a      	adds	r2, r3, #1
 80134de:	3302      	adds	r3, #2
 80134e0:	6062      	str	r2, [r4, #4]
 80134e2:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80134e6:	f7ff ffa1 	bl	801342c <__retarget_lock_release_recursive>
 80134ea:	2000      	movs	r0, #0
 80134ec:	e7cb      	b.n	8013486 <__register_exitproc+0x3a>
 80134ee:	bf00      	nop
 80134f0:	200000f0 	.word	0x200000f0
 80134f4:	200156a4 	.word	0x200156a4
 80134f8:	20015618 	.word	0x20015618
 80134fc:	08015e74 	.word	0x08015e74
 8013500:	08012ec9 	.word	0x08012ec9

08013504 <_free_r>:
 8013504:	b538      	push	{r3, r4, r5, lr}
 8013506:	4605      	mov	r5, r0
 8013508:	2900      	cmp	r1, #0
 801350a:	d041      	beq.n	8013590 <_free_r+0x8c>
 801350c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013510:	1f0c      	subs	r4, r1, #4
 8013512:	2b00      	cmp	r3, #0
 8013514:	bfb8      	it	lt
 8013516:	18e4      	addlt	r4, r4, r3
 8013518:	f7ff fd88 	bl	801302c <__malloc_lock>
 801351c:	4a1d      	ldr	r2, [pc, #116]	@ (8013594 <_free_r+0x90>)
 801351e:	6813      	ldr	r3, [r2, #0]
 8013520:	b933      	cbnz	r3, 8013530 <_free_r+0x2c>
 8013522:	6063      	str	r3, [r4, #4]
 8013524:	6014      	str	r4, [r2, #0]
 8013526:	4628      	mov	r0, r5
 8013528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801352c:	f7ff bd84 	b.w	8013038 <__malloc_unlock>
 8013530:	42a3      	cmp	r3, r4
 8013532:	d908      	bls.n	8013546 <_free_r+0x42>
 8013534:	6820      	ldr	r0, [r4, #0]
 8013536:	1821      	adds	r1, r4, r0
 8013538:	428b      	cmp	r3, r1
 801353a:	bf01      	itttt	eq
 801353c:	6819      	ldreq	r1, [r3, #0]
 801353e:	685b      	ldreq	r3, [r3, #4]
 8013540:	1809      	addeq	r1, r1, r0
 8013542:	6021      	streq	r1, [r4, #0]
 8013544:	e7ed      	b.n	8013522 <_free_r+0x1e>
 8013546:	461a      	mov	r2, r3
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	b10b      	cbz	r3, 8013550 <_free_r+0x4c>
 801354c:	42a3      	cmp	r3, r4
 801354e:	d9fa      	bls.n	8013546 <_free_r+0x42>
 8013550:	6811      	ldr	r1, [r2, #0]
 8013552:	1850      	adds	r0, r2, r1
 8013554:	42a0      	cmp	r0, r4
 8013556:	d10b      	bne.n	8013570 <_free_r+0x6c>
 8013558:	6820      	ldr	r0, [r4, #0]
 801355a:	4401      	add	r1, r0
 801355c:	1850      	adds	r0, r2, r1
 801355e:	4283      	cmp	r3, r0
 8013560:	6011      	str	r1, [r2, #0]
 8013562:	d1e0      	bne.n	8013526 <_free_r+0x22>
 8013564:	6818      	ldr	r0, [r3, #0]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	6053      	str	r3, [r2, #4]
 801356a:	4408      	add	r0, r1
 801356c:	6010      	str	r0, [r2, #0]
 801356e:	e7da      	b.n	8013526 <_free_r+0x22>
 8013570:	d902      	bls.n	8013578 <_free_r+0x74>
 8013572:	230c      	movs	r3, #12
 8013574:	602b      	str	r3, [r5, #0]
 8013576:	e7d6      	b.n	8013526 <_free_r+0x22>
 8013578:	6820      	ldr	r0, [r4, #0]
 801357a:	1821      	adds	r1, r4, r0
 801357c:	428b      	cmp	r3, r1
 801357e:	bf04      	itt	eq
 8013580:	6819      	ldreq	r1, [r3, #0]
 8013582:	685b      	ldreq	r3, [r3, #4]
 8013584:	6063      	str	r3, [r4, #4]
 8013586:	bf04      	itt	eq
 8013588:	1809      	addeq	r1, r1, r0
 801358a:	6021      	streq	r1, [r4, #0]
 801358c:	6054      	str	r4, [r2, #4]
 801358e:	e7ca      	b.n	8013526 <_free_r+0x22>
 8013590:	bd38      	pop	{r3, r4, r5, pc}
 8013592:	bf00      	nop
 8013594:	200154d0 	.word	0x200154d0

08013598 <__sfputc_r>:
 8013598:	6893      	ldr	r3, [r2, #8]
 801359a:	3b01      	subs	r3, #1
 801359c:	2b00      	cmp	r3, #0
 801359e:	b410      	push	{r4}
 80135a0:	6093      	str	r3, [r2, #8]
 80135a2:	da08      	bge.n	80135b6 <__sfputc_r+0x1e>
 80135a4:	6994      	ldr	r4, [r2, #24]
 80135a6:	42a3      	cmp	r3, r4
 80135a8:	db01      	blt.n	80135ae <__sfputc_r+0x16>
 80135aa:	290a      	cmp	r1, #10
 80135ac:	d103      	bne.n	80135b6 <__sfputc_r+0x1e>
 80135ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135b2:	f000 bb6b 	b.w	8013c8c <__swbuf_r>
 80135b6:	6813      	ldr	r3, [r2, #0]
 80135b8:	1c58      	adds	r0, r3, #1
 80135ba:	6010      	str	r0, [r2, #0]
 80135bc:	7019      	strb	r1, [r3, #0]
 80135be:	4608      	mov	r0, r1
 80135c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135c4:	4770      	bx	lr

080135c6 <__sfputs_r>:
 80135c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135c8:	4606      	mov	r6, r0
 80135ca:	460f      	mov	r7, r1
 80135cc:	4614      	mov	r4, r2
 80135ce:	18d5      	adds	r5, r2, r3
 80135d0:	42ac      	cmp	r4, r5
 80135d2:	d101      	bne.n	80135d8 <__sfputs_r+0x12>
 80135d4:	2000      	movs	r0, #0
 80135d6:	e007      	b.n	80135e8 <__sfputs_r+0x22>
 80135d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135dc:	463a      	mov	r2, r7
 80135de:	4630      	mov	r0, r6
 80135e0:	f7ff ffda 	bl	8013598 <__sfputc_r>
 80135e4:	1c43      	adds	r3, r0, #1
 80135e6:	d1f3      	bne.n	80135d0 <__sfputs_r+0xa>
 80135e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135ec <_vfiprintf_r>:
 80135ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f0:	460d      	mov	r5, r1
 80135f2:	b09d      	sub	sp, #116	@ 0x74
 80135f4:	4614      	mov	r4, r2
 80135f6:	4698      	mov	r8, r3
 80135f8:	4606      	mov	r6, r0
 80135fa:	b118      	cbz	r0, 8013604 <_vfiprintf_r+0x18>
 80135fc:	6a03      	ldr	r3, [r0, #32]
 80135fe:	b90b      	cbnz	r3, 8013604 <_vfiprintf_r+0x18>
 8013600:	f7ff fdba 	bl	8013178 <__sinit>
 8013604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013606:	07d9      	lsls	r1, r3, #31
 8013608:	d405      	bmi.n	8013616 <_vfiprintf_r+0x2a>
 801360a:	89ab      	ldrh	r3, [r5, #12]
 801360c:	059a      	lsls	r2, r3, #22
 801360e:	d402      	bmi.n	8013616 <_vfiprintf_r+0x2a>
 8013610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013612:	f7ff ff0a 	bl	801342a <__retarget_lock_acquire_recursive>
 8013616:	89ab      	ldrh	r3, [r5, #12]
 8013618:	071b      	lsls	r3, r3, #28
 801361a:	d501      	bpl.n	8013620 <_vfiprintf_r+0x34>
 801361c:	692b      	ldr	r3, [r5, #16]
 801361e:	b99b      	cbnz	r3, 8013648 <_vfiprintf_r+0x5c>
 8013620:	4629      	mov	r1, r5
 8013622:	4630      	mov	r0, r6
 8013624:	f000 fb70 	bl	8013d08 <__swsetup_r>
 8013628:	b170      	cbz	r0, 8013648 <_vfiprintf_r+0x5c>
 801362a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801362c:	07dc      	lsls	r4, r3, #31
 801362e:	d504      	bpl.n	801363a <_vfiprintf_r+0x4e>
 8013630:	f04f 30ff 	mov.w	r0, #4294967295
 8013634:	b01d      	add	sp, #116	@ 0x74
 8013636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801363a:	89ab      	ldrh	r3, [r5, #12]
 801363c:	0598      	lsls	r0, r3, #22
 801363e:	d4f7      	bmi.n	8013630 <_vfiprintf_r+0x44>
 8013640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013642:	f7ff fef3 	bl	801342c <__retarget_lock_release_recursive>
 8013646:	e7f3      	b.n	8013630 <_vfiprintf_r+0x44>
 8013648:	2300      	movs	r3, #0
 801364a:	9309      	str	r3, [sp, #36]	@ 0x24
 801364c:	2320      	movs	r3, #32
 801364e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013652:	f8cd 800c 	str.w	r8, [sp, #12]
 8013656:	2330      	movs	r3, #48	@ 0x30
 8013658:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013808 <_vfiprintf_r+0x21c>
 801365c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013660:	f04f 0901 	mov.w	r9, #1
 8013664:	4623      	mov	r3, r4
 8013666:	469a      	mov	sl, r3
 8013668:	f813 2b01 	ldrb.w	r2, [r3], #1
 801366c:	b10a      	cbz	r2, 8013672 <_vfiprintf_r+0x86>
 801366e:	2a25      	cmp	r2, #37	@ 0x25
 8013670:	d1f9      	bne.n	8013666 <_vfiprintf_r+0x7a>
 8013672:	ebba 0b04 	subs.w	fp, sl, r4
 8013676:	d00b      	beq.n	8013690 <_vfiprintf_r+0xa4>
 8013678:	465b      	mov	r3, fp
 801367a:	4622      	mov	r2, r4
 801367c:	4629      	mov	r1, r5
 801367e:	4630      	mov	r0, r6
 8013680:	f7ff ffa1 	bl	80135c6 <__sfputs_r>
 8013684:	3001      	adds	r0, #1
 8013686:	f000 80a7 	beq.w	80137d8 <_vfiprintf_r+0x1ec>
 801368a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801368c:	445a      	add	r2, fp
 801368e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013690:	f89a 3000 	ldrb.w	r3, [sl]
 8013694:	2b00      	cmp	r3, #0
 8013696:	f000 809f 	beq.w	80137d8 <_vfiprintf_r+0x1ec>
 801369a:	2300      	movs	r3, #0
 801369c:	f04f 32ff 	mov.w	r2, #4294967295
 80136a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136a4:	f10a 0a01 	add.w	sl, sl, #1
 80136a8:	9304      	str	r3, [sp, #16]
 80136aa:	9307      	str	r3, [sp, #28]
 80136ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80136b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80136b2:	4654      	mov	r4, sl
 80136b4:	2205      	movs	r2, #5
 80136b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136ba:	4853      	ldr	r0, [pc, #332]	@ (8013808 <_vfiprintf_r+0x21c>)
 80136bc:	f7ec fd98 	bl	80001f0 <memchr>
 80136c0:	9a04      	ldr	r2, [sp, #16]
 80136c2:	b9d8      	cbnz	r0, 80136fc <_vfiprintf_r+0x110>
 80136c4:	06d1      	lsls	r1, r2, #27
 80136c6:	bf44      	itt	mi
 80136c8:	2320      	movmi	r3, #32
 80136ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136ce:	0713      	lsls	r3, r2, #28
 80136d0:	bf44      	itt	mi
 80136d2:	232b      	movmi	r3, #43	@ 0x2b
 80136d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136d8:	f89a 3000 	ldrb.w	r3, [sl]
 80136dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80136de:	d015      	beq.n	801370c <_vfiprintf_r+0x120>
 80136e0:	9a07      	ldr	r2, [sp, #28]
 80136e2:	4654      	mov	r4, sl
 80136e4:	2000      	movs	r0, #0
 80136e6:	f04f 0c0a 	mov.w	ip, #10
 80136ea:	4621      	mov	r1, r4
 80136ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136f0:	3b30      	subs	r3, #48	@ 0x30
 80136f2:	2b09      	cmp	r3, #9
 80136f4:	d94b      	bls.n	801378e <_vfiprintf_r+0x1a2>
 80136f6:	b1b0      	cbz	r0, 8013726 <_vfiprintf_r+0x13a>
 80136f8:	9207      	str	r2, [sp, #28]
 80136fa:	e014      	b.n	8013726 <_vfiprintf_r+0x13a>
 80136fc:	eba0 0308 	sub.w	r3, r0, r8
 8013700:	fa09 f303 	lsl.w	r3, r9, r3
 8013704:	4313      	orrs	r3, r2
 8013706:	9304      	str	r3, [sp, #16]
 8013708:	46a2      	mov	sl, r4
 801370a:	e7d2      	b.n	80136b2 <_vfiprintf_r+0xc6>
 801370c:	9b03      	ldr	r3, [sp, #12]
 801370e:	1d19      	adds	r1, r3, #4
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	9103      	str	r1, [sp, #12]
 8013714:	2b00      	cmp	r3, #0
 8013716:	bfbb      	ittet	lt
 8013718:	425b      	neglt	r3, r3
 801371a:	f042 0202 	orrlt.w	r2, r2, #2
 801371e:	9307      	strge	r3, [sp, #28]
 8013720:	9307      	strlt	r3, [sp, #28]
 8013722:	bfb8      	it	lt
 8013724:	9204      	strlt	r2, [sp, #16]
 8013726:	7823      	ldrb	r3, [r4, #0]
 8013728:	2b2e      	cmp	r3, #46	@ 0x2e
 801372a:	d10a      	bne.n	8013742 <_vfiprintf_r+0x156>
 801372c:	7863      	ldrb	r3, [r4, #1]
 801372e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013730:	d132      	bne.n	8013798 <_vfiprintf_r+0x1ac>
 8013732:	9b03      	ldr	r3, [sp, #12]
 8013734:	1d1a      	adds	r2, r3, #4
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	9203      	str	r2, [sp, #12]
 801373a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801373e:	3402      	adds	r4, #2
 8013740:	9305      	str	r3, [sp, #20]
 8013742:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013818 <_vfiprintf_r+0x22c>
 8013746:	7821      	ldrb	r1, [r4, #0]
 8013748:	2203      	movs	r2, #3
 801374a:	4650      	mov	r0, sl
 801374c:	f7ec fd50 	bl	80001f0 <memchr>
 8013750:	b138      	cbz	r0, 8013762 <_vfiprintf_r+0x176>
 8013752:	9b04      	ldr	r3, [sp, #16]
 8013754:	eba0 000a 	sub.w	r0, r0, sl
 8013758:	2240      	movs	r2, #64	@ 0x40
 801375a:	4082      	lsls	r2, r0
 801375c:	4313      	orrs	r3, r2
 801375e:	3401      	adds	r4, #1
 8013760:	9304      	str	r3, [sp, #16]
 8013762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013766:	4829      	ldr	r0, [pc, #164]	@ (801380c <_vfiprintf_r+0x220>)
 8013768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801376c:	2206      	movs	r2, #6
 801376e:	f7ec fd3f 	bl	80001f0 <memchr>
 8013772:	2800      	cmp	r0, #0
 8013774:	d03f      	beq.n	80137f6 <_vfiprintf_r+0x20a>
 8013776:	4b26      	ldr	r3, [pc, #152]	@ (8013810 <_vfiprintf_r+0x224>)
 8013778:	bb1b      	cbnz	r3, 80137c2 <_vfiprintf_r+0x1d6>
 801377a:	9b03      	ldr	r3, [sp, #12]
 801377c:	3307      	adds	r3, #7
 801377e:	f023 0307 	bic.w	r3, r3, #7
 8013782:	3308      	adds	r3, #8
 8013784:	9303      	str	r3, [sp, #12]
 8013786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013788:	443b      	add	r3, r7
 801378a:	9309      	str	r3, [sp, #36]	@ 0x24
 801378c:	e76a      	b.n	8013664 <_vfiprintf_r+0x78>
 801378e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013792:	460c      	mov	r4, r1
 8013794:	2001      	movs	r0, #1
 8013796:	e7a8      	b.n	80136ea <_vfiprintf_r+0xfe>
 8013798:	2300      	movs	r3, #0
 801379a:	3401      	adds	r4, #1
 801379c:	9305      	str	r3, [sp, #20]
 801379e:	4619      	mov	r1, r3
 80137a0:	f04f 0c0a 	mov.w	ip, #10
 80137a4:	4620      	mov	r0, r4
 80137a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137aa:	3a30      	subs	r2, #48	@ 0x30
 80137ac:	2a09      	cmp	r2, #9
 80137ae:	d903      	bls.n	80137b8 <_vfiprintf_r+0x1cc>
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d0c6      	beq.n	8013742 <_vfiprintf_r+0x156>
 80137b4:	9105      	str	r1, [sp, #20]
 80137b6:	e7c4      	b.n	8013742 <_vfiprintf_r+0x156>
 80137b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80137bc:	4604      	mov	r4, r0
 80137be:	2301      	movs	r3, #1
 80137c0:	e7f0      	b.n	80137a4 <_vfiprintf_r+0x1b8>
 80137c2:	ab03      	add	r3, sp, #12
 80137c4:	9300      	str	r3, [sp, #0]
 80137c6:	462a      	mov	r2, r5
 80137c8:	4b12      	ldr	r3, [pc, #72]	@ (8013814 <_vfiprintf_r+0x228>)
 80137ca:	a904      	add	r1, sp, #16
 80137cc:	4630      	mov	r0, r6
 80137ce:	f3af 8000 	nop.w
 80137d2:	4607      	mov	r7, r0
 80137d4:	1c78      	adds	r0, r7, #1
 80137d6:	d1d6      	bne.n	8013786 <_vfiprintf_r+0x19a>
 80137d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137da:	07d9      	lsls	r1, r3, #31
 80137dc:	d405      	bmi.n	80137ea <_vfiprintf_r+0x1fe>
 80137de:	89ab      	ldrh	r3, [r5, #12]
 80137e0:	059a      	lsls	r2, r3, #22
 80137e2:	d402      	bmi.n	80137ea <_vfiprintf_r+0x1fe>
 80137e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80137e6:	f7ff fe21 	bl	801342c <__retarget_lock_release_recursive>
 80137ea:	89ab      	ldrh	r3, [r5, #12]
 80137ec:	065b      	lsls	r3, r3, #25
 80137ee:	f53f af1f 	bmi.w	8013630 <_vfiprintf_r+0x44>
 80137f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80137f4:	e71e      	b.n	8013634 <_vfiprintf_r+0x48>
 80137f6:	ab03      	add	r3, sp, #12
 80137f8:	9300      	str	r3, [sp, #0]
 80137fa:	462a      	mov	r2, r5
 80137fc:	4b05      	ldr	r3, [pc, #20]	@ (8013814 <_vfiprintf_r+0x228>)
 80137fe:	a904      	add	r1, sp, #16
 8013800:	4630      	mov	r0, r6
 8013802:	f000 f879 	bl	80138f8 <_printf_i>
 8013806:	e7e4      	b.n	80137d2 <_vfiprintf_r+0x1e6>
 8013808:	08014d1e 	.word	0x08014d1e
 801380c:	08014d28 	.word	0x08014d28
 8013810:	00000000 	.word	0x00000000
 8013814:	080135c7 	.word	0x080135c7
 8013818:	08014d24 	.word	0x08014d24

0801381c <_printf_common>:
 801381c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013820:	4616      	mov	r6, r2
 8013822:	4698      	mov	r8, r3
 8013824:	688a      	ldr	r2, [r1, #8]
 8013826:	690b      	ldr	r3, [r1, #16]
 8013828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801382c:	4293      	cmp	r3, r2
 801382e:	bfb8      	it	lt
 8013830:	4613      	movlt	r3, r2
 8013832:	6033      	str	r3, [r6, #0]
 8013834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013838:	4607      	mov	r7, r0
 801383a:	460c      	mov	r4, r1
 801383c:	b10a      	cbz	r2, 8013842 <_printf_common+0x26>
 801383e:	3301      	adds	r3, #1
 8013840:	6033      	str	r3, [r6, #0]
 8013842:	6823      	ldr	r3, [r4, #0]
 8013844:	0699      	lsls	r1, r3, #26
 8013846:	bf42      	ittt	mi
 8013848:	6833      	ldrmi	r3, [r6, #0]
 801384a:	3302      	addmi	r3, #2
 801384c:	6033      	strmi	r3, [r6, #0]
 801384e:	6825      	ldr	r5, [r4, #0]
 8013850:	f015 0506 	ands.w	r5, r5, #6
 8013854:	d106      	bne.n	8013864 <_printf_common+0x48>
 8013856:	f104 0a19 	add.w	sl, r4, #25
 801385a:	68e3      	ldr	r3, [r4, #12]
 801385c:	6832      	ldr	r2, [r6, #0]
 801385e:	1a9b      	subs	r3, r3, r2
 8013860:	42ab      	cmp	r3, r5
 8013862:	dc26      	bgt.n	80138b2 <_printf_common+0x96>
 8013864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013868:	6822      	ldr	r2, [r4, #0]
 801386a:	3b00      	subs	r3, #0
 801386c:	bf18      	it	ne
 801386e:	2301      	movne	r3, #1
 8013870:	0692      	lsls	r2, r2, #26
 8013872:	d42b      	bmi.n	80138cc <_printf_common+0xb0>
 8013874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013878:	4641      	mov	r1, r8
 801387a:	4638      	mov	r0, r7
 801387c:	47c8      	blx	r9
 801387e:	3001      	adds	r0, #1
 8013880:	d01e      	beq.n	80138c0 <_printf_common+0xa4>
 8013882:	6823      	ldr	r3, [r4, #0]
 8013884:	6922      	ldr	r2, [r4, #16]
 8013886:	f003 0306 	and.w	r3, r3, #6
 801388a:	2b04      	cmp	r3, #4
 801388c:	bf02      	ittt	eq
 801388e:	68e5      	ldreq	r5, [r4, #12]
 8013890:	6833      	ldreq	r3, [r6, #0]
 8013892:	1aed      	subeq	r5, r5, r3
 8013894:	68a3      	ldr	r3, [r4, #8]
 8013896:	bf0c      	ite	eq
 8013898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801389c:	2500      	movne	r5, #0
 801389e:	4293      	cmp	r3, r2
 80138a0:	bfc4      	itt	gt
 80138a2:	1a9b      	subgt	r3, r3, r2
 80138a4:	18ed      	addgt	r5, r5, r3
 80138a6:	2600      	movs	r6, #0
 80138a8:	341a      	adds	r4, #26
 80138aa:	42b5      	cmp	r5, r6
 80138ac:	d11a      	bne.n	80138e4 <_printf_common+0xc8>
 80138ae:	2000      	movs	r0, #0
 80138b0:	e008      	b.n	80138c4 <_printf_common+0xa8>
 80138b2:	2301      	movs	r3, #1
 80138b4:	4652      	mov	r2, sl
 80138b6:	4641      	mov	r1, r8
 80138b8:	4638      	mov	r0, r7
 80138ba:	47c8      	blx	r9
 80138bc:	3001      	adds	r0, #1
 80138be:	d103      	bne.n	80138c8 <_printf_common+0xac>
 80138c0:	f04f 30ff 	mov.w	r0, #4294967295
 80138c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138c8:	3501      	adds	r5, #1
 80138ca:	e7c6      	b.n	801385a <_printf_common+0x3e>
 80138cc:	18e1      	adds	r1, r4, r3
 80138ce:	1c5a      	adds	r2, r3, #1
 80138d0:	2030      	movs	r0, #48	@ 0x30
 80138d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80138d6:	4422      	add	r2, r4
 80138d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80138dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80138e0:	3302      	adds	r3, #2
 80138e2:	e7c7      	b.n	8013874 <_printf_common+0x58>
 80138e4:	2301      	movs	r3, #1
 80138e6:	4622      	mov	r2, r4
 80138e8:	4641      	mov	r1, r8
 80138ea:	4638      	mov	r0, r7
 80138ec:	47c8      	blx	r9
 80138ee:	3001      	adds	r0, #1
 80138f0:	d0e6      	beq.n	80138c0 <_printf_common+0xa4>
 80138f2:	3601      	adds	r6, #1
 80138f4:	e7d9      	b.n	80138aa <_printf_common+0x8e>
	...

080138f8 <_printf_i>:
 80138f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138fc:	7e0f      	ldrb	r7, [r1, #24]
 80138fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013900:	2f78      	cmp	r7, #120	@ 0x78
 8013902:	4691      	mov	r9, r2
 8013904:	4680      	mov	r8, r0
 8013906:	460c      	mov	r4, r1
 8013908:	469a      	mov	sl, r3
 801390a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801390e:	d807      	bhi.n	8013920 <_printf_i+0x28>
 8013910:	2f62      	cmp	r7, #98	@ 0x62
 8013912:	d80a      	bhi.n	801392a <_printf_i+0x32>
 8013914:	2f00      	cmp	r7, #0
 8013916:	f000 80d1 	beq.w	8013abc <_printf_i+0x1c4>
 801391a:	2f58      	cmp	r7, #88	@ 0x58
 801391c:	f000 80b8 	beq.w	8013a90 <_printf_i+0x198>
 8013920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013928:	e03a      	b.n	80139a0 <_printf_i+0xa8>
 801392a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801392e:	2b15      	cmp	r3, #21
 8013930:	d8f6      	bhi.n	8013920 <_printf_i+0x28>
 8013932:	a101      	add	r1, pc, #4	@ (adr r1, 8013938 <_printf_i+0x40>)
 8013934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013938:	08013991 	.word	0x08013991
 801393c:	080139a5 	.word	0x080139a5
 8013940:	08013921 	.word	0x08013921
 8013944:	08013921 	.word	0x08013921
 8013948:	08013921 	.word	0x08013921
 801394c:	08013921 	.word	0x08013921
 8013950:	080139a5 	.word	0x080139a5
 8013954:	08013921 	.word	0x08013921
 8013958:	08013921 	.word	0x08013921
 801395c:	08013921 	.word	0x08013921
 8013960:	08013921 	.word	0x08013921
 8013964:	08013aa3 	.word	0x08013aa3
 8013968:	080139cf 	.word	0x080139cf
 801396c:	08013a5d 	.word	0x08013a5d
 8013970:	08013921 	.word	0x08013921
 8013974:	08013921 	.word	0x08013921
 8013978:	08013ac5 	.word	0x08013ac5
 801397c:	08013921 	.word	0x08013921
 8013980:	080139cf 	.word	0x080139cf
 8013984:	08013921 	.word	0x08013921
 8013988:	08013921 	.word	0x08013921
 801398c:	08013a65 	.word	0x08013a65
 8013990:	6833      	ldr	r3, [r6, #0]
 8013992:	1d1a      	adds	r2, r3, #4
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	6032      	str	r2, [r6, #0]
 8013998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801399c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80139a0:	2301      	movs	r3, #1
 80139a2:	e09c      	b.n	8013ade <_printf_i+0x1e6>
 80139a4:	6833      	ldr	r3, [r6, #0]
 80139a6:	6820      	ldr	r0, [r4, #0]
 80139a8:	1d19      	adds	r1, r3, #4
 80139aa:	6031      	str	r1, [r6, #0]
 80139ac:	0606      	lsls	r6, r0, #24
 80139ae:	d501      	bpl.n	80139b4 <_printf_i+0xbc>
 80139b0:	681d      	ldr	r5, [r3, #0]
 80139b2:	e003      	b.n	80139bc <_printf_i+0xc4>
 80139b4:	0645      	lsls	r5, r0, #25
 80139b6:	d5fb      	bpl.n	80139b0 <_printf_i+0xb8>
 80139b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80139bc:	2d00      	cmp	r5, #0
 80139be:	da03      	bge.n	80139c8 <_printf_i+0xd0>
 80139c0:	232d      	movs	r3, #45	@ 0x2d
 80139c2:	426d      	negs	r5, r5
 80139c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80139c8:	4858      	ldr	r0, [pc, #352]	@ (8013b2c <_printf_i+0x234>)
 80139ca:	230a      	movs	r3, #10
 80139cc:	e011      	b.n	80139f2 <_printf_i+0xfa>
 80139ce:	6821      	ldr	r1, [r4, #0]
 80139d0:	6833      	ldr	r3, [r6, #0]
 80139d2:	0608      	lsls	r0, r1, #24
 80139d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80139d8:	d402      	bmi.n	80139e0 <_printf_i+0xe8>
 80139da:	0649      	lsls	r1, r1, #25
 80139dc:	bf48      	it	mi
 80139de:	b2ad      	uxthmi	r5, r5
 80139e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80139e2:	4852      	ldr	r0, [pc, #328]	@ (8013b2c <_printf_i+0x234>)
 80139e4:	6033      	str	r3, [r6, #0]
 80139e6:	bf14      	ite	ne
 80139e8:	230a      	movne	r3, #10
 80139ea:	2308      	moveq	r3, #8
 80139ec:	2100      	movs	r1, #0
 80139ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80139f2:	6866      	ldr	r6, [r4, #4]
 80139f4:	60a6      	str	r6, [r4, #8]
 80139f6:	2e00      	cmp	r6, #0
 80139f8:	db05      	blt.n	8013a06 <_printf_i+0x10e>
 80139fa:	6821      	ldr	r1, [r4, #0]
 80139fc:	432e      	orrs	r6, r5
 80139fe:	f021 0104 	bic.w	r1, r1, #4
 8013a02:	6021      	str	r1, [r4, #0]
 8013a04:	d04b      	beq.n	8013a9e <_printf_i+0x1a6>
 8013a06:	4616      	mov	r6, r2
 8013a08:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a0c:	fb03 5711 	mls	r7, r3, r1, r5
 8013a10:	5dc7      	ldrb	r7, [r0, r7]
 8013a12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a16:	462f      	mov	r7, r5
 8013a18:	42bb      	cmp	r3, r7
 8013a1a:	460d      	mov	r5, r1
 8013a1c:	d9f4      	bls.n	8013a08 <_printf_i+0x110>
 8013a1e:	2b08      	cmp	r3, #8
 8013a20:	d10b      	bne.n	8013a3a <_printf_i+0x142>
 8013a22:	6823      	ldr	r3, [r4, #0]
 8013a24:	07df      	lsls	r7, r3, #31
 8013a26:	d508      	bpl.n	8013a3a <_printf_i+0x142>
 8013a28:	6923      	ldr	r3, [r4, #16]
 8013a2a:	6861      	ldr	r1, [r4, #4]
 8013a2c:	4299      	cmp	r1, r3
 8013a2e:	bfde      	ittt	le
 8013a30:	2330      	movle	r3, #48	@ 0x30
 8013a32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013a3a:	1b92      	subs	r2, r2, r6
 8013a3c:	6122      	str	r2, [r4, #16]
 8013a3e:	f8cd a000 	str.w	sl, [sp]
 8013a42:	464b      	mov	r3, r9
 8013a44:	aa03      	add	r2, sp, #12
 8013a46:	4621      	mov	r1, r4
 8013a48:	4640      	mov	r0, r8
 8013a4a:	f7ff fee7 	bl	801381c <_printf_common>
 8013a4e:	3001      	adds	r0, #1
 8013a50:	d14a      	bne.n	8013ae8 <_printf_i+0x1f0>
 8013a52:	f04f 30ff 	mov.w	r0, #4294967295
 8013a56:	b004      	add	sp, #16
 8013a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a5c:	6823      	ldr	r3, [r4, #0]
 8013a5e:	f043 0320 	orr.w	r3, r3, #32
 8013a62:	6023      	str	r3, [r4, #0]
 8013a64:	4832      	ldr	r0, [pc, #200]	@ (8013b30 <_printf_i+0x238>)
 8013a66:	2778      	movs	r7, #120	@ 0x78
 8013a68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013a6c:	6823      	ldr	r3, [r4, #0]
 8013a6e:	6831      	ldr	r1, [r6, #0]
 8013a70:	061f      	lsls	r7, r3, #24
 8013a72:	f851 5b04 	ldr.w	r5, [r1], #4
 8013a76:	d402      	bmi.n	8013a7e <_printf_i+0x186>
 8013a78:	065f      	lsls	r7, r3, #25
 8013a7a:	bf48      	it	mi
 8013a7c:	b2ad      	uxthmi	r5, r5
 8013a7e:	6031      	str	r1, [r6, #0]
 8013a80:	07d9      	lsls	r1, r3, #31
 8013a82:	bf44      	itt	mi
 8013a84:	f043 0320 	orrmi.w	r3, r3, #32
 8013a88:	6023      	strmi	r3, [r4, #0]
 8013a8a:	b11d      	cbz	r5, 8013a94 <_printf_i+0x19c>
 8013a8c:	2310      	movs	r3, #16
 8013a8e:	e7ad      	b.n	80139ec <_printf_i+0xf4>
 8013a90:	4826      	ldr	r0, [pc, #152]	@ (8013b2c <_printf_i+0x234>)
 8013a92:	e7e9      	b.n	8013a68 <_printf_i+0x170>
 8013a94:	6823      	ldr	r3, [r4, #0]
 8013a96:	f023 0320 	bic.w	r3, r3, #32
 8013a9a:	6023      	str	r3, [r4, #0]
 8013a9c:	e7f6      	b.n	8013a8c <_printf_i+0x194>
 8013a9e:	4616      	mov	r6, r2
 8013aa0:	e7bd      	b.n	8013a1e <_printf_i+0x126>
 8013aa2:	6833      	ldr	r3, [r6, #0]
 8013aa4:	6825      	ldr	r5, [r4, #0]
 8013aa6:	6961      	ldr	r1, [r4, #20]
 8013aa8:	1d18      	adds	r0, r3, #4
 8013aaa:	6030      	str	r0, [r6, #0]
 8013aac:	062e      	lsls	r6, r5, #24
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	d501      	bpl.n	8013ab6 <_printf_i+0x1be>
 8013ab2:	6019      	str	r1, [r3, #0]
 8013ab4:	e002      	b.n	8013abc <_printf_i+0x1c4>
 8013ab6:	0668      	lsls	r0, r5, #25
 8013ab8:	d5fb      	bpl.n	8013ab2 <_printf_i+0x1ba>
 8013aba:	8019      	strh	r1, [r3, #0]
 8013abc:	2300      	movs	r3, #0
 8013abe:	6123      	str	r3, [r4, #16]
 8013ac0:	4616      	mov	r6, r2
 8013ac2:	e7bc      	b.n	8013a3e <_printf_i+0x146>
 8013ac4:	6833      	ldr	r3, [r6, #0]
 8013ac6:	1d1a      	adds	r2, r3, #4
 8013ac8:	6032      	str	r2, [r6, #0]
 8013aca:	681e      	ldr	r6, [r3, #0]
 8013acc:	6862      	ldr	r2, [r4, #4]
 8013ace:	2100      	movs	r1, #0
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f7ec fb8d 	bl	80001f0 <memchr>
 8013ad6:	b108      	cbz	r0, 8013adc <_printf_i+0x1e4>
 8013ad8:	1b80      	subs	r0, r0, r6
 8013ada:	6060      	str	r0, [r4, #4]
 8013adc:	6863      	ldr	r3, [r4, #4]
 8013ade:	6123      	str	r3, [r4, #16]
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ae6:	e7aa      	b.n	8013a3e <_printf_i+0x146>
 8013ae8:	6923      	ldr	r3, [r4, #16]
 8013aea:	4632      	mov	r2, r6
 8013aec:	4649      	mov	r1, r9
 8013aee:	4640      	mov	r0, r8
 8013af0:	47d0      	blx	sl
 8013af2:	3001      	adds	r0, #1
 8013af4:	d0ad      	beq.n	8013a52 <_printf_i+0x15a>
 8013af6:	6823      	ldr	r3, [r4, #0]
 8013af8:	079b      	lsls	r3, r3, #30
 8013afa:	d413      	bmi.n	8013b24 <_printf_i+0x22c>
 8013afc:	68e0      	ldr	r0, [r4, #12]
 8013afe:	9b03      	ldr	r3, [sp, #12]
 8013b00:	4298      	cmp	r0, r3
 8013b02:	bfb8      	it	lt
 8013b04:	4618      	movlt	r0, r3
 8013b06:	e7a6      	b.n	8013a56 <_printf_i+0x15e>
 8013b08:	2301      	movs	r3, #1
 8013b0a:	4632      	mov	r2, r6
 8013b0c:	4649      	mov	r1, r9
 8013b0e:	4640      	mov	r0, r8
 8013b10:	47d0      	blx	sl
 8013b12:	3001      	adds	r0, #1
 8013b14:	d09d      	beq.n	8013a52 <_printf_i+0x15a>
 8013b16:	3501      	adds	r5, #1
 8013b18:	68e3      	ldr	r3, [r4, #12]
 8013b1a:	9903      	ldr	r1, [sp, #12]
 8013b1c:	1a5b      	subs	r3, r3, r1
 8013b1e:	42ab      	cmp	r3, r5
 8013b20:	dcf2      	bgt.n	8013b08 <_printf_i+0x210>
 8013b22:	e7eb      	b.n	8013afc <_printf_i+0x204>
 8013b24:	2500      	movs	r5, #0
 8013b26:	f104 0619 	add.w	r6, r4, #25
 8013b2a:	e7f5      	b.n	8013b18 <_printf_i+0x220>
 8013b2c:	08014d2f 	.word	0x08014d2f
 8013b30:	08014d40 	.word	0x08014d40

08013b34 <__sflush_r>:
 8013b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3c:	0716      	lsls	r6, r2, #28
 8013b3e:	4605      	mov	r5, r0
 8013b40:	460c      	mov	r4, r1
 8013b42:	d454      	bmi.n	8013bee <__sflush_r+0xba>
 8013b44:	684b      	ldr	r3, [r1, #4]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	dc02      	bgt.n	8013b50 <__sflush_r+0x1c>
 8013b4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	dd48      	ble.n	8013be2 <__sflush_r+0xae>
 8013b50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013b52:	2e00      	cmp	r6, #0
 8013b54:	d045      	beq.n	8013be2 <__sflush_r+0xae>
 8013b56:	2300      	movs	r3, #0
 8013b58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013b5c:	682f      	ldr	r7, [r5, #0]
 8013b5e:	6a21      	ldr	r1, [r4, #32]
 8013b60:	602b      	str	r3, [r5, #0]
 8013b62:	d030      	beq.n	8013bc6 <__sflush_r+0x92>
 8013b64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013b66:	89a3      	ldrh	r3, [r4, #12]
 8013b68:	0759      	lsls	r1, r3, #29
 8013b6a:	d505      	bpl.n	8013b78 <__sflush_r+0x44>
 8013b6c:	6863      	ldr	r3, [r4, #4]
 8013b6e:	1ad2      	subs	r2, r2, r3
 8013b70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013b72:	b10b      	cbz	r3, 8013b78 <__sflush_r+0x44>
 8013b74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013b76:	1ad2      	subs	r2, r2, r3
 8013b78:	2300      	movs	r3, #0
 8013b7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013b7c:	6a21      	ldr	r1, [r4, #32]
 8013b7e:	4628      	mov	r0, r5
 8013b80:	47b0      	blx	r6
 8013b82:	1c43      	adds	r3, r0, #1
 8013b84:	89a3      	ldrh	r3, [r4, #12]
 8013b86:	d106      	bne.n	8013b96 <__sflush_r+0x62>
 8013b88:	6829      	ldr	r1, [r5, #0]
 8013b8a:	291d      	cmp	r1, #29
 8013b8c:	d82b      	bhi.n	8013be6 <__sflush_r+0xb2>
 8013b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8013c38 <__sflush_r+0x104>)
 8013b90:	40ca      	lsrs	r2, r1
 8013b92:	07d6      	lsls	r6, r2, #31
 8013b94:	d527      	bpl.n	8013be6 <__sflush_r+0xb2>
 8013b96:	2200      	movs	r2, #0
 8013b98:	6062      	str	r2, [r4, #4]
 8013b9a:	04d9      	lsls	r1, r3, #19
 8013b9c:	6922      	ldr	r2, [r4, #16]
 8013b9e:	6022      	str	r2, [r4, #0]
 8013ba0:	d504      	bpl.n	8013bac <__sflush_r+0x78>
 8013ba2:	1c42      	adds	r2, r0, #1
 8013ba4:	d101      	bne.n	8013baa <__sflush_r+0x76>
 8013ba6:	682b      	ldr	r3, [r5, #0]
 8013ba8:	b903      	cbnz	r3, 8013bac <__sflush_r+0x78>
 8013baa:	6560      	str	r0, [r4, #84]	@ 0x54
 8013bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013bae:	602f      	str	r7, [r5, #0]
 8013bb0:	b1b9      	cbz	r1, 8013be2 <__sflush_r+0xae>
 8013bb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013bb6:	4299      	cmp	r1, r3
 8013bb8:	d002      	beq.n	8013bc0 <__sflush_r+0x8c>
 8013bba:	4628      	mov	r0, r5
 8013bbc:	f7ff fca2 	bl	8013504 <_free_r>
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8013bc4:	e00d      	b.n	8013be2 <__sflush_r+0xae>
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	4628      	mov	r0, r5
 8013bca:	47b0      	blx	r6
 8013bcc:	4602      	mov	r2, r0
 8013bce:	1c50      	adds	r0, r2, #1
 8013bd0:	d1c9      	bne.n	8013b66 <__sflush_r+0x32>
 8013bd2:	682b      	ldr	r3, [r5, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d0c6      	beq.n	8013b66 <__sflush_r+0x32>
 8013bd8:	2b1d      	cmp	r3, #29
 8013bda:	d001      	beq.n	8013be0 <__sflush_r+0xac>
 8013bdc:	2b16      	cmp	r3, #22
 8013bde:	d11e      	bne.n	8013c1e <__sflush_r+0xea>
 8013be0:	602f      	str	r7, [r5, #0]
 8013be2:	2000      	movs	r0, #0
 8013be4:	e022      	b.n	8013c2c <__sflush_r+0xf8>
 8013be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bea:	b21b      	sxth	r3, r3
 8013bec:	e01b      	b.n	8013c26 <__sflush_r+0xf2>
 8013bee:	690f      	ldr	r7, [r1, #16]
 8013bf0:	2f00      	cmp	r7, #0
 8013bf2:	d0f6      	beq.n	8013be2 <__sflush_r+0xae>
 8013bf4:	0793      	lsls	r3, r2, #30
 8013bf6:	680e      	ldr	r6, [r1, #0]
 8013bf8:	bf08      	it	eq
 8013bfa:	694b      	ldreq	r3, [r1, #20]
 8013bfc:	600f      	str	r7, [r1, #0]
 8013bfe:	bf18      	it	ne
 8013c00:	2300      	movne	r3, #0
 8013c02:	eba6 0807 	sub.w	r8, r6, r7
 8013c06:	608b      	str	r3, [r1, #8]
 8013c08:	f1b8 0f00 	cmp.w	r8, #0
 8013c0c:	dde9      	ble.n	8013be2 <__sflush_r+0xae>
 8013c0e:	6a21      	ldr	r1, [r4, #32]
 8013c10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013c12:	4643      	mov	r3, r8
 8013c14:	463a      	mov	r2, r7
 8013c16:	4628      	mov	r0, r5
 8013c18:	47b0      	blx	r6
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	dc08      	bgt.n	8013c30 <__sflush_r+0xfc>
 8013c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c26:	81a3      	strh	r3, [r4, #12]
 8013c28:	f04f 30ff 	mov.w	r0, #4294967295
 8013c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c30:	4407      	add	r7, r0
 8013c32:	eba8 0800 	sub.w	r8, r8, r0
 8013c36:	e7e7      	b.n	8013c08 <__sflush_r+0xd4>
 8013c38:	20400001 	.word	0x20400001

08013c3c <_fflush_r>:
 8013c3c:	b538      	push	{r3, r4, r5, lr}
 8013c3e:	690b      	ldr	r3, [r1, #16]
 8013c40:	4605      	mov	r5, r0
 8013c42:	460c      	mov	r4, r1
 8013c44:	b913      	cbnz	r3, 8013c4c <_fflush_r+0x10>
 8013c46:	2500      	movs	r5, #0
 8013c48:	4628      	mov	r0, r5
 8013c4a:	bd38      	pop	{r3, r4, r5, pc}
 8013c4c:	b118      	cbz	r0, 8013c56 <_fflush_r+0x1a>
 8013c4e:	6a03      	ldr	r3, [r0, #32]
 8013c50:	b90b      	cbnz	r3, 8013c56 <_fflush_r+0x1a>
 8013c52:	f7ff fa91 	bl	8013178 <__sinit>
 8013c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d0f3      	beq.n	8013c46 <_fflush_r+0xa>
 8013c5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013c60:	07d0      	lsls	r0, r2, #31
 8013c62:	d404      	bmi.n	8013c6e <_fflush_r+0x32>
 8013c64:	0599      	lsls	r1, r3, #22
 8013c66:	d402      	bmi.n	8013c6e <_fflush_r+0x32>
 8013c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c6a:	f7ff fbde 	bl	801342a <__retarget_lock_acquire_recursive>
 8013c6e:	4628      	mov	r0, r5
 8013c70:	4621      	mov	r1, r4
 8013c72:	f7ff ff5f 	bl	8013b34 <__sflush_r>
 8013c76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013c78:	07da      	lsls	r2, r3, #31
 8013c7a:	4605      	mov	r5, r0
 8013c7c:	d4e4      	bmi.n	8013c48 <_fflush_r+0xc>
 8013c7e:	89a3      	ldrh	r3, [r4, #12]
 8013c80:	059b      	lsls	r3, r3, #22
 8013c82:	d4e1      	bmi.n	8013c48 <_fflush_r+0xc>
 8013c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c86:	f7ff fbd1 	bl	801342c <__retarget_lock_release_recursive>
 8013c8a:	e7dd      	b.n	8013c48 <_fflush_r+0xc>

08013c8c <__swbuf_r>:
 8013c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c8e:	460e      	mov	r6, r1
 8013c90:	4614      	mov	r4, r2
 8013c92:	4605      	mov	r5, r0
 8013c94:	b118      	cbz	r0, 8013c9e <__swbuf_r+0x12>
 8013c96:	6a03      	ldr	r3, [r0, #32]
 8013c98:	b90b      	cbnz	r3, 8013c9e <__swbuf_r+0x12>
 8013c9a:	f7ff fa6d 	bl	8013178 <__sinit>
 8013c9e:	69a3      	ldr	r3, [r4, #24]
 8013ca0:	60a3      	str	r3, [r4, #8]
 8013ca2:	89a3      	ldrh	r3, [r4, #12]
 8013ca4:	071a      	lsls	r2, r3, #28
 8013ca6:	d501      	bpl.n	8013cac <__swbuf_r+0x20>
 8013ca8:	6923      	ldr	r3, [r4, #16]
 8013caa:	b943      	cbnz	r3, 8013cbe <__swbuf_r+0x32>
 8013cac:	4621      	mov	r1, r4
 8013cae:	4628      	mov	r0, r5
 8013cb0:	f000 f82a 	bl	8013d08 <__swsetup_r>
 8013cb4:	b118      	cbz	r0, 8013cbe <__swbuf_r+0x32>
 8013cb6:	f04f 37ff 	mov.w	r7, #4294967295
 8013cba:	4638      	mov	r0, r7
 8013cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cbe:	6823      	ldr	r3, [r4, #0]
 8013cc0:	6922      	ldr	r2, [r4, #16]
 8013cc2:	1a98      	subs	r0, r3, r2
 8013cc4:	6963      	ldr	r3, [r4, #20]
 8013cc6:	b2f6      	uxtb	r6, r6
 8013cc8:	4283      	cmp	r3, r0
 8013cca:	4637      	mov	r7, r6
 8013ccc:	dc05      	bgt.n	8013cda <__swbuf_r+0x4e>
 8013cce:	4621      	mov	r1, r4
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	f7ff ffb3 	bl	8013c3c <_fflush_r>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d1ed      	bne.n	8013cb6 <__swbuf_r+0x2a>
 8013cda:	68a3      	ldr	r3, [r4, #8]
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	60a3      	str	r3, [r4, #8]
 8013ce0:	6823      	ldr	r3, [r4, #0]
 8013ce2:	1c5a      	adds	r2, r3, #1
 8013ce4:	6022      	str	r2, [r4, #0]
 8013ce6:	701e      	strb	r6, [r3, #0]
 8013ce8:	6962      	ldr	r2, [r4, #20]
 8013cea:	1c43      	adds	r3, r0, #1
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d004      	beq.n	8013cfa <__swbuf_r+0x6e>
 8013cf0:	89a3      	ldrh	r3, [r4, #12]
 8013cf2:	07db      	lsls	r3, r3, #31
 8013cf4:	d5e1      	bpl.n	8013cba <__swbuf_r+0x2e>
 8013cf6:	2e0a      	cmp	r6, #10
 8013cf8:	d1df      	bne.n	8013cba <__swbuf_r+0x2e>
 8013cfa:	4621      	mov	r1, r4
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	f7ff ff9d 	bl	8013c3c <_fflush_r>
 8013d02:	2800      	cmp	r0, #0
 8013d04:	d0d9      	beq.n	8013cba <__swbuf_r+0x2e>
 8013d06:	e7d6      	b.n	8013cb6 <__swbuf_r+0x2a>

08013d08 <__swsetup_r>:
 8013d08:	b538      	push	{r3, r4, r5, lr}
 8013d0a:	4b29      	ldr	r3, [pc, #164]	@ (8013db0 <__swsetup_r+0xa8>)
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	6818      	ldr	r0, [r3, #0]
 8013d10:	460c      	mov	r4, r1
 8013d12:	b118      	cbz	r0, 8013d1c <__swsetup_r+0x14>
 8013d14:	6a03      	ldr	r3, [r0, #32]
 8013d16:	b90b      	cbnz	r3, 8013d1c <__swsetup_r+0x14>
 8013d18:	f7ff fa2e 	bl	8013178 <__sinit>
 8013d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d20:	0719      	lsls	r1, r3, #28
 8013d22:	d422      	bmi.n	8013d6a <__swsetup_r+0x62>
 8013d24:	06da      	lsls	r2, r3, #27
 8013d26:	d407      	bmi.n	8013d38 <__swsetup_r+0x30>
 8013d28:	2209      	movs	r2, #9
 8013d2a:	602a      	str	r2, [r5, #0]
 8013d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d30:	81a3      	strh	r3, [r4, #12]
 8013d32:	f04f 30ff 	mov.w	r0, #4294967295
 8013d36:	e033      	b.n	8013da0 <__swsetup_r+0x98>
 8013d38:	0758      	lsls	r0, r3, #29
 8013d3a:	d512      	bpl.n	8013d62 <__swsetup_r+0x5a>
 8013d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013d3e:	b141      	cbz	r1, 8013d52 <__swsetup_r+0x4a>
 8013d40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d44:	4299      	cmp	r1, r3
 8013d46:	d002      	beq.n	8013d4e <__swsetup_r+0x46>
 8013d48:	4628      	mov	r0, r5
 8013d4a:	f7ff fbdb 	bl	8013504 <_free_r>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d52:	89a3      	ldrh	r3, [r4, #12]
 8013d54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013d58:	81a3      	strh	r3, [r4, #12]
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	6063      	str	r3, [r4, #4]
 8013d5e:	6923      	ldr	r3, [r4, #16]
 8013d60:	6023      	str	r3, [r4, #0]
 8013d62:	89a3      	ldrh	r3, [r4, #12]
 8013d64:	f043 0308 	orr.w	r3, r3, #8
 8013d68:	81a3      	strh	r3, [r4, #12]
 8013d6a:	6923      	ldr	r3, [r4, #16]
 8013d6c:	b94b      	cbnz	r3, 8013d82 <__swsetup_r+0x7a>
 8013d6e:	89a3      	ldrh	r3, [r4, #12]
 8013d70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d78:	d003      	beq.n	8013d82 <__swsetup_r+0x7a>
 8013d7a:	4621      	mov	r1, r4
 8013d7c:	4628      	mov	r0, r5
 8013d7e:	f000 f83f 	bl	8013e00 <__smakebuf_r>
 8013d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d86:	f013 0201 	ands.w	r2, r3, #1
 8013d8a:	d00a      	beq.n	8013da2 <__swsetup_r+0x9a>
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	60a2      	str	r2, [r4, #8]
 8013d90:	6962      	ldr	r2, [r4, #20]
 8013d92:	4252      	negs	r2, r2
 8013d94:	61a2      	str	r2, [r4, #24]
 8013d96:	6922      	ldr	r2, [r4, #16]
 8013d98:	b942      	cbnz	r2, 8013dac <__swsetup_r+0xa4>
 8013d9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013d9e:	d1c5      	bne.n	8013d2c <__swsetup_r+0x24>
 8013da0:	bd38      	pop	{r3, r4, r5, pc}
 8013da2:	0799      	lsls	r1, r3, #30
 8013da4:	bf58      	it	pl
 8013da6:	6962      	ldrpl	r2, [r4, #20]
 8013da8:	60a2      	str	r2, [r4, #8]
 8013daa:	e7f4      	b.n	8013d96 <__swsetup_r+0x8e>
 8013dac:	2000      	movs	r0, #0
 8013dae:	e7f7      	b.n	8013da0 <__swsetup_r+0x98>
 8013db0:	200000a0 	.word	0x200000a0

08013db4 <__swhatbuf_r>:
 8013db4:	b570      	push	{r4, r5, r6, lr}
 8013db6:	460c      	mov	r4, r1
 8013db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dbc:	2900      	cmp	r1, #0
 8013dbe:	b096      	sub	sp, #88	@ 0x58
 8013dc0:	4615      	mov	r5, r2
 8013dc2:	461e      	mov	r6, r3
 8013dc4:	da0d      	bge.n	8013de2 <__swhatbuf_r+0x2e>
 8013dc6:	89a3      	ldrh	r3, [r4, #12]
 8013dc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013dcc:	f04f 0100 	mov.w	r1, #0
 8013dd0:	bf14      	ite	ne
 8013dd2:	2340      	movne	r3, #64	@ 0x40
 8013dd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013dd8:	2000      	movs	r0, #0
 8013dda:	6031      	str	r1, [r6, #0]
 8013ddc:	602b      	str	r3, [r5, #0]
 8013dde:	b016      	add	sp, #88	@ 0x58
 8013de0:	bd70      	pop	{r4, r5, r6, pc}
 8013de2:	466a      	mov	r2, sp
 8013de4:	f000 f848 	bl	8013e78 <_fstat_r>
 8013de8:	2800      	cmp	r0, #0
 8013dea:	dbec      	blt.n	8013dc6 <__swhatbuf_r+0x12>
 8013dec:	9901      	ldr	r1, [sp, #4]
 8013dee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013df2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013df6:	4259      	negs	r1, r3
 8013df8:	4159      	adcs	r1, r3
 8013dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013dfe:	e7eb      	b.n	8013dd8 <__swhatbuf_r+0x24>

08013e00 <__smakebuf_r>:
 8013e00:	898b      	ldrh	r3, [r1, #12]
 8013e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e04:	079d      	lsls	r5, r3, #30
 8013e06:	4606      	mov	r6, r0
 8013e08:	460c      	mov	r4, r1
 8013e0a:	d507      	bpl.n	8013e1c <__smakebuf_r+0x1c>
 8013e0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013e10:	6023      	str	r3, [r4, #0]
 8013e12:	6123      	str	r3, [r4, #16]
 8013e14:	2301      	movs	r3, #1
 8013e16:	6163      	str	r3, [r4, #20]
 8013e18:	b003      	add	sp, #12
 8013e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e1c:	ab01      	add	r3, sp, #4
 8013e1e:	466a      	mov	r2, sp
 8013e20:	f7ff ffc8 	bl	8013db4 <__swhatbuf_r>
 8013e24:	9f00      	ldr	r7, [sp, #0]
 8013e26:	4605      	mov	r5, r0
 8013e28:	4639      	mov	r1, r7
 8013e2a:	4630      	mov	r0, r6
 8013e2c:	f7ff f87e 	bl	8012f2c <_malloc_r>
 8013e30:	b948      	cbnz	r0, 8013e46 <__smakebuf_r+0x46>
 8013e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e36:	059a      	lsls	r2, r3, #22
 8013e38:	d4ee      	bmi.n	8013e18 <__smakebuf_r+0x18>
 8013e3a:	f023 0303 	bic.w	r3, r3, #3
 8013e3e:	f043 0302 	orr.w	r3, r3, #2
 8013e42:	81a3      	strh	r3, [r4, #12]
 8013e44:	e7e2      	b.n	8013e0c <__smakebuf_r+0xc>
 8013e46:	89a3      	ldrh	r3, [r4, #12]
 8013e48:	6020      	str	r0, [r4, #0]
 8013e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e4e:	81a3      	strh	r3, [r4, #12]
 8013e50:	9b01      	ldr	r3, [sp, #4]
 8013e52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013e56:	b15b      	cbz	r3, 8013e70 <__smakebuf_r+0x70>
 8013e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	f000 f81d 	bl	8013e9c <_isatty_r>
 8013e62:	b128      	cbz	r0, 8013e70 <__smakebuf_r+0x70>
 8013e64:	89a3      	ldrh	r3, [r4, #12]
 8013e66:	f023 0303 	bic.w	r3, r3, #3
 8013e6a:	f043 0301 	orr.w	r3, r3, #1
 8013e6e:	81a3      	strh	r3, [r4, #12]
 8013e70:	89a3      	ldrh	r3, [r4, #12]
 8013e72:	431d      	orrs	r5, r3
 8013e74:	81a5      	strh	r5, [r4, #12]
 8013e76:	e7cf      	b.n	8013e18 <__smakebuf_r+0x18>

08013e78 <_fstat_r>:
 8013e78:	b538      	push	{r3, r4, r5, lr}
 8013e7a:	4d07      	ldr	r5, [pc, #28]	@ (8013e98 <_fstat_r+0x20>)
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4604      	mov	r4, r0
 8013e80:	4608      	mov	r0, r1
 8013e82:	4611      	mov	r1, r2
 8013e84:	602b      	str	r3, [r5, #0]
 8013e86:	f7ed fd82 	bl	800198e <_fstat>
 8013e8a:	1c43      	adds	r3, r0, #1
 8013e8c:	d102      	bne.n	8013e94 <_fstat_r+0x1c>
 8013e8e:	682b      	ldr	r3, [r5, #0]
 8013e90:	b103      	cbz	r3, 8013e94 <_fstat_r+0x1c>
 8013e92:	6023      	str	r3, [r4, #0]
 8013e94:	bd38      	pop	{r3, r4, r5, pc}
 8013e96:	bf00      	nop
 8013e98:	20015610 	.word	0x20015610

08013e9c <_isatty_r>:
 8013e9c:	b538      	push	{r3, r4, r5, lr}
 8013e9e:	4d06      	ldr	r5, [pc, #24]	@ (8013eb8 <_isatty_r+0x1c>)
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	4604      	mov	r4, r0
 8013ea4:	4608      	mov	r0, r1
 8013ea6:	602b      	str	r3, [r5, #0]
 8013ea8:	f7ed fd76 	bl	8001998 <_isatty>
 8013eac:	1c43      	adds	r3, r0, #1
 8013eae:	d102      	bne.n	8013eb6 <_isatty_r+0x1a>
 8013eb0:	682b      	ldr	r3, [r5, #0]
 8013eb2:	b103      	cbz	r3, 8013eb6 <_isatty_r+0x1a>
 8013eb4:	6023      	str	r3, [r4, #0]
 8013eb6:	bd38      	pop	{r3, r4, r5, pc}
 8013eb8:	20015610 	.word	0x20015610

08013ebc <_init>:
 8013ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ebe:	bf00      	nop
 8013ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ec2:	bc08      	pop	{r3}
 8013ec4:	469e      	mov	lr, r3
 8013ec6:	4770      	bx	lr

08013ec8 <_fini>:
 8013ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eca:	bf00      	nop
 8013ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ece:	bc08      	pop	{r3}
 8013ed0:	469e      	mov	lr, r3
 8013ed2:	4770      	bx	lr
