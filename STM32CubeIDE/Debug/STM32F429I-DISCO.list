
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013920  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fc8  08013ad0  08013ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0004289a  08015a98  08015a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000002e8  08058334  08058334  00059334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000096  0805861c  0805861c  0005961c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 00097838  080586b4  080586b4  000596b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080efeec  080efeec  000f10f0  2**0
                  CONTENTS
  8 .ARM          00000008  080efeec  080efeec  000f0eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080efef4  080efef4  000f10f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080efef4  080efef4  000f0ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080eff08  080eff08  000f0f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080eff10  000f1000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000156bc  200000f0  080f0000  000f10f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  200157ac  080f0000  000f17ac  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000f10f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000f2000  2**2
                  ALLOC
 17 .debug_line   000556f1  00000000  00000000  000f1120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000063  00000000  00000000  00146811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000b8afc  00000000  00000000  00146874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00014d48  00000000  00000000  001ff370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003168  00000000  00000000  002140b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001132bc  00000000  00000000  00217220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 000038b7  00000000  00000000  0032a4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0001d73b  00000000  00000000  0032dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00010ecb  00000000  00000000  0034b4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0035c399  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00008ca0  00000000  00000000  0035c45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013ab8 	.word	0x08013ab8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	08013ab8 	.word	0x08013ab8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c2:	e003      	b.n	80005cc <LoopCopyDataInit>

080005c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ca:	3104      	adds	r1, #4

080005cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d4:	d3f6      	bcc.n	80005c4 <CopyDataInit>
  ldr  r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d8:	e002      	b.n	80005e0 <LoopFillZerobss>

080005da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005dc:	f842 3b04 	str.w	r3, [r2], #4

080005e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e4:	d3f9      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e6:	f004 f941 	bl	800486c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f012 fcf7 	bl	8012fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f000 fc31 	bl	8000e54 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005f8:	080eff10 	.word	0x080eff10
  ldr  r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000600:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8000604:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8000608:	200157ac 	.word	0x200157ac

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <_ZN12TetrisEngine17generateNextBlockEv>:
    //random khối mới
    spawnBlock();
}

//tạo khối mới
void TetrisEngine::generateNextBlock() {
 8000610:	b510      	push	{r4, lr}
 8000612:	4604      	mov	r4, r0
    nextBlockId = osKernelGetTickCount() % 7;
 8000614:	f006 fcb2 	bl	8006f7c <osKernelGetTickCount>
 8000618:	2307      	movs	r3, #7
 800061a:	fbb0 f3f3 	udiv	r3, r0, r3
 800061e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000622:	1ac0      	subs	r0, r0, r3
 8000624:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
    nextBlockSize = (nextBlockId == 0) ? 4 : 3;
 8000628:	b1e8      	cbz	r0, 8000666 <_ZN12TetrisEngine17generateNextBlockEv+0x56>
    nextBlockSize = (nextBlockId == 1) ? 2 : nextBlockSize;
 800062a:	2801      	cmp	r0, #1
 800062c:	bf14      	ite	ne
 800062e:	2303      	movne	r3, #3
 8000630:	2302      	moveq	r3, #2
 8000632:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
    for (int i = 0; i < 4; ++i)
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <_ZN12TetrisEngine17generateNextBlockEv+0x5c>)
 8000638:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800063c:	eb03 1380 	add.w	r3, r3, r0, lsl #6
 8000640:	4620      	mov	r0, r4
        for (int j = 0; j < 4; ++j)
            nextBlock[i][j] = Tetrominoes[nextBlockId][i][j]; //đánh dấu các ô có thể hiển thị cho next block
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	f8c0 1380 	str.w	r1, [r0, #896]	@ 0x380
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	f8c0 1384 	str.w	r1, [r0, #900]	@ 0x384
 800064e:	6899      	ldr	r1, [r3, #8]
 8000650:	f8c0 1388 	str.w	r1, [r0, #904]	@ 0x388
 8000654:	68d9      	ldr	r1, [r3, #12]
 8000656:	f8c0 138c 	str.w	r1, [r0, #908]	@ 0x38c
    for (int i = 0; i < 4; ++i)
 800065a:	3010      	adds	r0, #16
 800065c:	4290      	cmp	r0, r2
 800065e:	f103 0310 	add.w	r3, r3, #16
 8000662:	d1ee      	bne.n	8000642 <_ZN12TetrisEngine17generateNextBlockEv+0x32>
}
 8000664:	bd10      	pop	{r4, pc}
    nextBlockSize = (nextBlockId == 0) ? 4 : 3;
 8000666:	2304      	movs	r3, #4
 8000668:	e7e3      	b.n	8000632 <_ZN12TetrisEngine17generateNextBlockEv+0x22>
 800066a:	bf00      	nop
 800066c:	08013b10 	.word	0x08013b10

08000670 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERi>:

//get next block (gán nextBlock và size nextBlock cho tham số truyền vào)
void TetrisEngine::getNextBlock(BlockMatrix& block, int& size) const {
 8000670:	b5f0      	push	{r4, r5, r6, r7, lr}
	block = nextBlock;
 8000672:	f500 7560 	add.w	r5, r0, #896	@ 0x380
void TetrisEngine::getNextBlock(BlockMatrix& block, int& size) const {
 8000676:	4606      	mov	r6, r0
 8000678:	4617      	mov	r7, r2
	block = nextBlock;
 800067a:	460c      	mov	r4, r1
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800068c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	size = nextBlockSize;
 8000690:	f8d6 3378 	ldr.w	r3, [r6, #888]	@ 0x378
 8000694:	603b      	str	r3, [r7, #0]
}
 8000696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000698 <_ZN12TetrisEngine10spawnBlockEv>:

//gán khối mới cho khối hiện tại
void TetrisEngine::spawnBlock() {
    if (nextBlockId == -1) generateNextBlock(); // Spawn đầu
 8000698:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 800069c:	3301      	adds	r3, #1
void TetrisEngine::spawnBlock() {
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
    if (nextBlockId == -1) generateNextBlock(); // Spawn đầu
 80006a2:	d101      	bne.n	80006a8 <_ZN12TetrisEngine10spawnBlockEv+0x10>
 80006a4:	f7ff ffb4 	bl	8000610 <_ZN12TetrisEngine17generateNextBlockEv>
    for (int i = 0; i < 4; ++i)
 80006a8:	4623      	mov	r3, r4
 80006aa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
        for (int j = 0; j < 4; ++j)
            currBlock[i][j] = nextBlock[i][j];	//gán nextBlock cho currBlock
 80006ae:	f8d3 1380 	ldr.w	r1, [r3, #896]	@ 0x380
 80006b2:	f8c3 1320 	str.w	r1, [r3, #800]	@ 0x320
 80006b6:	f8d3 1384 	ldr.w	r1, [r3, #900]	@ 0x384
 80006ba:	f8c3 1324 	str.w	r1, [r3, #804]	@ 0x324
 80006be:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80006c2:	f8c3 1328 	str.w	r1, [r3, #808]	@ 0x328
 80006c6:	f8d3 138c 	ldr.w	r1, [r3, #908]	@ 0x38c
 80006ca:	f8c3 132c 	str.w	r1, [r3, #812]	@ 0x32c
    for (int i = 0; i < 4; ++i)
 80006ce:	3310      	adds	r3, #16
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d1ec      	bne.n	80006ae <_ZN12TetrisEngine10spawnBlockEv+0x16>
    blockSize = nextBlockSize;
 80006d4:	f8d4 3378 	ldr.w	r3, [r4, #888]	@ 0x378
 80006d8:	f8c4 3368 	str.w	r3, [r4, #872]	@ 0x368

    //bắt đầu rơi tại vị trí giữa trên cùng
    currX = (GRID_WIDTH - blockSize) / 2;
 80006dc:	f1c3 030a 	rsb	r3, r3, #10
 80006e0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80006e4:	105b      	asrs	r3, r3, #1
 80006e6:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    currY = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c4 3364 	str.w	r3, [r4, #868]	@ 0x364
    generateNextBlock(); // Tạo khối tiếp theo
 80006f0:	4620      	mov	r0, r4
}
 80006f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    generateNextBlock(); // Tạo khối tiếp theo
 80006f6:	f7ff bf8b 	b.w	8000610 <_ZN12TetrisEngine17generateNextBlockEv>

080006fa <_ZN12TetrisEngine4initEv>:
void TetrisEngine::init() {
 80006fa:	b510      	push	{r4, lr}
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 80006fc:	4603      	mov	r3, r0
 80006fe:	4604      	mov	r4, r0
      { return iterator(data() + _Nm); }
 8000700:	f500 7148 	add.w	r1, r0, #800	@ 0x320
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
	      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
	*__first = __tmp;
 8000704:	2000      	movs	r0, #0
    for (auto& row : grid) row.fill(0);
 8000706:	428b      	cmp	r3, r1
 8000708:	d110      	bne.n	800072c <_ZN12TetrisEngine4initEv+0x32>
    gameOver = false;
 800070a:	2300      	movs	r3, #0
 800070c:	f884 336c 	strb.w	r3, [r4, #876]	@ 0x36c
    score = 0;
 8000710:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
	nextBlockId = -1;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
	generateNextBlock();
 8000718:	4620      	mov	r0, r4
	nextBlockId = -1;
 800071a:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
	generateNextBlock();
 800071e:	f7ff ff77 	bl	8000610 <_ZN12TetrisEngine17generateNextBlockEv>
    spawnBlock();
 8000722:	4620      	mov	r0, r4
}
 8000724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    spawnBlock();
 8000728:	f7ff bfb6 	b.w	8000698 <_ZN12TetrisEngine10spawnBlockEv>
      { return static_cast<pointer>(_M_elems); }
 800072c:	461a      	mov	r2, r3
      if (__n <= 0)
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 800072e:	3328      	adds	r3, #40	@ 0x28
      for (; __first != __last; ++__first)
 8000730:	4293      	cmp	r3, r2
 8000732:	d0e8      	beq.n	8000706 <_ZN12TetrisEngine4initEv+0xc>
	*__first = __tmp;
 8000734:	f842 0b04 	str.w	r0, [r2], #4
 8000738:	e7fa      	b.n	8000730 <_ZN12TetrisEngine4initEv+0x36>

0800073a <_ZN12TetrisEngineC1Ev>:
TetrisEngine::TetrisEngine() {
 800073a:	b510      	push	{r4, lr}
 800073c:	4604      	mov	r4, r0
	init();
 800073e:	f7ff ffdc 	bl	80006fa <_ZN12TetrisEngine4initEv>
}
 8000742:	4620      	mov	r0, r4
 8000744:	bd10      	pop	{r4, pc}

08000746 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE>:

//xoay block
void TetrisEngine::rotateMatrix(BlockMatrix& mat) {
 8000746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000748:	4605      	mov	r5, r0
 800074a:	b091      	sub	sp, #68	@ 0x44
 800074c:	460c      	mov	r4, r1
    BlockMatrix temp = {};
 800074e:	2240      	movs	r2, #64	@ 0x40
 8000750:	2100      	movs	r1, #0
 8000752:	4668      	mov	r0, sp
 8000754:	f012 fb99 	bl	8012e8a <memset>
    for (int i = 0; i < blockSize; ++i)
 8000758:	f8d5 2368 	ldr.w	r2, [r5, #872]	@ 0x368
 800075c:	2300      	movs	r3, #0
 800075e:	eb0d 0182 	add.w	r1, sp, r2, lsl #2
 8000762:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 8000766:	429a      	cmp	r2, r3
 8000768:	dc0c      	bgt.n	8000784 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x3e>
        for (int j = 0; j < blockSize; ++j)
            temp[j][blockSize - 1 - i] = mat[i][j];
    mat = temp;
 800076a:	466d      	mov	r5, sp
 800076c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800077c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000780:	b011      	add	sp, #68	@ 0x44
 8000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000784:	eb04 1503 	add.w	r5, r4, r3, lsl #4
    for (int i = 0; i < blockSize; ++i)
 8000788:	460e      	mov	r6, r1
            temp[j][blockSize - 1 - i] = mat[i][j];
 800078a:	f855 7b04 	ldr.w	r7, [r5], #4
 800078e:	f846 7c04 	str.w	r7, [r6, #-4]
        for (int j = 0; j < blockSize; ++j)
 8000792:	4285      	cmp	r5, r0
 8000794:	f106 0610 	add.w	r6, r6, #16
 8000798:	d1f7      	bne.n	800078a <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x44>
    for (int i = 0; i < blockSize; ++i)
 800079a:	3301      	adds	r3, #1
 800079c:	3904      	subs	r1, #4
 800079e:	3010      	adds	r0, #16
 80007a0:	e7e1      	b.n	8000766 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE+0x20>

080007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>:

//lấy đường biên của block
void TetrisEngine::getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY) {
 80007a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    minX = blockSize; maxX = 0; minY = blockSize; maxY = 0;
 80007a4:	f8d0 4368 	ldr.w	r4, [r0, #872]	@ 0x368
 80007a8:	6014      	str	r4, [r2, #0]
void TetrisEngine::getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY) {
 80007aa:	e9dd 6c05 	ldrd	r6, ip, [sp, #20]
    minX = blockSize; maxX = 0; minY = blockSize; maxY = 0;
 80007ae:	2400      	movs	r4, #0
 80007b0:	601c      	str	r4, [r3, #0]
 80007b2:	f8d0 5368 	ldr.w	r5, [r0, #872]	@ 0x368
 80007b6:	6035      	str	r5, [r6, #0]
 80007b8:	f8cc 4000 	str.w	r4, [ip]
    for (int i = 0; i < blockSize; ++i)
 80007bc:	f8d0 5368 	ldr.w	r5, [r0, #872]	@ 0x368
 80007c0:	42a5      	cmp	r5, r4
 80007c2:	dd1f      	ble.n	8000804 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x62>
 80007c4:	eb01 1e04 	add.w	lr, r1, r4, lsl #4
        for (int j = 0; j < blockSize; ++j)
 80007c8:	2500      	movs	r5, #0
 80007ca:	e015      	b.n	80007f8 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x56>
            if (block[i][j]) {
 80007cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80007d0:	b18f      	cbz	r7, 80007f6 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x54>
                if (j < minX) minX = j;
 80007d2:	6817      	ldr	r7, [r2, #0]
 80007d4:	42af      	cmp	r7, r5
 80007d6:	bfc8      	it	gt
 80007d8:	6015      	strgt	r5, [r2, #0]
                if (j > maxX) maxX = j;
 80007da:	681f      	ldr	r7, [r3, #0]
 80007dc:	42af      	cmp	r7, r5
 80007de:	bfb8      	it	lt
 80007e0:	601d      	strlt	r5, [r3, #0]
                if (i < minY) minY = i;
 80007e2:	6837      	ldr	r7, [r6, #0]
 80007e4:	42a7      	cmp	r7, r4
 80007e6:	bfc8      	it	gt
 80007e8:	6034      	strgt	r4, [r6, #0]
                if (i > maxY) maxY = i;
 80007ea:	f8dc 7000 	ldr.w	r7, [ip]
 80007ee:	42a7      	cmp	r7, r4
 80007f0:	bfb8      	it	lt
 80007f2:	f8cc 4000 	strlt.w	r4, [ip]
        for (int j = 0; j < blockSize; ++j)
 80007f6:	3501      	adds	r5, #1
 80007f8:	f8d0 7368 	ldr.w	r7, [r0, #872]	@ 0x368
 80007fc:	42af      	cmp	r7, r5
 80007fe:	dce5      	bgt.n	80007cc <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x2a>
    for (int i = 0; i < blockSize; ++i)
 8000800:	3401      	adds	r4, #1
 8000802:	e7db      	b.n	80007bc <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_+0x1a>
            }
}
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>:

//kiểm tra va trạm
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800080a:	b087      	sub	sp, #28
 800080c:	460e      	mov	r6, r1
 800080e:	4619      	mov	r1, r3
    int minX, maxX, minY, maxY;

    //lấy bao ngoài của block
    getBlockBounds(block, minX, maxX, minY, maxY);
 8000810:	ab05      	add	r3, sp, #20
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	ab04      	add	r3, sp, #16
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000816:	4614      	mov	r4, r2
    getBlockBounds(block, minX, maxX, minY, maxY);
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	aa02      	add	r2, sp, #8
 800081c:	ab03      	add	r3, sp, #12
 800081e:	f7ff ffc0 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
bool TetrisEngine::checkCollision(int newX, int newY, const BlockMatrix& block) {
 8000822:	4605      	mov	r5, r0
    for (int i = minY; i <= maxY; ++i)
 8000824:	e9dd 0e04 	ldrd	r0, lr, [sp, #16]
        for (int j = minX; j <= maxX; ++j)
 8000828:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800082c:	1902      	adds	r2, r0, r4
 800082e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8000832:	f04f 0828 	mov.w	r8, #40	@ 0x28
    for (int i = minY; i <= maxY; ++i)
 8000836:	4586      	cmp	lr, r0
 8000838:	db1c      	blt.n	8000874 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x6e>
 800083a:	eb01 1900 	add.w	r9, r1, r0, lsl #4
 800083e:	fb08 5702 	mla	r7, r8, r2, r5
        for (int j = minX; j <= maxX; ++j)
 8000842:	465c      	mov	r4, fp
 8000844:	e00d      	b.n	8000862 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x5c>
            if (block[i][j]) {
 8000846:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 800084a:	b14b      	cbz	r3, 8000860 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x5a>
                int gx = newX + j;
                int gy = newY + i;

                //ra ngoài hoặc ô đã được đặt -> va chạm -> return true
                if (gx < 0 || gx >= GRID_WIDTH || gy < 0 || gy >= GRID_HEIGHT) return true;
 800084c:	eb04 0a06 	add.w	sl, r4, r6
 8000850:	f1ba 0f09 	cmp.w	sl, #9
 8000854:	d80a      	bhi.n	800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
 8000856:	2a13      	cmp	r2, #19
 8000858:	d808      	bhi.n	800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
                if (grid[gy][gx]) return true;
 800085a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800085e:	b92b      	cbnz	r3, 800086c <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x66>
        for (int j = minX; j <= maxX; ++j)
 8000860:	3401      	adds	r4, #1
 8000862:	45a4      	cmp	ip, r4
 8000864:	daef      	bge.n	8000846 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x40>
    for (int i = minY; i <= maxY; ++i)
 8000866:	3001      	adds	r0, #1
 8000868:	3201      	adds	r2, #1
 800086a:	e7e4      	b.n	8000836 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x30>
                if (gx < 0 || gx >= GRID_WIDTH || gy < 0 || gy >= GRID_HEIGHT) return true;
 800086c:	2001      	movs	r0, #1
            }
    return false;
}
 800086e:	b007      	add	sp, #28
 8000870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
 8000874:	2000      	movs	r0, #0
 8000876:	e7fa      	b.n	800086e <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE+0x68>

08000878 <_ZN12TetrisEngine10clearLinesEv>:
    clearLines();
    spawnBlock();
}

//xóa line nếu full
void TetrisEngine::clearLines() {
 8000878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800087c:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 8000880:	4606      	mov	r6, r0
    for (int y = GRID_HEIGHT - 1; y >= 0; --y) {
 8000882:	2713      	movs	r7, #19
        bool full = true;
        for (int x = 0; x < GRID_WIDTH; ++x)
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng

        if (full) {
        	takeScore = true;
 8000884:	f04f 0901 	mov.w	r9, #1
 8000888:	eb00 080e 	add.w	r8, r0, lr
 800088c:	f04f 0a00 	mov.w	sl, #0
        for (int x = 0; x < GRID_WIDTH; ++x)
 8000890:	fb0e 6107 	mla	r1, lr, r7, r6
 8000894:	2200      	movs	r2, #0
        bool full = true;
 8000896:	2301      	movs	r3, #1
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng
 8000898:	f851 0b04 	ldr.w	r0, [r1], #4
        for (int x = 0; x < GRID_WIDTH; ++x)
 800089c:	3201      	adds	r2, #1
            if (!grid[y][x]) full = false; //-> có 1 ô chưa được đánh dấu -> chưa đầy hàng
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf08      	it	eq
 80008a2:	2300      	moveq	r3, #0
        for (int x = 0; x < GRID_WIDTH; ++x)
 80008a4:	2a0a      	cmp	r2, #10
 80008a6:	d1f7      	bne.n	8000898 <_ZN12TetrisEngine10clearLinesEv+0x20>
        if (full) {
 80008a8:	b303      	cbz	r3, 80008ec <_ZN12TetrisEngine10clearLinesEv+0x74>
        	score++; //tăng điểm
 80008aa:	f8d6 3370 	ldr.w	r3, [r6, #880]	@ 0x370
        	takeScore = true;
 80008ae:	f886 9374 	strb.w	r9, [r6, #884]	@ 0x374
        	score++; //tăng điểm
 80008b2:	3301      	adds	r3, #1
 80008b4:	f8c6 3370 	str.w	r3, [r6, #880]	@ 0x370
            for (int row = y; row > 0; --row)
 80008b8:	46bc      	mov	ip, r7
 80008ba:	f1bc 0f00 	cmp.w	ip, #0
 80008be:	d105      	bne.n	80008cc <_ZN12TetrisEngine10clearLinesEv+0x54>
 80008c0:	4633      	mov	r3, r6
      for (; __first != __last; ++__first)
 80008c2:	4598      	cmp	r8, r3
 80008c4:	d0e4      	beq.n	8000890 <_ZN12TetrisEngine10clearLinesEv+0x18>
	*__first = __tmp;
 80008c6:	f843 ab04 	str.w	sl, [r3], #4
 80008ca:	e7fa      	b.n	80008c2 <_ZN12TetrisEngine10clearLinesEv+0x4a>
                grid[row] = grid[row - 1];
 80008cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80008d0:	fb0e f40c 	mul.w	r4, lr, ip
 80008d4:	eb08 0504 	add.w	r5, r8, r4
 80008d8:	4434      	add	r4, r6
 80008da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008e6:	e885 0003 	stmia.w	r5, {r0, r1}
            for (int row = y; row > 0; --row)
 80008ea:	e7e6      	b.n	80008ba <_ZN12TetrisEngine10clearLinesEv+0x42>
    for (int y = GRID_HEIGHT - 1; y >= 0; --y) {
 80008ec:	3f01      	subs	r7, #1
 80008ee:	d2cf      	bcs.n	8000890 <_ZN12TetrisEngine10clearLinesEv+0x18>
            grid[0].fill(0);
            ++y; // re-check this row
        }
    }
}
 80008f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080008f4 <_ZN12TetrisEngine9lockBlockEv>:
void TetrisEngine::lockBlock() {
 80008f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < blockSize; ++i)
 80008f6:	f8d0 6368 	ldr.w	r6, [r0, #872]	@ 0x368
void TetrisEngine::lockBlock() {
 80008fa:	4604      	mov	r4, r0
 80008fc:	f500 7547 	add.w	r5, r0, #796	@ 0x31c
    for (int i = 0; i < blockSize; ++i)
 8000900:	2200      	movs	r2, #0
                    grid[gy][gx] = 1;
 8000902:	f04f 0c0a 	mov.w	ip, #10
 8000906:	f04f 0e01 	mov.w	lr, #1
    for (int i = 0; i < blockSize; ++i)
 800090a:	4296      	cmp	r6, r2
 800090c:	dc07      	bgt.n	800091e <_ZN12TetrisEngine9lockBlockEv+0x2a>
    clearLines();
 800090e:	4620      	mov	r0, r4
 8000910:	f7ff ffb2 	bl	8000878 <_ZN12TetrisEngine10clearLinesEv>
    spawnBlock();
 8000914:	4620      	mov	r0, r4
}
 8000916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    spawnBlock();
 800091a:	f7ff bebd 	b.w	8000698 <_ZN12TetrisEngine10spawnBlockEv>
 800091e:	462f      	mov	r7, r5
        for (int j = 0; j < blockSize; ++j)
 8000920:	2100      	movs	r1, #0
            if (currBlock[i][j]) {
 8000922:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8000926:	b16b      	cbz	r3, 8000944 <_ZN12TetrisEngine9lockBlockEv+0x50>
                int gy = currY + i;
 8000928:	f8d4 0364 	ldr.w	r0, [r4, #868]	@ 0x364
 800092c:	4410      	add	r0, r2
                if (gy >= 0 && gy < GRID_HEIGHT && gx >= 0 && gx < GRID_WIDTH)
 800092e:	2813      	cmp	r0, #19
 8000930:	d808      	bhi.n	8000944 <_ZN12TetrisEngine9lockBlockEv+0x50>
                int gx = currX + j;
 8000932:	f8d4 3360 	ldr.w	r3, [r4, #864]	@ 0x360
 8000936:	440b      	add	r3, r1
                if (gy >= 0 && gy < GRID_HEIGHT && gx >= 0 && gx < GRID_WIDTH)
 8000938:	2b09      	cmp	r3, #9
                    grid[gy][gx] = 1;
 800093a:	bf9c      	itt	ls
 800093c:	fb0c 3300 	mlals	r3, ip, r0, r3
 8000940:	f844 e023 	strls.w	lr, [r4, r3, lsl #2]
        for (int j = 0; j < blockSize; ++j)
 8000944:	3101      	adds	r1, #1
 8000946:	428e      	cmp	r6, r1
 8000948:	d1eb      	bne.n	8000922 <_ZN12TetrisEngine9lockBlockEv+0x2e>
    for (int i = 0; i < blockSize; ++i)
 800094a:	3201      	adds	r2, #1
 800094c:	3510      	adds	r5, #16
 800094e:	e7dc      	b.n	800090a <_ZN12TetrisEngine9lockBlockEv+0x16>

08000950 <_ZN12TetrisEngine6updateEv>:

//check va chạm + khóa khối nếu được
void TetrisEngine::update() {
 8000950:	b538      	push	{r3, r4, r5, lr}
	if(!gameOver){
 8000952:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::update() {
 8000956:	4604      	mov	r4, r0
	if(!gameOver){
 8000958:	b963      	cbnz	r3, 8000974 <_ZN12TetrisEngine6updateEv+0x24>
		if (!checkCollision(currX, currY + 1, currBlock))
 800095a:	f8d0 5364 	ldr.w	r5, [r0, #868]	@ 0x364
 800095e:	f8d0 1360 	ldr.w	r1, [r0, #864]	@ 0x360
 8000962:	3501      	adds	r5, #1
 8000964:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 8000968:	462a      	mov	r2, r5
 800096a:	f7ff ff4c 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 800096e:	b910      	cbnz	r0, 8000976 <_ZN12TetrisEngine6updateEv+0x26>
			currY++;
 8000970:	f8c4 5364 	str.w	r5, [r4, #868]	@ 0x364
			for(int i = 0; i < GRID_WIDTH; i++)
				if(grid[0][i]) gameOver = true;
		}
	}

}
 8000974:	bd38      	pop	{r3, r4, r5, pc}
			lockBlock();
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff ffbc 	bl	80008f4 <_ZN12TetrisEngine9lockBlockEv>
			for(int i = 0; i < GRID_WIDTH; i++)
 800097c:	1f23      	subs	r3, r4, #4
 800097e:	f104 0224 	add.w	r2, r4, #36	@ 0x24
				if(grid[0][i]) gameOver = true;
 8000982:	2101      	movs	r1, #1
 8000984:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8000988:	b108      	cbz	r0, 800098e <_ZN12TetrisEngine6updateEv+0x3e>
 800098a:	f884 136c 	strb.w	r1, [r4, #876]	@ 0x36c
			for(int i = 0; i < GRID_WIDTH; i++)
 800098e:	4293      	cmp	r3, r2
 8000990:	d1f8      	bne.n	8000984 <_ZN12TetrisEngine6updateEv+0x34>
 8000992:	e7ef      	b.n	8000974 <_ZN12TetrisEngine6updateEv+0x24>

08000994 <_ZN12TetrisEngine8moveLeftEv>:

//di chuyển trái
void TetrisEngine::moveLeft() {
 8000994:	b538      	push	{r3, r4, r5, lr}
	if(gameOver) return;
 8000996:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::moveLeft() {
 800099a:	4604      	mov	r4, r0
	if(gameOver) return;
 800099c:	b963      	cbnz	r3, 80009b8 <_ZN12TetrisEngine8moveLeftEv+0x24>
    if (!checkCollision(currX - 1, currY, currBlock)) currX--;
 800099e:	f8d0 5360 	ldr.w	r5, [r0, #864]	@ 0x360
 80009a2:	f8d0 2364 	ldr.w	r2, [r0, #868]	@ 0x364
 80009a6:	3d01      	subs	r5, #1
 80009a8:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 80009ac:	4629      	mov	r1, r5
 80009ae:	f7ff ff2a 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 80009b2:	b908      	cbnz	r0, 80009b8 <_ZN12TetrisEngine8moveLeftEv+0x24>
 80009b4:	f8c4 5360 	str.w	r5, [r4, #864]	@ 0x360
}
 80009b8:	bd38      	pop	{r3, r4, r5, pc}

080009ba <_ZN12TetrisEngine9moveRightEv>:

//di chuyển phải
void TetrisEngine::moveRight() {
 80009ba:	b538      	push	{r3, r4, r5, lr}
	if(gameOver) return;
 80009bc:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::moveRight() {
 80009c0:	4604      	mov	r4, r0
	if(gameOver) return;
 80009c2:	b963      	cbnz	r3, 80009de <_ZN12TetrisEngine9moveRightEv+0x24>
    if (!checkCollision(currX + 1, currY, currBlock)) currX++;
 80009c4:	f8d0 5360 	ldr.w	r5, [r0, #864]	@ 0x360
 80009c8:	f8d0 2364 	ldr.w	r2, [r0, #868]	@ 0x364
 80009cc:	3501      	adds	r5, #1
 80009ce:	f500 7348 	add.w	r3, r0, #800	@ 0x320
 80009d2:	4629      	mov	r1, r5
 80009d4:	f7ff ff17 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 80009d8:	b908      	cbnz	r0, 80009de <_ZN12TetrisEngine9moveRightEv+0x24>
 80009da:	f8c4 5360 	str.w	r5, [r4, #864]	@ 0x360
}
 80009de:	bd38      	pop	{r3, r4, r5, pc}

080009e0 <_ZN12TetrisEngine4dropEv>:

//thả block
void TetrisEngine::drop() {
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(gameOver) return;
 80009e2:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::drop() {
 80009e6:	4604      	mov	r4, r0
	if(gameOver) return;
 80009e8:	b9ab      	cbnz	r3, 8000a16 <_ZN12TetrisEngine4dropEv+0x36>
    while (!checkCollision(currX, currY + 1, currBlock)) currY++;
 80009ea:	f8d0 6360 	ldr.w	r6, [r0, #864]	@ 0x360
 80009ee:	f500 7748 	add.w	r7, r0, #800	@ 0x320
 80009f2:	f8d4 5364 	ldr.w	r5, [r4, #868]	@ 0x364
 80009f6:	3501      	adds	r5, #1
 80009f8:	463b      	mov	r3, r7
 80009fa:	462a      	mov	r2, r5
 80009fc:	4631      	mov	r1, r6
 80009fe:	4620      	mov	r0, r4
 8000a00:	f7ff ff01 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a04:	b120      	cbz	r0, 8000a10 <_ZN12TetrisEngine4dropEv+0x30>
    lockBlock();
 8000a06:	4620      	mov	r0, r4
}
 8000a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lockBlock();
 8000a0c:	f7ff bf72 	b.w	80008f4 <_ZN12TetrisEngine9lockBlockEv>
    while (!checkCollision(currX, currY + 1, currBlock)) currY++;
 8000a10:	f8c4 5364 	str.w	r5, [r4, #868]	@ 0x364
 8000a14:	e7ed      	b.n	80009f2 <_ZN12TetrisEngine4dropEv+0x12>
}
 8000a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a18 <_ZN12TetrisEngine6rotateEv>:

//xoay block
void TetrisEngine::rotate() {
 8000a18:	b570      	push	{r4, r5, r6, lr}
	if(gameOver) return;
 8000a1a:	f890 336c 	ldrb.w	r3, [r0, #876]	@ 0x36c
void TetrisEngine::rotate() {
 8000a1e:	b090      	sub	sp, #64	@ 0x40
 8000a20:	4604      	mov	r4, r0
	if(gameOver) return;
 8000a22:	bb23      	cbnz	r3, 8000a6e <_ZN12TetrisEngine6rotateEv+0x56>
    BlockMatrix temp = currBlock;
 8000a24:	f500 7648 	add.w	r6, r0, #800	@ 0x320
 8000a28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a2a:	466d      	mov	r5, sp
 8000a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a36:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    rotateMatrix(temp);
 8000a3e:	4620      	mov	r0, r4
 8000a40:	4669      	mov	r1, sp
 8000a42:	f7ff fe80 	bl	8000746 <_ZN12TetrisEngine12rotateMatrixERSt5arrayIS0_IiLj4EELj4EE>
    if (!checkCollision(currX, currY, temp))
 8000a46:	e9d4 12d8 	ldrd	r1, r2, [r4, #864]	@ 0x360
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	466b      	mov	r3, sp
 8000a4e:	f7ff feda 	bl	8000806 <_ZN12TetrisEngine14checkCollisionEiiRKSt5arrayIS0_IiLj4EELj4EE>
 8000a52:	f504 7448 	add.w	r4, r4, #800	@ 0x320
 8000a56:	b950      	cbnz	r0, 8000a6e <_ZN12TetrisEngine6rotateEv+0x56>
        currBlock = temp;
 8000a58:	466d      	mov	r5, sp
 8000a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000a6e:	b010      	add	sp, #64	@ 0x40
 8000a70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a74 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 8000a74:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <SPI5_Write+0x1c>)
{
 8000a78:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <SPI5_Write+0x20>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	f10d 0106 	add.w	r1, sp, #6
 8000a86:	f005 fcd3 	bl	8006430 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8000a8a:	b003      	add	sp, #12
 8000a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a90:	20000004 	.word	0x20000004
 8000a94:	200001a4 	.word	0x200001a4

08000a98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a98:	b508      	push	{r3, lr}
//		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET){
//			res = 'D';
//			osMessageQueuePut(speedQueueHandle, &res, 0, 10);
//		}
//	}
	osDelay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f006 fabe 	bl	800701c <osDelay>
  for(;;)
 8000aa0:	e7fb      	b.n	8000a9a <StartDefaultTask+0x2>
	...

08000aa4 <MovingTask>:
  }
  /* USER CODE END 5 */
}


void MovingTask(void *argument){
 8000aa4:	b507      	push	{r0, r1, r2, lr}
	static int last_time = 0;
	for(;;){
		if(osMessageQueueGetCount(movingQueueHandle) < 1){
			if(HAL_GetTick() - last_time > 200){
 8000aa6:	4d1f      	ldr	r5, [pc, #124]	@ (8000b24 <MovingTask+0x80>)
				char res;
				//osThreadNew(SingleBeepTask, NULL, &singleBeep_attributes);
				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8000aa8:	4e1f      	ldr	r6, [pc, #124]	@ (8000b28 <MovingTask+0x84>)
		if(osMessageQueueGetCount(movingQueueHandle) < 1){
 8000aaa:	4c20      	ldr	r4, [pc, #128]	@ (8000b2c <MovingTask+0x88>)
 8000aac:	6820      	ldr	r0, [r4, #0]
 8000aae:	f006 fc05 	bl	80072bc <osMessageQueueGetCount>
 8000ab2:	b9c0      	cbnz	r0, 8000ae6 <MovingTask+0x42>
			if(HAL_GetTick() - last_time > 200){
 8000ab4:	f003 ff0e 	bl	80048d4 <HAL_GetTick>
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	1ac0      	subs	r0, r0, r3
 8000abc:	28c8      	cmp	r0, #200	@ 0xc8
 8000abe:	d912      	bls.n	8000ae6 <MovingTask+0x42>
				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8000ac0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	f004 f95f 	bl	8004d88 <HAL_GPIO_ReadPin>
 8000aca:	4602      	mov	r2, r0
 8000acc:	b978      	cbnz	r0, 8000aee <MovingTask+0x4a>
					res = 'L';
 8000ace:	234c      	movs	r3, #76	@ 0x4c
					osMessageQueuePut(movingQueueHandle, &res, 0, 10);
				}else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET){
					res = 'T';
					osMessageQueuePut(movingQueueHandle, &res, 0, 10);
				}else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET){
					res = 'D';
 8000ad0:	f88d 3007 	strb.w	r3, [sp, #7]
					osMessageQueuePut(movingQueueHandle, &res, 0, 10);
 8000ad4:	6820      	ldr	r0, [r4, #0]
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	f10d 0107 	add.w	r1, sp, #7
 8000adc:	f006 fb8d 	bl	80071fa <osMessageQueuePut>
				}
				last_time = HAL_GetTick();
 8000ae0:	f003 fef8 	bl	80048d4 <HAL_GetTick>
 8000ae4:	6028      	str	r0, [r5, #0]
			}
		}
		osDelay(10);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f006 fa98 	bl	800701c <osDelay>
		if(osMessageQueueGetCount(movingQueueHandle) < 1){
 8000aec:	e7dd      	b.n	8000aaa <MovingTask+0x6>
				}else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8000aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af2:	4630      	mov	r0, r6
 8000af4:	f004 f948 	bl	8004d88 <HAL_GPIO_ReadPin>
 8000af8:	4602      	mov	r2, r0
 8000afa:	b908      	cbnz	r0, 8000b00 <MovingTask+0x5c>
					res = 'R';
 8000afc:	2352      	movs	r3, #82	@ 0x52
 8000afe:	e7e7      	b.n	8000ad0 <MovingTask+0x2c>
				}else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MovingTask+0x8c>)
 8000b02:	2104      	movs	r1, #4
 8000b04:	f004 f940 	bl	8004d88 <HAL_GPIO_ReadPin>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	b908      	cbnz	r0, 8000b10 <MovingTask+0x6c>
					res = 'T';
 8000b0c:	2354      	movs	r3, #84	@ 0x54
 8000b0e:	e7df      	b.n	8000ad0 <MovingTask+0x2c>
				}else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET){
 8000b10:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <MovingTask+0x8c>)
 8000b12:	2108      	movs	r1, #8
 8000b14:	f004 f938 	bl	8004d88 <HAL_GPIO_ReadPin>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d1e0      	bne.n	8000ae0 <MovingTask+0x3c>
					res = 'D';
 8000b1e:	2344      	movs	r3, #68	@ 0x44
 8000b20:	e7d6      	b.n	8000ad0 <MovingTask+0x2c>
 8000b22:	bf00      	nop
 8000b24:	2000010c 	.word	0x2000010c
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	20000118 	.word	0x20000118
 8000b30:	40021800 	.word	0x40021800

08000b34 <SystemClock_Config>:
{
 8000b34:	b530      	push	{r4, r5, lr}
 8000b36:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b38:	2210      	movs	r2, #16
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	a80a      	add	r0, sp, #40	@ 0x28
 8000b3e:	f012 f9a4 	bl	8012e8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b42:	2214      	movs	r2, #20
 8000b44:	2100      	movs	r1, #0
 8000b46:	a803      	add	r0, sp, #12
 8000b48:	f012 f99f 	bl	8012e8a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	2400      	movs	r4, #0
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <SystemClock_Config+0x90>)
 8000b50:	9401      	str	r4, [sp, #4]
 8000b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b54:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <SystemClock_Config+0x94>)
 8000b66:	9402      	str	r4, [sp, #8]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b76:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b84:	2502      	movs	r5, #2
 8000b86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b8a:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b8e:	2108      	movs	r1, #8
 8000b90:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b94:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9e:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f004 ff06 	bl	80059b0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000baa:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000bae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb2:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb6:	2105      	movs	r1, #5
 8000bb8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bbc:	f005 f8d4 	bl	8005d68 <HAL_RCC_ClockConfig>
}
 8000bc0:	b015      	add	sp, #84	@ 0x54
 8000bc2:	bd30      	pop	{r4, r5, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <IOE_Init>:
void IOE_Init(void)
 8000bcc:	4770      	bx	lr

08000bce <IOE_ITConfig>:
void IOE_ITConfig(void)
 8000bce:	4770      	bx	lr

08000bd0 <IOE_Write>:
{
 8000bd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <IOE_Write+0x28>)
 8000bd4:	f88d 2017 	strb.w	r2, [sp, #23]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	f10d 0217 	add.w	r2, sp, #23
 8000be0:	2301      	movs	r3, #1
 8000be2:	9200      	str	r2, [sp, #0]
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	460a      	mov	r2, r1
 8000be8:	4601      	mov	r1, r0
 8000bea:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <IOE_Write+0x2c>)
 8000bec:	f004 fb78 	bl	80052e0 <HAL_I2C_Mem_Write>
}
 8000bf0:	b007      	add	sp, #28
 8000bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	200002a4 	.word	0x200002a4

08000c00 <IOE_Read>:
{
 8000c00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <IOE_Read+0x2c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	9302      	str	r3, [sp, #8]
{
 8000c0e:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8000c10:	2301      	movs	r3, #1
 8000c12:	f10d 0117 	add.w	r1, sp, #23
 8000c16:	9100      	str	r1, [sp, #0]
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <IOE_Read+0x30>)
 8000c1e:	f004 fbef 	bl	8005400 <HAL_I2C_Mem_Read>
}
 8000c22:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000c26:	b007      	add	sp, #28
 8000c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200002a4 	.word	0x200002a4

08000c34 <IOE_ReadMultiple>:
{
 8000c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 8000c36:	4c08      	ldr	r4, [pc, #32]	@ (8000c58 <IOE_ReadMultiple+0x24>)
 8000c38:	6824      	ldr	r4, [r4, #0]
 8000c3a:	9200      	str	r2, [sp, #0]
 8000c3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000c40:	460a      	mov	r2, r1
 8000c42:	2301      	movs	r3, #1
 8000c44:	4601      	mov	r1, r0
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <IOE_ReadMultiple+0x28>)
 8000c48:	f004 fbda 	bl	8005400 <HAL_I2C_Mem_Read>
}
 8000c4c:	3800      	subs	r0, #0
 8000c4e:	bf18      	it	ne
 8000c50:	2001      	movne	r0, #1
 8000c52:	b004      	add	sp, #16
 8000c54:	bd10      	pop	{r4, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	200002a4 	.word	0x200002a4

08000c60 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 8000c60:	f003 be3e 	b.w	80048e0 <HAL_Delay>

08000c64 <LCD_IO_Init>:
{
 8000c64:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c66:	4c06      	ldr	r4, [pc, #24]	@ (8000c80 <LCD_IO_Init+0x1c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	f004 f891 	bl	8004d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c72:	4620      	mov	r0, r4
 8000c74:	2201      	movs	r2, #1
}
 8000c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	f004 b88a 	b.w	8004d94 <HAL_GPIO_WritePin>
 8000c80:	40020800 	.word	0x40020800

08000c84 <LCD_IO_WriteData>:
{
 8000c84:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c86:	4d0b      	ldr	r5, [pc, #44]	@ (8000cb4 <LCD_IO_WriteData+0x30>)
{
 8000c88:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	480a      	ldr	r0, [pc, #40]	@ (8000cb8 <LCD_IO_WriteData+0x34>)
 8000c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c92:	f004 f87f 	bl	8004d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f004 f87a 	bl	8004d94 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff fee7 	bl	8000a74 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	2201      	movs	r2, #1
}
 8000caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000cae:	2104      	movs	r1, #4
 8000cb0:	f004 b870 	b.w	8004d94 <HAL_GPIO_WritePin>
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <LCD_IO_WriteReg>:
{
 8000cbc:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cbe:	4d0b      	ldr	r5, [pc, #44]	@ (8000cec <LCD_IO_WriteReg+0x30>)
{
 8000cc0:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <LCD_IO_WriteReg+0x34>)
 8000cc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cca:	f004 f863 	bl	8004d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	4628      	mov	r0, r5
 8000cd4:	f004 f85e 	bl	8004d94 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f7ff fecb 	bl	8000a74 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000cde:	4628      	mov	r0, r5
 8000ce0:	2201      	movs	r2, #1
}
 8000ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	f004 b854 	b.w	8004d94 <HAL_GPIO_WritePin>
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <LCD_IO_ReadData>:
{
 8000cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cf6:	4e14      	ldr	r6, [pc, #80]	@ (8000d48 <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cf8:	4f14      	ldr	r7, [pc, #80]	@ (8000d4c <LCD_IO_ReadData+0x58>)
{
 8000cfa:	4605      	mov	r5, r0
 8000cfc:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cfe:	4630      	mov	r0, r6
 8000d00:	2200      	movs	r2, #0
 8000d02:	2104      	movs	r1, #4
 8000d04:	f004 f846 	bl	8004d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d0e:	4638      	mov	r0, r7
 8000d10:	f004 f840 	bl	8004d94 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8000d14:	4628      	mov	r0, r5
 8000d16:	f7ff fead 	bl	8000a74 <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <LCD_IO_ReadData+0x5c>)
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <LCD_IO_ReadData+0x60>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4622      	mov	r2, r4
 8000d22:	a901      	add	r1, sp, #4
 8000d24:	f005 fd21 	bl	800676a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d28:	4638      	mov	r0, r7
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8000d30:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000d32:	f004 f82f 	bl	8004d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000d36:	4630      	mov	r0, r6
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	f004 f82a 	bl	8004d94 <HAL_GPIO_WritePin>
}
 8000d40:	4620      	mov	r0, r4
 8000d42:	b003      	add	sp, #12
 8000d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020c00 	.word	0x40020c00
 8000d50:	20000004 	.word	0x20000004
 8000d54:	200001a4 	.word	0x200001a4

08000d58 <LCD_Delay>:
  HAL_Delay(Delay);
 8000d58:	f003 bdc2 	b.w	80048e0 <HAL_Delay>

08000d5c <SingleBeepTask>:
	}
}

void SingleBeepTask(void *param){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d88 <SingleBeepTask+0x2c>)
void SingleBeepTask(void *param){
 8000d5e:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2108      	movs	r1, #8
 8000d64:	4620      	mov	r0, r4
 8000d66:	f004 f815 	bl	8004d94 <HAL_GPIO_WritePin>
	osDelay(50);
 8000d6a:	2032      	movs	r0, #50	@ 0x32
 8000d6c:	f006 f956 	bl	800701c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2108      	movs	r1, #8
 8000d74:	4620      	mov	r0, r4
 8000d76:	f004 f80d 	bl	8004d94 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000d7a:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <SingleBeepTask+0x30>)
 8000d7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d80:	f004 f80d 	bl	8004d9e <HAL_GPIO_TogglePin>
	osThreadExit();
 8000d84:	f006 f945 	bl	8007012 <osThreadExit>
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40021800 	.word	0x40021800

08000d90 <DoubleBeepTask>:
}

void DoubleBeepTask(void *param){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d90:	4c10      	ldr	r4, [pc, #64]	@ (8000dd4 <DoubleBeepTask+0x44>)
void DoubleBeepTask(void *param){
 8000d92:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2108      	movs	r1, #8
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f003 fffb 	bl	8004d94 <HAL_GPIO_WritePin>
	osDelay(50);
 8000d9e:	2032      	movs	r0, #50	@ 0x32
 8000da0:	f006 f93c 	bl	800701c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	4620      	mov	r0, r4
 8000daa:	f003 fff3 	bl	8004d94 <HAL_GPIO_WritePin>
	osDelay(50);
 8000dae:	2032      	movs	r0, #50	@ 0x32
 8000db0:	f006 f934 	bl	800701c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2108      	movs	r1, #8
 8000db8:	4620      	mov	r0, r4
 8000dba:	f003 ffeb 	bl	8004d94 <HAL_GPIO_WritePin>
	osDelay(50);
 8000dbe:	2032      	movs	r0, #50	@ 0x32
 8000dc0:	f006 f92c 	bl	800701c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f003 ffe3 	bl	8004d94 <HAL_GPIO_WritePin>
	osThreadExit();
 8000dce:	f006 f920 	bl	8007012 <osThreadExit>
 8000dd2:	bf00      	nop
 8000dd4:	40020800 	.word	0x40020800

08000dd8 <DF_SendCommand>:
	osDelay(2000);
	DF_SendCommand(0x0F, 0x02, 0x01);
	osThreadExit();
}

void DF_SendCommand(uint8_t cmd, uint8_t param1, uint8_t param2){
 8000dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000dda:	f64f 737e 	movw	r3, #65406	@ 0xff7e
 8000dde:	f88d 200a 	strb.w	r2, [sp, #10]
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000de2:	f202 1205 	addw	r2, r2, #261	@ 0x105
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000de6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000dea:	f88d 1009 	strb.w	r1, [sp, #9]
 8000dee:	2306      	movs	r3, #6
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000df0:	4411      	add	r1, r2
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000df2:	f88d 3006 	strb.w	r3, [sp, #6]
 8000df6:	f88d 0007 	strb.w	r0, [sp, #7]
 8000dfa:	2300      	movs	r3, #0
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000dfc:	4408      	add	r0, r1
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000dfe:	f88d 3008 	strb.w	r3, [sp, #8]
	uint16_t checksum = -(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6]);
 8000e02:	4240      	negs	r0, r0
	uint8_t buffer[10] = {0x7E, 0xFF, 0x06, cmd, 0x00, param1, param2, 0x00, 0x00, 0xEF};
 8000e04:	23ef      	movs	r3, #239	@ 0xef
 8000e06:	f88d 300d 	strb.w	r3, [sp, #13]
	buffer[7] = (checksum >> 8) & 0xFF;
 8000e0a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000e0e:	f88d 300b 	strb.w	r3, [sp, #11]
	buffer[8] = checksum & 0xFF;
 8000e12:	f88d 000c 	strb.w	r0, [sp, #12]

	HAL_UART_Transmit(&huart4, buffer, 10, HAL_MAX_DELAY);
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	220a      	movs	r2, #10
 8000e1c:	a901      	add	r1, sp, #4
 8000e1e:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <DF_SendCommand+0x54>)
 8000e20:	f005 ff8d 	bl	8006d3e <HAL_UART_Transmit>
}
 8000e24:	b005      	add	sp, #20
 8000e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e2a:	bf00      	nop
 8000e2c:	20000128 	.word	0x20000128

08000e30 <GameOverTask>:
void GameOverTask(void *param){
 8000e30:	b508      	push	{r3, lr}
	DF_SendCommand(0x0F, 0x02, 0x03);
 8000e32:	2203      	movs	r2, #3
 8000e34:	2102      	movs	r1, #2
 8000e36:	200f      	movs	r0, #15
 8000e38:	f7ff ffce 	bl	8000dd8 <DF_SendCommand>
	osDelay(2000);
 8000e3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e40:	f006 f8ec 	bl	800701c <osDelay>
	DF_SendCommand(0x0F, 0x02, 0x01);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2102      	movs	r1, #2
 8000e48:	200f      	movs	r0, #15
 8000e4a:	f7ff ffc5 	bl	8000dd8 <DF_SendCommand>
	osThreadExit();
 8000e4e:	f006 f8e0 	bl	8007012 <osThreadExit>
	...

08000e54 <main>:
{
 8000e54:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000e58:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8000e5a:	f003 fd15 	bl	8004888 <HAL_Init>
  SystemClock_Config();
 8000e5e:	f7ff fe69 	bl	8000b34 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	2214      	movs	r2, #20
 8000e64:	2100      	movs	r1, #0
 8000e66:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e68:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f012 f80e 	bl	8012e8a <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4bc6      	ldr	r3, [pc, #792]	@ (8001188 <main+0x334>)
 8000e70:	9400      	str	r4, [sp, #0]
 8000e72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000e74:	48c5      	ldr	r0, [pc, #788]	@ (800118c <main+0x338>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e76:	f042 0210 	orr.w	r2, r2, #16
 8000e7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e7e:	f002 0210 	and.w	r2, r2, #16
 8000e82:	9200      	str	r2, [sp, #0]
 8000e84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e86:	9401      	str	r4, [sp, #4]
 8000e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e8a:	f042 0220 	orr.w	r2, r2, #32
 8000e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e92:	f002 0220 	and.w	r2, r2, #32
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9a:	9402      	str	r4, [sp, #8]
 8000e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ea6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000eaa:	9202      	str	r2, [sp, #8]
 8000eac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	9403      	str	r4, [sp, #12]
 8000eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb2:	f042 0204 	orr.w	r2, r2, #4
 8000eb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eba:	f002 0204 	and.w	r2, r2, #4
 8000ebe:	9203      	str	r2, [sp, #12]
 8000ec0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	9404      	str	r4, [sp, #16]
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ece:	f002 0201 	and.w	r2, r2, #1
 8000ed2:	9204      	str	r2, [sp, #16]
 8000ed4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	9405      	str	r4, [sp, #20]
 8000ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eda:	f042 0202 	orr.w	r2, r2, #2
 8000ede:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ee2:	f002 0202 	and.w	r2, r2, #2
 8000ee6:	9205      	str	r2, [sp, #20]
 8000ee8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eea:	9406      	str	r4, [sp, #24]
 8000eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ef2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ef6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000efa:	9206      	str	r2, [sp, #24]
 8000efc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efe:	9407      	str	r4, [sp, #28]
 8000f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f02:	f042 0208 	orr.w	r2, r2, #8
 8000f06:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000f10:	4622      	mov	r2, r4
 8000f12:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f14:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000f16:	f003 ff3d 	bl	8004d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f1a:	489d      	ldr	r0, [pc, #628]	@ (8001190 <main+0x33c>)
 8000f1c:	4622      	mov	r2, r4
 8000f1e:	2104      	movs	r1, #4
 8000f20:	f003 ff38 	bl	8004d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f24:	4622      	mov	r2, r4
 8000f26:	489b      	ldr	r0, [pc, #620]	@ (8001194 <main+0x340>)
 8000f28:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f2e:	f003 ff31 	bl	8004d94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f38:	4894      	ldr	r0, [pc, #592]	@ (800118c <main+0x338>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3e:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f46:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4c:	f003 fe38 	bl	8004bc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	488f      	ldr	r0, [pc, #572]	@ (8001190 <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f56:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	e9cd 850d 	strd	r8, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5e:	9710      	str	r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f003 fe2e 	bl	8004bc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f64:	488b      	ldr	r0, [pc, #556]	@ (8001194 <main+0x340>)
 8000f66:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f68:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	e9cd 650d 	strd	r6, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f74:	f003 fe24 	bl	8004bc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	4885      	ldr	r0, [pc, #532]	@ (8001190 <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7c:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	e9cd 950d 	strd	r9, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f003 fe1d 	bl	8004bc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f86:	4622      	mov	r2, r4
 8000f88:	4649      	mov	r1, r9
 8000f8a:	4881      	ldr	r0, [pc, #516]	@ (8001190 <main+0x33c>)
 8000f8c:	f003 ff02 	bl	8004d94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000f90:	f04f 0b0c 	mov.w	fp, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f94:	4880      	ldr	r0, [pc, #512]	@ (8001198 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	950f      	str	r5, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f98:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	e9cd b40d 	strd	fp, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9e:	f003 fe0f 	bl	8004bc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	487e      	ldr	r0, [pc, #504]	@ (800119c <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	950f      	str	r5, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f003 fe08 	bl	8004bc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb4:	4878      	ldr	r0, [pc, #480]	@ (8001198 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb8:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fbe:	f003 fdff 	bl	8004bc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	4876      	ldr	r0, [pc, #472]	@ (80011a0 <main+0x34c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc8:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fcc:	e9cd 270e 	strd	r2, r7, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f003 fdf6 	bl	8004bc0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	2006      	movs	r0, #6
 8000fda:	f003 fca7 	bl	800492c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fde:	2006      	movs	r0, #6
 8000fe0:	f003 fcd6 	bl	8004990 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 8000fe4:	486f      	ldr	r0, [pc, #444]	@ (80011a4 <main+0x350>)
 8000fe6:	4a70      	ldr	r2, [pc, #448]	@ (80011a8 <main+0x354>)
  hi2c3.Instance = I2C3;
 8000fe8:	4e70      	ldr	r6, [pc, #448]	@ (80011ac <main+0x358>)
  hcrc.Instance = CRC;
 8000fea:	6002      	str	r2, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fec:	f003 fcde 	bl	80049ac <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8000ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80011b0 <main+0x35c>)
 8000ff2:	4a70      	ldr	r2, [pc, #448]	@ (80011b4 <main+0x360>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff4:	6234      	str	r4, [r6, #32]
  hi2c3.Init.ClockSpeed = 100000;
 8000ff6:	e9c6 3200 	strd	r3, r2, [r6]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ffa:	4630      	mov	r0, r6
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	e9c6 2404 	strd	r2, r4, [r6, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8001004:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800100c:	f004 f8c0 	bl	8005190 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001010:	2110      	movs	r1, #16
 8001012:	4630      	mov	r0, r6
 8001014:	f004 fafc 	bl	8005610 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001018:	4621      	mov	r1, r4
 800101a:	4630      	mov	r0, r6
 800101c:	f004 fb17 	bl	800564e <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 8001020:	4865      	ldr	r0, [pc, #404]	@ (80011b8 <main+0x364>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001022:	4966      	ldr	r1, [pc, #408]	@ (80011bc <main+0x368>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001024:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001026:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800102a:	e9c0 1200 	strd	r1, r2, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800102e:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8001032:	2218      	movs	r2, #24
 8001034:	e9c0 6206 	strd	r6, r2, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8001038:	220a      	movs	r2, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800103a:	4e61      	ldr	r6, [pc, #388]	@ (80011c0 <main+0x36c>)
  hspi5.Init.CRCPolynomial = 10;
 800103c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800103e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001042:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001046:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800104a:	f005 f995 	bl	8006378 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800104e:	4a5d      	ldr	r2, [pc, #372]	@ (80011c4 <main+0x370>)
  SdramTiming.LoadToActiveDelay = 2;
 8001050:	970d      	str	r7, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001052:	f04f 0c10 	mov.w	ip, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001056:	e9c6 2500 	strd	r2, r5, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800105a:	2240      	movs	r2, #64	@ 0x40
 800105c:	e9c6 c204 	strd	ip, r2, [r6, #16]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001064:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001068:	e9c6 2406 	strd	r2, r4, [r6, #24]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800106c:	62b3      	str	r3, [r6, #40]	@ 0x28
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800106e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001072:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001074:	a90d      	add	r1, sp, #52	@ 0x34
 8001076:	4630      	mov	r0, r6
  SdramTiming.WriteRecoveryTime = 3;
 8001078:	e9cd 3a10 	strd	r3, sl, [sp, #64]	@ 0x40
  SdramTiming.SelfRefreshTime = 4;
 800107c:	e9cd 380e 	strd	r3, r8, [sp, #56]	@ 0x38
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001080:	e9c6 2408 	strd	r2, r4, [r6, #32]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001084:	e9c6 4802 	strd	r4, r8, [r6, #8]
  SdramTiming.RCDDelay = 2;
 8001088:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800108c:	f005 f870 	bl	8006170 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001094:	a909      	add	r1, sp, #36	@ 0x24
 8001096:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001098:	e9cd 5909 	strd	r5, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 800109c:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
 __IO uint32_t tmpmrd =0;
 80010a0:	9408      	str	r4, [sp, #32]
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010a2:	f005 f885 	bl	80061b0 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 80010a6:	4628      	mov	r0, r5
 80010a8:	f003 fc1a 	bl	80048e0 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b0:	a909      	add	r1, sp, #36	@ 0x24
 80010b2:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010b4:	e9cd 7909 	strd	r7, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80010b8:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010bc:	f005 f878 	bl	80061b0 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c4:	a909      	add	r1, sp, #36	@ 0x24
 80010c6:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010c8:	e9cd a909 	strd	sl, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80010cc:	e9cd 840b 	strd	r8, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010d0:	f005 f86e 	bl	80061b0 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80010d4:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80010d8:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 80010da:	9b08      	ldr	r3, [sp, #32]
 80010dc:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010e2:	a909      	add	r1, sp, #36	@ 0x24
 80010e4:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80010e6:	e9cd 8909 	strd	r8, r9, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 80010ea:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80010ec:	f005 f860 	bl	80061b0 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80010f0:	f240 516a 	movw	r1, #1386	@ 0x56a
 80010f4:	4630      	mov	r0, r6
 80010f6:	f005 f879 	bl	80061ec <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010fa:	2234      	movs	r2, #52	@ 0x34
 80010fc:	4621      	mov	r1, r4
 80010fe:	eb0d 0002 	add.w	r0, sp, r2
 8001102:	f011 fec2 	bl	8012e8a <memset>
  hltdc.Instance = LTDC;
 8001106:	4e30      	ldr	r6, [pc, #192]	@ (80011c8 <main+0x374>)
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <main+0x378>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800110a:	6134      	str	r4, [r6, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800110c:	e9c6 3400 	strd	r3, r4, [r6]
  hltdc.Init.HorizontalSync = 9;
 8001110:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 8001112:	e9c6 3505 	strd	r3, r5, [r6, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8001116:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8001118:	f240 1e0d 	movw	lr, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 800111c:	e9c6 3a07 	strd	r3, sl, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 8001120:	f240 1343 	movw	r3, #323	@ 0x143
 8001124:	e9c6 e309 	strd	lr, r3, [r6, #36]	@ 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001128:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 327;
 800112a:	f240 1347 	movw	r3, #327	@ 0x147
 800112e:	f240 1917 	movw	r9, #279	@ 0x117
 8001132:	e9c6 930b 	strd	r9, r3, [r6, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001136:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.Backcolor.Blue = 0;
 800113a:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 800113c:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001140:	f004 fb20 	bl	8005784 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001144:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 8001146:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 8001148:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800114c:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 8001150:	2105      	movs	r1, #5
  pLayerCfg.WindowY1 = 320;
 8001152:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 8001156:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800115a:	e9cd a114 	strd	sl, r1, [sp, #80]	@ 0x50
  pLayerCfg.ImageWidth = 240;
 800115e:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001162:	a90d      	add	r1, sp, #52	@ 0x34
 8001164:	4622      	mov	r2, r4
 8001166:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001168:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 800116c:	4e18      	ldr	r6, [pc, #96]	@ (80011d0 <main+0x37c>)
  pLayerCfg.ImageHeight = 320;
 800116e:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 8001170:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 8001172:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 8001176:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800117a:	f004 fbce 	bl	800591a <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <main+0x380>)
 8001180:	6033      	str	r3, [r6, #0]
  LcdDrv->Init();
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	e028      	b.n	80011d8 <main+0x384>
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40021000 	.word	0x40021000
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021800 	.word	0x40021800
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020000 	.word	0x40020000
 80011a4:	20000338 	.word	0x20000338
 80011a8:	40023000 	.word	0x40023000
 80011ac:	200002a4 	.word	0x200002a4
 80011b0:	40005c00 	.word	0x40005c00
 80011b4:	000186a0 	.word	0x000186a0
 80011b8:	200001a4 	.word	0x200001a4
 80011bc:	40015000 	.word	0x40015000
 80011c0:	20000170 	.word	0x20000170
 80011c4:	a0000140 	.word	0xa0000140
 80011c8:	200001fc 	.word	0x200001fc
 80011cc:	40016800 	.word	0x40016800
 80011d0:	20000110 	.word	0x20000110
 80011d4:	20000014 	.word	0x20000014
 80011d8:	4798      	blx	r3
  LcdDrv->DisplayOff();
 80011da:	6833      	ldr	r3, [r6, #0]
  hdma2d.Instance = DMA2D;
 80011dc:	4e31      	ldr	r6, [pc, #196]	@ (80012a4 <main+0x450>)
  LcdDrv->DisplayOff();
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 80011e2:	4b31      	ldr	r3, [pc, #196]	@ (80012a8 <main+0x454>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011e4:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 80011e6:	e9c6 3400 	strd	r3, r4, [r6]
  hdma2d.Init.OutputOffset = 0;
 80011ea:	e9c6 7402 	strd	r7, r4, [r6, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80011ee:	e9c6 470a 	strd	r4, r7, [r6, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011f2:	e9c6 440c 	strd	r4, r4, [r6, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011f6:	f003 fbe9 	bl	80049cc <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011fa:	4629      	mov	r1, r5
 80011fc:	4630      	mov	r0, r6
 80011fe:	f003 fc9b 	bl	8004b38 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 8001202:	f000 fbb9 	bl	8001978 <MX_TouchGFX_Init>
	  huart4.Instance = UART4;
 8001206:	4829      	ldr	r0, [pc, #164]	@ (80012ac <main+0x458>)
	  huart4.Init.BaudRate = 9600;
 8001208:	4a29      	ldr	r2, [pc, #164]	@ (80012b0 <main+0x45c>)
 800120a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800120e:	e9c0 2300 	strd	r2, r3, [r0]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001212:	e9c0 4402 	strd	r4, r4, [r0, #8]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001216:	e9c0 4b04 	strd	r4, fp, [r0, #16]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800121a:	e9c0 4406 	strd	r4, r4, [r0, #24]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 800121e:	f005 fd5f 	bl	8006ce0 <HAL_UART_Init>
  HAL_Delay(1000);
 8001222:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001226:	f003 fb5b 	bl	80048e0 <HAL_Delay>
  DF_SendCommand(0x3F, 0, 0);
 800122a:	4622      	mov	r2, r4
 800122c:	4621      	mov	r1, r4
 800122e:	203f      	movs	r0, #63	@ 0x3f
 8001230:	f7ff fdd2 	bl	8000dd8 <DF_SendCommand>
  HAL_Delay(200);
 8001234:	20c8      	movs	r0, #200	@ 0xc8
 8001236:	f003 fb53 	bl	80048e0 <HAL_Delay>
  DF_SendCommand(0x06, 0x00, 15);
 800123a:	220f      	movs	r2, #15
 800123c:	4621      	mov	r1, r4
 800123e:	2006      	movs	r0, #6
 8001240:	f7ff fdca 	bl	8000dd8 <DF_SendCommand>
  HAL_Delay(200);
 8001244:	20c8      	movs	r0, #200	@ 0xc8
 8001246:	f003 fb4b 	bl	80048e0 <HAL_Delay>
  DF_SendCommand(0x0F, 0x02, 0x02);
 800124a:	463a      	mov	r2, r7
 800124c:	4639      	mov	r1, r7
 800124e:	200f      	movs	r0, #15
 8001250:	f7ff fdc2 	bl	8000dd8 <DF_SendCommand>
  osKernelInitialize();
 8001254:	f005 fe66 	bl	8006f24 <osKernelInitialize>
  movingQueueHandle = osMessageQueueNew(4, sizeof(char), &movingQueue_attributes);
 8001258:	4a16      	ldr	r2, [pc, #88]	@ (80012b4 <main+0x460>)
 800125a:	4629      	mov	r1, r5
 800125c:	4640      	mov	r0, r8
 800125e:	f005 ff91 	bl	8007184 <osMessageQueueNew>
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <main+0x464>)
  speedQueueHandle = osMessageQueueNew(4, sizeof(char), &speedQueue_attributes);
 8001264:	4a15      	ldr	r2, [pc, #84]	@ (80012bc <main+0x468>)
  movingQueueHandle = osMessageQueueNew(4, sizeof(char), &movingQueue_attributes);
 8001266:	6018      	str	r0, [r3, #0]
  speedQueueHandle = osMessageQueueNew(4, sizeof(char), &speedQueue_attributes);
 8001268:	4629      	mov	r1, r5
 800126a:	4640      	mov	r0, r8
 800126c:	f005 ff8a 	bl	8007184 <osMessageQueueNew>
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <main+0x46c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001272:	4a14      	ldr	r2, [pc, #80]	@ (80012c4 <main+0x470>)
  speedQueueHandle = osMessageQueueNew(4, sizeof(char), &speedQueue_attributes);
 8001274:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001276:	4621      	mov	r1, r4
 8001278:	4813      	ldr	r0, [pc, #76]	@ (80012c8 <main+0x474>)
 800127a:	f005 fe86 	bl	8006f8a <osThreadNew>
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <main+0x478>)
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001280:	4a13      	ldr	r2, [pc, #76]	@ (80012d0 <main+0x47c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001282:	6018      	str	r0, [r3, #0]
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001284:	4621      	mov	r1, r4
 8001286:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <main+0x480>)
 8001288:	f005 fe7f 	bl	8006f8a <osThreadNew>
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <main+0x484>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800128e:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <main+0x488>)
  movingTaskHandle = osThreadNew(MovingTask, NULL, &movingTask_attributes);
 8001290:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001292:	4621      	mov	r1, r4
 8001294:	4812      	ldr	r0, [pc, #72]	@ (80012e0 <main+0x48c>)
 8001296:	f005 fe78 	bl	8006f8a <osThreadNew>
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <main+0x490>)
 800129c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800129e:	f005 fe53 	bl	8006f48 <osKernelStart>
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <main+0x44e>
 80012a4:	200002f8 	.word	0x200002f8
 80012a8:	4002b000 	.word	0x4002b000
 80012ac:	20000128 	.word	0x20000128
 80012b0:	40004c00 	.word	0x40004c00
 80012b4:	08014974 	.word	0x08014974
 80012b8:	20000118 	.word	0x20000118
 80012bc:	0801495c 	.word	0x0801495c
 80012c0:	20000114 	.word	0x20000114
 80012c4:	080149d4 	.word	0x080149d4
 80012c8:	08000a99 	.word	0x08000a99
 80012cc:	20000124 	.word	0x20000124
 80012d0:	080149b0 	.word	0x080149b0
 80012d4:	08000aa5 	.word	0x08000aa5
 80012d8:	20000120 	.word	0x20000120
 80012dc:	0801498c 	.word	0x0801498c
 80012e0:	0800197d 	.word	0x0800197d
 80012e4:	2000011c 	.word	0x2000011c

080012e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012e8:	6802      	ldr	r2, [r0, #0]
 80012ea:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d101      	bne.n	80012f4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80012f0:	f003 bae4 	b.w	80048bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40001000 	.word	0x40001000

080012fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012fc:	b508      	push	{r3, lr}
	DF_SendCommand(0x19, 0x00, 0x00);
 80012fe:	2200      	movs	r2, #0
 8001300:	4611      	mov	r1, r2
 8001302:	2019      	movs	r0, #25
 8001304:	f7ff fd68 	bl	8000dd8 <DF_SendCommand>
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
}
 8001308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <HAL_GPIO_EXTI_Callback+0x1c>)
 800130e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001312:	f003 bd44 	b.w	8004d9e <HAL_GPIO_TogglePin>
 8001316:	bf00      	nop
 8001318:	40021800 	.word	0x40021800

0800131c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800131c:	4770      	bx	lr
	...

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_MspInit+0x3c>)
 8001324:	2200      	movs	r2, #0
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800132a:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800132e:	6459      	str	r1, [r3, #68]	@ 0x44
 8001330:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001332:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8001336:	9100      	str	r1, [sp, #0]
 8001338:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	9201      	str	r2, [sp, #4]
 800133c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800133e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001342:	6419      	str	r1, [r3, #64]	@ 0x40
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800134e:	210f      	movs	r1, #15
 8001350:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001354:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001356:	f003 bae9 	b.w	800492c <HAL_NVIC_SetPriority>
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001360:	6802      	ldr	r2, [r0, #0]
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_CRC_MspInit+0x28>)
 8001364:	429a      	cmp	r2, r3
{
 8001366:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001368:	d10b      	bne.n	8001382 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_CRC_MspInit+0x2c>)
 8001370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001372:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001376:	631a      	str	r2, [r3, #48]	@ 0x30
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001382:	b002      	add	sp, #8
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023000 	.word	0x40023000
 800138c:	40023800 	.word	0x40023800

08001390 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001390:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_DMA2D_MspInit+0x40>)
 8001394:	6802      	ldr	r2, [r0, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d116      	bne.n	80013c8 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800139a:	2200      	movs	r2, #0
 800139c:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 80013a0:	9201      	str	r2, [sp, #4]
 80013a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013a4:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80013a8:	6319      	str	r1, [r3, #48]	@ 0x30
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013b0:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013b2:	2105      	movs	r1, #5
 80013b4:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013b8:	f003 fab8 	bl	800492c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013bc:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80013be:	b003      	add	sp, #12
 80013c0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013c4:	f003 bae4 	b.w	8004990 <HAL_NVIC_EnableIRQ>
}
 80013c8:	b003      	add	sp, #12
 80013ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ce:	bf00      	nop
 80013d0:	4002b000 	.word	0x4002b000

080013d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013d8:	4604      	mov	r4, r0
 80013da:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	2214      	movs	r2, #20
 80013de:	2100      	movs	r1, #0
 80013e0:	a803      	add	r0, sp, #12
 80013e2:	f011 fd52 	bl	8012e8a <memset>
  if(hi2c->Instance==I2C3)
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_I2C_MspInit+0xa8>)
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d143      	bne.n	8001476 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4c24      	ldr	r4, [pc, #144]	@ (8001480 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	4824      	ldr	r0, [pc, #144]	@ (8001484 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2500      	movs	r5, #0
 80013f4:	9500      	str	r5, [sp, #0]
 80013f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80013fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	9501      	str	r5, [sp, #4]
 800140a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6323      	str	r3, [r4, #48]	@ 0x30
 8001412:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	f04f 0912 	mov.w	r9, #18
 8001420:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	f04f 0801 	mov.w	r8, #1
 8001428:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800142a:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142e:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001436:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001438:	f003 fbc2 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800143c:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	4811      	ldr	r0, [pc, #68]	@ (8001488 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001442:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f003 fbb7 	bl	8004bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001452:	9502      	str	r5, [sp, #8]
 8001454:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001456:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800145a:	6423      	str	r3, [r4, #64]	@ 0x40
 800145c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800145e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 8001466:	6a23      	ldr	r3, [r4, #32]
 8001468:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800146c:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 800146e:	6a23      	ldr	r3, [r4, #32]
 8001470:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001474:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001476:	b009      	add	sp, #36	@ 0x24
 8001478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800147c:	40005c00 	.word	0x40005c00
 8001480:	40023800 	.word	0x40023800
 8001484:	40020800 	.word	0x40020800
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	b099      	sub	sp, #100	@ 0x64
 8001490:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	2214      	movs	r2, #20
 8001494:	2100      	movs	r1, #0
 8001496:	a807      	add	r0, sp, #28
 8001498:	f011 fcf7 	bl	8012e8a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	2230      	movs	r2, #48	@ 0x30
 800149e:	eb0d 0002 	add.w	r0, sp, r2
 80014a2:	2100      	movs	r1, #0
 80014a4:	f011 fcf1 	bl	8012e8a <memset>
  if(hltdc->Instance==LTDC)
 80014a8:	6822      	ldr	r2, [r4, #0]
 80014aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001624 <HAL_LTDC_MspInit+0x198>)
 80014ac:	429a      	cmp	r2, r3
 80014ae:	f040 80b7 	bne.w	8001620 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014b2:	2308      	movs	r3, #8
 80014b4:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80014b6:	23c0      	movs	r3, #192	@ 0xc0
 80014b8:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80014ba:	2304      	movs	r3, #4
 80014bc:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014be:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014c4:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c6:	f004 fd27 	bl	8005f18 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	b108      	cbz	r0, 80014d0 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 80014cc:	f7ff ff26 	bl	800131c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014d0:	4b55      	ldr	r3, [pc, #340]	@ (8001628 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d2:	4856      	ldr	r0, [pc, #344]	@ (800162c <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014d4:	2400      	movs	r4, #0
 80014d6:	9400      	str	r4, [sp, #0]
 80014d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014da:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80014de:	645a      	str	r2, [r3, #68]	@ 0x44
 80014e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014e2:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ea:	9401      	str	r4, [sp, #4]
 80014ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ee:	f042 0220 	orr.w	r2, r2, #32
 80014f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014f6:	f002 0220 	and.w	r2, r2, #32
 80014fa:	9201      	str	r2, [sp, #4]
 80014fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	9402      	str	r4, [sp, #8]
 8001500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	631a      	str	r2, [r3, #48]	@ 0x30
 8001508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800150a:	f002 0201 	and.w	r2, r2, #1
 800150e:	9202      	str	r2, [sp, #8]
 8001510:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	9403      	str	r4, [sp, #12]
 8001514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001516:	f042 0202 	orr.w	r2, r2, #2
 800151a:	631a      	str	r2, [r3, #48]	@ 0x30
 800151c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800151e:	f002 0202 	and.w	r2, r2, #2
 8001522:	9203      	str	r2, [sp, #12]
 8001524:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001526:	9404      	str	r4, [sp, #16]
 8001528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800152a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800152e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001532:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001536:	9204      	str	r2, [sp, #16]
 8001538:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	9405      	str	r4, [sp, #20]
 800153c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800153e:	f042 0204 	orr.w	r2, r2, #4
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
 8001544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001546:	f002 0204 	and.w	r2, r2, #4
 800154a:	9205      	str	r2, [sp, #20]
 800154c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	9406      	str	r4, [sp, #24]
 8001550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001552:	f042 0208 	orr.w	r2, r2, #8
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001562:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001564:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001566:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800156c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001572:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001576:	f003 fb23 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 800157a:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	482c      	ldr	r0, [pc, #176]	@ (8001630 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001580:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001588:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f003 fb17 	bl	8004bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001592:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	4827      	ldr	r0, [pc, #156]	@ (8001634 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001596:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f003 fb0d 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80015a6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	4822      	ldr	r0, [pc, #136]	@ (8001634 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ac:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b4:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f003 fb02 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80015bc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c0:	481d      	ldr	r0, [pc, #116]	@ (8001638 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015c2:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ce:	f003 faf7 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d2:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	4819      	ldr	r0, [pc, #100]	@ (800163c <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d6:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f003 faed 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015e6:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e8:	4815      	ldr	r0, [pc, #84]	@ (8001640 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ea:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ec:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f2:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f6:	f003 fae3 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80015fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fe:	480e      	ldr	r0, [pc, #56]	@ (8001638 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001600:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001602:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001608:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800160c:	f003 fad8 	bl	8004bc0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001610:	2058      	movs	r0, #88	@ 0x58
 8001612:	4622      	mov	r2, r4
 8001614:	2105      	movs	r1, #5
 8001616:	f003 f989 	bl	800492c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800161a:	2058      	movs	r0, #88	@ 0x58
 800161c:	f003 f9b8 	bl	8004990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001620:	b019      	add	sp, #100	@ 0x64
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	40016800 	.word	0x40016800
 8001628:	40023800 	.word	0x40023800
 800162c:	40021400 	.word	0x40021400
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	40021800 	.word	0x40021800
 800163c:	40020800 	.word	0x40020800
 8001640:	40020c00 	.word	0x40020c00

08001644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001644:	b510      	push	{r4, lr}
 8001646:	4604      	mov	r4, r0
 8001648:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	2214      	movs	r2, #20
 800164c:	2100      	movs	r1, #0
 800164e:	a803      	add	r0, sp, #12
 8001650:	f011 fc1b 	bl	8012e8a <memset>
  if(hspi->Instance==SPI5)
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_SPI_MspInit+0x64>)
 8001658:	429a      	cmp	r2, r3
 800165a:	d123      	bne.n	80016a4 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800165c:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001660:	2100      	movs	r1, #0
 8001662:	9101      	str	r1, [sp, #4]
 8001664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001666:	4811      	ldr	r0, [pc, #68]	@ (80016ac <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001668:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800166c:	645a      	str	r2, [r3, #68]	@ 0x44
 800166e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001670:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001674:	9201      	str	r2, [sp, #4]
 8001676:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001678:	9102      	str	r1, [sp, #8]
 800167a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800167c:	f042 0220 	orr.w	r2, r2, #32
 8001680:	631a      	str	r2, [r3, #48]	@ 0x30
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001690:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001692:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001698:	2305      	movs	r3, #5
 800169a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800169e:	a903      	add	r1, sp, #12
 80016a0:	f003 fa8e 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80016a4:	b008      	add	sp, #32
 80016a6:	bd10      	pop	{r4, pc}
 80016a8:	40015000 	.word	0x40015000
 80016ac:	40021400 	.word	0x40021400

080016b0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016b6:	2300      	movs	r3, #0
 80016b8:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80016ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001768 <HAL_SDRAM_MspInit+0xb8>)
 80016bc:	681c      	ldr	r4, [r3, #0]
 80016be:	2c00      	cmp	r4, #0
 80016c0:	d14f      	bne.n	8001762 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 80016c2:	f04f 0801 	mov.w	r8, #1
 80016c6:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ca:	4b28      	ldr	r3, [pc, #160]	@ (800176c <HAL_SDRAM_MspInit+0xbc>)
 80016cc:	9400      	str	r4, [sp, #0]
 80016ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	4827      	ldr	r0, [pc, #156]	@ (8001770 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80016d2:	ea42 0208 	orr.w	r2, r2, r8
 80016d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80016d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016da:	ea03 0308 	and.w	r3, r3, r8
 80016de:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e2:	2603      	movs	r6, #3
 80016e4:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80016e6:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016e8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80016ee:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f2:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f6:	f003 fa63 	bl	8004bc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	481e      	ldr	r0, [pc, #120]	@ (8001774 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016fc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001708:	f003 fa5a 	bl	8004bc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800170c:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001710:	4819      	ldr	r0, [pc, #100]	@ (8001778 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001712:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001714:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800171e:	f003 fa4f 	bl	8004bc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001722:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001726:	4815      	ldr	r0, [pc, #84]	@ (800177c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001728:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001734:	f003 fa44 	bl	8004bc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001738:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173c:	4810      	ldr	r0, [pc, #64]	@ (8001780 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800173e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001740:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174a:	f003 fa39 	bl	8004bc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800174e:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001752:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f003 fa2f 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001762:	b006      	add	sp, #24
 8001764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001768:	20000340 	.word	0x20000340
 800176c:	40023800 	.word	0x40023800
 8001770:	40021400 	.word	0x40021400
 8001774:	40020800 	.word	0x40020800
 8001778:	40021800 	.word	0x40021800
 800177c:	40021000 	.word	0x40021000
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40020400 	.word	0x40020400

08001788 <HAL_UART_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	4604      	mov	r4, r0
 800178c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	2214      	movs	r2, #20
 8001790:	2100      	movs	r1, #0
 8001792:	a803      	add	r0, sp, #12
 8001794:	f011 fb79 	bl	8012e8a <memset>
  if(huart->Instance==UART4)
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <HAL_UART_MspInit+0x8c>)
 800179c:	429a      	cmp	r2, r3
 800179e:	d136      	bne.n	800180e <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017a0:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80017a4:	2400      	movs	r4, #0
 80017a6:	9400      	str	r4, [sp, #0]
 80017a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	481b      	ldr	r0, [pc, #108]	@ (8001818 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80017ac:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80017b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80017b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017b4:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	9401      	str	r4, [sp, #4]
 80017be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80017c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017c8:	f002 0201 	and.w	r2, r2, #1
 80017cc:	9201      	str	r2, [sp, #4]
 80017ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d0:	9402      	str	r4, [sp, #8]
 80017d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017d4:	f042 0204 	orr.w	r2, r2, #4
 80017d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80017da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017e2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017e4:	2703      	movs	r7, #3
 80017e6:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	e9cd 5503 	strd	r5, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017f0:	e9cd 7606 	strd	r7, r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f003 f9e4 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017fe:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001800:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	e9cd 4705 	strd	r4, r7, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f003 f9d9 	bl	8004bc0 <HAL_GPIO_Init>

    /* USER CODE BEGIN UART4_MspInit 1 */

    /* USER CODE END UART4_MspInit 1 */
  }
}
 800180e:	b009      	add	sp, #36	@ 0x24
 8001810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001812:	bf00      	nop
 8001814:	40004c00 	.word	0x40004c00
 8001818:	40020000 	.word	0x40020000
 800181c:	40020800 	.word	0x40020800

08001820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b530      	push	{r4, r5, lr}
 8001822:	4601      	mov	r1, r0
 8001824:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001826:	2200      	movs	r2, #0
 8001828:	2036      	movs	r0, #54	@ 0x36
 800182a:	f003 f87f 	bl	800492c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800182e:	2036      	movs	r0, #54	@ 0x36
 8001830:	f003 f8ae 	bl	8004990 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001834:	2500      	movs	r5, #0
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_InitTick+0x6c>)
 8001838:	9502      	str	r5, [sp, #8]
 800183a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800183c:	4c14      	ldr	r4, [pc, #80]	@ (8001890 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800183e:	f042 0210 	orr.w	r2, r2, #16
 8001842:	641a      	str	r2, [r3, #64]	@ 0x40
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184c:	a901      	add	r1, sp, #4
 800184e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001850:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001852:	f004 fb43 	bl	8005edc <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001856:	f004 fb21 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_InitTick+0x74>)
 800185c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800185e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001862:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001864:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <HAL_InitTick+0x78>)
 8001868:	fbb0 f0f3 	udiv	r0, r0, r3
 800186c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800186e:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001870:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001872:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001874:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001876:	f005 f947 	bl	8006b08 <HAL_TIM_Base_Init>
 800187a:	b920      	cbnz	r0, 8001886 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800187c:	4620      	mov	r0, r4
 800187e:	f005 f813 	bl	80068a8 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001882:	b009      	add	sp, #36	@ 0x24
 8001884:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	e7fb      	b.n	8001882 <HAL_InitTick+0x62>
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	20000344 	.word	0x20000344
 8001894:	40001000 	.word	0x40001000
 8001898:	000f4240 	.word	0x000f4240

0800189c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800189c:	4770      	bx	lr

0800189e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <HardFault_Handler>

080018a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler>

080018a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler>

080018a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler>

080018a6 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80018a6:	4770      	bx	lr

080018a8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018a8:	4801      	ldr	r0, [pc, #4]	@ (80018b0 <TIM6_DAC_IRQHandler+0x8>)
 80018aa:	f005 b83b 	b.w	8006924 <HAL_TIM_IRQHandler>
 80018ae:	bf00      	nop
 80018b0:	20000344 	.word	0x20000344

080018b4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018b4:	4801      	ldr	r0, [pc, #4]	@ (80018bc <LTDC_IRQHandler+0x8>)
 80018b6:	f003 bfd3 	b.w	8005860 <HAL_LTDC_IRQHandler>
 80018ba:	bf00      	nop
 80018bc:	200001fc 	.word	0x200001fc

080018c0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018c0:	4801      	ldr	r0, [pc, #4]	@ (80018c8 <DMA2D_IRQHandler+0x8>)
 80018c2:	f003 b8af 	b.w	8004a24 <HAL_DMA2D_IRQHandler>
 80018c6:	bf00      	nop
 80018c8:	200002f8 	.word	0x200002f8

080018cc <EXTI0_IRQHandler>:
/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f003 ba6f 	b.w	8004db0 <HAL_GPIO_EXTI_IRQHandler>

080018d2 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80018d2:	2001      	movs	r0, #1
 80018d4:	4770      	bx	lr

080018d6 <_kill>:

int _kill(int pid, int sig)
{
 80018d6:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018d8:	f011 fb7a 	bl	8012fd0 <__errno>
 80018dc:	2316      	movs	r3, #22
 80018de:	6003      	str	r3, [r0, #0]
	return -1;
}
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	bd08      	pop	{r3, pc}

080018e6 <_exit>:

void _exit (int status)
{
 80018e6:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018e8:	f011 fb72 	bl	8012fd0 <__errno>
 80018ec:	2316      	movs	r3, #22
 80018ee:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80018f0:	e7fe      	b.n	80018f0 <_exit+0xa>

080018f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f2:	b570      	push	{r4, r5, r6, lr}
 80018f4:	460d      	mov	r5, r1
 80018f6:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	460e      	mov	r6, r1
 80018fa:	1b73      	subs	r3, r6, r5
 80018fc:	429c      	cmp	r4, r3
 80018fe:	dc01      	bgt.n	8001904 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001900:	4620      	mov	r0, r4
 8001902:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001904:	f3af 8000 	nop.w
 8001908:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	e7f5      	b.n	80018fa <_read+0x8>

0800190e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190e:	b570      	push	{r4, r5, r6, lr}
 8001910:	460d      	mov	r5, r1
 8001912:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	460e      	mov	r6, r1
 8001916:	1b73      	subs	r3, r6, r5
 8001918:	429c      	cmp	r4, r3
 800191a:	dc01      	bgt.n	8001920 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800191c:	4620      	mov	r0, r4
 800191e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001920:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001924:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	e7f5      	b.n	8001916 <_write+0x8>

0800192a <_close>:

int _close(int file)
{
	return -1;
}
 800192a:	f04f 30ff 	mov.w	r0, #4294967295
 800192e:	4770      	bx	lr

08001930 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001934:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001936:	2000      	movs	r0, #0
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800193a:	2001      	movs	r0, #1
 800193c:	4770      	bx	lr

0800193e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800193e:	2000      	movs	r0, #0
 8001940:	4770      	bx	lr
	...

08001944 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001944:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <_sbrk+0x2c>)
 8001946:	6811      	ldr	r1, [r2, #0]
{
 8001948:	b508      	push	{r3, lr}
 800194a:	4603      	mov	r3, r0
	if (heap_end == 0)
 800194c:	b909      	cbnz	r1, 8001952 <_sbrk+0xe>
		heap_end = &end;
 800194e:	4909      	ldr	r1, [pc, #36]	@ (8001974 <_sbrk+0x30>)
 8001950:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001952:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001954:	4669      	mov	r1, sp
 8001956:	4403      	add	r3, r0
 8001958:	428b      	cmp	r3, r1
 800195a:	d906      	bls.n	800196a <_sbrk+0x26>
	{
		errno = ENOMEM;
 800195c:	f011 fb38 	bl	8012fd0 <__errno>
 8001960:	230c      	movs	r3, #12
 8001962:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001968:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800196a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800196c:	e7fc      	b.n	8001968 <_sbrk+0x24>
 800196e:	bf00      	nop
 8001970:	2000038c 	.word	0x2000038c
 8001974:	200157b0 	.word	0x200157b0

08001978 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001978:	f000 bcbe 	b.w	80022f8 <touchgfx_init>

0800197c <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800197c:	f000 bd30 	b.w	80023e0 <touchgfx_taskEntry>

08001980 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001980:	4770      	bx	lr

08001982 <_ZN20STM32TouchControllerD0Ev>:
 8001982:	b510      	push	{r4, lr}
 8001984:	2104      	movs	r1, #4
 8001986:	4604      	mov	r4, r0
 8001988:	f011 f84a 	bl	8012a20 <_ZdlPvj>
 800198c:	4620      	mov	r0, r4
 800198e:	bd10      	pop	{r4, pc}

08001990 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8001990:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8001994:	4c0c      	ldr	r4, [pc, #48]	@ (80019c8 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 8001996:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800199a:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 800199c:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800199e:	6863      	ldr	r3, [r4, #4]
 80019a0:	4798      	blx	r3
 80019a2:	f640 0311 	movw	r3, #2065	@ 0x811
 80019a6:	4298      	cmp	r0, r3
 80019a8:	d10a      	bne.n	80019c0 <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 80019aa:	4d09      	ldr	r5, [pc, #36]	@ (80019d0 <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 80019ac:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 80019ae:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 80019b0:	2082      	movs	r0, #130	@ 0x82
 80019b2:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 80019b4:	682b      	ldr	r3, [r5, #0]
 80019b6:	2082      	movs	r0, #130	@ 0x82
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4798      	blx	r3
 80019bc:	2000      	movs	r0, #0
    }

    return ret;
}
 80019be:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 80019c0:	2001      	movs	r0, #1
 80019c2:	e7fc      	b.n	80019be <_Z11BSP_TS_Inittt+0x2e>
 80019c4:	2000039a 	.word	0x2000039a
 80019c8:	2000004c 	.word	0x2000004c
 80019cc:	20000398 	.word	0x20000398
 80019d0:	2000039c 	.word	0x2000039c

080019d4 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 80019d4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80019d8:	20f0      	movs	r0, #240	@ 0xf0
 80019da:	f7ff bfd9 	b.w	8001990 <_Z11BSP_TS_Inittt>
	...

080019e0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80019e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80019e2:	4d35      	ldr	r5, [pc, #212]	@ (8001ab8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 80019e4:	682b      	ldr	r3, [r5, #0]
{
 80019e6:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2082      	movs	r0, #130	@ 0x82
 80019ec:	4798      	blx	r3
 80019ee:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d04b      	beq.n	8001a8c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xac>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80019f4:	682b      	ldr	r3, [r5, #0]
 80019f6:	f10d 0206 	add.w	r2, sp, #6
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	a901      	add	r1, sp, #4
 80019fe:	2082      	movs	r0, #130	@ 0x82
 8001a00:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 8001a02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a06:	f640 6274 	movw	r2, #3700	@ 0xe74
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d940      	bls.n	8001a90 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb0>
        {
            y = 3700;
 8001a0e:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 8001a12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a16:	1ad2      	subs	r2, r2, r3
 8001a18:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 8001a1a:	2a0a      	cmp	r2, #10
 8001a1c:	d93e      	bls.n	8001a9c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        yr = y / 11;
 8001a1e:	230b      	movs	r3, #11
 8001a20:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d901      	bls.n	8001a30 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 8001a30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001a34:	4822      	ldr	r0, [pc, #136]	@ (8001ac0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
 8001a36:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001a3a:	428b      	cmp	r3, r1
 8001a3c:	d830      	bhi.n	8001aa0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc0>
        {
            x = 3870 - x;
 8001a3e:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8001a42:	330e      	adds	r3, #14
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001a44:	6801      	ldr	r1, [r0, #0]
            x = 3870 - x;
 8001a46:	b29b      	uxth	r3, r3
        xr = x / 15;
 8001a48:	250f      	movs	r5, #15
 8001a4a:	fbb3 f3f5 	udiv	r3, r3, r5
        else if (xr > TsXBoundary)
 8001a4e:	4d1d      	ldr	r5, [pc, #116]	@ (8001ac4 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe4>)
 8001a50:	882d      	ldrh	r5, [r5, #0]
 8001a52:	42ab      	cmp	r3, r5
            xr = TsXBoundary - 1;
 8001a54:	bf84      	itt	hi
 8001a56:	f105 35ff 	addhi.w	r5, r5, #4294967295
 8001a5a:	b2ab      	uxthhi	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001a5c:	428b      	cmp	r3, r1
 8001a5e:	461d      	mov	r5, r3
 8001a60:	b28e      	uxth	r6, r1
 8001a62:	d926      	bls.n	8001ab2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd2>
 8001a64:	1b9b      	subs	r3, r3, r6
 8001a66:	b299      	uxth	r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 8001a68:	4e17      	ldr	r6, [pc, #92]	@ (8001ac8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe8>)
 8001a6a:	6837      	ldr	r7, [r6, #0]
 8001a6c:	b2bb      	uxth	r3, r7
 8001a6e:	42ba      	cmp	r2, r7
 8001a70:	bf8c      	ite	hi
 8001a72:	1ad3      	subhi	r3, r2, r3
 8001a74:	1a9b      	subls	r3, r3, r2
 8001a76:	b29b      	uxth	r3, r3

        if (xDiff + yDiff > 5)
 8001a78:	4419      	add	r1, r3
 8001a7a:	2905      	cmp	r1, #5
        {
            _x = x;
 8001a7c:	bfc8      	it	gt
 8001a7e:	6005      	strgt	r5, [r0, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 8001a80:	6803      	ldr	r3, [r0, #0]
            _y = y;
 8001a82:	bfc8      	it	gt
 8001a84:	6032      	strgt	r2, [r6, #0]
        TsState->X = _x;
 8001a86:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8001a88:	6833      	ldr	r3, [r6, #0]
 8001a8a:	80a3      	strh	r3, [r4, #4]
    }
}
 8001a8c:	b003      	add	sp, #12
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 8001a90:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 8001a92:	bf9c      	itt	ls
 8001a94:	23b4      	movls	r3, #180	@ 0xb4
 8001a96:	f8ad 3006 	strhls.w	r3, [sp, #6]
 8001a9a:	e7ba      	b.n	8001a12 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	e7c7      	b.n	8001a30 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 8001aa0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8001aa4:	3308      	adds	r3, #8
 8001aa6:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8001aa8:	2b0e      	cmp	r3, #14
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001aaa:	6801      	ldr	r1, [r0, #0]
        if (xr <= 0)
 8001aac:	d8cc      	bhi.n	8001a48 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x68>
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001aae:	2500      	movs	r5, #0
            xr = 0;
 8001ab0:	462b      	mov	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 8001ab2:	1ac9      	subs	r1, r1, r3
 8001ab4:	b289      	uxth	r1, r1
 8001ab6:	e7d7      	b.n	8001a68 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x88>
 8001ab8:	2000039c 	.word	0x2000039c
 8001abc:	20000398 	.word	0x20000398
 8001ac0:	20000394 	.word	0x20000394
 8001ac4:	2000039a 	.word	0x2000039a
 8001ac8:	20000390 	.word	0x20000390

08001acc <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8001acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8001ace:	4668      	mov	r0, sp
{
 8001ad0:	460d      	mov	r5, r1
 8001ad2:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8001ad4:	f7ff ff84 	bl	80019e0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 8001ad8:	f8bd 0000 	ldrh.w	r0, [sp]
 8001adc:	b130      	cbz	r0, 8001aec <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8001ade:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001ae2:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8001ae4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001ae8:	6023      	str	r3, [r4, #0]
        return true;
 8001aea:	2001      	movs	r0, #1
}
 8001aec:	b003      	add	sp, #12
 8001aee:	bd30      	pop	{r4, r5, pc}

08001af0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001af0:	2803      	cmp	r0, #3
 8001af2:	d821      	bhi.n	8001b38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8001af4:	e8df f000 	tbb	[pc, r0]
 8001af8:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	fab2 f282 	clz	r2, r2
 8001b04:	0952      	lsrs	r2, r2, #5
 8001b06:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b0a:	f003 b943 	b.w	8004d94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	fab2 f282 	clz	r2, r2
 8001b16:	0952      	lsrs	r2, r2, #5
 8001b18:	2108      	movs	r1, #8
 8001b1a:	e7f5      	b.n	8001b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b1c:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	0952      	lsrs	r2, r2, #5
 8001b26:	2110      	movs	r1, #16
 8001b28:	e7ee      	b.n	8001b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	0952      	lsrs	r2, r2, #5
 8001b34:	2120      	movs	r1, #32
 8001b36:	e7e7      	b.n	8001b08 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	200003a0 	.word	0x200003a0
 8001b40:	40021000 	.word	0x40021000

08001b44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001b44:	2803      	cmp	r0, #3
 8001b46:	d821      	bhi.n	8001b8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 8001b48:	e8df f000 	tbb	[pc, r0]
 8001b4c:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	3a00      	subs	r2, #0
 8001b56:	bf18      	it	ne
 8001b58:	2201      	movne	r2, #1
 8001b5a:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001b5c:	480d      	ldr	r0, [pc, #52]	@ (8001b94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001b5e:	f003 b919 	b.w	8004d94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	3a00      	subs	r2, #0
 8001b68:	bf18      	it	ne
 8001b6a:	2201      	movne	r2, #1
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	e7f5      	b.n	8001b5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001b70:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	3a00      	subs	r2, #0
 8001b76:	bf18      	it	ne
 8001b78:	2201      	movne	r2, #1
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	e7ee      	b.n	8001b5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	3a00      	subs	r2, #0
 8001b84:	bf18      	it	ne
 8001b86:	2201      	movne	r2, #1
 8001b88:	2120      	movs	r1, #32
 8001b8a:	e7e7      	b.n	8001b5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200003a0 	.word	0x200003a0
 8001b94:	40021000 	.word	0x40021000

08001b98 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001b98:	2803      	cmp	r0, #3
 8001b9a:	d80d      	bhi.n	8001bb8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8001b9c:	e8df f000 	tbb	[pc, r0]
 8001ba0:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ba4:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001ba6:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8001ba8:	f003 b8f9 	b.w	8004d9e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001bac:	2108      	movs	r1, #8
 8001bae:	e7fa      	b.n	8001ba6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	e7f8      	b.n	8001ba6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	e7f6      	b.n	8001ba6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001bc0:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001bc2:	2803      	cmp	r0, #3
 8001bc4:	d811      	bhi.n	8001bea <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 8001bc6:	e8df f000 	tbb	[pc, r0]
 8001bca:	0a02      	.short	0x0a02
 8001bcc:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001bce:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001bd0:	4807      	ldr	r0, [pc, #28]	@ (8001bf0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8001bd2:	f003 f8d9 	bl	8004d88 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001bd6:	1e43      	subs	r3, r0, #1
 8001bd8:	4258      	negs	r0, r3
 8001bda:	4158      	adcs	r0, r3
 8001bdc:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001bde:	2108      	movs	r1, #8
 8001be0:	e7f6      	b.n	8001bd0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001be2:	2110      	movs	r1, #16
 8001be4:	e7f4      	b.n	8001bd0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001be6:	2120      	movs	r1, #32
 8001be8:	e7f2      	b.n	8001bd0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8001bea:	2000      	movs	r0, #0
 8001bec:	e7f3      	b.n	8001bd6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <_ZN8touchgfx4GPIO4initEv>:
{
 8001bf4:	b570      	push	{r4, r5, r6, lr}
 8001bf6:	4d08      	ldr	r5, [pc, #32]	@ (8001c18 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001bf8:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001bfa:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001bfc:	b2e0      	uxtb	r0, r4
 8001bfe:	f7ff ffdf 	bl	8001bc0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001c02:	b118      	cbz	r0, 8001c0c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001c08:	bf18      	it	ne
 8001c0a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001c0c:	3401      	adds	r4, #1
 8001c0e:	2c05      	cmp	r4, #5
 8001c10:	f105 0504 	add.w	r5, r5, #4
 8001c14:	d1f2      	bne.n	8001bfc <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
 8001c18:	200003a0 	.word	0x200003a0

08001c1c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001c1c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001c1e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001c22:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001c26:	4770      	bx	lr

08001c28 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001c28:	2000      	movs	r0, #0
 8001c2a:	4770      	bx	lr

08001c2c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c2e:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c30:	3900      	subs	r1, #0
 8001c32:	bf18      	it	ne
 8001c34:	2101      	movne	r1, #1
 8001c36:	7019      	strb	r1, [r3, #0]
    }
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20015437 	.word	0x20015437

08001c40 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001c40:	2000      	movs	r0, #0
 8001c42:	4770      	bx	lr

08001c44 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001c44:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001c46:	b10b      	cbz	r3, 8001c4c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4718      	bx	r3
        }
    }
 8001c4c:	4770      	bx	lr

08001c4e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001c4e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c52:	4770      	bx	lr

08001c54 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001c54:	6840      	ldr	r0, [r0, #4]
 8001c56:	6803      	ldr	r3, [r0, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4718      	bx	r3

08001c5c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8001c5c:	4770      	bx	lr

08001c5e <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8001c5e:	4770      	bx	lr

08001c60 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001c60:	4770      	bx	lr
	...

08001c64 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001c64:	b570      	push	{r4, r5, r6, lr}
 8001c66:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c68:	f000 fc5a 	bl	8002520 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 8001c74:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8001c78:	4620      	mov	r0, r4
 8001c7a:	46ac      	mov	ip, r5
}
 8001c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8001c80:	4760      	bx	ip
 8001c82:	bf00      	nop
 8001c84:	d0000000 	.word	0xd0000000

08001c88 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001c88:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001c8a:	6803      	ldr	r3, [r0, #0]
{
 8001c8c:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c92:	4798      	blx	r3
    enableInterrupts();
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	4620      	mov	r0, r4
 8001c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001c9a:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001c9c:	f000 f8ec 	bl	8001e78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca6:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8001ca8:	2029      	movs	r0, #41	@ 0x29
 8001caa:	f7ff f807 	bl	8000cbc <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001cae:	f000 f8e3 	bl	8001e78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	4798      	blx	r3
    for (;;)
 8001cba:	e7f8      	b.n	8001cae <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08001cbc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001cc0:	f008 faea 	bl	800a298 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001cd0:	4718      	bx	r3

08001cd2 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001cd2:	f000 bc17 	b.w	8002504 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001cd6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001cd6:	f000 bc1b 	b.w	8002510 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001cda <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001cda:	f000 bc47 	b.w	800256c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001cde <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001cde:	f000 bbed 	b.w	80024bc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001ce2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001ce2:	f000 bc47 	b.w	8002574 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001ce6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001ce6:	f000 bc4f 	b.w	8002588 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001cea <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001cea:	f000 bbf1 	b.w	80024d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001cee <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001cee:	f007 bd33 	b.w	8009758 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001cf2 <_ZN11TouchGFXHALD0Ev>:
 8001cf2:	b510      	push	{r4, lr}
 8001cf4:	217c      	movs	r1, #124	@ 0x7c
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	f010 fe92 	bl	8012a20 <_ZdlPvj>
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	bd10      	pop	{r4, pc}

08001d00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8001d00:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d02:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8001d06:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8001d0c:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8001d0e:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001d10:	d009      	beq.n	8001d26 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001d12:	b93a      	cbnz	r2, 8001d24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d14:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d16:	490b      	ldr	r1, [pc, #44]	@ (8001d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d18:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d1a:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8001d1c:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d1e:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8001d20:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8001d22:	701a      	strb	r2, [r3, #0]
    }
 8001d24:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d0fc      	beq.n	8001d24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d2c:	4905      	ldr	r1, [pc, #20]	@ (8001d44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d2e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d30:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d32:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d34:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001d36:	2200      	movs	r2, #0
 8001d38:	e7f3      	b.n	8001d22 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d3a:	bf00      	nop
 8001d3c:	20015430 	.word	0x20015430
 8001d40:	2001542c 	.word	0x2001542c
 8001d44:	2001542e 	.word	0x2001542e

08001d48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	460d      	mov	r5, r1
 8001d4c:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001d4e:	b935      	cbnz	r5, 8001d5e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001d54:	480a      	ldr	r0, [pc, #40]	@ (8001d80 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001d56:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001d5a:	f010 fe8f 	bl	8012a7c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001d5e:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001d64:	3a00      	subs	r2, #0
 8001d66:	bf18      	it	ne
 8001d68:	2201      	movne	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001d6c:	6803      	ldr	r3, [r0, #0]
    }
 8001d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d76:	4718      	bx	r3
 8001d78:	08013d2c 	.word	0x08013d2c
 8001d7c:	08013d64 	.word	0x08013d64
 8001d80:	08013db2 	.word	0x08013db2
 8001d84:	20015436 	.word	0x20015436

08001d88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001d88:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	428b      	cmp	r3, r1
 8001d90:	d803      	bhi.n	8001d9a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d905      	bls.n	8001da6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001d9e:	4808      	ldr	r0, [pc, #32]	@ (8001dc0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001da0:	219e      	movs	r1, #158	@ 0x9e
 8001da2:	f010 fe6b 	bl	8012a7c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001da8:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001daa:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001dac:	801a      	strh	r2, [r3, #0]
    }
 8001dae:	bd08      	pop	{r3, pc}
 8001db0:	2001542c 	.word	0x2001542c
 8001db4:	2001542e 	.word	0x2001542e
 8001db8:	08013df7 	.word	0x08013df7
 8001dbc:	08013e5a 	.word	0x08013e5a
 8001dc0:	08013db2 	.word	0x08013db2
 8001dc4:	20015432 	.word	0x20015432
 8001dc8:	20015434 	.word	0x20015434

08001dcc <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001dcc:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001dce:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001dd2:	b118      	cbz	r0, 8001ddc <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001dd4:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001dd6:	6803      	ldr	r3, [r0, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4718      	bx	r3
    }
 8001ddc:	4770      	bx	lr
	...

08001de0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001de0:	2101      	movs	r1, #1
{
 8001de2:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001de4:	2200      	movs	r2, #0
 8001de6:	4608      	mov	r0, r1
 8001de8:	f005 f924 	bl	8007034 <osSemaphoreNew>
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001dee:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001df0:	b928      	cbnz	r0, 8001dfe <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001df4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001df6:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001df8:	480a      	ldr	r0, [pc, #40]	@ (8001e24 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001dfa:	f010 fe3f 	bl	8012a7c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2104      	movs	r1, #4
 8001e02:	2001      	movs	r0, #1
 8001e04:	f005 f9be 	bl	8007184 <osMessageQueueNew>
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e0a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e0c:	b918      	cbnz	r0, 8001e16 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e0e:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e10:	4a03      	ldr	r2, [pc, #12]	@ (8001e20 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e12:	212c      	movs	r1, #44	@ 0x2c
 8001e14:	e7f0      	b.n	8001df8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e16:	bd08      	pop	{r3, pc}
 8001e18:	200003b4 	.word	0x200003b4
 8001e1c:	08013e9d 	.word	0x08013e9d
 8001e20:	08013ee6 	.word	0x08013ee6
 8001e24:	08013f15 	.word	0x08013f15
 8001e28:	200003b0 	.word	0x200003b0
 8001e2c:	08013f5f 	.word	0x08013f5f

08001e30 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001e30:	4b02      	ldr	r3, [pc, #8]	@ (8001e3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001e32:	f04f 31ff 	mov.w	r1, #4294967295
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f005 b946 	b.w	80070c8 <osSemaphoreAcquire>
 8001e3c:	200003b4 	.word	0x200003b4

08001e40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001e40:	4b01      	ldr	r3, [pc, #4]	@ (8001e48 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	f005 b96c 	b.w	8007120 <osSemaphoreRelease>
 8001e48:	200003b4 	.word	0x200003b4

08001e4c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001e4c:	4b02      	ldr	r3, [pc, #8]	@ (8001e58 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	f005 b939 	b.w	80070c8 <osSemaphoreAcquire>
 8001e56:	bf00      	nop
 8001e58:	200003b4 	.word	0x200003b4

08001e5c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8001e5c:	f7ff bff0 	b.w	8001e40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001e60 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001e62:	4904      	ldr	r1, [pc, #16]	@ (8001e74 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001e64:	6800      	ldr	r0, [r0, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f005 b9c6 	b.w	80071fa <osMessageQueuePut>
 8001e6e:	bf00      	nop
 8001e70:	200003b0 	.word	0x200003b0
 8001e74:	2000000c 	.word	0x2000000c

08001e78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001e78:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001e7a:	4c08      	ldr	r4, [pc, #32]	@ (8001e9c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	a901      	add	r1, sp, #4
 8001e82:	6820      	ldr	r0, [r4, #0]
 8001e84:	f005 f9ea 	bl	800725c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001e88:	6820      	ldr	r0, [r4, #0]
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	2200      	movs	r2, #0
 8001e90:	a901      	add	r1, sp, #4
 8001e92:	f005 f9e3 	bl	800725c <osMessageQueueGet>
}
 8001e96:	b002      	add	sp, #8
 8001e98:	bd10      	pop	{r4, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200003b0 	.word	0x200003b0

08001ea0 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001ea0:	6803      	ldr	r3, [r0, #0]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea4:	4718      	bx	r3

08001ea6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	4770      	bx	lr

08001eaa <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001eaa:	6803      	ldr	r3, [r0, #0]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	4718      	bx	r3

08001eb0 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8001eb0:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <_ZN8STM32DMA10initializeEv+0x3c>)
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ec2:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001ec6:	9201      	str	r2, [sp, #4]
 8001ec8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ed0:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8001ed8:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001eda:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <_ZN8STM32DMA10initializeEv+0x40>)
 8001edc:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <_ZN8STM32DMA10initializeEv+0x44>)
 8001ede:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <_ZN8STM32DMA10initializeEv+0x48>)
 8001ee2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ee6:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001ee8:	b002      	add	sp, #8
 8001eea:	4770      	bx	lr
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	200002f8 	.word	0x200002f8
 8001ef4:	08002189 	.word	0x08002189
 8001ef8:	e000e100 	.word	0xe000e100

08001efc <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001efc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8001f00:	4770      	bx	lr
	...

08001f04 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <_ZN8STM32DMAD1Ev+0x18>)
 8001f06:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <_ZN8STM32DMAD1Ev+0x1c>)
 8001f0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f16:	f3bf 8f6f 	isb	sy
}
 8001f1a:	4770      	bx	lr
 8001f1c:	08014af0 	.word	0x08014af0
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f24:	b510      	push	{r4, lr}
 8001f26:	4604      	mov	r4, r0
}
 8001f28:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8001f2c:	f7ff ffea 	bl	8001f04 <_ZN8STM32DMAD1Ev>
 8001f30:	4620      	mov	r0, r4
 8001f32:	f010 fd75 	bl	8012a20 <_ZdlPvj>
 8001f36:	4620      	mov	r0, r4
 8001f38:	bd10      	pop	{r4, pc}
	...

08001f3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001f3c:	b508      	push	{r3, lr}
    switch (format)
 8001f3e:	280a      	cmp	r0, #10
 8001f40:	d809      	bhi.n	8001f56 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001f42:	e8df f000 	tbb	[pc, r0]
 8001f46:	1006      	.short	0x1006
 8001f48:	0808080e 	.word	0x0808080e
 8001f4c:	10101008 	.word	0x10101008
 8001f50:	10          	.byte	0x10
 8001f51:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001f52:	2002      	movs	r0, #2
}
 8001f54:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001f56:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001f58:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001f5a:	4806      	ldr	r0, [pc, #24]	@ (8001f74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001f5c:	2187      	movs	r1, #135	@ 0x87
 8001f5e:	f010 fd8d 	bl	8012a7c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001f62:	2000      	movs	r0, #0
 8001f64:	e7f6      	b.n	8001f54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8001f66:	2001      	movs	r0, #1
    return dma2dColorMode;
 8001f68:	e7f4      	b.n	8001f54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001f6a:	bf00      	nop
 8001f6c:	08013fa1 	.word	0x08013fa1
 8001f70:	08013fbc 	.word	0x08013fbc
 8001f74:	08014007 	.word	0x08014007

08001f78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001f78:	b538      	push	{r3, r4, r5, lr}
 8001f7a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001f7c:	7f88      	ldrb	r0, [r1, #30]
 8001f7e:	f7ff ffdd 	bl	8001f3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001f82:	8aa5      	ldrh	r5, [r4, #20]
 8001f84:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f88:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001f8a:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001f8c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001f90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001f92:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f94:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001f96:	1b52      	subs	r2, r2, r5
 8001f98:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001f9a:	6825      	ldr	r5, [r4, #0]
 8001f9c:	2d08      	cmp	r5, #8
 8001f9e:	d10e      	bne.n	8001fbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001fa0:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001fa2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001fa4:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001fa6:	7f20      	ldrb	r0, [r4, #28]
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001faa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001fae:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8001fb0:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001fb2:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001fb6:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001fb8:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001fba:	601a      	str	r2, [r3, #0]
    }
}
 8001fbc:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001fbe:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001fc0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001fc6:	0a0a      	lsrs	r2, r1, #8
 8001fc8:	0948      	lsrs	r0, r1, #5
 8001fca:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8001fce:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8001fd2:	4302      	orrs	r2, r0
 8001fd4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001fdc:	4a03      	ldr	r2, [pc, #12]	@ (8001fec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001fde:	e7ec      	b.n	8001fba <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001fe0:	4002b000 	.word	0x4002b000
 8001fe4:	00010009 	.word	0x00010009
 8001fe8:	00020201 	.word	0x00020201
 8001fec:	00030201 	.word	0x00030201

08001ff0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001ff0:	b508      	push	{r3, lr}
    switch (format)
 8001ff2:	280b      	cmp	r0, #11
 8001ff4:	d80b      	bhi.n	800200e <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001ff6:	e8df f000 	tbb	[pc, r0]
 8001ffa:	1206      	.short	0x1206
 8001ffc:	0a0a0a10 	.word	0x0a0a0a10
 8002000:	0808080a 	.word	0x0808080a
 8002004:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002006:	2002      	movs	r0, #2
}
 8002008:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 800200a:	2005      	movs	r0, #5
        break;
 800200c:	e7fc      	b.n	8002008 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002010:	4a05      	ldr	r2, [pc, #20]	@ (8002028 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002012:	4806      	ldr	r0, [pc, #24]	@ (800202c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002014:	2166      	movs	r1, #102	@ 0x66
 8002016:	f010 fd31 	bl	8012a7c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800201a:	2000      	movs	r0, #0
 800201c:	e7f4      	b.n	8002008 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 800201e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002020:	e7f2      	b.n	8002008 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002022:	bf00      	nop
 8002024:	08013fa1 	.word	0x08013fa1
 8002028:	0801404f 	.word	0x0801404f
 800202c:	08014007 	.word	0x08014007

08002030 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002034:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8002038:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800203a:	4640      	mov	r0, r8
 800203c:	f7ff ffd8 	bl	8001ff0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002040:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002042:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002044:	4638      	mov	r0, r7
 8002046:	f7ff ffd3 	bl	8001ff0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 800204a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800204c:	4638      	mov	r0, r7
 800204e:	f7ff ff75 	bl	8001f3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002052:	8aa1      	ldrh	r1, [r4, #20]
 8002054:	8b62      	ldrh	r2, [r4, #26]
 8002056:	4b44      	ldr	r3, [pc, #272]	@ (8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002058:	1a52      	subs	r2, r2, r1
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800205c:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800205e:	8b22      	ldrh	r2, [r4, #24]
 8002060:	1a52      	subs	r2, r2, r1
 8002062:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002064:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002066:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002068:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800206e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002070:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002072:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002074:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002076:	6820      	ldr	r0, [r4, #0]
 8002078:	2880      	cmp	r0, #128	@ 0x80
 800207a:	d028      	beq.n	80020ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 800207c:	7f22      	ldrb	r2, [r4, #28]
 800207e:	d80f      	bhi.n	80020a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8002080:	2820      	cmp	r0, #32
 8002082:	d067      	beq.n	8002154 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8002084:	2840      	cmp	r0, #64	@ 0x40
 8002086:	d065      	beq.n	8002154 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8002088:	2804      	cmp	r0, #4
 800208a:	d01a      	beq.n	80020c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800208c:	4b36      	ldr	r3, [pc, #216]	@ (8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800208e:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002092:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002096:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002098:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 800209a:	d061      	beq.n	8002160 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800209c:	4a33      	ldr	r2, [pc, #204]	@ (800216c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800209e:	e044      	b.n	800212a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 80020a0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80020a4:	d004      	beq.n	80020b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80020a6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80020aa:	d1ef      	bne.n	800208c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ac:	4830      	ldr	r0, [pc, #192]	@ (8002170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 80020ae:	e000      	b.n	80020b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020b0:	4830      	ldr	r0, [pc, #192]	@ (8002174 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020b2:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 80020b6:	61da      	str	r2, [r3, #28]
 80020b8:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80020ba:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80020bc:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020be:	6159      	str	r1, [r3, #20]
 80020c0:	e032      	b.n	8002128 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c2:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 80020c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ca:	61da      	str	r2, [r3, #28]
 80020cc:	e7f6      	b.n	80020bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80020ce:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80020d0:	1d02      	adds	r2, r0, #4
 80020d2:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020d4:	7f22      	ldrb	r2, [r4, #28]
 80020d6:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 80020da:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 80020de:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80020e0:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020e2:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 80020e4:	7801      	ldrb	r1, [r0, #0]
 80020e6:	b141      	cbz	r1, 80020fa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 80020e8:	2901      	cmp	r1, #1
 80020ea:	d021      	beq.n	8002130 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 80020ec:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80020ee:	4a23      	ldr	r2, [pc, #140]	@ (800217c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 80020f0:	4823      	ldr	r0, [pc, #140]	@ (8002180 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 80020f2:	f240 1111 	movw	r1, #273	@ 0x111
 80020f6:	f010 fcc1 	bl	8012a7c <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	8841      	ldrh	r1, [r0, #2]
 80020fe:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002102:	3901      	subs	r1, #1
 8002104:	f022 0210 	bic.w	r2, r2, #16
 8002108:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800210c:	61da      	str	r2, [r3, #28]
            bool blend = true;
 800210e:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002110:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800211a:	69da      	ldr	r2, [r3, #28]
 800211c:	0692      	lsls	r2, r2, #26
 800211e:	d4fc      	bmi.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002120:	2210      	movs	r2, #16
 8002122:	609a      	str	r2, [r3, #8]
            if (blend)
 8002124:	2900      	cmp	r1, #0
 8002126:	d0b9      	beq.n	800209c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002128:	4a16      	ldr	r2, [pc, #88]	@ (8002184 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800212a:	601a      	str	r2, [r3, #0]
}
 800212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8002130:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	8840      	ldrh	r0, [r0, #2]
 8002138:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800213c:	f100 30ff 	add.w	r0, r0, #4294967295
 8002140:	f022 0210 	bic.w	r2, r2, #16
 8002144:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002148:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 800214c:	bf18      	it	ne
 800214e:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002150:	61da      	str	r2, [r3, #28]
                break;
 8002152:	e7dd      	b.n	8002110 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002154:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800215a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800215e:	e7b4      	b.n	80020ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002160:	f240 2201 	movw	r2, #513	@ 0x201
 8002164:	e7e1      	b.n	800212a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8002166:	bf00      	nop
 8002168:	4002b000 	.word	0x4002b000
 800216c:	00010201 	.word	0x00010201
 8002170:	00020009 	.word	0x00020009
 8002174:	0002000a 	.word	0x0002000a
 8002178:	08014099 	.word	0x08014099
 800217c:	080140b3 	.word	0x080140b3
 8002180:	08014007 	.word	0x08014007
 8002184:	00020201 	.word	0x00020201

08002188 <DMA2D_XferCpltCallback>:
        return instance;
 8002188:	4b02      	ldr	r3, [pc, #8]	@ (8002194 <DMA2D_XferCpltCallback+0xc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800218e:	6803      	ldr	r3, [r0, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4718      	bx	r3
 8002194:	20015438 	.word	0x20015438

08002198 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002198:	b570      	push	{r4, r5, r6, lr}
 800219a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800219c:	4625      	mov	r5, r4
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <_ZN8STM32DMAC1Ev+0x30>)
 80021a0:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80021a2:	2600      	movs	r6, #0
 80021a4:	6060      	str	r0, [r4, #4]
 80021a6:	7226      	strb	r6, [r4, #8]
 80021a8:	7266      	strb	r6, [r4, #9]
 80021aa:	f845 3b20 	str.w	r3, [r5], #32
 80021ae:	2260      	movs	r2, #96	@ 0x60
 80021b0:	4629      	mov	r1, r5
 80021b2:	f008 f9af 	bl	800a514 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80021b6:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80021ba:	60ee      	str	r6, [r5, #12]
 80021bc:	3524      	adds	r5, #36	@ 0x24
 80021be:	429d      	cmp	r5, r3
 80021c0:	d1fb      	bne.n	80021ba <_ZN8STM32DMAC1Ev+0x22>
}
 80021c2:	4620      	mov	r0, r4
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	bf00      	nop
 80021c8:	08014af0 	.word	0x08014af0

080021cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80021cc:	2001      	movs	r0, #1
 80021ce:	4770      	bx	lr

080021d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80021d0:	2038      	movs	r0, #56	@ 0x38
 80021d2:	4770      	bx	lr

080021d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80021d4:	2338      	movs	r3, #56	@ 0x38
 80021d6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021da:	3008      	adds	r0, #8
 80021dc:	4770      	bx	lr

080021de <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80021de:	2338      	movs	r3, #56	@ 0x38
 80021e0:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021e4:	3008      	adds	r0, #8
 80021e6:	4770      	bx	lr

080021e8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80021e8:	2001      	movs	r0, #1
 80021ea:	4770      	bx	lr

080021ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80021ec:	f243 10d0 	movw	r0, #12752	@ 0x31d0
 80021f0:	4770      	bx	lr

080021f2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021f2:	f243 13d0 	movw	r3, #12752	@ 0x31d0
 80021f6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021fa:	3008      	adds	r0, #8
 80021fc:	4770      	bx	lr

080021fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021fe:	f243 13d0 	movw	r3, #12752	@ 0x31d0
 8002202:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002206:	3008      	adds	r0, #8
 8002208:	4770      	bx	lr

0800220a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800220a:	2001      	movs	r0, #1
 800220c:	4770      	bx	lr

0800220e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800220e:	2010      	movs	r0, #16
 8002210:	4770      	bx	lr

08002212 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002212:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002216:	3008      	adds	r0, #8
 8002218:	4770      	bx	lr

0800221a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800221a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800221e:	3008      	adds	r0, #8
 8002220:	4770      	bx	lr

08002222 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002222:	4608      	mov	r0, r1
 8002224:	f000 be74 	b.w	8002f10 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002228 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002228:	b510      	push	{r4, lr}
 800222a:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 800222c:	6003      	str	r3, [r0, #0]
 800222e:	4604      	mov	r4, r0
 8002230:	f006 ffe9 	bl	8009206 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002234:	4620      	mov	r0, r4
 8002236:	bd10      	pop	{r4, pc}
 8002238:	08014ba8 	.word	0x08014ba8

0800223c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800223c:	b510      	push	{r4, lr}
 800223e:	4604      	mov	r4, r0
 8002240:	f7ff fff2 	bl	8002228 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002244:	4620      	mov	r0, r4
 8002246:	2140      	movs	r1, #64	@ 0x40
 8002248:	f010 fbea 	bl	8012a20 <_ZdlPvj>
 800224c:	4620      	mov	r0, r4
 800224e:	bd10      	pop	{r4, pc}

08002250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002250:	b510      	push	{r4, lr}
 8002252:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002254:	6003      	str	r3, [r0, #0]
 8002256:	4604      	mov	r4, r0
 8002258:	f006 ffd5 	bl	8009206 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800225c:	4620      	mov	r0, r4
 800225e:	bd10      	pop	{r4, pc}
 8002260:	08014b74 	.word	0x08014b74

08002264 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002264:	b510      	push	{r4, lr}
 8002266:	4604      	mov	r4, r0
 8002268:	f7ff fff2 	bl	8002250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800226c:	4620      	mov	r0, r4
 800226e:	f243 11d8 	movw	r1, #12760	@ 0x31d8
 8002272:	f010 fbd5 	bl	8012a20 <_ZdlPvj>
 8002276:	4620      	mov	r0, r4
 8002278:	bd10      	pop	{r4, pc}
	...

0800227c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800227c:	b510      	push	{r4, lr}
 800227e:	4b03      	ldr	r3, [pc, #12]	@ (800228c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002280:	6003      	str	r3, [r0, #0]
 8002282:	4604      	mov	r4, r0
 8002284:	f006 ffbf 	bl	8009206 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002288:	4620      	mov	r0, r4
 800228a:	bd10      	pop	{r4, pc}
 800228c:	08014b40 	.word	0x08014b40

08002290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002290:	b510      	push	{r4, lr}
 8002292:	4604      	mov	r4, r0
 8002294:	f7ff fff2 	bl	800227c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002298:	4620      	mov	r0, r4
 800229a:	2118      	movs	r1, #24
 800229c:	f010 fbc0 	bl	8012a20 <_ZdlPvj>
 80022a0:	4620      	mov	r0, r4
 80022a2:	bd10      	pop	{r4, pc}

080022a4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80022a4:	b510      	push	{r4, lr}
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <_ZN12FrontendHeapD1Ev+0x28>)
 80022a8:	6003      	str	r3, [r0, #0]
 80022aa:	4604      	mov	r4, r0
 80022ac:	f500 5048 	add.w	r0, r0, #12800	@ 0x3200
 80022b0:	3004      	adds	r0, #4
 80022b2:	f7ff ffb9 	bl	8002228 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80022b6:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80022ba:	f7ff ffc9 	bl	8002250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022be:	f104 0014 	add.w	r0, r4, #20
 80022c2:	f7ff ffdb 	bl	800227c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022c6:	4620      	mov	r0, r4
 80022c8:	bd10      	pop	{r4, pc}
 80022ca:	bf00      	nop
 80022cc:	08014bdc 	.word	0x08014bdc

080022d0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80022d0:	b508      	push	{r3, lr}
 80022d2:	4802      	ldr	r0, [pc, #8]	@ (80022dc <__tcf_0+0xc>)
 80022d4:	f7ff ffe6 	bl	80022a4 <_ZN12FrontendHeapD1Ev>
 80022d8:	bd08      	pop	{r3, pc}
 80022da:	bf00      	nop
 80022dc:	2000126c 	.word	0x2000126c

080022e0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	f7ff ffde 	bl	80022a4 <_ZN12FrontendHeapD1Ev>
 80022e8:	4620      	mov	r0, r4
 80022ea:	f243 31b0 	movw	r1, #13232	@ 0x33b0
 80022ee:	f010 fb97 	bl	8012a20 <_ZdlPvj>
 80022f2:	4620      	mov	r0, r4
 80022f4:	bd10      	pop	{r4, pc}
	...

080022f8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 80022f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80022fc:	f000 f9a6 	bl	800264c <_ZN14BitmapDatabase11getInstanceEv>
 8002300:	4605      	mov	r5, r0
 8002302:	f000 f9a7 	bl	8002654 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002306:	2400      	movs	r4, #0
 8002308:	4601      	mov	r1, r0
 800230a:	4623      	mov	r3, r4
 800230c:	4628      	mov	r0, r5
 800230e:	4622      	mov	r2, r4
 8002310:	9400      	str	r4, [sp, #0]
 8002312:	f00d fcf3 	bl	800fcfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002316:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <touchgfx_init+0xb8>)
 8002318:	4a26      	ldr	r2, [pc, #152]	@ (80023b4 <touchgfx_init+0xbc>)
        static FrontendHeap instance;
 800231a:	4d27      	ldr	r5, [pc, #156]	@ (80023b8 <touchgfx_init+0xc0>)
 800231c:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800231e:	4620      	mov	r0, r4
 8002320:	f001 fc3e 	bl	8003ba0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002324:	4825      	ldr	r0, [pc, #148]	@ (80023bc <touchgfx_init+0xc4>)
 8002326:	f00d fc51 	bl	800fbcc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800232a:	682b      	ldr	r3, [r5, #0]
 800232c:	f3bf 8f5b 	dmb	ish
 8002330:	07db      	lsls	r3, r3, #31
 8002332:	d436      	bmi.n	80023a2 <touchgfx_init+0xaa>
 8002334:	4628      	mov	r0, r5
 8002336:	f010 fb75 	bl	8012a24 <__cxa_guard_acquire>
 800233a:	b390      	cbz	r0, 80023a2 <touchgfx_init+0xaa>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800233c:	4c20      	ldr	r4, [pc, #128]	@ (80023c0 <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800233e:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <touchgfx_init+0xcc>)
          screenStorage(scr),
          transitionStorage(tra),
 8002340:	4f21      	ldr	r7, [pc, #132]	@ (80023c8 <touchgfx_init+0xd0>)
 8002342:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8002344:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8002348:	f500 5649 	add.w	r6, r0, #12864	@ 0x3240
          screenStorage(scr),
 800234c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
        : presenterStorage(pres),
 8002350:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002352:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8002356:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8002358:	6126      	str	r6, [r4, #16]
 800235a:	f006 ff55 	bl	8009208 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800235e:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <touchgfx_init+0xd4>)
 8002360:	6163      	str	r3, [r4, #20]
 8002362:	4640      	mov	r0, r8
 8002364:	f006 ff50 	bl	8009208 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <touchgfx_init+0xd8>)
 800236a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800236c:	4638      	mov	r0, r7
 800236e:	f006 ff4b 	bl	8009208 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002372:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 8002376:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800237a:	4a16      	ldr	r2, [pc, #88]	@ (80023d4 <touchgfx_init+0xdc>)
 800237c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002380:	f001 fc8a 	bl	8003c98 <_ZN5ModelC1Ev>
 8002384:	4622      	mov	r2, r4
 8002386:	f1a6 0110 	sub.w	r1, r6, #16
 800238a:	4630      	mov	r0, r6
 800238c:	f001 fc7a 	bl	8003c84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002390:	4630      	mov	r0, r6
 8002392:	f000 fdbd 	bl	8002f10 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002396:	4810      	ldr	r0, [pc, #64]	@ (80023d8 <touchgfx_init+0xe0>)
 8002398:	f010 fb8e 	bl	8012ab8 <atexit>
 800239c:	4628      	mov	r0, r5
 800239e:	f010 fb4d 	bl	8012a3c <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80023a2:	480e      	ldr	r0, [pc, #56]	@ (80023dc <touchgfx_init+0xe4>)
}
 80023a4:	b002      	add	sp, #8
 80023a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80023aa:	f7ff bc5b 	b.w	8001c64 <_ZN11TouchGFXHAL10initializeEv>
 80023ae:	bf00      	nop
 80023b0:	20015494 	.word	0x20015494
 80023b4:	20000434 	.word	0x20000434
 80023b8:	20001268 	.word	0x20001268
 80023bc:	20000010 	.word	0x20000010
 80023c0:	2000126c 	.word	0x2000126c
 80023c4:	08014bdc 	.word	0x08014bdc
 80023c8:	20004470 	.word	0x20004470
 80023cc:	08014b40 	.word	0x08014b40
 80023d0:	08014b74 	.word	0x08014b74
 80023d4:	08014ba8 	.word	0x08014ba8
 80023d8:	080022d1 	.word	0x080022d1
 80023dc:	200003b8 	.word	0x200003b8

080023e0 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80023e0:	4801      	ldr	r0, [pc, #4]	@ (80023e8 <touchgfx_taskEntry+0x8>)
 80023e2:	f7ff bc51 	b.w	8001c88 <_ZN11TouchGFXHAL9taskEntryEv>
 80023e6:	bf00      	nop
 80023e8:	200003b8 	.word	0x200003b8

080023ec <_GLOBAL__sub_I_touchgfx_init>:
}
 80023ec:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 80023ee:	4e22      	ldr	r6, [pc, #136]	@ (8002478 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 80023f0:	4c22      	ldr	r4, [pc, #136]	@ (800247c <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 80023f2:	4d23      	ldr	r5, [pc, #140]	@ (8002480 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 80023f6:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 80023f8:	4630      	mov	r0, r6
 80023fa:	f7ff fecd 	bl	8002198 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80023fe:	4628      	mov	r0, r5
 8002400:	f00e fadc 	bl	80109bc <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8002404:	4b20      	ldr	r3, [pc, #128]	@ (8002488 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002406:	4821      	ldr	r0, [pc, #132]	@ (800248c <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8002408:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 800240a:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800240c:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 8002410:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 8002414:	491e      	ldr	r1, [pc, #120]	@ (8002490 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002416:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8002418:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800241c:	491d      	ldr	r1, [pc, #116]	@ (8002494 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 800241e:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 8002420:	491d      	ldr	r1, [pc, #116]	@ (8002498 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 8002422:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 8002426:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002428:	21f0      	movs	r1, #240	@ 0xf0
 800242a:	8001      	strh	r1, [r0, #0]
 800242c:	481b      	ldr	r0, [pc, #108]	@ (800249c <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 800242e:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002430:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002432:	481b      	ldr	r0, [pc, #108]	@ (80024a0 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 8002434:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002438:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 800243c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002440:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002444:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002448:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 800244c:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8002450:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002454:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 8002458:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 800245c:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 800245e:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002462:	8001      	strh	r1, [r0, #0]
 8002464:	480f      	ldr	r0, [pc, #60]	@ (80024a4 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8002466:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002468:	490f      	ldr	r1, [pc, #60]	@ (80024a8 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 800246a:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002472:	4a0e      	ldr	r2, [pc, #56]	@ (80024ac <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	200004c4 	.word	0x200004c4
 800247c:	20001264 	.word	0x20001264
 8002480:	20000438 	.word	0x20000438
 8002484:	08014a00 	.word	0x08014a00
 8002488:	200003b8 	.word	0x200003b8
 800248c:	2001542c 	.word	0x2001542c
 8002490:	01000001 	.word	0x01000001
 8002494:	01010000 	.word	0x01010000
 8002498:	20015438 	.word	0x20015438
 800249c:	20015432 	.word	0x20015432
 80024a0:	2001542e 	.word	0x2001542e
 80024a4:	20015434 	.word	0x20015434
 80024a8:	20015430 	.word	0x20015430
 80024ac:	08014a18 	.word	0x08014a18

080024b0 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80024b0:	4801      	ldr	r0, [pc, #4]	@ (80024b8 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80024b2:	f7ff bd27 	b.w	8001f04 <_ZN8STM32DMAD1Ev>
 80024b6:	bf00      	nop
 80024b8:	200004c4 	.word	0x200004c4

080024bc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80024be:	2290      	movs	r2, #144	@ 0x90
 80024c0:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 80024c4:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80024d0:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 80024d2:	490a      	ldr	r1, [pc, #40]	@ (80024fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 80024d4:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80024d6:	480a      	ldr	r0, [pc, #40]	@ (8002500 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80024d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29b      	uxth	r3, r3
 80024e0:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80024e2:	6911      	ldr	r1, [r2, #16]
 80024e4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80024e8:	3901      	subs	r1, #1
 80024ea:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80024ec:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80024ee:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80024f6:	4770      	bx	lr
 80024f8:	40016800 	.word	0x40016800
 80024fc:	2000461e 	.word	0x2000461e
 8002500:	2000461c 	.word	0x2000461c

08002504 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002504:	4b01      	ldr	r3, [pc, #4]	@ (800250c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002506:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 800250a:	4770      	bx	lr
 800250c:	40016800 	.word	0x40016800

08002510 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002510:	4b02      	ldr	r3, [pc, #8]	@ (800251c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002512:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002514:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800251a:	4770      	bx	lr
 800251c:	40016800 	.word	0x40016800

08002520 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	4604      	mov	r4, r0
    HAL::initialize();
 8002524:	f007 f96d 	bl	8009802 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800252c:	f00a fb1a 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
 8002530:	4601      	mov	r1, r0
 8002532:	4620      	mov	r0, r4
 8002534:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 800253a:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800253e:	4620      	mov	r0, r4
 8002540:	46ac      	mov	ip, r5
 8002542:	2300      	movs	r3, #0
}
 8002544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002548:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 800254c:	4760      	bx	ip
 800254e:	bf00      	nop
 8002550:	d004b000 	.word	0xd004b000

08002554 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002554:	f007 b93c 	b.w	80097d0 <_ZN8touchgfx3HAL10beginFrameEv>

08002558 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002558:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 800255c:	b113      	cbz	r3, 8002564 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 800255e:	4b02      	ldr	r3, [pc, #8]	@ (8002568 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002564:	f007 b940 	b.w	80097e8 <_ZN8touchgfx3HAL8endFrameEv>
 8002568:	20004620 	.word	0x20004620

0800256c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 800256c:	f007 b8fa 	b.w	8009764 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002570 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002570:	f007 ba5b 	b.w	8009a2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002574 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002576:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002580:	609a      	str	r2, [r3, #8]
}
 8002582:	4770      	bx	lr
 8002584:	e000e100 	.word	0xe000e100

08002588 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002588:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 800258a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800258e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800259e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80025a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025a6:	f3bf 8f6f 	isb	sy
}
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80025b0:	b510      	push	{r4, lr}
        return instance;
 80025b2:	4c14      	ldr	r4, [pc, #80]	@ (8002604 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	b323      	cbz	r3, 8002602 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <HAL_LTDC_LineEventCallback+0x58>)
 80025ba:	4a14      	ldr	r2, [pc, #80]	@ (800260c <HAL_LTDC_LineEventCallback+0x5c>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	8811      	ldrh	r1, [r2, #0]
 80025c0:	428b      	cmp	r3, r1
 80025c2:	d113      	bne.n	80025ec <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_LTDC_LineEventCallback+0x60>)
 80025c6:	8819      	ldrh	r1, [r3, #0]
 80025c8:	f003 f9d4 	bl	8005974 <HAL_LTDC_ProgramLineEvent>
 80025cc:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80025ce:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80025d2:	3301      	adds	r3, #1
 80025d4:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80025d8:	f7ff fc42 	bl	8001e60 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	f007 fe5b 	bl	800a298 <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80025e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7ff ba82 	b.w	8001af0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80025ec:	f003 f9c2 	bl	8005974 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80025f0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4798      	blx	r3
    }
 80025f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff baa1 	b.w	8001b44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002602:	bd10      	pop	{r4, pc}
 8002604:	20015438 	.word	0x20015438
 8002608:	40016800 	.word	0x40016800
 800260c:	2000461e 	.word	0x2000461e
 8002610:	2000461c 	.word	0x2000461c

08002614 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // arialbd_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // arialbd_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002614:	4770      	bx	lr

08002616 <_ZN23ApplicationFontProviderD0Ev>:
 8002616:	b510      	push	{r4, lr}
 8002618:	2104      	movs	r1, #4
 800261a:	4604      	mov	r4, r0
 800261c:	f010 fa00 	bl	8012a20 <_ZdlPvj>
 8002620:	4620      	mov	r0, r4
 8002622:	bd10      	pop	{r4, pc}

08002624 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002624:	2901      	cmp	r1, #1
{
 8002626:	b508      	push	{r3, lr}
    switch (typography)
 8002628:	d006      	beq.n	8002638 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800262a:	2902      	cmp	r1, #2
 800262c:	d008      	beq.n	8002640 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 800262e:	b959      	cbnz	r1, 8002648 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // arialbd_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002630:	f001 fb02 	bl	8003c38 <_ZN17TypedTextDatabase8getFontsEv>
 8002634:	6800      	ldr	r0, [r0, #0]
        // arialbd_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8002636:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002638:	f001 fafe 	bl	8003c38 <_ZN17TypedTextDatabase8getFontsEv>
 800263c:	6840      	ldr	r0, [r0, #4]
 800263e:	e7fa      	b.n	8002636 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002640:	f001 fafa 	bl	8003c38 <_ZN17TypedTextDatabase8getFontsEv>
 8002644:	6880      	ldr	r0, [r0, #8]
 8002646:	e7f6      	b.n	8002636 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8002648:	2000      	movs	r0, #0
 800264a:	e7f4      	b.n	8002636 <_ZN23ApplicationFontProvider7getFontEt+0x12>

0800264c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800264c:	4800      	ldr	r0, [pc, #0]	@ (8002650 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800264e:	4770      	bx	lr
 8002650:	08014bfc 	.word	0x08014bfc

08002654 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002654:	2004      	movs	r0, #4
 8002656:	4770      	bx	lr

08002658 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002658:	b513      	push	{r0, r1, r4, lr}
 800265a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800265c:	b151      	cbz	r1, 8002674 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800265e:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8002660:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002662:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002666:	aa01      	add	r2, sp, #4
 8002668:	689c      	ldr	r4, [r3, #8]
 800266a:	f10d 0303 	add.w	r3, sp, #3
 800266e:	47a0      	blx	r4
        return glyph;
    }
 8002670:	b002      	add	sp, #8
 8002672:	bd10      	pop	{r4, pc}
            return 0;
 8002674:	4608      	mov	r0, r1
 8002676:	e7fb      	b.n	8002670 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002678 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002678:	89c0      	ldrh	r0, [r0, #14]
 800267a:	4770      	bx	lr

0800267c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800267c:	8a00      	ldrh	r0, [r0, #16]
 800267e:	4770      	bx	lr

08002680 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002680:	88c0      	ldrh	r0, [r0, #6]
 8002682:	4770      	bx	lr

08002684 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002684:	8880      	ldrh	r0, [r0, #4]
 8002686:	4770      	bx	lr

08002688 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002688:	7a80      	ldrb	r0, [r0, #10]
    }
 800268a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800268e:	4770      	bx	lr

08002690 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002690:	7a80      	ldrb	r0, [r0, #10]
    }
 8002692:	09c0      	lsrs	r0, r0, #7
 8002694:	4770      	bx	lr

08002696 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8002696:	2000      	movs	r0, #0
 8002698:	4770      	bx	lr
	...

0800269c <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 800269c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80026a4 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	00000000 	.word	0x00000000

080026a8 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80026a8:	4770      	bx	lr

080026aa <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80026aa:	b510      	push	{r4, lr}
    }
 80026ac:	2108      	movs	r1, #8
    virtual ~TypedText()
 80026ae:	4604      	mov	r4, r0
    }
 80026b0:	f010 f9b6 	bl	8012a20 <_ZdlPvj>
 80026b4:	4620      	mov	r0, r4
 80026b6:	bd10      	pop	{r4, pc}

080026b8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80026b8:	2000      	movs	r0, #0
 80026ba:	4770      	bx	lr

080026bc <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80026bc:	8081      	strh	r1, [r0, #4]
    }
 80026be:	4770      	bx	lr

080026c0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80026c0:	80c1      	strh	r1, [r0, #6]
    }
 80026c2:	4770      	bx	lr

080026c4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80026c4:	8101      	strh	r1, [r0, #8]
    }
 80026c6:	4770      	bx	lr

080026c8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80026c8:	8141      	strh	r1, [r0, #10]
    }
 80026ca:	4770      	bx	lr

080026cc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80026cc:	4770      	bx	lr

080026ce <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80026ce:	4770      	bx	lr

080026d0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80026d0:	4770      	bx	lr

080026d2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80026d2:	4770      	bx	lr

080026d4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80026d4:	4770      	bx	lr

080026d6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80026d6:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80026d8:	88c4      	ldrh	r4, [r0, #6]
 80026da:	6803      	ldr	r3, [r0, #0]
 80026dc:	1b12      	subs	r2, r2, r4
 80026de:	8884      	ldrh	r4, [r0, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	1b09      	subs	r1, r1, r4
 80026e4:	b212      	sxth	r2, r2
    }
 80026e6:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80026ea:	b209      	sxth	r1, r1
 80026ec:	4718      	bx	r3

080026ee <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80026ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026f2:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80026fa:	6813      	ldr	r3, [r2, #0]
 80026fc:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80026fe:	6010      	str	r0, [r2, #0]
    }
 8002700:	4770      	bx	lr

08002702 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002702:	4770      	bx	lr

08002704 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002704:	4770      	bx	lr

08002706 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002706:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 800270a:	6808      	ldr	r0, [r1, #0]
 800270c:	6849      	ldr	r1, [r1, #4]
 800270e:	c303      	stmia	r3!, {r0, r1}
    }
 8002710:	4770      	bx	lr

08002712 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002712:	4770      	bx	lr

08002714 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002714:	4770      	bx	lr

08002716 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002716:	6041      	str	r1, [r0, #4]
    }
 8002718:	4770      	bx	lr

0800271a <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800271a:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800271c:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 800271e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8002722:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002726:	8002      	strh	r2, [r0, #0]
 8002728:	8042      	strh	r2, [r0, #2]
 800272a:	8084      	strh	r4, [r0, #4]
 800272c:	80c1      	strh	r1, [r0, #6]
        }
 800272e:	bd10      	pop	{r4, pc}

08002730 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 8002730:	4770      	bx	lr

08002732 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002732:	4770      	bx	lr

08002734 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002734:	4770      	bx	lr
	...

08002738 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8002738:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800273a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800273e:	2300      	movs	r3, #0
 8002740:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002744:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002748:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800274c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	080029f9 	.word	0x080029f9

08002758 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002758:	2301      	movs	r3, #1
 800275a:	7203      	strb	r3, [r0, #8]
    }
 800275c:	4770      	bx	lr

0800275e <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 800275e:	4770      	bx	lr

08002760 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 8002760:	4770      	bx	lr

08002762 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 8002762:	4770      	bx	lr

08002764 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002764:	4770      	bx	lr

08002766 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 8002766:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8002768:	6840      	ldr	r0, [r0, #4]
 800276a:	6803      	ldr	r3, [r0, #0]
 800276c:	3110      	adds	r1, #16
 800276e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002770:	4718      	bx	r3

08002772 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 8002772:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8002774:	6840      	ldr	r0, [r0, #4]
 8002776:	6803      	ldr	r3, [r0, #0]
 8002778:	3110      	adds	r1, #16
 800277a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277c:	4718      	bx	r3

0800277e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 800277e:	4770      	bx	lr

08002780 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 8002780:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8002782:	6840      	ldr	r0, [r0, #4]
 8002784:	6803      	ldr	r3, [r0, #0]
 8002786:	3110      	adds	r1, #16
 8002788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800278a:	4718      	bx	r3

0800278c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8002790:	6840      	ldr	r0, [r0, #4]
 8002792:	6803      	ldr	r3, [r0, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4798      	blx	r3
 8002798:	4604      	mov	r4, r0
        while (d)
 800279a:	b93c      	cbnz	r4, 80027ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 800279c:	6868      	ldr	r0, [r5, #4]
 800279e:	6803      	ldr	r3, [r0, #0]
 80027a0:	f105 0110 	add.w	r1, r5, #16
 80027a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    }
 80027a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 80027aa:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 80027ac:	88a1      	ldrh	r1, [r4, #4]
 80027ae:	89ab      	ldrh	r3, [r5, #12]
 80027b0:	1ac9      	subs	r1, r1, r3
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	4620      	mov	r0, r4
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	b209      	sxth	r1, r1
 80027ba:	4798      	blx	r3
        return nextSibling;
 80027bc:	69a4      	ldr	r4, [r4, #24]
 80027be:	e7ec      	b.n	800279a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

080027c0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Cover transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 80027c0:	4770      	bx	lr

080027c2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80027c2:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80027c4:	68c2      	ldr	r2, [r0, #12]
 80027c6:	6841      	ldr	r1, [r0, #4]
 80027c8:	1054      	asrs	r4, r2, #1
    virtual void execute()
 80027ca:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80027cc:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80027d0:	07d2      	lsls	r2, r2, #31
 80027d2:	bf48      	it	mi
 80027d4:	590a      	ldrmi	r2, [r1, r4]
 80027d6:	689b      	ldr	r3, [r3, #8]
    }
 80027d8:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80027dc:	bf48      	it	mi
 80027de:	58d3      	ldrmi	r3, [r2, r3]
 80027e0:	4718      	bx	r3

080027e2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80027e2:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80027e4:	6840      	ldr	r0, [r0, #4]
 80027e6:	b130      	cbz	r0, 80027f6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	b91a      	cbnz	r2, 80027f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80027ec:	68d8      	ldr	r0, [r3, #12]
 80027ee:	f000 0001 	and.w	r0, r0, #1
 80027f2:	4770      	bx	lr
 80027f4:	2001      	movs	r0, #1
    }
 80027f6:	4770      	bx	lr

080027f8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80027f8:	b510      	push	{r4, lr}
 80027fa:	210c      	movs	r1, #12
 80027fc:	4604      	mov	r4, r0
 80027fe:	f010 f90f 	bl	8012a20 <_ZdlPvj>
 8002802:	4620      	mov	r0, r4
 8002804:	bd10      	pop	{r4, pc}

08002806 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002806:	b510      	push	{r4, lr}
 8002808:	2110      	movs	r1, #16
 800280a:	4604      	mov	r4, r0
 800280c:	f010 f908 	bl	8012a20 <_ZdlPvj>
 8002810:	4620      	mov	r0, r4
 8002812:	bd10      	pop	{r4, pc}

08002814 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002814:	b510      	push	{r4, lr}
 8002816:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800281a:	4604      	mov	r4, r0
 800281c:	f010 f900 	bl	8012a20 <_ZdlPvj>
 8002820:	4620      	mov	r0, r4
 8002822:	bd10      	pop	{r4, pc}

08002824 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 8002824:	b510      	push	{r4, lr}
 8002826:	2138      	movs	r1, #56	@ 0x38
 8002828:	4604      	mov	r4, r0
 800282a:	f010 f8f9 	bl	8012a20 <_ZdlPvj>
 800282e:	4620      	mov	r0, r4
 8002830:	bd10      	pop	{r4, pc}

08002832 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8002832:	b510      	push	{r4, lr}
 8002834:	2128      	movs	r1, #40	@ 0x28
 8002836:	4604      	mov	r4, r0
 8002838:	f010 f8f2 	bl	8012a20 <_ZdlPvj>
 800283c:	4620      	mov	r0, r4
 800283e:	bd10      	pop	{r4, pc}

08002840 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
class CoverTransition : public Transition
 8002840:	b510      	push	{r4, lr}
 8002842:	2138      	movs	r1, #56	@ 0x38
 8002844:	4604      	mov	r4, r0
 8002846:	f010 f8eb 	bl	8012a20 <_ZdlPvj>
 800284a:	4620      	mov	r0, r4
 800284c:	bd10      	pop	{r4, pc}

0800284e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800284e:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8002850:	f00a f988 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
 8002854:	6803      	ldr	r3, [r0, #0]
    }
 8002856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	4718      	bx	r3
	...

08002860 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002862:	4605      	mov	r5, r0
        animationCounter++;
 8002864:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 8002866:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 8002868:	3001      	adds	r0, #1
 800286a:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 800286c:	4298      	cmp	r0, r3
        animationCounter++;
 800286e:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 8002870:	d905      	bls.n	800287e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8002872:	2301      	movs	r3, #1
 8002874:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	72ab      	strb	r3, [r5, #10]
    }
 800287a:	b003      	add	sp, #12
 800287c:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800287e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
        const int16_t oldValue = calculatedValue;
 8002882:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002886:	2100      	movs	r1, #0
 8002888:	f00b fe64 	bl	800e554 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 800288c:	07c3      	lsls	r3, r0, #31
 800288e:	d507      	bpl.n	80028a0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002890:	2800      	cmp	r0, #0
 8002892:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002896:	bfc8      	it	gt
 8002898:	2301      	movgt	r3, #1
 800289a:	fa13 f080 	uxtah	r0, r3, r0
 800289e:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80028a0:	7aab      	ldrb	r3, [r5, #10]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80028a2:	81e8      	strh	r0, [r5, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 80028a4:	1b04      	subs	r4, r0, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80028a6:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80028a8:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80028aa:	d106      	bne.n	80028ba <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
 80028ac:	4b17      	ldr	r3, [pc, #92]	@ (800290c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b11b      	cbz	r3, 80028ba <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80028b2:	f00a f957 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
 80028b6:	f00a f95b 	bl	800cb70 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 80028ba:	4a15      	ldr	r2, [pc, #84]	@ (8002910 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
        : x(0), y(0), width(0), height(0)
 80028bc:	2300      	movs	r3, #0
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80028c4:	89eb      	ldrh	r3, [r5, #14]
 80028c6:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 80028c8:	425b      	negs	r3, r3
 80028ca:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 80028ce:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 80028d0:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 80028da:	f00a f943 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
 80028de:	6803      	ldr	r3, [r0, #0]
 80028e0:	aa02      	add	r2, sp, #8
 80028e2:	e912 0006 	ldmdb	r2, {r1, r2}
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 80028ea:	6868      	ldr	r0, [r5, #4]
 80028ec:	6803      	ldr	r3, [r0, #0]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4798      	blx	r3
 80028f2:	4605      	mov	r5, r0
        while (d)
 80028f4:	2d00      	cmp	r5, #0
 80028f6:	d0c0      	beq.n	800287a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 80028f8:	88a9      	ldrh	r1, [r5, #4]
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	4421      	add	r1, r4
 80028fe:	4628      	mov	r0, r5
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	b209      	sxth	r1, r1
 8002904:	4798      	blx	r3
 8002906:	69ad      	ldr	r5, [r5, #24]
 8002908:	e7f4      	b.n	80028f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800290a:	bf00      	nop
 800290c:	20015436 	.word	0x20015436
 8002910:	2001542c 	.word	0x2001542c
 8002914:	2001542e 	.word	0x2001542e

08002918 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002918:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800291c:	b112      	cbz	r2, 8002924 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 800291e:	6803      	ldr	r3, [r0, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4718      	bx	r3
    }
 8002924:	4770      	bx	lr
	...

08002928 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800292a:	4604      	mov	r4, r0
        animationCounter++;
 800292c:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 800292e:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8002930:	3001      	adds	r0, #1
 8002932:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8002934:	4298      	cmp	r0, r3
        animationCounter++;
 8002936:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8002938:	d905      	bls.n	8002946 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800293a:	2301      	movs	r3, #1
 800293c:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	72a3      	strb	r3, [r4, #10]
    }
 8002942:	b003      	add	sp, #12
 8002944:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002946:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800294a:	2100      	movs	r1, #0
 800294c:	f00b fe02 	bl	800e554 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8002950:	07c3      	lsls	r3, r0, #31
 8002952:	d507      	bpl.n	8002964 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002954:	2800      	cmp	r0, #0
 8002956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800295a:	bfc8      	it	gt
 800295c:	2301      	movgt	r3, #1
 800295e:	fa13 f080 	uxtah	r0, r3, r0
 8002962:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002964:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002966:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002968:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 800296a:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800296c:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 800296e:	4813      	ldr	r0, [pc, #76]	@ (80029bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 8002970:	f9b0 0000 	ldrsh.w	r0, [r0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002974:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002978:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 800297a:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 800297c:	442b      	add	r3, r5
 800297e:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002980:	b212      	sxth	r2, r2
 8002982:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 8002986:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 8002988:	8322      	strh	r2, [r4, #24]
 800298a:	f8ad 2000 	strh.w	r2, [sp]
 800298e:	2200      	movs	r2, #0
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f8ad 2002 	strh.w	r2, [sp, #2]
 8002996:	4669      	mov	r1, sp
 8002998:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800299a:	7aa3      	ldrb	r3, [r4, #10]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d1d0      	bne.n	8002942 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0cc      	beq.n	8002942 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80029a8:	f00a f8dc 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80029ac:	b003      	add	sp, #12
 80029ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80029b2:	f00a b8dd 	b.w	800cb70 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80029b6:	bf00      	nop
 80029b8:	2001542c 	.word	0x2001542c
 80029bc:	2001542e 	.word	0x2001542e
 80029c0:	20015436 	.word	0x20015436

080029c4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80029c4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80029c8:	b11a      	cbz	r2, 80029d2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80029ca:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80029ce:	b102      	cbz	r2, 80029d2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80029d0:	6018      	str	r0, [r3, #0]
        }
    }
 80029d2:	4770      	bx	lr

080029d4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80029d4:	b510      	push	{r4, lr}
 80029d6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80029d8:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80029dc:	b158      	cbz	r0, 80029f6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4798      	blx	r3
 80029e4:	b138      	cbz	r0, 80029f6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80029e6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80029ea:	6803      	ldr	r3, [r0, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 80029f6:	bd10      	pop	{r4, pc}

080029f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80029f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80029fc:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002a00:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002a02:	68b0      	ldr	r0, [r6, #8]
 8002a04:	6803      	ldr	r3, [r0, #0]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4798      	blx	r3
 8002a0a:	f5b0 7fd2 	cmp.w	r0, #420	@ 0x1a4
 8002a0e:	d205      	bcs.n	8002a1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8002a10:	4b44      	ldr	r3, [pc, #272]	@ (8002b24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002a12:	4a45      	ldr	r2, [pc, #276]	@ (8002b28 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002a14:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002a16:	4845      	ldr	r0, [pc, #276]	@ (8002b2c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002a18:	f010 f830 	bl	8012a7c <__assert_func>
 8002a1c:	6870      	ldr	r0, [r6, #4]
 8002a1e:	6803      	ldr	r3, [r0, #0]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4798      	blx	r3
 8002a24:	280f      	cmp	r0, #15
 8002a26:	d803      	bhi.n	8002a30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8002a28:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b28 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002a2c:	21a4      	movs	r1, #164	@ 0xa4
 8002a2e:	e7f2      	b.n	8002a16 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002a30:	68f0      	ldr	r0, [r6, #12]
 8002a32:	6803      	ldr	r3, [r0, #0]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4798      	blx	r3
 8002a38:	280b      	cmp	r0, #11
 8002a3a:	d803      	bhi.n	8002a44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b34 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002a3e:	4a3a      	ldr	r2, [pc, #232]	@ (8002b28 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002a40:	21a5      	movs	r1, #165	@ 0xa5
 8002a42:	e7e8      	b.n	8002a16 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8002a44:	f00a f88e 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002a48:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002b3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002a4c:	3004      	adds	r0, #4
 8002a4e:	f00a f8d6 	bl	800cbfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002a52:	f8d9 0000 	ldr.w	r0, [r9]
 8002a56:	b110      	cbz	r0, 8002a5e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8002a58:	6803      	ldr	r3, [r0, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4798      	blx	r3
    if (*currentTrans)
 8002a5e:	f8d9 0000 	ldr.w	r0, [r9]
 8002a62:	b110      	cbz	r0, 8002a6a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8002a64:	6803      	ldr	r3, [r0, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4798      	blx	r3
    if (*currentScreen)
 8002a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b40 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8002a6e:	f8d8 0000 	ldr.w	r0, [r8]
 8002a72:	b110      	cbz	r0, 8002a7a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8002a74:	6803      	ldr	r3, [r0, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	4798      	blx	r3
    if (*currentPresenter)
 8002a7a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002a7e:	b110      	cbz	r0, 8002a86 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8002a80:	6803      	ldr	r3, [r0, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4798      	blx	r3
    if (*currentScreen)
 8002a86:	f8d8 0000 	ldr.w	r0, [r8]
 8002a8a:	b110      	cbz	r0, 8002a92 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8002a8c:	6803      	ldr	r3, [r0, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4798      	blx	r3
    if (*currentPresenter)
 8002a92:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002a96:	b110      	cbz	r0, 8002a9e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8002a98:	6803      	ldr	r3, [r0, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002a9e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002aa0:	6803      	ldr	r3, [r0, #0]
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	4798      	blx	r3
        : screenContainer(0), done(false)
 8002aa8:	f04f 0b00 	mov.w	fp, #0
 8002aac:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002aae:	f8c0 b004 	str.w	fp, [r0, #4]
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	f880 b008 	strb.w	fp, [r0, #8]
 8002ab8:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002aba:	68b0      	ldr	r0, [r6, #8]
 8002abc:	6803      	ldr	r3, [r0, #0]
 8002abe:	4659      	mov	r1, fp
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	4798      	blx	r3
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	f001 f92b 	bl	8003d20 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002aca:	6870      	ldr	r0, [r6, #4]
 8002acc:	6803      	ldr	r3, [r0, #0]
 8002ace:	4659      	mov	r1, fp
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	4798      	blx	r3
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	4606      	mov	r6, r0
 8002ad8:	f001 f8fe 	bl	8003cd8 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8002adc:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002ade:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002ae2:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002ae6:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002ae8:	f8c6 a008 	str.w	sl, [r6, #8]
 8002aec:	4628      	mov	r0, r5
 8002aee:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002af0:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002af4:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002af8:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002afa:	4798      	blx	r3
    newPresenter->activate();
 8002afc:	6833      	ldr	r3, [r6, #0]
 8002afe:	4630      	mov	r0, r6
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002b04:	4621      	mov	r1, r4
 8002b06:	4628      	mov	r0, r5
 8002b08:	f00b fd1e 	bl	800e548 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	4620      	mov	r0, r4
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	4798      	blx	r3
    newTransition->invalidate();
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	4620      	mov	r0, r4
}
 8002b1a:	b001      	add	sp, #4
 8002b1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b20:	4718      	bx	r3
 8002b22:	bf00      	nop
 8002b24:	080140f1 	.word	0x080140f1
 8002b28:	0801417f 	.word	0x0801417f
 8002b2c:	08014251 	.word	0x08014251
 8002b30:	08014298 	.word	0x08014298
 8002b34:	0801433b 	.word	0x0801433b
 8002b38:	08014d38 	.word	0x08014d38
 8002b3c:	20015478 	.word	0x20015478
 8002b40:	20015474 	.word	0x20015474

08002b44 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b48:	461d      	mov	r5, r3
        setX(x);
 8002b4a:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002b4c:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002b52:	4604      	mov	r4, r0
 8002b54:	4616      	mov	r6, r2
        setX(x);
 8002b56:	4798      	blx	r3
        setY(y);
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	4631      	mov	r1, r6
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	4798      	blx	r3
        setWidth(width);
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	4629      	mov	r1, r5
 8002b66:	4620      	mov	r0, r4
 8002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6a:	4798      	blx	r3
        setHeight(height);
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	4639      	mov	r1, r7
 8002b70:	4620      	mov	r0, r4
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8002b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8002b78:	4718      	bx	r3
	...

08002b7c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl()
{
 8002b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002b80:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002b84:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002b86:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4798      	blx	r3
 8002b90:	f5b0 7fd2 	cmp.w	r0, #420	@ 0x1a4
 8002b94:	d205      	bcs.n	8002ba2 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x26>
 8002b96:	4b54      	ldr	r3, [pc, #336]	@ (8002ce8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x16c>)
 8002b98:	4a54      	ldr	r2, [pc, #336]	@ (8002cec <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002b9a:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002b9c:	4854      	ldr	r0, [pc, #336]	@ (8002cf0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 8002b9e:	f00f ff6d 	bl	8012a7c <__assert_func>
 8002ba2:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002ba6:	6803      	ldr	r3, [r0, #0]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4798      	blx	r3
 8002bac:	280f      	cmp	r0, #15
 8002bae:	d803      	bhi.n	8002bb8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3c>
 8002bb0:	4b50      	ldr	r3, [pc, #320]	@ (8002cf4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 8002bb2:	4a4e      	ldr	r2, [pc, #312]	@ (8002cec <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002bb4:	21a4      	movs	r1, #164	@ 0xa4
 8002bb6:	e7f1      	b.n	8002b9c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002bb8:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002bbc:	6803      	ldr	r3, [r0, #0]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4798      	blx	r3
 8002bc2:	2837      	cmp	r0, #55	@ 0x37
 8002bc4:	d803      	bhi.n	8002bce <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x52>
 8002bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 8002bc8:	4a48      	ldr	r2, [pc, #288]	@ (8002cec <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002bca:	21a5      	movs	r1, #165	@ 0xa5
 8002bcc:	e7e6      	b.n	8002b9c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8002bce:	f009 ffc9 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002bd2:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002d0c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>
 8002bd6:	3004      	adds	r0, #4
 8002bd8:	f00a f811 	bl	800cbfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002bdc:	f8d9 0000 	ldr.w	r0, [r9]
 8002be0:	b110      	cbz	r0, 8002be8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 8002be2:	6803      	ldr	r3, [r0, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4798      	blx	r3
    if (*currentTrans)
 8002be8:	f8d9 0000 	ldr.w	r0, [r9]
 8002bec:	b110      	cbz	r0, 8002bf4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8002bee:	6803      	ldr	r3, [r0, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4798      	blx	r3
    if (*currentScreen)
 8002bf4:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 8002d10 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 8002bf8:	f8d8 0000 	ldr.w	r0, [r8]
 8002bfc:	b110      	cbz	r0, 8002c04 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8002bfe:	6803      	ldr	r3, [r0, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4798      	blx	r3
    if (*currentPresenter)
 8002c04:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002c08:	b110      	cbz	r0, 8002c10 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8002c0a:	6803      	ldr	r3, [r0, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4798      	blx	r3
    if (*currentScreen)
 8002c10:	f8d8 0000 	ldr.w	r0, [r8]
 8002c14:	b110      	cbz	r0, 8002c1c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8002c16:	6803      	ldr	r3, [r0, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4798      	blx	r3
    if (*currentPresenter)
 8002c1c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002c20:	b110      	cbz	r0, 8002c28 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8002c22:	6803      	ldr	r3, [r0, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002c28:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002c2c:	6803      	ldr	r3, [r0, #0]
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	4798      	blx	r3
          solid()
 8002c34:	4b31      	ldr	r3, [pc, #196]	@ (8002cfc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 8002c36:	6003      	str	r3, [r0, #0]
 8002c38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c3c:	8103      	strh	r3, [r0, #8]
 8002c3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c42:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002c44:	4b2e      	ldr	r3, [pc, #184]	@ (8002d00 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 8002c46:	6103      	str	r3, [r0, #16]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002c48:	4a2e      	ldr	r2, [pc, #184]	@ (8002d04 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
            targetValue = HAL::DISPLAY_WIDTH;
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002c4c:	f9b2 2000 	ldrsh.w	r2, [r2]
            targetValue = HAL::DISPLAY_WIDTH;
 8002c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c54:	8183      	strh	r3, [r0, #12]
        : screenContainer(0), done(false)
 8002c56:	2500      	movs	r5, #0
 8002c58:	4604      	mov	r4, r0
 8002c5a:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 8002c5c:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002c5e:	81c5      	strh	r5, [r0, #14]
          solid()
 8002c60:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002c64:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002c68:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002c6c:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002c70:	4629      	mov	r1, r5
 8002c72:	9200      	str	r2, [sp, #0]
 8002c74:	3010      	adds	r0, #16
 8002c76:	462a      	mov	r2, r5
 8002c78:	f7ff ff64 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002c7c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002c80:	6803      	ldr	r3, [r0, #0]
 8002c82:	4629      	mov	r1, r5
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	4798      	blx	r3
 8002c88:	4606      	mov	r6, r0
 8002c8a:	f001 f849 	bl	8003d20 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002c8e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	4629      	mov	r1, r5
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	4798      	blx	r3
 8002c9a:	4631      	mov	r1, r6
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	f001 f81b 	bl	8003cd8 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8002ca2:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002ca4:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002ca8:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002cac:	6833      	ldr	r3, [r6, #0]
 8002cae:	f8c5 a008 	str.w	sl, [r5, #8]
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002cb6:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002cba:	f8c8 6000 	str.w	r6, [r8]
 8002cbe:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8002cc0:	4798      	blx	r3
    newPresenter->activate();
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002cca:	4621      	mov	r1, r4
 8002ccc:	4630      	mov	r0, r6
 8002cce:	f00b fc3b 	bl	800e548 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	4798      	blx	r3
    newTransition->invalidate();
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4620      	mov	r0, r4
}
 8002ce0:	b003      	add	sp, #12
 8002ce2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce6:	4718      	bx	r3
 8002ce8:	080140f1 	.word	0x080140f1
 8002cec:	080143de 	.word	0x080143de
 8002cf0:	08014251 	.word	0x08014251
 8002cf4:	08014298 	.word	0x08014298
 8002cf8:	0801433b 	.word	0x0801433b
 8002cfc:	08014d80 	.word	0x08014d80
 8002d00:	08014c64 	.word	0x08014c64
 8002d04:	2001542e 	.word	0x2001542e
 8002d08:	2001542c 	.word	0x2001542c
 8002d0c:	20015478 	.word	0x20015478
 8002d10:	20015474 	.word	0x20015474

08002d14 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8002d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002d18:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002d1c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002d1e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002d22:	6803      	ldr	r3, [r0, #0]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4798      	blx	r3
 8002d28:	f243 13cf 	movw	r3, #12751	@ 0x31cf
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d805      	bhi.n	8002d3c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x28>
 8002d30:	4b54      	ldr	r3, [pc, #336]	@ (8002e84 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 8002d32:	4a55      	ldr	r2, [pc, #340]	@ (8002e88 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002d34:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002d36:	4855      	ldr	r0, [pc, #340]	@ (8002e8c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 8002d38:	f00f fea0 	bl	8012a7c <__assert_func>
 8002d3c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002d40:	6803      	ldr	r3, [r0, #0]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4798      	blx	r3
 8002d46:	280f      	cmp	r0, #15
 8002d48:	d803      	bhi.n	8002d52 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3e>
 8002d4a:	4b51      	ldr	r3, [pc, #324]	@ (8002e90 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 8002d4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e88 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002d4e:	21a4      	movs	r1, #164	@ 0xa4
 8002d50:	e7f1      	b.n	8002d36 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002d52:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002d56:	6803      	ldr	r3, [r0, #0]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4798      	blx	r3
 8002d5c:	2837      	cmp	r0, #55	@ 0x37
 8002d5e:	d803      	bhi.n	8002d68 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x54>
 8002d60:	4b4c      	ldr	r3, [pc, #304]	@ (8002e94 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 8002d62:	4a49      	ldr	r2, [pc, #292]	@ (8002e88 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002d64:	21a5      	movs	r1, #165	@ 0xa5
 8002d66:	e7e6      	b.n	8002d36 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x22>
    Application::getInstance()->clearAllTimerWidgets();
 8002d68:	f009 fefc 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002d6c:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002ea8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
 8002d70:	3004      	adds	r0, #4
 8002d72:	f009 ff44 	bl	800cbfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002d76:	f8d9 0000 	ldr.w	r0, [r9]
 8002d7a:	b110      	cbz	r0, 8002d82 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6e>
        (*currentTrans)->tearDown();
 8002d7c:	6803      	ldr	r3, [r0, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4798      	blx	r3
    if (*currentTrans)
 8002d82:	f8d9 0000 	ldr.w	r0, [r9]
 8002d86:	b110      	cbz	r0, 8002d8e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x7a>
        (*currentTrans)->~Transition();
 8002d88:	6803      	ldr	r3, [r0, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4798      	blx	r3
    if (*currentScreen)
 8002d8e:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8002eac <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 8002d92:	f8d8 0000 	ldr.w	r0, [r8]
 8002d96:	b110      	cbz	r0, 8002d9e <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 8002d98:	6803      	ldr	r3, [r0, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	4798      	blx	r3
    if (*currentPresenter)
 8002d9e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002da2:	b110      	cbz	r0, 8002daa <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x96>
        (*currentPresenter)->deactivate();
 8002da4:	6803      	ldr	r3, [r0, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4798      	blx	r3
    if (*currentScreen)
 8002daa:	f8d8 0000 	ldr.w	r0, [r8]
 8002dae:	b110      	cbz	r0, 8002db6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa2>
        (*currentScreen)->~Screen();
 8002db0:	6803      	ldr	r3, [r0, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4798      	blx	r3
    if (*currentPresenter)
 8002db6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002dba:	b110      	cbz	r0, 8002dc2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xae>
        (*currentPresenter)->~Presenter();
 8002dbc:	6803      	ldr	r3, [r0, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002dc2:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002dc6:	6803      	ldr	r3, [r0, #0]
 8002dc8:	2100      	movs	r1, #0
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	4798      	blx	r3
          solid()
 8002dce:	4b32      	ldr	r3, [pc, #200]	@ (8002e98 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 8002dd0:	6003      	str	r3, [r0, #0]
 8002dd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dd6:	8103      	strh	r3, [r0, #8]
 8002dd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ddc:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002dde:	4b2f      	ldr	r3, [pc, #188]	@ (8002e9c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 8002de0:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8002de2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	425a      	negs	r2, r3
 8002de8:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002dea:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
        : screenContainer(0), done(false)
 8002dec:	2500      	movs	r5, #0
 8002dee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002df2:	6045      	str	r5, [r0, #4]
 8002df4:	4604      	mov	r4, r0
          animationCounter(0),
 8002df6:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002df8:	81c5      	strh	r5, [r0, #14]
          solid()
 8002dfa:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002dfe:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002e02:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002e06:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	9200      	str	r2, [sp, #0]
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	462a      	mov	r2, r5
 8002e12:	3010      	adds	r0, #16
 8002e14:	f7ff fe96 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002e18:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002e1c:	6803      	ldr	r3, [r0, #0]
 8002e1e:	4629      	mov	r1, r5
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	4798      	blx	r3
 8002e24:	4606      	mov	r6, r0
 8002e26:	f001 f9c9 	bl	80041bc <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002e2a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002e2e:	6803      	ldr	r3, [r0, #0]
 8002e30:	4629      	mov	r1, r5
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	4798      	blx	r3
 8002e36:	4631      	mov	r1, r6
 8002e38:	4605      	mov	r5, r0
 8002e3a:	f000 ffad 	bl	8003d98 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 8002e3e:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002e40:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002e44:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002e48:	6833      	ldr	r3, [r6, #0]
 8002e4a:	f8c5 a008 	str.w	sl, [r5, #8]
 8002e4e:	4630      	mov	r0, r6
 8002e50:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002e52:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002e56:	f8c8 6000 	str.w	r6, [r8]
 8002e5a:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 8002e5c:	4798      	blx	r3
    newPresenter->activate();
 8002e5e:	682b      	ldr	r3, [r5, #0]
 8002e60:	4628      	mov	r0, r5
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002e66:	4621      	mov	r1, r4
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f00b fb6d 	bl	800e548 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	4620      	mov	r0, r4
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4798      	blx	r3
    newTransition->invalidate();
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4620      	mov	r0, r4
}
 8002e7c:	b003      	add	sp, #12
 8002e7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e82:	4718      	bx	r3
 8002e84:	080140f1 	.word	0x080140f1
 8002e88:	080144c2 	.word	0x080144c2
 8002e8c:	08014251 	.word	0x08014251
 8002e90:	08014298 	.word	0x08014298
 8002e94:	0801433b 	.word	0x0801433b
 8002e98:	08014d5c 	.word	0x08014d5c
 8002e9c:	08014c64 	.word	0x08014c64
 8002ea0:	2001542c 	.word	0x2001542c
 8002ea4:	2001542e 	.word	0x2001542e
 8002ea8:	20015478 	.word	0x20015478
 8002eac:	20015474 	.word	0x20015474

08002eb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4617      	mov	r7, r2
 8002eb6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002eb8:	f009 ff3e 	bl	800cd38 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002ebc:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8002ebe:	2500      	movs	r5, #0
      model(m)
 8002ec0:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 8002ec4:	4e0f      	ldr	r6, [pc, #60]	@ (8002f04 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 8002ec6:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 8002ec8:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002ece:	6830      	ldr	r0, [r6, #0]
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002ed4:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8002ed8:	6803      	ldr	r3, [r0, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 8002ede:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8002ee2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f000 fe5b 	bl	8003ba0 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002eea:	6833      	ldr	r3, [r6, #0]
 8002eec:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002ef0:	b10a      	cbz	r2, 8002ef6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002ef2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002ef4:	b900      	cbnz	r0, 8002ef8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002ef6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 8002ef8:	f00f f846 	bl	8011f88 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 8002efc:	4620      	mov	r0, r4
 8002efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f00:	20015484 	.word	0x20015484
 8002f04:	20015438 	.word	0x20015438
 8002f08:	08014ce4 	.word	0x08014ce4
 8002f0c:	08014ccc 	.word	0x08014ccc

08002f10 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002f12:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002f1c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002f20:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002f24:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	080029f9 	.word	0x080029f9

08002f30 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 8002f30:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 8002f32:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002f36:	2300      	movs	r3, #0
 8002f38:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002f3c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002f40:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002f44:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	08002b7d 	.word	0x08002b7d

08002f50 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 8002f52:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002f5c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002f60:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002f64:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	08002d15 	.word	0x08002d15

08002f70 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002f70:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002f72:	4770      	bx	lr

08002f74 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002f74:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002f76:	4770      	bx	lr

08002f78 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002f78:	4770      	bx	lr

08002f7a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002f7a:	888b      	ldrh	r3, [r1, #4]
 8002f7c:	69c0      	ldr	r0, [r0, #28]
 8002f7e:	680a      	ldr	r2, [r1, #0]
 8002f80:	0adb      	lsrs	r3, r3, #11
 8002f82:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002f86:	4410      	add	r0, r2
 8002f88:	4770      	bx	lr

08002f8a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002f8a:	b510      	push	{r4, lr}
 8002f8c:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8002f8e:	b1ba      	cbz	r2, 8002fc0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002f90:	7b10      	ldrb	r0, [r2, #12]
 8002f92:	b168      	cbz	r0, 8002fb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002f94:	7b53      	ldrb	r3, [r2, #13]
 8002f96:	7ad2      	ldrb	r2, [r2, #11]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	6a23      	ldr	r3, [r4, #32]
 8002fa2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	428a      	cmp	r2, r1
 8002faa:	d102      	bne.n	8002fb2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002fac:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8002fb0:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002fb2:	d805      	bhi.n	8002fc0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002fb4:	3801      	subs	r0, #1
 8002fb6:	b280      	uxth	r0, r0
 8002fb8:	3304      	adds	r3, #4
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d1f3      	bne.n	8002fa6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002fbe:	e7f7      	b.n	8002fb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e7f5      	b.n	8002fb0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002fc4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	212c      	movs	r1, #44	@ 0x2c
 8002fc8:	4604      	mov	r4, r0
 8002fca:	f00f fd29 	bl	8012a20 <_ZdlPvj>
 8002fce:	4620      	mov	r0, r4
 8002fd0:	bd10      	pop	{r4, pc}
	...

08002fd4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002fd4:	b530      	push	{r4, r5, lr}
 8002fd6:	b08b      	sub	sp, #44	@ 0x2c
 8002fd8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002fda:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8002fde:	9508      	str	r5, [sp, #32]
 8002fe0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8002fe4:	9507      	str	r5, [sp, #28]
 8002fe6:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8002fea:	9506      	str	r5, [sp, #24]
 8002fec:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8002ff0:	9505      	str	r5, [sp, #20]
 8002ff2:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8002ff6:	9504      	str	r5, [sp, #16]
 8002ff8:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8002ffc:	9503      	str	r5, [sp, #12]
 8002ffe:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003002:	9502      	str	r5, [sp, #8]
 8003004:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003008:	9501      	str	r5, [sp, #4]
 800300a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800300e:	9500      	str	r5, [sp, #0]
 8003010:	f00a fef4 	bl	800ddfc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8003016:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003018:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800301a:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800301c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800301e:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003022:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003024:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003026:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003028:	4620      	mov	r0, r4
 800302a:	b00b      	add	sp, #44	@ 0x2c
 800302c:	bd30      	pop	{r4, r5, pc}
 800302e:	bf00      	nop
 8003030:	08014da4 	.word	0x08014da4

08003034 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003034:	4770      	bx	lr

08003036 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003036:	4770      	bx	lr

08003038 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003038:	4770      	bx	lr

0800303a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800303a:	4770      	bx	lr

0800303c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800303c:	4770      	bx	lr

0800303e <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800303e:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8003040:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8003042:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8003044:	466d      	mov	r5, sp
        rect.width = width;
 8003046:	8101      	strh	r1, [r0, #8]
 8003048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800304c:	4601      	mov	r1, r0
    virtual void setWidth(int16_t width)
 800304e:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8003050:	4628      	mov	r0, r5
 8003052:	4798      	blx	r3
 8003054:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003058:	343c      	adds	r4, #60	@ 0x3c
 800305a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800305e:	b005      	add	sp, #20
 8003060:	bd30      	pop	{r4, r5, pc}

08003062 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8003062:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003064:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003066:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8003068:	466d      	mov	r5, sp
        rect.height = height;
 800306a:	8141      	strh	r1, [r0, #10]
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003070:	4601      	mov	r1, r0
    virtual void setHeight(int16_t height)
 8003072:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8003074:	4628      	mov	r0, r5
 8003076:	4798      	blx	r3
 8003078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800307c:	343c      	adds	r4, #60	@ 0x3c
 800307e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8003082:	b005      	add	sp, #20
 8003084:	bd30      	pop	{r4, r5, pc}

08003086 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003086:	2200      	movs	r2, #0
 8003088:	8002      	strh	r2, [r0, #0]
 800308a:	8042      	strh	r2, [r0, #2]
 800308c:	8082      	strh	r2, [r0, #4]
 800308e:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003090:	4770      	bx	lr

08003092 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003092:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8003096:	4770      	bx	lr

08003098 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003098:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 800309a:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800309c:	4604      	mov	r4, r0
        setX(x);
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80030a0:	4615      	mov	r5, r2
        setX(x);
 80030a2:	4798      	blx	r3
        setBaselineY(baselineY);
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	4629      	mov	r1, r5
 80030a8:	4620      	mov	r0, r4
 80030aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 80030ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 80030b0:	4718      	bx	r3

080030b2 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 80030b2:	2000      	movs	r0, #0
 80030b4:	4770      	bx	lr

080030b6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80030b6:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80030b8:	4770      	bx	lr

080030ba <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80030ba:	4770      	bx	lr

080030bc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80030bc:	4770      	bx	lr

080030be <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80030be:	4770      	bx	lr

080030c0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80030c0:	4770      	bx	lr

080030c2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80030c2:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80030c4:	68c2      	ldr	r2, [r0, #12]
 80030c6:	6844      	ldr	r4, [r0, #4]
 80030c8:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 80030ca:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80030cc:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80030d0:	07d2      	lsls	r2, r2, #31
 80030d2:	bf48      	it	mi
 80030d4:	5962      	ldrmi	r2, [r4, r5]
 80030d6:	689b      	ldr	r3, [r3, #8]
    }
 80030d8:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80030da:	bf48      	it	mi
 80030dc:	58d3      	ldrmi	r3, [r2, r3]
 80030de:	4718      	bx	r3

080030e0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80030e0:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80030e2:	6840      	ldr	r0, [r0, #4]
 80030e4:	b130      	cbz	r0, 80030f4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	b91a      	cbnz	r2, 80030f2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80030ea:	68d8      	ldr	r0, [r3, #12]
 80030ec:	f000 0001 	and.w	r0, r0, #1
 80030f0:	4770      	bx	lr
 80030f2:	2001      	movs	r0, #1
    }
 80030f4:	4770      	bx	lr

080030f6 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80030f6:	b510      	push	{r4, lr}
 80030f8:	214c      	movs	r1, #76	@ 0x4c
 80030fa:	4604      	mov	r4, r0
 80030fc:	f00f fc90 	bl	8012a20 <_ZdlPvj>
 8003100:	4620      	mov	r0, r4
 8003102:	bd10      	pop	{r4, pc}

08003104 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003104:	b510      	push	{r4, lr}
 8003106:	2110      	movs	r1, #16
 8003108:	4604      	mov	r4, r0
 800310a:	f00f fc89 	bl	8012a20 <_ZdlPvj>
 800310e:	4620      	mov	r0, r4
 8003110:	bd10      	pop	{r4, pc}

08003112 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003112:	b510      	push	{r4, lr}
}
 8003114:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
Screen1ViewBase::~Screen1ViewBase()
 8003118:	4604      	mov	r4, r0
}
 800311a:	f00f fc81 	bl	8012a20 <_ZdlPvj>
 800311e:	4620      	mov	r0, r4
 8003120:	bd10      	pop	{r4, pc}

08003122 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003122:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003124:	f7ff fbf8 	bl	8002918 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003128:	bd08      	pop	{r3, pc}
	...

0800312c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800312c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800312e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003130:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003132:	4b12      	ldr	r3, [pc, #72]	@ (800317c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8003134:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003136:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003138:	b28d      	uxth	r5, r1
 800313a:	b92b      	cbnz	r3, 8003148 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 800313c:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800313e:	4a11      	ldr	r2, [pc, #68]	@ (8003184 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003140:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003142:	4811      	ldr	r0, [pc, #68]	@ (8003188 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003144:	f00f fc9a 	bl	8012a7c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003148:	4910      	ldr	r1, [pc, #64]	@ (800318c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800314a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800314c:	8809      	ldrh	r1, [r1, #0]
 800314e:	4291      	cmp	r1, r2
 8003150:	d803      	bhi.n	800315a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003152:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003154:	4a0b      	ldr	r2, [pc, #44]	@ (8003184 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003156:	216d      	movs	r1, #109	@ 0x6d
 8003158:	e7f3      	b.n	8003142 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 800315a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800315e:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4798      	blx	r3
 800316c:	1a29      	subs	r1, r5, r0
 800316e:	4633      	mov	r3, r6
 8003170:	4620      	mov	r0, r4
 8003172:	b209      	sxth	r1, r1
    }
 8003174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003178:	4718      	bx	r3
 800317a:	bf00      	nop
 800317c:	20015488 	.word	0x20015488
 8003180:	080145a7 	.word	0x080145a7
 8003184:	080145e9 	.word	0x080145e9
 8003188:	08014624 	.word	0x08014624
 800318c:	2001548c 	.word	0x2001548c
 8003190:	0801466b 	.word	0x0801466b
 8003194:	20015490 	.word	0x20015490

08003198 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8003198:	306c      	adds	r0, #108	@ 0x6c
 800319a:	4288      	cmp	r0, r1
{
 800319c:	b508      	push	{r3, lr}
    if (&src == &button1)
 800319e:	d105      	bne.n	80031ac <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80031a0:	f009 fce0 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 80031a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 80031a8:	f7ff bed2 	b.w	8002f50 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 80031ac:	bd08      	pop	{r3, pc}

080031ae <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80031ae:	2200      	movs	r2, #0
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 80031b8:	6082      	str	r2, [r0, #8]
    }
 80031ba:	4770      	bx	lr

080031bc <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 80031bc:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 80031be:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80031c0:	4604      	mov	r4, r0
        setX(x);
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80031c4:	4615      	mov	r5, r2
        setX(x);
 80031c6:	4798      	blx	r3
        setY(y);
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	4629      	mov	r1, r5
 80031cc:	4620      	mov	r0, r4
 80031ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80031d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80031d4:	4718      	bx	r3
	...

080031d8 <_ZN8touchgfx6WidgetC1Ev>:
 80031d8:	2200      	movs	r2, #0
 80031da:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80031de:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80031e2:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80031e6:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80031ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031ee:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80031f0:	4a01      	ldr	r2, [pc, #4]	@ (80031f8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80031f2:	6002      	str	r2, [r0, #0]
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	08014e0c 	.word	0x08014e0c

080031fc <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 80031fc:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80031fe:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 8003200:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003202:	2100      	movs	r1, #0
 8003204:	f00f fe41 	bl	8012e8a <memset>
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ffe5 	bl	80031d8 <_ZN8touchgfx6WidgetC1Ev>
 800320e:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003210:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8003214:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800321a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800321c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8003220:	2300      	movs	r3, #0
 8003222:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8003226:	8723      	strh	r3, [r4, #56]	@ 0x38
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 800322c:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8003230:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8003232:	4620      	mov	r0, r4
 8003234:	bd10      	pop	{r4, pc}
 8003236:	bf00      	nop
 8003238:	080156bc 	.word	0x080156bc
 800323c:	08014c54 	.word	0x08014c54

08003240 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	4604      	mov	r4, r0
 8003246:	b08b      	sub	sp, #44	@ 0x2c
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8003248:	46a3      	mov	fp, r4
        : presenter(0)
 800324a:	2500      	movs	r5, #0
 800324c:	f00a ffd0 	bl	800e1f0 <_ZN8touchgfx6ScreenC1Ev>
 8003250:	4b7f      	ldr	r3, [pc, #508]	@ (8003450 <_ZN15Screen1ViewBaseC1Ev+0x210>)
 8003252:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003254:	f84b 3b40 	str.w	r3, [fp], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003258:	2226      	movs	r2, #38	@ 0x26
 800325a:	4629      	mov	r1, r5
 800325c:	4658      	mov	r0, fp
 800325e:	f00f fe14 	bl	8012e8a <memset>
 8003262:	4658      	mov	r0, fp
 8003264:	f7ff ffb8 	bl	80031d8 <_ZN8touchgfx6WidgetC1Ev>
 8003268:	4b7a      	ldr	r3, [pc, #488]	@ (8003454 <_ZN15Screen1ViewBaseC1Ev+0x214>)
 800326a:	6423      	str	r3, [r4, #64]	@ 0x40
 800326c:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 8003270:	23ff      	movs	r3, #255	@ 0xff
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003272:	2226      	movs	r2, #38	@ 0x26
 8003274:	4629      	mov	r1, r5
 8003276:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 800327a:	4630      	mov	r0, r6
        : color(col)
 800327c:	66a5      	str	r5, [r4, #104]	@ 0x68
 800327e:	f00f fe04 	bl	8012e8a <memset>
 8003282:	4630      	mov	r0, r6
 8003284:	f7ff ffa8 	bl	80031d8 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8003288:	2301      	movs	r3, #1
 800328a:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800328e:	4b72      	ldr	r3, [pc, #456]	@ (8003458 <_ZN15Screen1ViewBaseC1Ev+0x218>)
 8003290:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8003292:	f104 0aa0 	add.w	sl, r4, #160	@ 0xa0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800329a:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800329e:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 80032a2:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
        : TextArea()
 80032a6:	f104 09e8 	add.w	r9, r4, #232	@ 0xe8
 80032aa:	4650      	mov	r0, sl
 80032ac:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 80032b0:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 80032b4:	f7ff ffa2 	bl	80031fc <_ZN8touchgfx8TextAreaC1Ev>
 80032b8:	4648      	mov	r0, r9
 80032ba:	f7ff ff9f 	bl	80031fc <_ZN8touchgfx8TextAreaC1Ev>
 80032be:	f504 789a 	add.w	r8, r4, #308	@ 0x134
        : TextAreaWithWildcardBase(), wc1(0)
 80032c2:	4b66      	ldr	r3, [pc, #408]	@ (800345c <_ZN15Screen1ViewBaseC1Ev+0x21c>)
 80032c4:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 80032c8:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80032cc:	4640      	mov	r0, r8
 80032ce:	f7ff ff95 	bl	80031fc <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80032d2:	4b63      	ldr	r3, [pc, #396]	@ (8003460 <_ZN15Screen1ViewBaseC1Ev+0x220>)
 80032d4:	e9c4 3464 	strd	r3, r4, [r4, #400]	@ 0x190
 80032d8:	4b62      	ldr	r3, [pc, #392]	@ (8003464 <_ZN15Screen1ViewBaseC1Ev+0x224>)
 80032da:	e9c4 3566 	strd	r3, r5, [r4, #408]	@ 0x198
    __background.setPosition(0, 0, 240, 320);
 80032de:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80032e2:	462a      	mov	r2, r5
 80032e4:	4658      	mov	r0, fp
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4629      	mov	r1, r5
 80032ea:	23f0      	movs	r3, #240	@ 0xf0
 80032ec:	f7ff fc2a 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80032f0:	1d27      	adds	r7, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80032f2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80032f6:	66a3      	str	r3, [r4, #104]	@ 0x68
 80032f8:	4659      	mov	r1, fp
 80032fa:	4638      	mov	r0, r7
 80032fc:	f005 ff96 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 199);
 8003300:	4630      	mov	r0, r6
 8003302:	22c7      	movs	r2, #199	@ 0xc7
 8003304:	2114      	movs	r1, #20
 8003306:	f7ff ff59 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
 800330a:	f04f 0b03 	mov.w	fp, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 800330e:	aa08      	add	r2, sp, #32
 8003310:	4630      	mov	r0, r6
 8003312:	a907      	add	r1, sp, #28
 8003314:	f8ad b01c 	strh.w	fp, [sp, #28]
 8003318:	f8ad b020 	strh.w	fp, [sp, #32]
 800331c:	f007 fcf2 	bl	800ad04 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8003320:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003324:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8003328:	4631      	mov	r1, r6
 800332a:	4638      	mov	r0, r7
 800332c:	f005 ff7e 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(53, 103);
 8003330:	2267      	movs	r2, #103	@ 0x67
 8003332:	4650      	mov	r0, sl
 8003334:	2135      	movs	r1, #53	@ 0x35
 8003336:	f7ff ff41 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 800333a:	ae02      	add	r6, sp, #8
        color = newColor;
 800333c:	4b4a      	ldr	r3, [pc, #296]	@ (8003468 <_ZN15Screen1ViewBaseC1Ev+0x228>)
 800333e:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
        boundingArea = calculateBoundingArea();
 8003342:	4651      	mov	r1, sl
 8003344:	4630      	mov	r0, r6
        linespace = space;
 8003346:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
        boundingArea = calculateBoundingArea();
 800334a:	f007 f9d5 	bl	800a6f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800334e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003352:	f104 03dc 	add.w	r3, r4, #220	@ 0xdc
 8003356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800335a:	4b44      	ldr	r3, [pc, #272]	@ (800346c <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 800335c:	9308      	str	r3, [sp, #32]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3G8C));
 800335e:	4650      	mov	r0, sl
 8003360:	f04f 030a 	mov.w	r3, #10
 8003364:	a908      	add	r1, sp, #32
 8003366:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800336a:	f007 fc6d 	bl	800ac48 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800336e:	4651      	mov	r1, sl
 8003370:	4638      	mov	r0, r7
 8003372:	f005 ff5b 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    highestScore.setPosition(0, 139, 240, 42);
 8003376:	232a      	movs	r3, #42	@ 0x2a
 8003378:	228b      	movs	r2, #139	@ 0x8b
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4629      	mov	r1, r5
 800337e:	23f0      	movs	r3, #240	@ 0xf0
 8003380:	4648      	mov	r0, r9
 8003382:	f7ff fbdf 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003386:	4b3a      	ldr	r3, [pc, #232]	@ (8003470 <_ZN15Screen1ViewBaseC1Ev+0x230>)
 8003388:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
        boundingArea = calculateBoundingArea();
 800338c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
        linespace = space;
 8003390:	f8a4 511c 	strh.w	r5, [r4, #284]	@ 0x11c
        boundingArea = calculateBoundingArea();
 8003394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003398:	4649      	mov	r1, r9
 800339a:	4630      	mov	r0, r6
 800339c:	4798      	blx	r3
 800339e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80033a2:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 80033a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80033aa:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <_ZN15Screen1ViewBaseC1Ev+0x234>)
 80033ac:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(highestScoreBuffer, HIGHESTSCORE_SIZE, "%s", touchgfx::TypedText(T_HSCORET).getText());
 80033ae:	f504 7abe 	add.w	sl, r4, #380	@ 0x17c
 80033b2:	b92b      	cbnz	r3, 80033c0 <_ZN15Screen1ViewBaseC1Ev+0x180>
 80033b4:	4b30      	ldr	r3, [pc, #192]	@ (8003478 <_ZN15Screen1ViewBaseC1Ev+0x238>)
 80033b6:	4a31      	ldr	r2, [pc, #196]	@ (800347c <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 80033b8:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80033ba:	4831      	ldr	r0, [pc, #196]	@ (8003480 <_ZN15Screen1ViewBaseC1Ev+0x240>)
 80033bc:	f00f fb5e 	bl	8012a7c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80033c0:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <_ZN15Screen1ViewBaseC1Ev+0x244>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d803      	bhi.n	80033d0 <_ZN15Screen1ViewBaseC1Ev+0x190>
 80033c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003488 <_ZN15Screen1ViewBaseC1Ev+0x248>)
 80033ca:	4a2c      	ldr	r2, [pc, #176]	@ (800347c <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 80033cc:	2161      	movs	r1, #97	@ 0x61
 80033ce:	e7f4      	b.n	80033ba <_ZN15Screen1ViewBaseC1Ev+0x17a>
        return texts->getText(typedTextId);
 80033d0:	4b2e      	ldr	r3, [pc, #184]	@ (800348c <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 80033d2:	4659      	mov	r1, fp
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	f000 fc1f 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 80033da:	4a2d      	ldr	r2, [pc, #180]	@ (8003490 <_ZN15Screen1ViewBaseC1Ev+0x250>)
 80033dc:	4603      	mov	r3, r0
 80033de:	210a      	movs	r1, #10
 80033e0:	4650      	mov	r0, sl
 80033e2:	f00c fbe5 	bl	800fbb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80033e6:	4b21      	ldr	r3, [pc, #132]	@ (800346c <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 80033e8:	9308      	str	r3, [sp, #32]
    highestScore.setTypedText(touchgfx::TypedText(T_HSCORE));
 80033ea:	a908      	add	r1, sp, #32
 80033ec:	2309      	movs	r3, #9
 80033ee:	4648      	mov	r0, r9
        wc1 = value;
 80033f0:	f8c4 a130 	str.w	sl, [r4, #304]	@ 0x130
 80033f4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80033f8:	f007 fc26 	bl	800ac48 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80033fc:	4649      	mov	r1, r9
 80033fe:	4638      	mov	r0, r7
 8003400:	f005 ff14 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(7, 14);
 8003404:	220e      	movs	r2, #14
 8003406:	4640      	mov	r0, r8
 8003408:	2107      	movs	r1, #7
 800340a:	f7ff fed7 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800340e:	4b21      	ldr	r3, [pc, #132]	@ (8003494 <_ZN15Screen1ViewBaseC1Ev+0x254>)
 8003410:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
        boundingArea = calculateBoundingArea();
 8003414:	4641      	mov	r1, r8
 8003416:	4630      	mov	r0, r6
        linespace = space;
 8003418:	f8a4 5168 	strh.w	r5, [r4, #360]	@ 0x168
        boundingArea = calculateBoundingArea();
 800341c:	f007 f96c 	bl	800a6f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003420:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003424:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 8003428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800342c:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 800342e:	9308      	str	r3, [sp, #32]
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MXSW));
 8003430:	a908      	add	r1, sp, #32
 8003432:	2302      	movs	r3, #2
 8003434:	4640      	mov	r0, r8
 8003436:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800343a:	f007 fc05 	bl	800ac48 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800343e:	4638      	mov	r0, r7
 8003440:	4641      	mov	r1, r8
 8003442:	f005 fef3 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003446:	4620      	mov	r0, r4
 8003448:	b00b      	add	sp, #44	@ 0x2c
 800344a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	08014f1c 	.word	0x08014f1c
 8003454:	0801574c 	.word	0x0801574c
 8003458:	080157b4 	.word	0x080157b4
 800345c:	08014e74 	.word	0x08014e74
 8003460:	08014f04 	.word	0x08014f04
 8003464:	08003199 	.word	0x08003199
 8003468:	fff00a0a 	.word	0xfff00a0a
 800346c:	08014c54 	.word	0x08014c54
 8003470:	fffc1414 	.word	0xfffc1414
 8003474:	20015488 	.word	0x20015488
 8003478:	080145a7 	.word	0x080145a7
 800347c:	080146a9 	.word	0x080146a9
 8003480:	08014624 	.word	0x08014624
 8003484:	2001548c 	.word	0x2001548c
 8003488:	0801466b 	.word	0x0801466b
 800348c:	20015494 	.word	0x20015494
 8003490:	080146f4 	.word	0x080146f4
 8003494:	fffce90f 	.word	0xfffce90f

08003498 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8003498:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800349a:	4770      	bx	lr

0800349c <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 800349c:	4770      	bx	lr

0800349e <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 800349e:	4770      	bx	lr

080034a0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80034a0:	4770      	bx	lr

080034a2 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 80034a2:	4770      	bx	lr

080034a4 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 80034a4:	4770      	bx	lr

080034a6 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80034a6:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80034a8:	68c2      	ldr	r2, [r0, #12]
 80034aa:	6844      	ldr	r4, [r0, #4]
 80034ac:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 80034ae:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80034b0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80034b4:	07d2      	lsls	r2, r2, #31
 80034b6:	bf48      	it	mi
 80034b8:	5962      	ldrmi	r2, [r4, r5]
 80034ba:	689b      	ldr	r3, [r3, #8]
    }
 80034bc:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80034be:	bf48      	it	mi
 80034c0:	58d3      	ldrmi	r3, [r2, r3]
 80034c2:	4718      	bx	r3

080034c4 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 80034c4:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80034c6:	6840      	ldr	r0, [r0, #4]
 80034c8:	b130      	cbz	r0, 80034d8 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	b91a      	cbnz	r2, 80034d6 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 80034ce:	68d8      	ldr	r0, [r3, #12]
 80034d0:	f000 0001 	and.w	r0, r0, #1
 80034d4:	4770      	bx	lr
 80034d6:	2001      	movs	r0, #1
    }
 80034d8:	4770      	bx	lr

080034da <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80034da:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80034de:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 80034e2:	4770      	bx	lr

080034e4 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 80034e4:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 80034e6:	3038      	adds	r0, #56	@ 0x38
 80034e8:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80034ec:	b113      	cbz	r3, 80034f4 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 80034ee:	3136      	adds	r1, #54	@ 0x36
 80034f0:	f007 bdd6 	b.w	800b0a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80034f4:	3134      	adds	r1, #52	@ 0x34
 80034f6:	e7fb      	b.n	80034f0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

080034f8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 80034f8:	b510      	push	{r4, lr}
 80034fa:	2164      	movs	r1, #100	@ 0x64
 80034fc:	4604      	mov	r4, r0
 80034fe:	f00f fa8f 	bl	8012a20 <_ZdlPvj>
 8003502:	4620      	mov	r0, r4
 8003504:	bd10      	pop	{r4, pc}

08003506 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003506:	b510      	push	{r4, lr}
 8003508:	2110      	movs	r1, #16
 800350a:	4604      	mov	r4, r0
 800350c:	f00f fa88 	bl	8012a20 <_ZdlPvj>
 8003510:	4620      	mov	r0, r4
 8003512:	bd10      	pop	{r4, pc}

08003514 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8003514:	b510      	push	{r4, lr}
}
 8003516:	f44f 710a 	mov.w	r1, #552	@ 0x228
Screen2ViewBase::~Screen2ViewBase()
 800351a:	4604      	mov	r4, r0
}
 800351c:	f00f fa80 	bl	8012a20 <_ZdlPvj>
 8003520:	4620      	mov	r0, r4
 8003522:	bd10      	pop	{r4, pc}

08003524 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8003524:	b510      	push	{r4, lr}
 8003526:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8003528:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800352a:	b150      	cbz	r0, 8003542 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 800352c:	6803      	ldr	r3, [r0, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4798      	blx	r3
 8003532:	b130      	cbz	r0, 8003542 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8003534:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	4621      	mov	r1, r4
 800353a:	689b      	ldr	r3, [r3, #8]
        }
    }
 800353c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8003540:	4718      	bx	r3
    }
 8003542:	bd10      	pop	{r4, pc}

08003544 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8003544:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003546:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8003548:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 800354c:	4604      	mov	r4, r0
 800354e:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8003550:	b90b      	cbnz	r3, 8003556 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8003552:	b116      	cbz	r6, 800355a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8003554:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8003556:	2e00      	cmp	r6, #0
 8003558:	d0fc      	beq.n	8003554 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	4620      	mov	r0, r4
 8003568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800356c:	4798      	blx	r3
            invalidate();
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	4620      	mov	r0, r4
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8003576:	2e00      	cmp	r6, #0
 8003578:	d0ec      	beq.n	8003554 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 800357a:	792b      	ldrb	r3, [r5, #4]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d1e9      	bne.n	8003554 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	4620      	mov	r0, r4
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8003588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 800358c:	4718      	bx	r3

0800358e <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 800358e:	f100 03c4 	add.w	r3, r0, #196	@ 0xc4
 8003592:	428b      	cmp	r3, r1
{
 8003594:	b510      	push	{r4, lr}
 8003596:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8003598:	d109      	bne.n	80035ae <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800359a:	f009 fae3 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 800359e:	f7ff fcc7 	bl	8002f30 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	4620      	mov	r0, r4
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 80035a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 80035ac:	4718      	bx	r3
}
 80035ae:	bd10      	pop	{r4, pc}

080035b0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 80035b0:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80035b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 80035b6:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 80035b8:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80035ba:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 80035be:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80035c0:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80035c2:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80035c4:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 80035c6:	f00c fbad 	bl	800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80035ca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80035ce:	4607      	mov	r7, r0
 80035d0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80035d4:	4640      	mov	r0, r8
 80035d6:	f3c3 064f 	ubfx	r6, r3, #1, #16
 80035da:	f00c fbd7 	bl	800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80035de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035e2:	f3c5 054f 	ubfx	r5, r5, #1, #16
 80035e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80035ea:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80035ee:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 80035f2:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 80035f6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80035fa:	b212      	sxth	r2, r2
 80035fc:	b209      	sxth	r1, r1
 80035fe:	f7ff fddd 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	4620      	mov	r0, r4
 8003606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 800360a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 800360e:	4718      	bx	r3

08003610 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8003610:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8003612:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8003614:	4604      	mov	r4, r0
 8003616:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003618:	2100      	movs	r1, #0
 800361a:	f00f fc36 	bl	8012e8a <memset>
 800361e:	4620      	mov	r0, r4
 8003620:	f7ff fdda 	bl	80031d8 <_ZN8touchgfx6WidgetC1Ev>
 8003624:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8003626:	6023      	str	r3, [r4, #0]
 8003628:	882b      	ldrh	r3, [r5, #0]
 800362a:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800362c:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 800362e:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8003630:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8003634:	4629      	mov	r1, r5
 8003636:	f007 fd33 	bl	800b0a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800363a:	4620      	mov	r0, r4
 800363c:	bd38      	pop	{r3, r4, r5, pc}
 800363e:	bf00      	nop
 8003640:	08015890 	.word	0x08015890

08003644 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8003644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003648:	4604      	mov	r4, r0
 800364a:	b08d      	sub	sp, #52	@ 0x34
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 800364c:	4627      	mov	r7, r4
 800364e:	2500      	movs	r5, #0
 8003650:	f00a fdce 	bl	800e1f0 <_ZN8touchgfx6ScreenC1Ev>
 8003654:	4ba2      	ldr	r3, [pc, #648]	@ (80038e0 <_ZN15Screen2ViewBaseC1Ev+0x29c>)
 8003656:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003658:	f847 3b40 	str.w	r3, [r7], #64
        : Widget(), alpha(255), color(0)
 800365c:	2226      	movs	r2, #38	@ 0x26
 800365e:	4629      	mov	r1, r5
 8003660:	4638      	mov	r0, r7
 8003662:	f00f fc12 	bl	8012e8a <memset>
 8003666:	4638      	mov	r0, r7
 8003668:	f7ff fdb6 	bl	80031d8 <_ZN8touchgfx6WidgetC1Ev>
 800366c:	4b9d      	ldr	r3, [pc, #628]	@ (80038e4 <_ZN15Screen2ViewBaseC1Ev+0x2a0>)
 800366e:	6423      	str	r3, [r4, #64]	@ 0x40
 8003670:	23ff      	movs	r3, #255	@ 0xff
 8003672:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8003676:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 800367a:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800367e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8003682:	4618      	mov	r0, r3
 8003684:	a90a      	add	r1, sp, #40	@ 0x28
 8003686:	66a5      	str	r5, [r4, #104]	@ 0x68
 8003688:	9303      	str	r3, [sp, #12]
 800368a:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 800368e:	f7ff ffbf 	bl	8003610 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003692:	a90a      	add	r1, sp, #40	@ 0x28
 8003694:	4650      	mov	r0, sl
 8003696:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 800369a:	f7ff ffb9 	bl	8003610 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pressed(false), alpha(255), action(0)
 800369e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80036a2:	f8a4 30f0 	strh.w	r3, [r4, #240]	@ 0xf0
 80036a6:	f240 1301 	movw	r3, #257	@ 0x101
 80036aa:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
        : T()
 80036ae:	4b8e      	ldr	r3, [pc, #568]	@ (80038e8 <_ZN15Screen2ViewBaseC1Ev+0x2a4>)
 80036b0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80036b4:	f104 06fc 	add.w	r6, r4, #252	@ 0xfc
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 80036c0:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 80036c4:	a90a      	add	r1, sp, #40	@ 0x28
 80036c6:	4630      	mov	r0, r6
        : x(0), y(0), width(0), height(0)
 80036c8:	e9c4 5532 	strd	r5, r5, [r4, #200]	@ 0xc8
 80036cc:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
          nextSibling(0),
 80036d0:	e9c4 5536 	strd	r5, r5, [r4, #216]	@ 0xd8
          cachedAbsX(0),
 80036d4:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
          firstChild(0)
 80036d8:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
 80036dc:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 80036e0:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
        : TextArea()
 80036e4:	f504 7894 	add.w	r8, r4, #296	@ 0x128
 80036e8:	f7ff ff92 	bl	8003610 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 80036ec:	4631      	mov	r1, r6
 80036ee:	4648      	mov	r0, r9
 80036f0:	f005 fd9c 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80036f4:	4640      	mov	r0, r8
 80036f6:	f7ff fd81 	bl	80031fc <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 80036fa:	4b7c      	ldr	r3, [pc, #496]	@ (80038ec <_ZN15Screen2ViewBaseC1Ev+0x2a8>)
 80036fc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
 8003700:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 8003704:	4618      	mov	r0, r3
 8003706:	f8c4 5170 	str.w	r5, [r4, #368]	@ 0x170
 800370a:	f504 7bde 	add.w	fp, r4, #444	@ 0x1bc
 800370e:	9302      	str	r3, [sp, #8]
 8003710:	f7ff fd74 	bl	80031fc <_ZN8touchgfx8TextAreaC1Ev>
 8003714:	4658      	mov	r0, fp
 8003716:	f7ff fd71 	bl	80031fc <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 800371a:	4b75      	ldr	r3, [pc, #468]	@ (80038f0 <_ZN15Screen2ViewBaseC1Ev+0x2ac>)
 800371c:	e9c4 3486 	strd	r3, r4, [r4, #536]	@ 0x218
 8003720:	4b74      	ldr	r3, [pc, #464]	@ (80038f4 <_ZN15Screen2ViewBaseC1Ev+0x2b0>)
 8003722:	e9c4 3588 	strd	r3, r5, [r4, #544]	@ 0x220
    __background.setPosition(0, 0, 240, 320);
 8003726:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800372a:	462a      	mov	r2, r5
 800372c:	4638      	mov	r0, r7
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4629      	mov	r1, r5
 8003732:	23f0      	movs	r3, #240	@ 0xf0
 8003734:	f7ff fa06 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003738:	1d26      	adds	r6, r4, #4
        color = newColor;
 800373a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800373e:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003740:	4639      	mov	r1, r7
 8003742:	4630      	mov	r0, r6
 8003744:	f005 fd72 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 8003748:	462a      	mov	r2, r5
 800374a:	9803      	ldr	r0, [sp, #12]
 800374c:	4629      	mov	r1, r5
 800374e:	f7ff fd35 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
    track0.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8003752:	9803      	ldr	r0, [sp, #12]
 8003754:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8003758:	a90a      	add	r1, sp, #40	@ 0x28
 800375a:	f007 fca1 	bl	800b0a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800375e:	9903      	ldr	r1, [sp, #12]
 8003760:	4630      	mov	r0, r6
 8003762:	f005 fd63 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 52);
 8003766:	2234      	movs	r2, #52	@ 0x34
 8003768:	4650      	mov	r0, sl
 800376a:	4629      	mov	r1, r5
 800376c:	f7ff fd26 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
 8003770:	2302      	movs	r3, #2
    track1.setBitmap(touchgfx::Bitmap(BITMAP_GAMEOVER_ID));
 8003772:	4650      	mov	r0, sl
 8003774:	a90a      	add	r1, sp, #40	@ 0x28
 8003776:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800377a:	f007 fc91 	bl	800b0a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800377e:	4651      	mov	r1, sl
 8003780:	4630      	mov	r0, r6
        visible = vis;
 8003782:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8003786:	f005 fd51 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800378a:	2701      	movs	r7, #1
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 800378c:	4648      	mov	r0, r9
 800378e:	aa0a      	add	r2, sp, #40	@ 0x28
 8003790:	a909      	add	r1, sp, #36	@ 0x24
 8003792:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8003796:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800379a:	f7ff ff09 	bl	80035b0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 800379e:	f504 7306 	add.w	r3, r4, #536	@ 0x218
        action = &callback;
 80037a2:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
    flexButton1.setPosition(204, 282, 32, 32);
 80037a6:	2320      	movs	r3, #32
 80037a8:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80037ac:	4648      	mov	r0, r9
        rect.x = x;
 80037ae:	f8c4 5100 	str.w	r5, [r4, #256]	@ 0x100
 80037b2:	21cc      	movs	r1, #204	@ 0xcc
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f7ff f9c5 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
 80037ba:	4649      	mov	r1, r9
 80037bc:	4630      	mov	r0, r6
 80037be:	f005 fd35 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    score.setPosition(100, 166, 136, 49);
 80037c2:	2331      	movs	r3, #49	@ 0x31
 80037c4:	22a6      	movs	r2, #166	@ 0xa6
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2164      	movs	r1, #100	@ 0x64
 80037ca:	2388      	movs	r3, #136	@ 0x88
 80037cc:	4640      	mov	r0, r8
 80037ce:	f7ff f9b9 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80037d2:	4b49      	ldr	r3, [pc, #292]	@ (80038f8 <_ZN15Screen2ViewBaseC1Ev+0x2b4>)
 80037d4:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 80037d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
        linespace = space;
 80037dc:	f8a4 515c 	strh.w	r5, [r4, #348]	@ 0x15c
        boundingArea = calculateBoundingArea();
 80037e0:	f10d 0910 	add.w	r9, sp, #16
 80037e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e8:	4641      	mov	r1, r8
 80037ea:	4648      	mov	r0, r9
 80037ec:	4798      	blx	r3
 80037ee:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80037f2:	f504 73b2 	add.w	r3, r4, #356	@ 0x164
 80037f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80037fa:	4b40      	ldr	r3, [pc, #256]	@ (80038fc <_ZN15Screen2ViewBaseC1Ev+0x2b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%s", touchgfx::TypedText(T_SCORE_T).getText());
 80037fe:	f504 7a01 	add.w	sl, r4, #516	@ 0x204
 8003802:	b92b      	cbnz	r3, 8003810 <_ZN15Screen2ViewBaseC1Ev+0x1cc>
 8003804:	4b3e      	ldr	r3, [pc, #248]	@ (8003900 <_ZN15Screen2ViewBaseC1Ev+0x2bc>)
 8003806:	4a3f      	ldr	r2, [pc, #252]	@ (8003904 <_ZN15Screen2ViewBaseC1Ev+0x2c0>)
 8003808:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800380a:	483f      	ldr	r0, [pc, #252]	@ (8003908 <_ZN15Screen2ViewBaseC1Ev+0x2c4>)
 800380c:	f00f f936 	bl	8012a7c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003810:	4b3e      	ldr	r3, [pc, #248]	@ (800390c <_ZN15Screen2ViewBaseC1Ev+0x2c8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	2b05      	cmp	r3, #5
 8003816:	d803      	bhi.n	8003820 <_ZN15Screen2ViewBaseC1Ev+0x1dc>
 8003818:	4b3d      	ldr	r3, [pc, #244]	@ (8003910 <_ZN15Screen2ViewBaseC1Ev+0x2cc>)
 800381a:	4a3a      	ldr	r2, [pc, #232]	@ (8003904 <_ZN15Screen2ViewBaseC1Ev+0x2c0>)
 800381c:	2161      	movs	r1, #97	@ 0x61
 800381e:	e7f4      	b.n	800380a <_ZN15Screen2ViewBaseC1Ev+0x1c6>
        return texts->getText(typedTextId);
 8003820:	4b3c      	ldr	r3, [pc, #240]	@ (8003914 <_ZN15Screen2ViewBaseC1Ev+0x2d0>)
 8003822:	2105      	movs	r1, #5
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	f000 f9f7 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800382a:	4a3b      	ldr	r2, [pc, #236]	@ (8003918 <_ZN15Screen2ViewBaseC1Ev+0x2d4>)
 800382c:	4603      	mov	r3, r0
 800382e:	210a      	movs	r1, #10
 8003830:	4650      	mov	r0, sl
 8003832:	f00c f9bd 	bl	800fbb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8003836:	2304      	movs	r3, #4
        wc1 = value;
 8003838:	f8c4 a170 	str.w	sl, [r4, #368]	@ 0x170
    score.setTypedText(touchgfx::TypedText(T_SCORE));
 800383c:	a90a      	add	r1, sp, #40	@ 0x28
 800383e:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 8003924 <_ZN15Screen2ViewBaseC1Ev+0x2e0>
 8003842:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8003846:	4640      	mov	r0, r8
 8003848:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 800384c:	f007 f9fc 	bl	800ac48 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003850:	4641      	mov	r1, r8
 8003852:	4630      	mov	r0, r6
 8003854:	f005 fcea 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(185, 136);
 8003858:	9802      	ldr	r0, [sp, #8]
 800385a:	2288      	movs	r2, #136	@ 0x88
 800385c:	21b9      	movs	r1, #185	@ 0xb9
 800385e:	f7ff fcad 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003862:	4b2e      	ldr	r3, [pc, #184]	@ (800391c <_ZN15Screen2ViewBaseC1Ev+0x2d8>)
        boundingArea = calculateBoundingArea();
 8003864:	9902      	ldr	r1, [sp, #8]
        color = newColor;
 8003866:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
        boundingArea = calculateBoundingArea();
 800386a:	4648      	mov	r0, r9
        linespace = space;
 800386c:	f8a4 51a8 	strh.w	r5, [r4, #424]	@ 0x1a8
        boundingArea = calculateBoundingArea();
 8003870:	f006 ff42 	bl	800a6f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003874:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003878:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 800387c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1D7L));
 8003880:	9802      	ldr	r0, [sp, #8]
 8003882:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8003886:	a90a      	add	r1, sp, #40	@ 0x28
 8003888:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
 800388c:	f007 f9dc 	bl	800ac48 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003890:	9902      	ldr	r1, [sp, #8]
 8003892:	4630      	mov	r0, r6
 8003894:	f005 fcca 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(191, 54);
 8003898:	2236      	movs	r2, #54	@ 0x36
 800389a:	4658      	mov	r0, fp
 800389c:	21bf      	movs	r1, #191	@ 0xbf
 800389e:	f7ff fc8d 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80038a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003920 <_ZN15Screen2ViewBaseC1Ev+0x2dc>)
 80038a4:	f8c4 31ec 	str.w	r3, [r4, #492]	@ 0x1ec
        boundingArea = calculateBoundingArea();
 80038a8:	4659      	mov	r1, fp
 80038aa:	4648      	mov	r0, r9
        linespace = space;
 80038ac:	f8a4 51f0 	strh.w	r5, [r4, #496]	@ 0x1f0
        boundingArea = calculateBoundingArea();
 80038b0:	f006 ff22 	bl	800a6f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80038b4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80038b8:	f504 73fc 	add.w	r3, r4, #504	@ 0x1f8
 80038bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JK4A));
 80038c0:	a90a      	add	r1, sp, #40	@ 0x28
 80038c2:	4658      	mov	r0, fp
 80038c4:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80038c8:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 80038cc:	f007 f9bc 	bl	800ac48 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80038d0:	4630      	mov	r0, r6
 80038d2:	4659      	mov	r1, fp
 80038d4:	f005 fcaa 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80038d8:	4620      	mov	r0, r4
 80038da:	b00d      	add	sp, #52	@ 0x34
 80038dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e0:	08015008 	.word	0x08015008
 80038e4:	0801574c 	.word	0x0801574c
 80038e8:	08014f50 	.word	0x08014f50
 80038ec:	08014e74 	.word	0x08014e74
 80038f0:	08014ff0 	.word	0x08014ff0
 80038f4:	0800358f 	.word	0x0800358f
 80038f8:	fff50c0c 	.word	0xfff50c0c
 80038fc:	20015488 	.word	0x20015488
 8003900:	080145a7 	.word	0x080145a7
 8003904:	080146a9 	.word	0x080146a9
 8003908:	08014624 	.word	0x08014624
 800390c:	2001548c 	.word	0x2001548c
 8003910:	0801466b 	.word	0x0801466b
 8003914:	20015494 	.word	0x20015494
 8003918:	080146f4 	.word	0x080146f4
 800391c:	ffb411f5 	.word	0xffb411f5
 8003920:	ff9e0ff7 	.word	0xff9e0ff7
 8003924:	08014c54 	.word	0x08014c54

08003928 <__tcf_0>:

touchgfx::GeneratedFont& getFont_arialbd_10_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_10_4bpp()
{
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003928:	4770      	bx	lr
	...

0800392c <_Z23getFont_arialbd_10_4bppv>:
{
 800392c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 800392e:	4d18      	ldr	r5, [pc, #96]	@ (8003990 <_Z23getFont_arialbd_10_4bppv+0x64>)
 8003930:	682c      	ldr	r4, [r5, #0]
 8003932:	f014 0401 	ands.w	r4, r4, #1
{
 8003936:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_10_4bpp(glyphs_arialbd_10_4bpp, 533, 13, 10, 0, 0, 4, 1, 1, 1, unicodes_arialbd_10_4bpp, kerning_arialbd_10_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003938:	f3bf 8f5b 	dmb	ish
 800393c:	d124      	bne.n	8003988 <_Z23getFont_arialbd_10_4bppv+0x5c>
 800393e:	4628      	mov	r0, r5
 8003940:	f00f f870 	bl	8012a24 <__cxa_guard_acquire>
 8003944:	b300      	cbz	r0, 8003988 <_Z23getFont_arialbd_10_4bppv+0x5c>
 8003946:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <_Z23getFont_arialbd_10_4bppv+0x68>)
 8003948:	4913      	ldr	r1, [pc, #76]	@ (8003998 <_Z23getFont_arialbd_10_4bppv+0x6c>)
 800394a:	4814      	ldr	r0, [pc, #80]	@ (800399c <_Z23getFont_arialbd_10_4bppv+0x70>)
 800394c:	940a      	str	r4, [sp, #40]	@ 0x28
 800394e:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8003952:	233f      	movs	r3, #63	@ 0x3f
 8003954:	9309      	str	r3, [sp, #36]	@ 0x24
 8003956:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <_Z23getFont_arialbd_10_4bppv+0x74>)
 8003958:	9308      	str	r3, [sp, #32]
 800395a:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <_Z23getFont_arialbd_10_4bppv+0x78>)
 800395c:	9307      	str	r3, [sp, #28]
 800395e:	2301      	movs	r3, #1
 8003960:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003964:	9304      	str	r3, [sp, #16]
 8003966:	2304      	movs	r3, #4
 8003968:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800396c:	230a      	movs	r3, #10
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f240 2215 	movw	r2, #533	@ 0x215
 8003974:	230d      	movs	r3, #13
 8003976:	9401      	str	r4, [sp, #4]
 8003978:	f7ff fb2c 	bl	8002fd4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800397c:	480a      	ldr	r0, [pc, #40]	@ (80039a8 <_Z23getFont_arialbd_10_4bppv+0x7c>)
 800397e:	f00f f89b 	bl	8012ab8 <atexit>
 8003982:	4628      	mov	r0, r5
 8003984:	f00f f85a 	bl	8012a3c <__cxa_guard_release>
    return arialbd_10_4bpp;
}
 8003988:	4804      	ldr	r0, [pc, #16]	@ (800399c <_Z23getFont_arialbd_10_4bppv+0x70>)
 800398a:	b00f      	add	sp, #60	@ 0x3c
 800398c:	bd30      	pop	{r4, r5, pc}
 800398e:	bf00      	nop
 8003990:	20004624 	.word	0x20004624
 8003994:	08015038 	.word	0x08015038
 8003998:	08052bbc 	.word	0x08052bbc
 800399c:	20004628 	.word	0x20004628
 80039a0:	08058334 	.word	0x08058334
 80039a4:	08058610 	.word	0x08058610
 80039a8:	08003929 	.word	0x08003929

080039ac <__tcf_0>:
extern const touchgfx::FontContextualFormsTable arialbd_contextualFormsTable;
touchgfx::GeneratedFont& getFont_arialbd_20_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_20_4bpp()
{
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80039ac:	4770      	bx	lr
	...

080039b0 <_Z23getFont_arialbd_20_4bppv>:
{
 80039b0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80039b2:	4d18      	ldr	r5, [pc, #96]	@ (8003a14 <_Z23getFont_arialbd_20_4bppv+0x64>)
 80039b4:	682c      	ldr	r4, [r5, #0]
 80039b6:	f014 0401 	ands.w	r4, r4, #1
{
 80039ba:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_20_4bpp(glyphs_arialbd_20_4bpp, 533, 26, 20, 1, 0, 4, 1, 2, 4, unicodes_arialbd_20_4bpp, kerning_arialbd_20_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 80039bc:	f3bf 8f5b 	dmb	ish
 80039c0:	d125      	bne.n	8003a0e <_Z23getFont_arialbd_20_4bppv+0x5e>
 80039c2:	4628      	mov	r0, r5
 80039c4:	f00f f82e 	bl	8012a24 <__cxa_guard_acquire>
 80039c8:	b308      	cbz	r0, 8003a0e <_Z23getFont_arialbd_20_4bppv+0x5e>
 80039ca:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <_Z23getFont_arialbd_20_4bppv+0x68>)
 80039cc:	4913      	ldr	r1, [pc, #76]	@ (8003a1c <_Z23getFont_arialbd_20_4bppv+0x6c>)
 80039ce:	4814      	ldr	r0, [pc, #80]	@ (8003a20 <_Z23getFont_arialbd_20_4bppv+0x70>)
 80039d0:	940a      	str	r4, [sp, #40]	@ 0x28
 80039d2:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 80039d6:	233f      	movs	r3, #63	@ 0x3f
 80039d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <_Z23getFont_arialbd_20_4bppv+0x74>)
 80039dc:	9308      	str	r3, [sp, #32]
 80039de:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <_Z23getFont_arialbd_20_4bppv+0x78>)
 80039e0:	9307      	str	r3, [sp, #28]
 80039e2:	2204      	movs	r2, #4
 80039e4:	2302      	movs	r3, #2
 80039e6:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80039ea:	2301      	movs	r3, #1
 80039ec:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80039f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80039f4:	2314      	movs	r3, #20
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	f240 2215 	movw	r2, #533	@ 0x215
 80039fc:	231a      	movs	r3, #26
 80039fe:	f7ff fae9 	bl	8002fd4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003a02:	480a      	ldr	r0, [pc, #40]	@ (8003a2c <_Z23getFont_arialbd_20_4bppv+0x7c>)
 8003a04:	f00f f858 	bl	8012ab8 <atexit>
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f00f f817 	bl	8012a3c <__cxa_guard_release>
    return arialbd_20_4bpp;
}
 8003a0e:	4804      	ldr	r0, [pc, #16]	@ (8003a20 <_Z23getFont_arialbd_20_4bppv+0x70>)
 8003a10:	b00f      	add	sp, #60	@ 0x3c
 8003a12:	bd30      	pop	{r4, r5, pc}
 8003a14:	20004654 	.word	0x20004654
 8003a18:	08015038 	.word	0x08015038
 8003a1c:	080548e4 	.word	0x080548e4
 8003a20:	20004658 	.word	0x20004658
 8003a24:	0805833c 	.word	0x0805833c
 8003a28:	08058614 	.word	0x08058614
 8003a2c:	080039ad 	.word	0x080039ad

08003a30 <__tcf_0>:
extern const touchgfx::FontContextualFormsTable arialbd_contextualFormsTable;
touchgfx::GeneratedFont& getFont_arialbd_40_4bpp();

touchgfx::GeneratedFont& getFont_arialbd_40_4bpp()
{
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a30:	4770      	bx	lr
	...

08003a34 <_Z23getFont_arialbd_40_4bppv>:
{
 8003a34:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a36:	4d18      	ldr	r5, [pc, #96]	@ (8003a98 <_Z23getFont_arialbd_40_4bppv+0x64>)
 8003a38:	682c      	ldr	r4, [r5, #0]
 8003a3a:	f014 0401 	ands.w	r4, r4, #1
{
 8003a3e:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont arialbd_40_4bpp(glyphs_arialbd_40_4bpp, 533, 51, 40, 0, 0, 4, 1, 4, 7, unicodes_arialbd_40_4bpp, kerning_arialbd_40_4bpp, 63, 0, 0, &arialbd_contextualFormsTable);
 8003a40:	f3bf 8f5b 	dmb	ish
 8003a44:	d125      	bne.n	8003a92 <_Z23getFont_arialbd_40_4bppv+0x5e>
 8003a46:	4628      	mov	r0, r5
 8003a48:	f00e ffec 	bl	8012a24 <__cxa_guard_acquire>
 8003a4c:	b308      	cbz	r0, 8003a92 <_Z23getFont_arialbd_40_4bppv+0x5e>
 8003a4e:	4b13      	ldr	r3, [pc, #76]	@ (8003a9c <_Z23getFont_arialbd_40_4bppv+0x68>)
 8003a50:	4913      	ldr	r1, [pc, #76]	@ (8003aa0 <_Z23getFont_arialbd_40_4bppv+0x6c>)
 8003a52:	4814      	ldr	r0, [pc, #80]	@ (8003aa4 <_Z23getFont_arialbd_40_4bppv+0x70>)
 8003a54:	940a      	str	r4, [sp, #40]	@ 0x28
 8003a56:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8003a5a:	233f      	movs	r3, #63	@ 0x3f
 8003a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a5e:	4b12      	ldr	r3, [pc, #72]	@ (8003aa8 <_Z23getFont_arialbd_40_4bppv+0x74>)
 8003a60:	9308      	str	r3, [sp, #32]
 8003a62:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <_Z23getFont_arialbd_40_4bppv+0x78>)
 8003a64:	9307      	str	r3, [sp, #28]
 8003a66:	2207      	movs	r2, #7
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003a74:	2328      	movs	r3, #40	@ 0x28
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	f240 2215 	movw	r2, #533	@ 0x215
 8003a7c:	2333      	movs	r3, #51	@ 0x33
 8003a7e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a82:	f7ff faa7 	bl	8002fd4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003a86:	480a      	ldr	r0, [pc, #40]	@ (8003ab0 <_Z23getFont_arialbd_40_4bppv+0x7c>)
 8003a88:	f00f f816 	bl	8012ab8 <atexit>
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	f00e ffd5 	bl	8012a3c <__cxa_guard_release>
    return arialbd_40_4bpp;
}
 8003a92:	4804      	ldr	r0, [pc, #16]	@ (8003aa4 <_Z23getFont_arialbd_40_4bppv+0x70>)
 8003a94:	b00f      	add	sp, #60	@ 0x3c
 8003a96:	bd30      	pop	{r4, r5, pc}
 8003a98:	20004684 	.word	0x20004684
 8003a9c:	08015038 	.word	0x08015038
 8003aa0:	0805660c 	.word	0x0805660c
 8003aa4:	20004688 	.word	0x20004688
 8003aa8:	08058478 	.word	0x08058478
 8003aac:	08058618 	.word	0x08058618
 8003ab0:	08003a31 	.word	0x08003a31

08003ab4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	4770      	bx	lr

08003ab8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003ab8:	2000      	movs	r0, #0
 8003aba:	4770      	bx	lr

08003abc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003abc:	b40e      	push	{r1, r2, r3}
 8003abe:	b503      	push	{r0, r1, lr}
 8003ac0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003ac2:	2100      	movs	r1, #0
{
 8003ac4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003ac8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003aca:	f009 ffbf 	bl	800da4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ace:	b002      	add	sp, #8
 8003ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ad4:	b003      	add	sp, #12
 8003ad6:	4770      	bx	lr

08003ad8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003ad8:	b40c      	push	{r2, r3}
 8003ada:	b507      	push	{r0, r1, r2, lr}
 8003adc:	ab04      	add	r3, sp, #16
 8003ade:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003ae2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003ae4:	f009 ffb2 	bl	800da4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ae8:	b003      	add	sp, #12
 8003aea:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aee:	b002      	add	sp, #8
 8003af0:	4770      	bx	lr
	...

08003af4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003af4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003af6:	b510      	push	{r4, lr}
 8003af8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003afa:	b373      	cbz	r3, 8003b5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003afc:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003afe:	b92b      	cbnz	r3, 8003b0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003b00:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003b02:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 8003b04:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003b06:	4819      	ldr	r0, [pc, #100]	@ (8003b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003b08:	f00e ffb8 	bl	8012a7c <__assert_func>
            return buffer[pos];
 8003b0c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003b0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003b12:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003b14:	b30b      	cbz	r3, 8003b5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003b16:	f00b faa2 	bl	800f05e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003b1a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d803      	bhi.n	8003b28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003b20:	4b13      	ldr	r3, [pc, #76]	@ (8003b70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003b22:	4a14      	ldr	r2, [pc, #80]	@ (8003b74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003b24:	21cb      	movs	r1, #203	@ 0xcb
 8003b26:	e7ee      	b.n	8003b06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003b28:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003b2a:	1c53      	adds	r3, r2, #1
 8003b2c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	4619      	mov	r1, r3
 8003b32:	bf88      	it	hi
 8003b34:	f1a3 010a 	subhi.w	r1, r3, #10
 8003b38:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003b3c:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003b40:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003b42:	4281      	cmp	r1, r0
 8003b44:	d109      	bne.n	8003b5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003b46:	2b0a      	cmp	r3, #10
 8003b48:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003b4c:	bf28      	it	cs
 8003b4e:	2300      	movcs	r3, #0
 8003b50:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003b54:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8003b56:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003b58:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003b5a:	4620      	mov	r0, r4
}
 8003b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003b60:	f00b b980 	b.w	800ee64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003b64:	080146f7 	.word	0x080146f7
 8003b68:	08014700 	.word	0x08014700
 8003b6c:	080147ab 	.word	0x080147ab
 8003b70:	080147f5 	.word	0x080147f5
 8003b74:	08014803 	.word	0x08014803

08003b78 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003b78:	f00b b93b 	b.w	800edf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003b7c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	ac02      	add	r4, sp, #8
 8003b82:	e884 0006 	stmia.w	r4, {r1, r2}
 8003b86:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003b88:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b8a:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4621      	mov	r1, r4
 8003b94:	9b08      	ldr	r3, [sp, #32]
 8003b96:	f008 fb83 	bl	800c2a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003b9a:	b006      	add	sp, #24
 8003b9c:	bd10      	pop	{r4, pc}
	...

08003ba0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003ba0:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003ba2:	bb18      	cbnz	r0, 8003bec <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003ba4:	4b12      	ldr	r3, [pc, #72]	@ (8003bf0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003ba6:	4813      	ldr	r0, [pc, #76]	@ (8003bf4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003ba8:	681c      	ldr	r4, [r3, #0]
 8003baa:	4913      	ldr	r1, [pc, #76]	@ (8003bf8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003bac:	b1b4      	cbz	r4, 8003bdc <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	4422      	add	r2, r4
 8003bb2:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003bb4:	6862      	ldr	r2, [r4, #4]
 8003bb6:	4422      	add	r2, r4
 8003bb8:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003bba:	68a2      	ldr	r2, [r4, #8]
 8003bbc:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003bc4:	f000 f838 	bl	8003c38 <_ZN17TypedTextDatabase8getFontsEv>
 8003bc8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003bca:	f000 f833 	bl	8003c34 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003bce:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003bd0:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003bd4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003bd8:	8018      	strh	r0, [r3, #0]
    }
}
 8003bda:	e007      	b.n	8003bec <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003bde:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003be2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003be4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003be6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003be8:	2c00      	cmp	r4, #0
 8003bea:	d1e8      	bne.n	8003bbe <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003bec:	bd38      	pop	{r3, r4, r5, pc}
 8003bee:	bf00      	nop
 8003bf0:	200046c0 	.word	0x200046c0
 8003bf4:	200046b8 	.word	0x200046b8
 8003bf8:	200046b4 	.word	0x200046b4
 8003bfc:	200046bc 	.word	0x200046bc
 8003c00:	20015488 	.word	0x20015488
 8003c04:	20015490 	.word	0x20015490
 8003c08:	2001548c 	.word	0x2001548c
 8003c0c:	08058648 	.word	0x08058648
 8003c10:	0805861c 	.word	0x0805861c
 8003c14:	08058698 	.word	0x08058698

08003c18 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003c18:	4b04      	ldr	r3, [pc, #16]	@ (8003c2c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003c20:	4b03      	ldr	r3, [pc, #12]	@ (8003c30 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	200046b4 	.word	0x200046b4
 8003c30:	200046b8 	.word	0x200046b8

08003c34 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003c34:	200b      	movs	r0, #11
 8003c36:	4770      	bx	lr

08003c38 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003c38:	4800      	ldr	r0, [pc, #0]	@ (8003c3c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003c3a:	4770      	bx	lr
 8003c3c:	200046c4 	.word	0x200046c4

08003c40 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_arialbd_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003c40:	b510      	push	{r4, lr}
    &(getFont_arialbd_20_4bpp()),
 8003c42:	f7ff feb5 	bl	80039b0 <_Z23getFont_arialbd_20_4bppv>
};
 8003c46:	4c04      	ldr	r4, [pc, #16]	@ (8003c58 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003c48:	6020      	str	r0, [r4, #0]
    &(getFont_arialbd_40_4bpp()),
 8003c4a:	f7ff fef3 	bl	8003a34 <_Z23getFont_arialbd_40_4bppv>
};
 8003c4e:	6060      	str	r0, [r4, #4]
    &(getFont_arialbd_10_4bpp())
 8003c50:	f7ff fe6c 	bl	800392c <_Z23getFont_arialbd_10_4bppv>
};
 8003c54:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003c56:	bd10      	pop	{r4, pc}
 8003c58:	200046c4 	.word	0x200046c4

08003c5c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003c5c:	4770      	bx	lr

08003c5e <_ZN19FrontendApplicationD0Ev>:
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003c64:	4604      	mov	r4, r0
 8003c66:	f00e fedb 	bl	8012a20 <_ZdlPvj>
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	bd10      	pop	{r4, pc}

08003c6e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	4604      	mov	r4, r0
    {
        model.tick();
 8003c72:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8003c76:	f000 f816 	bl	8003ca6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003c7a:	4620      	mov	r0, r4
    }
 8003c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003c80:	f009 b81a 	b.w	800ccb8 <_ZN8touchgfx11Application15handleTickEventEv>

08003c84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003c84:	b510      	push	{r4, lr}
 8003c86:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003c88:	f7ff f912 	bl	8002eb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003c8c:	4b01      	ldr	r3, [pc, #4]	@ (8003c94 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8003c8e:	6023      	str	r3, [r4, #0]
{

}
 8003c90:	4620      	mov	r0, r4
 8003c92:	bd10      	pop	{r4, pc}
 8003c94:	08015498 	.word	0x08015498

08003c98 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95), modelListener(0)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	215f      	movs	r1, #95	@ 0x5f
 8003c9c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8003ca0:	6002      	str	r2, [r0, #0]
 8003ca2:	8081      	strh	r1, [r0, #4]
{
	modelTickCount = 0;
	highestScore = 0;
}
 8003ca4:	4770      	bx	lr

08003ca6 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	6003      	str	r3, [r0, #0]
}
 8003cac:	4770      	bx	lr

08003cae <_ZNK5Model15getHighestScoreEv>:
	return ImageX;
}

int Model::getHighestScore() const {
	return this->highestScore;
}
 8003cae:	68c0      	ldr	r0, [r0, #12]
 8003cb0:	4770      	bx	lr

08003cb2 <_ZN5Model15setHighestScoreEi>:
void Model::setHighestScore(int score){
	if(score > highestScore) highestScore = score;
 8003cb2:	68c3      	ldr	r3, [r0, #12]
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	bfb8      	it	lt
 8003cb8:	60c1      	strlt	r1, [r0, #12]
}
 8003cba:	4770      	bx	lr

08003cbc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003cbc:	4770      	bx	lr

08003cbe <_ZThn4_N16Screen1PresenterD1Ev>:
 8003cbe:	3804      	subs	r0, #4
 8003cc0:	4770      	bx	lr

08003cc2 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003cc2:	4770      	bx	lr

08003cc4 <_ZN16Screen1PresenterD0Ev>:
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	2110      	movs	r1, #16
 8003cc8:	4604      	mov	r4, r0
 8003cca:	f00e fea9 	bl	8012a20 <_ZdlPvj>
 8003cce:	4620      	mov	r0, r4
 8003cd0:	bd10      	pop	{r4, pc}

08003cd2 <_ZThn4_N16Screen1PresenterD0Ev>:
 8003cd2:	f1a0 0004 	sub.w	r0, r0, #4
 8003cd6:	e7f5      	b.n	8003cc4 <_ZN16Screen1PresenterD0Ev>

08003cd8 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6082      	str	r2, [r0, #8]
    : view(v)
 8003cdc:	4a02      	ldr	r2, [pc, #8]	@ (8003ce8 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8003cde:	6002      	str	r2, [r0, #0]
 8003ce0:	3218      	adds	r2, #24
 8003ce2:	6042      	str	r2, [r0, #4]
 8003ce4:	60c1      	str	r1, [r0, #12]
}
 8003ce6:	4770      	bx	lr
 8003ce8:	080154ec 	.word	0x080154ec

08003cec <_ZNK16Screen1Presenter15getHighestScoreEv>:
{

}

int Screen1Presenter::getHighestScore() const{
	return model->getHighestScore();
 8003cec:	6880      	ldr	r0, [r0, #8]
 8003cee:	f7ff bfde 	b.w	8003cae <_ZNK5Model15getHighestScoreEv>

08003cf2 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003cf2:	4770      	bx	lr

08003cf4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	4b03      	ldr	r3, [pc, #12]	@ (8003d04 <_ZN11Screen1ViewD1Ev+0x10>)
 8003cf8:	6003      	str	r3, [r0, #0]
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	f7ff f9df 	bl	80030be <_ZN15Screen1ViewBaseD1Ev>
 8003d00:	4620      	mov	r0, r4
 8003d02:	bd10      	pop	{r4, pc}
 8003d04:	08015514 	.word	0x08015514

08003d08 <_ZN11Screen1ViewD0Ev>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	f7ff fff2 	bl	8003cf4 <_ZN11Screen1ViewD1Ev>
 8003d10:	4620      	mov	r0, r4
 8003d12:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8003d16:	f00e fe83 	bl	8012a20 <_ZdlPvj>
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	bd10      	pop	{r4, pc}
	...

08003d20 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4604      	mov	r4, r0
 8003d24:	f7ff fa8c 	bl	8003240 <_ZN15Screen1ViewBaseC1Ev>
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <_ZN11Screen1ViewC1Ev+0x20>)
 8003d2a:	6023      	str	r3, [r4, #0]
    DF_SendCommand(0x0F, 0x02, 0x02);
 8003d2c:	2202      	movs	r2, #2
Screen1View::Screen1View()
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
    DF_SendCommand(0x0F, 0x02, 0x02);
 8003d34:	4611      	mov	r1, r2
 8003d36:	200f      	movs	r0, #15
 8003d38:	f7fd f84e 	bl	8000dd8 <DF_SendCommand>
}
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	bd10      	pop	{r4, pc}
 8003d40:	08015514 	.word	0x08015514

08003d44 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003d44:	f7ff b9bc 	b.w	80030c0 <_ZN15Screen1ViewBase11setupScreenEv>

08003d48 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 8003d48:	f8d0 31a0 	ldr.w	r3, [r0, #416]	@ 0x1a0
 8003d4c:	3301      	adds	r3, #1
{
 8003d4e:	b510      	push	{r4, lr}
 8003d50:	4604      	mov	r4, r0
	tickCounter += 1;
 8003d52:	f8c0 31a0 	str.w	r3, [r0, #416]	@ 0x1a0
	Unicode::snprintf(highestScoreBuffer, HIGHESTSCORE_SIZE, "%d", presenter->getHighestScore());
 8003d56:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003d58:	f7ff ffc8 	bl	8003cec <_ZNK16Screen1Presenter15getHighestScoreEv>
 8003d5c:	4a06      	ldr	r2, [pc, #24]	@ (8003d78 <_ZN11Screen1View15handleTickEventEv+0x30>)
 8003d5e:	4603      	mov	r3, r0
 8003d60:	210a      	movs	r1, #10
 8003d62:	f504 70be 	add.w	r0, r4, #380	@ 0x17c
 8003d66:	f00b ff23 	bl	800fbb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	highestScore.invalidate();
 8003d6a:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
}
 8003d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	highestScore.invalidate();
 8003d72:	f009 bf95 	b.w	800dca0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8003d76:	bf00      	nop
 8003d78:	080148d5 	.word	0x080148d5

08003d7c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8003d7c:	4770      	bx	lr

08003d7e <_ZThn4_N16Screen2PresenterD1Ev>:
 8003d7e:	3804      	subs	r0, #4
 8003d80:	4770      	bx	lr

08003d82 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003d82:	4770      	bx	lr

08003d84 <_ZN16Screen2PresenterD0Ev>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	2110      	movs	r1, #16
 8003d88:	4604      	mov	r4, r0
 8003d8a:	f00e fe49 	bl	8012a20 <_ZdlPvj>
 8003d8e:	4620      	mov	r0, r4
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <_ZThn4_N16Screen2PresenterD0Ev>:
 8003d92:	f1a0 0004 	sub.w	r0, r0, #4
 8003d96:	e7f5      	b.n	8003d84 <_ZN16Screen2PresenterD0Ev>

08003d98 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003d98:	2200      	movs	r2, #0
 8003d9a:	6082      	str	r2, [r0, #8]
    : view(v)
 8003d9c:	4a02      	ldr	r2, [pc, #8]	@ (8003da8 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003d9e:	6002      	str	r2, [r0, #0]
 8003da0:	3218      	adds	r2, #24
 8003da2:	6042      	str	r2, [r0, #4]
 8003da4:	60c1      	str	r1, [r0, #12]
}
 8003da6:	4770      	bx	lr
 8003da8:	08015548 	.word	0x08015548

08003dac <_ZN16Screen2Presenter15setHighestScoreEi>:

int Screen2Presenter::getHighestScore() const{
	return model->getHighestScore();
}
void Screen2Presenter::setHighestScore(int score){
	model->setHighestScore(score);
 8003dac:	6880      	ldr	r0, [r0, #8]
 8003dae:	f7ff bf80 	b.w	8003cb2 <_ZN5Model15setHighestScoreEi>

08003db2 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
//    presenter->UpdateImageX(localImageX);
}
 8003db2:	4770      	bx	lr

08003db4 <_ZN11Screen2View11setupScreenEv>:
{
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4604      	mov	r4, r0
	engine.init();
 8003db8:	f500 700a 	add.w	r0, r0, #552	@ 0x228
 8003dbc:	f7fc fc9d 	bl	80006fa <_ZN12TetrisEngine4initEv>
	tickCount = 0;
 8003dc0:	f504 5240 	add.w	r2, r4, #12288	@ 0x3000
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
	track1.invalidate();
 8003dca:	f104 0098 	add.w	r0, r4, #152	@ 0x98
        visible = vis;
 8003dce:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
}
 8003dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	track1.invalidate();
 8003dd6:	f009 bf63 	b.w	800dca0 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08003ddc <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <_ZN11Screen2ViewD1Ev+0x3c>)
 8003dde:	b570      	push	{r4, r5, r6, lr}
 8003de0:	4605      	mov	r5, r0
 8003de2:	6003      	str	r3, [r0, #0]
 8003de4:	f243 1494 	movw	r4, #12692	@ 0x3194
 8003de8:	f642 6654 	movw	r6, #11860	@ 0x2e54
 8003dec:	42b4      	cmp	r4, r6
 8003dee:	d10d      	bne.n	8003e0c <_ZN11Screen2ViewD1Ev+0x30>
 8003df0:	f240 56b4 	movw	r6, #1460	@ 0x5b4
 8003df4:	592b      	ldr	r3, [r5, r4]
 8003df6:	1928      	adds	r0, r5, r4
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3c34      	subs	r4, #52	@ 0x34
 8003dfc:	4798      	blx	r3
 8003dfe:	42b4      	cmp	r4, r6
 8003e00:	d1f8      	bne.n	8003df4 <_ZN11Screen2ViewD1Ev+0x18>
 8003e02:	4628      	mov	r0, r5
 8003e04:	f7ff fb4d 	bl	80034a2 <_ZN15Screen2ViewBaseD1Ev>
 8003e08:	4628      	mov	r0, r5
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	592b      	ldr	r3, [r5, r4]
 8003e0e:	1928      	adds	r0, r5, r4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4798      	blx	r3
 8003e14:	3c34      	subs	r4, #52	@ 0x34
 8003e16:	e7e9      	b.n	8003dec <_ZN11Screen2ViewD1Ev+0x10>
 8003e18:	08015570 	.word	0x08015570

08003e1c <_ZN11Screen2ViewD0Ev>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	4604      	mov	r4, r0
 8003e20:	f7ff ffdc 	bl	8003ddc <_ZN11Screen2ViewD1Ev>
 8003e24:	4620      	mov	r0, r4
 8003e26:	f243 11d0 	movw	r1, #12752	@ 0x31d0
 8003e2a:	f00e fdf9 	bl	8012a20 <_ZdlPvj>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	bd10      	pop	{r4, pc}
	...

08003e34 <_ZN8touchgfx3BoxC1Ev>:
        : Widget(), alpha(255), color(0)
 8003e34:	4a09      	ldr	r2, [pc, #36]	@ (8003e5c <_ZN8touchgfx3BoxC1Ev+0x28>)
 8003e36:	6002      	str	r2, [r0, #0]
          touchable(false),
 8003e38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	8481      	strh	r1, [r0, #36]	@ 0x24
 8003e40:	21ff      	movs	r1, #255	@ 0xff
 8003e42:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003e46:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8003e4a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8003e4e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003e52:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
        : color(col)
 8003e56:	6282      	str	r2, [r0, #40]	@ 0x28
    }
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	0801574c 	.word	0x0801574c

08003e60 <_ZN11Screen2View8drawGridEv>:
        drawGrid();
        drawPreview();
    }
}

void Screen2View::drawGrid(){
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	void getBlockBounds(const BlockMatrix& block, int& minX, int& maxX, int& minY, int& maxY);
    const Grid& getGrid() const { return grid; }
    const BlockMatrix& getCurrentBlock() const { return currBlock; }
    int getBlockSize() const { return blockSize; }
    int getCurrX() const { return currX; }
 8003e64:	f8d0 8588 	ldr.w	r8, [r0, #1416]	@ 0x588
    int getCurrY() const { return currY; }
 8003e68:	f8d0 758c 	ldr.w	r7, [r0, #1420]	@ 0x58c
 8003e6c:	b089      	sub	sp, #36	@ 0x24
 8003e6e:	4604      	mov	r4, r0
    const BlockMatrix& getCurrentBlock() const { return currBlock; }
 8003e70:	f500 61a9 	add.w	r1, r0, #1352	@ 0x548
    const auto& block = engine.getCurrentBlock();
    int currX = engine.getCurrX();
    int currY = engine.getCurrY();

    //Vẽ lưới
    for (int y = 0; y < GRID_HEIGHT; ++y) {
 8003e74:	f500 7a09 	add.w	sl, r0, #548	@ 0x224
    int getCurrY() const { return currY; }
 8003e78:	2600      	movs	r6, #0
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003e7a:	19a5      	adds	r5, r4, r6
void Screen2View::drawGrid(){
 8003e7c:	46d3      	mov	fp, sl
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003e7e:	f04f 0900 	mov.w	r9, #0
            colBoxes[y][x].setColor(grid[y][x] ? Color::getColorFromRGB(255, 0, 255)
 8003e82:	f85b 2f04 	ldr.w	r2, [fp, #4]!
 8003e86:	9103      	str	r1, [sp, #12]
 8003e88:	2a00      	cmp	r2, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	f04f 427f 	moveq.w	r2, #4278190080	@ 0xff000000
 8003e90:	f46f 427f 	mvnne.w	r2, #65280	@ 0xff00
        color = newColor;
 8003e94:	f8c5 2610 	str.w	r2, [r5, #1552]	@ 0x610
                                               : Color::getColorFromRGB(0, 0, 0));
            colBoxes[y][x].invalidate();
 8003e98:	f8d5 25e8 	ldr.w	r2, [r5, #1512]	@ 0x5e8
 8003e9c:	f505 60bd 	add.w	r0, r5, #1512	@ 0x5e8
 8003ea0:	6952      	ldr	r2, [r2, #20]
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003ea2:	f109 0901 	add.w	r9, r9, #1
            colBoxes[y][x].invalidate();
 8003ea6:	4790      	blx	r2
        for (int x = 0; x < GRID_WIDTH; ++x) {
 8003ea8:	f1b9 0f0a 	cmp.w	r9, #10
 8003eac:	9903      	ldr	r1, [sp, #12]
 8003eae:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8003eb2:	f642 03a0 	movw	r3, #10400	@ 0x28a0
 8003eb6:	d1e4      	bne.n	8003e82 <_ZN11Screen2View8drawGridEv+0x22>
    for (int y = 0; y < GRID_HEIGHT; ++y) {
 8003eb8:	f506 7602 	add.w	r6, r6, #520	@ 0x208
 8003ebc:	429e      	cmp	r6, r3
 8003ebe:	f10a 0a28 	add.w	sl, sl, #40	@ 0x28
 8003ec2:	d1da      	bne.n	8003e7a <_ZN11Screen2View8drawGridEv+0x1a>
        }
    }

    // Vẽ block rơi
    int minX, maxX, minY, maxY;
    engine.getBlockBounds(block, minX, maxX, minY, maxY);
 8003ec4:	ab07      	add	r3, sp, #28
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	ab06      	add	r3, sp, #24
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	aa04      	add	r2, sp, #16
 8003ece:	ab05      	add	r3, sp, #20
 8003ed0:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 8003ed4:	f7fc fc65 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>
    for (int i = minY; i <= maxY; ++i)
 8003ed8:	9e06      	ldr	r6, [sp, #24]
 8003eda:	eb06 0907 	add.w	r9, r6, r7
 8003ede:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 8003ee2:	f506 66a9 	add.w	r6, r6, #1352	@ 0x548
 8003ee6:	f04f 0a34 	mov.w	sl, #52	@ 0x34
 8003eea:	f44f 7b02 	mov.w	fp, #520	@ 0x208
 8003eee:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8003ef2:	9a07      	ldr	r2, [sp, #28]
 8003ef4:	eba9 0307 	sub.w	r3, r9, r7
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	da02      	bge.n	8003f02 <_ZN11Screen2View8drawGridEv+0xa2>
                if (gx >= 0 && gx < GRID_WIDTH && gy >= 0 && gy < GRID_HEIGHT) {
                    colBoxes[gy][gx].setColor(Color::getColorFromRGB(255, 255, 0));
                    colBoxes[gy][gx].invalidate();
                }
            }
}
 8003efc:	b009      	add	sp, #36	@ 0x24
 8003efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int j = minX; j <= maxX; ++j)
 8003f02:	9b04      	ldr	r3, [sp, #16]
 8003f04:	fb0b f509 	mul.w	r5, fp, r9
 8003f08:	eb03 0208 	add.w	r2, r3, r8
 8003f0c:	fb0a 5502 	mla	r5, sl, r2, r5
 8003f10:	4425      	add	r5, r4
 8003f12:	9a05      	ldr	r2, [sp, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	da03      	bge.n	8003f20 <_ZN11Screen2View8drawGridEv+0xc0>
    for (int i = minY; i <= maxY; ++i)
 8003f18:	f109 0901 	add.w	r9, r9, #1
 8003f1c:	3610      	adds	r6, #16
 8003f1e:	e7e8      	b.n	8003ef2 <_ZN11Screen2View8drawGridEv+0x92>
            if (block[i][j]) {
 8003f20:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8003f24:	b192      	cbz	r2, 8003f4c <_ZN11Screen2View8drawGridEv+0xec>
                if (gx >= 0 && gx < GRID_WIDTH && gy >= 0 && gy < GRID_HEIGHT) {
 8003f26:	eb08 0203 	add.w	r2, r8, r3
 8003f2a:	2a09      	cmp	r2, #9
 8003f2c:	d80e      	bhi.n	8003f4c <_ZN11Screen2View8drawGridEv+0xec>
 8003f2e:	f1b9 0f13 	cmp.w	r9, #19
 8003f32:	d80b      	bhi.n	8003f4c <_ZN11Screen2View8drawGridEv+0xec>
                    colBoxes[gy][gx].invalidate();
 8003f34:	f8d5 25e8 	ldr.w	r2, [r5, #1512]	@ 0x5e8
 8003f38:	9303      	str	r3, [sp, #12]
 8003f3a:	f8c5 1610 	str.w	r1, [r5, #1552]	@ 0x610
 8003f3e:	6952      	ldr	r2, [r2, #20]
 8003f40:	f505 60bd 	add.w	r0, r5, #1512	@ 0x5e8
 8003f44:	4790      	blx	r2
 8003f46:	9b03      	ldr	r3, [sp, #12]
 8003f48:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
        for (int j = minX; j <= maxX; ++j)
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	3534      	adds	r5, #52	@ 0x34
 8003f50:	e7df      	b.n	8003f12 <_ZN11Screen2View8drawGridEv+0xb2>

08003f52 <_ZN11Screen2View11drawPreviewEv>:

void Screen2View::drawPreview() {
 8003f52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // Lấy khối tiếp theo
    TetrisEngine::BlockMatrix nextBlock;
    int nextBlockSize;
    engine.getNextBlock(nextBlock, nextBlockSize);
 8003f56:	f500 790a 	add.w	r9, r0, #552	@ 0x228
void Screen2View::drawPreview() {
 8003f5a:	b099      	sub	sp, #100	@ 0x64
 8003f5c:	4606      	mov	r6, r0
    engine.getNextBlock(nextBlock, nextBlockSize);
 8003f5e:	aa03      	add	r2, sp, #12
 8003f60:	a908      	add	r1, sp, #32
 8003f62:	4648      	mov	r0, r9
 8003f64:	f7fc fb84 	bl	8000670 <_ZNK12TetrisEngine12getNextBlockERSt5arrayIS0_IiLj4EELj4EERi>
 8003f68:	2700      	movs	r7, #0
 8003f6a:	f506 583a 	add.w	r8, r6, #11904	@ 0x2e80
 8003f6e:	f108 0808 	add.w	r8, r8, #8
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003f72:	46ba      	mov	sl, r7

    // Reset all previewBoxes to transparent state
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
 8003f74:	eb08 0507 	add.w	r5, r8, r7
void Screen2View::drawPreview() {
 8003f78:	2404      	movs	r4, #4
			previewBoxes[i][j].setAlpha(0);
			previewBoxes[i][j].invalidate();
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	f885 a026 	strb.w	sl, [r5, #38]	@ 0x26
 8003f80:	4628      	mov	r0, r5
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	4798      	blx	r3
		for (int j = 0; j < 4; ++j) {
 8003f86:	3c01      	subs	r4, #1
 8003f88:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8003f8c:	d1f5      	bne.n	8003f7a <_ZN11Screen2View11drawPreviewEv+0x28>
	for (int i = 0; i < 4; ++i) {
 8003f8e:	37d0      	adds	r7, #208	@ 0xd0
 8003f90:	f5b7 7f50 	cmp.w	r7, #832	@ 0x340
 8003f94:	d1ee      	bne.n	8003f74 <_ZN11Screen2View11drawPreviewEv+0x22>
		}
	}

    // Vẽ preview block
	int minX, maxX, minY, maxY;
	engine.getBlockBounds(nextBlock, minX, maxX, minY, maxY);
 8003f96:	ab07      	add	r3, sp, #28
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	ab06      	add	r3, sp, #24
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	4648      	mov	r0, r9
 8003fa0:	ab05      	add	r3, sp, #20
 8003fa2:	aa04      	add	r2, sp, #16
 8003fa4:	a908      	add	r1, sp, #32
 8003fa6:	f7fc fbfc 	bl	80007a2 <_ZN12TetrisEngine14getBlockBoundsERKSt5arrayIS0_IiLj4EELj4EERiS5_S5_S5_>

	for (int i = 0; i < 4; i++) {
 8003faa:	ad08      	add	r5, sp, #32
        color = newColor;
 8003fac:	f04f 0934 	mov.w	r9, #52	@ 0x34
 8003fb0:	f04f 0ad0 	mov.w	sl, #208	@ 0xd0
 8003fb4:	f642 6bb0 	movw	fp, #11952	@ 0x2eb0
    engine.getNextBlock(nextBlock, nextBlockSize);
 8003fb8:	46a8      	mov	r8, r5
		for (int j = 0; j < 4; j++) {
 8003fba:	2700      	movs	r7, #0
			if (nextBlock[i][j]) {
 8003fbc:	f858 3b04 	ldr.w	r3, [r8], #4
 8003fc0:	b1fb      	cbz	r3, 8004002 <_ZN11Screen2View11drawPreviewEv+0xb0>
				int px = j - minX;
 8003fc2:	9a04      	ldr	r2, [sp, #16]
 8003fc4:	1aba      	subs	r2, r7, r2
				int py = i - minY;
				if (px < 4 && py < 4) {
 8003fc6:	2a03      	cmp	r2, #3
 8003fc8:	dc1b      	bgt.n	8004002 <_ZN11Screen2View11drawPreviewEv+0xb0>
				int py = i - minY;
 8003fca:	9b06      	ldr	r3, [sp, #24]
 8003fcc:	1ae3      	subs	r3, r4, r3
				if (px < 4 && py < 4) {
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	dc17      	bgt.n	8004002 <_ZN11Screen2View11drawPreviewEv+0xb0>
 8003fd2:	fb09 f202 	mul.w	r2, r9, r2
 8003fd6:	fb0a f303 	mul.w	r3, sl, r3
 8003fda:	18d1      	adds	r1, r2, r3
 8003fdc:	4431      	add	r1, r6
 8003fde:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003fe2:	f841 000b 	str.w	r0, [r1, fp]
        alpha = newAlpha;
 8003fe6:	f642 60ae 	movw	r0, #11950	@ 0x2eae
 8003fea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8003fee:	f801 c000 	strb.w	ip, [r1, r0]
					previewBoxes[py][px].setColor(Color::getColorFromRGB(0, 255, 0));
					previewBoxes[py][px].setAlpha(255);
					previewBoxes[py][px].invalidate();
 8003ff2:	f642 6088 	movw	r0, #11912	@ 0x2e88
 8003ff6:	4403      	add	r3, r0
 8003ff8:	4413      	add	r3, r2
 8003ffa:	580a      	ldr	r2, [r1, r0]
 8003ffc:	18f0      	adds	r0, r6, r3
 8003ffe:	6952      	ldr	r2, [r2, #20]
 8004000:	4790      	blx	r2
		for (int j = 0; j < 4; j++) {
 8004002:	3701      	adds	r7, #1
 8004004:	2f04      	cmp	r7, #4
 8004006:	d1d9      	bne.n	8003fbc <_ZN11Screen2View11drawPreviewEv+0x6a>
	for (int i = 0; i < 4; i++) {
 8004008:	3401      	adds	r4, #1
 800400a:	2c04      	cmp	r4, #4
 800400c:	f105 0510 	add.w	r5, r5, #16
 8004010:	d1d2      	bne.n	8003fb8 <_ZN11Screen2View11drawPreviewEv+0x66>
				}
			}
		}
	}
}
 8004012:	b019      	add	sp, #100	@ 0x64
 8004014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004018 <_ZN11Screen2View15handleTickEventEv>:
{
 8004018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (++tickCount % 20 == 0) {
 800401c:	f500 5640 	add.w	r6, r0, #12288	@ 0x3000
 8004020:	2314      	movs	r3, #20
 8004022:	f8d6 51c8 	ldr.w	r5, [r6, #456]	@ 0x1c8
 8004026:	3501      	adds	r5, #1
 8004028:	f8c6 51c8 	str.w	r5, [r6, #456]	@ 0x1c8
 800402c:	fb95 f2f3 	sdiv	r2, r5, r3
 8004030:	fb03 5512 	mls	r5, r3, r2, r5
{
 8004034:	4604      	mov	r4, r0
    if (++tickCount % 20 == 0) {
 8004036:	2d00      	cmp	r5, #0
 8004038:	f040 80b3 	bne.w	80041a2 <_ZN11Screen2View15handleTickEventEv+0x18a>
		if(engine.isGameOver()) {	//kiểm tra gameover
 800403c:	f890 8594 	ldrb.w	r8, [r0, #1428]	@ 0x594
 8004040:	f1b8 0f00 	cmp.w	r8, #0
 8004044:	d154      	bne.n	80040f0 <_ZN11Screen2View15handleTickEventEv+0xd8>
    	if(osMessageQueueGetCount(movingQueueHandle) > 0){
 8004046:	4f58      	ldr	r7, [pc, #352]	@ (80041a8 <_ZN11Screen2View15handleTickEventEv+0x190>)
 8004048:	6838      	ldr	r0, [r7, #0]
 800404a:	f003 f937 	bl	80072bc <osMessageQueueGetCount>
 800404e:	f504 750a 	add.w	r5, r4, #552	@ 0x228
 8004052:	b1c0      	cbz	r0, 8004086 <_ZN11Screen2View15handleTickEventEv+0x6e>
    		osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 8004054:	230a      	movs	r3, #10
 8004056:	6838      	ldr	r0, [r7, #0]
 8004058:	4642      	mov	r2, r8
 800405a:	f10d 0107 	add.w	r1, sp, #7
 800405e:	f003 f8fd 	bl	800725c <osMessageQueueGet>
    		if(res == 'L') engine.moveLeft();
 8004062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004066:	2b52      	cmp	r3, #82	@ 0x52
 8004068:	f000 8093 	beq.w	8004192 <_ZN11Screen2View15handleTickEventEv+0x17a>
 800406c:	f200 8086 	bhi.w	800417c <_ZN11Screen2View15handleTickEventEv+0x164>
 8004070:	2b44      	cmp	r3, #68	@ 0x44
 8004072:	f000 8092 	beq.w	800419a <_ZN11Screen2View15handleTickEventEv+0x182>
 8004076:	2b4c      	cmp	r3, #76	@ 0x4c
 8004078:	f000 8087 	beq.w	800418a <_ZN11Screen2View15handleTickEventEv+0x172>
    		osThreadNew(SingleBeepTask, NULL, NULL);
 800407c:	2200      	movs	r2, #0
 800407e:	484b      	ldr	r0, [pc, #300]	@ (80041ac <_ZN11Screen2View15handleTickEventEv+0x194>)
 8004080:	4611      	mov	r1, r2
 8004082:	f002 ff82 	bl	8006f8a <osThreadNew>
        engine.update();
 8004086:	4628      	mov	r0, r5
 8004088:	f7fc fc62 	bl	8000950 <_ZN12TetrisEngine6updateEv>
        Unicode::snprintf(scoreBuffer, SCORE_SIZE, "%d", engine.getScore());
 800408c:	f8d4 3598 	ldr.w	r3, [r4, #1432]	@ 0x598
 8004090:	4a47      	ldr	r2, [pc, #284]	@ (80041b0 <_ZN11Screen2View15handleTickEventEv+0x198>)
 8004092:	210a      	movs	r1, #10
 8004094:	f504 7001 	add.w	r0, r4, #516	@ 0x204
 8004098:	f00b fd8a 	bl	800fbb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        score.invalidate();
 800409c:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 80040a0:	f009 fdfe 	bl	800dca0 <_ZNK8touchgfx8Drawable10invalidateEv>
        presenter->setHighestScore(engine.getScore());
 80040a4:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
 80040a8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80040aa:	f7ff fe7f 	bl	8003dac <_ZN16Screen2Presenter15setHighestScoreEi>
        if(engine.getTakeScore()){
 80040ae:	f894 359c 	ldrb.w	r3, [r4, #1436]	@ 0x59c
 80040b2:	b13b      	cbz	r3, 80040c4 <_ZN11Screen2View15handleTickEventEv+0xac>
        	osThreadNew(DoubleBeepTask, NULL, NULL);
 80040b4:	2200      	movs	r2, #0
 80040b6:	483f      	ldr	r0, [pc, #252]	@ (80041b4 <_ZN11Screen2View15handleTickEventEv+0x19c>)
 80040b8:	4611      	mov	r1, r2
 80040ba:	f002 ff66 	bl	8006f8a <osThreadNew>
    int getScore() const { return score; } 
    void setTakeScore(bool param) { takeScore = param; }
 80040be:	2300      	movs	r3, #0
 80040c0:	f884 359c 	strb.w	r3, [r4, #1436]	@ 0x59c
        if(engine.isGameOver() && gameOver == false){
 80040c4:	f894 3594 	ldrb.w	r3, [r4, #1428]	@ 0x594
 80040c8:	b14b      	cbz	r3, 80040de <_ZN11Screen2View15handleTickEventEv+0xc6>
 80040ca:	f896 21cc 	ldrb.w	r2, [r6, #460]	@ 0x1cc
 80040ce:	b932      	cbnz	r2, 80040de <_ZN11Screen2View15handleTickEventEv+0xc6>
        	gameOver = true;
 80040d0:	2301      	movs	r3, #1
        	osThreadNew(GameOverTask, NULL, NULL);
 80040d2:	4839      	ldr	r0, [pc, #228]	@ (80041b8 <_ZN11Screen2View15handleTickEventEv+0x1a0>)
        	gameOver = true;
 80040d4:	f886 31cc 	strb.w	r3, [r6, #460]	@ 0x1cc
        	osThreadNew(GameOverTask, NULL, NULL);
 80040d8:	4611      	mov	r1, r2
 80040da:	f002 ff56 	bl	8006f8a <osThreadNew>
        drawGrid();
 80040de:	4620      	mov	r0, r4
 80040e0:	f7ff febe 	bl	8003e60 <_ZN11Screen2View8drawGridEv>
        drawPreview();
 80040e4:	4620      	mov	r0, r4
}
 80040e6:	b003      	add	sp, #12
 80040e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawPreview();
 80040ec:	f7ff bf31 	b.w	8003f52 <_ZN11Screen2View11drawPreviewEv>
        visible = vis;
 80040f0:	46a8      	mov	r8, r5
			for(int y = 0; y < GRID_HEIGHT; y++) {
 80040f2:	f642 09a0 	movw	r9, #10400	@ 0x28a0
				for(int x = 0; x < GRID_WIDTH; x++) {
 80040f6:	192e      	adds	r6, r5, r4
 80040f8:	2700      	movs	r7, #0
					colBoxes[y][x].invalidate();
 80040fa:	f8d6 35e8 	ldr.w	r3, [r6, #1512]	@ 0x5e8
 80040fe:	f886 860d 	strb.w	r8, [r6, #1549]	@ 0x60d
 8004102:	f506 60bd 	add.w	r0, r6, #1512	@ 0x5e8
 8004106:	695b      	ldr	r3, [r3, #20]
				for(int x = 0; x < GRID_WIDTH; x++) {
 8004108:	3701      	adds	r7, #1
					colBoxes[y][x].invalidate();
 800410a:	4798      	blx	r3
				for(int x = 0; x < GRID_WIDTH; x++) {
 800410c:	2f0a      	cmp	r7, #10
 800410e:	f106 0634 	add.w	r6, r6, #52	@ 0x34
 8004112:	d1f2      	bne.n	80040fa <_ZN11Screen2View15handleTickEventEv+0xe2>
			for(int y = 0; y < GRID_HEIGHT; y++) {
 8004114:	f505 7502 	add.w	r5, r5, #520	@ 0x208
 8004118:	454d      	cmp	r5, r9
 800411a:	d1ec      	bne.n	80040f6 <_ZN11Screen2View15handleTickEventEv+0xde>
 800411c:	2600      	movs	r6, #0
 800411e:	f504 593a 	add.w	r9, r4, #11904	@ 0x2e80
 8004122:	f109 0908 	add.w	r9, r9, #8
 8004126:	4637      	mov	r7, r6
				for (int x = 0; x < 4; x++) {
 8004128:	eb09 0506 	add.w	r5, r9, r6
 800412c:	f04f 0800 	mov.w	r8, #0
					previewBoxes[y][x].invalidate();
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	f885 7025 	strb.w	r7, [r5, #37]	@ 0x25
 8004136:	4628      	mov	r0, r5
 8004138:	695b      	ldr	r3, [r3, #20]
				for (int x = 0; x < 4; x++) {
 800413a:	f108 0801 	add.w	r8, r8, #1
					previewBoxes[y][x].invalidate();
 800413e:	4798      	blx	r3
				for (int x = 0; x < 4; x++) {
 8004140:	f1b8 0f04 	cmp.w	r8, #4
 8004144:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 8004148:	d1f2      	bne.n	8004130 <_ZN11Screen2View15handleTickEventEv+0x118>
			for (int y = 0; y < 4; y++) {
 800414a:	36d0      	adds	r6, #208	@ 0xd0
 800414c:	f5b6 7f50 	cmp.w	r6, #832	@ 0x340
 8004150:	d1ea      	bne.n	8004128 <_ZN11Screen2View15handleTickEventEv+0x110>
 8004152:	2301      	movs	r3, #1
			track1.invalidate();
 8004154:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 8004158:	f884 7199 	strb.w	r7, [r4, #409]	@ 0x199
 800415c:	f884 71e1 	strb.w	r7, [r4, #481]	@ 0x1e1
 8004160:	f884 714d 	strb.w	r7, [r4, #333]	@ 0x14d
 8004164:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
 8004168:	f009 fd9a 	bl	800dca0 <_ZNK8touchgfx8Drawable10invalidateEv>
			presenter->setHighestScore(engine.getScore());
 800416c:	f8d4 1598 	ldr.w	r1, [r4, #1432]	@ 0x598
 8004170:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
}
 8004172:	b003      	add	sp, #12
 8004174:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			presenter->setHighestScore(engine.getScore());
 8004178:	f7ff be18 	b.w	8003dac <_ZN16Screen2Presenter15setHighestScoreEi>
 800417c:	2b54      	cmp	r3, #84	@ 0x54
 800417e:	f47f af7d 	bne.w	800407c <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'T') engine.rotate();
 8004182:	4628      	mov	r0, r5
 8004184:	f7fc fc48 	bl	8000a18 <_ZN12TetrisEngine6rotateEv>
 8004188:	e778      	b.n	800407c <_ZN11Screen2View15handleTickEventEv+0x64>
    		if(res == 'L') engine.moveLeft();
 800418a:	4628      	mov	r0, r5
 800418c:	f7fc fc02 	bl	8000994 <_ZN12TetrisEngine8moveLeftEv>
 8004190:	e774      	b.n	800407c <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'R') engine.moveRight();
 8004192:	4628      	mov	r0, r5
 8004194:	f7fc fc11 	bl	80009ba <_ZN12TetrisEngine9moveRightEv>
 8004198:	e770      	b.n	800407c <_ZN11Screen2View15handleTickEventEv+0x64>
    		else if(res == 'D') engine.drop();
 800419a:	4628      	mov	r0, r5
 800419c:	f7fc fc20 	bl	80009e0 <_ZN12TetrisEngine4dropEv>
 80041a0:	e76c      	b.n	800407c <_ZN11Screen2View15handleTickEventEv+0x64>
}
 80041a2:	b003      	add	sp, #12
 80041a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041a8:	20000118 	.word	0x20000118
 80041ac:	08000d5d 	.word	0x08000d5d
 80041b0:	080148d5 	.word	0x080148d5
 80041b4:	08000d91 	.word	0x08000d91
 80041b8:	08000e31 	.word	0x08000e31

080041bc <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	4604      	mov	r4, r0
 80041c2:	b089      	sub	sp, #36	@ 0x24
 80041c4:	f7ff fa3e 	bl	8003644 <_ZN15Screen2ViewBaseC1Ev>
 80041c8:	f504 553a 	add.w	r5, r4, #11904	@ 0x2e80
 80041cc:	4b54      	ldr	r3, [pc, #336]	@ (8004320 <_ZN11Screen2ViewC1Ev+0x164>)
 80041ce:	6023      	str	r3, [r4, #0]
 80041d0:	f504 700a 	add.w	r0, r4, #552	@ 0x228
 80041d4:	3508      	adds	r5, #8
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 80041d6:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 8004328 <_ZN11Screen2ViewC1Ev+0x16c>
 80041da:	f7fc faae 	bl	800073a <_ZN12TetrisEngineC1Ev>
 80041de:	f504 67bd 	add.w	r7, r4, #1512	@ 0x5e8
 80041e2:	9503      	str	r5, [sp, #12]
 80041e4:	f04f 0900 	mov.w	r9, #0
 80041e8:	463e      	mov	r6, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7ff fe22 	bl	8003e34 <_ZN8touchgfx3BoxC1Ev>
 80041f0:	3634      	adds	r6, #52	@ 0x34
 80041f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041f6:	f846 8c34 	str.w	r8, [r6, #-52]
 80041fa:	f846 9c08 	str.w	r9, [r6, #-8]
 80041fe:	f826 9c04 	strh.w	r9, [r6, #-4]
 8004202:	429e      	cmp	r6, r3
 8004204:	d1f1      	bne.n	80041ea <_ZN11Screen2ViewC1Ev+0x2e>
 8004206:	42ae      	cmp	r6, r5
 8004208:	4637      	mov	r7, r6
 800420a:	d1ed      	bne.n	80041e8 <_ZN11Screen2ViewC1Ev+0x2c>
 800420c:	f504 5647 	add.w	r6, r4, #12736	@ 0x31c0
 8004210:	3608      	adds	r6, #8
 8004212:	2700      	movs	r7, #0
 8004214:	f105 09d0 	add.w	r9, r5, #208	@ 0xd0
 8004218:	4628      	mov	r0, r5
 800421a:	f7ff fe0b 	bl	8003e34 <_ZN8touchgfx3BoxC1Ev>
 800421e:	3534      	adds	r5, #52	@ 0x34
 8004220:	f845 8c34 	str.w	r8, [r5, #-52]
 8004224:	f845 7c08 	str.w	r7, [r5, #-8]
 8004228:	f825 7c04 	strh.w	r7, [r5, #-4]
 800422c:	454d      	cmp	r5, r9
 800422e:	d1f3      	bne.n	8004218 <_ZN11Screen2ViewC1Ev+0x5c>
 8004230:	42b5      	cmp	r5, r6
 8004232:	d1ef      	bne.n	8004214 <_ZN11Screen2ViewC1Ev+0x58>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 8004234:	2700      	movs	r7, #0
 8004236:	f44f 7a02 	mov.w	sl, #520	@ 0x208
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 800423a:	f04f 4b7f 	mov.w	fp, #4278190080	@ 0xff000000
            colBoxes[y][x].setPosition(px, py, 16, 16);
 800423e:	013a      	lsls	r2, r7, #4
 8004240:	b212      	sxth	r2, r2
 8004242:	fb0a 4607 	mla	r6, sl, r7, r4
 8004246:	2500      	movs	r5, #0
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8004248:	f04f 0901 	mov.w	r9, #1
 800424c:	2310      	movs	r3, #16
 800424e:	f506 60bd 	add.w	r0, r6, #1512	@ 0x5e8
        borderColor = colorBorder;
 8004252:	f8c6 b614 	str.w	fp, [r6, #1556]	@ 0x614
        borderSize = size;
 8004256:	f8a6 9618 	strh.w	r9, [r6, #1560]	@ 0x618
 800425a:	b229      	sxth	r1, r5
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	9205      	str	r2, [sp, #20]
 8004260:	9004      	str	r0, [sp, #16]
 8004262:	f7fe fc6f 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004266:	9804      	ldr	r0, [sp, #16]
 8004268:	f886 960d 	strb.w	r9, [r6, #1549]	@ 0x60d
 800426c:	f104 0804 	add.w	r8, r4, #4
        for (int x = 0; x < GRID_WIDTH; x++) {
 8004270:	3510      	adds	r5, #16
 8004272:	4601      	mov	r1, r0
 8004274:	b2ad      	uxth	r5, r5
 8004276:	4640      	mov	r0, r8
 8004278:	f004 ffd8 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800427c:	2da0      	cmp	r5, #160	@ 0xa0
 800427e:	9a05      	ldr	r2, [sp, #20]
 8004280:	f106 0634 	add.w	r6, r6, #52	@ 0x34
 8004284:	d1e2      	bne.n	800424c <_ZN11Screen2ViewC1Ev+0x90>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 8004286:	3701      	adds	r7, #1
 8004288:	2f14      	cmp	r7, #20
 800428a:	d1d8      	bne.n	800423e <_ZN11Screen2ViewC1Ev+0x82>
 800428c:	2700      	movs	r7, #0
 800428e:	f04f 095a 	mov.w	r9, #90	@ 0x5a
 8004292:	46ba      	mov	sl, r7
 8004294:	f04f 0b01 	mov.w	fp, #1
		for (int x = 0; x < 4; x++) {
 8004298:	9b03      	ldr	r3, [sp, #12]
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 800429a:	fa0f f289 	sxth.w	r2, r9
 800429e:	19dd      	adds	r5, r3, r7
 80042a0:	26c8      	movs	r6, #200	@ 0xc8
 80042a2:	2308      	movs	r3, #8
 80042a4:	f885 a026 	strb.w	sl, [r5, #38]	@ 0x26
 80042a8:	f8a5 b030 	strh.w	fp, [r5, #48]	@ 0x30
 80042ac:	b231      	sxth	r1, r6
 80042ae:	4628      	mov	r0, r5
 80042b0:	9300      	str	r3, [sp, #0]
		for (int x = 0; x < 4; x++) {
 80042b2:	3608      	adds	r6, #8
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 80042b4:	9204      	str	r2, [sp, #16]
		for (int x = 0; x < 4; x++) {
 80042b6:	b2b6      	uxth	r6, r6
			previewBoxes[y][x].setPosition(px, py, 8, 8);
 80042b8:	f7fe fc44 	bl	8002b44 <_ZN8touchgfx8Drawable11setPositionEssss>
 80042bc:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80042c0:	4629      	mov	r1, r5
 80042c2:	4640      	mov	r0, r8
 80042c4:	f004 ffb2 	bl	800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>
		for (int x = 0; x < 4; x++) {
 80042c8:	2ee8      	cmp	r6, #232	@ 0xe8
 80042ca:	9a04      	ldr	r2, [sp, #16]
 80042cc:	f105 0534 	add.w	r5, r5, #52	@ 0x34
 80042d0:	d1e7      	bne.n	80042a2 <_ZN11Screen2ViewC1Ev+0xe6>
	for (int y = 0; y < 4; y++) {
 80042d2:	37d0      	adds	r7, #208	@ 0xd0
 80042d4:	f109 0908 	add.w	r9, r9, #8
 80042d8:	f5b7 7f50 	cmp.w	r7, #832	@ 0x340
 80042dc:	fa1f f989 	uxth.w	r9, r9
 80042e0:	d1da      	bne.n	8004298 <_ZN11Screen2ViewC1Ev+0xdc>
    gameOver = false;
 80042e2:	f504 5340 	add.w	r3, r4, #12288	@ 0x3000
 80042e6:	f884 a0bd 	strb.w	sl, [r4, #189]	@ 0xbd
    DF_SendCommand(0x0F, 0x02, 0x01);
 80042ea:	2201      	movs	r2, #1
    gameOver = false;
 80042ec:	f883 a1cc 	strb.w	sl, [r3, #460]	@ 0x1cc
    DF_SendCommand(0x0F, 0x02, 0x01);
 80042f0:	2102      	movs	r1, #2
 80042f2:	200f      	movs	r0, #15
 80042f4:	f7fc fd70 	bl	8000dd8 <DF_SendCommand>
    while(osMessageQueueGetCount(movingQueueHandle) > 0){
 80042f8:	4d0a      	ldr	r5, [pc, #40]	@ (8004324 <_ZN11Screen2ViewC1Ev+0x168>)
    	char res = 'a';
 80042fa:	2661      	movs	r6, #97	@ 0x61
    while(osMessageQueueGetCount(movingQueueHandle) > 0){
 80042fc:	6828      	ldr	r0, [r5, #0]
 80042fe:	f002 ffdd 	bl	80072bc <osMessageQueueGetCount>
 8004302:	b918      	cbnz	r0, 800430c <_ZN11Screen2ViewC1Ev+0x150>
}
 8004304:	4620      	mov	r0, r4
 8004306:	b009      	add	sp, #36	@ 0x24
 8004308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 800430c:	6828      	ldr	r0, [r5, #0]
    	char res = 'a';
 800430e:	f88d 601f 	strb.w	r6, [sp, #31]
    	osMessageQueueGet(movingQueueHandle, &res, NULL, 10);
 8004312:	230a      	movs	r3, #10
 8004314:	2200      	movs	r2, #0
 8004316:	f10d 011f 	add.w	r1, sp, #31
 800431a:	f002 ff9f 	bl	800725c <osMessageQueueGet>
 800431e:	e7ed      	b.n	80042fc <_ZN11Screen2ViewC1Ev+0x140>
 8004320:	08015570 	.word	0x08015570
 8004324:	20000118 	.word	0x20000118
 8004328:	08015828 	.word	0x08015828

0800432c <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 800432c:	20f0      	movs	r0, #240	@ 0xf0
 800432e:	4770      	bx	lr

08004330 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8004330:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8004334:	4770      	bx	lr

08004336 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8004336:	2029      	movs	r0, #41	@ 0x29
 8004338:	f7fc bcc0 	b.w	8000cbc <LCD_IO_WriteReg>

0800433c <ili9341_DisplayOff>:
 800433c:	2028      	movs	r0, #40	@ 0x28
 800433e:	f7fc bcbd 	b.w	8000cbc <LCD_IO_WriteReg>

08004342 <ili9341_Init>:
{
 8004342:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8004344:	f7fc fc8e 	bl	8000c64 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8004348:	20ca      	movs	r0, #202	@ 0xca
 800434a:	f7fc fcb7 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800434e:	20c3      	movs	r0, #195	@ 0xc3
 8004350:	f7fc fc98 	bl	8000c84 <LCD_IO_WriteData>
 8004354:	2008      	movs	r0, #8
 8004356:	f7fc fc95 	bl	8000c84 <LCD_IO_WriteData>
 800435a:	2050      	movs	r0, #80	@ 0x50
 800435c:	f7fc fc92 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004360:	20cf      	movs	r0, #207	@ 0xcf
 8004362:	f7fc fcab 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004366:	2000      	movs	r0, #0
 8004368:	f7fc fc8c 	bl	8000c84 <LCD_IO_WriteData>
 800436c:	20c1      	movs	r0, #193	@ 0xc1
 800436e:	f7fc fc89 	bl	8000c84 <LCD_IO_WriteData>
 8004372:	2030      	movs	r0, #48	@ 0x30
 8004374:	f7fc fc86 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004378:	20ed      	movs	r0, #237	@ 0xed
 800437a:	f7fc fc9f 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800437e:	2064      	movs	r0, #100	@ 0x64
 8004380:	f7fc fc80 	bl	8000c84 <LCD_IO_WriteData>
 8004384:	2003      	movs	r0, #3
 8004386:	f7fc fc7d 	bl	8000c84 <LCD_IO_WriteData>
 800438a:	2012      	movs	r0, #18
 800438c:	f7fc fc7a 	bl	8000c84 <LCD_IO_WriteData>
 8004390:	2081      	movs	r0, #129	@ 0x81
 8004392:	f7fc fc77 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004396:	20e8      	movs	r0, #232	@ 0xe8
 8004398:	f7fc fc90 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800439c:	2085      	movs	r0, #133	@ 0x85
 800439e:	f7fc fc71 	bl	8000c84 <LCD_IO_WriteData>
 80043a2:	2000      	movs	r0, #0
 80043a4:	f7fc fc6e 	bl	8000c84 <LCD_IO_WriteData>
 80043a8:	2078      	movs	r0, #120	@ 0x78
 80043aa:	f7fc fc6b 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80043ae:	20cb      	movs	r0, #203	@ 0xcb
 80043b0:	f7fc fc84 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043b4:	2039      	movs	r0, #57	@ 0x39
 80043b6:	f7fc fc65 	bl	8000c84 <LCD_IO_WriteData>
 80043ba:	202c      	movs	r0, #44	@ 0x2c
 80043bc:	f7fc fc62 	bl	8000c84 <LCD_IO_WriteData>
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7fc fc5f 	bl	8000c84 <LCD_IO_WriteData>
 80043c6:	2034      	movs	r0, #52	@ 0x34
 80043c8:	f7fc fc5c 	bl	8000c84 <LCD_IO_WriteData>
 80043cc:	2002      	movs	r0, #2
 80043ce:	f7fc fc59 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80043d2:	20f7      	movs	r0, #247	@ 0xf7
 80043d4:	f7fc fc72 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043d8:	2020      	movs	r0, #32
 80043da:	f7fc fc53 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80043de:	20ea      	movs	r0, #234	@ 0xea
 80043e0:	f7fc fc6c 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043e4:	2000      	movs	r0, #0
 80043e6:	f7fc fc4d 	bl	8000c84 <LCD_IO_WriteData>
 80043ea:	2000      	movs	r0, #0
 80043ec:	f7fc fc4a 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80043f0:	20b1      	movs	r0, #177	@ 0xb1
 80043f2:	f7fc fc63 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7fc fc44 	bl	8000c84 <LCD_IO_WriteData>
 80043fc:	201b      	movs	r0, #27
 80043fe:	f7fc fc41 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004402:	20b6      	movs	r0, #182	@ 0xb6
 8004404:	f7fc fc5a 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004408:	200a      	movs	r0, #10
 800440a:	f7fc fc3b 	bl	8000c84 <LCD_IO_WriteData>
 800440e:	20a2      	movs	r0, #162	@ 0xa2
 8004410:	f7fc fc38 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004414:	20c0      	movs	r0, #192	@ 0xc0
 8004416:	f7fc fc51 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800441a:	2010      	movs	r0, #16
 800441c:	f7fc fc32 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004420:	20c1      	movs	r0, #193	@ 0xc1
 8004422:	f7fc fc4b 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004426:	2010      	movs	r0, #16
 8004428:	f7fc fc2c 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800442c:	20c5      	movs	r0, #197	@ 0xc5
 800442e:	f7fc fc45 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004432:	2045      	movs	r0, #69	@ 0x45
 8004434:	f7fc fc26 	bl	8000c84 <LCD_IO_WriteData>
 8004438:	2015      	movs	r0, #21
 800443a:	f7fc fc23 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800443e:	20c7      	movs	r0, #199	@ 0xc7
 8004440:	f7fc fc3c 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004444:	2090      	movs	r0, #144	@ 0x90
 8004446:	f7fc fc1d 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800444a:	2036      	movs	r0, #54	@ 0x36
 800444c:	f7fc fc36 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004450:	20c8      	movs	r0, #200	@ 0xc8
 8004452:	f7fc fc17 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004456:	20f2      	movs	r0, #242	@ 0xf2
 8004458:	f7fc fc30 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800445c:	2000      	movs	r0, #0
 800445e:	f7fc fc11 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004462:	20b0      	movs	r0, #176	@ 0xb0
 8004464:	f7fc fc2a 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004468:	20c2      	movs	r0, #194	@ 0xc2
 800446a:	f7fc fc0b 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800446e:	20b6      	movs	r0, #182	@ 0xb6
 8004470:	f7fc fc24 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004474:	200a      	movs	r0, #10
 8004476:	f7fc fc05 	bl	8000c84 <LCD_IO_WriteData>
 800447a:	20a7      	movs	r0, #167	@ 0xa7
 800447c:	f7fc fc02 	bl	8000c84 <LCD_IO_WriteData>
 8004480:	2027      	movs	r0, #39	@ 0x27
 8004482:	f7fc fbff 	bl	8000c84 <LCD_IO_WriteData>
 8004486:	2004      	movs	r0, #4
 8004488:	f7fc fbfc 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800448c:	202a      	movs	r0, #42	@ 0x2a
 800448e:	f7fc fc15 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004492:	2000      	movs	r0, #0
 8004494:	f7fc fbf6 	bl	8000c84 <LCD_IO_WriteData>
 8004498:	2000      	movs	r0, #0
 800449a:	f7fc fbf3 	bl	8000c84 <LCD_IO_WriteData>
 800449e:	2000      	movs	r0, #0
 80044a0:	f7fc fbf0 	bl	8000c84 <LCD_IO_WriteData>
 80044a4:	20ef      	movs	r0, #239	@ 0xef
 80044a6:	f7fc fbed 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044aa:	202b      	movs	r0, #43	@ 0x2b
 80044ac:	f7fc fc06 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044b0:	2000      	movs	r0, #0
 80044b2:	f7fc fbe7 	bl	8000c84 <LCD_IO_WriteData>
 80044b6:	2000      	movs	r0, #0
 80044b8:	f7fc fbe4 	bl	8000c84 <LCD_IO_WriteData>
 80044bc:	2001      	movs	r0, #1
 80044be:	f7fc fbe1 	bl	8000c84 <LCD_IO_WriteData>
 80044c2:	203f      	movs	r0, #63	@ 0x3f
 80044c4:	f7fc fbde 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044c8:	20f6      	movs	r0, #246	@ 0xf6
 80044ca:	f7fc fbf7 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f7fc fbd8 	bl	8000c84 <LCD_IO_WriteData>
 80044d4:	2000      	movs	r0, #0
 80044d6:	f7fc fbd5 	bl	8000c84 <LCD_IO_WriteData>
 80044da:	2006      	movs	r0, #6
 80044dc:	f7fc fbd2 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044e0:	202c      	movs	r0, #44	@ 0x2c
 80044e2:	f7fc fbeb 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_Delay(200);
 80044e6:	20c8      	movs	r0, #200	@ 0xc8
 80044e8:	f7fc fc36 	bl	8000d58 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80044ec:	2026      	movs	r0, #38	@ 0x26
 80044ee:	f7fc fbe5 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044f2:	2001      	movs	r0, #1
 80044f4:	f7fc fbc6 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80044f8:	20e0      	movs	r0, #224	@ 0xe0
 80044fa:	f7fc fbdf 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80044fe:	200f      	movs	r0, #15
 8004500:	f7fc fbc0 	bl	8000c84 <LCD_IO_WriteData>
 8004504:	2029      	movs	r0, #41	@ 0x29
 8004506:	f7fc fbbd 	bl	8000c84 <LCD_IO_WriteData>
 800450a:	2024      	movs	r0, #36	@ 0x24
 800450c:	f7fc fbba 	bl	8000c84 <LCD_IO_WriteData>
 8004510:	200c      	movs	r0, #12
 8004512:	f7fc fbb7 	bl	8000c84 <LCD_IO_WriteData>
 8004516:	200e      	movs	r0, #14
 8004518:	f7fc fbb4 	bl	8000c84 <LCD_IO_WriteData>
 800451c:	2009      	movs	r0, #9
 800451e:	f7fc fbb1 	bl	8000c84 <LCD_IO_WriteData>
 8004522:	204e      	movs	r0, #78	@ 0x4e
 8004524:	f7fc fbae 	bl	8000c84 <LCD_IO_WriteData>
 8004528:	2078      	movs	r0, #120	@ 0x78
 800452a:	f7fc fbab 	bl	8000c84 <LCD_IO_WriteData>
 800452e:	203c      	movs	r0, #60	@ 0x3c
 8004530:	f7fc fba8 	bl	8000c84 <LCD_IO_WriteData>
 8004534:	2009      	movs	r0, #9
 8004536:	f7fc fba5 	bl	8000c84 <LCD_IO_WriteData>
 800453a:	2013      	movs	r0, #19
 800453c:	f7fc fba2 	bl	8000c84 <LCD_IO_WriteData>
 8004540:	2005      	movs	r0, #5
 8004542:	f7fc fb9f 	bl	8000c84 <LCD_IO_WriteData>
 8004546:	2017      	movs	r0, #23
 8004548:	f7fc fb9c 	bl	8000c84 <LCD_IO_WriteData>
 800454c:	2011      	movs	r0, #17
 800454e:	f7fc fb99 	bl	8000c84 <LCD_IO_WriteData>
 8004552:	2000      	movs	r0, #0
 8004554:	f7fc fb96 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004558:	20e1      	movs	r0, #225	@ 0xe1
 800455a:	f7fc fbaf 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800455e:	2000      	movs	r0, #0
 8004560:	f7fc fb90 	bl	8000c84 <LCD_IO_WriteData>
 8004564:	2016      	movs	r0, #22
 8004566:	f7fc fb8d 	bl	8000c84 <LCD_IO_WriteData>
 800456a:	201b      	movs	r0, #27
 800456c:	f7fc fb8a 	bl	8000c84 <LCD_IO_WriteData>
 8004570:	2004      	movs	r0, #4
 8004572:	f7fc fb87 	bl	8000c84 <LCD_IO_WriteData>
 8004576:	2011      	movs	r0, #17
 8004578:	f7fc fb84 	bl	8000c84 <LCD_IO_WriteData>
 800457c:	2007      	movs	r0, #7
 800457e:	f7fc fb81 	bl	8000c84 <LCD_IO_WriteData>
 8004582:	2031      	movs	r0, #49	@ 0x31
 8004584:	f7fc fb7e 	bl	8000c84 <LCD_IO_WriteData>
 8004588:	2033      	movs	r0, #51	@ 0x33
 800458a:	f7fc fb7b 	bl	8000c84 <LCD_IO_WriteData>
 800458e:	2042      	movs	r0, #66	@ 0x42
 8004590:	f7fc fb78 	bl	8000c84 <LCD_IO_WriteData>
 8004594:	2005      	movs	r0, #5
 8004596:	f7fc fb75 	bl	8000c84 <LCD_IO_WriteData>
 800459a:	200c      	movs	r0, #12
 800459c:	f7fc fb72 	bl	8000c84 <LCD_IO_WriteData>
 80045a0:	200a      	movs	r0, #10
 80045a2:	f7fc fb6f 	bl	8000c84 <LCD_IO_WriteData>
 80045a6:	2028      	movs	r0, #40	@ 0x28
 80045a8:	f7fc fb6c 	bl	8000c84 <LCD_IO_WriteData>
 80045ac:	202f      	movs	r0, #47	@ 0x2f
 80045ae:	f7fc fb69 	bl	8000c84 <LCD_IO_WriteData>
 80045b2:	200f      	movs	r0, #15
 80045b4:	f7fc fb66 	bl	8000c84 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80045b8:	2011      	movs	r0, #17
 80045ba:	f7fc fb7f 	bl	8000cbc <LCD_IO_WriteReg>
  LCD_Delay(200);
 80045be:	20c8      	movs	r0, #200	@ 0xc8
 80045c0:	f7fc fbca 	bl	8000d58 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80045c4:	2029      	movs	r0, #41	@ 0x29
 80045c6:	f7fc fb79 	bl	8000cbc <LCD_IO_WriteReg>
}
 80045ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 80045ce:	202c      	movs	r0, #44	@ 0x2c
 80045d0:	f7fc bb74 	b.w	8000cbc <LCD_IO_WriteReg>

080045d4 <ili9341_ReadID>:
{
 80045d4:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80045d6:	f7fc fb45 	bl	8000c64 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80045da:	2103      	movs	r1, #3
 80045dc:	20d3      	movs	r0, #211	@ 0xd3
 80045de:	f7fc fb89 	bl	8000cf4 <LCD_IO_ReadData>
}
 80045e2:	b280      	uxth	r0, r0
 80045e4:	bd08      	pop	{r3, pc}

080045e6 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80045e6:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80045e8:	b2c4      	uxtb	r4, r0
 80045ea:	2202      	movs	r2, #2
 80045ec:	2103      	movs	r1, #3
 80045ee:	4620      	mov	r0, r4
 80045f0:	f7fc faee 	bl	8000bd0 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80045f4:	200a      	movs	r0, #10
 80045f6:	f7fc fb33 	bl	8000c60 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80045fa:	4620      	mov	r0, r4
 80045fc:	2200      	movs	r2, #0
 80045fe:	2103      	movs	r1, #3
 8004600:	f7fc fae6 	bl	8000bd0 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 8004604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8004608:	2002      	movs	r0, #2
 800460a:	f7fc bb29 	b.w	8000c60 <IOE_Delay>

0800460e <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800460e:	b538      	push	{r3, r4, r5, lr}
 8004610:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004612:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8004614:	f7fc fada 	bl	8000bcc <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004618:	2100      	movs	r1, #0
 800461a:	4620      	mov	r0, r4
 800461c:	f7fc faf0 	bl	8000c00 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004620:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004622:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004624:	4620      	mov	r0, r4
 8004626:	f7fc faeb 	bl	8000c00 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800462a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 800462e:	b280      	uxth	r0, r0
 8004630:	bd38      	pop	{r3, r4, r5, pc}

08004632 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004632:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8004634:	b2c4      	uxtb	r4, r0
 8004636:	2140      	movs	r1, #64	@ 0x40
 8004638:	4620      	mov	r0, r4
 800463a:	f7fc fae1 	bl	8000c00 <IOE_Read>
  
  if(state > 0)
 800463e:	0603      	lsls	r3, r0, #24
 8004640:	d507      	bpl.n	8004652 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8004642:	214c      	movs	r1, #76	@ 0x4c
 8004644:	4620      	mov	r0, r4
 8004646:	f7fc fadb 	bl	8000c00 <IOE_Read>
 800464a:	3800      	subs	r0, #0
 800464c:	bf18      	it	ne
 800464e:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8004650:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004652:	2201      	movs	r2, #1
 8004654:	214b      	movs	r1, #75	@ 0x4b
 8004656:	4620      	mov	r0, r4
 8004658:	f7fc faba 	bl	8000bd0 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800465c:	4620      	mov	r0, r4
 800465e:	2200      	movs	r2, #0
 8004660:	214b      	movs	r1, #75	@ 0x4b
 8004662:	f7fc fab5 	bl	8000bd0 <IOE_Write>
  uint8_t ret = 0;
 8004666:	2000      	movs	r0, #0
 8004668:	e7f2      	b.n	8004650 <stmpe811_TS_DetectTouch+0x1e>

0800466a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800466a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800466c:	2304      	movs	r3, #4
 800466e:	b2c4      	uxtb	r4, r0
{
 8004670:	460e      	mov	r6, r1
 8004672:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8004674:	21d7      	movs	r1, #215	@ 0xd7
 8004676:	eb0d 0203 	add.w	r2, sp, r3
 800467a:	4620      	mov	r0, r4
 800467c:	f7fc fada 	bl	8000c34 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8004680:	9b01      	ldr	r3, [sp, #4]
 8004682:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8004684:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8004686:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800468a:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800468c:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800468e:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004690:	2201      	movs	r2, #1
 8004692:	214b      	movs	r1, #75	@ 0x4b
 8004694:	f7fc fa9c 	bl	8000bd0 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004698:	2200      	movs	r2, #0
 800469a:	214b      	movs	r1, #75	@ 0x4b
 800469c:	4620      	mov	r0, r4
 800469e:	f7fc fa97 	bl	8000bd0 <IOE_Write>
}
 80046a2:	b002      	add	sp, #8
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080046a8 <stmpe811_Init>:
{
 80046a8:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 80046aa:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <stmpe811_Init+0x2c>)
 80046ac:	7813      	ldrb	r3, [r2, #0]
 80046ae:	4298      	cmp	r0, r3
{
 80046b0:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 80046b2:	d00d      	beq.n	80046d0 <stmpe811_Init+0x28>
 80046b4:	7851      	ldrb	r1, [r2, #1]
 80046b6:	4288      	cmp	r0, r1
 80046b8:	d00a      	beq.n	80046d0 <stmpe811_Init+0x28>
 80046ba:	b10b      	cbz	r3, 80046c0 <stmpe811_Init+0x18>
 80046bc:	b941      	cbnz	r1, 80046d0 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80046be:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 80046c0:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 80046c2:	f7fc fa83 	bl	8000bcc <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 80046c6:	4620      	mov	r0, r4
}
 80046c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 80046cc:	f7ff bf8b 	b.w	80045e6 <stmpe811_Reset>
}
 80046d0:	bd10      	pop	{r4, pc}
 80046d2:	bf00      	nop
 80046d4:	200046d0 	.word	0x200046d0

080046d8 <stmpe811_EnableGlobalIT>:
{
 80046d8:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80046da:	b2c4      	uxtb	r4, r0
 80046dc:	2109      	movs	r1, #9
 80046de:	4620      	mov	r0, r4
 80046e0:	f7fc fa8e 	bl	8000c00 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80046e4:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	4620      	mov	r0, r4
 80046ec:	2109      	movs	r1, #9
}
 80046ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80046f2:	f7fc ba6d 	b.w	8000bd0 <IOE_Write>

080046f6 <stmpe811_DisableGlobalIT>:
{
 80046f6:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80046f8:	b2c4      	uxtb	r4, r0
 80046fa:	2109      	movs	r1, #9
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7fc fa7f 	bl	8000c00 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004702:	2109      	movs	r1, #9
 8004704:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8004708:	4620      	mov	r0, r4
}
 800470a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800470e:	f7fc ba5f 	b.w	8000bd0 <IOE_Write>

08004712 <stmpe811_EnableITSource>:
{
 8004712:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004714:	b2c4      	uxtb	r4, r0
{
 8004716:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004718:	4620      	mov	r0, r4
 800471a:	210a      	movs	r1, #10
 800471c:	f7fc fa70 	bl	8000c00 <IOE_Read>
  tmp |= Source; 
 8004720:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	4620      	mov	r0, r4
 8004728:	210a      	movs	r1, #10
}
 800472a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800472e:	f7fc ba4f 	b.w	8000bd0 <IOE_Write>

08004732 <stmpe811_TS_EnableIT>:
{
 8004732:	b510      	push	{r4, lr}
 8004734:	4604      	mov	r4, r0
  IOE_ITConfig();
 8004736:	f7fc fa4a 	bl	8000bce <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800473a:	4620      	mov	r0, r4
 800473c:	211f      	movs	r1, #31
 800473e:	f7ff ffe8 	bl	8004712 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004742:	4620      	mov	r0, r4
}
 8004744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004748:	f7ff bfc6 	b.w	80046d8 <stmpe811_EnableGlobalIT>

0800474c <stmpe811_DisableITSource>:
{
 800474c:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800474e:	b2c4      	uxtb	r4, r0
{
 8004750:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004752:	4620      	mov	r0, r4
 8004754:	210a      	movs	r1, #10
 8004756:	f7fc fa53 	bl	8000c00 <IOE_Read>
  tmp &= ~Source; 
 800475a:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	4620      	mov	r0, r4
 8004762:	210a      	movs	r1, #10
}
 8004764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004768:	f7fc ba32 	b.w	8000bd0 <IOE_Write>

0800476c <stmpe811_TS_DisableIT>:
{
 800476c:	b510      	push	{r4, lr}
 800476e:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004770:	f7ff ffc1 	bl	80046f6 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004774:	4620      	mov	r0, r4
 8004776:	211f      	movs	r1, #31
}
 8004778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800477c:	f7ff bfe6 	b.w	800474c <stmpe811_DisableITSource>

08004780 <stmpe811_ReadGITStatus>:
{
 8004780:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8004782:	b2c0      	uxtb	r0, r0
{
 8004784:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8004786:	210b      	movs	r1, #11
 8004788:	f7fc fa3a 	bl	8000c00 <IOE_Read>
}
 800478c:	4020      	ands	r0, r4
 800478e:	bd10      	pop	{r4, pc}

08004790 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8004790:	211f      	movs	r1, #31
 8004792:	f7ff bff5 	b.w	8004780 <stmpe811_ReadGITStatus>

08004796 <stmpe811_ClearGlobalIT>:
{
 8004796:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8004798:	b2c0      	uxtb	r0, r0
 800479a:	210b      	movs	r1, #11
 800479c:	f7fc ba18 	b.w	8000bd0 <IOE_Write>

080047a0 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80047a0:	211f      	movs	r1, #31
 80047a2:	f7ff bff8 	b.w	8004796 <stmpe811_ClearGlobalIT>

080047a6 <stmpe811_IO_EnableAF>:
{
 80047a6:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80047a8:	b2c4      	uxtb	r4, r0
{
 80047aa:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80047ac:	4620      	mov	r0, r4
 80047ae:	2117      	movs	r1, #23
 80047b0:	f7fc fa26 	bl	8000c00 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 80047b4:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	4620      	mov	r0, r4
 80047bc:	2117      	movs	r1, #23
}
 80047be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80047c2:	f7fc ba05 	b.w	8000bd0 <IOE_Write>

080047c6 <stmpe811_TS_Start>:
{
 80047c6:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80047c8:	b2c4      	uxtb	r4, r0
{
 80047ca:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80047cc:	2104      	movs	r1, #4
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7fc fa16 	bl	8000c00 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80047d4:	2104      	movs	r1, #4
 80047d6:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80047da:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80047dc:	4620      	mov	r0, r4
 80047de:	f7fc f9f7 	bl	8000bd0 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80047e2:	4630      	mov	r0, r6
 80047e4:	21f0      	movs	r1, #240	@ 0xf0
 80047e6:	f7ff ffde 	bl	80047a6 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80047ea:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 80047ee:	4620      	mov	r0, r4
 80047f0:	2104      	movs	r1, #4
 80047f2:	f7fc f9ed 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80047f6:	2249      	movs	r2, #73	@ 0x49
 80047f8:	2120      	movs	r1, #32
 80047fa:	4620      	mov	r0, r4
 80047fc:	f7fc f9e8 	bl	8000bd0 <IOE_Write>
  IOE_Delay(2); 
 8004800:	2002      	movs	r0, #2
 8004802:	f7fc fa2d 	bl	8000c60 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8004806:	4620      	mov	r0, r4
 8004808:	2201      	movs	r2, #1
 800480a:	2121      	movs	r1, #33	@ 0x21
 800480c:	f7fc f9e0 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8004810:	4620      	mov	r0, r4
 8004812:	229a      	movs	r2, #154	@ 0x9a
 8004814:	2141      	movs	r1, #65	@ 0x41
 8004816:	f7fc f9db 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800481a:	4620      	mov	r0, r4
 800481c:	2201      	movs	r2, #1
 800481e:	214a      	movs	r1, #74	@ 0x4a
 8004820:	f7fc f9d6 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004824:	4620      	mov	r0, r4
 8004826:	2201      	movs	r2, #1
 8004828:	214b      	movs	r1, #75	@ 0x4b
 800482a:	f7fc f9d1 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800482e:	4620      	mov	r0, r4
 8004830:	2200      	movs	r2, #0
 8004832:	214b      	movs	r1, #75	@ 0x4b
 8004834:	f7fc f9cc 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8004838:	4620      	mov	r0, r4
 800483a:	2201      	movs	r2, #1
 800483c:	2156      	movs	r1, #86	@ 0x56
 800483e:	f7fc f9c7 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8004842:	4620      	mov	r0, r4
 8004844:	2201      	movs	r2, #1
 8004846:	2158      	movs	r1, #88	@ 0x58
 8004848:	f7fc f9c2 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800484c:	4620      	mov	r0, r4
 800484e:	2201      	movs	r2, #1
 8004850:	2140      	movs	r1, #64	@ 0x40
 8004852:	f7fc f9bd 	bl	8000bd0 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8004856:	4620      	mov	r0, r4
 8004858:	22ff      	movs	r2, #255	@ 0xff
 800485a:	210b      	movs	r1, #11
 800485c:	f7fc f9b8 	bl	8000bd0 <IOE_Write>
}
 8004860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8004864:	2002      	movs	r0, #2
 8004866:	f7fc b9fb 	b.w	8000c60 <IOE_Delay>
	...

0800486c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800486c:	4b05      	ldr	r3, [pc, #20]	@ (8004884 <SystemInit+0x18>)
 800486e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004872:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8004876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800487a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800487e:	609a      	str	r2, [r3, #8]
#endif
}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004888:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <HAL_Init+0x30>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004892:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800489a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048a4:	2003      	movs	r0, #3
 80048a6:	f000 f82f 	bl	8004908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7fc ffb8 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048b0:	f7fc fd36 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80048b4:	2000      	movs	r0, #0
 80048b6:	bd08      	pop	{r3, pc}
 80048b8:	40023c00 	.word	0x40023c00

080048bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80048bc:	4a03      	ldr	r2, [pc, #12]	@ (80048cc <HAL_IncTick+0x10>)
 80048be:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <HAL_IncTick+0x14>)
 80048c0:	6811      	ldr	r1, [r2, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	440b      	add	r3, r1
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	200046d4 	.word	0x200046d4
 80048d0:	20000078 	.word	0x20000078

080048d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80048d4:	4b01      	ldr	r3, [pc, #4]	@ (80048dc <HAL_GetTick+0x8>)
 80048d6:	6818      	ldr	r0, [r3, #0]
}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	200046d4 	.word	0x200046d4

080048e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80048e4:	f7ff fff6 	bl	80048d4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048e8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80048ea:	bf1c      	itt	ne
 80048ec:	4b05      	ldrne	r3, [pc, #20]	@ (8004904 <HAL_Delay+0x24>)
 80048ee:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80048f0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80048f2:	bf18      	it	ne
 80048f4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048f6:	f7ff ffed 	bl	80048d4 <HAL_GetTick>
 80048fa:	1b43      	subs	r3, r0, r5
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	d3fa      	bcc.n	80048f6 <HAL_Delay+0x16>
  {
  }
}
 8004900:	bd38      	pop	{r3, r4, r5, pc}
 8004902:	bf00      	nop
 8004904:	20000078 	.word	0x20000078

08004908 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004908:	4907      	ldr	r1, [pc, #28]	@ (8004928 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800490a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800490c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004910:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004912:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004914:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004918:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800491a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800491c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004924:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800492c:	4b16      	ldr	r3, [pc, #88]	@ (8004988 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800492e:	b530      	push	{r4, r5, lr}
 8004930:	68dc      	ldr	r4, [r3, #12]
 8004932:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004936:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800493a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800493c:	2b04      	cmp	r3, #4
 800493e:	bf28      	it	cs
 8004940:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004942:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004944:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004948:	bf8c      	ite	hi
 800494a:	3c03      	subhi	r4, #3
 800494c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800494e:	fa05 f303 	lsl.w	r3, r5, r3
 8004952:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004956:	40a5      	lsls	r5, r4
 8004958:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800495c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800495e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004960:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004964:	bfac      	ite	ge
 8004966:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496a:	4a08      	ldrlt	r2, [pc, #32]	@ (800498c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004970:	bfb8      	it	lt
 8004972:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004976:	b2db      	uxtb	r3, r3
 8004978:	bfaa      	itet	ge
 800497a:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004980:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004984:	bd30      	pop	{r4, r5, pc}
 8004986:	bf00      	nop
 8004988:	e000ed00 	.word	0xe000ed00
 800498c:	e000ed14 	.word	0xe000ed14

08004990 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004990:	2800      	cmp	r0, #0
 8004992:	db07      	blt.n	80049a4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004994:	0941      	lsrs	r1, r0, #5
 8004996:	4a04      	ldr	r2, [pc, #16]	@ (80049a8 <HAL_NVIC_EnableIRQ+0x18>)
 8004998:	f000 001f 	and.w	r0, r0, #31
 800499c:	2301      	movs	r3, #1
 800499e:	4083      	lsls	r3, r0
 80049a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	e000e100 	.word	0xe000e100

080049ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80049ac:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80049ae:	4604      	mov	r4, r0
 80049b0:	b150      	cbz	r0, 80049c8 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80049b2:	7943      	ldrb	r3, [r0, #5]
 80049b4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80049b8:	b913      	cbnz	r3, 80049c0 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80049ba:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80049bc:	f7fc fcd0 	bl	8001360 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049c0:	2301      	movs	r3, #1
 80049c2:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80049c4:	2000      	movs	r0, #0
}
 80049c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80049c8:	2001      	movs	r0, #1
 80049ca:	e7fc      	b.n	80049c6 <HAL_CRC_Init+0x1a>

080049cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80049cc:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80049ce:	4604      	mov	r4, r0
 80049d0:	b320      	cbz	r0, 8004a1c <HAL_DMA2D_Init+0x50>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80049d2:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80049d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80049da:	b91b      	cbnz	r3, 80049e4 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80049dc:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80049e0:	f7fc fcd6 	bl	8001390 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049e4:	2302      	movs	r3, #2
 80049e6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	6861      	ldr	r1, [r4, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80049f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049fa:	68a1      	ldr	r1, [r4, #8]
 80049fc:	f022 0207 	bic.w	r2, r2, #7
 8004a00:	430a      	orrs	r2, r1
 8004a02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a06:	68e1      	ldr	r1, [r4, #12]
 8004a08:	f36f 020d 	bfc	r2, #0, #14
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a10:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a12:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a14:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a16:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8004a1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	e7fc      	b.n	8004a1a <HAL_DMA2D_Init+0x4e>

08004a20 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8004a20:	4770      	bx	lr

08004a22 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8004a22:	4770      	bx	lr

08004a24 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a24:	6803      	ldr	r3, [r0, #0]
{
 8004a26:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a28:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004a2a:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a2c:	07f2      	lsls	r2, r6, #31
{
 8004a2e:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a30:	d514      	bpl.n	8004a5c <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004a32:	05e9      	lsls	r1, r5, #23
 8004a34:	d512      	bpl.n	8004a5c <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a3c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004a46:	2201      	movs	r2, #1
 8004a48:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004a50:	2300      	movs	r3, #0
 8004a52:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004a56:	6943      	ldr	r3, [r0, #20]
 8004a58:	b103      	cbz	r3, 8004a5c <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004a5a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a5c:	06b2      	lsls	r2, r6, #26
 8004a5e:	d516      	bpl.n	8004a8e <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004a60:	04ab      	lsls	r3, r5, #18
 8004a62:	d514      	bpl.n	8004a8e <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004a6e:	2220      	movs	r2, #32
 8004a70:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004a80:	2300      	movs	r3, #0
 8004a82:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004a86:	6963      	ldr	r3, [r4, #20]
 8004a88:	b10b      	cbz	r3, 8004a8e <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a8e:	0730      	lsls	r0, r6, #28
 8004a90:	d516      	bpl.n	8004ac0 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a92:	0529      	lsls	r1, r5, #20
 8004a94:	d514      	bpl.n	8004ac0 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004aa4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004aa6:	f043 0304 	orr.w	r3, r3, #4
 8004aaa:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004aac:	2304      	movs	r3, #4
 8004aae:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004ab8:	6963      	ldr	r3, [r4, #20]
 8004aba:	b10b      	cbz	r3, 8004ac0 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8004abc:	4620      	mov	r0, r4
 8004abe:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ac0:	0772      	lsls	r2, r6, #29
 8004ac2:	d50b      	bpl.n	8004adc <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ac4:	056b      	lsls	r3, r5, #21
 8004ac6:	d509      	bpl.n	8004adc <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7ff ffa2 	bl	8004a20 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004adc:	07b0      	lsls	r0, r6, #30
 8004ade:	d514      	bpl.n	8004b0a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004ae0:	05a9      	lsls	r1, r5, #22
 8004ae2:	d512      	bpl.n	8004b0a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004aec:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004aee:	2202      	movs	r2, #2
 8004af0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004af2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004af4:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004afc:	2300      	movs	r3, #0
 8004afe:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	b10b      	cbz	r3, 8004b0a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8004b06:	4620      	mov	r0, r4
 8004b08:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004b0a:	06f2      	lsls	r2, r6, #27
 8004b0c:	d513      	bpl.n	8004b36 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004b0e:	04eb      	lsls	r3, r5, #19
 8004b10:	d511      	bpl.n	8004b36 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b22:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff ff76 	bl	8004a22 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004b36:	bd70      	pop	{r4, r5, r6, pc}

08004b38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b38:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b3a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8004b3e:	2a01      	cmp	r2, #1
{
 8004b40:	4603      	mov	r3, r0
 8004b42:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8004b46:	d02b      	beq.n	8004ba0 <HAL_DMA2D_ConfigLayer+0x68>
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b4e:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004b52:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8004b56:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8004b5a:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8004b5c:	4f17      	ldr	r7, [pc, #92]	@ (8004bbc <HAL_DMA2D_ConfigLayer+0x84>)
 8004b5e:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b62:	3c09      	subs	r4, #9
 8004b64:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004b66:	bf9c      	itt	ls
 8004b68:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8004b6c:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004b6e:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004b72:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004b74:	bf88      	it	hi
 8004b76:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004b7a:	b991      	cbnz	r1, 8004ba2 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004b7c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8004b7e:	4039      	ands	r1, r7
 8004b80:	4301      	orrs	r1, r0
 8004b82:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b84:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004b86:	6999      	ldr	r1, [r3, #24]
 8004b88:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b8a:	d803      	bhi.n	8004b94 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004b8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004b92:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b94:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b96:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8004b9c:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004ba2:	69d1      	ldr	r1, [r2, #28]
 8004ba4:	4039      	ands	r1, r7
 8004ba6:	4301      	orrs	r1, r0
 8004ba8:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004baa:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bac:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004bae:	6989      	ldr	r1, [r1, #24]
 8004bb0:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004bb2:	bf9c      	itt	ls
 8004bb4:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 8004bb8:	6215      	strls	r5, [r2, #32]
 8004bba:	e7eb      	b.n	8004b94 <HAL_DMA2D_ConfigLayer+0x5c>
 8004bbc:	00fcfff0 	.word	0x00fcfff0

08004bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc4:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004d84 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bc8:	4a6c      	ldr	r2, [pc, #432]	@ (8004d7c <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bca:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bcc:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8004bce:	2401      	movs	r4, #1
 8004bd0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bd2:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8004bd6:	43ac      	bics	r4, r5
 8004bd8:	f040 80b7 	bne.w	8004d4a <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bdc:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bde:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004be0:	f005 0403 	and.w	r4, r5, #3
 8004be4:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004be8:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bec:	1e67      	subs	r7, r4, #1
 8004bee:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bf0:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bf4:	d834      	bhi.n	8004c60 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8004bf6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bf8:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bfc:	68cf      	ldr	r7, [r1, #12]
 8004bfe:	fa07 f708 	lsl.w	r7, r7, r8
 8004c02:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004c06:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004c08:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c0a:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c0e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004c12:	409f      	lsls	r7, r3
 8004c14:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004c18:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004c1a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c1c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c20:	688f      	ldr	r7, [r1, #8]
 8004c22:	fa07 f708 	lsl.w	r7, r7, r8
 8004c26:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c2a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8004c2c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c2e:	d119      	bne.n	8004c64 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8004c30:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8004c34:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c38:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004c3c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c40:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004c44:	f04f 0e0f 	mov.w	lr, #15
 8004c48:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004c4c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c50:	690f      	ldr	r7, [r1, #16]
 8004c52:	fa07 f70b 	lsl.w	r7, r7, fp
 8004c56:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004c5a:	f8ca 7020 	str.w	r7, [sl, #32]
 8004c5e:	e001      	b.n	8004c64 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c60:	2c03      	cmp	r4, #3
 8004c62:	d1da      	bne.n	8004c1a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004c64:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c66:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c6a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c6e:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c70:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004c74:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c76:	d068      	beq.n	8004d4a <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c78:	2400      	movs	r4, #0
 8004c7a:	9401      	str	r4, [sp, #4]
 8004c7c:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004c80:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004c84:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8004c88:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004c8c:	f023 0703 	bic.w	r7, r3, #3
 8004c90:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004c94:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8004c98:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8004c9c:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c9e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004ca4:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ca8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004cac:	240f      	movs	r4, #15
 8004cae:	fa04 f40c 	lsl.w	r4, r4, ip
 8004cb2:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cb6:	4c32      	ldr	r4, [pc, #200]	@ (8004d80 <HAL_GPIO_Init+0x1c0>)
 8004cb8:	42a0      	cmp	r0, r4
 8004cba:	d04d      	beq.n	8004d58 <HAL_GPIO_Init+0x198>
 8004cbc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004cc0:	42a0      	cmp	r0, r4
 8004cc2:	d04b      	beq.n	8004d5c <HAL_GPIO_Init+0x19c>
 8004cc4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004cc8:	42a0      	cmp	r0, r4
 8004cca:	d049      	beq.n	8004d60 <HAL_GPIO_Init+0x1a0>
 8004ccc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004cd0:	42a0      	cmp	r0, r4
 8004cd2:	d047      	beq.n	8004d64 <HAL_GPIO_Init+0x1a4>
 8004cd4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	d045      	beq.n	8004d68 <HAL_GPIO_Init+0x1a8>
 8004cdc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004ce0:	42a0      	cmp	r0, r4
 8004ce2:	d043      	beq.n	8004d6c <HAL_GPIO_Init+0x1ac>
 8004ce4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004ce8:	42a0      	cmp	r0, r4
 8004cea:	d041      	beq.n	8004d70 <HAL_GPIO_Init+0x1b0>
 8004cec:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004cf0:	42a0      	cmp	r0, r4
 8004cf2:	d03f      	beq.n	8004d74 <HAL_GPIO_Init+0x1b4>
 8004cf4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004cf8:	42a0      	cmp	r0, r4
 8004cfa:	d03d      	beq.n	8004d78 <HAL_GPIO_Init+0x1b8>
 8004cfc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	bf14      	ite	ne
 8004d04:	240a      	movne	r4, #10
 8004d06:	2409      	moveq	r4, #9
 8004d08:	fa04 f40c 	lsl.w	r4, r4, ip
 8004d0c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d10:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8004d12:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004d14:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d16:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004d1a:	bf0c      	ite	eq
 8004d1c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004d1e:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8004d20:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004d22:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d24:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004d28:	bf0c      	ite	eq
 8004d2a:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004d2c:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8004d2e:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8004d30:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d32:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004d36:	bf0c      	ite	eq
 8004d38:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004d3a:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8004d3c:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d3e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d40:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8004d42:	bf54      	ite	pl
 8004d44:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004d46:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004d48:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	f47f af3d 	bne.w	8004bcc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004d52:	b003      	add	sp, #12
 8004d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d58:	2400      	movs	r4, #0
 8004d5a:	e7d5      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d5c:	2401      	movs	r4, #1
 8004d5e:	e7d3      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d60:	2402      	movs	r4, #2
 8004d62:	e7d1      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d64:	2403      	movs	r4, #3
 8004d66:	e7cf      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d68:	2404      	movs	r4, #4
 8004d6a:	e7cd      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d6c:	2405      	movs	r4, #5
 8004d6e:	e7cb      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d70:	2406      	movs	r4, #6
 8004d72:	e7c9      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d74:	2407      	movs	r4, #7
 8004d76:	e7c7      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d78:	2408      	movs	r4, #8
 8004d7a:	e7c5      	b.n	8004d08 <HAL_GPIO_Init+0x148>
 8004d7c:	40013c00 	.word	0x40013c00
 8004d80:	40020000 	.word	0x40020000
 8004d84:	40023800 	.word	0x40023800

08004d88 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d88:	6903      	ldr	r3, [r0, #16]
 8004d8a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004d8c:	bf14      	ite	ne
 8004d8e:	2001      	movne	r0, #1
 8004d90:	2000      	moveq	r0, #0
 8004d92:	4770      	bx	lr

08004d94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d94:	b10a      	cbz	r2, 8004d9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d96:	6181      	str	r1, [r0, #24]
  }
}
 8004d98:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d9a:	0409      	lsls	r1, r1, #16
 8004d9c:	e7fb      	b.n	8004d96 <HAL_GPIO_WritePin+0x2>

08004d9e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d9e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004da0:	ea01 0203 	and.w	r2, r1, r3
 8004da4:	ea21 0103 	bic.w	r1, r1, r3
 8004da8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004dac:	6181      	str	r1, [r0, #24]
}
 8004dae:	4770      	bx	lr

08004db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004db0:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004db2:	6951      	ldr	r1, [r2, #20]
 8004db4:	4201      	tst	r1, r0
{
 8004db6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004db8:	d002      	beq.n	8004dc0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dba:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dbc:	f7fc fa9e 	bl	80012fc <HAL_GPIO_EXTI_Callback>
  }
}
 8004dc0:	bd08      	pop	{r3, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40013c00 	.word	0x40013c00

08004dc8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	694b      	ldr	r3, [r1, #20]
 8004dcc:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	d010      	beq.n	8004df8 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd6:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004dda:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ddc:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dde:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004de0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de4:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004de8:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dea:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8004df4:	2001      	movs	r0, #1
 8004df6:	4770      	bx	lr
  }
  return HAL_OK;
 8004df8:	4618      	mov	r0, r3
}
 8004dfa:	4770      	bx	lr

08004dfc <I2C_WaitOnFlagUntilTimeout>:
{
 8004dfc:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004e00:	4606      	mov	r6, r0
 8004e02:	460f      	mov	r7, r1
 8004e04:	4691      	mov	r9, r2
 8004e06:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004e0c:	6833      	ldr	r3, [r6, #0]
 8004e0e:	f1ba 0f01 	cmp.w	sl, #1
 8004e12:	bf0c      	ite	eq
 8004e14:	695c      	ldreq	r4, [r3, #20]
 8004e16:	699c      	ldrne	r4, [r3, #24]
 8004e18:	ea27 0404 	bic.w	r4, r7, r4
 8004e1c:	b2a4      	uxth	r4, r4
 8004e1e:	fab4 f484 	clz	r4, r4
 8004e22:	0964      	lsrs	r4, r4, #5
 8004e24:	45a1      	cmp	r9, r4
 8004e26:	d001      	beq.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004e28:	2000      	movs	r0, #0
 8004e2a:	e017      	b.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	1c6a      	adds	r2, r5, #1
 8004e2e:	d0ee      	beq.n	8004e0e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e30:	f7ff fd50 	bl	80048d4 <HAL_GetTick>
 8004e34:	9b08      	ldr	r3, [sp, #32]
 8004e36:	1ac0      	subs	r0, r0, r3
 8004e38:	42a8      	cmp	r0, r5
 8004e3a:	d801      	bhi.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e3c:	2d00      	cmp	r5, #0
 8004e3e:	d1e5      	bne.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e40:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e42:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e44:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e46:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e4a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e4e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004e50:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e54:	f042 0220 	orr.w	r2, r2, #32
 8004e58:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8004e5a:	2001      	movs	r0, #1
}
 8004e5c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e64:	4604      	mov	r4, r0
 8004e66:	460f      	mov	r7, r1
 8004e68:	4616      	mov	r6, r2
 8004e6a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e6c:	6825      	ldr	r5, [r4, #0]
 8004e6e:	6968      	ldr	r0, [r5, #20]
 8004e70:	ea27 0000 	bic.w	r0, r7, r0
 8004e74:	b280      	uxth	r0, r0
 8004e76:	b1c0      	cbz	r0, 8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e78:	696b      	ldr	r3, [r5, #20]
 8004e7a:	055a      	lsls	r2, r3, #21
 8004e7c:	d517      	bpl.n	8004eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7e:	682b      	ldr	r3, [r5, #0]
 8004e80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e84:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e86:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004e8a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e8c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e92:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e96:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e9c:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004ea8:	2001      	movs	r0, #1
}
 8004eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004eae:	1c73      	adds	r3, r6, #1
 8004eb0:	d0dd      	beq.n	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7ff fd0f 	bl	80048d4 <HAL_GetTick>
 8004eb6:	eba0 0008 	sub.w	r0, r0, r8
 8004eba:	42b0      	cmp	r0, r6
 8004ebc:	d909      	bls.n	8004ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ecc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	e7e6      	b.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	d1ca      	bne.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 8004ed6:	e7f2      	b.n	8004ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08004ed8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4604      	mov	r4, r0
 8004edc:	460d      	mov	r5, r1
 8004ede:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	d501      	bpl.n	8004eec <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e018      	b.n	8004f1e <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff ff6b 	bl	8004dc8 <I2C_IsAcknowledgeFailed>
 8004ef2:	b998      	cbnz	r0, 8004f1c <I2C_WaitOnTXEFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8004ef4:	1c6a      	adds	r2, r5, #1
 8004ef6:	d0f3      	beq.n	8004ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef8:	f7ff fcec 	bl	80048d4 <HAL_GetTick>
 8004efc:	1b80      	subs	r0, r0, r6
 8004efe:	42a8      	cmp	r0, r5
 8004f00:	d90e      	bls.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f02:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f04:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f06:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f08:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004f12:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f16:	f042 0220 	orr.w	r2, r2, #32
 8004f1a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004f1c:	2001      	movs	r0, #1
}
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	d1dd      	bne.n	8004ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8004f24:	e7ed      	b.n	8004f02 <I2C_WaitOnTXEFlagUntilTimeout+0x2a>
	...

08004f28 <I2C_RequestMemoryWrite>:
{
 8004f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2e:	6802      	ldr	r2, [r0, #0]
{
 8004f30:	b085      	sub	sp, #20
 8004f32:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8004f36:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f38:	6813      	ldr	r3, [r2, #0]
 8004f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3e:	6013      	str	r3, [r2, #0]
{
 8004f40:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f42:	463b      	mov	r3, r7
 8004f44:	f8cd 8000 	str.w	r8, [sp]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004f4e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f50:	f7ff ff54 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	b138      	cbz	r0, 8004f68 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	05db      	lsls	r3, r3, #23
 8004f5c:	d502      	bpl.n	8004f64 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f62:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004f64:	2603      	movs	r6, #3
 8004f66:	e020      	b.n	8004faa <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f68:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004f6c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f6e:	491a      	ldr	r1, [pc, #104]	@ (8004fd8 <I2C_RequestMemoryWrite+0xb0>)
 8004f70:	4643      	mov	r3, r8
 8004f72:	463a      	mov	r2, r7
 8004f74:	4620      	mov	r0, r4
 8004f76:	f7ff ff73 	bl	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f7a:	b9a8      	cbnz	r0, 8004fa8 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	9003      	str	r0, [sp, #12]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	9203      	str	r2, [sp, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f88:	4642      	mov	r2, r8
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	f7ff ffa2 	bl	8004ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f94:	4606      	mov	r6, r0
 8004f96:	b160      	cbz	r0, 8004fb2 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f9a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9c:	bf01      	itttt	eq
 8004f9e:	6822      	ldreq	r2, [r4, #0]
 8004fa0:	6813      	ldreq	r3, [r2, #0]
 8004fa2:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004fa6:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004fa8:	2601      	movs	r6, #1
}
 8004faa:	4630      	mov	r0, r6
 8004fac:	b005      	add	sp, #20
 8004fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fb2:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fb8:	d102      	bne.n	8004fc0 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fba:	b2ed      	uxtb	r5, r5
 8004fbc:	611d      	str	r5, [r3, #16]
 8004fbe:	e7f4      	b.n	8004faa <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fc0:	0a2a      	lsrs	r2, r5, #8
 8004fc2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff ff85 	bl	8004ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d1e2      	bne.n	8004f98 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	e7f1      	b.n	8004fba <I2C_RequestMemoryWrite+0x92>
 8004fd6:	bf00      	nop
 8004fd8:	00010002 	.word	0x00010002

08004fdc <I2C_RequestMemoryRead>:
{
 8004fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe0:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe2:	6803      	ldr	r3, [r0, #0]
{
 8004fe4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fec:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fee:	681a      	ldr	r2, [r3, #0]
{
 8004ff0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ff8:	601a      	str	r2, [r3, #0]
{
 8004ffa:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	f8cd 8000 	str.w	r8, [sp]
 8005002:	2200      	movs	r2, #0
 8005004:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8005008:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800500a:	f7ff fef7 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	b138      	cbz	r0, 8005022 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005012:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005014:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005016:	bf44      	itt	mi
 8005018:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 800501c:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800501e:	2003      	movs	r0, #3
 8005020:	e021      	b.n	8005066 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005022:	fa5f f986 	uxtb.w	r9, r6
 8005026:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800502a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800502c:	492b      	ldr	r1, [pc, #172]	@ (80050dc <I2C_RequestMemoryRead+0x100>)
 800502e:	4643      	mov	r3, r8
 8005030:	463a      	mov	r2, r7
 8005032:	4620      	mov	r0, r4
 8005034:	f7ff ff14 	bl	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005038:	b9a0      	cbnz	r0, 8005064 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	9003      	str	r0, [sp, #12]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	9203      	str	r2, [sp, #12]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005046:	4642      	mov	r2, r8
 8005048:	4639      	mov	r1, r7
 800504a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	f7ff ff43 	bl	8004ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005052:	b158      	cbz	r0, 800506c <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005056:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005058:	bf01      	itttt	eq
 800505a:	6822      	ldreq	r2, [r4, #0]
 800505c:	6813      	ldreq	r3, [r2, #0]
 800505e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8005062:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8005064:	2001      	movs	r0, #1
}
 8005066:	b004      	add	sp, #16
 8005068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800506c:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005070:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005072:	d11a      	bne.n	80050aa <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005074:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005076:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005078:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800507a:	4639      	mov	r1, r7
 800507c:	4620      	mov	r0, r4
 800507e:	f7ff ff2b 	bl	8004ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005082:	4602      	mov	r2, r0
 8005084:	2800      	cmp	r0, #0
 8005086:	d1e5      	bne.n	8005054 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005088:	6821      	ldr	r1, [r4, #0]
 800508a:	680b      	ldr	r3, [r1, #0]
 800508c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005090:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005092:	4620      	mov	r0, r4
 8005094:	f8cd 8000 	str.w	r8, [sp]
 8005098:	463b      	mov	r3, r7
 800509a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800509e:	f7ff fead 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	b160      	cbz	r0, 80050c0 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	e7b4      	b.n	8005014 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050aa:	0a2a      	lsrs	r2, r5, #8
 80050ac:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ae:	4639      	mov	r1, r7
 80050b0:	4642      	mov	r2, r8
 80050b2:	4620      	mov	r0, r4
 80050b4:	f7ff ff10 	bl	8004ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d1cb      	bne.n	8005054 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	e7d9      	b.n	8005074 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050c0:	f049 0301 	orr.w	r3, r9, #1
 80050c4:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c6:	4905      	ldr	r1, [pc, #20]	@ (80050dc <I2C_RequestMemoryRead+0x100>)
 80050c8:	4643      	mov	r3, r8
 80050ca:	463a      	mov	r2, r7
 80050cc:	4620      	mov	r0, r4
 80050ce:	f7ff fec7 	bl	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d2:	3800      	subs	r0, #0
 80050d4:	bf18      	it	ne
 80050d6:	2001      	movne	r0, #1
 80050d8:	e7c5      	b.n	8005066 <I2C_RequestMemoryRead+0x8a>
 80050da:	bf00      	nop
 80050dc:	00010002 	.word	0x00010002

080050e0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	4604      	mov	r4, r0
 80050e4:	460d      	mov	r5, r1
 80050e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	075b      	lsls	r3, r3, #29
 80050ee:	d501      	bpl.n	80050f4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80050f0:	2000      	movs	r0, #0
 80050f2:	e018      	b.n	8005126 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050f4:	4620      	mov	r0, r4
 80050f6:	f7ff fe67 	bl	8004dc8 <I2C_IsAcknowledgeFailed>
 80050fa:	b998      	cbnz	r0, 8005124 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 80050fc:	1c6a      	adds	r2, r5, #1
 80050fe:	d0f3      	beq.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005100:	f7ff fbe8 	bl	80048d4 <HAL_GetTick>
 8005104:	1b80      	subs	r0, r0, r6
 8005106:	42a8      	cmp	r0, r5
 8005108:	d90e      	bls.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800510a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800510c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800510e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005110:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005114:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005118:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800511a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800511e:	f042 0220 	orr.w	r2, r2, #32
 8005122:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005124:	2001      	movs	r0, #1
}
 8005126:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005128:	2d00      	cmp	r5, #0
 800512a:	d1dd      	bne.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800512c:	e7ed      	b.n	800510a <I2C_WaitOnBTFFlagUntilTimeout+0x2a>

0800512e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800512e:	b570      	push	{r4, r5, r6, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	460d      	mov	r5, r1
 8005134:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005136:	6821      	ldr	r1, [r4, #0]
 8005138:	694b      	ldr	r3, [r1, #20]
 800513a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800513e:	d001      	beq.n	8005144 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005140:	2000      	movs	r0, #0
 8005142:	e011      	b.n	8005168 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005144:	694a      	ldr	r2, [r1, #20]
 8005146:	06d2      	lsls	r2, r2, #27
 8005148:	d50f      	bpl.n	800516a <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800514a:	f06f 0210 	mvn.w	r2, #16
 800514e:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005150:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005154:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005158:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800515c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800515e:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8005160:	2300      	movs	r3, #0
 8005162:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8005166:	2001      	movs	r0, #1
}
 8005168:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516a:	f7ff fbb3 	bl	80048d4 <HAL_GetTick>
 800516e:	1b80      	subs	r0, r0, r6
 8005170:	42a8      	cmp	r0, r5
 8005172:	d909      	bls.n	8005188 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005174:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005176:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005178:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800517a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005182:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005184:	4313      	orrs	r3, r2
 8005186:	e7ea      	b.n	800515e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005188:	2d00      	cmp	r5, #0
 800518a:	d1d4      	bne.n	8005136 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800518c:	e7f2      	b.n	8005174 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
	...

08005190 <HAL_I2C_Init>:
{
 8005190:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005192:	4604      	mov	r4, r0
 8005194:	b908      	cbnz	r0, 800519a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8005196:	2001      	movs	r0, #1
}
 8005198:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800519a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800519e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80051a2:	b91b      	cbnz	r3, 80051ac <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80051a4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80051a8:	f7fc f914 	bl	80013d4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ac:	2324      	movs	r3, #36	@ 0x24
 80051ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051ca:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051cc:	f000 fe66 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051d0:	4b3f      	ldr	r3, [pc, #252]	@ (80052d0 <HAL_I2C_Init+0x140>)
 80051d2:	6865      	ldr	r5, [r4, #4]
 80051d4:	429d      	cmp	r5, r3
 80051d6:	bf94      	ite	ls
 80051d8:	4b3e      	ldrls	r3, [pc, #248]	@ (80052d4 <HAL_I2C_Init+0x144>)
 80051da:	4b3f      	ldrhi	r3, [pc, #252]	@ (80052d8 <HAL_I2C_Init+0x148>)
 80051dc:	4298      	cmp	r0, r3
 80051de:	bf8c      	ite	hi
 80051e0:	2300      	movhi	r3, #0
 80051e2:	2301      	movls	r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1d6      	bne.n	8005196 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051ea:	4e39      	ldr	r6, [pc, #228]	@ (80052d0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051ec:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80051ee:	4b3b      	ldr	r3, [pc, #236]	@ (80052dc <HAL_I2C_Init+0x14c>)
 80051f0:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051f4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80051f8:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051fa:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051fc:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051fe:	bf88      	it	hi
 8005200:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8005204:	6a11      	ldr	r1, [r2, #32]
 8005206:	bf88      	it	hi
 8005208:	4373      	mulhi	r3, r6
 800520a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800520e:	bf84      	itt	hi
 8005210:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8005214:	fbb3 f3f6 	udivhi	r3, r3, r6
 8005218:	3301      	adds	r3, #1
 800521a:	430b      	orrs	r3, r1
 800521c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800521e:	69d1      	ldr	r1, [r2, #28]
 8005220:	1e43      	subs	r3, r0, #1
 8005222:	482b      	ldr	r0, [pc, #172]	@ (80052d0 <HAL_I2C_Init+0x140>)
 8005224:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8005228:	4285      	cmp	r5, r0
 800522a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800522e:	d832      	bhi.n	8005296 <HAL_I2C_Init+0x106>
 8005230:	006d      	lsls	r5, r5, #1
 8005232:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8005236:	fbb3 f3f5 	udiv	r3, r3, r5
 800523a:	3301      	adds	r3, #1
 800523c:	4203      	tst	r3, r0
 800523e:	d042      	beq.n	80052c6 <HAL_I2C_Init+0x136>
 8005240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005244:	4319      	orrs	r1, r3
 8005246:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005248:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800524c:	6811      	ldr	r1, [r2, #0]
 800524e:	4303      	orrs	r3, r0
 8005250:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8005254:	430b      	orrs	r3, r1
 8005256:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005258:	6891      	ldr	r1, [r2, #8]
 800525a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800525e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8005262:	4303      	orrs	r3, r0
 8005264:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005268:	430b      	orrs	r3, r1
 800526a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800526c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005270:	68d1      	ldr	r1, [r2, #12]
 8005272:	4303      	orrs	r3, r0
 8005274:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005278:	430b      	orrs	r3, r1
 800527a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800527c:	6813      	ldr	r3, [r2, #0]
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005284:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005286:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005288:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800528a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800528e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005294:	e780      	b.n	8005198 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005296:	68a0      	ldr	r0, [r4, #8]
 8005298:	b950      	cbnz	r0, 80052b0 <HAL_I2C_Init+0x120>
 800529a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800529e:	fbb3 f3f5 	udiv	r3, r3, r5
 80052a2:	3301      	adds	r3, #1
 80052a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a8:	b17b      	cbz	r3, 80052ca <HAL_I2C_Init+0x13a>
 80052aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ae:	e7c9      	b.n	8005244 <HAL_I2C_Init+0xb4>
 80052b0:	2019      	movs	r0, #25
 80052b2:	4368      	muls	r0, r5
 80052b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80052b8:	3301      	adds	r3, #1
 80052ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052be:	b123      	cbz	r3, 80052ca <HAL_I2C_Init+0x13a>
 80052c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052c4:	e7be      	b.n	8005244 <HAL_I2C_Init+0xb4>
 80052c6:	2304      	movs	r3, #4
 80052c8:	e7bc      	b.n	8005244 <HAL_I2C_Init+0xb4>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e7ba      	b.n	8005244 <HAL_I2C_Init+0xb4>
 80052ce:	bf00      	nop
 80052d0:	000186a0 	.word	0x000186a0
 80052d4:	001e847f 	.word	0x001e847f
 80052d8:	003d08ff 	.word	0x003d08ff
 80052dc:	000f4240 	.word	0x000f4240

080052e0 <HAL_I2C_Mem_Write>:
{
 80052e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052e4:	4604      	mov	r4, r0
 80052e6:	4699      	mov	r9, r3
 80052e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052ea:	460f      	mov	r7, r1
 80052ec:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80052ee:	f7ff faf1 	bl	80048d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80052f6:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80052f8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fa:	d003      	beq.n	8005304 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80052fc:	2002      	movs	r0, #2
}
 80052fe:	b003      	add	sp, #12
 8005300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005304:	9000      	str	r0, [sp, #0]
 8005306:	493c      	ldr	r1, [pc, #240]	@ (80053f8 <HAL_I2C_Mem_Write+0x118>)
 8005308:	2319      	movs	r3, #25
 800530a:	2201      	movs	r2, #1
 800530c:	4620      	mov	r0, r4
 800530e:	f7ff fd75 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8005312:	2800      	cmp	r0, #0
 8005314:	d1f2      	bne.n	80052fc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005316:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800531a:	2b01      	cmp	r3, #1
 800531c:	d0ee      	beq.n	80052fc <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800531e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005320:	2301      	movs	r3, #1
 8005322:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005326:	6803      	ldr	r3, [r0, #0]
 8005328:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800532a:	bf5e      	ittt	pl
 800532c:	6803      	ldrpl	r3, [r0, #0]
 800532e:	f043 0301 	orrpl.w	r3, r3, #1
 8005332:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005334:	6803      	ldr	r3, [r0, #0]
 8005336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800533a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800533c:	2321      	movs	r3, #33	@ 0x21
 800533e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005342:	2340      	movs	r3, #64	@ 0x40
 8005344:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005348:	2300      	movs	r3, #0
 800534a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800534c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800534e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005350:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8005354:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005356:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005358:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800535a:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <HAL_I2C_Mem_Write+0x11c>)
 800535c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800535e:	4642      	mov	r2, r8
 8005360:	e9cd 6500 	strd	r6, r5, [sp]
 8005364:	464b      	mov	r3, r9
 8005366:	4639      	mov	r1, r7
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff fddd 	bl	8004f28 <I2C_RequestMemoryWrite>
 800536e:	2800      	cmp	r0, #0
 8005370:	d02a      	beq.n	80053c8 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8005372:	2001      	movs	r0, #1
 8005374:	e7c3      	b.n	80052fe <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005376:	f7ff fdaf 	bl	8004ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 800537a:	b140      	cbz	r0, 800538e <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800537e:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005380:	bf01      	itttt	eq
 8005382:	6822      	ldreq	r2, [r4, #0]
 8005384:	6813      	ldreq	r3, [r2, #0]
 8005386:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800538a:	6013      	streq	r3, [r2, #0]
 800538c:	e7f1      	b.n	8005372 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800538e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005390:	6827      	ldr	r7, [r4, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005398:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800539a:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800539c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800539e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80053a0:	3a01      	subs	r2, #1
 80053a2:	b292      	uxth	r2, r2
 80053a4:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053a6:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80053a8:	1e48      	subs	r0, r1, #1
 80053aa:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053ac:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80053ae:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053b0:	d50a      	bpl.n	80053c8 <HAL_I2C_Mem_Write+0xe8>
 80053b2:	b148      	cbz	r0, 80053c8 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053b4:	785a      	ldrb	r2, [r3, #1]
 80053b6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80053b8:	3302      	adds	r3, #2
 80053ba:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80053bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80053be:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80053c0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80053c2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80053c4:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80053c6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053c8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ca:	462a      	mov	r2, r5
 80053cc:	4631      	mov	r1, r6
 80053ce:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1d0      	bne.n	8005376 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d4:	f7ff fe84 	bl	80050e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d1cf      	bne.n	800537c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053dc:	6822      	ldr	r2, [r4, #0]
 80053de:	6813      	ldr	r3, [r2, #0]
 80053e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053e4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80053e6:	2320      	movs	r3, #32
 80053e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80053ec:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80053f4:	e783      	b.n	80052fe <HAL_I2C_Mem_Write+0x1e>
 80053f6:	bf00      	nop
 80053f8:	00100002 	.word	0x00100002
 80053fc:	ffff0000 	.word	0xffff0000

08005400 <HAL_I2C_Mem_Read>:
{
 8005400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005404:	4604      	mov	r4, r0
 8005406:	b087      	sub	sp, #28
 8005408:	4699      	mov	r9, r3
 800540a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800540c:	460d      	mov	r5, r1
 800540e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005410:	f7ff fa60 	bl	80048d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005414:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005418:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800541a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800541c:	d004      	beq.n	8005428 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 800541e:	2502      	movs	r5, #2
}
 8005420:	4628      	mov	r0, r5
 8005422:	b007      	add	sp, #28
 8005424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005428:	9000      	str	r0, [sp, #0]
 800542a:	4976      	ldr	r1, [pc, #472]	@ (8005604 <HAL_I2C_Mem_Read+0x204>)
 800542c:	2319      	movs	r3, #25
 800542e:	2201      	movs	r2, #1
 8005430:	4620      	mov	r0, r4
 8005432:	f7ff fce3 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8005436:	2800      	cmp	r0, #0
 8005438:	d1f1      	bne.n	800541e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800543a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d0ed      	beq.n	800541e <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005442:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005444:	2301      	movs	r3, #1
 8005446:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544a:	6803      	ldr	r3, [r0, #0]
 800544c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800544e:	bf5e      	ittt	pl
 8005450:	6803      	ldrpl	r3, [r0, #0]
 8005452:	f043 0301 	orrpl.w	r3, r3, #1
 8005456:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005458:	6803      	ldr	r3, [r0, #0]
 800545a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800545e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005460:	2322      	movs	r3, #34	@ 0x22
 8005462:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005466:	2340      	movs	r3, #64	@ 0x40
 8005468:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800546c:	2300      	movs	r3, #0
 800546e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005472:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005474:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8005478:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800547a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800547c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800547e:	4b62      	ldr	r3, [pc, #392]	@ (8005608 <HAL_I2C_Mem_Read+0x208>)
 8005480:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005482:	4629      	mov	r1, r5
 8005484:	e9cd 7600 	strd	r7, r6, [sp]
 8005488:	464b      	mov	r3, r9
 800548a:	4642      	mov	r2, r8
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff fda5 	bl	8004fdc <I2C_RequestMemoryRead>
 8005492:	4605      	mov	r5, r0
 8005494:	b108      	cbz	r0, 800549a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8005496:	2501      	movs	r5, #1
 8005498:	e7c2      	b.n	8005420 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800549a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800549e:	b9b2      	cbnz	r2, 80054ce <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a0:	9002      	str	r0, [sp, #8]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	9202      	str	r2, [sp, #8]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	9202      	str	r2, [sp, #8]
 80054aa:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054b2:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054b4:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 800560c <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80054b8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d12c      	bne.n	8005518 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80054be:	2220      	movs	r2, #32
 80054c0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80054c4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80054cc:	e7a8      	b.n	8005420 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80054ce:	2a01      	cmp	r2, #1
 80054d0:	d10a      	bne.n	80054e8 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054da:	9003      	str	r0, [sp, #12]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	9203      	str	r2, [sp, #12]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	9203      	str	r2, [sp, #12]
 80054e4:	9a03      	ldr	r2, [sp, #12]
 80054e6:	e7e1      	b.n	80054ac <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80054e8:	2a02      	cmp	r2, #2
 80054ea:	d10e      	bne.n	800550a <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054fa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054fc:	9004      	str	r0, [sp, #16]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	9204      	str	r2, [sp, #16]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	9304      	str	r3, [sp, #16]
 8005506:	9b04      	ldr	r3, [sp, #16]
 8005508:	e7d4      	b.n	80054b4 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550a:	9005      	str	r0, [sp, #20]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	9205      	str	r2, [sp, #20]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	9305      	str	r3, [sp, #20]
 8005514:	9b05      	ldr	r3, [sp, #20]
 8005516:	e7cd      	b.n	80054b4 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8005518:	2b03      	cmp	r3, #3
 800551a:	d856      	bhi.n	80055ca <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 800551c:	2b01      	cmp	r3, #1
 800551e:	d115      	bne.n	800554c <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005520:	4632      	mov	r2, r6
 8005522:	4639      	mov	r1, r7
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff fe02 	bl	800512e <I2C_WaitOnRXNEFlagUntilTimeout>
 800552a:	2800      	cmp	r0, #0
 800552c:	d1b3      	bne.n	8005496 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005534:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005536:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005538:	3301      	adds	r3, #1
 800553a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800553c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800553e:	3b01      	subs	r3, #1
 8005540:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005542:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005544:	3b01      	subs	r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800554a:	e7b5      	b.n	80054b8 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 800554c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800554e:	9600      	str	r6, [sp, #0]
 8005550:	463b      	mov	r3, r7
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	4641      	mov	r1, r8
 8005558:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800555a:	d119      	bne.n	8005590 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800555c:	f7ff fc4e 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8005560:	2800      	cmp	r0, #0
 8005562:	d198      	bne.n	8005496 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005572:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005574:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005576:	1c53      	adds	r3, r2, #1
 8005578:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800557a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800557c:	3b01      	subs	r3, #1
 800557e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005580:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005582:	3b01      	subs	r3, #1
 8005584:	b29b      	uxth	r3, r3
 8005586:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005588:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	7053      	strb	r3, [r2, #1]
 800558e:	e7d2      	b.n	8005536 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005590:	f7ff fc34 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8005594:	4602      	mov	r2, r0
 8005596:	2800      	cmp	r0, #0
 8005598:	f47f af7d 	bne.w	8005496 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80055a4:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a6:	6919      	ldr	r1, [r3, #16]
 80055a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055aa:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80055ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055ae:	3301      	adds	r3, #1
 80055b0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80055b2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80055b4:	3b01      	subs	r3, #1
 80055b6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80055b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055c0:	4641      	mov	r1, r8
 80055c2:	9600      	str	r6, [sp, #0]
 80055c4:	463b      	mov	r3, r7
 80055c6:	4620      	mov	r0, r4
 80055c8:	e7c8      	b.n	800555c <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ca:	4632      	mov	r2, r6
 80055cc:	4639      	mov	r1, r7
 80055ce:	4620      	mov	r0, r4
 80055d0:	f7ff fdad 	bl	800512e <I2C_WaitOnRXNEFlagUntilTimeout>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f47f af5e 	bne.w	8005496 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80055e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80055e4:	1c53      	adds	r3, r2, #1
 80055e6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80055e8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80055ea:	3b01      	subs	r3, #1
 80055ec:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80055ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	6959      	ldr	r1, [r3, #20]
 80055fa:	0749      	lsls	r1, r1, #29
 80055fc:	f57f af5c 	bpl.w	80054b8 <HAL_I2C_Mem_Read+0xb8>
 8005600:	e7c3      	b.n	800558a <HAL_I2C_Mem_Read+0x18a>
 8005602:	bf00      	nop
 8005604:	00100002 	.word	0x00100002
 8005608:	ffff0000 	.word	0xffff0000
 800560c:	00010004 	.word	0x00010004

08005610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005610:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005612:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005616:	2b20      	cmp	r3, #32
 8005618:	b2dc      	uxtb	r4, r3
 800561a:	d116      	bne.n	800564a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800561c:	2324      	movs	r3, #36	@ 0x24
 800561e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005622:	6803      	ldr	r3, [r0, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800562c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800562e:	f022 0210 	bic.w	r2, r2, #16
 8005632:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005636:	4311      	orrs	r1, r2
 8005638:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005642:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8005646:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005648:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800564a:	2002      	movs	r0, #2
 800564c:	e7fc      	b.n	8005648 <HAL_I2CEx_ConfigAnalogFilter+0x38>

0800564e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800564e:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005650:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005654:	2b20      	cmp	r3, #32
 8005656:	b2dc      	uxtb	r4, r3
 8005658:	d116      	bne.n	8005688 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800565a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800565c:	2324      	movs	r3, #36	@ 0x24
 800565e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800566a:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800566c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005670:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005672:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005674:	b29b      	uxth	r3, r3
 8005676:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005678:	6813      	ldr	r3, [r2, #0]
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005680:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8005684:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005686:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8005688:	2002      	movs	r0, #2
 800568a:	e7fc      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x38>

0800568c <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800568c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800568e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005692:	01d2      	lsls	r2, r2, #7
 8005694:	3284      	adds	r2, #132	@ 0x84
 8005696:	1883      	adds	r3, r0, r2
{
 8005698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800569c:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800569e:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80056a0:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80056a2:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80056a6:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80056aa:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056ac:	68c5      	ldr	r5, [r0, #12]
 80056ae:	f10c 0701 	add.w	r7, ip, #1
 80056b2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80056b6:	f3c6 460b 	ubfx	r6, r6, #16, #12
 80056ba:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056bc:	443d      	add	r5, r7
 80056be:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80056c2:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056c4:	68c6      	ldr	r6, [r0, #12]
 80056c6:	68cd      	ldr	r5, [r1, #12]
 80056c8:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80056cc:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056ce:	689d      	ldr	r5, [r3, #8]
 80056d0:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80056d4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80056d6:	68c7      	ldr	r7, [r0, #12]
 80056d8:	688d      	ldr	r5, [r1, #8]
 80056da:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80056de:	3501      	adds	r5, #1
 80056e0:	443d      	add	r5, r7
 80056e2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80056e6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80056e8:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80056ea:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80056ec:	f025 0507 	bic.w	r5, r5, #7
 80056f0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80056f2:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80056f6:	611e      	str	r6, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80056f8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80056fc:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80056fe:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005702:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005706:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800570a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800570e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005712:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005716:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005718:	695d      	ldr	r5, [r3, #20]
 800571a:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800571e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005720:	694d      	ldr	r5, [r1, #20]
 8005722:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005724:	69dd      	ldr	r5, [r3, #28]
 8005726:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800572a:	f025 0507 	bic.w	r5, r5, #7
 800572e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005730:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005734:	433d      	orrs	r5, r7
 8005736:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005738:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800573a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800573c:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005740:	2e07      	cmp	r6, #7
 8005742:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005744:	bf9c      	itt	ls
 8005746:	4d0e      	ldrls	r5, [pc, #56]	@ (8005780 <LTDC_SetConfig+0xf4>)
 8005748:	5dae      	ldrbls	r6, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800574a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800574c:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 8005750:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005752:	bf88      	it	hi
 8005754:	2601      	movhi	r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005756:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005758:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800575a:	eba4 040c 	sub.w	r4, r4, ip
 800575e:	4374      	muls	r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005760:	4375      	muls	r5, r6
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005762:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005764:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005768:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800576a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800576c:	f36f 040a 	bfc	r4, #0, #11
 8005770:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005772:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005774:	5883      	ldr	r3, [r0, r2]
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	5083      	str	r3, [r0, r2]
}
 800577c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005780:	080155b8 	.word	0x080155b8

08005784 <HAL_LTDC_Init>:
{
 8005784:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005786:	4604      	mov	r4, r0
 8005788:	2800      	cmp	r0, #0
 800578a:	d063      	beq.n	8005854 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800578c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8005790:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005794:	b91b      	cbnz	r3, 800579e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005796:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800579a:	f7fb fe77 	bl	800148c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800579e:	2302      	movs	r3, #2
 80057a0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80057ac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057ae:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80057b2:	4302      	orrs	r2, r0
 80057b4:	68e0      	ldr	r0, [r4, #12]
 80057b6:	6999      	ldr	r1, [r3, #24]
 80057b8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057ba:	6920      	ldr	r0, [r4, #16]
 80057bc:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057be:	430a      	orrs	r2, r1
 80057c0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	4924      	ldr	r1, [pc, #144]	@ (8005858 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80057c6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057c8:	400a      	ands	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80057d2:	69a0      	ldr	r0, [r4, #24]
 80057d4:	4302      	orrs	r2, r0
 80057d6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80057d8:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80057da:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80057dc:	400a      	ands	r2, r1
 80057de:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80057e6:	6a20      	ldr	r0, [r4, #32]
 80057e8:	4302      	orrs	r2, r0
 80057ea:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80057ec:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80057ee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80057f0:	400a      	ands	r2, r1
 80057f2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80057fa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80057fc:	4302      	orrs	r2, r0
 80057fe:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	400a      	ands	r2, r1
 8005804:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005806:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005808:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800580a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800580e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005810:	430a      	orrs	r2, r1
 8005812:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005816:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800581a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800581e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005824:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8005826:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800582a:	432a      	orrs	r2, r5
 800582c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005830:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005834:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005838:	f042 0206 	orr.w	r2, r2, #6
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005846:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8005848:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800584a:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800584e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8005852:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005854:	2001      	movs	r0, #1
 8005856:	e7fc      	b.n	8005852 <HAL_LTDC_Init+0xce>
 8005858:	f000f800 	.word	0xf000f800

0800585c <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800585c:	4770      	bx	lr

0800585e <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800585e:	4770      	bx	lr

08005860 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005860:	6803      	ldr	r3, [r0, #0]
{
 8005862:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005864:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005866:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005868:	0772      	lsls	r2, r6, #29
{
 800586a:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800586c:	d514      	bpl.n	8005898 <HAL_LTDC_IRQHandler+0x38>
 800586e:	0769      	lsls	r1, r5, #29
 8005870:	d512      	bpl.n	8005898 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005874:	f022 0204 	bic.w	r2, r2, #4
 8005878:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800587a:	2204      	movs	r2, #4
 800587c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800587e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800588a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800588c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005890:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005894:	f7ff ffe2 	bl	800585c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005898:	07b2      	lsls	r2, r6, #30
 800589a:	d516      	bpl.n	80058ca <HAL_LTDC_IRQHandler+0x6a>
 800589c:	07ab      	lsls	r3, r5, #30
 800589e:	d514      	bpl.n	80058ca <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058a4:	f022 0202 	bic.w	r2, r2, #2
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80058aa:	2202      	movs	r2, #2
 80058ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80058ae:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80058b8:	2304      	movs	r3, #4
 80058ba:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80058be:	2300      	movs	r3, #0
 80058c0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80058c4:	4620      	mov	r0, r4
 80058c6:	f7ff ffc9 	bl	800585c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80058ca:	07f0      	lsls	r0, r6, #31
 80058cc:	d510      	bpl.n	80058f0 <HAL_LTDC_IRQHandler+0x90>
 80058ce:	07e9      	lsls	r1, r5, #31
 80058d0:	d50e      	bpl.n	80058f0 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80058dc:	2201      	movs	r2, #1
 80058de:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 80058e0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80058e2:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80058e6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80058ea:	4620      	mov	r0, r4
 80058ec:	f7fc fe60 	bl	80025b0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80058f0:	0732      	lsls	r2, r6, #28
 80058f2:	d511      	bpl.n	8005918 <HAL_LTDC_IRQHandler+0xb8>
 80058f4:	072b      	lsls	r3, r5, #28
 80058f6:	d50f      	bpl.n	8005918 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058fc:	f022 0208 	bic.w	r2, r2, #8
 8005900:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005902:	2208      	movs	r2, #8
 8005904:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005906:	2301      	movs	r3, #1
 8005908:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800590c:	2300      	movs	r3, #0
 800590e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005912:	4620      	mov	r0, r4
 8005914:	f7ff ffa3 	bl	800585e <HAL_LTDC_ReloadEventCallback>
}
 8005918:	bd70      	pop	{r4, r5, r6, pc}

0800591a <HAL_LTDC_ConfigLayer>:
{
 800591a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800591e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8005922:	2b01      	cmp	r3, #1
{
 8005924:	4606      	mov	r6, r0
 8005926:	460f      	mov	r7, r1
 8005928:	4694      	mov	ip, r2
 800592a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800592e:	d01f      	beq.n	8005970 <HAL_LTDC_ConfigLayer+0x56>
 8005930:	f04f 0801 	mov.w	r8, #1
 8005934:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005938:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800593c:	2434      	movs	r4, #52	@ 0x34
 800593e:	460d      	mov	r5, r1
 8005940:	fb04 6402 	mla	r4, r4, r2, r6
 8005944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005946:	3438      	adds	r4, #56	@ 0x38
 8005948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800594a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800594c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800594e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005956:	4630      	mov	r0, r6
 8005958:	4662      	mov	r2, ip
 800595a:	4639      	mov	r1, r7
 800595c:	f7ff fe96 	bl	800568c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005960:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005962:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005964:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005968:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800596c:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8005970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005974 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005974:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 8005978:	2a01      	cmp	r2, #1
{
 800597a:	4603      	mov	r3, r0
 800597c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8005980:	d012      	beq.n	80059a8 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005982:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005984:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005988:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800598a:	f020 0001 	bic.w	r0, r0, #1
 800598e:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005990:	4806      	ldr	r0, [pc, #24]	@ (80059ac <HAL_LTDC_ProgramLineEvent+0x38>)
 8005992:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005994:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8005996:	f041 0101 	orr.w	r1, r1, #1
 800599a:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 800599c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80059a4:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40016800 	.word	0x40016800

080059b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059b4:	4604      	mov	r4, r0
 80059b6:	b340      	cbz	r0, 8005a0a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b8:	6803      	ldr	r3, [r0, #0]
 80059ba:	07de      	lsls	r6, r3, #31
 80059bc:	d410      	bmi.n	80059e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	079d      	lsls	r5, r3, #30
 80059c2:	d45b      	bmi.n	8005a7c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	0719      	lsls	r1, r3, #28
 80059c8:	f100 809d 	bmi.w	8005b06 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	075a      	lsls	r2, r3, #29
 80059d0:	f100 80bd 	bmi.w	8005b4e <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d4:	69a3      	ldr	r3, [r4, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f040 8124 	bne.w	8005c24 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80059dc:	2000      	movs	r0, #0
 80059de:	e02c      	b.n	8005a3a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	f002 020c 	and.w	r2, r2, #12
 80059e8:	2a04      	cmp	r2, #4
 80059ea:	d007      	beq.n	80059fc <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059f2:	2a08      	cmp	r2, #8
 80059f4:	d10b      	bne.n	8005a0e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	0259      	lsls	r1, r3, #9
 80059fa:	d508      	bpl.n	8005a0e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059fc:	4b86      	ldr	r3, [pc, #536]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	039a      	lsls	r2, r3, #14
 8005a02:	d5dc      	bpl.n	80059be <HAL_RCC_OscConfig+0xe>
 8005a04:	6863      	ldr	r3, [r4, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1d9      	bne.n	80059be <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	e015      	b.n	8005a3a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	4d81      	ldr	r5, [pc, #516]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a16:	d113      	bne.n	8005a40 <HAL_RCC_OscConfig+0x90>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a1e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005a20:	f7fe ff58 	bl	80048d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a24:	4e7c      	ldr	r6, [pc, #496]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005a26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a28:	6833      	ldr	r3, [r6, #0]
 8005a2a:	039b      	lsls	r3, r3, #14
 8005a2c:	d4c7      	bmi.n	80059be <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a2e:	f7fe ff51 	bl	80048d4 <HAL_GetTick>
 8005a32:	1b40      	subs	r0, r0, r5
 8005a34:	2864      	cmp	r0, #100	@ 0x64
 8005a36:	d9f7      	bls.n	8005a28 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8005a38:	2003      	movs	r0, #3
}
 8005a3a:	b002      	add	sp, #8
 8005a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a44:	d104      	bne.n	8005a50 <HAL_RCC_OscConfig+0xa0>
 8005a46:	682b      	ldr	r3, [r5, #0]
 8005a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	e7e3      	b.n	8005a18 <HAL_RCC_OscConfig+0x68>
 8005a50:	682a      	ldr	r2, [r5, #0]
 8005a52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005a56:	602a      	str	r2, [r5, #0]
 8005a58:	682a      	ldr	r2, [r5, #0]
 8005a5a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a5e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1dd      	bne.n	8005a20 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8005a64:	f7fe ff36 	bl	80048d4 <HAL_GetTick>
 8005a68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6a:	682b      	ldr	r3, [r5, #0]
 8005a6c:	039f      	lsls	r7, r3, #14
 8005a6e:	d5a6      	bpl.n	80059be <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a70:	f7fe ff30 	bl	80048d4 <HAL_GetTick>
 8005a74:	1b80      	subs	r0, r0, r6
 8005a76:	2864      	cmp	r0, #100	@ 0x64
 8005a78:	d9f7      	bls.n	8005a6a <HAL_RCC_OscConfig+0xba>
 8005a7a:	e7dd      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a7c:	4b66      	ldr	r3, [pc, #408]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	f012 0f0c 	tst.w	r2, #12
 8005a84:	d007      	beq.n	8005a96 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a8c:	2a08      	cmp	r2, #8
 8005a8e:	d111      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	025d      	lsls	r5, r3, #9
 8005a94:	d40e      	bmi.n	8005ab4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a96:	4a60      	ldr	r2, [pc, #384]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
 8005a98:	6813      	ldr	r3, [r2, #0]
 8005a9a:	0799      	lsls	r1, r3, #30
 8005a9c:	d502      	bpl.n	8005aa4 <HAL_RCC_OscConfig+0xf4>
 8005a9e:	68e3      	ldr	r3, [r4, #12]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d1b2      	bne.n	8005a0a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa4:	6813      	ldr	r3, [r2, #0]
 8005aa6:	6921      	ldr	r1, [r4, #16]
 8005aa8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005aac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005ab0:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	e787      	b.n	80059c4 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ab4:	68e2      	ldr	r2, [r4, #12]
 8005ab6:	4b59      	ldr	r3, [pc, #356]	@ (8005c1c <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	b1b2      	cbz	r2, 8005ae8 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005abe:	f7fe ff09 	bl	80048d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac2:	4d55      	ldr	r5, [pc, #340]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005ac4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac6:	682b      	ldr	r3, [r5, #0]
 8005ac8:	079b      	lsls	r3, r3, #30
 8005aca:	d507      	bpl.n	8005adc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	6922      	ldr	r2, [r4, #16]
 8005ad0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ad4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	e773      	b.n	80059c4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005adc:	f7fe fefa 	bl	80048d4 <HAL_GetTick>
 8005ae0:	1b80      	subs	r0, r0, r6
 8005ae2:	2802      	cmp	r0, #2
 8005ae4:	d9ef      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x116>
 8005ae6:	e7a7      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005ae8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005aea:	f7fe fef3 	bl	80048d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aee:	4e4a      	ldr	r6, [pc, #296]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005af0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af2:	6833      	ldr	r3, [r6, #0]
 8005af4:	079f      	lsls	r7, r3, #30
 8005af6:	f57f af65 	bpl.w	80059c4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005afa:	f7fe feeb 	bl	80048d4 <HAL_GetTick>
 8005afe:	1b40      	subs	r0, r0, r5
 8005b00:	2802      	cmp	r0, #2
 8005b02:	d9f6      	bls.n	8005af2 <HAL_RCC_OscConfig+0x142>
 8005b04:	e798      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b06:	6962      	ldr	r2, [r4, #20]
 8005b08:	4b44      	ldr	r3, [pc, #272]	@ (8005c1c <HAL_RCC_OscConfig+0x26c>)
 8005b0a:	b182      	cbz	r2, 8005b2e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005b12:	f7fe fedf 	bl	80048d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b16:	4e40      	ldr	r6, [pc, #256]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005b18:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005b1c:	079b      	lsls	r3, r3, #30
 8005b1e:	f53f af55 	bmi.w	80059cc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b22:	f7fe fed7 	bl	80048d4 <HAL_GetTick>
 8005b26:	1b40      	subs	r0, r0, r5
 8005b28:	2802      	cmp	r0, #2
 8005b2a:	d9f6      	bls.n	8005b1a <HAL_RCC_OscConfig+0x16a>
 8005b2c:	e784      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8005b2e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005b32:	f7fe fecf 	bl	80048d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b36:	4e38      	ldr	r6, [pc, #224]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005b38:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b3a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005b3c:	079f      	lsls	r7, r3, #30
 8005b3e:	f57f af45 	bpl.w	80059cc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b42:	f7fe fec7 	bl	80048d4 <HAL_GetTick>
 8005b46:	1b40      	subs	r0, r0, r5
 8005b48:	2802      	cmp	r0, #2
 8005b4a:	d9f6      	bls.n	8005b3a <HAL_RCC_OscConfig+0x18a>
 8005b4c:	e774      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b4e:	4b32      	ldr	r3, [pc, #200]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
 8005b50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b52:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8005b56:	d128      	bne.n	8005baa <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b58:	9201      	str	r2, [sp, #4]
 8005b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b5c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005b60:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005b6c:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6e:	4d2c      	ldr	r5, [pc, #176]	@ (8005c20 <HAL_RCC_OscConfig+0x270>)
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	05d8      	lsls	r0, r3, #23
 8005b74:	d51b      	bpl.n	8005bae <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b76:	68a3      	ldr	r3, [r4, #8]
 8005b78:	4d27      	ldr	r5, [pc, #156]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d127      	bne.n	8005bce <HAL_RCC_OscConfig+0x21e>
 8005b7e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005b86:	f7fe fea5 	bl	80048d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8a:	4e23      	ldr	r6, [pc, #140]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005b8c:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b92:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005b94:	079a      	lsls	r2, r3, #30
 8005b96:	d539      	bpl.n	8005c0c <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8005b98:	2f00      	cmp	r7, #0
 8005b9a:	f43f af1b 	beq.w	80059d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c18 <HAL_RCC_OscConfig+0x268>)
 8005ba0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ba6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ba8:	e714      	b.n	80059d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005baa:	2700      	movs	r7, #0
 8005bac:	e7df      	b.n	8005b6e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005bb6:	f7fe fe8d 	bl	80048d4 <HAL_GetTick>
 8005bba:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	05d9      	lsls	r1, r3, #23
 8005bc0:	d4d9      	bmi.n	8005b76 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc2:	f7fe fe87 	bl	80048d4 <HAL_GetTick>
 8005bc6:	1b80      	subs	r0, r0, r6
 8005bc8:	2802      	cmp	r0, #2
 8005bca:	d9f7      	bls.n	8005bbc <HAL_RCC_OscConfig+0x20c>
 8005bcc:	e734      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d104      	bne.n	8005bdc <HAL_RCC_OscConfig+0x22c>
 8005bd2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005bd4:	f043 0304 	orr.w	r3, r3, #4
 8005bd8:	672b      	str	r3, [r5, #112]	@ 0x70
 8005bda:	e7d0      	b.n	8005b7e <HAL_RCC_OscConfig+0x1ce>
 8005bdc:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	672a      	str	r2, [r5, #112]	@ 0x70
 8005be4:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005be6:	f022 0204 	bic.w	r2, r2, #4
 8005bea:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ca      	bne.n	8005b86 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005bf0:	f7fe fe70 	bl	80048d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005bf8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bfa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005bfc:	079b      	lsls	r3, r3, #30
 8005bfe:	d5cb      	bpl.n	8005b98 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c00:	f7fe fe68 	bl	80048d4 <HAL_GetTick>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	4540      	cmp	r0, r8
 8005c08:	d9f7      	bls.n	8005bfa <HAL_RCC_OscConfig+0x24a>
 8005c0a:	e715      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c0c:	f7fe fe62 	bl	80048d4 <HAL_GetTick>
 8005c10:	1b40      	subs	r0, r0, r5
 8005c12:	4540      	cmp	r0, r8
 8005c14:	d9bd      	bls.n	8005b92 <HAL_RCC_OscConfig+0x1e2>
 8005c16:	e70f      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	42470000 	.word	0x42470000
 8005c20:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c24:	4d37      	ldr	r5, [pc, #220]	@ (8005d04 <HAL_RCC_OscConfig+0x354>)
 8005c26:	68aa      	ldr	r2, [r5, #8]
 8005c28:	f002 020c 	and.w	r2, r2, #12
 8005c2c:	2a08      	cmp	r2, #8
 8005c2e:	d03e      	beq.n	8005cae <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	4b35      	ldr	r3, [pc, #212]	@ (8005d08 <HAL_RCC_OscConfig+0x358>)
 8005c34:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8005c38:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c3a:	d12b      	bne.n	8005c94 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8005c3c:	f7fe fe4a 	bl	80048d4 <HAL_GetTick>
 8005c40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	0199      	lsls	r1, r3, #6
 8005c46:	d41f      	bmi.n	8005c88 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c48:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005c50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005c54:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005c56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c5a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005c5c:	0852      	lsrs	r2, r2, #1
 8005c5e:	3a01      	subs	r2, #1
 8005c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c64:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005c66:	4b28      	ldr	r3, [pc, #160]	@ (8005d08 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c68:	4d26      	ldr	r5, [pc, #152]	@ (8005d04 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005c6e:	f7fe fe31 	bl	80048d4 <HAL_GetTick>
 8005c72:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	019a      	lsls	r2, r3, #6
 8005c78:	f53f aeb0 	bmi.w	80059dc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fe fe2a 	bl	80048d4 <HAL_GetTick>
 8005c80:	1b00      	subs	r0, r0, r4
 8005c82:	2802      	cmp	r0, #2
 8005c84:	d9f6      	bls.n	8005c74 <HAL_RCC_OscConfig+0x2c4>
 8005c86:	e6d7      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fe fe24 	bl	80048d4 <HAL_GetTick>
 8005c8c:	1b80      	subs	r0, r0, r6
 8005c8e:	2802      	cmp	r0, #2
 8005c90:	d9d7      	bls.n	8005c42 <HAL_RCC_OscConfig+0x292>
 8005c92:	e6d1      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8005c94:	f7fe fe1e 	bl	80048d4 <HAL_GetTick>
 8005c98:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	f57f ae9d 	bpl.w	80059dc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca2:	f7fe fe17 	bl	80048d4 <HAL_GetTick>
 8005ca6:	1b00      	subs	r0, r0, r4
 8005ca8:	2802      	cmp	r0, #2
 8005caa:	d9f6      	bls.n	8005c9a <HAL_RCC_OscConfig+0x2ea>
 8005cac:	e6c4      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	f43f aeab 	beq.w	8005a0a <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8005cb4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cbc:	4291      	cmp	r1, r2
 8005cbe:	f47f aea4 	bne.w	8005a0a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cc4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc8:	428a      	cmp	r2, r1
 8005cca:	f47f ae9e 	bne.w	8005a0a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cd0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005cd4:	401a      	ands	r2, r3
 8005cd6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005cda:	f47f ae96 	bne.w	8005a0a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cde:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005ce0:	0852      	lsrs	r2, r2, #1
 8005ce2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005ce6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ce8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005cec:	f47f ae8d 	bne.w	8005a0a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cf0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005cf2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cf6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005cfa:	bf14      	ite	ne
 8005cfc:	2001      	movne	r0, #1
 8005cfe:	2000      	moveq	r0, #0
 8005d00:	e69b      	b.n	8005a3a <HAL_RCC_OscConfig+0x8a>
 8005d02:	bf00      	nop
 8005d04:	40023800 	.word	0x40023800
 8005d08:	42470000 	.word	0x42470000

08005d0c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0c:	4913      	ldr	r1, [pc, #76]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005d0e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d10:	688b      	ldr	r3, [r1, #8]
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d01c      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x48>
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d11c      	bne.n	8005d58 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d1e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d20:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d22:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d24:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d28:	bf14      	ite	ne
 8005d2a:	480d      	ldrne	r0, [pc, #52]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d2c:	480d      	ldreq	r0, [pc, #52]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005d32:	bf18      	it	ne
 8005d34:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d3a:	fba1 0100 	umull	r0, r1, r1, r0
 8005d3e:	f7fa faa7 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d42:	4b06      	ldr	r3, [pc, #24]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x50>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005d4e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005d52:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d54:	4802      	ldr	r0, [pc, #8]	@ (8005d60 <HAL_RCC_GetSysClockFreq+0x54>)
 8005d56:	e7fc      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8005d58:	4802      	ldr	r0, [pc, #8]	@ (8005d64 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005d5a:	e7fa      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x46>
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	007a1200 	.word	0x007a1200
 8005d64:	00f42400 	.word	0x00f42400

08005d68 <HAL_RCC_ClockConfig>:
{
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005d6e:	4604      	mov	r4, r0
 8005d70:	b910      	cbnz	r0, 8005d78 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005d72:	2001      	movs	r0, #1
}
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d78:	4b43      	ldr	r3, [pc, #268]	@ (8005e88 <HAL_RCC_ClockConfig+0x120>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	f002 020f 	and.w	r2, r2, #15
 8005d80:	428a      	cmp	r2, r1
 8005d82:	d328      	bcc.n	8005dd6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	6821      	ldr	r1, [r4, #0]
 8005d86:	078f      	lsls	r7, r1, #30
 8005d88:	d42d      	bmi.n	8005de6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d8a:	07c8      	lsls	r0, r1, #31
 8005d8c:	d440      	bmi.n	8005e10 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e88 <HAL_RCC_ClockConfig+0x120>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	f002 020f 	and.w	r2, r2, #15
 8005d96:	42aa      	cmp	r2, r5
 8005d98:	d865      	bhi.n	8005e66 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	0751      	lsls	r1, r2, #29
 8005d9e:	d46b      	bmi.n	8005e78 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da0:	0713      	lsls	r3, r2, #28
 8005da2:	d507      	bpl.n	8005db4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da4:	4a39      	ldr	r2, [pc, #228]	@ (8005e8c <HAL_RCC_ClockConfig+0x124>)
 8005da6:	6921      	ldr	r1, [r4, #16]
 8005da8:	6893      	ldr	r3, [r2, #8]
 8005daa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005dae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005db2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005db4:	f7ff ffaa 	bl	8005d0c <HAL_RCC_GetSysClockFreq>
 8005db8:	4b34      	ldr	r3, [pc, #208]	@ (8005e8c <HAL_RCC_ClockConfig+0x124>)
 8005dba:	4a35      	ldr	r2, [pc, #212]	@ (8005e90 <HAL_RCC_ClockConfig+0x128>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005dc2:	5cd3      	ldrb	r3, [r2, r3]
 8005dc4:	40d8      	lsrs	r0, r3
 8005dc6:	4b33      	ldr	r3, [pc, #204]	@ (8005e94 <HAL_RCC_ClockConfig+0x12c>)
 8005dc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005dca:	4b33      	ldr	r3, [pc, #204]	@ (8005e98 <HAL_RCC_ClockConfig+0x130>)
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f7fb fd27 	bl	8001820 <HAL_InitTick>
  return HAL_OK;
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e7ce      	b.n	8005d74 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	b2ca      	uxtb	r2, r1
 8005dd8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	428b      	cmp	r3, r1
 8005de2:	d1c6      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xa>
 8005de4:	e7ce      	b.n	8005d84 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de6:	4b29      	ldr	r3, [pc, #164]	@ (8005e8c <HAL_RCC_ClockConfig+0x124>)
 8005de8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dec:	bf1e      	ittt	ne
 8005dee:	689a      	ldrne	r2, [r3, #8]
 8005df0:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8005df4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005df8:	bf42      	ittt	mi
 8005dfa:	689a      	ldrmi	r2, [r3, #8]
 8005dfc:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005e00:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	68a0      	ldr	r0, [r4, #8]
 8005e06:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005e0a:	4302      	orrs	r2, r0
 8005e0c:	609a      	str	r2, [r3, #8]
 8005e0e:	e7bc      	b.n	8005d8a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e10:	6862      	ldr	r2, [r4, #4]
 8005e12:	4b1e      	ldr	r3, [pc, #120]	@ (8005e8c <HAL_RCC_ClockConfig+0x124>)
 8005e14:	2a01      	cmp	r2, #1
 8005e16:	d11c      	bne.n	8005e52 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1e:	d0a8      	beq.n	8005d72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e20:	4e1a      	ldr	r6, [pc, #104]	@ (8005e8c <HAL_RCC_ClockConfig+0x124>)
 8005e22:	68b3      	ldr	r3, [r6, #8]
 8005e24:	f023 0303 	bic.w	r3, r3, #3
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005e2c:	f7fe fd52 	bl	80048d4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e30:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005e34:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	68b3      	ldr	r3, [r6, #8]
 8005e38:	6862      	ldr	r2, [r4, #4]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005e42:	d0a4      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e44:	f7fe fd46 	bl	80048d4 <HAL_GetTick>
 8005e48:	1bc0      	subs	r0, r0, r7
 8005e4a:	4540      	cmp	r0, r8
 8005e4c:	d9f3      	bls.n	8005e36 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8005e4e:	2003      	movs	r0, #3
 8005e50:	e790      	b.n	8005d74 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e52:	1e91      	subs	r1, r2, #2
 8005e54:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e56:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e58:	d802      	bhi.n	8005e60 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005e5e:	e7de      	b.n	8005e1e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e60:	f013 0f02 	tst.w	r3, #2
 8005e64:	e7db      	b.n	8005e1e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	b2ea      	uxtb	r2, r5
 8005e68:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	42ab      	cmp	r3, r5
 8005e72:	f47f af7e 	bne.w	8005d72 <HAL_RCC_ClockConfig+0xa>
 8005e76:	e790      	b.n	8005d9a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e78:	4904      	ldr	r1, [pc, #16]	@ (8005e8c <HAL_RCC_ClockConfig+0x124>)
 8005e7a:	68e0      	ldr	r0, [r4, #12]
 8005e7c:	688b      	ldr	r3, [r1, #8]
 8005e7e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005e82:	4303      	orrs	r3, r0
 8005e84:	608b      	str	r3, [r1, #8]
 8005e86:	e78b      	b.n	8005da0 <HAL_RCC_ClockConfig+0x38>
 8005e88:	40023c00 	.word	0x40023c00
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	080155a8 	.word	0x080155a8
 8005e94:	20000074 	.word	0x20000074
 8005e98:	2000007c 	.word	0x2000007c

08005e9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005e9e:	4a05      	ldr	r2, [pc, #20]	@ (8005eb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005ea6:	5cd3      	ldrb	r3, [r2, r3]
 8005ea8:	4a03      	ldr	r2, [pc, #12]	@ (8005eb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005eaa:	6810      	ldr	r0, [r2, #0]
}
 8005eac:	40d8      	lsrs	r0, r3
 8005eae:	4770      	bx	lr
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	080155a0 	.word	0x080155a0
 8005eb8:	20000074 	.word	0x20000074

08005ebc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ebc:	4b04      	ldr	r3, [pc, #16]	@ (8005ed0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005ebe:	4a05      	ldr	r2, [pc, #20]	@ (8005ed4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005ec6:	5cd3      	ldrb	r3, [r2, r3]
 8005ec8:	4a03      	ldr	r2, [pc, #12]	@ (8005ed8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005eca:	6810      	ldr	r0, [r2, #0]
}
 8005ecc:	40d8      	lsrs	r0, r3
 8005ece:	4770      	bx	lr
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	080155a0 	.word	0x080155a0
 8005ed8:	20000074 	.word	0x20000074

08005edc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005edc:	230f      	movs	r3, #15
 8005ede:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <HAL_RCC_GetClockConfig+0x34>)
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	f002 0203 	and.w	r2, r2, #3
 8005ee8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005ef0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005ef8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	08db      	lsrs	r3, r3, #3
 8005efe:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005f02:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f04:	4b03      	ldr	r3, [pc, #12]	@ (8005f14 <HAL_RCC_GetClockConfig+0x38>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	600b      	str	r3, [r1, #0]
}
 8005f0e:	4770      	bx	lr
 8005f10:	40023800 	.word	0x40023800
 8005f14:	40023c00 	.word	0x40023c00

08005f18 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f18:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f1a:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8005f1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f20:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f22:	f040 8088 	bne.w	8006036 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	f013 0f0c 	tst.w	r3, #12
 8005f2c:	d045      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f2e:	4b8c      	ldr	r3, [pc, #560]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f30:	4d8c      	ldr	r5, [pc, #560]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005f32:	2200      	movs	r2, #0
 8005f34:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005f36:	f7fe fccd 	bl	80048d4 <HAL_GetTick>
 8005f3a:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	0099      	lsls	r1, r3, #2
 8005f40:	f100 80cb 	bmi.w	80060da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005f44:	6821      	ldr	r1, [r4, #0]
 8005f46:	074a      	lsls	r2, r1, #29
 8005f48:	d515      	bpl.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f4a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f4e:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f52:	061b      	lsls	r3, r3, #24
 8005f54:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8005f58:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f62:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8005f66:	6a22      	ldr	r2, [r4, #32]
 8005f68:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005f6c:	3a01      	subs	r2, #1
 8005f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f72:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f76:	070b      	lsls	r3, r1, #28
 8005f78:	d514      	bpl.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f7a:	4a7a      	ldr	r2, [pc, #488]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f7c:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f7e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f82:	6920      	ldr	r0, [r4, #16]
 8005f84:	071b      	lsls	r3, r3, #28
 8005f86:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005f8a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f94:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005f98:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005f9a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fa6:	4e6f      	ldr	r6, [pc, #444]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005fa8:	2201      	movs	r2, #1
 8005faa:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005fac:	f7fe fc92 	bl	80048d4 <HAL_GetTick>
 8005fb0:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fb2:	6833      	ldr	r3, [r6, #0]
 8005fb4:	009f      	lsls	r7, r3, #2
 8005fb6:	f140 8097 	bpl.w	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	0698      	lsls	r0, r3, #26
 8005fbe:	d534      	bpl.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	4b67      	ldr	r3, [pc, #412]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fc6:	4d68      	ldr	r5, [pc, #416]	@ (8006168 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005fce:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005fda:	682b      	ldr	r3, [r5, #0]
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe0:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fe2:	f7fe fc77 	bl	80048d4 <HAL_GetTick>
 8005fe6:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	05d8      	lsls	r0, r3, #23
 8005fec:	f140 8083 	bpl.w	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ff0:	4d5c      	ldr	r5, [pc, #368]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ff2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ff4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ff6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005ffa:	f040 8083 	bne.w	8006104 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ffe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006000:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006004:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8006008:	4a56      	ldr	r2, [pc, #344]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800600a:	f040 809e 	bne.w	800614a <HAL_RCCEx_PeriphCLKConfig+0x232>
 800600e:	6891      	ldr	r1, [r2, #8]
 8006010:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8006014:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8006018:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800601c:	4301      	orrs	r1, r0
 800601e:	6091      	str	r1, [r2, #8]
 8006020:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8006022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006026:	430b      	orrs	r3, r1
 8006028:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	06db      	lsls	r3, r3, #27
 800602e:	f100 8090 	bmi.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 8006032:	2000      	movs	r0, #0
 8006034:	e04f      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 8006036:	4b4a      	ldr	r3, [pc, #296]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006038:	4e4a      	ldr	r6, [pc, #296]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 800603a:	2200      	movs	r2, #0
 800603c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800603e:	f7fe fc49 	bl	80048d4 <HAL_GetTick>
 8006042:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006044:	6833      	ldr	r3, [r6, #0]
 8006046:	011f      	lsls	r7, r3, #4
 8006048:	d43f      	bmi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800604a:	6821      	ldr	r1, [r4, #0]
 800604c:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800604e:	bf41      	itttt	mi
 8006050:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8006054:	071b      	lslmi	r3, r3, #28
 8006056:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 800605a:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800605e:	078a      	lsls	r2, r1, #30
 8006060:	d515      	bpl.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006062:	4a40      	ldr	r2, [pc, #256]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006064:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006066:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800606a:	6865      	ldr	r5, [r4, #4]
 800606c:	061b      	lsls	r3, r3, #24
 800606e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8006072:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8006076:	4303      	orrs	r3, r0
 8006078:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800607c:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8006080:	69e3      	ldr	r3, [r4, #28]
 8006082:	f020 001f 	bic.w	r0, r0, #31
 8006086:	3b01      	subs	r3, #1
 8006088:	4303      	orrs	r3, r0
 800608a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800608e:	064b      	lsls	r3, r1, #25
 8006090:	d50a      	bpl.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006092:	68e3      	ldr	r3, [r4, #12]
 8006094:	6862      	ldr	r2, [r4, #4]
 8006096:	061b      	lsls	r3, r3, #24
 8006098:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800609c:	68a2      	ldr	r2, [r4, #8]
 800609e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80060a2:	4a30      	ldr	r2, [pc, #192]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80060a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060aa:	4e2e      	ldr	r6, [pc, #184]	@ (8006164 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 80060ac:	2201      	movs	r2, #1
 80060ae:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80060b0:	f7fe fc10 	bl	80048d4 <HAL_GetTick>
 80060b4:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060b6:	6833      	ldr	r3, [r6, #0]
 80060b8:	011f      	lsls	r7, r3, #4
 80060ba:	f53f af34 	bmi.w	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060be:	f7fe fc09 	bl	80048d4 <HAL_GetTick>
 80060c2:	1b40      	subs	r0, r0, r5
 80060c4:	2802      	cmp	r0, #2
 80060c6:	d9f6      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80060c8:	e004      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060ca:	f7fe fc03 	bl	80048d4 <HAL_GetTick>
 80060ce:	1b40      	subs	r0, r0, r5
 80060d0:	2802      	cmp	r0, #2
 80060d2:	d9b7      	bls.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 80060d4:	2003      	movs	r0, #3
}
 80060d6:	b003      	add	sp, #12
 80060d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80060da:	f7fe fbfb 	bl	80048d4 <HAL_GetTick>
 80060de:	1b80      	subs	r0, r0, r6
 80060e0:	2802      	cmp	r0, #2
 80060e2:	f67f af2b 	bls.w	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x24>
 80060e6:	e7f5      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80060e8:	f7fe fbf4 	bl	80048d4 <HAL_GetTick>
 80060ec:	1b40      	subs	r0, r0, r5
 80060ee:	2802      	cmp	r0, #2
 80060f0:	f67f af5f 	bls.w	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80060f4:	e7ee      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060f6:	f7fe fbed 	bl	80048d4 <HAL_GetTick>
 80060fa:	1b80      	subs	r0, r0, r6
 80060fc:	2802      	cmp	r0, #2
 80060fe:	f67f af73 	bls.w	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8006102:	e7e7      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006104:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8006108:	4293      	cmp	r3, r2
 800610a:	f43f af78 	beq.w	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800610e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006110:	4a13      	ldr	r2, [pc, #76]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006112:	2101      	movs	r1, #1
 8006114:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800611c:	2100      	movs	r1, #0
 800611e:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8006122:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006124:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006126:	07d9      	lsls	r1, r3, #31
 8006128:	f57f af69 	bpl.w	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 800612c:	f7fe fbd2 	bl	80048d4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006130:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8006134:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006136:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006138:	079a      	lsls	r2, r3, #30
 800613a:	f53f af60 	bmi.w	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800613e:	f7fe fbc9 	bl	80048d4 <HAL_GetTick>
 8006142:	1b80      	subs	r0, r0, r6
 8006144:	42b8      	cmp	r0, r7
 8006146:	d9f6      	bls.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006148:	e7c4      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614a:	6891      	ldr	r1, [r2, #8]
 800614c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8006150:	e765      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006152:	4b06      	ldr	r3, [pc, #24]	@ (800616c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006154:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8006158:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 800615c:	e769      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800615e:	bf00      	nop
 8006160:	42470000 	.word	0x42470000
 8006164:	40023800 	.word	0x40023800
 8006168:	40007000 	.word	0x40007000
 800616c:	42471000 	.word	0x42471000

08006170 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006174:	4604      	mov	r4, r0
 8006176:	b1c8      	cbz	r0, 80061ac <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006178:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800617c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006180:	b91b      	cbnz	r3, 800618a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006182:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006186:	f7fb fa93 	bl	80016b0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800618a:	2302      	movs	r3, #2
 800618c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006190:	1d21      	adds	r1, r4, #4
 8006192:	6820      	ldr	r0, [r4, #0]
 8006194:	f000 fe21 	bl	8006dda <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006198:	6862      	ldr	r2, [r4, #4]
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	4629      	mov	r1, r5
 800619e:	f000 fe52 	bl	8006e46 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 80061a8:	2000      	movs	r0, #0
}
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80061ac:	2001      	movs	r0, #1
 80061ae:	e7fc      	b.n	80061aa <HAL_SDRAM_Init+0x3a>

080061b0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80061b0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80061b2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80061b6:	2b02      	cmp	r3, #2
{
 80061b8:	4605      	mov	r5, r0
 80061ba:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80061bc:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80061be:	d012      	beq.n	80061e6 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80061c0:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80061c4:	2c01      	cmp	r4, #1
 80061c6:	d10f      	bne.n	80061e8 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061c8:	2302      	movs	r3, #2
 80061ca:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80061ce:	6828      	ldr	r0, [r5, #0]
 80061d0:	f000 fe6f 	bl	8006eb2 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80061d4:	6833      	ldr	r3, [r6, #0]
 80061d6:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80061d8:	bf06      	itte	eq
 80061da:	2305      	moveq	r3, #5
 80061dc:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80061e0:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80061e4:	2000      	movs	r0, #0
}
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80061e8:	2001      	movs	r0, #1
 80061ea:	e7fc      	b.n	80061e6 <HAL_SDRAM_SendCommand+0x36>

080061ec <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80061ec:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80061ee:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80061f2:	2b02      	cmp	r3, #2
{
 80061f4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80061f6:	b2d8      	uxtb	r0, r3
 80061f8:	d00d      	beq.n	8006216 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80061fa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80061fe:	2b01      	cmp	r3, #1
 8006200:	b2dd      	uxtb	r5, r3
 8006202:	d109      	bne.n	8006218 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006204:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006206:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006208:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800620c:	f000 fe75 	bl	8006efa <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006210:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006214:	2000      	movs	r0, #0
}
 8006216:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006218:	2001      	movs	r0, #1
 800621a:	e7fc      	b.n	8006216 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800621c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800621c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006220:	461c      	mov	r4, r3
 8006222:	4616      	mov	r6, r2
 8006224:	460f      	mov	r7, r1
 8006226:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006228:	f7fe fb54 	bl	80048d4 <HAL_GetTick>
 800622c:	4434      	add	r4, r6
 800622e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006230:	f7fe fb50 	bl	80048d4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006234:	4b24      	ldr	r3, [pc, #144]	@ (80062c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800623c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800623e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006240:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006242:	682a      	ldr	r2, [r5, #0]
 8006244:	6893      	ldr	r3, [r2, #8]
 8006246:	ea37 0303 	bics.w	r3, r7, r3
 800624a:	d001      	beq.n	8006250 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 800624c:	2000      	movs	r0, #0
 800624e:	e02e      	b.n	80062ae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8006250:	1c73      	adds	r3, r6, #1
 8006252:	d0f7      	beq.n	8006244 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006254:	f7fe fb3e 	bl	80048d4 <HAL_GetTick>
 8006258:	eba0 0008 	sub.w	r0, r0, r8
 800625c:	42a0      	cmp	r0, r4
 800625e:	d329      	bcc.n	80062b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006268:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626a:	686a      	ldr	r2, [r5, #4]
 800626c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006270:	d10a      	bne.n	8006288 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8006272:	68aa      	ldr	r2, [r5, #8]
 8006274:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006278:	d002      	beq.n	8006280 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800627a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800627e:	d103      	bne.n	8006288 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006286:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006288:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800628a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800628e:	d107      	bne.n	80062a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800629e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80062a6:	2300      	movs	r3, #0
 80062a8:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 80062ac:	2003      	movs	r0, #3
}
 80062ae:	b002      	add	sp, #8
 80062b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 80062b4:	9a01      	ldr	r2, [sp, #4]
      count--;
 80062b6:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80062b8:	2a00      	cmp	r2, #0
      count--;
 80062ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	bf08      	it	eq
 80062c2:	4614      	moveq	r4, r2
 80062c4:	e7bd      	b.n	8006242 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 80062c6:	bf00      	nop
 80062c8:	20000074 	.word	0x20000074

080062cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d0:	6842      	ldr	r2, [r0, #4]
 80062d2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 80062d6:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d8:	d006      	beq.n	80062e8 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062da:	460a      	mov	r2, r1
 80062dc:	2101      	movs	r1, #1
 80062de:	f7ff ff9d 	bl	800621c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80062e2:	b9b8      	cbnz	r0, 8006314 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80062e4:	2000      	movs	r0, #0
}
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e8:	6882      	ldr	r2, [r0, #8]
 80062ea:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80062ee:	d002      	beq.n	80062f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062f0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80062f4:	d107      	bne.n	8006306 <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 80062f6:	6825      	ldr	r5, [r4, #0]
 80062f8:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80062fa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 80062fe:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006302:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006304:	d003      	beq.n	800630e <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006306:	460a      	mov	r2, r1
 8006308:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800630a:	4620      	mov	r0, r4
 800630c:	e7e7      	b.n	80062de <SPI_EndRxTransaction+0x12>
 800630e:	460a      	mov	r2, r1
 8006310:	2101      	movs	r1, #1
 8006312:	e7fa      	b.n	800630a <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006314:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006316:	f043 0320 	orr.w	r3, r3, #32
 800631a:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800631c:	2003      	movs	r0, #3
 800631e:	e7e2      	b.n	80062e6 <SPI_EndRxTransaction+0x1a>

08006320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006322:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006324:	4a12      	ldr	r2, [pc, #72]	@ (8006370 <SPI_EndRxTxTransaction+0x50>)
 8006326:	6815      	ldr	r5, [r2, #0]
 8006328:	4a12      	ldr	r2, [pc, #72]	@ (8006374 <SPI_EndRxTxTransaction+0x54>)
 800632a:	fbb5 f5f2 	udiv	r5, r5, r2
 800632e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006332:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006334:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006336:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006338:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 800633c:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800633e:	d10b      	bne.n	8006358 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006340:	460a      	mov	r2, r1
 8006342:	2180      	movs	r1, #128	@ 0x80
 8006344:	f7ff ff6a 	bl	800621c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006348:	b178      	cbz	r0, 800636a <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800634c:	f043 0320 	orr.w	r3, r3, #32
 8006350:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006352:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8006354:	b003      	add	sp, #12
 8006356:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8006358:	9b01      	ldr	r3, [sp, #4]
 800635a:	b133      	cbz	r3, 800636a <SPI_EndRxTxTransaction+0x4a>
      count--;
 800635c:	9b01      	ldr	r3, [sp, #4]
 800635e:	3b01      	subs	r3, #1
 8006360:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	061b      	lsls	r3, r3, #24
 8006368:	d4f6      	bmi.n	8006358 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 800636a:	2000      	movs	r0, #0
 800636c:	e7f2      	b.n	8006354 <SPI_EndRxTxTransaction+0x34>
 800636e:	bf00      	nop
 8006370:	20000074 	.word	0x20000074
 8006374:	016e3600 	.word	0x016e3600

08006378 <HAL_SPI_Init>:
{
 8006378:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800637a:	4604      	mov	r4, r0
 800637c:	2800      	cmp	r0, #0
 800637e:	d055      	beq.n	800642c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006380:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	d14e      	bne.n	8006424 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006386:	6842      	ldr	r2, [r0, #4]
 8006388:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800638c:	d000      	beq.n	8006390 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800638e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006390:	2300      	movs	r3, #0
 8006392:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006394:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006398:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800639c:	b923      	cbnz	r3, 80063a8 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800639e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7fb f94e 	bl	8001644 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80063a8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063aa:	68a0      	ldr	r0, [r4, #8]
 80063ac:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80063ae:	2302      	movs	r3, #2
 80063b0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80063b4:	680b      	ldr	r3, [r1, #0]
 80063b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80063c2:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80063c6:	4303      	orrs	r3, r0
 80063c8:	68e0      	ldr	r0, [r4, #12]
 80063ca:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 80063ce:	4303      	orrs	r3, r0
 80063d0:	6920      	ldr	r0, [r4, #16]
 80063d2:	f000 0002 	and.w	r0, r0, #2
 80063d6:	4303      	orrs	r3, r0
 80063d8:	6960      	ldr	r0, [r4, #20]
 80063da:	f000 0001 	and.w	r0, r0, #1
 80063de:	4303      	orrs	r3, r0
 80063e0:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 80063e4:	4303      	orrs	r3, r0
 80063e6:	69e0      	ldr	r0, [r4, #28]
 80063e8:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80063ec:	4303      	orrs	r3, r0
 80063ee:	6a20      	ldr	r0, [r4, #32]
 80063f0:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80063f4:	4303      	orrs	r3, r0
 80063f6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80063f8:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80063fc:	4303      	orrs	r3, r0
 80063fe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006400:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006402:	0c12      	lsrs	r2, r2, #16
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	f002 0204 	and.w	r2, r2, #4
 800640c:	431a      	orrs	r2, r3
 800640e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006410:	69cb      	ldr	r3, [r1, #28]
 8006412:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006416:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006418:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800641a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800641c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800641e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8006422:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006424:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800642a:	e7b1      	b.n	8006390 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800642c:	2001      	movs	r0, #1
 800642e:	e7f8      	b.n	8006422 <HAL_SPI_Init+0xaa>

08006430 <HAL_SPI_Transmit>:
{
 8006430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006434:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006436:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800643a:	2b01      	cmp	r3, #1
{
 800643c:	4604      	mov	r4, r0
 800643e:	460d      	mov	r5, r1
 8006440:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006442:	f000 80a0 	beq.w	8006586 <HAL_SPI_Transmit+0x156>
 8006446:	2301      	movs	r3, #1
 8006448:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800644c:	f7fe fa42 	bl	80048d4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006450:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006454:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006456:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006458:	b2d8      	uxtb	r0, r3
 800645a:	f040 8092 	bne.w	8006582 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 800645e:	2d00      	cmp	r5, #0
 8006460:	d061      	beq.n	8006526 <HAL_SPI_Transmit+0xf6>
 8006462:	f1b8 0f00 	cmp.w	r8, #0
 8006466:	d05e      	beq.n	8006526 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006468:	2303      	movs	r3, #3
 800646a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800646e:	2300      	movs	r3, #0
 8006470:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8006472:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8006476:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800647a:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800647c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800647e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006480:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006482:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006484:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 800648a:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648e:	d107      	bne.n	80064a0 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8006490:	6833      	ldr	r3, [r6, #0]
 8006492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006496:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006498:	6833      	ldr	r3, [r6, #0]
 800649a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800649e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a0:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064a2:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80064a6:	bf5e      	ittt	pl
 80064a8:	6833      	ldrpl	r3, [r6, #0]
 80064aa:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80064ae:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064b0:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b4:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064b6:	d13f      	bne.n	8006538 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b8:	b113      	cbz	r3, 80064c0 <HAL_SPI_Transmit+0x90>
 80064ba:	f1b8 0f01 	cmp.w	r8, #1
 80064be:	d107      	bne.n	80064d0 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80064c4:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c6:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80064c8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80064ca:	3b01      	subs	r3, #1
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80064d0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	b9a3      	cbnz	r3, 8006500 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064d6:	464a      	mov	r2, r9
 80064d8:	4639      	mov	r1, r7
 80064da:	4620      	mov	r0, r4
 80064dc:	f7ff ff20 	bl	8006320 <SPI_EndRxTxTransaction>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d14b      	bne.n	800657c <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	b933      	cbnz	r3, 80064f6 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	9201      	str	r2, [sp, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064f6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80064f8:	3800      	subs	r0, #0
 80064fa:	bf18      	it	ne
 80064fc:	2001      	movne	r0, #1
error:
 80064fe:	e012      	b.n	8006526 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	6893      	ldr	r3, [r2, #8]
 8006504:	0798      	lsls	r0, r3, #30
 8006506:	d505      	bpl.n	8006514 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006508:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800650a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800650e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006510:	6323      	str	r3, [r4, #48]	@ 0x30
 8006512:	e7d9      	b.n	80064c8 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006514:	f7fe f9de 	bl	80048d4 <HAL_GetTick>
 8006518:	eba0 0009 	sub.w	r0, r0, r9
 800651c:	42b8      	cmp	r0, r7
 800651e:	d3d7      	bcc.n	80064d0 <HAL_SPI_Transmit+0xa0>
 8006520:	1c79      	adds	r1, r7, #1
 8006522:	d0d5      	beq.n	80064d0 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8006524:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006526:	2301      	movs	r3, #1
 8006528:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800652c:	2300      	movs	r3, #0
 800652e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006532:	b003      	add	sp, #12
 8006534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006538:	b113      	cbz	r3, 8006540 <HAL_SPI_Transmit+0x110>
 800653a:	f1b8 0f01 	cmp.w	r8, #1
 800653e:	d108      	bne.n	8006552 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006540:	782b      	ldrb	r3, [r5, #0]
 8006542:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006544:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006546:	3301      	adds	r3, #1
 8006548:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800654a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800654c:	3b01      	subs	r3, #1
 800654e:	b29b      	uxth	r3, r3
 8006550:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006552:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0bd      	beq.n	80064d6 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	0792      	lsls	r2, r2, #30
 8006560:	d503      	bpl.n	800656a <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006562:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	731a      	strb	r2, [r3, #12]
 8006568:	e7ec      	b.n	8006544 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800656a:	f7fe f9b3 	bl	80048d4 <HAL_GetTick>
 800656e:	eba0 0009 	sub.w	r0, r0, r9
 8006572:	42b8      	cmp	r0, r7
 8006574:	d3ed      	bcc.n	8006552 <HAL_SPI_Transmit+0x122>
 8006576:	1c7b      	adds	r3, r7, #1
 8006578:	d0eb      	beq.n	8006552 <HAL_SPI_Transmit+0x122>
 800657a:	e7d3      	b.n	8006524 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800657c:	2320      	movs	r3, #32
 800657e:	6563      	str	r3, [r4, #84]	@ 0x54
 8006580:	e7b0      	b.n	80064e4 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8006582:	2002      	movs	r0, #2
 8006584:	e7cf      	b.n	8006526 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8006586:	2002      	movs	r0, #2
 8006588:	e7d3      	b.n	8006532 <HAL_SPI_Transmit+0x102>

0800658a <HAL_SPI_TransmitReceive>:
{
 800658a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800658e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006590:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8006594:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8006598:	2b01      	cmp	r3, #1
{
 800659a:	4604      	mov	r4, r0
 800659c:	460d      	mov	r5, r1
 800659e:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80065a0:	f000 80e1 	beq.w	8006766 <HAL_SPI_TransmitReceive+0x1dc>
 80065a4:	2301      	movs	r3, #1
 80065a6:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80065aa:	f7fe f993 	bl	80048d4 <HAL_GetTick>
  tmp_state           = hspi->State;
 80065ae:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 80065b2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065b4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80065b6:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 80065b8:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065ba:	d00a      	beq.n	80065d2 <HAL_SPI_TransmitReceive+0x48>
 80065bc:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80065c0:	f040 80cf 	bne.w	8006762 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065c4:	68a3      	ldr	r3, [r4, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f040 80cb 	bne.w	8006762 <HAL_SPI_TransmitReceive+0x1d8>
 80065cc:	2904      	cmp	r1, #4
 80065ce:	f040 80c8 	bne.w	8006762 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065d2:	b115      	cbz	r5, 80065da <HAL_SPI_TransmitReceive+0x50>
 80065d4:	f1b9 0f00 	cmp.w	r9, #0
 80065d8:	d109      	bne.n	80065ee <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 80065da:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 80065dc:	2301      	movs	r3, #1
 80065de:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80065e2:	2300      	movs	r3, #0
 80065e4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80065e8:	b003      	add	sp, #12
 80065ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065ee:	2e00      	cmp	r6, #0
 80065f0:	d0f3      	beq.n	80065da <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065f2:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065f6:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065fa:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065fc:	bf1c      	itt	ne
 80065fe:	2305      	movne	r3, #5
 8006600:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006604:	2300      	movs	r3, #0
 8006606:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8006608:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800660c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800660e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8006610:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006612:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8006614:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006616:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8006618:	bf58      	it	pl
 800661a:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800661c:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 800661e:	bf58      	it	pl
 8006620:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8006624:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8006626:	bf58      	it	pl
 8006628:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800662a:	68e1      	ldr	r1, [r4, #12]
 800662c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006630:	d148      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006632:	b10a      	cbz	r2, 8006638 <HAL_SPI_TransmitReceive+0xae>
 8006634:	2e01      	cmp	r6, #1
 8006636:	d107      	bne.n	8006648 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006638:	f835 2b02 	ldrh.w	r2, [r5], #2
 800663c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800663e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006640:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006642:	3b01      	subs	r3, #1
 8006644:	b29b      	uxth	r3, r3
 8006646:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006648:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800664a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800664c:	b29b      	uxth	r3, r3
 800664e:	b963      	cbnz	r3, 800666a <HAL_SPI_TransmitReceive+0xe0>
 8006650:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	b94b      	cbnz	r3, 800666a <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006656:	463a      	mov	r2, r7
 8006658:	4641      	mov	r1, r8
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff fe60 	bl	8006320 <SPI_EndRxTxTransaction>
 8006660:	2800      	cmp	r0, #0
 8006662:	d072      	beq.n	800674a <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006664:	2320      	movs	r3, #32
 8006666:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8006668:	e7b7      	b.n	80065da <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800666a:	6821      	ldr	r1, [r4, #0]
 800666c:	688b      	ldr	r3, [r1, #8]
 800666e:	079a      	lsls	r2, r3, #30
 8006670:	d50d      	bpl.n	800668e <HAL_SPI_TransmitReceive+0x104>
 8006672:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006674:	b29b      	uxth	r3, r3
 8006676:	b153      	cbz	r3, 800668e <HAL_SPI_TransmitReceive+0x104>
 8006678:	b145      	cbz	r5, 800668c <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800667a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800667c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006680:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006682:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006684:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006686:	3b01      	subs	r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 800668c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800668e:	688a      	ldr	r2, [r1, #8]
 8006690:	f012 0201 	ands.w	r2, r2, #1
 8006694:	d00c      	beq.n	80066b0 <HAL_SPI_TransmitReceive+0x126>
 8006696:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006698:	b29b      	uxth	r3, r3
 800669a:	b14b      	cbz	r3, 80066b0 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800669c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800669e:	68c9      	ldr	r1, [r1, #12]
 80066a0:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066a4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80066a6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80066ae:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066b0:	f7fe f910 	bl	80048d4 <HAL_GetTick>
 80066b4:	1bc0      	subs	r0, r0, r7
 80066b6:	4540      	cmp	r0, r8
 80066b8:	d3c7      	bcc.n	800664a <HAL_SPI_TransmitReceive+0xc0>
 80066ba:	f1b8 3fff 	cmp.w	r8, #4294967295
 80066be:	d0c4      	beq.n	800664a <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 80066c0:	2003      	movs	r0, #3
 80066c2:	e78b      	b.n	80065dc <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c4:	b10a      	cbz	r2, 80066ca <HAL_SPI_TransmitReceive+0x140>
 80066c6:	2e01      	cmp	r6, #1
 80066c8:	d108      	bne.n	80066dc <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066ca:	782a      	ldrb	r2, [r5, #0]
 80066cc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80066d0:	3301      	adds	r3, #1
 80066d2:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80066d4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29b      	uxth	r3, r3
 80066da:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80066dc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066de:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	b91b      	cbnz	r3, 80066ec <HAL_SPI_TransmitReceive+0x162>
 80066e4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0b4      	beq.n	8006656 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066ec:	6822      	ldr	r2, [r4, #0]
 80066ee:	6893      	ldr	r3, [r2, #8]
 80066f0:	079b      	lsls	r3, r3, #30
 80066f2:	d50e      	bpl.n	8006712 <HAL_SPI_TransmitReceive+0x188>
 80066f4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	b15b      	cbz	r3, 8006712 <HAL_SPI_TransmitReceive+0x188>
 80066fa:	b14d      	cbz	r5, 8006710 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8006702:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006704:	3301      	adds	r3, #1
 8006706:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006708:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800670a:	3b01      	subs	r3, #1
 800670c:	b29b      	uxth	r3, r3
 800670e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006710:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	6891      	ldr	r1, [r2, #8]
 8006716:	f011 0101 	ands.w	r1, r1, #1
 800671a:	d00d      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x1ae>
 800671c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800671e:	b29b      	uxth	r3, r3
 8006720:	b153      	cbz	r3, 8006738 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006722:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006724:	68d2      	ldr	r2, [r2, #12]
 8006726:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006728:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800672a:	3301      	adds	r3, #1
 800672c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800672e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006730:	3b01      	subs	r3, #1
 8006732:	b29b      	uxth	r3, r3
 8006734:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006736:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006738:	f7fe f8cc 	bl	80048d4 <HAL_GetTick>
 800673c:	1bc0      	subs	r0, r0, r7
 800673e:	4540      	cmp	r0, r8
 8006740:	d3cd      	bcc.n	80066de <HAL_SPI_TransmitReceive+0x154>
 8006742:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006746:	d0ca      	beq.n	80066de <HAL_SPI_TransmitReceive+0x154>
 8006748:	e7ba      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800674a:	68a3      	ldr	r3, [r4, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f47f af45 	bne.w	80065dc <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	9001      	str	r0, [sp, #4]
 8006756:	68da      	ldr	r2, [r3, #12]
 8006758:	9201      	str	r2, [sp, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	9b01      	ldr	r3, [sp, #4]
 8006760:	e73c      	b.n	80065dc <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8006762:	2002      	movs	r0, #2
 8006764:	e73a      	b.n	80065dc <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 8006766:	2002      	movs	r0, #2
 8006768:	e73e      	b.n	80065e8 <HAL_SPI_TransmitReceive+0x5e>

0800676a <HAL_SPI_Receive>:
{
 800676a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800676e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006770:	6843      	ldr	r3, [r0, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8006776:	4604      	mov	r4, r0
 8006778:	4689      	mov	r9, r1
 800677a:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800677c:	d10c      	bne.n	8006798 <HAL_SPI_Receive+0x2e>
 800677e:	6883      	ldr	r3, [r0, #8]
 8006780:	b953      	cbnz	r3, 8006798 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006782:	2304      	movs	r3, #4
 8006784:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006788:	4613      	mov	r3, r2
 800678a:	9500      	str	r5, [sp, #0]
 800678c:	460a      	mov	r2, r1
 800678e:	f7ff fefc 	bl	800658a <HAL_SPI_TransmitReceive>
}
 8006792:	b003      	add	sp, #12
 8006794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006798:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800679c:	2b01      	cmp	r3, #1
 800679e:	d07f      	beq.n	80068a0 <HAL_SPI_Receive+0x136>
 80067a0:	2301      	movs	r3, #1
 80067a2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80067a6:	f7fe f895 	bl	80048d4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80067aa:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80067ae:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80067b0:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80067b2:	b2d8      	uxtb	r0, r3
 80067b4:	d172      	bne.n	800689c <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 80067b6:	f1b9 0f00 	cmp.w	r9, #0
 80067ba:	d05c      	beq.n	8006876 <HAL_SPI_Receive+0x10c>
 80067bc:	2f00      	cmp	r7, #0
 80067be:	d05a      	beq.n	8006876 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c0:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067c2:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067c6:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067c8:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ca:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067ce:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 80067d2:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067d6:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 80067d8:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80067da:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80067dc:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067de:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80067e0:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80067e2:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e4:	d107      	bne.n	80067f6 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067f4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80067fa:	bf5e      	ittt	pl
 80067fc:	681a      	ldrpl	r2, [r3, #0]
 80067fe:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006802:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006804:	68e3      	ldr	r3, [r4, #12]
 8006806:	b1f3      	cbz	r3, 8006846 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8006808:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800680a:	b29b      	uxth	r3, r3
 800680c:	b1fb      	cbz	r3, 800684e <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	07d2      	lsls	r2, r2, #31
 8006814:	d536      	bpl.n	8006884 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800681a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800681e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006820:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006822:	3b01      	subs	r3, #1
 8006824:	b29b      	uxth	r3, r3
 8006826:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006828:	e7ee      	b.n	8006808 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	07d0      	lsls	r0, r2, #31
 8006830:	d518      	bpl.n	8006864 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006832:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006834:	7b1b      	ldrb	r3, [r3, #12]
 8006836:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006838:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800683a:	3301      	adds	r3, #1
 800683c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800683e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006840:	3b01      	subs	r3, #1
 8006842:	b29b      	uxth	r3, r3
 8006844:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8006846:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1ed      	bne.n	800682a <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800684e:	4642      	mov	r2, r8
 8006850:	4629      	mov	r1, r5
 8006852:	4620      	mov	r0, r4
 8006854:	f7ff fd3a 	bl	80062cc <SPI_EndRxTransaction>
 8006858:	b9e8      	cbnz	r0, 8006896 <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800685a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800685c:	3800      	subs	r0, #0
 800685e:	bf18      	it	ne
 8006860:	2001      	movne	r0, #1
error :
 8006862:	e008      	b.n	8006876 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006864:	f7fe f836 	bl	80048d4 <HAL_GetTick>
 8006868:	eba0 0008 	sub.w	r0, r0, r8
 800686c:	42a8      	cmp	r0, r5
 800686e:	d3ea      	bcc.n	8006846 <HAL_SPI_Receive+0xdc>
 8006870:	1c69      	adds	r1, r5, #1
 8006872:	d0e8      	beq.n	8006846 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8006874:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006876:	2301      	movs	r3, #1
 8006878:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800687c:	2300      	movs	r3, #0
 800687e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 8006882:	e786      	b.n	8006792 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006884:	f7fe f826 	bl	80048d4 <HAL_GetTick>
 8006888:	eba0 0008 	sub.w	r0, r0, r8
 800688c:	42a8      	cmp	r0, r5
 800688e:	d3bb      	bcc.n	8006808 <HAL_SPI_Receive+0x9e>
 8006890:	1c6b      	adds	r3, r5, #1
 8006892:	d0b9      	beq.n	8006808 <HAL_SPI_Receive+0x9e>
 8006894:	e7ee      	b.n	8006874 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006896:	2320      	movs	r3, #32
 8006898:	6563      	str	r3, [r4, #84]	@ 0x54
 800689a:	e7de      	b.n	800685a <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 800689c:	2002      	movs	r0, #2
 800689e:	e7ea      	b.n	8006876 <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 80068a0:	2002      	movs	r0, #2
 80068a2:	e776      	b.n	8006792 <HAL_SPI_Receive+0x28>

080068a4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068a4:	4770      	bx	lr
	...

080068a8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d130      	bne.n	8006912 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b0:	2302      	movs	r3, #2
 80068b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c0:	4a15      	ldr	r2, [pc, #84]	@ (8006918 <HAL_TIM_Base_Start_IT+0x70>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01a      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x54>
 80068c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ca:	d017      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x54>
 80068cc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d013      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x54>
 80068d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00f      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x54>
 80068dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00b      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x54>
 80068e4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d007      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x54>
 80068ec:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d003      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x54>
 80068f4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006902:	2a06      	cmp	r2, #6
 8006904:	d003      	beq.n	800690e <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800690e:	2000      	movs	r0, #0
 8006910:	4770      	bx	lr
    return HAL_ERROR;
 8006912:	2001      	movs	r0, #1
}
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40010000 	.word	0x40010000

0800691c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800691c:	4770      	bx	lr

0800691e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800691e:	4770      	bx	lr

08006920 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006922:	4770      	bx	lr

08006924 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006924:	6803      	ldr	r3, [r0, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	0791      	lsls	r1, r2, #30
{
 800692a:	b510      	push	{r4, lr}
 800692c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800692e:	d50e      	bpl.n	800694e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	0792      	lsls	r2, r2, #30
 8006934:	d50b      	bpl.n	800694e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006936:	f06f 0202 	mvn.w	r2, #2
 800693a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800693c:	2201      	movs	r2, #1
 800693e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	079b      	lsls	r3, r3, #30
 8006944:	d077      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8006946:	f7ff ffea 	bl	800691e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694a:	2300      	movs	r3, #0
 800694c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	0750      	lsls	r0, r2, #29
 8006954:	d510      	bpl.n	8006978 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	0751      	lsls	r1, r2, #29
 800695a:	d50d      	bpl.n	8006978 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800695c:	f06f 0204 	mvn.w	r2, #4
 8006960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006962:	2202      	movs	r2, #2
 8006964:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800696c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800696e:	d068      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006970:	f7ff ffd5 	bl	800691e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006974:	2300      	movs	r3, #0
 8006976:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	0712      	lsls	r2, r2, #28
 800697e:	d50f      	bpl.n	80069a0 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	0710      	lsls	r0, r2, #28
 8006984:	d50c      	bpl.n	80069a0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006986:	f06f 0208 	mvn.w	r2, #8
 800698a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800698c:	2204      	movs	r2, #4
 800698e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006994:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006996:	d05a      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006998:	f7ff ffc1 	bl	800691e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699c:	2300      	movs	r3, #0
 800699e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	06d2      	lsls	r2, r2, #27
 80069a6:	d510      	bpl.n	80069ca <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	06d0      	lsls	r0, r2, #27
 80069ac:	d50d      	bpl.n	80069ca <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069ae:	f06f 0210 	mvn.w	r2, #16
 80069b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b4:	2208      	movs	r2, #8
 80069b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80069be:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069c0:	d04b      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80069c2:	f7ff ffac 	bl	800691e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	2300      	movs	r3, #0
 80069c8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	07d1      	lsls	r1, r2, #31
 80069d0:	d508      	bpl.n	80069e4 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	07d2      	lsls	r2, r2, #31
 80069d6:	d505      	bpl.n	80069e4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069d8:	f06f 0201 	mvn.w	r2, #1
 80069dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80069de:	4620      	mov	r0, r4
 80069e0:	f7fa fc82 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	0610      	lsls	r0, r2, #24
 80069ea:	d508      	bpl.n	80069fe <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	0611      	lsls	r1, r2, #24
 80069f0:	d505      	bpl.n	80069fe <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069f2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80069f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 f8b2 	bl	8006b62 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	0652      	lsls	r2, r2, #25
 8006a04:	d508      	bpl.n	8006a18 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	0650      	lsls	r0, r2, #25
 8006a0a:	d505      	bpl.n	8006a18 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a10:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7ff ff85 	bl	8006922 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	0691      	lsls	r1, r2, #26
 8006a1e:	d522      	bpl.n	8006a66 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	0692      	lsls	r2, r2, #26
 8006a24:	d51f      	bpl.n	8006a66 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a26:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006a2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a2c:	611a      	str	r2, [r3, #16]
}
 8006a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006a32:	f000 b895 	b.w	8006b60 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a36:	f7ff ff71 	bl	800691c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7ff ff70 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a40:	e783      	b.n	800694a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a42:	f7ff ff6b 	bl	800691c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7ff ff6a 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a4c:	e792      	b.n	8006974 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4e:	f7ff ff65 	bl	800691c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7ff ff64 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a58:	e7a0      	b.n	800699c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5a:	f7ff ff5f 	bl	800691c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7ff ff5e 	bl	8006920 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a64:	e7af      	b.n	80069c6 <HAL_TIM_IRQHandler+0xa2>
}
 8006a66:	bd10      	pop	{r4, pc}

08006a68 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a68:	4a25      	ldr	r2, [pc, #148]	@ (8006b00 <TIM_Base_SetConfig+0x98>)
  tmpcr1 = TIMx->CR1;
 8006a6a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	4290      	cmp	r0, r2
 8006a6e:	d012      	beq.n	8006a96 <TIM_Base_SetConfig+0x2e>
 8006a70:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006a74:	d00f      	beq.n	8006a96 <TIM_Base_SetConfig+0x2e>
 8006a76:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006a7a:	4290      	cmp	r0, r2
 8006a7c:	d00b      	beq.n	8006a96 <TIM_Base_SetConfig+0x2e>
 8006a7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a82:	4290      	cmp	r0, r2
 8006a84:	d007      	beq.n	8006a96 <TIM_Base_SetConfig+0x2e>
 8006a86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a8a:	4290      	cmp	r0, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_Base_SetConfig+0x2e>
 8006a8e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006a92:	4290      	cmp	r0, r2
 8006a94:	d108      	bne.n	8006aa8 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006a96:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006a9c:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a9e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	e016      	b.n	8006ad6 <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aa8:	4a16      	ldr	r2, [pc, #88]	@ (8006b04 <TIM_Base_SetConfig+0x9c>)
 8006aaa:	4290      	cmp	r0, r2
 8006aac:	d0f7      	beq.n	8006a9e <TIM_Base_SetConfig+0x36>
 8006aae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ab2:	4290      	cmp	r0, r2
 8006ab4:	d0f3      	beq.n	8006a9e <TIM_Base_SetConfig+0x36>
 8006ab6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006aba:	4290      	cmp	r0, r2
 8006abc:	d0ef      	beq.n	8006a9e <TIM_Base_SetConfig+0x36>
 8006abe:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8006ac2:	4290      	cmp	r0, r2
 8006ac4:	d0eb      	beq.n	8006a9e <TIM_Base_SetConfig+0x36>
 8006ac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006aca:	4290      	cmp	r0, r2
 8006acc:	d0e7      	beq.n	8006a9e <TIM_Base_SetConfig+0x36>
 8006ace:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ad2:	4290      	cmp	r0, r2
 8006ad4:	d0e3      	beq.n	8006a9e <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad6:	694a      	ldr	r2, [r1, #20]
 8006ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006adc:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006ade:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae0:	688b      	ldr	r3, [r1, #8]
 8006ae2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae4:	680b      	ldr	r3, [r1, #0]
 8006ae6:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ae8:	4b05      	ldr	r3, [pc, #20]	@ (8006b00 <TIM_Base_SetConfig+0x98>)
 8006aea:	4298      	cmp	r0, r3
 8006aec:	d003      	beq.n	8006af6 <TIM_Base_SetConfig+0x8e>
 8006aee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006af2:	4298      	cmp	r0, r3
 8006af4:	d101      	bne.n	8006afa <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af6:	690b      	ldr	r3, [r1, #16]
 8006af8:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006afa:	2301      	movs	r3, #1
 8006afc:	6143      	str	r3, [r0, #20]
}
 8006afe:	4770      	bx	lr
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40014000 	.word	0x40014000

08006b08 <HAL_TIM_Base_Init>:
{
 8006b08:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	b330      	cbz	r0, 8006b5c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006b12:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006b16:	b91b      	cbnz	r3, 8006b20 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006b18:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006b1c:	f7ff fec2 	bl	80068a4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b20:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b22:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b28:	1d21      	adds	r1, r4, #4
 8006b2a:	f7ff ff9d 	bl	8006a68 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8006b34:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b36:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006b3a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006b3e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006b42:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b46:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b4e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006b52:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006b56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006b5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	e7fc      	b.n	8006b5a <HAL_TIM_Base_Init+0x52>

08006b60 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006b60:	4770      	bx	lr

08006b62 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006b62:	4770      	bx	lr

08006b64 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b64:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	f102 030c 	add.w	r3, r2, #12
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	320c      	adds	r2, #12
 8006b74:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006b78:	6802      	ldr	r2, [r0, #0]
 8006b7a:	2900      	cmp	r1, #0
 8006b7c:	d1f2      	bne.n	8006b64 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	f102 0314 	add.w	r3, r2, #20
 8006b82:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	f102 0c14 	add.w	ip, r2, #20
 8006b8e:	e84c 3100 	strex	r1, r3, [ip]
 8006b92:	2900      	cmp	r1, #0
 8006b94:	d1f3      	bne.n	8006b7e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d10b      	bne.n	8006bb4 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	f102 030c 	add.w	r3, r2, #12
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	f102 0c0c 	add.w	ip, r2, #12
 8006bac:	e84c 3100 	strex	r1, r3, [ip]
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d1f3      	bne.n	8006b9c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	2320      	movs	r3, #32
 8006bb6:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8006bbe:	4770      	bx	lr

08006bc0 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc0:	6802      	ldr	r2, [r0, #0]
 8006bc2:	68c1      	ldr	r1, [r0, #12]
{
 8006bc4:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc6:	6913      	ldr	r3, [r2, #16]
 8006bc8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	6113      	str	r3, [r2, #16]
{
 8006bd0:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bd2:	6883      	ldr	r3, [r0, #8]
 8006bd4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006bd6:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bd8:	4303      	orrs	r3, r0
 8006bda:	6968      	ldr	r0, [r5, #20]
 8006bdc:	4303      	orrs	r3, r0
 8006bde:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006be0:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8006be4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006be8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8006bea:	430b      	orrs	r3, r1
 8006bec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bee:	6953      	ldr	r3, [r2, #20]
 8006bf0:	69a9      	ldr	r1, [r5, #24]
 8006bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8006c78 <UART_SetConfig+0xb8>)
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d003      	beq.n	8006c08 <UART_SetConfig+0x48>
 8006c00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d124      	bne.n	8006c52 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c08:	f7ff f958 	bl	8005ebc <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c0c:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c0e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c10:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c14:	e9d5 4300 	ldrd	r4, r3, [r5]
 8006c18:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c1c:	d11c      	bne.n	8006c58 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c1e:	18da      	adds	r2, r3, r3
 8006c20:	f04f 0500 	mov.w	r5, #0
 8006c24:	eb45 0305 	adc.w	r3, r5, r5
 8006c28:	f7f9 fb32 	bl	8000290 <__aeabi_uldivmod>
 8006c2c:	2264      	movs	r2, #100	@ 0x64
 8006c2e:	fbb0 f1f2 	udiv	r1, r0, r2
 8006c32:	fb02 0311 	mls	r3, r2, r1, r0
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	3332      	adds	r3, #50	@ 0x32
 8006c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c3e:	f003 0207 	and.w	r2, r3, #7
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006c48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006c4c:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c4e:	60a3      	str	r3, [r4, #8]
  }
}
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c52:	f7ff f923 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 8006c56:	e7d9      	b.n	8006c0c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c58:	009a      	lsls	r2, r3, #2
 8006c5a:	0f9b      	lsrs	r3, r3, #30
 8006c5c:	f7f9 fb18 	bl	8000290 <__aeabi_uldivmod>
 8006c60:	2264      	movs	r2, #100	@ 0x64
 8006c62:	fbb0 f1f2 	udiv	r1, r0, r2
 8006c66:	fb02 0311 	mls	r3, r2, r1, r0
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	3332      	adds	r3, #50	@ 0x32
 8006c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c72:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006c76:	e7ea      	b.n	8006c4e <UART_SetConfig+0x8e>
 8006c78:	40011000 	.word	0x40011000

08006c7c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8006c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c7e:	4605      	mov	r5, r0
 8006c80:	460c      	mov	r4, r1
 8006c82:	4617      	mov	r7, r2
 8006c84:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c86:	682a      	ldr	r2, [r5, #0]
 8006c88:	6813      	ldr	r3, [r2, #0]
 8006c8a:	ea34 0303 	bics.w	r3, r4, r3
 8006c8e:	d101      	bne.n	8006c94 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8006c90:	2000      	movs	r0, #0
 8006c92:	e021      	b.n	8006cd8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006c94:	1c70      	adds	r0, r6, #1
 8006c96:	d0f7      	beq.n	8006c88 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c98:	f7fd fe1c 	bl	80048d4 <HAL_GetTick>
 8006c9c:	1bc0      	subs	r0, r0, r7
 8006c9e:	4286      	cmp	r6, r0
 8006ca0:	d31c      	bcc.n	8006cdc <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8006ca2:	b1de      	cbz	r6, 8006cdc <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	0751      	lsls	r1, r2, #29
 8006caa:	d5ec      	bpl.n	8006c86 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006cac:	2c80      	cmp	r4, #128	@ 0x80
 8006cae:	d0ea      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006cb0:	2c40      	cmp	r4, #64	@ 0x40
 8006cb2:	d0e8      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	0712      	lsls	r2, r2, #28
 8006cb8:	d5e5      	bpl.n	8006c86 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006cba:	2400      	movs	r4, #0
 8006cbc:	9401      	str	r4, [sp, #4]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	9201      	str	r2, [sp, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006cc6:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006cc8:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006cca:	f7ff ff4b 	bl	8006b64 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cce:	2308      	movs	r3, #8
 8006cd0:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8006cd2:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8006cd6:	2001      	movs	r0, #1
}
 8006cd8:	b003      	add	sp, #12
 8006cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006cdc:	2003      	movs	r0, #3
 8006cde:	e7fb      	b.n	8006cd8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08006ce0 <HAL_UART_Init>:
{
 8006ce0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	b348      	cbz	r0, 8006d3a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006ce6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006cea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006cee:	b91b      	cbnz	r3, 8006cf8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006cf0:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8006cf4:	f7fa fd48 	bl	8001788 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006cf8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006cfa:	2324      	movs	r3, #36	@ 0x24
 8006cfc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8006d00:	68d3      	ldr	r3, [r2, #12]
 8006d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d06:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f7ff ff59 	bl	8006bc0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d1e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d26:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006d2a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d2c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d32:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d36:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8006d38:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	e7fc      	b.n	8006d38 <HAL_UART_Init+0x58>

08006d3e <HAL_UART_Transmit>:
{
 8006d3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d42:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006d44:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006d48:	2b20      	cmp	r3, #32
{
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	460e      	mov	r6, r1
 8006d4e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006d50:	d13f      	bne.n	8006dd2 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d03f      	beq.n	8006dd6 <HAL_UART_Transmit+0x98>
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	d03d      	beq.n	8006dd6 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d5a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d60:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8006d64:	f7fd fdb6 	bl	80048d4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d68:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8006d6a:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8006d70:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8006d72:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d74:	d103      	bne.n	8006d7e <HAL_UART_Transmit+0x40>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	b90b      	cbnz	r3, 8006d7e <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 8006d7a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006d7c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8006d7e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	b953      	cbnz	r3, 8006d9a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d84:	4643      	mov	r3, r8
 8006d86:	464a      	mov	r2, r9
 8006d88:	2140      	movs	r1, #64	@ 0x40
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f7ff ff76 	bl	8006c7c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006d90:	2320      	movs	r3, #32
 8006d92:	b950      	cbnz	r0, 8006daa <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8006d94:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8006d98:	e00a      	b.n	8006db0 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d9a:	4643      	mov	r3, r8
 8006d9c:	464a      	mov	r2, r9
 8006d9e:	2180      	movs	r1, #128	@ 0x80
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7ff ff6b 	bl	8006c7c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8006da6:	b128      	cbz	r0, 8006db4 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8006da8:	2320      	movs	r3, #32
 8006daa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8006dae:	2003      	movs	r0, #3
}
 8006db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8006db6:	b94e      	cbnz	r6, 8006dcc <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dc0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8006dc2:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8006dc4:	3901      	subs	r1, #1
 8006dc6:	b289      	uxth	r1, r1
 8006dc8:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8006dca:	e7d8      	b.n	8006d7e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dcc:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006dd0:	e7f6      	b.n	8006dc0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8006dd2:	2002      	movs	r0, #2
 8006dd4:	e7ec      	b.n	8006db0 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	e7ea      	b.n	8006db0 <HAL_UART_Transmit+0x72>

08006dda <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006dde:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8006de2:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8006de6:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8006dea:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 8006dee:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006df2:	6809      	ldr	r1, [r1, #0]
 8006df4:	ea43 0308 	orr.w	r3, r3, r8
 8006df8:	b981      	cbnz	r1, 8006e1c <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006dfa:	ea43 030e 	orr.w	r3, r3, lr
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	ea43 030c 	orr.w	r3, r3, ip
 8006e04:	433b      	orrs	r3, r7
 8006e06:	6801      	ldr	r1, [r0, #0]
 8006e08:	4333      	orrs	r3, r6
 8006e0a:	432b      	orrs	r3, r5
 8006e0c:	4323      	orrs	r3, r4
 8006e0e:	f36f 010e 	bfc	r1, #0, #15
 8006e12:	430b      	orrs	r3, r1
 8006e14:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006e16:	2000      	movs	r0, #0
 8006e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e1c:	6801      	ldr	r1, [r0, #0]
 8006e1e:	ea43 030e 	orr.w	r3, r3, lr
 8006e22:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8006e26:	430b      	orrs	r3, r1
 8006e28:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e2a:	ea42 030c 	orr.w	r3, r2, ip
 8006e2e:	6841      	ldr	r1, [r0, #4]
 8006e30:	433b      	orrs	r3, r7
 8006e32:	4333      	orrs	r3, r6
 8006e34:	432b      	orrs	r3, r5
 8006e36:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8006e3a:	4323      	orrs	r3, r4
 8006e3c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8006e40:	4313      	orrs	r3, r2
 8006e42:	6043      	str	r3, [r0, #4]
 8006e44:	e7e7      	b.n	8006e16 <FMC_SDRAM_Init+0x3c>

08006e46 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e46:	68cb      	ldr	r3, [r1, #12]
 8006e48:	f103 3cff 	add.w	ip, r3, #4294967295
 8006e4c:	694b      	ldr	r3, [r1, #20]
{
 8006e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e50:	684c      	ldr	r4, [r1, #4]
 8006e52:	688f      	ldr	r7, [r1, #8]
 8006e54:	690e      	ldr	r6, [r1, #16]
 8006e56:	698d      	ldr	r5, [r1, #24]
 8006e58:	6809      	ldr	r1, [r1, #0]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	051b      	lsls	r3, r3, #20
 8006e5e:	3c01      	subs	r4, #1
 8006e60:	3f01      	subs	r7, #1
 8006e62:	3e01      	subs	r6, #1
 8006e64:	3d01      	subs	r5, #1
 8006e66:	0124      	lsls	r4, r4, #4
 8006e68:	023f      	lsls	r7, r7, #8
 8006e6a:	0436      	lsls	r6, r6, #16
 8006e6c:	062d      	lsls	r5, r5, #24
 8006e6e:	3901      	subs	r1, #1
 8006e70:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006e74:	b95a      	cbnz	r2, 8006e8e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e76:	430b      	orrs	r3, r1
 8006e78:	4323      	orrs	r3, r4
 8006e7a:	6882      	ldr	r2, [r0, #8]
 8006e7c:	433b      	orrs	r3, r7
 8006e7e:	4333      	orrs	r3, r6
 8006e80:	432b      	orrs	r3, r5
 8006e82:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006e86:	4313      	orrs	r3, r2
 8006e88:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e8e:	6882      	ldr	r2, [r0, #8]
 8006e90:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006e94:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006e9c:	ea44 0307 	orr.w	r3, r4, r7
 8006ea0:	68c2      	ldr	r2, [r0, #12]
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	4333      	orrs	r3, r6
 8006ea6:	432b      	orrs	r3, r5
 8006ea8:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60c3      	str	r3, [r0, #12]
 8006eb0:	e7eb      	b.n	8006e8a <FMC_SDRAM_Timing_Init+0x44>

08006eb2 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006eb2:	b570      	push	{r4, r5, r6, lr}
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006eb8:	6902      	ldr	r2, [r0, #16]
 8006eba:	e9d1 3000 	ldrd	r3, r0, [r1]
 8006ebe:	4303      	orrs	r3, r0
 8006ec0:	68c8      	ldr	r0, [r1, #12]
 8006ec2:	f36f 0215 	bfc	r2, #0, #22
 8006ec6:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	688a      	ldr	r2, [r1, #8]
 8006ece:	3a01      	subs	r2, #1
 8006ed0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006ed4:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006ed6:	f7fd fcfd 	bl	80048d4 <HAL_GetTick>
 8006eda:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006edc:	69a0      	ldr	r0, [r4, #24]
 8006ede:	f010 0020 	ands.w	r0, r0, #32
 8006ee2:	d003      	beq.n	8006eec <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee4:	1c6b      	adds	r3, r5, #1
 8006ee6:	d0f9      	beq.n	8006edc <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006ee8:	b90d      	cbnz	r5, 8006eee <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8006eea:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006eee:	f7fd fcf1 	bl	80048d4 <HAL_GetTick>
 8006ef2:	1b80      	subs	r0, r0, r6
 8006ef4:	42a8      	cmp	r0, r5
 8006ef6:	d9f1      	bls.n	8006edc <FMC_SDRAM_SendCommand+0x2a>
 8006ef8:	e7f7      	b.n	8006eea <FMC_SDRAM_SendCommand+0x38>

08006efa <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006efa:	6943      	ldr	r3, [r0, #20]
 8006efc:	f36f 034d 	bfc	r3, #1, #13
 8006f00:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006f04:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8006f06:	2000      	movs	r0, #0
 8006f08:	4770      	bx	lr

08006f0a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f0a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f10:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f12:	f001 fe83 	bl	8008c1c <xTaskGetSchedulerState>
 8006f16:	2801      	cmp	r0, #1
 8006f18:	d003      	beq.n	8006f22 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006f1e:	f000 bbf1 	b.w	8007704 <xPortSysTickHandler>
}
 8006f22:	bd08      	pop	{r3, pc}

08006f24 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f24:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f28:	b92b      	cbnz	r3, 8006f36 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f2a:	4b06      	ldr	r3, [pc, #24]	@ (8006f44 <osKernelInitialize+0x20>)
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	b928      	cbnz	r0, 8006f3c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f34:	4770      	bx	lr
    stat = osErrorISR;
 8006f36:	f06f 0005 	mvn.w	r0, #5
 8006f3a:	4770      	bx	lr
    } else {
      stat = osError;
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20004d98 	.word	0x20004d98

08006f48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f4e:	b95c      	cbnz	r4, 8006f68 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006f50:	4b08      	ldr	r3, [pc, #32]	@ (8006f74 <osKernelStart+0x2c>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	2a01      	cmp	r2, #1
 8006f56:	d10a      	bne.n	8006f6e <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f58:	4a07      	ldr	r2, [pc, #28]	@ (8006f78 <osKernelStart+0x30>)
 8006f5a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f60:	f001 fbd2 	bl	8008708 <vTaskStartScheduler>
      stat = osOK;
 8006f64:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006f66:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006f68:	f06f 0005 	mvn.w	r0, #5
 8006f6c:	e7fb      	b.n	8006f66 <osKernelStart+0x1e>
      stat = osError;
 8006f6e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006f72:	e7f8      	b.n	8006f66 <osKernelStart+0x1e>
 8006f74:	20004d98 	.word	0x20004d98
 8006f78:	e000ed00 	.word	0xe000ed00

08006f7c <osKernelGetTickCount>:
 8006f7c:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8006f80:	b10b      	cbz	r3, 8006f86 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8006f82:	f001 bc15 	b.w	80087b0 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8006f86:	f001 bc0d 	b.w	80087a4 <xTaskGetTickCount>

08006f8a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8c:	b087      	sub	sp, #28
 8006f8e:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f90:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f92:	460b      	mov	r3, r1
  hTask = NULL;
 8006f94:	9205      	str	r2, [sp, #20]
 8006f96:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006f9a:	b9fa      	cbnz	r2, 8006fdc <osThreadNew+0x52>
 8006f9c:	b1f0      	cbz	r0, 8006fdc <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006f9e:	b354      	cbz	r4, 8006ff6 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006fa0:	69a5      	ldr	r5, [r4, #24]
 8006fa2:	b125      	cbz	r5, 8006fae <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fa4:	1e69      	subs	r1, r5, #1
 8006fa6:	2937      	cmp	r1, #55	@ 0x37
 8006fa8:	d902      	bls.n	8006fb0 <osThreadNew+0x26>
        return (NULL);
 8006faa:	2000      	movs	r0, #0
 8006fac:	e017      	b.n	8006fde <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8006fae:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fb0:	6862      	ldr	r2, [r4, #4]
 8006fb2:	07d2      	lsls	r2, r2, #31
 8006fb4:	d4f9      	bmi.n	8006faa <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8006fb6:	6966      	ldr	r6, [r4, #20]
 8006fb8:	b19e      	cbz	r6, 8006fe2 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fba:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fbc:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 8006fc0:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fc2:	b187      	cbz	r7, 8006fe6 <osThreadNew+0x5c>
 8006fc4:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 8006fc8:	d908      	bls.n	8006fdc <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fca:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fcc:	b134      	cbz	r4, 8006fdc <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fce:	b12e      	cbz	r6, 8006fdc <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fd0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006fd4:	9500      	str	r5, [sp, #0]
 8006fd6:	f001 fad8 	bl	800858a <xTaskCreateStatic>
 8006fda:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fdc:	9805      	ldr	r0, [sp, #20]
}
 8006fde:	b007      	add	sp, #28
 8006fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006fe2:	2280      	movs	r2, #128	@ 0x80
 8006fe4:	e7ea      	b.n	8006fbc <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fe6:	f1bc 0f00 	cmp.w	ip, #0
 8006fea:	d1f7      	bne.n	8006fdc <osThreadNew+0x52>
 8006fec:	6924      	ldr	r4, [r4, #16]
 8006fee:	2c00      	cmp	r4, #0
 8006ff0:	d1f4      	bne.n	8006fdc <osThreadNew+0x52>
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	e001      	b.n	8006ffa <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8006ff6:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8006ff8:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ffa:	a905      	add	r1, sp, #20
 8006ffc:	e9cd 5100 	strd	r5, r1, [sp]
 8007000:	b292      	uxth	r2, r2
 8007002:	4621      	mov	r1, r4
 8007004:	f001 faf9 	bl	80085fa <xTaskCreate>
 8007008:	2801      	cmp	r0, #1
            hTask = NULL;
 800700a:	bf1c      	itt	ne
 800700c:	2300      	movne	r3, #0
 800700e:	9305      	strne	r3, [sp, #20]
 8007010:	e7e4      	b.n	8006fdc <osThreadNew+0x52>

08007012 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8007012:	b508      	push	{r3, lr}
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8007014:	2000      	movs	r0, #0
 8007016:	f001 fb1f 	bl	8008658 <vTaskDelete>
#endif
  for (;;);
 800701a:	e7fe      	b.n	800701a <osThreadExit+0x8>

0800701c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800701c:	b508      	push	{r3, lr}
 800701e:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007022:	b922      	cbnz	r2, 800702e <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8007024:	b108      	cbz	r0, 800702a <osDelay+0xe>
      vTaskDelay(ticks);
 8007026:	f001 fcd5 	bl	80089d4 <vTaskDelay>
    stat = osOK;
 800702a:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800702c:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800702e:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8007032:	e7fb      	b.n	800702c <osDelay+0x10>

08007034 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007036:	4604      	mov	r4, r0
 8007038:	460e      	mov	r6, r1
 800703a:	4615      	mov	r5, r2
 800703c:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007040:	b942      	cbnz	r2, 8007054 <osSemaphoreNew+0x20>
 8007042:	b138      	cbz	r0, 8007054 <osSemaphoreNew+0x20>
 8007044:	4288      	cmp	r0, r1
 8007046:	d305      	bcc.n	8007054 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8007048:	b155      	cbz	r5, 8007060 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800704a:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800704e:	b12b      	cbz	r3, 800705c <osSemaphoreNew+0x28>
 8007050:	2f4f      	cmp	r7, #79	@ 0x4f
 8007052:	d822      	bhi.n	800709a <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8007054:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007056:	4620      	mov	r0, r4
 8007058:	b003      	add	sp, #12
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800705c:	2f00      	cmp	r7, #0
 800705e:	d1f9      	bne.n	8007054 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8007060:	2c01      	cmp	r4, #1
 8007062:	d00c      	beq.n	800707e <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007064:	4620      	mov	r0, r4
 8007066:	4631      	mov	r1, r6
 8007068:	f000 fd84 	bl	8007b74 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800706c:	4604      	mov	r4, r0
 800706e:	2800      	cmp	r0, #0
 8007070:	d0f0      	beq.n	8007054 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8007072:	b985      	cbnz	r5, 8007096 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8007074:	4629      	mov	r1, r5
 8007076:	4620      	mov	r0, r4
 8007078:	f001 f8c2 	bl	8008200 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800707c:	e7eb      	b.n	8007056 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800707e:	2203      	movs	r2, #3
 8007080:	2100      	movs	r1, #0
 8007082:	2001      	movs	r0, #1
 8007084:	f000 fd2d 	bl	8007ae2 <xQueueGenericCreate>
 8007088:	e00e      	b.n	80070a8 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800708a:	461a      	mov	r2, r3
 800708c:	f000 fd50 	bl	8007b30 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007090:	4604      	mov	r4, r0
 8007092:	2800      	cmp	r0, #0
 8007094:	d0de      	beq.n	8007054 <osSemaphoreNew+0x20>
          name = attr->name;
 8007096:	682d      	ldr	r5, [r5, #0]
 8007098:	e7ec      	b.n	8007074 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800709a:	2801      	cmp	r0, #1
 800709c:	d1f5      	bne.n	800708a <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800709e:	2103      	movs	r1, #3
 80070a0:	9100      	str	r1, [sp, #0]
 80070a2:	4611      	mov	r1, r2
 80070a4:	f000 fccf 	bl	8007a46 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 80070a8:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d0d2      	beq.n	8007054 <osSemaphoreNew+0x20>
 80070ae:	2e00      	cmp	r6, #0
 80070b0:	d0df      	beq.n	8007072 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070b2:	2300      	movs	r3, #0
 80070b4:	461a      	mov	r2, r3
 80070b6:	4619      	mov	r1, r3
 80070b8:	f000 fd7a 	bl	8007bb0 <xQueueGenericSend>
 80070bc:	2801      	cmp	r0, #1
 80070be:	d0d8      	beq.n	8007072 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 80070c0:	4620      	mov	r0, r4
 80070c2:	f001 f8c7 	bl	8008254 <vQueueDelete>
      if (hSemaphore != NULL) {
 80070c6:	e7c5      	b.n	8007054 <osSemaphoreNew+0x20>

080070c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80070c8:	b513      	push	{r0, r1, r4, lr}
 80070ca:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80070cc:	b328      	cbz	r0, 800711a <osSemaphoreAcquire+0x52>
 80070ce:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80070d2:	b1cb      	cbz	r3, 8007108 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 80070d4:	bb09      	cbnz	r1, 800711a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80070d6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80070d8:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80070da:	f001 f824 	bl	8008126 <xQueueReceiveFromISR>
 80070de:	2801      	cmp	r0, #1
 80070e0:	d003      	beq.n	80070ea <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 80070e2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80070e6:	b002      	add	sp, #8
 80070e8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80070ea:	9b01      	ldr	r3, [sp, #4]
 80070ec:	b90b      	cbnz	r3, 80070f2 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 80070ee:	2000      	movs	r0, #0
 80070f0:	e7f9      	b.n	80070e6 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 80070f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80070f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	e7f2      	b.n	80070ee <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007108:	f000 ff50 	bl	8007fac <xQueueSemaphoreTake>
 800710c:	2801      	cmp	r0, #1
 800710e:	d0ee      	beq.n	80070ee <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8007110:	2c00      	cmp	r4, #0
 8007112:	d0e6      	beq.n	80070e2 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8007114:	f06f 0001 	mvn.w	r0, #1
 8007118:	e7e5      	b.n	80070e6 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800711a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800711e:	e7e2      	b.n	80070e6 <osSemaphoreAcquire+0x1e>

08007120 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007120:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007122:	b318      	cbz	r0, 800716c <osSemaphoreRelease+0x4c>
 8007124:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007128:	b1cb      	cbz	r3, 800715e <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800712a:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800712c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800712e:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007130:	f000 fe4d 	bl	8007dce <xQueueGiveFromISR>
 8007134:	2801      	cmp	r0, #1
 8007136:	d004      	beq.n	8007142 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8007138:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800713c:	b003      	add	sp, #12
 800713e:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	b14b      	cbz	r3, 800715a <osSemaphoreRelease+0x3a>
 8007146:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800714a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800714e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800715a:	2000      	movs	r0, #0
 800715c:	e7ee      	b.n	800713c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800715e:	461a      	mov	r2, r3
 8007160:	4619      	mov	r1, r3
 8007162:	f000 fd25 	bl	8007bb0 <xQueueGenericSend>
 8007166:	2801      	cmp	r0, #1
 8007168:	d0f7      	beq.n	800715a <osSemaphoreRelease+0x3a>
 800716a:	e7e5      	b.n	8007138 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800716c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007170:	e7e4      	b.n	800713c <osSemaphoreRelease+0x1c>

08007172 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8007172:	b130      	cbz	r0, 8007182 <osSemaphoreGetCount+0x10>
 8007174:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8007178:	b10b      	cbz	r3, 800717e <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800717a:	f001 b834 	b.w	80081e6 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800717e:	f001 b81f 	b.w	80081c0 <uxQueueMessagesWaiting>
  }

  return (count);
}
 8007182:	4770      	bx	lr

08007184 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007186:	4605      	mov	r5, r0
 8007188:	460e      	mov	r6, r1
 800718a:	4614      	mov	r4, r2
 800718c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007190:	b11f      	cbz	r7, 800719a <osMessageQueueNew+0x16>
  hQueue = NULL;
 8007192:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007194:	4628      	mov	r0, r5
 8007196:	b003      	add	sp, #12
 8007198:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800719a:	2800      	cmp	r0, #0
 800719c:	d0f9      	beq.n	8007192 <osMessageQueueNew+0xe>
 800719e:	2900      	cmp	r1, #0
 80071a0:	d0f7      	beq.n	8007192 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 80071a2:	b1da      	cbz	r2, 80071dc <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80071a4:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 80071a8:	b183      	cbz	r3, 80071cc <osMessageQueueNew+0x48>
 80071aa:	2a4f      	cmp	r2, #79	@ 0x4f
 80071ac:	d9f1      	bls.n	8007192 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071ae:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80071b0:	2a00      	cmp	r2, #0
 80071b2:	d0ee      	beq.n	8007192 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071b4:	6966      	ldr	r6, [r4, #20]
 80071b6:	434d      	muls	r5, r1
 80071b8:	42ae      	cmp	r6, r5
 80071ba:	d3ea      	bcc.n	8007192 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80071bc:	9700      	str	r7, [sp, #0]
 80071be:	f000 fc42 	bl	8007a46 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80071c2:	4605      	mov	r5, r0
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d0e4      	beq.n	8007192 <osMessageQueueNew+0xe>
        name = attr->name;
 80071c8:	6824      	ldr	r4, [r4, #0]
 80071ca:	e011      	b.n	80071f0 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	d1e0      	bne.n	8007192 <osMessageQueueNew+0xe>
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1dd      	bne.n	8007192 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071d6:	6963      	ldr	r3, [r4, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1da      	bne.n	8007192 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80071dc:	4628      	mov	r0, r5
 80071de:	2200      	movs	r2, #0
 80071e0:	4631      	mov	r1, r6
 80071e2:	f000 fc7e 	bl	8007ae2 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80071e6:	4605      	mov	r5, r0
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d0d2      	beq.n	8007192 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80071ec:	2c00      	cmp	r4, #0
 80071ee:	d1eb      	bne.n	80071c8 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f001 f804 	bl	8008200 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80071f8:	e7cc      	b.n	8007194 <osMessageQueueNew+0x10>

080071fa <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80071fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071fc:	461c      	mov	r4, r3
 80071fe:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007202:	b1de      	cbz	r6, 800723c <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007204:	b338      	cbz	r0, 8007256 <osMessageQueuePut+0x5c>
 8007206:	b331      	cbz	r1, 8007256 <osMessageQueuePut+0x5c>
 8007208:	bb2b      	cbnz	r3, 8007256 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800720a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800720c:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800720e:	f000 fd81 	bl	8007d14 <xQueueGenericSendFromISR>
 8007212:	2801      	cmp	r0, #1
 8007214:	d003      	beq.n	800721e <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8007216:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800721a:	b002      	add	sp, #8
 800721c:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	b90b      	cbnz	r3, 8007226 <osMessageQueuePut+0x2c>
  stat = osOK;
 8007222:	2000      	movs	r0, #0
 8007224:	e7f9      	b.n	800721a <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8007226:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800722a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800722e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	e7f2      	b.n	8007222 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800723c:	b158      	cbz	r0, 8007256 <osMessageQueuePut+0x5c>
 800723e:	b151      	cbz	r1, 8007256 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007240:	4633      	mov	r3, r6
 8007242:	4622      	mov	r2, r4
 8007244:	f000 fcb4 	bl	8007bb0 <xQueueGenericSend>
 8007248:	2801      	cmp	r0, #1
 800724a:	d0ea      	beq.n	8007222 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800724c:	2c00      	cmp	r4, #0
 800724e:	d0e2      	beq.n	8007216 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8007250:	f06f 0001 	mvn.w	r0, #1
 8007254:	e7e1      	b.n	800721a <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8007256:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800725a:	e7de      	b.n	800721a <osMessageQueuePut+0x20>

0800725c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800725c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800725e:	461c      	mov	r4, r3
 8007260:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007264:	b1db      	cbz	r3, 800729e <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007266:	b330      	cbz	r0, 80072b6 <osMessageQueueGet+0x5a>
 8007268:	b329      	cbz	r1, 80072b6 <osMessageQueueGet+0x5a>
 800726a:	bb24      	cbnz	r4, 80072b6 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800726c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800726e:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007270:	f000 ff59 	bl	8008126 <xQueueReceiveFromISR>
 8007274:	2801      	cmp	r0, #1
 8007276:	d003      	beq.n	8007280 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8007278:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800727c:	b003      	add	sp, #12
 800727e:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8007280:	9b01      	ldr	r3, [sp, #4]
 8007282:	b90b      	cbnz	r3, 8007288 <osMessageQueueGet+0x2c>
  stat = osOK;
 8007284:	2000      	movs	r0, #0
 8007286:	e7f9      	b.n	800727c <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8007288:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800728c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007290:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	e7f2      	b.n	8007284 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800729e:	b150      	cbz	r0, 80072b6 <osMessageQueueGet+0x5a>
 80072a0:	b149      	cbz	r1, 80072b6 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80072a2:	4622      	mov	r2, r4
 80072a4:	f000 fde4 	bl	8007e70 <xQueueReceive>
 80072a8:	2801      	cmp	r0, #1
 80072aa:	d0eb      	beq.n	8007284 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 80072ac:	2c00      	cmp	r4, #0
 80072ae:	d0e3      	beq.n	8007278 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 80072b0:	f06f 0001 	mvn.w	r0, #1
 80072b4:	e7e2      	b.n	800727c <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 80072b6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80072ba:	e7df      	b.n	800727c <osMessageQueueGet+0x20>

080072bc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80072bc:	f7ff bf59 	b.w	8007172 <osSemaphoreGetCount>

080072c0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072c0:	4b03      	ldr	r3, [pc, #12]	@ (80072d0 <vApplicationGetIdleTaskMemory+0x10>)
 80072c2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80072c4:	4b03      	ldr	r3, [pc, #12]	@ (80072d4 <vApplicationGetIdleTaskMemory+0x14>)
 80072c6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072c8:	2380      	movs	r3, #128	@ 0x80
 80072ca:	6013      	str	r3, [r2, #0]
}
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20004d38 	.word	0x20004d38
 80072d4:	20004b38 	.word	0x20004b38

080072d8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072d8:	4b03      	ldr	r3, [pc, #12]	@ (80072e8 <vApplicationGetTimerTaskMemory+0x10>)
 80072da:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072dc:	4b03      	ldr	r3, [pc, #12]	@ (80072ec <vApplicationGetTimerTaskMemory+0x14>)
 80072de:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072e4:	6013      	str	r3, [r2, #0]
}
 80072e6:	4770      	bx	lr
 80072e8:	20004ad8 	.word	0x20004ad8
 80072ec:	200046d8 	.word	0x200046d8

080072f0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072f0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <prvInsertBlockIntoFreeList+0x44>)
 80072f4:	461a      	mov	r2, r3
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4283      	cmp	r3, r0
 80072fa:	d3fb      	bcc.n	80072f4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072fc:	6854      	ldr	r4, [r2, #4]
 80072fe:	1911      	adds	r1, r2, r4
 8007300:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007302:	bf01      	itttt	eq
 8007304:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 8007306:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007308:	1909      	addeq	r1, r1, r4
 800730a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800730c:	6844      	ldr	r4, [r0, #4]
 800730e:	1901      	adds	r1, r0, r4
 8007310:	428b      	cmp	r3, r1
 8007312:	d10c      	bne.n	800732e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007314:	4908      	ldr	r1, [pc, #32]	@ (8007338 <prvInsertBlockIntoFreeList+0x48>)
 8007316:	6809      	ldr	r1, [r1, #0]
 8007318:	428b      	cmp	r3, r1
 800731a:	d003      	beq.n	8007324 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800731c:	6859      	ldr	r1, [r3, #4]
 800731e:	4421      	add	r1, r4
 8007320:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007322:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007324:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007326:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007328:	bf18      	it	ne
 800732a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800732c:	bd10      	pop	{r4, pc}
 800732e:	4619      	mov	r1, r3
 8007330:	e7f8      	b.n	8007324 <prvInsertBlockIntoFreeList+0x34>
 8007332:	bf00      	nop
 8007334:	20004db4 	.word	0x20004db4
 8007338:	20004db0 	.word	0x20004db0

0800733c <pvPortMalloc>:
{
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007342:	f001 fa27 	bl	8008794 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007346:	4942      	ldr	r1, [pc, #264]	@ (8007450 <pvPortMalloc+0x114>)
 8007348:	4d42      	ldr	r5, [pc, #264]	@ (8007454 <pvPortMalloc+0x118>)
 800734a:	680b      	ldr	r3, [r1, #0]
 800734c:	bb0b      	cbnz	r3, 8007392 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800734e:	4a42      	ldr	r2, [pc, #264]	@ (8007458 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007350:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007352:	bf1f      	itttt	ne
 8007354:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007356:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800735a:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 800735e:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007360:	bf0c      	ite	eq
 8007362:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007366:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007368:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800736a:	4e3c      	ldr	r6, [pc, #240]	@ (800745c <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 800736c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800736e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007372:	2000      	movs	r0, #0
 8007374:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007376:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007378:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800737c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800737e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007382:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007384:	4b36      	ldr	r3, [pc, #216]	@ (8007460 <pvPortMalloc+0x124>)
 8007386:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007388:	4b36      	ldr	r3, [pc, #216]	@ (8007464 <pvPortMalloc+0x128>)
 800738a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800738c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007390:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007392:	682e      	ldr	r6, [r5, #0]
 8007394:	4226      	tst	r6, r4
 8007396:	d155      	bne.n	8007444 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8007398:	2c00      	cmp	r4, #0
 800739a:	d046      	beq.n	800742a <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800739c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073a0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073a2:	bf1c      	itt	ne
 80073a4:	f023 0307 	bicne.w	r3, r3, #7
 80073a8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d04a      	beq.n	8007444 <pvPortMalloc+0x108>
 80073ae:	4f2d      	ldr	r7, [pc, #180]	@ (8007464 <pvPortMalloc+0x128>)
 80073b0:	683c      	ldr	r4, [r7, #0]
 80073b2:	429c      	cmp	r4, r3
 80073b4:	d346      	bcc.n	8007444 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 80073b6:	4a29      	ldr	r2, [pc, #164]	@ (800745c <pvPortMalloc+0x120>)
 80073b8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ba:	6868      	ldr	r0, [r5, #4]
 80073bc:	4298      	cmp	r0, r3
 80073be:	d204      	bcs.n	80073ca <pvPortMalloc+0x8e>
 80073c0:	f8d5 c000 	ldr.w	ip, [r5]
 80073c4:	f1bc 0f00 	cmp.w	ip, #0
 80073c8:	d115      	bne.n	80073f6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80073ca:	6809      	ldr	r1, [r1, #0]
 80073cc:	42a9      	cmp	r1, r5
 80073ce:	d039      	beq.n	8007444 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073d0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073d2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073d6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d8:	1ac2      	subs	r2, r0, r3
 80073da:	2a10      	cmp	r2, #16
 80073dc:	d912      	bls.n	8007404 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073de:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073e0:	0741      	lsls	r1, r0, #29
 80073e2:	d00b      	beq.n	80073fc <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	e7fe      	b.n	80073f4 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 80073f6:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80073f8:	4665      	mov	r5, ip
 80073fa:	e7de      	b.n	80073ba <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073fc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073fe:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007400:	f7ff ff76 	bl	80072f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007404:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007406:	4916      	ldr	r1, [pc, #88]	@ (8007460 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007408:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800740a:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 800740c:	4a16      	ldr	r2, [pc, #88]	@ (8007468 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800740e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007410:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8007416:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007418:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800741a:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 800741c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007420:	bf38      	it	cc
 8007422:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8007424:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007426:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800742a:	f001 fa5f 	bl	80088ec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800742e:	0763      	lsls	r3, r4, #29
 8007430:	d00a      	beq.n	8007448 <pvPortMalloc+0x10c>
 8007432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	e7fe      	b.n	8007442 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8007444:	2400      	movs	r4, #0
 8007446:	e7f0      	b.n	800742a <pvPortMalloc+0xee>
}
 8007448:	4620      	mov	r0, r4
 800744a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744e:	bf00      	nop
 8007450:	20004db0 	.word	0x20004db0
 8007454:	20004d9c 	.word	0x20004d9c
 8007458:	20004dbc 	.word	0x20004dbc
 800745c:	20004db4 	.word	0x20004db4
 8007460:	20004da8 	.word	0x20004da8
 8007464:	20004dac 	.word	0x20004dac
 8007468:	20004da4 	.word	0x20004da4

0800746c <vPortFree>:
{
 800746c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800746e:	4604      	mov	r4, r0
 8007470:	b390      	cbz	r0, 80074d8 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007472:	4a1a      	ldr	r2, [pc, #104]	@ (80074dc <vPortFree+0x70>)
 8007474:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	4213      	tst	r3, r2
 800747c:	d108      	bne.n	8007490 <vPortFree+0x24>
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	e7fe      	b.n	800748e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007490:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007494:	b141      	cbz	r1, 80074a8 <vPortFree+0x3c>
 8007496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	e7fe      	b.n	80074a6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074a8:	ea23 0302 	bic.w	r3, r3, r2
 80074ac:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80074b0:	f001 f970 	bl	8008794 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074b4:	4a0a      	ldr	r2, [pc, #40]	@ (80074e0 <vPortFree+0x74>)
 80074b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80074ba:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074bc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074c0:	440b      	add	r3, r1
 80074c2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074c4:	f7ff ff14 	bl	80072f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074c8:	4a06      	ldr	r2, [pc, #24]	@ (80074e4 <vPortFree+0x78>)
 80074ca:	6813      	ldr	r3, [r2, #0]
}
 80074cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80074d0:	3301      	adds	r3, #1
 80074d2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80074d4:	f001 ba0a 	b.w	80088ec <xTaskResumeAll>
}
 80074d8:	bd10      	pop	{r4, pc}
 80074da:	bf00      	nop
 80074dc:	20004d9c 	.word	0x20004d9c
 80074e0:	20004dac 	.word	0x20004dac
 80074e4:	20004da0 	.word	0x20004da0

080074e8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074e8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074ec:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f4:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074fc:	4770      	bx	lr

080074fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007502:	4770      	bx	lr

08007504 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007504:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007506:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800750c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800750e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007510:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007512:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007514:	3301      	adds	r3, #1
 8007516:	6003      	str	r3, [r0, #0]
}
 8007518:	4770      	bx	lr

0800751a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800751a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800751c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800751e:	1c63      	adds	r3, r4, #1
 8007520:	d10a      	bne.n	8007538 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007522:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007528:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800752a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800752c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800752e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007530:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007532:	3301      	adds	r3, #1
 8007534:	6003      	str	r3, [r0, #0]
}
 8007536:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007538:	f100 0208 	add.w	r2, r0, #8
 800753c:	4613      	mov	r3, r2
 800753e:	6852      	ldr	r2, [r2, #4]
 8007540:	6815      	ldr	r5, [r2, #0]
 8007542:	42a5      	cmp	r5, r4
 8007544:	d9fa      	bls.n	800753c <vListInsert+0x22>
 8007546:	e7ed      	b.n	8007524 <vListInsert+0xa>

08007548 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007548:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800754c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800754e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007550:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007552:	6859      	ldr	r1, [r3, #4]
 8007554:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007556:	bf08      	it	eq
 8007558:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800755a:	2200      	movs	r2, #0
 800755c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	3a01      	subs	r2, #1
 8007562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007564:	6818      	ldr	r0, [r3, #0]
}
 8007566:	4770      	bx	lr

08007568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007568:	4808      	ldr	r0, [pc, #32]	@ (800758c <prvPortStartFirstTask+0x24>)
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f380 8808 	msr	MSP, r0
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8814 	msr	CONTROL, r0
 800757a:	b662      	cpsie	i
 800757c:	b661      	cpsie	f
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	df00      	svc	0
 8007588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800758a:	0000      	.short	0x0000
 800758c:	e000ed08 	.word	0xe000ed08

08007590 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007590:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075a0 <vPortEnableVFP+0x10>
 8007594:	6801      	ldr	r1, [r0, #0]
 8007596:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800759a:	6001      	str	r1, [r0, #0]
 800759c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800759e:	0000      	.short	0x0000
 80075a0:	e000ed88 	.word	0xe000ed88

080075a4 <prvTaskExitError>:
{
 80075a4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80075aa:	4b0d      	ldr	r3, [pc, #52]	@ (80075e0 <prvTaskExitError+0x3c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	d008      	beq.n	80075c4 <prvTaskExitError+0x20>
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	e7fe      	b.n	80075c2 <prvTaskExitError+0x1e>
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80075d4:	9b01      	ldr	r3, [sp, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0fc      	beq.n	80075d4 <prvTaskExitError+0x30>
}
 80075da:	b002      	add	sp, #8
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000080 	.word	0x20000080

080075e4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075e8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075ec:	4b07      	ldr	r3, [pc, #28]	@ (800760c <pxPortInitialiseStack+0x28>)
 80075ee:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075f2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075f6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075fa:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075fe:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007602:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007606:	3844      	subs	r0, #68	@ 0x44
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	080075a5 	.word	0x080075a5

08007610 <SVC_Handler>:
	__asm volatile (
 8007610:	4b07      	ldr	r3, [pc, #28]	@ (8007630 <pxCurrentTCBConst2>)
 8007612:	6819      	ldr	r1, [r3, #0]
 8007614:	6808      	ldr	r0, [r1, #0]
 8007616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	f380 8809 	msr	PSP, r0
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8811 	msr	BASEPRI, r0
 800762a:	4770      	bx	lr
 800762c:	f3af 8000 	nop.w

08007630 <pxCurrentTCBConst2>:
 8007630:	200152fc 	.word	0x200152fc

08007634 <vPortEnterCritical>:
 8007634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007644:	4a0a      	ldr	r2, [pc, #40]	@ (8007670 <vPortEnterCritical+0x3c>)
 8007646:	6813      	ldr	r3, [r2, #0]
 8007648:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800764a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800764c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800764e:	d10e      	bne.n	800766e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007650:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007654:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007658:	b2db      	uxtb	r3, r3
 800765a:	b143      	cbz	r3, 800766e <vPortEnterCritical+0x3a>
 800765c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	e7fe      	b.n	800766c <vPortEnterCritical+0x38>
}
 800766e:	4770      	bx	lr
 8007670:	20000080 	.word	0x20000080

08007674 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007674:	4a08      	ldr	r2, [pc, #32]	@ (8007698 <vPortExitCritical+0x24>)
 8007676:	6813      	ldr	r3, [r2, #0]
 8007678:	b943      	cbnz	r3, 800768c <vPortExitCritical+0x18>
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	e7fe      	b.n	800768a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800768c:	3b01      	subs	r3, #1
 800768e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007690:	b90b      	cbnz	r3, 8007696 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007692:	f383 8811 	msr	BASEPRI, r3
}
 8007696:	4770      	bx	lr
 8007698:	20000080 	.word	0x20000080
 800769c:	00000000 	.word	0x00000000

080076a0 <PendSV_Handler>:
	__asm volatile
 80076a0:	f3ef 8009 	mrs	r0, PSP
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4b15      	ldr	r3, [pc, #84]	@ (8007700 <pxCurrentTCBConst>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	f01e 0f10 	tst.w	lr, #16
 80076b0:	bf08      	it	eq
 80076b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	6010      	str	r0, [r2, #0]
 80076bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076c4:	f380 8811 	msr	BASEPRI, r0
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f001 f9a4 	bl	8008a1c <vTaskSwitchContext>
 80076d4:	f04f 0000 	mov.w	r0, #0
 80076d8:	f380 8811 	msr	BASEPRI, r0
 80076dc:	bc09      	pop	{r0, r3}
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	6808      	ldr	r0, [r1, #0]
 80076e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e6:	f01e 0f10 	tst.w	lr, #16
 80076ea:	bf08      	it	eq
 80076ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076f0:	f380 8809 	msr	PSP, r0
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w

08007700 <pxCurrentTCBConst>:
 8007700:	200152fc 	.word	0x200152fc

08007704 <xPortSysTickHandler>:
{
 8007704:	b508      	push	{r3, lr}
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007716:	f001 f853 	bl	80087c0 <xTaskIncrementTick>
 800771a:	b128      	cbz	r0, 8007728 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800771c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007724:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007728:	2300      	movs	r3, #0
 800772a:	f383 8811 	msr	BASEPRI, r3
}
 800772e:	bd08      	pop	{r3, pc}

08007730 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007730:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007734:	2300      	movs	r3, #0
 8007736:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007738:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800773a:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <vPortSetupTimerInterrupt+0x20>)
 800773c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	fbb3 f3f1 	udiv	r3, r3, r1
 8007746:	3b01      	subs	r3, #1
 8007748:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800774a:	2307      	movs	r3, #7
 800774c:	6113      	str	r3, [r2, #16]
}
 800774e:	4770      	bx	lr
 8007750:	20000074 	.word	0x20000074

08007754 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007754:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8007758:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800775a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800775e:	4a38      	ldr	r2, [pc, #224]	@ (8007840 <xPortStartScheduler+0xec>)
 8007760:	4291      	cmp	r1, r2
 8007762:	d108      	bne.n	8007776 <xPortStartScheduler+0x22>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	e7fe      	b.n	8007774 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007776:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800777a:	4b32      	ldr	r3, [pc, #200]	@ (8007844 <xPortStartScheduler+0xf0>)
 800777c:	429a      	cmp	r2, r3
 800777e:	d108      	bne.n	8007792 <xPortStartScheduler+0x3e>
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	e7fe      	b.n	8007790 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007792:	4b2d      	ldr	r3, [pc, #180]	@ (8007848 <xPortStartScheduler+0xf4>)
 8007794:	781a      	ldrb	r2, [r3, #0]
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800779a:	22ff      	movs	r2, #255	@ 0xff
 800779c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800779e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077a0:	4a2a      	ldr	r2, [pc, #168]	@ (800784c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80077ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077b0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077b2:	4a27      	ldr	r2, [pc, #156]	@ (8007850 <xPortStartScheduler+0xfc>)
 80077b4:	2307      	movs	r3, #7
 80077b6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077b8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80077bc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077be:	0609      	lsls	r1, r1, #24
 80077c0:	d40a      	bmi.n	80077d8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d011      	beq.n	80077ea <xPortStartScheduler+0x96>
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	e7fe      	b.n	80077d6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80077d8:	3b01      	subs	r3, #1
 80077da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f88d 3003 	strb.w	r3, [sp, #3]
 80077e8:	e7e6      	b.n	80077b8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80077ee:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	4a15      	ldr	r2, [pc, #84]	@ (8007848 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077f4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077fc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007804:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007808:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800780c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007810:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007814:	f7ff ff8c 	bl	8007730 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007818:	4b0e      	ldr	r3, [pc, #56]	@ (8007854 <xPortStartScheduler+0x100>)
 800781a:	2500      	movs	r5, #0
 800781c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800781e:	f7ff feb7 	bl	8007590 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007822:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007826:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800782a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800782e:	f7ff fe9b 	bl	8007568 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007832:	f001 f8f3 	bl	8008a1c <vTaskSwitchContext>
	prvTaskExitError();
 8007836:	f7ff feb5 	bl	80075a4 <prvTaskExitError>
}
 800783a:	4628      	mov	r0, r5
 800783c:	b003      	add	sp, #12
 800783e:	bd30      	pop	{r4, r5, pc}
 8007840:	410fc271 	.word	0x410fc271
 8007844:	410fc270 	.word	0x410fc270
 8007848:	e000e400 	.word	0xe000e400
 800784c:	20014dc0 	.word	0x20014dc0
 8007850:	20014dbc 	.word	0x20014dbc
 8007854:	20000080 	.word	0x20000080

08007858 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007858:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800785c:	2b0f      	cmp	r3, #15
 800785e:	d90e      	bls.n	800787e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007860:	4a11      	ldr	r2, [pc, #68]	@ (80078a8 <vPortValidateInterruptPriority+0x50>)
 8007862:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007864:	4a11      	ldr	r2, [pc, #68]	@ (80078ac <vPortValidateInterruptPriority+0x54>)
 8007866:	7812      	ldrb	r2, [r2, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d908      	bls.n	800787e <vPortValidateInterruptPriority+0x26>
 800786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	e7fe      	b.n	800787c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800787e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007882:	4a0b      	ldr	r2, [pc, #44]	@ (80078b0 <vPortValidateInterruptPriority+0x58>)
 8007884:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800788e:	4293      	cmp	r3, r2
 8007890:	d908      	bls.n	80078a4 <vPortValidateInterruptPriority+0x4c>
 8007892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	e7fe      	b.n	80078a2 <vPortValidateInterruptPriority+0x4a>
	}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	e000e3f0 	.word	0xe000e3f0
 80078ac:	20014dc0 	.word	0x20014dc0
 80078b0:	20014dbc 	.word	0x20014dbc

080078b4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078b4:	b510      	push	{r4, lr}
 80078b6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078b8:	f7ff febc 	bl	8007634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078bc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80078be:	f7ff fed9 	bl	8007674 <vPortExitCritical>

	return xReturn;
}
 80078c2:	fab4 f084 	clz	r0, r4
 80078c6:	0940      	lsrs	r0, r0, #5
 80078c8:	bd10      	pop	{r4, pc}

080078ca <prvCopyDataToQueue>:
{
 80078ca:	b570      	push	{r4, r5, r6, lr}
 80078cc:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078ce:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078d0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80078d2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078d4:	b942      	cbnz	r2, 80078e8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078d6:	6806      	ldr	r6, [r0, #0]
 80078d8:	b99e      	cbnz	r6, 8007902 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078da:	6880      	ldr	r0, [r0, #8]
 80078dc:	f001 f9ec 	bl	8008cb8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078e0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078e2:	3501      	adds	r5, #1
 80078e4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80078e8:	b96e      	cbnz	r6, 8007906 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078ea:	6840      	ldr	r0, [r0, #4]
 80078ec:	f00b fb9d 	bl	801302a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80078f4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078f6:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078f8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078fa:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078fc:	bf24      	itt	cs
 80078fe:	6823      	ldrcs	r3, [r4, #0]
 8007900:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007902:	2000      	movs	r0, #0
 8007904:	e7ed      	b.n	80078e2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007906:	68c0      	ldr	r0, [r0, #12]
 8007908:	f00b fb8f 	bl	801302a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800790c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800790e:	68e3      	ldr	r3, [r4, #12]
 8007910:	4251      	negs	r1, r2
 8007912:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007914:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007916:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007918:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800791a:	bf3e      	ittt	cc
 800791c:	68a3      	ldrcc	r3, [r4, #8]
 800791e:	185b      	addcc	r3, r3, r1
 8007920:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007922:	2e02      	cmp	r6, #2
 8007924:	d1ed      	bne.n	8007902 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007926:	b10d      	cbz	r5, 800792c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007928:	3d01      	subs	r5, #1
 800792a:	e7ea      	b.n	8007902 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800792c:	4628      	mov	r0, r5
 800792e:	e7d8      	b.n	80078e2 <prvCopyDataToQueue+0x18>

08007930 <prvCopyDataFromQueue>:
{
 8007930:	4603      	mov	r3, r0
 8007932:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007934:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007936:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007938:	b16a      	cbz	r2, 8007956 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800793a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800793c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800793e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007940:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007942:	bf28      	it	cs
 8007944:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007946:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007948:	bf28      	it	cs
 800794a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800794c:	68d9      	ldr	r1, [r3, #12]
}
 800794e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007952:	f00b bb6a 	b.w	801302a <memcpy>
}
 8007956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800795a:	4770      	bx	lr

0800795c <prvUnlockQueue>:
{
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007960:	f7ff fe68 	bl	8007634 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007964:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007968:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800796c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800796e:	2d00      	cmp	r5, #0
 8007970:	dd01      	ble.n	8007976 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007972:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007974:	b9b3      	cbnz	r3, 80079a4 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8007976:	23ff      	movs	r3, #255	@ 0xff
 8007978:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800797c:	f7ff fe7a 	bl	8007674 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007980:	f7ff fe58 	bl	8007634 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007984:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007988:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800798c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800798e:	2d00      	cmp	r5, #0
 8007990:	dd01      	ble.n	8007996 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007992:	6923      	ldr	r3, [r4, #16]
 8007994:	b97b      	cbnz	r3, 80079b6 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8007996:	23ff      	movs	r3, #255	@ 0xff
 8007998:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800799c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80079a0:	f7ff be68 	b.w	8007674 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079a4:	4630      	mov	r0, r6
 80079a6:	f001 f8ab 	bl	8008b00 <xTaskRemoveFromEventList>
 80079aa:	b108      	cbz	r0, 80079b0 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 80079ac:	f001 f930 	bl	8008c10 <vTaskMissedYield>
			--cTxLock;
 80079b0:	3d01      	subs	r5, #1
 80079b2:	b26d      	sxtb	r5, r5
 80079b4:	e7db      	b.n	800796e <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b6:	4630      	mov	r0, r6
 80079b8:	f001 f8a2 	bl	8008b00 <xTaskRemoveFromEventList>
 80079bc:	b108      	cbz	r0, 80079c2 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 80079be:	f001 f927 	bl	8008c10 <vTaskMissedYield>
				--cRxLock;
 80079c2:	3d01      	subs	r5, #1
 80079c4:	b26d      	sxtb	r5, r5
 80079c6:	e7e2      	b.n	800798e <prvUnlockQueue+0x32>

080079c8 <xQueueGenericReset>:
{
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80079cc:	4604      	mov	r4, r0
 80079ce:	b940      	cbnz	r0, 80079e2 <xQueueGenericReset+0x1a>
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	e7fe      	b.n	80079e0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80079e2:	f7ff fe27 	bl	8007634 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079e6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 80079ea:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079ec:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079ee:	434b      	muls	r3, r1
 80079f0:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079f2:	1a5b      	subs	r3, r3, r1
 80079f4:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079f6:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80079f8:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079fa:	2000      	movs	r0, #0
 80079fc:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079fe:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a00:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a04:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007a08:	b9a5      	cbnz	r5, 8007a34 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	b173      	cbz	r3, 8007a2c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a0e:	f104 0010 	add.w	r0, r4, #16
 8007a12:	f001 f875 	bl	8008b00 <xTaskRemoveFromEventList>
 8007a16:	b148      	cbz	r0, 8007a2c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007a18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a20:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007a2c:	f7ff fe22 	bl	8007674 <vPortExitCritical>
}
 8007a30:	2001      	movs	r0, #1
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a34:	f104 0010 	add.w	r0, r4, #16
 8007a38:	f7ff fd56 	bl	80074e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a3c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a40:	f7ff fd52 	bl	80074e8 <vListInitialise>
 8007a44:	e7f2      	b.n	8007a2c <xQueueGenericReset+0x64>

08007a46 <xQueueGenericCreateStatic>:
	{
 8007a46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a48:	460d      	mov	r5, r1
 8007a4a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a4c:	b940      	cbnz	r0, 8007a60 <xQueueGenericCreateStatic+0x1a>
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	e7fe      	b.n	8007a5e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007a60:	b943      	cbnz	r3, 8007a74 <xQueueGenericCreateStatic+0x2e>
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	e7fe      	b.n	8007a72 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a74:	b14a      	cbz	r2, 8007a8a <xQueueGenericCreateStatic+0x44>
 8007a76:	b991      	cbnz	r1, 8007a9e <xQueueGenericCreateStatic+0x58>
 8007a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a8a:	b141      	cbz	r1, 8007a9e <xQueueGenericCreateStatic+0x58>
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	e7fe      	b.n	8007a9c <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a9e:	2350      	movs	r3, #80	@ 0x50
 8007aa0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	2b50      	cmp	r3, #80	@ 0x50
 8007aa6:	d008      	beq.n	8007aba <xQueueGenericCreateStatic+0x74>
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	e7fe      	b.n	8007ab8 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007aba:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	bf08      	it	eq
 8007ac0:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007ac2:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ac6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8007aca:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007acc:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ace:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ad0:	f7ff ff7a 	bl	80079c8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007ad4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007ad8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8007adc:	4620      	mov	r0, r4
 8007ade:	b003      	add	sp, #12
 8007ae0:	bd30      	pop	{r4, r5, pc}

08007ae2 <xQueueGenericCreate>:
	{
 8007ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ae8:	4606      	mov	r6, r0
 8007aea:	b940      	cbnz	r0, 8007afe <xQueueGenericCreate+0x1c>
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	e7fe      	b.n	8007afc <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007afe:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b00:	3050      	adds	r0, #80	@ 0x50
 8007b02:	f7ff fc1b 	bl	800733c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007b06:	4604      	mov	r4, r0
 8007b08:	b170      	cbz	r0, 8007b28 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b10:	b165      	cbz	r5, 8007b2c <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b12:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8007b16:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8007b1a:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f7ff ff52 	bl	80079c8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007b24:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8007b28:	4620      	mov	r0, r4
 8007b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	e7f2      	b.n	8007b16 <xQueueGenericCreate+0x34>

08007b30 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007b30:	b513      	push	{r0, r1, r4, lr}
 8007b32:	4613      	mov	r3, r2
 8007b34:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007b36:	b940      	cbnz	r0, 8007b4a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8007b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	e7fe      	b.n	8007b48 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b4a:	4288      	cmp	r0, r1
 8007b4c:	d208      	bcs.n	8007b60 <xQueueCreateCountingSemaphoreStatic+0x30>
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	e7fe      	b.n	8007b5e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b60:	2202      	movs	r2, #2
 8007b62:	9200      	str	r2, [sp, #0]
 8007b64:	2200      	movs	r2, #0
 8007b66:	4611      	mov	r1, r2
 8007b68:	f7ff ff6d 	bl	8007a46 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007b6c:	b100      	cbz	r0, 8007b70 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007b6e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007b70:	b002      	add	sp, #8
 8007b72:	bd10      	pop	{r4, pc}

08007b74 <xQueueCreateCountingSemaphore>:
	{
 8007b74:	b510      	push	{r4, lr}
 8007b76:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007b78:	b940      	cbnz	r0, 8007b8c <xQueueCreateCountingSemaphore+0x18>
 8007b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	e7fe      	b.n	8007b8a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b8c:	4288      	cmp	r0, r1
 8007b8e:	d208      	bcs.n	8007ba2 <xQueueCreateCountingSemaphore+0x2e>
 8007b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	e7fe      	b.n	8007ba0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	f7ff ff9c 	bl	8007ae2 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007baa:	b100      	cbz	r0, 8007bae <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007bac:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007bae:	bd10      	pop	{r4, pc}

08007bb0 <xQueueGenericSend>:
{
 8007bb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	9201      	str	r2, [sp, #4]
 8007bb8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007bba:	4604      	mov	r4, r0
 8007bbc:	b940      	cbnz	r0, 8007bd0 <xQueueGenericSend+0x20>
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	e7fe      	b.n	8007bce <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd0:	b951      	cbnz	r1, 8007be8 <xQueueGenericSend+0x38>
 8007bd2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007bd4:	b143      	cbz	r3, 8007be8 <xQueueGenericSend+0x38>
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	e7fe      	b.n	8007be6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007be8:	2e02      	cmp	r6, #2
 8007bea:	d10b      	bne.n	8007c04 <xQueueGenericSend+0x54>
 8007bec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d008      	beq.n	8007c04 <xQueueGenericSend+0x54>
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	e7fe      	b.n	8007c02 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c04:	f001 f80a 	bl	8008c1c <xTaskGetSchedulerState>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	b320      	cbz	r0, 8007c56 <xQueueGenericSend+0xa6>
 8007c0c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007c0e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007c12:	f7ff fd0f 	bl	8007634 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c16:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007c18:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d227      	bcs.n	8007c6e <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c1e:	4632      	mov	r2, r6
 8007c20:	4639      	mov	r1, r7
 8007c22:	4620      	mov	r0, r4
 8007c24:	f7ff fe51 	bl	80078ca <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c2a:	b11b      	cbz	r3, 8007c34 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c2c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007c30:	f000 ff66 	bl	8008b00 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007c34:	b148      	cbz	r0, 8007c4a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8007c36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007c4a:	f7ff fd13 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 8007c4e:	2001      	movs	r0, #1
}
 8007c50:	b004      	add	sp, #16
 8007c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c56:	9b01      	ldr	r3, [sp, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0d8      	beq.n	8007c0e <xQueueGenericSend+0x5e>
 8007c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	e7fe      	b.n	8007c6c <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c6e:	2e02      	cmp	r6, #2
 8007c70:	d0d5      	beq.n	8007c1e <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c72:	9b01      	ldr	r3, [sp, #4]
 8007c74:	b91b      	cbnz	r3, 8007c7e <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007c76:	f7ff fcfd 	bl	8007674 <vPortExitCritical>
					return errQUEUE_FULL;
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	e7e8      	b.n	8007c50 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 8007c7e:	b915      	cbnz	r5, 8007c86 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c80:	a802      	add	r0, sp, #8
 8007c82:	f000 ff7d 	bl	8008b80 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007c86:	f7ff fcf5 	bl	8007674 <vPortExitCritical>
		vTaskSuspendAll();
 8007c8a:	f000 fd83 	bl	8008794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c8e:	f7ff fcd1 	bl	8007634 <vPortEnterCritical>
 8007c92:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007c96:	2bff      	cmp	r3, #255	@ 0xff
 8007c98:	bf08      	it	eq
 8007c9a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007c9e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007ca2:	2bff      	cmp	r3, #255	@ 0xff
 8007ca4:	bf08      	it	eq
 8007ca6:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007caa:	f7ff fce3 	bl	8007674 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cae:	a901      	add	r1, sp, #4
 8007cb0:	a802      	add	r0, sp, #8
 8007cb2:	f000 ff71 	bl	8008b98 <xTaskCheckForTimeOut>
 8007cb6:	bb38      	cbnz	r0, 8007d08 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cb8:	f7ff fcbc 	bl	8007634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cbc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007cbe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d10e      	bne.n	8007ce2 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007cc4:	f7ff fcd6 	bl	8007674 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cc8:	9901      	ldr	r1, [sp, #4]
 8007cca:	f104 0010 	add.w	r0, r4, #16
 8007cce:	f000 fedf 	bl	8008a90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff fe42 	bl	800795c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cd8:	f000 fe08 	bl	80088ec <xTaskResumeAll>
 8007cdc:	b148      	cbz	r0, 8007cf2 <xQueueGenericSend+0x142>
 8007cde:	2501      	movs	r5, #1
 8007ce0:	e797      	b.n	8007c12 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007ce2:	f7ff fcc7 	bl	8007674 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7ff fe38 	bl	800795c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cec:	f000 fdfe 	bl	80088ec <xTaskResumeAll>
 8007cf0:	e7f5      	b.n	8007cde <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007cf2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cfa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	e7ea      	b.n	8007cde <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f7ff fe27 	bl	800795c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d0e:	f000 fded 	bl	80088ec <xTaskResumeAll>
			return errQUEUE_FULL;
 8007d12:	e7b2      	b.n	8007c7a <xQueueGenericSend+0xca>

08007d14 <xQueueGenericSendFromISR>:
{
 8007d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d18:	4689      	mov	r9, r1
 8007d1a:	4617      	mov	r7, r2
 8007d1c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007d1e:	4604      	mov	r4, r0
 8007d20:	b940      	cbnz	r0, 8007d34 <xQueueGenericSendFromISR+0x20>
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	e7fe      	b.n	8007d32 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d34:	b951      	cbnz	r1, 8007d4c <xQueueGenericSendFromISR+0x38>
 8007d36:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007d38:	b143      	cbz	r3, 8007d4c <xQueueGenericSendFromISR+0x38>
 8007d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	e7fe      	b.n	8007d4a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d4c:	2e02      	cmp	r6, #2
 8007d4e:	d10b      	bne.n	8007d68 <xQueueGenericSendFromISR+0x54>
 8007d50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d008      	beq.n	8007d68 <xQueueGenericSendFromISR+0x54>
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	e7fe      	b.n	8007d66 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d68:	f7ff fd76 	bl	8007858 <vPortValidateInterruptPriority>
	__asm volatile
 8007d6c:	f3ef 8811 	mrs	r8, BASEPRI
 8007d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d80:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007d82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d301      	bcc.n	8007d8c <xQueueGenericSendFromISR+0x78>
 8007d88:	2e02      	cmp	r6, #2
 8007d8a:	d11e      	bne.n	8007dca <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d8c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d92:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d94:	4632      	mov	r2, r6
 8007d96:	4649      	mov	r1, r9
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7ff fd96 	bl	80078ca <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007d9e:	1c6b      	adds	r3, r5, #1
 8007da0:	d10e      	bne.n	8007dc0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007da2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007da4:	b13b      	cbz	r3, 8007db6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007da6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007daa:	f000 fea9 	bl	8008b00 <xTaskRemoveFromEventList>
 8007dae:	b110      	cbz	r0, 8007db6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8007db0:	b10f      	cbz	r7, 8007db6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007db2:	2301      	movs	r3, #1
 8007db4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8007db6:	2001      	movs	r0, #1
	__asm volatile
 8007db8:	f388 8811 	msr	BASEPRI, r8
}
 8007dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dc0:	3501      	adds	r5, #1
 8007dc2:	b26d      	sxtb	r5, r5
 8007dc4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8007dc8:	e7f5      	b.n	8007db6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8007dca:	2000      	movs	r0, #0
 8007dcc:	e7f4      	b.n	8007db8 <xQueueGenericSendFromISR+0xa4>

08007dce <xQueueGiveFromISR>:
{
 8007dce:	b570      	push	{r4, r5, r6, lr}
 8007dd0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	b940      	cbnz	r0, 8007de8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	e7fe      	b.n	8007de6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007de8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007dea:	b143      	cbz	r3, 8007dfe <xQueueGiveFromISR+0x30>
 8007dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	e7fe      	b.n	8007dfc <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007dfe:	6803      	ldr	r3, [r0, #0]
 8007e00:	b953      	cbnz	r3, 8007e18 <xQueueGiveFromISR+0x4a>
 8007e02:	6883      	ldr	r3, [r0, #8]
 8007e04:	b143      	cbz	r3, 8007e18 <xQueueGiveFromISR+0x4a>
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	e7fe      	b.n	8007e16 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e18:	f7ff fd1e 	bl	8007858 <vPortValidateInterruptPriority>
	__asm volatile
 8007e1c:	f3ef 8611 	mrs	r6, BASEPRI
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e30:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007e32:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d919      	bls.n	8007e6c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e3c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8007e3e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e40:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e42:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8007e44:	d10d      	bne.n	8007e62 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e48:	b13b      	cbz	r3, 8007e5a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e4a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e4e:	f000 fe57 	bl	8008b00 <xTaskRemoveFromEventList>
 8007e52:	b110      	cbz	r0, 8007e5a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007e54:	b10d      	cbz	r5, 8007e5a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e56:	2301      	movs	r3, #1
 8007e58:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8007e5a:	2001      	movs	r0, #1
	__asm volatile
 8007e5c:	f386 8811 	msr	BASEPRI, r6
}
 8007e60:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e62:	3301      	adds	r3, #1
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007e6a:	e7f6      	b.n	8007e5a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e7f5      	b.n	8007e5c <xQueueGiveFromISR+0x8e>

08007e70 <xQueueReceive>:
{
 8007e70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007e74:	460e      	mov	r6, r1
 8007e76:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007e78:	4604      	mov	r4, r0
 8007e7a:	b940      	cbnz	r0, 8007e8e <xQueueReceive+0x1e>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	e7fe      	b.n	8007e8c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e8e:	b951      	cbnz	r1, 8007ea6 <xQueueReceive+0x36>
 8007e90:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007e92:	b143      	cbz	r3, 8007ea6 <xQueueReceive+0x36>
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ea6:	f000 feb9 	bl	8008c1c <xTaskGetSchedulerState>
 8007eaa:	4605      	mov	r5, r0
 8007eac:	b318      	cbz	r0, 8007ef6 <xQueueReceive+0x86>
 8007eae:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007eb0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007eb4:	f7ff fbbe 	bl	8007634 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eb8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eba:	b347      	cbz	r7, 8007f0e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ec0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ec2:	f7ff fd35 	bl	8007930 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ec6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	b173      	cbz	r3, 8007eea <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ecc:	f104 0010 	add.w	r0, r4, #16
 8007ed0:	f000 fe16 	bl	8008b00 <xTaskRemoveFromEventList>
 8007ed4:	b148      	cbz	r0, 8007eea <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8007ed6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ede:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007eea:	f7ff fbc3 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 8007eee:	2001      	movs	r0, #1
}
 8007ef0:	b004      	add	sp, #16
 8007ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0d9      	beq.n	8007eb0 <xQueueReceive+0x40>
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	e7fe      	b.n	8007f0c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	b91b      	cbnz	r3, 8007f1a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8007f12:	f7ff fbaf 	bl	8007674 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007f16:	2000      	movs	r0, #0
 8007f18:	e7ea      	b.n	8007ef0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8007f1a:	b915      	cbnz	r5, 8007f22 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f1c:	a802      	add	r0, sp, #8
 8007f1e:	f000 fe2f 	bl	8008b80 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007f22:	f7ff fba7 	bl	8007674 <vPortExitCritical>
		vTaskSuspendAll();
 8007f26:	f000 fc35 	bl	8008794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f2a:	f7ff fb83 	bl	8007634 <vPortEnterCritical>
 8007f2e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007f32:	2bff      	cmp	r3, #255	@ 0xff
 8007f34:	bf08      	it	eq
 8007f36:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007f3a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007f3e:	2bff      	cmp	r3, #255	@ 0xff
 8007f40:	bf08      	it	eq
 8007f42:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007f46:	f7ff fb95 	bl	8007674 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f4a:	a901      	add	r1, sp, #4
 8007f4c:	a802      	add	r0, sp, #8
 8007f4e:	f000 fe23 	bl	8008b98 <xTaskCheckForTimeOut>
 8007f52:	bb00      	cbnz	r0, 8007f96 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f54:	4620      	mov	r0, r4
 8007f56:	f7ff fcad 	bl	80078b4 <prvIsQueueEmpty>
 8007f5a:	b1b0      	cbz	r0, 8007f8a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f5c:	9901      	ldr	r1, [sp, #4]
 8007f5e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f62:	f000 fd95 	bl	8008a90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f66:	4620      	mov	r0, r4
 8007f68:	f7ff fcf8 	bl	800795c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f6c:	f000 fcbe 	bl	80088ec <xTaskResumeAll>
 8007f70:	b948      	cbnz	r0, 8007f86 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007f72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	2501      	movs	r5, #1
 8007f88:	e794      	b.n	8007eb4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff fce6 	bl	800795c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f90:	f000 fcac 	bl	80088ec <xTaskResumeAll>
 8007f94:	e7f7      	b.n	8007f86 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007f96:	4620      	mov	r0, r4
 8007f98:	f7ff fce0 	bl	800795c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f9c:	f000 fca6 	bl	80088ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f7ff fc87 	bl	80078b4 <prvIsQueueEmpty>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d0ed      	beq.n	8007f86 <xQueueReceive+0x116>
 8007faa:	e7b4      	b.n	8007f16 <xQueueReceive+0xa6>

08007fac <xQueueSemaphoreTake>:
{
 8007fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fae:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007fb0:	4604      	mov	r4, r0
{
 8007fb2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007fb4:	b940      	cbnz	r0, 8007fc8 <xQueueSemaphoreTake+0x1c>
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	e7fe      	b.n	8007fc6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fc8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8007fca:	b145      	cbz	r5, 8007fde <xQueueSemaphoreTake+0x32>
 8007fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	e7fe      	b.n	8007fdc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fde:	f000 fe1d 	bl	8008c1c <xTaskGetSchedulerState>
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	b320      	cbz	r0, 8008030 <xQueueSemaphoreTake+0x84>
 8007fe6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007fe8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8007fea:	f7ff fb23 	bl	8007634 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007fee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ff0:	b353      	cbz	r3, 8008048 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	b913      	cbnz	r3, 8008000 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ffa:	f000 feed 	bl	8008dd8 <pvTaskIncrementMutexHeldCount>
 8007ffe:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	b173      	cbz	r3, 8008022 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008004:	f104 0010 	add.w	r0, r4, #16
 8008008:	f000 fd7a 	bl	8008b00 <xTaskRemoveFromEventList>
 800800c:	b148      	cbz	r0, 8008022 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800800e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008016:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008022:	f7ff fb27 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 8008026:	2001      	movs	r0, #1
}
 8008028:	b005      	add	sp, #20
 800802a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802c:	4635      	mov	r5, r6
 800802e:	e7db      	b.n	8007fe8 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008030:	9b01      	ldr	r3, [sp, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0fa      	beq.n	800802c <xQueueSemaphoreTake+0x80>
 8008036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	e7fe      	b.n	8008046 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008048:	9b01      	ldr	r3, [sp, #4]
 800804a:	b953      	cbnz	r3, 8008062 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800804c:	2d00      	cmp	r5, #0
 800804e:	d066      	beq.n	800811e <xQueueSemaphoreTake+0x172>
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	e7fe      	b.n	8008060 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8008062:	b916      	cbnz	r6, 800806a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008064:	a802      	add	r0, sp, #8
 8008066:	f000 fd8b 	bl	8008b80 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800806a:	f7ff fb03 	bl	8007674 <vPortExitCritical>
		vTaskSuspendAll();
 800806e:	f000 fb91 	bl	8008794 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008072:	f7ff fadf 	bl	8007634 <vPortEnterCritical>
 8008076:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800807a:	2bff      	cmp	r3, #255	@ 0xff
 800807c:	bf08      	it	eq
 800807e:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8008082:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008086:	2bff      	cmp	r3, #255	@ 0xff
 8008088:	bf08      	it	eq
 800808a:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 800808e:	f7ff faf1 	bl	8007674 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008092:	a901      	add	r1, sp, #4
 8008094:	a802      	add	r0, sp, #8
 8008096:	f000 fd7f 	bl	8008b98 <xTaskCheckForTimeOut>
 800809a:	bb50      	cbnz	r0, 80080f2 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800809c:	4620      	mov	r0, r4
 800809e:	f7ff fc09 	bl	80078b4 <prvIsQueueEmpty>
 80080a2:	b300      	cbz	r0, 80080e6 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	b93b      	cbnz	r3, 80080b8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 80080a8:	f7ff fac4 	bl	8007634 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080ac:	68a0      	ldr	r0, [r4, #8]
 80080ae:	f000 fdc5 	bl	8008c3c <xTaskPriorityInherit>
 80080b2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80080b4:	f7ff fade 	bl	8007674 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080b8:	9901      	ldr	r1, [sp, #4]
 80080ba:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80080be:	f000 fce7 	bl	8008a90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080c2:	4620      	mov	r0, r4
 80080c4:	f7ff fc4a 	bl	800795c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080c8:	f000 fc10 	bl	80088ec <xTaskResumeAll>
 80080cc:	b948      	cbnz	r0, 80080e2 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 80080ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80080d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	2601      	movs	r6, #1
 80080e4:	e781      	b.n	8007fea <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7ff fc38 	bl	800795c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080ec:	f000 fbfe 	bl	80088ec <xTaskResumeAll>
 80080f0:	e7f7      	b.n	80080e2 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7ff fc32 	bl	800795c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080f8:	f000 fbf8 	bl	80088ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7ff fbd9 	bl	80078b4 <prvIsQueueEmpty>
 8008102:	2800      	cmp	r0, #0
 8008104:	d0ed      	beq.n	80080e2 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8008106:	b165      	cbz	r5, 8008122 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8008108:	f7ff fa94 	bl	8007634 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800810c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800810e:	b119      	cbz	r1, 8008118 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008110:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008118:	68a0      	ldr	r0, [r4, #8]
 800811a:	f000 fe0f 	bl	8008d3c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800811e:	f7ff faa9 	bl	8007674 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008122:	2000      	movs	r0, #0
 8008124:	e780      	b.n	8008028 <xQueueSemaphoreTake+0x7c>

08008126 <xQueueReceiveFromISR>:
{
 8008126:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800812a:	4689      	mov	r9, r1
 800812c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800812e:	4604      	mov	r4, r0
 8008130:	b940      	cbnz	r0, 8008144 <xQueueReceiveFromISR+0x1e>
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	e7fe      	b.n	8008142 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008144:	b951      	cbnz	r1, 800815c <xQueueReceiveFromISR+0x36>
 8008146:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008148:	b143      	cbz	r3, 800815c <xQueueReceiveFromISR+0x36>
 800814a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	e7fe      	b.n	800815a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800815c:	f7ff fb7c 	bl	8007858 <vPortValidateInterruptPriority>
	__asm volatile
 8008160:	f3ef 8711 	mrs	r7, BASEPRI
 8008164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008174:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008176:	b30d      	cbz	r5, 80081bc <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008178:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800817c:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800817e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008180:	4620      	mov	r0, r4
 8008182:	f7ff fbd5 	bl	8007930 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008186:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008188:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800818a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800818c:	d111      	bne.n	80081b2 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	b153      	cbz	r3, 80081a8 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008192:	f104 0010 	add.w	r0, r4, #16
 8008196:	f000 fcb3 	bl	8008b00 <xTaskRemoveFromEventList>
 800819a:	b128      	cbz	r0, 80081a8 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800819c:	f1b8 0f00 	cmp.w	r8, #0
 80081a0:	d002      	beq.n	80081a8 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 80081a8:	2001      	movs	r0, #1
	__asm volatile
 80081aa:	f387 8811 	msr	BASEPRI, r7
}
 80081ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80081b2:	3601      	adds	r6, #1
 80081b4:	b276      	sxtb	r6, r6
 80081b6:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80081ba:	e7f5      	b.n	80081a8 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 80081bc:	4628      	mov	r0, r5
 80081be:	e7f4      	b.n	80081aa <xQueueReceiveFromISR+0x84>

080081c0 <uxQueueMessagesWaiting>:
{
 80081c0:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 80081c2:	4604      	mov	r4, r0
 80081c4:	b940      	cbnz	r0, 80081d8 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	e7fe      	b.n	80081d6 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 80081d8:	f7ff fa2c 	bl	8007634 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80081dc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80081de:	f7ff fa49 	bl	8007674 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80081e2:	4620      	mov	r0, r4
 80081e4:	bd10      	pop	{r4, pc}

080081e6 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80081e6:	b940      	cbnz	r0, 80081fa <uxQueueMessagesWaitingFromISR+0x14>
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	e7fe      	b.n	80081f8 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 80081fa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80081fc:	4770      	bx	lr
	...

08008200 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008200:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008202:	4a07      	ldr	r2, [pc, #28]	@ (8008220 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008204:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008206:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800820a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800820e:	b91d      	cbnz	r5, 8008218 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008210:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008214:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008216:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008218:	3301      	adds	r3, #1
 800821a:	2b08      	cmp	r3, #8
 800821c:	d1f3      	bne.n	8008206 <vQueueAddToRegistry+0x6>
 800821e:	e7fa      	b.n	8008216 <vQueueAddToRegistry+0x16>
 8008220:	20014dc4 	.word	0x20014dc4

08008224 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008224:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008226:	4a09      	ldr	r2, [pc, #36]	@ (800824c <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008228:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800822a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800822e:	4281      	cmp	r1, r0
 8008230:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8008234:	d106      	bne.n	8008244 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008236:	4a06      	ldr	r2, [pc, #24]	@ (8008250 <vQueueUnregisterQueue+0x2c>)
 8008238:	2100      	movs	r1, #0
 800823a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800823e:	4422      	add	r2, r4
 8008240:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008242:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008244:	3301      	adds	r3, #1
 8008246:	2b08      	cmp	r3, #8
 8008248:	d1ef      	bne.n	800822a <vQueueUnregisterQueue+0x6>
 800824a:	e7fa      	b.n	8008242 <vQueueUnregisterQueue+0x1e>
 800824c:	20014dc8 	.word	0x20014dc8
 8008250:	20014dc4 	.word	0x20014dc4

08008254 <vQueueDelete>:
{
 8008254:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008256:	b940      	cbnz	r0, 800826a <vQueueDelete+0x16>
 8008258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	e7fe      	b.n	8008268 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800826a:	f7ff ffdb 	bl	8008224 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800826e:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8008272:	b91b      	cbnz	r3, 800827c <vQueueDelete+0x28>
}
 8008274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008278:	f7ff b8f8 	b.w	800746c <vPortFree>
}
 800827c:	bd10      	pop	{r4, pc}

0800827e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800827e:	b570      	push	{r4, r5, r6, lr}
 8008280:	4604      	mov	r4, r0
 8008282:	460d      	mov	r5, r1
 8008284:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008286:	f7ff f9d5 	bl	8007634 <vPortEnterCritical>
 800828a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800828e:	2bff      	cmp	r3, #255	@ 0xff
 8008290:	bf04      	itt	eq
 8008292:	2300      	moveq	r3, #0
 8008294:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8008298:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800829c:	2bff      	cmp	r3, #255	@ 0xff
 800829e:	bf04      	itt	eq
 80082a0:	2300      	moveq	r3, #0
 80082a2:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80082a6:	f7ff f9e5 	bl	8007674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082aa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80082ac:	b92b      	cbnz	r3, 80082ba <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082ae:	4632      	mov	r2, r6
 80082b0:	4629      	mov	r1, r5
 80082b2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80082b6:	f000 fc05 	bl	8008ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082ba:	4620      	mov	r0, r4
	}
 80082bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80082c0:	f7ff bb4c 	b.w	800795c <prvUnlockQueue>

080082c4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082ca:	f7ff f9b3 	bl	8007634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082ce:	4b30      	ldr	r3, [pc, #192]	@ (8008390 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 80082d0:	4e30      	ldr	r6, [pc, #192]	@ (8008394 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4f30      	ldr	r7, [pc, #192]	@ (8008398 <prvAddNewTaskToReadyList+0xd4>)
 80082d6:	3201      	adds	r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80082da:	6835      	ldr	r5, [r6, #0]
 80082dc:	2d00      	cmp	r5, #0
 80082de:	d14b      	bne.n	8008378 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082e0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d11f      	bne.n	8008328 <prvAddNewTaskToReadyList+0x64>
 80082e8:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082ea:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ec:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082ee:	f7ff f8fb 	bl	80074e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082f2:	2d38      	cmp	r5, #56	@ 0x38
 80082f4:	f108 0814 	add.w	r8, r8, #20
 80082f8:	d1f7      	bne.n	80082ea <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082fa:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 80083c0 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 80082fe:	4d27      	ldr	r5, [pc, #156]	@ (800839c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008300:	4640      	mov	r0, r8
 8008302:	f7ff f8f1 	bl	80074e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008306:	4628      	mov	r0, r5
 8008308:	f7ff f8ee 	bl	80074e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800830c:	4824      	ldr	r0, [pc, #144]	@ (80083a0 <prvAddNewTaskToReadyList+0xdc>)
 800830e:	f7ff f8eb 	bl	80074e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008312:	4824      	ldr	r0, [pc, #144]	@ (80083a4 <prvAddNewTaskToReadyList+0xe0>)
 8008314:	f7ff f8e8 	bl	80074e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008318:	4823      	ldr	r0, [pc, #140]	@ (80083a8 <prvAddNewTaskToReadyList+0xe4>)
 800831a:	f7ff f8e5 	bl	80074e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800831e:	4b23      	ldr	r3, [pc, #140]	@ (80083ac <prvAddNewTaskToReadyList+0xe8>)
 8008320:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008324:	4b22      	ldr	r3, [pc, #136]	@ (80083b0 <prvAddNewTaskToReadyList+0xec>)
 8008326:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008328:	4a22      	ldr	r2, [pc, #136]	@ (80083b4 <prvAddNewTaskToReadyList+0xf0>)
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	3301      	adds	r3, #1
 800832e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008330:	4a21      	ldr	r2, [pc, #132]	@ (80083b8 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008332:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008334:	6811      	ldr	r1, [r2, #0]
 8008336:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008338:	2014      	movs	r0, #20
 800833a:	428b      	cmp	r3, r1
 800833c:	fb00 7003 	mla	r0, r0, r3, r7
 8008340:	f104 0104 	add.w	r1, r4, #4
 8008344:	bf88      	it	hi
 8008346:	6013      	strhi	r3, [r2, #0]
 8008348:	f7ff f8dc 	bl	8007504 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800834c:	f7ff f992 	bl	8007674 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008350:	4b1a      	ldr	r3, [pc, #104]	@ (80083bc <prvAddNewTaskToReadyList+0xf8>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	b173      	cbz	r3, 8008374 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008356:	6833      	ldr	r3, [r6, #0]
 8008358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800835a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800835c:	429a      	cmp	r2, r3
 800835e:	d209      	bcs.n	8008374 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8008360:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008364:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008368:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	f3bf 8f6f 	isb	sy
}
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008378:	4b10      	ldr	r3, [pc, #64]	@ (80083bc <prvAddNewTaskToReadyList+0xf8>)
 800837a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800837c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800837e:	2a00      	cmp	r2, #0
 8008380:	d1d2      	bne.n	8008328 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008382:	6832      	ldr	r2, [r6, #0]
 8008384:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008386:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008388:	bf98      	it	ls
 800838a:	6034      	strls	r4, [r6, #0]
 800838c:	e7cc      	b.n	8008328 <prvAddNewTaskToReadyList+0x64>
 800838e:	bf00      	nop
 8008390:	20014e28 	.word	0x20014e28
 8008394:	200152fc 	.word	0x200152fc
 8008398:	20014e9c 	.word	0x20014e9c
 800839c:	20014e74 	.word	0x20014e74
 80083a0:	20014e58 	.word	0x20014e58
 80083a4:	20014e44 	.word	0x20014e44
 80083a8:	20014e2c 	.word	0x20014e2c
 80083ac:	20014e70 	.word	0x20014e70
 80083b0:	20014e6c 	.word	0x20014e6c
 80083b4:	20014e0c 	.word	0x20014e0c
 80083b8:	20014e20 	.word	0x20014e20
 80083bc:	20014e1c 	.word	0x20014e1c
 80083c0:	20014e88 	.word	0x20014e88

080083c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083c6:	4b15      	ldr	r3, [pc, #84]	@ (800841c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083c8:	4d15      	ldr	r5, [pc, #84]	@ (8008420 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 80083ca:	681c      	ldr	r4, [r3, #0]
{
 80083cc:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ce:	6828      	ldr	r0, [r5, #0]
 80083d0:	3004      	adds	r0, #4
{
 80083d2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d4:	f7ff f8b8 	bl	8007548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083d8:	1c73      	adds	r3, r6, #1
 80083da:	d107      	bne.n	80083ec <prvAddCurrentTaskToDelayedList+0x28>
 80083dc:	b137      	cbz	r7, 80083ec <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083de:	6829      	ldr	r1, [r5, #0]
 80083e0:	4810      	ldr	r0, [pc, #64]	@ (8008424 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083e6:	3104      	adds	r1, #4
 80083e8:	f7ff b88c 	b.w	8007504 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	19a4      	adds	r4, r4, r6
 80083f0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083f2:	d307      	bcc.n	8008404 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008428 <prvAddCurrentTaskToDelayedList+0x64>)
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	6829      	ldr	r1, [r5, #0]
}
 80083fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083fe:	3104      	adds	r1, #4
 8008400:	f7ff b88b 	b.w	800751a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008404:	4b09      	ldr	r3, [pc, #36]	@ (800842c <prvAddCurrentTaskToDelayedList+0x68>)
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	6829      	ldr	r1, [r5, #0]
 800840a:	3104      	adds	r1, #4
 800840c:	f7ff f885 	bl	800751a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008410:	4b07      	ldr	r3, [pc, #28]	@ (8008430 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008416:	bf88      	it	hi
 8008418:	601c      	strhi	r4, [r3, #0]
}
 800841a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800841c:	20014e24 	.word	0x20014e24
 8008420:	200152fc 	.word	0x200152fc
 8008424:	20014e2c 	.word	0x20014e2c
 8008428:	20014e6c 	.word	0x20014e6c
 800842c:	20014e70 	.word	0x20014e70
 8008430:	20014e08 	.word	0x20014e08

08008434 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008434:	4a06      	ldr	r2, [pc, #24]	@ (8008450 <prvResetNextTaskUnblockTime+0x1c>)
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	6819      	ldr	r1, [r3, #0]
 800843a:	4b06      	ldr	r3, [pc, #24]	@ (8008454 <prvResetNextTaskUnblockTime+0x20>)
 800843c:	b919      	cbnz	r1, 8008446 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800843e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008442:	601a      	str	r2, [r3, #0]
}
 8008444:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008446:	6812      	ldr	r2, [r2, #0]
 8008448:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800844a:	68d2      	ldr	r2, [r2, #12]
 800844c:	6852      	ldr	r2, [r2, #4]
 800844e:	e7f8      	b.n	8008442 <prvResetNextTaskUnblockTime+0xe>
 8008450:	20014e70 	.word	0x20014e70
 8008454:	20014e08 	.word	0x20014e08

08008458 <prvDeleteTCB>:
	{
 8008458:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800845a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800845e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008460:	b93b      	cbnz	r3, 8008472 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008462:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008464:	f7ff f802 	bl	800746c <vPortFree>
				vPortFree( pxTCB );
 8008468:	4620      	mov	r0, r4
	}
 800846a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800846e:	f7fe bffd 	b.w	800746c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008472:	2b01      	cmp	r3, #1
 8008474:	d0f9      	beq.n	800846a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008476:	2b02      	cmp	r3, #2
 8008478:	d008      	beq.n	800848c <prvDeleteTCB+0x34>
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	e7fe      	b.n	800848a <prvDeleteTCB+0x32>
	}
 800848c:	bd10      	pop	{r4, pc}
	...

08008490 <prvIdleTask>:
{
 8008490:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008492:	4c13      	ldr	r4, [pc, #76]	@ (80084e0 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008494:	4f13      	ldr	r7, [pc, #76]	@ (80084e4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008496:	4d14      	ldr	r5, [pc, #80]	@ (80084e8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	b973      	cbnz	r3, 80084ba <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800849c:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <prvIdleTask+0x5c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d9f8      	bls.n	8008496 <prvIdleTask+0x6>
				taskYIELD();
 80084a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80084a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	e7ed      	b.n	8008496 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80084ba:	f7ff f8bb 	bl	8007634 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084c2:	1d30      	adds	r0, r6, #4
 80084c4:	f7ff f840 	bl	8007548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80084d4:	f7ff f8ce 	bl	8007674 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80084d8:	4630      	mov	r0, r6
 80084da:	f7ff ffbd 	bl	8008458 <prvDeleteTCB>
 80084de:	e7db      	b.n	8008498 <prvIdleTask+0x8>
 80084e0:	20014e40 	.word	0x20014e40
 80084e4:	20014e44 	.word	0x20014e44
 80084e8:	20014e28 	.word	0x20014e28
 80084ec:	20014e9c 	.word	0x20014e9c

080084f0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084f8:	0096      	lsls	r6, r2, #2
 80084fa:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80084fc:	4607      	mov	r7, r0
 80084fe:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008500:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008502:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008504:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008506:	f00a fcc0 	bl	8012e8a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800850a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800850c:	3e04      	subs	r6, #4
 800850e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008510:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008514:	b3b5      	cbz	r5, 8008584 <prvInitialiseNewTask.constprop.0+0x94>
 8008516:	1e6b      	subs	r3, r5, #1
 8008518:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800851c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800851e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008522:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008526:	b109      	cbz	r1, 800852c <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008528:	42ab      	cmp	r3, r5
 800852a:	d1f8      	bne.n	800851e <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800852c:	2300      	movs	r3, #0
 800852e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008532:	9d08      	ldr	r5, [sp, #32]
 8008534:	2d37      	cmp	r5, #55	@ 0x37
 8008536:	bf28      	it	cs
 8008538:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800853a:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800853e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008540:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008542:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008544:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008548:	f7fe ffd9 	bl	80074fe <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800854c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008550:	f104 0018 	add.w	r0, r4, #24
 8008554:	f7fe ffd3 	bl	80074fe <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008558:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800855c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008560:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008562:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008566:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800856a:	4642      	mov	r2, r8
 800856c:	4639      	mov	r1, r7
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff f838 	bl	80075e4 <pxPortInitialiseStack>
 8008574:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008576:	f1b9 0f00 	cmp.w	r9, #0
 800857a:	d001      	beq.n	8008580 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800857c:	f8c9 4000 	str.w	r4, [r9]
}
 8008580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008584:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8008588:	e7d3      	b.n	8008532 <prvInitialiseNewTask.constprop.0+0x42>

0800858a <xTaskCreateStatic>:
	{
 800858a:	b570      	push	{r4, r5, r6, lr}
 800858c:	b086      	sub	sp, #24
 800858e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008592:	b945      	cbnz	r5, 80085a6 <xTaskCreateStatic+0x1c>
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	e7fe      	b.n	80085a4 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80085a6:	b944      	cbnz	r4, 80085ba <xTaskCreateStatic+0x30>
 80085a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	e7fe      	b.n	80085b8 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80085ba:	2660      	movs	r6, #96	@ 0x60
 80085bc:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085be:	9e05      	ldr	r6, [sp, #20]
 80085c0:	2e60      	cmp	r6, #96	@ 0x60
 80085c2:	d008      	beq.n	80085d6 <xTaskCreateStatic+0x4c>
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	e7fe      	b.n	80085d4 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085d6:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085d8:	2502      	movs	r5, #2
 80085da:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085de:	ad04      	add	r5, sp, #16
 80085e0:	9501      	str	r5, [sp, #4]
 80085e2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80085e4:	9402      	str	r4, [sp, #8]
 80085e6:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085e8:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085ea:	f7ff ff81 	bl	80084f0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085ee:	4620      	mov	r0, r4
 80085f0:	f7ff fe68 	bl	80082c4 <prvAddNewTaskToReadyList>
	}
 80085f4:	9804      	ldr	r0, [sp, #16]
 80085f6:	b006      	add	sp, #24
 80085f8:	bd70      	pop	{r4, r5, r6, pc}

080085fa <xTaskCreate>:
	{
 80085fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085fe:	4607      	mov	r7, r0
 8008600:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008602:	0090      	lsls	r0, r2, #2
	{
 8008604:	4688      	mov	r8, r1
 8008606:	4616      	mov	r6, r2
 8008608:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800860a:	f7fe fe97 	bl	800733c <pvPortMalloc>
			if( pxStack != NULL )
 800860e:	4605      	mov	r5, r0
 8008610:	b920      	cbnz	r0, 800861c <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008612:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008616:	b005      	add	sp, #20
 8008618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800861c:	2060      	movs	r0, #96	@ 0x60
 800861e:	f7fe fe8d 	bl	800733c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008622:	4604      	mov	r4, r0
 8008624:	b198      	cbz	r0, 800864e <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008626:	2300      	movs	r3, #0
 8008628:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800862c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 800862e:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008634:	9002      	str	r0, [sp, #8]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	4632      	mov	r2, r6
 800863a:	464b      	mov	r3, r9
 800863c:	4641      	mov	r1, r8
 800863e:	4638      	mov	r0, r7
 8008640:	f7ff ff56 	bl	80084f0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008644:	4620      	mov	r0, r4
 8008646:	f7ff fe3d 	bl	80082c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800864a:	2001      	movs	r0, #1
 800864c:	e7e3      	b.n	8008616 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800864e:	4628      	mov	r0, r5
 8008650:	f7fe ff0c 	bl	800746c <vPortFree>
		if( pxNewTCB != NULL )
 8008654:	e7dd      	b.n	8008612 <xTaskCreate+0x18>
	...

08008658 <vTaskDelete>:
	{
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	4604      	mov	r4, r0
 800865c:	4d23      	ldr	r5, [pc, #140]	@ (80086ec <vTaskDelete+0x94>)
		taskENTER_CRITICAL();
 800865e:	f7fe ffe9 	bl	8007634 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008662:	b904      	cbnz	r4, 8008666 <vTaskDelete+0xe>
 8008664:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008666:	1d26      	adds	r6, r4, #4
 8008668:	4630      	mov	r0, r6
 800866a:	f7fe ff6d 	bl	8007548 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800866e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008670:	b11b      	cbz	r3, 800867a <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008672:	f104 0018 	add.w	r0, r4, #24
 8008676:	f7fe ff67 	bl	8007548 <uxListRemove>
			uxTaskNumber++;
 800867a:	4a1d      	ldr	r2, [pc, #116]	@ (80086f0 <vTaskDelete+0x98>)
 800867c:	6813      	ldr	r3, [r2, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	42a3      	cmp	r3, r4
 8008686:	d11b      	bne.n	80086c0 <vTaskDelete+0x68>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008688:	481a      	ldr	r0, [pc, #104]	@ (80086f4 <vTaskDelete+0x9c>)
 800868a:	4631      	mov	r1, r6
 800868c:	f7fe ff3a 	bl	8007504 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8008690:	4a19      	ldr	r2, [pc, #100]	@ (80086f8 <vTaskDelete+0xa0>)
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	3301      	adds	r3, #1
 8008696:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8008698:	f7fe ffec 	bl	8007674 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800869c:	4b17      	ldr	r3, [pc, #92]	@ (80086fc <vTaskDelete+0xa4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	b313      	cbz	r3, 80086e8 <vTaskDelete+0x90>
			if( pxTCB == pxCurrentTCB )
 80086a2:	682b      	ldr	r3, [r5, #0]
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d11f      	bne.n	80086e8 <vTaskDelete+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 80086a8:	4b15      	ldr	r3, [pc, #84]	@ (8008700 <vTaskDelete+0xa8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	b193      	cbz	r3, 80086d4 <vTaskDelete+0x7c>
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	e7fe      	b.n	80086be <vTaskDelete+0x66>
				--uxCurrentNumberOfTasks;
 80086c0:	4a10      	ldr	r2, [pc, #64]	@ (8008704 <vTaskDelete+0xac>)
 80086c2:	6813      	ldr	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80086c4:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 80086c6:	3b01      	subs	r3, #1
 80086c8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80086ca:	f7ff fec5 	bl	8008458 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 80086ce:	f7ff feb1 	bl	8008434 <prvResetNextTaskUnblockTime>
 80086d2:	e7e1      	b.n	8008698 <vTaskDelete+0x40>
				portYIELD_WITHIN_API();
 80086d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80086d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
	}
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
 80086ea:	bf00      	nop
 80086ec:	200152fc 	.word	0x200152fc
 80086f0:	20014e0c 	.word	0x20014e0c
 80086f4:	20014e44 	.word	0x20014e44
 80086f8:	20014e40 	.word	0x20014e40
 80086fc:	20014e1c 	.word	0x20014e1c
 8008700:	20014e04 	.word	0x20014e04
 8008704:	20014e28 	.word	0x20014e28

08008708 <vTaskStartScheduler>:
{
 8008708:	b510      	push	{r4, lr}
 800870a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800870c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800870e:	aa07      	add	r2, sp, #28
 8008710:	a906      	add	r1, sp, #24
 8008712:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008714:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008718:	f7fe fdd2 	bl	80072c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800871c:	9b05      	ldr	r3, [sp, #20]
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	9b06      	ldr	r3, [sp, #24]
 8008722:	9a07      	ldr	r2, [sp, #28]
 8008724:	4916      	ldr	r1, [pc, #88]	@ (8008780 <vTaskStartScheduler+0x78>)
 8008726:	4817      	ldr	r0, [pc, #92]	@ (8008784 <vTaskStartScheduler+0x7c>)
 8008728:	e9cd 4300 	strd	r4, r3, [sp]
 800872c:	4623      	mov	r3, r4
 800872e:	f7ff ff2c 	bl	800858a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008732:	b318      	cbz	r0, 800877c <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8008734:	f000 fbae 	bl	8008e94 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008738:	2801      	cmp	r0, #1
 800873a:	d114      	bne.n	8008766 <vTaskStartScheduler+0x5e>
 800873c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800874c:	4b0e      	ldr	r3, [pc, #56]	@ (8008788 <vTaskStartScheduler+0x80>)
 800874e:	f04f 32ff 	mov.w	r2, #4294967295
 8008752:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008754:	4b0d      	ldr	r3, [pc, #52]	@ (800878c <vTaskStartScheduler+0x84>)
 8008756:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008758:	4b0d      	ldr	r3, [pc, #52]	@ (8008790 <vTaskStartScheduler+0x88>)
 800875a:	601c      	str	r4, [r3, #0]
}
 800875c:	b008      	add	sp, #32
 800875e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008762:	f7fe bff7 	b.w	8007754 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008766:	3001      	adds	r0, #1
 8008768:	d108      	bne.n	800877c <vTaskStartScheduler+0x74>
 800876a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	e7fe      	b.n	800877a <vTaskStartScheduler+0x72>
}
 800877c:	b008      	add	sp, #32
 800877e:	bd10      	pop	{r4, pc}
 8008780:	080148d8 	.word	0x080148d8
 8008784:	08008491 	.word	0x08008491
 8008788:	20014e08 	.word	0x20014e08
 800878c:	20014e1c 	.word	0x20014e1c
 8008790:	20014e24 	.word	0x20014e24

08008794 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008794:	4a02      	ldr	r2, [pc, #8]	@ (80087a0 <vTaskSuspendAll+0xc>)
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	3301      	adds	r3, #1
 800879a:	6013      	str	r3, [r2, #0]
}
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	20014e04 	.word	0x20014e04

080087a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80087a4:	4b01      	ldr	r3, [pc, #4]	@ (80087ac <xTaskGetTickCount+0x8>)
 80087a6:	6818      	ldr	r0, [r3, #0]
}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20014e24 	.word	0x20014e24

080087b0 <xTaskGetTickCountFromISR>:
{
 80087b0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087b2:	f7ff f851 	bl	8007858 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80087b6:	4b01      	ldr	r3, [pc, #4]	@ (80087bc <xTaskGetTickCountFromISR+0xc>)
 80087b8:	6818      	ldr	r0, [r3, #0]
}
 80087ba:	bd08      	pop	{r3, pc}
 80087bc:	20014e24 	.word	0x20014e24

080087c0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c0:	4b3f      	ldr	r3, [pc, #252]	@ (80088c0 <xTaskIncrementTick+0x100>)
 80087c2:	681b      	ldr	r3, [r3, #0]
{
 80087c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d172      	bne.n	80088b2 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087cc:	4b3d      	ldr	r3, [pc, #244]	@ (80088c4 <xTaskIncrementTick+0x104>)
 80087ce:	681c      	ldr	r4, [r3, #0]
 80087d0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80087d2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087d4:	b9bc      	cbnz	r4, 8008806 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80087d6:	4b3c      	ldr	r3, [pc, #240]	@ (80088c8 <xTaskIncrementTick+0x108>)
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	b142      	cbz	r2, 80087f0 <xTaskIncrementTick+0x30>
 80087de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	e7fe      	b.n	80087ee <xTaskIncrementTick+0x2e>
 80087f0:	4a36      	ldr	r2, [pc, #216]	@ (80088cc <xTaskIncrementTick+0x10c>)
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	6810      	ldr	r0, [r2, #0]
 80087f6:	6018      	str	r0, [r3, #0]
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	4a35      	ldr	r2, [pc, #212]	@ (80088d0 <xTaskIncrementTick+0x110>)
 80087fc:	6813      	ldr	r3, [r2, #0]
 80087fe:	3301      	adds	r3, #1
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	f7ff fe17 	bl	8008434 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008806:	4d33      	ldr	r5, [pc, #204]	@ (80088d4 <xTaskIncrementTick+0x114>)
 8008808:	4e33      	ldr	r6, [pc, #204]	@ (80088d8 <xTaskIncrementTick+0x118>)
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	4f33      	ldr	r7, [pc, #204]	@ (80088dc <xTaskIncrementTick+0x11c>)
 800880e:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8008810:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008814:	d212      	bcs.n	800883c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800881a:	2114      	movs	r1, #20
 800881c:	434a      	muls	r2, r1
 800881e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8008820:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8008822:	4a2f      	ldr	r2, [pc, #188]	@ (80088e0 <xTaskIncrementTick+0x120>)
 8008824:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8008826:	bf28      	it	cs
 8008828:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800882c:	2a00      	cmp	r2, #0
 800882e:	bf18      	it	ne
 8008830:	f04f 0b01 	movne.w	fp, #1
}
 8008834:	4658      	mov	r0, fp
 8008836:	b003      	add	sp, #12
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800883c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80088c8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8008840:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 80088e8 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008844:	f8d9 2000 	ldr.w	r2, [r9]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	b91a      	cbnz	r2, 8008854 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800884c:	f04f 32ff 	mov.w	r2, #4294967295
 8008850:	602a      	str	r2, [r5, #0]
					break;
 8008852:	e7e0      	b.n	8008816 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008854:	f8d9 2000 	ldr.w	r2, [r9]
 8008858:	68d2      	ldr	r2, [r2, #12]
 800885a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800885e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8008862:	428c      	cmp	r4, r1
 8008864:	d201      	bcs.n	800886a <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8008866:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008868:	e7d5      	b.n	8008816 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800886a:	f108 0304 	add.w	r3, r8, #4
 800886e:	4618      	mov	r0, r3
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	f7fe fe69 	bl	8007548 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008876:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800887a:	b119      	cbz	r1, 8008884 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800887c:	f108 0018 	add.w	r0, r8, #24
 8008880:	f7fe fe62 	bl	8007548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008884:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8008888:	f8da 1000 	ldr.w	r1, [sl]
 800888c:	2314      	movs	r3, #20
 800888e:	4288      	cmp	r0, r1
 8008890:	bf88      	it	hi
 8008892:	f8ca 0000 	strhi.w	r0, [sl]
 8008896:	9901      	ldr	r1, [sp, #4]
 8008898:	fb03 6000 	mla	r0, r3, r0, r6
 800889c:	f7fe fe32 	bl	8007504 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088a0:	6838      	ldr	r0, [r7, #0]
 80088a2:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80088a6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80088a8:	4291      	cmp	r1, r2
 80088aa:	bf28      	it	cs
 80088ac:	f04f 0b01 	movcs.w	fp, #1
 80088b0:	e7c8      	b.n	8008844 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 80088b2:	4a0c      	ldr	r2, [pc, #48]	@ (80088e4 <xTaskIncrementTick+0x124>)
 80088b4:	6813      	ldr	r3, [r2, #0]
 80088b6:	3301      	adds	r3, #1
 80088b8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80088ba:	f04f 0b00 	mov.w	fp, #0
 80088be:	e7b9      	b.n	8008834 <xTaskIncrementTick+0x74>
 80088c0:	20014e04 	.word	0x20014e04
 80088c4:	20014e24 	.word	0x20014e24
 80088c8:	20014e70 	.word	0x20014e70
 80088cc:	20014e6c 	.word	0x20014e6c
 80088d0:	20014e10 	.word	0x20014e10
 80088d4:	20014e08 	.word	0x20014e08
 80088d8:	20014e9c 	.word	0x20014e9c
 80088dc:	200152fc 	.word	0x200152fc
 80088e0:	20014e14 	.word	0x20014e14
 80088e4:	20014e18 	.word	0x20014e18
 80088e8:	20014e20 	.word	0x20014e20

080088ec <xTaskResumeAll>:
{
 80088ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80088f0:	4c30      	ldr	r4, [pc, #192]	@ (80089b4 <xTaskResumeAll+0xc8>)
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	b943      	cbnz	r3, 8008908 <xTaskResumeAll+0x1c>
 80088f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	e7fe      	b.n	8008906 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008908:	f7fe fe94 	bl	8007634 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	3b01      	subs	r3, #1
 8008910:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008912:	6824      	ldr	r4, [r4, #0]
 8008914:	b12c      	cbz	r4, 8008922 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008916:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008918:	f7fe feac 	bl	8007674 <vPortExitCritical>
}
 800891c:	4620      	mov	r0, r4
 800891e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008922:	4b25      	ldr	r3, [pc, #148]	@ (80089b8 <xTaskResumeAll+0xcc>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0f5      	beq.n	8008916 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800892a:	4d24      	ldr	r5, [pc, #144]	@ (80089bc <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800892c:	4e24      	ldr	r6, [pc, #144]	@ (80089c0 <xTaskResumeAll+0xd4>)
 800892e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80089d0 <xTaskResumeAll+0xe4>
 8008932:	e01d      	b.n	8008970 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008934:	68eb      	ldr	r3, [r5, #12]
 8008936:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008938:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800893a:	f104 0018 	add.w	r0, r4, #24
 800893e:	f7fe fe03 	bl	8007548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008942:	4638      	mov	r0, r7
 8008944:	f7fe fe00 	bl	8007548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008948:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800894a:	6832      	ldr	r2, [r6, #0]
 800894c:	2014      	movs	r0, #20
 800894e:	4293      	cmp	r3, r2
 8008950:	fb00 8003 	mla	r0, r0, r3, r8
 8008954:	4639      	mov	r1, r7
 8008956:	bf88      	it	hi
 8008958:	6033      	strhi	r3, [r6, #0]
 800895a:	f7fe fdd3 	bl	8007504 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800895e:	4b19      	ldr	r3, [pc, #100]	@ (80089c4 <xTaskResumeAll+0xd8>)
 8008960:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008966:	429a      	cmp	r2, r3
 8008968:	d302      	bcc.n	8008970 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800896a:	4b17      	ldr	r3, [pc, #92]	@ (80089c8 <xTaskResumeAll+0xdc>)
 800896c:	2201      	movs	r2, #1
 800896e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1de      	bne.n	8008934 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008976:	b10c      	cbz	r4, 800897c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8008978:	f7ff fd5c 	bl	8008434 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800897c:	4d13      	ldr	r5, [pc, #76]	@ (80089cc <xTaskResumeAll+0xe0>)
 800897e:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008980:	b144      	cbz	r4, 8008994 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8008982:	4e11      	ldr	r6, [pc, #68]	@ (80089c8 <xTaskResumeAll+0xdc>)
 8008984:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008986:	f7ff ff1b 	bl	80087c0 <xTaskIncrementTick>
 800898a:	b100      	cbz	r0, 800898e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800898c:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800898e:	3c01      	subs	r4, #1
 8008990:	d1f9      	bne.n	8008986 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8008992:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008994:	4b0c      	ldr	r3, [pc, #48]	@ (80089c8 <xTaskResumeAll+0xdc>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0bc      	beq.n	8008916 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800899c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80089b0:	2401      	movs	r4, #1
 80089b2:	e7b1      	b.n	8008918 <xTaskResumeAll+0x2c>
 80089b4:	20014e04 	.word	0x20014e04
 80089b8:	20014e28 	.word	0x20014e28
 80089bc:	20014e58 	.word	0x20014e58
 80089c0:	20014e20 	.word	0x20014e20
 80089c4:	200152fc 	.word	0x200152fc
 80089c8:	20014e14 	.word	0x20014e14
 80089cc:	20014e18 	.word	0x20014e18
 80089d0:	20014e9c 	.word	0x20014e9c

080089d4 <vTaskDelay>:
	{
 80089d4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089d6:	b950      	cbnz	r0, 80089ee <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80089d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	f3bf 8f6f 	isb	sy
	}
 80089ec:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80089ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008a18 <vTaskDelay+0x44>)
 80089f0:	6819      	ldr	r1, [r3, #0]
 80089f2:	b141      	cbz	r1, 8008a06 <vTaskDelay+0x32>
 80089f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	e7fe      	b.n	8008a04 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008a06:	f7ff fec5 	bl	8008794 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a0a:	f7ff fcdb 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008a0e:	f7ff ff6d 	bl	80088ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d0e0      	beq.n	80089d8 <vTaskDelay+0x4>
 8008a16:	e7e9      	b.n	80089ec <vTaskDelay+0x18>
 8008a18:	20014e04 	.word	0x20014e04

08008a1c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a1c:	4b17      	ldr	r3, [pc, #92]	@ (8008a7c <vTaskSwitchContext+0x60>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	4b17      	ldr	r3, [pc, #92]	@ (8008a80 <vTaskSwitchContext+0x64>)
{
 8008a22:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a24:	b112      	cbz	r2, 8008a2c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008a26:	2201      	movs	r2, #1
 8008a28:	601a      	str	r2, [r3, #0]
}
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a2c:	4d15      	ldr	r5, [pc, #84]	@ (8008a84 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8008a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a30:	682a      	ldr	r2, [r5, #0]
 8008a32:	4915      	ldr	r1, [pc, #84]	@ (8008a88 <vTaskSwitchContext+0x6c>)
 8008a34:	2614      	movs	r6, #20
 8008a36:	fb06 f302 	mul.w	r3, r6, r2
 8008a3a:	18c8      	adds	r0, r1, r3
 8008a3c:	58cc      	ldr	r4, [r1, r3]
 8008a3e:	b18c      	cbz	r4, 8008a64 <vTaskSwitchContext+0x48>
 8008a40:	6844      	ldr	r4, [r0, #4]
 8008a42:	3308      	adds	r3, #8
 8008a44:	6864      	ldr	r4, [r4, #4]
 8008a46:	6044      	str	r4, [r0, #4]
 8008a48:	440b      	add	r3, r1
 8008a4a:	429c      	cmp	r4, r3
 8008a4c:	bf04      	itt	eq
 8008a4e:	6863      	ldreq	r3, [r4, #4]
 8008a50:	6043      	streq	r3, [r0, #4]
 8008a52:	2314      	movs	r3, #20
 8008a54:	fb03 1102 	mla	r1, r3, r2, r1
 8008a58:	684b      	ldr	r3, [r1, #4]
 8008a5a:	68d9      	ldr	r1, [r3, #12]
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a8c <vTaskSwitchContext+0x70>)
 8008a5e:	6019      	str	r1, [r3, #0]
 8008a60:	602a      	str	r2, [r5, #0]
}
 8008a62:	e7e2      	b.n	8008a2a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a64:	b942      	cbnz	r2, 8008a78 <vTaskSwitchContext+0x5c>
 8008a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	e7fe      	b.n	8008a76 <vTaskSwitchContext+0x5a>
 8008a78:	3a01      	subs	r2, #1
 8008a7a:	e7dc      	b.n	8008a36 <vTaskSwitchContext+0x1a>
 8008a7c:	20014e04 	.word	0x20014e04
 8008a80:	20014e14 	.word	0x20014e14
 8008a84:	20014e20 	.word	0x20014e20
 8008a88:	20014e9c 	.word	0x20014e9c
 8008a8c:	200152fc 	.word	0x200152fc

08008a90 <vTaskPlaceOnEventList>:
{
 8008a90:	b510      	push	{r4, lr}
 8008a92:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008a94:	b940      	cbnz	r0, 8008aa8 <vTaskPlaceOnEventList+0x18>
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	e7fe      	b.n	8008aa6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aa8:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <vTaskPlaceOnEventList+0x30>)
 8008aaa:	6819      	ldr	r1, [r3, #0]
 8008aac:	3118      	adds	r1, #24
 8008aae:	f7fe fd34 	bl	800751a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	2101      	movs	r1, #1
}
 8008ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008aba:	f7ff bc83 	b.w	80083c4 <prvAddCurrentTaskToDelayedList>
 8008abe:	bf00      	nop
 8008ac0:	200152fc 	.word	0x200152fc

08008ac4 <vTaskPlaceOnEventListRestricted>:
	{
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	460d      	mov	r5, r1
 8008ac8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008aca:	b940      	cbnz	r0, 8008ade <vTaskPlaceOnEventListRestricted+0x1a>
 8008acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	e7fe      	b.n	8008adc <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ade:	4b07      	ldr	r3, [pc, #28]	@ (8008afc <vTaskPlaceOnEventListRestricted+0x38>)
 8008ae0:	6819      	ldr	r1, [r3, #0]
 8008ae2:	3118      	adds	r1, #24
 8008ae4:	f7fe fd0e 	bl	8007504 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008ae8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008aea:	4621      	mov	r1, r4
 8008aec:	bf0c      	ite	eq
 8008aee:	4628      	moveq	r0, r5
 8008af0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008af8:	f7ff bc64 	b.w	80083c4 <prvAddCurrentTaskToDelayedList>
 8008afc:	200152fc 	.word	0x200152fc

08008b00 <xTaskRemoveFromEventList>:
{
 8008b00:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b02:	68c3      	ldr	r3, [r0, #12]
 8008b04:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008b06:	b944      	cbnz	r4, 8008b1a <xTaskRemoveFromEventList+0x1a>
 8008b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	e7fe      	b.n	8008b18 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b1a:	f104 0518 	add.w	r5, r4, #24
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f7fe fd12 	bl	8007548 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b24:	4b10      	ldr	r3, [pc, #64]	@ (8008b68 <xTaskRemoveFromEventList+0x68>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	b9db      	cbnz	r3, 8008b62 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b2a:	1d25      	adds	r5, r4, #4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f7fe fd0b 	bl	8007548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b32:	4a0e      	ldr	r2, [pc, #56]	@ (8008b6c <xTaskRemoveFromEventList+0x6c>)
 8008b34:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008b36:	6811      	ldr	r1, [r2, #0]
 8008b38:	428b      	cmp	r3, r1
 8008b3a:	bf88      	it	hi
 8008b3c:	6013      	strhi	r3, [r2, #0]
 8008b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b70 <xTaskRemoveFromEventList+0x70>)
 8008b40:	2014      	movs	r0, #20
 8008b42:	4629      	mov	r1, r5
 8008b44:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b48:	f7fe fcdc 	bl	8007504 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b4c:	4b09      	ldr	r3, [pc, #36]	@ (8008b74 <xTaskRemoveFromEventList+0x74>)
 8008b4e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b54:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008b56:	bf83      	ittte	hi
 8008b58:	4b07      	ldrhi	r3, [pc, #28]	@ (8008b78 <xTaskRemoveFromEventList+0x78>)
 8008b5a:	2001      	movhi	r0, #1
 8008b5c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8008b5e:	2000      	movls	r0, #0
}
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b62:	4806      	ldr	r0, [pc, #24]	@ (8008b7c <xTaskRemoveFromEventList+0x7c>)
 8008b64:	4629      	mov	r1, r5
 8008b66:	e7ef      	b.n	8008b48 <xTaskRemoveFromEventList+0x48>
 8008b68:	20014e04 	.word	0x20014e04
 8008b6c:	20014e20 	.word	0x20014e20
 8008b70:	20014e9c 	.word	0x20014e9c
 8008b74:	200152fc 	.word	0x200152fc
 8008b78:	20014e14 	.word	0x20014e14
 8008b7c:	20014e58 	.word	0x20014e58

08008b80 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b80:	4b03      	ldr	r3, [pc, #12]	@ (8008b90 <vTaskInternalSetTimeOutState+0x10>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b86:	4b03      	ldr	r3, [pc, #12]	@ (8008b94 <vTaskInternalSetTimeOutState+0x14>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6043      	str	r3, [r0, #4]
}
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20014e10 	.word	0x20014e10
 8008b94:	20014e24 	.word	0x20014e24

08008b98 <xTaskCheckForTimeOut>:
{
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	b940      	cbnz	r0, 8008bb2 <xTaskCheckForTimeOut+0x1a>
 8008ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	e7fe      	b.n	8008bb0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008bb2:	b941      	cbnz	r1, 8008bc6 <xTaskCheckForTimeOut+0x2e>
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	e7fe      	b.n	8008bc4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008bc6:	f7fe fd35 	bl	8007634 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008bca:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <xTaskCheckForTimeOut+0x70>)
 8008bcc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	d010      	beq.n	8008bf6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bd4:	480d      	ldr	r0, [pc, #52]	@ (8008c0c <xTaskCheckForTimeOut+0x74>)
 8008bd6:	682e      	ldr	r6, [r5, #0]
 8008bd8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bda:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bdc:	4286      	cmp	r6, r0
 8008bde:	d001      	beq.n	8008be4 <xTaskCheckForTimeOut+0x4c>
 8008be0:	428a      	cmp	r2, r1
 8008be2:	d90f      	bls.n	8008c04 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008be4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008be6:	4283      	cmp	r3, r0
 8008be8:	d90a      	bls.n	8008c00 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008bea:	1a5b      	subs	r3, r3, r1
 8008bec:	4413      	add	r3, r2
 8008bee:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7ff ffc5 	bl	8008b80 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008bf6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008bf8:	f7fe fd3c 	bl	8007674 <vPortExitCritical>
}
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008c04:	2401      	movs	r4, #1
 8008c06:	e7f7      	b.n	8008bf8 <xTaskCheckForTimeOut+0x60>
 8008c08:	20014e24 	.word	0x20014e24
 8008c0c:	20014e10 	.word	0x20014e10

08008c10 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008c10:	4b01      	ldr	r3, [pc, #4]	@ (8008c18 <vTaskMissedYield+0x8>)
 8008c12:	2201      	movs	r2, #1
 8008c14:	601a      	str	r2, [r3, #0]
}
 8008c16:	4770      	bx	lr
 8008c18:	20014e14 	.word	0x20014e14

08008c1c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008c1c:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <xTaskGetSchedulerState+0x18>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	b133      	cbz	r3, 8008c30 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c22:	4b05      	ldr	r3, [pc, #20]	@ (8008c38 <xTaskGetSchedulerState+0x1c>)
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	fab0 f080 	clz	r0, r0
 8008c2a:	0940      	lsrs	r0, r0, #5
 8008c2c:	0040      	lsls	r0, r0, #1
 8008c2e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c30:	2001      	movs	r0, #1
	}
 8008c32:	4770      	bx	lr
 8008c34:	20014e1c 	.word	0x20014e1c
 8008c38:	20014e04 	.word	0x20014e04

08008c3c <xTaskPriorityInherit>:
	{
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008c3e:	4604      	mov	r4, r0
 8008c40:	b338      	cbz	r0, 8008c92 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c42:	4d1a      	ldr	r5, [pc, #104]	@ (8008cac <xTaskPriorityInherit+0x70>)
 8008c44:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008c46:	682a      	ldr	r2, [r5, #0]
 8008c48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d226      	bcs.n	8008c9c <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c4e:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c50:	4e17      	ldr	r6, [pc, #92]	@ (8008cb0 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c52:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c54:	bfa1      	itttt	ge
 8008c56:	682a      	ldrge	r2, [r5, #0]
 8008c58:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8008c5a:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8008c5e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c60:	2214      	movs	r2, #20
 8008c62:	fb02 6303 	mla	r3, r2, r3, r6
 8008c66:	6942      	ldr	r2, [r0, #20]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d113      	bne.n	8008c94 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c6c:	1d07      	adds	r7, r0, #4
 8008c6e:	4638      	mov	r0, r7
 8008c70:	f7fe fc6a 	bl	8007548 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c74:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c76:	4a0f      	ldr	r2, [pc, #60]	@ (8008cb4 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c7a:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c7e:	2014      	movs	r0, #20
 8008c80:	428b      	cmp	r3, r1
 8008c82:	fb00 6003 	mla	r0, r0, r3, r6
 8008c86:	4639      	mov	r1, r7
 8008c88:	bf88      	it	hi
 8008c8a:	6013      	strhi	r3, [r2, #0]
 8008c8c:	f7fe fc3a 	bl	8007504 <vListInsertEnd>
				xReturn = pdTRUE;
 8008c90:	2001      	movs	r0, #1
	}
 8008c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c98:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8008c9a:	e7f9      	b.n	8008c90 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	4298      	cmp	r0, r3
 8008ca4:	bf2c      	ite	cs
 8008ca6:	2000      	movcs	r0, #0
 8008ca8:	2001      	movcc	r0, #1
 8008caa:	e7f2      	b.n	8008c92 <xTaskPriorityInherit+0x56>
 8008cac:	200152fc 	.word	0x200152fc
 8008cb0:	20014e9c 	.word	0x20014e9c
 8008cb4:	20014e20 	.word	0x20014e20

08008cb8 <xTaskPriorityDisinherit>:
	{
 8008cb8:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008cba:	b908      	cbnz	r0, 8008cc0 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008cbc:	2000      	movs	r0, #0
	}
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8008d30 <xTaskPriorityDisinherit+0x78>)
 8008cc2:	681c      	ldr	r4, [r3, #0]
 8008cc4:	4284      	cmp	r4, r0
 8008cc6:	d008      	beq.n	8008cda <xTaskPriorityDisinherit+0x22>
 8008cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	e7fe      	b.n	8008cd8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cda:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008cdc:	b943      	cbnz	r3, 8008cf0 <xTaskPriorityDisinherit+0x38>
 8008cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	e7fe      	b.n	8008cee <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cf0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008cf2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008cf4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cf6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008cf8:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cfa:	d0df      	beq.n	8008cbc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1dd      	bne.n	8008cbc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d00:	1d25      	adds	r5, r4, #4
 8008d02:	4628      	mov	r0, r5
 8008d04:	f7fe fc20 	bl	8007548 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d08:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008d0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d10:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d12:	4a08      	ldr	r2, [pc, #32]	@ (8008d34 <xTaskPriorityDisinherit+0x7c>)
 8008d14:	6811      	ldr	r1, [r2, #0]
 8008d16:	428b      	cmp	r3, r1
 8008d18:	bf88      	it	hi
 8008d1a:	6013      	strhi	r3, [r2, #0]
 8008d1c:	4a06      	ldr	r2, [pc, #24]	@ (8008d38 <xTaskPriorityDisinherit+0x80>)
 8008d1e:	2014      	movs	r0, #20
 8008d20:	fb00 2003 	mla	r0, r0, r3, r2
 8008d24:	4629      	mov	r1, r5
 8008d26:	f7fe fbed 	bl	8007504 <vListInsertEnd>
					xReturn = pdTRUE;
 8008d2a:	2001      	movs	r0, #1
		return xReturn;
 8008d2c:	e7c7      	b.n	8008cbe <xTaskPriorityDisinherit+0x6>
 8008d2e:	bf00      	nop
 8008d30:	200152fc 	.word	0x200152fc
 8008d34:	20014e20 	.word	0x20014e20
 8008d38:	20014e9c 	.word	0x20014e9c

08008d3c <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008d3c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008d3e:	4604      	mov	r4, r0
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d041      	beq.n	8008dc8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d44:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008d46:	b942      	cbnz	r2, 8008d5a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	e7fe      	b.n	8008d58 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d5a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008d5c:	4299      	cmp	r1, r3
 8008d5e:	bf38      	it	cc
 8008d60:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d62:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008d64:	428b      	cmp	r3, r1
 8008d66:	d02f      	beq.n	8008dc8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d68:	2a01      	cmp	r2, #1
 8008d6a:	d12d      	bne.n	8008dc8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8008d6c:	4a17      	ldr	r2, [pc, #92]	@ (8008dcc <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	4282      	cmp	r2, r0
 8008d72:	d108      	bne.n	8008d86 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	e7fe      	b.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d86:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d88:	4d11      	ldr	r5, [pc, #68]	@ (8008dd0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 8008d8a:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d8c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d8e:	f04f 0214 	mov.w	r2, #20
 8008d92:	fb02 5303 	mla	r3, r2, r3, r5
 8008d96:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d98:	bfa4      	itt	ge
 8008d9a:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 8008d9e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d111      	bne.n	8008dc8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008da4:	1d06      	adds	r6, r0, #4
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7fe fbce 	bl	8007548 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008dac:	4a09      	ldr	r2, [pc, #36]	@ (8008dd4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008dae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008db0:	6811      	ldr	r1, [r2, #0]
 8008db2:	2014      	movs	r0, #20
 8008db4:	428b      	cmp	r3, r1
 8008db6:	fb00 5003 	mla	r0, r0, r3, r5
 8008dba:	4631      	mov	r1, r6
	}
 8008dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8008dc0:	bf88      	it	hi
 8008dc2:	6013      	strhi	r3, [r2, #0]
 8008dc4:	f7fe bb9e 	b.w	8007504 <vListInsertEnd>
	}
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	bf00      	nop
 8008dcc:	200152fc 	.word	0x200152fc
 8008dd0:	20014e9c 	.word	0x20014e9c
 8008dd4:	20014e20 	.word	0x20014e20

08008dd8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008dd8:	4b04      	ldr	r3, [pc, #16]	@ (8008dec <pvTaskIncrementMutexHeldCount+0x14>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	b11a      	cbz	r2, 8008de6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008dde:	6819      	ldr	r1, [r3, #0]
 8008de0:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008de2:	3201      	adds	r2, #1
 8008de4:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8008de6:	6818      	ldr	r0, [r3, #0]
	}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	200152fc 	.word	0x200152fc

08008df0 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8008df0:	4291      	cmp	r1, r2
{
 8008df2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008df4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008df6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008df8:	d80a      	bhi.n	8008e10 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dfa:	1ad2      	subs	r2, r2, r3
 8008dfc:	6983      	ldr	r3, [r0, #24]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d20d      	bcs.n	8008e1e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e02:	4b08      	ldr	r3, [pc, #32]	@ (8008e24 <prvInsertTimerInActiveList+0x34>)
 8008e04:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	f7fe fb87 	bl	800751a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008e0c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8008e0e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d201      	bcs.n	8008e18 <prvInsertTimerInActiveList+0x28>
 8008e14:	4299      	cmp	r1, r3
 8008e16:	d202      	bcs.n	8008e1e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e18:	4b03      	ldr	r3, [pc, #12]	@ (8008e28 <prvInsertTimerInActiveList+0x38>)
 8008e1a:	1d01      	adds	r1, r0, #4
 8008e1c:	e7f3      	b.n	8008e06 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008e1e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008e20:	e7f5      	b.n	8008e0e <prvInsertTimerInActiveList+0x1e>
 8008e22:	bf00      	nop
 8008e24:	200153fc 	.word	0x200153fc
 8008e28:	20015400 	.word	0x20015400

08008e2c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008e2e:	4c11      	ldr	r4, [pc, #68]	@ (8008e74 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008e30:	f7fe fc00 	bl	8007634 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	b9bd      	cbnz	r5, 8008e68 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e38:	4f0f      	ldr	r7, [pc, #60]	@ (8008e78 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008e3a:	4e10      	ldr	r6, [pc, #64]	@ (8008e7c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f7fe fb53 	bl	80074e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7fe fb50 	bl	80074e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e48:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8008e84 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8008e4c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e88 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e50:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8008e52:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e54:	200a      	movs	r0, #10
 8008e56:	4b0d      	ldr	r3, [pc, #52]	@ (8008e8c <prvCheckForValidListAndQueue+0x60>)
 8008e58:	9500      	str	r5, [sp, #0]
 8008e5a:	f7fe fdf4 	bl	8007a46 <xQueueGenericCreateStatic>
 8008e5e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e60:	b110      	cbz	r0, 8008e68 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e62:	490b      	ldr	r1, [pc, #44]	@ (8008e90 <prvCheckForValidListAndQueue+0x64>)
 8008e64:	f7ff f9cc 	bl	8008200 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008e68:	b003      	add	sp, #12
 8008e6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008e6e:	f7fe bc01 	b.w	8007674 <vPortExitCritical>
 8008e72:	bf00      	nop
 8008e74:	200153f8 	.word	0x200153f8
 8008e78:	20015418 	.word	0x20015418
 8008e7c:	20015404 	.word	0x20015404
 8008e80:	20015400 	.word	0x20015400
 8008e84:	20015350 	.word	0x20015350
 8008e88:	200153fc 	.word	0x200153fc
 8008e8c:	20015300 	.word	0x20015300
 8008e90:	080148dd 	.word	0x080148dd

08008e94 <xTimerCreateTimerTask>:
{
 8008e94:	b510      	push	{r4, lr}
 8008e96:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008e98:	f7ff ffc8 	bl	8008e2c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008e9c:	4b12      	ldr	r3, [pc, #72]	@ (8008ee8 <xTimerCreateTimerTask+0x54>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	b1b3      	cbz	r3, 8008ed0 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ea2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ea4:	aa07      	add	r2, sp, #28
 8008ea6:	a906      	add	r1, sp, #24
 8008ea8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008eaa:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008eae:	f7fe fa13 	bl	80072d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008eb2:	9b05      	ldr	r3, [sp, #20]
 8008eb4:	9302      	str	r3, [sp, #8]
 8008eb6:	9b06      	ldr	r3, [sp, #24]
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	2302      	movs	r3, #2
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	9a07      	ldr	r2, [sp, #28]
 8008ec0:	490a      	ldr	r1, [pc, #40]	@ (8008eec <xTimerCreateTimerTask+0x58>)
 8008ec2:	480b      	ldr	r0, [pc, #44]	@ (8008ef0 <xTimerCreateTimerTask+0x5c>)
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	f7ff fb60 	bl	800858a <xTaskCreateStatic>
 8008eca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <xTimerCreateTimerTask+0x60>)
 8008ecc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008ece:	b940      	cbnz	r0, 8008ee2 <xTimerCreateTimerTask+0x4e>
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008ee0:	e7fe      	b.n	8008ee0 <xTimerCreateTimerTask+0x4c>
}
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	b008      	add	sp, #32
 8008ee6:	bd10      	pop	{r4, pc}
 8008ee8:	200153f8 	.word	0x200153f8
 8008eec:	080148e2 	.word	0x080148e2
 8008ef0:	08008ff5 	.word	0x08008ff5
 8008ef4:	200153f4 	.word	0x200153f4

08008ef8 <xTimerGenericCommand>:
{
 8008ef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008efa:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008efc:	4604      	mov	r4, r0
{
 8008efe:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008f00:	b940      	cbnz	r0, 8008f14 <xTimerGenericCommand+0x1c>
 8008f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	e7fe      	b.n	8008f12 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008f14:	4d0d      	ldr	r5, [pc, #52]	@ (8008f4c <xTimerGenericCommand+0x54>)
 8008f16:	6828      	ldr	r0, [r5, #0]
 8008f18:	b180      	cbz	r0, 8008f3c <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f1a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f1c:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f20:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f22:	dc0d      	bgt.n	8008f40 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f24:	f7ff fe7a 	bl	8008c1c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f28:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f2a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f2c:	bf08      	it	eq
 8008f2e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f30:	6828      	ldr	r0, [r5, #0]
 8008f32:	bf18      	it	ne
 8008f34:	461a      	movne	r2, r3
 8008f36:	4669      	mov	r1, sp
 8008f38:	f7fe fe3a 	bl	8007bb0 <xQueueGenericSend>
}
 8008f3c:	b004      	add	sp, #16
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f40:	2300      	movs	r3, #0
 8008f42:	4669      	mov	r1, sp
 8008f44:	f7fe fee6 	bl	8007d14 <xQueueGenericSendFromISR>
 8008f48:	e7f8      	b.n	8008f3c <xTimerGenericCommand+0x44>
 8008f4a:	bf00      	nop
 8008f4c:	200153f8 	.word	0x200153f8

08008f50 <prvSampleTimeNow>:
{
 8008f50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8008f54:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008ff0 <prvSampleTimeNow+0xa0>
{
 8008f58:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8008f5a:	f7ff fc23 	bl	80087a4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f62:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8008f64:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008f66:	d909      	bls.n	8008f7c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f68:	4f1f      	ldr	r7, [pc, #124]	@ (8008fe8 <prvSampleTimeNow+0x98>)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	b96a      	cbnz	r2, 8008f8c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8008f70:	4a1e      	ldr	r2, [pc, #120]	@ (8008fec <prvSampleTimeNow+0x9c>)
 8008f72:	6811      	ldr	r1, [r2, #0]
 8008f74:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8008f76:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e000      	b.n	8008f7e <prvSampleTimeNow+0x2e>
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8008f80:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8008f82:	f8c8 5000 	str.w	r5, [r8]
}
 8008f86:	b002      	add	sp, #8
 8008f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f8c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f8e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f90:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f94:	f104 0a04 	add.w	sl, r4, #4
 8008f98:	4650      	mov	r0, sl
 8008f9a:	f7fe fad5 	bl	8007548 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f9e:	6a23      	ldr	r3, [r4, #32]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fa4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008fa8:	075b      	lsls	r3, r3, #29
 8008faa:	d5de      	bpl.n	8008f6a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fac:	69a3      	ldr	r3, [r4, #24]
 8008fae:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8008fb0:	4599      	cmp	r9, r3
 8008fb2:	d206      	bcs.n	8008fc2 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fb4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fb6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fb8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fba:	4651      	mov	r1, sl
 8008fbc:	f7fe faad 	bl	800751a <vListInsert>
 8008fc0:	e7d3      	b.n	8008f6a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	464a      	mov	r2, r9
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7ff ff94 	bl	8008ef8 <xTimerGenericCommand>
				configASSERT( xResult );
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d1ca      	bne.n	8008f6a <prvSampleTimeNow+0x1a>
 8008fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	e7fe      	b.n	8008fe4 <prvSampleTimeNow+0x94>
 8008fe6:	bf00      	nop
 8008fe8:	20015400 	.word	0x20015400
 8008fec:	200153fc 	.word	0x200153fc
 8008ff0:	200153f0 	.word	0x200153f0

08008ff4 <prvTimerTask>:
{
 8008ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ff8:	4d6e      	ldr	r5, [pc, #440]	@ (80091b4 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ffa:	4e6f      	ldr	r6, [pc, #444]	@ (80091b8 <prvTimerTask+0x1c4>)
{
 8008ffc:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	f8d3 8000 	ldr.w	r8, [r3]
 8009004:	f1b8 0f00 	cmp.w	r8, #0
 8009008:	d035      	beq.n	8009076 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009010:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8009012:	f7ff fbbf 	bl	8008794 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009016:	a804      	add	r0, sp, #16
 8009018:	f7ff ff9a 	bl	8008f50 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800901c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800901e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009020:	2b00      	cmp	r3, #0
 8009022:	d169      	bne.n	80090f8 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009024:	2c00      	cmp	r4, #0
 8009026:	d14c      	bne.n	80090c2 <prvTimerTask+0xce>
 8009028:	4540      	cmp	r0, r8
 800902a:	d350      	bcc.n	80090ce <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800902c:	f7ff fc5e 	bl	80088ec <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009036:	1d38      	adds	r0, r7, #4
 8009038:	f7fe fa86 	bl	8007548 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800903c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009040:	0758      	lsls	r0, r3, #29
 8009042:	d51a      	bpl.n	800907a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009044:	69b9      	ldr	r1, [r7, #24]
 8009046:	4643      	mov	r3, r8
 8009048:	464a      	mov	r2, r9
 800904a:	4441      	add	r1, r8
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff fecf 	bl	8008df0 <prvInsertTimerInActiveList>
 8009052:	b1b0      	cbz	r0, 8009082 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009054:	9400      	str	r4, [sp, #0]
 8009056:	4623      	mov	r3, r4
 8009058:	4642      	mov	r2, r8
 800905a:	4621      	mov	r1, r4
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff ff4b 	bl	8008ef8 <xTimerGenericCommand>
			configASSERT( xResult );
 8009062:	b970      	cbnz	r0, 8009082 <prvTimerTask+0x8e>
 8009064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	e7fe      	b.n	8009074 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009076:	2401      	movs	r4, #1
 8009078:	e7cb      	b.n	8009012 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800907a:	f023 0301 	bic.w	r3, r3, #1
 800907e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	4638      	mov	r0, r7
 8009086:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009088:	6830      	ldr	r0, [r6, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	a904      	add	r1, sp, #16
 800908e:	f7fe feef 	bl	8007e70 <xQueueReceive>
 8009092:	2800      	cmp	r0, #0
 8009094:	d0b3      	beq.n	8008ffe <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009096:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009098:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800909a:	2b00      	cmp	r3, #0
 800909c:	db2f      	blt.n	80090fe <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800909e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80090a0:	6963      	ldr	r3, [r4, #20]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d132      	bne.n	800910c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090a6:	a803      	add	r0, sp, #12
 80090a8:	f7ff ff52 	bl	8008f50 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80090ac:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090ae:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80090b0:	2b09      	cmp	r3, #9
 80090b2:	d8e9      	bhi.n	8009088 <prvTimerTask+0x94>
 80090b4:	e8df f003 	tbb	[pc, r3]
 80090b8:	572e2e2e 	.word	0x572e2e2e
 80090bc:	2e2e765e 	.word	0x2e2e765e
 80090c0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090c2:	4b3e      	ldr	r3, [pc, #248]	@ (80091bc <prvTimerTask+0x1c8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681c      	ldr	r4, [r3, #0]
 80090c8:	fab4 f484 	clz	r4, r4
 80090cc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090ce:	6830      	ldr	r0, [r6, #0]
 80090d0:	4622      	mov	r2, r4
 80090d2:	eba8 0109 	sub.w	r1, r8, r9
 80090d6:	f7ff f8d2 	bl	800827e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090da:	f7ff fc07 	bl	80088ec <xTaskResumeAll>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d1d2      	bne.n	8009088 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80090e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80090e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	e7c7      	b.n	8009088 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80090f8:	f7ff fbf8 	bl	80088ec <xTaskResumeAll>
}
 80090fc:	e7c4      	b.n	8009088 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	9907      	ldr	r1, [sp, #28]
 8009102:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	dbbe      	blt.n	8009088 <prvTimerTask+0x94>
 800910a:	e7c8      	b.n	800909e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800910c:	1d20      	adds	r0, r4, #4
 800910e:	f7fe fa1b 	bl	8007548 <uxListRemove>
 8009112:	e7c8      	b.n	80090a6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009114:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009118:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800911a:	f043 0301 	orr.w	r3, r3, #1
 800911e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009122:	9b05      	ldr	r3, [sp, #20]
 8009124:	4620      	mov	r0, r4
 8009126:	4419      	add	r1, r3
 8009128:	f7ff fe62 	bl	8008df0 <prvInsertTimerInActiveList>
 800912c:	2800      	cmp	r0, #0
 800912e:	d0ab      	beq.n	8009088 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009130:	6a23      	ldr	r3, [r4, #32]
 8009132:	4620      	mov	r0, r4
 8009134:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009136:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800913a:	0759      	lsls	r1, r3, #29
 800913c:	d5a4      	bpl.n	8009088 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800913e:	69a2      	ldr	r2, [r4, #24]
 8009140:	9905      	ldr	r1, [sp, #20]
 8009142:	2300      	movs	r3, #0
 8009144:	440a      	add	r2, r1
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	4619      	mov	r1, r3
 800914a:	4620      	mov	r0, r4
 800914c:	f7ff fed4 	bl	8008ef8 <xTimerGenericCommand>
							configASSERT( xResult );
 8009150:	2800      	cmp	r0, #0
 8009152:	d199      	bne.n	8009088 <prvTimerTask+0x94>
 8009154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	e7fe      	b.n	8009164 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009166:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800916a:	f023 0301 	bic.w	r3, r3, #1
 800916e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8009172:	e789      	b.n	8009088 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009174:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009178:	f043 0301 	orr.w	r3, r3, #1
 800917c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009180:	9905      	ldr	r1, [sp, #20]
 8009182:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009184:	b941      	cbnz	r1, 8009198 <prvTimerTask+0x1a4>
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	e7fe      	b.n	8009196 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009198:	4603      	mov	r3, r0
 800919a:	4401      	add	r1, r0
 800919c:	4620      	mov	r0, r4
 800919e:	f7ff fe27 	bl	8008df0 <prvInsertTimerInActiveList>
					break;
 80091a2:	e771      	b.n	8009088 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80091a4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80091a8:	079a      	lsls	r2, r3, #30
 80091aa:	d4de      	bmi.n	800916a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80091ac:	4620      	mov	r0, r4
 80091ae:	f7fe f95d 	bl	800746c <vPortFree>
 80091b2:	e769      	b.n	8009088 <prvTimerTask+0x94>
 80091b4:	20015400 	.word	0x20015400
 80091b8:	200153f8 	.word	0x200153f8
 80091bc:	200153fc 	.word	0x200153fc

080091c0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80091c0:	8880      	ldrh	r0, [r0, #4]
 80091c2:	4770      	bx	lr

080091c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	6803      	ldr	r3, [r0, #0]
 80091c8:	4605      	mov	r5, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ce:	2100      	movs	r1, #0
 80091d0:	4798      	blx	r3
 80091d2:	682b      	ldr	r3, [r5, #0]
 80091d4:	4606      	mov	r6, r0
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	4628      	mov	r0, r5
 80091da:	4798      	blx	r3
 80091dc:	1ba4      	subs	r4, r4, r6
 80091de:	b2a4      	uxth	r4, r4
 80091e0:	fbb4 f0f0 	udiv	r0, r4, r0
 80091e4:	bd70      	pop	{r4, r5, r6, pc}

080091e6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80091e6:	2300      	movs	r3, #0
 80091e8:	8083      	strh	r3, [r0, #4]
 80091ea:	4770      	bx	lr

080091ec <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	6803      	ldr	r3, [r0, #0]
 80091f0:	8881      	ldrh	r1, [r0, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f4:	4604      	mov	r4, r0
 80091f6:	4798      	blx	r3
 80091f8:	88a3      	ldrh	r3, [r4, #4]
 80091fa:	3301      	adds	r3, #1
 80091fc:	80a3      	strh	r3, [r4, #4]
 80091fe:	bd10      	pop	{r4, pc}

08009200 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8009200:	6803      	ldr	r3, [r0, #0]
 8009202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009204:	4718      	bx	r3

08009206 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8009206:	4770      	bx	lr

08009208 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8009208:	4a02      	ldr	r2, [pc, #8]	@ (8009214 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800920a:	6002      	str	r2, [r0, #0]
 800920c:	2200      	movs	r2, #0
 800920e:	8082      	strh	r2, [r0, #4]
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	080155c8 	.word	0x080155c8

08009218 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8009218:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800921a:	2000      	movs	r0, #0
 800921c:	b12b      	cbz	r3, 800922a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800921e:	b920      	cbnz	r0, 800922a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009220:	1a5a      	subs	r2, r3, r1
 8009222:	4250      	negs	r0, r2
 8009224:	4150      	adcs	r0, r2
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	e7f8      	b.n	800921c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800922a:	4770      	bx	lr

0800922c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800922c:	2300      	movs	r3, #0
 800922e:	6148      	str	r0, [r1, #20]
 8009230:	618b      	str	r3, [r1, #24]
 8009232:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009234:	b913      	cbnz	r3, 800923c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8009236:	6281      	str	r1, [r0, #40]	@ 0x28
 8009238:	4770      	bx	lr
 800923a:	4613      	mov	r3, r2
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	2a00      	cmp	r2, #0
 8009240:	d1fb      	bne.n	800923a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8009242:	6199      	str	r1, [r3, #24]
 8009244:	4770      	bx	lr

08009246 <_ZN8touchgfx9Container9removeAllEv>:
 8009246:	2200      	movs	r2, #0
 8009248:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800924a:	b123      	cbz	r3, 8009256 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800924c:	6999      	ldr	r1, [r3, #24]
 800924e:	6281      	str	r1, [r0, #40]	@ 0x28
 8009250:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8009254:	e7f8      	b.n	8009248 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8009256:	4770      	bx	lr

08009258 <_ZN8touchgfx9Container6unlinkEv>:
 8009258:	2300      	movs	r3, #0
 800925a:	6283      	str	r3, [r0, #40]	@ 0x28
 800925c:	4770      	bx	lr

0800925e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800925e:	2200      	movs	r2, #0
 8009260:	8002      	strh	r2, [r0, #0]
 8009262:	8042      	strh	r2, [r0, #2]
 8009264:	8082      	strh	r2, [r0, #4]
 8009266:	80c2      	strh	r2, [r0, #6]
 8009268:	4770      	bx	lr

0800926a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800926a:	b570      	push	{r4, r5, r6, lr}
 800926c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800926e:	460d      	mov	r5, r1
 8009270:	4616      	mov	r6, r2
 8009272:	b13c      	cbz	r4, 8009284 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	4620      	mov	r0, r4
 8009278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800927a:	4632      	mov	r2, r6
 800927c:	4629      	mov	r1, r5
 800927e:	4798      	blx	r3
 8009280:	69a4      	ldr	r4, [r4, #24]
 8009282:	e7f6      	b.n	8009272 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8009284:	bd70      	pop	{r4, r5, r6, pc}

08009286 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8009286:	b538      	push	{r3, r4, r5, lr}
 8009288:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800928a:	460d      	mov	r5, r1
 800928c:	b134      	cbz	r4, 800929c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	4621      	mov	r1, r4
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	4628      	mov	r0, r5
 8009296:	4798      	blx	r3
 8009298:	69a4      	ldr	r4, [r4, #24]
 800929a:	e7f7      	b.n	800928c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800929c:	bd38      	pop	{r3, r4, r5, pc}

0800929e <_ZN8touchgfx9ContainerD1Ev>:
 800929e:	4770      	bx	lr

080092a0 <_ZN8touchgfx9ContainerD0Ev>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	212c      	movs	r1, #44	@ 0x2c
 80092a4:	4604      	mov	r4, r0
 80092a6:	f009 fbbb 	bl	8012a20 <_ZdlPvj>
 80092aa:	4620      	mov	r0, r4
 80092ac:	bd10      	pop	{r4, pc}

080092ae <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80092ae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80092b0:	b19b      	cbz	r3, 80092da <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80092b2:	428b      	cmp	r3, r1
 80092b4:	d109      	bne.n	80092ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80092b6:	699a      	ldr	r2, [r3, #24]
 80092b8:	2100      	movs	r1, #0
 80092ba:	6159      	str	r1, [r3, #20]
 80092bc:	6282      	str	r2, [r0, #40]	@ 0x28
 80092be:	b902      	cbnz	r2, 80092c2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80092c0:	4770      	bx	lr
 80092c2:	6199      	str	r1, [r3, #24]
 80092c4:	4770      	bx	lr
 80092c6:	4613      	mov	r3, r2
 80092c8:	b13a      	cbz	r2, 80092da <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	428a      	cmp	r2, r1
 80092ce:	d1fa      	bne.n	80092c6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80092d0:	698a      	ldr	r2, [r1, #24]
 80092d2:	619a      	str	r2, [r3, #24]
 80092d4:	2300      	movs	r3, #0
 80092d6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80092da:	4770      	bx	lr

080092dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80092dc:	b410      	push	{r4}
 80092de:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80092e0:	4604      	mov	r4, r0
 80092e2:	b92b      	cbnz	r3, 80092f0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80092e4:	6803      	ldr	r3, [r0, #0]
 80092e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ec:	4611      	mov	r1, r2
 80092ee:	4718      	bx	r3
 80092f0:	b941      	cbnz	r1, 8009304 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80092f2:	6193      	str	r3, [r2, #24]
 80092f4:	6282      	str	r2, [r0, #40]	@ 0x28
 80092f6:	6154      	str	r4, [r2, #20]
 80092f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	4603      	mov	r3, r0
 8009300:	2800      	cmp	r0, #0
 8009302:	d0f9      	beq.n	80092f8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8009304:	4299      	cmp	r1, r3
 8009306:	6998      	ldr	r0, [r3, #24]
 8009308:	d1f9      	bne.n	80092fe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800930a:	6190      	str	r0, [r2, #24]
 800930c:	618a      	str	r2, [r1, #24]
 800930e:	e7f2      	b.n	80092f6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08009310 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	461f      	mov	r7, r3
 8009316:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800931a:	460d      	mov	r5, r1
 800931c:	4616      	mov	r6, r2
 800931e:	b103      	cbz	r3, 8009322 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8009320:	6038      	str	r0, [r7, #0]
 8009322:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009324:	b314      	cbz	r4, 800936c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8009326:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800932a:	b1eb      	cbz	r3, 8009368 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800932c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8009330:	428d      	cmp	r5, r1
 8009332:	db19      	blt.n	8009368 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009334:	8923      	ldrh	r3, [r4, #8]
 8009336:	b289      	uxth	r1, r1
 8009338:	440b      	add	r3, r1
 800933a:	b21b      	sxth	r3, r3
 800933c:	429d      	cmp	r5, r3
 800933e:	da13      	bge.n	8009368 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009340:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009344:	4296      	cmp	r6, r2
 8009346:	db0f      	blt.n	8009368 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009348:	8963      	ldrh	r3, [r4, #10]
 800934a:	b292      	uxth	r2, r2
 800934c:	4413      	add	r3, r2
 800934e:	b21b      	sxth	r3, r3
 8009350:	429e      	cmp	r6, r3
 8009352:	da09      	bge.n	8009368 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	1ab2      	subs	r2, r6, r2
 8009358:	1a69      	subs	r1, r5, r1
 800935a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800935e:	b212      	sxth	r2, r2
 8009360:	463b      	mov	r3, r7
 8009362:	b209      	sxth	r1, r1
 8009364:	4620      	mov	r0, r4
 8009366:	47c0      	blx	r8
 8009368:	69a4      	ldr	r4, [r4, #24]
 800936a:	e7db      	b.n	8009324 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009370 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	4c6e      	ldr	r4, [pc, #440]	@ (8009530 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8009376:	b0a1      	sub	sp, #132	@ 0x84
 8009378:	6824      	ldr	r4, [r4, #0]
 800937a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800937c:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8009380:	9303      	str	r3, [sp, #12]
 8009382:	2400      	movs	r4, #0
 8009384:	802c      	strh	r4, [r5, #0]
 8009386:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8009388:	802c      	strh	r4, [r5, #0]
 800938a:	601c      	str	r4, [r3, #0]
 800938c:	4606      	mov	r6, r0
 800938e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009392:	f7ff ffbd 	bl	8009310 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009396:	f1b9 0f03 	cmp.w	r9, #3
 800939a:	f340 80c2 	ble.w	8009522 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 800939e:	4631      	mov	r1, r6
 80093a0:	a80c      	add	r0, sp, #48	@ 0x30
 80093a2:	f004 fd19 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80093a6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80093aa:	9306      	str	r3, [sp, #24]
 80093ac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80093b0:	9307      	str	r3, [sp, #28]
 80093b2:	9b03      	ldr	r3, [sp, #12]
 80093b4:	f8d3 a000 	ldr.w	sl, [r3]
 80093b8:	f1ba 0f00 	cmp.w	sl, #0
 80093bc:	f000 80b4 	beq.w	8009528 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 80093c0:	4651      	mov	r1, sl
 80093c2:	a810      	add	r0, sp, #64	@ 0x40
 80093c4:	f004 fd08 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80093c8:	9b01      	ldr	r3, [sp, #4]
 80093ca:	9a06      	ldr	r2, [sp, #24]
 80093cc:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80093d0:	189d      	adds	r5, r3, r2
 80093d2:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80093d6:	9a07      	ldr	r2, [sp, #28]
 80093d8:	2002      	movs	r0, #2
 80093da:	fb91 f1f0 	sdiv	r1, r1, r0
 80093de:	4419      	add	r1, r3
 80093e0:	1a6d      	subs	r5, r5, r1
 80093e2:	9b02      	ldr	r3, [sp, #8]
 80093e4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80093e8:	4413      	add	r3, r2
 80093ea:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80093ee:	fb92 f2f0 	sdiv	r2, r2, r0
 80093f2:	440a      	add	r2, r1
 80093f4:	1a9b      	subs	r3, r3, r2
 80093f6:	435b      	muls	r3, r3
 80093f8:	fb05 3505 	mla	r5, r5, r5, r3
 80093fc:	4f4d      	ldr	r7, [pc, #308]	@ (8009534 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 80093fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009400:	ac10      	add	r4, sp, #64	@ 0x40
 8009402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009404:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009408:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800940a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800940c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8009410:	f1b9 0f0c 	cmp.w	r9, #12
 8009414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009418:	f04f 0303 	mov.w	r3, #3
 800941c:	bfc8      	it	gt
 800941e:	4698      	movgt	r8, r3
 8009420:	f8cd 9000 	str.w	r9, [sp]
 8009424:	f04f 0400 	mov.w	r4, #0
 8009428:	bfdc      	itt	le
 800942a:	f109 32ff 	addle.w	r2, r9, #4294967295
 800942e:	fb92 f8f3 	sdivle	r8, r2, r3
 8009432:	1c63      	adds	r3, r4, #1
 8009434:	aa10      	add	r2, sp, #64	@ 0x40
 8009436:	f004 0401 	and.w	r4, r4, #1
 800943a:	9308      	str	r3, [sp, #32]
 800943c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8009440:	9b00      	ldr	r3, [sp, #0]
 8009442:	fb93 f3f8 	sdiv	r3, r3, r8
 8009446:	b29b      	uxth	r3, r3
 8009448:	3404      	adds	r4, #4
 800944a:	f04f 0b00 	mov.w	fp, #0
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	9a04      	ldr	r2, [sp, #16]
 8009452:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009456:	fb13 f302 	smulbb	r3, r3, r2
 800945a:	9a01      	ldr	r2, [sp, #4]
 800945c:	b29b      	uxth	r3, r3
 800945e:	1899      	adds	r1, r3, r2
 8009460:	9305      	str	r3, [sp, #20]
 8009462:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009466:	b209      	sxth	r1, r1
 8009468:	4299      	cmp	r1, r3
 800946a:	db4d      	blt.n	8009508 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800946c:	8932      	ldrh	r2, [r6, #8]
 800946e:	4413      	add	r3, r2
 8009470:	b21b      	sxth	r3, r3
 8009472:	4299      	cmp	r1, r3
 8009474:	da48      	bge.n	8009508 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009476:	9b04      	ldr	r3, [sp, #16]
 8009478:	6827      	ldr	r7, [r4, #0]
 800947a:	fb17 f703 	smulbb	r7, r7, r3
 800947e:	9b02      	ldr	r3, [sp, #8]
 8009480:	b2bf      	uxth	r7, r7
 8009482:	18fa      	adds	r2, r7, r3
 8009484:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009488:	b212      	sxth	r2, r2
 800948a:	429a      	cmp	r2, r3
 800948c:	db3c      	blt.n	8009508 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800948e:	8970      	ldrh	r0, [r6, #10]
 8009490:	4403      	add	r3, r0
 8009492:	b21b      	sxth	r3, r3
 8009494:	429a      	cmp	r2, r3
 8009496:	da37      	bge.n	8009508 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009498:	2300      	movs	r3, #0
 800949a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800949c:	4630      	mov	r0, r6
 800949e:	ab0b      	add	r3, sp, #44	@ 0x2c
 80094a0:	f7ff ff36 	bl	8009310 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80094a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80094a6:	b37a      	cbz	r2, 8009508 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80094a8:	4552      	cmp	r2, sl
 80094aa:	d02d      	beq.n	8009508 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80094ac:	4611      	mov	r1, r2
 80094ae:	a80e      	add	r0, sp, #56	@ 0x38
 80094b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80094b2:	f004 fc91 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80094b6:	9a06      	ldr	r2, [sp, #24]
 80094b8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80094bc:	9b01      	ldr	r3, [sp, #4]
 80094be:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80094c2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80094c6:	4413      	add	r3, r2
 80094c8:	f04f 0e02 	mov.w	lr, #2
 80094cc:	fb91 f1fe 	sdiv	r1, r1, lr
 80094d0:	4401      	add	r1, r0
 80094d2:	1a58      	subs	r0, r3, r1
 80094d4:	9a07      	ldr	r2, [sp, #28]
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80094dc:	fb9c fcfe 	sdiv	ip, ip, lr
 80094e0:	4413      	add	r3, r2
 80094e2:	448c      	add	ip, r1
 80094e4:	eba3 030c 	sub.w	r3, r3, ip
 80094e8:	435b      	muls	r3, r3
 80094ea:	fb00 3300 	mla	r3, r0, r0, r3
 80094ee:	42ab      	cmp	r3, r5
 80094f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094f2:	d208      	bcs.n	8009506 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80094f4:	9803      	ldr	r0, [sp, #12]
 80094f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094f8:	6001      	str	r1, [r0, #0]
 80094fa:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80094fc:	9805      	ldr	r0, [sp, #20]
 80094fe:	8008      	strh	r0, [r1, #0]
 8009500:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8009502:	461d      	mov	r5, r3
 8009504:	800f      	strh	r7, [r1, #0]
 8009506:	4692      	mov	sl, r2
 8009508:	f10b 0b01 	add.w	fp, fp, #1
 800950c:	f1bb 0f04 	cmp.w	fp, #4
 8009510:	f104 0408 	add.w	r4, r4, #8
 8009514:	d19c      	bne.n	8009450 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	9c08      	ldr	r4, [sp, #32]
 800951a:	444b      	add	r3, r9
 800951c:	4544      	cmp	r4, r8
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	d187      	bne.n	8009432 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8009522:	b021      	add	sp, #132	@ 0x84
 8009524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009528:	f04f 35ff 	mov.w	r5, #4294967295
 800952c:	e766      	b.n	80093fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800952e:	bf00      	nop
 8009530:	20015438 	.word	0x20015438
 8009534:	08013ad0 	.word	0x08013ad0

08009538 <_ZN8touchgfx4RectaNERKS0_>:
 8009538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800953c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8009540:	888c      	ldrh	r4, [r1, #4]
 8009542:	f9b0 9000 	ldrsh.w	r9, [r0]
 8009546:	443c      	add	r4, r7
 8009548:	b2a4      	uxth	r4, r4
 800954a:	fa0f f884 	sxth.w	r8, r4
 800954e:	45c1      	cmp	r9, r8
 8009550:	da2f      	bge.n	80095b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009552:	8882      	ldrh	r2, [r0, #4]
 8009554:	444a      	add	r2, r9
 8009556:	b292      	uxth	r2, r2
 8009558:	fa0f fe82 	sxth.w	lr, r2
 800955c:	4577      	cmp	r7, lr
 800955e:	da28      	bge.n	80095b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009560:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009564:	88cb      	ldrh	r3, [r1, #6]
 8009566:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800956a:	442b      	add	r3, r5
 800956c:	b21b      	sxth	r3, r3
 800956e:	429e      	cmp	r6, r3
 8009570:	da1f      	bge.n	80095b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009572:	88c3      	ldrh	r3, [r0, #6]
 8009574:	4433      	add	r3, r6
 8009576:	b29b      	uxth	r3, r3
 8009578:	fa0f fc83 	sxth.w	ip, r3
 800957c:	4565      	cmp	r5, ip
 800957e:	da18      	bge.n	80095b2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009580:	454f      	cmp	r7, r9
 8009582:	bfb8      	it	lt
 8009584:	464f      	movlt	r7, r9
 8009586:	42b5      	cmp	r5, r6
 8009588:	bfb8      	it	lt
 800958a:	4635      	movlt	r5, r6
 800958c:	45f0      	cmp	r8, lr
 800958e:	bfd8      	it	le
 8009590:	4622      	movle	r2, r4
 8009592:	1bd2      	subs	r2, r2, r7
 8009594:	8082      	strh	r2, [r0, #4]
 8009596:	884a      	ldrh	r2, [r1, #2]
 8009598:	88c9      	ldrh	r1, [r1, #6]
 800959a:	8007      	strh	r7, [r0, #0]
 800959c:	440a      	add	r2, r1
 800959e:	b292      	uxth	r2, r2
 80095a0:	b211      	sxth	r1, r2
 80095a2:	458c      	cmp	ip, r1
 80095a4:	bfa8      	it	ge
 80095a6:	4613      	movge	r3, r2
 80095a8:	1b5b      	subs	r3, r3, r5
 80095aa:	80c3      	strh	r3, [r0, #6]
 80095ac:	8045      	strh	r5, [r0, #2]
 80095ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b2:	2300      	movs	r3, #0
 80095b4:	8003      	strh	r3, [r0, #0]
 80095b6:	8043      	strh	r3, [r0, #2]
 80095b8:	8083      	strh	r3, [r0, #4]
 80095ba:	80c3      	strh	r3, [r0, #6]
 80095bc:	e7f7      	b.n	80095ae <_ZN8touchgfx4RectaNERKS0_+0x76>

080095be <_ZNK8touchgfx4Rect7isEmptyEv>:
 80095be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dd06      	ble.n	80095d4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80095c6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80095ca:	2800      	cmp	r0, #0
 80095cc:	bfcc      	ite	gt
 80095ce:	2000      	movgt	r0, #0
 80095d0:	2001      	movle	r0, #1
 80095d2:	4770      	bx	lr
 80095d4:	2001      	movs	r0, #1
 80095d6:	4770      	bx	lr

080095d8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80095d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095dc:	2300      	movs	r3, #0
 80095de:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80095e0:	8003      	strh	r3, [r0, #0]
 80095e2:	4604      	mov	r4, r0
 80095e4:	8043      	strh	r3, [r0, #2]
 80095e6:	8083      	strh	r3, [r0, #4]
 80095e8:	80c3      	strh	r3, [r0, #6]
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	d040      	beq.n	8009670 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80095ee:	1d28      	adds	r0, r5, #4
 80095f0:	f7ff ffe5 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 80095f4:	b988      	cbnz	r0, 800961a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80095f6:	4620      	mov	r0, r4
 80095f8:	f7ff ffe1 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 80095fc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009600:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009604:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8009608:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800960c:	b138      	cbz	r0, 800961e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800960e:	8022      	strh	r2, [r4, #0]
 8009610:	8063      	strh	r3, [r4, #2]
 8009612:	f8a4 e004 	strh.w	lr, [r4, #4]
 8009616:	f8a4 c006 	strh.w	ip, [r4, #6]
 800961a:	69ad      	ldr	r5, [r5, #24]
 800961c:	e7e5      	b.n	80095ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800961e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009622:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009626:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800962a:	4290      	cmp	r0, r2
 800962c:	4607      	mov	r7, r0
 800962e:	bfa8      	it	ge
 8009630:	4617      	movge	r7, r2
 8009632:	4472      	add	r2, lr
 8009634:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8009638:	8027      	strh	r7, [r4, #0]
 800963a:	4299      	cmp	r1, r3
 800963c:	460e      	mov	r6, r1
 800963e:	4440      	add	r0, r8
 8009640:	bfa8      	it	ge
 8009642:	461e      	movge	r6, r3
 8009644:	4471      	add	r1, lr
 8009646:	4463      	add	r3, ip
 8009648:	b200      	sxth	r0, r0
 800964a:	b212      	sxth	r2, r2
 800964c:	b209      	sxth	r1, r1
 800964e:	b21b      	sxth	r3, r3
 8009650:	4290      	cmp	r0, r2
 8009652:	bfac      	ite	ge
 8009654:	ebc7 0200 	rsbge	r2, r7, r0
 8009658:	ebc7 0202 	rsblt	r2, r7, r2
 800965c:	4299      	cmp	r1, r3
 800965e:	bfac      	ite	ge
 8009660:	ebc6 0301 	rsbge	r3, r6, r1
 8009664:	ebc6 0303 	rsblt	r3, r6, r3
 8009668:	8066      	strh	r6, [r4, #2]
 800966a:	80a2      	strh	r2, [r4, #4]
 800966c:	80e3      	strh	r3, [r4, #6]
 800966e:	e7d4      	b.n	800961a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009670:	4620      	mov	r0, r4
 8009672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009676 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8009676:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800967a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800967e:	b383      	cbz	r3, 80096e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009680:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009682:	b374      	cbz	r4, 80096e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009684:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009688:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800968c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009690:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8009694:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009698:	b303      	cbz	r3, 80096dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800969a:	4668      	mov	r0, sp
 800969c:	1d21      	adds	r1, r4, #4
 800969e:	f8ad 5000 	strh.w	r5, [sp]
 80096a2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80096a6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80096aa:	f8ad 8006 	strh.w	r8, [sp, #6]
 80096ae:	f7ff ff43 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 80096b2:	4668      	mov	r0, sp
 80096b4:	f7ff ff83 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 80096b8:	b980      	cbnz	r0, 80096dc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80096ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80096be:	88a2      	ldrh	r2, [r4, #4]
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	f8ad 3000 	strh.w	r3, [sp]
 80096c6:	88e2      	ldrh	r2, [r4, #6]
 80096c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80096cc:	1a9b      	subs	r3, r3, r2
 80096ce:	f8ad 3002 	strh.w	r3, [sp, #2]
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	4669      	mov	r1, sp
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	4620      	mov	r0, r4
 80096da:	4798      	blx	r3
 80096dc:	69a4      	ldr	r4, [r4, #24]
 80096de:	2c00      	cmp	r4, #0
 80096e0:	d1d8      	bne.n	8009694 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80096e2:	b002      	add	sp, #8
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80096e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096ea:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80096ee:	460d      	mov	r5, r1
 80096f0:	4616      	mov	r6, r2
 80096f2:	b323      	cbz	r3, 800973e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80096f4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80096f6:	b314      	cbz	r4, 800973e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80096f8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80096fc:	b1eb      	cbz	r3, 800973a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80096fe:	6828      	ldr	r0, [r5, #0]
 8009700:	6869      	ldr	r1, [r5, #4]
 8009702:	466b      	mov	r3, sp
 8009704:	c303      	stmia	r3!, {r0, r1}
 8009706:	4668      	mov	r0, sp
 8009708:	1d21      	adds	r1, r4, #4
 800970a:	f7ff ff15 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800970e:	4668      	mov	r0, sp
 8009710:	f7ff ff55 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 8009714:	b988      	cbnz	r0, 800973a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009716:	f8bd 3000 	ldrh.w	r3, [sp]
 800971a:	88a2      	ldrh	r2, [r4, #4]
 800971c:	1a9b      	subs	r3, r3, r2
 800971e:	f8ad 3000 	strh.w	r3, [sp]
 8009722:	88e2      	ldrh	r2, [r4, #6]
 8009724:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	4632      	mov	r2, r6
 8009732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009734:	4669      	mov	r1, sp
 8009736:	4620      	mov	r0, r4
 8009738:	4798      	blx	r3
 800973a:	69a4      	ldr	r4, [r4, #24]
 800973c:	e7db      	b.n	80096f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800973e:	b002      	add	sp, #8
 8009740:	bd70      	pop	{r4, r5, r6, pc}

08009742 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8009742:	b513      	push	{r0, r1, r4, lr}
 8009744:	6803      	ldr	r3, [r0, #0]
 8009746:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800974a:	2300      	movs	r3, #0
 800974c:	e9cd 3300 	strd	r3, r3, [sp]
 8009750:	466b      	mov	r3, sp
 8009752:	47a0      	blx	r4
 8009754:	b002      	add	sp, #8
 8009756:	bd10      	pop	{r4, pc}

08009758 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8009758:	2301      	movs	r3, #1
 800975a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800975e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009762:	4770      	bx	lr

08009764 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8009764:	2301      	movs	r3, #1
 8009766:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800976a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800976e:	4770      	bx	lr

08009770 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8009770:	6843      	ldr	r3, [r0, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	725a      	strb	r2, [r3, #9]
 8009776:	6840      	ldr	r0, [r0, #4]
 8009778:	6803      	ldr	r3, [r0, #0]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	4718      	bx	r3

0800977e <_ZN8touchgfx3HAL8flushDMAEv>:
 800977e:	6840      	ldr	r0, [r0, #4]
 8009780:	6803      	ldr	r3, [r0, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	4718      	bx	r3

08009786 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8009786:	b530      	push	{r4, r5, lr}
 8009788:	b08b      	sub	sp, #44	@ 0x2c
 800978a:	6804      	ldr	r4, [r0, #0]
 800978c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8009790:	9509      	str	r5, [sp, #36]	@ 0x24
 8009792:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8009796:	9508      	str	r5, [sp, #32]
 8009798:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800979c:	9507      	str	r5, [sp, #28]
 800979e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80097a2:	9506      	str	r5, [sp, #24]
 80097a4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80097a8:	9505      	str	r5, [sp, #20]
 80097aa:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80097ae:	9504      	str	r5, [sp, #16]
 80097b0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80097b4:	9503      	str	r5, [sp, #12]
 80097b6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80097ba:	9502      	str	r5, [sp, #8]
 80097bc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80097c0:	e9cd 3500 	strd	r3, r5, [sp]
 80097c4:	4613      	mov	r3, r2
 80097c6:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80097c8:	2200      	movs	r2, #0
 80097ca:	47a0      	blx	r4
 80097cc:	b00b      	add	sp, #44	@ 0x2c
 80097ce:	bd30      	pop	{r4, r5, pc}

080097d0 <_ZN8touchgfx3HAL10beginFrameEv>:
 80097d0:	4b04      	ldr	r3, [pc, #16]	@ (80097e4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	b123      	cbz	r3, 80097e0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80097d6:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80097da:	f080 0001 	eor.w	r0, r0, #1
 80097de:	4770      	bx	lr
 80097e0:	2001      	movs	r0, #1
 80097e2:	4770      	bx	lr
 80097e4:	20015436 	.word	0x20015436

080097e8 <_ZN8touchgfx3HAL8endFrameEv>:
 80097e8:	b510      	push	{r4, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	6840      	ldr	r0, [r0, #4]
 80097ee:	6803      	ldr	r3, [r0, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	4798      	blx	r3
 80097f4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80097f8:	b113      	cbz	r3, 8009800 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80097fa:	2301      	movs	r3, #1
 80097fc:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009800:	bd10      	pop	{r4, pc}

08009802 <_ZN8touchgfx3HAL10initializeEv>:
 8009802:	b510      	push	{r4, lr}
 8009804:	4604      	mov	r4, r0
 8009806:	f7f8 faeb 	bl	8001de0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800980a:	f7f8 f9f3 	bl	8001bf4 <_ZN8touchgfx4GPIO4initEv>
 800980e:	6860      	ldr	r0, [r4, #4]
 8009810:	6803      	ldr	r3, [r0, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	4798      	blx	r3
 8009816:	68e0      	ldr	r0, [r4, #12]
 8009818:	6803      	ldr	r3, [r0, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	4798      	blx	r3
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	4620      	mov	r0, r4
 8009822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009828:	4718      	bx	r3
	...

0800982c <_ZN8touchgfx3HAL4tickEv>:
 800982c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800982e:	6803      	ldr	r3, [r0, #0]
 8009830:	4d5b      	ldr	r5, [pc, #364]	@ (80099a0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8009832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009836:	4604      	mov	r4, r0
 8009838:	4798      	blx	r3
 800983a:	2800      	cmp	r0, #0
 800983c:	f000 8095 	beq.w	800996a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8009840:	2001      	movs	r0, #1
 8009842:	f7f8 f955 	bl	8001af0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8009846:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800984a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800984e:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8009852:	2600      	movs	r6, #0
 8009854:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8009858:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800985c:	b133      	cbz	r3, 800986c <_ZN8touchgfx3HAL4tickEv+0x40>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	4620      	mov	r0, r4
 8009862:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009866:	4798      	blx	r3
 8009868:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800986c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8009870:	6862      	ldr	r2, [r4, #4]
 8009872:	f083 0301 	eor.w	r3, r3, #1
 8009876:	7253      	strb	r3, [r2, #9]
 8009878:	2601      	movs	r6, #1
 800987a:	702e      	strb	r6, [r5, #0]
 800987c:	f003 f972 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
 8009880:	6803      	ldr	r3, [r0, #0]
 8009882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009884:	4798      	blx	r3
 8009886:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800988a:	b90b      	cbnz	r3, 8009890 <_ZN8touchgfx3HAL4tickEv+0x64>
 800988c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8009890:	f003 f968 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
 8009894:	6803      	ldr	r3, [r0, #0]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	4798      	blx	r3
 800989a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800989c:	6803      	ldr	r3, [r0, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	4798      	blx	r3
 80098a2:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80098a6:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80098b2:	b10a      	cbz	r2, 80098b8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1eb      	bne.n	8009890 <_ZN8touchgfx3HAL4tickEv+0x64>
 80098b8:	4a3a      	ldr	r2, [pc, #232]	@ (80099a4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80098ba:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 80098be:	7813      	ldrb	r3, [r2, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	b25b      	sxtb	r3, r3
 80098c4:	4299      	cmp	r1, r3
 80098c6:	7013      	strb	r3, [r2, #0]
 80098c8:	dc10      	bgt.n	80098ec <_ZN8touchgfx3HAL4tickEv+0xc0>
 80098ca:	68e0      	ldr	r0, [r4, #12]
 80098cc:	2300      	movs	r3, #0
 80098ce:	7013      	strb	r3, [r2, #0]
 80098d0:	6803      	ldr	r3, [r0, #0]
 80098d2:	aa03      	add	r2, sp, #12
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	a902      	add	r1, sp, #8
 80098d8:	4798      	blx	r3
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	2800      	cmp	r0, #0
 80098de:	d050      	beq.n	8009982 <_ZN8touchgfx3HAL4tickEv+0x156>
 80098e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80098e8:	4620      	mov	r0, r4
 80098ea:	4798      	blx	r3
 80098ec:	6960      	ldr	r0, [r4, #20]
 80098ee:	2300      	movs	r3, #0
 80098f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80098f4:	b158      	cbz	r0, 800990e <_ZN8touchgfx3HAL4tickEv+0xe2>
 80098f6:	6803      	ldr	r3, [r0, #0]
 80098f8:	f10d 0107 	add.w	r1, sp, #7
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	4798      	blx	r3
 8009900:	b128      	cbz	r0, 800990e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009902:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009904:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009908:	6803      	ldr	r3, [r0, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	4798      	blx	r3
 800990e:	f104 001c 	add.w	r0, r4, #28
 8009912:	f008 ffb1 	bl	8012878 <_ZN8touchgfx8Gestures4tickEv>
 8009916:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800991a:	b30b      	cbz	r3, 8009960 <_ZN8touchgfx3HAL4tickEv+0x134>
 800991c:	6920      	ldr	r0, [r4, #16]
 800991e:	6803      	ldr	r3, [r0, #0]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	4798      	blx	r3
 8009924:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009926:	4606      	mov	r6, r0
 8009928:	b903      	cbnz	r3, 800992c <_ZN8touchgfx3HAL4tickEv+0x100>
 800992a:	6760      	str	r0, [r4, #116]	@ 0x74
 800992c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800992e:	4a1e      	ldr	r2, [pc, #120]	@ (80099a8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8009930:	1af3      	subs	r3, r6, r3
 8009932:	4293      	cmp	r3, r2
 8009934:	d914      	bls.n	8009960 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009936:	6920      	ldr	r0, [r4, #16]
 8009938:	6803      	ldr	r3, [r0, #0]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	4798      	blx	r3
 800993e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009940:	2264      	movs	r2, #100	@ 0x64
 8009942:	1af3      	subs	r3, r6, r3
 8009944:	fbb3 f3f2 	udiv	r3, r3, r2
 8009948:	fbb0 f0f3 	udiv	r0, r0, r3
 800994c:	2800      	cmp	r0, #0
 800994e:	dc1d      	bgt.n	800998c <_ZN8touchgfx3HAL4tickEv+0x160>
 8009950:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8009954:	6920      	ldr	r0, [r4, #16]
 8009956:	6803      	ldr	r3, [r0, #0]
 8009958:	2100      	movs	r1, #0
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	4798      	blx	r3
 800995e:	6766      	str	r6, [r4, #116]	@ 0x74
 8009960:	f003 f900 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
 8009964:	6803      	ldr	r3, [r0, #0]
 8009966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009968:	4798      	blx	r3
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	4620      	mov	r0, r4
 800996e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009972:	4798      	blx	r3
 8009974:	2001      	movs	r0, #1
 8009976:	f7f8 f8e5 	bl	8001b44 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800997a:	2300      	movs	r3, #0
 800997c:	702b      	strb	r3, [r5, #0]
 800997e:	b004      	add	sp, #16
 8009980:	bd70      	pop	{r4, r5, r6, pc}
 8009982:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009986:	4620      	mov	r0, r4
 8009988:	4798      	blx	r3
 800998a:	e7af      	b.n	80098ec <_ZN8touchgfx3HAL4tickEv+0xc0>
 800998c:	2863      	cmp	r0, #99	@ 0x63
 800998e:	bfcb      	itete	gt
 8009990:	2300      	movgt	r3, #0
 8009992:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8009996:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800999a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800999e:	e7d9      	b.n	8009954 <_ZN8touchgfx3HAL4tickEv+0x128>
 80099a0:	2001543c 	.word	0x2001543c
 80099a4:	2001543d 	.word	0x2001543d
 80099a8:	05f5e100 	.word	0x05f5e100

080099ac <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80099ac:	b510      	push	{r4, lr}
 80099ae:	4604      	mov	r4, r0
 80099b0:	f7f8 fa46 	bl	8001e40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	729a      	strb	r2, [r3, #10]
 80099ba:	bd10      	pop	{r4, pc}

080099bc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80099bc:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80099be:	301c      	adds	r0, #28
 80099c0:	f008 bf58 	b.w	8012874 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080099c4 <_ZN8touchgfx3HAL5touchEll>:
 80099c4:	b530      	push	{r4, r5, lr}
 80099c6:	b087      	sub	sp, #28
 80099c8:	4604      	mov	r4, r0
 80099ca:	a804      	add	r0, sp, #16
 80099cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80099d0:	f002 feb0 	bl	800c734 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80099d4:	9b04      	ldr	r3, [sp, #16]
 80099d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80099da:	a906      	add	r1, sp, #24
 80099dc:	9b05      	ldr	r3, [sp, #20]
 80099de:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80099e2:	a803      	add	r0, sp, #12
 80099e4:	f002 fef8 	bl	800c7d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80099e8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80099ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80099f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80099f4:	f104 001c 	add.w	r0, r4, #28
 80099f8:	b189      	cbz	r1, 8009a1e <_ZN8touchgfx3HAL5touchEll+0x5a>
 80099fa:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8009a04:	4613      	mov	r3, r2
 8009a06:	462a      	mov	r2, r5
 8009a08:	f008 ff44 	bl	8012894 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8009a0c:	b128      	cbz	r0, 8009a1a <_ZN8touchgfx3HAL5touchEll+0x56>
 8009a0e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8009a12:	6623      	str	r3, [r4, #96]	@ 0x60
 8009a14:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8009a18:	6663      	str	r3, [r4, #100]	@ 0x64
 8009a1a:	b007      	add	sp, #28
 8009a1c:	bd30      	pop	{r4, r5, pc}
 8009a1e:	f008 ff79 	bl	8012914 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009a22:	2301      	movs	r3, #1
 8009a24:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009a28:	e7f1      	b.n	8009a0e <_ZN8touchgfx3HAL5touchEll+0x4a>

08009a2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8009a2a:	b510      	push	{r4, lr}
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d046      	beq.n	8009abe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009a30:	ea81 0002 	eor.w	r0, r1, r2
 8009a34:	07c4      	lsls	r4, r0, #31
 8009a36:	d508      	bpl.n	8009a4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8009a38:	440b      	add	r3, r1
 8009a3a:	3a01      	subs	r2, #1
 8009a3c:	428b      	cmp	r3, r1
 8009a3e:	d93e      	bls.n	8009abe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009a40:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009a44:	f801 0b01 	strb.w	r0, [r1], #1
 8009a48:	e7f8      	b.n	8009a3c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8009a4a:	07d0      	lsls	r0, r2, #31
 8009a4c:	bf42      	ittt	mi
 8009a4e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8009a52:	f801 0b01 	strbmi.w	r0, [r1], #1
 8009a56:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d911      	bls.n	8009a82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009a5e:	ea81 0402 	eor.w	r4, r1, r2
 8009a62:	07a4      	lsls	r4, r4, #30
 8009a64:	4610      	mov	r0, r2
 8009a66:	d022      	beq.n	8009aae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8009a68:	f023 0401 	bic.w	r4, r3, #1
 8009a6c:	440c      	add	r4, r1
 8009a6e:	428c      	cmp	r4, r1
 8009a70:	4602      	mov	r2, r0
 8009a72:	d904      	bls.n	8009a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8009a74:	8812      	ldrh	r2, [r2, #0]
 8009a76:	f821 2b02 	strh.w	r2, [r1], #2
 8009a7a:	3002      	adds	r0, #2
 8009a7c:	e7f7      	b.n	8009a6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	f023 0003 	bic.w	r0, r3, #3
 8009a86:	4408      	add	r0, r1
 8009a88:	4288      	cmp	r0, r1
 8009a8a:	4614      	mov	r4, r2
 8009a8c:	d904      	bls.n	8009a98 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8009a8e:	6824      	ldr	r4, [r4, #0]
 8009a90:	f841 4b04 	str.w	r4, [r1], #4
 8009a94:	3204      	adds	r2, #4
 8009a96:	e7f7      	b.n	8009a88 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	440b      	add	r3, r1
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	d90c      	bls.n	8009abe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009aa4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009aa8:	f801 0b01 	strb.w	r0, [r1], #1
 8009aac:	e7f8      	b.n	8009aa0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8009aae:	0790      	lsls	r0, r2, #30
 8009ab0:	d0e7      	beq.n	8009a82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009ab2:	f832 0b02 	ldrh.w	r0, [r2], #2
 8009ab6:	f821 0b02 	strh.w	r0, [r1], #2
 8009aba:	3b02      	subs	r3, #2
 8009abc:	e7e1      	b.n	8009a82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009abe:	2001      	movs	r0, #1
 8009ac0:	bd10      	pop	{r4, pc}

08009ac2 <_ZN8touchgfx3HAL7noTouchEv>:
 8009ac2:	b510      	push	{r4, lr}
 8009ac4:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8009ac8:	4604      	mov	r4, r0
 8009aca:	b153      	cbz	r3, 8009ae2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8009acc:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8009ad0:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	301c      	adds	r0, #28
 8009ad8:	f008 ff1c 	bl	8012914 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009adc:	2300      	movs	r3, #0
 8009ade:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009ae2:	bd10      	pop	{r4, pc}

08009ae4 <_ZN8touchgfx3HAL3lcdEv>:
 8009ae4:	4b04      	ldr	r3, [pc, #16]	@ (8009af8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009aec:	b10a      	cbz	r2, 8009af2 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8009aee:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009af0:	b900      	cbnz	r0, 8009af4 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8009af2:	6898      	ldr	r0, [r3, #8]
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	20015438 	.word	0x20015438

08009afc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8009afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b00:	b085      	sub	sp, #20
 8009b02:	ad04      	add	r5, sp, #16
 8009b04:	4604      	mov	r4, r0
 8009b06:	2000      	movs	r0, #0
 8009b08:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009b0c:	69a0      	ldr	r0, [r4, #24]
 8009b0e:	6806      	ldr	r6, [r0, #0]
 8009b10:	9501      	str	r5, [sp, #4]
 8009b12:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8009b16:	9500      	str	r5, [sp, #0]
 8009b18:	6835      	ldr	r5, [r6, #0]
 8009b1a:	4699      	mov	r9, r3
 8009b1c:	460f      	mov	r7, r1
 8009b1e:	4690      	mov	r8, r2
 8009b20:	47a8      	blx	r5
 8009b22:	4d10      	ldr	r5, [pc, #64]	@ (8009b64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8009b24:	4606      	mov	r6, r0
 8009b26:	f8a5 9000 	strh.w	r9, [r5]
 8009b2a:	f7ff ffdb 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 8009b2e:	6803      	ldr	r3, [r0, #0]
 8009b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b32:	4798      	blx	r3
 8009b34:	b128      	cbz	r0, 8009b42 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8009b36:	2801      	cmp	r0, #1
 8009b38:	d00b      	beq.n	8009b52 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	b005      	add	sp, #20
 8009b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b42:	882b      	ldrh	r3, [r5, #0]
 8009b44:	fb08 7203 	mla	r2, r8, r3, r7
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8009b4e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009b50:	e7f3      	b.n	8009b3a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009b52:	882a      	ldrh	r2, [r5, #0]
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	fb08 7202 	mla	r2, r8, r2, r7
 8009b5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009b5e:	1a9a      	subs	r2, r3, r2
 8009b60:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8009b62:	e7ea      	b.n	8009b3a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009b64:	20015432 	.word	0x20015432

08009b68 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8009b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6a:	b08b      	sub	sp, #44	@ 0x2c
 8009b6c:	4617      	mov	r7, r2
 8009b6e:	4604      	mov	r4, r0
 8009b70:	460e      	mov	r6, r1
 8009b72:	461d      	mov	r5, r3
 8009b74:	f7ff ffb6 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 8009b78:	6803      	ldr	r3, [r0, #0]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7c:	4798      	blx	r3
 8009b7e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009b82:	9007      	str	r0, [sp, #28]
 8009b84:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009b88:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8009b8a:	6822      	ldr	r2, [r4, #0]
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	9306      	str	r3, [sp, #24]
 8009b90:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009b94:	9305      	str	r3, [sp, #20]
 8009b96:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8009b9a:	9304      	str	r3, [sp, #16]
 8009b9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009ba0:	9303      	str	r3, [sp, #12]
 8009ba2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009ba6:	9302      	str	r3, [sp, #8]
 8009ba8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009bac:	e9cd 5300 	strd	r5, r3, [sp]
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4620      	mov	r0, r4
 8009bba:	47a8      	blx	r5
 8009bbc:	b00b      	add	sp, #44	@ 0x2c
 8009bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc0:	20015432 	.word	0x20015432

08009bc4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8009bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	4698      	mov	r8, r3
 8009bca:	6803      	ldr	r3, [r0, #0]
 8009bcc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8009bce:	4b15      	ldr	r3, [pc, #84]	@ (8009c24 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8009bd0:	b08b      	sub	sp, #44	@ 0x2c
 8009bd2:	4617      	mov	r7, r2
 8009bd4:	f8b3 9000 	ldrh.w	r9, [r3]
 8009bd8:	460e      	mov	r6, r1
 8009bda:	4604      	mov	r4, r0
 8009bdc:	f7ff ff82 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 8009be0:	6803      	ldr	r3, [r0, #0]
 8009be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be4:	4798      	blx	r3
 8009be6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009bea:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	9305      	str	r3, [sp, #20]
 8009bf8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009bfc:	9304      	str	r3, [sp, #16]
 8009bfe:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009c08:	9302      	str	r3, [sp, #8]
 8009c0a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009c0e:	2200      	movs	r2, #0
 8009c10:	e9cd 8300 	strd	r8, r3, [sp]
 8009c14:	4631      	mov	r1, r6
 8009c16:	463b      	mov	r3, r7
 8009c18:	4620      	mov	r0, r4
 8009c1a:	47a8      	blx	r5
 8009c1c:	b00b      	add	sp, #44	@ 0x2c
 8009c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c22:	bf00      	nop
 8009c24:	20015432 	.word	0x20015432

08009c28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8009c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	4698      	mov	r8, r3
 8009c2e:	6803      	ldr	r3, [r0, #0]
 8009c30:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8009c32:	4b11      	ldr	r3, [pc, #68]	@ (8009c78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8009c34:	b087      	sub	sp, #28
 8009c36:	f8b3 9000 	ldrh.w	r9, [r3]
 8009c3a:	460e      	mov	r6, r1
 8009c3c:	4617      	mov	r7, r2
 8009c3e:	4604      	mov	r4, r0
 8009c40:	f7ff ff50 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 8009c44:	6803      	ldr	r3, [r0, #0]
 8009c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c48:	4798      	blx	r3
 8009c4a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8009c4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c52:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8009c56:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8009c5a:	9302      	str	r3, [sp, #8]
 8009c5c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	463a      	mov	r2, r7
 8009c6a:	4643      	mov	r3, r8
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4620      	mov	r0, r4
 8009c70:	47a8      	blx	r5
 8009c72:	b007      	add	sp, #28
 8009c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c78:	20015432 	.word	0x20015432

08009c7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	4604      	mov	r4, r0
 8009c82:	b08f      	sub	sp, #60	@ 0x3c
 8009c84:	4610      	mov	r0, r2
 8009c86:	460d      	mov	r5, r1
 8009c88:	4691      	mov	r9, r2
 8009c8a:	461e      	mov	r6, r3
 8009c8c:	f005 ffb6 	bl	800fbfc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	f000 809d 	beq.w	8009dd0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8009e34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8009e38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8009ca2:	4f61      	ldr	r7, [pc, #388]	@ (8009e28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	4798      	blx	r3
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	4620      	mov	r0, r4
 8009cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cae:	4798      	blx	r3
 8009cb0:	f8bb 3000 	ldrh.w	r3, [fp]
 8009cb4:	9301      	str	r3, [sp, #4]
 8009cb6:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8009cba:	f8ba 3000 	ldrh.w	r3, [sl]
 8009cbe:	9302      	str	r3, [sp, #8]
 8009cc0:	883b      	ldrh	r3, [r7, #0]
 8009cc2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8009cc6:	9303      	str	r3, [sp, #12]
 8009cc8:	4b58      	ldr	r3, [pc, #352]	@ (8009e2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009cca:	9305      	str	r3, [sp, #20]
 8009ccc:	881a      	ldrh	r2, [r3, #0]
 8009cce:	9204      	str	r2, [sp, #16]
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	f006 f827 	bl	800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8009cd6:	8038      	strh	r0, [r7, #0]
 8009cd8:	4640      	mov	r0, r8
 8009cda:	f006 f857 	bl	800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009cde:	9b05      	ldr	r3, [sp, #20]
 8009ce0:	b280      	uxth	r0, r0
 8009ce2:	8018      	strh	r0, [r3, #0]
 8009ce4:	4b52      	ldr	r3, [pc, #328]	@ (8009e30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d174      	bne.n	8009dd6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8009cec:	883b      	ldrh	r3, [r7, #0]
 8009cee:	f8ab 3000 	strh.w	r3, [fp]
 8009cf2:	f8aa 0000 	strh.w	r0, [sl]
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8009cfc:	f005 ff7e 	bl	800fbfc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8009d00:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009d04:	2200      	movs	r2, #0
 8009d06:	4611      	mov	r1, r2
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8009d0e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8009d12:	f7f9 fa53 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
 8009d16:	2301      	movs	r3, #1
 8009d18:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8009d1c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009d20:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dd5c      	ble.n	8009de2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009d28:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dd58      	ble.n	8009de2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009d30:	462a      	mov	r2, r5
 8009d32:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d34:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009d38:	6851      	ldr	r1, [r2, #4]
 8009d3a:	c303      	stmia	r3!, {r0, r1}
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	a80a      	add	r0, sp, #40	@ 0x28
 8009d40:	f7ff fbfa 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 8009d44:	4b38      	ldr	r3, [pc, #224]	@ (8009e28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009d46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009d4a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8009d4e:	2100      	movs	r1, #0
 8009d50:	aa0a      	add	r2, sp, #40	@ 0x28
 8009d52:	4b36      	ldr	r3, [pc, #216]	@ (8009e2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009d54:	910c      	str	r1, [sp, #48]	@ 0x30
 8009d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d5e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8009d62:	ab08      	add	r3, sp, #32
 8009d64:	e883 0003 	stmia.w	r3, {r0, r1}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	a90c      	add	r1, sp, #48	@ 0x30
 8009d6c:	f7ff fbe4 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 8009d70:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d13c      	bne.n	8009df0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8009d76:	2000      	movs	r0, #0
 8009d78:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8009d7c:	2600      	movs	r6, #0
 8009d7e:	682a      	ldr	r2, [r5, #0]
 8009d80:	696b      	ldr	r3, [r5, #20]
 8009d82:	616e      	str	r6, [r5, #20]
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	6892      	ldr	r2, [r2, #8]
 8009d88:	a908      	add	r1, sp, #32
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	4790      	blx	r2
 8009d8e:	9b05      	ldr	r3, [sp, #20]
 8009d90:	616b      	str	r3, [r5, #20]
 8009d92:	4652      	mov	r2, sl
 8009d94:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8009d98:	4649      	mov	r1, r9
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8009da0:	f7f9 fa0c 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
 8009da4:	4b23      	ldr	r3, [pc, #140]	@ (8009e34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8009da6:	9a01      	ldr	r2, [sp, #4]
 8009da8:	801a      	strh	r2, [r3, #0]
 8009daa:	4b23      	ldr	r3, [pc, #140]	@ (8009e38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8009dac:	9a02      	ldr	r2, [sp, #8]
 8009dae:	801a      	strh	r2, [r3, #0]
 8009db0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009db2:	9a03      	ldr	r2, [sp, #12]
 8009db4:	801a      	strh	r2, [r3, #0]
 8009db6:	4b1d      	ldr	r3, [pc, #116]	@ (8009e2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009db8:	9a04      	ldr	r2, [sp, #16]
 8009dba:	801a      	strh	r2, [r3, #0]
 8009dbc:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc6:	4798      	blx	r3
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	4620      	mov	r0, r4
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	4798      	blx	r3
 8009dd0:	b00f      	add	sp, #60	@ 0x3c
 8009dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd6:	883b      	ldrh	r3, [r7, #0]
 8009dd8:	f8ab 0000 	strh.w	r0, [fp]
 8009ddc:	f8aa 3000 	strh.w	r3, [sl]
 8009de0:	e789      	b.n	8009cf6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8009de2:	462a      	mov	r2, r5
 8009de4:	ab0a      	add	r3, sp, #40	@ 0x28
 8009de6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009dea:	6851      	ldr	r1, [r2, #4]
 8009dec:	c303      	stmia	r3!, {r0, r1}
 8009dee:	e7a9      	b.n	8009d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8009df0:	a807      	add	r0, sp, #28
 8009df2:	f006 f90d 	bl	8010010 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009df6:	4606      	mov	r6, r0
 8009df8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8009dfa:	6803      	ldr	r3, [r0, #0]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfe:	4798      	blx	r3
 8009e00:	4286      	cmp	r6, r0
 8009e02:	d1b8      	bne.n	8009d76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8009e04:	f7ff fe6e 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 8009e08:	6803      	ldr	r3, [r0, #0]
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e0e:	9305      	str	r3, [sp, #20]
 8009e10:	a807      	add	r0, sp, #28
 8009e12:	f006 f8fd 	bl	8010010 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009e16:	9b05      	ldr	r3, [sp, #20]
 8009e18:	4601      	mov	r1, r0
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4798      	blx	r3
 8009e1e:	f080 0001 	eor.w	r0, r0, #1
 8009e22:	b2c0      	uxtb	r0, r0
 8009e24:	e7a8      	b.n	8009d78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8009e26:	bf00      	nop
 8009e28:	2001542c 	.word	0x2001542c
 8009e2c:	2001542e 	.word	0x2001542e
 8009e30:	20015430 	.word	0x20015430
 8009e34:	20015432 	.word	0x20015432
 8009e38:	20015434 	.word	0x20015434

08009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	4b07      	ldr	r3, [pc, #28]	@ (8009e5c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	4604      	mov	r4, r0
 8009e44:	b13b      	cbz	r3, 8009e56 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009e46:	6803      	ldr	r3, [r0, #0]
 8009e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e4a:	4798      	blx	r3
 8009e4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009e4e:	4283      	cmp	r3, r0
 8009e50:	d101      	bne.n	8009e56 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009e52:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009e54:	bd10      	pop	{r4, pc}
 8009e56:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009e58:	e7fc      	b.n	8009e54 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8009e5a:	bf00      	nop
 8009e5c:	20015436 	.word	0x20015436

08009e60 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8009e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e64:	b08a      	sub	sp, #40	@ 0x28
 8009e66:	461d      	mov	r5, r3
 8009e68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e6c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009e70:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009e74:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009e78:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009e7c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009e80:	2400      	movs	r4, #0
 8009e82:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009e86:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8009e8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009e8e:	4690      	mov	r8, r2
 8009e90:	4607      	mov	r7, r0
 8009e92:	9404      	str	r4, [sp, #16]
 8009e94:	f88d 4020 	strb.w	r4, [sp, #32]
 8009e98:	f7ff ffd0 	bl	8009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009e9c:	fb06 8505 	mla	r5, r6, r5, r8
 8009ea0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	9505      	str	r5, [sp, #20]
 8009ea8:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009eac:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009eb0:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8009eb4:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009eb8:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009ebc:	6803      	ldr	r3, [r0, #0]
 8009ebe:	a901      	add	r1, sp, #4
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	4798      	blx	r3
 8009ec4:	b00a      	add	sp, #40	@ 0x28
 8009ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009eca <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8009eca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ece:	b08b      	sub	sp, #44	@ 0x2c
 8009ed0:	2400      	movs	r4, #0
 8009ed2:	461d      	mov	r5, r3
 8009ed4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ed8:	4688      	mov	r8, r1
 8009eda:	4691      	mov	r9, r2
 8009edc:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8009ee0:	9404      	str	r4, [sp, #16]
 8009ee2:	4607      	mov	r7, r0
 8009ee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ee8:	f7ff ffa8 	bl	8009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009eec:	fb06 9505 	mla	r5, r6, r5, r9
 8009ef0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009ef4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009ef8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009efc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	9505      	str	r5, [sp, #20]
 8009f04:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009f08:	f8ad 401c 	strh.w	r4, [sp, #28]
 8009f0c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009f10:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f14:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009f18:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009f1c:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009f20:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009f24:	6803      	ldr	r3, [r0, #0]
 8009f26:	a901      	add	r1, sp, #4
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	4798      	blx	r3
 8009f2c:	b00b      	add	sp, #44	@ 0x2c
 8009f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009f34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8009f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	b08a      	sub	sp, #40	@ 0x28
 8009f3a:	4698      	mov	r8, r3
 8009f3c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8009f40:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8009f44:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8009f48:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	2d0b      	cmp	r5, #11
 8009f50:	4606      	mov	r6, r0
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8009f58:	d138      	bne.n	8009fcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8009f5a:	2380      	movs	r3, #128	@ 0x80
 8009f5c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009f60:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009f64:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009f68:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009f6c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009f70:	f88d 0020 	strb.w	r0, [sp, #32]
 8009f74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009f78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	9203      	str	r2, [sp, #12]
 8009f80:	f7ff ff5c 	bl	8009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009f84:	2c0b      	cmp	r4, #11
 8009f86:	bf98      	it	ls
 8009f88:	4b1b      	ldrls	r3, [pc, #108]	@ (8009ff8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8009f8a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8009f8e:	bf98      	it	ls
 8009f90:	5d19      	ldrbls	r1, [r3, r4]
 8009f92:	f8ad 701e 	strh.w	r7, [sp, #30]
 8009f96:	bf88      	it	hi
 8009f98:	2100      	movhi	r1, #0
 8009f9a:	fb02 8307 	mla	r3, r2, r7, r8
 8009f9e:	10c9      	asrs	r1, r1, #3
 8009fa0:	fb01 0003 	mla	r0, r1, r3, r0
 8009fa4:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8009fa8:	9005      	str	r0, [sp, #20]
 8009faa:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8009fae:	6870      	ldr	r0, [r6, #4]
 8009fb0:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009fba:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009fbe:	6803      	ldr	r3, [r0, #0]
 8009fc0:	a901      	add	r1, sp, #4
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	4798      	blx	r3
 8009fc6:	b00a      	add	sp, #40	@ 0x28
 8009fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fcc:	2d02      	cmp	r5, #2
 8009fce:	d109      	bne.n	8009fe4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8009fd0:	28ff      	cmp	r0, #255	@ 0xff
 8009fd2:	d105      	bne.n	8009fe0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8009fd4:	f1bc 0f00 	cmp.w	ip, #0
 8009fd8:	bf14      	ite	ne
 8009fda:	2340      	movne	r3, #64	@ 0x40
 8009fdc:	2320      	moveq	r3, #32
 8009fde:	e7bd      	b.n	8009f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009fe0:	2340      	movs	r3, #64	@ 0x40
 8009fe2:	e7bb      	b.n	8009f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009fe4:	28ff      	cmp	r0, #255	@ 0xff
 8009fe6:	d105      	bne.n	8009ff4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8009fe8:	f1bc 0f00 	cmp.w	ip, #0
 8009fec:	bf14      	ite	ne
 8009fee:	2304      	movne	r3, #4
 8009ff0:	2301      	moveq	r3, #1
 8009ff2:	e7b3      	b.n	8009f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	e7b1      	b.n	8009f5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009ff8:	08015684 	.word	0x08015684

08009ffc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	b08b      	sub	sp, #44	@ 0x2c
 800a002:	461d      	mov	r5, r3
 800a004:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800a008:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800a00c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800a010:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800a014:	bf14      	ite	ne
 800a016:	2308      	movne	r3, #8
 800a018:	2302      	moveq	r3, #2
 800a01a:	2400      	movs	r4, #0
 800a01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a020:	4688      	mov	r8, r1
 800a022:	4693      	mov	fp, r2
 800a024:	9404      	str	r4, [sp, #16]
 800a026:	4607      	mov	r7, r0
 800a028:	f7ff ff08 	bl	8009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a02c:	2e0b      	cmp	r6, #11
 800a02e:	bf98      	it	ls
 800a030:	4b15      	ldrls	r3, [pc, #84]	@ (800a088 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800a032:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800a036:	bf98      	it	ls
 800a038:	5d9c      	ldrbls	r4, [r3, r6]
 800a03a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800a03e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a042:	fb05 b50a 	mla	r5, r5, sl, fp
 800a046:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800a04a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a04e:	10e4      	asrs	r4, r4, #3
 800a050:	fb04 0405 	mla	r4, r4, r5, r0
 800a054:	2300      	movs	r3, #0
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	9405      	str	r4, [sp, #20]
 800a05a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a05e:	f8ad a01e 	strh.w	sl, [sp, #30]
 800a062:	f8cd 8010 	str.w	r8, [sp, #16]
 800a066:	f88d 9020 	strb.w	r9, [sp, #32]
 800a06a:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800a06e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a072:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800a076:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800a07a:	6803      	ldr	r3, [r0, #0]
 800a07c:	a901      	add	r1, sp, #4
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	4798      	blx	r3
 800a082:	b00b      	add	sp, #44	@ 0x2c
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	08015684 	.word	0x08015684

0800a08c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a090:	461e      	mov	r6, r3
 800a092:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800a094:	460f      	mov	r7, r1
 800a096:	881d      	ldrh	r5, [r3, #0]
 800a098:	4690      	mov	r8, r2
 800a09a:	f7ff fd23 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 800a09e:	6803      	ldr	r3, [r0, #0]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a2:	4798      	blx	r3
 800a0a4:	280b      	cmp	r0, #11
 800a0a6:	bf9a      	itte	ls
 800a0a8:	4b05      	ldrls	r3, [pc, #20]	@ (800a0c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800a0aa:	5c1c      	ldrbls	r4, [r3, r0]
 800a0ac:	2400      	movhi	r4, #0
 800a0ae:	fb08 7005 	mla	r0, r8, r5, r7
 800a0b2:	10e4      	asrs	r4, r4, #3
 800a0b4:	fb04 6000 	mla	r0, r4, r0, r6
 800a0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0bc:	20015432 	.word	0x20015432
 800a0c0:	08015684 	.word	0x08015684

0800a0c4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c6:	b08b      	sub	sp, #44	@ 0x2c
 800a0c8:	461f      	mov	r7, r3
 800a0ca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800a0ce:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a0d2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a0d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a0da:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a0de:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a0e2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a0e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a0ea:	2500      	movs	r5, #0
 800a0ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800a0f0:	f88d 3020 	strb.w	r3, [sp, #32]
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	4616      	mov	r6, r2
 800a0f8:	9504      	str	r5, [sp, #16]
 800a0fa:	f7ff fe9f 	bl	8009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a0fe:	463a      	mov	r2, r7
 800a100:	4631      	mov	r1, r6
 800a102:	4603      	mov	r3, r0
 800a104:	4620      	mov	r0, r4
 800a106:	f7ff ffc1 	bl	800a08c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a10a:	4b0e      	ldr	r3, [pc, #56]	@ (800a144 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800a10c:	9005      	str	r0, [sp, #20]
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a114:	f7ff fce6 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 800a118:	6803      	ldr	r3, [r0, #0]
 800a11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11c:	4798      	blx	r3
 800a11e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a120:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800a124:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a128:	9304      	str	r3, [sp, #16]
 800a12a:	6860      	ldr	r0, [r4, #4]
 800a12c:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800a130:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800a134:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800a138:	6803      	ldr	r3, [r0, #0]
 800a13a:	a901      	add	r1, sp, #4
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	4798      	blx	r3
 800a140:	b00b      	add	sp, #44	@ 0x2c
 800a142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a144:	20015432 	.word	0x20015432

0800a148 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800a148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a14a:	b08d      	sub	sp, #52	@ 0x34
 800a14c:	466b      	mov	r3, sp
 800a14e:	e883 0006 	stmia.w	r3, {r1, r2}
 800a152:	2300      	movs	r3, #0
 800a154:	9306      	str	r3, [sp, #24]
 800a156:	6803      	ldr	r3, [r0, #0]
 800a158:	f8bd 6000 	ldrh.w	r6, [sp]
 800a15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800a162:	2501      	movs	r5, #1
 800a164:	9503      	str	r5, [sp, #12]
 800a166:	4604      	mov	r4, r0
 800a168:	4798      	blx	r3
 800a16a:	463a      	mov	r2, r7
 800a16c:	4631      	mov	r1, r6
 800a16e:	4603      	mov	r3, r0
 800a170:	4620      	mov	r0, r4
 800a172:	f7ff ff8b 	bl	800a08c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a176:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a178:	9307      	str	r3, [sp, #28]
 800a17a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a17e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a182:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a186:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a18a:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800a18c:	9004      	str	r0, [sp, #16]
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a194:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a198:	f7ff fca4 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 800a19c:	6803      	ldr	r3, [r0, #0]
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	4798      	blx	r3
 800a1a2:	23ff      	movs	r3, #255	@ 0xff
 800a1a4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a1a8:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a1ac:	6860      	ldr	r0, [r4, #4]
 800a1ae:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a1b2:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a1b6:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a1ba:	6803      	ldr	r3, [r0, #0]
 800a1bc:	a903      	add	r1, sp, #12
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	4798      	blx	r3
 800a1c2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a1c4:	b00d      	add	sp, #52	@ 0x34
 800a1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c8:	20015432 	.word	0x20015432

0800a1cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800a1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d0:	b08c      	sub	sp, #48	@ 0x30
 800a1d2:	461e      	mov	r6, r3
 800a1d4:	466d      	mov	r5, sp
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e885 0006 	stmia.w	r5, {r1, r2}
 800a1dc:	9306      	str	r3, [sp, #24]
 800a1de:	6803      	ldr	r3, [r0, #0]
 800a1e0:	f8bd 7000 	ldrh.w	r7, [sp]
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e6:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800a1ea:	2501      	movs	r5, #1
 800a1ec:	9503      	str	r5, [sp, #12]
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4798      	blx	r3
 800a1f2:	4642      	mov	r2, r8
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f7ff ff47 	bl	800a08c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a1fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a202:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a206:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a20a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a20e:	4b11      	ldr	r3, [pc, #68]	@ (800a254 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800a210:	9004      	str	r0, [sp, #16]
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a218:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a21a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a21e:	9607      	str	r6, [sp, #28]
 800a220:	f7ff fc60 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 800a224:	6803      	ldr	r3, [r0, #0]
 800a226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a228:	4798      	blx	r3
 800a22a:	23ff      	movs	r3, #255	@ 0xff
 800a22c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a230:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a234:	6860      	ldr	r0, [r4, #4]
 800a236:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a23a:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a23e:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a242:	6803      	ldr	r3, [r0, #0]
 800a244:	a903      	add	r1, sp, #12
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	4798      	blx	r3
 800a24a:	4630      	mov	r0, r6
 800a24c:	b00c      	add	sp, #48	@ 0x30
 800a24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a252:	bf00      	nop
 800a254:	20015432 	.word	0x20015432

0800a258 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800a258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a25a:	b085      	sub	sp, #20
 800a25c:	ac02      	add	r4, sp, #8
 800a25e:	e884 0006 	stmia.w	r4, {r1, r2}
 800a262:	4605      	mov	r5, r0
 800a264:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800a268:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800a26c:	f7ff fde6 	bl	8009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a270:	463a      	mov	r2, r7
 800a272:	4603      	mov	r3, r0
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	f7ff ff08 	bl	800a08c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a27c:	4a05      	ldr	r2, [pc, #20]	@ (800a294 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800a27e:	682b      	ldr	r3, [r5, #0]
 800a280:	8812      	ldrh	r2, [r2, #0]
 800a282:	9200      	str	r2, [sp, #0]
 800a284:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800a286:	e894 0006 	ldmia.w	r4, {r1, r2}
 800a28a:	4603      	mov	r3, r0
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b0      	blx	r6
 800a290:	b005      	add	sp, #20
 800a292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a294:	20015432 	.word	0x20015432

0800a298 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800a29e:	4604      	mov	r4, r0
 800a2a0:	b19b      	cbz	r3, 800a2ca <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800a2a2:	2002      	movs	r0, #2
 800a2a4:	f7f7 fc78 	bl	8001b98 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800a2ae:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800a2ba:	f7ff fdbf 	bl	8009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a2be:	462b      	mov	r3, r5
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2c8:	4718      	bx	r3
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}

0800a2cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a2d2:	428b      	cmp	r3, r1
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	d006      	beq.n	800a2e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800a2da:	6803      	ldr	r3, [r0, #0]
 800a2dc:	b929      	cbnz	r1, 800a2ea <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800a2de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a2e2:	4798      	blx	r3
 800a2e4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800a2e8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a2ee:	e7f8      	b.n	800a2e2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800a2f0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800a2f0:	b510      	push	{r4, lr}
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	b95b      	cbnz	r3, 800a312 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a2fa:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d007      	beq.n	800a312 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a302:	6840      	ldr	r0, [r0, #4]
 800a304:	f000 f912 	bl	800a52c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800a308:	b118      	cbz	r0, 800a312 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800a30a:	6862      	ldr	r2, [r4, #4]
 800a30c:	7a53      	ldrb	r3, [r2, #9]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0fc      	beq.n	800a30c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800a312:	f7f7 fd8d 	bl	8001e30 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a316:	4620      	mov	r0, r4
 800a318:	2100      	movs	r1, #0
 800a31a:	f7ff ffd7 	bl	800a2cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a31e:	4620      	mov	r0, r4
 800a320:	f7ff fd8c 	bl	8009e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a324:	bd10      	pop	{r4, pc}
 800a326:	bf00      	nop
 800a328:	20015436 	.word	0x20015436

0800a32c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800a32c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800a330:	1a13      	subs	r3, r2, r0
 800a332:	4258      	negs	r0, r3
 800a334:	4158      	adcs	r0, r3
 800a336:	4770      	bx	lr

0800a338 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800a338:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800a33c:	1a9b      	subs	r3, r3, r2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfdc      	itt	le
 800a342:	6882      	ldrle	r2, [r0, #8]
 800a344:	189b      	addle	r3, r3, r2
 800a346:	2b01      	cmp	r3, #1
 800a348:	bfcc      	ite	gt
 800a34a:	2000      	movgt	r0, #0
 800a34c:	2001      	movle	r0, #1
 800a34e:	4770      	bx	lr

0800a350 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800a350:	6902      	ldr	r2, [r0, #16]
 800a352:	6843      	ldr	r3, [r0, #4]
 800a354:	2024      	movs	r0, #36	@ 0x24
 800a356:	fb00 3002 	mla	r0, r0, r2, r3
 800a35a:	4770      	bx	lr

0800a35c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800a35c:	6803      	ldr	r3, [r0, #0]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	4718      	bx	r3

0800a362 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800a362:	b570      	push	{r4, r5, r6, lr}
 800a364:	2301      	movs	r3, #1
 800a366:	7203      	strb	r3, [r0, #8]
 800a368:	4604      	mov	r4, r0
 800a36a:	6840      	ldr	r0, [r0, #4]
 800a36c:	6803      	ldr	r3, [r0, #0]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	4798      	blx	r3
 800a372:	6803      	ldr	r3, [r0, #0]
 800a374:	2b40      	cmp	r3, #64	@ 0x40
 800a376:	4605      	mov	r5, r0
 800a378:	d00c      	beq.n	800a394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a37a:	d810      	bhi.n	800a39e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	d01d      	beq.n	800a3bc <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800a380:	d804      	bhi.n	800a38c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800a382:	2b01      	cmp	r3, #1
 800a384:	d006      	beq.n	800a394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a386:	2b02      	cmp	r3, #2
 800a388:	d02c      	beq.n	800a3e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d01d      	beq.n	800a3cc <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800a390:	2b20      	cmp	r3, #32
 800a392:	d1fa      	bne.n	800a38a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	4620      	mov	r0, r4
 800a398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a39a:	4798      	blx	r3
 800a39c:	e013      	b.n	800a3c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800a39e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3a2:	d0f7      	beq.n	800a394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a3a4:	d804      	bhi.n	800a3b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800a3a6:	2b80      	cmp	r3, #128	@ 0x80
 800a3a8:	d0f4      	beq.n	800a394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a3aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ae:	e7f0      	b.n	800a392 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800a3b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3b4:	d0ee      	beq.n	800a394 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800a3b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3ba:	e7e5      	b.n	800a388 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800a3bc:	6823      	ldr	r3, [r4, #0]
 800a3be:	7f01      	ldrb	r1, [r0, #28]
 800a3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	4798      	blx	r3
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ca:	e006      	b.n	800a3da <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	7f01      	ldrb	r1, [r0, #28]
 800a3d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	4798      	blx	r3
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3da:	4629      	mov	r1, r5
 800a3dc:	4620      	mov	r0, r4
 800a3de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3e2:	4718      	bx	r3
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ea:	4798      	blx	r3
 800a3ec:	e7f3      	b.n	800a3d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800a3ee <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800a3ee:	4770      	bx	lr

0800a3f0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800a3f0:	4770      	bx	lr

0800a3f2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800a3f2:	4770      	bx	lr

0800a3f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800a3f4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800a3f8:	1ad2      	subs	r2, r2, r3
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	b510      	push	{r4, lr}
 800a3fe:	bfdc      	itt	le
 800a400:	6884      	ldrle	r4, [r0, #8]
 800a402:	1912      	addle	r2, r2, r4
 800a404:	2a01      	cmp	r2, #1
 800a406:	dd16      	ble.n	800a436 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800a408:	6842      	ldr	r2, [r0, #4]
 800a40a:	2424      	movs	r4, #36	@ 0x24
 800a40c:	fb04 2303 	mla	r3, r4, r3, r2
 800a410:	f101 0220 	add.w	r2, r1, #32
 800a414:	f851 4b04 	ldr.w	r4, [r1], #4
 800a418:	f843 4b04 	str.w	r4, [r3], #4
 800a41c:	4291      	cmp	r1, r2
 800a41e:	d1f9      	bne.n	800a414 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800a420:	780a      	ldrb	r2, [r1, #0]
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	68c3      	ldr	r3, [r0, #12]
 800a426:	6882      	ldr	r2, [r0, #8]
 800a428:	f3bf 8f5b 	dmb	ish
 800a42c:	3301      	adds	r3, #1
 800a42e:	429a      	cmp	r2, r3
 800a430:	bfd8      	it	le
 800a432:	1a9b      	suble	r3, r3, r2
 800a434:	60c3      	str	r3, [r0, #12]
 800a436:	bd10      	pop	{r4, pc}

0800a438 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800a438:	6903      	ldr	r3, [r0, #16]
 800a43a:	6882      	ldr	r2, [r0, #8]
 800a43c:	f3bf 8f5b 	dmb	ish
 800a440:	3301      	adds	r3, #1
 800a442:	429a      	cmp	r2, r3
 800a444:	bfd8      	it	le
 800a446:	1a9b      	suble	r3, r3, r2
 800a448:	6103      	str	r3, [r0, #16]
 800a44a:	4770      	bx	lr

0800a44c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	4604      	mov	r4, r0
 800a450:	460e      	mov	r6, r1
 800a452:	6860      	ldr	r0, [r4, #4]
 800a454:	6803      	ldr	r3, [r0, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4798      	blx	r3
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d1f9      	bne.n	800a452 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800a45e:	4d0d      	ldr	r5, [pc, #52]	@ (800a494 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800a460:	6828      	ldr	r0, [r5, #0]
 800a462:	6803      	ldr	r3, [r0, #0]
 800a464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a466:	4798      	blx	r3
 800a468:	f7f7 fcf0 	bl	8001e4c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800a46c:	6828      	ldr	r0, [r5, #0]
 800a46e:	2101      	movs	r1, #1
 800a470:	f7ff ff2c 	bl	800a2cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800a474:	6860      	ldr	r0, [r4, #4]
 800a476:	6803      	ldr	r3, [r0, #0]
 800a478:	4631      	mov	r1, r6
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	4798      	blx	r3
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	4620      	mov	r0, r4
 800a482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a484:	4798      	blx	r3
 800a486:	6828      	ldr	r0, [r5, #0]
 800a488:	6803      	ldr	r3, [r0, #0]
 800a48a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a48e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a490:	4718      	bx	r3
 800a492:	bf00      	nop
 800a494:	20015438 	.word	0x20015438

0800a498 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800a498:	b508      	push	{r3, lr}
 800a49a:	f7f7 fcc9 	bl	8001e30 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800a49e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4a2:	f7f7 bccd 	b.w	8001e40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800a4a6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	2114      	movs	r1, #20
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	f008 fab8 	bl	8012a20 <_ZdlPvj>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	bd10      	pop	{r4, pc}

0800a4b4 <_ZN8touchgfx13DMA_Interface5startEv>:
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	6840      	ldr	r0, [r0, #4]
 800a4ba:	6803      	ldr	r3, [r0, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4798      	blx	r3
 800a4c0:	b948      	cbnz	r0, 800a4d6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a4c2:	7a63      	ldrb	r3, [r4, #9]
 800a4c4:	b13b      	cbz	r3, 800a4d6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a4c6:	7a23      	ldrb	r3, [r4, #8]
 800a4c8:	b92b      	cbnz	r3, 800a4d6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d4:	4718      	bx	r3
 800a4d6:	bd10      	pop	{r4, pc}

0800a4d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	4604      	mov	r4, r0
 800a4dc:	6840      	ldr	r0, [r0, #4]
 800a4de:	6803      	ldr	r3, [r0, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4798      	blx	r3
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	b930      	cbnz	r0, 800a4f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800a4e8:	7a23      	ldrb	r3, [r4, #8]
 800a4ea:	b123      	cbz	r3, 800a4f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800a4ec:	6860      	ldr	r0, [r4, #4]
 800a4ee:	6803      	ldr	r3, [r0, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	4798      	blx	r3
 800a4f4:	7225      	strb	r5, [r4, #8]
 800a4f6:	6860      	ldr	r0, [r4, #4]
 800a4f8:	6803      	ldr	r3, [r0, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4798      	blx	r3
 800a4fe:	b928      	cbnz	r0, 800a50c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	4620      	mov	r0, r4
 800a504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a50a:	4718      	bx	r3
 800a50c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a510:	f7f7 bca4 	b.w	8001e5c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800a514 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800a514:	b510      	push	{r4, lr}
 800a516:	4c04      	ldr	r4, [pc, #16]	@ (800a528 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800a518:	6082      	str	r2, [r0, #8]
 800a51a:	2200      	movs	r2, #0
 800a51c:	e9c0 4100 	strd	r4, r1, [r0]
 800a520:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	08015698 	.word	0x08015698

0800a52c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800a52c:	6840      	ldr	r0, [r0, #4]
 800a52e:	6803      	ldr	r3, [r0, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4718      	bx	r3

0800a534 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800a534:	2000      	movs	r0, #0
 800a536:	4770      	bx	lr

0800a538 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800a538:	4b07      	ldr	r3, [pc, #28]	@ (800a558 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800a53a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a53c:	881b      	ldrh	r3, [r3, #0]
 800a53e:	4293      	cmp	r3, r2
 800a540:	bf81      	itttt	hi
 800a542:	4b06      	ldrhi	r3, [pc, #24]	@ (800a55c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800a544:	681b      	ldrhi	r3, [r3, #0]
 800a546:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800a54a:	7858      	ldrbhi	r0, [r3, #1]
 800a54c:	bf8c      	ite	hi
 800a54e:	f000 0003 	andhi.w	r0, r0, #3
 800a552:	2000      	movls	r0, #0
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	2001548c 	.word	0x2001548c
 800a55c:	20015488 	.word	0x20015488

0800a560 <_ZN8touchgfx8TextAreaD1Ev>:
 800a560:	4770      	bx	lr
	...

0800a564 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800a564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a568:	4b10      	ldr	r3, [pc, #64]	@ (800a5ac <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800a56a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	428b      	cmp	r3, r1
 800a570:	4604      	mov	r4, r0
 800a572:	d918      	bls.n	800a5a6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800a574:	6803      	ldr	r3, [r0, #0]
 800a576:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 800a578:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800a57a:	6818      	ldr	r0, [r3, #0]
 800a57c:	f7f9 fb4c 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	4606      	mov	r6, r0
 800a584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a586:	4620      	mov	r0, r4
 800a588:	4798      	blx	r3
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	4607      	mov	r7, r0
 800a58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a592:	4620      	mov	r0, r4
 800a594:	4798      	blx	r3
 800a596:	463a      	mov	r2, r7
 800a598:	4603      	mov	r3, r0
 800a59a:	4631      	mov	r1, r6
 800a59c:	4620      	mov	r0, r4
 800a59e:	46ac      	mov	ip, r5
 800a5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a4:	4760      	bx	ip
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ac:	2001548c 	.word	0x2001548c
 800a5b0:	20015494 	.word	0x20015494

0800a5b4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800a5b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5b8:	4b17      	ldr	r3, [pc, #92]	@ (800a618 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800a5ba:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	428b      	cmp	r3, r1
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	d926      	bls.n	800a612 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800a5c4:	4b15      	ldr	r3, [pc, #84]	@ (800a61c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800a5cc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800a5d0:	4b13      	ldr	r3, [pc, #76]	@ (800a620 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800a5d2:	7855      	ldrb	r5, [r2, #1]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a5da:	6833      	ldr	r3, [r6, #0]
 800a5dc:	69df      	ldr	r7, [r3, #28]
 800a5de:	4b11      	ldr	r3, [pc, #68]	@ (800a624 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	f7f9 fb19 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	4680      	mov	r8, r0
 800a5ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4798      	blx	r3
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	4681      	mov	r9, r0
 800a5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4798      	blx	r3
 800a5fc:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800a600:	9000      	str	r0, [sp, #0]
 800a602:	464b      	mov	r3, r9
 800a604:	4642      	mov	r2, r8
 800a606:	4629      	mov	r1, r5
 800a608:	4630      	mov	r0, r6
 800a60a:	47b8      	blx	r7
 800a60c:	b003      	add	sp, #12
 800a60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a612:	2000      	movs	r0, #0
 800a614:	e7fa      	b.n	800a60c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800a616:	bf00      	nop
 800a618:	2001548c 	.word	0x2001548c
 800a61c:	20015488 	.word	0x20015488
 800a620:	20015490 	.word	0x20015490
 800a624:	20015494 	.word	0x20015494

0800a628 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800a628:	b40e      	push	{r1, r2, r3}
 800a62a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62e:	4b2f      	ldr	r3, [pc, #188]	@ (800a6ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800a630:	881a      	ldrh	r2, [r3, #0]
 800a632:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800a634:	429a      	cmp	r2, r3
 800a636:	b09d      	sub	sp, #116	@ 0x74
 800a638:	4604      	mov	r4, r0
 800a63a:	d954      	bls.n	800a6e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800a63c:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800a6f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800a640:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800a6f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800a644:	aa26      	add	r2, sp, #152	@ 0x98
 800a646:	9202      	str	r2, [sp, #8]
 800a648:	f8d9 2000 	ldr.w	r2, [r9]
 800a64c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800a650:	f8d8 3000 	ldr.w	r3, [r8]
 800a654:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	4628      	mov	r0, r5
 800a65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a65e:	4798      	blx	r3
 800a660:	b207      	sxth	r7, r0
 800a662:	4606      	mov	r6, r0
 800a664:	a803      	add	r0, sp, #12
 800a666:	f003 ffa8 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800a66a:	682b      	ldr	r3, [r5, #0]
 800a66c:	4628      	mov	r0, r5
 800a66e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a670:	4798      	blx	r3
 800a672:	682b      	ldr	r3, [r5, #0]
 800a674:	4682      	mov	sl, r0
 800a676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a678:	4628      	mov	r0, r5
 800a67a:	4798      	blx	r3
 800a67c:	4653      	mov	r3, sl
 800a67e:	9000      	str	r0, [sp, #0]
 800a680:	9a02      	ldr	r2, [sp, #8]
 800a682:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800a684:	a803      	add	r0, sp, #12
 800a686:	f003 fff3 	bl	800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a68a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a68c:	f8d9 3000 	ldr.w	r3, [r9]
 800a690:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800a694:	8925      	ldrh	r5, [r4, #8]
 800a696:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800a69a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800a69e:	eba5 050c 	sub.w	r5, r5, ip
 800a6a2:	784a      	ldrb	r2, [r1, #1]
 800a6a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a8:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800a6ac:	b22d      	sxth	r5, r5
 800a6ae:	9500      	str	r5, [sp, #0]
 800a6b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a6b4:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a6b8:	a803      	add	r0, sp, #12
 800a6ba:	f001 fdc1 	bl	800c240 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800a6be:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800a6c2:	18b9      	adds	r1, r7, r2
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	b203      	sxth	r3, r0
 800a6c8:	dd0b      	ble.n	800a6e2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	fb13 f302 	smulbb	r3, r3, r2
 800a6d0:	fb16 3300 	smlabb	r3, r6, r0, r3
 800a6d4:	b21f      	sxth	r7, r3
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	b01d      	add	sp, #116	@ 0x74
 800a6da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6de:	b003      	add	sp, #12
 800a6e0:	4770      	bx	lr
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	dcf7      	bgt.n	800a6d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a6e6:	2700      	movs	r7, #0
 800a6e8:	e7f5      	b.n	800a6d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a6ea:	bf00      	nop
 800a6ec:	2001548c 	.word	0x2001548c
 800a6f0:	20015488 	.word	0x20015488
 800a6f4:	20015490 	.word	0x20015490

0800a6f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	4bbc      	ldr	r3, [pc, #752]	@ (800a9f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800a6fe:	460c      	mov	r4, r1
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800a704:	428b      	cmp	r3, r1
 800a706:	b0a9      	sub	sp, #164	@ 0xa4
 800a708:	4680      	mov	r8, r0
 800a70a:	d809      	bhi.n	800a720 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800a70c:	2300      	movs	r3, #0
 800a70e:	f04f 32ff 	mov.w	r2, #4294967295
 800a712:	e9c0 3200 	strd	r3, r2, [r0]
 800a716:	6083      	str	r3, [r0, #8]
 800a718:	4640      	mov	r0, r8
 800a71a:	b029      	add	sp, #164	@ 0xa4
 800a71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a720:	4eb4      	ldr	r6, [pc, #720]	@ (800a9f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800a722:	6833      	ldr	r3, [r6, #0]
 800a724:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800a728:	4bb3      	ldr	r3, [pc, #716]	@ (800a9f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a730:	4bb2      	ldr	r3, [pc, #712]	@ (800a9fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	f7f9 fa70 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	4681      	mov	r9, r0
 800a73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a73e:	4628      	mov	r0, r5
 800a740:	4798      	blx	r3
 800a742:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800a744:	b203      	sxth	r3, r0
 800a746:	4407      	add	r7, r0
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	b2bb      	uxth	r3, r7
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a752:	4682      	mov	sl, r0
 800a754:	a80f      	add	r0, sp, #60	@ 0x3c
 800a756:	2b00      	cmp	r3, #0
 800a758:	f040 80a6 	bne.w	800a8a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800a75c:	f003 ff2d 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	4628      	mov	r0, r5
 800a764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a766:	4798      	blx	r3
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	4606      	mov	r6, r0
 800a76c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a76e:	4628      	mov	r0, r5
 800a770:	4798      	blx	r3
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4607      	mov	r7, r0
 800a776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a778:	4620      	mov	r0, r4
 800a77a:	4798      	blx	r3
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	4683      	mov	fp, r0
 800a780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a784:	4620      	mov	r0, r4
 800a786:	4798      	blx	r3
 800a788:	463b      	mov	r3, r7
 800a78a:	e9cd b000 	strd	fp, r0, [sp]
 800a78e:	4649      	mov	r1, r9
 800a790:	4632      	mov	r2, r6
 800a792:	a80f      	add	r0, sp, #60	@ 0x3c
 800a794:	f003 ff81 	bl	800e69a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a798:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a79c:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800a9f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800a7a0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a7a4:	f04f 0600 	mov.w	r6, #0
 800a7a8:	bf0c      	ite	eq
 800a7aa:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800a7ae:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800a7b2:	4637      	mov	r7, r6
 800a7b4:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a7b6:	f8db 3000 	ldr.w	r3, [fp]
 800a7ba:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a7be:	4629      	mov	r1, r5
 800a7c0:	785b      	ldrb	r3, [r3, #1]
 800a7c2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a7c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a7ca:	a80f      	add	r0, sp, #60	@ 0x3c
 800a7cc:	f001 fa3f 	bl	800bc4e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	4286      	cmp	r6, r0
 800a7d4:	bfb8      	it	lt
 800a7d6:	4606      	movlt	r6, r0
 800a7d8:	3701      	adds	r7, #1
 800a7da:	eba9 0903 	sub.w	r9, r9, r3
 800a7de:	a80f      	add	r0, sp, #60	@ 0x3c
 800a7e0:	b236      	sxth	r6, r6
 800a7e2:	b2bf      	uxth	r7, r7
 800a7e4:	fa0f f989 	sxth.w	r9, r9
 800a7e8:	f003 ff0e 	bl	800e608 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800a7ec:	b918      	cbnz	r0, 800a7f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a7ee:	7a2b      	ldrb	r3, [r5, #8]
 800a7f0:	444b      	add	r3, r9
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	dcde      	bgt.n	800a7b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	9a04      	ldr	r2, [sp, #16]
 800a7fa:	f895 9009 	ldrb.w	r9, [r5, #9]
 800a7fe:	fb13 f707 	smulbb	r7, r3, r7
 800a802:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800a804:	1aff      	subs	r7, r7, r3
 800a806:	b2bf      	uxth	r7, r7
 800a808:	b23b      	sxth	r3, r7
 800a80a:	429a      	cmp	r2, r3
 800a80c:	bfa8      	it	ge
 800a80e:	4657      	movge	r7, sl
 800a810:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a814:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	bf08      	it	eq
 800a81c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800a820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a822:	bf18      	it	ne
 800a824:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800a828:	4620      	mov	r0, r4
 800a82a:	4798      	blx	r3
 800a82c:	444f      	add	r7, r9
 800a82e:	fa1f f987 	uxth.w	r9, r7
 800a832:	2801      	cmp	r0, #1
 800a834:	fa0f f789 	sxth.w	r7, r9
 800a838:	b2b3      	uxth	r3, r6
 800a83a:	f000 80e1 	beq.w	800aa00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800a83e:	2802      	cmp	r0, #2
 800a840:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800a844:	f000 80e2 	beq.w	800aa0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800a848:	7aea      	ldrb	r2, [r5, #11]
 800a84a:	7b2d      	ldrb	r5, [r5, #12]
 800a84c:	b236      	sxth	r6, r6
 800a84e:	1ab6      	subs	r6, r6, r2
 800a850:	442a      	add	r2, r5
 800a852:	4413      	add	r3, r2
 800a854:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800a858:	fa1f fa86 	uxth.w	sl, r6
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	2a02      	cmp	r2, #2
 800a860:	fa0f fb8a 	sxth.w	fp, sl
 800a864:	b21e      	sxth	r6, r3
 800a866:	f000 80d5 	beq.w	800aa14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800a86a:	2a03      	cmp	r2, #3
 800a86c:	f000 80dd 	beq.w	800aa2a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800a870:	2a01      	cmp	r2, #1
 800a872:	f040 80e5 	bne.w	800aa40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800a876:	8925      	ldrh	r5, [r4, #8]
 800a878:	4633      	mov	r3, r6
 800a87a:	eba5 0909 	sub.w	r9, r5, r9
 800a87e:	463e      	mov	r6, r7
 800a880:	465d      	mov	r5, fp
 800a882:	461f      	mov	r7, r3
 800a884:	fa0f fb89 	sxth.w	fp, r9
 800a888:	4b5c      	ldr	r3, [pc, #368]	@ (800a9fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a88a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a88c:	6818      	ldr	r0, [r3, #0]
 800a88e:	f7f9 f9c3 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800a892:	f8a8 b000 	strh.w	fp, [r8]
 800a896:	f8a8 5002 	strh.w	r5, [r8, #2]
 800a89a:	f8a8 6004 	strh.w	r6, [r8, #4]
 800a89e:	f8a8 7006 	strh.w	r7, [r8, #6]
 800a8a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8a6:	e737      	b.n	800a718 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800a8a8:	f003 fe87 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8b2:	4798      	blx	r3
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	4798      	blx	r3
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	4683      	mov	fp, r0
 800a8c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4798      	blx	r3
 800a8c8:	6822      	ldr	r2, [r4, #0]
 800a8ca:	9005      	str	r0, [sp, #20]
 800a8cc:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	4790      	blx	r2
 800a8d4:	9b05      	ldr	r3, [sp, #20]
 800a8d6:	9001      	str	r0, [sp, #4]
 800a8d8:	463a      	mov	r2, r7
 800a8da:	4649      	mov	r1, r9
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	a80f      	add	r0, sp, #60	@ 0x3c
 800a8e0:	465b      	mov	r3, fp
 800a8e2:	f003 feda 	bl	800e69a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a8e6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a8ea:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800a8ee:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a8f0:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800a8f4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a8f8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800a8fc:	bf0a      	itet	eq
 800a8fe:	464a      	moveq	r2, r9
 800a900:	461a      	movne	r2, r3
 800a902:	4699      	moveq	r9, r3
 800a904:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800a908:	1ad2      	subs	r2, r2, r3
 800a90a:	6833      	ldr	r3, [r6, #0]
 800a90c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800a910:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a914:	af0f      	add	r7, sp, #60	@ 0x3c
 800a916:	7859      	ldrb	r1, [r3, #1]
 800a918:	9707      	str	r7, [sp, #28]
 800a91a:	2300      	movs	r3, #0
 800a91c:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800a920:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a924:	f88d 1020 	strb.w	r1, [sp, #32]
 800a928:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a92c:	9509      	str	r5, [sp, #36]	@ 0x24
 800a92e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800a932:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800a936:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800a93a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800a93e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800a942:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800a946:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800a94a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800a94e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a952:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800a956:	b350      	cbz	r0, 800a9ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	4628      	mov	r0, r5
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	4798      	blx	r3
 800a960:	4607      	mov	r7, r0
 800a962:	b320      	cbz	r0, 800a9ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a964:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a966:	6803      	ldr	r3, [r0, #0]
 800a968:	4639      	mov	r1, r7
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	4798      	blx	r3
 800a96e:	4606      	mov	r6, r0
 800a970:	b1e8      	cbz	r0, 800a9ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a972:	7b43      	ldrb	r3, [r0, #13]
 800a974:	7a82      	ldrb	r2, [r0, #10]
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a97c:	4313      	orrs	r3, r2
 800a97e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a982:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800a986:	2b06      	cmp	r3, #6
 800a988:	d111      	bne.n	800a9ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a98a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a98c:	6803      	ldr	r3, [r0, #0]
 800a98e:	4632      	mov	r2, r6
 800a990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a992:	4639      	mov	r1, r7
 800a994:	4798      	blx	r3
 800a996:	7b73      	ldrb	r3, [r6, #13]
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800a99e:	7ab3      	ldrb	r3, [r6, #10]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	4418      	add	r0, r3
 800a9a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a9a8:	4418      	add	r0, r3
 800a9aa:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800a9ae:	2600      	movs	r6, #0
 800a9b0:	4637      	mov	r7, r6
 800a9b2:	a806      	add	r0, sp, #24
 800a9b4:	f001 fb40 	bl	800c038 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800a9b8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800a9bc:	9b03      	ldr	r3, [sp, #12]
 800a9be:	4286      	cmp	r6, r0
 800a9c0:	eba9 0903 	sub.w	r9, r9, r3
 800a9c4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a9c8:	bfb8      	it	lt
 800a9ca:	4606      	movlt	r6, r0
 800a9cc:	3701      	adds	r7, #1
 800a9ce:	b236      	sxth	r6, r6
 800a9d0:	b2bf      	uxth	r7, r7
 800a9d2:	fa0f f989 	sxth.w	r9, r9
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f43f af0d 	beq.w	800a7f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a9dc:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f47f af08 	bne.w	800a7f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a9e6:	7a2b      	ldrb	r3, [r5, #8]
 800a9e8:	444b      	add	r3, r9
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dce1      	bgt.n	800a9b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800a9ee:	e702      	b.n	800a7f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a9f0:	2001548c 	.word	0x2001548c
 800a9f4:	20015488 	.word	0x20015488
 800a9f8:	20015490 	.word	0x20015490
 800a9fc:	20015494 	.word	0x20015494
 800aa00:	ebaa 0606 	sub.w	r6, sl, r6
 800aa04:	2002      	movs	r0, #2
 800aa06:	fb96 f6f0 	sdiv	r6, r6, r0
 800aa0a:	e71d      	b.n	800a848 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800aa0c:	441e      	add	r6, r3
 800aa0e:	ebaa 0606 	sub.w	r6, sl, r6
 800aa12:	e719      	b.n	800a848 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800aa14:	8925      	ldrh	r5, [r4, #8]
 800aa16:	1aed      	subs	r5, r5, r3
 800aa18:	eba5 050a 	sub.w	r5, r5, sl
 800aa1c:	fa0f fb85 	sxth.w	fp, r5
 800aa20:	8965      	ldrh	r5, [r4, #10]
 800aa22:	eba5 0509 	sub.w	r5, r5, r9
 800aa26:	b22d      	sxth	r5, r5
 800aa28:	e72e      	b.n	800a888 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800aa2a:	8965      	ldrh	r5, [r4, #10]
 800aa2c:	1aed      	subs	r5, r5, r3
 800aa2e:	eba5 050a 	sub.w	r5, r5, sl
 800aa32:	4633      	mov	r3, r6
 800aa34:	b22d      	sxth	r5, r5
 800aa36:	463e      	mov	r6, r7
 800aa38:	f04f 0b00 	mov.w	fp, #0
 800aa3c:	461f      	mov	r7, r3
 800aa3e:	e723      	b.n	800a888 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800aa40:	2500      	movs	r5, #0
 800aa42:	e721      	b.n	800a888 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800aa44 <_ZN8touchgfx8TextAreaD0Ev>:
 800aa44:	b510      	push	{r4, lr}
 800aa46:	2148      	movs	r1, #72	@ 0x48
 800aa48:	4604      	mov	r4, r0
 800aa4a:	f007 ffe9 	bl	8012a20 <_ZdlPvj>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	bd10      	pop	{r4, pc}
	...

0800aa54 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800aa54:	b513      	push	{r0, r1, r4, lr}
 800aa56:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	b1fb      	cbz	r3, 800aa9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800aa5e:	4b16      	ldr	r3, [pc, #88]	@ (800aab8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800aa60:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	428b      	cmp	r3, r1
 800aa66:	d91a      	bls.n	800aa9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800aa68:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dd16      	ble.n	800aa9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800aa70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd12      	ble.n	800aa9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800aa78:	4b10      	ldr	r3, [pc, #64]	@ (800aabc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	f7f9 f8cc 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800aa80:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800aa84:	6822      	ldr	r2, [r4, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	db06      	blt.n	800aa98 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800aa8a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	db02      	blt.n	800aa98 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800aa92:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800aa94:	4298      	cmp	r0, r3
 800aa96:	d004      	beq.n	800aaa2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800aa98:	6953      	ldr	r3, [r2, #20]
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	4798      	blx	r3
 800aa9e:	b002      	add	sp, #8
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800aaa6:	c903      	ldmia	r1, {r0, r1}
 800aaa8:	466b      	mov	r3, sp
 800aaaa:	e883 0003 	stmia.w	r3, {r0, r1}
 800aaae:	6912      	ldr	r2, [r2, #16]
 800aab0:	4619      	mov	r1, r3
 800aab2:	4620      	mov	r0, r4
 800aab4:	4790      	blx	r2
 800aab6:	e7f2      	b.n	800aa9e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800aab8:	2001548c 	.word	0x2001548c
 800aabc:	20015494 	.word	0x20015494

0800aac0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800aac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac4:	4b44      	ldr	r3, [pc, #272]	@ (800abd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800aac6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	4293      	cmp	r3, r2
 800aacc:	b08e      	sub	sp, #56	@ 0x38
 800aace:	4604      	mov	r4, r0
 800aad0:	d97e      	bls.n	800abd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800aad2:	6808      	ldr	r0, [r1, #0]
 800aad4:	4d41      	ldr	r5, [pc, #260]	@ (800abdc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800aad6:	6849      	ldr	r1, [r1, #4]
 800aad8:	ab05      	add	r3, sp, #20
 800aada:	c303      	stmia	r3!, {r0, r1}
 800aadc:	4611      	mov	r1, r2
 800aade:	6828      	ldr	r0, [r5, #0]
 800aae0:	f7f9 f89a 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800aae4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db11      	blt.n	800ab10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800aaec:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	db0d      	blt.n	800ab10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800aaf4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800aaf6:	4298      	cmp	r0, r3
 800aaf8:	d10a      	bne.n	800ab10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800aafa:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800aafe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab02:	ab09      	add	r3, sp, #36	@ 0x24
 800ab04:	e883 0003 	stmia.w	r3, {r0, r1}
 800ab08:	4619      	mov	r1, r3
 800ab0a:	a805      	add	r0, sp, #20
 800ab0c:	f7fe fd14 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800ab10:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	dd5b      	ble.n	800abd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800ab18:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	dd57      	ble.n	800abd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800ab20:	4f2f      	ldr	r7, [pc, #188]	@ (800abe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800ab22:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800ab2a:	4b2e      	ldr	r3, [pc, #184]	@ (800abe4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	d04c      	beq.n	800abd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800ab3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab3e:	4620      	mov	r0, r4
 800ab40:	4798      	blx	r3
 800ab42:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800ab4a:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800ab4e:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800ab52:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ab54:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800ab58:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	9609      	str	r6, [sp, #36]	@ 0x24
 800ab60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ab64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab68:	4b1f      	ldr	r3, [pc, #124]	@ (800abe8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800ab6a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800ab74:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab76:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800ab7a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800ab7e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800ab82:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800ab86:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ab8a:	b10a      	cbz	r2, 800ab90 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800ab8c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800ab8e:	b906      	cbnz	r6, 800ab92 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800ab90:	689e      	ldr	r6, [r3, #8]
 800ab92:	af07      	add	r7, sp, #28
 800ab94:	4621      	mov	r1, r4
 800ab96:	4638      	mov	r0, r7
 800ab98:	f003 f91e 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ab9c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800ab9e:	6828      	ldr	r0, [r5, #0]
 800aba0:	f7f9 f83a 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	4605      	mov	r5, r0
 800aba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abaa:	4620      	mov	r0, r4
 800abac:	4798      	blx	r3
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	4680      	mov	r8, r0
 800abb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abb6:	4620      	mov	r0, r4
 800abb8:	4798      	blx	r3
 800abba:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800abbe:	ab09      	add	r3, sp, #36	@ 0x24
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	9501      	str	r5, [sp, #4]
 800abc4:	ab05      	add	r3, sp, #20
 800abc6:	e897 0006 	ldmia.w	r7, {r1, r2}
 800abca:	4630      	mov	r0, r6
 800abcc:	f7f8 ffd6 	bl	8003b7c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800abd0:	b00e      	add	sp, #56	@ 0x38
 800abd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd6:	bf00      	nop
 800abd8:	2001548c 	.word	0x2001548c
 800abdc:	20015494 	.word	0x20015494
 800abe0:	20015488 	.word	0x20015488
 800abe4:	20015490 	.word	0x20015490
 800abe8:	20015438 	.word	0x20015438

0800abec <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	6803      	ldr	r3, [r0, #0]
 800abf0:	4604      	mov	r4, r0
 800abf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abf4:	4615      	mov	r5, r2
 800abf6:	4798      	blx	r3
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	4629      	mov	r1, r5
 800abfc:	4620      	mov	r0, r4
 800abfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac04:	4718      	bx	r3
	...

0800ac08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac44 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800ac0c:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	4604      	mov	r4, r0
 800ac14:	d214      	bcs.n	800ac40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800ac16:	6803      	ldr	r3, [r0, #0]
 800ac18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac1a:	4798      	blx	r3
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	4605      	mov	r5, r0
 800ac20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac22:	4620      	mov	r0, r4
 800ac24:	4798      	blx	r3
 800ac26:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800ac2a:	b22d      	sxth	r5, r5
 800ac2c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800ac30:	4601      	mov	r1, r0
 800ac32:	bf06      	itte	eq
 800ac34:	4602      	moveq	r2, r0
 800ac36:	4629      	moveq	r1, r5
 800ac38:	462a      	movne	r2, r5
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f7ff ffd6 	bl	800abec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800ac40:	bd38      	pop	{r3, r4, r5, pc}
 800ac42:	bf00      	nop
 800ac44:	2001548c 	.word	0x2001548c

0800ac48 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800ac48:	b530      	push	{r4, r5, lr}
 800ac4a:	888b      	ldrh	r3, [r1, #4]
 800ac4c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800ac4e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800ac52:	b085      	sub	sp, #20
 800ac54:	4604      	mov	r4, r0
 800ac56:	b923      	cbnz	r3, 800ac62 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800ac58:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800ac5c:	b90b      	cbnz	r3, 800ac62 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800ac5e:	f7ff ffd3 	bl	800ac08 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	466d      	mov	r5, sp
 800ac66:	4621      	mov	r1, r4
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac6e:	4798      	blx	r3
 800ac70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac74:	343c      	adds	r4, #60	@ 0x3c
 800ac76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac7a:	b005      	add	sp, #20
 800ac7c:	bd30      	pop	{r4, r5, pc}

0800ac7e <_ZNK8touchgfx3Box12getSolidRectEv>:
 800ac7e:	2300      	movs	r3, #0
 800ac80:	8083      	strh	r3, [r0, #4]
 800ac82:	80c3      	strh	r3, [r0, #6]
 800ac84:	8003      	strh	r3, [r0, #0]
 800ac86:	8043      	strh	r3, [r0, #2]
 800ac88:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800ac8c:	2bff      	cmp	r3, #255	@ 0xff
 800ac8e:	bf01      	itttt	eq
 800ac90:	890b      	ldrheq	r3, [r1, #8]
 800ac92:	8083      	strheq	r3, [r0, #4]
 800ac94:	894b      	ldrheq	r3, [r1, #10]
 800ac96:	80c3      	strheq	r3, [r0, #6]
 800ac98:	4770      	bx	lr
	...

0800ac9c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800ac9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	6808      	ldr	r0, [r1, #0]
 800aca2:	6849      	ldr	r1, [r1, #4]
 800aca4:	466b      	mov	r3, sp
 800aca6:	c303      	stmia	r3!, {r0, r1}
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	4669      	mov	r1, sp
 800acac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acae:	4620      	mov	r0, r4
 800acb0:	4798      	blx	r3
 800acb2:	4b08      	ldr	r3, [pc, #32]	@ (800acd4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800acba:	b10a      	cbz	r2, 800acc0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800acbc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800acbe:	b900      	cbnz	r0, 800acc2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800acc0:	6898      	ldr	r0, [r3, #8]
 800acc2:	6803      	ldr	r3, [r0, #0]
 800acc4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800acc6:	6a1d      	ldr	r5, [r3, #32]
 800acc8:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800accc:	4669      	mov	r1, sp
 800acce:	47a8      	blx	r5
 800acd0:	b003      	add	sp, #12
 800acd2:	bd30      	pop	{r4, r5, pc}
 800acd4:	20015438 	.word	0x20015438

0800acd8 <_ZN8touchgfx3BoxD1Ev>:
 800acd8:	4770      	bx	lr

0800acda <_ZN8touchgfx3BoxD0Ev>:
 800acda:	b510      	push	{r4, lr}
 800acdc:	212c      	movs	r1, #44	@ 0x2c
 800acde:	4604      	mov	r4, r0
 800ace0:	f007 fe9e 	bl	8012a20 <_ZdlPvj>
 800ace4:	4620      	mov	r0, r4
 800ace6:	bd10      	pop	{r4, pc}

0800ace8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800ace8:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800acec:	b12a      	cbz	r2, 800acfa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800acee:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800acf2:	b112      	cbz	r2, 800acfa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800acf4:	6803      	ldr	r3, [r0, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	4718      	bx	r3
 800acfa:	4770      	bx	lr

0800acfc <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800acfc:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800ad00:	4770      	bx	lr

0800ad02 <_ZN8touchgfx6ButtonD1Ev>:
 800ad02:	4770      	bx	lr

0800ad04 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	880b      	ldrh	r3, [r1, #0]
 800ad08:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	8813      	ldrh	r3, [r2, #0]
 800ad0e:	f825 3f30 	strh.w	r3, [r5, #48]!
 800ad12:	4604      	mov	r4, r0
 800ad14:	4628      	mov	r0, r5
 800ad16:	f005 f805 	bl	800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f005 f835 	bl	800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	4605      	mov	r5, r0
 800ad26:	4631      	mov	r1, r6
 800ad28:	4620      	mov	r0, r4
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad2c:	4798      	blx	r3
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	4629      	mov	r1, r5
 800ad32:	4620      	mov	r0, r4
 800ad34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad3a:	4718      	bx	r3

0800ad3c <_ZN8touchgfx6ButtonD0Ev>:
 800ad3c:	b510      	push	{r4, lr}
 800ad3e:	2134      	movs	r1, #52	@ 0x34
 800ad40:	4604      	mov	r4, r0
 800ad42:	f007 fe6d 	bl	8012a20 <_ZdlPvj>
 800ad46:	4620      	mov	r0, r4
 800ad48:	bd10      	pop	{r4, pc}

0800ad4a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800ad50:	b150      	cbz	r0, 800ad68 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ad52:	6803      	ldr	r3, [r0, #0]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	4798      	blx	r3
 800ad58:	b130      	cbz	r0, 800ad68 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ad5a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ad5c:	6803      	ldr	r3, [r0, #0]
 800ad5e:	4621      	mov	r1, r4
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad66:	4718      	bx	r3
 800ad68:	bd10      	pop	{r4, pc}

0800ad6a <_ZNK8touchgfx6Button12getSolidRectEv>:
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800ad70:	2bff      	cmp	r3, #255	@ 0xff
 800ad72:	4604      	mov	r4, r0
 800ad74:	d006      	beq.n	800ad84 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800ad76:	2300      	movs	r3, #0
 800ad78:	8003      	strh	r3, [r0, #0]
 800ad7a:	8043      	strh	r3, [r0, #2]
 800ad7c:	8083      	strh	r3, [r0, #4]
 800ad7e:	80c3      	strh	r3, [r0, #6]
 800ad80:	4620      	mov	r0, r4
 800ad82:	bd10      	pop	{r4, pc}
 800ad84:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800ad88:	b11b      	cbz	r3, 800ad92 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800ad8a:	3130      	adds	r1, #48	@ 0x30
 800ad8c:	f005 f832 	bl	800fdf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ad90:	e7f6      	b.n	800ad80 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800ad92:	312e      	adds	r1, #46	@ 0x2e
 800ad94:	e7fa      	b.n	800ad8c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800ad98 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ada0:	b08a      	sub	sp, #40	@ 0x28
 800ada2:	4604      	mov	r4, r0
 800ada4:	4688      	mov	r8, r1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d066      	beq.n	800ae78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800adaa:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800adac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adb0:	a805      	add	r0, sp, #20
 800adb2:	f004 ffb7 	bl	800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800adb6:	4607      	mov	r7, r0
 800adb8:	a805      	add	r0, sp, #20
 800adba:	f004 ffe7 	bl	800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800adbe:	f9b8 6000 	ldrsh.w	r6, [r8]
 800adc2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800adc6:	4432      	add	r2, r6
 800adc8:	b292      	uxth	r2, r2
 800adca:	2300      	movs	r3, #0
 800adcc:	fa0f fc82 	sxth.w	ip, r2
 800add0:	459c      	cmp	ip, r3
 800add2:	9306      	str	r3, [sp, #24]
 800add4:	dd52      	ble.n	800ae7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800add6:	42b7      	cmp	r7, r6
 800add8:	dd50      	ble.n	800ae7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800adda:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800adde:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ade2:	442b      	add	r3, r5
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	b219      	sxth	r1, r3
 800ade8:	2900      	cmp	r1, #0
 800adea:	dd47      	ble.n	800ae7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800adec:	42a8      	cmp	r0, r5
 800adee:	dd45      	ble.n	800ae7c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800adf0:	4567      	cmp	r7, ip
 800adf2:	bfb8      	it	lt
 800adf4:	b2ba      	uxthlt	r2, r7
 800adf6:	4288      	cmp	r0, r1
 800adf8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800adfc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800ae00:	bfb8      	it	lt
 800ae02:	b283      	uxthlt	r3, r0
 800ae04:	1b92      	subs	r2, r2, r6
 800ae06:	1b5b      	subs	r3, r3, r5
 800ae08:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ae0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ae10:	f8ad 6018 	strh.w	r6, [sp, #24]
 800ae14:	f8ad 501a 	strh.w	r5, [sp, #26]
 800ae18:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ae1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d026      	beq.n	800ae72 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800ae24:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	dd22      	ble.n	800ae72 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800ae2c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	dd1e      	ble.n	800ae72 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800ae34:	2300      	movs	r3, #0
 800ae36:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	a908      	add	r1, sp, #32
 800ae3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae40:	4620      	mov	r0, r4
 800ae42:	4798      	blx	r3
 800ae44:	4b0f      	ldr	r3, [pc, #60]	@ (800ae84 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ae4c:	b10a      	cbz	r2, 800ae52 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800ae4e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ae50:	b900      	cbnz	r0, 800ae54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800ae52:	6898      	ldr	r0, [r3, #8]
 800ae54:	6801      	ldr	r1, [r0, #0]
 800ae56:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800ae5a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800ae5e:	2501      	movs	r5, #1
 800ae60:	9502      	str	r5, [sp, #8]
 800ae62:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800ae66:	9401      	str	r4, [sp, #4]
 800ae68:	ac06      	add	r4, sp, #24
 800ae6a:	9400      	str	r4, [sp, #0]
 800ae6c:	688c      	ldr	r4, [r1, #8]
 800ae6e:	a905      	add	r1, sp, #20
 800ae70:	47a0      	blx	r4
 800ae72:	b00a      	add	sp, #40	@ 0x28
 800ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae78:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800ae7a:	e797      	b.n	800adac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9307      	str	r3, [sp, #28]
 800ae80:	e7ca      	b.n	800ae18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800ae82:	bf00      	nop
 800ae84:	20015438 	.word	0x20015438

0800ae88 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800ae88:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800ae8c:	b12a      	cbz	r2, 800ae9a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800ae8e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800ae92:	b112      	cbz	r2, 800ae9a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800ae94:	6803      	ldr	r3, [r0, #0]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	4718      	bx	r3
 800ae9a:	4770      	bx	lr

0800ae9c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800ae9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aea0:	4b2f      	ldr	r3, [pc, #188]	@ (800af60 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800aea2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	4293      	cmp	r3, r2
 800aea8:	b08d      	sub	sp, #52	@ 0x34
 800aeaa:	4604      	mov	r4, r0
 800aeac:	460f      	mov	r7, r1
 800aeae:	d954      	bls.n	800af5a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800aeb0:	4b2c      	ldr	r3, [pc, #176]	@ (800af64 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800aeb2:	6819      	ldr	r1, [r3, #0]
 800aeb4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800aeb8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800aebc:	4a2a      	ldr	r2, [pc, #168]	@ (800af68 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800aebe:	6812      	ldr	r2, [r2, #0]
 800aec0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800aec4:	2900      	cmp	r1, #0
 800aec6:	d048      	beq.n	800af5a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800aec8:	785a      	ldrb	r2, [r3, #1]
 800aeca:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800aece:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800aed2:	4b26      	ldr	r3, [pc, #152]	@ (800af6c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800aed4:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800aed8:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800aedc:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800aee0:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800aee2:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800aee6:	9107      	str	r1, [sp, #28]
 800aee8:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800aeec:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800aef0:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	f88d 8020 	strb.w	r8, [sp, #32]
 800aefa:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800aefe:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800af02:	9609      	str	r6, [sp, #36]	@ 0x24
 800af04:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800af08:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800af0c:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800af10:	b10b      	cbz	r3, 800af16 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800af12:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800af14:	b905      	cbnz	r5, 800af18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800af16:	6895      	ldr	r5, [r2, #8]
 800af18:	ae05      	add	r6, sp, #20
 800af1a:	4621      	mov	r1, r4
 800af1c:	4630      	mov	r0, r6
 800af1e:	f002 ff5b 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800af22:	4b13      	ldr	r3, [pc, #76]	@ (800af70 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800af24:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	f7f8 fe76 	bl	8003c18 <_ZNK8touchgfx5Texts7getTextEt>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	4680      	mov	r8, r0
 800af30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af32:	4620      	mov	r0, r4
 800af34:	4798      	blx	r3
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	4681      	mov	r9, r0
 800af3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af3e:	4620      	mov	r0, r4
 800af40:	4798      	blx	r3
 800af42:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800af46:	ab07      	add	r3, sp, #28
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	f8cd 8004 	str.w	r8, [sp, #4]
 800af4e:	463b      	mov	r3, r7
 800af50:	e896 0006 	ldmia.w	r6, {r1, r2}
 800af54:	4628      	mov	r0, r5
 800af56:	f7f8 fe11 	bl	8003b7c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800af5a:	b00d      	add	sp, #52	@ 0x34
 800af5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af60:	2001548c 	.word	0x2001548c
 800af64:	20015488 	.word	0x20015488
 800af68:	20015490 	.word	0x20015490
 800af6c:	20015438 	.word	0x20015438
 800af70:	20015494 	.word	0x20015494

0800af74 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 800af74:	4770      	bx	lr

0800af76 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800af76:	b510      	push	{r4, lr}
 800af78:	2134      	movs	r1, #52	@ 0x34
 800af7a:	4604      	mov	r4, r0
 800af7c:	f007 fd50 	bl	8012a20 <_ZdlPvj>
 800af80:	4620      	mov	r0, r4
 800af82:	bd10      	pop	{r4, pc}

0800af84 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af88:	4604      	mov	r4, r0
 800af8a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800af8c:	8962      	ldrh	r2, [r4, #10]
 800af8e:	b218      	sxth	r0, r3
 800af90:	460e      	mov	r6, r1
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	8921      	ldrh	r1, [r4, #8]
 800af96:	b29b      	uxth	r3, r3
 800af98:	1ac9      	subs	r1, r1, r3
 800af9a:	b08e      	sub	sp, #56	@ 0x38
 800af9c:	b209      	sxth	r1, r1
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	b21b      	sxth	r3, r3
 800afa2:	2900      	cmp	r1, #0
 800afa4:	f8ad 0000 	strh.w	r0, [sp]
 800afa8:	f8ad 0002 	strh.w	r0, [sp, #2]
 800afac:	f8ad 1004 	strh.w	r1, [sp, #4]
 800afb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800afb4:	dd5e      	ble.n	800b074 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	dd5c      	ble.n	800b074 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800afba:	6830      	ldr	r0, [r6, #0]
 800afbc:	6871      	ldr	r1, [r6, #4]
 800afbe:	ab02      	add	r3, sp, #8
 800afc0:	c303      	stmia	r3!, {r0, r1}
 800afc2:	4669      	mov	r1, sp
 800afc4:	a802      	add	r0, sp, #8
 800afc6:	f7fe fab7 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800afca:	4620      	mov	r0, r4
 800afcc:	a902      	add	r1, sp, #8
 800afce:	f7ff fe65 	bl	800ac9c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800afd2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d05f      	beq.n	800b098 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800afd8:	8963      	ldrh	r3, [r4, #10]
 800afda:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800afde:	f8ad 101c 	strh.w	r1, [sp, #28]
 800afe2:	1a1f      	subs	r7, r3, r0
 800afe4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800afe8:	b202      	sxth	r2, r0
 800afea:	2500      	movs	r5, #0
 800afec:	b21b      	sxth	r3, r3
 800afee:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 800aff2:	1a09      	subs	r1, r1, r0
 800aff4:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800aff8:	9506      	str	r5, [sp, #24]
 800affa:	f8ad 201e 	strh.w	r2, [sp, #30]
 800affe:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b002:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 800b006:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 800b00a:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800b00e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800b012:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800b016:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 800b01a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800b01e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800b022:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800b026:	af04      	add	r7, sp, #16
 800b028:	ab06      	add	r3, sp, #24
 800b02a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b02e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b032:	e887 0003 	stmia.w	r7, {r0, r1}
 800b036:	4631      	mov	r1, r6
 800b038:	4638      	mov	r0, r7
 800b03a:	f7fe fa7d 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800b03e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800b042:	2b00      	cmp	r3, #0
 800b044:	dd12      	ble.n	800b06c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800b046:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	dd0e      	ble.n	800b06c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	4639      	mov	r1, r7
 800b052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b054:	4620      	mov	r0, r4
 800b056:	4798      	blx	r3
 800b058:	f7fe fd44 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 800b05c:	6803      	ldr	r3, [r0, #0]
 800b05e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b060:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800b064:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b068:	4639      	mov	r1, r7
 800b06a:	47c0      	blx	r8
 800b06c:	3501      	adds	r5, #1
 800b06e:	2d04      	cmp	r5, #4
 800b070:	d1da      	bne.n	800b028 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800b072:	e011      	b.n	800b098 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800b074:	6830      	ldr	r0, [r6, #0]
 800b076:	6871      	ldr	r1, [r6, #4]
 800b078:	ab06      	add	r3, sp, #24
 800b07a:	c303      	stmia	r3!, {r0, r1}
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	a906      	add	r1, sp, #24
 800b080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b082:	4620      	mov	r0, r4
 800b084:	4798      	blx	r3
 800b086:	f7fe fd2d 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 800b08a:	6803      	ldr	r3, [r0, #0]
 800b08c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b08e:	6a1d      	ldr	r5, [r3, #32]
 800b090:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b094:	a906      	add	r1, sp, #24
 800b096:	47a8      	blx	r5
 800b098:	b00e      	add	sp, #56	@ 0x38
 800b09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b09e <_ZN8touchgfx5ImageD1Ev>:
 800b09e:	4770      	bx	lr

0800b0a0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	880b      	ldrh	r3, [r1, #0]
 800b0a4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	f004 fe3a 	bl	800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f004 fe6a 	bl	800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	4605      	mov	r5, r0
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4620      	mov	r0, r4
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c2:	4798      	blx	r3
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0d0:	4718      	bx	r3

0800b0d2 <_ZN8touchgfx5ImageD0Ev>:
 800b0d2:	b510      	push	{r4, lr}
 800b0d4:	212c      	movs	r1, #44	@ 0x2c
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	f007 fca2 	bl	8012a20 <_ZdlPvj>
 800b0dc:	4620      	mov	r0, r4
 800b0de:	bd10      	pop	{r4, pc}

0800b0e0 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800b0e0:	b510      	push	{r4, lr}
 800b0e2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800b0e6:	2bff      	cmp	r3, #255	@ 0xff
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	d006      	beq.n	800b0fa <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	8003      	strh	r3, [r0, #0]
 800b0f0:	8043      	strh	r3, [r0, #2]
 800b0f2:	8083      	strh	r3, [r0, #4]
 800b0f4:	80c3      	strh	r3, [r0, #6]
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	bd10      	pop	{r4, pc}
 800b0fa:	3126      	adds	r1, #38	@ 0x26
 800b0fc:	f004 fe7a 	bl	800fdf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b100:	e7f9      	b.n	800b0f6 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800b102 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800b102:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800b106:	b12a      	cbz	r2, 800b114 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800b108:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800b10c:	b112      	cbz	r2, 800b114 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800b10e:	6803      	ldr	r3, [r0, #0]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	4718      	bx	r3
 800b114:	4770      	bx	lr
	...

0800b118 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	4604      	mov	r4, r0
 800b11e:	b088      	sub	sp, #32
 800b120:	f854 3b26 	ldr.w	r3, [r4], #38
 800b124:	2500      	movs	r5, #0
 800b126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b128:	460f      	mov	r7, r1
 800b12a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b12e:	a904      	add	r1, sp, #16
 800b130:	4606      	mov	r6, r0
 800b132:	4798      	blx	r3
 800b134:	4620      	mov	r0, r4
 800b136:	f004 fdf5 	bl	800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b13a:	4680      	mov	r8, r0
 800b13c:	4620      	mov	r0, r4
 800b13e:	f004 fe25 	bl	800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b142:	9506      	str	r5, [sp, #24]
 800b144:	ad06      	add	r5, sp, #24
 800b146:	f8ad 001e 	strh.w	r0, [sp, #30]
 800b14a:	4639      	mov	r1, r7
 800b14c:	4628      	mov	r0, r5
 800b14e:	f8ad 801c 	strh.w	r8, [sp, #28]
 800b152:	f7fe f9f1 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800b156:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dd19      	ble.n	800b192 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b15e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800b162:	2b00      	cmp	r3, #0
 800b164:	dd15      	ble.n	800b192 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b166:	4b0c      	ldr	r3, [pc, #48]	@ (800b198 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b16e:	b10a      	cbz	r2, 800b174 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800b170:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b172:	b900      	cbnz	r0, 800b176 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800b174:	6898      	ldr	r0, [r3, #8]
 800b176:	6801      	ldr	r1, [r0, #0]
 800b178:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800b17c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800b180:	2701      	movs	r7, #1
 800b182:	9702      	str	r7, [sp, #8]
 800b184:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800b188:	e9cd 5600 	strd	r5, r6, [sp]
 800b18c:	688d      	ldr	r5, [r1, #8]
 800b18e:	4621      	mov	r1, r4
 800b190:	47a8      	blx	r5
 800b192:	b008      	add	sp, #32
 800b194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b198:	20015438 	.word	0x20015438

0800b19c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	6803      	ldr	r3, [r0, #0]
 800b1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	4798      	blx	r3
 800b1a6:	1b03      	subs	r3, r0, r4
 800b1a8:	4258      	negs	r0, r3
 800b1aa:	4158      	adcs	r0, r3
 800b1ac:	bd10      	pop	{r4, pc}
	...

0800b1b0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800b1b0:	4b01      	ldr	r3, [pc, #4]	@ (800b1b8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800b1b2:	6019      	str	r1, [r3, #0]
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	20015440 	.word	0x20015440

0800b1bc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	4696      	mov	lr, r2
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	460e      	mov	r6, r1
 800b1c8:	461f      	mov	r7, r3
 800b1ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b1ce:	b097      	sub	sp, #92	@ 0x5c
 800b1d0:	f10d 0c1c 	add.w	ip, sp, #28
 800b1d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b1d8:	f8de 3000 	ldr.w	r3, [lr]
 800b1dc:	f8cc 3000 	str.w	r3, [ip]
 800b1e0:	f104 0e14 	add.w	lr, r4, #20
 800b1e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b1e8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b1ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b1f0:	f8de 3000 	ldr.w	r3, [lr]
 800b1f4:	f8cc 3000 	str.w	r3, [ip]
 800b1f8:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b1fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b200:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b204:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b208:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800b20c:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800b210:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800b214:	f8de 3000 	ldr.w	r3, [lr]
 800b218:	f8cc 3000 	str.w	r3, [ip]
 800b21c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b21e:	682b      	ldr	r3, [r5, #0]
 800b220:	9201      	str	r2, [sp, #4]
 800b222:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b226:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b228:	9200      	str	r2, [sp, #0]
 800b22a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b22e:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800b232:	aa07      	add	r2, sp, #28
 800b234:	463b      	mov	r3, r7
 800b236:	4631      	mov	r1, r6
 800b238:	4628      	mov	r0, r5
 800b23a:	47d8      	blx	fp
 800b23c:	46a6      	mov	lr, r4
 800b23e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b242:	f10d 0c1c 	add.w	ip, sp, #28
 800b246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b24a:	f8de 3000 	ldr.w	r3, [lr]
 800b24e:	f8cc 3000 	str.w	r3, [ip]
 800b252:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b256:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b25a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b25e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b262:	343c      	adds	r4, #60	@ 0x3c
 800b264:	f8de 3000 	ldr.w	r3, [lr]
 800b268:	f8cc 3000 	str.w	r3, [ip]
 800b26c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b26e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b272:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	f8cc 3000 	str.w	r3, [ip]
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b282:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b284:	9201      	str	r2, [sp, #4]
 800b286:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b288:	9200      	str	r2, [sp, #0]
 800b28a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b28e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800b290:	aa07      	add	r2, sp, #28
 800b292:	463b      	mov	r3, r7
 800b294:	4631      	mov	r1, r6
 800b296:	4628      	mov	r0, r5
 800b298:	47a0      	blx	r4
 800b29a:	b017      	add	sp, #92	@ 0x5c
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	b08d      	sub	sp, #52	@ 0x34
 800b2a6:	4688      	mov	r8, r1
 800b2a8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b2aa:	f8d3 c000 	ldr.w	ip, [r3]
 800b2ae:	680f      	ldr	r7, [r1, #0]
 800b2b0:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800b2b4:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800b2b8:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800b2bc:	edd3 6a07 	vldr	s13, [r3, #28]
 800b2c0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b2c2:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800b2c6:	f9b1 9000 	ldrsh.w	r9, [r1]
 800b2ca:	f9ba 1000 	ldrsh.w	r1, [sl]
 800b2ce:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800b2d2:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800b2d6:	eba7 070c 	sub.w	r7, r7, ip
 800b2da:	42bc      	cmp	r4, r7
 800b2dc:	bfa8      	it	ge
 800b2de:	463c      	movge	r4, r7
 800b2e0:	ee07 4a90 	vmov	s15, r4
 800b2e4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800b2e8:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800b2ec:	ee25 4a04 	vmul.f32	s8, s10, s8
 800b2f0:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b2f4:	ee25 5a27 	vmul.f32	s10, s10, s15
 800b2f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b2fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b300:	eb09 0e0c 	add.w	lr, r9, ip
 800b304:	4571      	cmp	r1, lr
 800b306:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800b30a:	ee32 1a05 	vadd.f32	s2, s4, s10
 800b30e:	ee36 0a84 	vadd.f32	s0, s13, s8
 800b312:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b316:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b31a:	f340 808d 	ble.w	800b438 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800b31e:	eba1 060e 	sub.w	r6, r1, lr
 800b322:	fb96 f5f4 	sdiv	r5, r6, r4
 800b326:	ee07 5a10 	vmov	s14, r5
 800b32a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b32e:	2d00      	cmp	r5, #0
 800b330:	fb04 6615 	mls	r6, r4, r5, r6
 800b334:	eea7 0a04 	vfma.f32	s0, s14, s8
 800b338:	eee7 0a24 	vfma.f32	s1, s14, s9
 800b33c:	eea7 1a05 	vfma.f32	s2, s14, s10
 800b340:	dd13      	ble.n	800b36a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800b342:	ee70 6a44 	vsub.f32	s13, s0, s8
 800b346:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800b34a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b352:	bf18      	it	ne
 800b354:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800b358:	ee31 2a45 	vsub.f32	s4, s2, s10
 800b35c:	bf08      	it	eq
 800b35e:	eeb0 7a67 	vmoveq.f32	s14, s15
 800b362:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b366:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b36a:	fb05 f204 	mul.w	r2, r5, r4
 800b36e:	1abf      	subs	r7, r7, r2
 800b370:	4494      	add	ip, r2
 800b372:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800b376:	4411      	add	r1, r2
 800b378:	eb09 020c 	add.w	r2, r9, ip
 800b37c:	443a      	add	r2, r7
 800b37e:	b209      	sxth	r1, r1
 800b380:	428a      	cmp	r2, r1
 800b382:	bfc4      	itt	gt
 800b384:	eba1 0209 	subgt.w	r2, r1, r9
 800b388:	eba2 070c 	subgt.w	r7, r2, ip
 800b38c:	2f00      	cmp	r7, #0
 800b38e:	dd50      	ble.n	800b432 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800b390:	fb97 f1f4 	sdiv	r1, r7, r4
 800b394:	fb04 7211 	mls	r2, r4, r1, r7
 800b398:	b90a      	cbnz	r2, 800b39e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800b39a:	3901      	subs	r1, #1
 800b39c:	4622      	mov	r2, r4
 800b39e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800b3a2:	6840      	ldr	r0, [r0, #4]
 800b3a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b3a6:	f8d0 a000 	ldr.w	sl, [r0]
 800b3aa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b3ac:	9008      	str	r0, [sp, #32]
 800b3ae:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800b3b2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b3b4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b3b8:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b3c0:	445b      	add	r3, fp
 800b3c2:	eef0 6a42 	vmov.f32	s13, s4
 800b3c6:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800b3ca:	ee21 3a23 	vmul.f32	s6, s2, s7
 800b3ce:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800b3d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800b3d6:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b3da:	9307      	str	r3, [sp, #28]
 800b3dc:	ee17 7a90 	vmov	r7, s15
 800b3e0:	ee73 7a42 	vsub.f32	s15, s6, s4
 800b3e4:	eeb0 7a61 	vmov.f32	s14, s3
 800b3e8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b3ec:	ee16 3a90 	vmov	r3, s13
 800b3f0:	fb97 f7f4 	sdiv	r7, r7, r4
 800b3f4:	ee17 ca90 	vmov	ip, s15
 800b3f8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800b3fc:	fb9c fcf4 	sdiv	ip, ip, r4
 800b400:	fb0c 3306 	mla	r3, ip, r6, r3
 800b404:	9302      	str	r3, [sp, #8]
 800b406:	ee17 3a10 	vmov	r3, s14
 800b40a:	44b6      	add	lr, r6
 800b40c:	fb04 e505 	mla	r5, r4, r5, lr
 800b410:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800b414:	fb07 3706 	mla	r7, r7, r6, r3
 800b418:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800b41c:	e9cd 4700 	strd	r4, r7, [sp]
 800b420:	2900      	cmp	r1, #0
 800b422:	bfcc      	ite	gt
 800b424:	46a1      	movgt	r9, r4
 800b426:	4691      	movle	r9, r2
 800b428:	eba9 0306 	sub.w	r3, r9, r6
 800b42c:	f8da 4008 	ldr.w	r4, [sl, #8]
 800b430:	47a0      	blx	r4
 800b432:	b00d      	add	sp, #52	@ 0x34
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	2500      	movs	r5, #0
 800b43a:	462e      	mov	r6, r5
 800b43c:	e799      	b.n	800b372 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800b440 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	b0db      	sub	sp, #364	@ 0x16c
 800b446:	461d      	mov	r5, r3
 800b448:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800b44c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b44e:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800b452:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b454:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800b458:	9310      	str	r3, [sp, #64]	@ 0x40
 800b45a:	6803      	ldr	r3, [r0, #0]
 800b45c:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b45e:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800b460:	9009      	str	r0, [sp, #36]	@ 0x24
 800b462:	4614      	mov	r4, r2
 800b464:	4629      	mov	r1, r5
 800b466:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b46a:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800b46e:	47b8      	blx	r7
 800b470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b472:	6058      	str	r0, [r3, #4]
 800b474:	2800      	cmp	r0, #0
 800b476:	f000 83a1 	beq.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b47a:	682b      	ldr	r3, [r5, #0]
 800b47c:	9314      	str	r3, [sp, #80]	@ 0x50
 800b47e:	686b      	ldr	r3, [r5, #4]
 800b480:	9315      	str	r3, [sp, #84]	@ 0x54
 800b482:	4bc4      	ldr	r3, [pc, #784]	@ (800b794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800b484:	ed94 7a02 	vldr	s14, [r4, #8]
 800b488:	7819      	ldrb	r1, [r3, #0]
 800b48a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b48e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800b492:	2900      	cmp	r1, #0
 800b494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b498:	bf16      	itet	ne
 800b49a:	4619      	movne	r1, r3
 800b49c:	4611      	moveq	r1, r2
 800b49e:	4613      	movne	r3, r2
 800b4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a4:	9116      	str	r1, [sp, #88]	@ 0x58
 800b4a6:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800b4aa:	f240 8387 	bls.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b4ae:	ed94 7a07 	vldr	s14, [r4, #28]
 800b4b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ba:	f240 837f 	bls.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b4be:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800b4c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	f240 8377 	bls.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b4ce:	6822      	ldr	r2, [r4, #0]
 800b4d0:	4bb1      	ldr	r3, [pc, #708]	@ (800b798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	f2c0 8372 	blt.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b4d8:	49b0      	ldr	r1, [pc, #704]	@ (800b79c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800b4da:	6963      	ldr	r3, [r4, #20]
 800b4dc:	428a      	cmp	r2, r1
 800b4de:	f300 836d 	bgt.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b4e2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b4e6:	48ae      	ldr	r0, [pc, #696]	@ (800b7a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800b4e8:	33ff      	adds	r3, #255	@ 0xff
 800b4ea:	4283      	cmp	r3, r0
 800b4ec:	f200 8366 	bhi.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b4f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b4f2:	4dac      	ldr	r5, [pc, #688]	@ (800b7a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800b4f4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b4f8:	33ff      	adds	r3, #255	@ 0xff
 800b4fa:	42ab      	cmp	r3, r5
 800b4fc:	f200 835e 	bhi.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b500:	6862      	ldr	r2, [r4, #4]
 800b502:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800b506:	33ff      	adds	r3, #255	@ 0xff
 800b508:	4283      	cmp	r3, r0
 800b50a:	f200 8357 	bhi.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b50e:	69a1      	ldr	r1, [r4, #24]
 800b510:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800b514:	33ff      	adds	r3, #255	@ 0xff
 800b516:	4283      	cmp	r3, r0
 800b518:	f200 8350 	bhi.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b51c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b51e:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800b522:	30ff      	adds	r0, #255	@ 0xff
 800b524:	42a8      	cmp	r0, r5
 800b526:	f200 8349 	bhi.w	800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b52a:	428a      	cmp	r2, r1
 800b52c:	f280 8110 	bge.w	800b750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800b530:	429a      	cmp	r2, r3
 800b532:	f300 8119 	bgt.w	800b768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800b536:	4299      	cmp	r1, r3
 800b538:	f280 811d 	bge.w	800b776 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800b53c:	2502      	movs	r5, #2
 800b53e:	2701      	movs	r7, #1
 800b540:	46a9      	mov	r9, r5
 800b542:	46b8      	mov	r8, r7
 800b544:	f04f 0a00 	mov.w	sl, #0
 800b548:	4621      	mov	r1, r4
 800b54a:	a849      	add	r0, sp, #292	@ 0x124
 800b54c:	f003 fda6 	bl	800f09c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800b550:	4622      	mov	r2, r4
 800b552:	4653      	mov	r3, sl
 800b554:	a949      	add	r1, sp, #292	@ 0x124
 800b556:	f8cd 9000 	str.w	r9, [sp]
 800b55a:	a819      	add	r0, sp, #100	@ 0x64
 800b55c:	f003 fece 	bl	800f2fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b560:	4622      	mov	r2, r4
 800b562:	4653      	mov	r3, sl
 800b564:	a949      	add	r1, sp, #292	@ 0x124
 800b566:	f8cd 8000 	str.w	r8, [sp]
 800b56a:	a829      	add	r0, sp, #164	@ 0xa4
 800b56c:	f003 fec6 	bl	800f2fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b570:	4643      	mov	r3, r8
 800b572:	4622      	mov	r2, r4
 800b574:	a949      	add	r1, sp, #292	@ 0x124
 800b576:	f8cd 9000 	str.w	r9, [sp]
 800b57a:	a839      	add	r0, sp, #228	@ 0xe4
 800b57c:	f003 febe 	bl	800f2fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b580:	42af      	cmp	r7, r5
 800b582:	bfb5      	itete	lt
 800b584:	2300      	movlt	r3, #0
 800b586:	2301      	movge	r3, #1
 800b588:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800b58a:	930e      	strge	r3, [sp, #56]	@ 0x38
 800b58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b58e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b592:	af12      	add	r7, sp, #72	@ 0x48
 800b594:	bfb9      	ittee	lt
 800b596:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800b598:	ac19      	addlt	r4, sp, #100	@ 0x64
 800b59a:	ad19      	addge	r5, sp, #100	@ 0x64
 800b59c:	ac29      	addge	r4, sp, #164	@ 0xa4
 800b59e:	e887 0003 	stmia.w	r7, {r0, r1}
 800b5a2:	b928      	cbnz	r0, 800b5b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800b5a4:	4b80      	ldr	r3, [pc, #512]	@ (800b7a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800b5a6:	6818      	ldr	r0, [r3, #0]
 800b5a8:	6803      	ldr	r3, [r0, #0]
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ac:	4798      	blx	r3
 800b5ae:	6038      	str	r0, [r7, #0]
 800b5b0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b5b2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b5b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b5ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b5be:	6963      	ldr	r3, [r4, #20]
 800b5c0:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800b5c2:	440b      	add	r3, r1
 800b5c4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b5c8:	4408      	add	r0, r1
 800b5ca:	b200      	sxth	r0, r0
 800b5cc:	4283      	cmp	r3, r0
 800b5ce:	900d      	str	r0, [sp, #52]	@ 0x34
 800b5d0:	f280 80dd 	bge.w	800b78e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800b5d4:	428b      	cmp	r3, r1
 800b5d6:	da08      	bge.n	800b5ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b5d8:	2a00      	cmp	r2, #0
 800b5da:	dd06      	ble.n	800b5ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b5dc:	1acb      	subs	r3, r1, r3
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	f2c0 80e4 	blt.w	800b7ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f300 80e2 	bgt.w	800b7ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800b5ea:	6967      	ldr	r7, [r4, #20]
 800b5ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5ee:	443b      	add	r3, r7
 800b5f0:	461f      	mov	r7, r3
 800b5f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5f4:	1bdf      	subs	r7, r3, r7
 800b5f6:	4297      	cmp	r7, r2
 800b5f8:	bfa8      	it	ge
 800b5fa:	4617      	movge	r7, r2
 800b5fc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800b600:	2f00      	cmp	r7, #0
 800b602:	f340 8166 	ble.w	800b8d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800b606:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b608:	6829      	ldr	r1, [r5, #0]
 800b60a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b60e:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b612:	6820      	ldr	r0, [r4, #0]
 800b614:	4411      	add	r1, r2
 800b616:	4299      	cmp	r1, r3
 800b618:	dd1a      	ble.n	800b650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800b61a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b61e:	440b      	add	r3, r1
 800b620:	4402      	add	r2, r0
 800b622:	b21b      	sxth	r3, r3
 800b624:	429a      	cmp	r2, r3
 800b626:	dc13      	bgt.n	800b650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800b628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	9206      	str	r2, [sp, #24]
 800b630:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b632:	9205      	str	r2, [sp, #20]
 800b634:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b636:	9500      	str	r5, [sp, #0]
 800b638:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b63c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800b63e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b640:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b644:	a912      	add	r1, sp, #72	@ 0x48
 800b646:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800b64a:	aa49      	add	r2, sp, #292	@ 0x124
 800b64c:	4623      	mov	r3, r4
 800b64e:	47c8      	blx	r9
 800b650:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b654:	441a      	add	r2, r3
 800b656:	6963      	ldr	r3, [r4, #20]
 800b658:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800b65c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800b660:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800b664:	68a1      	ldr	r1, [r4, #8]
 800b666:	ed94 6a08 	vldr	s12, [r4, #32]
 800b66a:	6022      	str	r2, [r4, #0]
 800b66c:	3301      	adds	r3, #1
 800b66e:	6163      	str	r3, [r4, #20]
 800b670:	69a3      	ldr	r3, [r4, #24]
 800b672:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b676:	3b01      	subs	r3, #1
 800b678:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800b67c:	61a3      	str	r3, [r4, #24]
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b688:	edd4 6a07 	vldr	s13, [r4, #28]
 800b68c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b690:	440b      	add	r3, r1
 800b692:	68e1      	ldr	r1, [r4, #12]
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b69a:	428b      	cmp	r3, r1
 800b69c:	edc4 6a07 	vstr	s13, [r4, #28]
 800b6a0:	db15      	blt.n	800b6ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800b6a2:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800b6a6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b6aa:	3201      	adds	r2, #1
 800b6ac:	edc4 6a07 	vstr	s13, [r4, #28]
 800b6b0:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b6b4:	6022      	str	r2, [r4, #0]
 800b6b6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b6ba:	1a5b      	subs	r3, r3, r1
 800b6bc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b6c0:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800b6c4:	6123      	str	r3, [r4, #16]
 800b6c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6ca:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b6ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6d2:	441a      	add	r2, r3
 800b6d4:	696b      	ldr	r3, [r5, #20]
 800b6d6:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800b6da:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800b6de:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800b6e2:	68a9      	ldr	r1, [r5, #8]
 800b6e4:	ed95 6a08 	vldr	s12, [r5, #32]
 800b6e8:	602a      	str	r2, [r5, #0]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	616b      	str	r3, [r5, #20]
 800b6ee:	69ab      	ldr	r3, [r5, #24]
 800b6f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800b6fa:	61ab      	str	r3, [r5, #24]
 800b6fc:	692b      	ldr	r3, [r5, #16]
 800b6fe:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b706:	edd5 6a07 	vldr	s13, [r5, #28]
 800b70a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b70e:	440b      	add	r3, r1
 800b710:	68e9      	ldr	r1, [r5, #12]
 800b712:	612b      	str	r3, [r5, #16]
 800b714:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b718:	428b      	cmp	r3, r1
 800b71a:	edc5 6a07 	vstr	s13, [r5, #28]
 800b71e:	db15      	blt.n	800b74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800b720:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b724:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b728:	3201      	adds	r2, #1
 800b72a:	edc5 6a07 	vstr	s13, [r5, #28]
 800b72e:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b732:	602a      	str	r2, [r5, #0]
 800b734:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b738:	1a5b      	subs	r3, r3, r1
 800b73a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b73e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b742:	612b      	str	r3, [r5, #16]
 800b744:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b748:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b74c:	3f01      	subs	r7, #1
 800b74e:	e757      	b.n	800b600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800b750:	4299      	cmp	r1, r3
 800b752:	dc13      	bgt.n	800b77c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800b754:	429a      	cmp	r2, r3
 800b756:	da14      	bge.n	800b782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800b758:	2502      	movs	r5, #2
 800b75a:	2703      	movs	r7, #3
 800b75c:	46a9      	mov	r9, r5
 800b75e:	f04f 0800 	mov.w	r8, #0
 800b762:	f04f 0a01 	mov.w	sl, #1
 800b766:	e6ef      	b.n	800b548 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b768:	2501      	movs	r5, #1
 800b76a:	2700      	movs	r7, #0
 800b76c:	46a9      	mov	r9, r5
 800b76e:	46b8      	mov	r8, r7
 800b770:	f04f 0a02 	mov.w	sl, #2
 800b774:	e6e8      	b.n	800b548 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b776:	2501      	movs	r5, #1
 800b778:	2702      	movs	r7, #2
 800b77a:	e6e1      	b.n	800b540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800b77c:	2500      	movs	r5, #0
 800b77e:	2701      	movs	r7, #1
 800b780:	e7f4      	b.n	800b76c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800b782:	2702      	movs	r7, #2
 800b784:	2503      	movs	r5, #3
 800b786:	f04f 0900 	mov.w	r9, #0
 800b78a:	46b8      	mov	r8, r7
 800b78c:	e7e9      	b.n	800b762 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800b78e:	4613      	mov	r3, r2
 800b790:	e728      	b.n	800b5e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800b792:	bf00      	nop
 800b794:	20015430 	.word	0x20015430
 800b798:	fffd8f01 	.word	0xfffd8f01
 800b79c:	00027100 	.word	0x00027100
 800b7a0:	0004e1ff 	.word	0x0004e1ff
 800b7a4:	0004e1fe 	.word	0x0004e1fe
 800b7a8:	20015438 	.word	0x20015438
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800b7b0:	9111      	str	r1, [sp, #68]	@ 0x44
 800b7b2:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800b7b6:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800b7ba:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800b7bc:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800b7c0:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800b7c4:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800b7c8:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800b7cc:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800b7d0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b7d4:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800b7d8:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800b7dc:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800b7e0:	469e      	mov	lr, r3
 800b7e2:	469c      	mov	ip, r3
 800b7e4:	f04f 0900 	mov.w	r9, #0
 800b7e8:	f1bc 0f00 	cmp.w	ip, #0
 800b7ec:	d147      	bne.n	800b87e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800b7ee:	eb03 0c07 	add.w	ip, r3, r7
 800b7f2:	1ad7      	subs	r7, r2, r3
 800b7f4:	f1b9 0f00 	cmp.w	r9, #0
 800b7f8:	d009      	beq.n	800b80e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800b7fa:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800b7fe:	9029      	str	r0, [sp, #164]	@ 0xa4
 800b800:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800b804:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800b808:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800b80c:	912d      	str	r1, [sp, #180]	@ 0xb4
 800b80e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b810:	9111      	str	r1, [sp, #68]	@ 0x44
 800b812:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b816:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b81a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b81e:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b822:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b826:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b82a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b82e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b832:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b836:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b83a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b83e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b842:	f04f 0800 	mov.w	r8, #0
 800b846:	f1be 0f00 	cmp.w	lr, #0
 800b84a:	d031      	beq.n	800b8b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800b84c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b84e:	4431      	add	r1, r6
 800b850:	4549      	cmp	r1, r9
 800b852:	4450      	add	r0, sl
 800b854:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b858:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b85c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b860:	db08      	blt.n	800b874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800b862:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b866:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b86a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b86e:	3001      	adds	r0, #1
 800b870:	eba1 0109 	sub.w	r1, r1, r9
 800b874:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b878:	f04f 0801 	mov.w	r8, #1
 800b87c:	e7e3      	b.n	800b846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800b87e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b880:	4431      	add	r1, r6
 800b882:	4541      	cmp	r1, r8
 800b884:	4450      	add	r0, sl
 800b886:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b88a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b88e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b892:	db08      	blt.n	800b8a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800b894:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b898:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b89c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	eba1 0108 	sub.w	r1, r1, r8
 800b8a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b8aa:	f04f 0901 	mov.w	r9, #1
 800b8ae:	e79b      	b.n	800b7e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800b8b0:	449c      	add	ip, r3
 800b8b2:	1aff      	subs	r7, r7, r3
 800b8b4:	f1b8 0f00 	cmp.w	r8, #0
 800b8b8:	d009      	beq.n	800b8ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800b8ba:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800b8be:	9019      	str	r0, [sp, #100]	@ 0x64
 800b8c0:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800b8c4:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800b8c8:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800b8cc:	911d      	str	r1, [sp, #116]	@ 0x74
 800b8ce:	1ad2      	subs	r2, r2, r3
 800b8d0:	e68b      	b.n	800b5ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b8d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8d4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 80d1 	beq.w	800ba7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800b8dc:	ad19      	add	r5, sp, #100	@ 0x64
 800b8de:	ac39      	add	r4, sp, #228	@ 0xe4
 800b8e0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b8e2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b8e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b8ea:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b8ee:	6963      	ldr	r3, [r4, #20]
 800b8f0:	440b      	add	r3, r1
 800b8f2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b8f6:	4408      	add	r0, r1
 800b8f8:	b200      	sxth	r0, r0
 800b8fa:	4283      	cmp	r3, r0
 800b8fc:	900d      	str	r0, [sp, #52]	@ 0x34
 800b8fe:	f280 80c1 	bge.w	800ba84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800b902:	428b      	cmp	r3, r1
 800b904:	da08      	bge.n	800b918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b906:	2a00      	cmp	r2, #0
 800b908:	dd06      	ble.n	800b918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b90a:	1acb      	subs	r3, r1, r3
 800b90c:	429a      	cmp	r2, r3
 800b90e:	f2c0 80bb 	blt.w	800ba88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800b912:	2b00      	cmp	r3, #0
 800b914:	f300 80b9 	bgt.w	800ba8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800b918:	6967      	ldr	r7, [r4, #20]
 800b91a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b91c:	443b      	add	r3, r7
 800b91e:	461f      	mov	r7, r3
 800b920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b922:	1bdf      	subs	r7, r3, r7
 800b924:	4297      	cmp	r7, r2
 800b926:	bfa8      	it	ge
 800b928:	4617      	movge	r7, r2
 800b92a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800b92e:	2f00      	cmp	r7, #0
 800b930:	f340 813c 	ble.w	800bbac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800b934:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b936:	6829      	ldr	r1, [r5, #0]
 800b938:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b93c:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b940:	6820      	ldr	r0, [r4, #0]
 800b942:	4411      	add	r1, r2
 800b944:	4299      	cmp	r1, r3
 800b946:	dd1a      	ble.n	800b97e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b948:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b94c:	440b      	add	r3, r1
 800b94e:	4402      	add	r2, r0
 800b950:	b21b      	sxth	r3, r3
 800b952:	429a      	cmp	r2, r3
 800b954:	dc13      	bgt.n	800b97e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b958:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	9206      	str	r2, [sp, #24]
 800b95e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b960:	9205      	str	r2, [sp, #20]
 800b962:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b964:	9500      	str	r5, [sp, #0]
 800b966:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b96a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800b96c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b96e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b972:	a912      	add	r1, sp, #72	@ 0x48
 800b974:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800b978:	aa49      	add	r2, sp, #292	@ 0x124
 800b97a:	4623      	mov	r3, r4
 800b97c:	47c8      	blx	r9
 800b97e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b982:	441a      	add	r2, r3
 800b984:	6963      	ldr	r3, [r4, #20]
 800b986:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800b98a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800b98e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800b992:	68a1      	ldr	r1, [r4, #8]
 800b994:	ed94 6a08 	vldr	s12, [r4, #32]
 800b998:	6022      	str	r2, [r4, #0]
 800b99a:	3301      	adds	r3, #1
 800b99c:	6163      	str	r3, [r4, #20]
 800b99e:	69a3      	ldr	r3, [r4, #24]
 800b9a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800b9aa:	61a3      	str	r3, [r4, #24]
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9b6:	edd4 6a07 	vldr	s13, [r4, #28]
 800b9ba:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b9be:	440b      	add	r3, r1
 800b9c0:	68e1      	ldr	r1, [r4, #12]
 800b9c2:	6123      	str	r3, [r4, #16]
 800b9c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b9c8:	428b      	cmp	r3, r1
 800b9ca:	edc4 6a07 	vstr	s13, [r4, #28]
 800b9ce:	db15      	blt.n	800b9fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800b9d0:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800b9d4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b9d8:	3201      	adds	r2, #1
 800b9da:	edc4 6a07 	vstr	s13, [r4, #28]
 800b9de:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b9e2:	6022      	str	r2, [r4, #0]
 800b9e4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b9e8:	1a5b      	subs	r3, r3, r1
 800b9ea:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b9ee:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800b9f2:	6123      	str	r3, [r4, #16]
 800b9f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9f8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b9fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba00:	441a      	add	r2, r3
 800ba02:	696b      	ldr	r3, [r5, #20]
 800ba04:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800ba08:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800ba0c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800ba10:	68a9      	ldr	r1, [r5, #8]
 800ba12:	ed95 6a08 	vldr	s12, [r5, #32]
 800ba16:	602a      	str	r2, [r5, #0]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	616b      	str	r3, [r5, #20]
 800ba1c:	69ab      	ldr	r3, [r5, #24]
 800ba1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba22:	3b01      	subs	r3, #1
 800ba24:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800ba28:	61ab      	str	r3, [r5, #24]
 800ba2a:	692b      	ldr	r3, [r5, #16]
 800ba2c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ba30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba34:	edd5 6a07 	vldr	s13, [r5, #28]
 800ba38:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ba3c:	440b      	add	r3, r1
 800ba3e:	68e9      	ldr	r1, [r5, #12]
 800ba40:	612b      	str	r3, [r5, #16]
 800ba42:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ba46:	428b      	cmp	r3, r1
 800ba48:	edc5 6a07 	vstr	s13, [r5, #28]
 800ba4c:	db15      	blt.n	800ba7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800ba4e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800ba52:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ba56:	3201      	adds	r2, #1
 800ba58:	edc5 6a07 	vstr	s13, [r5, #28]
 800ba5c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800ba60:	602a      	str	r2, [r5, #0]
 800ba62:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ba66:	1a5b      	subs	r3, r3, r1
 800ba68:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800ba6c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800ba70:	612b      	str	r3, [r5, #16]
 800ba72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba76:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800ba7a:	3f01      	subs	r7, #1
 800ba7c:	e757      	b.n	800b92e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800ba7e:	ad39      	add	r5, sp, #228	@ 0xe4
 800ba80:	ac19      	add	r4, sp, #100	@ 0x64
 800ba82:	e72d      	b.n	800b8e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800ba84:	4613      	mov	r3, r2
 800ba86:	e744      	b.n	800b912 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800ba88:	4613      	mov	r3, r2
 800ba8a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800ba8e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800ba90:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800ba94:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800ba98:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800ba9c:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800baa0:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800baa4:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800baa8:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800baac:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800baae:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800bab2:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800bab6:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800baba:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800babe:	960e      	str	r6, [sp, #56]	@ 0x38
 800bac0:	469e      	mov	lr, r3
 800bac2:	461f      	mov	r7, r3
 800bac4:	f04f 0900 	mov.w	r9, #0
 800bac8:	2f00      	cmp	r7, #0
 800baca:	d146      	bne.n	800bb5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800bacc:	449c      	add	ip, r3
 800bace:	1ad7      	subs	r7, r2, r3
 800bad0:	f1b9 0f00 	cmp.w	r9, #0
 800bad4:	d009      	beq.n	800baea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800bad6:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800bada:	9039      	str	r0, [sp, #228]	@ 0xe4
 800badc:	913d      	str	r1, [sp, #244]	@ 0xf4
 800bade:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800bae2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800bae6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800baea:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800baec:	910e      	str	r1, [sp, #56]	@ 0x38
 800baee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800baf2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800baf6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800bafa:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800bafe:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800bb02:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800bb06:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800bb0a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800bb0e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800bb12:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800bb16:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800bb1a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800bb1e:	f04f 0800 	mov.w	r8, #0
 800bb22:	f1be 0f00 	cmp.w	lr, #0
 800bb26:	d030      	beq.n	800bb8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800bb28:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bb2a:	4431      	add	r1, r6
 800bb2c:	4549      	cmp	r1, r9
 800bb2e:	4450      	add	r0, sl
 800bb30:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bb34:	ee37 7a04 	vadd.f32	s14, s14, s8
 800bb38:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bb3c:	db08      	blt.n	800bb50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800bb3e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800bb42:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bb46:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	eba1 0109 	sub.w	r1, r1, r9
 800bb50:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bb54:	f04f 0801 	mov.w	r8, #1
 800bb58:	e7e3      	b.n	800bb22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800bb5a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bb5c:	4431      	add	r1, r6
 800bb5e:	4541      	cmp	r1, r8
 800bb60:	4450      	add	r0, sl
 800bb62:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bb66:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bb6a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800bb6e:	db08      	blt.n	800bb82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800bb70:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bb74:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bb78:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	eba1 0108 	sub.w	r1, r1, r8
 800bb82:	3f01      	subs	r7, #1
 800bb84:	f04f 0901 	mov.w	r9, #1
 800bb88:	e79e      	b.n	800bac8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800bb8a:	449c      	add	ip, r3
 800bb8c:	1aff      	subs	r7, r7, r3
 800bb8e:	f1b8 0f00 	cmp.w	r8, #0
 800bb92:	d009      	beq.n	800bba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800bb94:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800bb98:	9019      	str	r0, [sp, #100]	@ 0x64
 800bb9a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800bb9e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800bba2:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800bba6:	911d      	str	r1, [sp, #116]	@ 0x74
 800bba8:	1ad2      	subs	r2, r2, r3
 800bbaa:	e6b5      	b.n	800b918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bbac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	b923      	cbnz	r3, 800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bbb2:	4b04      	ldr	r3, [pc, #16]	@ (800bbc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	6803      	ldr	r3, [r0, #0]
 800bbb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbba:	4798      	blx	r3
 800bbbc:	b05b      	add	sp, #364	@ 0x16c
 800bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20015438 	.word	0x20015438

0800bbc8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	4604      	mov	r4, r0
 800bbcc:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800bbd0:	9805      	ldr	r0, [sp, #20]
 800bbd2:	6061      	str	r1, [r4, #4]
 800bbd4:	2500      	movs	r5, #0
 800bbd6:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800bbda:	8263      	strh	r3, [r4, #18]
 800bbdc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800bbe0:	8025      	strh	r5, [r4, #0]
 800bbe2:	7221      	strb	r1, [r4, #8]
 800bbe4:	7266      	strb	r6, [r4, #9]
 800bbe6:	60e0      	str	r0, [r4, #12]
 800bbe8:	8222      	strh	r2, [r4, #16]
 800bbea:	82a3      	strh	r3, [r4, #20]
 800bbec:	82e5      	strh	r5, [r4, #22]
 800bbee:	8325      	strh	r5, [r4, #24]
 800bbf0:	8365      	strh	r5, [r4, #26]
 800bbf2:	83a5      	strh	r5, [r4, #28]
 800bbf4:	83e5      	strh	r5, [r4, #30]
 800bbf6:	8425      	strh	r5, [r4, #32]
 800bbf8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800bbfc:	b32e      	cbz	r6, 800bc4a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800bbfe:	6803      	ldr	r3, [r0, #0]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	4798      	blx	r3
 800bc04:	4606      	mov	r6, r0
 800bc06:	b300      	cbz	r0, 800bc4a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800bc08:	68e0      	ldr	r0, [r4, #12]
 800bc0a:	6803      	ldr	r3, [r0, #0]
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	4798      	blx	r3
 800bc12:	4605      	mov	r5, r0
 800bc14:	b1c8      	cbz	r0, 800bc4a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800bc16:	7b43      	ldrb	r3, [r0, #13]
 800bc18:	7a82      	ldrb	r2, [r0, #10]
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc20:	4313      	orrs	r3, r2
 800bc22:	8423      	strh	r3, [r4, #32]
 800bc24:	7a63      	ldrb	r3, [r4, #9]
 800bc26:	2b06      	cmp	r3, #6
 800bc28:	d10f      	bne.n	800bc4a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800bc2a:	68e0      	ldr	r0, [r4, #12]
 800bc2c:	6803      	ldr	r3, [r0, #0]
 800bc2e:	462a      	mov	r2, r5
 800bc30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc32:	4631      	mov	r1, r6
 800bc34:	4798      	blx	r3
 800bc36:	7b6b      	ldrb	r3, [r5, #13]
 800bc38:	005b      	lsls	r3, r3, #1
 800bc3a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800bc3e:	7aab      	ldrb	r3, [r5, #10]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	4418      	add	r0, r3
 800bc44:	8c23      	ldrh	r3, [r4, #32]
 800bc46:	4418      	add	r0, r3
 800bc48:	8420      	strh	r0, [r4, #32]
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	bd70      	pop	{r4, r5, r6, pc}

0800bc4e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800bc4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc52:	2400      	movs	r4, #0
 800bc54:	b085      	sub	sp, #20
 800bc56:	4681      	mov	r9, r0
 800bc58:	4688      	mov	r8, r1
 800bc5a:	4692      	mov	sl, r2
 800bc5c:	469b      	mov	fp, r3
 800bc5e:	4627      	mov	r7, r4
 800bc60:	4625      	mov	r5, r4
 800bc62:	4626      	mov	r6, r4
 800bc64:	4554      	cmp	r4, sl
 800bc66:	da2a      	bge.n	800bcbe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9303      	str	r3, [sp, #12]
 800bc6c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bc70:	429d      	cmp	r5, r3
 800bc72:	d004      	beq.n	800bc7e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800bc74:	f242 030b 	movw	r3, #8203	@ 0x200b
 800bc78:	429d      	cmp	r5, r3
 800bc7a:	bf18      	it	ne
 800bc7c:	462f      	movne	r7, r5
 800bc7e:	ab03      	add	r3, sp, #12
 800bc80:	4642      	mov	r2, r8
 800bc82:	4659      	mov	r1, fp
 800bc84:	4648      	mov	r0, r9
 800bc86:	f003 f81f 	bl	800ecc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	b1b8      	cbz	r0, 800bcbe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800bc8e:	280a      	cmp	r0, #10
 800bc90:	d015      	beq.n	800bcbe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800bc92:	9a03      	ldr	r2, [sp, #12]
 800bc94:	b18a      	cbz	r2, 800bcba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800bc96:	7b50      	ldrb	r0, [r2, #13]
 800bc98:	7a93      	ldrb	r3, [r2, #10]
 800bc9a:	8895      	ldrh	r5, [r2, #4]
 800bc9c:	0040      	lsls	r0, r0, #1
 800bc9e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800bca2:	4303      	orrs	r3, r0
 800bca4:	9301      	str	r3, [sp, #4]
 800bca6:	f8d8 3000 	ldr.w	r3, [r8]
 800bcaa:	4639      	mov	r1, r7
 800bcac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcae:	4640      	mov	r0, r8
 800bcb0:	4798      	blx	r3
 800bcb2:	9b01      	ldr	r3, [sp, #4]
 800bcb4:	4418      	add	r0, r3
 800bcb6:	4406      	add	r6, r0
 800bcb8:	b2b6      	uxth	r6, r6
 800bcba:	3401      	adds	r4, #1
 800bcbc:	e7d2      	b.n	800bc64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	b005      	add	sp, #20
 800bcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcc6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800bcc6:	2a02      	cmp	r2, #2
 800bcc8:	b530      	push	{r4, r5, lr}
 800bcca:	d011      	beq.n	800bcf0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800bccc:	2a03      	cmp	r2, #3
 800bcce:	d01c      	beq.n	800bd0a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800bcd0:	2a01      	cmp	r2, #1
 800bcd2:	d10c      	bne.n	800bcee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800bcd4:	888b      	ldrh	r3, [r1, #4]
 800bcd6:	8801      	ldrh	r1, [r0, #0]
 800bcd8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800bcdc:	8844      	ldrh	r4, [r0, #2]
 800bcde:	8004      	strh	r4, [r0, #0]
 800bce0:	1a5b      	subs	r3, r3, r1
 800bce2:	1a9b      	subs	r3, r3, r2
 800bce4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800bce8:	8043      	strh	r3, [r0, #2]
 800bcea:	8081      	strh	r1, [r0, #4]
 800bcec:	80c2      	strh	r2, [r0, #6]
 800bcee:	bd30      	pop	{r4, r5, pc}
 800bcf0:	88cb      	ldrh	r3, [r1, #6]
 800bcf2:	8842      	ldrh	r2, [r0, #2]
 800bcf4:	1a9b      	subs	r3, r3, r2
 800bcf6:	88c2      	ldrh	r2, [r0, #6]
 800bcf8:	1a9b      	subs	r3, r3, r2
 800bcfa:	888a      	ldrh	r2, [r1, #4]
 800bcfc:	8801      	ldrh	r1, [r0, #0]
 800bcfe:	8043      	strh	r3, [r0, #2]
 800bd00:	1a52      	subs	r2, r2, r1
 800bd02:	8881      	ldrh	r1, [r0, #4]
 800bd04:	1a52      	subs	r2, r2, r1
 800bd06:	8002      	strh	r2, [r0, #0]
 800bd08:	e7f1      	b.n	800bcee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800bd0a:	88cb      	ldrh	r3, [r1, #6]
 800bd0c:	8841      	ldrh	r1, [r0, #2]
 800bd0e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800bd12:	f9b0 5000 	ldrsh.w	r5, [r0]
 800bd16:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800bd1a:	8045      	strh	r5, [r0, #2]
 800bd1c:	1a5b      	subs	r3, r3, r1
 800bd1e:	1a9b      	subs	r3, r3, r2
 800bd20:	8003      	strh	r3, [r0, #0]
 800bd22:	8082      	strh	r2, [r0, #4]
 800bd24:	80c4      	strh	r4, [r0, #6]
 800bd26:	e7e2      	b.n	800bcee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800bd28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	b09f      	sub	sp, #124	@ 0x7c
 800bd2e:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bd30:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd32:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800bd34:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800bd36:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800bd38:	8812      	ldrh	r2, [r2, #0]
 800bd3a:	889b      	ldrh	r3, [r3, #4]
 800bd3c:	900e      	str	r0, [sp, #56]	@ 0x38
 800bd3e:	4413      	add	r3, r2
 800bd40:	6828      	ldr	r0, [r5, #0]
 800bd42:	9117      	str	r1, [sp, #92]	@ 0x5c
 800bd44:	b21b      	sxth	r3, r3
 800bd46:	9311      	str	r3, [sp, #68]	@ 0x44
 800bd48:	6803      	ldr	r3, [r0, #0]
 800bd4a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800bd4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd50:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800bd54:	4798      	blx	r3
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	9013      	str	r0, [sp, #76]	@ 0x4c
 800bd5a:	7b1a      	ldrb	r2, [r3, #12]
 800bd5c:	7adb      	ldrb	r3, [r3, #11]
 800bd5e:	9215      	str	r2, [sp, #84]	@ 0x54
 800bd60:	9316      	str	r3, [sp, #88]	@ 0x58
 800bd62:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800bd66:	2c00      	cmp	r4, #0
 800bd68:	d067      	beq.n	800be3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800bd6a:	7c2b      	ldrb	r3, [r5, #16]
 800bd6c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800bd6e:	2b06      	cmp	r3, #6
 800bd70:	bf14      	ite	ne
 800bd72:	2301      	movne	r3, #1
 800bd74:	2302      	moveq	r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	f04f 0900 	mov.w	r9, #0
 800bd7c:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd7e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800bd82:	464c      	mov	r4, r9
 800bd84:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800bd88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	f280 808b 	bge.w	800bea8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800bd92:	2300      	movs	r3, #0
 800bd94:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800bd98:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800bd9c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bda0:	429c      	cmp	r4, r3
 800bda2:	d006      	beq.n	800bdb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800bda4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bda6:	f242 020b 	movw	r2, #8203	@ 0x200b
 800bdaa:	4294      	cmp	r4, r2
 800bdac:	bf18      	it	ne
 800bdae:	4623      	movne	r3, r4
 800bdb0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdb4:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800bdb6:	682a      	ldr	r2, [r5, #0]
 800bdb8:	428b      	cmp	r3, r1
 800bdba:	db40      	blt.n	800be3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800bdbc:	6813      	ldr	r3, [r2, #0]
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	4798      	blx	r3
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	6828      	ldr	r0, [r5, #0]
 800bdc8:	6803      	ldr	r3, [r0, #0]
 800bdca:	aa1d      	add	r2, sp, #116	@ 0x74
 800bdcc:	689f      	ldr	r7, [r3, #8]
 800bdce:	4621      	mov	r1, r4
 800bdd0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800bdd4:	47b8      	blx	r7
 800bdd6:	901c      	str	r0, [sp, #112]	@ 0x70
 800bdd8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bddc:	429c      	cmp	r4, r3
 800bdde:	f000 80ea 	beq.w	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bde2:	f242 030b 	movw	r3, #8203	@ 0x200b
 800bde6:	429c      	cmp	r4, r3
 800bde8:	f000 80e5 	beq.w	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bdec:	2c00      	cmp	r4, #0
 800bdee:	f000 810c 	beq.w	800c00a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800bdf2:	2c0a      	cmp	r4, #10
 800bdf4:	d05e      	beq.n	800beb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800bdf6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bdf8:	b36a      	cbz	r2, 800be56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800bdfa:	8894      	ldrh	r4, [r2, #4]
 800bdfc:	f1bb 0f00 	cmp.w	fp, #0
 800be00:	d03a      	beq.n	800be78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800be02:	f892 900d 	ldrb.w	r9, [r2, #13]
 800be06:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800be0a:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800be0e:	f892 900a 	ldrb.w	r9, [r2, #10]
 800be12:	f1bb 0f01 	cmp.w	fp, #1
 800be16:	ea49 0903 	orr.w	r9, r9, r3
 800be1a:	d133      	bne.n	800be84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800be1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be1e:	eba6 0609 	sub.w	r6, r6, r9
 800be22:	2b00      	cmp	r3, #0
 800be24:	d14d      	bne.n	800bec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800be26:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800be28:	eb09 0306 	add.w	r3, r9, r6
 800be2c:	4413      	add	r3, r2
 800be2e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800be30:	f9b2 2000 	ldrsh.w	r2, [r2]
 800be34:	4293      	cmp	r3, r2
 800be36:	da4e      	bge.n	800bed6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800be38:	e036      	b.n	800bea8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800be3a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800be3c:	e79c      	b.n	800bd78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800be3e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800be42:	9301      	str	r3, [sp, #4]
 800be44:	ab1d      	add	r3, sp, #116	@ 0x74
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	4659      	mov	r1, fp
 800be4a:	ab1c      	add	r3, sp, #112	@ 0x70
 800be4c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800be4e:	f002 ff84 	bl	800ed5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800be52:	4604      	mov	r4, r0
 800be54:	e7c0      	b.n	800bdd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800be56:	6828      	ldr	r0, [r5, #0]
 800be58:	6803      	ldr	r3, [r0, #0]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	4798      	blx	r3
 800be5e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800be62:	4298      	cmp	r0, r3
 800be64:	f000 80a7 	beq.w	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800be68:	f242 030b 	movw	r3, #8203	@ 0x200b
 800be6c:	4298      	cmp	r0, r3
 800be6e:	f000 80a2 	beq.w	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800be72:	f1bb 0f00 	cmp.w	fp, #0
 800be76:	d100      	bne.n	800be7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800be78:	444e      	add	r6, r9
 800be7a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800be7c:	2a00      	cmp	r2, #0
 800be7e:	d1c0      	bne.n	800be02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800be80:	4691      	mov	r9, r2
 800be82:	e098      	b.n	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800be84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 80c1 	beq.w	800c00e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800be8c:	f1bb 0f00 	cmp.w	fp, #0
 800be90:	d117      	bne.n	800bec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800be92:	6828      	ldr	r0, [r5, #0]
 800be94:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be96:	6803      	ldr	r3, [r0, #0]
 800be98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be9a:	4798      	blx	r3
 800be9c:	4406      	add	r6, r0
 800be9e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bea0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bea2:	1af3      	subs	r3, r6, r3
 800bea4:	4293      	cmp	r3, r2
 800bea6:	dd16      	ble.n	800bed6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800bea8:	2c00      	cmp	r4, #0
 800beaa:	f000 80ae 	beq.w	800c00a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800beae:	2c0a      	cmp	r4, #10
 800beb0:	f040 809c 	bne.w	800bfec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800beb4:	240a      	movs	r4, #10
 800beb6:	fab4 f084 	clz	r0, r4
 800beba:	0940      	lsrs	r0, r0, #5
 800bebc:	b01f      	add	sp, #124	@ 0x7c
 800bebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec2:	6828      	ldr	r0, [r5, #0]
 800bec4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bec6:	6803      	ldr	r3, [r0, #0]
 800bec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beca:	4798      	blx	r3
 800becc:	f1bb 0f01 	cmp.w	fp, #1
 800bed0:	eba6 0600 	sub.w	r6, r6, r0
 800bed4:	d0a7      	beq.n	800be26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800bed6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800bed8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800beda:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800bede:	f9b3 8000 	ldrsh.w	r8, [r3]
 800bee2:	7b43      	ldrb	r3, [r0, #13]
 800bee4:	015b      	lsls	r3, r3, #5
 800bee6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800beea:	7983      	ldrb	r3, [r0, #6]
 800beec:	4431      	add	r1, r6
 800beee:	4313      	orrs	r3, r2
 800bef0:	440b      	add	r3, r1
 800bef2:	4543      	cmp	r3, r8
 800bef4:	db5f      	blt.n	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bef6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bef8:	4299      	cmp	r1, r3
 800befa:	da5c      	bge.n	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800befc:	6828      	ldr	r0, [r5, #0]
 800befe:	6803      	ldr	r3, [r0, #0]
 800bf00:	45b0      	cmp	r8, r6
 800bf02:	bfc8      	it	gt
 800bf04:	eba8 0806 	subgt.w	r8, r8, r6
 800bf08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf0a:	bfcc      	ite	gt
 800bf0c:	fa1f f888 	uxthgt.w	r8, r8
 800bf10:	f04f 0800 	movle.w	r8, #0
 800bf14:	4798      	blx	r3
 800bf16:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bf18:	7b53      	ldrb	r3, [r2, #13]
 800bf1a:	00d9      	lsls	r1, r3, #3
 800bf1c:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800bf20:	7a11      	ldrb	r1, [r2, #8]
 800bf22:	4339      	orrs	r1, r7
 800bf24:	065f      	lsls	r7, r3, #25
 800bf26:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800bf28:	bf44      	itt	mi
 800bf2a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800bf2e:	b209      	sxthmi	r1, r1
 800bf30:	19c7      	adds	r7, r0, r7
 800bf32:	1a7f      	subs	r7, r7, r1
 800bf34:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800bf36:	b2bf      	uxth	r7, r7
 800bf38:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bf3c:	fa0f fa87 	sxth.w	sl, r7
 800bf40:	4551      	cmp	r1, sl
 800bf42:	dd3c      	ble.n	800bfbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800bf44:	011b      	lsls	r3, r3, #4
 800bf46:	79d0      	ldrb	r0, [r2, #7]
 800bf48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf4c:	4303      	orrs	r3, r0
 800bf4e:	449a      	add	sl, r3
 800bf50:	4551      	cmp	r1, sl
 800bf52:	dc30      	bgt.n	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bf54:	1bcf      	subs	r7, r1, r7
 800bf56:	b23f      	sxth	r7, r7
 800bf58:	468a      	mov	sl, r1
 800bf5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf5c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf60:	6828      	ldr	r0, [r5, #0]
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	d12d      	bne.n	800bfc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800bf66:	9318      	str	r3, [sp, #96]	@ 0x60
 800bf68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf6a:	6819      	ldr	r1, [r3, #0]
 800bf6c:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800bf6e:	6801      	ldr	r1, [r0, #0]
 800bf70:	9314      	str	r3, [sp, #80]	@ 0x50
 800bf72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bf74:	4788      	blx	r1
 800bf76:	79a9      	ldrb	r1, [r5, #6]
 800bf78:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bf7a:	7ba9      	ldrb	r1, [r5, #14]
 800bf7c:	910a      	str	r1, [sp, #40]	@ 0x28
 800bf7e:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800bf82:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf84:	68a9      	ldr	r1, [r5, #8]
 800bf86:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800bf88:	9306      	str	r3, [sp, #24]
 800bf8a:	b2bf      	uxth	r7, r7
 800bf8c:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800bf90:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800bf92:	9304      	str	r3, [sp, #16]
 800bf94:	44b0      	add	r8, r6
 800bf96:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800bf9a:	fa0f f388 	sxth.w	r3, r8
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfa4:	9205      	str	r2, [sp, #20]
 800bfa6:	f8cd a004 	str.w	sl, [sp, #4]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800bfb2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800bfb4:	47b8      	blx	r7
 800bfb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfb8:	3301      	adds	r3, #1
 800bfba:	930d      	str	r3, [sp, #52]	@ 0x34
 800bfbc:	e6e4      	b.n	800bd88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800bfbe:	2700      	movs	r7, #0
 800bfc0:	e7cb      	b.n	800bf5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800bfc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfc4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800bfc8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bfca:	f8dc 1000 	ldr.w	r1, [ip]
 800bfce:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800bfd2:	79aa      	ldrb	r2, [r5, #6]
 800bfd4:	9203      	str	r2, [sp, #12]
 800bfd6:	7baa      	ldrb	r2, [r5, #14]
 800bfd8:	9202      	str	r2, [sp, #8]
 800bfda:	68aa      	ldr	r2, [r5, #8]
 800bfdc:	e9cd 0200 	strd	r0, r2, [sp]
 800bfe0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800bfe2:	688f      	ldr	r7, [r1, #8]
 800bfe4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bfe6:	4660      	mov	r0, ip
 800bfe8:	47b8      	blx	r7
 800bfea:	e7e4      	b.n	800bfb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800bfec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bfee:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800bff0:	3501      	adds	r5, #1
 800bff2:	429d      	cmp	r5, r3
 800bff4:	f6bf af5f 	bge.w	800beb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800bff8:	4659      	mov	r1, fp
 800bffa:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800bffc:	f7f7 fd7a 	bl	8003af4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c000:	4604      	mov	r4, r0
 800c002:	b110      	cbz	r0, 800c00a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c004:	280a      	cmp	r0, #10
 800c006:	d1f2      	bne.n	800bfee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800c008:	e754      	b.n	800beb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800c00a:	2400      	movs	r4, #0
 800c00c:	e753      	b.n	800beb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800c00e:	f1bb 0f00 	cmp.w	fp, #0
 800c012:	f43f af44 	beq.w	800be9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800c016:	e75e      	b.n	800bed6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800c018 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800c018:	b530      	push	{r4, r5, lr}
 800c01a:	8ac4      	ldrh	r4, [r0, #22]
 800c01c:	8b45      	ldrh	r5, [r0, #26]
 800c01e:	8343      	strh	r3, [r0, #26]
 800c020:	442c      	add	r4, r5
 800c022:	1ae4      	subs	r4, r4, r3
 800c024:	82c4      	strh	r4, [r0, #22]
 800c026:	8b83      	ldrh	r3, [r0, #28]
 800c028:	8b04      	ldrh	r4, [r0, #24]
 800c02a:	4422      	add	r2, r4
 800c02c:	440c      	add	r4, r1
 800c02e:	1a59      	subs	r1, r3, r1
 800c030:	83c2      	strh	r2, [r0, #30]
 800c032:	8304      	strh	r4, [r0, #24]
 800c034:	8381      	strh	r1, [r0, #28]
 800c036:	bd30      	pop	{r4, r5, pc}

0800c038 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	4604      	mov	r4, r0
 800c03e:	8a47      	ldrh	r7, [r0, #18]
 800c040:	68c0      	ldr	r0, [r0, #12]
 800c042:	6803      	ldr	r3, [r0, #0]
 800c044:	b085      	sub	sp, #20
 800c046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c048:	4798      	blx	r3
 800c04a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800c04e:	7a63      	ldrb	r3, [r4, #9]
 800c050:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800c054:	42b7      	cmp	r7, r6
 800c056:	f103 33ff 	add.w	r3, r3, #4294967295
 800c05a:	bfac      	ite	ge
 800c05c:	f04f 0900 	movge.w	r9, #0
 800c060:	f04f 0901 	movlt.w	r9, #1
 800c064:	2b05      	cmp	r3, #5
 800c066:	d804      	bhi.n	800c072 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800c068:	e8df f003 	tbb	[pc, r3]
 800c06c:	470e0854 	.word	0x470e0854
 800c070:	4c4c      	.short	0x4c4c
 800c072:	2500      	movs	r5, #0
 800c074:	46a9      	mov	r9, r5
 800c076:	462e      	mov	r6, r5
 800c078:	462f      	mov	r7, r5
 800c07a:	e00d      	b.n	800c098 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c07c:	42b7      	cmp	r7, r6
 800c07e:	bfb4      	ite	lt
 800c080:	2600      	movlt	r6, #0
 800c082:	2601      	movge	r6, #1
 800c084:	2500      	movs	r5, #0
 800c086:	e7f7      	b.n	800c078 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c088:	42b7      	cmp	r7, r6
 800c08a:	464d      	mov	r5, r9
 800c08c:	f04f 0900 	mov.w	r9, #0
 800c090:	bfb4      	ite	lt
 800c092:	2600      	movlt	r6, #0
 800c094:	2601      	movge	r6, #1
 800c096:	464f      	mov	r7, r9
 800c098:	f04f 0800 	mov.w	r8, #0
 800c09c:	f8a4 8016 	strh.w	r8, [r4, #22]
 800c0a0:	f8a4 8018 	strh.w	r8, [r4, #24]
 800c0a4:	f8cd 8004 	str.w	r8, [sp, #4]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9303      	str	r3, [sp, #12]
 800c0ac:	8823      	ldrh	r3, [r4, #0]
 800c0ae:	2b20      	cmp	r3, #32
 800c0b0:	d034      	beq.n	800c11c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800c0b2:	f242 010b 	movw	r1, #8203	@ 0x200b
 800c0b6:	1a5a      	subs	r2, r3, r1
 800c0b8:	f1d2 0a00 	rsbs	sl, r2, #0
 800c0bc:	eb4a 0a02 	adc.w	sl, sl, r2
 800c0c0:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d009      	beq.n	800c0dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c0c8:	428b      	cmp	r3, r1
 800c0ca:	9a01      	ldr	r2, [sp, #4]
 800c0cc:	bf18      	it	ne
 800c0ce:	461a      	movne	r2, r3
 800c0d0:	9201      	str	r2, [sp, #4]
 800c0d2:	bf0c      	ite	eq
 800c0d4:	f04f 0a01 	moveq.w	sl, #1
 800c0d8:	f04f 0a00 	movne.w	sl, #0
 800c0dc:	ab03      	add	r3, sp, #12
 800c0de:	68e2      	ldr	r2, [r4, #12]
 800c0e0:	7a21      	ldrb	r1, [r4, #8]
 800c0e2:	6860      	ldr	r0, [r4, #4]
 800c0e4:	f002 fdf0 	bl	800ecc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c0e8:	8020      	strh	r0, [r4, #0]
 800c0ea:	b9d8      	cbnz	r0, 800c124 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800c0ec:	8ba2      	ldrh	r2, [r4, #28]
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f7ff ff90 	bl	800c018 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c0f8:	e06e      	b.n	800c1d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c0fa:	2500      	movs	r5, #0
 800c0fc:	46a9      	mov	r9, r5
 800c0fe:	462e      	mov	r6, r5
 800c100:	2701      	movs	r7, #1
 800c102:	e7c9      	b.n	800c098 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c104:	42b7      	cmp	r7, r6
 800c106:	f04f 0500 	mov.w	r5, #0
 800c10a:	bfb4      	ite	lt
 800c10c:	2700      	movlt	r7, #0
 800c10e:	2701      	movge	r7, #1
 800c110:	462e      	mov	r6, r5
 800c112:	e7c1      	b.n	800c098 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c114:	2500      	movs	r5, #0
 800c116:	46a9      	mov	r9, r5
 800c118:	2601      	movs	r6, #1
 800c11a:	e7ad      	b.n	800c078 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	f04f 0a01 	mov.w	sl, #1
 800c122:	e7db      	b.n	800c0dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c124:	8b63      	ldrh	r3, [r4, #26]
 800c126:	280a      	cmp	r0, #10
 800c128:	f103 0301 	add.w	r3, r3, #1
 800c12c:	8363      	strh	r3, [r4, #26]
 800c12e:	d0dd      	beq.n	800c0ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800c130:	9a03      	ldr	r2, [sp, #12]
 800c132:	bb62      	cbnz	r2, 800c18e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800c134:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c138:	4298      	cmp	r0, r3
 800c13a:	d003      	beq.n	800c144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c13c:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c140:	4298      	cmp	r0, r3
 800c142:	d1b1      	bne.n	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c144:	8823      	ldrh	r3, [r4, #0]
 800c146:	8ba1      	ldrh	r1, [r4, #28]
 800c148:	2b20      	cmp	r3, #32
 800c14a:	d003      	beq.n	800c154 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800c14c:	f242 000b 	movw	r0, #8203	@ 0x200b
 800c150:	4283      	cmp	r3, r0
 800c152:	d131      	bne.n	800c1b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800c154:	f1ba 0f00 	cmp.w	sl, #0
 800c158:	bf0a      	itet	eq
 800c15a:	4688      	moveq	r8, r1
 800c15c:	4650      	movne	r0, sl
 800c15e:	2001      	moveq	r0, #1
 800c160:	440a      	add	r2, r1
 800c162:	8b23      	ldrh	r3, [r4, #24]
 800c164:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800c168:	b292      	uxth	r2, r2
 800c16a:	83a2      	strh	r2, [r4, #28]
 800c16c:	4413      	add	r3, r2
 800c16e:	f1b9 0f00 	cmp.w	r9, #0
 800c172:	d102      	bne.n	800c17a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800c174:	2d00      	cmp	r5, #0
 800c176:	d042      	beq.n	800c1fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800c178:	b300      	cbz	r0, 800c1bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800c17a:	8c21      	ldrh	r1, [r4, #32]
 800c17c:	4419      	add	r1, r3
 800c17e:	458c      	cmp	ip, r1
 800c180:	da37      	bge.n	800c1f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c182:	8ae1      	ldrh	r1, [r4, #22]
 800c184:	2900      	cmp	r1, #0
 800c186:	d034      	beq.n	800c1f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c188:	4563      	cmp	r3, ip
 800c18a:	dd8d      	ble.n	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c18c:	e01d      	b.n	800c1ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800c18e:	8893      	ldrh	r3, [r2, #4]
 800c190:	8023      	strh	r3, [r4, #0]
 800c192:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800c196:	9901      	ldr	r1, [sp, #4]
 800c198:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c19c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800c1a0:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800c1a4:	ea4b 0b00 	orr.w	fp, fp, r0
 800c1a8:	68e0      	ldr	r0, [r4, #12]
 800c1aa:	6803      	ldr	r3, [r0, #0]
 800c1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ae:	4798      	blx	r3
 800c1b0:	eb0b 0200 	add.w	r2, fp, r0
 800c1b4:	b292      	uxth	r2, r2
 800c1b6:	e7c5      	b.n	800c144 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e7d1      	b.n	800c160 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800c1bc:	4563      	cmp	r3, ip
 800c1be:	f77f af73 	ble.w	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c1c2:	8ae3      	ldrh	r3, [r4, #22]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f43f af6f 	beq.w	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800c1d0:	8c22      	ldrh	r2, [r4, #32]
 800c1d2:	8be3      	ldrh	r3, [r4, #30]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	83e3      	strh	r3, [r4, #30]
 800c1d8:	68e0      	ldr	r0, [r4, #12]
 800c1da:	6803      	ldr	r3, [r0, #0]
 800c1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1de:	4798      	blx	r3
 800c1e0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800c1e4:	4418      	add	r0, r3
 800c1e6:	8a63      	ldrh	r3, [r4, #18]
 800c1e8:	1a18      	subs	r0, r3, r0
 800c1ea:	8260      	strh	r0, [r4, #18]
 800c1ec:	b005      	add	sp, #20
 800c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f7ff ff0e 	bl	800c018 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c1fc:	e754      	b.n	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c1fe:	4563      	cmp	r3, ip
 800c200:	dd14      	ble.n	800c22c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800c202:	b117      	cbz	r7, 800c20a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800c204:	2301      	movs	r3, #1
 800c206:	460a      	mov	r2, r1
 800c208:	e772      	b.n	800c0f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800c20a:	2e00      	cmp	r6, #0
 800c20c:	f43f af4c 	beq.w	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c210:	2800      	cmp	r0, #0
 800c212:	f47f af49 	bne.w	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c216:	f1ba 0f00 	cmp.w	sl, #0
 800c21a:	d002      	beq.n	800c222 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800c21c:	2301      	movs	r3, #1
 800c21e:	4642      	mov	r2, r8
 800c220:	e767      	b.n	800c0f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800c222:	8ae3      	ldrh	r3, [r4, #22]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f43f af3f 	beq.w	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c22a:	e7d5      	b.n	800c1d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f47f af3b 	bne.w	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c232:	f1ba 0f00 	cmp.w	sl, #0
 800c236:	f43f af37 	beq.w	800c0a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c23a:	2301      	movs	r3, #1
 800c23c:	4642      	mov	r2, r8
 800c23e:	e7da      	b.n	800c1f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800c240 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800c240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c242:	4605      	mov	r5, r0
 800c244:	b08f      	sub	sp, #60	@ 0x3c
 800c246:	4617      	mov	r7, r2
 800c248:	461c      	mov	r4, r3
 800c24a:	460e      	mov	r6, r1
 800c24c:	b1d1      	cbz	r1, 800c284 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4620      	mov	r0, r4
 800c252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c254:	4798      	blx	r3
 800c256:	4240      	negs	r0, r0
 800c258:	b200      	sxth	r0, r0
 800c25a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c25e:	9603      	str	r6, [sp, #12]
 800c260:	9700      	str	r7, [sp, #0]
 800c262:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c266:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800c26a:	4629      	mov	r1, r5
 800c26c:	a805      	add	r0, sp, #20
 800c26e:	f7ff fcab 	bl	800bbc8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c272:	2401      	movs	r4, #1
 800c274:	a805      	add	r0, sp, #20
 800c276:	f7ff fedf 	bl	800c038 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c27a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c27e:	b163      	cbz	r3, 800c29a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800c280:	3401      	adds	r4, #1
 800c282:	e7f7      	b.n	800c274 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800c284:	f002 fdee 	bl	800ee64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c288:	2401      	movs	r4, #1
 800c28a:	280a      	cmp	r0, #10
 800c28c:	4628      	mov	r0, r5
 800c28e:	bf08      	it	eq
 800c290:	3401      	addeq	r4, #1
 800c292:	f002 fde7 	bl	800ee64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c296:	2800      	cmp	r0, #0
 800c298:	d1f7      	bne.n	800c28a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800c29a:	b2a0      	uxth	r0, r4
 800c29c:	b00f      	add	sp, #60	@ 0x3c
 800c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	b0e3      	sub	sp, #396	@ 0x18c
 800c2a6:	461c      	mov	r4, r3
 800c2a8:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 800c2aa:	4683      	mov	fp, r0
 800c2ac:	4688      	mov	r8, r1
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 8112 	beq.w	800c4d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 810e 	beq.w	800c4d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c2bc:	7ba3      	ldrb	r3, [r4, #14]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 810a 	beq.w	800c4d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c2c4:	6810      	ldr	r0, [r2, #0]
 800c2c6:	6851      	ldr	r1, [r2, #4]
 800c2c8:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 800c2cc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800c2d0:	ad0a      	add	r5, sp, #40	@ 0x28
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	c303      	stmia	r3!, {r0, r1}
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800c2dc:	910c      	str	r1, [sp, #48]	@ 0x30
 800c2de:	79a2      	ldrb	r2, [r4, #6]
 800c2e0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c2e4:	a90c      	add	r1, sp, #48	@ 0x30
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f7ff fced 	bl	800bcc6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c2ec:	a90c      	add	r1, sp, #48	@ 0x30
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	79a2      	ldrb	r2, [r4, #6]
 800c2f2:	f7ff fce8 	bl	800bcc6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c2f6:	a817      	add	r0, sp, #92	@ 0x5c
 800c2f8:	f002 f95f 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	6803      	ldr	r3, [r0, #0]
 800c300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c302:	4798      	blx	r3
 800c304:	4606      	mov	r6, r0
 800c306:	6820      	ldr	r0, [r4, #0]
 800c308:	6803      	ldr	r3, [r0, #0]
 800c30a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c30c:	4798      	blx	r3
 800c30e:	4633      	mov	r3, r6
 800c310:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800c312:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800c314:	9000      	str	r0, [sp, #0]
 800c316:	a817      	add	r0, sp, #92	@ 0x5c
 800c318:	f002 f9aa 	bl	800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c31c:	6820      	ldr	r0, [r4, #0]
 800c31e:	f894 a004 	ldrb.w	sl, [r4, #4]
 800c322:	6803      	ldr	r3, [r0, #0]
 800c324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c326:	4798      	blx	r3
 800c328:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	4607      	mov	r7, r0
 800c330:	4406      	add	r6, r0
 800c332:	a830      	add	r0, sp, #192	@ 0xc0
 800c334:	f893 9009 	ldrb.w	r9, [r3, #9]
 800c338:	f002 f93f 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800c33c:	7c23      	ldrb	r3, [r4, #16]
 800c33e:	b17b      	cbz	r3, 800c360 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 800c340:	6820      	ldr	r0, [r4, #0]
 800c342:	6803      	ldr	r3, [r0, #0]
 800c344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c346:	4798      	blx	r3
 800c348:	9009      	str	r0, [sp, #36]	@ 0x24
 800c34a:	6820      	ldr	r0, [r4, #0]
 800c34c:	6802      	ldr	r2, [r0, #0]
 800c34e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c350:	4790      	blx	r2
 800c352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c354:	9000      	str	r0, [sp, #0]
 800c356:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 800c358:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 800c35a:	a830      	add	r0, sp, #192	@ 0xc0
 800c35c:	f002 f988 	bl	800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c360:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800c364:	7be2      	ldrb	r2, [r4, #15]
 800c366:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c36a:	1a8a      	subs	r2, r1, r2
 800c36c:	7c21      	ldrb	r1, [r4, #16]
 800c36e:	9103      	str	r1, [sp, #12]
 800c370:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800c374:	9102      	str	r1, [sp, #8]
 800c376:	6821      	ldr	r1, [r4, #0]
 800c378:	9101      	str	r1, [sp, #4]
 800c37a:	7961      	ldrb	r1, [r4, #5]
 800c37c:	9100      	str	r1, [sp, #0]
 800c37e:	b292      	uxth	r2, r2
 800c380:	a930      	add	r1, sp, #192	@ 0xc0
 800c382:	a80e      	add	r0, sp, #56	@ 0x38
 800c384:	f7ff fc20 	bl	800bbc8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c388:	2e00      	cmp	r6, #0
 800c38a:	dc5b      	bgt.n	800c444 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c38c:	af17      	add	r7, sp, #92	@ 0x5c
 800c38e:	f04f 0900 	mov.w	r9, #0
 800c392:	7c23      	ldrb	r3, [r4, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 80b1 	beq.w	800c4fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800c39a:	a80e      	add	r0, sp, #56	@ 0x38
 800c39c:	f7ff fe4c 	bl	800c038 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c3a0:	f1ba 0f00 	cmp.w	sl, #0
 800c3a4:	f000 80a5 	beq.w	800c4f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800c3a8:	7c23      	ldrb	r3, [r4, #16]
 800c3aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ac:	2264      	movs	r2, #100	@ 0x64
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	a849      	add	r0, sp, #292	@ 0x124
 800c3b2:	f006 fe3a 	bl	801302a <memcpy>
 800c3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f000 80a7 	beq.w	800c50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800c3be:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800c3c2:	7922      	ldrb	r2, [r4, #4]
 800c3c4:	2a01      	cmp	r2, #1
 800c3c6:	f040 808a 	bne.w	800c4de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 800c3ca:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 800c3ce:	1ac0      	subs	r0, r0, r3
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	fb90 f0f3 	sdiv	r0, r0, r3
 800c3d6:	b200      	sxth	r0, r0
 800c3d8:	7c23      	ldrb	r3, [r4, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 808b 	beq.w	800c4f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800c3e0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 800c3e4:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 800c3e8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c3ec:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800c3f0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800c3f4:	4410      	add	r0, r2
 800c3f6:	b200      	sxth	r0, r0
 800c3f8:	9000      	str	r0, [sp, #0]
 800c3fa:	e9cd 9703 	strd	r9, r7, [sp, #12]
 800c3fe:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800c402:	4642      	mov	r2, r8
 800c404:	2100      	movs	r1, #0
 800c406:	4658      	mov	r0, fp
 800c408:	f7ff fc8e 	bl	800bd28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d163      	bne.n	800c4d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c410:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c414:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800c418:	b2b2      	uxth	r2, r6
 800c41a:	4413      	add	r3, r2
 800c41c:	1a8a      	subs	r2, r1, r2
 800c41e:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 800c422:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 800c426:	b21b      	sxth	r3, r3
 800c428:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c42c:	2a00      	cmp	r2, #0
 800c42e:	d153      	bne.n	800c4d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c430:	6822      	ldr	r2, [r4, #0]
 800c432:	8869      	ldrh	r1, [r5, #2]
 800c434:	7a12      	ldrb	r2, [r2, #8]
 800c436:	1a9b      	subs	r3, r3, r2
 800c438:	88ea      	ldrh	r2, [r5, #6]
 800c43a:	440a      	add	r2, r1
 800c43c:	b212      	sxth	r2, r2
 800c43e:	4293      	cmp	r3, r2
 800c440:	dda7      	ble.n	800c392 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 800c442:	e049      	b.n	800c4d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c444:	7c23      	ldrb	r3, [r4, #16]
 800c446:	444f      	add	r7, r9
 800c448:	b1c3      	cbz	r3, 800c47c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 800c44a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800c44e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c452:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c456:	443b      	add	r3, r7
 800c458:	4293      	cmp	r3, r2
 800c45a:	da97      	bge.n	800c38c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800c45c:	a80e      	add	r0, sp, #56	@ 0x38
 800c45e:	f7ff fdeb 	bl	800c038 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c462:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 800c466:	3b01      	subs	r3, #1
 800c468:	b29b      	uxth	r3, r3
 800c46a:	454b      	cmp	r3, r9
 800c46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c46e:	d021      	beq.n	800c4b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 800c470:	7961      	ldrb	r1, [r4, #5]
 800c472:	a817      	add	r0, sp, #92	@ 0x5c
 800c474:	f7f7 fb3e 	bl	8003af4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c47a:	e7f4      	b.n	800c466 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 800c47c:	fa1f f986 	uxth.w	r9, r6
 800c480:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800c484:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800c488:	443b      	add	r3, r7
 800c48a:	4293      	cmp	r3, r2
 800c48c:	f6bf af7e 	bge.w	800c38c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 800c490:	a817      	add	r0, sp, #92	@ 0x5c
 800c492:	f002 fce7 	bl	800ee64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c496:	b1f8      	cbz	r0, 800c4d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c498:	280a      	cmp	r0, #10
 800c49a:	d1f1      	bne.n	800c480 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800c49c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c4a0:	444b      	add	r3, r9
 800c4a2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c4a6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c4aa:	eba3 0309 	sub.w	r3, r3, r9
 800c4ae:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c4b2:	e7e5      	b.n	800c480 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 800c4b4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800c4b8:	b2b3      	uxth	r3, r6
 800c4ba:	441a      	add	r2, r3
 800c4bc:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800c4c0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800c4ca:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800c4ce:	b11b      	cbz	r3, 800c4d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 800c4d0:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d0ba      	beq.n	800c44e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 800c4d8:	b063      	add	sp, #396	@ 0x18c
 800c4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4de:	2a02      	cmp	r2, #2
 800c4e0:	d105      	bne.n	800c4ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 800c4e2:	7be2      	ldrb	r2, [r4, #15]
 800c4e4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800c4e8:	1a80      	subs	r0, r0, r2
 800c4ea:	1ac0      	subs	r0, r0, r3
 800c4ec:	e773      	b.n	800c3d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	e772      	b.n	800c3d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800c4f2:	7be0      	ldrb	r0, [r4, #15]
 800c4f4:	e770      	b.n	800c3d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 800c4f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c4fa:	e773      	b.n	800c3e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 800c4fc:	f1ba 0f00 	cmp.w	sl, #0
 800c500:	d0f7      	beq.n	800c4f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800c502:	2264      	movs	r2, #100	@ 0x64
 800c504:	4639      	mov	r1, r7
 800c506:	a849      	add	r0, sp, #292	@ 0x124
 800c508:	f006 fd8f 	bl	801302a <memcpy>
 800c50c:	2300      	movs	r3, #0
 800c50e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c512:	6821      	ldr	r1, [r4, #0]
 800c514:	a849      	add	r0, sp, #292	@ 0x124
 800c516:	f7ff fb9a 	bl	800bc4e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800c51a:	b203      	sxth	r3, r0
 800c51c:	e751      	b.n	800c3c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0800c51e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800c51e:	2b03      	cmp	r3, #3
 800c520:	d818      	bhi.n	800c554 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800c522:	e8df f003 	tbb	[pc, r3]
 800c526:	0602      	.short	0x0602
 800c528:	130d      	.short	0x130d
 800c52a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c52e:	1850      	adds	r0, r2, r1
 800c530:	4770      	bx	lr
 800c532:	8803      	ldrh	r3, [r0, #0]
 800c534:	8880      	ldrh	r0, [r0, #4]
 800c536:	4418      	add	r0, r3
 800c538:	b200      	sxth	r0, r0
 800c53a:	1a80      	subs	r0, r0, r2
 800c53c:	3801      	subs	r0, #1
 800c53e:	4770      	bx	lr
 800c540:	8803      	ldrh	r3, [r0, #0]
 800c542:	8880      	ldrh	r0, [r0, #4]
 800c544:	4418      	add	r0, r3
 800c546:	b200      	sxth	r0, r0
 800c548:	1a40      	subs	r0, r0, r1
 800c54a:	e7f7      	b.n	800c53c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800c54c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800c550:	4410      	add	r0, r2
 800c552:	4770      	bx	lr
 800c554:	2000      	movs	r0, #0
 800c556:	4770      	bx	lr

0800c558 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d817      	bhi.n	800c58c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800c55c:	e8df f003 	tbb	[pc, r3]
 800c560:	10090602 	.word	0x10090602
 800c564:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c568:	1850      	adds	r0, r2, r1
 800c56a:	4770      	bx	lr
 800c56c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c570:	e7fa      	b.n	800c568 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800c572:	8843      	ldrh	r3, [r0, #2]
 800c574:	88c0      	ldrh	r0, [r0, #6]
 800c576:	4418      	add	r0, r3
 800c578:	b200      	sxth	r0, r0
 800c57a:	1a80      	subs	r0, r0, r2
 800c57c:	3801      	subs	r0, #1
 800c57e:	4770      	bx	lr
 800c580:	8843      	ldrh	r3, [r0, #2]
 800c582:	88c0      	ldrh	r0, [r0, #6]
 800c584:	4418      	add	r0, r3
 800c586:	b200      	sxth	r0, r0
 800c588:	1a40      	subs	r0, r0, r1
 800c58a:	e7f7      	b.n	800c57c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800c58c:	2000      	movs	r0, #0
 800c58e:	4770      	bx	lr

0800c590 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800c590:	4b01      	ldr	r3, [pc, #4]	@ (800c598 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800c592:	2200      	movs	r2, #0
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	4770      	bx	lr
 800c598:	20015440 	.word	0x20015440

0800c59c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800c59c:	4603      	mov	r3, r0
 800c59e:	b1c8      	cbz	r0, 800c5d4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800c5a0:	0c02      	lsrs	r2, r0, #16
 800c5a2:	0412      	lsls	r2, r2, #16
 800c5a4:	b9a2      	cbnz	r2, 800c5d0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800c5a6:	0403      	lsls	r3, r0, #16
 800c5a8:	2010      	movs	r0, #16
 800c5aa:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800c5ae:	bf04      	itt	eq
 800c5b0:	021b      	lsleq	r3, r3, #8
 800c5b2:	3008      	addeq	r0, #8
 800c5b4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800c5b8:	bf04      	itt	eq
 800c5ba:	011b      	lsleq	r3, r3, #4
 800c5bc:	3004      	addeq	r0, #4
 800c5be:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800c5c2:	bf04      	itt	eq
 800c5c4:	009b      	lsleq	r3, r3, #2
 800c5c6:	3002      	addeq	r0, #2
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	db04      	blt.n	800c5d6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	4770      	bx	lr
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	e7ea      	b.n	800c5aa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800c5d4:	2020      	movs	r0, #32
 800c5d6:	4770      	bx	lr

0800c5d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	b087      	sub	sp, #28
 800c5de:	460d      	mov	r5, r1
 800c5e0:	4616      	mov	r6, r2
 800c5e2:	4698      	mov	r8, r3
 800c5e4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800c5e8:	4601      	mov	r1, r0
 800c5ea:	b120      	cbz	r0, 800c5f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c5ec:	b11a      	cbz	r2, 800c5f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c5ee:	2d1f      	cmp	r5, #31
 800c5f0:	d801      	bhi.n	800c5f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c5f2:	2b1f      	cmp	r3, #31
 800c5f4:	d904      	bls.n	800c600 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	6038      	str	r0, [r7, #0]
 800c5fa:	b007      	add	sp, #28
 800c5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c600:	b97d      	cbnz	r5, 800c622 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800c602:	b143      	cbz	r3, 800c616 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800c604:	4602      	mov	r2, r0
 800c606:	e9cd 4700 	strd	r4, r7, [sp]
 800c60a:	462b      	mov	r3, r5
 800c60c:	4641      	mov	r1, r8
 800c60e:	4630      	mov	r0, r6
 800c610:	f7ff ffe2 	bl	800c5d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c614:	e7f1      	b.n	800c5fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c616:	f04f 33ff 	mov.w	r3, #4294967295
 800c61a:	603b      	str	r3, [r7, #0]
 800c61c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800c620:	e7eb      	b.n	800c5fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c622:	fa32 fa05 	lsrs.w	sl, r2, r5
 800c626:	d106      	bne.n	800c636 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800c628:	4346      	muls	r6, r0
 800c62a:	fbb6 f0f4 	udiv	r0, r6, r4
 800c62e:	fb04 6610 	mls	r6, r4, r0, r6
 800c632:	603e      	str	r6, [r7, #0]
 800c634:	e7e1      	b.n	800c5fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c636:	2201      	movs	r2, #1
 800c638:	40aa      	lsls	r2, r5
 800c63a:	3a01      	subs	r2, #1
 800c63c:	4016      	ands	r6, r2
 800c63e:	fa00 fb05 	lsl.w	fp, r0, r5
 800c642:	4630      	mov	r0, r6
 800c644:	fbbb f9f4 	udiv	r9, fp, r4
 800c648:	fb0a f309 	mul.w	r3, sl, r9
 800c64c:	9303      	str	r3, [sp, #12]
 800c64e:	f7ff ffa5 	bl	800c59c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c652:	462b      	mov	r3, r5
 800c654:	460a      	mov	r2, r1
 800c656:	e9cd 4700 	strd	r4, r7, [sp]
 800c65a:	4601      	mov	r1, r0
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7ff ffbb 	bl	800c5d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c662:	fb04 b919 	mls	r9, r4, r9, fp
 800c666:	4606      	mov	r6, r0
 800c668:	4648      	mov	r0, r9
 800c66a:	eb05 0108 	add.w	r1, r5, r8
 800c66e:	f7ff ff95 	bl	800c59c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c672:	ab05      	add	r3, sp, #20
 800c674:	e9cd 4300 	strd	r4, r3, [sp]
 800c678:	464a      	mov	r2, r9
 800c67a:	4603      	mov	r3, r0
 800c67c:	4650      	mov	r0, sl
 800c67e:	f7ff ffab 	bl	800c5d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	9a05      	ldr	r2, [sp, #20]
 800c686:	9b03      	ldr	r3, [sp, #12]
 800c688:	4411      	add	r1, r2
 800c68a:	fbb1 f2f4 	udiv	r2, r1, r4
 800c68e:	18d3      	adds	r3, r2, r3
 800c690:	441e      	add	r6, r3
 800c692:	fb04 1412 	mls	r4, r4, r2, r1
 800c696:	4430      	add	r0, r6
 800c698:	603c      	str	r4, [r7, #0]
 800c69a:	e7ae      	b.n	800c5fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800c69c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800c69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6a0:	b085      	sub	sp, #20
 800c6a2:	f1b0 0900 	subs.w	r9, r0, #0
 800c6a6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c6a8:	461d      	mov	r5, r3
 800c6aa:	bfbf      	itttt	lt
 800c6ac:	6823      	ldrlt	r3, [r4, #0]
 800c6ae:	425b      	neglt	r3, r3
 800c6b0:	f1c9 0900 	rsblt	r9, r9, #0
 800c6b4:	6023      	strlt	r3, [r4, #0]
 800c6b6:	bfb4      	ite	lt
 800c6b8:	f04f 36ff 	movlt.w	r6, #4294967295
 800c6bc:	2601      	movge	r6, #1
 800c6be:	2a00      	cmp	r2, #0
 800c6c0:	4617      	mov	r7, r2
 800c6c2:	da04      	bge.n	800c6ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800c6c4:	6823      	ldr	r3, [r4, #0]
 800c6c6:	425b      	negs	r3, r3
 800c6c8:	4257      	negs	r7, r2
 800c6ca:	4276      	negs	r6, r6
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	2d00      	cmp	r5, #0
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	bfba      	itte	lt
 800c6d4:	426d      	neglt	r5, r5
 800c6d6:	f04f 38ff 	movlt.w	r8, #4294967295
 800c6da:	f04f 0801 	movge.w	r8, #1
 800c6de:	f7ff ff5d 	bl	800c59c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c6e2:	ab03      	add	r3, sp, #12
 800c6e4:	e9cd 5300 	strd	r5, r3, [sp]
 800c6e8:	463a      	mov	r2, r7
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4648      	mov	r0, r9
 800c6ee:	f7ff ff73 	bl	800c5d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	9a03      	ldr	r2, [sp, #12]
 800c6f6:	4546      	cmp	r6, r8
 800c6f8:	441a      	add	r2, r3
 800c6fa:	fb92 f3f5 	sdiv	r3, r2, r5
 800c6fe:	4418      	add	r0, r3
 800c700:	bf18      	it	ne
 800c702:	4240      	negne	r0, r0
 800c704:	fb05 2313 	mls	r3, r5, r3, r2
 800c708:	1c72      	adds	r2, r6, #1
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	d105      	bne.n	800c71a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f1c3 0200 	rsb	r2, r3, #0
 800c714:	db0b      	blt.n	800c72e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800c716:	6022      	str	r2, [r4, #0]
 800c718:	e006      	b.n	800c728 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c71a:	2e01      	cmp	r6, #1
 800c71c:	d104      	bne.n	800c728 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	da02      	bge.n	800c728 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c722:	442b      	add	r3, r5
 800c724:	3801      	subs	r0, #1
 800c726:	6023      	str	r3, [r4, #0]
 800c728:	b005      	add	sp, #20
 800c72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c72e:	3801      	subs	r0, #1
 800c730:	1b52      	subs	r2, r2, r5
 800c732:	e7f0      	b.n	800c716 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800c734 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800c734:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c738:	4c1c      	ldr	r4, [pc, #112]	@ (800c7ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800c73a:	6807      	ldr	r7, [r0, #0]
 800c73c:	69a3      	ldr	r3, [r4, #24]
 800c73e:	4605      	mov	r5, r0
 800c740:	b92b      	cbnz	r3, 800c74e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800c742:	6840      	ldr	r0, [r0, #4]
 800c744:	e9c5 7000 	strd	r7, r0, [r5]
 800c748:	b004      	add	sp, #16
 800c74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74e:	68a2      	ldr	r2, [r4, #8]
 800c750:	6820      	ldr	r0, [r4, #0]
 800c752:	ae04      	add	r6, sp, #16
 800c754:	f04f 0802 	mov.w	r8, #2
 800c758:	fb93 f1f8 	sdiv	r1, r3, r8
 800c75c:	440a      	add	r2, r1
 800c75e:	f846 2d04 	str.w	r2, [r6, #-4]!
 800c762:	69e1      	ldr	r1, [r4, #28]
 800c764:	9600      	str	r6, [sp, #0]
 800c766:	463a      	mov	r2, r7
 800c768:	f7ff ff98 	bl	800c69c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c76c:	69a3      	ldr	r3, [r4, #24]
 800c76e:	686a      	ldr	r2, [r5, #4]
 800c770:	6a21      	ldr	r1, [r4, #32]
 800c772:	9600      	str	r6, [sp, #0]
 800c774:	4607      	mov	r7, r0
 800c776:	6860      	ldr	r0, [r4, #4]
 800c778:	f7ff ff90 	bl	800c69c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c77c:	6962      	ldr	r2, [r4, #20]
 800c77e:	69a3      	ldr	r3, [r4, #24]
 800c780:	fb93 f8f8 	sdiv	r8, r3, r8
 800c784:	4442      	add	r2, r8
 800c786:	9203      	str	r2, [sp, #12]
 800c788:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c78a:	682a      	ldr	r2, [r5, #0]
 800c78c:	9600      	str	r6, [sp, #0]
 800c78e:	4407      	add	r7, r0
 800c790:	68e0      	ldr	r0, [r4, #12]
 800c792:	f7ff ff83 	bl	800c69c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c796:	9600      	str	r6, [sp, #0]
 800c798:	4680      	mov	r8, r0
 800c79a:	69a3      	ldr	r3, [r4, #24]
 800c79c:	686a      	ldr	r2, [r5, #4]
 800c79e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c7a0:	6920      	ldr	r0, [r4, #16]
 800c7a2:	f7ff ff7b 	bl	800c69c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c7a6:	4440      	add	r0, r8
 800c7a8:	e7cc      	b.n	800c744 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800c7aa:	bf00      	nop
 800c7ac:	20015444 	.word	0x20015444

0800c7b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800c7b0:	4b07      	ldr	r3, [pc, #28]	@ (800c7d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d109      	bne.n	800c7cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800c7b8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c7bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c7c0:	8003      	strh	r3, [r0, #0]
 800c7c2:	4b04      	ldr	r3, [pc, #16]	@ (800c7d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800c7c4:	881b      	ldrh	r3, [r3, #0]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	1a9b      	subs	r3, r3, r2
 800c7ca:	800b      	strh	r3, [r1, #0]
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	20015430 	.word	0x20015430
 800c7d4:	2001542c 	.word	0x2001542c

0800c7d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800c7d8:	b510      	push	{r4, lr}
 800c7da:	4b07      	ldr	r3, [pc, #28]	@ (800c7f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d108      	bne.n	800c7f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800c7e2:	4b06      	ldr	r3, [pc, #24]	@ (800c7fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800c7e4:	880c      	ldrh	r4, [r1, #0]
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	1b1b      	subs	r3, r3, r4
 800c7f0:	8003      	strh	r3, [r0, #0]
 800c7f2:	800a      	strh	r2, [r1, #0]
 800c7f4:	bd10      	pop	{r4, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20015430 	.word	0x20015430
 800c7fc:	2001542c 	.word	0x2001542c

0800c800 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800c800:	b510      	push	{r4, lr}
 800c802:	4b0a      	ldr	r3, [pc, #40]	@ (800c82c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	2b01      	cmp	r3, #1
 800c808:	d10e      	bne.n	800c828 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800c80a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c80e:	8843      	ldrh	r3, [r0, #2]
 800c810:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c814:	8044      	strh	r4, [r0, #2]
 800c816:	18ca      	adds	r2, r1, r3
 800c818:	4b05      	ldr	r3, [pc, #20]	@ (800c830 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	1a9b      	subs	r3, r3, r2
 800c81e:	8003      	strh	r3, [r0, #0]
 800c820:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c824:	80c3      	strh	r3, [r0, #6]
 800c826:	8081      	strh	r1, [r0, #4]
 800c828:	bd10      	pop	{r4, pc}
 800c82a:	bf00      	nop
 800c82c:	20015430 	.word	0x20015430
 800c830:	2001542c 	.word	0x2001542c

0800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800c834:	4b08      	ldr	r3, [pc, #32]	@ (800c858 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d10c      	bne.n	800c856 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800c83c:	8803      	ldrh	r3, [r0, #0]
 800c83e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800c842:	8842      	ldrh	r2, [r0, #2]
 800c844:	8002      	strh	r2, [r0, #0]
 800c846:	185a      	adds	r2, r3, r1
 800c848:	4b04      	ldr	r3, [pc, #16]	@ (800c85c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800c84a:	881b      	ldrh	r3, [r3, #0]
 800c84c:	1a9b      	subs	r3, r3, r2
 800c84e:	8043      	strh	r3, [r0, #2]
 800c850:	88c3      	ldrh	r3, [r0, #6]
 800c852:	8083      	strh	r3, [r0, #4]
 800c854:	80c1      	strh	r1, [r0, #6]
 800c856:	4770      	bx	lr
 800c858:	20015430 	.word	0x20015430
 800c85c:	2001542c 	.word	0x2001542c

0800c860 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800c860:	b510      	push	{r4, lr}
 800c862:	4b07      	ldr	r3, [pc, #28]	@ (800c880 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d108      	bne.n	800c87c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800c86a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c86e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c872:	8003      	strh	r3, [r0, #0]
 800c874:	8893      	ldrh	r3, [r2, #4]
 800c876:	3b01      	subs	r3, #1
 800c878:	1b1b      	subs	r3, r3, r4
 800c87a:	800b      	strh	r3, [r1, #0]
 800c87c:	bd10      	pop	{r4, pc}
 800c87e:	bf00      	nop
 800c880:	20015430 	.word	0x20015430

0800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800c884:	b510      	push	{r4, lr}
 800c886:	4b0a      	ldr	r3, [pc, #40]	@ (800c8b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	460a      	mov	r2, r1
 800c88e:	d10d      	bne.n	800c8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800c890:	8881      	ldrh	r1, [r0, #4]
 800c892:	8803      	ldrh	r3, [r0, #0]
 800c894:	440b      	add	r3, r1
 800c896:	4601      	mov	r1, r0
 800c898:	3b01      	subs	r3, #1
 800c89a:	f821 3b02 	strh.w	r3, [r1], #2
 800c89e:	f7ff ffdf 	bl	800c860 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800c8a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c8a6:	88c2      	ldrh	r2, [r0, #6]
 800c8a8:	8082      	strh	r2, [r0, #4]
 800c8aa:	80c3      	strh	r3, [r0, #6]
 800c8ac:	bd10      	pop	{r4, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20015430 	.word	0x20015430

0800c8b4 <_ZN8touchgfx11Application13requestRedrawEv>:
 800c8b4:	4b06      	ldr	r3, [pc, #24]	@ (800c8d0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800c8b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c8ba:	4b06      	ldr	r3, [pc, #24]	@ (800c8d4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800c8bc:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800c8c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8c4:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800c8ce:	4770      	bx	lr
 800c8d0:	2001542c 	.word	0x2001542c
 800c8d4:	2001542e 	.word	0x2001542e

0800c8d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800c8d8:	4b03      	ldr	r3, [pc, #12]	@ (800c8e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800c8da:	6818      	ldr	r0, [r3, #0]
 800c8dc:	b110      	cbz	r0, 800c8e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800c8de:	6803      	ldr	r3, [r0, #0]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	4718      	bx	r3
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	20015474 	.word	0x20015474

0800c8ec <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800c8ec:	4770      	bx	lr
	...

0800c8f0 <_ZN8touchgfx11Application4drawEv>:
 800c8f0:	b507      	push	{r0, r1, r2, lr}
 800c8f2:	4b09      	ldr	r3, [pc, #36]	@ (800c918 <_ZN8touchgfx11Application4drawEv+0x28>)
 800c8f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c8f8:	4b08      	ldr	r3, [pc, #32]	@ (800c91c <_ZN8touchgfx11Application4drawEv+0x2c>)
 800c8fa:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c8fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c902:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c906:	6803      	ldr	r3, [r0, #0]
 800c908:	2100      	movs	r1, #0
 800c90a:	9100      	str	r1, [sp, #0]
 800c90c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c90e:	4669      	mov	r1, sp
 800c910:	4798      	blx	r3
 800c912:	b003      	add	sp, #12
 800c914:	f85d fb04 	ldr.w	pc, [sp], #4
 800c918:	2001542c 	.word	0x2001542c
 800c91c:	2001542e 	.word	0x2001542e

0800c920 <_ZN8touchgfx11Application10invalidateEv>:
 800c920:	4b09      	ldr	r3, [pc, #36]	@ (800c948 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800c922:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c926:	4b09      	ldr	r3, [pc, #36]	@ (800c94c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800c928:	b082      	sub	sp, #8
 800c92a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c92e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c932:	2100      	movs	r1, #0
 800c934:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c938:	9100      	str	r1, [sp, #0]
 800c93a:	6803      	ldr	r3, [r0, #0]
 800c93c:	aa02      	add	r2, sp, #8
 800c93e:	e912 0006 	ldmdb	r2, {r1, r2}
 800c942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c944:	b002      	add	sp, #8
 800c946:	4718      	bx	r3
 800c948:	2001542c 	.word	0x2001542c
 800c94c:	2001542e 	.word	0x2001542e

0800c950 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800c950:	4b03      	ldr	r3, [pc, #12]	@ (800c960 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800c952:	6818      	ldr	r0, [r3, #0]
 800c954:	b110      	cbz	r0, 800c95c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800c956:	6803      	ldr	r3, [r0, #0]
 800c958:	69db      	ldr	r3, [r3, #28]
 800c95a:	4718      	bx	r3
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	20015474 	.word	0x20015474

0800c964 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800c964:	4b03      	ldr	r3, [pc, #12]	@ (800c974 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800c966:	6818      	ldr	r0, [r3, #0]
 800c968:	b110      	cbz	r0, 800c970 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800c96a:	6803      	ldr	r3, [r0, #0]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	4718      	bx	r3
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	20015474 	.word	0x20015474

0800c978 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800c978:	2300      	movs	r3, #0
 800c97a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800c97e:	4770      	bx	lr

0800c980 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800c980:	4b03      	ldr	r3, [pc, #12]	@ (800c990 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800c982:	6818      	ldr	r0, [r3, #0]
 800c984:	b110      	cbz	r0, 800c98c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800c986:	6803      	ldr	r3, [r0, #0]
 800c988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c98a:	4718      	bx	r3
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20015474 	.word	0x20015474

0800c994 <_ZN8touchgfx11ApplicationD1Ev>:
 800c994:	4770      	bx	lr

0800c996 <_ZN8touchgfx11ApplicationD0Ev>:
 800c996:	b510      	push	{r4, lr}
 800c998:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800c99c:	4604      	mov	r4, r0
 800c99e:	f006 f83f 	bl	8012a20 <_ZdlPvj>
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	bd10      	pop	{r4, pc}

0800c9a6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800c9a6:	b510      	push	{r4, lr}
 800c9a8:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c9ac:	888a      	ldrh	r2, [r1, #4]
 800c9ae:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c9b2:	4422      	add	r2, r4
 800c9b4:	b212      	sxth	r2, r2
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	da15      	bge.n	800c9e6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c9ba:	8882      	ldrh	r2, [r0, #4]
 800c9bc:	4413      	add	r3, r2
 800c9be:	b21b      	sxth	r3, r3
 800c9c0:	429c      	cmp	r4, r3
 800c9c2:	da10      	bge.n	800c9e6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c9c4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c9c8:	88c9      	ldrh	r1, [r1, #6]
 800c9ca:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c9ce:	4419      	add	r1, r3
 800c9d0:	b209      	sxth	r1, r1
 800c9d2:	428a      	cmp	r2, r1
 800c9d4:	da07      	bge.n	800c9e6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800c9d6:	88c0      	ldrh	r0, [r0, #6]
 800c9d8:	4410      	add	r0, r2
 800c9da:	b200      	sxth	r0, r0
 800c9dc:	4283      	cmp	r3, r0
 800c9de:	bfac      	ite	ge
 800c9e0:	2000      	movge	r0, #0
 800c9e2:	2001      	movlt	r0, #1
 800c9e4:	bd10      	pop	{r4, pc}
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e7fc      	b.n	800c9e4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800c9ea <_ZN8touchgfx4Rect10restrictToEss>:
 800c9ea:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	da04      	bge.n	800c9fe <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800c9f4:	8884      	ldrh	r4, [r0, #4]
 800c9f6:	4423      	add	r3, r4
 800c9f8:	8083      	strh	r3, [r0, #4]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	8003      	strh	r3, [r0, #0]
 800c9fe:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ca02:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ca06:	1b09      	subs	r1, r1, r4
 800ca08:	428b      	cmp	r3, r1
 800ca0a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ca0e:	bfc8      	it	gt
 800ca10:	8081      	strhgt	r1, [r0, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	da04      	bge.n	800ca20 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800ca16:	88c1      	ldrh	r1, [r0, #6]
 800ca18:	440b      	add	r3, r1
 800ca1a:	80c3      	strh	r3, [r0, #6]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	8043      	strh	r3, [r0, #2]
 800ca20:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800ca24:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ca28:	1a52      	subs	r2, r2, r1
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	bfc8      	it	gt
 800ca2e:	80c2      	strhgt	r2, [r0, #6]
 800ca30:	bd10      	pop	{r4, pc}
	...

0800ca34 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800ca34:	b510      	push	{r4, lr}
 800ca36:	4b10      	ldr	r3, [pc, #64]	@ (800ca78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800ca38:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ca3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800ca3e:	460c      	mov	r4, r1
 800ca40:	4620      	mov	r0, r4
 800ca42:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ca46:	f7ff ffd0 	bl	800c9ea <_ZN8touchgfx4Rect10restrictToEss>
 800ca4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800ca4c:	6818      	ldr	r0, [r3, #0]
 800ca4e:	b190      	cbz	r0, 800ca76 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800ca50:	6803      	ldr	r3, [r0, #0]
 800ca52:	4621      	mov	r1, r4
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	4798      	blx	r3
 800ca58:	4b0a      	ldr	r3, [pc, #40]	@ (800ca84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800ca5a:	6818      	ldr	r0, [r3, #0]
 800ca5c:	b118      	cbz	r0, 800ca66 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800ca5e:	6803      	ldr	r3, [r0, #0]
 800ca60:	4621      	mov	r1, r4
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	4798      	blx	r3
 800ca66:	4b08      	ldr	r3, [pc, #32]	@ (800ca88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800ca68:	6818      	ldr	r0, [r3, #0]
 800ca6a:	6803      	ldr	r3, [r0, #0]
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	69db      	ldr	r3, [r3, #28]
 800ca70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca74:	4718      	bx	r3
 800ca76:	bd10      	pop	{r4, pc}
 800ca78:	2001542e 	.word	0x2001542e
 800ca7c:	2001542c 	.word	0x2001542c
 800ca80:	20015474 	.word	0x20015474
 800ca84:	20015470 	.word	0x20015470
 800ca88:	20015438 	.word	0x20015438

0800ca8c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	4606      	mov	r6, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	460f      	mov	r7, r1
 800ca94:	f7fc fd93 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800ca98:	b9e8      	cbnz	r0, 800cad6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ca9a:	f9b7 5000 	ldrsh.w	r5, [r7]
 800ca9e:	f9b6 4000 	ldrsh.w	r4, [r6]
 800caa2:	42a5      	cmp	r5, r4
 800caa4:	db17      	blt.n	800cad6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800caa6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800caaa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800caae:	429a      	cmp	r2, r3
 800cab0:	db11      	blt.n	800cad6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cab2:	88b9      	ldrh	r1, [r7, #4]
 800cab4:	440d      	add	r5, r1
 800cab6:	88b1      	ldrh	r1, [r6, #4]
 800cab8:	440c      	add	r4, r1
 800caba:	b22d      	sxth	r5, r5
 800cabc:	b224      	sxth	r4, r4
 800cabe:	42a5      	cmp	r5, r4
 800cac0:	dc09      	bgt.n	800cad6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cac2:	88f8      	ldrh	r0, [r7, #6]
 800cac4:	4410      	add	r0, r2
 800cac6:	88f2      	ldrh	r2, [r6, #6]
 800cac8:	4413      	add	r3, r2
 800caca:	b200      	sxth	r0, r0
 800cacc:	b21b      	sxth	r3, r3
 800cace:	4298      	cmp	r0, r3
 800cad0:	bfcc      	ite	gt
 800cad2:	2000      	movgt	r0, #0
 800cad4:	2001      	movle	r0, #1
 800cad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cad8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cada:	4604      	mov	r4, r0
 800cadc:	4608      	mov	r0, r1
 800cade:	460d      	mov	r5, r1
 800cae0:	f7fc fd6d 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800cae4:	b978      	cbnz	r0, 800cb06 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7fc fd69 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800caec:	f9b5 6000 	ldrsh.w	r6, [r5]
 800caf0:	b150      	cbz	r0, 800cb08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800caf2:	8026      	strh	r6, [r4, #0]
 800caf4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800caf8:	8063      	strh	r3, [r4, #2]
 800cafa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800cafe:	80a3      	strh	r3, [r4, #4]
 800cb00:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cb04:	80e3      	strh	r3, [r4, #6]
 800cb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb08:	f9b4 1000 	ldrsh.w	r1, [r4]
 800cb0c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800cb10:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800cb14:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800cb18:	88ed      	ldrh	r5, [r5, #6]
 800cb1a:	42b1      	cmp	r1, r6
 800cb1c:	460f      	mov	r7, r1
 800cb1e:	bfa8      	it	ge
 800cb20:	4637      	movge	r7, r6
 800cb22:	4293      	cmp	r3, r2
 800cb24:	4618      	mov	r0, r3
 800cb26:	4466      	add	r6, ip
 800cb28:	bfa8      	it	ge
 800cb2a:	4610      	movge	r0, r2
 800cb2c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800cb30:	8027      	strh	r7, [r4, #0]
 800cb32:	442a      	add	r2, r5
 800cb34:	88e5      	ldrh	r5, [r4, #6]
 800cb36:	8060      	strh	r0, [r4, #2]
 800cb38:	4461      	add	r1, ip
 800cb3a:	442b      	add	r3, r5
 800cb3c:	b236      	sxth	r6, r6
 800cb3e:	b209      	sxth	r1, r1
 800cb40:	b212      	sxth	r2, r2
 800cb42:	b21b      	sxth	r3, r3
 800cb44:	428e      	cmp	r6, r1
 800cb46:	bfac      	ite	ge
 800cb48:	ebc7 0106 	rsbge	r1, r7, r6
 800cb4c:	ebc7 0101 	rsblt	r1, r7, r1
 800cb50:	429a      	cmp	r2, r3
 800cb52:	bfac      	ite	ge
 800cb54:	ebc0 0202 	rsbge	r2, r0, r2
 800cb58:	ebc0 0203 	rsblt	r2, r0, r3
 800cb5c:	80a1      	strh	r1, [r4, #4]
 800cb5e:	80e2      	strh	r2, [r4, #6]
 800cb60:	e7d1      	b.n	800cb06 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800cb64 <_ZN8touchgfx11Application11getInstanceEv>:
 800cb64:	4b01      	ldr	r3, [pc, #4]	@ (800cb6c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800cb66:	6818      	ldr	r0, [r3, #0]
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	20015484 	.word	0x20015484

0800cb70 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb72:	4b10      	ldr	r3, [pc, #64]	@ (800cbb4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	4605      	mov	r5, r0
 800cb78:	b1d3      	cbz	r3, 800cbb0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800cb7a:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800cb7c:	4f0f      	ldr	r7, [pc, #60]	@ (800cbbc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800cb7e:	881c      	ldrh	r4, [r3, #0]
 800cb80:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800cb84:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800cb88:	42a3      	cmp	r3, r4
 800cb8a:	d90e      	bls.n	800cbaa <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800cb92:	b10a      	cbz	r2, 800cb98 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800cb94:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800cb96:	b900      	cbnz	r0, 800cb9a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800cb98:	6898      	ldr	r0, [r3, #8]
 800cb9a:	6803      	ldr	r3, [r0, #0]
 800cb9c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800cba0:	69db      	ldr	r3, [r3, #28]
 800cba2:	3401      	adds	r4, #1
 800cba4:	4798      	blx	r3
 800cba6:	b2a4      	uxth	r4, r4
 800cba8:	e7ec      	b.n	800cb84 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800cbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	20015436 	.word	0x20015436
 800cbb8:	20000084 	.word	0x20000084
 800cbbc:	20015438 	.word	0x20015438

0800cbc0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800cbc8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cbcc:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800cbd6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d90e      	bls.n	800cbfc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800cbde:	18e2      	adds	r2, r4, r3
 800cbe0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800cbe4:	b122      	cbz	r2, 800cbf0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800cbe6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800cbea:	6803      	ldr	r3, [r0, #0]
 800cbec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbee:	4798      	blx	r3
 800cbf0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800cbfa:	e7ea      	b.n	800cbd2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800cbfc:	bd10      	pop	{r4, pc}

0800cbfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800cc04:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800cc08:	30a4      	adds	r0, #164	@ 0xa4
 800cc0a:	f802 3b01 	strb.w	r3, [r2], #1
 800cc0e:	4282      	cmp	r2, r0
 800cc10:	d1fb      	bne.n	800cc0a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800cc12:	4770      	bx	lr

0800cc14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800cc14:	b570      	push	{r4, r5, r6, lr}
 800cc16:	4c0b      	ldr	r4, [pc, #44]	@ (800cc44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800cc18:	4605      	mov	r5, r0
 800cc1a:	6820      	ldr	r0, [r4, #0]
 800cc1c:	460e      	mov	r6, r1
 800cc1e:	b110      	cbz	r0, 800cc26 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800cc20:	6803      	ldr	r3, [r0, #0]
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	4798      	blx	r3
 800cc26:	1d28      	adds	r0, r5, #4
 800cc28:	f7ff ffe9 	bl	800cbfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800cc2c:	6026      	str	r6, [r4, #0]
 800cc2e:	6833      	ldr	r3, [r6, #0]
 800cc30:	4630      	mov	r0, r6
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	4798      	blx	r3
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	4628      	mov	r0, r5
 800cc3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc40:	4718      	bx	r3
 800cc42:	bf00      	nop
 800cc44:	20015474 	.word	0x20015474

0800cc48 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800cc4e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800cc52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc54:	461a      	mov	r2, r3
 800cc56:	461c      	mov	r4, r3
 800cc58:	461d      	mov	r5, r3
 800cc5a:	459c      	cmp	ip, r3
 800cc5c:	dd1a      	ble.n	800cc94 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800cc5e:	18c6      	adds	r6, r0, r3
 800cc60:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800cc64:	b16e      	cbz	r6, 800cc82 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d008      	beq.n	800cc7c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800cc6a:	fa1f fe82 	uxth.w	lr, r2
 800cc6e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800cc72:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800cc76:	1887      	adds	r7, r0, r2
 800cc78:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800cc7c:	3201      	adds	r2, #1
 800cc7e:	3301      	adds	r3, #1
 800cc80:	e7eb      	b.n	800cc5a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800cc82:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800cc86:	4299      	cmp	r1, r3
 800cc88:	bfa8      	it	ge
 800cc8a:	3501      	addge	r5, #1
 800cc8c:	429e      	cmp	r6, r3
 800cc8e:	bfc8      	it	gt
 800cc90:	3401      	addgt	r4, #1
 800cc92:	e7f4      	b.n	800cc7e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800cc94:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800cc98:	1b49      	subs	r1, r1, r5
 800cc9a:	1b1b      	subs	r3, r3, r4
 800cc9c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800cca0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800cca4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	dd03      	ble.n	800ccb4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800ccac:	3b01      	subs	r3, #1
 800ccae:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800ccb2:	e7f7      	b.n	800cca4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800ccb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ccb8 <_ZN8touchgfx11Application15handleTickEventEv>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	4d16      	ldr	r5, [pc, #88]	@ (800cd14 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	6828      	ldr	r0, [r5, #0]
 800ccc0:	b140      	cbz	r0, 800ccd4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ccc2:	7a03      	ldrb	r3, [r0, #8]
 800ccc4:	b933      	cbnz	r3, 800ccd4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ccc6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800ccca:	6803      	ldr	r3, [r0, #0]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccd2:	4718      	bx	r3
 800ccd4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800ccd8:	4e0f      	ldr	r6, [pc, #60]	@ (800cd18 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800ccda:	b973      	cbnz	r3, 800ccfa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ccdc:	b168      	cbz	r0, 800ccfa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ccde:	7a03      	ldrb	r3, [r0, #8]
 800cce0:	b15b      	cbz	r3, 800ccfa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cce2:	6830      	ldr	r0, [r6, #0]
 800cce4:	b110      	cbz	r0, 800ccec <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800cce6:	6803      	ldr	r3, [r0, #0]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	4798      	blx	r3
 800ccec:	6828      	ldr	r0, [r5, #0]
 800ccee:	6803      	ldr	r3, [r0, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	4798      	blx	r3
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800ccfa:	3404      	adds	r4, #4
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f7ff ff5f 	bl	800cbc0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800cd02:	4620      	mov	r0, r4
 800cd04:	f7ff ffa0 	bl	800cc48 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800cd08:	6830      	ldr	r0, [r6, #0]
 800cd0a:	b110      	cbz	r0, 800cd12 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800cd0c:	6803      	ldr	r3, [r0, #0]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd10:	e7dd      	b.n	800ccce <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	20015478 	.word	0x20015478
 800cd18:	20015474 	.word	0x20015474

0800cd1c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800cd22:	2200      	movs	r2, #0
 800cd24:	801a      	strh	r2, [r3, #0]
 800cd26:	805a      	strh	r2, [r3, #2]
 800cd28:	809a      	strh	r2, [r3, #4]
 800cd2a:	80da      	strh	r2, [r3, #6]
 800cd2c:	3308      	adds	r3, #8
 800cd2e:	428b      	cmp	r3, r1
 800cd30:	d1f8      	bne.n	800cd24 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800cd32:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800cd36:	4770      	bx	lr

0800cd38 <_ZN8touchgfx11ApplicationC1Ev>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	4b1c      	ldr	r3, [pc, #112]	@ (800cdb0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800cd3e:	f846 3b04 	str.w	r3, [r6], #4
 800cd42:	4604      	mov	r4, r0
 800cd44:	2500      	movs	r5, #0
 800cd46:	22a8      	movs	r2, #168	@ 0xa8
 800cd48:	2100      	movs	r1, #0
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f006 f89d 	bl	8012e8a <memset>
 800cd50:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800cd54:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800cd58:	f7ff ffe0 	bl	800cd1c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800cd5c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800cd60:	f7ff ffdc 	bl	800cd1c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800cd64:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800cd68:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800cd6c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800cd70:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800cd74:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800cd78:	490e      	ldr	r1, [pc, #56]	@ (800cdb4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800cd7a:	480f      	ldr	r0, [pc, #60]	@ (800cdb8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800cd7c:	4f0f      	ldr	r7, [pc, #60]	@ (800cdbc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800cd7e:	f005 fd07 	bl	8012790 <CRC_Lock>
 800cd82:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800cd84:	b158      	cbz	r0, 800cd9e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800cd86:	801d      	strh	r5, [r3, #0]
 800cd88:	4a0e      	ldr	r2, [pc, #56]	@ (800cdc4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	6013      	str	r3, [r2, #0]
 800cd8e:	4a0e      	ldr	r2, [pc, #56]	@ (800cdc8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800cd90:	603b      	str	r3, [r7, #0]
 800cd92:	4630      	mov	r0, r6
 800cd94:	6013      	str	r3, [r2, #0]
 800cd96:	f7ff ff32 	bl	800cbfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cda2:	2002      	movs	r0, #2
 800cda4:	801a      	strh	r2, [r3, #0]
 800cda6:	6038      	str	r0, [r7, #0]
 800cda8:	f001 fa5a 	bl	800e260 <_ZN8touchgfx6Screen4drawEv>
 800cdac:	e7ec      	b.n	800cd88 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800cdae:	bf00      	nop
 800cdb0:	080158fc 	.word	0x080158fc
 800cdb4:	b5e8b5cd 	.word	0xb5e8b5cd
 800cdb8:	f407a5c2 	.word	0xf407a5c2
 800cdbc:	20015474 	.word	0x20015474
 800cdc0:	20000084 	.word	0x20000084
 800cdc4:	20015484 	.word	0x20015484
 800cdc8:	20015478 	.word	0x20015478

0800cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800cdcc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	428b      	cmp	r3, r1
 800cdd6:	b510      	push	{r4, lr}
 800cdd8:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800cddc:	d908      	bls.n	800cdf0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800cdde:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cde2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	6062      	str	r2, [r4, #4]
 800cdf0:	bd10      	pop	{r4, pc}
	...

0800cdf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf8:	4b8f      	ldr	r3, [pc, #572]	@ (800d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800cdfa:	b08f      	sub	sp, #60	@ 0x3c
 800cdfc:	ac0a      	add	r4, sp, #40	@ 0x28
 800cdfe:	e884 0006 	stmia.w	r4, {r1, r2}
 800ce02:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ce06:	4b8d      	ldr	r3, [pc, #564]	@ (800d03c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800ce08:	4683      	mov	fp, r0
 800ce0a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f7ff fdeb 	bl	800c9ea <_ZN8touchgfx4Rect10restrictToEss>
 800ce14:	4620      	mov	r0, r4
 800ce16:	f7fc fbd2 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d16a      	bne.n	800cef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ce1e:	9403      	str	r4, [sp, #12]
 800ce20:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800ce24:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800ce28:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800ce2c:	35a4      	adds	r5, #164	@ 0xa4
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	b15c      	cbz	r4, 800ce4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800ce32:	4629      	mov	r1, r5
 800ce34:	9803      	ldr	r0, [sp, #12]
 800ce36:	f7ff fe29 	bl	800ca8c <_ZNK8touchgfx4Rect8includesERKS0_>
 800ce3a:	3c01      	subs	r4, #1
 800ce3c:	b118      	cbz	r0, 800ce46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800ce3e:	b2a1      	uxth	r1, r4
 800ce40:	9801      	ldr	r0, [sp, #4]
 800ce42:	f7ff ffc3 	bl	800cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ce46:	3d08      	subs	r5, #8
 800ce48:	e7f2      	b.n	800ce30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800ce4a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800ce4e:	f8cd a010 	str.w	sl, [sp, #16]
 800ce52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce56:	9302      	str	r3, [sp, #8]
 800ce58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ce5c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800ce60:	9306      	str	r3, [sp, #24]
 800ce62:	445c      	add	r4, fp
 800ce64:	2500      	movs	r5, #0
 800ce66:	4626      	mov	r6, r4
 800ce68:	f8cd a014 	str.w	sl, [sp, #20]
 800ce6c:	462f      	mov	r7, r5
 800ce6e:	9b05      	ldr	r3, [sp, #20]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d073      	beq.n	800cf5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800ce74:	9903      	ldr	r1, [sp, #12]
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7ff fd95 	bl	800c9a6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800ce7c:	b350      	cbz	r0, 800ced4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800ce7e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800ce82:	f9b6 c000 	ldrsh.w	ip, [r6]
 800ce86:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800ce8a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800ce8e:	45e6      	cmp	lr, ip
 800ce90:	db33      	blt.n	800cefa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800ce92:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800ce96:	88b3      	ldrh	r3, [r6, #4]
 800ce98:	4472      	add	r2, lr
 800ce9a:	4463      	add	r3, ip
 800ce9c:	b212      	sxth	r2, r2
 800ce9e:	b21b      	sxth	r3, r3
 800cea0:	429a      	cmp	r2, r3
 800cea2:	dc2a      	bgt.n	800cefa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800cea4:	88f3      	ldrh	r3, [r6, #6]
 800cea6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800ceaa:	fa1f f289 	uxth.w	r2, r9
 800ceae:	4413      	add	r3, r2
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	45c8      	cmp	r8, r9
 800ceb4:	fa1f fc88 	uxth.w	ip, r8
 800ceb8:	fa0f fe83 	sxth.w	lr, r3
 800cebc:	db0f      	blt.n	800cede <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800cebe:	eba3 030c 	sub.w	r3, r3, ip
 800cec2:	1ac9      	subs	r1, r1, r3
 800cec4:	b209      	sxth	r1, r1
 800cec6:	2900      	cmp	r1, #0
 800cec8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800cecc:	dd12      	ble.n	800cef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800cece:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800ced2:	4605      	mov	r5, r0
 800ced4:	9b05      	ldr	r3, [sp, #20]
 800ced6:	3b01      	subs	r3, #1
 800ced8:	9305      	str	r3, [sp, #20]
 800ceda:	3e08      	subs	r6, #8
 800cedc:	e7c7      	b.n	800ce6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800cede:	4461      	add	r1, ip
 800cee0:	b209      	sxth	r1, r1
 800cee2:	4571      	cmp	r1, lr
 800cee4:	dc38      	bgt.n	800cf58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cee6:	eba2 020c 	sub.w	r2, r2, ip
 800ceea:	b212      	sxth	r2, r2
 800ceec:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800cef0:	2a00      	cmp	r2, #0
 800cef2:	dcee      	bgt.n	800ced2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800cef4:	b00f      	add	sp, #60	@ 0x3c
 800cef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefa:	45c8      	cmp	r8, r9
 800cefc:	db2c      	blt.n	800cf58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cefe:	88f3      	ldrh	r3, [r6, #6]
 800cf00:	4499      	add	r9, r3
 800cf02:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800cf06:	4498      	add	r8, r3
 800cf08:	fa0f f989 	sxth.w	r9, r9
 800cf0c:	fa0f f888 	sxth.w	r8, r8
 800cf10:	45c1      	cmp	r9, r8
 800cf12:	db21      	blt.n	800cf58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cf14:	88b3      	ldrh	r3, [r6, #4]
 800cf16:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800cf1a:	fa1f f28c 	uxth.w	r2, ip
 800cf1e:	4413      	add	r3, r2
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	45e6      	cmp	lr, ip
 800cf24:	fa1f f88e 	uxth.w	r8, lr
 800cf28:	fa0f f983 	sxth.w	r9, r3
 800cf2c:	db0a      	blt.n	800cf44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800cf2e:	eba3 0308 	sub.w	r3, r3, r8
 800cf32:	1ac9      	subs	r1, r1, r3
 800cf34:	b209      	sxth	r1, r1
 800cf36:	2900      	cmp	r1, #0
 800cf38:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800cf3c:	ddda      	ble.n	800cef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800cf3e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800cf42:	e7c6      	b.n	800ced2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800cf44:	4441      	add	r1, r8
 800cf46:	b209      	sxth	r1, r1
 800cf48:	4549      	cmp	r1, r9
 800cf4a:	dc05      	bgt.n	800cf58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cf4c:	eba2 0208 	sub.w	r2, r2, r8
 800cf50:	b212      	sxth	r2, r2
 800cf52:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800cf56:	e7cb      	b.n	800cef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800cf58:	4607      	mov	r7, r0
 800cf5a:	e7bb      	b.n	800ced4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800cf5c:	2d00      	cmp	r5, #0
 800cf5e:	d181      	bne.n	800ce64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800cf60:	2f00      	cmp	r7, #0
 800cf62:	f000 81dd 	beq.w	800d320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800cf66:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800cf6a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800cf6e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800cf72:	b2b3      	uxth	r3, r6
 800cf74:	9305      	str	r3, [sp, #20]
 800cf76:	9a05      	ldr	r2, [sp, #20]
 800cf78:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800cf7c:	4413      	add	r3, r2
 800cf7e:	b2ba      	uxth	r2, r7
 800cf80:	4492      	add	sl, r2
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	fa1f fa8a 	uxth.w	sl, sl
 800cf88:	fa0f f883 	sxth.w	r8, r3
 800cf8c:	fa0f f98a 	sxth.w	r9, sl
 800cf90:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800cf94:	9b04      	ldr	r3, [sp, #16]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d052      	beq.n	800d040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800cf9a:	9903      	ldr	r1, [sp, #12]
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f7ff fd02 	bl	800c9a6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cfa2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cfa6:	b1c0      	cbz	r0, 800cfda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800cfa8:	f9b4 e000 	ldrsh.w	lr, [r4]
 800cfac:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800cfb0:	4576      	cmp	r6, lr
 800cfb2:	dc22      	bgt.n	800cffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800cfb4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800cfb8:	44f4      	add	ip, lr
 800cfba:	fa0f fc8c 	sxth.w	ip, ip
 800cfbe:	45e0      	cmp	r8, ip
 800cfc0:	db1b      	blt.n	800cffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800cfc2:	428f      	cmp	r7, r1
 800cfc4:	fa1f fc81 	uxth.w	ip, r1
 800cfc8:	88e1      	ldrh	r1, [r4, #6]
 800cfca:	dc0d      	bgt.n	800cfe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800cfcc:	ebaa 0c0c 	sub.w	ip, sl, ip
 800cfd0:	eba1 010c 	sub.w	r1, r1, ip
 800cfd4:	f8a4 9002 	strh.w	r9, [r4, #2]
 800cfd8:	80e1      	strh	r1, [r4, #6]
 800cfda:	4628      	mov	r0, r5
 800cfdc:	9904      	ldr	r1, [sp, #16]
 800cfde:	3901      	subs	r1, #1
 800cfe0:	9104      	str	r1, [sp, #16]
 800cfe2:	3c08      	subs	r4, #8
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	e7d3      	b.n	800cf90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800cfe8:	4461      	add	r1, ip
 800cfea:	b209      	sxth	r1, r1
 800cfec:	4549      	cmp	r1, r9
 800cfee:	dcf5      	bgt.n	800cfdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800cff0:	eba2 0c0c 	sub.w	ip, r2, ip
 800cff4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800cff8:	e7ef      	b.n	800cfda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800cffa:	428f      	cmp	r7, r1
 800cffc:	dcee      	bgt.n	800cfdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800cffe:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800d002:	4461      	add	r1, ip
 800d004:	b209      	sxth	r1, r1
 800d006:	4589      	cmp	r9, r1
 800d008:	dbe8      	blt.n	800cfdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d00a:	4576      	cmp	r6, lr
 800d00c:	fa1f fc8e 	uxth.w	ip, lr
 800d010:	88a1      	ldrh	r1, [r4, #4]
 800d012:	dc07      	bgt.n	800d024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800d014:	eba3 0c0c 	sub.w	ip, r3, ip
 800d018:	eba1 010c 	sub.w	r1, r1, ip
 800d01c:	f8a4 8000 	strh.w	r8, [r4]
 800d020:	80a1      	strh	r1, [r4, #4]
 800d022:	e7da      	b.n	800cfda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d024:	4461      	add	r1, ip
 800d026:	b209      	sxth	r1, r1
 800d028:	4588      	cmp	r8, r1
 800d02a:	dbd7      	blt.n	800cfdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d02c:	9905      	ldr	r1, [sp, #20]
 800d02e:	eba1 0c0c 	sub.w	ip, r1, ip
 800d032:	f8a4 c004 	strh.w	ip, [r4, #4]
 800d036:	e7d0      	b.n	800cfda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d038:	2001542e 	.word	0x2001542e
 800d03c:	2001542c 	.word	0x2001542c
 800d040:	2d00      	cmp	r5, #0
 800d042:	f000 816d 	beq.w	800d320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d046:	9b06      	ldr	r3, [sp, #24]
 800d048:	445b      	add	r3, fp
 800d04a:	461c      	mov	r4, r3
 800d04c:	9b02      	ldr	r3, [sp, #8]
 800d04e:	3301      	adds	r3, #1
 800d050:	f000 8166 	beq.w	800d320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d054:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800d058:	4629      	mov	r1, r5
 800d05a:	9803      	ldr	r0, [sp, #12]
 800d05c:	f7ff fd16 	bl	800ca8c <_ZNK8touchgfx4Rect8includesERKS0_>
 800d060:	b120      	cbz	r0, 800d06c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800d062:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d066:	9801      	ldr	r0, [sp, #4]
 800d068:	f7ff feb0 	bl	800cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d06c:	9903      	ldr	r1, [sp, #12]
 800d06e:	4628      	mov	r0, r5
 800d070:	f7ff fc99 	bl	800c9a6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d074:	2800      	cmp	r0, #0
 800d076:	f000 809c 	beq.w	800d1b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d07a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800d07e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d082:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d086:	9309      	str	r3, [sp, #36]	@ 0x24
 800d088:	fa1f f189 	uxth.w	r1, r9
 800d08c:	eb01 0c03 	add.w	ip, r1, r3
 800d090:	fa1f fa8c 	uxth.w	sl, ip
 800d094:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800d098:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800d09c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800d0a0:	b283      	uxth	r3, r0
 800d0a2:	eb03 050c 	add.w	r5, r3, ip
 800d0a6:	b2ad      	uxth	r5, r5
 800d0a8:	9505      	str	r5, [sp, #20]
 800d0aa:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800d0ae:	9504      	str	r5, [sp, #16]
 800d0b0:	4548      	cmp	r0, r9
 800d0b2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800d0b6:	f340 8099 	ble.w	800d1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800d0ba:	1a5b      	subs	r3, r3, r1
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	4596      	cmp	lr, r2
 800d0c0:	fa0f f08a 	sxth.w	r0, sl
 800d0c4:	b21e      	sxth	r6, r3
 800d0c6:	dd2e      	ble.n	800d126 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800d0c8:	9f02      	ldr	r7, [sp, #8]
 800d0ca:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800d0ce:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d0d2:	9f04      	ldr	r7, [sp, #16]
 800d0d4:	1a3f      	subs	r7, r7, r0
 800d0d6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800d0da:	fa1f fe8e 	uxth.w	lr, lr
 800d0de:	b292      	uxth	r2, r2
 800d0e0:	ebae 0102 	sub.w	r1, lr, r2
 800d0e4:	44a6      	add	lr, r4
 800d0e6:	4402      	add	r2, r0
 800d0e8:	b289      	uxth	r1, r1
 800d0ea:	fa0f fe8e 	sxth.w	lr, lr
 800d0ee:	b212      	sxth	r2, r2
 800d0f0:	b20d      	sxth	r5, r1
 800d0f2:	ebae 0202 	sub.w	r2, lr, r2
 800d0f6:	436f      	muls	r7, r5
 800d0f8:	4372      	muls	r2, r6
 800d0fa:	4297      	cmp	r7, r2
 800d0fc:	db09      	blt.n	800d112 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800d0fe:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800d102:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800d106:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d10a:	449c      	add	ip, r3
 800d10c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d110:	e686      	b.n	800ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d112:	4421      	add	r1, r4
 800d114:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800d118:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800d11c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d120:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d124:	e67c      	b.n	800ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d126:	9f04      	ldr	r7, [sp, #16]
 800d128:	42b8      	cmp	r0, r7
 800d12a:	da27      	bge.n	800d17c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800d12c:	9902      	ldr	r1, [sp, #8]
 800d12e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800d132:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800d136:	eb05 010e 	add.w	r1, r5, lr
 800d13a:	fa1f f881 	uxth.w	r8, r1
 800d13e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800d142:	4411      	add	r1, r2
 800d144:	eba1 0108 	sub.w	r1, r1, r8
 800d148:	b289      	uxth	r1, r1
 800d14a:	fa0f f988 	sxth.w	r9, r8
 800d14e:	eba2 020e 	sub.w	r2, r2, lr
 800d152:	fa0f f881 	sxth.w	r8, r1
 800d156:	1a3f      	subs	r7, r7, r0
 800d158:	4372      	muls	r2, r6
 800d15a:	fb08 f707 	mul.w	r7, r8, r7
 800d15e:	42ba      	cmp	r2, r7
 800d160:	dc06      	bgt.n	800d170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800d162:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800d166:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800d16a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800d16e:	e7ca      	b.n	800d106 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800d170:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800d174:	4429      	add	r1, r5
 800d176:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d17a:	e651      	b.n	800ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d17c:	9805      	ldr	r0, [sp, #20]
 800d17e:	ebaa 0000 	sub.w	r0, sl, r0
 800d182:	b280      	uxth	r0, r0
 800d184:	2d06      	cmp	r5, #6
 800d186:	fa0f fe80 	sxth.w	lr, r0
 800d18a:	d817      	bhi.n	800d1bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800d18c:	9b04      	ldr	r3, [sp, #16]
 800d18e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d192:	1c6b      	adds	r3, r5, #1
 800d194:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800d198:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800d19c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d1a0:	9b01      	ldr	r3, [sp, #4]
 800d1a2:	9801      	ldr	r0, [sp, #4]
 800d1a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d1a8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800d1ac:	805a      	strh	r2, [r3, #2]
 800d1ae:	809e      	strh	r6, [r3, #4]
 800d1b0:	80d9      	strh	r1, [r3, #6]
 800d1b2:	9b02      	ldr	r3, [sp, #8]
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	9302      	str	r3, [sp, #8]
 800d1b8:	3c08      	subs	r4, #8
 800d1ba:	e747      	b.n	800d04c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800d1bc:	9a02      	ldr	r2, [sp, #8]
 800d1be:	45b6      	cmp	lr, r6
 800d1c0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d1c4:	db0d      	blt.n	800d1e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800d1c6:	449c      	add	ip, r3
 800d1c8:	fa1f fc8c 	uxth.w	ip, ip
 800d1cc:	445a      	add	r2, fp
 800d1ce:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d1d2:	448c      	add	ip, r1
 800d1d4:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d1d8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800d1dc:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800d1e0:	e61e      	b.n	800ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d1e2:	445a      	add	r2, fp
 800d1e4:	4484      	add	ip, r0
 800d1e6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800d1ea:	e78f      	b.n	800d10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d1ec:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800d1f0:	fa1f f18e 	uxth.w	r1, lr
 800d1f4:	eb01 0806 	add.w	r8, r1, r6
 800d1f8:	b293      	uxth	r3, r2
 800d1fa:	fa1f f888 	uxth.w	r8, r8
 800d1fe:	9306      	str	r3, [sp, #24]
 800d200:	fa0f f388 	sxth.w	r3, r8
 800d204:	9307      	str	r3, [sp, #28]
 800d206:	9f06      	ldr	r7, [sp, #24]
 800d208:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d20c:	443b      	add	r3, r7
 800d20e:	b29b      	uxth	r3, r3
 800d210:	4596      	cmp	lr, r2
 800d212:	9308      	str	r3, [sp, #32]
 800d214:	da24      	bge.n	800d260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800d216:	9905      	ldr	r1, [sp, #20]
 800d218:	eba3 0308 	sub.w	r3, r3, r8
 800d21c:	ebaa 0401 	sub.w	r4, sl, r1
 800d220:	b2a4      	uxth	r4, r4
 800d222:	b29b      	uxth	r3, r3
 800d224:	b225      	sxth	r5, r4
 800d226:	b219      	sxth	r1, r3
 800d228:	eba2 020e 	sub.w	r2, r2, lr
 800d22c:	eba9 0000 	sub.w	r0, r9, r0
 800d230:	436a      	muls	r2, r5
 800d232:	4348      	muls	r0, r1
 800d234:	4282      	cmp	r2, r0
 800d236:	9a02      	ldr	r2, [sp, #8]
 800d238:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d23c:	445a      	add	r2, fp
 800d23e:	dc06      	bgt.n	800d24e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800d240:	9b07      	ldr	r3, [sp, #28]
 800d242:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800d246:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800d24a:	44a4      	add	ip, r4
 800d24c:	e75e      	b.n	800d10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d24e:	9904      	ldr	r1, [sp, #16]
 800d250:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800d254:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800d258:	4433      	add	r3, r6
 800d25a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d25e:	e5df      	b.n	800ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d260:	9f06      	ldr	r7, [sp, #24]
 800d262:	9b04      	ldr	r3, [sp, #16]
 800d264:	1bc9      	subs	r1, r1, r7
 800d266:	fa0f f78a 	sxth.w	r7, sl
 800d26a:	b289      	uxth	r1, r1
 800d26c:	429f      	cmp	r7, r3
 800d26e:	fa0f fe81 	sxth.w	lr, r1
 800d272:	dd23      	ble.n	800d2bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800d274:	9a05      	ldr	r2, [sp, #20]
 800d276:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d27a:	9d07      	ldr	r5, [sp, #28]
 800d27c:	ebaa 0202 	sub.w	r2, sl, r2
 800d280:	b292      	uxth	r2, r2
 800d282:	eba5 0a03 	sub.w	sl, r5, r3
 800d286:	b214      	sxth	r4, r2
 800d288:	eba9 0000 	sub.w	r0, r9, r0
 800d28c:	9b02      	ldr	r3, [sp, #8]
 800d28e:	fb0e f000 	mul.w	r0, lr, r0
 800d292:	fb04 fa0a 	mul.w	sl, r4, sl
 800d296:	00db      	lsls	r3, r3, #3
 800d298:	4550      	cmp	r0, sl
 800d29a:	445b      	add	r3, fp
 800d29c:	db03      	blt.n	800d2a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800d29e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800d2a2:	4494      	add	ip, r2
 800d2a4:	e732      	b.n	800d10c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d2a6:	9a04      	ldr	r2, [sp, #16]
 800d2a8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800d2ac:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800d2b0:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800d2b4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d2b8:	4431      	add	r1, r6
 800d2ba:	e75c      	b.n	800d176 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800d2bc:	9b08      	ldr	r3, [sp, #32]
 800d2be:	eba3 0308 	sub.w	r3, r3, r8
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	2d06      	cmp	r5, #6
 800d2c6:	b218      	sxth	r0, r3
 800d2c8:	d813      	bhi.n	800d2f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800d2ca:	9b07      	ldr	r3, [sp, #28]
 800d2cc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800d2d0:	1c6b      	adds	r3, r5, #1
 800d2d2:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800d2d6:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d2da:	9b01      	ldr	r3, [sp, #4]
 800d2dc:	9901      	ldr	r1, [sp, #4]
 800d2de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d2e2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800d2e6:	805a      	strh	r2, [r3, #2]
 800d2e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2ea:	809a      	strh	r2, [r3, #4]
 800d2ec:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d2f0:	e75f      	b.n	800d1b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d2f2:	9c02      	ldr	r4, [sp, #8]
 800d2f4:	4570      	cmp	r0, lr
 800d2f6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d2fa:	db0d      	blt.n	800d318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800d2fc:	4431      	add	r1, r6
 800d2fe:	9b06      	ldr	r3, [sp, #24]
 800d300:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d304:	b289      	uxth	r1, r1
 800d306:	445c      	add	r4, fp
 800d308:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d30c:	4419      	add	r1, r3
 800d30e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800d312:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800d316:	e583      	b.n	800ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d318:	445c      	add	r4, fp
 800d31a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800d31e:	e79b      	b.n	800d258 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800d320:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d324:	1e65      	subs	r5, r4, #1
 800d326:	b2ad      	uxth	r5, r5
 800d328:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d32c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800d330:	42b5      	cmp	r5, r6
 800d332:	d044      	beq.n	800d3be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800d334:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d338:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800d33c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800d340:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800d344:	4282      	cmp	r2, r0
 800d346:	d11f      	bne.n	800d388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d348:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800d34c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d350:	459c      	cmp	ip, r3
 800d352:	d119      	bne.n	800d388 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d354:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800d358:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d35c:	19d8      	adds	r0, r3, r7
 800d35e:	b200      	sxth	r0, r0
 800d360:	4288      	cmp	r0, r1
 800d362:	d109      	bne.n	800d378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800d364:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800d368:	4413      	add	r3, r2
 800d36a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d36e:	4629      	mov	r1, r5
 800d370:	9801      	ldr	r0, [sp, #4]
 800d372:	f7ff fd2b 	bl	800cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d376:	e003      	b.n	800d380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d378:	4411      	add	r1, r2
 800d37a:	b209      	sxth	r1, r1
 800d37c:	42b9      	cmp	r1, r7
 800d37e:	d0f3      	beq.n	800d368 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800d380:	3d01      	subs	r5, #1
 800d382:	b2ad      	uxth	r5, r5
 800d384:	3c08      	subs	r4, #8
 800d386:	e7d3      	b.n	800d330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d388:	42b9      	cmp	r1, r7
 800d38a:	d1f9      	bne.n	800d380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d38c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800d390:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d394:	4299      	cmp	r1, r3
 800d396:	d1f3      	bne.n	800d380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d398:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d39c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d3a0:	181f      	adds	r7, r3, r0
 800d3a2:	b23f      	sxth	r7, r7
 800d3a4:	42ba      	cmp	r2, r7
 800d3a6:	d105      	bne.n	800d3b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800d3a8:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800d3ac:	440b      	add	r3, r1
 800d3ae:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d3b2:	e7dc      	b.n	800d36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800d3b4:	440a      	add	r2, r1
 800d3b6:	b212      	sxth	r2, r2
 800d3b8:	4290      	cmp	r0, r2
 800d3ba:	d1e1      	bne.n	800d380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d3bc:	e7f6      	b.n	800d3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800d3be:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800d3c2:	2e07      	cmp	r6, #7
 800d3c4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d3c8:	d812      	bhi.n	800d3f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d3ca:	1c75      	adds	r5, r6, #1
 800d3cc:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800d3d0:	9d01      	ldr	r5, [sp, #4]
 800d3d2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d3d6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800d3da:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800d3de:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800d3e2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d3e6:	442c      	add	r4, r5
 800d3e8:	8061      	strh	r1, [r4, #2]
 800d3ea:	80a2      	strh	r2, [r4, #4]
 800d3ec:	80e3      	strh	r3, [r4, #6]
 800d3ee:	e581      	b.n	800cef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d3f0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d3f4:	3e01      	subs	r6, #1
 800d3f6:	445c      	add	r4, fp
 800d3f8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800d3fc:	f04f 37ff 	mov.w	r7, #4294967295
 800d400:	2500      	movs	r5, #0
 800d402:	9305      	str	r3, [sp, #20]
 800d404:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d408:	9302      	str	r3, [sp, #8]
 800d40a:	1e72      	subs	r2, r6, #1
 800d40c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d410:	9304      	str	r3, [sp, #16]
 800d412:	4691      	mov	r9, r2
 800d414:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800d418:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d41c:	bf14      	ite	ne
 800d41e:	9905      	ldrne	r1, [sp, #20]
 800d420:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d424:	6818      	ldr	r0, [r3, #0]
 800d426:	9207      	str	r2, [sp, #28]
 800d428:	bf18      	it	ne
 800d42a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d42e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d432:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d436:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d43a:	9306      	str	r3, [sp, #24]
 800d43c:	fb18 f801 	smulbb	r8, r8, r1
 800d440:	6859      	ldr	r1, [r3, #4]
 800d442:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d446:	4671      	mov	r1, lr
 800d448:	a80c      	add	r0, sp, #48	@ 0x30
 800d44a:	f7ff fb45 	bl	800cad8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d44e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800d452:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800d456:	9b04      	ldr	r3, [sp, #16]
 800d458:	9a02      	ldr	r2, [sp, #8]
 800d45a:	fb10 f001 	smulbb	r0, r0, r1
 800d45e:	fb02 8803 	mla	r8, r2, r3, r8
 800d462:	eba0 0108 	sub.w	r1, r0, r8
 800d466:	f04f 0c08 	mov.w	ip, #8
 800d46a:	fb90 f0fc 	sdiv	r0, r0, ip
 800d46e:	4288      	cmp	r0, r1
 800d470:	dc20      	bgt.n	800d4b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d472:	4551      	cmp	r1, sl
 800d474:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d478:	da03      	bge.n	800d482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800d47a:	b1d9      	cbz	r1, 800d4b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d47c:	468a      	mov	sl, r1
 800d47e:	464f      	mov	r7, r9
 800d480:	4635      	mov	r5, r6
 800d482:	f109 39ff 	add.w	r9, r9, #4294967295
 800d486:	f119 0f02 	cmn.w	r9, #2
 800d48a:	d1c5      	bne.n	800d418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d48c:	4616      	mov	r6, r2
 800d48e:	3201      	adds	r2, #1
 800d490:	f1a4 0408 	sub.w	r4, r4, #8
 800d494:	d1b6      	bne.n	800d404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d496:	9b01      	ldr	r3, [sp, #4]
 800d498:	b2ac      	uxth	r4, r5
 800d49a:	00ed      	lsls	r5, r5, #3
 800d49c:	1958      	adds	r0, r3, r5
 800d49e:	1c7b      	adds	r3, r7, #1
 800d4a0:	d10b      	bne.n	800d4ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	9803      	ldr	r0, [sp, #12]
 800d4a6:	f7ff fb17 	bl	800cad8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	9801      	ldr	r0, [sp, #4]
 800d4ae:	f7ff fc8d 	bl	800cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d4b2:	e4b5      	b.n	800ce20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d4b4:	464f      	mov	r7, r9
 800d4b6:	4635      	mov	r5, r6
 800d4b8:	e7ed      	b.n	800d496 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800d4ba:	9b01      	ldr	r3, [sp, #4]
 800d4bc:	00ff      	lsls	r7, r7, #3
 800d4be:	19d9      	adds	r1, r3, r7
 800d4c0:	f7ff fb0a 	bl	800cad8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d4c4:	9b03      	ldr	r3, [sp, #12]
 800d4c6:	cb03      	ldmia	r3!, {r0, r1}
 800d4c8:	445f      	add	r7, fp
 800d4ca:	445d      	add	r5, fp
 800d4cc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d4d0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800d4d4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800d4d8:	9b03      	ldr	r3, [sp, #12]
 800d4da:	6869      	ldr	r1, [r5, #4]
 800d4dc:	c303      	stmia	r3!, {r0, r1}
 800d4de:	e7e4      	b.n	800d4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800d4e0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800d4e8:	b09b      	sub	sp, #108	@ 0x6c
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f7fc f866 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	b948      	cbnz	r0, 800d50a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4fe:	4620      	mov	r0, r4
 800d500:	4798      	blx	r3
 800d502:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800d506:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800d50a:	4bc6      	ldr	r3, [pc, #792]	@ (800d824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d03f      	beq.n	800d592 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d512:	4dc5      	ldr	r5, [pc, #788]	@ (800d828 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800d514:	4628      	mov	r0, r5
 800d516:	f7fc f852 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800d51a:	4606      	mov	r6, r0
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d138      	bne.n	800d592 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d520:	4628      	mov	r0, r5
 800d522:	f7ff f96d 	bl	800c800 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	6829      	ldr	r1, [r5, #0]
 800d52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d52c:	686a      	ldr	r2, [r5, #4]
 800d52e:	4620      	mov	r0, r4
 800d530:	4798      	blx	r3
 800d532:	802e      	strh	r6, [r5, #0]
 800d534:	806e      	strh	r6, [r5, #2]
 800d536:	80ae      	strh	r6, [r5, #4]
 800d538:	80ee      	strh	r6, [r5, #6]
 800d53a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800d53e:	4dbb      	ldr	r5, [pc, #748]	@ (800d82c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800d540:	4640      	mov	r0, r8
 800d542:	f7ff fbeb 	bl	800cd1c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d546:	882e      	ldrh	r6, [r5, #0]
 800d548:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d54c:	4633      	mov	r3, r6
 800d54e:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d552:	42bb      	cmp	r3, r7
 800d554:	d224      	bcs.n	800d5a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d556:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800d55a:	2907      	cmp	r1, #7
 800d55c:	d816      	bhi.n	800d58c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800d55e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d562:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800d566:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800d56a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800d56e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800d572:	1c4a      	adds	r2, r1, #1
 800d574:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800d578:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800d57c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800d580:	f8a2 a002 	strh.w	sl, [r2, #2]
 800d584:	f8a2 e004 	strh.w	lr, [r2, #4]
 800d588:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d58c:	3301      	adds	r3, #1
 800d58e:	b29b      	uxth	r3, r3
 800d590:	e7df      	b.n	800d552 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800d592:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1cf      	bne.n	800d53a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800d59a:	b01b      	add	sp, #108	@ 0x6c
 800d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800d5a4:	42b3      	cmp	r3, r6
 800d5a6:	d90c      	bls.n	800d5c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800d5a8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800d5ac:	6822      	ldr	r2, [r4, #0]
 800d5ae:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800d5b2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800d5b4:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	3601      	adds	r6, #1
 800d5bc:	47b8      	blx	r7
 800d5be:	b2b6      	uxth	r6, r6
 800d5c0:	e7ee      	b.n	800d5a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d5c2:	4a9b      	ldr	r2, [pc, #620]	@ (800d830 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d5c4:	6813      	ldr	r3, [r2, #0]
 800d5c6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	4691      	mov	r9, r2
 800d5ce:	f040 80e2 	bne.w	800d796 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800d5d2:	8829      	ldrh	r1, [r5, #0]
 800d5d4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d5d8:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800d5dc:	33ae      	adds	r3, #174	@ 0xae
 800d5de:	2600      	movs	r6, #0
 800d5e0:	428f      	cmp	r7, r1
 800d5e2:	f103 0308 	add.w	r3, r3, #8
 800d5e6:	dd0a      	ble.n	800d5fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800d5e8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d5ec:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800d5f0:	4402      	add	r2, r0
 800d5f2:	b212      	sxth	r2, r2
 800d5f4:	4296      	cmp	r6, r2
 800d5f6:	bfb8      	it	lt
 800d5f8:	4616      	movlt	r6, r2
 800d5fa:	3101      	adds	r1, #1
 800d5fc:	e7f0      	b.n	800d5e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800d5fe:	4b8d      	ldr	r3, [pc, #564]	@ (800d834 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800d600:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800d830 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800d604:	881b      	ldrh	r3, [r3, #0]
 800d606:	2b0f      	cmp	r3, #15
 800d608:	bf88      	it	hi
 800d60a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800d60e:	f04f 0300 	mov.w	r3, #0
 800d612:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d616:	bf98      	it	ls
 800d618:	f04f 0b01 	movls.w	fp, #1
 800d61c:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800d620:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800d624:	4b82      	ldr	r3, [pc, #520]	@ (800d830 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d626:	4438      	add	r0, r7
 800d628:	b207      	sxth	r7, r0
 800d62a:	6818      	ldr	r0, [r3, #0]
 800d62c:	42b7      	cmp	r7, r6
 800d62e:	6803      	ldr	r3, [r0, #0]
 800d630:	f280 8083 	bge.w	800d73a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800d634:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d638:	4798      	blx	r3
 800d63a:	eb07 030b 	add.w	r3, r7, fp
 800d63e:	4298      	cmp	r0, r3
 800d640:	da07      	bge.n	800d652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800d642:	42b0      	cmp	r0, r6
 800d644:	da05      	bge.n	800d652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800d646:	4287      	cmp	r7, r0
 800d648:	dd6c      	ble.n	800d724 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800d64a:	2f00      	cmp	r7, #0
 800d64c:	dd6a      	ble.n	800d724 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800d64e:	4630      	mov	r0, r6
 800d650:	e004      	b.n	800d65c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800d652:	4287      	cmp	r7, r0
 800d654:	dcfb      	bgt.n	800d64e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800d656:	42b0      	cmp	r0, r6
 800d658:	bfa8      	it	ge
 800d65a:	4630      	movge	r0, r6
 800d65c:	4b76      	ldr	r3, [pc, #472]	@ (800d838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800d65e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d662:	1bc0      	subs	r0, r0, r7
 800d664:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d668:	882f      	ldrh	r7, [r5, #0]
 800d66a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d66e:	2200      	movs	r2, #0
 800d670:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d674:	f8ad 001a 	strh.w	r0, [sp, #26]
 800d678:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d67c:	42bb      	cmp	r3, r7
 800d67e:	d9cd      	bls.n	800d61c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d680:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800d684:	ab07      	add	r3, sp, #28
 800d686:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800d68a:	6851      	ldr	r1, [r2, #4]
 800d68c:	c303      	stmia	r3!, {r0, r1}
 800d68e:	a905      	add	r1, sp, #20
 800d690:	a807      	add	r0, sp, #28
 800d692:	f7ff f988 	bl	800c9a6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d696:	2800      	cmp	r0, #0
 800d698:	d04c      	beq.n	800d734 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800d69a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800d69e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800d6a2:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800d6a6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800d6aa:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d6ae:	9302      	str	r3, [sp, #8]
 800d6b0:	4686      	mov	lr, r0
 800d6b2:	4290      	cmp	r0, r2
 800d6b4:	4450      	add	r0, sl
 800d6b6:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800d6ba:	bfb8      	it	lt
 800d6bc:	4696      	movlt	lr, r2
 800d6be:	4452      	add	r2, sl
 800d6c0:	4299      	cmp	r1, r3
 800d6c2:	b280      	uxth	r0, r0
 800d6c4:	b292      	uxth	r2, r2
 800d6c6:	468c      	mov	ip, r1
 800d6c8:	fa0f fa82 	sxth.w	sl, r2
 800d6cc:	bfb8      	it	lt
 800d6ce:	469c      	movlt	ip, r3
 800d6d0:	b203      	sxth	r3, r0
 800d6d2:	4553      	cmp	r3, sl
 800d6d4:	bfb8      	it	lt
 800d6d6:	4602      	movlt	r2, r0
 800d6d8:	eba2 020e 	sub.w	r2, r2, lr
 800d6dc:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d6e0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800d6e4:	9b02      	ldr	r3, [sp, #8]
 800d6e6:	f8ad e01c 	strh.w	lr, [sp, #28]
 800d6ea:	4411      	add	r1, r2
 800d6ec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d6f0:	f8ad c01e 	strh.w	ip, [sp, #30]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	b289      	uxth	r1, r1
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	b208      	sxth	r0, r1
 800d6fc:	b21a      	sxth	r2, r3
 800d6fe:	4290      	cmp	r0, r2
 800d700:	bfb8      	it	lt
 800d702:	460b      	movlt	r3, r1
 800d704:	eba3 030c 	sub.w	r3, r3, ip
 800d708:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800d70c:	a807      	add	r0, sp, #28
 800d70e:	f7fb ff56 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800d712:	b920      	cbnz	r0, 800d71e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	a907      	add	r1, sp, #28
 800d718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d71a:	4620      	mov	r0, r4
 800d71c:	4798      	blx	r3
 800d71e:	3701      	adds	r7, #1
 800d720:	b2bf      	uxth	r7, r7
 800d722:	e7a9      	b.n	800d678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800d724:	f8d9 0000 	ldr.w	r0, [r9]
 800d728:	6803      	ldr	r3, [r0, #0]
 800d72a:	2101      	movs	r1, #1
 800d72c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d730:	4798      	blx	r3
 800d732:	e773      	b.n	800d61c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d734:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800d738:	e7e8      	b.n	800d70c <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800d73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d73c:	4798      	blx	r3
 800d73e:	4b3f      	ldr	r3, [pc, #252]	@ (800d83c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	f43f af29 	beq.w	800d59a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800d748:	2300      	movs	r3, #0
 800d74a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800d74e:	882b      	ldrh	r3, [r5, #0]
 800d750:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800d754:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800d758:	42ab      	cmp	r3, r5
 800d75a:	f4bf af1e 	bcs.w	800d59a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800d75e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800d762:	2907      	cmp	r1, #7
 800d764:	d814      	bhi.n	800d790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800d766:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800d76a:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800d76e:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800d772:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800d776:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800d77a:	1c4a      	adds	r2, r1, #1
 800d77c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800d780:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800d784:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800d788:	f8a2 c002 	strh.w	ip, [r2, #2]
 800d78c:	8097      	strh	r7, [r2, #4]
 800d78e:	80d6      	strh	r6, [r2, #6]
 800d790:	3301      	adds	r3, #1
 800d792:	b29b      	uxth	r3, r3
 800d794:	e7e0      	b.n	800d758 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800d796:	2b02      	cmp	r3, #2
 800d798:	f040 8133 	bne.w	800da02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800d79c:	4b28      	ldr	r3, [pc, #160]	@ (800d840 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800d7a6:	f000 8098 	beq.w	800d8da <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d7aa:	882a      	ldrh	r2, [r5, #0]
 800d7ac:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800d7b0:	3201      	adds	r2, #1
 800d7b2:	b292      	uxth	r2, r2
 800d7b4:	2900      	cmp	r1, #0
 800d7b6:	d0c2      	beq.n	800d73e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d7b8:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800d7bc:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800d7c0:	441e      	add	r6, r3
 800d7c2:	b236      	sxth	r6, r6
 800d7c4:	4694      	mov	ip, r2
 800d7c6:	f04f 0900 	mov.w	r9, #0
 800d7ca:	fa1f f38c 	uxth.w	r3, ip
 800d7ce:	4299      	cmp	r1, r3
 800d7d0:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800d7d4:	f240 80bf 	bls.w	800d956 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800d7d8:	4427      	add	r7, r4
 800d7da:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800d7de:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800d7e2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800d7e6:	4283      	cmp	r3, r0
 800d7e8:	f340 80a1 	ble.w	800d92e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800d7ec:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800d7f0:	4406      	add	r6, r0
 800d7f2:	b236      	sxth	r6, r6
 800d7f4:	429e      	cmp	r6, r3
 800d7f6:	bfa8      	it	ge
 800d7f8:	461e      	movge	r6, r3
 800d7fa:	46e1      	mov	r9, ip
 800d7fc:	f10c 0c01 	add.w	ip, ip, #1
 800d800:	e7e3      	b.n	800d7ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800d802:	d10a      	bne.n	800d81a <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800d804:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800d808:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800d80c:	4562      	cmp	r2, ip
 800d80e:	bfb8      	it	lt
 800d810:	4662      	movlt	r2, ip
 800d812:	4288      	cmp	r0, r1
 800d814:	bfb8      	it	lt
 800d816:	461f      	movlt	r7, r3
 800d818:	e087      	b.n	800d92a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800d81a:	428a      	cmp	r2, r1
 800d81c:	bfb8      	it	lt
 800d81e:	460a      	movlt	r2, r1
 800d820:	e083      	b.n	800d92a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800d822:	bf00      	nop
 800d824:	20015470 	.word	0x20015470
 800d828:	2001547c 	.word	0x2001547c
 800d82c:	20000084 	.word	0x20000084
 800d830:	20015438 	.word	0x20015438
 800d834:	2001542e 	.word	0x2001542e
 800d838:	2001542c 	.word	0x2001542c
 800d83c:	20015436 	.word	0x20015436
 800d840:	20015430 	.word	0x20015430
 800d844:	19a1      	adds	r1, r4, r6
 800d846:	ab07      	add	r3, sp, #28
 800d848:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800d84c:	6849      	ldr	r1, [r1, #4]
 800d84e:	c303      	stmia	r3!, {r0, r1}
 800d850:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d854:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d858:	2b13      	cmp	r3, #19
 800d85a:	bfd8      	it	le
 800d85c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800d860:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d864:	440b      	add	r3, r1
 800d866:	1a9b      	subs	r3, r3, r2
 800d868:	a807      	add	r0, sp, #28
 800d86a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d86e:	f7fe ffe1 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d872:	a807      	add	r0, sp, #28
 800d874:	f7fb fea3 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800d878:	bb78      	cbnz	r0, 800d8da <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d87a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800d87e:	f8d9 0000 	ldr.w	r0, [r9]
 800d882:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d886:	f8d0 e000 	ldr.w	lr, [r0]
 800d88a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d88e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d892:	f1bc 0f14 	cmp.w	ip, #20
 800d896:	bfa8      	it	ge
 800d898:	f04f 0c14 	movge.w	ip, #20
 800d89c:	fa1f fc8c 	uxth.w	ip, ip
 800d8a0:	f8cd c000 	str.w	ip, [sp]
 800d8a4:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800d8a8:	47d8      	blx	fp
 800d8aa:	4683      	mov	fp, r0
 800d8ac:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800d8b0:	a807      	add	r0, sp, #28
 800d8b2:	f7fe ffa5 	bl	800c800 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	4426      	add	r6, r4
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8be:	a907      	add	r1, sp, #28
 800d8c0:	4798      	blx	r3
 800d8c2:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800d8c6:	eba0 000b 	sub.w	r0, r0, fp
 800d8ca:	b200      	sxth	r0, r0
 800d8cc:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800d8d0:	b918      	cbnz	r0, 800d8da <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d8d2:	b2b9      	uxth	r1, r7
 800d8d4:	4650      	mov	r0, sl
 800d8d6:	f7ff fa79 	bl	800cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d8da:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800d8de:	f1bb 0f00 	cmp.w	fp, #0
 800d8e2:	f43f af2c 	beq.w	800d73e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d8e6:	882b      	ldrh	r3, [r5, #0]
 800d8e8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	2700      	movs	r7, #0
 800d8f2:	b299      	uxth	r1, r3
 800d8f4:	458b      	cmp	fp, r1
 800d8f6:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800d8fa:	d9a3      	bls.n	800d844 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800d8fc:	4426      	add	r6, r4
 800d8fe:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800d902:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800d906:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800d90a:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800d90e:	4408      	add	r0, r1
 800d910:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800d914:	4461      	add	r1, ip
 800d916:	b200      	sxth	r0, r0
 800d918:	b209      	sxth	r1, r1
 800d91a:	4288      	cmp	r0, r1
 800d91c:	f6bf af71 	bge.w	800d802 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800d920:	4584      	cmp	ip, r0
 800d922:	4662      	mov	r2, ip
 800d924:	461f      	mov	r7, r3
 800d926:	bfb8      	it	lt
 800d928:	4602      	movlt	r2, r0
 800d92a:	3301      	adds	r3, #1
 800d92c:	e7e1      	b.n	800d8f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800d92e:	d10e      	bne.n	800d94e <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800d930:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800d934:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800d938:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800d93c:	4473      	add	r3, lr
 800d93e:	b21b      	sxth	r3, r3
 800d940:	429e      	cmp	r6, r3
 800d942:	bfa8      	it	ge
 800d944:	461e      	movge	r6, r3
 800d946:	4287      	cmp	r7, r0
 800d948:	bfb8      	it	lt
 800d94a:	46e1      	movlt	r9, ip
 800d94c:	e756      	b.n	800d7fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800d94e:	4286      	cmp	r6, r0
 800d950:	bfa8      	it	ge
 800d952:	4606      	movge	r6, r0
 800d954:	e752      	b.n	800d7fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800d956:	eb0a 0007 	add.w	r0, sl, r7
 800d95a:	4427      	add	r7, r4
 800d95c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d960:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800d964:	f1bb 0f13 	cmp.w	fp, #19
 800d968:	bfde      	ittt	le
 800d96a:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800d96e:	445e      	addle	r6, fp
 800d970:	b236      	sxthle	r6, r6
 800d972:	f7fb fe24 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800d976:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f47f af1a 	bne.w	800d7b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800d980:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800d984:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800d988:	482a      	ldr	r0, [pc, #168]	@ (800da34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800d98a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800d98e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800d992:	6800      	ldr	r0, [r0, #0]
 800d994:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d998:	1ab6      	subs	r6, r6, r2
 800d99a:	2e14      	cmp	r6, #20
 800d99c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800d9a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d9a4:	bfa8      	it	ge
 800d9a6:	2614      	movge	r6, #20
 800d9a8:	f8d0 c000 	ldr.w	ip, [r0]
 800d9ac:	b2b6      	uxth	r6, r6
 800d9ae:	fa1f fb8b 	uxth.w	fp, fp
 800d9b2:	455e      	cmp	r6, fp
 800d9b4:	bf94      	ite	ls
 800d9b6:	9600      	strls	r6, [sp, #0]
 800d9b8:	f8cd b000 	strhi.w	fp, [sp]
 800d9bc:	b292      	uxth	r2, r2
 800d9be:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	b289      	uxth	r1, r1
 800d9c6:	47b0      	blx	r6
 800d9c8:	6823      	ldr	r3, [r4, #0]
 800d9ca:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800d9ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9d0:	a907      	add	r1, sp, #28
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	4798      	blx	r3
 800d9d6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800d9da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d9de:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800d9e2:	1a5b      	subs	r3, r3, r1
 800d9e4:	440a      	add	r2, r1
 800d9e6:	b21b      	sxth	r3, r3
 800d9e8:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800d9ec:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f47f aeda 	bne.w	800d7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800d9f6:	fa1f f189 	uxth.w	r1, r9
 800d9fa:	4650      	mov	r0, sl
 800d9fc:	f7ff f9e6 	bl	800cdcc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800da00:	e6d3      	b.n	800d7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800da02:	882e      	ldrh	r6, [r5, #0]
 800da04:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800da08:	42b3      	cmp	r3, r6
 800da0a:	f67f ae98 	bls.w	800d73e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800da0e:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800da12:	ab07      	add	r3, sp, #28
 800da14:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800da18:	6851      	ldr	r1, [r2, #4]
 800da1a:	c303      	stmia	r3!, {r0, r1}
 800da1c:	a807      	add	r0, sp, #28
 800da1e:	f7fb fdce 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 800da22:	b920      	cbnz	r0, 800da2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800da24:	6823      	ldr	r3, [r4, #0]
 800da26:	a907      	add	r1, sp, #28
 800da28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da2a:	4620      	mov	r0, r4
 800da2c:	4798      	blx	r3
 800da2e:	3601      	adds	r6, #1
 800da30:	b2b6      	uxth	r6, r6
 800da32:	e7e7      	b.n	800da04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800da34:	20015438 	.word	0x20015438

0800da38 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800da38:	4b03      	ldr	r3, [pc, #12]	@ (800da48 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	801a      	strh	r2, [r3, #0]
 800da3e:	805a      	strh	r2, [r3, #2]
 800da40:	809a      	strh	r2, [r3, #4]
 800da42:	80da      	strh	r2, [r3, #6]
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	2001547c 	.word	0x2001547c

0800da4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800da4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da50:	4606      	mov	r6, r0
 800da52:	b09d      	sub	sp, #116	@ 0x74
 800da54:	a803      	add	r0, sp, #12
 800da56:	4614      	mov	r4, r2
 800da58:	468a      	mov	sl, r1
 800da5a:	461d      	mov	r5, r3
 800da5c:	f000 fdad 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800da60:	6833      	ldr	r3, [r6, #0]
 800da62:	4630      	mov	r0, r6
 800da64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da66:	4798      	blx	r3
 800da68:	6833      	ldr	r3, [r6, #0]
 800da6a:	4607      	mov	r7, r0
 800da6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da6e:	4630      	mov	r0, r6
 800da70:	4798      	blx	r3
 800da72:	462a      	mov	r2, r5
 800da74:	9000      	str	r0, [sp, #0]
 800da76:	4621      	mov	r1, r4
 800da78:	463b      	mov	r3, r7
 800da7a:	a803      	add	r0, sp, #12
 800da7c:	f000 fdf8 	bl	800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800da80:	2500      	movs	r5, #0
 800da82:	462c      	mov	r4, r5
 800da84:	46a9      	mov	r9, r5
 800da86:	46a8      	mov	r8, r5
 800da88:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800da8c:	2300      	movs	r3, #0
 800da8e:	9302      	str	r3, [sp, #8]
 800da90:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800da94:	429c      	cmp	r4, r3
 800da96:	d002      	beq.n	800da9e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800da98:	455c      	cmp	r4, fp
 800da9a:	bf18      	it	ne
 800da9c:	4625      	movne	r5, r4
 800da9e:	ab02      	add	r3, sp, #8
 800daa0:	4632      	mov	r2, r6
 800daa2:	4651      	mov	r1, sl
 800daa4:	a803      	add	r0, sp, #12
 800daa6:	f001 f90f 	bl	800ecc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800daaa:	4604      	mov	r4, r0
 800daac:	b108      	cbz	r0, 800dab2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800daae:	280a      	cmp	r0, #10
 800dab0:	d10a      	bne.n	800dac8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800dab2:	45c1      	cmp	r9, r8
 800dab4:	bf38      	it	cc
 800dab6:	46c1      	movcc	r9, r8
 800dab8:	f04f 0800 	mov.w	r8, #0
 800dabc:	2c00      	cmp	r4, #0
 800dabe:	d1e5      	bne.n	800da8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800dac0:	4648      	mov	r0, r9
 800dac2:	b01d      	add	sp, #116	@ 0x74
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	9a02      	ldr	r2, [sp, #8]
 800daca:	2a00      	cmp	r2, #0
 800dacc:	d0de      	beq.n	800da8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800dace:	7b57      	ldrb	r7, [r2, #13]
 800dad0:	6833      	ldr	r3, [r6, #0]
 800dad2:	8894      	ldrh	r4, [r2, #4]
 800dad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dad6:	007f      	lsls	r7, r7, #1
 800dad8:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800dadc:	7a97      	ldrb	r7, [r2, #10]
 800dade:	4629      	mov	r1, r5
 800dae0:	4307      	orrs	r7, r0
 800dae2:	4630      	mov	r0, r6
 800dae4:	4798      	blx	r3
 800dae6:	4438      	add	r0, r7
 800dae8:	4480      	add	r8, r0
 800daea:	fa1f f888 	uxth.w	r8, r8
 800daee:	e7e5      	b.n	800dabc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800daf0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800daf0:	b508      	push	{r3, lr}
 800daf2:	6803      	ldr	r3, [r0, #0]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	4798      	blx	r3
 800daf8:	b128      	cbz	r0, 800db06 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800dafa:	7b43      	ldrb	r3, [r0, #13]
 800dafc:	7a80      	ldrb	r0, [r0, #10]
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db04:	4318      	orrs	r0, r3
 800db06:	bd08      	pop	{r3, pc}

0800db08 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800db08:	b40e      	push	{r1, r2, r3}
 800db0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db0c:	b09e      	sub	sp, #120	@ 0x78
 800db0e:	ab23      	add	r3, sp, #140	@ 0x8c
 800db10:	4605      	mov	r5, r0
 800db12:	f853 4b04 	ldr.w	r4, [r3], #4
 800db16:	9303      	str	r3, [sp, #12]
 800db18:	a805      	add	r0, sp, #20
 800db1a:	f000 fd4e 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800db1e:	682b      	ldr	r3, [r5, #0]
 800db20:	4628      	mov	r0, r5
 800db22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db24:	4798      	blx	r3
 800db26:	682b      	ldr	r3, [r5, #0]
 800db28:	4606      	mov	r6, r0
 800db2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db2c:	4628      	mov	r0, r5
 800db2e:	4798      	blx	r3
 800db30:	4633      	mov	r3, r6
 800db32:	ae1e      	add	r6, sp, #120	@ 0x78
 800db34:	4621      	mov	r1, r4
 800db36:	9000      	str	r0, [sp, #0]
 800db38:	9a03      	ldr	r2, [sp, #12]
 800db3a:	2400      	movs	r4, #0
 800db3c:	a805      	add	r0, sp, #20
 800db3e:	f000 fd97 	bl	800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800db42:	f846 4d68 	str.w	r4, [r6, #-104]!
 800db46:	462a      	mov	r2, r5
 800db48:	4633      	mov	r3, r6
 800db4a:	4621      	mov	r1, r4
 800db4c:	a805      	add	r0, sp, #20
 800db4e:	f001 f8bb 	bl	800ecc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800db52:	b1f0      	cbz	r0, 800db92 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800db54:	280a      	cmp	r0, #10
 800db56:	d018      	beq.n	800db8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800db58:	9f04      	ldr	r7, [sp, #16]
 800db5a:	b1b7      	cbz	r7, 800db8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800db5c:	7b78      	ldrb	r0, [r7, #13]
 800db5e:	7a3b      	ldrb	r3, [r7, #8]
 800db60:	88ea      	ldrh	r2, [r5, #6]
 800db62:	00c1      	lsls	r1, r0, #3
 800db64:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800db68:	4319      	orrs	r1, r3
 800db6a:	0643      	lsls	r3, r0, #25
 800db6c:	bf44      	itt	mi
 800db6e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800db72:	b219      	sxthmi	r1, r3
 800db74:	0100      	lsls	r0, r0, #4
 800db76:	79fb      	ldrb	r3, [r7, #7]
 800db78:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800db7c:	4303      	orrs	r3, r0
 800db7e:	4413      	add	r3, r2
 800db80:	1a5b      	subs	r3, r3, r1
 800db82:	b21b      	sxth	r3, r3
 800db84:	429c      	cmp	r4, r3
 800db86:	bfb8      	it	lt
 800db88:	461c      	movlt	r4, r3
 800db8a:	4633      	mov	r3, r6
 800db8c:	462a      	mov	r2, r5
 800db8e:	2100      	movs	r1, #0
 800db90:	e7dc      	b.n	800db4c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800db92:	b2a0      	uxth	r0, r4
 800db94:	b01e      	add	sp, #120	@ 0x78
 800db96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db9a:	b003      	add	sp, #12
 800db9c:	4770      	bx	lr

0800db9e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800db9e:	7a43      	ldrb	r3, [r0, #9]
 800dba0:	8880      	ldrh	r0, [r0, #4]
 800dba2:	4418      	add	r0, r3
 800dba4:	b280      	uxth	r0, r0
 800dba6:	4770      	bx	lr

0800dba8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800dba8:	6803      	ldr	r3, [r0, #0]
 800dbaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbac:	4718      	bx	r3

0800dbae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800dbae:	b40e      	push	{r1, r2, r3}
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	b09d      	sub	sp, #116	@ 0x74
 800dbb4:	ab21      	add	r3, sp, #132	@ 0x84
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dbbc:	9302      	str	r3, [sp, #8]
 800dbbe:	a803      	add	r0, sp, #12
 800dbc0:	f000 fcfb 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800dbc4:	6823      	ldr	r3, [r4, #0]
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbca:	4798      	blx	r3
 800dbcc:	6823      	ldr	r3, [r4, #0]
 800dbce:	4606      	mov	r6, r0
 800dbd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	4798      	blx	r3
 800dbd6:	4633      	mov	r3, r6
 800dbd8:	9000      	str	r0, [sp, #0]
 800dbda:	9a02      	ldr	r2, [sp, #8]
 800dbdc:	4629      	mov	r1, r5
 800dbde:	a803      	add	r0, sp, #12
 800dbe0:	f000 fd46 	bl	800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dbe4:	a803      	add	r0, sp, #12
 800dbe6:	f001 f93d 	bl	800ee64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dbea:	2401      	movs	r4, #1
 800dbec:	b2a3      	uxth	r3, r4
 800dbee:	b140      	cbz	r0, 800dc02 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800dbf0:	280a      	cmp	r0, #10
 800dbf2:	bf08      	it	eq
 800dbf4:	3301      	addeq	r3, #1
 800dbf6:	a803      	add	r0, sp, #12
 800dbf8:	bf08      	it	eq
 800dbfa:	b21c      	sxtheq	r4, r3
 800dbfc:	f001 f932 	bl	800ee64 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dc00:	e7f4      	b.n	800dbec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800dc02:	4618      	mov	r0, r3
 800dc04:	b01d      	add	sp, #116	@ 0x74
 800dc06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc0a:	b003      	add	sp, #12
 800dc0c:	4770      	bx	lr

0800dc0e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800dc0e:	b40e      	push	{r1, r2, r3}
 800dc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc12:	b09e      	sub	sp, #120	@ 0x78
 800dc14:	ab23      	add	r3, sp, #140	@ 0x8c
 800dc16:	4604      	mov	r4, r0
 800dc18:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc1c:	9303      	str	r3, [sp, #12]
 800dc1e:	a805      	add	r0, sp, #20
 800dc20:	f000 fccb 	bl	800e5ba <_ZN8touchgfx12TextProviderC1Ev>
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	4620      	mov	r0, r4
 800dc28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc2a:	4798      	blx	r3
 800dc2c:	6823      	ldr	r3, [r4, #0]
 800dc2e:	4606      	mov	r6, r0
 800dc30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc32:	4620      	mov	r0, r4
 800dc34:	4798      	blx	r3
 800dc36:	4633      	mov	r3, r6
 800dc38:	4629      	mov	r1, r5
 800dc3a:	9000      	str	r0, [sp, #0]
 800dc3c:	9a03      	ldr	r2, [sp, #12]
 800dc3e:	a805      	add	r0, sp, #20
 800dc40:	ad1e      	add	r5, sp, #120	@ 0x78
 800dc42:	f000 fd15 	bl	800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dc46:	2100      	movs	r1, #0
 800dc48:	f845 1d68 	str.w	r1, [r5, #-104]!
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	462b      	mov	r3, r5
 800dc50:	a805      	add	r0, sp, #20
 800dc52:	f001 f839 	bl	800ecc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dc56:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800dc5a:	b1d8      	cbz	r0, 800dc94 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800dc5c:	280a      	cmp	r0, #10
 800dc5e:	d012      	beq.n	800dc86 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800dc60:	9804      	ldr	r0, [sp, #16]
 800dc62:	b180      	cbz	r0, 800dc86 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800dc64:	7b47      	ldrb	r7, [r0, #13]
 800dc66:	88e2      	ldrh	r2, [r4, #6]
 800dc68:	00fb      	lsls	r3, r7, #3
 800dc6a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800dc6e:	7a03      	ldrb	r3, [r0, #8]
 800dc70:	430b      	orrs	r3, r1
 800dc72:	0679      	lsls	r1, r7, #25
 800dc74:	bf44      	itt	mi
 800dc76:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800dc7a:	b21b      	sxthmi	r3, r3
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	b21b      	sxth	r3, r3
 800dc80:	429e      	cmp	r6, r3
 800dc82:	bfa8      	it	ge
 800dc84:	461e      	movge	r6, r3
 800dc86:	462b      	mov	r3, r5
 800dc88:	4622      	mov	r2, r4
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	a805      	add	r0, sp, #20
 800dc8e:	f001 f81b 	bl	800ecc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dc92:	e7e2      	b.n	800dc5a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800dc94:	4630      	mov	r0, r6
 800dc96:	b01e      	add	sp, #120	@ 0x78
 800dc98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dc9c:	b003      	add	sp, #12
 800dc9e:	4770      	bx	lr

0800dca0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800dca0:	b513      	push	{r0, r1, r4, lr}
 800dca2:	6803      	ldr	r3, [r0, #0]
 800dca4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800dca8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800dcac:	f8ad 1004 	strh.w	r1, [sp, #4]
 800dcb0:	2400      	movs	r4, #0
 800dcb2:	9400      	str	r4, [sp, #0]
 800dcb4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	4669      	mov	r1, sp
 800dcbc:	4798      	blx	r3
 800dcbe:	b002      	add	sp, #8
 800dcc0:	bd10      	pop	{r4, pc}

0800dcc2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800dcc2:	b538      	push	{r3, r4, r5, lr}
 800dcc4:	680b      	ldr	r3, [r1, #0]
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	4605      	mov	r5, r0
 800dccc:	4798      	blx	r3
 800dcce:	6823      	ldr	r3, [r4, #0]
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	4798      	blx	r3
 800dcd8:	4628      	mov	r0, r5
 800dcda:	bd38      	pop	{r3, r4, r5, pc}

0800dcdc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800dcdc:	b410      	push	{r4}
 800dcde:	880a      	ldrh	r2, [r1, #0]
 800dce0:	8884      	ldrh	r4, [r0, #4]
 800dce2:	4422      	add	r2, r4
 800dce4:	800a      	strh	r2, [r1, #0]
 800dce6:	88c4      	ldrh	r4, [r0, #6]
 800dce8:	884a      	ldrh	r2, [r1, #2]
 800dcea:	4422      	add	r2, r4
 800dcec:	804a      	strh	r2, [r1, #2]
 800dcee:	6940      	ldr	r0, [r0, #20]
 800dcf0:	b120      	cbz	r0, 800dcfc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800dcf2:	6803      	ldr	r3, [r0, #0]
 800dcf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfa:	4718      	bx	r3
 800dcfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800dd02:	b570      	push	{r4, r5, r6, lr}
 800dd04:	8882      	ldrh	r2, [r0, #4]
 800dd06:	880b      	ldrh	r3, [r1, #0]
 800dd08:	4413      	add	r3, r2
 800dd0a:	800b      	strh	r3, [r1, #0]
 800dd0c:	88c2      	ldrh	r2, [r0, #6]
 800dd0e:	884b      	ldrh	r3, [r1, #2]
 800dd10:	460c      	mov	r4, r1
 800dd12:	4413      	add	r3, r2
 800dd14:	804b      	strh	r3, [r1, #2]
 800dd16:	4605      	mov	r5, r0
 800dd18:	1d01      	adds	r1, r0, #4
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f7fb fc0c 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800dd20:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	dd0b      	ble.n	800dd40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800dd28:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	dd07      	ble.n	800dd40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800dd30:	6968      	ldr	r0, [r5, #20]
 800dd32:	b128      	cbz	r0, 800dd40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800dd34:	6803      	ldr	r3, [r0, #0]
 800dd36:	4621      	mov	r1, r4
 800dd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd3e:	4718      	bx	r3
 800dd40:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dd44 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800dd44:	b570      	push	{r4, r5, r6, lr}
 800dd46:	8882      	ldrh	r2, [r0, #4]
 800dd48:	880b      	ldrh	r3, [r1, #0]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	800b      	strh	r3, [r1, #0]
 800dd4e:	88c2      	ldrh	r2, [r0, #6]
 800dd50:	884b      	ldrh	r3, [r1, #2]
 800dd52:	460c      	mov	r4, r1
 800dd54:	4413      	add	r3, r2
 800dd56:	804b      	strh	r3, [r1, #2]
 800dd58:	4605      	mov	r5, r0
 800dd5a:	1d01      	adds	r1, r0, #4
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f7fb fbeb 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800dd62:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	dd19      	ble.n	800dd9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800dd6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	dd15      	ble.n	800dd9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800dd72:	6968      	ldr	r0, [r5, #20]
 800dd74:	b128      	cbz	r0, 800dd82 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800dd76:	6803      	ldr	r3, [r0, #0]
 800dd78:	4621      	mov	r1, r4
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd80:	4718      	bx	r3
 800dd82:	4b07      	ldr	r3, [pc, #28]	@ (800dda0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	3304      	adds	r3, #4
 800dd88:	429d      	cmp	r5, r3
 800dd8a:	d108      	bne.n	800dd9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800dd8c:	f7fe feea 	bl	800cb64 <_ZN8touchgfx11Application11getInstanceEv>
 800dd90:	6803      	ldr	r3, [r0, #0]
 800dd92:	6821      	ldr	r1, [r4, #0]
 800dd94:	6862      	ldr	r2, [r4, #4]
 800dd96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd9c:	4718      	bx	r3
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}
 800dda0:	20015474 	.word	0x20015474

0800dda4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800dda4:	b570      	push	{r4, r5, r6, lr}
 800dda6:	4604      	mov	r4, r0
 800dda8:	4616      	mov	r6, r2
 800ddaa:	460d      	mov	r5, r1
 800ddac:	b901      	cbnz	r1, 800ddb0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800ddae:	b192      	cbz	r2, 800ddd6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800ddb0:	6823      	ldr	r3, [r4, #0]
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	699b      	ldr	r3, [r3, #24]
 800ddb6:	4798      	blx	r3
 800ddb8:	88e2      	ldrh	r2, [r4, #6]
 800ddba:	88a1      	ldrh	r1, [r4, #4]
 800ddbc:	4432      	add	r2, r6
 800ddbe:	4429      	add	r1, r5
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	b212      	sxth	r2, r2
 800ddc4:	b209      	sxth	r1, r1
 800ddc6:	f7f5 f9f9 	bl	80031bc <_ZN8touchgfx8Drawable5setXYEss>
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	4620      	mov	r0, r4
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddd4:	4718      	bx	r3
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}

0800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	4604      	mov	r4, r0
 800dddc:	4608      	mov	r0, r1
 800ddde:	2300      	movs	r3, #0
 800dde0:	8023      	strh	r3, [r4, #0]
 800dde2:	8063      	strh	r3, [r4, #2]
 800dde4:	6803      	ldr	r3, [r0, #0]
 800dde6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ddea:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800ddee:	80a1      	strh	r1, [r4, #4]
 800ddf0:	80e2      	strh	r2, [r4, #6]
 800ddf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	4798      	blx	r3
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	bd10      	pop	{r4, pc}

0800ddfc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800ddfc:	b530      	push	{r4, r5, lr}
 800ddfe:	8083      	strh	r3, [r0, #4]
 800de00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800de04:	80c3      	strh	r3, [r0, #6]
 800de06:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800de0a:	7203      	strb	r3, [r0, #8]
 800de0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800de10:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800de14:	7243      	strb	r3, [r0, #9]
 800de16:	7a83      	ldrb	r3, [r0, #10]
 800de18:	6141      	str	r1, [r0, #20]
 800de1a:	f365 0306 	bfi	r3, r5, #0, #7
 800de1e:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800de22:	8302      	strh	r2, [r0, #24]
 800de24:	f365 13c7 	bfi	r3, r5, #7, #1
 800de28:	7283      	strb	r3, [r0, #10]
 800de2a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800de2e:	72c3      	strb	r3, [r0, #11]
 800de30:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800de34:	7303      	strb	r3, [r0, #12]
 800de36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800de3a:	81c3      	strh	r3, [r0, #14]
 800de3c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800de40:	8203      	strh	r3, [r0, #16]
 800de42:	4b01      	ldr	r3, [pc, #4]	@ (800de48 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800de44:	6003      	str	r3, [r0, #0]
 800de46:	bd30      	pop	{r4, r5, pc}
 800de48:	08015950 	.word	0x08015950

0800de4c <_ZNK8touchgfx9ConstFont4findEt>:
 800de4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de4e:	6944      	ldr	r4, [r0, #20]
 800de50:	b3bc      	cbz	r4, 800dec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800de52:	88a3      	ldrh	r3, [r4, #4]
 800de54:	8b02      	ldrh	r2, [r0, #24]
 800de56:	1acb      	subs	r3, r1, r3
 800de58:	f102 32ff 	add.w	r2, r2, #4294967295
 800de5c:	d431      	bmi.n	800dec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800de5e:	4293      	cmp	r3, r2
 800de60:	dd0c      	ble.n	800de7c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800de62:	230e      	movs	r3, #14
 800de64:	fb03 4302 	mla	r3, r3, r2, r4
 800de68:	889b      	ldrh	r3, [r3, #4]
 800de6a:	1a5b      	subs	r3, r3, r1
 800de6c:	1ad3      	subs	r3, r2, r3
 800de6e:	429a      	cmp	r2, r3
 800de70:	db27      	blt.n	800dec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800de72:	2b00      	cmp	r3, #0
 800de74:	bfbc      	itt	lt
 800de76:	2302      	movlt	r3, #2
 800de78:	fb92 f3f3 	sdivlt	r3, r2, r3
 800de7c:	2500      	movs	r5, #0
 800de7e:	260e      	movs	r6, #14
 800de80:	4295      	cmp	r5, r2
 800de82:	dc1e      	bgt.n	800dec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800de84:	fb06 4003 	mla	r0, r6, r3, r4
 800de88:	8887      	ldrh	r7, [r0, #4]
 800de8a:	42b9      	cmp	r1, r7
 800de8c:	d01a      	beq.n	800dec4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800de8e:	d20d      	bcs.n	800deac <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800de90:	1e5a      	subs	r2, r3, #1
 800de92:	4295      	cmp	r5, r2
 800de94:	dc15      	bgt.n	800dec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800de96:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800de9a:	1a5b      	subs	r3, r3, r1
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	429a      	cmp	r2, r3
 800dea0:	db0f      	blt.n	800dec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dea2:	429d      	cmp	r5, r3
 800dea4:	ddec      	ble.n	800de80 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dea6:	1953      	adds	r3, r2, r5
 800dea8:	105b      	asrs	r3, r3, #1
 800deaa:	e7e9      	b.n	800de80 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800deac:	1c5d      	adds	r5, r3, #1
 800deae:	42aa      	cmp	r2, r5
 800deb0:	db07      	blt.n	800dec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800deb2:	8a43      	ldrh	r3, [r0, #18]
 800deb4:	1acb      	subs	r3, r1, r3
 800deb6:	442b      	add	r3, r5
 800deb8:	429d      	cmp	r5, r3
 800deba:	dc02      	bgt.n	800dec2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800debc:	429a      	cmp	r2, r3
 800debe:	dadf      	bge.n	800de80 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dec0:	e7f1      	b.n	800dea6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800dec2:	2000      	movs	r0, #0
 800dec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dec6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800dec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec8:	4604      	mov	r4, r0
 800deca:	4617      	mov	r7, r2
 800decc:	461e      	mov	r6, r3
 800dece:	b911      	cbnz	r1, 800ded6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800ded0:	2500      	movs	r5, #0
 800ded2:	4628      	mov	r0, r5
 800ded4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ded6:	290a      	cmp	r1, #10
 800ded8:	d0fa      	beq.n	800ded0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800deda:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800dede:	4291      	cmp	r1, r2
 800dee0:	d0f6      	beq.n	800ded0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dee2:	f242 020b 	movw	r2, #8203	@ 0x200b
 800dee6:	4291      	cmp	r1, r2
 800dee8:	d0f2      	beq.n	800ded0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800deea:	f7ff ffaf 	bl	800de4c <_ZNK8touchgfx9ConstFont4findEt>
 800deee:	4605      	mov	r5, r0
 800def0:	b950      	cbnz	r0, 800df08 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	4620      	mov	r0, r4
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	4798      	blx	r3
 800defa:	4601      	mov	r1, r0
 800defc:	4620      	mov	r0, r4
 800defe:	f7ff ffa5 	bl	800de4c <_ZNK8touchgfx9ConstFont4findEt>
 800df02:	4605      	mov	r5, r0
 800df04:	2800      	cmp	r0, #0
 800df06:	d0e3      	beq.n	800ded0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	4629      	mov	r1, r5
 800df0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df0e:	4620      	mov	r0, r4
 800df10:	4798      	blx	r3
 800df12:	6038      	str	r0, [r7, #0]
 800df14:	6823      	ldr	r3, [r4, #0]
 800df16:	4620      	mov	r0, r4
 800df18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df1a:	4798      	blx	r3
 800df1c:	7030      	strb	r0, [r6, #0]
 800df1e:	e7d8      	b.n	800ded2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800df20 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800df20:	2000      	movs	r0, #0
 800df22:	4770      	bx	lr

0800df24 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800df24:	2001      	movs	r0, #1
 800df26:	4770      	bx	lr

0800df28 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800df28:	2002      	movs	r0, #2
 800df2a:	4770      	bx	lr

0800df2c <_ZN8touchgfx6ScreenD1Ev>:
 800df2c:	4770      	bx	lr

0800df2e <_ZN8touchgfx12GestureEventD1Ev>:
 800df2e:	4770      	bx	lr

0800df30 <_ZN8touchgfx9DragEventD1Ev>:
 800df30:	4770      	bx	lr

0800df32 <_ZN8touchgfx10ClickEventD1Ev>:
 800df32:	4770      	bx	lr

0800df34 <_ZN8touchgfx10ClickEventD0Ev>:
 800df34:	b510      	push	{r4, lr}
 800df36:	210c      	movs	r1, #12
 800df38:	4604      	mov	r4, r0
 800df3a:	f004 fd71 	bl	8012a20 <_ZdlPvj>
 800df3e:	4620      	mov	r0, r4
 800df40:	bd10      	pop	{r4, pc}

0800df42 <_ZN8touchgfx9DragEventD0Ev>:
 800df42:	b510      	push	{r4, lr}
 800df44:	2110      	movs	r1, #16
 800df46:	4604      	mov	r4, r0
 800df48:	f004 fd6a 	bl	8012a20 <_ZdlPvj>
 800df4c:	4620      	mov	r0, r4
 800df4e:	bd10      	pop	{r4, pc}

0800df50 <_ZN8touchgfx12GestureEventD0Ev>:
 800df50:	b510      	push	{r4, lr}
 800df52:	210c      	movs	r1, #12
 800df54:	4604      	mov	r4, r0
 800df56:	f004 fd63 	bl	8012a20 <_ZdlPvj>
 800df5a:	4620      	mov	r0, r4
 800df5c:	bd10      	pop	{r4, pc}

0800df5e <_ZN8touchgfx6ScreenD0Ev>:
 800df5e:	b510      	push	{r4, lr}
 800df60:	213c      	movs	r1, #60	@ 0x3c
 800df62:	4604      	mov	r4, r0
 800df64:	f004 fd5c 	bl	8012a20 <_ZdlPvj>
 800df68:	4620      	mov	r0, r4
 800df6a:	bd10      	pop	{r4, pc}

0800df6c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800df6c:	b530      	push	{r4, r5, lr}
 800df6e:	460d      	mov	r5, r1
 800df70:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800df72:	b087      	sub	sp, #28
 800df74:	4604      	mov	r4, r0
 800df76:	b301      	cbz	r1, 800dfba <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800df78:	a801      	add	r0, sp, #4
 800df7a:	f7ff ff2d 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800df7e:	892a      	ldrh	r2, [r5, #8]
 800df80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800df84:	7928      	ldrb	r0, [r5, #4]
 800df86:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800df8a:	f88d 0010 	strb.w	r0, [sp, #16]
 800df8e:	1ad2      	subs	r2, r2, r3
 800df90:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800df92:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800df94:	f8ad 1012 	strh.w	r1, [sp, #18]
 800df98:	441a      	add	r2, r3
 800df9a:	896b      	ldrh	r3, [r5, #10]
 800df9c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800dfa0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800dfa4:	1b5b      	subs	r3, r3, r5
 800dfa6:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800dfa8:	442b      	add	r3, r5
 800dfaa:	4d05      	ldr	r5, [pc, #20]	@ (800dfc0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800dfac:	9503      	str	r5, [sp, #12]
 800dfae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dfb2:	6803      	ldr	r3, [r0, #0]
 800dfb4:	a903      	add	r1, sp, #12
 800dfb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfb8:	4798      	blx	r3
 800dfba:	b007      	add	sp, #28
 800dfbc:	bd30      	pop	{r4, r5, pc}
 800dfbe:	bf00      	nop
 800dfc0:	080159e0 	.word	0x080159e0

0800dfc4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800dfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800dfca:	b08a      	sub	sp, #40	@ 0x28
 800dfcc:	4604      	mov	r4, r0
 800dfce:	460d      	mov	r5, r1
 800dfd0:	b113      	cbz	r3, 800dfd8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800dfd2:	790b      	ldrb	r3, [r1, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d044      	beq.n	800e062 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800dfd8:	f104 0804 	add.w	r8, r4, #4
 800dfdc:	4641      	mov	r1, r8
 800dfde:	a803      	add	r0, sp, #12
 800dfe0:	f7ff fefa 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dfe4:	792b      	ldrb	r3, [r5, #4]
 800dfe6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800dfea:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800dfee:	b983      	cbnz	r3, 800e012 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800dff0:	892a      	ldrh	r2, [r5, #8]
 800dff2:	88e9      	ldrh	r1, [r5, #6]
 800dff4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800dff8:	1b92      	subs	r2, r2, r6
 800dffa:	1bc9      	subs	r1, r1, r7
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	b212      	sxth	r2, r2
 800e006:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800e00a:	b209      	sxth	r1, r1
 800e00c:	4640      	mov	r0, r8
 800e00e:	f7fb f9af 	bl	8009370 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e012:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e014:	b329      	cbz	r1, 800e062 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e016:	a805      	add	r0, sp, #20
 800e018:	f7ff fede 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e01c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e020:	792b      	ldrb	r3, [r5, #4]
 800e022:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e024:	f88d 3020 	strb.w	r3, [sp, #32]
 800e028:	1abf      	subs	r7, r7, r2
 800e02a:	88ea      	ldrh	r2, [r5, #6]
 800e02c:	4417      	add	r7, r2
 800e02e:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800e030:	4417      	add	r7, r2
 800e032:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e036:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800e03a:	1ab6      	subs	r6, r6, r2
 800e03c:	892a      	ldrh	r2, [r5, #8]
 800e03e:	4416      	add	r6, r2
 800e040:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e042:	4416      	add	r6, r2
 800e044:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800e048:	4a07      	ldr	r2, [pc, #28]	@ (800e068 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e04a:	9207      	str	r2, [sp, #28]
 800e04c:	2600      	movs	r6, #0
 800e04e:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800e052:	6803      	ldr	r3, [r0, #0]
 800e054:	a907      	add	r1, sp, #28
 800e056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e058:	4798      	blx	r3
 800e05a:	792b      	ldrb	r3, [r5, #4]
 800e05c:	b10b      	cbz	r3, 800e062 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e05e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800e062:	b00a      	add	sp, #40	@ 0x28
 800e064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e068:	080159b8 	.word	0x080159b8

0800e06c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e070:	460c      	mov	r4, r1
 800e072:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e074:	b088      	sub	sp, #32
 800e076:	4605      	mov	r5, r0
 800e078:	2900      	cmp	r1, #0
 800e07a:	d06d      	beq.n	800e158 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e07c:	4668      	mov	r0, sp
 800e07e:	f7ff feab 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e082:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800e084:	88e3      	ldrh	r3, [r4, #6]
 800e086:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e08a:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e08e:	440b      	add	r3, r1
 800e090:	b21b      	sxth	r3, r3
 800e092:	4543      	cmp	r3, r8
 800e094:	db31      	blt.n	800e0fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e096:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e09a:	44c4      	add	ip, r8
 800e09c:	fa0f fc8c 	sxth.w	ip, ip
 800e0a0:	4563      	cmp	r3, ip
 800e0a2:	da2a      	bge.n	800e0fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e0a4:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800e0a6:	8926      	ldrh	r6, [r4, #8]
 800e0a8:	4416      	add	r6, r2
 800e0aa:	b236      	sxth	r6, r6
 800e0ac:	42be      	cmp	r6, r7
 800e0ae:	db24      	blt.n	800e0fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e0b0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e0b4:	4438      	add	r0, r7
 800e0b6:	b200      	sxth	r0, r0
 800e0b8:	4286      	cmp	r6, r0
 800e0ba:	da1e      	bge.n	800e0fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e0bc:	8963      	ldrh	r3, [r4, #10]
 800e0be:	4419      	add	r1, r3
 800e0c0:	b209      	sxth	r1, r1
 800e0c2:	4541      	cmp	r1, r8
 800e0c4:	db08      	blt.n	800e0d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e0c6:	4561      	cmp	r1, ip
 800e0c8:	da06      	bge.n	800e0d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e0ca:	89a3      	ldrh	r3, [r4, #12]
 800e0cc:	441a      	add	r2, r3
 800e0ce:	b212      	sxth	r2, r2
 800e0d0:	42ba      	cmp	r2, r7
 800e0d2:	db01      	blt.n	800e0d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e0d4:	4282      	cmp	r2, r0
 800e0d6:	db10      	blt.n	800e0fa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e0d8:	4b21      	ldr	r3, [pc, #132]	@ (800e160 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e0da:	9304      	str	r3, [sp, #16]
 800e0dc:	2302      	movs	r3, #2
 800e0de:	f88d 3014 	strb.w	r3, [sp, #20]
 800e0e2:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e0ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e0ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e0f2:	6803      	ldr	r3, [r0, #0]
 800e0f4:	a904      	add	r1, sp, #16
 800e0f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0f8:	4798      	blx	r3
 800e0fa:	1d29      	adds	r1, r5, #4
 800e0fc:	a802      	add	r0, sp, #8
 800e0fe:	f7ff fe6b 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e102:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e106:	88e0      	ldrh	r0, [r4, #6]
 800e108:	7921      	ldrb	r1, [r4, #4]
 800e10a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800e10e:	8922      	ldrh	r2, [r4, #8]
 800e110:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800e112:	f88d 1014 	strb.w	r1, [sp, #20]
 800e116:	eba3 0808 	sub.w	r8, r3, r8
 800e11a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e11e:	1bdf      	subs	r7, r3, r7
 800e120:	b2bb      	uxth	r3, r7
 800e122:	fa1f f888 	uxth.w	r8, r8
 800e126:	8967      	ldrh	r7, [r4, #10]
 800e128:	89a4      	ldrh	r4, [r4, #12]
 800e12a:	4440      	add	r0, r8
 800e12c:	4460      	add	r0, ip
 800e12e:	441a      	add	r2, r3
 800e130:	44b8      	add	r8, r7
 800e132:	4423      	add	r3, r4
 800e134:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e138:	4433      	add	r3, r6
 800e13a:	4432      	add	r2, r6
 800e13c:	44e0      	add	r8, ip
 800e13e:	4c09      	ldr	r4, [pc, #36]	@ (800e164 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e140:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e142:	9404      	str	r4, [sp, #16]
 800e144:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e148:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e14c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e150:	6803      	ldr	r3, [r0, #0]
 800e152:	a904      	add	r1, sp, #16
 800e154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e156:	4798      	blx	r3
 800e158:	b008      	add	sp, #32
 800e15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15e:	bf00      	nop
 800e160:	080159b8 	.word	0x080159b8
 800e164:	080159cc 	.word	0x080159cc

0800e168 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e16a:	4604      	mov	r4, r0
 800e16c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e170:	3201      	adds	r2, #1
 800e172:	d112      	bne.n	800e19a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e174:	6803      	ldr	r3, [r0, #0]
 800e176:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e17a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e17e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e182:	2500      	movs	r5, #0
 800e184:	9500      	str	r5, [sp, #0]
 800e186:	466d      	mov	r5, sp
 800e188:	4629      	mov	r1, r5
 800e18a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e190:	4798      	blx	r3
 800e192:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e196:	e884 0003 	stmia.w	r4, {r0, r1}
 800e19a:	4620      	mov	r0, r4
 800e19c:	b003      	add	sp, #12
 800e19e:	bd30      	pop	{r4, r5, pc}

0800e1a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e1a0:	b513      	push	{r0, r1, r4, lr}
 800e1a2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	d109      	bne.n	800e1c0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e1ac:	4601      	mov	r1, r0
 800e1ae:	4668      	mov	r0, sp
 800e1b0:	f7ff fe12 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e1b4:	f8bd 3000 	ldrh.w	r3, [sp]
 800e1b8:	8423      	strh	r3, [r4, #32]
 800e1ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e1be:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e1c0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e1c4:	b002      	add	sp, #8
 800e1c6:	bd10      	pop	{r4, pc}

0800e1c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e1c8:	b513      	push	{r0, r1, r4, lr}
 800e1ca:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	d109      	bne.n	800e1e8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e1d4:	4601      	mov	r1, r0
 800e1d6:	4668      	mov	r0, sp
 800e1d8:	f7ff fdfe 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e1dc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e1e0:	8423      	strh	r3, [r4, #32]
 800e1e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e1e6:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e1e8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800e1ec:	b002      	add	sp, #8
 800e1ee:	bd10      	pop	{r4, pc}

0800e1f0 <_ZN8touchgfx6ScreenC1Ev>:
 800e1f0:	b570      	push	{r4, r5, r6, lr}
 800e1f2:	4605      	mov	r5, r0
 800e1f4:	4b16      	ldr	r3, [pc, #88]	@ (800e250 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e1f6:	f845 3b04 	str.w	r3, [r5], #4
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	8103      	strh	r3, [r0, #8]
 800e1fe:	8143      	strh	r3, [r0, #10]
 800e200:	8183      	strh	r3, [r0, #12]
 800e202:	81c3      	strh	r3, [r0, #14]
 800e204:	8203      	strh	r3, [r0, #16]
 800e206:	8243      	strh	r3, [r0, #18]
 800e208:	8283      	strh	r3, [r0, #20]
 800e20a:	82c3      	strh	r3, [r0, #22]
 800e20c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e210:	6203      	str	r3, [r0, #32]
 800e212:	8483      	strh	r3, [r0, #36]	@ 0x24
 800e214:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e216:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800e21a:	4a0e      	ldr	r2, [pc, #56]	@ (800e254 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e21c:	6343      	str	r3, [r0, #52]	@ 0x34
 800e21e:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800e222:	4b0d      	ldr	r3, [pc, #52]	@ (800e258 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e224:	6042      	str	r2, [r0, #4]
 800e226:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e22a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e22c:	4a0b      	ldr	r2, [pc, #44]	@ (800e25c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e22e:	4604      	mov	r4, r0
 800e230:	2101      	movs	r1, #1
 800e232:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800e236:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e23a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e23e:	4628      	mov	r0, r5
 800e240:	4798      	blx	r3
 800e242:	6863      	ldr	r3, [r4, #4]
 800e244:	4628      	mov	r0, r5
 800e246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e248:	4631      	mov	r1, r6
 800e24a:	4798      	blx	r3
 800e24c:	4620      	mov	r0, r4
 800e24e:	bd70      	pop	{r4, r5, r6, pc}
 800e250:	080159f4 	.word	0x080159f4
 800e254:	080155fc 	.word	0x080155fc
 800e258:	2001542e 	.word	0x2001542e
 800e25c:	2001542c 	.word	0x2001542c

0800e260 <_ZN8touchgfx6Screen4drawEv>:
 800e260:	b507      	push	{r0, r1, r2, lr}
 800e262:	4b09      	ldr	r3, [pc, #36]	@ (800e288 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e264:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e268:	4b08      	ldr	r3, [pc, #32]	@ (800e28c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e26a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e26e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e272:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e276:	6803      	ldr	r3, [r0, #0]
 800e278:	2100      	movs	r1, #0
 800e27a:	9100      	str	r1, [sp, #0]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	4669      	mov	r1, sp
 800e280:	4798      	blx	r3
 800e282:	b003      	add	sp, #12
 800e284:	f85d fb04 	ldr.w	pc, [sp], #4
 800e288:	2001542c 	.word	0x2001542c
 800e28c:	2001542e 	.word	0x2001542e

0800e290 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	b089      	sub	sp, #36	@ 0x24
 800e29c:	4680      	mov	r8, r0
 800e29e:	460c      	mov	r4, r1
 800e2a0:	4615      	mov	r5, r2
 800e2a2:	dd0e      	ble.n	800e2c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e2a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	dd0a      	ble.n	800e2c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f7ff ff5b 	bl	800e168 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	f7fe fb77 	bl	800c9a6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e2b8:	69eb      	ldr	r3, [r5, #28]
 800e2ba:	b928      	cbnz	r0, 800e2c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e2bc:	461d      	mov	r5, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1f4      	bne.n	800e2ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e2c2:	b009      	add	sp, #36	@ 0x24
 800e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c8:	ae04      	add	r6, sp, #16
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f000 80b5 	beq.w	800e43a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	a802      	add	r0, sp, #8
 800e2d8:	4798      	blx	r3
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f7ff ff60 	bl	800e1a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e2e0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e2e4:	4407      	add	r7, r0
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	f7ff ff6e 	bl	800e1c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e2ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e2f0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e2f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e2f8:	4418      	add	r0, r3
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e300:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e304:	b23f      	sxth	r7, r7
 800e306:	4630      	mov	r0, r6
 800e308:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e30c:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e310:	f7fb f912 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800e314:	4628      	mov	r0, r5
 800e316:	f7ff ff27 	bl	800e168 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e31a:	4602      	mov	r2, r0
 800e31c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e320:	ab06      	add	r3, sp, #24
 800e322:	e883 0003 	stmia.w	r3, {r0, r1}
 800e326:	4611      	mov	r1, r2
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fb f905 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800e32e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e332:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e336:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e33a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e33e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e342:	4299      	cmp	r1, r3
 800e344:	d10b      	bne.n	800e35e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e346:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e34a:	4552      	cmp	r2, sl
 800e34c:	d107      	bne.n	800e35e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e34e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e352:	455a      	cmp	r2, fp
 800e354:	d103      	bne.n	800e35e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e356:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e35a:	454a      	cmp	r2, r9
 800e35c:	d06d      	beq.n	800e43a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e35e:	f1bb 0f00 	cmp.w	fp, #0
 800e362:	dd65      	ble.n	800e430 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e364:	f1b9 0f00 	cmp.w	r9, #0
 800e368:	dd62      	ble.n	800e430 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e36a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e36e:	fa1f f08a 	uxth.w	r0, sl
 800e372:	4552      	cmp	r2, sl
 800e374:	9000      	str	r0, [sp, #0]
 800e376:	da12      	bge.n	800e39e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e378:	9301      	str	r3, [sp, #4]
 800e37a:	9b00      	ldr	r3, [sp, #0]
 800e37c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e380:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e384:	1a9a      	subs	r2, r3, r2
 800e386:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e38a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e38e:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e392:	69ea      	ldr	r2, [r5, #28]
 800e394:	4631      	mov	r1, r6
 800e396:	4640      	mov	r0, r8
 800e398:	f7ff ff7a 	bl	800e290 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e39c:	9b01      	ldr	r3, [sp, #4]
 800e39e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	b29f      	uxth	r7, r3
 800e3a6:	da0d      	bge.n	800e3c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e3a8:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e3ac:	1aba      	subs	r2, r7, r2
 800e3ae:	f8ad a012 	strh.w	sl, [sp, #18]
 800e3b2:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e3b6:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e3ba:	69ea      	ldr	r2, [r5, #28]
 800e3bc:	4631      	mov	r1, r6
 800e3be:	4640      	mov	r0, r8
 800e3c0:	f7ff ff66 	bl	800e290 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e3c4:	8822      	ldrh	r2, [r4, #0]
 800e3c6:	88a3      	ldrh	r3, [r4, #4]
 800e3c8:	445f      	add	r7, fp
 800e3ca:	4413      	add	r3, r2
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	b2bf      	uxth	r7, r7
 800e3d0:	b23a      	sxth	r2, r7
 800e3d2:	b219      	sxth	r1, r3
 800e3d4:	4291      	cmp	r1, r2
 800e3d6:	dd0d      	ble.n	800e3f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e3d8:	1bdb      	subs	r3, r3, r7
 800e3da:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e3de:	f8ad a012 	strh.w	sl, [sp, #18]
 800e3e2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e3e6:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e3ea:	69ea      	ldr	r2, [r5, #28]
 800e3ec:	4631      	mov	r1, r6
 800e3ee:	4640      	mov	r0, r8
 800e3f0:	f7ff ff4e 	bl	800e290 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e3f4:	88e2      	ldrh	r2, [r4, #6]
 800e3f6:	8863      	ldrh	r3, [r4, #2]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	9a00      	ldr	r2, [sp, #0]
 800e3fc:	444a      	add	r2, r9
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	fa1f f982 	uxth.w	r9, r2
 800e404:	fa0f f289 	sxth.w	r2, r9
 800e408:	b219      	sxth	r1, r3
 800e40a:	428a      	cmp	r2, r1
 800e40c:	da15      	bge.n	800e43a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e40e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e412:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e416:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e41a:	eba3 0309 	sub.w	r3, r3, r9
 800e41e:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e422:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e426:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e42a:	69ea      	ldr	r2, [r5, #28]
 800e42c:	4631      	mov	r1, r6
 800e42e:	e001      	b.n	800e434 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e430:	69ea      	ldr	r2, [r5, #28]
 800e432:	4621      	mov	r1, r4
 800e434:	4640      	mov	r0, r8
 800e436:	f7ff ff2b 	bl	800e290 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e43a:	4628      	mov	r0, r5
 800e43c:	f7ff fe94 	bl	800e168 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e440:	6861      	ldr	r1, [r4, #4]
 800e442:	4602      	mov	r2, r0
 800e444:	6820      	ldr	r0, [r4, #0]
 800e446:	4633      	mov	r3, r6
 800e448:	c303      	stmia	r3!, {r0, r1}
 800e44a:	4611      	mov	r1, r2
 800e44c:	4630      	mov	r0, r6
 800e44e:	f7fb f873 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800e452:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e456:	2b00      	cmp	r3, #0
 800e458:	f77f af33 	ble.w	800e2c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e45c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e460:	2b00      	cmp	r3, #0
 800e462:	f77f af2e 	ble.w	800e2c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e466:	4628      	mov	r0, r5
 800e468:	f7ff fe9a 	bl	800e1a0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e46c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e470:	1a18      	subs	r0, r3, r0
 800e472:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e476:	4628      	mov	r0, r5
 800e478:	f7ff fea6 	bl	800e1c8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e47c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e480:	1a18      	subs	r0, r3, r0
 800e482:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e486:	682b      	ldr	r3, [r5, #0]
 800e488:	4631      	mov	r1, r6
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	4628      	mov	r0, r5
 800e48e:	4798      	blx	r3
 800e490:	e717      	b.n	800e2c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e492 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e492:	b570      	push	{r4, r5, r6, lr}
 800e494:	460c      	mov	r4, r1
 800e496:	b086      	sub	sp, #24
 800e498:	1d06      	adds	r6, r0, #4
 800e49a:	2300      	movs	r3, #0
 800e49c:	4631      	mov	r1, r6
 800e49e:	4605      	mov	r5, r0
 800e4a0:	a802      	add	r0, sp, #8
 800e4a2:	9301      	str	r3, [sp, #4]
 800e4a4:	f7ff fc98 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e4a8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e4ac:	8822      	ldrh	r2, [r4, #0]
 800e4ae:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e4b2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e4b6:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e4ba:	1ad2      	subs	r2, r2, r3
 800e4bc:	8863      	ldrh	r3, [r4, #2]
 800e4be:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e4c2:	1a5b      	subs	r3, r3, r1
 800e4c4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e4c8:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e4cc:	aa01      	add	r2, sp, #4
 800e4ce:	a904      	add	r1, sp, #16
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e4d6:	f7fb f907 	bl	80096e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e4da:	9a01      	ldr	r2, [sp, #4]
 800e4dc:	b11a      	cbz	r2, 800e4e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e4de:	4621      	mov	r1, r4
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	f7ff fed5 	bl	800e290 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e4e6:	b006      	add	sp, #24
 800e4e8:	bd70      	pop	{r4, r5, r6, pc}

0800e4ea <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e4ea:	b530      	push	{r4, r5, lr}
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e4f4:	b085      	sub	sp, #20
 800e4f6:	460d      	mov	r5, r1
 800e4f8:	6851      	ldr	r1, [r2, #4]
 800e4fa:	466b      	mov	r3, sp
 800e4fc:	c303      	stmia	r3!, {r0, r1}
 800e4fe:	4629      	mov	r1, r5
 800e500:	4668      	mov	r0, sp
 800e502:	f7fb f819 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 800e506:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e50a:	b12b      	cbz	r3, 800e518 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e50c:	4669      	mov	r1, sp
 800e50e:	4620      	mov	r0, r4
 800e510:	f7ff ffbf 	bl	800e492 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e514:	b005      	add	sp, #20
 800e516:	bd30      	pop	{r4, r5, pc}
 800e518:	3404      	adds	r4, #4
 800e51a:	4621      	mov	r1, r4
 800e51c:	a802      	add	r0, sp, #8
 800e51e:	f7ff fc5b 	bl	800ddd8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e522:	f8bd 3000 	ldrh.w	r3, [sp]
 800e526:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e52a:	1a9b      	subs	r3, r3, r2
 800e52c:	f8ad 3000 	strh.w	r3, [sp]
 800e530:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e534:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e538:	4669      	mov	r1, sp
 800e53a:	1a9b      	subs	r3, r3, r2
 800e53c:	4620      	mov	r0, r4
 800e53e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e542:	f7fb f898 	bl	8009676 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e546:	e7e5      	b.n	800e514 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e548 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e548:	680a      	ldr	r2, [r1, #0]
 800e54a:	460b      	mov	r3, r1
 800e54c:	6992      	ldr	r2, [r2, #24]
 800e54e:	1d01      	adds	r1, r0, #4
 800e550:	4618      	mov	r0, r3
 800e552:	4710      	bx	r2

0800e554 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800e554:	4298      	cmp	r0, r3
 800e556:	d200      	bcs.n	800e55a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800e558:	b913      	cbnz	r3, 800e560 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800e55a:	440a      	add	r2, r1
 800e55c:	b210      	sxth	r0, r2
 800e55e:	4770      	bx	lr
 800e560:	ee07 0a90 	vmov	s15, r0
 800e564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e568:	ee07 3a90 	vmov	s15, r3
 800e56c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e574:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e578:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e57c:	ee07 2a90 	vmov	s15, r2
 800e580:	ee67 5a07 	vmul.f32	s11, s14, s14
 800e584:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800e588:	eee5 6a87 	vfma.f32	s13, s11, s14
 800e58c:	ee07 1a90 	vmov	s15, r1
 800e590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e594:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e598:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e59c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a4:	bfcc      	ite	gt
 800e5a6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800e5aa:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800e5ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5b2:	ee17 3a90 	vmov	r3, s15
 800e5b6:	b218      	sxth	r0, r3
 800e5b8:	4770      	bx	lr

0800e5ba <_ZN8touchgfx12TextProviderC1Ev>:
 800e5ba:	b538      	push	{r3, r4, r5, lr}
 800e5bc:	2500      	movs	r5, #0
 800e5be:	2302      	movs	r3, #2
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	e9c0 5500 	strd	r5, r5, [r0]
 800e5c6:	7403      	strb	r3, [r0, #16]
 800e5c8:	6145      	str	r5, [r0, #20]
 800e5ca:	7605      	strb	r5, [r0, #24]
 800e5cc:	83c5      	strh	r5, [r0, #30]
 800e5ce:	8405      	strh	r5, [r0, #32]
 800e5d0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e5d2:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e5d4:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e5d6:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e5da:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e5de:	220e      	movs	r2, #14
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	304c      	adds	r0, #76	@ 0x4c
 800e5e4:	f004 fc51 	bl	8012e8a <memset>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e5f0:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e5f4:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e5f8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e5fc:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e600:	f7f5 faba 	bl	8003b78 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e604:	4620      	mov	r0, r4
 800e606:	bd38      	pop	{r3, r4, r5, pc}

0800e608 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800e608:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e60a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e60e:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800e610:	fab0 f080 	clz	r0, r0
 800e614:	0940      	lsrs	r0, r0, #5
 800e616:	4770      	bx	lr

0800e618 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e618:	b530      	push	{r4, r5, lr}
 800e61a:	2500      	movs	r5, #0
 800e61c:	2401      	movs	r4, #1
 800e61e:	6843      	ldr	r3, [r0, #4]
 800e620:	b913      	cbnz	r3, 800e628 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e622:	6803      	ldr	r3, [r0, #0]
 800e624:	b313      	cbz	r3, 800e66c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e626:	6043      	str	r3, [r0, #4]
 800e628:	7e03      	ldrb	r3, [r0, #24]
 800e62a:	b143      	cbz	r3, 800e63e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e62c:	6943      	ldr	r3, [r0, #20]
 800e62e:	b12b      	cbz	r3, 800e63c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e630:	881a      	ldrh	r2, [r3, #0]
 800e632:	b11a      	cbz	r2, 800e63c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e634:	1c9a      	adds	r2, r3, #2
 800e636:	6142      	str	r2, [r0, #20]
 800e638:	8818      	ldrh	r0, [r3, #0]
 800e63a:	bd30      	pop	{r4, r5, pc}
 800e63c:	7605      	strb	r5, [r0, #24]
 800e63e:	6843      	ldr	r3, [r0, #4]
 800e640:	8819      	ldrh	r1, [r3, #0]
 800e642:	b199      	cbz	r1, 800e66c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e644:	1c9a      	adds	r2, r3, #2
 800e646:	2902      	cmp	r1, #2
 800e648:	6042      	str	r2, [r0, #4]
 800e64a:	d1f5      	bne.n	800e638 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e64c:	7c03      	ldrb	r3, [r0, #16]
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d8e5      	bhi.n	800e61e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	3302      	adds	r3, #2
 800e656:	7402      	strb	r2, [r0, #16]
 800e658:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e65c:	6143      	str	r3, [r0, #20]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d0dd      	beq.n	800e61e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e662:	881b      	ldrh	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d0da      	beq.n	800e61e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e668:	7604      	strb	r4, [r0, #24]
 800e66a:	e7d8      	b.n	800e61e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e66c:	2000      	movs	r0, #0
 800e66e:	e7e4      	b.n	800e63a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e670:	b430      	push	{r4, r5}
 800e672:	6001      	str	r1, [r0, #0]
 800e674:	2100      	movs	r1, #0
 800e676:	6041      	str	r1, [r0, #4]
 800e678:	6815      	ldr	r5, [r2, #0]
 800e67a:	6085      	str	r5, [r0, #8]
 800e67c:	6852      	ldr	r2, [r2, #4]
 800e67e:	6443      	str	r3, [r0, #68]	@ 0x44
 800e680:	9b02      	ldr	r3, [sp, #8]
 800e682:	60c2      	str	r2, [r0, #12]
 800e684:	7401      	strb	r1, [r0, #16]
 800e686:	6141      	str	r1, [r0, #20]
 800e688:	7601      	strb	r1, [r0, #24]
 800e68a:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e68c:	8401      	strh	r1, [r0, #32]
 800e68e:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e692:	6483      	str	r3, [r0, #72]	@ 0x48
 800e694:	bc30      	pop	{r4, r5}
 800e696:	f7f5 ba6f 	b.w	8003b78 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e69a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800e69a:	b408      	push	{r3}
 800e69c:	b510      	push	{r4, lr}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	ac07      	add	r4, sp, #28
 800e6a2:	f854 3b04 	ldr.w	r3, [r4], #4
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	4622      	mov	r2, r4
 800e6ac:	9403      	str	r4, [sp, #12]
 800e6ae:	f7ff ffdf 	bl	800e670 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e6b2:	b005      	add	sp, #20
 800e6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6b8:	b001      	add	sp, #4
 800e6ba:	4770      	bx	lr

0800e6bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6be:	4605      	mov	r5, r0
 800e6c0:	4608      	mov	r0, r1
 800e6c2:	b1e9      	cbz	r1, 800e700 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800e6c4:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	f101 0708 	add.w	r7, r1, #8
 800e6ce:	4622      	mov	r2, r4
 800e6d0:	6818      	ldr	r0, [r3, #0]
 800e6d2:	6859      	ldr	r1, [r3, #4]
 800e6d4:	4626      	mov	r6, r4
 800e6d6:	c603      	stmia	r6!, {r0, r1}
 800e6d8:	3308      	adds	r3, #8
 800e6da:	42bb      	cmp	r3, r7
 800e6dc:	4634      	mov	r4, r6
 800e6de:	d1f7      	bne.n	800e6d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e6e0:	6818      	ldr	r0, [r3, #0]
 800e6e2:	6030      	str	r0, [r6, #0]
 800e6e4:	889b      	ldrh	r3, [r3, #4]
 800e6e6:	80b3      	strh	r3, [r6, #4]
 800e6e8:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e6ec:	015b      	lsls	r3, r3, #5
 800e6ee:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e6f2:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800e6f6:	430b      	orrs	r3, r1
 800e6f8:	425b      	negs	r3, r3
 800e6fa:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e6fe:	4610      	mov	r0, r2
 800e700:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e702 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800e702:	b538      	push	{r3, r4, r5, lr}
 800e704:	460c      	mov	r4, r1
 800e706:	6811      	ldr	r1, [r2, #0]
 800e708:	4610      	mov	r0, r2
 800e70a:	68cd      	ldr	r5, [r1, #12]
 800e70c:	4619      	mov	r1, r3
 800e70e:	47a8      	blx	r5
 800e710:	2800      	cmp	r0, #0
 800e712:	bf08      	it	eq
 800e714:	4620      	moveq	r0, r4
 800e716:	bd38      	pop	{r3, r4, r5, pc}

0800e718 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800e718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e71c:	468c      	mov	ip, r1
 800e71e:	4605      	mov	r5, r0
 800e720:	4614      	mov	r4, r2
 800e722:	b942      	cbnz	r2, 800e736 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800e724:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e728:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800e72c:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800e730:	4620      	mov	r0, r4
 800e732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e736:	7b50      	ldrb	r0, [r2, #13]
 800e738:	8893      	ldrh	r3, [r2, #4]
 800e73a:	0106      	lsls	r6, r0, #4
 800e73c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e740:	79e6      	ldrb	r6, [r4, #7]
 800e742:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800e746:	4316      	orrs	r6, r2
 800e748:	185a      	adds	r2, r3, r1
 800e74a:	b291      	uxth	r1, r2
 800e74c:	291d      	cmp	r1, #29
 800e74e:	b2b7      	uxth	r7, r6
 800e750:	d87e      	bhi.n	800e850 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800e752:	2201      	movs	r2, #1
 800e754:	408a      	lsls	r2, r1
 800e756:	498a      	ldr	r1, [pc, #552]	@ (800e980 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 800e758:	420a      	tst	r2, r1
 800e75a:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800e75e:	d12d      	bne.n	800e7bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800e760:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800e764:	d074      	beq.n	800e850 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800e766:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e76a:	4623      	mov	r3, r4
 800e76c:	f104 0e08 	add.w	lr, r4, #8
 800e770:	4614      	mov	r4, r2
 800e772:	6818      	ldr	r0, [r3, #0]
 800e774:	6859      	ldr	r1, [r3, #4]
 800e776:	4694      	mov	ip, r2
 800e778:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e77c:	3308      	adds	r3, #8
 800e77e:	4573      	cmp	r3, lr
 800e780:	4662      	mov	r2, ip
 800e782:	d1f6      	bne.n	800e772 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800e784:	6818      	ldr	r0, [r3, #0]
 800e786:	f8cc 0000 	str.w	r0, [ip]
 800e78a:	889b      	ldrh	r3, [r3, #4]
 800e78c:	f8ac 3004 	strh.w	r3, [ip, #4]
 800e790:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800e794:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800e798:	b2b3      	uxth	r3, r6
 800e79a:	1aca      	subs	r2, r1, r3
 800e79c:	b292      	uxth	r2, r2
 800e79e:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800e7a2:	10d2      	asrs	r2, r2, #3
 800e7a4:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800e7a8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800e7ac:	4302      	orrs	r2, r0
 800e7ae:	1bcf      	subs	r7, r1, r7
 800e7b0:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800e7b4:	1afb      	subs	r3, r7, r3
 800e7b6:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800e7ba:	e7b9      	b.n	800e730 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e7bc:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e7c0:	4623      	mov	r3, r4
 800e7c2:	f104 0808 	add.w	r8, r4, #8
 800e7c6:	4614      	mov	r4, r2
 800e7c8:	6818      	ldr	r0, [r3, #0]
 800e7ca:	6859      	ldr	r1, [r3, #4]
 800e7cc:	4696      	mov	lr, r2
 800e7ce:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	4543      	cmp	r3, r8
 800e7d6:	4672      	mov	r2, lr
 800e7d8:	d1f6      	bne.n	800e7c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800e7da:	6818      	ldr	r0, [r3, #0]
 800e7dc:	f8ce 0000 	str.w	r0, [lr]
 800e7e0:	889b      	ldrh	r3, [r3, #4]
 800e7e2:	f8ae 3004 	strh.w	r3, [lr, #4]
 800e7e6:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800e7e8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e7ec:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800e7ee:	f640 6333 	movw	r3, #3635	@ 0xe33
 800e7f2:	4299      	cmp	r1, r3
 800e7f4:	d111      	bne.n	800e81a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800e7f6:	f8dc 3000 	ldr.w	r3, [ip]
 800e7fa:	4660      	mov	r0, ip
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	4798      	blx	r3
 800e800:	7b41      	ldrb	r1, [r0, #13]
 800e802:	00cb      	lsls	r3, r1, #3
 800e804:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e808:	7a03      	ldrb	r3, [r0, #8]
 800e80a:	4313      	orrs	r3, r2
 800e80c:	064a      	lsls	r2, r1, #25
 800e80e:	bf44      	itt	mi
 800e810:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e814:	b21b      	sxthmi	r3, r3
 800e816:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e81a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800e81e:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800e822:	443b      	add	r3, r7
 800e824:	4433      	add	r3, r6
 800e826:	b29b      	uxth	r3, r3
 800e828:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e82c:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800e830:	10db      	asrs	r3, r3, #3
 800e832:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e836:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e83a:	4313      	orrs	r3, r2
 800e83c:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800e840:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800e844:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800e848:	1a9b      	subs	r3, r3, r2
 800e84a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e84e:	e76f      	b.n	800e730 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e850:	f023 0204 	bic.w	r2, r3, #4
 800e854:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800e858:	428a      	cmp	r2, r1
 800e85a:	d003      	beq.n	800e864 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800e85c:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800e860:	4293      	cmp	r3, r2
 800e862:	d137      	bne.n	800e8d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 800e864:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800e868:	4622      	mov	r2, r4
 800e86a:	f104 0808 	add.w	r8, r4, #8
 800e86e:	4634      	mov	r4, r6
 800e870:	6810      	ldr	r0, [r2, #0]
 800e872:	6851      	ldr	r1, [r2, #4]
 800e874:	46b6      	mov	lr, r6
 800e876:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e87a:	3208      	adds	r2, #8
 800e87c:	4542      	cmp	r2, r8
 800e87e:	4676      	mov	r6, lr
 800e880:	d1f6      	bne.n	800e870 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800e882:	6810      	ldr	r0, [r2, #0]
 800e884:	f8ce 0000 	str.w	r0, [lr]
 800e888:	8892      	ldrh	r2, [r2, #4]
 800e88a:	f8ae 2004 	strh.w	r2, [lr, #4]
 800e88e:	3b01      	subs	r3, #1
 800e890:	b29b      	uxth	r3, r3
 800e892:	4662      	mov	r2, ip
 800e894:	4621      	mov	r1, r4
 800e896:	4628      	mov	r0, r5
 800e898:	f7ff ff33 	bl	800e702 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e89c:	7b41      	ldrb	r1, [r0, #13]
 800e89e:	00cb      	lsls	r3, r1, #3
 800e8a0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e8a4:	7a03      	ldrb	r3, [r0, #8]
 800e8a6:	0648      	lsls	r0, r1, #25
 800e8a8:	ea43 0302 	orr.w	r3, r3, r2
 800e8ac:	bf44      	itt	mi
 800e8ae:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e8b2:	b21b      	sxthmi	r3, r3
 800e8b4:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e8b8:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e8bc:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	115a      	asrs	r2, r3, #5
 800e8ca:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800e8ce:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800e8d2:	e046      	b.n	800e962 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 800e8d4:	00c2      	lsls	r2, r0, #3
 800e8d6:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800e8da:	7a22      	ldrb	r2, [r4, #8]
 800e8dc:	430a      	orrs	r2, r1
 800e8de:	0641      	lsls	r1, r0, #25
 800e8e0:	bf44      	itt	mi
 800e8e2:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800e8e6:	b212      	sxthmi	r2, r2
 800e8e8:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e8ec:	f640 6109 	movw	r1, #3593	@ 0xe09
 800e8f0:	f023 0210 	bic.w	r2, r3, #16
 800e8f4:	428a      	cmp	r2, r1
 800e8f6:	d003      	beq.n	800e900 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 800e8f8:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d13d      	bne.n	800e97c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 800e900:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e904:	f104 0808 	add.w	r8, r4, #8
 800e908:	4696      	mov	lr, r2
 800e90a:	6820      	ldr	r0, [r4, #0]
 800e90c:	6861      	ldr	r1, [r4, #4]
 800e90e:	4616      	mov	r6, r2
 800e910:	c603      	stmia	r6!, {r0, r1}
 800e912:	3408      	adds	r4, #8
 800e914:	4544      	cmp	r4, r8
 800e916:	4632      	mov	r2, r6
 800e918:	d1f7      	bne.n	800e90a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 800e91a:	6820      	ldr	r0, [r4, #0]
 800e91c:	6030      	str	r0, [r6, #0]
 800e91e:	88a1      	ldrh	r1, [r4, #4]
 800e920:	80b1      	strh	r1, [r6, #4]
 800e922:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800e926:	0076      	lsls	r6, r6, #1
 800e928:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e92c:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800e930:	4316      	orrs	r6, r2
 800e932:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e936:	4293      	cmp	r3, r2
 800e938:	bf1a      	itte	ne
 800e93a:	f103 33ff 	addne.w	r3, r3, #4294967295
 800e93e:	b29b      	uxthne	r3, r3
 800e940:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800e944:	4662      	mov	r2, ip
 800e946:	4671      	mov	r1, lr
 800e948:	4628      	mov	r0, r5
 800e94a:	4674      	mov	r4, lr
 800e94c:	f7ff fed9 	bl	800e702 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e950:	7b43      	ldrb	r3, [r0, #13]
 800e952:	7a82      	ldrb	r2, [r0, #10]
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e95a:	4313      	orrs	r3, r2
 800e95c:	1af6      	subs	r6, r6, r3
 800e95e:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800e962:	7b61      	ldrb	r1, [r4, #13]
 800e964:	00cb      	lsls	r3, r1, #3
 800e966:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e96a:	7a23      	ldrb	r3, [r4, #8]
 800e96c:	4313      	orrs	r3, r2
 800e96e:	064a      	lsls	r2, r1, #25
 800e970:	bf44      	itt	mi
 800e972:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e976:	b21b      	sxthmi	r3, r3
 800e978:	1bdb      	subs	r3, r3, r7
 800e97a:	e71c      	b.n	800e7b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800e97c:	2300      	movs	r3, #0
 800e97e:	e7a6      	b.n	800e8ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 800e980:	3fc00079 	.word	0x3fc00079

0800e984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800e984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e988:	4604      	mov	r4, r0
 800e98a:	b942      	cbnz	r2, 800e99e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800e98c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e990:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800e994:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800e998:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800e99c:	e047      	b.n	800ea2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800e99e:	7b51      	ldrb	r1, [r2, #13]
 800e9a0:	8893      	ldrh	r3, [r2, #4]
 800e9a2:	010d      	lsls	r5, r1, #4
 800e9a4:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800e9a8:	79d5      	ldrb	r5, [r2, #7]
 800e9aa:	4305      	orrs	r5, r0
 800e9ac:	2d04      	cmp	r5, #4
 800e9ae:	bfcc      	ite	gt
 800e9b0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800e9b4:	f04f 0e01 	movle.w	lr, #1
 800e9b8:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800e9bc:	f200 80ab 	bhi.w	800eb16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800e9c0:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800e9c4:	4283      	cmp	r3, r0
 800e9c6:	d216      	bcs.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e9c8:	f240 605b 	movw	r0, #1627	@ 0x65b
 800e9cc:	4283      	cmp	r3, r0
 800e9ce:	d859      	bhi.n	800ea84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800e9d0:	f240 6057 	movw	r0, #1623	@ 0x657
 800e9d4:	4283      	cmp	r3, r0
 800e9d6:	d20e      	bcs.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e9d8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800e9dc:	d24a      	bcs.n	800ea74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800e9de:	f240 604e 	movw	r0, #1614	@ 0x64e
 800e9e2:	4283      	cmp	r3, r0
 800e9e4:	d207      	bcs.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e9e6:	f240 601a 	movw	r0, #1562	@ 0x61a
 800e9ea:	4283      	cmp	r3, r0
 800e9ec:	d02a      	beq.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e9ee:	d821      	bhi.n	800ea34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800e9f0:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800e9f4:	d35b      	bcc.n	800eaae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e9f6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800e9fa:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e9fe:	f040 80d0 	bne.w	800eba2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ea02:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800ea06:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ea0a:	f040 80ca 	bne.w	800eba2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ea0e:	00cb      	lsls	r3, r1, #3
 800ea10:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ea14:	7a13      	ldrb	r3, [r2, #8]
 800ea16:	0649      	lsls	r1, r1, #25
 800ea18:	ea43 0300 	orr.w	r3, r3, r0
 800ea1c:	bf44      	itt	mi
 800ea1e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ea22:	b21b      	sxthmi	r3, r3
 800ea24:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ea28:	1b5d      	subs	r5, r3, r5
 800ea2a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ea2e:	4610      	mov	r0, r2
 800ea30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea34:	f240 604b 	movw	r0, #1611	@ 0x64b
 800ea38:	4283      	cmp	r3, r0
 800ea3a:	d338      	bcc.n	800eaae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ea3c:	f240 604c 	movw	r0, #1612	@ 0x64c
 800ea40:	4283      	cmp	r3, r0
 800ea42:	d9d8      	bls.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea44:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800ea48:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800ea4c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ea50:	f040 80f2 	bne.w	800ec38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800ea54:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ea58:	f040 80ee 	bne.w	800ec38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800ea5c:	00cb      	lsls	r3, r1, #3
 800ea5e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ea62:	7a13      	ldrb	r3, [r2, #8]
 800ea64:	064e      	lsls	r6, r1, #25
 800ea66:	ea43 0300 	orr.w	r3, r3, r0
 800ea6a:	bf44      	itt	mi
 800ea6c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ea70:	b21b      	sxthmi	r3, r3
 800ea72:	e7d9      	b.n	800ea28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800ea74:	f240 6054 	movw	r0, #1620	@ 0x654
 800ea78:	4283      	cmp	r3, r0
 800ea7a:	d8e3      	bhi.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea7c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800ea80:	d9e0      	bls.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea82:	e7b8      	b.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea84:	f240 6074 	movw	r0, #1652	@ 0x674
 800ea88:	4283      	cmp	r3, r0
 800ea8a:	d0b4      	beq.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea8c:	d82d      	bhi.n	800eaea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800ea8e:	f240 605e 	movw	r0, #1630	@ 0x65e
 800ea92:	4283      	cmp	r3, r0
 800ea94:	d804      	bhi.n	800eaa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800ea96:	f240 605d 	movw	r0, #1629	@ 0x65d
 800ea9a:	4283      	cmp	r3, r0
 800ea9c:	d3d2      	bcc.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea9e:	e7aa      	b.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eaa0:	f240 605f 	movw	r0, #1631	@ 0x65f
 800eaa4:	4283      	cmp	r3, r0
 800eaa6:	d0cd      	beq.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eaa8:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800eaac:	d0a3      	beq.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eaae:	00cb      	lsls	r3, r1, #3
 800eab0:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800eab4:	7a13      	ldrb	r3, [r2, #8]
 800eab6:	0649      	lsls	r1, r1, #25
 800eab8:	ea43 0300 	orr.w	r3, r3, r0
 800eabc:	bf44      	itt	mi
 800eabe:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eac2:	b21b      	sxthmi	r3, r3
 800eac4:	1b5d      	subs	r5, r3, r5
 800eac6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eaca:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800eace:	7b53      	ldrb	r3, [r2, #13]
 800ead0:	015b      	lsls	r3, r3, #5
 800ead2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800ead6:	7993      	ldrb	r3, [r2, #6]
 800ead8:	430b      	orrs	r3, r1
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	2105      	movs	r1, #5
 800eade:	fb93 f3f1 	sdiv	r3, r3, r1
 800eae2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800eae6:	440b      	add	r3, r1
 800eae8:	e756      	b.n	800e998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800eaea:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800eaee:	4283      	cmp	r3, r0
 800eaf0:	d809      	bhi.n	800eb06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800eaf2:	f240 60df 	movw	r0, #1759	@ 0x6df
 800eaf6:	4283      	cmp	r3, r0
 800eaf8:	f4bf af7d 	bcs.w	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eafc:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800eb00:	2b05      	cmp	r3, #5
 800eb02:	d8d4      	bhi.n	800eaae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800eb04:	e777      	b.n	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb06:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800eb0a:	4283      	cmp	r3, r0
 800eb0c:	d09a      	beq.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb0e:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800eb12:	4283      	cmp	r3, r0
 800eb14:	e7ca      	b.n	800eaac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800eb16:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800eb1a:	d22b      	bcs.n	800eb74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800eb1c:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800eb20:	4283      	cmp	r3, r0
 800eb22:	d28f      	bcs.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb24:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800eb28:	4283      	cmp	r3, r0
 800eb2a:	d816      	bhi.n	800eb5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800eb2c:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800eb30:	4283      	cmp	r3, r0
 800eb32:	f4bf af60 	bcs.w	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb36:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800eb3a:	4283      	cmp	r3, r0
 800eb3c:	d80a      	bhi.n	800eb54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800eb3e:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800eb42:	4283      	cmp	r3, r0
 800eb44:	f4bf af57 	bcs.w	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb48:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800eb4c:	4283      	cmp	r3, r0
 800eb4e:	f43f af79 	beq.w	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb52:	e7ac      	b.n	800eaae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800eb54:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800eb58:	e7f8      	b.n	800eb4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800eb5a:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800eb5e:	4283      	cmp	r3, r0
 800eb60:	d802      	bhi.n	800eb68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800eb62:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800eb66:	e798      	b.n	800ea9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800eb68:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800eb6c:	4283      	cmp	r3, r0
 800eb6e:	f47f af42 	bne.w	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb72:	e767      	b.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb74:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800eb78:	4283      	cmp	r3, r0
 800eb7a:	f43f af63 	beq.w	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb7e:	d802      	bhi.n	800eb86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800eb80:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800eb84:	e7f2      	b.n	800eb6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800eb86:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800eb8a:	4283      	cmp	r3, r0
 800eb8c:	d805      	bhi.n	800eb9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800eb8e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800eb92:	4283      	cmp	r3, r0
 800eb94:	f4ff af2f 	bcc.w	800e9f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb98:	e754      	b.n	800ea44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb9a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800eb9e:	4283      	cmp	r3, r0
 800eba0:	e7af      	b.n	800eb02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800eba2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800eba6:	4617      	mov	r7, r2
 800eba8:	f102 0808 	add.w	r8, r2, #8
 800ebac:	4666      	mov	r6, ip
 800ebae:	6838      	ldr	r0, [r7, #0]
 800ebb0:	6879      	ldr	r1, [r7, #4]
 800ebb2:	46e6      	mov	lr, ip
 800ebb4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ebb8:	3708      	adds	r7, #8
 800ebba:	4547      	cmp	r7, r8
 800ebbc:	46f4      	mov	ip, lr
 800ebbe:	d1f6      	bne.n	800ebae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800ebc0:	6838      	ldr	r0, [r7, #0]
 800ebc2:	f8ce 0000 	str.w	r0, [lr]
 800ebc6:	88b9      	ldrh	r1, [r7, #4]
 800ebc8:	f8ae 1004 	strh.w	r1, [lr, #4]
 800ebcc:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ebd0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ebd4:	d009      	beq.n	800ebea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800ebd6:	7b51      	ldrb	r1, [r2, #13]
 800ebd8:	7992      	ldrb	r2, [r2, #6]
 800ebda:	0149      	lsls	r1, r1, #5
 800ebdc:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ebe0:	4311      	orrs	r1, r2
 800ebe2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ebe6:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ebea:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ebee:	b2ad      	uxth	r5, r5
 800ebf0:	d00d      	beq.n	800ec0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800ebf2:	442b      	add	r3, r5
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ebfa:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ebfe:	10db      	asrs	r3, r3, #3
 800ec00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ec04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800ec0e:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ec12:	00cb      	lsls	r3, r1, #3
 800ec14:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ec18:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ec1c:	064f      	lsls	r7, r1, #25
 800ec1e:	ea43 0302 	orr.w	r3, r3, r2
 800ec22:	bf44      	itt	mi
 800ec24:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ec28:	b21b      	sxthmi	r3, r3
 800ec2a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ec2e:	1b5b      	subs	r3, r3, r5
 800ec30:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800ec34:	4632      	mov	r2, r6
 800ec36:	e6fa      	b.n	800ea2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ec38:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ec3c:	4617      	mov	r7, r2
 800ec3e:	f102 0908 	add.w	r9, r2, #8
 800ec42:	4666      	mov	r6, ip
 800ec44:	6838      	ldr	r0, [r7, #0]
 800ec46:	6879      	ldr	r1, [r7, #4]
 800ec48:	46e0      	mov	r8, ip
 800ec4a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800ec4e:	3708      	adds	r7, #8
 800ec50:	454f      	cmp	r7, r9
 800ec52:	46c4      	mov	ip, r8
 800ec54:	d1f6      	bne.n	800ec44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800ec56:	6838      	ldr	r0, [r7, #0]
 800ec58:	f8c8 0000 	str.w	r0, [r8]
 800ec5c:	88b9      	ldrh	r1, [r7, #4]
 800ec5e:	f8a8 1004 	strh.w	r1, [r8, #4]
 800ec62:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ec66:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ec6a:	d009      	beq.n	800ec80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800ec6c:	7b51      	ldrb	r1, [r2, #13]
 800ec6e:	7992      	ldrb	r2, [r2, #6]
 800ec70:	0149      	lsls	r1, r1, #5
 800ec72:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ec76:	4311      	orrs	r1, r2
 800ec78:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ec7c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ec80:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ec84:	d00e      	beq.n	800eca4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800ec86:	eba3 030e 	sub.w	r3, r3, lr
 800ec8a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ec94:	10db      	asrs	r3, r3, #3
 800ec96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800eca4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800eca8:	00cb      	lsls	r3, r1, #3
 800ecaa:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ecae:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ecb2:	0648      	lsls	r0, r1, #25
 800ecb4:	ea43 0302 	orr.w	r3, r3, r2
 800ecb8:	bf44      	itt	mi
 800ecba:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ecbe:	b21b      	sxthmi	r3, r3
 800ecc0:	1b5d      	subs	r5, r3, r5
 800ecc2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ecc6:	e7b5      	b.n	800ec34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800ecc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800ecc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eccc:	461e      	mov	r6, r3
 800ecce:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ecd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	4617      	mov	r7, r2
 800ecd8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ecdc:	f7f4 ff0a 	bl	8003af4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ece0:	4605      	mov	r5, r0
 800ece2:	b918      	cbnz	r0, 800ecec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800ece4:	6030      	str	r0, [r6, #0]
 800ece6:	4628      	mov	r0, r5
 800ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	4601      	mov	r1, r0
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	4798      	blx	r3
 800ecf6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800ecfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ecfe:	4602      	mov	r2, r0
 800ed00:	6030      	str	r0, [r6, #0]
 800ed02:	d213      	bcs.n	800ed2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800ed04:	4643      	mov	r3, r8
 800ed06:	4639      	mov	r1, r7
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f7ff fe3b 	bl	800e984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800ed0e:	6030      	str	r0, [r6, #0]
 800ed10:	6833      	ldr	r3, [r6, #0]
 800ed12:	b143      	cbz	r3, 800ed26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800ed14:	7b5a      	ldrb	r2, [r3, #13]
 800ed16:	7a9b      	ldrb	r3, [r3, #10]
 800ed18:	0052      	lsls	r2, r2, #1
 800ed1a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	bf0c      	ite	eq
 800ed22:	2301      	moveq	r3, #1
 800ed24:	2300      	movne	r3, #0
 800ed26:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800ed2a:	e7dc      	b.n	800ece6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800ed2c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed34:	d804      	bhi.n	800ed40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800ed36:	4639      	mov	r1, r7
 800ed38:	4620      	mov	r0, r4
 800ed3a:	f7ff fced 	bl	800e718 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800ed3e:	e7e6      	b.n	800ed0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800ed40:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d0e3      	beq.n	800ed10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800ed48:	f640 1302 	movw	r3, #2306	@ 0x902
 800ed4c:	429d      	cmp	r5, r3
 800ed4e:	d1df      	bne.n	800ed10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800ed50:	4601      	mov	r1, r0
 800ed52:	4620      	mov	r0, r4
 800ed54:	f7ff fcb2 	bl	800e6bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800ed58:	e7d9      	b.n	800ed0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800ed5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800ed5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed5e:	461e      	mov	r6, r3
 800ed60:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ed62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ed66:	4604      	mov	r4, r0
 800ed68:	4617      	mov	r7, r2
 800ed6a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ed6e:	f7f4 fec1 	bl	8003af4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ed72:	4605      	mov	r5, r0
 800ed74:	b918      	cbnz	r0, 800ed7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800ed76:	6030      	str	r0, [r6, #0]
 800ed78:	4628      	mov	r0, r5
 800ed7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	4601      	mov	r1, r0
 800ed82:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800ed86:	4638      	mov	r0, r7
 800ed88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ed8c:	47c8      	blx	r9
 800ed8e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800ed92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed96:	4602      	mov	r2, r0
 800ed98:	6030      	str	r0, [r6, #0]
 800ed9a:	d213      	bcs.n	800edc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800ed9c:	4643      	mov	r3, r8
 800ed9e:	4639      	mov	r1, r7
 800eda0:	4620      	mov	r0, r4
 800eda2:	f7ff fdef 	bl	800e984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800eda6:	6030      	str	r0, [r6, #0]
 800eda8:	6833      	ldr	r3, [r6, #0]
 800edaa:	b143      	cbz	r3, 800edbe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800edac:	7b5a      	ldrb	r2, [r3, #13]
 800edae:	7a9b      	ldrb	r3, [r3, #10]
 800edb0:	0052      	lsls	r2, r2, #1
 800edb2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800edb6:	4313      	orrs	r3, r2
 800edb8:	bf0c      	ite	eq
 800edba:	2301      	moveq	r3, #1
 800edbc:	2300      	movne	r3, #0
 800edbe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800edc2:	e7d9      	b.n	800ed78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800edc4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800edc8:	b29b      	uxth	r3, r3
 800edca:	2b7f      	cmp	r3, #127	@ 0x7f
 800edcc:	d804      	bhi.n	800edd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800edce:	4639      	mov	r1, r7
 800edd0:	4620      	mov	r0, r4
 800edd2:	f7ff fca1 	bl	800e718 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800edd6:	e7e6      	b.n	800eda6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800edd8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d0e3      	beq.n	800eda8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800ede0:	f640 1302 	movw	r3, #2306	@ 0x902
 800ede4:	429d      	cmp	r5, r3
 800ede6:	d1df      	bne.n	800eda8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800ede8:	4601      	mov	r1, r0
 800edea:	4620      	mov	r0, r4
 800edec:	f7ff fc66 	bl	800e6bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800edf0:	e7d9      	b.n	800eda6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800edf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800edf2:	b510      	push	{r4, lr}
 800edf4:	4604      	mov	r4, r0
 800edf6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800edfa:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800edfc:	b1f1      	cbz	r1, 800ee3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800edfe:	2b0a      	cmp	r3, #10
 800ee00:	d02f      	beq.n	800ee62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800ee02:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800ee04:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800ee08:	3901      	subs	r1, #1
 800ee0a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800ee0c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800ee10:	1c51      	adds	r1, r2, #1
 800ee12:	b289      	uxth	r1, r1
 800ee14:	2901      	cmp	r1, #1
 800ee16:	bf84      	itt	hi
 800ee18:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ee1c:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800ee1e:	f103 0201 	add.w	r2, r3, #1
 800ee22:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ee24:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ee26:	bf98      	it	ls
 800ee28:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800ee2a:	4413      	add	r3, r2
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	2b09      	cmp	r3, #9
 800ee30:	bf88      	it	hi
 800ee32:	3b0a      	subhi	r3, #10
 800ee34:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ee38:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ee3a:	e7dc      	b.n	800edf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800ee3c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ee3e:	2b0a      	cmp	r3, #10
 800ee40:	d00f      	beq.n	800ee62 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800ee42:	4620      	mov	r0, r4
 800ee44:	f7ff fbe8 	bl	800e618 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800ee48:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ee4a:	1c5a      	adds	r2, r3, #1
 800ee4c:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ee4e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ee50:	4413      	add	r3, r2
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	2b09      	cmp	r3, #9
 800ee56:	bf88      	it	hi
 800ee58:	3b0a      	subhi	r3, #10
 800ee5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ee5e:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ee60:	e7ec      	b.n	800ee3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800ee62:	bd10      	pop	{r4, pc}

0800ee64 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ee68:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800ee70:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800ee72:	3a01      	subs	r2, #1
 800ee74:	8702      	strh	r2, [r0, #56]	@ 0x38
 800ee76:	1c5a      	adds	r2, r3, #1
 800ee78:	b292      	uxth	r2, r2
 800ee7a:	2a09      	cmp	r2, #9
 800ee7c:	bf86      	itte	hi
 800ee7e:	3b09      	subhi	r3, #9
 800ee80:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800ee82:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800ee84:	f7ff ffb5 	bl	800edf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ee88:	8c23      	ldrh	r3, [r4, #32]
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	bf9c      	itt	ls
 800ee8e:	3301      	addls	r3, #1
 800ee90:	8423      	strhls	r3, [r4, #32]
 800ee92:	8be3      	ldrh	r3, [r4, #30]
 800ee94:	b90b      	cbnz	r3, 800ee9a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800ee96:	2302      	movs	r3, #2
 800ee98:	83e3      	strh	r3, [r4, #30]
 800ee9a:	8be3      	ldrh	r3, [r4, #30]
 800ee9c:	3b01      	subs	r3, #1
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	83e3      	strh	r3, [r4, #30]
 800eea2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800eea6:	4628      	mov	r0, r5
 800eea8:	8365      	strh	r5, [r4, #26]
 800eeaa:	bd38      	pop	{r3, r4, r5, pc}

0800eeac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800eeac:	428a      	cmp	r2, r1
 800eeae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb2:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800eeb4:	d931      	bls.n	800ef1a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800eeb6:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800eeb8:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800eebc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800eec0:	19ee      	adds	r6, r5, r7
 800eec2:	1a54      	subs	r4, r2, r1
 800eec4:	3e01      	subs	r6, #1
 800eec6:	fa1f fe84 	uxth.w	lr, r4
 800eeca:	b2b4      	uxth	r4, r6
 800eecc:	eba4 090e 	sub.w	r9, r4, lr
 800eed0:	fa1f f989 	uxth.w	r9, r9
 800eed4:	2c09      	cmp	r4, #9
 800eed6:	4626      	mov	r6, r4
 800eed8:	bf88      	it	hi
 800eeda:	f1a4 060a 	subhi.w	r6, r4, #10
 800eede:	f1bc 0f00 	cmp.w	ip, #0
 800eee2:	bf08      	it	eq
 800eee4:	f04f 0c02 	moveq.w	ip, #2
 800eee8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800eeec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eef0:	fa1f fc8c 	uxth.w	ip, ip
 800eef4:	3c01      	subs	r4, #1
 800eef6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800eefa:	b2a4      	uxth	r4, r4
 800eefc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800ef00:	454c      	cmp	r4, r9
 800ef02:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800ef06:	d1e5      	bne.n	800eed4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800ef08:	eba5 050e 	sub.w	r5, r5, lr
 800ef0c:	eb0e 0408 	add.w	r4, lr, r8
 800ef10:	8705      	strh	r5, [r0, #56]	@ 0x38
 800ef12:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800ef16:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800ef1a:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800ef1c:	1a64      	subs	r4, r4, r1
 800ef1e:	4439      	add	r1, r7
 800ef20:	b289      	uxth	r1, r1
 800ef22:	2909      	cmp	r1, #9
 800ef24:	bf88      	it	hi
 800ef26:	390a      	subhi	r1, #10
 800ef28:	8704      	strh	r4, [r0, #56]	@ 0x38
 800ef2a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ef2c:	250a      	movs	r5, #10
 800ef2e:	b18a      	cbz	r2, 800ef54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800ef30:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800ef32:	3a01      	subs	r2, #1
 800ef34:	b292      	uxth	r2, r2
 800ef36:	3101      	adds	r1, #1
 800ef38:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800ef3c:	8701      	strh	r1, [r0, #56]	@ 0x38
 800ef3e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ef40:	b901      	cbnz	r1, 800ef44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800ef42:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800ef44:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ef46:	3901      	subs	r1, #1
 800ef48:	b289      	uxth	r1, r1
 800ef4a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ef4c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ef50:	844c      	strh	r4, [r1, #34]	@ 0x22
 800ef52:	e7ec      	b.n	800ef2e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800ef54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef58:	f7ff bf4b 	b.w	800edf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800ef5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ef5c:	b570      	push	{r4, r5, r6, lr}
 800ef5e:	2500      	movs	r5, #0
 800ef60:	4295      	cmp	r5, r2
 800ef62:	d011      	beq.n	800ef88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800ef64:	8bc4      	ldrh	r4, [r0, #30]
 800ef66:	f831 6b02 	ldrh.w	r6, [r1], #2
 800ef6a:	4414      	add	r4, r2
 800ef6c:	3c01      	subs	r4, #1
 800ef6e:	1b64      	subs	r4, r4, r5
 800ef70:	b2a4      	uxth	r4, r4
 800ef72:	2c01      	cmp	r4, #1
 800ef74:	bf88      	it	hi
 800ef76:	3c02      	subhi	r4, #2
 800ef78:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ef7c:	8b64      	ldrh	r4, [r4, #26]
 800ef7e:	42b4      	cmp	r4, r6
 800ef80:	d117      	bne.n	800efb2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800ef82:	3501      	adds	r5, #1
 800ef84:	b2ad      	uxth	r5, r5
 800ef86:	e7eb      	b.n	800ef60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800ef88:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ef8c:	2400      	movs	r4, #0
 800ef8e:	4413      	add	r3, r2
 800ef90:	b2a2      	uxth	r2, r4
 800ef92:	429a      	cmp	r2, r3
 800ef94:	da0f      	bge.n	800efb6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800ef96:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800ef98:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ef9c:	4432      	add	r2, r6
 800ef9e:	b292      	uxth	r2, r2
 800efa0:	2a09      	cmp	r2, #9
 800efa2:	bf88      	it	hi
 800efa4:	3a0a      	subhi	r2, #10
 800efa6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800efaa:	3401      	adds	r4, #1
 800efac:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800efae:	42aa      	cmp	r2, r5
 800efb0:	d0ee      	beq.n	800ef90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800efb2:	2000      	movs	r0, #0
 800efb4:	bd70      	pop	{r4, r5, r6, pc}
 800efb6:	2001      	movs	r0, #1
 800efb8:	e7fc      	b.n	800efb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800efba <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800efba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbe:	4605      	mov	r5, r0
 800efc0:	4616      	mov	r6, r2
 800efc2:	1c8c      	adds	r4, r1, #2
 800efc4:	8809      	ldrh	r1, [r1, #0]
 800efc6:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800efca:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800efce:	42b3      	cmp	r3, r6
 800efd0:	d124      	bne.n	800f01c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800efd2:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800efd6:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800efda:	f001 070f 	and.w	r7, r1, #15
 800efde:	f8cd 8000 	str.w	r8, [sp]
 800efe2:	464b      	mov	r3, r9
 800efe4:	4652      	mov	r2, sl
 800efe6:	4621      	mov	r1, r4
 800efe8:	4628      	mov	r0, r5
 800efea:	f7ff ffb7 	bl	800ef5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800efee:	4683      	mov	fp, r0
 800eff0:	b168      	cbz	r0, 800f00e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800eff2:	eb0a 0109 	add.w	r1, sl, r9
 800eff6:	4441      	add	r1, r8
 800eff8:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800effc:	463a      	mov	r2, r7
 800effe:	4649      	mov	r1, r9
 800f000:	4628      	mov	r0, r5
 800f002:	f7ff ff53 	bl	800eeac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f006:	4658      	mov	r0, fp
 800f008:	b003      	add	sp, #12
 800f00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00e:	eb07 010a 	add.w	r1, r7, sl
 800f012:	4449      	add	r1, r9
 800f014:	4441      	add	r1, r8
 800f016:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f01a:	e7d2      	b.n	800efc2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f01c:	f04f 0b00 	mov.w	fp, #0
 800f020:	e7f1      	b.n	800f006 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f022 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f022:	b570      	push	{r4, r5, r6, lr}
 800f024:	8810      	ldrh	r0, [r2, #0]
 800f026:	4298      	cmp	r0, r3
 800f028:	d817      	bhi.n	800f05a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f02a:	1e48      	subs	r0, r1, #1
 800f02c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f030:	4298      	cmp	r0, r3
 800f032:	d312      	bcc.n	800f05a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f034:	2400      	movs	r4, #0
 800f036:	428c      	cmp	r4, r1
 800f038:	d20f      	bcs.n	800f05a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f03a:	1860      	adds	r0, r4, r1
 800f03c:	1040      	asrs	r0, r0, #1
 800f03e:	0085      	lsls	r5, r0, #2
 800f040:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f044:	42b3      	cmp	r3, r6
 800f046:	d902      	bls.n	800f04e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f048:	3001      	adds	r0, #1
 800f04a:	b284      	uxth	r4, r0
 800f04c:	e7f3      	b.n	800f036 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f04e:	d201      	bcs.n	800f054 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f050:	b281      	uxth	r1, r0
 800f052:	e7f0      	b.n	800f036 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f054:	442a      	add	r2, r5
 800f056:	8850      	ldrh	r0, [r2, #2]
 800f058:	bd70      	pop	{r4, r5, r6, pc}
 800f05a:	2000      	movs	r0, #0
 800f05c:	e7fc      	b.n	800f058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f05e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f062:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f064:	886f      	ldrh	r7, [r5, #2]
 800f066:	4604      	mov	r4, r0
 800f068:	087f      	lsrs	r7, r7, #1
 800f06a:	260b      	movs	r6, #11
 800f06c:	3e01      	subs	r6, #1
 800f06e:	d013      	beq.n	800f098 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f070:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f072:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f076:	462a      	mov	r2, r5
 800f078:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f07c:	4639      	mov	r1, r7
 800f07e:	4643      	mov	r3, r8
 800f080:	4620      	mov	r0, r4
 800f082:	f7ff ffce 	bl	800f022 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f086:	b138      	cbz	r0, 800f098 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f088:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f08c:	4642      	mov	r2, r8
 800f08e:	4620      	mov	r0, r4
 800f090:	f7ff ff93 	bl	800efba <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f094:	2800      	cmp	r0, #0
 800f096:	d1e9      	bne.n	800f06c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f09c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800f09c:	b570      	push	{r4, r5, r6, lr}
 800f09e:	694a      	ldr	r2, [r1, #20]
 800f0a0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800f0a2:	684b      	ldr	r3, [r1, #4]
 800f0a4:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800f0a6:	1b54      	subs	r4, r2, r5
 800f0a8:	f000 8106 	beq.w	800f2b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800f0ac:	1b9b      	subs	r3, r3, r6
 800f0ae:	d003      	beq.n	800f0b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f0b0:	4363      	muls	r3, r4
 800f0b2:	2210      	movs	r2, #16
 800f0b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0b8:	680c      	ldr	r4, [r1, #0]
 800f0ba:	698a      	ldr	r2, [r1, #24]
 800f0bc:	1b65      	subs	r5, r4, r5
 800f0be:	f000 80fd 	beq.w	800f2bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800f0c2:	1b92      	subs	r2, r2, r6
 800f0c4:	d003      	beq.n	800f0ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f0c6:	436a      	muls	r2, r5
 800f0c8:	2410      	movs	r4, #16
 800f0ca:	fb92 f2f4 	sdiv	r2, r2, r4
 800f0ce:	1a9b      	subs	r3, r3, r2
 800f0d0:	ee07 3a90 	vmov	s15, r3
 800f0d4:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800f2f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800f0d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f0e0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f0e4:	460a      	mov	r2, r1
 800f0e6:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	f100 040c 	add.w	r4, r0, #12
 800f0f0:	eeb1 6a43 	vneg.f32	s12, s6
 800f0f4:	edd2 7a02 	vldr	s15, [r2, #8]
 800f0f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0fc:	3214      	adds	r2, #20
 800f0fe:	ece3 6a01 	vstmia	r3!, {s13}
 800f102:	ed52 7a02 	vldr	s15, [r2, #-8]
 800f106:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f10a:	429c      	cmp	r4, r3
 800f10c:	edc3 7a02 	vstr	s15, [r3, #8]
 800f110:	ed52 7a01 	vldr	s15, [r2, #-4]
 800f114:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f118:	edc3 7a05 	vstr	s15, [r3, #20]
 800f11c:	d1ea      	bne.n	800f0f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800f11e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f120:	698b      	ldr	r3, [r1, #24]
 800f122:	edd0 4a02 	vldr	s9, [r0, #8]
 800f126:	edd0 3a00 	vldr	s7, [r0]
 800f12a:	edd0 6a01 	vldr	s13, [r0, #4]
 800f12e:	ed90 5a05 	vldr	s10, [r0, #20]
 800f132:	ed90 2a03 	vldr	s4, [r0, #12]
 800f136:	edd0 5a04 	vldr	s11, [r0, #16]
 800f13a:	ed90 1a07 	vldr	s2, [r0, #28]
 800f13e:	edd0 2a06 	vldr	s5, [r0, #24]
 800f142:	1a9b      	subs	r3, r3, r2
 800f144:	ee07 3a90 	vmov	s15, r3
 800f148:	684b      	ldr	r3, [r1, #4]
 800f14a:	1a9b      	subs	r3, r3, r2
 800f14c:	ee07 3a10 	vmov	s14, r3
 800f150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f154:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f158:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f15c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800f160:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f164:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800f168:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f16c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f170:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f174:	ee32 5a45 	vsub.f32	s10, s4, s10
 800f178:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f17c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800f180:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f182:	694a      	ldr	r2, [r1, #20]
 800f184:	1b13      	subs	r3, r2, r4
 800f186:	ee07 3a10 	vmov	s14, r3
 800f18a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f18e:	680b      	ldr	r3, [r1, #0]
 800f190:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f194:	1b1b      	subs	r3, r3, r4
 800f196:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800f19a:	ee07 3a10 	vmov	s14, r3
 800f19e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f1a6:	eee6 4a87 	vfma.f32	s9, s13, s14
 800f1aa:	ee64 4a86 	vmul.f32	s9, s9, s12
 800f1ae:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800f1b2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f1b4:	698b      	ldr	r3, [r1, #24]
 800f1b6:	1a9b      	subs	r3, r3, r2
 800f1b8:	ee06 3a90 	vmov	s13, r3
 800f1bc:	684b      	ldr	r3, [r1, #4]
 800f1be:	1a9b      	subs	r3, r3, r2
 800f1c0:	ee07 3a10 	vmov	s14, r3
 800f1c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f1c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1cc:	ee66 6a84 	vmul.f32	s13, s13, s8
 800f1d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f1d4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800f1d8:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f1dc:	ee66 6a83 	vmul.f32	s13, s13, s6
 800f1e0:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800f1e4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f1e6:	694a      	ldr	r2, [r1, #20]
 800f1e8:	1b13      	subs	r3, r2, r4
 800f1ea:	ee07 3a10 	vmov	s14, r3
 800f1ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1f2:	680b      	ldr	r3, [r1, #0]
 800f1f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f1f8:	1b1b      	subs	r3, r3, r4
 800f1fa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800f1fe:	ee07 3a10 	vmov	s14, r3
 800f202:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f206:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f20a:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f20e:	edd0 5a08 	vldr	s11, [r0, #32]
 800f212:	ee25 5a06 	vmul.f32	s10, s10, s12
 800f216:	ee31 1a65 	vsub.f32	s2, s2, s11
 800f21a:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800f21e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f220:	698b      	ldr	r3, [r1, #24]
 800f222:	1a9b      	subs	r3, r3, r2
 800f224:	ee07 3a10 	vmov	s14, r3
 800f228:	684b      	ldr	r3, [r1, #4]
 800f22a:	1a9b      	subs	r3, r3, r2
 800f22c:	ee01 3a90 	vmov	s3, r3
 800f230:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f234:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800f238:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f23c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800f240:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800f244:	ee61 1a84 	vmul.f32	s3, s3, s8
 800f248:	eea1 7a21 	vfma.f32	s14, s2, s3
 800f24c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f250:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800f254:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800f256:	694a      	ldr	r2, [r1, #20]
 800f258:	1b13      	subs	r3, r2, r4
 800f25a:	ee03 3a10 	vmov	s6, r3
 800f25e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f262:	680b      	ldr	r3, [r1, #0]
 800f264:	ee23 3a04 	vmul.f32	s6, s6, s8
 800f268:	1b1b      	subs	r3, r3, r4
 800f26a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800f26e:	ee03 3a10 	vmov	s6, r3
 800f272:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800f276:	ee23 4a04 	vmul.f32	s8, s6, s8
 800f27a:	eee1 5a04 	vfma.f32	s11, s2, s8
 800f27e:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f282:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800f286:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800f28a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800f28e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800f292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f296:	dd13      	ble.n	800f2c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800f298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f29c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800f2a0:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800f2a2:	eee3 7a87 	vfma.f32	s15, s7, s14
 800f2a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ae:	dd15      	ble.n	800f2dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800f2b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2b4:	6403      	str	r3, [r0, #64]	@ 0x40
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}
 800f2b8:	4623      	mov	r3, r4
 800f2ba:	e6fd      	b.n	800f0b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f2bc:	462a      	mov	r2, r5
 800f2be:	e706      	b.n	800f0ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f2c0:	d502      	bpl.n	800f2c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800f2c2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800f2c6:	e7e9      	b.n	800f29c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800f2c8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800f2cc:	eea3 2a85 	vfma.f32	s4, s7, s10
 800f2d0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800f2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d8:	dade      	bge.n	800f298 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800f2da:	e7f2      	b.n	800f2c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800f2dc:	d502      	bpl.n	800f2e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800f2de:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800f2e2:	e7e7      	b.n	800f2b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800f2e4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800f2e8:	eee3 4a86 	vfma.f32	s9, s7, s12
 800f2ec:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800f2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2f4:	dadc      	bge.n	800f2b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800f2f6:	e7f2      	b.n	800f2de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800f2f8:	3d800000 	.word	0x3d800000

0800f2fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800f2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f300:	2714      	movs	r7, #20
 800f302:	435f      	muls	r7, r3
 800f304:	eb02 0c07 	add.w	ip, r2, r7
 800f308:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800f30c:	f115 0e0f 	adds.w	lr, r5, #15
 800f310:	f100 80a2 	bmi.w	800f458 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800f314:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800f318:	9c08      	ldr	r4, [sp, #32]
 800f31a:	f8c0 e014 	str.w	lr, [r0, #20]
 800f31e:	2614      	movs	r6, #20
 800f320:	4366      	muls	r6, r4
 800f322:	eb02 0806 	add.w	r8, r2, r6
 800f326:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f32a:	f115 040f 	adds.w	r4, r5, #15
 800f32e:	f100 809f 	bmi.w	800f470 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800f332:	1124      	asrs	r4, r4, #4
 800f334:	eba4 040e 	sub.w	r4, r4, lr
 800f338:	6184      	str	r4, [r0, #24]
 800f33a:	2c00      	cmp	r4, #0
 800f33c:	f000 808a 	beq.w	800f454 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800f340:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800f344:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f348:	5995      	ldr	r5, [r2, r6]
 800f34a:	eba4 0809 	sub.w	r8, r4, r9
 800f34e:	59d4      	ldr	r4, [r2, r7]
 800f350:	eba5 0a04 	sub.w	sl, r5, r4
 800f354:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800f358:	fb0e fe05 	mul.w	lr, lr, r5
 800f35c:	fb0a ee19 	mls	lr, sl, r9, lr
 800f360:	fb08 e404 	mla	r4, r8, r4, lr
 800f364:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800f368:	3c01      	subs	r4, #1
 800f36a:	19a4      	adds	r4, r4, r6
 800f36c:	f100 808c 	bmi.w	800f488 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800f370:	fb94 fef6 	sdiv	lr, r4, r6
 800f374:	f8c0 e000 	str.w	lr, [r0]
 800f378:	fb06 441e 	mls	r4, r6, lr, r4
 800f37c:	6104      	str	r4, [r0, #16]
 800f37e:	2d00      	cmp	r5, #0
 800f380:	f2c0 8095 	blt.w	800f4ae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800f384:	fb95 f4f6 	sdiv	r4, r5, r6
 800f388:	6044      	str	r4, [r0, #4]
 800f38a:	fb06 5514 	mls	r5, r6, r4, r5
 800f38e:	6085      	str	r5, [r0, #8]
 800f390:	60c6      	str	r6, [r0, #12]
 800f392:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800f396:	6945      	ldr	r5, [r0, #20]
 800f398:	59d2      	ldr	r2, [r2, r7]
 800f39a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800f4d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800f39e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800f3a2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800f3a6:	ee07 4a10 	vmov	s14, r4
 800f3aa:	6804      	ldr	r4, [r0, #0]
 800f3ac:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800f3b0:	ee07 2a90 	vmov	s15, r2
 800f3b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f3c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f3c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f3c8:	edd3 6a00 	vldr	s13, [r3]
 800f3cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f3d0:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800f3d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f3d8:	edc0 6a07 	vstr	s13, [r0, #28]
 800f3dc:	edd0 6a01 	vldr	s13, [r0, #4]
 800f3e0:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800f3e4:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800f3e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f3ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f3f0:	ed80 6a08 	vstr	s12, [r0, #32]
 800f3f4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800f3f6:	6242      	str	r2, [r0, #36]	@ 0x24
 800f3f8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800f3fc:	ed93 6a03 	vldr	s12, [r3, #12]
 800f400:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f404:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800f408:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f40c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800f410:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800f414:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800f418:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f41c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800f420:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800f422:	6302      	str	r2, [r0, #48]	@ 0x30
 800f424:	ed93 6a06 	vldr	s12, [r3, #24]
 800f428:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800f42c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f430:	eeb0 7a46 	vmov.f32	s14, s12
 800f434:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800f438:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f43c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800f440:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800f444:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800f448:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f44c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800f450:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800f452:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	f1c5 0501 	rsb	r5, r5, #1
 800f45c:	f015 050f 	ands.w	r5, r5, #15
 800f460:	bf18      	it	ne
 800f462:	2501      	movne	r5, #1
 800f464:	2410      	movs	r4, #16
 800f466:	fb9e fef4 	sdiv	lr, lr, r4
 800f46a:	ebae 0e05 	sub.w	lr, lr, r5
 800f46e:	e753      	b.n	800f318 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800f470:	f1c5 0501 	rsb	r5, r5, #1
 800f474:	f015 050f 	ands.w	r5, r5, #15
 800f478:	bf18      	it	ne
 800f47a:	2501      	movne	r5, #1
 800f47c:	f04f 0910 	mov.w	r9, #16
 800f480:	fb94 f4f9 	sdiv	r4, r4, r9
 800f484:	1b64      	subs	r4, r4, r5
 800f486:	e755      	b.n	800f334 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800f488:	4264      	negs	r4, r4
 800f48a:	fb94 fef6 	sdiv	lr, r4, r6
 800f48e:	f1ce 0800 	rsb	r8, lr, #0
 800f492:	fb06 441e 	mls	r4, r6, lr, r4
 800f496:	f8c0 8000 	str.w	r8, [r0]
 800f49a:	6104      	str	r4, [r0, #16]
 800f49c:	2c00      	cmp	r4, #0
 800f49e:	f43f af6e 	beq.w	800f37e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800f4a2:	ea6f 0e0e 	mvn.w	lr, lr
 800f4a6:	f8c0 e000 	str.w	lr, [r0]
 800f4aa:	1b34      	subs	r4, r6, r4
 800f4ac:	e766      	b.n	800f37c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800f4ae:	426d      	negs	r5, r5
 800f4b0:	fb95 f4f6 	sdiv	r4, r5, r6
 800f4b4:	f1c4 0e00 	rsb	lr, r4, #0
 800f4b8:	fb06 5514 	mls	r5, r6, r4, r5
 800f4bc:	f8c0 e004 	str.w	lr, [r0, #4]
 800f4c0:	6085      	str	r5, [r0, #8]
 800f4c2:	2d00      	cmp	r5, #0
 800f4c4:	f43f af64 	beq.w	800f390 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800f4c8:	43e4      	mvns	r4, r4
 800f4ca:	6044      	str	r4, [r0, #4]
 800f4cc:	1b75      	subs	r5, r6, r5
 800f4ce:	e75e      	b.n	800f38e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800f4d0:	3d800000 	.word	0x3d800000

0800f4d4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	b148      	cbz	r0, 800f4ec <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	b298      	uxth	r0, r3
 800f4dc:	3301      	adds	r3, #1
 800f4de:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800f4e2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 800f4e6:	2900      	cmp	r1, #0
 800f4e8:	d1f7      	bne.n	800f4da <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 800f4ea:	4770      	bx	lr
 800f4ec:	4770      	bx	lr

0800f4ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 800f4ee:	b530      	push	{r4, r5, lr}
 800f4f0:	4604      	mov	r4, r0
 800f4f2:	b159      	cbz	r1, 800f50c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 800f4f4:	b148      	cbz	r0, 800f50a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	b298      	uxth	r0, r3
 800f4fa:	4282      	cmp	r2, r0
 800f4fc:	d905      	bls.n	800f50a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800f4fe:	5ccd      	ldrb	r5, [r1, r3]
 800f500:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 800f504:	3301      	adds	r3, #1
 800f506:	2d00      	cmp	r5, #0
 800f508:	d1f6      	bne.n	800f4f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 800f50a:	bd30      	pop	{r4, r5, pc}
 800f50c:	4608      	mov	r0, r1
 800f50e:	e7fc      	b.n	800f50a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0800f510 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 800f510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f512:	b08b      	sub	sp, #44	@ 0x2c
 800f514:	468c      	mov	ip, r1
 800f516:	2100      	movs	r1, #0
 800f518:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f51c:	4604      	mov	r4, r0
 800f51e:	261f      	movs	r6, #31
 800f520:	af01      	add	r7, sp, #4
 800f522:	fb94 fef3 	sdiv	lr, r4, r3
 800f526:	fb03 441e 	mls	r4, r3, lr, r4
 800f52a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800f52e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 800f532:	b2ec      	uxtb	r4, r5
 800f534:	2d09      	cmp	r5, #9
 800f536:	bfd4      	ite	le
 800f538:	3430      	addle	r4, #48	@ 0x30
 800f53a:	3457      	addgt	r4, #87	@ 0x57
 800f53c:	b2e4      	uxtb	r4, r4
 800f53e:	55bc      	strb	r4, [r7, r6]
 800f540:	4674      	mov	r4, lr
 800f542:	1e71      	subs	r1, r6, #1
 800f544:	b974      	cbnz	r4, 800f564 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 800f546:	2800      	cmp	r0, #0
 800f548:	da05      	bge.n	800f556 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 800f54a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f54c:	4419      	add	r1, r3
 800f54e:	232d      	movs	r3, #45	@ 0x2d
 800f550:	f801 3c24 	strb.w	r3, [r1, #-36]
 800f554:	1eb1      	subs	r1, r6, #2
 800f556:	3101      	adds	r1, #1
 800f558:	4439      	add	r1, r7
 800f55a:	4660      	mov	r0, ip
 800f55c:	f7ff ffc7 	bl	800f4ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800f560:	b00b      	add	sp, #44	@ 0x2c
 800f562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f564:	460e      	mov	r6, r1
 800f566:	e7dc      	b.n	800f522 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0800f568 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 800f568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f56a:	b08b      	sub	sp, #44	@ 0x2c
 800f56c:	468c      	mov	ip, r1
 800f56e:	2100      	movs	r1, #0
 800f570:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800f574:	ae01      	add	r6, sp, #4
 800f576:	211f      	movs	r1, #31
 800f578:	fbb0 f7f3 	udiv	r7, r0, r3
 800f57c:	fb03 0517 	mls	r5, r3, r7, r0
 800f580:	b2ec      	uxtb	r4, r5
 800f582:	2d09      	cmp	r5, #9
 800f584:	bfd4      	ite	le
 800f586:	3430      	addle	r4, #48	@ 0x30
 800f588:	3457      	addgt	r4, #87	@ 0x57
 800f58a:	b2e4      	uxtb	r4, r4
 800f58c:	558c      	strb	r4, [r1, r6]
 800f58e:	4638      	mov	r0, r7
 800f590:	1e4c      	subs	r4, r1, #1
 800f592:	b92f      	cbnz	r7, 800f5a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 800f594:	4431      	add	r1, r6
 800f596:	4660      	mov	r0, ip
 800f598:	f7ff ffa9 	bl	800f4ee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800f59c:	b00b      	add	sp, #44	@ 0x2c
 800f59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	e7e9      	b.n	800f578 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0800f5a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 800f5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a8:	4691      	mov	r9, r2
 800f5aa:	b085      	sub	sp, #20
 800f5ac:	6802      	ldr	r2, [r0, #0]
 800f5ae:	9201      	str	r2, [sp, #4]
 800f5b0:	4688      	mov	r8, r1
 800f5b2:	4683      	mov	fp, r0
 800f5b4:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800f5b8:	9103      	str	r1, [sp, #12]
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	461c      	mov	r4, r3
 800f5be:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800f5c2:	9302      	str	r3, [sp, #8]
 800f5c4:	f7ff ff86 	bl	800f4d4 <_ZN8touchgfx7Unicode6strlenEPKt>
 800f5c8:	f1b8 0f00 	cmp.w	r8, #0
 800f5cc:	bf0c      	ite	eq
 800f5ce:	4684      	moveq	ip, r0
 800f5d0:	f100 0c01 	addne.w	ip, r0, #1
 800f5d4:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 800f5d8:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 800f5dc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800f5de:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800f5e0:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 800f5e4:	9903      	ldr	r1, [sp, #12]
 800f5e6:	fa1f fc8c 	uxth.w	ip, ip
 800f5ea:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f5ee:	d041      	beq.n	800f674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800f5f0:	d834      	bhi.n	800f65c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 800f5f2:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800f5f6:	d059      	beq.n	800f6ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 800f5f8:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 800f5fc:	d03a      	beq.n	800f674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800f5fe:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 800f602:	d034      	beq.n	800f66e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800f604:	2400      	movs	r4, #0
 800f606:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800f60a:	3a01      	subs	r2, #1
 800f60c:	b169      	cbz	r1, 800f62a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800f60e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f610:	458c      	cmp	ip, r1
 800f612:	da09      	bge.n	800f628 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800f614:	eba1 010c 	sub.w	r1, r1, ip
 800f618:	b289      	uxth	r1, r1
 800f61a:	b933      	cbnz	r3, 800f62a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800f61c:	2e00      	cmp	r6, #0
 800f61e:	d051      	beq.n	800f6c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800f620:	2800      	cmp	r0, #0
 800f622:	d04f      	beq.n	800f6c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800f624:	440c      	add	r4, r1
 800f626:	b2a4      	uxth	r4, r4
 800f628:	2100      	movs	r1, #0
 800f62a:	682b      	ldr	r3, [r5, #0]
 800f62c:	4293      	cmp	r3, r2
 800f62e:	da07      	bge.n	800f640 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800f630:	f1b8 0f00 	cmp.w	r8, #0
 800f634:	d004      	beq.n	800f640 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800f636:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 800f63a:	682b      	ldr	r3, [r5, #0]
 800f63c:	3301      	adds	r3, #1
 800f63e:	602b      	str	r3, [r5, #0]
 800f640:	2730      	movs	r7, #48	@ 0x30
 800f642:	2c00      	cmp	r4, #0
 800f644:	d04e      	beq.n	800f6e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800f646:	682e      	ldr	r6, [r5, #0]
 800f648:	3c01      	subs	r4, #1
 800f64a:	42b2      	cmp	r2, r6
 800f64c:	b2a4      	uxth	r4, r4
 800f64e:	dd49      	ble.n	800f6e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800f650:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800f654:	682b      	ldr	r3, [r5, #0]
 800f656:	3301      	adds	r3, #1
 800f658:	602b      	str	r3, [r5, #0]
 800f65a:	e7f2      	b.n	800f642 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 800f65c:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 800f660:	d01d      	beq.n	800f69e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 800f662:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 800f666:	d002      	beq.n	800f66e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800f668:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 800f66c:	e7c9      	b.n	800f602 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 800f66e:	4684      	mov	ip, r0
 800f670:	f04f 0800 	mov.w	r8, #0
 800f674:	2c00      	cmp	r4, #0
 800f676:	d0c6      	beq.n	800f606 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800f678:	b947      	cbnz	r7, 800f68c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800f67a:	2801      	cmp	r0, #1
 800f67c:	d106      	bne.n	800f68c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800f67e:	8814      	ldrh	r4, [r2, #0]
 800f680:	2c30      	cmp	r4, #48	@ 0x30
 800f682:	bf02      	ittt	eq
 800f684:	3202      	addeq	r2, #2
 800f686:	f8cb 2000 	streq.w	r2, [fp]
 800f68a:	4638      	moveq	r0, r7
 800f68c:	45bc      	cmp	ip, r7
 800f68e:	da14      	bge.n	800f6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 800f690:	b2bf      	uxth	r7, r7
 800f692:	eba7 040c 	sub.w	r4, r7, ip
 800f696:	b2a4      	uxth	r4, r4
 800f698:	46bc      	mov	ip, r7
 800f69a:	2600      	movs	r6, #0
 800f69c:	e7b3      	b.n	800f606 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800f69e:	4684      	mov	ip, r0
 800f6a0:	b16c      	cbz	r4, 800f6be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 800f6a2:	42b8      	cmp	r0, r7
 800f6a4:	dd00      	ble.n	800f6a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 800f6a6:	b2b8      	uxth	r0, r7
 800f6a8:	2400      	movs	r4, #0
 800f6aa:	e003      	b.n	800f6b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 800f6ac:	f04f 0c01 	mov.w	ip, #1
 800f6b0:	2400      	movs	r4, #0
 800f6b2:	4660      	mov	r0, ip
 800f6b4:	4626      	mov	r6, r4
 800f6b6:	46a0      	mov	r8, r4
 800f6b8:	e7a5      	b.n	800f606 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800f6ba:	2400      	movs	r4, #0
 800f6bc:	e7ed      	b.n	800f69a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 800f6be:	4626      	mov	r6, r4
 800f6c0:	46a0      	mov	r8, r4
 800f6c2:	e7a0      	b.n	800f606 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800f6c4:	2900      	cmp	r1, #0
 800f6c6:	d0b0      	beq.n	800f62a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800f6c8:	2720      	movs	r7, #32
 800f6ca:	682e      	ldr	r6, [r5, #0]
 800f6cc:	2900      	cmp	r1, #0
 800f6ce:	d0ac      	beq.n	800f62a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800f6d0:	3901      	subs	r1, #1
 800f6d2:	4296      	cmp	r6, r2
 800f6d4:	b289      	uxth	r1, r1
 800f6d6:	daa7      	bge.n	800f628 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800f6d8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	3301      	adds	r3, #1
 800f6e0:	602b      	str	r3, [r5, #0]
 800f6e2:	e7f2      	b.n	800f6ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 800f6e4:	b188      	cbz	r0, 800f70a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800f6e6:	682b      	ldr	r3, [r5, #0]
 800f6e8:	3801      	subs	r0, #1
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	b280      	uxth	r0, r0
 800f6ee:	dd0c      	ble.n	800f70a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800f6f0:	f8db 3000 	ldr.w	r3, [fp]
 800f6f4:	1c9c      	adds	r4, r3, #2
 800f6f6:	f8cb 4000 	str.w	r4, [fp]
 800f6fa:	881c      	ldrh	r4, [r3, #0]
 800f6fc:	682b      	ldr	r3, [r5, #0]
 800f6fe:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 800f702:	682b      	ldr	r3, [r5, #0]
 800f704:	3301      	adds	r3, #1
 800f706:	602b      	str	r3, [r5, #0]
 800f708:	e7ec      	b.n	800f6e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800f70a:	2620      	movs	r6, #32
 800f70c:	b151      	cbz	r1, 800f724 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800f70e:	6828      	ldr	r0, [r5, #0]
 800f710:	3901      	subs	r1, #1
 800f712:	4282      	cmp	r2, r0
 800f714:	b289      	uxth	r1, r1
 800f716:	dd05      	ble.n	800f724 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 800f718:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	3301      	adds	r3, #1
 800f720:	602b      	str	r3, [r5, #0]
 800f722:	e7f3      	b.n	800f70c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 800f724:	b005      	add	sp, #20
 800f726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f72a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 800f72a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f72e:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 800f732:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 800f736:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 800f73a:	2400      	movs	r4, #0
 800f73c:	8014      	strh	r4, [r2, #0]
 800f73e:	701c      	strb	r4, [r3, #0]
 800f740:	f888 4000 	strb.w	r4, [r8]
 800f744:	f88c 4000 	strb.w	r4, [ip]
 800f748:	f88e 4000 	strb.w	r4, [lr]
 800f74c:	703c      	strb	r4, [r7, #0]
 800f74e:	6804      	ldr	r4, [r0, #0]
 800f750:	b1a4      	cbz	r4, 800f77c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 800f752:	8824      	ldrh	r4, [r4, #0]
 800f754:	f04f 0901 	mov.w	r9, #1
 800f758:	b314      	cbz	r4, 800f7a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800f75a:	2c2b      	cmp	r4, #43	@ 0x2b
 800f75c:	d001      	beq.n	800f762 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 800f75e:	2c20      	cmp	r4, #32
 800f760:	d110      	bne.n	800f784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 800f762:	8014      	strh	r4, [r2, #0]
 800f764:	6804      	ldr	r4, [r0, #0]
 800f766:	b10c      	cbz	r4, 800f76c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 800f768:	3402      	adds	r4, #2
 800f76a:	6004      	str	r4, [r0, #0]
 800f76c:	680c      	ldr	r4, [r1, #0]
 800f76e:	b10c      	cbz	r4, 800f774 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 800f770:	3401      	adds	r4, #1
 800f772:	600c      	str	r4, [r1, #0]
 800f774:	6804      	ldr	r4, [r0, #0]
 800f776:	b17c      	cbz	r4, 800f798 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 800f778:	8824      	ldrh	r4, [r4, #0]
 800f77a:	e7ed      	b.n	800f758 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800f77c:	680c      	ldr	r4, [r1, #0]
 800f77e:	b17c      	cbz	r4, 800f7a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800f780:	7824      	ldrb	r4, [r4, #0]
 800f782:	e7e7      	b.n	800f754 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 800f784:	2c2d      	cmp	r4, #45	@ 0x2d
 800f786:	d102      	bne.n	800f78e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 800f788:	f883 9000 	strb.w	r9, [r3]
 800f78c:	e7ea      	b.n	800f764 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800f78e:	2c23      	cmp	r4, #35	@ 0x23
 800f790:	d107      	bne.n	800f7a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 800f792:	f888 9000 	strb.w	r9, [r8]
 800f796:	e7e5      	b.n	800f764 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 800f798:	680c      	ldr	r4, [r1, #0]
 800f79a:	b10c      	cbz	r4, 800f7a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 800f79c:	7824      	ldrb	r4, [r4, #0]
 800f79e:	e7db      	b.n	800f758 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 800f7a0:	2400      	movs	r4, #0
 800f7a2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800f7a6:	2b09      	cmp	r3, #9
 800f7a8:	d901      	bls.n	800f7ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 800f7aa:	2c2a      	cmp	r4, #42	@ 0x2a
 800f7ac:	d122      	bne.n	800f7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	2c30      	cmp	r4, #48	@ 0x30
 800f7b2:	f88e 3000 	strb.w	r3, [lr]
 800f7b6:	d10d      	bne.n	800f7d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800f7b8:	f88c 3000 	strb.w	r3, [ip]
 800f7bc:	6803      	ldr	r3, [r0, #0]
 800f7be:	b10b      	cbz	r3, 800f7c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 800f7c0:	3302      	adds	r3, #2
 800f7c2:	6003      	str	r3, [r0, #0]
 800f7c4:	680b      	ldr	r3, [r1, #0]
 800f7c6:	b10b      	cbz	r3, 800f7cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	600b      	str	r3, [r1, #0]
 800f7cc:	6803      	ldr	r3, [r0, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d02f      	beq.n	800f832 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 800f7d2:	881c      	ldrh	r4, [r3, #0]
 800f7d4:	2c2a      	cmp	r4, #42	@ 0x2a
 800f7d6:	d135      	bne.n	800f844 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800f7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7dc:	6033      	str	r3, [r6, #0]
 800f7de:	6803      	ldr	r3, [r0, #0]
 800f7e0:	b10b      	cbz	r3, 800f7e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 800f7e2:	3302      	adds	r3, #2
 800f7e4:	6003      	str	r3, [r0, #0]
 800f7e6:	680b      	ldr	r3, [r1, #0]
 800f7e8:	b10b      	cbz	r3, 800f7ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	600b      	str	r3, [r1, #0]
 800f7ee:	6803      	ldr	r3, [r0, #0]
 800f7f0:	b31b      	cbz	r3, 800f83a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 800f7f2:	881c      	ldrh	r4, [r3, #0]
 800f7f4:	2c2e      	cmp	r4, #46	@ 0x2e
 800f7f6:	d11a      	bne.n	800f82e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	703b      	strb	r3, [r7, #0]
 800f7fc:	6803      	ldr	r3, [r0, #0]
 800f7fe:	b10b      	cbz	r3, 800f804 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 800f800:	3302      	adds	r3, #2
 800f802:	6003      	str	r3, [r0, #0]
 800f804:	680b      	ldr	r3, [r1, #0]
 800f806:	b10b      	cbz	r3, 800f80c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 800f808:	3301      	adds	r3, #1
 800f80a:	600b      	str	r3, [r1, #0]
 800f80c:	6803      	ldr	r3, [r0, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d036      	beq.n	800f880 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	2b2a      	cmp	r3, #42	@ 0x2a
 800f816:	d137      	bne.n	800f888 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800f818:	f04f 33ff 	mov.w	r3, #4294967295
 800f81c:	602b      	str	r3, [r5, #0]
 800f81e:	6803      	ldr	r3, [r0, #0]
 800f820:	b10b      	cbz	r3, 800f826 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 800f822:	3302      	adds	r3, #2
 800f824:	6003      	str	r3, [r0, #0]
 800f826:	680b      	ldr	r3, [r1, #0]
 800f828:	b10b      	cbz	r3, 800f82e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800f82a:	3301      	adds	r3, #1
 800f82c:	600b      	str	r3, [r1, #0]
 800f82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f832:	680c      	ldr	r4, [r1, #0]
 800f834:	b134      	cbz	r4, 800f844 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 800f836:	7824      	ldrb	r4, [r4, #0]
 800f838:	e7cc      	b.n	800f7d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 800f83a:	680b      	ldr	r3, [r1, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d0f6      	beq.n	800f82e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 800f840:	781c      	ldrb	r4, [r3, #0]
 800f842:	e7d7      	b.n	800f7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800f844:	2300      	movs	r3, #0
 800f846:	6033      	str	r3, [r6, #0]
 800f848:	220a      	movs	r2, #10
 800f84a:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f84e:	fa1f f38c 	uxth.w	r3, ip
 800f852:	2b09      	cmp	r3, #9
 800f854:	d8ce      	bhi.n	800f7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 800f856:	6833      	ldr	r3, [r6, #0]
 800f858:	fb02 c303 	mla	r3, r2, r3, ip
 800f85c:	6033      	str	r3, [r6, #0]
 800f85e:	6803      	ldr	r3, [r0, #0]
 800f860:	b10b      	cbz	r3, 800f866 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 800f862:	3302      	adds	r3, #2
 800f864:	6003      	str	r3, [r0, #0]
 800f866:	680b      	ldr	r3, [r1, #0]
 800f868:	b10b      	cbz	r3, 800f86e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 800f86a:	3301      	adds	r3, #1
 800f86c:	600b      	str	r3, [r1, #0]
 800f86e:	6803      	ldr	r3, [r0, #0]
 800f870:	b10b      	cbz	r3, 800f876 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 800f872:	881c      	ldrh	r4, [r3, #0]
 800f874:	e7e9      	b.n	800f84a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800f876:	680c      	ldr	r4, [r1, #0]
 800f878:	2c00      	cmp	r4, #0
 800f87a:	d0e6      	beq.n	800f84a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800f87c:	7824      	ldrb	r4, [r4, #0]
 800f87e:	e7e4      	b.n	800f84a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 800f880:	680b      	ldr	r3, [r1, #0]
 800f882:	b10b      	cbz	r3, 800f888 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	e7c5      	b.n	800f814 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 800f888:	2200      	movs	r2, #0
 800f88a:	602a      	str	r2, [r5, #0]
 800f88c:	240a      	movs	r4, #10
 800f88e:	3b30      	subs	r3, #48	@ 0x30
 800f890:	b29e      	uxth	r6, r3
 800f892:	2e09      	cmp	r6, #9
 800f894:	682a      	ldr	r2, [r5, #0]
 800f896:	d813      	bhi.n	800f8c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 800f898:	fb04 3302 	mla	r3, r4, r2, r3
 800f89c:	602b      	str	r3, [r5, #0]
 800f89e:	6803      	ldr	r3, [r0, #0]
 800f8a0:	b10b      	cbz	r3, 800f8a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 800f8a2:	3302      	adds	r3, #2
 800f8a4:	6003      	str	r3, [r0, #0]
 800f8a6:	680b      	ldr	r3, [r1, #0]
 800f8a8:	b10b      	cbz	r3, 800f8ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	600b      	str	r3, [r1, #0]
 800f8ae:	6803      	ldr	r3, [r0, #0]
 800f8b0:	b10b      	cbz	r3, 800f8b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 800f8b2:	881b      	ldrh	r3, [r3, #0]
 800f8b4:	e7eb      	b.n	800f88e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800f8b6:	680b      	ldr	r3, [r1, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d0e8      	beq.n	800f88e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	e7e6      	b.n	800f88e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 800f8c0:	2a06      	cmp	r2, #6
 800f8c2:	bfa8      	it	ge
 800f8c4:	2206      	movge	r2, #6
 800f8c6:	602a      	str	r2, [r5, #0]
 800f8c8:	e7b1      	b.n	800f82e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0800f8ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 800f8ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ce:	b0a3      	sub	sp, #140	@ 0x8c
 800f8d0:	2600      	movs	r6, #0
 800f8d2:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 800f8d6:	4607      	mov	r7, r0
 800f8d8:	4688      	mov	r8, r1
 800f8da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f8de:	4631      	mov	r1, r6
 800f8e0:	2242      	movs	r2, #66	@ 0x42
 800f8e2:	4648      	mov	r0, r9
 800f8e4:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800f8e6:	960d      	str	r6, [sp, #52]	@ 0x34
 800f8e8:	f003 facf 	bl	8012e8a <memset>
 800f8ec:	b15f      	cbz	r7, 800f906 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 800f8ee:	f108 3aff 	add.w	sl, r8, #4294967295
 800f8f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8f6:	b152      	cbz	r2, 800f90e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 800f8f8:	8812      	ldrh	r2, [r2, #0]
 800f8fa:	b10a      	cbz	r2, 800f900 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800f8fc:	459a      	cmp	sl, r3
 800f8fe:	dc2e      	bgt.n	800f95e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 800f900:	2200      	movs	r2, #0
 800f902:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800f906:	4638      	mov	r0, r7
 800f908:	b023      	add	sp, #140	@ 0x8c
 800f90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90e:	9a08      	ldr	r2, [sp, #32]
 800f910:	2a00      	cmp	r2, #0
 800f912:	d0f5      	beq.n	800f900 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 800f914:	7812      	ldrb	r2, [r2, #0]
 800f916:	e7f0      	b.n	800f8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 800f918:	2d00      	cmp	r5, #0
 800f91a:	d0ea      	beq.n	800f8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f91c:	782a      	ldrb	r2, [r5, #0]
 800f91e:	b142      	cbz	r2, 800f932 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 800f920:	2a25      	cmp	r2, #37	@ 0x25
 800f922:	d001      	beq.n	800f928 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 800f924:	459a      	cmp	sl, r3
 800f926:	dc08      	bgt.n	800f93a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 800f928:	f1bb 0f00 	cmp.w	fp, #0
 800f92c:	d121      	bne.n	800f972 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 800f92e:	2d00      	cmp	r5, #0
 800f930:	d0df      	beq.n	800f8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f932:	782a      	ldrb	r2, [r5, #0]
 800f934:	f04f 0b00 	mov.w	fp, #0
 800f938:	e01d      	b.n	800f976 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 800f93a:	f1bb 0f00 	cmp.w	fp, #0
 800f93e:	d078      	beq.n	800fa32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 800f940:	f8bb 2000 	ldrh.w	r2, [fp]
 800f944:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 800f948:	f1bb 0f00 	cmp.w	fp, #0
 800f94c:	d002      	beq.n	800f954 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 800f94e:	f10b 0202 	add.w	r2, fp, #2
 800f952:	9209      	str	r2, [sp, #36]	@ 0x24
 800f954:	b10d      	cbz	r5, 800f95a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 800f956:	3501      	adds	r5, #1
 800f958:	9508      	str	r5, [sp, #32]
 800f95a:	3301      	adds	r3, #1
 800f95c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f95e:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 800f962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f964:	f1bb 0f00 	cmp.w	fp, #0
 800f968:	d0d6      	beq.n	800f918 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 800f96a:	f8bb 2000 	ldrh.w	r2, [fp]
 800f96e:	2a00      	cmp	r2, #0
 800f970:	d1d6      	bne.n	800f920 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 800f972:	f8bb 2000 	ldrh.w	r2, [fp]
 800f976:	2a00      	cmp	r2, #0
 800f978:	d0bb      	beq.n	800f8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f97a:	459a      	cmp	sl, r3
 800f97c:	ddb9      	ble.n	800f8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800f97e:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 800f982:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f986:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 800f98a:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 800f98e:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 800f992:	960e      	str	r6, [sp, #56]	@ 0x38
 800f994:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 800f998:	960f      	str	r6, [sp, #60]	@ 0x3c
 800f99a:	f1bb 0f00 	cmp.w	fp, #0
 800f99e:	d002      	beq.n	800f9a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 800f9a0:	f10b 0302 	add.w	r3, fp, #2
 800f9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9a6:	b10d      	cbz	r5, 800f9ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 800f9a8:	1c6b      	adds	r3, r5, #1
 800f9aa:	9308      	str	r3, [sp, #32]
 800f9ac:	ab0f      	add	r3, sp, #60	@ 0x3c
 800f9ae:	9305      	str	r3, [sp, #20]
 800f9b0:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 800f9b4:	9304      	str	r3, [sp, #16]
 800f9b6:	ab0e      	add	r3, sp, #56	@ 0x38
 800f9b8:	9303      	str	r3, [sp, #12]
 800f9ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800f9bc:	9302      	str	r3, [sp, #8]
 800f9be:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f9c2:	9301      	str	r3, [sp, #4]
 800f9c4:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f9ce:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 800f9d2:	a908      	add	r1, sp, #32
 800f9d4:	a809      	add	r0, sp, #36	@ 0x24
 800f9d6:	f7ff fea8 	bl	800f72a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 800f9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	bfbe      	ittt	lt
 800f9e0:	6823      	ldrlt	r3, [r4, #0]
 800f9e2:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800f9e6:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800f9e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9ea:	bfb8      	it	lt
 800f9ec:	3404      	addlt	r4, #4
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	bfb8      	it	lt
 800f9f2:	6823      	ldrlt	r3, [r4, #0]
 800f9f4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800f9f8:	bfbe      	ittt	lt
 800f9fa:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 800f9fe:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 800fa00:	3404      	addlt	r4, #4
 800fa02:	b1d9      	cbz	r1, 800fa3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 800fa04:	880b      	ldrh	r3, [r1, #0]
 800fa06:	2b69      	cmp	r3, #105	@ 0x69
 800fa08:	d01f      	beq.n	800fa4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fa0a:	d82f      	bhi.n	800fa6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 800fa0c:	2b58      	cmp	r3, #88	@ 0x58
 800fa0e:	d01c      	beq.n	800fa4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fa10:	d818      	bhi.n	800fa44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 800fa12:	2b25      	cmp	r3, #37	@ 0x25
 800fa14:	d034      	beq.n	800fa80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 800fa16:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 800fa1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa1c:	f1bb 0f00 	cmp.w	fp, #0
 800fa20:	f000 80b8 	beq.w	800fb94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 800fa24:	f8bb 5000 	ldrh.w	r5, [fp]
 800fa28:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	930d      	str	r3, [sp, #52]	@ 0x34
 800fa30:	e029      	b.n	800fa86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800fa32:	b10d      	cbz	r5, 800fa38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 800fa34:	782a      	ldrb	r2, [r5, #0]
 800fa36:	e785      	b.n	800f944 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800fa38:	462a      	mov	r2, r5
 800fa3a:	e783      	b.n	800f944 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 800fa3c:	2a00      	cmp	r2, #0
 800fa3e:	d0ea      	beq.n	800fa16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800fa40:	7813      	ldrb	r3, [r2, #0]
 800fa42:	e7e0      	b.n	800fa06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 800fa44:	3b63      	subs	r3, #99	@ 0x63
 800fa46:	2b01      	cmp	r3, #1
 800fa48:	d8e5      	bhi.n	800fa16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800fa4a:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800fa4e:	b329      	cbz	r1, 800fa9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 800fa50:	880b      	ldrh	r3, [r1, #0]
 800fa52:	2b69      	cmp	r3, #105	@ 0x69
 800fa54:	d063      	beq.n	800fb1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800fa56:	d825      	bhi.n	800faa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 800fa58:	2b63      	cmp	r3, #99	@ 0x63
 800fa5a:	d038      	beq.n	800face <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 800fa5c:	2b64      	cmp	r3, #100	@ 0x64
 800fa5e:	d05e      	beq.n	800fb1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 800fa60:	2b58      	cmp	r3, #88	@ 0x58
 800fa62:	d07b      	beq.n	800fb5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 800fa64:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 800fa68:	4625      	mov	r5, r4
 800fa6a:	e036      	b.n	800fada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fa6c:	2b73      	cmp	r3, #115	@ 0x73
 800fa6e:	d0ec      	beq.n	800fa4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fa70:	d802      	bhi.n	800fa78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 800fa72:	2b6f      	cmp	r3, #111	@ 0x6f
 800fa74:	d1cf      	bne.n	800fa16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 800fa76:	e7e8      	b.n	800fa4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fa78:	2b75      	cmp	r3, #117	@ 0x75
 800fa7a:	d0e6      	beq.n	800fa4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 800fa7c:	2b78      	cmp	r3, #120	@ 0x78
 800fa7e:	e7f9      	b.n	800fa74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 800fa80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa82:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 800fa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa88:	b10b      	cbz	r3, 800fa8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 800fa8a:	3302      	adds	r3, #2
 800fa8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa8e:	9b08      	ldr	r3, [sp, #32]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f43f af2e 	beq.w	800f8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fa96:	3301      	adds	r3, #1
 800fa98:	9308      	str	r3, [sp, #32]
 800fa9a:	e72a      	b.n	800f8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 800fa9c:	2a00      	cmp	r2, #0
 800fa9e:	d0e1      	beq.n	800fa64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800faa0:	7813      	ldrb	r3, [r2, #0]
 800faa2:	e7d6      	b.n	800fa52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 800faa4:	2b73      	cmp	r3, #115	@ 0x73
 800faa6:	d036      	beq.n	800fb16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 800faa8:	d807      	bhi.n	800faba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 800faaa:	2b6f      	cmp	r3, #111	@ 0x6f
 800faac:	d1da      	bne.n	800fa64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800faae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fab0:	1d25      	adds	r5, r4, #4
 800fab2:	eba8 0202 	sub.w	r2, r8, r2
 800fab6:	2308      	movs	r3, #8
 800fab8:	e04a      	b.n	800fb50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800faba:	2b75      	cmp	r3, #117	@ 0x75
 800fabc:	d043      	beq.n	800fb46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 800fabe:	2b78      	cmp	r3, #120	@ 0x78
 800fac0:	d1d0      	bne.n	800fa64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 800fac2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fac4:	1d25      	adds	r5, r4, #4
 800fac6:	eba8 0202 	sub.w	r2, r8, r2
 800faca:	2310      	movs	r3, #16
 800facc:	e040      	b.n	800fb50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 800face:	6823      	ldr	r3, [r4, #0]
 800fad0:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800fad4:	1d25      	adds	r5, r4, #4
 800fad6:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 800fada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fadc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d052      	beq.n	800fb8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 800fae4:	881a      	ldrh	r2, [r3, #0]
 800fae6:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 800faea:	a80d      	add	r0, sp, #52	@ 0x34
 800faec:	9005      	str	r0, [sp, #20]
 800faee:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 800faf2:	9004      	str	r0, [sp, #16]
 800faf4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800faf6:	9003      	str	r0, [sp, #12]
 800faf8:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 800fafc:	9002      	str	r0, [sp, #8]
 800fafe:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800fb00:	9001      	str	r0, [sp, #4]
 800fb02:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 800fb06:	9000      	str	r0, [sp, #0]
 800fb08:	e9cd 8706 	strd	r8, r7, [sp, #24]
 800fb0c:	a810      	add	r0, sp, #64	@ 0x40
 800fb0e:	f7ff fd49 	bl	800f5a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 800fb12:	462c      	mov	r4, r5
 800fb14:	e7b7      	b.n	800fa86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	1d25      	adds	r5, r4, #4
 800fb1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb1c:	e7dd      	b.n	800fada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fb1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb20:	6820      	ldr	r0, [r4, #0]
 800fb22:	eba8 0202 	sub.w	r2, r8, r2
 800fb26:	230a      	movs	r3, #10
 800fb28:	b292      	uxth	r2, r2
 800fb2a:	4649      	mov	r1, r9
 800fb2c:	f7ff fcf0 	bl	800f510 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 800fb30:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800fb34:	2b2d      	cmp	r3, #45	@ 0x2d
 800fb36:	f104 0504 	add.w	r5, r4, #4
 800fb3a:	d1ce      	bne.n	800fada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fb3c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800fb40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb42:	3302      	adds	r3, #2
 800fb44:	e7e9      	b.n	800fb1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 800fb46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb48:	1d25      	adds	r5, r4, #4
 800fb4a:	eba8 0202 	sub.w	r2, r8, r2
 800fb4e:	230a      	movs	r3, #10
 800fb50:	b292      	uxth	r2, r2
 800fb52:	4649      	mov	r1, r9
 800fb54:	6820      	ldr	r0, [r4, #0]
 800fb56:	f7ff fd07 	bl	800f568 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 800fb5a:	e7be      	b.n	800fada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fb5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb5e:	6820      	ldr	r0, [r4, #0]
 800fb60:	eba8 0202 	sub.w	r2, r8, r2
 800fb64:	b292      	uxth	r2, r2
 800fb66:	2310      	movs	r3, #16
 800fb68:	4649      	mov	r1, r9
 800fb6a:	f7ff fcfd 	bl	800f568 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 800fb6e:	1d25      	adds	r5, r4, #4
 800fb70:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 800fb74:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0ae      	beq.n	800fada <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 800fb7c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 800fb80:	2919      	cmp	r1, #25
 800fb82:	d8f7      	bhi.n	800fb74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800fb84:	3b20      	subs	r3, #32
 800fb86:	8013      	strh	r3, [r2, #0]
 800fb88:	e7f4      	b.n	800fb74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 800fb8a:	9a08      	ldr	r2, [sp, #32]
 800fb8c:	2a00      	cmp	r2, #0
 800fb8e:	d0aa      	beq.n	800fae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800fb90:	7812      	ldrb	r2, [r2, #0]
 800fb92:	e7a8      	b.n	800fae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 800fb94:	2d00      	cmp	r5, #0
 800fb96:	f43f af47 	beq.w	800fa28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 800fb9a:	782d      	ldrb	r5, [r5, #0]
 800fb9c:	e744      	b.n	800fa28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0800fb9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 800fb9e:	b507      	push	{r0, r1, r2, lr}
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	4613      	mov	r3, r2
 800fba4:	2200      	movs	r2, #0
 800fba6:	f7ff fe90 	bl	800f8ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 800fbaa:	b003      	add	sp, #12
 800fbac:	f85d fb04 	ldr.w	pc, [sp], #4

0800fbb0 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 800fbb0:	b40c      	push	{r2, r3}
 800fbb2:	b507      	push	{r0, r1, r2, lr}
 800fbb4:	ab04      	add	r3, sp, #16
 800fbb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	f7ff ffef 	bl	800fb9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 800fbc0:	b003      	add	sp, #12
 800fbc2:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbc6:	b002      	add	sp, #8
 800fbc8:	4770      	bx	lr
	...

0800fbcc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800fbcc:	4b01      	ldr	r3, [pc, #4]	@ (800fbd4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800fbce:	6018      	str	r0, [r3, #0]
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop
 800fbd4:	20015498 	.word	0x20015498

0800fbd8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800fbd8:	4b06      	ldr	r3, [pc, #24]	@ (800fbf4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800fbda:	881a      	ldrh	r2, [r3, #0]
 800fbdc:	4282      	cmp	r2, r0
 800fbde:	d807      	bhi.n	800fbf0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800fbe0:	4b05      	ldr	r3, [pc, #20]	@ (800fbf8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	4298      	cmp	r0, r3
 800fbe8:	bfac      	ite	ge
 800fbea:	2000      	movge	r0, #0
 800fbec:	2001      	movlt	r0, #1
 800fbee:	4770      	bx	lr
 800fbf0:	2000      	movs	r0, #0
 800fbf2:	4770      	bx	lr
 800fbf4:	200154b8 	.word	0x200154b8
 800fbf8:	200154bc 	.word	0x200154bc

0800fbfc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800fbfc:	b508      	push	{r3, lr}
 800fbfe:	4601      	mov	r1, r0
 800fc00:	f7ff ffea 	bl	800fbd8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800fc04:	b118      	cbz	r0, 800fc0e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800fc06:	4b02      	ldr	r3, [pc, #8]	@ (800fc10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800fc0e:	bd08      	pop	{r3, pc}
 800fc10:	2001549c 	.word	0x2001549c

0800fc14 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800fc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc16:	4c24      	ldr	r4, [pc, #144]	@ (800fca8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d042      	beq.n	800fca4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800fc1e:	4a23      	ldr	r2, [pc, #140]	@ (800fcac <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800fc20:	4d23      	ldr	r5, [pc, #140]	@ (800fcb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800fc22:	8811      	ldrh	r1, [r2, #0]
 800fc24:	f8b5 c000 	ldrh.w	ip, [r5]
 800fc28:	4822      	ldr	r0, [pc, #136]	@ (800fcb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800fc2a:	4461      	add	r1, ip
 800fc2c:	1c4a      	adds	r2, r1, #1
 800fc2e:	f022 0201 	bic.w	r2, r2, #1
 800fc32:	008f      	lsls	r7, r1, #2
 800fc34:	0412      	lsls	r2, r2, #16
 800fc36:	19de      	adds	r6, r3, r7
 800fc38:	0c12      	lsrs	r2, r2, #16
 800fc3a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800fc3e:	6006      	str	r6, [r0, #0]
 800fc40:	4e1d      	ldr	r6, [pc, #116]	@ (800fcb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800fc42:	19da      	adds	r2, r3, r7
 800fc44:	6032      	str	r2, [r6, #0]
 800fc46:	220e      	movs	r2, #14
 800fc48:	fb02 f20c 	mul.w	r2, r2, ip
 800fc4c:	3203      	adds	r2, #3
 800fc4e:	f022 0203 	bic.w	r2, r2, #3
 800fc52:	443a      	add	r2, r7
 800fc54:	4f19      	ldr	r7, [pc, #100]	@ (800fcbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800fc56:	4413      	add	r3, r2
 800fc58:	603b      	str	r3, [r7, #0]
 800fc5a:	4f19      	ldr	r7, [pc, #100]	@ (800fcc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	803b      	strh	r3, [r7, #0]
 800fc60:	4f18      	ldr	r7, [pc, #96]	@ (800fcc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800fc62:	683f      	ldr	r7, [r7, #0]
 800fc64:	1aba      	subs	r2, r7, r2
 800fc66:	4f18      	ldr	r7, [pc, #96]	@ (800fcc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800fc68:	603a      	str	r2, [r7, #0]
 800fc6a:	4a18      	ldr	r2, [pc, #96]	@ (800fccc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800fc6c:	469c      	mov	ip, r3
 800fc6e:	8013      	strh	r3, [r2, #0]
 800fc70:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800fc74:	428b      	cmp	r3, r1
 800fc76:	d10d      	bne.n	800fc94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800fc78:	882d      	ldrh	r5, [r5, #0]
 800fc7a:	6830      	ldr	r0, [r6, #0]
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	240e      	movs	r4, #14
 800fc80:	429d      	cmp	r5, r3
 800fc82:	d90f      	bls.n	800fca4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800fc84:	fb04 0203 	mla	r2, r4, r3, r0
 800fc88:	3301      	adds	r3, #1
 800fc8a:	7b11      	ldrb	r1, [r2, #12]
 800fc8c:	f36f 1145 	bfc	r1, #5, #1
 800fc90:	7311      	strb	r1, [r2, #12]
 800fc92:	e7f5      	b.n	800fc80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800fc94:	6822      	ldr	r2, [r4, #0]
 800fc96:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800fc9a:	6802      	ldr	r2, [r0, #0]
 800fc9c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800fca0:	3301      	adds	r3, #1
 800fca2:	e7e7      	b.n	800fc74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800fca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fca6:	bf00      	nop
 800fca8:	2001549c 	.word	0x2001549c
 800fcac:	200154b8 	.word	0x200154b8
 800fcb0:	200154bc 	.word	0x200154bc
 800fcb4:	200154b0 	.word	0x200154b0
 800fcb8:	200154a0 	.word	0x200154a0
 800fcbc:	200154a8 	.word	0x200154a8
 800fcc0:	200154ba 	.word	0x200154ba
 800fcc4:	200154a4 	.word	0x200154a4
 800fcc8:	200154b4 	.word	0x200154b4
 800fccc:	200154ac 	.word	0x200154ac

0800fcd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800fcd0:	4b06      	ldr	r3, [pc, #24]	@ (800fcec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	b943      	cbnz	r3, 800fce8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800fcd6:	b139      	cbz	r1, 800fce8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800fcd8:	4b05      	ldr	r3, [pc, #20]	@ (800fcf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800fcda:	801a      	strh	r2, [r3, #0]
 800fcdc:	4b05      	ldr	r3, [pc, #20]	@ (800fcf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800fcde:	6019      	str	r1, [r3, #0]
 800fce0:	4b05      	ldr	r3, [pc, #20]	@ (800fcf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800fce2:	6018      	str	r0, [r3, #0]
 800fce4:	f7ff bf96 	b.w	800fc14 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	200154a8 	.word	0x200154a8
 800fcf0:	200154bc 	.word	0x200154bc
 800fcf4:	200154a4 	.word	0x200154a4
 800fcf8:	2001549c 	.word	0x2001549c

0800fcfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800fcfc:	b470      	push	{r4, r5, r6}
 800fcfe:	4c07      	ldr	r4, [pc, #28]	@ (800fd1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800fd00:	6826      	ldr	r6, [r4, #0]
 800fd02:	4605      	mov	r5, r0
 800fd04:	4610      	mov	r0, r2
 800fd06:	9a03      	ldr	r2, [sp, #12]
 800fd08:	b936      	cbnz	r6, 800fd18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800fd0a:	6025      	str	r5, [r4, #0]
 800fd0c:	4c04      	ldr	r4, [pc, #16]	@ (800fd20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800fd0e:	8021      	strh	r1, [r4, #0]
 800fd10:	bc70      	pop	{r4, r5, r6}
 800fd12:	4619      	mov	r1, r3
 800fd14:	f7ff bfdc 	b.w	800fcd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800fd18:	bc70      	pop	{r4, r5, r6}
 800fd1a:	4770      	bx	lr
 800fd1c:	200154c0 	.word	0x200154c0
 800fd20:	200154b8 	.word	0x200154b8

0800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800fd24:	4a12      	ldr	r2, [pc, #72]	@ (800fd70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800fd26:	8803      	ldrh	r3, [r0, #0]
 800fd28:	8812      	ldrh	r2, [r2, #0]
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d207      	bcs.n	800fd3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800fd2e:	4a11      	ldr	r2, [pc, #68]	@ (800fd74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800fd30:	6812      	ldr	r2, [r2, #0]
 800fd32:	2114      	movs	r1, #20
 800fd34:	fb01 2303 	mla	r3, r1, r3, r2
 800fd38:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800fd3c:	4770      	bx	lr
 800fd3e:	490e      	ldr	r1, [pc, #56]	@ (800fd78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800fd40:	8809      	ldrh	r1, [r1, #0]
 800fd42:	4411      	add	r1, r2
 800fd44:	428b      	cmp	r3, r1
 800fd46:	da04      	bge.n	800fd52 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800fd48:	1a9b      	subs	r3, r3, r2
 800fd4a:	4a0c      	ldr	r2, [pc, #48]	@ (800fd7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800fd4c:	210e      	movs	r1, #14
 800fd4e:	6812      	ldr	r2, [r2, #0]
 800fd50:	e7f0      	b.n	800fd34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800fd52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d108      	bne.n	800fd6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800fd5a:	4b09      	ldr	r3, [pc, #36]	@ (800fd80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	b91b      	cbnz	r3, 800fd68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800fd60:	4b08      	ldr	r3, [pc, #32]	@ (800fd84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800fd62:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fd66:	4770      	bx	lr
 800fd68:	4b07      	ldr	r3, [pc, #28]	@ (800fd88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800fd6a:	e7fa      	b.n	800fd62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	4770      	bx	lr
 800fd70:	200154b8 	.word	0x200154b8
 800fd74:	200154c0 	.word	0x200154c0
 800fd78:	200154bc 	.word	0x200154bc
 800fd7c:	200154a0 	.word	0x200154a0
 800fd80:	20015430 	.word	0x20015430
 800fd84:	20015432 	.word	0x20015432
 800fd88:	20015434 	.word	0x20015434

0800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800fd8c:	4a12      	ldr	r2, [pc, #72]	@ (800fdd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800fd8e:	8803      	ldrh	r3, [r0, #0]
 800fd90:	8812      	ldrh	r2, [r2, #0]
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d207      	bcs.n	800fda6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800fd96:	4a11      	ldr	r2, [pc, #68]	@ (800fddc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800fd98:	6812      	ldr	r2, [r2, #0]
 800fd9a:	2114      	movs	r1, #20
 800fd9c:	fb01 2303 	mla	r3, r1, r3, r2
 800fda0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800fda4:	4770      	bx	lr
 800fda6:	490e      	ldr	r1, [pc, #56]	@ (800fde0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800fda8:	8809      	ldrh	r1, [r1, #0]
 800fdaa:	4411      	add	r1, r2
 800fdac:	428b      	cmp	r3, r1
 800fdae:	da04      	bge.n	800fdba <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800fdb0:	1a9b      	subs	r3, r3, r2
 800fdb2:	4a0c      	ldr	r2, [pc, #48]	@ (800fde4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800fdb4:	210e      	movs	r1, #14
 800fdb6:	6812      	ldr	r2, [r2, #0]
 800fdb8:	e7f0      	b.n	800fd9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800fdba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d108      	bne.n	800fdd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800fdc2:	4b09      	ldr	r3, [pc, #36]	@ (800fde8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	b91b      	cbnz	r3, 800fdd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800fdc8:	4b08      	ldr	r3, [pc, #32]	@ (800fdec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800fdca:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fdce:	4770      	bx	lr
 800fdd0:	4b07      	ldr	r3, [pc, #28]	@ (800fdf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800fdd2:	e7fa      	b.n	800fdca <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800fdd4:	2000      	movs	r0, #0
 800fdd6:	4770      	bx	lr
 800fdd8:	200154b8 	.word	0x200154b8
 800fddc:	200154c0 	.word	0x200154c0
 800fde0:	200154bc 	.word	0x200154bc
 800fde4:	200154a0 	.word	0x200154a0
 800fde8:	20015430 	.word	0x20015430
 800fdec:	20015434 	.word	0x20015434
 800fdf0:	20015432 	.word	0x20015432

0800fdf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800fdf4:	b530      	push	{r4, r5, lr}
 800fdf6:	4a22      	ldr	r2, [pc, #136]	@ (800fe80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800fdf8:	880b      	ldrh	r3, [r1, #0]
 800fdfa:	8812      	ldrh	r2, [r2, #0]
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d213      	bcs.n	800fe28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800fe00:	4a20      	ldr	r2, [pc, #128]	@ (800fe84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800fe02:	6812      	ldr	r2, [r2, #0]
 800fe04:	2114      	movs	r1, #20
 800fe06:	fb01 2303 	mla	r3, r1, r3, r2
 800fe0a:	8a1a      	ldrh	r2, [r3, #16]
 800fe0c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800fe10:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800fe14:	8a5b      	ldrh	r3, [r3, #18]
 800fe16:	8004      	strh	r4, [r0, #0]
 800fe18:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800fe1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe20:	8041      	strh	r1, [r0, #2]
 800fe22:	8082      	strh	r2, [r0, #4]
 800fe24:	80c3      	strh	r3, [r0, #6]
 800fe26:	e024      	b.n	800fe72 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 800fe28:	4917      	ldr	r1, [pc, #92]	@ (800fe88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800fe2a:	8809      	ldrh	r1, [r1, #0]
 800fe2c:	4411      	add	r1, r2
 800fe2e:	428b      	cmp	r3, r1
 800fe30:	da10      	bge.n	800fe54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 800fe32:	1a9b      	subs	r3, r3, r2
 800fe34:	220e      	movs	r2, #14
 800fe36:	4353      	muls	r3, r2
 800fe38:	4a14      	ldr	r2, [pc, #80]	@ (800fe8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 800fe3a:	6811      	ldr	r1, [r2, #0]
 800fe3c:	18ca      	adds	r2, r1, r3
 800fe3e:	5ecd      	ldrsh	r5, [r1, r3]
 800fe40:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800fe44:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800fe48:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800fe4c:	8005      	strh	r5, [r0, #0]
 800fe4e:	8044      	strh	r4, [r0, #2]
 800fe50:	8081      	strh	r1, [r0, #4]
 800fe52:	e7e7      	b.n	800fe24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800fe54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d10b      	bne.n	800fe74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 800fe5c:	4b0c      	ldr	r3, [pc, #48]	@ (800fe90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 800fe5e:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fe62:	4b0c      	ldr	r3, [pc, #48]	@ (800fe94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 800fe64:	8081      	strh	r1, [r0, #4]
 800fe66:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe6a:	80c2      	strh	r2, [r0, #6]
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	8003      	strh	r3, [r0, #0]
 800fe70:	8043      	strh	r3, [r0, #2]
 800fe72:	bd30      	pop	{r4, r5, pc}
 800fe74:	2300      	movs	r3, #0
 800fe76:	8003      	strh	r3, [r0, #0]
 800fe78:	8043      	strh	r3, [r0, #2]
 800fe7a:	8083      	strh	r3, [r0, #4]
 800fe7c:	e7d2      	b.n	800fe24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800fe7e:	bf00      	nop
 800fe80:	200154b8 	.word	0x200154b8
 800fe84:	200154c0 	.word	0x200154c0
 800fe88:	200154bc 	.word	0x200154bc
 800fe8c:	200154a0 	.word	0x200154a0
 800fe90:	2001542c 	.word	0x2001542c
 800fe94:	2001542e 	.word	0x2001542e

0800fe98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 800fe98:	4a17      	ldr	r2, [pc, #92]	@ (800fef8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 800fe9a:	8803      	ldrh	r3, [r0, #0]
 800fe9c:	8812      	ldrh	r2, [r2, #0]
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d213      	bcs.n	800feca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 800fea2:	4a16      	ldr	r2, [pc, #88]	@ (800fefc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800fea4:	6812      	ldr	r2, [r2, #0]
 800fea6:	2114      	movs	r1, #20
 800fea8:	fb01 2303 	mla	r3, r1, r3, r2
 800feac:	8a1a      	ldrh	r2, [r3, #16]
 800feae:	8919      	ldrh	r1, [r3, #8]
 800feb0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800feb4:	428a      	cmp	r2, r1
 800feb6:	db1d      	blt.n	800fef4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800feb8:	8a58      	ldrh	r0, [r3, #18]
 800feba:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800febe:	895b      	ldrh	r3, [r3, #10]
 800fec0:	4298      	cmp	r0, r3
 800fec2:	bfac      	ite	ge
 800fec4:	2000      	movge	r0, #0
 800fec6:	2001      	movlt	r0, #1
 800fec8:	4770      	bx	lr
 800feca:	490d      	ldr	r1, [pc, #52]	@ (800ff00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 800fecc:	8809      	ldrh	r1, [r1, #0]
 800fece:	4411      	add	r1, r2
 800fed0:	428b      	cmp	r3, r1
 800fed2:	da0d      	bge.n	800fef0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 800fed4:	1a9b      	subs	r3, r3, r2
 800fed6:	4a0b      	ldr	r2, [pc, #44]	@ (800ff04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 800fed8:	6812      	ldr	r2, [r2, #0]
 800feda:	210e      	movs	r1, #14
 800fedc:	fb01 2303 	mla	r3, r1, r3, r2
 800fee0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800fee4:	891a      	ldrh	r2, [r3, #8]
 800fee6:	4291      	cmp	r1, r2
 800fee8:	db04      	blt.n	800fef4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800feea:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800feee:	e7e6      	b.n	800febe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 800fef0:	2000      	movs	r0, #0
 800fef2:	4770      	bx	lr
 800fef4:	2001      	movs	r0, #1
 800fef6:	4770      	bx	lr
 800fef8:	200154b8 	.word	0x200154b8
 800fefc:	200154c0 	.word	0x200154c0
 800ff00:	200154bc 	.word	0x200154bc
 800ff04:	200154a0 	.word	0x200154a0

0800ff08 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800ff08:	4a12      	ldr	r2, [pc, #72]	@ (800ff54 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800ff0a:	8803      	ldrh	r3, [r0, #0]
 800ff0c:	8811      	ldrh	r1, [r2, #0]
 800ff0e:	428b      	cmp	r3, r1
 800ff10:	d20b      	bcs.n	800ff2a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800ff12:	4a11      	ldr	r2, [pc, #68]	@ (800ff58 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800ff14:	6812      	ldr	r2, [r2, #0]
 800ff16:	b112      	cbz	r2, 800ff1e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800ff18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ff1c:	b9c0      	cbnz	r0, 800ff50 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800ff1e:	4a0f      	ldr	r2, [pc, #60]	@ (800ff5c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800ff20:	6811      	ldr	r1, [r2, #0]
 800ff22:	2214      	movs	r2, #20
 800ff24:	4353      	muls	r3, r2
 800ff26:	58c8      	ldr	r0, [r1, r3]
 800ff28:	4770      	bx	lr
 800ff2a:	4a0d      	ldr	r2, [pc, #52]	@ (800ff60 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800ff2c:	8812      	ldrh	r2, [r2, #0]
 800ff2e:	440a      	add	r2, r1
 800ff30:	4293      	cmp	r3, r2
 800ff32:	da04      	bge.n	800ff3e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800ff34:	4a08      	ldr	r2, [pc, #32]	@ (800ff58 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800ff36:	6812      	ldr	r2, [r2, #0]
 800ff38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ff3c:	4770      	bx	lr
 800ff3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d103      	bne.n	800ff4e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800ff46:	4b07      	ldr	r3, [pc, #28]	@ (800ff64 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800ff4c:	4770      	bx	lr
 800ff4e:	2000      	movs	r0, #0
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	200154b8 	.word	0x200154b8
 800ff58:	2001549c 	.word	0x2001549c
 800ff5c:	200154c0 	.word	0x200154c0
 800ff60:	200154bc 	.word	0x200154bc
 800ff64:	20015438 	.word	0x20015438

0800ff68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800ff68:	4b24      	ldr	r3, [pc, #144]	@ (800fffc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800ff6a:	8802      	ldrh	r2, [r0, #0]
 800ff6c:	8818      	ldrh	r0, [r3, #0]
 800ff6e:	4282      	cmp	r2, r0
 800ff70:	d221      	bcs.n	800ffb6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800ff72:	4b23      	ldr	r3, [pc, #140]	@ (8010000 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800ff74:	6819      	ldr	r1, [r3, #0]
 800ff76:	2314      	movs	r3, #20
 800ff78:	fb03 1302 	mla	r3, r3, r2, r1
 800ff7c:	6858      	ldr	r0, [r3, #4]
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	d03a      	beq.n	800fff8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800ff82:	4920      	ldr	r1, [pc, #128]	@ (8010004 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800ff84:	6809      	ldr	r1, [r1, #0]
 800ff86:	2900      	cmp	r1, #0
 800ff88:	d036      	beq.n	800fff8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800ff8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ff8e:	2900      	cmp	r1, #0
 800ff90:	d032      	beq.n	800fff8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800ff92:	891a      	ldrh	r2, [r3, #8]
 800ff94:	8958      	ldrh	r0, [r3, #10]
 800ff96:	4350      	muls	r0, r2
 800ff98:	7c5a      	ldrb	r2, [r3, #17]
 800ff9a:	7cdb      	ldrb	r3, [r3, #19]
 800ff9c:	0952      	lsrs	r2, r2, #5
 800ff9e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ffa2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ffa6:	2b0b      	cmp	r3, #11
 800ffa8:	bf18      	it	ne
 800ffaa:	0040      	lslne	r0, r0, #1
 800ffac:	3003      	adds	r0, #3
 800ffae:	f020 0003 	bic.w	r0, r0, #3
 800ffb2:	4408      	add	r0, r1
 800ffb4:	4770      	bx	lr
 800ffb6:	4b14      	ldr	r3, [pc, #80]	@ (8010008 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	4403      	add	r3, r0
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	da1a      	bge.n	800fff6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800ffc0:	4b12      	ldr	r3, [pc, #72]	@ (801000c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	1a10      	subs	r0, r2, r0
 800ffc6:	210e      	movs	r1, #14
 800ffc8:	fb01 3000 	mla	r0, r1, r0, r3
 800ffcc:	7b03      	ldrb	r3, [r0, #12]
 800ffce:	f003 031f 	and.w	r3, r3, #31
 800ffd2:	2b0b      	cmp	r3, #11
 800ffd4:	d10b      	bne.n	800ffee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800ffd6:	8903      	ldrh	r3, [r0, #8]
 800ffd8:	8940      	ldrh	r0, [r0, #10]
 800ffda:	4358      	muls	r0, r3
 800ffdc:	4b09      	ldr	r3, [pc, #36]	@ (8010004 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800ffde:	6819      	ldr	r1, [r3, #0]
 800ffe0:	3003      	adds	r0, #3
 800ffe2:	f020 0303 	bic.w	r3, r0, #3
 800ffe6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800ffea:	4418      	add	r0, r3
 800ffec:	4770      	bx	lr
 800ffee:	2b0d      	cmp	r3, #13
 800fff0:	d101      	bne.n	800fff6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800fff2:	300d      	adds	r0, #13
 800fff4:	4770      	bx	lr
 800fff6:	2000      	movs	r0, #0
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	200154b8 	.word	0x200154b8
 8010000:	200154c0 	.word	0x200154c0
 8010004:	2001549c 	.word	0x2001549c
 8010008:	200154bc 	.word	0x200154bc
 801000c:	200154a0 	.word	0x200154a0

08010010 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010010:	b510      	push	{r4, lr}
 8010012:	4b1f      	ldr	r3, [pc, #124]	@ (8010090 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8010014:	8802      	ldrh	r2, [r0, #0]
 8010016:	881b      	ldrh	r3, [r3, #0]
 8010018:	429a      	cmp	r2, r3
 801001a:	d21a      	bcs.n	8010052 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801001c:	4b1d      	ldr	r3, [pc, #116]	@ (8010094 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2114      	movs	r1, #20
 8010022:	fb01 3102 	mla	r1, r1, r2, r3
 8010026:	7c4b      	ldrb	r3, [r1, #17]
 8010028:	0958      	lsrs	r0, r3, #5
 801002a:	7ccb      	ldrb	r3, [r1, #19]
 801002c:	491a      	ldr	r1, [pc, #104]	@ (8010098 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801002e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010032:	6809      	ldr	r1, [r1, #0]
 8010034:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8010038:	b2d8      	uxtb	r0, r3
 801003a:	b149      	cbz	r1, 8010050 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801003c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010040:	b132      	cbz	r2, 8010050 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010042:	2b0e      	cmp	r3, #14
 8010044:	d021      	beq.n	801008a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8010046:	280f      	cmp	r0, #15
 8010048:	d01d      	beq.n	8010086 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801004a:	2810      	cmp	r0, #16
 801004c:	bf08      	it	eq
 801004e:	2002      	moveq	r0, #2
 8010050:	bd10      	pop	{r4, pc}
 8010052:	4912      	ldr	r1, [pc, #72]	@ (801009c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8010054:	8809      	ldrh	r1, [r1, #0]
 8010056:	4419      	add	r1, r3
 8010058:	428a      	cmp	r2, r1
 801005a:	da09      	bge.n	8010070 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	4a10      	ldr	r2, [pc, #64]	@ (80100a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8010060:	6812      	ldr	r2, [r2, #0]
 8010062:	210e      	movs	r1, #14
 8010064:	fb01 2303 	mla	r3, r1, r3, r2
 8010068:	7b18      	ldrb	r0, [r3, #12]
 801006a:	f000 001f 	and.w	r0, r0, #31
 801006e:	e7ef      	b.n	8010050 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010070:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8010074:	429a      	cmp	r2, r3
 8010076:	d108      	bne.n	801008a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8010078:	f7f9 fd34 	bl	8009ae4 <_ZN8touchgfx3HAL3lcdEv>
 801007c:	6803      	ldr	r3, [r0, #0]
 801007e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010084:	4718      	bx	r3
 8010086:	2001      	movs	r0, #1
 8010088:	e7e2      	b.n	8010050 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801008a:	2000      	movs	r0, #0
 801008c:	e7e0      	b.n	8010050 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801008e:	bf00      	nop
 8010090:	200154b8 	.word	0x200154b8
 8010094:	200154c0 	.word	0x200154c0
 8010098:	2001549c 	.word	0x2001549c
 801009c:	200154bc 	.word	0x200154bc
 80100a0:	200154a0 	.word	0x200154a0

080100a4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80100a4:	2010      	movs	r0, #16
 80100a6:	4770      	bx	lr

080100a8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80100a8:	2000      	movs	r0, #0
 80100aa:	4770      	bx	lr

080100ac <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80100ac:	4b02      	ldr	r3, [pc, #8]	@ (80100b8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80100ae:	8818      	ldrh	r0, [r3, #0]
 80100b0:	0040      	lsls	r0, r0, #1
 80100b2:	b280      	uxth	r0, r0
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	20015432 	.word	0x20015432

080100bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80100bc:	2bff      	cmp	r3, #255	@ 0xff
 80100be:	d05e      	beq.n	801017e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 80100c0:	2a0b      	cmp	r2, #11
 80100c2:	d058      	beq.n	8010176 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80100c4:	d80e      	bhi.n	80100e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80100c6:	2a03      	cmp	r2, #3
 80100c8:	d04d      	beq.n	8010166 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 80100ca:	d804      	bhi.n	80100d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80100cc:	2a01      	cmp	r2, #1
 80100ce:	d04c      	beq.n	801016a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 80100d0:	d94d      	bls.n	801016e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 80100d2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80100d4:	e031      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100d6:	2a09      	cmp	r2, #9
 80100d8:	d04d      	beq.n	8010176 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80100da:	d84a      	bhi.n	8010172 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80100dc:	2a08      	cmp	r2, #8
 80100de:	d048      	beq.n	8010172 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80100e0:	2300      	movs	r3, #0
 80100e2:	e02a      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80100e4:	2a2f      	cmp	r2, #47	@ 0x2f
 80100e6:	d02c      	beq.n	8010142 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80100e8:	d811      	bhi.n	801010e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80100ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80100ec:	d018      	beq.n	8010120 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 80100ee:	d831      	bhi.n	8010154 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 80100f0:	2a2c      	cmp	r2, #44	@ 0x2c
 80100f2:	d1f5      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80100f4:	684a      	ldr	r2, [r1, #4]
 80100f6:	7813      	ldrb	r3, [r2, #0]
 80100f8:	7852      	ldrb	r2, [r2, #1]
 80100fa:	2a00      	cmp	r2, #0
 80100fc:	d1f0      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d01d      	beq.n	801013e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8010102:	2b00      	cmp	r3, #0
 8010104:	d02d      	beq.n	8010162 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8010106:	2b02      	cmp	r3, #2
 8010108:	d1ea      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801010a:	68c3      	ldr	r3, [r0, #12]
 801010c:	e015      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801010e:	2a31      	cmp	r2, #49	@ 0x31
 8010110:	d004      	beq.n	801011c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8010112:	d332      	bcc.n	801017a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010114:	2a32      	cmp	r2, #50	@ 0x32
 8010116:	d030      	beq.n	801017a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010118:	2a33      	cmp	r2, #51	@ 0x33
 801011a:	d1e1      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801011c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801011e:	e00c      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010120:	684a      	ldr	r2, [r1, #4]
 8010122:	7813      	ldrb	r3, [r2, #0]
 8010124:	7852      	ldrb	r2, [r2, #1]
 8010126:	2a00      	cmp	r2, #0
 8010128:	d1da      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801012a:	2b01      	cmp	r3, #1
 801012c:	d004      	beq.n	8010138 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801012e:	d30f      	bcc.n	8010150 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 8010130:	2b02      	cmp	r3, #2
 8010132:	d1d5      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010134:	6943      	ldr	r3, [r0, #20]
 8010136:	e000      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010138:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801013a:	4618      	mov	r0, r3
 801013c:	4770      	bx	lr
 801013e:	69c3      	ldr	r3, [r0, #28]
 8010140:	e7fb      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010142:	684b      	ldr	r3, [r1, #4]
 8010144:	781a      	ldrb	r2, [r3, #0]
 8010146:	785b      	ldrb	r3, [r3, #1]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d1c9      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801014c:	2a00      	cmp	r2, #0
 801014e:	d1f4      	bne.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010150:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010152:	e7f2      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010154:	684b      	ldr	r3, [r1, #4]
 8010156:	781a      	ldrb	r2, [r3, #0]
 8010158:	785b      	ldrb	r3, [r3, #1]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1c0      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801015e:	2a00      	cmp	r2, #0
 8010160:	d1eb      	bne.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010162:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010164:	e7e9      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010166:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010168:	e7e7      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801016a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801016c:	e7e5      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801016e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8010170:	e7e3      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010172:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8010174:	e7e1      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010176:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8010178:	e7df      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801017a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801017c:	e7dd      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801017e:	2a0b      	cmp	r2, #11
 8010180:	d059      	beq.n	8010236 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010182:	d80e      	bhi.n	80101a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8010184:	2a03      	cmp	r2, #3
 8010186:	d050      	beq.n	801022a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8010188:	d804      	bhi.n	8010194 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801018a:	2a01      	cmp	r2, #1
 801018c:	d04f      	beq.n	801022e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801018e:	d950      	bls.n	8010232 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8010190:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010192:	e7d2      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010194:	2a09      	cmp	r2, #9
 8010196:	d04e      	beq.n	8010236 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010198:	d801      	bhi.n	801019e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801019a:	2a08      	cmp	r2, #8
 801019c:	d1a0      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801019e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80101a0:	e7cb      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80101a2:	2a2f      	cmp	r2, #47	@ 0x2f
 80101a4:	d02d      	beq.n	8010202 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 80101a6:	d811      	bhi.n	80101cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80101a8:	2a2d      	cmp	r2, #45	@ 0x2d
 80101aa:	d018      	beq.n	80101de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 80101ac:	d833      	bhi.n	8010216 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 80101ae:	2a2c      	cmp	r2, #44	@ 0x2c
 80101b0:	d196      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80101b2:	684a      	ldr	r2, [r1, #4]
 80101b4:	7813      	ldrb	r3, [r2, #0]
 80101b6:	7852      	ldrb	r2, [r2, #1]
 80101b8:	2a00      	cmp	r2, #0
 80101ba:	d191      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d01e      	beq.n	80101fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d030      	beq.n	8010226 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	d18b      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80101c8:	6903      	ldr	r3, [r0, #16]
 80101ca:	e7b6      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80101cc:	2a31      	cmp	r2, #49	@ 0x31
 80101ce:	d004      	beq.n	80101da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 80101d0:	d333      	bcc.n	801023a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 80101d2:	2a32      	cmp	r2, #50	@ 0x32
 80101d4:	d031      	beq.n	801023a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 80101d6:	2a33      	cmp	r2, #51	@ 0x33
 80101d8:	d182      	bne.n	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80101da:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80101dc:	e7ad      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80101de:	684a      	ldr	r2, [r1, #4]
 80101e0:	7813      	ldrb	r3, [r2, #0]
 80101e2:	7852      	ldrb	r2, [r2, #1]
 80101e4:	2a00      	cmp	r2, #0
 80101e6:	f47f af7b 	bne.w	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d005      	beq.n	80101fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80101ee:	d310      	bcc.n	8010212 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 80101f0:	2b02      	cmp	r3, #2
 80101f2:	f47f af75 	bne.w	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80101f6:	6983      	ldr	r3, [r0, #24]
 80101f8:	e79f      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80101fa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80101fc:	e79d      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80101fe:	6a03      	ldr	r3, [r0, #32]
 8010200:	e79b      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010202:	684b      	ldr	r3, [r1, #4]
 8010204:	781a      	ldrb	r2, [r3, #0]
 8010206:	785b      	ldrb	r3, [r3, #1]
 8010208:	2b00      	cmp	r3, #0
 801020a:	f47f af69 	bne.w	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801020e:	2a00      	cmp	r2, #0
 8010210:	d193      	bne.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010212:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010214:	e791      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010216:	684b      	ldr	r3, [r1, #4]
 8010218:	781a      	ldrb	r2, [r3, #0]
 801021a:	785b      	ldrb	r3, [r3, #1]
 801021c:	2b00      	cmp	r3, #0
 801021e:	f47f af5f 	bne.w	80100e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010222:	2a00      	cmp	r2, #0
 8010224:	d189      	bne.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010226:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010228:	e787      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801022a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801022c:	e785      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801022e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8010230:	e783      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010232:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8010234:	e781      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010236:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010238:	e77f      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801023a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801023c:	e77d      	b.n	801013a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801023e <_ZN8touchgfx8LCD16bppD1Ev>:
 801023e:	4770      	bx	lr

08010240 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8010240:	4770      	bx	lr

08010242 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8010242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010246:	b088      	sub	sp, #32
 8010248:	ac08      	add	r4, sp, #32
 801024a:	4606      	mov	r6, r0
 801024c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8010250:	4620      	mov	r0, r4
 8010252:	4688      	mov	r8, r1
 8010254:	4691      	mov	r9, r2
 8010256:	f7ff fe57 	bl	800ff08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801025a:	6833      	ldr	r3, [r6, #0]
 801025c:	4605      	mov	r5, r0
 801025e:	4620      	mov	r0, r4
 8010260:	699f      	ldr	r7, [r3, #24]
 8010262:	f7ff fd5f 	bl	800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010266:	4682      	mov	sl, r0
 8010268:	4620      	mov	r0, r4
 801026a:	f7ff fd8f 	bl	800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801026e:	9500      	str	r5, [sp, #0]
 8010270:	e9cd a001 	strd	sl, r0, [sp, #4]
 8010274:	464b      	mov	r3, r9
 8010276:	a806      	add	r0, sp, #24
 8010278:	4642      	mov	r2, r8
 801027a:	4631      	mov	r1, r6
 801027c:	47b8      	blx	r7
 801027e:	4628      	mov	r0, r5
 8010280:	b008      	add	sp, #32
 8010282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010288 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8010288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801028c:	2300      	movs	r3, #0
 801028e:	9300      	str	r3, [sp, #0]
 8010290:	4b3d      	ldr	r3, [pc, #244]	@ (8010388 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d137      	bne.n	8010308 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8010298:	4a3c      	ldr	r2, [pc, #240]	@ (801038c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801029a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801029e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d132      	bne.n	801030c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80102a6:	4b3a      	ldr	r3, [pc, #232]	@ (8010390 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80102a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102ac:	6808      	ldr	r0, [r1, #0]
 80102ae:	6849      	ldr	r1, [r1, #4]
 80102b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80102b4:	ac02      	add	r4, sp, #8
 80102b6:	ab02      	add	r3, sp, #8
 80102b8:	c303      	stmia	r3!, {r0, r1}
 80102ba:	4669      	mov	r1, sp
 80102bc:	4620      	mov	r0, r4
 80102be:	f7fc fae1 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80102c2:	4668      	mov	r0, sp
 80102c4:	f7fc fab6 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80102c8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80102cc:	f8bd 2000 	ldrh.w	r2, [sp]
 80102d0:	4d30      	ldr	r5, [pc, #192]	@ (8010394 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80102d2:	4413      	add	r3, r2
 80102d4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80102d8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80102dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80102e0:	6828      	ldr	r0, [r5, #0]
 80102e2:	4413      	add	r3, r2
 80102e4:	f8ad 300a 	strh.w	r3, [sp, #10]
 80102e8:	6803      	ldr	r3, [r0, #0]
 80102ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ec:	4798      	blx	r3
 80102ee:	f010 0f01 	tst.w	r0, #1
 80102f2:	462f      	mov	r7, r5
 80102f4:	d00c      	beq.n	8010310 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80102f6:	6828      	ldr	r0, [r5, #0]
 80102f8:	6803      	ldr	r3, [r0, #0]
 80102fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80102fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010300:	4798      	blx	r3
 8010302:	b004      	add	sp, #16
 8010304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010308:	4a21      	ldr	r2, [pc, #132]	@ (8010390 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801030a:	e7c6      	b.n	801029a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801030c:	4b1f      	ldr	r3, [pc, #124]	@ (801038c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801030e:	e7cb      	b.n	80102a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8010310:	6838      	ldr	r0, [r7, #0]
 8010312:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8010316:	6803      	ldr	r3, [r0, #0]
 8010318:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801031c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801031e:	4798      	blx	r3
 8010320:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8010324:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010328:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801032c:	fb16 3602 	smlabb	r6, r6, r2, r3
 8010330:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010334:	6838      	ldr	r0, [r7, #0]
 8010336:	6803      	ldr	r3, [r0, #0]
 8010338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801033a:	4798      	blx	r3
 801033c:	4a13      	ldr	r2, [pc, #76]	@ (801038c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801033e:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8010342:	8813      	ldrh	r3, [r2, #0]
 8010344:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010348:	fb03 1404 	mla	r4, r3, r4, r1
 801034c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010350:	435d      	muls	r5, r3
 8010352:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010356:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801035a:	4691      	mov	r9, r2
 801035c:	6838      	ldr	r0, [r7, #0]
 801035e:	42ac      	cmp	r4, r5
 8010360:	6803      	ldr	r3, [r0, #0]
 8010362:	d20e      	bcs.n	8010382 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8010364:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 8010368:	4632      	mov	r2, r6
 801036a:	4643      	mov	r3, r8
 801036c:	4621      	mov	r1, r4
 801036e:	47d0      	blx	sl
 8010370:	f8b9 3000 	ldrh.w	r3, [r9]
 8010374:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010378:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801037c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010380:	e7ec      	b.n	801035c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8010382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010384:	4798      	blx	r3
 8010386:	e7bc      	b.n	8010302 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8010388:	20015430 	.word	0x20015430
 801038c:	20015432 	.word	0x20015432
 8010390:	20015434 	.word	0x20015434
 8010394:	20015438 	.word	0x20015438

08010398 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8010398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801039c:	b08b      	sub	sp, #44	@ 0x2c
 801039e:	460f      	mov	r7, r1
 80103a0:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 80103a4:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 80103a8:	4616      	mov	r6, r2
 80103aa:	f1bb 0f00 	cmp.w	fp, #0
 80103ae:	d04a      	beq.n	8010446 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80103b0:	6810      	ldr	r0, [r2, #0]
 80103b2:	6851      	ldr	r1, [r2, #4]
 80103b4:	ad06      	add	r5, sp, #24
 80103b6:	c503      	stmia	r5!, {r0, r1}
 80103b8:	6818      	ldr	r0, [r3, #0]
 80103ba:	6859      	ldr	r1, [r3, #4]
 80103bc:	ad08      	add	r5, sp, #32
 80103be:	c503      	stmia	r5!, {r0, r1}
 80103c0:	a806      	add	r0, sp, #24
 80103c2:	f7fc fa37 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80103c6:	4631      	mov	r1, r6
 80103c8:	a808      	add	r0, sp, #32
 80103ca:	f7fc fa5b 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80103ce:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80103d2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80103d6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80103da:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80103de:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80103e2:	fb16 2103 	smlabb	r1, r6, r3, r2
 80103e6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80103ea:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80103ee:	4f5f      	ldr	r7, [pc, #380]	@ (801056c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80103f0:	440a      	add	r2, r1
 80103f2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80103f6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80103fa:	6838      	ldr	r0, [r7, #0]
 80103fc:	4413      	add	r3, r2
 80103fe:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010402:	6803      	ldr	r3, [r0, #0]
 8010404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010406:	4798      	blx	r3
 8010408:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801040c:	46b9      	mov	r9, r7
 801040e:	d11d      	bne.n	801044c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8010410:	b9fc      	cbnz	r4, 8010452 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8010412:	f010 0f01 	tst.w	r0, #1
 8010416:	d01c      	beq.n	8010452 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8010418:	f8d9 0000 	ldr.w	r0, [r9]
 801041c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8010420:	6801      	ldr	r1, [r0, #0]
 8010422:	f8cd b00c 	str.w	fp, [sp, #12]
 8010426:	2700      	movs	r7, #0
 8010428:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801042c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8010430:	9402      	str	r4, [sp, #8]
 8010432:	b2ad      	uxth	r5, r5
 8010434:	fa1f f488 	uxth.w	r4, r8
 8010438:	9501      	str	r5, [sp, #4]
 801043a:	9400      	str	r4, [sp, #0]
 801043c:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 801043e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8010442:	4631      	mov	r1, r6
 8010444:	47a0      	blx	r4
 8010446:	b00b      	add	sp, #44	@ 0x2c
 8010448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801044c:	f010 0f04 	tst.w	r0, #4
 8010450:	e7e1      	b.n	8010416 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8010452:	f8d9 0000 	ldr.w	r0, [r9]
 8010456:	6803      	ldr	r3, [r0, #0]
 8010458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801045a:	4798      	blx	r3
 801045c:	4b44      	ldr	r3, [pc, #272]	@ (8010570 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801045e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8010462:	881a      	ldrh	r2, [r3, #0]
 8010464:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8010468:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801046c:	fb02 1404 	mla	r4, r2, r4, r1
 8010470:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010474:	469a      	mov	sl, r3
 8010476:	fb05 f502 	mul.w	r5, r5, r2
 801047a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801047e:	d059      	beq.n	8010534 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8010480:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8010484:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010488:	fa1f f28b 	uxth.w	r2, fp
 801048c:	fa1f f989 	uxth.w	r9, r9
 8010490:	469e      	mov	lr, r3
 8010492:	42ac      	cmp	r4, r5
 8010494:	d264      	bcs.n	8010560 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010496:	eb04 0a07 	add.w	sl, r4, r7
 801049a:	4554      	cmp	r4, sl
 801049c:	d23d      	bcs.n	801051a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801049e:	8821      	ldrh	r1, [r4, #0]
 80104a0:	f836 3b02 	ldrh.w	r3, [r6], #2
 80104a4:	1208      	asrs	r0, r1, #8
 80104a6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80104aa:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80104ae:	fb10 f009 	smulbb	r0, r0, r9
 80104b2:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80104b6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80104ba:	00c9      	lsls	r1, r1, #3
 80104bc:	fb0c 0c02 	mla	ip, ip, r2, r0
 80104c0:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80104c4:	10d8      	asrs	r0, r3, #3
 80104c6:	b2c9      	uxtb	r1, r1
 80104c8:	00db      	lsls	r3, r3, #3
 80104ca:	fa1f fc8c 	uxth.w	ip, ip
 80104ce:	fb1b fb09 	smulbb	fp, fp, r9
 80104d2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	fb11 f109 	smulbb	r1, r1, r9
 80104dc:	fb00 b002 	mla	r0, r0, r2, fp
 80104e0:	fb03 1302 	mla	r3, r3, r2, r1
 80104e4:	f10c 0b01 	add.w	fp, ip, #1
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80104ee:	b280      	uxth	r0, r0
 80104f0:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 80104f4:	f103 0c01 	add.w	ip, r3, #1
 80104f8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80104fc:	1c43      	adds	r3, r0, #1
 80104fe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8010502:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8010506:	0940      	lsrs	r0, r0, #5
 8010508:	ea4c 0c0b 	orr.w	ip, ip, fp
 801050c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8010510:	ea4c 0c00 	orr.w	ip, ip, r0
 8010514:	f824 cb02 	strh.w	ip, [r4], #2
 8010518:	e7bf      	b.n	801049a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801051a:	f8be 3000 	ldrh.w	r3, [lr]
 801051e:	eba3 0308 	sub.w	r3, r3, r8
 8010522:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010526:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801052a:	eba3 0308 	sub.w	r3, r3, r8
 801052e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010532:	e7ae      	b.n	8010492 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8010534:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010538:	f8d9 0000 	ldr.w	r0, [r9]
 801053c:	42ac      	cmp	r4, r5
 801053e:	6803      	ldr	r3, [r0, #0]
 8010540:	d20e      	bcs.n	8010560 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010542:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8010546:	4632      	mov	r2, r6
 8010548:	463b      	mov	r3, r7
 801054a:	4621      	mov	r1, r4
 801054c:	47c0      	blx	r8
 801054e:	f8ba 3000 	ldrh.w	r3, [sl]
 8010552:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010556:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801055a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801055e:	e7eb      	b.n	8010538 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8010560:	4b02      	ldr	r3, [pc, #8]	@ (801056c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8010562:	6818      	ldr	r0, [r3, #0]
 8010564:	6803      	ldr	r3, [r0, #0]
 8010566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010568:	4798      	blx	r3
 801056a:	e76c      	b.n	8010446 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801056c:	20015438 	.word	0x20015438
 8010570:	20015432 	.word	0x20015432

08010574 <_ZN8touchgfx8LCD16bppD0Ev>:
 8010574:	b510      	push	{r4, lr}
 8010576:	218c      	movs	r1, #140	@ 0x8c
 8010578:	4604      	mov	r4, r0
 801057a:	f002 fa51 	bl	8012a20 <_ZdlPvj>
 801057e:	4620      	mov	r0, r4
 8010580:	bd10      	pop	{r4, pc}

08010582 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8010582:	b510      	push	{r4, lr}
 8010584:	2104      	movs	r1, #4
 8010586:	4604      	mov	r4, r0
 8010588:	f002 fa4a 	bl	8012a20 <_ZdlPvj>
 801058c:	4620      	mov	r0, r4
 801058e:	bd10      	pop	{r4, pc}

08010590 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8010590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010594:	b091      	sub	sp, #68	@ 0x44
 8010596:	469b      	mov	fp, r3
 8010598:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801059c:	4616      	mov	r6, r2
 801059e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 80105a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80105a6:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80105aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80105ae:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80105b2:	4604      	mov	r4, r0
 80105b4:	460d      	mov	r5, r1
 80105b6:	4640      	mov	r0, r8
 80105b8:	4659      	mov	r1, fp
 80105ba:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80105be:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 80105c2:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 80105c6:	f7f8 ffb7 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 80105ca:	4631      	mov	r1, r6
 80105cc:	4640      	mov	r0, r8
 80105ce:	f7f8 ffb3 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 80105d2:	4b74      	ldr	r3, [pc, #464]	@ (80107a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 80105d4:	8818      	ldrh	r0, [r3, #0]
 80105d6:	4b74      	ldr	r3, [pc, #464]	@ (80107a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 80105d8:	8819      	ldrh	r1, [r3, #0]
 80105da:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80105de:	2b00      	cmp	r3, #0
 80105e0:	b202      	sxth	r2, r0
 80105e2:	b20e      	sxth	r6, r1
 80105e4:	da07      	bge.n	80105f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80105e6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80105ea:	4463      	add	r3, ip
 80105ec:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80105f0:	2300      	movs	r3, #0
 80105f2:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80105f6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80105fa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80105fe:	1ad2      	subs	r2, r2, r3
 8010600:	4594      	cmp	ip, r2
 8010602:	bfc4      	itt	gt
 8010604:	1ac2      	subgt	r2, r0, r3
 8010606:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801060a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801060e:	2a00      	cmp	r2, #0
 8010610:	da07      	bge.n	8010622 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8010612:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8010616:	4462      	add	r2, ip
 8010618:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801061c:	2200      	movs	r2, #0
 801061e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8010622:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8010626:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801062a:	eba6 060a 	sub.w	r6, r6, sl
 801062e:	42b2      	cmp	r2, r6
 8010630:	bfc4      	itt	gt
 8010632:	eba1 020a 	subgt.w	r2, r1, sl
 8010636:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 801063a:	4a5c      	ldr	r2, [pc, #368]	@ (80107ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801063c:	7812      	ldrb	r2, [r2, #0]
 801063e:	b9a2      	cbnz	r2, 801066a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8010640:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8010644:	4286      	cmp	r6, r0
 8010646:	4640      	mov	r0, r8
 8010648:	9303      	str	r3, [sp, #12]
 801064a:	bf14      	ite	ne
 801064c:	2600      	movne	r6, #0
 801064e:	2601      	moveq	r6, #1
 8010650:	f7f8 ffb5 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 8010654:	9b03      	ldr	r3, [sp, #12]
 8010656:	b160      	cbz	r0, 8010672 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8010658:	2300      	movs	r3, #0
 801065a:	8023      	strh	r3, [r4, #0]
 801065c:	8063      	strh	r3, [r4, #2]
 801065e:	80a3      	strh	r3, [r4, #4]
 8010660:	4620      	mov	r0, r4
 8010662:	80e3      	strh	r3, [r4, #6]
 8010664:	b011      	add	sp, #68	@ 0x44
 8010666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801066e:	428e      	cmp	r6, r1
 8010670:	e7e9      	b.n	8010646 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8010672:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8010676:	9205      	str	r2, [sp, #20]
 8010678:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801067c:	9206      	str	r2, [sp, #24]
 801067e:	f8bb 2000 	ldrh.w	r2, [fp]
 8010682:	900e      	str	r0, [sp, #56]	@ 0x38
 8010684:	1a9b      	subs	r3, r3, r2
 8010686:	b21b      	sxth	r3, r3
 8010688:	9303      	str	r3, [sp, #12]
 801068a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801068e:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8010692:	ebaa 0a03 	sub.w	sl, sl, r3
 8010696:	fa0f f38a 	sxth.w	r3, sl
 801069a:	9304      	str	r3, [sp, #16]
 801069c:	9b03      	ldr	r3, [sp, #12]
 801069e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80106a2:	9b04      	ldr	r3, [sp, #16]
 80106a4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80106a8:	9b05      	ldr	r3, [sp, #20]
 80106aa:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80106ae:	a90e      	add	r1, sp, #56	@ 0x38
 80106b0:	9b06      	ldr	r3, [sp, #24]
 80106b2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80106b6:	a80c      	add	r0, sp, #48	@ 0x30
 80106b8:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 80106bc:	f7fc f8e2 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80106c0:	4640      	mov	r0, r8
 80106c2:	f7fc f8b7 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80106c6:	a80e      	add	r0, sp, #56	@ 0x38
 80106c8:	f7fc f8b4 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80106cc:	4b38      	ldr	r3, [pc, #224]	@ (80107b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80106ce:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	9307      	str	r3, [sp, #28]
 80106d6:	682b      	ldr	r3, [r5, #0]
 80106d8:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 80107b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80106dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106de:	4628      	mov	r0, r5
 80106e0:	4798      	blx	r3
 80106e2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 80106e6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80106ea:	4681      	mov	r9, r0
 80106ec:	fb1a 3305 	smlabb	r3, sl, r5, r3
 80106f0:	f8db 0000 	ldr.w	r0, [fp]
 80106f4:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80106f6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80106fa:	6803      	ldr	r3, [r0, #0]
 80106fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106fe:	4798      	blx	r3
 8010700:	4607      	mov	r7, r0
 8010702:	f8db 0000 	ldr.w	r0, [fp]
 8010706:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801070a:	6803      	ldr	r3, [r0, #0]
 801070c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010710:	9109      	str	r1, [sp, #36]	@ 0x24
 8010712:	9208      	str	r2, [sp, #32]
 8010714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010716:	4798      	blx	r3
 8010718:	f010 0f01 	tst.w	r0, #1
 801071c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8010720:	d012      	beq.n	8010748 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8010722:	f8db 0000 	ldr.w	r0, [fp]
 8010726:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801072a:	6803      	ldr	r3, [r0, #0]
 801072c:	9200      	str	r2, [sp, #0]
 801072e:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8010730:	e898 0006 	ldmia.w	r8, {r1, r2}
 8010734:	462b      	mov	r3, r5
 8010736:	47b0      	blx	r6
 8010738:	9b03      	ldr	r3, [sp, #12]
 801073a:	8023      	strh	r3, [r4, #0]
 801073c:	9b04      	ldr	r3, [sp, #16]
 801073e:	8063      	strh	r3, [r4, #2]
 8010740:	9b05      	ldr	r3, [sp, #20]
 8010742:	80a3      	strh	r3, [r4, #4]
 8010744:	9b06      	ldr	r3, [sp, #24]
 8010746:	e78b      	b.n	8010660 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8010748:	fb09 f202 	mul.w	r2, r9, r2
 801074c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010750:	440f      	add	r7, r1
 8010752:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8010756:	b166      	cbz	r6, 8010772 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8010758:	9a07      	ldr	r2, [sp, #28]
 801075a:	4592      	cmp	sl, r2
 801075c:	d109      	bne.n	8010772 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801075e:	f8db 0000 	ldr.w	r0, [fp]
 8010762:	6802      	ldr	r2, [r0, #0]
 8010764:	fb09 f303 	mul.w	r3, r9, r3
 8010768:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 801076a:	4629      	mov	r1, r5
 801076c:	463a      	mov	r2, r7
 801076e:	47b0      	blx	r6
 8010770:	e7e2      	b.n	8010738 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8010772:	fb0a f303 	mul.w	r3, sl, r3
 8010776:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 80107b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801077a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801077e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8010782:	4545      	cmp	r5, r8
 8010784:	d2d8      	bcs.n	8010738 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8010786:	f8db 0000 	ldr.w	r0, [fp]
 801078a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801078e:	6802      	ldr	r2, [r0, #0]
 8010790:	4629      	mov	r1, r5
 8010792:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8010796:	005b      	lsls	r3, r3, #1
 8010798:	463a      	mov	r2, r7
 801079a:	47d0      	blx	sl
 801079c:	444f      	add	r7, r9
 801079e:	4435      	add	r5, r6
 80107a0:	e7ef      	b.n	8010782 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 80107a2:	bf00      	nop
 80107a4:	2001542c 	.word	0x2001542c
 80107a8:	2001542e 	.word	0x2001542e
 80107ac:	20015430 	.word	0x20015430
 80107b0:	20015432 	.word	0x20015432
 80107b4:	20015438 	.word	0x20015438

080107b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80107b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ba:	4606      	mov	r6, r0
 80107bc:	b087      	sub	sp, #28
 80107be:	460c      	mov	r4, r1
 80107c0:	4617      	mov	r7, r2
 80107c2:	461d      	mov	r5, r3
 80107c4:	b333      	cbz	r3, 8010814 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80107c6:	4608      	mov	r0, r1
 80107c8:	f7f8 fef9 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 80107cc:	bb10      	cbnz	r0, 8010814 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80107ce:	6820      	ldr	r0, [r4, #0]
 80107d0:	6861      	ldr	r1, [r4, #4]
 80107d2:	4c1c      	ldr	r4, [pc, #112]	@ (8010844 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80107d4:	ab04      	add	r3, sp, #16
 80107d6:	c303      	stmia	r3!, {r0, r1}
 80107d8:	a804      	add	r0, sp, #16
 80107da:	f7fc f82b 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80107de:	6820      	ldr	r0, [r4, #0]
 80107e0:	6803      	ldr	r3, [r0, #0]
 80107e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107e4:	4798      	blx	r3
 80107e6:	2dff      	cmp	r5, #255	@ 0xff
 80107e8:	d016      	beq.n	8010818 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80107ea:	f010 0f08 	tst.w	r0, #8
 80107ee:	6820      	ldr	r0, [r4, #0]
 80107f0:	d015      	beq.n	801081e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80107f2:	2400      	movs	r4, #0
 80107f4:	6801      	ldr	r1, [r0, #0]
 80107f6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80107fa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80107fe:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8010802:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8010806:	9401      	str	r4, [sp, #4]
 8010808:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801080c:	9400      	str	r4, [sp, #0]
 801080e:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8010810:	4639      	mov	r1, r7
 8010812:	47a0      	blx	r4
 8010814:	b007      	add	sp, #28
 8010816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010818:	f010 0f02 	tst.w	r0, #2
 801081c:	e7e7      	b.n	80107ee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801081e:	6803      	ldr	r3, [r0, #0]
 8010820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010822:	4798      	blx	r3
 8010824:	4b08      	ldr	r3, [pc, #32]	@ (8010848 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8010826:	881a      	ldrh	r2, [r3, #0]
 8010828:	6833      	ldr	r3, [r6, #0]
 801082a:	e9cd 7500 	strd	r7, r5, [sp]
 801082e:	4601      	mov	r1, r0
 8010830:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010832:	4630      	mov	r0, r6
 8010834:	ab04      	add	r3, sp, #16
 8010836:	47a8      	blx	r5
 8010838:	6820      	ldr	r0, [r4, #0]
 801083a:	6803      	ldr	r3, [r0, #0]
 801083c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801083e:	4798      	blx	r3
 8010840:	e7e8      	b.n	8010814 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8010842:	bf00      	nop
 8010844:	20015438 	.word	0x20015438
 8010848:	20015432 	.word	0x20015432

0801084c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801084c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010850:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8010854:	9e08      	ldr	r6, [sp, #32]
 8010856:	4688      	mov	r8, r1
 8010858:	4614      	mov	r4, r2
 801085a:	461d      	mov	r5, r3
 801085c:	2f00      	cmp	r7, #0
 801085e:	f000 80a9 	beq.w	80109b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010862:	4618      	mov	r0, r3
 8010864:	f7f8 feab 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 8010868:	2800      	cmp	r0, #0
 801086a:	f040 80a3 	bne.w	80109b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801086e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010872:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010876:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801087a:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801087e:	fb04 1303 	mla	r3, r4, r3, r1
 8010882:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8010886:	4365      	muls	r5, r4
 8010888:	2fff      	cmp	r7, #255	@ 0xff
 801088a:	eba4 0200 	sub.w	r2, r4, r0
 801088e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8010892:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8010896:	d04a      	beq.n	801092e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8010898:	b2bc      	uxth	r4, r7
 801089a:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801089e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80108a2:	fa5f f788 	uxtb.w	r7, r8
 80108a6:	b2f3      	uxtb	r3, r6
 80108a8:	0040      	lsls	r0, r0, #1
 80108aa:	fb0e fe04 	mul.w	lr, lr, r4
 80108ae:	4367      	muls	r7, r4
 80108b0:	4363      	muls	r3, r4
 80108b2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80108b6:	fa1f fc8c 	uxth.w	ip, ip
 80108ba:	42a9      	cmp	r1, r5
 80108bc:	d27a      	bcs.n	80109b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80108be:	eb01 0900 	add.w	r9, r1, r0
 80108c2:	4549      	cmp	r1, r9
 80108c4:	d231      	bcs.n	801092a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 80108c6:	880a      	ldrh	r2, [r1, #0]
 80108c8:	1214      	asrs	r4, r2, #8
 80108ca:	10d6      	asrs	r6, r2, #3
 80108cc:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80108d0:	00d2      	lsls	r2, r2, #3
 80108d2:	b2d2      	uxtb	r2, r2
 80108d4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80108d8:	fb14 f40c 	smulbb	r4, r4, ip
 80108dc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80108e0:	4474      	add	r4, lr
 80108e2:	fb12 f20c 	smulbb	r2, r2, ip
 80108e6:	b2a4      	uxth	r4, r4
 80108e8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80108ec:	441a      	add	r2, r3
 80108ee:	b292      	uxth	r2, r2
 80108f0:	f104 0a01 	add.w	sl, r4, #1
 80108f4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80108f8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80108fc:	fb16 f60c 	smulbb	r6, r6, ip
 8010900:	f102 0a01 	add.w	sl, r2, #1
 8010904:	443e      	add	r6, r7
 8010906:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801090a:	b2b6      	uxth	r6, r6
 801090c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8010910:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8010914:	4322      	orrs	r2, r4
 8010916:	1c74      	adds	r4, r6, #1
 8010918:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801091c:	0976      	lsrs	r6, r6, #5
 801091e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8010922:	4332      	orrs	r2, r6
 8010924:	f821 2b02 	strh.w	r2, [r1], #2
 8010928:	e7cb      	b.n	80108c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 801092a:	4441      	add	r1, r8
 801092c:	e7c5      	b.n	80108ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 801092e:	4f22      	ldr	r7, [pc, #136]	@ (80109b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8010930:	0973      	lsrs	r3, r6, #5
 8010932:	ea08 0707 	and.w	r7, r8, r7
 8010936:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801093a:	433b      	orrs	r3, r7
 801093c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8010940:	4333      	orrs	r3, r6
 8010942:	07e7      	lsls	r7, r4, #31
 8010944:	b29b      	uxth	r3, r3
 8010946:	d50b      	bpl.n	8010960 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8010948:	0040      	lsls	r0, r0, #1
 801094a:	0052      	lsls	r2, r2, #1
 801094c:	42a9      	cmp	r1, r5
 801094e:	d231      	bcs.n	80109b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010950:	180c      	adds	r4, r1, r0
 8010952:	42a1      	cmp	r1, r4
 8010954:	d202      	bcs.n	801095c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8010956:	f821 3b02 	strh.w	r3, [r1], #2
 801095a:	e7fa      	b.n	8010952 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 801095c:	4411      	add	r1, r2
 801095e:	e7f5      	b.n	801094c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8010960:	078e      	lsls	r6, r1, #30
 8010962:	d008      	beq.n	8010976 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8010964:	0066      	lsls	r6, r4, #1
 8010966:	460a      	mov	r2, r1
 8010968:	42aa      	cmp	r2, r5
 801096a:	d202      	bcs.n	8010972 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 801096c:	8013      	strh	r3, [r2, #0]
 801096e:	4432      	add	r2, r6
 8010970:	e7fa      	b.n	8010968 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8010972:	3102      	adds	r1, #2
 8010974:	3801      	subs	r0, #1
 8010976:	07c2      	lsls	r2, r0, #31
 8010978:	d50b      	bpl.n	8010992 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 801097a:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801097e:	3a01      	subs	r2, #1
 8010980:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010984:	0066      	lsls	r6, r4, #1
 8010986:	42aa      	cmp	r2, r5
 8010988:	d202      	bcs.n	8010990 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 801098a:	8013      	strh	r3, [r2, #0]
 801098c:	4432      	add	r2, r6
 801098e:	e7fa      	b.n	8010986 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8010990:	3801      	subs	r0, #1
 8010992:	b178      	cbz	r0, 80109b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8010994:	1040      	asrs	r0, r0, #1
 8010996:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801099a:	0080      	lsls	r0, r0, #2
 801099c:	0064      	lsls	r4, r4, #1
 801099e:	42a9      	cmp	r1, r5
 80109a0:	d208      	bcs.n	80109b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80109a2:	180e      	adds	r6, r1, r0
 80109a4:	460a      	mov	r2, r1
 80109a6:	42b2      	cmp	r2, r6
 80109a8:	d202      	bcs.n	80109b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 80109aa:	f842 3b04 	str.w	r3, [r2], #4
 80109ae:	e7fa      	b.n	80109a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 80109b0:	4421      	add	r1, r4
 80109b2:	e7f4      	b.n	801099e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 80109b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109b8:	00fff800 	.word	0x00fff800

080109bc <_ZN8touchgfx8LCD16bppC1Ev>:
 80109bc:	2200      	movs	r2, #0
 80109be:	4912      	ldr	r1, [pc, #72]	@ (8010a08 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 80109c0:	6001      	str	r1, [r0, #0]
 80109c2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80109c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80109ca:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80109ce:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80109d2:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 80109d6:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80109da:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 80109de:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80109e2:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 80109e6:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 80109ea:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 80109ee:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 80109f2:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 80109f6:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 80109fa:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 80109fe:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8010a02:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8010a06:	4770      	bx	lr
 8010a08:	08015a44 	.word	0x08015a44

08010a0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8010a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a10:	460d      	mov	r5, r1
 8010a12:	b08d      	sub	sp, #52	@ 0x34
 8010a14:	4604      	mov	r4, r0
 8010a16:	6808      	ldr	r0, [r1, #0]
 8010a18:	6849      	ldr	r1, [r1, #4]
 8010a1a:	4699      	mov	r9, r3
 8010a1c:	ab08      	add	r3, sp, #32
 8010a1e:	c303      	stmia	r3!, {r0, r1}
 8010a20:	6810      	ldr	r0, [r2, #0]
 8010a22:	6851      	ldr	r1, [r2, #4]
 8010a24:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a26:	c303      	stmia	r3!, {r0, r1}
 8010a28:	a808      	add	r0, sp, #32
 8010a2a:	f7fb ff03 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010a2e:	4629      	mov	r1, r5
 8010a30:	a80a      	add	r0, sp, #40	@ 0x28
 8010a32:	f7fb ff27 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010a36:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8010a3a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8010a3e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8010a42:	4d63      	ldr	r5, [pc, #396]	@ (8010bd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8010a44:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8010a48:	6828      	ldr	r0, [r5, #0]
 8010a4a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8010a4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010a52:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8010a56:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8010a5a:	440a      	add	r2, r1
 8010a5c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010a60:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8010a64:	4413      	add	r3, r2
 8010a66:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010a6a:	6803      	ldr	r3, [r0, #0]
 8010a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a6e:	4798      	blx	r3
 8010a70:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010a74:	d119      	bne.n	8010aaa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8010a76:	f010 0f20 	tst.w	r0, #32
 8010a7a:	6828      	ldr	r0, [r5, #0]
 8010a7c:	d018      	beq.n	8010ab0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8010a7e:	2500      	movs	r5, #0
 8010a80:	6801      	ldr	r1, [r0, #0]
 8010a82:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8010a86:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8010a8a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8010a8e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8010a92:	9502      	str	r5, [sp, #8]
 8010a94:	b2b6      	uxth	r6, r6
 8010a96:	fa1f f588 	uxth.w	r5, r8
 8010a9a:	9601      	str	r6, [sp, #4]
 8010a9c:	9500      	str	r5, [sp, #0]
 8010a9e:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	47a8      	blx	r5
 8010aa4:	b00d      	add	sp, #52	@ 0x34
 8010aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aaa:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8010aae:	e7e4      	b.n	8010a7a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8010ab0:	6803      	ldr	r3, [r0, #0]
 8010ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ab4:	4798      	blx	r3
 8010ab6:	4947      	ldr	r1, [pc, #284]	@ (8010bd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8010ab8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010abc:	880b      	ldrh	r3, [r1, #0]
 8010abe:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8010ac2:	fb03 5202 	mla	r2, r3, r2, r5
 8010ac6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010aca:	4373      	muls	r3, r6
 8010acc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010ad0:	9307      	str	r3, [sp, #28]
 8010ad2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8010ad6:	9306      	str	r3, [sp, #24]
 8010ad8:	468a      	mov	sl, r1
 8010ada:	9b07      	ldr	r3, [sp, #28]
 8010adc:	4298      	cmp	r0, r3
 8010ade:	d270      	bcs.n	8010bc2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8010ae0:	9b06      	ldr	r3, [sp, #24]
 8010ae2:	4621      	mov	r1, r4
 8010ae4:	eb00 0b03 	add.w	fp, r0, r3
 8010ae8:	4558      	cmp	r0, fp
 8010aea:	d25d      	bcs.n	8010ba8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8010aec:	f851 4b04 	ldr.w	r4, [r1], #4
 8010af0:	0e23      	lsrs	r3, r4, #24
 8010af2:	d014      	beq.n	8010b1e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8010af4:	2bff      	cmp	r3, #255	@ 0xff
 8010af6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8010afa:	d112      	bne.n	8010b22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8010afc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8010b00:	d10f      	bne.n	8010b22 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8010b02:	0963      	lsrs	r3, r4, #5
 8010b04:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8010b08:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010b0c:	f02c 0c07 	bic.w	ip, ip, #7
 8010b10:	ea43 0c0c 	orr.w	ip, r3, ip
 8010b14:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8010b18:	ea4c 0404 	orr.w	r4, ip, r4
 8010b1c:	8004      	strh	r4, [r0, #0]
 8010b1e:	3002      	adds	r0, #2
 8010b20:	e7e2      	b.n	8010ae8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8010b22:	fb09 f303 	mul.w	r3, r9, r3
 8010b26:	8807      	ldrh	r7, [r0, #0]
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8010b2e:	1212      	asrs	r2, r2, #8
 8010b30:	123e      	asrs	r6, r7, #8
 8010b32:	b293      	uxth	r3, r2
 8010b34:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8010b38:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8010b3c:	43d2      	mvns	r2, r2
 8010b3e:	b2d2      	uxtb	r2, r2
 8010b40:	10fd      	asrs	r5, r7, #3
 8010b42:	fb1e fe03 	smulbb	lr, lr, r3
 8010b46:	00ff      	lsls	r7, r7, #3
 8010b48:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8010b4c:	fb06 e602 	mla	r6, r6, r2, lr
 8010b50:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8010b54:	b2ff      	uxtb	r7, r7
 8010b56:	fa5f fc8c 	uxtb.w	ip, ip
 8010b5a:	b2e4      	uxtb	r4, r4
 8010b5c:	b2b6      	uxth	r6, r6
 8010b5e:	fb1c fc03 	smulbb	ip, ip, r3
 8010b62:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8010b66:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8010b6a:	fb14 f403 	smulbb	r4, r4, r3
 8010b6e:	fb05 c502 	mla	r5, r5, r2, ip
 8010b72:	f106 0e01 	add.w	lr, r6, #1
 8010b76:	fb07 4702 	mla	r7, r7, r2, r4
 8010b7a:	b2ad      	uxth	r5, r5
 8010b7c:	b2bf      	uxth	r7, r7
 8010b7e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8010b82:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8010b86:	f105 0c01 	add.w	ip, r5, #1
 8010b8a:	1c7e      	adds	r6, r7, #1
 8010b8c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8010b90:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8010b94:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8010b98:	096d      	lsrs	r5, r5, #5
 8010b9a:	ea46 060e 	orr.w	r6, r6, lr
 8010b9e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8010ba2:	432e      	orrs	r6, r5
 8010ba4:	8006      	strh	r6, [r0, #0]
 8010ba6:	e7ba      	b.n	8010b1e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8010ba8:	f8ba 3000 	ldrh.w	r3, [sl]
 8010bac:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8010bb0:	eba3 0308 	sub.w	r3, r3, r8
 8010bb4:	eba4 0408 	sub.w	r4, r4, r8
 8010bb8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010bbc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8010bc0:	e78b      	b.n	8010ada <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8010bc2:	4b03      	ldr	r3, [pc, #12]	@ (8010bd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8010bc4:	6818      	ldr	r0, [r3, #0]
 8010bc6:	6803      	ldr	r3, [r0, #0]
 8010bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bca:	4798      	blx	r3
 8010bcc:	e76a      	b.n	8010aa4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8010bce:	bf00      	nop
 8010bd0:	20015438 	.word	0x20015438
 8010bd4:	20015432 	.word	0x20015432

08010bd8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8010bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bdc:	460c      	mov	r4, r1
 8010bde:	b085      	sub	sp, #20
 8010be0:	6810      	ldr	r0, [r2, #0]
 8010be2:	6851      	ldr	r1, [r2, #4]
 8010be4:	466d      	mov	r5, sp
 8010be6:	c503      	stmia	r5!, {r0, r1}
 8010be8:	6818      	ldr	r0, [r3, #0]
 8010bea:	6859      	ldr	r1, [r3, #4]
 8010bec:	4616      	mov	r6, r2
 8010bee:	c503      	stmia	r5!, {r0, r1}
 8010bf0:	4668      	mov	r0, sp
 8010bf2:	f7fb fe1f 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010bf6:	4631      	mov	r1, r6
 8010bf8:	a802      	add	r0, sp, #8
 8010bfa:	f7fb fe43 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010bfe:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8010c02:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8010c06:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8010c0a:	4d28      	ldr	r5, [pc, #160]	@ (8010cac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8010c0c:	4e28      	ldr	r6, [pc, #160]	@ (8010cb0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8010c0e:	6828      	ldr	r0, [r5, #0]
 8010c10:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8010c14:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8010c18:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010c1c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8010c20:	f8bd 1000 	ldrh.w	r1, [sp]
 8010c24:	440a      	add	r2, r1
 8010c26:	f8ad 2008 	strh.w	r2, [sp, #8]
 8010c2a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010c2e:	4413      	add	r3, r2
 8010c30:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010c34:	6803      	ldr	r3, [r0, #0]
 8010c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c38:	4798      	blx	r3
 8010c3a:	8833      	ldrh	r3, [r6, #0]
 8010c3c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8010c40:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010c44:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8010cb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8010c48:	fb03 1202 	mla	r2, r3, r2, r1
 8010c4c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010c50:	fb08 f303 	mul.w	r3, r8, r3
 8010c54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010c58:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8010c5c:	4298      	cmp	r0, r3
 8010c5e:	d21d      	bcs.n	8010c9c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8010c60:	eb00 080c 	add.w	r8, r0, ip
 8010c64:	4540      	cmp	r0, r8
 8010c66:	d20f      	bcs.n	8010c88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8010c68:	f854 1b04 	ldr.w	r1, [r4], #4
 8010c6c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8010c70:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8010c74:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8010c78:	ea42 0209 	orr.w	r2, r2, r9
 8010c7c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8010c80:	430a      	orrs	r2, r1
 8010c82:	f820 2b02 	strh.w	r2, [r0], #2
 8010c86:	e7ed      	b.n	8010c64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8010c88:	8832      	ldrh	r2, [r6, #0]
 8010c8a:	1bd2      	subs	r2, r2, r7
 8010c8c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010c90:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010c94:	1bd2      	subs	r2, r2, r7
 8010c96:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8010c9a:	e7df      	b.n	8010c5c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8010c9c:	6828      	ldr	r0, [r5, #0]
 8010c9e:	6803      	ldr	r3, [r0, #0]
 8010ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ca2:	4798      	blx	r3
 8010ca4:	b005      	add	sp, #20
 8010ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010caa:	bf00      	nop
 8010cac:	20015438 	.word	0x20015438
 8010cb0:	20015432 	.word	0x20015432
 8010cb4:	fffff800 	.word	0xfffff800

08010cb8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8010cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cbc:	460e      	mov	r6, r1
 8010cbe:	b08e      	sub	sp, #56	@ 0x38
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	6808      	ldr	r0, [r1, #0]
 8010cc4:	6849      	ldr	r1, [r1, #4]
 8010cc6:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8010ea0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8010cca:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8010ea4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8010cce:	461d      	mov	r5, r3
 8010cd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8010cd2:	c303      	stmia	r3!, {r0, r1}
 8010cd4:	6810      	ldr	r0, [r2, #0]
 8010cd6:	6851      	ldr	r1, [r2, #4]
 8010cd8:	ab0c      	add	r3, sp, #48	@ 0x30
 8010cda:	c303      	stmia	r3!, {r0, r1}
 8010cdc:	a80a      	add	r0, sp, #40	@ 0x28
 8010cde:	f7fb fda9 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010ce2:	4631      	mov	r1, r6
 8010ce4:	a80c      	add	r0, sp, #48	@ 0x30
 8010ce6:	f7fb fdcd 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010cea:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8010cee:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8010cf2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8010cf6:	f8d8 0000 	ldr.w	r0, [r8]
 8010cfa:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8010cfe:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8010d02:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010d06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010d0a:	440c      	add	r4, r1
 8010d0c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8010d10:	440a      	add	r2, r1
 8010d12:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8010d16:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8010d1a:	4413      	add	r3, r2
 8010d1c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010d20:	6803      	ldr	r3, [r0, #0]
 8010d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d24:	4798      	blx	r3
 8010d26:	2dff      	cmp	r5, #255	@ 0xff
 8010d28:	d124      	bne.n	8010d74 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8010d2a:	f010 0f01 	tst.w	r0, #1
 8010d2e:	f8d8 0000 	ldr.w	r0, [r8]
 8010d32:	d022      	beq.n	8010d7a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8010d34:	2100      	movs	r1, #0
 8010d36:	f8d0 c000 	ldr.w	ip, [r0]
 8010d3a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8010d3e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8010d42:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8010d46:	f04f 0e01 	mov.w	lr, #1
 8010d4a:	f8cd e018 	str.w	lr, [sp, #24]
 8010d4e:	f8b9 e000 	ldrh.w	lr, [r9]
 8010d52:	9503      	str	r5, [sp, #12]
 8010d54:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8010d58:	b2b6      	uxth	r6, r6
 8010d5a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8010d5e:	9102      	str	r1, [sp, #8]
 8010d60:	b2bf      	uxth	r7, r7
 8010d62:	9601      	str	r6, [sp, #4]
 8010d64:	9700      	str	r7, [sp, #0]
 8010d66:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8010d6a:	4621      	mov	r1, r4
 8010d6c:	47a8      	blx	r5
 8010d6e:	b00e      	add	sp, #56	@ 0x38
 8010d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d74:	f010 0f04 	tst.w	r0, #4
 8010d78:	e7d9      	b.n	8010d2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8010d7a:	6803      	ldr	r3, [r0, #0]
 8010d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d7e:	4798      	blx	r3
 8010d80:	f8b9 3000 	ldrh.w	r3, [r9]
 8010d84:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8010d88:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8010d8c:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8010d90:	fb03 1202 	mla	r2, r3, r2, r1
 8010d94:	ebac 0c07 	sub.w	ip, ip, r7
 8010d98:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010d9c:	435e      	muls	r6, r3
 8010d9e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8010da2:	2dff      	cmp	r5, #255	@ 0xff
 8010da4:	eba3 0707 	sub.w	r7, r3, r7
 8010da8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010dac:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8010db0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8010db4:	d049      	beq.n	8010e4a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8010db6:	43eb      	mvns	r3, r5
 8010db8:	fa1f f985 	uxth.w	r9, r5
 8010dbc:	b2db      	uxtb	r3, r3
 8010dbe:	42b0      	cmp	r0, r6
 8010dc0:	d266      	bcs.n	8010e90 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8010dc2:	eb00 0a0e 	add.w	sl, r0, lr
 8010dc6:	4550      	cmp	r0, sl
 8010dc8:	4621      	mov	r1, r4
 8010dca:	f104 0403 	add.w	r4, r4, #3
 8010dce:	d25b      	bcs.n	8010e88 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8010dd0:	8802      	ldrh	r2, [r0, #0]
 8010dd2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8010dd6:	ea4f 2822 	mov.w	r8, r2, asr #8
 8010dda:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8010dde:	fb11 f109 	smulbb	r1, r1, r9
 8010de2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8010de6:	10d5      	asrs	r5, r2, #3
 8010de8:	fb08 1803 	mla	r8, r8, r3, r1
 8010dec:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8010df0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8010df4:	fb11 f109 	smulbb	r1, r1, r9
 8010df8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8010dfc:	fb05 1503 	mla	r5, r5, r3, r1
 8010e00:	00d2      	lsls	r2, r2, #3
 8010e02:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010e06:	b2d2      	uxtb	r2, r2
 8010e08:	fb11 f109 	smulbb	r1, r1, r9
 8010e0c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8010e10:	fa1f f888 	uxth.w	r8, r8
 8010e14:	fb02 1203 	mla	r2, r2, r3, r1
 8010e18:	b292      	uxth	r2, r2
 8010e1a:	f108 0101 	add.w	r1, r8, #1
 8010e1e:	b2ad      	uxth	r5, r5
 8010e20:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8010e24:	1c51      	adds	r1, r2, #1
 8010e26:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010e2a:	1c69      	adds	r1, r5, #1
 8010e2c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8010e30:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8010e34:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8010e38:	096d      	lsrs	r5, r5, #5
 8010e3a:	ea42 0208 	orr.w	r2, r2, r8
 8010e3e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8010e42:	432a      	orrs	r2, r5
 8010e44:	f820 2b02 	strh.w	r2, [r0], #2
 8010e48:	e7bd      	b.n	8010dc6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8010e4a:	4a14      	ldr	r2, [pc, #80]	@ (8010e9c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8010e4c:	42b0      	cmp	r0, r6
 8010e4e:	d21f      	bcs.n	8010e90 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8010e50:	eb00 050e 	add.w	r5, r0, lr
 8010e54:	42a8      	cmp	r0, r5
 8010e56:	4621      	mov	r1, r4
 8010e58:	f104 0403 	add.w	r4, r4, #3
 8010e5c:	d210      	bcs.n	8010e80 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8010e5e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8010e62:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8010e66:	00db      	lsls	r3, r3, #3
 8010e68:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8010e6c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010e70:	430b      	orrs	r3, r1
 8010e72:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010e76:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8010e7a:	f820 3b02 	strh.w	r3, [r0], #2
 8010e7e:	e7e9      	b.n	8010e54 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8010e80:	4438      	add	r0, r7
 8010e82:	eb01 040c 	add.w	r4, r1, ip
 8010e86:	e7e1      	b.n	8010e4c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8010e88:	4438      	add	r0, r7
 8010e8a:	eb01 040c 	add.w	r4, r1, ip
 8010e8e:	e796      	b.n	8010dbe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8010e90:	4b03      	ldr	r3, [pc, #12]	@ (8010ea0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8010e92:	6818      	ldr	r0, [r3, #0]
 8010e94:	6803      	ldr	r3, [r0, #0]
 8010e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e98:	4798      	blx	r3
 8010e9a:	e768      	b.n	8010d6e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8010e9c:	fffff800 	.word	0xfffff800
 8010ea0:	20015438 	.word	0x20015438
 8010ea4:	20015432 	.word	0x20015432

08010ea8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8010ea8:	b4f0      	push	{r4, r5, r6, r7}
 8010eaa:	4616      	mov	r6, r2
 8010eac:	2e01      	cmp	r6, #1
 8010eae:	461c      	mov	r4, r3
 8010eb0:	460d      	mov	r5, r1
 8010eb2:	9a04      	ldr	r2, [sp, #16]
 8010eb4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010eb8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8010ebc:	d012      	beq.n	8010ee4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8010ebe:	d303      	bcc.n	8010ec8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8010ec0:	2e02      	cmp	r6, #2
 8010ec2:	d00a      	beq.n	8010eda <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8010ec4:	bcf0      	pop	{r4, r5, r6, r7}
 8010ec6:	4770      	bx	lr
 8010ec8:	6805      	ldr	r5, [r0, #0]
 8010eca:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8010ece:	68ed      	ldr	r5, [r5, #12]
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	46ac      	mov	ip, r5
 8010ed4:	4622      	mov	r2, r4
 8010ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8010ed8:	4760      	bx	ip
 8010eda:	4621      	mov	r1, r4
 8010edc:	4628      	mov	r0, r5
 8010ede:	bcf0      	pop	{r4, r5, r6, r7}
 8010ee0:	f7ff bd94 	b.w	8010a0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	bcf0      	pop	{r4, r5, r6, r7}
 8010eea:	f7ff bee5 	b.w	8010cb8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08010ef0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8010ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef4:	4681      	mov	r9, r0
 8010ef6:	b093      	sub	sp, #76	@ 0x4c
 8010ef8:	6810      	ldr	r0, [r2, #0]
 8010efa:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8010efe:	4f6d      	ldr	r7, [pc, #436]	@ (80110b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8010f00:	4688      	mov	r8, r1
 8010f02:	6851      	ldr	r1, [r2, #4]
 8010f04:	ac0e      	add	r4, sp, #56	@ 0x38
 8010f06:	c403      	stmia	r4!, {r0, r1}
 8010f08:	6818      	ldr	r0, [r3, #0]
 8010f0a:	6859      	ldr	r1, [r3, #4]
 8010f0c:	ac10      	add	r4, sp, #64	@ 0x40
 8010f0e:	4616      	mov	r6, r2
 8010f10:	c403      	stmia	r4!, {r0, r1}
 8010f12:	a80e      	add	r0, sp, #56	@ 0x38
 8010f14:	f7fb fc8e 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010f18:	4631      	mov	r1, r6
 8010f1a:	a810      	add	r0, sp, #64	@ 0x40
 8010f1c:	f7fb fcb2 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010f20:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8010f24:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8010f28:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8010f2c:	4e62      	ldr	r6, [pc, #392]	@ (80110b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8010f2e:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8010f32:	6830      	ldr	r0, [r6, #0]
 8010f34:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8010f38:	fb11 2103 	smlabb	r1, r1, r3, r2
 8010f3c:	4489      	add	r9, r1
 8010f3e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8010f42:	440a      	add	r2, r1
 8010f44:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010f48:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8010f4c:	4413      	add	r3, r2
 8010f4e:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8010f52:	6803      	ldr	r3, [r0, #0]
 8010f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f56:	4798      	blx	r3
 8010f58:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8010f5c:	6830      	ldr	r0, [r6, #0]
 8010f5e:	d01d      	beq.n	8010f9c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8010f60:	2200      	movs	r2, #0
 8010f62:	6801      	ldr	r1, [r0, #0]
 8010f64:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010f68:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8010f6c:	220b      	movs	r2, #11
 8010f6e:	9207      	str	r2, [sp, #28]
 8010f70:	883a      	ldrh	r2, [r7, #0]
 8010f72:	9206      	str	r2, [sp, #24]
 8010f74:	2201      	movs	r2, #1
 8010f76:	e9cd a204 	strd	sl, r2, [sp, #16]
 8010f7a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8010f7e:	9203      	str	r2, [sp, #12]
 8010f80:	b2a4      	uxth	r4, r4
 8010f82:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010f86:	9200      	str	r2, [sp, #0]
 8010f88:	b2ad      	uxth	r5, r5
 8010f8a:	9502      	str	r5, [sp, #8]
 8010f8c:	9401      	str	r4, [sp, #4]
 8010f8e:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8010f90:	4642      	mov	r2, r8
 8010f92:	4649      	mov	r1, r9
 8010f94:	47a0      	blx	r4
 8010f96:	b013      	add	sp, #76	@ 0x4c
 8010f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f9c:	6803      	ldr	r3, [r0, #0]
 8010f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fa0:	4798      	blx	r3
 8010fa2:	883b      	ldrh	r3, [r7, #0]
 8010fa4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8010fa8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8010fac:	fb03 1202 	mla	r2, r3, r2, r1
 8010fb0:	435d      	muls	r5, r3
 8010fb2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8010fb6:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8010fba:	920c      	str	r2, [sp, #48]	@ 0x30
 8010fbc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8010fc0:	1b12      	subs	r2, r2, r4
 8010fc2:	920d      	str	r2, [sp, #52]	@ 0x34
 8010fc4:	0062      	lsls	r2, r4, #1
 8010fc6:	1b1c      	subs	r4, r3, r4
 8010fc8:	0063      	lsls	r3, r4, #1
 8010fca:	920a      	str	r2, [sp, #40]	@ 0x28
 8010fcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010fce:	f04f 0e04 	mov.w	lr, #4
 8010fd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fd4:	4298      	cmp	r0, r3
 8010fd6:	d266      	bcs.n	80110a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8010fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fda:	eb00 0b03 	add.w	fp, r0, r3
 8010fde:	4558      	cmp	r0, fp
 8010fe0:	d25c      	bcs.n	801109c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8010fe2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010fe6:	fb1e e303 	smlabb	r3, lr, r3, lr
 8010fea:	f858 2003 	ldr.w	r2, [r8, r3]
 8010fee:	0e11      	lsrs	r1, r2, #24
 8010ff0:	d012      	beq.n	8011018 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8010ff2:	29ff      	cmp	r1, #255	@ 0xff
 8010ff4:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8010ff8:	d110      	bne.n	801101c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8010ffa:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8010ffe:	d10d      	bne.n	801101c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011000:	0953      	lsrs	r3, r2, #5
 8011002:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8011006:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801100a:	f027 0707 	bic.w	r7, r7, #7
 801100e:	431f      	orrs	r7, r3
 8011010:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8011014:	433a      	orrs	r2, r7
 8011016:	8002      	strh	r2, [r0, #0]
 8011018:	3002      	adds	r0, #2
 801101a:	e7e0      	b.n	8010fde <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801101c:	fb0a f101 	mul.w	r1, sl, r1
 8011020:	8806      	ldrh	r6, [r0, #0]
 8011022:	1c4b      	adds	r3, r1, #1
 8011024:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8011028:	1235      	asrs	r5, r6, #8
 801102a:	10f4      	asrs	r4, r6, #3
 801102c:	121b      	asrs	r3, r3, #8
 801102e:	00f6      	lsls	r6, r6, #3
 8011030:	b299      	uxth	r1, r3
 8011032:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011036:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801103a:	b2f6      	uxtb	r6, r6
 801103c:	43db      	mvns	r3, r3
 801103e:	b2d2      	uxtb	r2, r2
 8011040:	b2db      	uxtb	r3, r3
 8011042:	fb1c fc01 	smulbb	ip, ip, r1
 8011046:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801104a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801104e:	fb12 f201 	smulbb	r2, r2, r1
 8011052:	fb05 c503 	mla	r5, r5, r3, ip
 8011056:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801105a:	b2ff      	uxtb	r7, r7
 801105c:	fb06 2203 	mla	r2, r6, r3, r2
 8011060:	b2ad      	uxth	r5, r5
 8011062:	fb17 f701 	smulbb	r7, r7, r1
 8011066:	b292      	uxth	r2, r2
 8011068:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801106c:	fb04 7403 	mla	r4, r4, r3, r7
 8011070:	f105 0c01 	add.w	ip, r5, #1
 8011074:	1c57      	adds	r7, r2, #1
 8011076:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801107a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801107e:	b2a4      	uxth	r4, r4
 8011080:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011084:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8011088:	433d      	orrs	r5, r7
 801108a:	1c67      	adds	r7, r4, #1
 801108c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8011090:	0964      	lsrs	r4, r4, #5
 8011092:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8011096:	4325      	orrs	r5, r4
 8011098:	8005      	strh	r5, [r0, #0]
 801109a:	e7bd      	b.n	8011018 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801109c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801109e:	4418      	add	r0, r3
 80110a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110a2:	4499      	add	r9, r3
 80110a4:	e795      	b.n	8010fd2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80110a6:	4b04      	ldr	r3, [pc, #16]	@ (80110b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80110a8:	6818      	ldr	r0, [r3, #0]
 80110aa:	6803      	ldr	r3, [r0, #0]
 80110ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ae:	4798      	blx	r3
 80110b0:	e771      	b.n	8010f96 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80110b2:	bf00      	nop
 80110b4:	20015432 	.word	0x20015432
 80110b8:	20015438 	.word	0x20015438

080110bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80110bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	b087      	sub	sp, #28
 80110c2:	4680      	mov	r8, r0
 80110c4:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80110c8:	460d      	mov	r5, r1
 80110ca:	4614      	mov	r4, r2
 80110cc:	2e00      	cmp	r6, #0
 80110ce:	f000 80b9 	beq.w	8011244 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80110d2:	6810      	ldr	r0, [r2, #0]
 80110d4:	6851      	ldr	r1, [r2, #4]
 80110d6:	af02      	add	r7, sp, #8
 80110d8:	c703      	stmia	r7!, {r0, r1}
 80110da:	6818      	ldr	r0, [r3, #0]
 80110dc:	6859      	ldr	r1, [r3, #4]
 80110de:	af04      	add	r7, sp, #16
 80110e0:	c703      	stmia	r7!, {r0, r1}
 80110e2:	a802      	add	r0, sp, #8
 80110e4:	f7fb fba6 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80110e8:	4621      	mov	r1, r4
 80110ea:	a804      	add	r0, sp, #16
 80110ec:	f7fb fbca 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80110f0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80110f4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80110f8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80110fc:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8011100:	fb14 2103 	smlabb	r1, r4, r3, r2
 8011104:	eb08 0401 	add.w	r4, r8, r1
 8011108:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801110c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011110:	440a      	add	r2, r1
 8011112:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011116:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801111a:	4413      	add	r3, r2
 801111c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011120:	4b4a      	ldr	r3, [pc, #296]	@ (801124c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011122:	6818      	ldr	r0, [r3, #0]
 8011124:	6803      	ldr	r3, [r0, #0]
 8011126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011128:	4798      	blx	r3
 801112a:	4b49      	ldr	r3, [pc, #292]	@ (8011250 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801112c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011130:	881a      	ldrh	r2, [r3, #0]
 8011132:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8011136:	2eff      	cmp	r6, #255	@ 0xff
 8011138:	fb02 c101 	mla	r1, r2, r1, ip
 801113c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011140:	fb02 f207 	mul.w	r2, r2, r7
 8011144:	f105 0104 	add.w	r1, r5, #4
 8011148:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801114c:	461d      	mov	r5, r3
 801114e:	d05a      	beq.n	8011206 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8011150:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8011154:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011158:	b2b6      	uxth	r6, r6
 801115a:	fa1f fe8e 	uxth.w	lr, lr
 801115e:	9301      	str	r3, [sp, #4]
 8011160:	4282      	cmp	r2, r0
 8011162:	d96a      	bls.n	801123a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011164:	eb00 0b0a 	add.w	fp, r0, sl
 8011168:	4583      	cmp	fp, r0
 801116a:	d940      	bls.n	80111ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801116c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011170:	8805      	ldrh	r5, [r0, #0]
 8011172:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011176:	122f      	asrs	r7, r5, #8
 8011178:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801117c:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011180:	fb17 f70e 	smulbb	r7, r7, lr
 8011184:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8011188:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801118c:	00ed      	lsls	r5, r5, #3
 801118e:	fb0c 7c06 	mla	ip, ip, r6, r7
 8011192:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8011196:	10df      	asrs	r7, r3, #3
 8011198:	b2ed      	uxtb	r5, r5
 801119a:	00db      	lsls	r3, r3, #3
 801119c:	fa1f fc8c 	uxth.w	ip, ip
 80111a0:	fb19 f90e 	smulbb	r9, r9, lr
 80111a4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	fb15 f50e 	smulbb	r5, r5, lr
 80111ae:	fb07 9706 	mla	r7, r7, r6, r9
 80111b2:	fb03 5306 	mla	r3, r3, r6, r5
 80111b6:	f10c 0901 	add.w	r9, ip, #1
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80111c0:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80111c4:	f103 0c01 	add.w	ip, r3, #1
 80111c8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80111cc:	b2bf      	uxth	r7, r7
 80111ce:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80111d2:	ea4c 0c09 	orr.w	ip, ip, r9
 80111d6:	f107 0901 	add.w	r9, r7, #1
 80111da:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80111de:	097f      	lsrs	r7, r7, #5
 80111e0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80111e4:	ea4c 0c07 	orr.w	ip, ip, r7
 80111e8:	f820 cb02 	strh.w	ip, [r0], #2
 80111ec:	e7bc      	b.n	8011168 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80111ee:	9b01      	ldr	r3, [sp, #4]
 80111f0:	881b      	ldrh	r3, [r3, #0]
 80111f2:	eba3 0308 	sub.w	r3, r3, r8
 80111f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80111fa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80111fe:	eba3 0308 	sub.w	r3, r3, r8
 8011202:	441c      	add	r4, r3
 8011204:	e7ac      	b.n	8011160 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8011206:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801120a:	4282      	cmp	r2, r0
 801120c:	d915      	bls.n	801123a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801120e:	eb00 060a 	add.w	r6, r0, sl
 8011212:	4286      	cmp	r6, r0
 8011214:	d906      	bls.n	8011224 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8011216:	f814 3b01 	ldrb.w	r3, [r4], #1
 801121a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801121e:	f820 3b02 	strh.w	r3, [r0], #2
 8011222:	e7f6      	b.n	8011212 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8011224:	882b      	ldrh	r3, [r5, #0]
 8011226:	eba3 0308 	sub.w	r3, r3, r8
 801122a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801122e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011232:	eba3 0308 	sub.w	r3, r3, r8
 8011236:	441c      	add	r4, r3
 8011238:	e7e7      	b.n	801120a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801123a:	4b04      	ldr	r3, [pc, #16]	@ (801124c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801123c:	6818      	ldr	r0, [r3, #0]
 801123e:	6803      	ldr	r3, [r0, #0]
 8011240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011242:	4798      	blx	r3
 8011244:	b007      	add	sp, #28
 8011246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124a:	bf00      	nop
 801124c:	20015438 	.word	0x20015438
 8011250:	20015432 	.word	0x20015432

08011254 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011258:	b091      	sub	sp, #68	@ 0x44
 801125a:	4680      	mov	r8, r0
 801125c:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8011260:	460f      	mov	r7, r1
 8011262:	4614      	mov	r4, r2
 8011264:	2d00      	cmp	r5, #0
 8011266:	d051      	beq.n	801130c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8011268:	6810      	ldr	r0, [r2, #0]
 801126a:	6851      	ldr	r1, [r2, #4]
 801126c:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8011470 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8011270:	ae0c      	add	r6, sp, #48	@ 0x30
 8011272:	c603      	stmia	r6!, {r0, r1}
 8011274:	6818      	ldr	r0, [r3, #0]
 8011276:	6859      	ldr	r1, [r3, #4]
 8011278:	ae0e      	add	r6, sp, #56	@ 0x38
 801127a:	c603      	stmia	r6!, {r0, r1}
 801127c:	a80c      	add	r0, sp, #48	@ 0x30
 801127e:	f7fb fad9 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011282:	4621      	mov	r1, r4
 8011284:	a80e      	add	r0, sp, #56	@ 0x38
 8011286:	f7fb fafd 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801128a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801128e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011292:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8011296:	f8d9 0000 	ldr.w	r0, [r9]
 801129a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801129e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80112a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80112a6:	eb08 0401 	add.w	r4, r8, r1
 80112aa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80112ae:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8011474 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80112b2:	440a      	add	r2, r1
 80112b4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80112b8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80112bc:	4413      	add	r3, r2
 80112be:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80112c2:	6803      	ldr	r3, [r0, #0]
 80112c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112c6:	4798      	blx	r3
 80112c8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80112cc:	f8d9 0000 	ldr.w	r0, [r9]
 80112d0:	d01f      	beq.n	8011312 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80112d2:	2200      	movs	r2, #0
 80112d4:	6801      	ldr	r1, [r0, #0]
 80112d6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80112da:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80112de:	220b      	movs	r2, #11
 80112e0:	9207      	str	r2, [sp, #28]
 80112e2:	f8b8 2000 	ldrh.w	r2, [r8]
 80112e6:	9206      	str	r2, [sp, #24]
 80112e8:	2201      	movs	r2, #1
 80112ea:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80112ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80112f2:	9203      	str	r2, [sp, #12]
 80112f4:	fa1f f28a 	uxth.w	r2, sl
 80112f8:	9202      	str	r2, [sp, #8]
 80112fa:	b2b6      	uxth	r6, r6
 80112fc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011300:	9200      	str	r2, [sp, #0]
 8011302:	9601      	str	r6, [sp, #4]
 8011304:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8011306:	463a      	mov	r2, r7
 8011308:	4621      	mov	r1, r4
 801130a:	47a8      	blx	r5
 801130c:	b011      	add	sp, #68	@ 0x44
 801130e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011312:	6803      	ldr	r3, [r0, #0]
 8011314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011316:	4798      	blx	r3
 8011318:	f8b8 2000 	ldrh.w	r2, [r8]
 801131c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011320:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8011324:	2dff      	cmp	r5, #255	@ 0xff
 8011326:	fb02 1303 	mla	r3, r2, r3, r1
 801132a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801132e:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8011332:	fb0a fa02 	mul.w	sl, sl, r2
 8011336:	d062      	beq.n	80113fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8011338:	ea6f 0c05 	mvn.w	ip, r5
 801133c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8011340:	930a      	str	r3, [sp, #40]	@ 0x28
 8011342:	b2ad      	uxth	r5, r5
 8011344:	fa5f fc8c 	uxtb.w	ip, ip
 8011348:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801134c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801134e:	4298      	cmp	r0, r3
 8011350:	f080 8085 	bcs.w	801145e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011354:	eb00 0b09 	add.w	fp, r0, r9
 8011358:	4558      	cmp	r0, fp
 801135a:	d246      	bcs.n	80113ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801135c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8011360:	2303      	movs	r3, #3
 8011362:	2204      	movs	r2, #4
 8011364:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8011368:	eb07 0a0e 	add.w	sl, r7, lr
 801136c:	8803      	ldrh	r3, [r0, #0]
 801136e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8011372:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011376:	1219      	asrs	r1, r3, #8
 8011378:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801137c:	fb18 f805 	smulbb	r8, r8, r5
 8011380:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8011384:	10da      	asrs	r2, r3, #3
 8011386:	fb01 810c 	mla	r1, r1, ip, r8
 801138a:	00db      	lsls	r3, r3, #3
 801138c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8011390:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8011394:	b2db      	uxtb	r3, r3
 8011396:	fb18 f805 	smulbb	r8, r8, r5
 801139a:	fb1e fe05 	smulbb	lr, lr, r5
 801139e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80113a2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80113a6:	b289      	uxth	r1, r1
 80113a8:	fb02 820c 	mla	r2, r2, ip, r8
 80113ac:	fb03 e30c 	mla	r3, r3, ip, lr
 80113b0:	b292      	uxth	r2, r2
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	f101 0801 	add.w	r8, r1, #1
 80113b8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80113bc:	f103 0e01 	add.w	lr, r3, #1
 80113c0:	f102 0801 	add.w	r8, r2, #1
 80113c4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80113c8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80113cc:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80113d0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80113d4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80113d8:	ea4e 0101 	orr.w	r1, lr, r1
 80113dc:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80113e0:	ea41 0108 	orr.w	r1, r1, r8
 80113e4:	f820 1b02 	strh.w	r1, [r0], #2
 80113e8:	e7b6      	b.n	8011358 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80113ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113ec:	881b      	ldrh	r3, [r3, #0]
 80113ee:	1b9b      	subs	r3, r3, r6
 80113f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80113f4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80113f8:	1b9b      	subs	r3, r3, r6
 80113fa:	441c      	add	r4, r3
 80113fc:	e7a6      	b.n	801134c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80113fe:	491b      	ldr	r1, [pc, #108]	@ (801146c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8011400:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8011404:	2203      	movs	r2, #3
 8011406:	2504      	movs	r5, #4
 8011408:	4550      	cmp	r0, sl
 801140a:	d228      	bcs.n	801145e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801140c:	eb00 0c09 	add.w	ip, r0, r9
 8011410:	4560      	cmp	r0, ip
 8011412:	4623      	mov	r3, r4
 8011414:	d219      	bcs.n	801144a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8011416:	f893 e000 	ldrb.w	lr, [r3]
 801141a:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801141e:	eb07 0b0e 	add.w	fp, r7, lr
 8011422:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011426:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801142a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801142e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011432:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8011436:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801143a:	ea43 030b 	orr.w	r3, r3, fp
 801143e:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8011442:	3401      	adds	r4, #1
 8011444:	f820 3b02 	strh.w	r3, [r0], #2
 8011448:	e7e2      	b.n	8011410 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801144a:	f8b8 3000 	ldrh.w	r3, [r8]
 801144e:	1b9b      	subs	r3, r3, r6
 8011450:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011454:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011458:	1b9b      	subs	r3, r3, r6
 801145a:	441c      	add	r4, r3
 801145c:	e7d4      	b.n	8011408 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801145e:	4b04      	ldr	r3, [pc, #16]	@ (8011470 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8011460:	6818      	ldr	r0, [r3, #0]
 8011462:	6803      	ldr	r3, [r0, #0]
 8011464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011466:	4798      	blx	r3
 8011468:	e750      	b.n	801130c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801146a:	bf00      	nop
 801146c:	fffff800 	.word	0xfffff800
 8011470:	20015438 	.word	0x20015438
 8011474:	20015432 	.word	0x20015432

08011478 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8011478:	b4f0      	push	{r4, r5, r6, r7}
 801147a:	460c      	mov	r4, r1
 801147c:	4611      	mov	r1, r2
 801147e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8011482:	780f      	ldrb	r7, [r1, #0]
 8011484:	784e      	ldrb	r6, [r1, #1]
 8011486:	2f01      	cmp	r7, #1
 8011488:	461a      	mov	r2, r3
 801148a:	9b04      	ldr	r3, [sp, #16]
 801148c:	d038      	beq.n	8011500 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 801148e:	d31f      	bcc.n	80114d0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8011490:	2f02      	cmp	r7, #2
 8011492:	d14d      	bne.n	8011530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011494:	2e03      	cmp	r6, #3
 8011496:	d84b      	bhi.n	8011530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011498:	e8df f006 	tbb	[pc, r6]
 801149c:	17140702 	.word	0x17140702
 80114a0:	9504      	str	r5, [sp, #16]
 80114a2:	4620      	mov	r0, r4
 80114a4:	bcf0      	pop	{r4, r5, r6, r7}
 80114a6:	f7ff be09 	b.w	80110bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80114aa:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d03f      	beq.n	8011530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80114b0:	6806      	ldr	r6, [r0, #0]
 80114b2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80114b6:	68b5      	ldr	r5, [r6, #8]
 80114b8:	4613      	mov	r3, r2
 80114ba:	46ac      	mov	ip, r5
 80114bc:	460a      	mov	r2, r1
 80114be:	4621      	mov	r1, r4
 80114c0:	bcf0      	pop	{r4, r5, r6, r7}
 80114c2:	4760      	bx	ip
 80114c4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80114c8:	e7f0      	b.n	80114ac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80114ca:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80114ce:	e7ed      	b.n	80114ac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80114d0:	2e03      	cmp	r6, #3
 80114d2:	d82d      	bhi.n	8011530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80114d4:	e8df f006 	tbb	[pc, r6]
 80114d8:	110e0702 	.word	0x110e0702
 80114dc:	9504      	str	r5, [sp, #16]
 80114de:	4620      	mov	r0, r4
 80114e0:	bcf0      	pop	{r4, r5, r6, r7}
 80114e2:	f7ff bd05 	b.w	8010ef0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80114e6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80114e8:	b310      	cbz	r0, 8011530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80114ea:	6806      	ldr	r6, [r0, #0]
 80114ec:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80114f0:	68f5      	ldr	r5, [r6, #12]
 80114f2:	e7e1      	b.n	80114b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80114f4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80114f8:	e7f6      	b.n	80114e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80114fa:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80114fe:	e7f3      	b.n	80114e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8011500:	2e03      	cmp	r6, #3
 8011502:	d815      	bhi.n	8011530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011504:	e8df f006 	tbb	[pc, r6]
 8011508:	110e0702 	.word	0x110e0702
 801150c:	9504      	str	r5, [sp, #16]
 801150e:	4620      	mov	r0, r4
 8011510:	bcf0      	pop	{r4, r5, r6, r7}
 8011512:	f7ff be9f 	b.w	8011254 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8011516:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011518:	b150      	cbz	r0, 8011530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801151a:	6806      	ldr	r6, [r0, #0]
 801151c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011520:	6935      	ldr	r5, [r6, #16]
 8011522:	e7c9      	b.n	80114b8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8011524:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8011528:	e7f6      	b.n	8011518 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801152a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 801152e:	e7f3      	b.n	8011518 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8011530:	bcf0      	pop	{r4, r5, r6, r7}
 8011532:	4770      	bx	lr

08011534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8011534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011538:	4604      	mov	r4, r0
 801153a:	b087      	sub	sp, #28
 801153c:	6810      	ldr	r0, [r2, #0]
 801153e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8011542:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 801177c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8011546:	460e      	mov	r6, r1
 8011548:	6851      	ldr	r1, [r2, #4]
 801154a:	ad02      	add	r5, sp, #8
 801154c:	c503      	stmia	r5!, {r0, r1}
 801154e:	6818      	ldr	r0, [r3, #0]
 8011550:	6859      	ldr	r1, [r3, #4]
 8011552:	ad04      	add	r5, sp, #16
 8011554:	4617      	mov	r7, r2
 8011556:	c503      	stmia	r5!, {r0, r1}
 8011558:	a802      	add	r0, sp, #8
 801155a:	f7fb f96b 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801155e:	4639      	mov	r1, r7
 8011560:	a804      	add	r0, sp, #16
 8011562:	f7fb f98f 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011566:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801156a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801156e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011572:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011576:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801157a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801157e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8011582:	440e      	add	r6, r1
 8011584:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011588:	440a      	add	r2, r1
 801158a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801158e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011592:	4413      	add	r3, r2
 8011594:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011598:	4b77      	ldr	r3, [pc, #476]	@ (8011778 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801159a:	6818      	ldr	r0, [r3, #0]
 801159c:	6803      	ldr	r3, [r0, #0]
 801159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115a0:	4798      	blx	r3
 80115a2:	f8b9 b000 	ldrh.w	fp, [r9]
 80115a6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80115aa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80115ae:	fb0b 2303 	mla	r3, fp, r3, r2
 80115b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80115b6:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80115ba:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80115be:	fb05 f50b 	mul.w	r5, r5, fp
 80115c2:	9300      	str	r3, [sp, #0]
 80115c4:	d069      	beq.n	801169a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80115c6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80115ca:	4558      	cmp	r0, fp
 80115cc:	f080 80cc 	bcs.w	8011768 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80115d0:	9b00      	ldr	r3, [sp, #0]
 80115d2:	18c3      	adds	r3, r0, r3
 80115d4:	9301      	str	r3, [sp, #4]
 80115d6:	4631      	mov	r1, r6
 80115d8:	9b01      	ldr	r3, [sp, #4]
 80115da:	4298      	cmp	r0, r3
 80115dc:	d24f      	bcs.n	801167e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80115de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115e2:	2a00      	cmp	r2, #0
 80115e4:	d048      	beq.n	8011678 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80115e6:	fb0a f202 	mul.w	r2, sl, r2
 80115ea:	1c53      	adds	r3, r2, #1
 80115ec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80115f0:	121b      	asrs	r3, r3, #8
 80115f2:	d041      	beq.n	8011678 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80115f4:	8802      	ldrh	r2, [r0, #0]
 80115f6:	f8b4 c000 	ldrh.w	ip, [r4]
 80115fa:	b29e      	uxth	r6, r3
 80115fc:	1215      	asrs	r5, r2, #8
 80115fe:	43db      	mvns	r3, r3
 8011600:	b2db      	uxtb	r3, r3
 8011602:	ea4f 272c 	mov.w	r7, ip, asr #8
 8011606:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801160a:	fb15 f503 	smulbb	r5, r5, r3
 801160e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8011612:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011616:	00d2      	lsls	r2, r2, #3
 8011618:	fb07 5706 	mla	r7, r7, r6, r5
 801161c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8011620:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8011624:	b2d2      	uxtb	r2, r2
 8011626:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801162a:	b2bf      	uxth	r7, r7
 801162c:	fb1e fe03 	smulbb	lr, lr, r3
 8011630:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8011634:	fa5f fc8c 	uxtb.w	ip, ip
 8011638:	fb12 f203 	smulbb	r2, r2, r3
 801163c:	fb05 e506 	mla	r5, r5, r6, lr
 8011640:	fb0c 2c06 	mla	ip, ip, r6, r2
 8011644:	f107 0e01 	add.w	lr, r7, #1
 8011648:	fa1f fc8c 	uxth.w	ip, ip
 801164c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011650:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8011654:	f10c 0701 	add.w	r7, ip, #1
 8011658:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801165c:	b2ad      	uxth	r5, r5
 801165e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011662:	ea47 070e 	orr.w	r7, r7, lr
 8011666:	f105 0e01 	add.w	lr, r5, #1
 801166a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801166e:	096d      	lsrs	r5, r5, #5
 8011670:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011674:	432f      	orrs	r7, r5
 8011676:	8007      	strh	r7, [r0, #0]
 8011678:	3002      	adds	r0, #2
 801167a:	3402      	adds	r4, #2
 801167c:	e7ac      	b.n	80115d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801167e:	f8b9 3000 	ldrh.w	r3, [r9]
 8011682:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011686:	eba3 0308 	sub.w	r3, r3, r8
 801168a:	eba6 0608 	sub.w	r6, r6, r8
 801168e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011692:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011696:	440e      	add	r6, r1
 8011698:	e797      	b.n	80115ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801169a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801169e:	42a8      	cmp	r0, r5
 80116a0:	d262      	bcs.n	8011768 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80116a2:	9b00      	ldr	r3, [sp, #0]
 80116a4:	4631      	mov	r1, r6
 80116a6:	eb00 0b03 	add.w	fp, r0, r3
 80116aa:	4558      	cmp	r0, fp
 80116ac:	d24e      	bcs.n	801174c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80116ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116b2:	b12b      	cbz	r3, 80116c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80116b4:	2bff      	cmp	r3, #255	@ 0xff
 80116b6:	f8b4 e000 	ldrh.w	lr, [r4]
 80116ba:	d104      	bne.n	80116c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80116bc:	f8a0 e000 	strh.w	lr, [r0]
 80116c0:	3002      	adds	r0, #2
 80116c2:	3402      	adds	r4, #2
 80116c4:	e7f1      	b.n	80116aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80116c6:	8802      	ldrh	r2, [r0, #0]
 80116c8:	b29f      	uxth	r7, r3
 80116ca:	1216      	asrs	r6, r2, #8
 80116cc:	43db      	mvns	r3, r3
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80116d4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80116d8:	fb16 f603 	smulbb	r6, r6, r3
 80116dc:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80116e0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80116e4:	00d2      	lsls	r2, r2, #3
 80116e6:	fb0c 6c07 	mla	ip, ip, r7, r6
 80116ea:	b2d2      	uxtb	r2, r2
 80116ec:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80116f0:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80116f4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80116f8:	fb1a fa03 	smulbb	sl, sl, r3
 80116fc:	fa1f fc8c 	uxth.w	ip, ip
 8011700:	fb12 f303 	smulbb	r3, r2, r3
 8011704:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8011708:	fa5f fe8e 	uxtb.w	lr, lr
 801170c:	fb06 a607 	mla	r6, r6, r7, sl
 8011710:	f10c 0201 	add.w	r2, ip, #1
 8011714:	fb0e 3307 	mla	r3, lr, r7, r3
 8011718:	b2b6      	uxth	r6, r6
 801171a:	b29b      	uxth	r3, r3
 801171c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8011720:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8011724:	f106 0a01 	add.w	sl, r6, #1
 8011728:	f103 0c01 	add.w	ip, r3, #1
 801172c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8011730:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8011734:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8011738:	0976      	lsrs	r6, r6, #5
 801173a:	ea4c 0c02 	orr.w	ip, ip, r2
 801173e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8011742:	ea4c 0c06 	orr.w	ip, ip, r6
 8011746:	f8a0 c000 	strh.w	ip, [r0]
 801174a:	e7b9      	b.n	80116c0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801174c:	f8b9 3000 	ldrh.w	r3, [r9]
 8011750:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011754:	eba3 0308 	sub.w	r3, r3, r8
 8011758:	eba6 0608 	sub.w	r6, r6, r8
 801175c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011760:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011764:	440e      	add	r6, r1
 8011766:	e79a      	b.n	801169e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8011768:	4b03      	ldr	r3, [pc, #12]	@ (8011778 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801176a:	6818      	ldr	r0, [r3, #0]
 801176c:	6803      	ldr	r3, [r0, #0]
 801176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011770:	4798      	blx	r3
 8011772:	b007      	add	sp, #28
 8011774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011778:	20015438 	.word	0x20015438
 801177c:	20015432 	.word	0x20015432

08011780 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8011780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011784:	b089      	sub	sp, #36	@ 0x24
 8011786:	4607      	mov	r7, r0
 8011788:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801178c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801178e:	4688      	mov	r8, r1
 8011790:	4692      	mov	sl, r2
 8011792:	4699      	mov	r9, r3
 8011794:	2e00      	cmp	r6, #0
 8011796:	d048      	beq.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011798:	4608      	mov	r0, r1
 801179a:	f7fe fac3 	bl	800fd24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801179e:	4605      	mov	r5, r0
 80117a0:	4640      	mov	r0, r8
 80117a2:	f7fe faf3 	bl	800fd8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80117a6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80117aa:	4640      	mov	r0, r8
 80117ac:	f8ad a008 	strh.w	sl, [sp, #8]
 80117b0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80117b4:	f8ad 900a 	strh.w	r9, [sp, #10]
 80117b8:	f7fe fba6 	bl	800ff08 <_ZNK8touchgfx6Bitmap7getDataEv>
 80117bc:	4605      	mov	r5, r0
 80117be:	4640      	mov	r0, r8
 80117c0:	f7fe fbd2 	bl	800ff68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80117c4:	4682      	mov	sl, r0
 80117c6:	4640      	mov	r0, r8
 80117c8:	f7fe fc22 	bl	8010010 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80117cc:	2810      	cmp	r0, #16
 80117ce:	d82c      	bhi.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80117d0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80117d4:	00ba00ca 	.word	0x00ba00ca
 80117d8:	002b0011 	.word	0x002b0011
 80117dc:	002b002b 	.word	0x002b002b
 80117e0:	002b002b 	.word	0x002b002b
 80117e4:	002b002b 	.word	0x002b002b
 80117e8:	00c1002b 	.word	0x00c1002b
 80117ec:	002b002b 	.word	0x002b002b
 80117f0:	002b0180 	.word	0x002b0180
 80117f4:	0173      	.short	0x0173
 80117f6:	4bbc      	ldr	r3, [pc, #752]	@ (8011ae8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 80117f8:	6818      	ldr	r0, [r3, #0]
 80117fa:	6803      	ldr	r3, [r0, #0]
 80117fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117fe:	4798      	blx	r3
 8011800:	2eff      	cmp	r6, #255	@ 0xff
 8011802:	d101      	bne.n	8011808 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8011804:	0683      	lsls	r3, r0, #26
 8011806:	d506      	bpl.n	8011816 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8011808:	4633      	mov	r3, r6
 801180a:	4622      	mov	r2, r4
 801180c:	a902      	add	r1, sp, #8
 801180e:	4628      	mov	r0, r5
 8011810:	f7ff f8fc 	bl	8010a0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8011814:	e009      	b.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011816:	4640      	mov	r0, r8
 8011818:	f7fe fb3e 	bl	800fe98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801181c:	b940      	cbnz	r0, 8011830 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 801181e:	4623      	mov	r3, r4
 8011820:	aa02      	add	r2, sp, #8
 8011822:	4629      	mov	r1, r5
 8011824:	4638      	mov	r0, r7
 8011826:	f7ff f9d7 	bl	8010bd8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801182a:	b009      	add	sp, #36	@ 0x24
 801182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011830:	f10d 0918 	add.w	r9, sp, #24
 8011834:	4641      	mov	r1, r8
 8011836:	4648      	mov	r0, r9
 8011838:	f7fe fadc 	bl	800fdf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801183c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011840:	f10d 0810 	add.w	r8, sp, #16
 8011844:	e888 0003 	stmia.w	r8, {r0, r1}
 8011848:	4640      	mov	r0, r8
 801184a:	4621      	mov	r1, r4
 801184c:	f7f7 fe74 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 8011850:	4640      	mov	r0, r8
 8011852:	f7f7 feb4 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 8011856:	2800      	cmp	r0, #0
 8011858:	d1d6      	bne.n	8011808 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801185a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801185e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011862:	4293      	cmp	r3, r2
 8011864:	dd12      	ble.n	801188c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8011866:	1a9b      	subs	r3, r3, r2
 8011868:	f9b4 0000 	ldrsh.w	r0, [r4]
 801186c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011870:	f8ad 0018 	strh.w	r0, [sp, #24]
 8011874:	f8ad 201a 	strh.w	r2, [sp, #26]
 8011878:	f8ad 101c 	strh.w	r1, [sp, #28]
 801187c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011880:	464a      	mov	r2, r9
 8011882:	4633      	mov	r3, r6
 8011884:	a902      	add	r1, sp, #8
 8011886:	4628      	mov	r0, r5
 8011888:	f7ff f8c0 	bl	8010a0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801188c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011890:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011894:	4293      	cmp	r3, r2
 8011896:	dd12      	ble.n	80118be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8011898:	1a9b      	subs	r3, r3, r2
 801189a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801189e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80118a2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80118a6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80118aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80118ae:	f8ad 101e 	strh.w	r1, [sp, #30]
 80118b2:	23ff      	movs	r3, #255	@ 0xff
 80118b4:	464a      	mov	r2, r9
 80118b6:	a902      	add	r1, sp, #8
 80118b8:	4628      	mov	r0, r5
 80118ba:	f7ff f8a7 	bl	8010a0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80118be:	4643      	mov	r3, r8
 80118c0:	aa02      	add	r2, sp, #8
 80118c2:	4629      	mov	r1, r5
 80118c4:	4638      	mov	r0, r7
 80118c6:	f7ff f987 	bl	8010bd8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80118ca:	88a2      	ldrh	r2, [r4, #4]
 80118cc:	8823      	ldrh	r3, [r4, #0]
 80118ce:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80118d2:	4413      	add	r3, r2
 80118d4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80118d8:	440a      	add	r2, r1
 80118da:	b29b      	uxth	r3, r3
 80118dc:	b292      	uxth	r2, r2
 80118de:	b211      	sxth	r1, r2
 80118e0:	b218      	sxth	r0, r3
 80118e2:	4288      	cmp	r0, r1
 80118e4:	dd12      	ble.n	801190c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 80118e6:	1a9b      	subs	r3, r3, r2
 80118e8:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80118ec:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80118f0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80118f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80118f8:	f8ad 001e 	strh.w	r0, [sp, #30]
 80118fc:	23ff      	movs	r3, #255	@ 0xff
 80118fe:	464a      	mov	r2, r9
 8011900:	a902      	add	r1, sp, #8
 8011902:	4628      	mov	r0, r5
 8011904:	f8ad 601a 	strh.w	r6, [sp, #26]
 8011908:	f7ff f880 	bl	8010a0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801190c:	88e2      	ldrh	r2, [r4, #6]
 801190e:	8863      	ldrh	r3, [r4, #2]
 8011910:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8011914:	4413      	add	r3, r2
 8011916:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801191a:	440a      	add	r2, r1
 801191c:	b29b      	uxth	r3, r3
 801191e:	b292      	uxth	r2, r2
 8011920:	b211      	sxth	r1, r2
 8011922:	b218      	sxth	r0, r3
 8011924:	4288      	cmp	r0, r1
 8011926:	dd80      	ble.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011928:	1a9b      	subs	r3, r3, r2
 801192a:	f9b4 6000 	ldrsh.w	r6, [r4]
 801192e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011932:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011936:	f8ad 6018 	strh.w	r6, [sp, #24]
 801193a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801193e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011942:	23ff      	movs	r3, #255	@ 0xff
 8011944:	464a      	mov	r2, r9
 8011946:	e761      	b.n	801180c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8011948:	4633      	mov	r3, r6
 801194a:	4622      	mov	r2, r4
 801194c:	a902      	add	r1, sp, #8
 801194e:	4628      	mov	r0, r5
 8011950:	f7ff f9b2 	bl	8010cb8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8011954:	e769      	b.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011956:	e9cd 4600 	strd	r4, r6, [sp]
 801195a:	ab02      	add	r3, sp, #8
 801195c:	4652      	mov	r2, sl
 801195e:	4629      	mov	r1, r5
 8011960:	4638      	mov	r0, r7
 8011962:	f7ff fd89 	bl	8011478 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8011966:	e760      	b.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011968:	4640      	mov	r0, r8
 801196a:	f7fe fa95 	bl	800fe98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801196e:	b948      	cbnz	r0, 8011984 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	e9cd 6000 	strd	r6, r0, [sp]
 8011976:	aa02      	add	r2, sp, #8
 8011978:	68de      	ldr	r6, [r3, #12]
 801197a:	4629      	mov	r1, r5
 801197c:	4623      	mov	r3, r4
 801197e:	4638      	mov	r0, r7
 8011980:	47b0      	blx	r6
 8011982:	e752      	b.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011984:	f10d 0918 	add.w	r9, sp, #24
 8011988:	4641      	mov	r1, r8
 801198a:	4648      	mov	r0, r9
 801198c:	f7fe fa32 	bl	800fdf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011990:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011994:	f10d 0810 	add.w	r8, sp, #16
 8011998:	e888 0003 	stmia.w	r8, {r0, r1}
 801199c:	4640      	mov	r0, r8
 801199e:	4621      	mov	r1, r4
 80119a0:	f7f7 fdca 	bl	8009538 <_ZN8touchgfx4RectaNERKS0_>
 80119a4:	4640      	mov	r0, r8
 80119a6:	f7f7 fe0a 	bl	80095be <_ZNK8touchgfx4Rect7isEmptyEv>
 80119aa:	b138      	cbz	r0, 80119bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 80119ac:	9600      	str	r6, [sp, #0]
 80119ae:	4623      	mov	r3, r4
 80119b0:	aa02      	add	r2, sp, #8
 80119b2:	4651      	mov	r1, sl
 80119b4:	4628      	mov	r0, r5
 80119b6:	f7ff fdbd 	bl	8011534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80119ba:	e736      	b.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	e9cd 6000 	strd	r6, r0, [sp]
 80119c2:	aa02      	add	r2, sp, #8
 80119c4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80119c8:	4629      	mov	r1, r5
 80119ca:	4643      	mov	r3, r8
 80119cc:	4638      	mov	r0, r7
 80119ce:	47d8      	blx	fp
 80119d0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80119d4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80119d8:	4293      	cmp	r3, r2
 80119da:	dd13      	ble.n	8011a04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 80119dc:	f9b4 0000 	ldrsh.w	r0, [r4]
 80119e0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80119e4:	f8ad 0018 	strh.w	r0, [sp, #24]
 80119e8:	1a9b      	subs	r3, r3, r2
 80119ea:	f8ad 201a 	strh.w	r2, [sp, #26]
 80119ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80119f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80119f6:	9600      	str	r6, [sp, #0]
 80119f8:	464b      	mov	r3, r9
 80119fa:	aa02      	add	r2, sp, #8
 80119fc:	4651      	mov	r1, sl
 80119fe:	4628      	mov	r0, r5
 8011a00:	f7ff fd98 	bl	8011534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011a04:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8011a08:	f9b4 2000 	ldrsh.w	r2, [r4]
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	dd13      	ble.n	8011a38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8011a10:	1a9b      	subs	r3, r3, r2
 8011a12:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8011a16:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8011a1a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011a1e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011a22:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011a26:	f8ad 101e 	strh.w	r1, [sp, #30]
 8011a2a:	9600      	str	r6, [sp, #0]
 8011a2c:	464b      	mov	r3, r9
 8011a2e:	aa02      	add	r2, sp, #8
 8011a30:	4651      	mov	r1, sl
 8011a32:	4628      	mov	r0, r5
 8011a34:	f7ff fd7e 	bl	8011534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011a38:	88a2      	ldrh	r2, [r4, #4]
 8011a3a:	8823      	ldrh	r3, [r4, #0]
 8011a3c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8011a40:	4413      	add	r3, r2
 8011a42:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011a46:	440a      	add	r2, r1
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	b292      	uxth	r2, r2
 8011a4c:	b211      	sxth	r1, r2
 8011a4e:	b218      	sxth	r0, r3
 8011a50:	4288      	cmp	r0, r1
 8011a52:	dd13      	ble.n	8011a7c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8011a54:	1a9b      	subs	r3, r3, r2
 8011a56:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8011a5a:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8011a5e:	f8ad 1018 	strh.w	r1, [sp, #24]
 8011a62:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011a66:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011a6a:	9600      	str	r6, [sp, #0]
 8011a6c:	464b      	mov	r3, r9
 8011a6e:	aa02      	add	r2, sp, #8
 8011a70:	4651      	mov	r1, sl
 8011a72:	4628      	mov	r0, r5
 8011a74:	f8ad 701a 	strh.w	r7, [sp, #26]
 8011a78:	f7ff fd5c 	bl	8011534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8011a7c:	88e2      	ldrh	r2, [r4, #6]
 8011a7e:	8863      	ldrh	r3, [r4, #2]
 8011a80:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8011a84:	4413      	add	r3, r2
 8011a86:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011a8a:	440a      	add	r2, r1
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	b292      	uxth	r2, r2
 8011a90:	b211      	sxth	r1, r2
 8011a92:	b218      	sxth	r0, r3
 8011a94:	4288      	cmp	r0, r1
 8011a96:	f77f aec8 	ble.w	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011a9a:	f9b4 7000 	ldrsh.w	r7, [r4]
 8011a9e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011aa2:	f8ad 7018 	strh.w	r7, [sp, #24]
 8011aa6:	1a9b      	subs	r3, r3, r2
 8011aa8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011aac:	f8ad 101a 	strh.w	r1, [sp, #26]
 8011ab0:	f8ad 001c 	strh.w	r0, [sp, #28]
 8011ab4:	9600      	str	r6, [sp, #0]
 8011ab6:	464b      	mov	r3, r9
 8011ab8:	e77a      	b.n	80119b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8011aba:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	f43f aeb3 	beq.w	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011ac4:	6803      	ldr	r3, [r0, #0]
 8011ac6:	9600      	str	r6, [sp, #0]
 8011ac8:	68de      	ldr	r6, [r3, #12]
 8011aca:	4623      	mov	r3, r4
 8011acc:	aa02      	add	r2, sp, #8
 8011ace:	4629      	mov	r1, r5
 8011ad0:	47b0      	blx	r6
 8011ad2:	e6aa      	b.n	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011ad4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	f43f aea6 	beq.w	801182a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8011ade:	6803      	ldr	r3, [r0, #0]
 8011ae0:	9600      	str	r6, [sp, #0]
 8011ae2:	689e      	ldr	r6, [r3, #8]
 8011ae4:	e7f1      	b.n	8011aca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8011ae6:	bf00      	nop
 8011ae8:	20015438 	.word	0x20015438

08011aec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8011aec:	b180      	cbz	r0, 8011b10 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8011aee:	2903      	cmp	r1, #3
 8011af0:	d81c      	bhi.n	8011b2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8011af2:	e8df f001 	tbb	[pc, r1]
 8011af6:	1d02      	.short	0x1d02
 8011af8:	1f08      	.short	0x1f08
 8011afa:	4b10      	ldr	r3, [pc, #64]	@ (8011b3c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8011afc:	8818      	ldrh	r0, [r3, #0]
 8011afe:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011b02:	4240      	negs	r0, r0
 8011b04:	4770      	bx	lr
 8011b06:	4b0d      	ldr	r3, [pc, #52]	@ (8011b3c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8011b08:	8818      	ldrh	r0, [r3, #0]
 8011b0a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011b0e:	4770      	bx	lr
 8011b10:	2903      	cmp	r1, #3
 8011b12:	d80b      	bhi.n	8011b2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8011b14:	a301      	add	r3, pc, #4	@ (adr r3, 8011b1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8011b16:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011b1a:	bf00      	nop
 8011b1c:	08011b31 	.word	0x08011b31
 8011b20:	08011b07 	.word	0x08011b07
 8011b24:	08011b35 	.word	0x08011b35
 8011b28:	08011afb 	.word	0x08011afb
 8011b2c:	2000      	movs	r0, #0
 8011b2e:	4770      	bx	lr
 8011b30:	2001      	movs	r0, #1
 8011b32:	4770      	bx	lr
 8011b34:	f04f 30ff 	mov.w	r0, #4294967295
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	20015432 	.word	0x20015432

08011b40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8011b40:	b180      	cbz	r0, 8011b64 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8011b42:	2903      	cmp	r1, #3
 8011b44:	d81c      	bhi.n	8011b80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8011b46:	e8df f001 	tbb	[pc, r1]
 8011b4a:	021d      	.short	0x021d
 8011b4c:	071f      	.short	0x071f
 8011b4e:	4b10      	ldr	r3, [pc, #64]	@ (8011b90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8011b50:	8818      	ldrh	r0, [r3, #0]
 8011b52:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011b56:	4770      	bx	lr
 8011b58:	4b0d      	ldr	r3, [pc, #52]	@ (8011b90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8011b5a:	8818      	ldrh	r0, [r3, #0]
 8011b5c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8011b60:	4240      	negs	r0, r0
 8011b62:	4770      	bx	lr
 8011b64:	2903      	cmp	r1, #3
 8011b66:	d80b      	bhi.n	8011b80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8011b68:	a301      	add	r3, pc, #4	@ (adr r3, 8011b70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8011b6a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011b6e:	bf00      	nop
 8011b70:	08011b4f 	.word	0x08011b4f
 8011b74:	08011b89 	.word	0x08011b89
 8011b78:	08011b59 	.word	0x08011b59
 8011b7c:	08011b85 	.word	0x08011b85
 8011b80:	2000      	movs	r0, #0
 8011b82:	4770      	bx	lr
 8011b84:	2001      	movs	r0, #1
 8011b86:	4770      	bx	lr
 8011b88:	f04f 30ff 	mov.w	r0, #4294967295
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop
 8011b90:	20015432 	.word	0x20015432

08011b94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8011b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b98:	b099      	sub	sp, #100	@ 0x64
 8011b9a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011b9c:	a914      	add	r1, sp, #80	@ 0x50
 8011b9e:	e881 000c 	stmia.w	r1, {r2, r3}
 8011ba2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8011ba6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8011baa:	f891 900d 	ldrb.w	r9, [r1, #13]
 8011bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bb0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8011bb4:	9310      	str	r3, [sp, #64]	@ 0x40
 8011bb6:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8011bba:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011bbe:	930c      	str	r3, [sp, #48]	@ 0x30
 8011bc0:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 8011bc4:	798f      	ldrb	r7, [r1, #6]
 8011bc6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8011bca:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8011bce:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8011bd2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8011bd6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8011bda:	431f      	orrs	r7, r3
 8011bdc:	f000 8195 	beq.w	8011f0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011be0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8011be4:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8011be8:	f891 9007 	ldrb.w	r9, [r1, #7]
 8011bec:	ea59 0903 	orrs.w	r9, r9, r3
 8011bf0:	f000 818b 	beq.w	8011f0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011bf4:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	2d00      	cmp	r5, #0
 8011bfc:	f000 812e 	beq.w	8011e5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8011c00:	1aed      	subs	r5, r5, r3
 8011c02:	b2ad      	uxth	r5, r5
 8011c04:	042b      	lsls	r3, r5, #16
 8011c06:	d502      	bpl.n	8011c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8011c08:	1b64      	subs	r4, r4, r5
 8011c0a:	b224      	sxth	r4, r4
 8011c0c:	2500      	movs	r5, #0
 8011c0e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011c12:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8011c16:	428c      	cmp	r4, r1
 8011c18:	b28b      	uxth	r3, r1
 8011c1a:	bfbf      	itttt	lt
 8011c1c:	18ed      	addlt	r5, r5, r3
 8011c1e:	1b2c      	sublt	r4, r5, r4
 8011c20:	b2a5      	uxthlt	r5, r4
 8011c22:	460c      	movlt	r4, r1
 8011c24:	8891      	ldrh	r1, [r2, #4]
 8011c26:	440b      	add	r3, r1
 8011c28:	b21b      	sxth	r3, r3
 8011c2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011c2c:	88d3      	ldrh	r3, [r2, #6]
 8011c2e:	8852      	ldrh	r2, [r2, #2]
 8011c30:	4413      	add	r3, r2
 8011c32:	b21b      	sxth	r3, r3
 8011c34:	930d      	str	r3, [sp, #52]	@ 0x34
 8011c36:	4bbe      	ldr	r3, [pc, #760]	@ (8011f30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8011c38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c3a:	f893 b000 	ldrb.w	fp, [r3]
 8011c3e:	f10b 3cff 	add.w	ip, fp, #4294967295
 8011c42:	f1dc 0300 	rsbs	r3, ip, #0
 8011c46:	eb43 030c 	adc.w	r3, r3, ip
 8011c4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8011c4c:	4621      	mov	r1, r4
 8011c4e:	4653      	mov	r3, sl
 8011c50:	a814      	add	r0, sp, #80	@ 0x50
 8011c52:	f7fa fc64 	bl	800c51e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8011c56:	4621      	mov	r1, r4
 8011c58:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8011c5c:	4653      	mov	r3, sl
 8011c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c60:	a814      	add	r0, sp, #80	@ 0x50
 8011c62:	f7fa fc79 	bl	800c558 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8011c66:	a918      	add	r1, sp, #96	@ 0x60
 8011c68:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8011c6c:	a817      	add	r0, sp, #92	@ 0x5c
 8011c6e:	f7fa fd9f 	bl	800c7b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8011c72:	f1ba 0f00 	cmp.w	sl, #0
 8011c76:	f040 80f4 	bne.w	8011e62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8011c7a:	f1bb 0f01 	cmp.w	fp, #1
 8011c7e:	f040 80f8 	bne.w	8011e72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8011c82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f040 8145 	bne.w	8011f14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8011c8a:	b2ba      	uxth	r2, r7
 8011c8c:	b905      	cbnz	r5, 8011c90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8011c8e:	b16e      	cbz	r6, 8011cac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8011c90:	fb06 5302 	mla	r3, r6, r2, r5
 8011c94:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8011c96:	fb08 f303 	mul.w	r3, r8, r3
 8011c9a:	4631      	mov	r1, r6
 8011c9c:	f003 0607 	and.w	r6, r3, #7
 8011ca0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8011ca4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011ca6:	eba9 0301 	sub.w	r3, r9, r1
 8011caa:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cac:	4651      	mov	r1, sl
 8011cae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011cb0:	f7ff ff1c 	bl	8011aec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8011cb4:	4681      	mov	r9, r0
 8011cb6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011cb8:	f7ff ff42 	bl	8011b40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8011cbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011cbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011cc0:	eba3 0a01 	sub.w	sl, r3, r1
 8011cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cc6:	459a      	cmp	sl, r3
 8011cc8:	bfa8      	it	ge
 8011cca:	469a      	movge	sl, r3
 8011ccc:	f1ba 0f00 	cmp.w	sl, #0
 8011cd0:	4683      	mov	fp, r0
 8011cd2:	f340 811a 	ble.w	8011f0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011cd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cd8:	1b64      	subs	r4, r4, r5
 8011cda:	1b1c      	subs	r4, r3, r4
 8011cdc:	42bc      	cmp	r4, r7
 8011cde:	bfd4      	ite	le
 8011ce0:	ebc5 0504 	rsble	r5, r5, r4
 8011ce4:	ebc5 0507 	rsbgt	r5, r5, r7
 8011ce8:	2d00      	cmp	r5, #0
 8011cea:	f340 810e 	ble.w	8011f0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011cee:	1b52      	subs	r2, r2, r5
 8011cf0:	fb08 f302 	mul.w	r3, r8, r2
 8011cf4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	f040 8116 	bne.w	8011f2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8011cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8011f34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8011d00:	6818      	ldr	r0, [r3, #0]
 8011d02:	6803      	ldr	r3, [r0, #0]
 8011d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d06:	4798      	blx	r3
 8011d08:	2301      	movs	r3, #1
 8011d0a:	fa03 f308 	lsl.w	r3, r3, r8
 8011d0e:	4a8a      	ldr	r2, [pc, #552]	@ (8011f38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8011d10:	3b01      	subs	r3, #1
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	8811      	ldrh	r1, [r2, #0]
 8011d16:	930e      	str	r3, [sp, #56]	@ 0x38
 8011d18:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8011d1c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8011d20:	fb01 2303 	mla	r3, r1, r3, r2
 8011d24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011d28:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d2a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011d2c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011d30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011d32:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011d34:	0a19      	lsrs	r1, r3, #8
 8011d36:	b2cb      	uxtb	r3, r1
 8011d38:	9312      	str	r3, [sp, #72]	@ 0x48
 8011d3a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8011d40:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011d42:	095a      	lsrs	r2, r3, #5
 8011d44:	4b7d      	ldr	r3, [pc, #500]	@ (8011f3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8011d46:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8011d4a:	400b      	ands	r3, r1
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8011d50:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8011d54:	4313      	orrs	r3, r2
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d5a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011d5c:	781a      	ldrb	r2, [r3, #0]
 8011d5e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8011d62:	4132      	asrs	r2, r6
 8011d64:	fb05 b919 	mls	r9, r5, r9, fp
 8011d68:	fb03 fb05 	mul.w	fp, r3, r5
 8011d6c:	b2d2      	uxtb	r2, r2
 8011d6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011d70:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8011d74:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8011d78:	f0c0 80f5 	bcc.w	8011f66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8011d7c:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8011d80:	46ae      	mov	lr, r5
 8011d82:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8011d86:	f0c0 80dd 	bcc.w	8011f44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8011d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d8c:	4013      	ands	r3, r2
 8011d8e:	d055      	beq.n	8011e3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8011d90:	20ff      	movs	r0, #255	@ 0xff
 8011d92:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011d94:	fb90 f1f1 	sdiv	r1, r0, r1
 8011d98:	434b      	muls	r3, r1
 8011d9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8011d9c:	dd03      	ble.n	8011da6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8011d9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011da0:	4281      	cmp	r1, r0
 8011da2:	f000 80cd 	beq.w	8011f40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8011da6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011da8:	f8bc 4000 	ldrh.w	r4, [ip]
 8011dac:	fb11 f303 	smulbb	r3, r1, r3
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	1c59      	adds	r1, r3, #1
 8011db4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8011db8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011dbc:	b29f      	uxth	r7, r3
 8011dbe:	43db      	mvns	r3, r3
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011dc6:	1220      	asrs	r0, r4, #8
 8011dc8:	fb13 f907 	smulbb	r9, r3, r7
 8011dcc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8011dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd2:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8011dd6:	fb00 9003 	mla	r0, r0, r3, r9
 8011dda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011ddc:	10e1      	asrs	r1, r4, #3
 8011dde:	fb13 f907 	smulbb	r9, r3, r7
 8011de2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8011de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011de8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8011dec:	fb01 9103 	mla	r1, r1, r3, r9
 8011df0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011df2:	00e4      	lsls	r4, r4, #3
 8011df4:	fb13 f707 	smulbb	r7, r3, r7
 8011df8:	b2e4      	uxtb	r4, r4
 8011dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dfc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8011e00:	fb04 7403 	mla	r4, r4, r3, r7
 8011e04:	b280      	uxth	r0, r0
 8011e06:	b2a4      	uxth	r4, r4
 8011e08:	1c43      	adds	r3, r0, #1
 8011e0a:	f104 0901 	add.w	r9, r4, #1
 8011e0e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8011e12:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8011e16:	b289      	uxth	r1, r1
 8011e18:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8011e1c:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8011e20:	ea49 0000 	orr.w	r0, r9, r0
 8011e24:	f101 0901 	add.w	r9, r1, #1
 8011e28:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8011e2c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8011e30:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8011e34:	ea40 0009 	orr.w	r0, r0, r9
 8011e38:	f8ac 0000 	strh.w	r0, [ip]
 8011e3c:	4446      	add	r6, r8
 8011e3e:	b2b6      	uxth	r6, r6
 8011e40:	2e07      	cmp	r6, #7
 8011e42:	bf81      	itttt	hi
 8011e44:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8011e46:	785a      	ldrbhi	r2, [r3, #1]
 8011e48:	3301      	addhi	r3, #1
 8011e4a:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8011e4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e4e:	bf9a      	itte	ls
 8011e50:	fa42 f208 	asrls.w	r2, r2, r8
 8011e54:	b2d2      	uxtbls	r2, r2
 8011e56:	2600      	movhi	r6, #0
 8011e58:	449c      	add	ip, r3
 8011e5a:	e792      	b.n	8011d82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8011e5c:	441c      	add	r4, r3
 8011e5e:	b224      	sxth	r4, r4
 8011e60:	e6d5      	b.n	8011c0e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8011e62:	f1ba 0f01 	cmp.w	sl, #1
 8011e66:	f47f af0c 	bne.w	8011c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011e6a:	f1bb 0f01 	cmp.w	fp, #1
 8011e6e:	f47f af08 	bne.w	8011c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011e72:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 8011f34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8011e76:	f8db 0000 	ldr.w	r0, [fp]
 8011e7a:	6803      	ldr	r3, [r0, #0]
 8011e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e7e:	4798      	blx	r3
 8011e80:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8011e84:	465a      	mov	r2, fp
 8011e86:	d006      	beq.n	8011e96 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8011e88:	f1b8 0f04 	cmp.w	r8, #4
 8011e8c:	d140      	bne.n	8011f10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8011e8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e90:	3300      	adds	r3, #0
 8011e92:	bf18      	it	ne
 8011e94:	2301      	movne	r3, #1
 8011e96:	0580      	lsls	r0, r0, #22
 8011e98:	d56e      	bpl.n	8011f78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8011e9a:	f1b8 0f08 	cmp.w	r8, #8
 8011e9e:	d16b      	bne.n	8011f78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	bf0c      	ite	eq
 8011ea4:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8011ea8:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8011eac:	2d00      	cmp	r5, #0
 8011eae:	f47f aee8 	bne.w	8011c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011eb2:	2e00      	cmp	r6, #0
 8011eb4:	f47f aee5 	bne.w	8011c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011eb8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8011eba:	19e3      	adds	r3, r4, r7
 8011ebc:	4283      	cmp	r3, r0
 8011ebe:	f73f aee0 	bgt.w	8011c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ec4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011ec6:	444b      	add	r3, r9
 8011ec8:	4283      	cmp	r3, r0
 8011eca:	f73f aeda 	bgt.w	8011c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011ece:	6810      	ldr	r0, [r2, #0]
 8011ed0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8011ed4:	6804      	ldr	r4, [r0, #0]
 8011ed6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8011eda:	b2bf      	uxth	r7, r7
 8011edc:	f1b8 0f08 	cmp.w	r8, #8
 8011ee0:	f04f 0500 	mov.w	r5, #0
 8011ee4:	bf18      	it	ne
 8011ee6:	3701      	addne	r7, #1
 8011ee8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8011eec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011eee:	9104      	str	r1, [sp, #16]
 8011ef0:	bf18      	it	ne
 8011ef2:	f027 0701 	bicne.w	r7, r7, #1
 8011ef6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8011ef8:	bf18      	it	ne
 8011efa:	b2bf      	uxthne	r7, r7
 8011efc:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8011f00:	e9cd 7900 	strd	r7, r9, [sp]
 8011f04:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8011f06:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8011f08:	47a0      	blx	r4
 8011f0a:	b019      	add	sp, #100	@ 0x64
 8011f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f10:	2300      	movs	r3, #0
 8011f12:	e7c0      	b.n	8011e96 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8011f14:	2208      	movs	r2, #8
 8011f16:	fb92 f3f8 	sdiv	r3, r2, r8
 8011f1a:	1e5a      	subs	r2, r3, #1
 8011f1c:	443a      	add	r2, r7
 8011f1e:	fb92 f2f3 	sdiv	r2, r2, r3
 8011f22:	fb12 f203 	smulbb	r2, r2, r3
 8011f26:	b292      	uxth	r2, r2
 8011f28:	e6b0      	b.n	8011c8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8011f2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011f2c:	e6ec      	b.n	8011d08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8011f2e:	bf00      	nop
 8011f30:	20015430 	.word	0x20015430
 8011f34:	20015438 	.word	0x20015438
 8011f38:	20015432 	.word	0x20015432
 8011f3c:	00fff800 	.word	0x00fff800
 8011f40:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011f42:	e779      	b.n	8011e38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8011f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f46:	b153      	cbz	r3, 8011f5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8011f48:	441e      	add	r6, r3
 8011f4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011f4c:	b2b6      	uxth	r6, r6
 8011f4e:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8011f52:	f006 0607 	and.w	r6, r6, #7
 8011f56:	781a      	ldrb	r2, [r3, #0]
 8011f58:	9328      	str	r3, [sp, #160]	@ 0xa0
 8011f5a:	4132      	asrs	r2, r6
 8011f5c:	b2d2      	uxtb	r2, r2
 8011f5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f60:	445b      	add	r3, fp
 8011f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f64:	e706      	b.n	8011d74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8011f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d1ce      	bne.n	8011f0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011f6c:	4b05      	ldr	r3, [pc, #20]	@ (8011f84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8011f6e:	6818      	ldr	r0, [r3, #0]
 8011f70:	6803      	ldr	r3, [r0, #0]
 8011f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f74:	4798      	blx	r3
 8011f76:	e7c8      	b.n	8011f0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	f43f ae82 	beq.w	8011c82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8011f7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f82:	e793      	b.n	8011eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8011f84:	20015438 	.word	0x20015438

08011f88 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8011f88:	b538      	push	{r3, r4, r5, lr}
 8011f8a:	4c0b      	ldr	r4, [pc, #44]	@ (8011fb8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8011f8c:	7823      	ldrb	r3, [r4, #0]
 8011f8e:	f3bf 8f5b 	dmb	ish
 8011f92:	07db      	lsls	r3, r3, #31
 8011f94:	4605      	mov	r5, r0
 8011f96:	d40b      	bmi.n	8011fb0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8011f98:	4620      	mov	r0, r4
 8011f9a:	f000 fd43 	bl	8012a24 <__cxa_guard_acquire>
 8011f9e:	b138      	cbz	r0, 8011fb0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f000 fd4b 	bl	8012a3c <__cxa_guard_release>
 8011fa6:	4a05      	ldr	r2, [pc, #20]	@ (8011fbc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8011fa8:	4905      	ldr	r1, [pc, #20]	@ (8011fc0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8011faa:	4806      	ldr	r0, [pc, #24]	@ (8011fc4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8011fac:	f000 fd33 	bl	8012a16 <__aeabi_atexit>
 8011fb0:	4b04      	ldr	r3, [pc, #16]	@ (8011fc4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8011fb2:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8011fb4:	bd38      	pop	{r3, r4, r5, pc}
 8011fb6:	bf00      	nop
 8011fb8:	200154c4 	.word	0x200154c4
 8011fbc:	20000000 	.word	0x20000000
 8011fc0:	08010241 	.word	0x08010241
 8011fc4:	20000088 	.word	0x20000088

08011fc8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8011fc8:	b570      	push	{r4, r5, r6, lr}
 8011fca:	1208      	asrs	r0, r1, #8
 8011fcc:	b29e      	uxth	r6, r3
 8011fce:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011fd2:	1213      	asrs	r3, r2, #8
 8011fd4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8011fd8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8011fdc:	fb13 f305 	smulbb	r3, r3, r5
 8011fe0:	fb10 f006 	smulbb	r0, r0, r6
 8011fe4:	4418      	add	r0, r3
 8011fe6:	10cc      	asrs	r4, r1, #3
 8011fe8:	10d3      	asrs	r3, r2, #3
 8011fea:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8011fee:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8011ff2:	fb13 f305 	smulbb	r3, r3, r5
 8011ff6:	fb14 f406 	smulbb	r4, r4, r6
 8011ffa:	00c9      	lsls	r1, r1, #3
 8011ffc:	00d2      	lsls	r2, r2, #3
 8011ffe:	441c      	add	r4, r3
 8012000:	b2d2      	uxtb	r2, r2
 8012002:	b2cb      	uxtb	r3, r1
 8012004:	fb12 f205 	smulbb	r2, r2, r5
 8012008:	b280      	uxth	r0, r0
 801200a:	fb13 f306 	smulbb	r3, r3, r6
 801200e:	4413      	add	r3, r2
 8012010:	1c42      	adds	r2, r0, #1
 8012012:	b29b      	uxth	r3, r3
 8012014:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8012018:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 801201c:	1c58      	adds	r0, r3, #1
 801201e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012022:	b2a4      	uxth	r4, r4
 8012024:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012028:	4310      	orrs	r0, r2
 801202a:	1c62      	adds	r2, r4, #1
 801202c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8012030:	0964      	lsrs	r4, r4, #5
 8012032:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8012036:	4320      	orrs	r0, r4
 8012038:	bd70      	pop	{r4, r5, r6, pc}
	...

0801203c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801203c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012040:	b08f      	sub	sp, #60	@ 0x3c
 8012042:	461c      	mov	r4, r3
 8012044:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8012048:	9004      	str	r0, [sp, #16]
 801204a:	460d      	mov	r5, r1
 801204c:	4616      	mov	r6, r2
 801204e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012050:	2f00      	cmp	r7, #0
 8012052:	f000 80f6 	beq.w	8012242 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8012056:	6820      	ldr	r0, [r4, #0]
 8012058:	6861      	ldr	r1, [r4, #4]
 801205a:	aa0a      	add	r2, sp, #40	@ 0x28
 801205c:	c203      	stmia	r2!, {r0, r1}
 801205e:	6818      	ldr	r0, [r3, #0]
 8012060:	6859      	ldr	r1, [r3, #4]
 8012062:	aa0c      	add	r2, sp, #48	@ 0x30
 8012064:	c203      	stmia	r2!, {r0, r1}
 8012066:	a80a      	add	r0, sp, #40	@ 0x28
 8012068:	f7fa fbe4 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801206c:	4621      	mov	r1, r4
 801206e:	a80c      	add	r0, sp, #48	@ 0x30
 8012070:	f7fa fc08 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012074:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8012078:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 801207c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8012080:	f002 0301 	and.w	r3, r2, #1
 8012084:	9306      	str	r3, [sp, #24]
 8012086:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801208a:	f003 0101 	and.w	r1, r3, #1
 801208e:	9105      	str	r1, [sp, #20]
 8012090:	9805      	ldr	r0, [sp, #20]
 8012092:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8012096:	4403      	add	r3, r0
 8012098:	fb01 2303 	mla	r3, r1, r3, r2
 801209c:	f04f 0802 	mov.w	r8, #2
 80120a0:	fb93 f3f8 	sdiv	r3, r3, r8
 80120a4:	441d      	add	r5, r3
 80120a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80120aa:	441a      	add	r2, r3
 80120ac:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80120b0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80120b4:	4419      	add	r1, r3
 80120b6:	4b64      	ldr	r3, [pc, #400]	@ (8012248 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80120b8:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80120bc:	6818      	ldr	r0, [r3, #0]
 80120be:	6803      	ldr	r3, [r0, #0]
 80120c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120c2:	4798      	blx	r3
 80120c4:	4a61      	ldr	r2, [pc, #388]	@ (801224c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 80120c6:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80120ca:	8813      	ldrh	r3, [r2, #0]
 80120cc:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 80120d0:	2fff      	cmp	r7, #255	@ 0xff
 80120d2:	fb03 a404 	mla	r4, r3, r4, sl
 80120d6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80120da:	f106 0604 	add.w	r6, r6, #4
 80120de:	4611      	mov	r1, r2
 80120e0:	fb03 fb0b 	mul.w	fp, r3, fp
 80120e4:	d06b      	beq.n	80121be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 80120e6:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 80120ea:	9303      	str	r3, [sp, #12]
 80120ec:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 80120f0:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80120f4:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80120f8:	9b07      	ldr	r3, [sp, #28]
 80120fa:	42a3      	cmp	r3, r4
 80120fc:	f240 809c 	bls.w	8012238 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8012100:	9b06      	ldr	r3, [sp, #24]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d039      	beq.n	801217a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8012106:	782b      	ldrb	r3, [r5, #0]
 8012108:	8822      	ldrh	r2, [r4, #0]
 801210a:	9804      	ldr	r0, [sp, #16]
 801210c:	f003 030f 	and.w	r3, r3, #15
 8012110:	f105 0801 	add.w	r8, r5, #1
 8012114:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012118:	9b03      	ldr	r3, [sp, #12]
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	463b      	mov	r3, r7
 801211e:	f7ff ff53 	bl	8011fc8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012122:	f824 0b02 	strh.w	r0, [r4], #2
 8012126:	f109 3bff 	add.w	fp, r9, #4294967295
 801212a:	f1bb 0f01 	cmp.w	fp, #1
 801212e:	46a2      	mov	sl, r4
 8012130:	f104 0404 	add.w	r4, r4, #4
 8012134:	dd24      	ble.n	8012180 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 8012136:	f898 3000 	ldrb.w	r3, [r8]
 801213a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 801213e:	9804      	ldr	r0, [sp, #16]
 8012140:	091b      	lsrs	r3, r3, #4
 8012142:	f1ab 0b02 	sub.w	fp, fp, #2
 8012146:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801214a:	9b03      	ldr	r3, [sp, #12]
 801214c:	9300      	str	r3, [sp, #0]
 801214e:	463b      	mov	r3, r7
 8012150:	f7ff ff3a 	bl	8011fc8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012154:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012158:	f818 3b01 	ldrb.w	r3, [r8], #1
 801215c:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012160:	9804      	ldr	r0, [sp, #16]
 8012162:	f003 030f 	and.w	r3, r3, #15
 8012166:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801216a:	9b03      	ldr	r3, [sp, #12]
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	463b      	mov	r3, r7
 8012170:	f7ff ff2a 	bl	8011fc8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012174:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012178:	e7d7      	b.n	801212a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 801217a:	46a8      	mov	r8, r5
 801217c:	46cb      	mov	fp, r9
 801217e:	e7d4      	b.n	801212a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012180:	d10e      	bne.n	80121a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8012182:	f898 3000 	ldrb.w	r3, [r8]
 8012186:	f8ba 2000 	ldrh.w	r2, [sl]
 801218a:	9804      	ldr	r0, [sp, #16]
 801218c:	091b      	lsrs	r3, r3, #4
 801218e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012192:	9b03      	ldr	r3, [sp, #12]
 8012194:	9300      	str	r3, [sp, #0]
 8012196:	463b      	mov	r3, r7
 8012198:	f7ff ff16 	bl	8011fc8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 801219c:	f82a 0b02 	strh.w	r0, [sl], #2
 80121a0:	9b08      	ldr	r3, [sp, #32]
 80121a2:	9a05      	ldr	r2, [sp, #20]
 80121a4:	881c      	ldrh	r4, [r3, #0]
 80121a6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80121aa:	eba4 0409 	sub.w	r4, r4, r9
 80121ae:	4413      	add	r3, r2
 80121b0:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 80121b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80121ba:	441d      	add	r5, r3
 80121bc:	e79c      	b.n	80120f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 80121be:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 80121c2:	45a3      	cmp	fp, r4
 80121c4:	d938      	bls.n	8012238 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 80121c6:	9b06      	ldr	r3, [sp, #24]
 80121c8:	b1f3      	cbz	r3, 8012208 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 80121ca:	782b      	ldrb	r3, [r5, #0]
 80121cc:	f003 030f 	and.w	r3, r3, #15
 80121d0:	1c6a      	adds	r2, r5, #1
 80121d2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80121d6:	8023      	strh	r3, [r4, #0]
 80121d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80121dc:	3402      	adds	r4, #2
 80121de:	2801      	cmp	r0, #1
 80121e0:	4623      	mov	r3, r4
 80121e2:	f104 0404 	add.w	r4, r4, #4
 80121e6:	dd12      	ble.n	801220e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 80121e8:	7813      	ldrb	r3, [r2, #0]
 80121ea:	091b      	lsrs	r3, r3, #4
 80121ec:	3802      	subs	r0, #2
 80121ee:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80121f2:	f824 3c04 	strh.w	r3, [r4, #-4]
 80121f6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80121fa:	f003 030f 	and.w	r3, r3, #15
 80121fe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012202:	f824 3c02 	strh.w	r3, [r4, #-2]
 8012206:	e7ea      	b.n	80121de <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8012208:	462a      	mov	r2, r5
 801220a:	4648      	mov	r0, r9
 801220c:	e7e7      	b.n	80121de <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 801220e:	d106      	bne.n	801221e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8012210:	7812      	ldrb	r2, [r2, #0]
 8012212:	0912      	lsrs	r2, r2, #4
 8012214:	3302      	adds	r3, #2
 8012216:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801221a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801221e:	880c      	ldrh	r4, [r1, #0]
 8012220:	9a05      	ldr	r2, [sp, #20]
 8012222:	eba4 0409 	sub.w	r4, r4, r9
 8012226:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801222a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801222e:	4413      	add	r3, r2
 8012230:	fb93 f3f8 	sdiv	r3, r3, r8
 8012234:	441d      	add	r5, r3
 8012236:	e7c4      	b.n	80121c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 8012238:	4b03      	ldr	r3, [pc, #12]	@ (8012248 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 801223a:	6818      	ldr	r0, [r3, #0]
 801223c:	6803      	ldr	r3, [r0, #0]
 801223e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012240:	4798      	blx	r3
 8012242:	b00f      	add	sp, #60	@ 0x3c
 8012244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012248:	20015438 	.word	0x20015438
 801224c:	20015432 	.word	0x20015432

08012250 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8012250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012252:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8012256:	2dff      	cmp	r5, #255	@ 0xff
 8012258:	ea4f 2711 	mov.w	r7, r1, lsr #8
 801225c:	d10c      	bne.n	8012278 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 801225e:	2bff      	cmp	r3, #255	@ 0xff
 8012260:	d10a      	bne.n	8012278 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012262:	4b25      	ldr	r3, [pc, #148]	@ (80122f8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8012264:	0948      	lsrs	r0, r1, #5
 8012266:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801226a:	403b      	ands	r3, r7
 801226c:	4318      	orrs	r0, r3
 801226e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8012272:	4308      	orrs	r0, r1
 8012274:	b280      	uxth	r0, r0
 8012276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012278:	fb15 f503 	smulbb	r5, r5, r3
 801227c:	b2ab      	uxth	r3, r5
 801227e:	1c5d      	adds	r5, r3, #1
 8012280:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8012284:	1214      	asrs	r4, r2, #8
 8012286:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801228a:	fa1f fc85 	uxth.w	ip, r5
 801228e:	10d6      	asrs	r6, r2, #3
 8012290:	00d0      	lsls	r0, r2, #3
 8012292:	43ed      	mvns	r5, r5
 8012294:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012298:	f3c1 4207 	ubfx	r2, r1, #16, #8
 801229c:	b2eb      	uxtb	r3, r5
 801229e:	b2c0      	uxtb	r0, r0
 80122a0:	fb12 f20c 	smulbb	r2, r2, ip
 80122a4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80122a8:	fb04 2403 	mla	r4, r4, r3, r2
 80122ac:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 80122b0:	b2c8      	uxtb	r0, r1
 80122b2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80122b6:	b2fd      	uxtb	r5, r7
 80122b8:	fb10 f00c 	smulbb	r0, r0, ip
 80122bc:	b2a4      	uxth	r4, r4
 80122be:	fb02 0003 	mla	r0, r2, r3, r0
 80122c2:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80122c6:	fb15 f50c 	smulbb	r5, r5, ip
 80122ca:	fb06 5503 	mla	r5, r6, r3, r5
 80122ce:	b283      	uxth	r3, r0
 80122d0:	1c60      	adds	r0, r4, #1
 80122d2:	b2ad      	uxth	r5, r5
 80122d4:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80122d8:	1c58      	adds	r0, r3, #1
 80122da:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80122de:	1c6b      	adds	r3, r5, #1
 80122e0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80122e4:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80122e8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80122ec:	096d      	lsrs	r5, r5, #5
 80122ee:	4320      	orrs	r0, r4
 80122f0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80122f4:	4328      	orrs	r0, r5
 80122f6:	e7be      	b.n	8012276 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80122f8:	00fff800 	.word	0x00fff800

080122fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	461c      	mov	r4, r3
 8012302:	b08d      	sub	sp, #52	@ 0x34
 8012304:	460d      	mov	r5, r1
 8012306:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012308:	6861      	ldr	r1, [r4, #4]
 801230a:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 801230e:	4680      	mov	r8, r0
 8012310:	6820      	ldr	r0, [r4, #0]
 8012312:	4616      	mov	r6, r2
 8012314:	aa08      	add	r2, sp, #32
 8012316:	c203      	stmia	r2!, {r0, r1}
 8012318:	6818      	ldr	r0, [r3, #0]
 801231a:	6859      	ldr	r1, [r3, #4]
 801231c:	aa0a      	add	r2, sp, #40	@ 0x28
 801231e:	c203      	stmia	r2!, {r0, r1}
 8012320:	a808      	add	r0, sp, #32
 8012322:	f7fa fa87 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012326:	4621      	mov	r1, r4
 8012328:	a80a      	add	r0, sp, #40	@ 0x28
 801232a:	f7fa faab 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801232e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8012332:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8012336:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 801233a:	f002 0301 	and.w	r3, r2, #1
 801233e:	9303      	str	r3, [sp, #12]
 8012340:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012344:	f003 0101 	and.w	r1, r3, #1
 8012348:	9102      	str	r1, [sp, #8]
 801234a:	9802      	ldr	r0, [sp, #8]
 801234c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012350:	4403      	add	r3, r0
 8012352:	fb01 2303 	mla	r3, r1, r3, r2
 8012356:	f04f 0a02 	mov.w	sl, #2
 801235a:	fb93 f3fa 	sdiv	r3, r3, sl
 801235e:	441d      	add	r5, r3
 8012360:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012364:	441a      	add	r2, r3
 8012366:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801236a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801236e:	4a3f      	ldr	r2, [pc, #252]	@ (801246c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8012370:	9205      	str	r2, [sp, #20]
 8012372:	4419      	add	r1, r3
 8012374:	6810      	ldr	r0, [r2, #0]
 8012376:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 801237a:	6803      	ldr	r3, [r0, #0]
 801237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801237e:	4798      	blx	r3
 8012380:	4b3b      	ldr	r3, [pc, #236]	@ (8012470 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8012382:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8012386:	8819      	ldrh	r1, [r3, #0]
 8012388:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 801238c:	fb01 c404 	mla	r4, r1, r4, ip
 8012390:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012394:	434f      	muls	r7, r1
 8012396:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 801239a:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 801239e:	3604      	adds	r6, #4
 80123a0:	9204      	str	r2, [sp, #16]
 80123a2:	9b04      	ldr	r3, [sp, #16]
 80123a4:	429c      	cmp	r4, r3
 80123a6:	d258      	bcs.n	801245a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 80123a8:	9b03      	ldr	r3, [sp, #12]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d034      	beq.n	8012418 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80123ae:	782b      	ldrb	r3, [r5, #0]
 80123b0:	f003 030f 	and.w	r3, r3, #15
 80123b4:	1c6f      	adds	r7, r5, #1
 80123b6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80123ba:	0e0b      	lsrs	r3, r1, #24
 80123bc:	d006      	beq.n	80123cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 80123be:	8822      	ldrh	r2, [r4, #0]
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	4640      	mov	r0, r8
 80123c4:	464b      	mov	r3, r9
 80123c6:	f7ff ff43 	bl	8012250 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80123ca:	8020      	strh	r0, [r4, #0]
 80123cc:	3402      	adds	r4, #2
 80123ce:	f10b 3aff 	add.w	sl, fp, #4294967295
 80123d2:	f1ba 0f01 	cmp.w	sl, #1
 80123d6:	dd22      	ble.n	801241e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80123d8:	783b      	ldrb	r3, [r7, #0]
 80123da:	091b      	lsrs	r3, r3, #4
 80123dc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80123e0:	0e0b      	lsrs	r3, r1, #24
 80123e2:	d006      	beq.n	80123f2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 80123e4:	8822      	ldrh	r2, [r4, #0]
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	4640      	mov	r0, r8
 80123ea:	464b      	mov	r3, r9
 80123ec:	f7ff ff30 	bl	8012250 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80123f0:	8020      	strh	r0, [r4, #0]
 80123f2:	f817 3b01 	ldrb.w	r3, [r7], #1
 80123f6:	f003 030f 	and.w	r3, r3, #15
 80123fa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80123fe:	0e0b      	lsrs	r3, r1, #24
 8012400:	d006      	beq.n	8012410 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8012402:	8862      	ldrh	r2, [r4, #2]
 8012404:	9300      	str	r3, [sp, #0]
 8012406:	4640      	mov	r0, r8
 8012408:	464b      	mov	r3, r9
 801240a:	f7ff ff21 	bl	8012250 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801240e:	8060      	strh	r0, [r4, #2]
 8012410:	3404      	adds	r4, #4
 8012412:	f1aa 0a02 	sub.w	sl, sl, #2
 8012416:	e7dc      	b.n	80123d2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8012418:	462f      	mov	r7, r5
 801241a:	46da      	mov	sl, fp
 801241c:	e7d9      	b.n	80123d2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 801241e:	d10d      	bne.n	801243c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8012420:	783b      	ldrb	r3, [r7, #0]
 8012422:	091b      	lsrs	r3, r3, #4
 8012424:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012428:	0e0b      	lsrs	r3, r1, #24
 801242a:	d006      	beq.n	801243a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801242c:	8822      	ldrh	r2, [r4, #0]
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	4640      	mov	r0, r8
 8012432:	464b      	mov	r3, r9
 8012434:	f7ff ff0c 	bl	8012250 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012438:	8020      	strh	r0, [r4, #0]
 801243a:	3402      	adds	r4, #2
 801243c:	9b06      	ldr	r3, [sp, #24]
 801243e:	9a02      	ldr	r2, [sp, #8]
 8012440:	881b      	ldrh	r3, [r3, #0]
 8012442:	eba3 030b 	sub.w	r3, r3, fp
 8012446:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801244a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 801244e:	4413      	add	r3, r2
 8012450:	9a07      	ldr	r2, [sp, #28]
 8012452:	fb93 f3f2 	sdiv	r3, r3, r2
 8012456:	441d      	add	r5, r3
 8012458:	e7a3      	b.n	80123a2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 801245a:	9b05      	ldr	r3, [sp, #20]
 801245c:	6818      	ldr	r0, [r3, #0]
 801245e:	6803      	ldr	r3, [r0, #0]
 8012460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012462:	4798      	blx	r3
 8012464:	b00d      	add	sp, #52	@ 0x34
 8012466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801246a:	bf00      	nop
 801246c:	20015438 	.word	0x20015438
 8012470:	20015432 	.word	0x20015432

08012474 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8012474:	b570      	push	{r4, r5, r6, lr}
 8012476:	1214      	asrs	r4, r2, #8
 8012478:	788d      	ldrb	r5, [r1, #2]
 801247a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801247e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012482:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012486:	fb15 f503 	smulbb	r5, r5, r3
 801248a:	fb04 5506 	mla	r5, r4, r6, r5
 801248e:	10d0      	asrs	r0, r2, #3
 8012490:	784c      	ldrb	r4, [r1, #1]
 8012492:	7809      	ldrb	r1, [r1, #0]
 8012494:	00d2      	lsls	r2, r2, #3
 8012496:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801249a:	b2d2      	uxtb	r2, r2
 801249c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80124a0:	fb14 f403 	smulbb	r4, r4, r3
 80124a4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80124a8:	fb11 f303 	smulbb	r3, r1, r3
 80124ac:	fb00 4406 	mla	r4, r0, r6, r4
 80124b0:	fb02 3306 	mla	r3, r2, r6, r3
 80124b4:	b2ad      	uxth	r5, r5
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	b2a4      	uxth	r4, r4
 80124ba:	1c68      	adds	r0, r5, #1
 80124bc:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 80124c0:	1c62      	adds	r2, r4, #1
 80124c2:	1c58      	adds	r0, r3, #1
 80124c4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80124c8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80124cc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80124d0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80124d4:	0964      	lsrs	r4, r4, #5
 80124d6:	4328      	orrs	r0, r5
 80124d8:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80124dc:	4320      	orrs	r0, r4
 80124de:	bd70      	pop	{r4, r5, r6, pc}

080124e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80124e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e4:	b08f      	sub	sp, #60	@ 0x3c
 80124e6:	461c      	mov	r4, r3
 80124e8:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80124ec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80124ee:	4682      	mov	sl, r0
 80124f0:	460e      	mov	r6, r1
 80124f2:	4615      	mov	r5, r2
 80124f4:	2f00      	cmp	r7, #0
 80124f6:	f000 8142 	beq.w	801277e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 80124fa:	6820      	ldr	r0, [r4, #0]
 80124fc:	6861      	ldr	r1, [r4, #4]
 80124fe:	aa0a      	add	r2, sp, #40	@ 0x28
 8012500:	c203      	stmia	r2!, {r0, r1}
 8012502:	6818      	ldr	r0, [r3, #0]
 8012504:	6859      	ldr	r1, [r3, #4]
 8012506:	aa0c      	add	r2, sp, #48	@ 0x30
 8012508:	c203      	stmia	r2!, {r0, r1}
 801250a:	a80a      	add	r0, sp, #40	@ 0x28
 801250c:	f7fa f992 	bl	800c834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012510:	4621      	mov	r1, r4
 8012512:	a80c      	add	r0, sp, #48	@ 0x30
 8012514:	f7fa f9b6 	bl	800c884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012518:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801251c:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012520:	f002 0301 	and.w	r3, r2, #1
 8012524:	9306      	str	r3, [sp, #24]
 8012526:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801252a:	f003 0101 	and.w	r1, r3, #1
 801252e:	9105      	str	r1, [sp, #20]
 8012530:	9805      	ldr	r0, [sp, #20]
 8012532:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8012536:	4403      	add	r3, r0
 8012538:	fb01 2303 	mla	r3, r1, r3, r2
 801253c:	f04f 0802 	mov.w	r8, #2
 8012540:	fb93 f3f8 	sdiv	r3, r3, r8
 8012544:	441e      	add	r6, r3
 8012546:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801254a:	441a      	add	r2, r3
 801254c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8012550:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012554:	4419      	add	r1, r3
 8012556:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801255a:	9303      	str	r3, [sp, #12]
 801255c:	4b89      	ldr	r3, [pc, #548]	@ (8012784 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 801255e:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8012562:	6818      	ldr	r0, [r3, #0]
 8012564:	6803      	ldr	r3, [r0, #0]
 8012566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012568:	4798      	blx	r3
 801256a:	4a87      	ldr	r2, [pc, #540]	@ (8012788 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 801256c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8012570:	8813      	ldrh	r3, [r2, #0]
 8012572:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8012576:	2fff      	cmp	r7, #255	@ 0xff
 8012578:	fb03 9404 	mla	r4, r3, r4, r9
 801257c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012580:	f105 0504 	add.w	r5, r5, #4
 8012584:	4694      	mov	ip, r2
 8012586:	fb03 f30b 	mul.w	r3, r3, fp
 801258a:	d071      	beq.n	8012670 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 801258c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012590:	43f9      	mvns	r1, r7
 8012592:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8012596:	b2c9      	uxtb	r1, r1
 8012598:	9104      	str	r1, [sp, #16]
 801259a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801259e:	9b07      	ldr	r3, [sp, #28]
 80125a0:	42a3      	cmp	r3, r4
 80125a2:	f240 80e7 	bls.w	8012774 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 80125a6:	9b06      	ldr	r3, [sp, #24]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d03d      	beq.n	8012628 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 80125ac:	7831      	ldrb	r1, [r6, #0]
 80125ae:	9b04      	ldr	r3, [sp, #16]
 80125b0:	8822      	ldrh	r2, [r4, #0]
 80125b2:	9300      	str	r3, [sp, #0]
 80125b4:	f001 010f 	and.w	r1, r1, #15
 80125b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80125bc:	463b      	mov	r3, r7
 80125be:	4429      	add	r1, r5
 80125c0:	4650      	mov	r0, sl
 80125c2:	f7ff ff57 	bl	8012474 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80125c6:	9b03      	ldr	r3, [sp, #12]
 80125c8:	f824 0b02 	strh.w	r0, [r4], #2
 80125cc:	f106 0801 	add.w	r8, r6, #1
 80125d0:	f103 3bff 	add.w	fp, r3, #4294967295
 80125d4:	f1bb 0f01 	cmp.w	fp, #1
 80125d8:	46a1      	mov	r9, r4
 80125da:	f104 0404 	add.w	r4, r4, #4
 80125de:	dd27      	ble.n	8012630 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 80125e0:	f898 1000 	ldrb.w	r1, [r8]
 80125e4:	9b04      	ldr	r3, [sp, #16]
 80125e6:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80125ea:	9300      	str	r3, [sp, #0]
 80125ec:	0909      	lsrs	r1, r1, #4
 80125ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80125f2:	463b      	mov	r3, r7
 80125f4:	4429      	add	r1, r5
 80125f6:	4650      	mov	r0, sl
 80125f8:	f7ff ff3c 	bl	8012474 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80125fc:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012600:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012604:	9b04      	ldr	r3, [sp, #16]
 8012606:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 801260a:	9300      	str	r3, [sp, #0]
 801260c:	f001 010f 	and.w	r1, r1, #15
 8012610:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012614:	463b      	mov	r3, r7
 8012616:	4429      	add	r1, r5
 8012618:	4650      	mov	r0, sl
 801261a:	f7ff ff2b 	bl	8012474 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 801261e:	f1ab 0b02 	sub.w	fp, fp, #2
 8012622:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012626:	e7d5      	b.n	80125d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012628:	46b0      	mov	r8, r6
 801262a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801262e:	e7d1      	b.n	80125d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012630:	d10f      	bne.n	8012652 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8012632:	f898 1000 	ldrb.w	r1, [r8]
 8012636:	9b04      	ldr	r3, [sp, #16]
 8012638:	f8b9 2000 	ldrh.w	r2, [r9]
 801263c:	9300      	str	r3, [sp, #0]
 801263e:	0909      	lsrs	r1, r1, #4
 8012640:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012644:	463b      	mov	r3, r7
 8012646:	4429      	add	r1, r5
 8012648:	4650      	mov	r0, sl
 801264a:	f7ff ff13 	bl	8012474 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 801264e:	f829 0b02 	strh.w	r0, [r9], #2
 8012652:	9b08      	ldr	r3, [sp, #32]
 8012654:	9a05      	ldr	r2, [sp, #20]
 8012656:	881c      	ldrh	r4, [r3, #0]
 8012658:	9b03      	ldr	r3, [sp, #12]
 801265a:	1ae4      	subs	r4, r4, r3
 801265c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012660:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8012664:	4413      	add	r3, r2
 8012666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012668:	fb93 f3f2 	sdiv	r3, r3, r2
 801266c:	441e      	add	r6, r3
 801266e:	e796      	b.n	801259e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8012670:	4f46      	ldr	r7, [pc, #280]	@ (801278c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8012672:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012676:	42a3      	cmp	r3, r4
 8012678:	d97c      	bls.n	8012774 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 801267a:	9a06      	ldr	r2, [sp, #24]
 801267c:	2a00      	cmp	r2, #0
 801267e:	d054      	beq.n	801272a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8012680:	7830      	ldrb	r0, [r6, #0]
 8012682:	f000 000f 	and.w	r0, r0, #15
 8012686:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801268a:	eb05 0e00 	add.w	lr, r5, r0
 801268e:	5c28      	ldrb	r0, [r5, r0]
 8012690:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8012694:	f89e e001 	ldrb.w	lr, [lr, #1]
 8012698:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801269c:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80126a0:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 80126a4:	ea42 020e 	orr.w	r2, r2, lr
 80126a8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80126ac:	f824 2b02 	strh.w	r2, [r4], #2
 80126b0:	9a03      	ldr	r2, [sp, #12]
 80126b2:	1c71      	adds	r1, r6, #1
 80126b4:	f102 3eff 	add.w	lr, r2, #4294967295
 80126b8:	f1be 0f01 	cmp.w	lr, #1
 80126bc:	4620      	mov	r0, r4
 80126be:	f104 0404 	add.w	r4, r4, #4
 80126c2:	dd36      	ble.n	8012732 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 80126c4:	7808      	ldrb	r0, [r1, #0]
 80126c6:	0900      	lsrs	r0, r0, #4
 80126c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80126cc:	eb05 0a00 	add.w	sl, r5, r0
 80126d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80126d4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80126d8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80126dc:	00d2      	lsls	r2, r2, #3
 80126de:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80126e2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80126e6:	ea49 0202 	orr.w	r2, r9, r2
 80126ea:	f815 9000 	ldrb.w	r9, [r5, r0]
 80126ee:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80126f2:	f824 2c04 	strh.w	r2, [r4, #-4]
 80126f6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80126fa:	f000 000f 	and.w	r0, r0, #15
 80126fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012702:	eb05 0a00 	add.w	sl, r5, r0
 8012706:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801270a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801270e:	00d2      	lsls	r2, r2, #3
 8012710:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8012714:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012718:	ea49 0202 	orr.w	r2, r9, r2
 801271c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8012720:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8012724:	f824 2c02 	strh.w	r2, [r4, #-2]
 8012728:	e7c6      	b.n	80126b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 801272a:	4631      	mov	r1, r6
 801272c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8012730:	e7c2      	b.n	80126b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8012732:	d111      	bne.n	8012758 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8012734:	7809      	ldrb	r1, [r1, #0]
 8012736:	0909      	lsrs	r1, r1, #4
 8012738:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801273c:	186c      	adds	r4, r5, r1
 801273e:	5c69      	ldrb	r1, [r5, r1]
 8012740:	78a2      	ldrb	r2, [r4, #2]
 8012742:	7864      	ldrb	r4, [r4, #1]
 8012744:	00e4      	lsls	r4, r4, #3
 8012746:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 801274a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801274e:	4322      	orrs	r2, r4
 8012750:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8012754:	f820 2b02 	strh.w	r2, [r0], #2
 8012758:	9a03      	ldr	r2, [sp, #12]
 801275a:	f8bc 4000 	ldrh.w	r4, [ip]
 801275e:	9905      	ldr	r1, [sp, #20]
 8012760:	1aa4      	subs	r4, r4, r2
 8012762:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8012766:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801276a:	440a      	add	r2, r1
 801276c:	fb92 f2f8 	sdiv	r2, r2, r8
 8012770:	4416      	add	r6, r2
 8012772:	e780      	b.n	8012676 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8012774:	4b03      	ldr	r3, [pc, #12]	@ (8012784 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8012776:	6818      	ldr	r0, [r3, #0]
 8012778:	6803      	ldr	r3, [r0, #0]
 801277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801277c:	4798      	blx	r3
 801277e:	b00f      	add	sp, #60	@ 0x3c
 8012780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012784:	20015438 	.word	0x20015438
 8012788:	20015432 	.word	0x20015432
 801278c:	fffff800 	.word	0xfffff800

08012790 <CRC_Lock>:
 8012790:	b530      	push	{r4, r5, lr}
 8012792:	4a2d      	ldr	r2, [pc, #180]	@ (8012848 <CRC_Lock+0xb8>)
 8012794:	6813      	ldr	r3, [r2, #0]
 8012796:	f023 0301 	bic.w	r3, r3, #1
 801279a:	6013      	str	r3, [r2, #0]
 801279c:	4b2b      	ldr	r3, [pc, #172]	@ (801284c <CRC_Lock+0xbc>)
 801279e:	681c      	ldr	r4, [r3, #0]
 80127a0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80127a4:	4014      	ands	r4, r2
 80127a6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80127aa:	42ac      	cmp	r4, r5
 80127ac:	d005      	beq.n	80127ba <CRC_Lock+0x2a>
 80127ae:	681c      	ldr	r4, [r3, #0]
 80127b0:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80127b4:	4014      	ands	r4, r2
 80127b6:	42ac      	cmp	r4, r5
 80127b8:	d125      	bne.n	8012806 <CRC_Lock+0x76>
 80127ba:	4b25      	ldr	r3, [pc, #148]	@ (8012850 <CRC_Lock+0xc0>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d139      	bne.n	8012836 <CRC_Lock+0xa6>
 80127c2:	4b24      	ldr	r3, [pc, #144]	@ (8012854 <CRC_Lock+0xc4>)
 80127c4:	681a      	ldr	r2, [r3, #0]
 80127c6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80127ca:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80127ce:	d00d      	beq.n	80127ec <CRC_Lock+0x5c>
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	f240 4483 	movw	r4, #1155	@ 0x483
 80127d6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80127da:	42a2      	cmp	r2, r4
 80127dc:	d006      	beq.n	80127ec <CRC_Lock+0x5c>
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f240 4285 	movw	r2, #1157	@ 0x485
 80127e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d124      	bne.n	8012836 <CRC_Lock+0xa6>
 80127ec:	4b1a      	ldr	r3, [pc, #104]	@ (8012858 <CRC_Lock+0xc8>)
 80127ee:	2201      	movs	r2, #1
 80127f0:	601a      	str	r2, [r3, #0]
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	2a00      	cmp	r2, #0
 80127f6:	d1fc      	bne.n	80127f2 <CRC_Lock+0x62>
 80127f8:	4b18      	ldr	r3, [pc, #96]	@ (801285c <CRC_Lock+0xcc>)
 80127fa:	6018      	str	r0, [r3, #0]
 80127fc:	6818      	ldr	r0, [r3, #0]
 80127fe:	1a43      	subs	r3, r0, r1
 8012800:	4258      	negs	r0, r3
 8012802:	4158      	adcs	r0, r3
 8012804:	e00e      	b.n	8012824 <CRC_Lock+0x94>
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	4013      	ands	r3, r2
 801280a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 801280e:	4293      	cmp	r3, r2
 8012810:	d111      	bne.n	8012836 <CRC_Lock+0xa6>
 8012812:	4b13      	ldr	r3, [pc, #76]	@ (8012860 <CRC_Lock+0xd0>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	f240 4286 	movw	r2, #1158	@ 0x486
 801281a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801281e:	4293      	cmp	r3, r2
 8012820:	d001      	beq.n	8012826 <CRC_Lock+0x96>
 8012822:	2000      	movs	r0, #0
 8012824:	bd30      	pop	{r4, r5, pc}
 8012826:	4b0f      	ldr	r3, [pc, #60]	@ (8012864 <CRC_Lock+0xd4>)
 8012828:	2201      	movs	r2, #1
 801282a:	601a      	str	r2, [r3, #0]
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	2a00      	cmp	r2, #0
 8012830:	d1fc      	bne.n	801282c <CRC_Lock+0x9c>
 8012832:	4b0d      	ldr	r3, [pc, #52]	@ (8012868 <CRC_Lock+0xd8>)
 8012834:	e7e1      	b.n	80127fa <CRC_Lock+0x6a>
 8012836:	4b0d      	ldr	r3, [pc, #52]	@ (801286c <CRC_Lock+0xdc>)
 8012838:	2201      	movs	r2, #1
 801283a:	601a      	str	r2, [r3, #0]
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	2a00      	cmp	r2, #0
 8012840:	d1fc      	bne.n	801283c <CRC_Lock+0xac>
 8012842:	4b0b      	ldr	r3, [pc, #44]	@ (8012870 <CRC_Lock+0xe0>)
 8012844:	e7d9      	b.n	80127fa <CRC_Lock+0x6a>
 8012846:	bf00      	nop
 8012848:	e0002000 	.word	0xe0002000
 801284c:	e000ed00 	.word	0xe000ed00
 8012850:	e0042000 	.word	0xe0042000
 8012854:	5c001000 	.word	0x5c001000
 8012858:	58024c08 	.word	0x58024c08
 801285c:	58024c00 	.word	0x58024c00
 8012860:	46008ff0 	.word	0x46008ff0
 8012864:	46024c08 	.word	0x46024c08
 8012868:	46024c00 	.word	0x46024c00
 801286c:	40023008 	.word	0x40023008
 8012870:	40023000 	.word	0x40023000

08012874 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8012874:	6101      	str	r1, [r0, #16]
 8012876:	4770      	bx	lr

08012878 <_ZN8touchgfx8Gestures4tickEv>:
 8012878:	7b83      	ldrb	r3, [r0, #14]
 801287a:	b14b      	cbz	r3, 8012890 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801287c:	8903      	ldrh	r3, [r0, #8]
 801287e:	3301      	adds	r3, #1
 8012880:	b29b      	uxth	r3, r3
 8012882:	2b07      	cmp	r3, #7
 8012884:	8103      	strh	r3, [r0, #8]
 8012886:	bf81      	itttt	hi
 8012888:	2300      	movhi	r3, #0
 801288a:	8143      	strhhi	r3, [r0, #10]
 801288c:	8183      	strhhi	r3, [r0, #12]
 801288e:	7383      	strbhi	r3, [r0, #14]
 8012890:	4770      	bx	lr
	...

08012894 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8012894:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012898:	4698      	mov	r8, r3
 801289a:	8883      	ldrh	r3, [r0, #4]
 801289c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80128a0:	eba8 0303 	sub.w	r3, r8, r3
 80128a4:	b21b      	sxth	r3, r3
 80128a6:	4604      	mov	r4, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	4617      	mov	r7, r2
 80128ac:	4a18      	ldr	r2, [pc, #96]	@ (8012910 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80128ae:	9200      	str	r2, [sp, #0]
 80128b0:	bfb8      	it	lt
 80128b2:	425b      	neglt	r3, r3
 80128b4:	8aa2      	ldrh	r2, [r4, #20]
 80128b6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80128ba:	f8ad 800a 	strh.w	r8, [sp, #10]
 80128be:	b21b      	sxth	r3, r3
 80128c0:	460e      	mov	r6, r1
 80128c2:	4293      	cmp	r3, r2
 80128c4:	88c1      	ldrh	r1, [r0, #6]
 80128c6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80128ca:	f04f 0000 	mov.w	r0, #0
 80128ce:	f88d 0004 	strb.w	r0, [sp, #4]
 80128d2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80128d6:	dc07      	bgt.n	80128e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 80128d8:	1a69      	subs	r1, r5, r1
 80128da:	b209      	sxth	r1, r1
 80128dc:	2900      	cmp	r1, #0
 80128de:	bfb8      	it	lt
 80128e0:	4249      	neglt	r1, r1
 80128e2:	b209      	sxth	r1, r1
 80128e4:	428a      	cmp	r2, r1
 80128e6:	da10      	bge.n	801290a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 80128e8:	6920      	ldr	r0, [r4, #16]
 80128ea:	6803      	ldr	r3, [r0, #0]
 80128ec:	4669      	mov	r1, sp
 80128ee:	685b      	ldr	r3, [r3, #4]
 80128f0:	4798      	blx	r3
 80128f2:	eba8 0606 	sub.w	r6, r8, r6
 80128f6:	2300      	movs	r3, #0
 80128f8:	1bef      	subs	r7, r5, r7
 80128fa:	2001      	movs	r0, #1
 80128fc:	8123      	strh	r3, [r4, #8]
 80128fe:	8166      	strh	r6, [r4, #10]
 8012900:	81a7      	strh	r7, [r4, #12]
 8012902:	f8a4 8004 	strh.w	r8, [r4, #4]
 8012906:	80e5      	strh	r5, [r4, #6]
 8012908:	73a0      	strb	r0, [r4, #14]
 801290a:	b004      	add	sp, #16
 801290c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012910:	080159cc 	.word	0x080159cc

08012914 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8012914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012916:	461e      	mov	r6, r3
 8012918:	1e4b      	subs	r3, r1, #1
 801291a:	2b01      	cmp	r3, #1
 801291c:	b085      	sub	sp, #20
 801291e:	4604      	mov	r4, r0
 8012920:	460d      	mov	r5, r1
 8012922:	4617      	mov	r7, r2
 8012924:	d84b      	bhi.n	80129be <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8012926:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801292a:	1cd3      	adds	r3, r2, #3
 801292c:	b29b      	uxth	r3, r3
 801292e:	2b06      	cmp	r3, #6
 8012930:	d916      	bls.n	8012960 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8012932:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80129d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8012936:	f8cd c004 	str.w	ip, [sp, #4]
 801293a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801293e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012942:	6900      	ldr	r0, [r0, #16]
 8012944:	f8ad 100c 	strh.w	r1, [sp, #12]
 8012948:	f04f 0c00 	mov.w	ip, #0
 801294c:	f88d c008 	strb.w	ip, [sp, #8]
 8012950:	f8ad 200a 	strh.w	r2, [sp, #10]
 8012954:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012958:	6803      	ldr	r3, [r0, #0]
 801295a:	a901      	add	r1, sp, #4
 801295c:	689b      	ldr	r3, [r3, #8]
 801295e:	4798      	blx	r3
 8012960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012964:	1cd3      	adds	r3, r2, #3
 8012966:	b29b      	uxth	r3, r3
 8012968:	2b06      	cmp	r3, #6
 801296a:	d916      	bls.n	801299a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801296c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80129d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8012970:	f8cd c004 	str.w	ip, [sp, #4]
 8012974:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012978:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801297c:	6920      	ldr	r0, [r4, #16]
 801297e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8012982:	f04f 0c01 	mov.w	ip, #1
 8012986:	f88d c008 	strb.w	ip, [sp, #8]
 801298a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801298e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012992:	6803      	ldr	r3, [r0, #0]
 8012994:	a901      	add	r1, sp, #4
 8012996:	689b      	ldr	r3, [r3, #8]
 8012998:	4798      	blx	r3
 801299a:	4b0d      	ldr	r3, [pc, #52]	@ (80129d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801299c:	9301      	str	r3, [sp, #4]
 801299e:	6920      	ldr	r0, [r4, #16]
 80129a0:	f88d 5008 	strb.w	r5, [sp, #8]
 80129a4:	2300      	movs	r3, #0
 80129a6:	f8ad 700a 	strh.w	r7, [sp, #10]
 80129aa:	f8ad 600c 	strh.w	r6, [sp, #12]
 80129ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80129b2:	6803      	ldr	r3, [r0, #0]
 80129b4:	a901      	add	r1, sp, #4
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4798      	blx	r3
 80129ba:	b005      	add	sp, #20
 80129bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129be:	2900      	cmp	r1, #0
 80129c0:	d1eb      	bne.n	801299a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80129c2:	80a2      	strh	r2, [r4, #4]
 80129c4:	80c6      	strh	r6, [r0, #6]
 80129c6:	60a1      	str	r1, [r4, #8]
 80129c8:	81a1      	strh	r1, [r4, #12]
 80129ca:	73a1      	strb	r1, [r4, #14]
 80129cc:	e7e5      	b.n	801299a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80129ce:	bf00      	nop
 80129d0:	080159b8 	.word	0x080159b8
 80129d4:	080159e0 	.word	0x080159e0

080129d8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80129d8:	b570      	push	{r4, r5, r6, lr}
 80129da:	790b      	ldrb	r3, [r1, #4]
 80129dc:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	bf0c      	ite	eq
 80129e4:	2301      	moveq	r3, #1
 80129e6:	2300      	movne	r3, #0
 80129e8:	4604      	mov	r4, r0
 80129ea:	460e      	mov	r6, r1
 80129ec:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80129f0:	d109      	bne.n	8012a06 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80129f2:	b14d      	cbz	r5, 8012a08 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80129f4:	7933      	ldrb	r3, [r6, #4]
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d10c      	bne.n	8012a14 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80129fa:	6823      	ldr	r3, [r4, #0]
 80129fc:	4620      	mov	r0, r4
 80129fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a04:	4718      	bx	r3
 8012a06:	b12d      	cbz	r5, 8012a14 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012a08:	6823      	ldr	r3, [r4, #0]
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	695b      	ldr	r3, [r3, #20]
 8012a0e:	4798      	blx	r3
 8012a10:	2d00      	cmp	r5, #0
 8012a12:	d1ef      	bne.n	80129f4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8012a14:	bd70      	pop	{r4, r5, r6, pc}

08012a16 <__aeabi_atexit>:
 8012a16:	460b      	mov	r3, r1
 8012a18:	4601      	mov	r1, r0
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f000 b910 	b.w	8012c40 <__cxa_atexit>

08012a20 <_ZdlPvj>:
 8012a20:	f000 b812 	b.w	8012a48 <_ZdlPv>

08012a24 <__cxa_guard_acquire>:
 8012a24:	6802      	ldr	r2, [r0, #0]
 8012a26:	07d2      	lsls	r2, r2, #31
 8012a28:	4603      	mov	r3, r0
 8012a2a:	d405      	bmi.n	8012a38 <__cxa_guard_acquire+0x14>
 8012a2c:	7842      	ldrb	r2, [r0, #1]
 8012a2e:	b102      	cbz	r2, 8012a32 <__cxa_guard_acquire+0xe>
 8012a30:	deff      	udf	#255	@ 0xff
 8012a32:	2001      	movs	r0, #1
 8012a34:	7058      	strb	r0, [r3, #1]
 8012a36:	4770      	bx	lr
 8012a38:	2000      	movs	r0, #0
 8012a3a:	4770      	bx	lr

08012a3c <__cxa_guard_release>:
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	6003      	str	r3, [r0, #0]
 8012a40:	4770      	bx	lr

08012a42 <__cxa_pure_virtual>:
 8012a42:	b508      	push	{r3, lr}
 8012a44:	f000 f80e 	bl	8012a64 <_ZSt9terminatev>

08012a48 <_ZdlPv>:
 8012a48:	f000 b844 	b.w	8012ad4 <free>

08012a4c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8012a4c:	b508      	push	{r3, lr}
 8012a4e:	4780      	blx	r0
 8012a50:	f000 f80d 	bl	8012a6e <abort>

08012a54 <_ZSt13get_terminatev>:
 8012a54:	4b02      	ldr	r3, [pc, #8]	@ (8012a60 <_ZSt13get_terminatev+0xc>)
 8012a56:	6818      	ldr	r0, [r3, #0]
 8012a58:	f3bf 8f5b 	dmb	ish
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	2000008c 	.word	0x2000008c

08012a64 <_ZSt9terminatev>:
 8012a64:	b508      	push	{r3, lr}
 8012a66:	f7ff fff5 	bl	8012a54 <_ZSt13get_terminatev>
 8012a6a:	f7ff ffef 	bl	8012a4c <_ZN10__cxxabiv111__terminateEPFvvE>

08012a6e <abort>:
 8012a6e:	b508      	push	{r3, lr}
 8012a70:	2006      	movs	r0, #6
 8012a72:	f000 fa3b 	bl	8012eec <raise>
 8012a76:	2001      	movs	r0, #1
 8012a78:	f7ee ff35 	bl	80018e6 <_exit>

08012a7c <__assert_func>:
 8012a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a7e:	4614      	mov	r4, r2
 8012a80:	461a      	mov	r2, r3
 8012a82:	4b09      	ldr	r3, [pc, #36]	@ (8012aa8 <__assert_func+0x2c>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	4605      	mov	r5, r0
 8012a88:	68d8      	ldr	r0, [r3, #12]
 8012a8a:	b14c      	cbz	r4, 8012aa0 <__assert_func+0x24>
 8012a8c:	4b07      	ldr	r3, [pc, #28]	@ (8012aac <__assert_func+0x30>)
 8012a8e:	9100      	str	r1, [sp, #0]
 8012a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a94:	4906      	ldr	r1, [pc, #24]	@ (8012ab0 <__assert_func+0x34>)
 8012a96:	462b      	mov	r3, r5
 8012a98:	f000 f984 	bl	8012da4 <fiprintf>
 8012a9c:	f7ff ffe7 	bl	8012a6e <abort>
 8012aa0:	4b04      	ldr	r3, [pc, #16]	@ (8012ab4 <__assert_func+0x38>)
 8012aa2:	461c      	mov	r4, r3
 8012aa4:	e7f3      	b.n	8012a8e <__assert_func+0x12>
 8012aa6:	bf00      	nop
 8012aa8:	2000009c 	.word	0x2000009c
 8012aac:	080148ea 	.word	0x080148ea
 8012ab0:	080148f7 	.word	0x080148f7
 8012ab4:	08014925 	.word	0x08014925

08012ab8 <atexit>:
 8012ab8:	2300      	movs	r3, #0
 8012aba:	4601      	mov	r1, r0
 8012abc:	461a      	mov	r2, r3
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f000 bac2 	b.w	8013048 <__register_exitproc>

08012ac4 <malloc>:
 8012ac4:	4b02      	ldr	r3, [pc, #8]	@ (8012ad0 <malloc+0xc>)
 8012ac6:	4601      	mov	r1, r0
 8012ac8:	6818      	ldr	r0, [r3, #0]
 8012aca:	f000 b82d 	b.w	8012b28 <_malloc_r>
 8012ace:	bf00      	nop
 8012ad0:	2000009c 	.word	0x2000009c

08012ad4 <free>:
 8012ad4:	4b02      	ldr	r3, [pc, #8]	@ (8012ae0 <free+0xc>)
 8012ad6:	4601      	mov	r1, r0
 8012ad8:	6818      	ldr	r0, [r3, #0]
 8012ada:	f000 bb11 	b.w	8013100 <_free_r>
 8012ade:	bf00      	nop
 8012ae0:	2000009c 	.word	0x2000009c

08012ae4 <sbrk_aligned>:
 8012ae4:	b570      	push	{r4, r5, r6, lr}
 8012ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8012b24 <sbrk_aligned+0x40>)
 8012ae8:	460c      	mov	r4, r1
 8012aea:	6831      	ldr	r1, [r6, #0]
 8012aec:	4605      	mov	r5, r0
 8012aee:	b911      	cbnz	r1, 8012af6 <sbrk_aligned+0x12>
 8012af0:	f000 fa4c 	bl	8012f8c <_sbrk_r>
 8012af4:	6030      	str	r0, [r6, #0]
 8012af6:	4621      	mov	r1, r4
 8012af8:	4628      	mov	r0, r5
 8012afa:	f000 fa47 	bl	8012f8c <_sbrk_r>
 8012afe:	1c43      	adds	r3, r0, #1
 8012b00:	d103      	bne.n	8012b0a <sbrk_aligned+0x26>
 8012b02:	f04f 34ff 	mov.w	r4, #4294967295
 8012b06:	4620      	mov	r0, r4
 8012b08:	bd70      	pop	{r4, r5, r6, pc}
 8012b0a:	1cc4      	adds	r4, r0, #3
 8012b0c:	f024 0403 	bic.w	r4, r4, #3
 8012b10:	42a0      	cmp	r0, r4
 8012b12:	d0f8      	beq.n	8012b06 <sbrk_aligned+0x22>
 8012b14:	1a21      	subs	r1, r4, r0
 8012b16:	4628      	mov	r0, r5
 8012b18:	f000 fa38 	bl	8012f8c <_sbrk_r>
 8012b1c:	3001      	adds	r0, #1
 8012b1e:	d1f2      	bne.n	8012b06 <sbrk_aligned+0x22>
 8012b20:	e7ef      	b.n	8012b02 <sbrk_aligned+0x1e>
 8012b22:	bf00      	nop
 8012b24:	200154c8 	.word	0x200154c8

08012b28 <_malloc_r>:
 8012b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b2c:	1ccd      	adds	r5, r1, #3
 8012b2e:	f025 0503 	bic.w	r5, r5, #3
 8012b32:	3508      	adds	r5, #8
 8012b34:	2d0c      	cmp	r5, #12
 8012b36:	bf38      	it	cc
 8012b38:	250c      	movcc	r5, #12
 8012b3a:	2d00      	cmp	r5, #0
 8012b3c:	4606      	mov	r6, r0
 8012b3e:	db01      	blt.n	8012b44 <_malloc_r+0x1c>
 8012b40:	42a9      	cmp	r1, r5
 8012b42:	d904      	bls.n	8012b4e <_malloc_r+0x26>
 8012b44:	230c      	movs	r3, #12
 8012b46:	6033      	str	r3, [r6, #0]
 8012b48:	2000      	movs	r0, #0
 8012b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012c24 <_malloc_r+0xfc>
 8012b52:	f000 f869 	bl	8012c28 <__malloc_lock>
 8012b56:	f8d8 3000 	ldr.w	r3, [r8]
 8012b5a:	461c      	mov	r4, r3
 8012b5c:	bb44      	cbnz	r4, 8012bb0 <_malloc_r+0x88>
 8012b5e:	4629      	mov	r1, r5
 8012b60:	4630      	mov	r0, r6
 8012b62:	f7ff ffbf 	bl	8012ae4 <sbrk_aligned>
 8012b66:	1c43      	adds	r3, r0, #1
 8012b68:	4604      	mov	r4, r0
 8012b6a:	d158      	bne.n	8012c1e <_malloc_r+0xf6>
 8012b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8012b70:	4627      	mov	r7, r4
 8012b72:	2f00      	cmp	r7, #0
 8012b74:	d143      	bne.n	8012bfe <_malloc_r+0xd6>
 8012b76:	2c00      	cmp	r4, #0
 8012b78:	d04b      	beq.n	8012c12 <_malloc_r+0xea>
 8012b7a:	6823      	ldr	r3, [r4, #0]
 8012b7c:	4639      	mov	r1, r7
 8012b7e:	4630      	mov	r0, r6
 8012b80:	eb04 0903 	add.w	r9, r4, r3
 8012b84:	f000 fa02 	bl	8012f8c <_sbrk_r>
 8012b88:	4581      	cmp	r9, r0
 8012b8a:	d142      	bne.n	8012c12 <_malloc_r+0xea>
 8012b8c:	6821      	ldr	r1, [r4, #0]
 8012b8e:	1a6d      	subs	r5, r5, r1
 8012b90:	4629      	mov	r1, r5
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7ff ffa6 	bl	8012ae4 <sbrk_aligned>
 8012b98:	3001      	adds	r0, #1
 8012b9a:	d03a      	beq.n	8012c12 <_malloc_r+0xea>
 8012b9c:	6823      	ldr	r3, [r4, #0]
 8012b9e:	442b      	add	r3, r5
 8012ba0:	6023      	str	r3, [r4, #0]
 8012ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8012ba6:	685a      	ldr	r2, [r3, #4]
 8012ba8:	bb62      	cbnz	r2, 8012c04 <_malloc_r+0xdc>
 8012baa:	f8c8 7000 	str.w	r7, [r8]
 8012bae:	e00f      	b.n	8012bd0 <_malloc_r+0xa8>
 8012bb0:	6822      	ldr	r2, [r4, #0]
 8012bb2:	1b52      	subs	r2, r2, r5
 8012bb4:	d420      	bmi.n	8012bf8 <_malloc_r+0xd0>
 8012bb6:	2a0b      	cmp	r2, #11
 8012bb8:	d917      	bls.n	8012bea <_malloc_r+0xc2>
 8012bba:	1961      	adds	r1, r4, r5
 8012bbc:	42a3      	cmp	r3, r4
 8012bbe:	6025      	str	r5, [r4, #0]
 8012bc0:	bf18      	it	ne
 8012bc2:	6059      	strne	r1, [r3, #4]
 8012bc4:	6863      	ldr	r3, [r4, #4]
 8012bc6:	bf08      	it	eq
 8012bc8:	f8c8 1000 	streq.w	r1, [r8]
 8012bcc:	5162      	str	r2, [r4, r5]
 8012bce:	604b      	str	r3, [r1, #4]
 8012bd0:	4630      	mov	r0, r6
 8012bd2:	f000 f82f 	bl	8012c34 <__malloc_unlock>
 8012bd6:	f104 000b 	add.w	r0, r4, #11
 8012bda:	1d23      	adds	r3, r4, #4
 8012bdc:	f020 0007 	bic.w	r0, r0, #7
 8012be0:	1ac2      	subs	r2, r0, r3
 8012be2:	bf1c      	itt	ne
 8012be4:	1a1b      	subne	r3, r3, r0
 8012be6:	50a3      	strne	r3, [r4, r2]
 8012be8:	e7af      	b.n	8012b4a <_malloc_r+0x22>
 8012bea:	6862      	ldr	r2, [r4, #4]
 8012bec:	42a3      	cmp	r3, r4
 8012bee:	bf0c      	ite	eq
 8012bf0:	f8c8 2000 	streq.w	r2, [r8]
 8012bf4:	605a      	strne	r2, [r3, #4]
 8012bf6:	e7eb      	b.n	8012bd0 <_malloc_r+0xa8>
 8012bf8:	4623      	mov	r3, r4
 8012bfa:	6864      	ldr	r4, [r4, #4]
 8012bfc:	e7ae      	b.n	8012b5c <_malloc_r+0x34>
 8012bfe:	463c      	mov	r4, r7
 8012c00:	687f      	ldr	r7, [r7, #4]
 8012c02:	e7b6      	b.n	8012b72 <_malloc_r+0x4a>
 8012c04:	461a      	mov	r2, r3
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	42a3      	cmp	r3, r4
 8012c0a:	d1fb      	bne.n	8012c04 <_malloc_r+0xdc>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	6053      	str	r3, [r2, #4]
 8012c10:	e7de      	b.n	8012bd0 <_malloc_r+0xa8>
 8012c12:	230c      	movs	r3, #12
 8012c14:	6033      	str	r3, [r6, #0]
 8012c16:	4630      	mov	r0, r6
 8012c18:	f000 f80c 	bl	8012c34 <__malloc_unlock>
 8012c1c:	e794      	b.n	8012b48 <_malloc_r+0x20>
 8012c1e:	6005      	str	r5, [r0, #0]
 8012c20:	e7d6      	b.n	8012bd0 <_malloc_r+0xa8>
 8012c22:	bf00      	nop
 8012c24:	200154cc 	.word	0x200154cc

08012c28 <__malloc_lock>:
 8012c28:	4801      	ldr	r0, [pc, #4]	@ (8012c30 <__malloc_lock+0x8>)
 8012c2a:	f000 b9fc 	b.w	8013026 <__retarget_lock_acquire_recursive>
 8012c2e:	bf00      	nop
 8012c30:	20015610 	.word	0x20015610

08012c34 <__malloc_unlock>:
 8012c34:	4801      	ldr	r0, [pc, #4]	@ (8012c3c <__malloc_unlock+0x8>)
 8012c36:	f000 b9f7 	b.w	8013028 <__retarget_lock_release_recursive>
 8012c3a:	bf00      	nop
 8012c3c:	20015610 	.word	0x20015610

08012c40 <__cxa_atexit>:
 8012c40:	b510      	push	{r4, lr}
 8012c42:	4604      	mov	r4, r0
 8012c44:	4804      	ldr	r0, [pc, #16]	@ (8012c58 <__cxa_atexit+0x18>)
 8012c46:	4613      	mov	r3, r2
 8012c48:	b120      	cbz	r0, 8012c54 <__cxa_atexit+0x14>
 8012c4a:	460a      	mov	r2, r1
 8012c4c:	2002      	movs	r0, #2
 8012c4e:	4621      	mov	r1, r4
 8012c50:	f000 f9fa 	bl	8013048 <__register_exitproc>
 8012c54:	bd10      	pop	{r4, pc}
 8012c56:	bf00      	nop
 8012c58:	08013049 	.word	0x08013049

08012c5c <std>:
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	b510      	push	{r4, lr}
 8012c60:	4604      	mov	r4, r0
 8012c62:	e9c0 3300 	strd	r3, r3, [r0]
 8012c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c6a:	6083      	str	r3, [r0, #8]
 8012c6c:	8181      	strh	r1, [r0, #12]
 8012c6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012c70:	81c2      	strh	r2, [r0, #14]
 8012c72:	6183      	str	r3, [r0, #24]
 8012c74:	4619      	mov	r1, r3
 8012c76:	2208      	movs	r2, #8
 8012c78:	305c      	adds	r0, #92	@ 0x5c
 8012c7a:	f000 f906 	bl	8012e8a <memset>
 8012c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8012cb4 <std+0x58>)
 8012c80:	6263      	str	r3, [r4, #36]	@ 0x24
 8012c82:	4b0d      	ldr	r3, [pc, #52]	@ (8012cb8 <std+0x5c>)
 8012c84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012c86:	4b0d      	ldr	r3, [pc, #52]	@ (8012cbc <std+0x60>)
 8012c88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8012cc0 <std+0x64>)
 8012c8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8012c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8012cc4 <std+0x68>)
 8012c90:	6224      	str	r4, [r4, #32]
 8012c92:	429c      	cmp	r4, r3
 8012c94:	d006      	beq.n	8012ca4 <std+0x48>
 8012c96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012c9a:	4294      	cmp	r4, r2
 8012c9c:	d002      	beq.n	8012ca4 <std+0x48>
 8012c9e:	33d0      	adds	r3, #208	@ 0xd0
 8012ca0:	429c      	cmp	r4, r3
 8012ca2:	d105      	bne.n	8012cb0 <std+0x54>
 8012ca4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cac:	f000 b9ba 	b.w	8013024 <__retarget_lock_init_recursive>
 8012cb0:	bd10      	pop	{r4, pc}
 8012cb2:	bf00      	nop
 8012cb4:	08012e05 	.word	0x08012e05
 8012cb8:	08012e27 	.word	0x08012e27
 8012cbc:	08012e5f 	.word	0x08012e5f
 8012cc0:	08012e83 	.word	0x08012e83
 8012cc4:	200154d0 	.word	0x200154d0

08012cc8 <stdio_exit_handler>:
 8012cc8:	4a02      	ldr	r2, [pc, #8]	@ (8012cd4 <stdio_exit_handler+0xc>)
 8012cca:	4903      	ldr	r1, [pc, #12]	@ (8012cd8 <stdio_exit_handler+0x10>)
 8012ccc:	4803      	ldr	r0, [pc, #12]	@ (8012cdc <stdio_exit_handler+0x14>)
 8012cce:	f000 b87b 	b.w	8012dc8 <_fwalk_sglue>
 8012cd2:	bf00      	nop
 8012cd4:	20000090 	.word	0x20000090
 8012cd8:	08013839 	.word	0x08013839
 8012cdc:	200000a0 	.word	0x200000a0

08012ce0 <cleanup_stdio>:
 8012ce0:	6841      	ldr	r1, [r0, #4]
 8012ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8012d14 <cleanup_stdio+0x34>)
 8012ce4:	4299      	cmp	r1, r3
 8012ce6:	b510      	push	{r4, lr}
 8012ce8:	4604      	mov	r4, r0
 8012cea:	d001      	beq.n	8012cf0 <cleanup_stdio+0x10>
 8012cec:	f000 fda4 	bl	8013838 <_fflush_r>
 8012cf0:	68a1      	ldr	r1, [r4, #8]
 8012cf2:	4b09      	ldr	r3, [pc, #36]	@ (8012d18 <cleanup_stdio+0x38>)
 8012cf4:	4299      	cmp	r1, r3
 8012cf6:	d002      	beq.n	8012cfe <cleanup_stdio+0x1e>
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f000 fd9d 	bl	8013838 <_fflush_r>
 8012cfe:	68e1      	ldr	r1, [r4, #12]
 8012d00:	4b06      	ldr	r3, [pc, #24]	@ (8012d1c <cleanup_stdio+0x3c>)
 8012d02:	4299      	cmp	r1, r3
 8012d04:	d004      	beq.n	8012d10 <cleanup_stdio+0x30>
 8012d06:	4620      	mov	r0, r4
 8012d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d0c:	f000 bd94 	b.w	8013838 <_fflush_r>
 8012d10:	bd10      	pop	{r4, pc}
 8012d12:	bf00      	nop
 8012d14:	200154d0 	.word	0x200154d0
 8012d18:	20015538 	.word	0x20015538
 8012d1c:	200155a0 	.word	0x200155a0

08012d20 <global_stdio_init.part.0>:
 8012d20:	b510      	push	{r4, lr}
 8012d22:	4b0b      	ldr	r3, [pc, #44]	@ (8012d50 <global_stdio_init.part.0+0x30>)
 8012d24:	4c0b      	ldr	r4, [pc, #44]	@ (8012d54 <global_stdio_init.part.0+0x34>)
 8012d26:	4a0c      	ldr	r2, [pc, #48]	@ (8012d58 <global_stdio_init.part.0+0x38>)
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	2104      	movs	r1, #4
 8012d30:	f7ff ff94 	bl	8012c5c <std>
 8012d34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012d38:	2201      	movs	r2, #1
 8012d3a:	2109      	movs	r1, #9
 8012d3c:	f7ff ff8e 	bl	8012c5c <std>
 8012d40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012d44:	2202      	movs	r2, #2
 8012d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d4a:	2112      	movs	r1, #18
 8012d4c:	f7ff bf86 	b.w	8012c5c <std>
 8012d50:	20015608 	.word	0x20015608
 8012d54:	200154d0 	.word	0x200154d0
 8012d58:	08012cc9 	.word	0x08012cc9

08012d5c <__sfp_lock_acquire>:
 8012d5c:	4801      	ldr	r0, [pc, #4]	@ (8012d64 <__sfp_lock_acquire+0x8>)
 8012d5e:	f000 b962 	b.w	8013026 <__retarget_lock_acquire_recursive>
 8012d62:	bf00      	nop
 8012d64:	20015612 	.word	0x20015612

08012d68 <__sfp_lock_release>:
 8012d68:	4801      	ldr	r0, [pc, #4]	@ (8012d70 <__sfp_lock_release+0x8>)
 8012d6a:	f000 b95d 	b.w	8013028 <__retarget_lock_release_recursive>
 8012d6e:	bf00      	nop
 8012d70:	20015612 	.word	0x20015612

08012d74 <__sinit>:
 8012d74:	b510      	push	{r4, lr}
 8012d76:	4604      	mov	r4, r0
 8012d78:	f7ff fff0 	bl	8012d5c <__sfp_lock_acquire>
 8012d7c:	6a23      	ldr	r3, [r4, #32]
 8012d7e:	b11b      	cbz	r3, 8012d88 <__sinit+0x14>
 8012d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d84:	f7ff bff0 	b.w	8012d68 <__sfp_lock_release>
 8012d88:	4b04      	ldr	r3, [pc, #16]	@ (8012d9c <__sinit+0x28>)
 8012d8a:	6223      	str	r3, [r4, #32]
 8012d8c:	4b04      	ldr	r3, [pc, #16]	@ (8012da0 <__sinit+0x2c>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d1f5      	bne.n	8012d80 <__sinit+0xc>
 8012d94:	f7ff ffc4 	bl	8012d20 <global_stdio_init.part.0>
 8012d98:	e7f2      	b.n	8012d80 <__sinit+0xc>
 8012d9a:	bf00      	nop
 8012d9c:	08012ce1 	.word	0x08012ce1
 8012da0:	20015608 	.word	0x20015608

08012da4 <fiprintf>:
 8012da4:	b40e      	push	{r1, r2, r3}
 8012da6:	b503      	push	{r0, r1, lr}
 8012da8:	4601      	mov	r1, r0
 8012daa:	ab03      	add	r3, sp, #12
 8012dac:	4805      	ldr	r0, [pc, #20]	@ (8012dc4 <fiprintf+0x20>)
 8012dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8012db2:	6800      	ldr	r0, [r0, #0]
 8012db4:	9301      	str	r3, [sp, #4]
 8012db6:	f000 fa17 	bl	80131e8 <_vfiprintf_r>
 8012dba:	b002      	add	sp, #8
 8012dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dc0:	b003      	add	sp, #12
 8012dc2:	4770      	bx	lr
 8012dc4:	2000009c 	.word	0x2000009c

08012dc8 <_fwalk_sglue>:
 8012dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dcc:	4607      	mov	r7, r0
 8012dce:	4688      	mov	r8, r1
 8012dd0:	4614      	mov	r4, r2
 8012dd2:	2600      	movs	r6, #0
 8012dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8012ddc:	d505      	bpl.n	8012dea <_fwalk_sglue+0x22>
 8012dde:	6824      	ldr	r4, [r4, #0]
 8012de0:	2c00      	cmp	r4, #0
 8012de2:	d1f7      	bne.n	8012dd4 <_fwalk_sglue+0xc>
 8012de4:	4630      	mov	r0, r6
 8012de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dea:	89ab      	ldrh	r3, [r5, #12]
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d907      	bls.n	8012e00 <_fwalk_sglue+0x38>
 8012df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012df4:	3301      	adds	r3, #1
 8012df6:	d003      	beq.n	8012e00 <_fwalk_sglue+0x38>
 8012df8:	4629      	mov	r1, r5
 8012dfa:	4638      	mov	r0, r7
 8012dfc:	47c0      	blx	r8
 8012dfe:	4306      	orrs	r6, r0
 8012e00:	3568      	adds	r5, #104	@ 0x68
 8012e02:	e7e9      	b.n	8012dd8 <_fwalk_sglue+0x10>

08012e04 <__sread>:
 8012e04:	b510      	push	{r4, lr}
 8012e06:	460c      	mov	r4, r1
 8012e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e0c:	f000 f898 	bl	8012f40 <_read_r>
 8012e10:	2800      	cmp	r0, #0
 8012e12:	bfab      	itete	ge
 8012e14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012e16:	89a3      	ldrhlt	r3, [r4, #12]
 8012e18:	181b      	addge	r3, r3, r0
 8012e1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012e1e:	bfac      	ite	ge
 8012e20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012e22:	81a3      	strhlt	r3, [r4, #12]
 8012e24:	bd10      	pop	{r4, pc}

08012e26 <__swrite>:
 8012e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e2a:	461f      	mov	r7, r3
 8012e2c:	898b      	ldrh	r3, [r1, #12]
 8012e2e:	05db      	lsls	r3, r3, #23
 8012e30:	4605      	mov	r5, r0
 8012e32:	460c      	mov	r4, r1
 8012e34:	4616      	mov	r6, r2
 8012e36:	d505      	bpl.n	8012e44 <__swrite+0x1e>
 8012e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e3c:	2302      	movs	r3, #2
 8012e3e:	2200      	movs	r2, #0
 8012e40:	f000 f86c 	bl	8012f1c <_lseek_r>
 8012e44:	89a3      	ldrh	r3, [r4, #12]
 8012e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e4e:	81a3      	strh	r3, [r4, #12]
 8012e50:	4632      	mov	r2, r6
 8012e52:	463b      	mov	r3, r7
 8012e54:	4628      	mov	r0, r5
 8012e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5a:	f000 b8a7 	b.w	8012fac <_write_r>

08012e5e <__sseek>:
 8012e5e:	b510      	push	{r4, lr}
 8012e60:	460c      	mov	r4, r1
 8012e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e66:	f000 f859 	bl	8012f1c <_lseek_r>
 8012e6a:	1c43      	adds	r3, r0, #1
 8012e6c:	89a3      	ldrh	r3, [r4, #12]
 8012e6e:	bf15      	itete	ne
 8012e70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012e72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012e76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012e7a:	81a3      	strheq	r3, [r4, #12]
 8012e7c:	bf18      	it	ne
 8012e7e:	81a3      	strhne	r3, [r4, #12]
 8012e80:	bd10      	pop	{r4, pc}

08012e82 <__sclose>:
 8012e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e86:	f000 b839 	b.w	8012efc <_close_r>

08012e8a <memset>:
 8012e8a:	4402      	add	r2, r0
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d100      	bne.n	8012e94 <memset+0xa>
 8012e92:	4770      	bx	lr
 8012e94:	f803 1b01 	strb.w	r1, [r3], #1
 8012e98:	e7f9      	b.n	8012e8e <memset+0x4>

08012e9a <_raise_r>:
 8012e9a:	291f      	cmp	r1, #31
 8012e9c:	b538      	push	{r3, r4, r5, lr}
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	460c      	mov	r4, r1
 8012ea2:	d904      	bls.n	8012eae <_raise_r+0x14>
 8012ea4:	2316      	movs	r3, #22
 8012ea6:	6003      	str	r3, [r0, #0]
 8012ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8012eac:	bd38      	pop	{r3, r4, r5, pc}
 8012eae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012eb0:	b112      	cbz	r2, 8012eb8 <_raise_r+0x1e>
 8012eb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012eb6:	b94b      	cbnz	r3, 8012ecc <_raise_r+0x32>
 8012eb8:	4628      	mov	r0, r5
 8012eba:	f000 f865 	bl	8012f88 <_getpid_r>
 8012ebe:	4622      	mov	r2, r4
 8012ec0:	4601      	mov	r1, r0
 8012ec2:	4628      	mov	r0, r5
 8012ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ec8:	f000 b84c 	b.w	8012f64 <_kill_r>
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d00a      	beq.n	8012ee6 <_raise_r+0x4c>
 8012ed0:	1c59      	adds	r1, r3, #1
 8012ed2:	d103      	bne.n	8012edc <_raise_r+0x42>
 8012ed4:	2316      	movs	r3, #22
 8012ed6:	6003      	str	r3, [r0, #0]
 8012ed8:	2001      	movs	r0, #1
 8012eda:	e7e7      	b.n	8012eac <_raise_r+0x12>
 8012edc:	2100      	movs	r1, #0
 8012ede:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	4798      	blx	r3
 8012ee6:	2000      	movs	r0, #0
 8012ee8:	e7e0      	b.n	8012eac <_raise_r+0x12>
	...

08012eec <raise>:
 8012eec:	4b02      	ldr	r3, [pc, #8]	@ (8012ef8 <raise+0xc>)
 8012eee:	4601      	mov	r1, r0
 8012ef0:	6818      	ldr	r0, [r3, #0]
 8012ef2:	f7ff bfd2 	b.w	8012e9a <_raise_r>
 8012ef6:	bf00      	nop
 8012ef8:	2000009c 	.word	0x2000009c

08012efc <_close_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	4d06      	ldr	r5, [pc, #24]	@ (8012f18 <_close_r+0x1c>)
 8012f00:	2300      	movs	r3, #0
 8012f02:	4604      	mov	r4, r0
 8012f04:	4608      	mov	r0, r1
 8012f06:	602b      	str	r3, [r5, #0]
 8012f08:	f7ee fd0f 	bl	800192a <_close>
 8012f0c:	1c43      	adds	r3, r0, #1
 8012f0e:	d102      	bne.n	8012f16 <_close_r+0x1a>
 8012f10:	682b      	ldr	r3, [r5, #0]
 8012f12:	b103      	cbz	r3, 8012f16 <_close_r+0x1a>
 8012f14:	6023      	str	r3, [r4, #0]
 8012f16:	bd38      	pop	{r3, r4, r5, pc}
 8012f18:	2001560c 	.word	0x2001560c

08012f1c <_lseek_r>:
 8012f1c:	b538      	push	{r3, r4, r5, lr}
 8012f1e:	4d07      	ldr	r5, [pc, #28]	@ (8012f3c <_lseek_r+0x20>)
 8012f20:	4604      	mov	r4, r0
 8012f22:	4608      	mov	r0, r1
 8012f24:	4611      	mov	r1, r2
 8012f26:	2200      	movs	r2, #0
 8012f28:	602a      	str	r2, [r5, #0]
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	f7ee fd07 	bl	800193e <_lseek>
 8012f30:	1c43      	adds	r3, r0, #1
 8012f32:	d102      	bne.n	8012f3a <_lseek_r+0x1e>
 8012f34:	682b      	ldr	r3, [r5, #0]
 8012f36:	b103      	cbz	r3, 8012f3a <_lseek_r+0x1e>
 8012f38:	6023      	str	r3, [r4, #0]
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}
 8012f3c:	2001560c 	.word	0x2001560c

08012f40 <_read_r>:
 8012f40:	b538      	push	{r3, r4, r5, lr}
 8012f42:	4d07      	ldr	r5, [pc, #28]	@ (8012f60 <_read_r+0x20>)
 8012f44:	4604      	mov	r4, r0
 8012f46:	4608      	mov	r0, r1
 8012f48:	4611      	mov	r1, r2
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	602a      	str	r2, [r5, #0]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	f7ee fccf 	bl	80018f2 <_read>
 8012f54:	1c43      	adds	r3, r0, #1
 8012f56:	d102      	bne.n	8012f5e <_read_r+0x1e>
 8012f58:	682b      	ldr	r3, [r5, #0]
 8012f5a:	b103      	cbz	r3, 8012f5e <_read_r+0x1e>
 8012f5c:	6023      	str	r3, [r4, #0]
 8012f5e:	bd38      	pop	{r3, r4, r5, pc}
 8012f60:	2001560c 	.word	0x2001560c

08012f64 <_kill_r>:
 8012f64:	b538      	push	{r3, r4, r5, lr}
 8012f66:	4d07      	ldr	r5, [pc, #28]	@ (8012f84 <_kill_r+0x20>)
 8012f68:	2300      	movs	r3, #0
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	4608      	mov	r0, r1
 8012f6e:	4611      	mov	r1, r2
 8012f70:	602b      	str	r3, [r5, #0]
 8012f72:	f7ee fcb0 	bl	80018d6 <_kill>
 8012f76:	1c43      	adds	r3, r0, #1
 8012f78:	d102      	bne.n	8012f80 <_kill_r+0x1c>
 8012f7a:	682b      	ldr	r3, [r5, #0]
 8012f7c:	b103      	cbz	r3, 8012f80 <_kill_r+0x1c>
 8012f7e:	6023      	str	r3, [r4, #0]
 8012f80:	bd38      	pop	{r3, r4, r5, pc}
 8012f82:	bf00      	nop
 8012f84:	2001560c 	.word	0x2001560c

08012f88 <_getpid_r>:
 8012f88:	f7ee bca3 	b.w	80018d2 <_getpid>

08012f8c <_sbrk_r>:
 8012f8c:	b538      	push	{r3, r4, r5, lr}
 8012f8e:	4d06      	ldr	r5, [pc, #24]	@ (8012fa8 <_sbrk_r+0x1c>)
 8012f90:	2300      	movs	r3, #0
 8012f92:	4604      	mov	r4, r0
 8012f94:	4608      	mov	r0, r1
 8012f96:	602b      	str	r3, [r5, #0]
 8012f98:	f7ee fcd4 	bl	8001944 <_sbrk>
 8012f9c:	1c43      	adds	r3, r0, #1
 8012f9e:	d102      	bne.n	8012fa6 <_sbrk_r+0x1a>
 8012fa0:	682b      	ldr	r3, [r5, #0]
 8012fa2:	b103      	cbz	r3, 8012fa6 <_sbrk_r+0x1a>
 8012fa4:	6023      	str	r3, [r4, #0]
 8012fa6:	bd38      	pop	{r3, r4, r5, pc}
 8012fa8:	2001560c 	.word	0x2001560c

08012fac <_write_r>:
 8012fac:	b538      	push	{r3, r4, r5, lr}
 8012fae:	4d07      	ldr	r5, [pc, #28]	@ (8012fcc <_write_r+0x20>)
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	4608      	mov	r0, r1
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	602a      	str	r2, [r5, #0]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	f7ee fca7 	bl	800190e <_write>
 8012fc0:	1c43      	adds	r3, r0, #1
 8012fc2:	d102      	bne.n	8012fca <_write_r+0x1e>
 8012fc4:	682b      	ldr	r3, [r5, #0]
 8012fc6:	b103      	cbz	r3, 8012fca <_write_r+0x1e>
 8012fc8:	6023      	str	r3, [r4, #0]
 8012fca:	bd38      	pop	{r3, r4, r5, pc}
 8012fcc:	2001560c 	.word	0x2001560c

08012fd0 <__errno>:
 8012fd0:	4b01      	ldr	r3, [pc, #4]	@ (8012fd8 <__errno+0x8>)
 8012fd2:	6818      	ldr	r0, [r3, #0]
 8012fd4:	4770      	bx	lr
 8012fd6:	bf00      	nop
 8012fd8:	2000009c 	.word	0x2000009c

08012fdc <__libc_init_array>:
 8012fdc:	b570      	push	{r4, r5, r6, lr}
 8012fde:	4d0d      	ldr	r5, [pc, #52]	@ (8013014 <__libc_init_array+0x38>)
 8012fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8013018 <__libc_init_array+0x3c>)
 8012fe2:	1b64      	subs	r4, r4, r5
 8012fe4:	10a4      	asrs	r4, r4, #2
 8012fe6:	2600      	movs	r6, #0
 8012fe8:	42a6      	cmp	r6, r4
 8012fea:	d109      	bne.n	8013000 <__libc_init_array+0x24>
 8012fec:	4d0b      	ldr	r5, [pc, #44]	@ (801301c <__libc_init_array+0x40>)
 8012fee:	4c0c      	ldr	r4, [pc, #48]	@ (8013020 <__libc_init_array+0x44>)
 8012ff0:	f000 fd62 	bl	8013ab8 <_init>
 8012ff4:	1b64      	subs	r4, r4, r5
 8012ff6:	10a4      	asrs	r4, r4, #2
 8012ff8:	2600      	movs	r6, #0
 8012ffa:	42a6      	cmp	r6, r4
 8012ffc:	d105      	bne.n	801300a <__libc_init_array+0x2e>
 8012ffe:	bd70      	pop	{r4, r5, r6, pc}
 8013000:	f855 3b04 	ldr.w	r3, [r5], #4
 8013004:	4798      	blx	r3
 8013006:	3601      	adds	r6, #1
 8013008:	e7ee      	b.n	8012fe8 <__libc_init_array+0xc>
 801300a:	f855 3b04 	ldr.w	r3, [r5], #4
 801300e:	4798      	blx	r3
 8013010:	3601      	adds	r6, #1
 8013012:	e7f2      	b.n	8012ffa <__libc_init_array+0x1e>
 8013014:	080efef4 	.word	0x080efef4
 8013018:	080efef4 	.word	0x080efef4
 801301c:	080efef4 	.word	0x080efef4
 8013020:	080eff08 	.word	0x080eff08

08013024 <__retarget_lock_init_recursive>:
 8013024:	4770      	bx	lr

08013026 <__retarget_lock_acquire_recursive>:
 8013026:	4770      	bx	lr

08013028 <__retarget_lock_release_recursive>:
 8013028:	4770      	bx	lr

0801302a <memcpy>:
 801302a:	440a      	add	r2, r1
 801302c:	4291      	cmp	r1, r2
 801302e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013032:	d100      	bne.n	8013036 <memcpy+0xc>
 8013034:	4770      	bx	lr
 8013036:	b510      	push	{r4, lr}
 8013038:	f811 4b01 	ldrb.w	r4, [r1], #1
 801303c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013040:	4291      	cmp	r1, r2
 8013042:	d1f9      	bne.n	8013038 <memcpy+0xe>
 8013044:	bd10      	pop	{r4, pc}
	...

08013048 <__register_exitproc>:
 8013048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801304c:	4d27      	ldr	r5, [pc, #156]	@ (80130ec <__register_exitproc+0xa4>)
 801304e:	4607      	mov	r7, r0
 8013050:	6828      	ldr	r0, [r5, #0]
 8013052:	4691      	mov	r9, r2
 8013054:	460e      	mov	r6, r1
 8013056:	4698      	mov	r8, r3
 8013058:	f7ff ffe5 	bl	8013026 <__retarget_lock_acquire_recursive>
 801305c:	4a24      	ldr	r2, [pc, #144]	@ (80130f0 <__register_exitproc+0xa8>)
 801305e:	6814      	ldr	r4, [r2, #0]
 8013060:	b93c      	cbnz	r4, 8013072 <__register_exitproc+0x2a>
 8013062:	4b24      	ldr	r3, [pc, #144]	@ (80130f4 <__register_exitproc+0xac>)
 8013064:	6013      	str	r3, [r2, #0]
 8013066:	4a24      	ldr	r2, [pc, #144]	@ (80130f8 <__register_exitproc+0xb0>)
 8013068:	b112      	cbz	r2, 8013070 <__register_exitproc+0x28>
 801306a:	6812      	ldr	r2, [r2, #0]
 801306c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013070:	4c20      	ldr	r4, [pc, #128]	@ (80130f4 <__register_exitproc+0xac>)
 8013072:	6863      	ldr	r3, [r4, #4]
 8013074:	2b1f      	cmp	r3, #31
 8013076:	dd06      	ble.n	8013086 <__register_exitproc+0x3e>
 8013078:	6828      	ldr	r0, [r5, #0]
 801307a:	f7ff ffd5 	bl	8013028 <__retarget_lock_release_recursive>
 801307e:	f04f 30ff 	mov.w	r0, #4294967295
 8013082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013086:	b32f      	cbz	r7, 80130d4 <__register_exitproc+0x8c>
 8013088:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 801308c:	b968      	cbnz	r0, 80130aa <__register_exitproc+0x62>
 801308e:	4b1b      	ldr	r3, [pc, #108]	@ (80130fc <__register_exitproc+0xb4>)
 8013090:	2b00      	cmp	r3, #0
 8013092:	d0f1      	beq.n	8013078 <__register_exitproc+0x30>
 8013094:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8013098:	f7ff fd14 	bl	8012ac4 <malloc>
 801309c:	2800      	cmp	r0, #0
 801309e:	d0eb      	beq.n	8013078 <__register_exitproc+0x30>
 80130a0:	2300      	movs	r3, #0
 80130a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80130a6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80130aa:	6863      	ldr	r3, [r4, #4]
 80130ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80130b0:	2201      	movs	r2, #1
 80130b2:	409a      	lsls	r2, r3
 80130b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80130b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80130bc:	4313      	orrs	r3, r2
 80130be:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80130c2:	2f02      	cmp	r7, #2
 80130c4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80130c8:	bf02      	ittt	eq
 80130ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80130ce:	4313      	orreq	r3, r2
 80130d0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80130d4:	6863      	ldr	r3, [r4, #4]
 80130d6:	6828      	ldr	r0, [r5, #0]
 80130d8:	1c5a      	adds	r2, r3, #1
 80130da:	3302      	adds	r3, #2
 80130dc:	6062      	str	r2, [r4, #4]
 80130de:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80130e2:	f7ff ffa1 	bl	8013028 <__retarget_lock_release_recursive>
 80130e6:	2000      	movs	r0, #0
 80130e8:	e7cb      	b.n	8013082 <__register_exitproc+0x3a>
 80130ea:	bf00      	nop
 80130ec:	200000ec 	.word	0x200000ec
 80130f0:	200156a0 	.word	0x200156a0
 80130f4:	20015614 	.word	0x20015614
 80130f8:	08015a94 	.word	0x08015a94
 80130fc:	08012ac5 	.word	0x08012ac5

08013100 <_free_r>:
 8013100:	b538      	push	{r3, r4, r5, lr}
 8013102:	4605      	mov	r5, r0
 8013104:	2900      	cmp	r1, #0
 8013106:	d041      	beq.n	801318c <_free_r+0x8c>
 8013108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801310c:	1f0c      	subs	r4, r1, #4
 801310e:	2b00      	cmp	r3, #0
 8013110:	bfb8      	it	lt
 8013112:	18e4      	addlt	r4, r4, r3
 8013114:	f7ff fd88 	bl	8012c28 <__malloc_lock>
 8013118:	4a1d      	ldr	r2, [pc, #116]	@ (8013190 <_free_r+0x90>)
 801311a:	6813      	ldr	r3, [r2, #0]
 801311c:	b933      	cbnz	r3, 801312c <_free_r+0x2c>
 801311e:	6063      	str	r3, [r4, #4]
 8013120:	6014      	str	r4, [r2, #0]
 8013122:	4628      	mov	r0, r5
 8013124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013128:	f7ff bd84 	b.w	8012c34 <__malloc_unlock>
 801312c:	42a3      	cmp	r3, r4
 801312e:	d908      	bls.n	8013142 <_free_r+0x42>
 8013130:	6820      	ldr	r0, [r4, #0]
 8013132:	1821      	adds	r1, r4, r0
 8013134:	428b      	cmp	r3, r1
 8013136:	bf01      	itttt	eq
 8013138:	6819      	ldreq	r1, [r3, #0]
 801313a:	685b      	ldreq	r3, [r3, #4]
 801313c:	1809      	addeq	r1, r1, r0
 801313e:	6021      	streq	r1, [r4, #0]
 8013140:	e7ed      	b.n	801311e <_free_r+0x1e>
 8013142:	461a      	mov	r2, r3
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	b10b      	cbz	r3, 801314c <_free_r+0x4c>
 8013148:	42a3      	cmp	r3, r4
 801314a:	d9fa      	bls.n	8013142 <_free_r+0x42>
 801314c:	6811      	ldr	r1, [r2, #0]
 801314e:	1850      	adds	r0, r2, r1
 8013150:	42a0      	cmp	r0, r4
 8013152:	d10b      	bne.n	801316c <_free_r+0x6c>
 8013154:	6820      	ldr	r0, [r4, #0]
 8013156:	4401      	add	r1, r0
 8013158:	1850      	adds	r0, r2, r1
 801315a:	4283      	cmp	r3, r0
 801315c:	6011      	str	r1, [r2, #0]
 801315e:	d1e0      	bne.n	8013122 <_free_r+0x22>
 8013160:	6818      	ldr	r0, [r3, #0]
 8013162:	685b      	ldr	r3, [r3, #4]
 8013164:	6053      	str	r3, [r2, #4]
 8013166:	4408      	add	r0, r1
 8013168:	6010      	str	r0, [r2, #0]
 801316a:	e7da      	b.n	8013122 <_free_r+0x22>
 801316c:	d902      	bls.n	8013174 <_free_r+0x74>
 801316e:	230c      	movs	r3, #12
 8013170:	602b      	str	r3, [r5, #0]
 8013172:	e7d6      	b.n	8013122 <_free_r+0x22>
 8013174:	6820      	ldr	r0, [r4, #0]
 8013176:	1821      	adds	r1, r4, r0
 8013178:	428b      	cmp	r3, r1
 801317a:	bf04      	itt	eq
 801317c:	6819      	ldreq	r1, [r3, #0]
 801317e:	685b      	ldreq	r3, [r3, #4]
 8013180:	6063      	str	r3, [r4, #4]
 8013182:	bf04      	itt	eq
 8013184:	1809      	addeq	r1, r1, r0
 8013186:	6021      	streq	r1, [r4, #0]
 8013188:	6054      	str	r4, [r2, #4]
 801318a:	e7ca      	b.n	8013122 <_free_r+0x22>
 801318c:	bd38      	pop	{r3, r4, r5, pc}
 801318e:	bf00      	nop
 8013190:	200154cc 	.word	0x200154cc

08013194 <__sfputc_r>:
 8013194:	6893      	ldr	r3, [r2, #8]
 8013196:	3b01      	subs	r3, #1
 8013198:	2b00      	cmp	r3, #0
 801319a:	b410      	push	{r4}
 801319c:	6093      	str	r3, [r2, #8]
 801319e:	da08      	bge.n	80131b2 <__sfputc_r+0x1e>
 80131a0:	6994      	ldr	r4, [r2, #24]
 80131a2:	42a3      	cmp	r3, r4
 80131a4:	db01      	blt.n	80131aa <__sfputc_r+0x16>
 80131a6:	290a      	cmp	r1, #10
 80131a8:	d103      	bne.n	80131b2 <__sfputc_r+0x1e>
 80131aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131ae:	f000 bb6b 	b.w	8013888 <__swbuf_r>
 80131b2:	6813      	ldr	r3, [r2, #0]
 80131b4:	1c58      	adds	r0, r3, #1
 80131b6:	6010      	str	r0, [r2, #0]
 80131b8:	7019      	strb	r1, [r3, #0]
 80131ba:	4608      	mov	r0, r1
 80131bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131c0:	4770      	bx	lr

080131c2 <__sfputs_r>:
 80131c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131c4:	4606      	mov	r6, r0
 80131c6:	460f      	mov	r7, r1
 80131c8:	4614      	mov	r4, r2
 80131ca:	18d5      	adds	r5, r2, r3
 80131cc:	42ac      	cmp	r4, r5
 80131ce:	d101      	bne.n	80131d4 <__sfputs_r+0x12>
 80131d0:	2000      	movs	r0, #0
 80131d2:	e007      	b.n	80131e4 <__sfputs_r+0x22>
 80131d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131d8:	463a      	mov	r2, r7
 80131da:	4630      	mov	r0, r6
 80131dc:	f7ff ffda 	bl	8013194 <__sfputc_r>
 80131e0:	1c43      	adds	r3, r0, #1
 80131e2:	d1f3      	bne.n	80131cc <__sfputs_r+0xa>
 80131e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080131e8 <_vfiprintf_r>:
 80131e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ec:	460d      	mov	r5, r1
 80131ee:	b09d      	sub	sp, #116	@ 0x74
 80131f0:	4614      	mov	r4, r2
 80131f2:	4698      	mov	r8, r3
 80131f4:	4606      	mov	r6, r0
 80131f6:	b118      	cbz	r0, 8013200 <_vfiprintf_r+0x18>
 80131f8:	6a03      	ldr	r3, [r0, #32]
 80131fa:	b90b      	cbnz	r3, 8013200 <_vfiprintf_r+0x18>
 80131fc:	f7ff fdba 	bl	8012d74 <__sinit>
 8013200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013202:	07d9      	lsls	r1, r3, #31
 8013204:	d405      	bmi.n	8013212 <_vfiprintf_r+0x2a>
 8013206:	89ab      	ldrh	r3, [r5, #12]
 8013208:	059a      	lsls	r2, r3, #22
 801320a:	d402      	bmi.n	8013212 <_vfiprintf_r+0x2a>
 801320c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801320e:	f7ff ff0a 	bl	8013026 <__retarget_lock_acquire_recursive>
 8013212:	89ab      	ldrh	r3, [r5, #12]
 8013214:	071b      	lsls	r3, r3, #28
 8013216:	d501      	bpl.n	801321c <_vfiprintf_r+0x34>
 8013218:	692b      	ldr	r3, [r5, #16]
 801321a:	b99b      	cbnz	r3, 8013244 <_vfiprintf_r+0x5c>
 801321c:	4629      	mov	r1, r5
 801321e:	4630      	mov	r0, r6
 8013220:	f000 fb70 	bl	8013904 <__swsetup_r>
 8013224:	b170      	cbz	r0, 8013244 <_vfiprintf_r+0x5c>
 8013226:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013228:	07dc      	lsls	r4, r3, #31
 801322a:	d504      	bpl.n	8013236 <_vfiprintf_r+0x4e>
 801322c:	f04f 30ff 	mov.w	r0, #4294967295
 8013230:	b01d      	add	sp, #116	@ 0x74
 8013232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013236:	89ab      	ldrh	r3, [r5, #12]
 8013238:	0598      	lsls	r0, r3, #22
 801323a:	d4f7      	bmi.n	801322c <_vfiprintf_r+0x44>
 801323c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801323e:	f7ff fef3 	bl	8013028 <__retarget_lock_release_recursive>
 8013242:	e7f3      	b.n	801322c <_vfiprintf_r+0x44>
 8013244:	2300      	movs	r3, #0
 8013246:	9309      	str	r3, [sp, #36]	@ 0x24
 8013248:	2320      	movs	r3, #32
 801324a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801324e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013252:	2330      	movs	r3, #48	@ 0x30
 8013254:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013404 <_vfiprintf_r+0x21c>
 8013258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801325c:	f04f 0901 	mov.w	r9, #1
 8013260:	4623      	mov	r3, r4
 8013262:	469a      	mov	sl, r3
 8013264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013268:	b10a      	cbz	r2, 801326e <_vfiprintf_r+0x86>
 801326a:	2a25      	cmp	r2, #37	@ 0x25
 801326c:	d1f9      	bne.n	8013262 <_vfiprintf_r+0x7a>
 801326e:	ebba 0b04 	subs.w	fp, sl, r4
 8013272:	d00b      	beq.n	801328c <_vfiprintf_r+0xa4>
 8013274:	465b      	mov	r3, fp
 8013276:	4622      	mov	r2, r4
 8013278:	4629      	mov	r1, r5
 801327a:	4630      	mov	r0, r6
 801327c:	f7ff ffa1 	bl	80131c2 <__sfputs_r>
 8013280:	3001      	adds	r0, #1
 8013282:	f000 80a7 	beq.w	80133d4 <_vfiprintf_r+0x1ec>
 8013286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013288:	445a      	add	r2, fp
 801328a:	9209      	str	r2, [sp, #36]	@ 0x24
 801328c:	f89a 3000 	ldrb.w	r3, [sl]
 8013290:	2b00      	cmp	r3, #0
 8013292:	f000 809f 	beq.w	80133d4 <_vfiprintf_r+0x1ec>
 8013296:	2300      	movs	r3, #0
 8013298:	f04f 32ff 	mov.w	r2, #4294967295
 801329c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132a0:	f10a 0a01 	add.w	sl, sl, #1
 80132a4:	9304      	str	r3, [sp, #16]
 80132a6:	9307      	str	r3, [sp, #28]
 80132a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80132ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80132ae:	4654      	mov	r4, sl
 80132b0:	2205      	movs	r2, #5
 80132b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132b6:	4853      	ldr	r0, [pc, #332]	@ (8013404 <_vfiprintf_r+0x21c>)
 80132b8:	f7ec ff9a 	bl	80001f0 <memchr>
 80132bc:	9a04      	ldr	r2, [sp, #16]
 80132be:	b9d8      	cbnz	r0, 80132f8 <_vfiprintf_r+0x110>
 80132c0:	06d1      	lsls	r1, r2, #27
 80132c2:	bf44      	itt	mi
 80132c4:	2320      	movmi	r3, #32
 80132c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132ca:	0713      	lsls	r3, r2, #28
 80132cc:	bf44      	itt	mi
 80132ce:	232b      	movmi	r3, #43	@ 0x2b
 80132d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132d4:	f89a 3000 	ldrb.w	r3, [sl]
 80132d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80132da:	d015      	beq.n	8013308 <_vfiprintf_r+0x120>
 80132dc:	9a07      	ldr	r2, [sp, #28]
 80132de:	4654      	mov	r4, sl
 80132e0:	2000      	movs	r0, #0
 80132e2:	f04f 0c0a 	mov.w	ip, #10
 80132e6:	4621      	mov	r1, r4
 80132e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132ec:	3b30      	subs	r3, #48	@ 0x30
 80132ee:	2b09      	cmp	r3, #9
 80132f0:	d94b      	bls.n	801338a <_vfiprintf_r+0x1a2>
 80132f2:	b1b0      	cbz	r0, 8013322 <_vfiprintf_r+0x13a>
 80132f4:	9207      	str	r2, [sp, #28]
 80132f6:	e014      	b.n	8013322 <_vfiprintf_r+0x13a>
 80132f8:	eba0 0308 	sub.w	r3, r0, r8
 80132fc:	fa09 f303 	lsl.w	r3, r9, r3
 8013300:	4313      	orrs	r3, r2
 8013302:	9304      	str	r3, [sp, #16]
 8013304:	46a2      	mov	sl, r4
 8013306:	e7d2      	b.n	80132ae <_vfiprintf_r+0xc6>
 8013308:	9b03      	ldr	r3, [sp, #12]
 801330a:	1d19      	adds	r1, r3, #4
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	9103      	str	r1, [sp, #12]
 8013310:	2b00      	cmp	r3, #0
 8013312:	bfbb      	ittet	lt
 8013314:	425b      	neglt	r3, r3
 8013316:	f042 0202 	orrlt.w	r2, r2, #2
 801331a:	9307      	strge	r3, [sp, #28]
 801331c:	9307      	strlt	r3, [sp, #28]
 801331e:	bfb8      	it	lt
 8013320:	9204      	strlt	r2, [sp, #16]
 8013322:	7823      	ldrb	r3, [r4, #0]
 8013324:	2b2e      	cmp	r3, #46	@ 0x2e
 8013326:	d10a      	bne.n	801333e <_vfiprintf_r+0x156>
 8013328:	7863      	ldrb	r3, [r4, #1]
 801332a:	2b2a      	cmp	r3, #42	@ 0x2a
 801332c:	d132      	bne.n	8013394 <_vfiprintf_r+0x1ac>
 801332e:	9b03      	ldr	r3, [sp, #12]
 8013330:	1d1a      	adds	r2, r3, #4
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	9203      	str	r2, [sp, #12]
 8013336:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801333a:	3402      	adds	r4, #2
 801333c:	9305      	str	r3, [sp, #20]
 801333e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013414 <_vfiprintf_r+0x22c>
 8013342:	7821      	ldrb	r1, [r4, #0]
 8013344:	2203      	movs	r2, #3
 8013346:	4650      	mov	r0, sl
 8013348:	f7ec ff52 	bl	80001f0 <memchr>
 801334c:	b138      	cbz	r0, 801335e <_vfiprintf_r+0x176>
 801334e:	9b04      	ldr	r3, [sp, #16]
 8013350:	eba0 000a 	sub.w	r0, r0, sl
 8013354:	2240      	movs	r2, #64	@ 0x40
 8013356:	4082      	lsls	r2, r0
 8013358:	4313      	orrs	r3, r2
 801335a:	3401      	adds	r4, #1
 801335c:	9304      	str	r3, [sp, #16]
 801335e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013362:	4829      	ldr	r0, [pc, #164]	@ (8013408 <_vfiprintf_r+0x220>)
 8013364:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013368:	2206      	movs	r2, #6
 801336a:	f7ec ff41 	bl	80001f0 <memchr>
 801336e:	2800      	cmp	r0, #0
 8013370:	d03f      	beq.n	80133f2 <_vfiprintf_r+0x20a>
 8013372:	4b26      	ldr	r3, [pc, #152]	@ (801340c <_vfiprintf_r+0x224>)
 8013374:	bb1b      	cbnz	r3, 80133be <_vfiprintf_r+0x1d6>
 8013376:	9b03      	ldr	r3, [sp, #12]
 8013378:	3307      	adds	r3, #7
 801337a:	f023 0307 	bic.w	r3, r3, #7
 801337e:	3308      	adds	r3, #8
 8013380:	9303      	str	r3, [sp, #12]
 8013382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013384:	443b      	add	r3, r7
 8013386:	9309      	str	r3, [sp, #36]	@ 0x24
 8013388:	e76a      	b.n	8013260 <_vfiprintf_r+0x78>
 801338a:	fb0c 3202 	mla	r2, ip, r2, r3
 801338e:	460c      	mov	r4, r1
 8013390:	2001      	movs	r0, #1
 8013392:	e7a8      	b.n	80132e6 <_vfiprintf_r+0xfe>
 8013394:	2300      	movs	r3, #0
 8013396:	3401      	adds	r4, #1
 8013398:	9305      	str	r3, [sp, #20]
 801339a:	4619      	mov	r1, r3
 801339c:	f04f 0c0a 	mov.w	ip, #10
 80133a0:	4620      	mov	r0, r4
 80133a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133a6:	3a30      	subs	r2, #48	@ 0x30
 80133a8:	2a09      	cmp	r2, #9
 80133aa:	d903      	bls.n	80133b4 <_vfiprintf_r+0x1cc>
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d0c6      	beq.n	801333e <_vfiprintf_r+0x156>
 80133b0:	9105      	str	r1, [sp, #20]
 80133b2:	e7c4      	b.n	801333e <_vfiprintf_r+0x156>
 80133b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80133b8:	4604      	mov	r4, r0
 80133ba:	2301      	movs	r3, #1
 80133bc:	e7f0      	b.n	80133a0 <_vfiprintf_r+0x1b8>
 80133be:	ab03      	add	r3, sp, #12
 80133c0:	9300      	str	r3, [sp, #0]
 80133c2:	462a      	mov	r2, r5
 80133c4:	4b12      	ldr	r3, [pc, #72]	@ (8013410 <_vfiprintf_r+0x228>)
 80133c6:	a904      	add	r1, sp, #16
 80133c8:	4630      	mov	r0, r6
 80133ca:	f3af 8000 	nop.w
 80133ce:	4607      	mov	r7, r0
 80133d0:	1c78      	adds	r0, r7, #1
 80133d2:	d1d6      	bne.n	8013382 <_vfiprintf_r+0x19a>
 80133d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133d6:	07d9      	lsls	r1, r3, #31
 80133d8:	d405      	bmi.n	80133e6 <_vfiprintf_r+0x1fe>
 80133da:	89ab      	ldrh	r3, [r5, #12]
 80133dc:	059a      	lsls	r2, r3, #22
 80133de:	d402      	bmi.n	80133e6 <_vfiprintf_r+0x1fe>
 80133e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133e2:	f7ff fe21 	bl	8013028 <__retarget_lock_release_recursive>
 80133e6:	89ab      	ldrh	r3, [r5, #12]
 80133e8:	065b      	lsls	r3, r3, #25
 80133ea:	f53f af1f 	bmi.w	801322c <_vfiprintf_r+0x44>
 80133ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80133f0:	e71e      	b.n	8013230 <_vfiprintf_r+0x48>
 80133f2:	ab03      	add	r3, sp, #12
 80133f4:	9300      	str	r3, [sp, #0]
 80133f6:	462a      	mov	r2, r5
 80133f8:	4b05      	ldr	r3, [pc, #20]	@ (8013410 <_vfiprintf_r+0x228>)
 80133fa:	a904      	add	r1, sp, #16
 80133fc:	4630      	mov	r0, r6
 80133fe:	f000 f879 	bl	80134f4 <_printf_i>
 8013402:	e7e4      	b.n	80133ce <_vfiprintf_r+0x1e6>
 8013404:	08014926 	.word	0x08014926
 8013408:	08014930 	.word	0x08014930
 801340c:	00000000 	.word	0x00000000
 8013410:	080131c3 	.word	0x080131c3
 8013414:	0801492c 	.word	0x0801492c

08013418 <_printf_common>:
 8013418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801341c:	4616      	mov	r6, r2
 801341e:	4698      	mov	r8, r3
 8013420:	688a      	ldr	r2, [r1, #8]
 8013422:	690b      	ldr	r3, [r1, #16]
 8013424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013428:	4293      	cmp	r3, r2
 801342a:	bfb8      	it	lt
 801342c:	4613      	movlt	r3, r2
 801342e:	6033      	str	r3, [r6, #0]
 8013430:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013434:	4607      	mov	r7, r0
 8013436:	460c      	mov	r4, r1
 8013438:	b10a      	cbz	r2, 801343e <_printf_common+0x26>
 801343a:	3301      	adds	r3, #1
 801343c:	6033      	str	r3, [r6, #0]
 801343e:	6823      	ldr	r3, [r4, #0]
 8013440:	0699      	lsls	r1, r3, #26
 8013442:	bf42      	ittt	mi
 8013444:	6833      	ldrmi	r3, [r6, #0]
 8013446:	3302      	addmi	r3, #2
 8013448:	6033      	strmi	r3, [r6, #0]
 801344a:	6825      	ldr	r5, [r4, #0]
 801344c:	f015 0506 	ands.w	r5, r5, #6
 8013450:	d106      	bne.n	8013460 <_printf_common+0x48>
 8013452:	f104 0a19 	add.w	sl, r4, #25
 8013456:	68e3      	ldr	r3, [r4, #12]
 8013458:	6832      	ldr	r2, [r6, #0]
 801345a:	1a9b      	subs	r3, r3, r2
 801345c:	42ab      	cmp	r3, r5
 801345e:	dc26      	bgt.n	80134ae <_printf_common+0x96>
 8013460:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013464:	6822      	ldr	r2, [r4, #0]
 8013466:	3b00      	subs	r3, #0
 8013468:	bf18      	it	ne
 801346a:	2301      	movne	r3, #1
 801346c:	0692      	lsls	r2, r2, #26
 801346e:	d42b      	bmi.n	80134c8 <_printf_common+0xb0>
 8013470:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013474:	4641      	mov	r1, r8
 8013476:	4638      	mov	r0, r7
 8013478:	47c8      	blx	r9
 801347a:	3001      	adds	r0, #1
 801347c:	d01e      	beq.n	80134bc <_printf_common+0xa4>
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	6922      	ldr	r2, [r4, #16]
 8013482:	f003 0306 	and.w	r3, r3, #6
 8013486:	2b04      	cmp	r3, #4
 8013488:	bf02      	ittt	eq
 801348a:	68e5      	ldreq	r5, [r4, #12]
 801348c:	6833      	ldreq	r3, [r6, #0]
 801348e:	1aed      	subeq	r5, r5, r3
 8013490:	68a3      	ldr	r3, [r4, #8]
 8013492:	bf0c      	ite	eq
 8013494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013498:	2500      	movne	r5, #0
 801349a:	4293      	cmp	r3, r2
 801349c:	bfc4      	itt	gt
 801349e:	1a9b      	subgt	r3, r3, r2
 80134a0:	18ed      	addgt	r5, r5, r3
 80134a2:	2600      	movs	r6, #0
 80134a4:	341a      	adds	r4, #26
 80134a6:	42b5      	cmp	r5, r6
 80134a8:	d11a      	bne.n	80134e0 <_printf_common+0xc8>
 80134aa:	2000      	movs	r0, #0
 80134ac:	e008      	b.n	80134c0 <_printf_common+0xa8>
 80134ae:	2301      	movs	r3, #1
 80134b0:	4652      	mov	r2, sl
 80134b2:	4641      	mov	r1, r8
 80134b4:	4638      	mov	r0, r7
 80134b6:	47c8      	blx	r9
 80134b8:	3001      	adds	r0, #1
 80134ba:	d103      	bne.n	80134c4 <_printf_common+0xac>
 80134bc:	f04f 30ff 	mov.w	r0, #4294967295
 80134c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134c4:	3501      	adds	r5, #1
 80134c6:	e7c6      	b.n	8013456 <_printf_common+0x3e>
 80134c8:	18e1      	adds	r1, r4, r3
 80134ca:	1c5a      	adds	r2, r3, #1
 80134cc:	2030      	movs	r0, #48	@ 0x30
 80134ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80134d2:	4422      	add	r2, r4
 80134d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80134d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80134dc:	3302      	adds	r3, #2
 80134de:	e7c7      	b.n	8013470 <_printf_common+0x58>
 80134e0:	2301      	movs	r3, #1
 80134e2:	4622      	mov	r2, r4
 80134e4:	4641      	mov	r1, r8
 80134e6:	4638      	mov	r0, r7
 80134e8:	47c8      	blx	r9
 80134ea:	3001      	adds	r0, #1
 80134ec:	d0e6      	beq.n	80134bc <_printf_common+0xa4>
 80134ee:	3601      	adds	r6, #1
 80134f0:	e7d9      	b.n	80134a6 <_printf_common+0x8e>
	...

080134f4 <_printf_i>:
 80134f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134f8:	7e0f      	ldrb	r7, [r1, #24]
 80134fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80134fc:	2f78      	cmp	r7, #120	@ 0x78
 80134fe:	4691      	mov	r9, r2
 8013500:	4680      	mov	r8, r0
 8013502:	460c      	mov	r4, r1
 8013504:	469a      	mov	sl, r3
 8013506:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801350a:	d807      	bhi.n	801351c <_printf_i+0x28>
 801350c:	2f62      	cmp	r7, #98	@ 0x62
 801350e:	d80a      	bhi.n	8013526 <_printf_i+0x32>
 8013510:	2f00      	cmp	r7, #0
 8013512:	f000 80d1 	beq.w	80136b8 <_printf_i+0x1c4>
 8013516:	2f58      	cmp	r7, #88	@ 0x58
 8013518:	f000 80b8 	beq.w	801368c <_printf_i+0x198>
 801351c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013520:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013524:	e03a      	b.n	801359c <_printf_i+0xa8>
 8013526:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801352a:	2b15      	cmp	r3, #21
 801352c:	d8f6      	bhi.n	801351c <_printf_i+0x28>
 801352e:	a101      	add	r1, pc, #4	@ (adr r1, 8013534 <_printf_i+0x40>)
 8013530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013534:	0801358d 	.word	0x0801358d
 8013538:	080135a1 	.word	0x080135a1
 801353c:	0801351d 	.word	0x0801351d
 8013540:	0801351d 	.word	0x0801351d
 8013544:	0801351d 	.word	0x0801351d
 8013548:	0801351d 	.word	0x0801351d
 801354c:	080135a1 	.word	0x080135a1
 8013550:	0801351d 	.word	0x0801351d
 8013554:	0801351d 	.word	0x0801351d
 8013558:	0801351d 	.word	0x0801351d
 801355c:	0801351d 	.word	0x0801351d
 8013560:	0801369f 	.word	0x0801369f
 8013564:	080135cb 	.word	0x080135cb
 8013568:	08013659 	.word	0x08013659
 801356c:	0801351d 	.word	0x0801351d
 8013570:	0801351d 	.word	0x0801351d
 8013574:	080136c1 	.word	0x080136c1
 8013578:	0801351d 	.word	0x0801351d
 801357c:	080135cb 	.word	0x080135cb
 8013580:	0801351d 	.word	0x0801351d
 8013584:	0801351d 	.word	0x0801351d
 8013588:	08013661 	.word	0x08013661
 801358c:	6833      	ldr	r3, [r6, #0]
 801358e:	1d1a      	adds	r2, r3, #4
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	6032      	str	r2, [r6, #0]
 8013594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013598:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801359c:	2301      	movs	r3, #1
 801359e:	e09c      	b.n	80136da <_printf_i+0x1e6>
 80135a0:	6833      	ldr	r3, [r6, #0]
 80135a2:	6820      	ldr	r0, [r4, #0]
 80135a4:	1d19      	adds	r1, r3, #4
 80135a6:	6031      	str	r1, [r6, #0]
 80135a8:	0606      	lsls	r6, r0, #24
 80135aa:	d501      	bpl.n	80135b0 <_printf_i+0xbc>
 80135ac:	681d      	ldr	r5, [r3, #0]
 80135ae:	e003      	b.n	80135b8 <_printf_i+0xc4>
 80135b0:	0645      	lsls	r5, r0, #25
 80135b2:	d5fb      	bpl.n	80135ac <_printf_i+0xb8>
 80135b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80135b8:	2d00      	cmp	r5, #0
 80135ba:	da03      	bge.n	80135c4 <_printf_i+0xd0>
 80135bc:	232d      	movs	r3, #45	@ 0x2d
 80135be:	426d      	negs	r5, r5
 80135c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135c4:	4858      	ldr	r0, [pc, #352]	@ (8013728 <_printf_i+0x234>)
 80135c6:	230a      	movs	r3, #10
 80135c8:	e011      	b.n	80135ee <_printf_i+0xfa>
 80135ca:	6821      	ldr	r1, [r4, #0]
 80135cc:	6833      	ldr	r3, [r6, #0]
 80135ce:	0608      	lsls	r0, r1, #24
 80135d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80135d4:	d402      	bmi.n	80135dc <_printf_i+0xe8>
 80135d6:	0649      	lsls	r1, r1, #25
 80135d8:	bf48      	it	mi
 80135da:	b2ad      	uxthmi	r5, r5
 80135dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80135de:	4852      	ldr	r0, [pc, #328]	@ (8013728 <_printf_i+0x234>)
 80135e0:	6033      	str	r3, [r6, #0]
 80135e2:	bf14      	ite	ne
 80135e4:	230a      	movne	r3, #10
 80135e6:	2308      	moveq	r3, #8
 80135e8:	2100      	movs	r1, #0
 80135ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80135ee:	6866      	ldr	r6, [r4, #4]
 80135f0:	60a6      	str	r6, [r4, #8]
 80135f2:	2e00      	cmp	r6, #0
 80135f4:	db05      	blt.n	8013602 <_printf_i+0x10e>
 80135f6:	6821      	ldr	r1, [r4, #0]
 80135f8:	432e      	orrs	r6, r5
 80135fa:	f021 0104 	bic.w	r1, r1, #4
 80135fe:	6021      	str	r1, [r4, #0]
 8013600:	d04b      	beq.n	801369a <_printf_i+0x1a6>
 8013602:	4616      	mov	r6, r2
 8013604:	fbb5 f1f3 	udiv	r1, r5, r3
 8013608:	fb03 5711 	mls	r7, r3, r1, r5
 801360c:	5dc7      	ldrb	r7, [r0, r7]
 801360e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013612:	462f      	mov	r7, r5
 8013614:	42bb      	cmp	r3, r7
 8013616:	460d      	mov	r5, r1
 8013618:	d9f4      	bls.n	8013604 <_printf_i+0x110>
 801361a:	2b08      	cmp	r3, #8
 801361c:	d10b      	bne.n	8013636 <_printf_i+0x142>
 801361e:	6823      	ldr	r3, [r4, #0]
 8013620:	07df      	lsls	r7, r3, #31
 8013622:	d508      	bpl.n	8013636 <_printf_i+0x142>
 8013624:	6923      	ldr	r3, [r4, #16]
 8013626:	6861      	ldr	r1, [r4, #4]
 8013628:	4299      	cmp	r1, r3
 801362a:	bfde      	ittt	le
 801362c:	2330      	movle	r3, #48	@ 0x30
 801362e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013632:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013636:	1b92      	subs	r2, r2, r6
 8013638:	6122      	str	r2, [r4, #16]
 801363a:	f8cd a000 	str.w	sl, [sp]
 801363e:	464b      	mov	r3, r9
 8013640:	aa03      	add	r2, sp, #12
 8013642:	4621      	mov	r1, r4
 8013644:	4640      	mov	r0, r8
 8013646:	f7ff fee7 	bl	8013418 <_printf_common>
 801364a:	3001      	adds	r0, #1
 801364c:	d14a      	bne.n	80136e4 <_printf_i+0x1f0>
 801364e:	f04f 30ff 	mov.w	r0, #4294967295
 8013652:	b004      	add	sp, #16
 8013654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	f043 0320 	orr.w	r3, r3, #32
 801365e:	6023      	str	r3, [r4, #0]
 8013660:	4832      	ldr	r0, [pc, #200]	@ (801372c <_printf_i+0x238>)
 8013662:	2778      	movs	r7, #120	@ 0x78
 8013664:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013668:	6823      	ldr	r3, [r4, #0]
 801366a:	6831      	ldr	r1, [r6, #0]
 801366c:	061f      	lsls	r7, r3, #24
 801366e:	f851 5b04 	ldr.w	r5, [r1], #4
 8013672:	d402      	bmi.n	801367a <_printf_i+0x186>
 8013674:	065f      	lsls	r7, r3, #25
 8013676:	bf48      	it	mi
 8013678:	b2ad      	uxthmi	r5, r5
 801367a:	6031      	str	r1, [r6, #0]
 801367c:	07d9      	lsls	r1, r3, #31
 801367e:	bf44      	itt	mi
 8013680:	f043 0320 	orrmi.w	r3, r3, #32
 8013684:	6023      	strmi	r3, [r4, #0]
 8013686:	b11d      	cbz	r5, 8013690 <_printf_i+0x19c>
 8013688:	2310      	movs	r3, #16
 801368a:	e7ad      	b.n	80135e8 <_printf_i+0xf4>
 801368c:	4826      	ldr	r0, [pc, #152]	@ (8013728 <_printf_i+0x234>)
 801368e:	e7e9      	b.n	8013664 <_printf_i+0x170>
 8013690:	6823      	ldr	r3, [r4, #0]
 8013692:	f023 0320 	bic.w	r3, r3, #32
 8013696:	6023      	str	r3, [r4, #0]
 8013698:	e7f6      	b.n	8013688 <_printf_i+0x194>
 801369a:	4616      	mov	r6, r2
 801369c:	e7bd      	b.n	801361a <_printf_i+0x126>
 801369e:	6833      	ldr	r3, [r6, #0]
 80136a0:	6825      	ldr	r5, [r4, #0]
 80136a2:	6961      	ldr	r1, [r4, #20]
 80136a4:	1d18      	adds	r0, r3, #4
 80136a6:	6030      	str	r0, [r6, #0]
 80136a8:	062e      	lsls	r6, r5, #24
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	d501      	bpl.n	80136b2 <_printf_i+0x1be>
 80136ae:	6019      	str	r1, [r3, #0]
 80136b0:	e002      	b.n	80136b8 <_printf_i+0x1c4>
 80136b2:	0668      	lsls	r0, r5, #25
 80136b4:	d5fb      	bpl.n	80136ae <_printf_i+0x1ba>
 80136b6:	8019      	strh	r1, [r3, #0]
 80136b8:	2300      	movs	r3, #0
 80136ba:	6123      	str	r3, [r4, #16]
 80136bc:	4616      	mov	r6, r2
 80136be:	e7bc      	b.n	801363a <_printf_i+0x146>
 80136c0:	6833      	ldr	r3, [r6, #0]
 80136c2:	1d1a      	adds	r2, r3, #4
 80136c4:	6032      	str	r2, [r6, #0]
 80136c6:	681e      	ldr	r6, [r3, #0]
 80136c8:	6862      	ldr	r2, [r4, #4]
 80136ca:	2100      	movs	r1, #0
 80136cc:	4630      	mov	r0, r6
 80136ce:	f7ec fd8f 	bl	80001f0 <memchr>
 80136d2:	b108      	cbz	r0, 80136d8 <_printf_i+0x1e4>
 80136d4:	1b80      	subs	r0, r0, r6
 80136d6:	6060      	str	r0, [r4, #4]
 80136d8:	6863      	ldr	r3, [r4, #4]
 80136da:	6123      	str	r3, [r4, #16]
 80136dc:	2300      	movs	r3, #0
 80136de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136e2:	e7aa      	b.n	801363a <_printf_i+0x146>
 80136e4:	6923      	ldr	r3, [r4, #16]
 80136e6:	4632      	mov	r2, r6
 80136e8:	4649      	mov	r1, r9
 80136ea:	4640      	mov	r0, r8
 80136ec:	47d0      	blx	sl
 80136ee:	3001      	adds	r0, #1
 80136f0:	d0ad      	beq.n	801364e <_printf_i+0x15a>
 80136f2:	6823      	ldr	r3, [r4, #0]
 80136f4:	079b      	lsls	r3, r3, #30
 80136f6:	d413      	bmi.n	8013720 <_printf_i+0x22c>
 80136f8:	68e0      	ldr	r0, [r4, #12]
 80136fa:	9b03      	ldr	r3, [sp, #12]
 80136fc:	4298      	cmp	r0, r3
 80136fe:	bfb8      	it	lt
 8013700:	4618      	movlt	r0, r3
 8013702:	e7a6      	b.n	8013652 <_printf_i+0x15e>
 8013704:	2301      	movs	r3, #1
 8013706:	4632      	mov	r2, r6
 8013708:	4649      	mov	r1, r9
 801370a:	4640      	mov	r0, r8
 801370c:	47d0      	blx	sl
 801370e:	3001      	adds	r0, #1
 8013710:	d09d      	beq.n	801364e <_printf_i+0x15a>
 8013712:	3501      	adds	r5, #1
 8013714:	68e3      	ldr	r3, [r4, #12]
 8013716:	9903      	ldr	r1, [sp, #12]
 8013718:	1a5b      	subs	r3, r3, r1
 801371a:	42ab      	cmp	r3, r5
 801371c:	dcf2      	bgt.n	8013704 <_printf_i+0x210>
 801371e:	e7eb      	b.n	80136f8 <_printf_i+0x204>
 8013720:	2500      	movs	r5, #0
 8013722:	f104 0619 	add.w	r6, r4, #25
 8013726:	e7f5      	b.n	8013714 <_printf_i+0x220>
 8013728:	08014937 	.word	0x08014937
 801372c:	08014948 	.word	0x08014948

08013730 <__sflush_r>:
 8013730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013738:	0716      	lsls	r6, r2, #28
 801373a:	4605      	mov	r5, r0
 801373c:	460c      	mov	r4, r1
 801373e:	d454      	bmi.n	80137ea <__sflush_r+0xba>
 8013740:	684b      	ldr	r3, [r1, #4]
 8013742:	2b00      	cmp	r3, #0
 8013744:	dc02      	bgt.n	801374c <__sflush_r+0x1c>
 8013746:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013748:	2b00      	cmp	r3, #0
 801374a:	dd48      	ble.n	80137de <__sflush_r+0xae>
 801374c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801374e:	2e00      	cmp	r6, #0
 8013750:	d045      	beq.n	80137de <__sflush_r+0xae>
 8013752:	2300      	movs	r3, #0
 8013754:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013758:	682f      	ldr	r7, [r5, #0]
 801375a:	6a21      	ldr	r1, [r4, #32]
 801375c:	602b      	str	r3, [r5, #0]
 801375e:	d030      	beq.n	80137c2 <__sflush_r+0x92>
 8013760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013762:	89a3      	ldrh	r3, [r4, #12]
 8013764:	0759      	lsls	r1, r3, #29
 8013766:	d505      	bpl.n	8013774 <__sflush_r+0x44>
 8013768:	6863      	ldr	r3, [r4, #4]
 801376a:	1ad2      	subs	r2, r2, r3
 801376c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801376e:	b10b      	cbz	r3, 8013774 <__sflush_r+0x44>
 8013770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013772:	1ad2      	subs	r2, r2, r3
 8013774:	2300      	movs	r3, #0
 8013776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013778:	6a21      	ldr	r1, [r4, #32]
 801377a:	4628      	mov	r0, r5
 801377c:	47b0      	blx	r6
 801377e:	1c43      	adds	r3, r0, #1
 8013780:	89a3      	ldrh	r3, [r4, #12]
 8013782:	d106      	bne.n	8013792 <__sflush_r+0x62>
 8013784:	6829      	ldr	r1, [r5, #0]
 8013786:	291d      	cmp	r1, #29
 8013788:	d82b      	bhi.n	80137e2 <__sflush_r+0xb2>
 801378a:	4a2a      	ldr	r2, [pc, #168]	@ (8013834 <__sflush_r+0x104>)
 801378c:	40ca      	lsrs	r2, r1
 801378e:	07d6      	lsls	r6, r2, #31
 8013790:	d527      	bpl.n	80137e2 <__sflush_r+0xb2>
 8013792:	2200      	movs	r2, #0
 8013794:	6062      	str	r2, [r4, #4]
 8013796:	04d9      	lsls	r1, r3, #19
 8013798:	6922      	ldr	r2, [r4, #16]
 801379a:	6022      	str	r2, [r4, #0]
 801379c:	d504      	bpl.n	80137a8 <__sflush_r+0x78>
 801379e:	1c42      	adds	r2, r0, #1
 80137a0:	d101      	bne.n	80137a6 <__sflush_r+0x76>
 80137a2:	682b      	ldr	r3, [r5, #0]
 80137a4:	b903      	cbnz	r3, 80137a8 <__sflush_r+0x78>
 80137a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80137a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137aa:	602f      	str	r7, [r5, #0]
 80137ac:	b1b9      	cbz	r1, 80137de <__sflush_r+0xae>
 80137ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137b2:	4299      	cmp	r1, r3
 80137b4:	d002      	beq.n	80137bc <__sflush_r+0x8c>
 80137b6:	4628      	mov	r0, r5
 80137b8:	f7ff fca2 	bl	8013100 <_free_r>
 80137bc:	2300      	movs	r3, #0
 80137be:	6363      	str	r3, [r4, #52]	@ 0x34
 80137c0:	e00d      	b.n	80137de <__sflush_r+0xae>
 80137c2:	2301      	movs	r3, #1
 80137c4:	4628      	mov	r0, r5
 80137c6:	47b0      	blx	r6
 80137c8:	4602      	mov	r2, r0
 80137ca:	1c50      	adds	r0, r2, #1
 80137cc:	d1c9      	bne.n	8013762 <__sflush_r+0x32>
 80137ce:	682b      	ldr	r3, [r5, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d0c6      	beq.n	8013762 <__sflush_r+0x32>
 80137d4:	2b1d      	cmp	r3, #29
 80137d6:	d001      	beq.n	80137dc <__sflush_r+0xac>
 80137d8:	2b16      	cmp	r3, #22
 80137da:	d11e      	bne.n	801381a <__sflush_r+0xea>
 80137dc:	602f      	str	r7, [r5, #0]
 80137de:	2000      	movs	r0, #0
 80137e0:	e022      	b.n	8013828 <__sflush_r+0xf8>
 80137e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137e6:	b21b      	sxth	r3, r3
 80137e8:	e01b      	b.n	8013822 <__sflush_r+0xf2>
 80137ea:	690f      	ldr	r7, [r1, #16]
 80137ec:	2f00      	cmp	r7, #0
 80137ee:	d0f6      	beq.n	80137de <__sflush_r+0xae>
 80137f0:	0793      	lsls	r3, r2, #30
 80137f2:	680e      	ldr	r6, [r1, #0]
 80137f4:	bf08      	it	eq
 80137f6:	694b      	ldreq	r3, [r1, #20]
 80137f8:	600f      	str	r7, [r1, #0]
 80137fa:	bf18      	it	ne
 80137fc:	2300      	movne	r3, #0
 80137fe:	eba6 0807 	sub.w	r8, r6, r7
 8013802:	608b      	str	r3, [r1, #8]
 8013804:	f1b8 0f00 	cmp.w	r8, #0
 8013808:	dde9      	ble.n	80137de <__sflush_r+0xae>
 801380a:	6a21      	ldr	r1, [r4, #32]
 801380c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801380e:	4643      	mov	r3, r8
 8013810:	463a      	mov	r2, r7
 8013812:	4628      	mov	r0, r5
 8013814:	47b0      	blx	r6
 8013816:	2800      	cmp	r0, #0
 8013818:	dc08      	bgt.n	801382c <__sflush_r+0xfc>
 801381a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801381e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013822:	81a3      	strh	r3, [r4, #12]
 8013824:	f04f 30ff 	mov.w	r0, #4294967295
 8013828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801382c:	4407      	add	r7, r0
 801382e:	eba8 0800 	sub.w	r8, r8, r0
 8013832:	e7e7      	b.n	8013804 <__sflush_r+0xd4>
 8013834:	20400001 	.word	0x20400001

08013838 <_fflush_r>:
 8013838:	b538      	push	{r3, r4, r5, lr}
 801383a:	690b      	ldr	r3, [r1, #16]
 801383c:	4605      	mov	r5, r0
 801383e:	460c      	mov	r4, r1
 8013840:	b913      	cbnz	r3, 8013848 <_fflush_r+0x10>
 8013842:	2500      	movs	r5, #0
 8013844:	4628      	mov	r0, r5
 8013846:	bd38      	pop	{r3, r4, r5, pc}
 8013848:	b118      	cbz	r0, 8013852 <_fflush_r+0x1a>
 801384a:	6a03      	ldr	r3, [r0, #32]
 801384c:	b90b      	cbnz	r3, 8013852 <_fflush_r+0x1a>
 801384e:	f7ff fa91 	bl	8012d74 <__sinit>
 8013852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d0f3      	beq.n	8013842 <_fflush_r+0xa>
 801385a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801385c:	07d0      	lsls	r0, r2, #31
 801385e:	d404      	bmi.n	801386a <_fflush_r+0x32>
 8013860:	0599      	lsls	r1, r3, #22
 8013862:	d402      	bmi.n	801386a <_fflush_r+0x32>
 8013864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013866:	f7ff fbde 	bl	8013026 <__retarget_lock_acquire_recursive>
 801386a:	4628      	mov	r0, r5
 801386c:	4621      	mov	r1, r4
 801386e:	f7ff ff5f 	bl	8013730 <__sflush_r>
 8013872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013874:	07da      	lsls	r2, r3, #31
 8013876:	4605      	mov	r5, r0
 8013878:	d4e4      	bmi.n	8013844 <_fflush_r+0xc>
 801387a:	89a3      	ldrh	r3, [r4, #12]
 801387c:	059b      	lsls	r3, r3, #22
 801387e:	d4e1      	bmi.n	8013844 <_fflush_r+0xc>
 8013880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013882:	f7ff fbd1 	bl	8013028 <__retarget_lock_release_recursive>
 8013886:	e7dd      	b.n	8013844 <_fflush_r+0xc>

08013888 <__swbuf_r>:
 8013888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801388a:	460e      	mov	r6, r1
 801388c:	4614      	mov	r4, r2
 801388e:	4605      	mov	r5, r0
 8013890:	b118      	cbz	r0, 801389a <__swbuf_r+0x12>
 8013892:	6a03      	ldr	r3, [r0, #32]
 8013894:	b90b      	cbnz	r3, 801389a <__swbuf_r+0x12>
 8013896:	f7ff fa6d 	bl	8012d74 <__sinit>
 801389a:	69a3      	ldr	r3, [r4, #24]
 801389c:	60a3      	str	r3, [r4, #8]
 801389e:	89a3      	ldrh	r3, [r4, #12]
 80138a0:	071a      	lsls	r2, r3, #28
 80138a2:	d501      	bpl.n	80138a8 <__swbuf_r+0x20>
 80138a4:	6923      	ldr	r3, [r4, #16]
 80138a6:	b943      	cbnz	r3, 80138ba <__swbuf_r+0x32>
 80138a8:	4621      	mov	r1, r4
 80138aa:	4628      	mov	r0, r5
 80138ac:	f000 f82a 	bl	8013904 <__swsetup_r>
 80138b0:	b118      	cbz	r0, 80138ba <__swbuf_r+0x32>
 80138b2:	f04f 37ff 	mov.w	r7, #4294967295
 80138b6:	4638      	mov	r0, r7
 80138b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ba:	6823      	ldr	r3, [r4, #0]
 80138bc:	6922      	ldr	r2, [r4, #16]
 80138be:	1a98      	subs	r0, r3, r2
 80138c0:	6963      	ldr	r3, [r4, #20]
 80138c2:	b2f6      	uxtb	r6, r6
 80138c4:	4283      	cmp	r3, r0
 80138c6:	4637      	mov	r7, r6
 80138c8:	dc05      	bgt.n	80138d6 <__swbuf_r+0x4e>
 80138ca:	4621      	mov	r1, r4
 80138cc:	4628      	mov	r0, r5
 80138ce:	f7ff ffb3 	bl	8013838 <_fflush_r>
 80138d2:	2800      	cmp	r0, #0
 80138d4:	d1ed      	bne.n	80138b2 <__swbuf_r+0x2a>
 80138d6:	68a3      	ldr	r3, [r4, #8]
 80138d8:	3b01      	subs	r3, #1
 80138da:	60a3      	str	r3, [r4, #8]
 80138dc:	6823      	ldr	r3, [r4, #0]
 80138de:	1c5a      	adds	r2, r3, #1
 80138e0:	6022      	str	r2, [r4, #0]
 80138e2:	701e      	strb	r6, [r3, #0]
 80138e4:	6962      	ldr	r2, [r4, #20]
 80138e6:	1c43      	adds	r3, r0, #1
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d004      	beq.n	80138f6 <__swbuf_r+0x6e>
 80138ec:	89a3      	ldrh	r3, [r4, #12]
 80138ee:	07db      	lsls	r3, r3, #31
 80138f0:	d5e1      	bpl.n	80138b6 <__swbuf_r+0x2e>
 80138f2:	2e0a      	cmp	r6, #10
 80138f4:	d1df      	bne.n	80138b6 <__swbuf_r+0x2e>
 80138f6:	4621      	mov	r1, r4
 80138f8:	4628      	mov	r0, r5
 80138fa:	f7ff ff9d 	bl	8013838 <_fflush_r>
 80138fe:	2800      	cmp	r0, #0
 8013900:	d0d9      	beq.n	80138b6 <__swbuf_r+0x2e>
 8013902:	e7d6      	b.n	80138b2 <__swbuf_r+0x2a>

08013904 <__swsetup_r>:
 8013904:	b538      	push	{r3, r4, r5, lr}
 8013906:	4b29      	ldr	r3, [pc, #164]	@ (80139ac <__swsetup_r+0xa8>)
 8013908:	4605      	mov	r5, r0
 801390a:	6818      	ldr	r0, [r3, #0]
 801390c:	460c      	mov	r4, r1
 801390e:	b118      	cbz	r0, 8013918 <__swsetup_r+0x14>
 8013910:	6a03      	ldr	r3, [r0, #32]
 8013912:	b90b      	cbnz	r3, 8013918 <__swsetup_r+0x14>
 8013914:	f7ff fa2e 	bl	8012d74 <__sinit>
 8013918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801391c:	0719      	lsls	r1, r3, #28
 801391e:	d422      	bmi.n	8013966 <__swsetup_r+0x62>
 8013920:	06da      	lsls	r2, r3, #27
 8013922:	d407      	bmi.n	8013934 <__swsetup_r+0x30>
 8013924:	2209      	movs	r2, #9
 8013926:	602a      	str	r2, [r5, #0]
 8013928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801392c:	81a3      	strh	r3, [r4, #12]
 801392e:	f04f 30ff 	mov.w	r0, #4294967295
 8013932:	e033      	b.n	801399c <__swsetup_r+0x98>
 8013934:	0758      	lsls	r0, r3, #29
 8013936:	d512      	bpl.n	801395e <__swsetup_r+0x5a>
 8013938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801393a:	b141      	cbz	r1, 801394e <__swsetup_r+0x4a>
 801393c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013940:	4299      	cmp	r1, r3
 8013942:	d002      	beq.n	801394a <__swsetup_r+0x46>
 8013944:	4628      	mov	r0, r5
 8013946:	f7ff fbdb 	bl	8013100 <_free_r>
 801394a:	2300      	movs	r3, #0
 801394c:	6363      	str	r3, [r4, #52]	@ 0x34
 801394e:	89a3      	ldrh	r3, [r4, #12]
 8013950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013954:	81a3      	strh	r3, [r4, #12]
 8013956:	2300      	movs	r3, #0
 8013958:	6063      	str	r3, [r4, #4]
 801395a:	6923      	ldr	r3, [r4, #16]
 801395c:	6023      	str	r3, [r4, #0]
 801395e:	89a3      	ldrh	r3, [r4, #12]
 8013960:	f043 0308 	orr.w	r3, r3, #8
 8013964:	81a3      	strh	r3, [r4, #12]
 8013966:	6923      	ldr	r3, [r4, #16]
 8013968:	b94b      	cbnz	r3, 801397e <__swsetup_r+0x7a>
 801396a:	89a3      	ldrh	r3, [r4, #12]
 801396c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013974:	d003      	beq.n	801397e <__swsetup_r+0x7a>
 8013976:	4621      	mov	r1, r4
 8013978:	4628      	mov	r0, r5
 801397a:	f000 f83f 	bl	80139fc <__smakebuf_r>
 801397e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013982:	f013 0201 	ands.w	r2, r3, #1
 8013986:	d00a      	beq.n	801399e <__swsetup_r+0x9a>
 8013988:	2200      	movs	r2, #0
 801398a:	60a2      	str	r2, [r4, #8]
 801398c:	6962      	ldr	r2, [r4, #20]
 801398e:	4252      	negs	r2, r2
 8013990:	61a2      	str	r2, [r4, #24]
 8013992:	6922      	ldr	r2, [r4, #16]
 8013994:	b942      	cbnz	r2, 80139a8 <__swsetup_r+0xa4>
 8013996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801399a:	d1c5      	bne.n	8013928 <__swsetup_r+0x24>
 801399c:	bd38      	pop	{r3, r4, r5, pc}
 801399e:	0799      	lsls	r1, r3, #30
 80139a0:	bf58      	it	pl
 80139a2:	6962      	ldrpl	r2, [r4, #20]
 80139a4:	60a2      	str	r2, [r4, #8]
 80139a6:	e7f4      	b.n	8013992 <__swsetup_r+0x8e>
 80139a8:	2000      	movs	r0, #0
 80139aa:	e7f7      	b.n	801399c <__swsetup_r+0x98>
 80139ac:	2000009c 	.word	0x2000009c

080139b0 <__swhatbuf_r>:
 80139b0:	b570      	push	{r4, r5, r6, lr}
 80139b2:	460c      	mov	r4, r1
 80139b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139b8:	2900      	cmp	r1, #0
 80139ba:	b096      	sub	sp, #88	@ 0x58
 80139bc:	4615      	mov	r5, r2
 80139be:	461e      	mov	r6, r3
 80139c0:	da0d      	bge.n	80139de <__swhatbuf_r+0x2e>
 80139c2:	89a3      	ldrh	r3, [r4, #12]
 80139c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80139c8:	f04f 0100 	mov.w	r1, #0
 80139cc:	bf14      	ite	ne
 80139ce:	2340      	movne	r3, #64	@ 0x40
 80139d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80139d4:	2000      	movs	r0, #0
 80139d6:	6031      	str	r1, [r6, #0]
 80139d8:	602b      	str	r3, [r5, #0]
 80139da:	b016      	add	sp, #88	@ 0x58
 80139dc:	bd70      	pop	{r4, r5, r6, pc}
 80139de:	466a      	mov	r2, sp
 80139e0:	f000 f848 	bl	8013a74 <_fstat_r>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	dbec      	blt.n	80139c2 <__swhatbuf_r+0x12>
 80139e8:	9901      	ldr	r1, [sp, #4]
 80139ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80139ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80139f2:	4259      	negs	r1, r3
 80139f4:	4159      	adcs	r1, r3
 80139f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80139fa:	e7eb      	b.n	80139d4 <__swhatbuf_r+0x24>

080139fc <__smakebuf_r>:
 80139fc:	898b      	ldrh	r3, [r1, #12]
 80139fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a00:	079d      	lsls	r5, r3, #30
 8013a02:	4606      	mov	r6, r0
 8013a04:	460c      	mov	r4, r1
 8013a06:	d507      	bpl.n	8013a18 <__smakebuf_r+0x1c>
 8013a08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013a0c:	6023      	str	r3, [r4, #0]
 8013a0e:	6123      	str	r3, [r4, #16]
 8013a10:	2301      	movs	r3, #1
 8013a12:	6163      	str	r3, [r4, #20]
 8013a14:	b003      	add	sp, #12
 8013a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a18:	ab01      	add	r3, sp, #4
 8013a1a:	466a      	mov	r2, sp
 8013a1c:	f7ff ffc8 	bl	80139b0 <__swhatbuf_r>
 8013a20:	9f00      	ldr	r7, [sp, #0]
 8013a22:	4605      	mov	r5, r0
 8013a24:	4639      	mov	r1, r7
 8013a26:	4630      	mov	r0, r6
 8013a28:	f7ff f87e 	bl	8012b28 <_malloc_r>
 8013a2c:	b948      	cbnz	r0, 8013a42 <__smakebuf_r+0x46>
 8013a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a32:	059a      	lsls	r2, r3, #22
 8013a34:	d4ee      	bmi.n	8013a14 <__smakebuf_r+0x18>
 8013a36:	f023 0303 	bic.w	r3, r3, #3
 8013a3a:	f043 0302 	orr.w	r3, r3, #2
 8013a3e:	81a3      	strh	r3, [r4, #12]
 8013a40:	e7e2      	b.n	8013a08 <__smakebuf_r+0xc>
 8013a42:	89a3      	ldrh	r3, [r4, #12]
 8013a44:	6020      	str	r0, [r4, #0]
 8013a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a4a:	81a3      	strh	r3, [r4, #12]
 8013a4c:	9b01      	ldr	r3, [sp, #4]
 8013a4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013a52:	b15b      	cbz	r3, 8013a6c <__smakebuf_r+0x70>
 8013a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a58:	4630      	mov	r0, r6
 8013a5a:	f000 f81d 	bl	8013a98 <_isatty_r>
 8013a5e:	b128      	cbz	r0, 8013a6c <__smakebuf_r+0x70>
 8013a60:	89a3      	ldrh	r3, [r4, #12]
 8013a62:	f023 0303 	bic.w	r3, r3, #3
 8013a66:	f043 0301 	orr.w	r3, r3, #1
 8013a6a:	81a3      	strh	r3, [r4, #12]
 8013a6c:	89a3      	ldrh	r3, [r4, #12]
 8013a6e:	431d      	orrs	r5, r3
 8013a70:	81a5      	strh	r5, [r4, #12]
 8013a72:	e7cf      	b.n	8013a14 <__smakebuf_r+0x18>

08013a74 <_fstat_r>:
 8013a74:	b538      	push	{r3, r4, r5, lr}
 8013a76:	4d07      	ldr	r5, [pc, #28]	@ (8013a94 <_fstat_r+0x20>)
 8013a78:	2300      	movs	r3, #0
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	4608      	mov	r0, r1
 8013a7e:	4611      	mov	r1, r2
 8013a80:	602b      	str	r3, [r5, #0]
 8013a82:	f7ed ff55 	bl	8001930 <_fstat>
 8013a86:	1c43      	adds	r3, r0, #1
 8013a88:	d102      	bne.n	8013a90 <_fstat_r+0x1c>
 8013a8a:	682b      	ldr	r3, [r5, #0]
 8013a8c:	b103      	cbz	r3, 8013a90 <_fstat_r+0x1c>
 8013a8e:	6023      	str	r3, [r4, #0]
 8013a90:	bd38      	pop	{r3, r4, r5, pc}
 8013a92:	bf00      	nop
 8013a94:	2001560c 	.word	0x2001560c

08013a98 <_isatty_r>:
 8013a98:	b538      	push	{r3, r4, r5, lr}
 8013a9a:	4d06      	ldr	r5, [pc, #24]	@ (8013ab4 <_isatty_r+0x1c>)
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	4608      	mov	r0, r1
 8013aa2:	602b      	str	r3, [r5, #0]
 8013aa4:	f7ed ff49 	bl	800193a <_isatty>
 8013aa8:	1c43      	adds	r3, r0, #1
 8013aaa:	d102      	bne.n	8013ab2 <_isatty_r+0x1a>
 8013aac:	682b      	ldr	r3, [r5, #0]
 8013aae:	b103      	cbz	r3, 8013ab2 <_isatty_r+0x1a>
 8013ab0:	6023      	str	r3, [r4, #0]
 8013ab2:	bd38      	pop	{r3, r4, r5, pc}
 8013ab4:	2001560c 	.word	0x2001560c

08013ab8 <_init>:
 8013ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aba:	bf00      	nop
 8013abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013abe:	bc08      	pop	{r3}
 8013ac0:	469e      	mov	lr, r3
 8013ac2:	4770      	bx	lr

08013ac4 <_fini>:
 8013ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac6:	bf00      	nop
 8013ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aca:	bc08      	pop	{r3}
 8013acc:	469e      	mov	lr, r3
 8013ace:	4770      	bx	lr
