
Simple Racing Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b50  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016ac  08010d00  08010d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  080123ac  080123ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08012554  08012554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000e  0801256c  0801256c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 000d1b60  0801257c  0801257c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080e40dc  080e40dc  000e60f0  2**0
                  CONTENTS
  8 .ARM          00000008  080e40dc  080e40dc  000e50dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080e40e4  080e40e4  000e60f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080e40e4  080e40e4  000e50e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080e40f8  080e40f8  000e50f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080e4100  000e6000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000126b0  200000f0  080e41f0  000e60f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001400  200127a0  080e41f0  000e67a0  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000e60f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000e7000  2**2
                  ALLOC
 17 .debug_line   000491a7  00000000  00000000  000e6120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000063  00000000  00000000  0012f2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   00099f86  00000000  00000000  0012f32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00012b44  00000000  00000000  001c92b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00002c98  00000000  00000000  001dbdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010d6bd  00000000  00000000  001dea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00002f52  00000000  00000000  002ec14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 00016486  00000000  00000000  002ef09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0002f428  00000000  00000000  00305525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0033494d  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00007c8c  00000000  00000000  00334a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010ce8 	.word	0x08010ce8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	08010ce8 	.word	0x08010ce8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005b8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000584:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000596:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
  ldr  r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	@ (80005c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800059e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005aa:	f003 f957 	bl	800385c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f00f fe2b 	bl	8010208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b2:	f000 feb7 	bl	8001324 <main>
  bx  lr    
 80005b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005bc:	080e4100 	.word	0x080e4100
  ldr  r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005c4:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 80005c8:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 80005cc:	200127a0 	.word	0x200127a0

080005d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC_IRQHandler>

080005d2 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80005d2:	f000 bcb9 	b.w	8000f48 <touchgfx_init>

080005d6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80005d6:	f000 bd27 	b.w	8001028 <touchgfx_taskEntry>

080005da <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80005da:	4770      	bx	lr

080005dc <_ZN20STM32TouchControllerD0Ev>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2104      	movs	r1, #4
 80005e0:	4604      	mov	r4, r0
 80005e2:	f00f fb33 	bl	800fc4c <_ZdlPvj>
 80005e6:	4620      	mov	r0, r4
 80005e8:	bd10      	pop	{r4, pc}
	...

080005ec <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005f0:	4c0c      	ldr	r4, [pc, #48]	@ (8000624 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 80005f2:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005f6:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 80005f8:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	4798      	blx	r3
 80005fe:	f640 0311 	movw	r3, #2065	@ 0x811
 8000602:	4298      	cmp	r0, r3
 8000604:	d10a      	bne.n	800061c <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8000606:	4d09      	ldr	r5, [pc, #36]	@ (800062c <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8000608:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 800060a:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 800060c:	2082      	movs	r0, #130	@ 0x82
 800060e:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	2082      	movs	r0, #130	@ 0x82
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	4798      	blx	r3
 8000618:	2000      	movs	r0, #0
    }

    return ret;
}
 800061a:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 800061c:	2001      	movs	r0, #1
 800061e:	e7fc      	b.n	800061a <_Z11BSP_TS_Inittt+0x2e>
 8000620:	20000116 	.word	0x20000116
 8000624:	2000004c 	.word	0x2000004c
 8000628:	20000114 	.word	0x20000114
 800062c:	20000118 	.word	0x20000118

08000630 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 8000630:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000634:	20f0      	movs	r0, #240	@ 0xf0
 8000636:	f7ff bfd9 	b.w	80005ec <_Z11BSP_TS_Inittt>
	...

0800063c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800063c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800063e:	4d33      	ldr	r5, [pc, #204]	@ (800070c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd0>)
 8000640:	682b      	ldr	r3, [r5, #0]
{
 8000642:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	2082      	movs	r0, #130	@ 0x82
 8000648:	4798      	blx	r3
 800064a:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 800064c:	2800      	cmp	r0, #0
 800064e:	d04a      	beq.n	80006e6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8000650:	682b      	ldr	r3, [r5, #0]
 8000652:	f10d 0206 	add.w	r2, sp, #6
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	a901      	add	r1, sp, #4
 800065a:	2082      	movs	r0, #130	@ 0x82
 800065c:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 800065e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000662:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000666:	4293      	cmp	r3, r2
 8000668:	d93f      	bls.n	80006ea <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xae>
        {
            y = 3700;
 800066a:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 800066e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000672:	1ad2      	subs	r2, r2, r3
 8000674:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 8000676:	2a0a      	cmp	r2, #10
 8000678:	d93d      	bls.n	80006f6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xba>
        yr = y / 11;
 800067a:	230b      	movs	r3, #11
 800067c:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd4>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d901      	bls.n	800068c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 8000688:	3b01      	subs	r3, #1
 800068a:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 800068c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000690:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000694:	428b      	cmp	r3, r1
 8000696:	d830      	bhi.n	80006fa <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbe>
        {
            x = 3870 - x;
 8000698:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 800069c:	330e      	adds	r3, #14
 800069e:	b29b      	uxth	r3, r3
        {
            x = 3800 - x;
        }

        /* X value second correction */
        xr = x / 15;
 80006a0:	210f      	movs	r1, #15
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
        /* Return X position value */
        if (xr <= 0)
        {
            xr = 0;
        }
        else if (xr > TsXBoundary)
 80006a6:	491b      	ldr	r1, [pc, #108]	@ (8000714 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 80006a8:	8809      	ldrh	r1, [r1, #0]
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d901      	bls.n	80006b2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
        {
            xr = TsXBoundary - 1;
 80006ae:	3901      	subs	r1, #1
 80006b0:	b28b      	uxth	r3, r1
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006b2:	4e19      	ldr	r6, [pc, #100]	@ (8000718 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006b4:	4d19      	ldr	r5, [pc, #100]	@ (800071c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006b6:	6830      	ldr	r0, [r6, #0]
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006b8:	682f      	ldr	r7, [r5, #0]
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006ba:	4283      	cmp	r3, r0
 80006bc:	b281      	uxth	r1, r0
 80006be:	bf8c      	ite	hi
 80006c0:	1a59      	subhi	r1, r3, r1
 80006c2:	1ac9      	subls	r1, r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006c4:	b2b8      	uxth	r0, r7
 80006c6:	42ba      	cmp	r2, r7
 80006c8:	bf8c      	ite	hi
 80006ca:	1a10      	subhi	r0, r2, r0
 80006cc:	1a80      	subls	r0, r0, r2
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006ce:	b289      	uxth	r1, r1
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006d0:	b280      	uxth	r0, r0

        if (xDiff + yDiff > 5)
 80006d2:	4401      	add	r1, r0
 80006d4:	2905      	cmp	r1, #5
        {
            _x = x;
 80006d6:	bfc8      	it	gt
 80006d8:	6033      	strgt	r3, [r6, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 80006da:	6833      	ldr	r3, [r6, #0]
            _y = y;
 80006dc:	bfc8      	it	gt
 80006de:	602a      	strgt	r2, [r5, #0]
        TsState->X = _x;
 80006e0:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 80006e2:	682b      	ldr	r3, [r5, #0]
 80006e4:	80a3      	strh	r3, [r4, #4]
    }
}
 80006e6:	b003      	add	sp, #12
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 80006ea:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 80006ec:	bf9c      	itt	ls
 80006ee:	23b4      	movls	r3, #180	@ 0xb4
 80006f0:	f8ad 3006 	strhls.w	r3, [sp, #6]
 80006f4:	e7bb      	b.n	800066e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 80006f6:	2200      	movs	r2, #0
 80006f8:	e7c8      	b.n	800068c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 80006fa:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80006fe:	3308      	adds	r3, #8
 8000700:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8000702:	2b0e      	cmp	r3, #14
 8000704:	d8cc      	bhi.n	80006a0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x64>
            xr = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e7d3      	b.n	80006b2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
 800070a:	bf00      	nop
 800070c:	20000118 	.word	0x20000118
 8000710:	20000114 	.word	0x20000114
 8000714:	20000116 	.word	0x20000116
 8000718:	20000110 	.word	0x20000110
 800071c:	2000010c 	.word	0x2000010c

08000720 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000720:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8000722:	4668      	mov	r0, sp
{
 8000724:	460d      	mov	r5, r1
 8000726:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8000728:	f7ff ff88 	bl	800063c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800072c:	f8bd 0000 	ldrh.w	r0, [sp]
 8000730:	b130      	cbz	r0, 8000740 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8000732:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000736:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8000738:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800073c:	6023      	str	r3, [r4, #0]
        return true;
 800073e:	2001      	movs	r0, #1
}
 8000740:	b003      	add	sp, #12
 8000742:	bd30      	pop	{r4, r5, pc}

08000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000744:	2803      	cmp	r0, #3
 8000746:	d821      	bhi.n	800078c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8000748:	e8df f000 	tbb	[pc, r0]
 800074c:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	0952      	lsrs	r2, r2, #5
 800075a:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 800075e:	f003 bb13 	b.w	8003d88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	fab2 f282 	clz	r2, r2
 800076a:	0952      	lsrs	r2, r2, #5
 800076c:	2108      	movs	r1, #8
 800076e:	e7f5      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	fab2 f282 	clz	r2, r2
 8000778:	0952      	lsrs	r2, r2, #5
 800077a:	2110      	movs	r1, #16
 800077c:	e7ee      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000780:	68da      	ldr	r2, [r3, #12]
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	0952      	lsrs	r2, r2, #5
 8000788:	2120      	movs	r1, #32
 800078a:	e7e7      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	2000011c 	.word	0x2000011c
 8000794:	40021000 	.word	0x40021000

08000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000798:	2803      	cmp	r0, #3
 800079a:	d821      	bhi.n	80007e0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 800079c:	e8df f000 	tbb	[pc, r0]
 80007a0:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	3a00      	subs	r2, #0
 80007aa:	bf18      	it	ne
 80007ac:	2201      	movne	r2, #1
 80007ae:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007b2:	f003 bae9 	b.w	8003d88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	3a00      	subs	r2, #0
 80007bc:	bf18      	it	ne
 80007be:	2201      	movne	r2, #1
 80007c0:	2108      	movs	r1, #8
 80007c2:	e7f5      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	3a00      	subs	r2, #0
 80007ca:	bf18      	it	ne
 80007cc:	2201      	movne	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	e7ee      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	3a00      	subs	r2, #0
 80007d8:	bf18      	it	ne
 80007da:	2201      	movne	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	e7e7      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000011c 	.word	0x2000011c
 80007e8:	40021000 	.word	0x40021000

080007ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80007ec:	2803      	cmp	r0, #3
 80007ee:	d80d      	bhi.n	800080c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 80007f0:	e8df f000 	tbb	[pc, r0]
 80007f4:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80007f8:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 80007fc:	f003 bac9 	b.w	8003d92 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000800:	2108      	movs	r1, #8
 8000802:	e7fa      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000804:	2110      	movs	r1, #16
 8000806:	e7f8      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000808:	2120      	movs	r1, #32
 800080a:	e7f6      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000814:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000816:	2803      	cmp	r0, #3
 8000818:	d811      	bhi.n	800083e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800081a:	e8df f000 	tbb	[pc, r0]
 800081e:	0a02      	.short	0x0a02
 8000820:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000822:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000824:	4807      	ldr	r0, [pc, #28]	@ (8000844 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8000826:	f003 faa9 	bl	8003d7c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800082a:	1e43      	subs	r3, r0, #1
 800082c:	4258      	negs	r0, r3
 800082e:	4158      	adcs	r0, r3
 8000830:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000832:	2108      	movs	r1, #8
 8000834:	e7f6      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000836:	2110      	movs	r1, #16
 8000838:	e7f4      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800083a:	2120      	movs	r1, #32
 800083c:	e7f2      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 800083e:	2000      	movs	r0, #0
 8000840:	e7f3      	b.n	800082a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <_ZN8touchgfx4GPIO4initEv>:
{
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4d08      	ldr	r5, [pc, #32]	@ (800086c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800084c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800084e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000850:	b2e0      	uxtb	r0, r4
 8000852:	f7ff ffdf 	bl	8000814 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000856:	b118      	cbz	r0, 8000860 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800085c:	bf18      	it	ne
 800085e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000860:	3401      	adds	r4, #1
 8000862:	2c05      	cmp	r4, #5
 8000864:	f105 0504 	add.w	r5, r5, #4
 8000868:	d1f2      	bne.n	8000850 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	2000011c 	.word	0x2000011c

08000870 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000870:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000872:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8000876:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 800087a:	4770      	bx	lr

0800087c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800087c:	2000      	movs	r0, #0
 800087e:	4770      	bx	lr

08000880 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000882:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000884:	3900      	subs	r1, #0
 8000886:	bf18      	it	ne
 8000888:	2101      	movne	r1, #1
 800088a:	7019      	strb	r1, [r3, #0]
    }
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	2001242b 	.word	0x2001242b

08000894 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000894:	2000      	movs	r0, #0
 8000896:	4770      	bx	lr

08000898 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000898:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800089a:	b10b      	cbz	r3, 80008a0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800089c:	4608      	mov	r0, r1
 800089e:	4718      	bx	r3
        }
    }
 80008a0:	4770      	bx	lr

080008a2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008a6:	4770      	bx	lr

080008a8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008a8:	6840      	ldr	r0, [r0, #4]
 80008aa:	6803      	ldr	r3, [r0, #0]
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4718      	bx	r3

080008b0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008b0:	4770      	bx	lr

080008b2 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008b2:	4770      	bx	lr

080008b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80008b4:	4770      	bx	lr
	...

080008b8 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80008bc:	f000 fc54 	bl	8001168 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 80008c8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 80008cc:	4620      	mov	r0, r4
 80008ce:	46ac      	mov	ip, r5
}
 80008d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 80008d4:	4760      	bx	ip
 80008d6:	bf00      	nop
 80008d8:	d0000000 	.word	0xd0000000

080008dc <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80008dc:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 80008de:	6803      	ldr	r3, [r0, #0]
{
 80008e0:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80008e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008e6:	4798      	blx	r3
    enableInterrupts();
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	4620      	mov	r0, r4
 80008ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80008ee:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80008f0:	f000 f8ec 	bl	8000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	4620      	mov	r0, r4
 80008f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80008fa:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 80008fc:	2029      	movs	r0, #41	@ 0x29
 80008fe:	f000 ff67 	bl	80017d0 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000902:	f000 f8e3 	bl	8000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	4620      	mov	r0, r4
 800090a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800090c:	4798      	blx	r3
    for (;;)
 800090e:	e7f8      	b.n	8000902 <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08000910 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000910:	b510      	push	{r4, lr}
 8000912:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000914:	f008 fb32 	bl	8008f7c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	4620      	mov	r0, r4
 800091c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8000920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000924:	4718      	bx	r3

08000926 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000926:	f000 bc11 	b.w	800114c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800092a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800092a:	f000 bc15 	b.w	8001158 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800092e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800092e:	f000 bc41 	b.w	80011b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08000932 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000932:	f000 bbe7 	b.w	8001104 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08000936 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000936:	f000 bc41 	b.w	80011bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800093a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800093a:	f000 bc49 	b.w	80011d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800093e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800093e:	f000 bbeb 	b.w	8001118 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08000942 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000942:	f007 bd7b 	b.w	800843c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000946 <_ZN11TouchGFXHALD0Ev>:
 8000946:	b510      	push	{r4, lr}
 8000948:	217c      	movs	r1, #124	@ 0x7c
 800094a:	4604      	mov	r4, r0
 800094c:	f00f f97e 	bl	800fc4c <_ZdlPvj>
 8000950:	4620      	mov	r0, r4
 8000952:	bd10      	pop	{r4, pc}

08000954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8000954:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000956:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 800095a:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8000960:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8000962:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000964:	d009      	beq.n	800097a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000966:	b93a      	cbnz	r2, 8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 800096a:	490b      	ldr	r1, [pc, #44]	@ (8000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800096c:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 800096e:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8000970:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000972:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8000974:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8000976:	701a      	strb	r2, [r3, #0]
    }
 8000978:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800097a:	2a00      	cmp	r2, #0
 800097c:	d0fc      	beq.n	8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000980:	4905      	ldr	r1, [pc, #20]	@ (8000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000982:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000984:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000986:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000988:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 800098a:	2200      	movs	r2, #0
 800098c:	e7f3      	b.n	8000976 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800098e:	bf00      	nop
 8000990:	20012424 	.word	0x20012424
 8000994:	20012420 	.word	0x20012420
 8000998:	20012422 	.word	0x20012422

0800099c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	460d      	mov	r5, r1
 80009a0:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80009a2:	b935      	cbnz	r5, 80009b2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80009aa:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80009ae:	f00f f97b 	bl	800fca8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80009b2:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80009b8:	3a00      	subs	r2, #0
 80009ba:	bf18      	it	ne
 80009bc:	2201      	movne	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80009c0:	6803      	ldr	r3, [r0, #0]
    }
 80009c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80009c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ca:	4718      	bx	r3
 80009cc:	08010d58 	.word	0x08010d58
 80009d0:	08010d90 	.word	0x08010d90
 80009d4:	08010dde 	.word	0x08010dde
 80009d8:	2001242a 	.word	0x2001242a

080009dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80009dc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d803      	bhi.n	80009ee <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d905      	bls.n	80009fa <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80009f4:	219e      	movs	r1, #158	@ 0x9e
 80009f6:	f00f f957 	bl	800fca8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80009fc:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000a00:	801a      	strh	r2, [r3, #0]
    }
 8000a02:	bd08      	pop	{r3, pc}
 8000a04:	20012420 	.word	0x20012420
 8000a08:	20012422 	.word	0x20012422
 8000a0c:	08010e23 	.word	0x08010e23
 8000a10:	08010e86 	.word	0x08010e86
 8000a14:	08010dde 	.word	0x08010dde
 8000a18:	20012426 	.word	0x20012426
 8000a1c:	20012428 	.word	0x20012428

08000a20 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000a20:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000a22:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000a26:	b118      	cbz	r0, 8000a30 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000a28:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000a2a:	6803      	ldr	r3, [r0, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4718      	bx	r3
    }
 8000a30:	4770      	bx	lr
	...

08000a34 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a34:	2101      	movs	r1, #1
{
 8000a36:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	f005 f9c5 	bl	8005dca <osSemaphoreNew>
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000a42:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000a44:	b928      	cbnz	r0, 8000a52 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a4a:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a4c:	480a      	ldr	r0, [pc, #40]	@ (8000a78 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000a4e:	f00f f92b 	bl	800fca8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2104      	movs	r1, #4
 8000a56:	2001      	movs	r0, #1
 8000a58:	f005 fa5f 	bl	8005f1a <osMessageQueueNew>
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000a5e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a60:	b918      	cbnz	r0, 8000a6a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a66:	212c      	movs	r1, #44	@ 0x2c
 8000a68:	e7f0      	b.n	8000a4c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000a6a:	bd08      	pop	{r3, pc}
 8000a6c:	20000130 	.word	0x20000130
 8000a70:	08010fa4 	.word	0x08010fa4
 8000a74:	08010fed 	.word	0x08010fed
 8000a78:	0801101c 	.word	0x0801101c
 8000a7c:	2000012c 	.word	0x2000012c
 8000a80:	08011066 	.word	0x08011066

08000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000a84:	4b02      	ldr	r3, [pc, #8]	@ (8000a90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000a86:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f005 b9e7 	b.w	8005e5e <osSemaphoreAcquire>
 8000a90:	20000130 	.word	0x20000130

08000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000a94:	4b01      	ldr	r3, [pc, #4]	@ (8000a9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f005 ba0d 	b.w	8005eb6 <osSemaphoreRelease>
 8000a9c:	20000130 	.word	0x20000130

08000aa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000aa0:	4b02      	ldr	r3, [pc, #8]	@ (8000aac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f005 b9da 	b.w	8005e5e <osSemaphoreAcquire>
 8000aaa:	bf00      	nop
 8000aac:	20000130 	.word	0x20000130

08000ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8000ab0:	f7ff bff0 	b.w	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000ab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000ab6:	4904      	ldr	r1, [pc, #16]	@ (8000ac8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	461a      	mov	r2, r3
 8000abe:	f005 ba67 	b.w	8005f90 <osMessageQueuePut>
 8000ac2:	bf00      	nop
 8000ac4:	2000012c 	.word	0x2000012c
 8000ac8:	20000004 	.word	0x20000004

08000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000acc:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000ace:	4c08      	ldr	r4, [pc, #32]	@ (8000af0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	a901      	add	r1, sp, #4
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	f005 fa8b 	bl	8005ff2 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000adc:	6820      	ldr	r0, [r4, #0]
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	a901      	add	r1, sp, #4
 8000ae6:	f005 fa84 	bl	8005ff2 <osMessageQueueGet>
}
 8000aea:	b002      	add	sp, #8
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	bf00      	nop
 8000af0:	2000012c 	.word	0x2000012c

08000af4 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8000af4:	6803      	ldr	r3, [r0, #0]
 8000af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af8:	4718      	bx	r3

08000afa <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000afa:	2001      	movs	r0, #1
 8000afc:	4770      	bx	lr

08000afe <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8000afe:	6803      	ldr	r3, [r0, #0]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b02:	4718      	bx	r3

08000b04 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8000b04:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <_ZN8STM32DMA10initializeEv+0x3c>)
 8000b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b0e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b16:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b24:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000b2c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <_ZN8STM32DMA10initializeEv+0x40>)
 8000b30:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <_ZN8STM32DMA10initializeEv+0x44>)
 8000b32:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <_ZN8STM32DMA10initializeEv+0x48>)
 8000b36:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b3a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8000b3c:	b002      	add	sp, #8
 8000b3e:	4770      	bx	lr
 8000b40:	40023800 	.word	0x40023800
 8000b44:	20001580 	.word	0x20001580
 8000b48:	08000ddd 	.word	0x08000ddd
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000b50:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8000b54:	4770      	bx	lr
	...

08000b58 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <_ZN8STM32DMAD1Ev+0x18>)
 8000b5a:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <_ZN8STM32DMAD1Ev+0x1c>)
 8000b5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b6a:	f3bf 8f6f 	isb	sy
}
 8000b6e:	4770      	bx	lr
 8000b70:	08011200 	.word	0x08011200
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4604      	mov	r4, r0
}
 8000b7c:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8000b80:	f7ff ffea 	bl	8000b58 <_ZN8STM32DMAD1Ev>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f00f f861 	bl	800fc4c <_ZdlPvj>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	bd10      	pop	{r4, pc}
	...

08000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8000b90:	b508      	push	{r3, lr}
    switch (format)
 8000b92:	280a      	cmp	r0, #10
 8000b94:	d809      	bhi.n	8000baa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8000b96:	e8df f000 	tbb	[pc, r0]
 8000b9a:	1006      	.short	0x1006
 8000b9c:	0808080e 	.word	0x0808080e
 8000ba0:	10101008 	.word	0x10101008
 8000ba4:	10          	.byte	0x10
 8000ba5:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000ba6:	2002      	movs	r0, #2
}
 8000ba8:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8000bac:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000bb0:	2187      	movs	r1, #135	@ 0x87
 8000bb2:	f00f f879 	bl	800fca8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e7f6      	b.n	8000ba8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000bba:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000bbc:	e7f4      	b.n	8000ba8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000bbe:	bf00      	nop
 8000bc0:	080110a8 	.word	0x080110a8
 8000bc4:	080110c3 	.word	0x080110c3
 8000bc8:	0801110e 	.word	0x0801110e

08000bcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000bd0:	7f88      	ldrb	r0, [r1, #30]
 8000bd2:	f7ff ffdd 	bl	8000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000bd6:	8aa5      	ldrh	r5, [r4, #20]
 8000bd8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bdc:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000bde:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000be0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8000be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000be6:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000be8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bea:	1b52      	subs	r2, r2, r5
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000bee:	6825      	ldr	r5, [r4, #0]
 8000bf0:	2d08      	cmp	r5, #8
 8000bf2:	d10e      	bne.n	8000c12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bf4:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bf6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf8:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000bfa:	7f20      	ldrb	r0, [r4, #28]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8000bfe:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000c02:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000c04:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c06:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000c08:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0c:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c0e:	601a      	str	r2, [r3, #0]
    }
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8000c12:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000c14:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8000c1a:	0a0a      	lsrs	r2, r1, #8
 8000c1c:	0948      	lsrs	r0, r1, #5
 8000c1e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8000c22:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8000c26:	4302      	orrs	r2, r0
 8000c28:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c30:	4a03      	ldr	r2, [pc, #12]	@ (8000c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8000c32:	e7ec      	b.n	8000c0e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8000c34:	4002b000 	.word	0x4002b000
 8000c38:	00010009 	.word	0x00010009
 8000c3c:	00020201 	.word	0x00020201
 8000c40:	00030201 	.word	0x00030201

08000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8000c44:	b508      	push	{r3, lr}
    switch (format)
 8000c46:	280b      	cmp	r0, #11
 8000c48:	d80b      	bhi.n	8000c62 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8000c4a:	e8df f000 	tbb	[pc, r0]
 8000c4e:	1206      	.short	0x1206
 8000c50:	0a0a0a10 	.word	0x0a0a0a10
 8000c54:	0808080a 	.word	0x0808080a
 8000c58:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000c5a:	2002      	movs	r0, #2
}
 8000c5c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8000c5e:	2005      	movs	r0, #5
        break;
 8000c60:	e7fc      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000c64:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8000c68:	2166      	movs	r1, #102	@ 0x66
 8000c6a:	f00f f81d 	bl	800fca8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e7f4      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000c72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000c74:	e7f2      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000c76:	bf00      	nop
 8000c78:	080110a8 	.word	0x080110a8
 8000c7c:	08011156 	.word	0x08011156
 8000c80:	0801110e 	.word	0x0801110e

08000c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c88:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8000c8c:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c8e:	4640      	mov	r0, r8
 8000c90:	f7ff ffd8 	bl	8000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c94:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c96:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f7ff ffd3 	bl	8000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8000c9e:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	f7ff ff75 	bl	8000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000ca6:	8aa1      	ldrh	r1, [r4, #20]
 8000ca8:	8b62      	ldrh	r2, [r4, #26]
 8000caa:	4b44      	ldr	r3, [pc, #272]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000cac:	1a52      	subs	r2, r2, r1
 8000cae:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cb0:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000cb2:	8b22      	ldrh	r2, [r4, #24]
 8000cb4:	1a52      	subs	r2, r2, r1
 8000cb6:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cb8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000cba:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cc2:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000cc4:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cc6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000cc8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000cca:	6820      	ldr	r0, [r4, #0]
 8000ccc:	2880      	cmp	r0, #128	@ 0x80
 8000cce:	d028      	beq.n	8000d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8000cd0:	7f22      	ldrb	r2, [r4, #28]
 8000cd2:	d80f      	bhi.n	8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8000cd4:	2820      	cmp	r0, #32
 8000cd6:	d067      	beq.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000cd8:	2840      	cmp	r0, #64	@ 0x40
 8000cda:	d065      	beq.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000cdc:	2804      	cmp	r0, #4
 8000cde:	d01a      	beq.n	8000d16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000ce0:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000ce2:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000ce6:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cea:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cec:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cee:	d061      	beq.n	8000db4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cf0:	4a33      	ldr	r2, [pc, #204]	@ (8000dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000cf2:	e044      	b.n	8000d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8000cf4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000cf8:	d004      	beq.n	8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8000cfa:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8000cfe:	d1ef      	bne.n	8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d00:	4830      	ldr	r0, [pc, #192]	@ (8000dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8000d02:	e000      	b.n	8000d06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d04:	4830      	ldr	r0, [pc, #192]	@ (8000dc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d06:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8000d0a:	61da      	str	r2, [r3, #28]
 8000d0c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000d0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d10:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d12:	6159      	str	r1, [r3, #20]
 8000d14:	e032      	b.n	8000d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d16:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000d1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d1e:	61da      	str	r2, [r3, #28]
 8000d20:	e7f6      	b.n	8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000d22:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000d24:	1d02      	adds	r2, r0, #4
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d28:	7f22      	ldrb	r2, [r4, #28]
 8000d2a:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d2e:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8000d32:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d34:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d36:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8000d38:	7801      	ldrb	r1, [r0, #0]
 8000d3a:	b141      	cbz	r1, 8000d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8000d3c:	2901      	cmp	r1, #1
 8000d3e:	d021      	beq.n	8000d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8000d40:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8000d44:	4823      	ldr	r0, [pc, #140]	@ (8000dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8000d46:	f240 1111 	movw	r1, #273	@ 0x111
 8000d4a:	f00e ffad 	bl	800fca8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	8841      	ldrh	r1, [r0, #2]
 8000d52:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d56:	3901      	subs	r1, #1
 8000d58:	f022 0210 	bic.w	r2, r2, #16
 8000d5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d60:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8000d62:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000d66:	69da      	ldr	r2, [r3, #28]
 8000d68:	f042 0220 	orr.w	r2, r2, #32
 8000d6c:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	0692      	lsls	r2, r2, #26
 8000d72:	d4fc      	bmi.n	8000d6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000d74:	2210      	movs	r2, #16
 8000d76:	609a      	str	r2, [r3, #8]
            if (blend)
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d0b9      	beq.n	8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8000d84:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	8840      	ldrh	r0, [r0, #2]
 8000d8c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d90:	f100 30ff 	add.w	r0, r0, #4294967295
 8000d94:	f022 0210 	bic.w	r2, r2, #16
 8000d98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000d9c:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8000da0:	bf18      	it	ne
 8000da2:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000da4:	61da      	str	r2, [r3, #28]
                break;
 8000da6:	e7dd      	b.n	8000d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000da8:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000dae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000db2:	e7b4      	b.n	8000d1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000db4:	f240 2201 	movw	r2, #513	@ 0x201
 8000db8:	e7e1      	b.n	8000d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8000dba:	bf00      	nop
 8000dbc:	4002b000 	.word	0x4002b000
 8000dc0:	00010201 	.word	0x00010201
 8000dc4:	00020009 	.word	0x00020009
 8000dc8:	0002000a 	.word	0x0002000a
 8000dcc:	080111a0 	.word	0x080111a0
 8000dd0:	080111ba 	.word	0x080111ba
 8000dd4:	0801110e 	.word	0x0801110e
 8000dd8:	00020201 	.word	0x00020201

08000ddc <DMA2D_XferCpltCallback>:
        return instance;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	@ (8000de8 <DMA2D_XferCpltCallback+0xc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4718      	bx	r3
 8000de8:	2001242c 	.word	0x2001242c

08000dec <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000df0:	4625      	mov	r5, r4
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <_ZN8STM32DMAC1Ev+0x30>)
 8000df4:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000df6:	2600      	movs	r6, #0
 8000df8:	6060      	str	r0, [r4, #4]
 8000dfa:	7226      	strb	r6, [r4, #8]
 8000dfc:	7266      	strb	r6, [r4, #9]
 8000dfe:	f845 3b20 	str.w	r3, [r5], #32
 8000e02:	2260      	movs	r2, #96	@ 0x60
 8000e04:	4629      	mov	r1, r5
 8000e06:	f008 f9f7 	bl	80091f8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000e0a:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8000e0e:	60ee      	str	r6, [r5, #12]
 8000e10:	3524      	adds	r5, #36	@ 0x24
 8000e12:	429d      	cmp	r5, r3
 8000e14:	d1fb      	bne.n	8000e0e <_ZN8STM32DMAC1Ev+0x22>
}
 8000e16:	4620      	mov	r0, r4
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08011200 	.word	0x08011200

08000e20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e20:	2001      	movs	r0, #1
 8000e22:	4770      	bx	lr

08000e24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e24:	2038      	movs	r0, #56	@ 0x38
 8000e26:	4770      	bx	lr

08000e28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e28:	2338      	movs	r3, #56	@ 0x38
 8000e2a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e2e:	3008      	adds	r0, #8
 8000e30:	4770      	bx	lr

08000e32 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e32:	2338      	movs	r3, #56	@ 0x38
 8000e34:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e38:	3008      	adds	r0, #8
 8000e3a:	4770      	bx	lr

08000e3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4770      	bx	lr

08000e40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e40:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8000e44:	4770      	bx	lr

08000e46 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e46:	f44f 7307 	mov.w	r3, #540	@ 0x21c
 8000e4a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e4e:	3008      	adds	r0, #8
 8000e50:	4770      	bx	lr

08000e52 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e52:	f44f 7307 	mov.w	r3, #540	@ 0x21c
 8000e56:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e5a:	3008      	adds	r0, #8
 8000e5c:	4770      	bx	lr

08000e5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4770      	bx	lr

08000e62 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e62:	2010      	movs	r0, #16
 8000e64:	4770      	bx	lr

08000e66 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e66:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000e6a:	3008      	adds	r0, #8
 8000e6c:	4770      	bx	lr

08000e6e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e6e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000e72:	3008      	adds	r0, #8
 8000e74:	4770      	bx	lr

08000e76 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8000e76:	4608      	mov	r0, r1
 8000e78:	f001 bc68 	b.w	800274c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8000e80:	6003      	str	r3, [r0, #0]
 8000e82:	4604      	mov	r4, r0
 8000e84:	f007 f831 	bl	8007eea <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000e88:	4620      	mov	r0, r4
 8000e8a:	bd10      	pop	{r4, pc}
 8000e8c:	080112b8 	.word	0x080112b8

08000e90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8000e90:	b510      	push	{r4, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	f7ff fff2 	bl	8000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	2140      	movs	r1, #64	@ 0x40
 8000e9c:	f00e fed6 	bl	800fc4c <_ZdlPvj>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ea8:	6003      	str	r3, [r0, #0]
 8000eaa:	4604      	mov	r4, r0
 8000eac:	f007 f81d 	bl	8007eea <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	08011284 	.word	0x08011284

08000eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	f7ff fff2 	bl	8000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8000ec6:	f00e fec1 	bl	800fc4c <_ZdlPvj>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	bd10      	pop	{r4, pc}
	...

08000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ed4:	6003      	str	r3, [r0, #0]
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	f007 f807 	bl	8007eea <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000edc:	4620      	mov	r0, r4
 8000ede:	bd10      	pop	{r4, pc}
 8000ee0:	08011250 	.word	0x08011250

08000ee4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	f7ff fff2 	bl	8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000eec:	4620      	mov	r0, r4
 8000eee:	2118      	movs	r1, #24
 8000ef0:	f00e feac 	bl	800fc4c <_ZdlPvj>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_ZN12FrontendHeapD1Ev+0x24>)
 8000efc:	6003      	str	r3, [r0, #0]
 8000efe:	4604      	mov	r4, r0
 8000f00:	f500 7014 	add.w	r0, r0, #592	@ 0x250
 8000f04:	f7ff ffba 	bl	8000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000f08:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8000f0c:	f7ff ffca 	bl	8000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f10:	f104 0014 	add.w	r0, r4, #20
 8000f14:	f7ff ffdc 	bl	8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f18:	4620      	mov	r0, r4
 8000f1a:	bd10      	pop	{r4, pc}
 8000f1c:	080112ec 	.word	0x080112ec

08000f20 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8000f20:	b508      	push	{r3, lr}
 8000f22:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <__tcf_0+0xc>)
 8000f24:	f7ff ffe8 	bl	8000ef8 <_ZN12FrontendHeapD1Ev>
 8000f28:	bd08      	pop	{r3, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000fe8 	.word	0x20000fe8

08000f30 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff ffe0 	bl	8000ef8 <_ZN12FrontendHeapD1Ev>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8000f3e:	f00e fe85 	bl	800fc4c <_ZdlPvj>
 8000f42:	4620      	mov	r0, r4
 8000f44:	bd10      	pop	{r4, pc}
	...

08000f48 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8000f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8000f4c:	f000 ffae 	bl	8001eac <_ZN14BitmapDatabase11getInstanceEv>
 8000f50:	4605      	mov	r5, r0
 8000f52:	f000 ffaf 	bl	8001eb4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8000f56:	2400      	movs	r4, #0
 8000f58:	4601      	mov	r1, r0
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	4622      	mov	r2, r4
 8000f60:	9400      	str	r4, [sp, #0]
 8000f62:	f00b ffe1 	bl	800cf28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <touchgfx_init+0xb4>)
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <touchgfx_init+0xb8>)
        static FrontendHeap instance;
 8000f6a:	4d26      	ldr	r5, [pc, #152]	@ (8001004 <touchgfx_init+0xbc>)
 8000f6c:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f002 f876 	bl	8003060 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8000f74:	4824      	ldr	r0, [pc, #144]	@ (8001008 <touchgfx_init+0xc0>)
 8000f76:	f00b ff3f 	bl	800cdf8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	f3bf 8f5b 	dmb	ish
 8000f80:	07db      	lsls	r3, r3, #31
 8000f82:	d435      	bmi.n	8000ff0 <touchgfx_init+0xa8>
 8000f84:	4628      	mov	r0, r5
 8000f86:	f00e fe63 	bl	800fc50 <__cxa_guard_acquire>
 8000f8a:	b388      	cbz	r0, 8000ff0 <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8000f8c:	4c1f      	ldr	r4, [pc, #124]	@ (800100c <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <touchgfx_init+0xc8>)
 8000f90:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8000f92:	f504 7627 	add.w	r6, r4, #668	@ 0x29c
        : presenterStorage(pres),
 8000f96:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8000f9a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8000f9e:	f504 7714 	add.w	r7, r4, #592	@ 0x250
        : presenterStorage(pres),
 8000fa2:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8000fa4:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8000fa8:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8000faa:	6126      	str	r6, [r4, #16]
 8000fac:	f006 ff9e 	bl	8007eec <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <touchgfx_init+0xcc>)
 8000fb2:	6163      	str	r3, [r4, #20]
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	f006 ff99 	bl	8007eec <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <touchgfx_init+0xd0>)
 8000fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f006 ff94 	bl	8007eec <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <touchgfx_init+0xd4>)
 8000fc6:	f8c4 3250 	str.w	r3, [r4, #592]	@ 0x250
 8000fca:	f504 7024 	add.w	r0, r4, #656	@ 0x290
 8000fce:	f002 f8b5 	bl	800313c <_ZN5ModelC1Ev>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	f504 7124 	add.w	r1, r4, #656	@ 0x290
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f002 f8a5 	bl	8003128 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f001 fbb4 	bl	800274c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8000fe4:	480e      	ldr	r0, [pc, #56]	@ (8001020 <touchgfx_init+0xd8>)
 8000fe6:	f00e fe7d 	bl	800fce4 <atexit>
 8000fea:	4628      	mov	r0, r5
 8000fec:	f00e fe3c 	bl	800fc68 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <touchgfx_init+0xdc>)
}
 8000ff2:	b002      	add	sp, #8
 8000ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8000ff8:	f7ff bc5e 	b.w	80008b8 <_ZN11TouchGFXHAL10initializeEv>
 8000ffc:	20012488 	.word	0x20012488
 8001000:	200001b0 	.word	0x200001b0
 8001004:	20000fe4 	.word	0x20000fe4
 8001008:	20000008 	.word	0x20000008
 800100c:	20000fe8 	.word	0x20000fe8
 8001010:	080112ec 	.word	0x080112ec
 8001014:	08011250 	.word	0x08011250
 8001018:	08011284 	.word	0x08011284
 800101c:	080112b8 	.word	0x080112b8
 8001020:	08000f21 	.word	0x08000f21
 8001024:	20000134 	.word	0x20000134

08001028 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001028:	4801      	ldr	r0, [pc, #4]	@ (8001030 <touchgfx_taskEntry+0x8>)
 800102a:	f7ff bc57 	b.w	80008dc <_ZN11TouchGFXHAL9taskEntryEv>
 800102e:	bf00      	nop
 8001030:	20000134 	.word	0x20000134

08001034 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001034:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001036:	4e22      	ldr	r6, [pc, #136]	@ (80010c0 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8001038:	4c22      	ldr	r4, [pc, #136]	@ (80010c4 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 800103a:	4d23      	ldr	r5, [pc, #140]	@ (80010c8 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <_GLOBAL__sub_I_touchgfx_init+0x98>)
 800103e:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8001040:	4630      	mov	r0, r6
 8001042:	f7ff fed3 	bl	8000dec <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8001046:	4628      	mov	r0, r5
 8001048:	f00c fdce 	bl	800dbe8 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800104e:	4821      	ldr	r0, [pc, #132]	@ (80010d4 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8001050:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8001052:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001054:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 8001058:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 800105c:	491e      	ldr	r1, [pc, #120]	@ (80010d8 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800105e:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8001060:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001064:	491d      	ldr	r1, [pc, #116]	@ (80010dc <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8001066:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 8001068:	491d      	ldr	r1, [pc, #116]	@ (80010e0 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 800106a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 800106e:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001070:	21f0      	movs	r1, #240	@ 0xf0
 8001072:	8001      	strh	r1, [r0, #0]
 8001074:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 8001076:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001078:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 800107c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001080:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 8001084:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8001088:	e9c3 2206 	strd	r2, r2, [r3, #24]
 800108c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8001090:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8001094:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8001098:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800109c:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80010a0:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 80010a4:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80010a6:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010aa:	8001      	strh	r1, [r0, #0]
 80010ac:	480f      	ldr	r0, [pc, #60]	@ (80010ec <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80010ae:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80010b0:	490f      	ldr	r1, [pc, #60]	@ (80010f0 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80010b2:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80010bc:	601a      	str	r2, [r3, #0]
}
 80010be:	bd70      	pop	{r4, r5, r6, pc}
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000fe0 	.word	0x20000fe0
 80010c8:	200001b4 	.word	0x200001b4
 80010cc:	08010d48 	.word	0x08010d48
 80010d0:	20000134 	.word	0x20000134
 80010d4:	20012420 	.word	0x20012420
 80010d8:	01000001 	.word	0x01000001
 80010dc:	01010000 	.word	0x01010000
 80010e0:	2001242c 	.word	0x2001242c
 80010e4:	20012426 	.word	0x20012426
 80010e8:	20012422 	.word	0x20012422
 80010ec:	20012428 	.word	0x20012428
 80010f0:	20012424 	.word	0x20012424
 80010f4:	08010ed4 	.word	0x08010ed4

080010f8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80010f8:	4801      	ldr	r0, [pc, #4]	@ (8001100 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80010fa:	f7ff bd2d 	b.w	8000b58 <_ZN8STM32DMAD1Ev>
 80010fe:	bf00      	nop
 8001100:	20000240 	.word	0x20000240

08001104 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001106:	2290      	movs	r2, #144	@ 0x90
 8001108:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 800110c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800111a:	490a      	ldr	r1, [pc, #40]	@ (8001144 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800111c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800112a:	6911      	ldr	r1, [r2, #16]
 800112c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001130:	3901      	subs	r1, #1
 8001132:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001136:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800113e:	4770      	bx	lr
 8001140:	40016800 	.word	0x40016800
 8001144:	200013e2 	.word	0x200013e2
 8001148:	200013e0 	.word	0x200013e0

0800114c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800114c:	4b01      	ldr	r3, [pc, #4]	@ (8001154 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800114e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8001152:	4770      	bx	lr
 8001154:	40016800 	.word	0x40016800

08001158 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001158:	4b02      	ldr	r3, [pc, #8]	@ (8001164 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800115a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800115c:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001162:	4770      	bx	lr
 8001164:	40016800 	.word	0x40016800

08001168 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	4604      	mov	r4, r0
    HAL::initialize();
 800116c:	f007 f9bb 	bl	80084e6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8001174:	f009 fa16 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
 8001178:	4601      	mov	r1, r0
 800117a:	4620      	mov	r0, r4
 800117c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8001182:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001186:	4620      	mov	r0, r4
 8001188:	46ac      	mov	ip, r5
 800118a:	2300      	movs	r3, #0
}
 800118c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001190:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 8001194:	4760      	bx	ip
 8001196:	bf00      	nop
 8001198:	d004b000 	.word	0xd004b000

0800119c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 800119c:	f007 b98a 	b.w	80084b4 <_ZN8touchgfx3HAL10beginFrameEv>

080011a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80011a0:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 80011a4:	b113      	cbz	r3, 80011ac <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80011a6:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80011ac:	f007 b98e 	b.w	80084cc <_ZN8touchgfx3HAL8endFrameEv>
 80011b0:	200013e4 	.word	0x200013e4

080011b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80011b4:	f007 b948 	b.w	8008448 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080011b8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80011b8:	f007 baa9 	b.w	800870e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080011bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80011be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011c8:	609a      	str	r2, [r3, #8]
}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80011d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80011da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80011ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011ee:	f3bf 8f6f 	isb	sy
}
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80011f8:	b510      	push	{r4, lr}
        return instance;
 80011fa:	4c14      	ldr	r4, [pc, #80]	@ (800124c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	b323      	cbz	r3, 800124a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_LTDC_LineEventCallback+0x58>)
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <HAL_LTDC_LineEventCallback+0x5c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	8811      	ldrh	r1, [r2, #0]
 8001208:	428b      	cmp	r3, r1
 800120a:	d113      	bne.n	8001234 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_LTDC_LineEventCallback+0x60>)
 800120e:	8819      	ldrh	r1, [r3, #0]
 8001210:	f003 fbb2 	bl	8004978 <HAL_LTDC_ProgramLineEvent>
 8001214:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8001216:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800121a:	3301      	adds	r3, #1
 800121c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001220:	f7ff fc48 	bl	8000ab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	f007 fea9 	bl	8008f7c <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800122a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ba88 	b.w	8000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001234:	f003 fba0 	bl	8004978 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8001238:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800123a:	6803      	ldr	r3, [r0, #0]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4798      	blx	r3
    }
 8001240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff baa7 	b.w	8000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800124a:	bd10      	pop	{r4, pc}
 800124c:	2001242c 	.word	0x2001242c
 8001250:	40016800 	.word	0x40016800
 8001254:	200013e2 	.word	0x200013e2
 8001258:	200013e0 	.word	0x200013e0

0800125c <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 800125c:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <SPI5_Write+0x1c>)
{
 8001260:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <SPI5_Write+0x20>)
 8001268:	2201      	movs	r2, #1
 800126a:	f10d 0106 	add.w	r1, sp, #6
 800126e:	f004 f8d1 	bl	8005414 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8001272:	b003      	add	sp, #12
 8001274:	f85d fb04 	ldr.w	pc, [sp], #4
 8001278:	2000000c 	.word	0x2000000c
 800127c:	2000142c 	.word	0x2000142c

08001280 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osDelay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f004 fd95 	bl	8005db2 <osDelay>
  for(;;)
 8001288:	e7fb      	b.n	8001282 <StartDefaultTask+0x2>
	...

0800128c <SystemClock_Config>:
{
 800128c:	b530      	push	{r4, r5, lr}
 800128e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001290:	2210      	movs	r2, #16
 8001292:	2100      	movs	r1, #0
 8001294:	a80a      	add	r0, sp, #40	@ 0x28
 8001296:	f00e ff0e 	bl	80100b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129a:	2214      	movs	r2, #20
 800129c:	2100      	movs	r1, #0
 800129e:	a803      	add	r0, sp, #12
 80012a0:	f00e ff09 	bl	80100b6 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	2400      	movs	r4, #0
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <SystemClock_Config+0x90>)
 80012a8:	9401      	str	r4, [sp, #4]
 80012aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <SystemClock_Config+0x94>)
 80012be:	9402      	str	r4, [sp, #8]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012ce:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012dc:	2502      	movs	r5, #2
 80012de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012e2:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012e6:	2108      	movs	r1, #8
 80012e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012ec:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f2:	2304      	movs	r3, #4
 80012f4:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f6:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f003 fb5c 	bl	80049b4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001302:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130a:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800130e:	2105      	movs	r1, #5
 8001310:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001314:	f003 fd2a 	bl	8004d6c <HAL_RCC_ClockConfig>
}
 8001318:	b015      	add	sp, #84	@ 0x54
 800131a:	bd30      	pop	{r4, r5, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <main>:
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b09a      	sub	sp, #104	@ 0x68
  HAL_Init();
 8001328:	f002 faa6 	bl	8003878 <HAL_Init>
  SystemClock_Config();
 800132c:	f7ff ffae 	bl	800128c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	2214      	movs	r2, #20
 8001332:	2100      	movs	r1, #0
 8001334:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f00e febd 	bl	80100b6 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800133c:	4bc3      	ldr	r3, [pc, #780]	@ (800164c <main+0x328>)
 800133e:	9400      	str	r4, [sp, #0]
 8001340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001342:	48c3      	ldr	r0, [pc, #780]	@ (8001650 <main+0x32c>)
  hi2c3.Instance = I2C3;
 8001344:	4dc3      	ldr	r5, [pc, #780]	@ (8001654 <main+0x330>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001346:	f042 0210 	orr.w	r2, r2, #16
 800134a:	631a      	str	r2, [r3, #48]	@ 0x30
 800134c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800134e:	f002 0210 	and.w	r2, r2, #16
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	9401      	str	r4, [sp, #4]
 8001358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800135a:	f042 0220 	orr.w	r2, r2, #32
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001362:	f002 0220 	and.w	r2, r2, #32
 8001366:	9201      	str	r2, [sp, #4]
 8001368:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	9402      	str	r4, [sp, #8]
 800136c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800136e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
 8001374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001376:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800137a:	9202      	str	r2, [sp, #8]
 800137c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	9403      	str	r4, [sp, #12]
 8001380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001382:	f042 0204 	orr.w	r2, r2, #4
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
 8001388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800138a:	f002 0204 	and.w	r2, r2, #4
 800138e:	9203      	str	r2, [sp, #12]
 8001390:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	9404      	str	r4, [sp, #16]
 8001394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	631a      	str	r2, [r3, #48]	@ 0x30
 800139c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800139e:	f002 0201 	and.w	r2, r2, #1
 80013a2:	9204      	str	r2, [sp, #16]
 80013a4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	9405      	str	r4, [sp, #20]
 80013a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80013b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b2:	f002 0202 	and.w	r2, r2, #2
 80013b6:	9205      	str	r2, [sp, #20]
 80013b8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ba:	9406      	str	r4, [sp, #24]
 80013bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80013ca:	9206      	str	r2, [sp, #24]
 80013cc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	9407      	str	r4, [sp, #28]
 80013d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013e0:	4622      	mov	r2, r4
 80013e2:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e4:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013e6:	f002 fccf 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80013ea:	489b      	ldr	r0, [pc, #620]	@ (8001658 <main+0x334>)
 80013ec:	4622      	mov	r2, r4
 80013ee:	2104      	movs	r1, #4
 80013f0:	f002 fcca 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80013f4:	4622      	mov	r2, r4
 80013f6:	4899      	ldr	r0, [pc, #612]	@ (800165c <main+0x338>)
 80013f8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80013fc:	f002 fcc4 	bl	8003d88 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001408:	4891      	ldr	r0, [pc, #580]	@ (8001650 <main+0x32c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140e:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001410:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001412:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f002 fbca 	bl	8003bb4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	488d      	ldr	r0, [pc, #564]	@ (8001658 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	e9cd a60d 	strd	sl, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142a:	9710      	str	r7, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f002 fbc2 	bl	8003bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001430:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	4889      	ldr	r0, [pc, #548]	@ (800165c <main+0x338>)
 8001436:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143c:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001440:	f002 fbb8 	bl	8003bb4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	4886      	ldr	r0, [pc, #536]	@ (8001660 <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	e9cd 640d 	strd	r6, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f002 fbb1 	bl	8003bb4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001454:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001456:	4883      	ldr	r0, [pc, #524]	@ (8001664 <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001458:	960f      	str	r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800145e:	f002 fba9 	bl	8003bb4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001462:	4881      	ldr	r0, [pc, #516]	@ (8001668 <main+0x344>)
 8001464:	4b81      	ldr	r3, [pc, #516]	@ (800166c <main+0x348>)
 8001466:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001468:	f002 fa98 	bl	800399c <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 800146c:	4a80      	ldr	r2, [pc, #512]	@ (8001670 <main+0x34c>)
 800146e:	4b81      	ldr	r3, [pc, #516]	@ (8001674 <main+0x350>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001470:	622c      	str	r4, [r5, #32]
  hi2c3.Init.ClockSpeed = 100000;
 8001472:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001476:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001478:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8001480:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001488:	f002 fe7a 	bl	8004180 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800148c:	2110      	movs	r1, #16
 800148e:	4628      	mov	r0, r5
 8001490:	f003 f8b6 	bl	8004600 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001494:	4621      	mov	r1, r4
 8001496:	4628      	mov	r0, r5
 8001498:	f003 f8d1 	bl	800463e <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 800149c:	4876      	ldr	r0, [pc, #472]	@ (8001678 <main+0x354>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800149e:	4977      	ldr	r1, [pc, #476]	@ (800167c <main+0x358>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a0:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014a2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80014a6:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014aa:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80014ae:	2318      	movs	r3, #24
 80014b0:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 80014b4:	230a      	movs	r3, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014b6:	4d72      	ldr	r5, [pc, #456]	@ (8001680 <main+0x35c>)
  hspi5.Init.CRCPolynomial = 10;
 80014b8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014be:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c2:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014c6:	f003 ff49 	bl	800535c <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001684 <main+0x360>)
  SdramTiming.LoadToActiveDelay = 2;
 80014cc:	970d      	str	r7, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014ce:	f04f 0c10 	mov.w	ip, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80014d2:	e9c5 3600 	strd	r3, r6, [r5]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014d6:	2340      	movs	r3, #64	@ 0x40
 80014d8:	e9c5 c304 	strd	ip, r3, [r5, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80014dc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014e0:	e9c5 3406 	strd	r3, r4, [r5, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014e8:	e9c5 3408 	strd	r3, r4, [r5, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80014ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f0:	62ab      	str	r3, [r5, #40]	@ 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014f2:	a90d      	add	r1, sp, #52	@ 0x34
  SdramTiming.ExitSelfRefreshDelay = 7;
 80014f4:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014f6:	4628      	mov	r0, r5
  SdramTiming.SelfRefreshTime = 4;
 80014f8:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	@ 0x38
  SdramTiming.WriteRecoveryTime = 3;
 80014fc:	e9cd 3810 	strd	r3, r8, [sp, #64]	@ 0x40
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001500:	f04f 0908 	mov.w	r9, #8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001504:	e9c5 4a02 	strd	r4, sl, [r5, #8]
  SdramTiming.RCDDelay = 2;
 8001508:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800150c:	f003 fe22 	bl	8005154 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001514:	a909      	add	r1, sp, #36	@ 0x24
 8001516:	4628      	mov	r0, r5
  Command->AutoRefreshNumber       = 1;
 8001518:	e9cd 960a 	strd	r9, r6, [sp, #40]	@ 0x28
 __IO uint32_t tmpmrd =0;
 800151c:	9408      	str	r4, [sp, #32]
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800151e:	9609      	str	r6, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001520:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001522:	f003 fe37 	bl	8005194 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8001526:	4630      	mov	r0, r6
 8001528:	f002 f9d2 	bl	80038d0 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800152c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001530:	a909      	add	r1, sp, #36	@ 0x24
 8001532:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001534:	e9cd 7909 	strd	r7, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001538:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800153c:	f003 fe2a 	bl	8005194 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001540:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001544:	a909      	add	r1, sp, #36	@ 0x24
 8001546:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001548:	e9cd 8909 	strd	r8, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 800154c:	e9cd a40b 	strd	sl, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001550:	f003 fe20 	bl	8005194 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001554:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001558:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 800155a:	9b08      	ldr	r3, [sp, #32]
 800155c:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800155e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001562:	a909      	add	r1, sp, #36	@ 0x24
 8001564:	4628      	mov	r0, r5
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001566:	e9cd a909 	strd	sl, r9, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 800156a:	960b      	str	r6, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800156c:	f003 fe12 	bl	8005194 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8001570:	f240 516a 	movw	r1, #1386	@ 0x56a
 8001574:	4628      	mov	r0, r5
 8001576:	f003 fe2b 	bl	80051d0 <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800157a:	2234      	movs	r2, #52	@ 0x34
 800157c:	4621      	mov	r1, r4
 800157e:	eb0d 0002 	add.w	r0, sp, r2
 8001582:	f00e fd98 	bl	80100b6 <memset>
  hltdc.Instance = LTDC;
 8001586:	4d40      	ldr	r5, [pc, #256]	@ (8001688 <main+0x364>)
 8001588:	4b40      	ldr	r3, [pc, #256]	@ (800168c <main+0x368>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800158a:	612c      	str	r4, [r5, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800158c:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.HorizontalSync = 9;
 8001590:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 8001592:	e9c5 3605 	strd	r3, r6, [r5, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8001596:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8001598:	f240 1e0d 	movw	lr, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 800159c:	e9c5 3807 	strd	r3, r8, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 80015a0:	f240 1343 	movw	r3, #323	@ 0x143
 80015a4:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015a8:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 327;
 80015aa:	f240 1347 	movw	r3, #327	@ 0x147
 80015ae:	f240 1817 	movw	r8, #279	@ 0x117
 80015b2:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015b6:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.Backcolor.Blue = 0;
 80015ba:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 80015bc:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015c0:	f003 f8e2 	bl	8004788 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80015c4:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 80015c6:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 80015c8:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015cc:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 80015d0:	2105      	movs	r1, #5
  pLayerCfg.WindowY1 = 320;
 80015d2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 80015d6:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015da:	e9cd a114 	strd	sl, r1, [sp, #80]	@ 0x50
  pLayerCfg.ImageWidth = 240;
 80015de:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015e2:	a90d      	add	r1, sp, #52	@ 0x34
 80015e4:	4622      	mov	r2, r4
 80015e6:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80015e8:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 80015ec:	4d28      	ldr	r5, [pc, #160]	@ (8001690 <main+0x36c>)
  pLayerCfg.ImageHeight = 320;
 80015ee:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 80015f0:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 80015f2:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 80015f6:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015fa:	f003 f990 	bl	800491e <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 80015fe:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <main+0x370>)
 8001600:	602b      	str	r3, [r5, #0]
  LcdDrv->Init();
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4798      	blx	r3
  LcdDrv->DisplayOff();
 8001606:	682b      	ldr	r3, [r5, #0]
  hdma2d.Instance = DMA2D;
 8001608:	4d23      	ldr	r5, [pc, #140]	@ (8001698 <main+0x374>)
  LcdDrv->DisplayOff();
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <main+0x378>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001610:	4628      	mov	r0, r5
  hdma2d.Init.Mode = DMA2D_M2M;
 8001612:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8001616:	e9c5 7402 	strd	r7, r4, [r5, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800161a:	e9c5 470a 	strd	r4, r7, [r5, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800161e:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001622:	f002 f9cb 	bl	80039bc <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001626:	4631      	mov	r1, r6
 8001628:	4628      	mov	r0, r5
 800162a:	f002 fa7f 	bl	8003b2c <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 800162e:	f7fe ffd0 	bl	80005d2 <MX_TouchGFX_Init>
  osKernelInitialize();
 8001632:	f004 fb4b 	bl	8005ccc <osKernelInitialize>
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8001636:	4a1a      	ldr	r2, [pc, #104]	@ (80016a0 <main+0x37c>)
 8001638:	4631      	mov	r1, r6
 800163a:	4648      	mov	r0, r9
 800163c:	f004 fc6d 	bl	8005f1a <osMessageQueueNew>
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <main+0x380>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001642:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <main+0x384>)
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8001644:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001646:	4621      	mov	r1, r4
 8001648:	e030      	b.n	80016ac <main+0x388>
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40021000 	.word	0x40021000
 8001654:	2000152c 	.word	0x2000152c
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40020000 	.word	0x40020000
 8001664:	40021800 	.word	0x40021800
 8001668:	200015c0 	.word	0x200015c0
 800166c:	40023000 	.word	0x40023000
 8001670:	40005c00 	.word	0x40005c00
 8001674:	000186a0 	.word	0x000186a0
 8001678:	2000142c 	.word	0x2000142c
 800167c:	40015000 	.word	0x40015000
 8001680:	200013f8 	.word	0x200013f8
 8001684:	a0000140 	.word	0xa0000140
 8001688:	20001484 	.word	0x20001484
 800168c:	40016800 	.word	0x40016800
 8001690:	200013e8 	.word	0x200013e8
 8001694:	20000014 	.word	0x20000014
 8001698:	20001580 	.word	0x20001580
 800169c:	4002b000 	.word	0x4002b000
 80016a0:	08011314 	.word	0x08011314
 80016a4:	200013ec 	.word	0x200013ec
 80016a8:	08011350 	.word	0x08011350
 80016ac:	4807      	ldr	r0, [pc, #28]	@ (80016cc <main+0x3a8>)
 80016ae:	f004 fb39 	bl	8005d24 <osThreadNew>
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <main+0x3ac>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <main+0x3b0>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016b6:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80016b8:	4621      	mov	r1, r4
 80016ba:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <main+0x3b4>)
 80016bc:	f004 fb32 	bl	8005d24 <osThreadNew>
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <main+0x3b8>)
 80016c2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80016c4:	f004 fb14 	bl	8005cf0 <osKernelStart>
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <main+0x3a4>
 80016ca:	bf00      	nop
 80016cc:	08001281 	.word	0x08001281
 80016d0:	200013f4 	.word	0x200013f4
 80016d4:	0801132c 	.word	0x0801132c
 80016d8:	080005d7 	.word	0x080005d7
 80016dc:	200013f0 	.word	0x200013f0

080016e0 <IOE_Init>:
void IOE_Init(void)
 80016e0:	4770      	bx	lr

080016e2 <IOE_ITConfig>:
void IOE_ITConfig(void)
 80016e2:	4770      	bx	lr

080016e4 <IOE_Write>:
{
 80016e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <IOE_Write+0x28>)
 80016e8:	f88d 2017 	strb.w	r2, [sp, #23]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	f10d 0217 	add.w	r2, sp, #23
 80016f4:	2301      	movs	r3, #1
 80016f6:	9200      	str	r2, [sp, #0]
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	460a      	mov	r2, r1
 80016fc:	4601      	mov	r1, r0
 80016fe:	4804      	ldr	r0, [pc, #16]	@ (8001710 <IOE_Write+0x2c>)
 8001700:	f002 fde6 	bl	80042d0 <HAL_I2C_Mem_Write>
}
 8001704:	b007      	add	sp, #28
 8001706:	f85d fb04 	ldr.w	pc, [sp], #4
 800170a:	bf00      	nop
 800170c:	20000010 	.word	0x20000010
 8001710:	2000152c 	.word	0x2000152c

08001714 <IOE_Read>:
{
 8001714:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <IOE_Read+0x2c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	9302      	str	r3, [sp, #8]
{
 8001722:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001724:	2301      	movs	r3, #1
 8001726:	f10d 0117 	add.w	r1, sp, #23
 800172a:	9100      	str	r1, [sp, #0]
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	4601      	mov	r1, r0
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <IOE_Read+0x30>)
 8001732:	f002 fe5d 	bl	80043f0 <HAL_I2C_Mem_Read>
}
 8001736:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800173a:	b007      	add	sp, #28
 800173c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001740:	20000010 	.word	0x20000010
 8001744:	2000152c 	.word	0x2000152c

08001748 <IOE_ReadMultiple>:
{
 8001748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 800174a:	4c08      	ldr	r4, [pc, #32]	@ (800176c <IOE_ReadMultiple+0x24>)
 800174c:	6824      	ldr	r4, [r4, #0]
 800174e:	9200      	str	r2, [sp, #0]
 8001750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001754:	460a      	mov	r2, r1
 8001756:	2301      	movs	r3, #1
 8001758:	4601      	mov	r1, r0
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <IOE_ReadMultiple+0x28>)
 800175c:	f002 fe48 	bl	80043f0 <HAL_I2C_Mem_Read>
}
 8001760:	3800      	subs	r0, #0
 8001762:	bf18      	it	ne
 8001764:	2001      	movne	r0, #1
 8001766:	b004      	add	sp, #16
 8001768:	bd10      	pop	{r4, pc}
 800176a:	bf00      	nop
 800176c:	20000010 	.word	0x20000010
 8001770:	2000152c 	.word	0x2000152c

08001774 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 8001774:	f002 b8ac 	b.w	80038d0 <HAL_Delay>

08001778 <LCD_IO_Init>:
{
 8001778:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800177a:	4c06      	ldr	r4, [pc, #24]	@ (8001794 <LCD_IO_Init+0x1c>)
 800177c:	2200      	movs	r2, #0
 800177e:	4620      	mov	r0, r4
 8001780:	2104      	movs	r1, #4
 8001782:	f002 fb01 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001786:	4620      	mov	r0, r4
 8001788:	2201      	movs	r2, #1
}
 800178a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800178e:	2104      	movs	r1, #4
 8001790:	f002 bafa 	b.w	8003d88 <HAL_GPIO_WritePin>
 8001794:	40020800 	.word	0x40020800

08001798 <LCD_IO_WriteData>:
{
 8001798:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800179a:	4d0b      	ldr	r5, [pc, #44]	@ (80017c8 <LCD_IO_WriteData+0x30>)
{
 800179c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	480a      	ldr	r0, [pc, #40]	@ (80017cc <LCD_IO_WriteData+0x34>)
 80017a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017a6:	f002 faef 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2104      	movs	r1, #4
 80017ae:	4628      	mov	r0, r5
 80017b0:	f002 faea 	bl	8003d88 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fd51 	bl	800125c <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80017ba:	4628      	mov	r0, r5
 80017bc:	2201      	movs	r2, #1
}
 80017be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80017c2:	2104      	movs	r1, #4
 80017c4:	f002 bae0 	b.w	8003d88 <HAL_GPIO_WritePin>
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00

080017d0 <LCD_IO_WriteReg>:
{
 80017d0:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017d2:	4d0b      	ldr	r5, [pc, #44]	@ (8001800 <LCD_IO_WriteReg+0x30>)
{
 80017d4:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	480a      	ldr	r0, [pc, #40]	@ (8001804 <LCD_IO_WriteReg+0x34>)
 80017da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017de:	f002 fad3 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2104      	movs	r1, #4
 80017e6:	4628      	mov	r0, r5
 80017e8:	f002 face 	bl	8003d88 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 80017ec:	4620      	mov	r0, r4
 80017ee:	f7ff fd35 	bl	800125c <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80017f2:	4628      	mov	r0, r5
 80017f4:	2201      	movs	r2, #1
}
 80017f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80017fa:	2104      	movs	r1, #4
 80017fc:	f002 bac4 	b.w	8003d88 <HAL_GPIO_WritePin>
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00

08001808 <LCD_IO_ReadData>:
{
 8001808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800180a:	4e14      	ldr	r6, [pc, #80]	@ (800185c <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800180c:	4f14      	ldr	r7, [pc, #80]	@ (8001860 <LCD_IO_ReadData+0x58>)
{
 800180e:	4605      	mov	r5, r0
 8001810:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001812:	4630      	mov	r0, r6
 8001814:	2200      	movs	r2, #0
 8001816:	2104      	movs	r1, #4
 8001818:	f002 fab6 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001822:	4638      	mov	r0, r7
 8001824:	f002 fab0 	bl	8003d88 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001828:	4628      	mov	r0, r5
 800182a:	f7ff fd17 	bl	800125c <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <LCD_IO_ReadData+0x5c>)
 8001830:	480d      	ldr	r0, [pc, #52]	@ (8001868 <LCD_IO_ReadData+0x60>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4622      	mov	r2, r4
 8001836:	a901      	add	r1, sp, #4
 8001838:	f003 ff8b 	bl	8005752 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800183c:	4638      	mov	r0, r7
 800183e:	2201      	movs	r2, #1
 8001840:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8001844:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001846:	f002 fa9f 	bl	8003d88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800184a:	4630      	mov	r0, r6
 800184c:	2201      	movs	r2, #1
 800184e:	2104      	movs	r1, #4
 8001850:	f002 fa9a 	bl	8003d88 <HAL_GPIO_WritePin>
}
 8001854:	4620      	mov	r0, r4
 8001856:	b003      	add	sp, #12
 8001858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185a:	bf00      	nop
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	2000000c 	.word	0x2000000c
 8001868:	2000142c 	.word	0x2000142c

0800186c <LCD_Delay>:
  HAL_Delay(Delay);
 800186c:	f002 b830 	b.w	80038d0 <HAL_Delay>

08001870 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001870:	6802      	ldr	r2, [r0, #0]
 8001872:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001874:	429a      	cmp	r2, r3
 8001876:	d101      	bne.n	800187c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001878:	f002 b818 	b.w	80038ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40001000 	.word	0x40001000

08001884 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001884:	4770      	bx	lr
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <HAL_MspInit+0x3c>)
 800188c:	2200      	movs	r2, #0
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001892:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001896:	6459      	str	r1, [r3, #68]	@ 0x44
 8001898:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800189a:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800189e:	9100      	str	r1, [sp, #0]
 80018a0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	9201      	str	r2, [sp, #4]
 80018a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80018a6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80018aa:	6419      	str	r1, [r3, #64]	@ 0x40
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018b6:	210f      	movs	r1, #15
 80018b8:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018bc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018be:	f002 b82d 	b.w	800391c <HAL_NVIC_SetPriority>
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80018c8:	6802      	ldr	r2, [r0, #0]
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_CRC_MspInit+0x28>)
 80018cc:	429a      	cmp	r2, r3
{
 80018ce:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80018d0:	d10b      	bne.n	80018ea <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_CRC_MspInit+0x2c>)
 80018d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018de:	631a      	str	r2, [r3, #48]	@ 0x30
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018ea:	b002      	add	sp, #8
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023000 	.word	0x40023000
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80018f8:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_DMA2D_MspInit+0x40>)
 80018fc:	6802      	ldr	r2, [r0, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d116      	bne.n	8001930 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001902:	2200      	movs	r2, #0
 8001904:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001908:	9201      	str	r2, [sp, #4]
 800190a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800190c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001910:	6319      	str	r1, [r3, #48]	@ 0x30
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001918:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800191a:	2105      	movs	r1, #5
 800191c:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800191e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001920:	f001 fffc 	bl	800391c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001924:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001926:	b003      	add	sp, #12
 8001928:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800192c:	f002 b828 	b.w	8003980 <HAL_NVIC_EnableIRQ>
}
 8001930:	b003      	add	sp, #12
 8001932:	f85d fb04 	ldr.w	pc, [sp], #4
 8001936:	bf00      	nop
 8001938:	4002b000 	.word	0x4002b000

0800193c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800193c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001940:	4604      	mov	r4, r0
 8001942:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	2214      	movs	r2, #20
 8001946:	2100      	movs	r1, #0
 8001948:	a803      	add	r0, sp, #12
 800194a:	f00e fbb4 	bl	80100b6 <memset>
  if(hi2c->Instance==I2C3)
 800194e:	6822      	ldr	r2, [r4, #0]
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <HAL_I2C_MspInit+0xa8>)
 8001952:	429a      	cmp	r2, r3
 8001954:	d143      	bne.n	80019de <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4c24      	ldr	r4, [pc, #144]	@ (80019e8 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001958:	4824      	ldr	r0, [pc, #144]	@ (80019ec <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2500      	movs	r5, #0
 800195c:	9500      	str	r5, [sp, #0]
 800195e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6323      	str	r3, [r4, #48]	@ 0x30
 8001966:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	9501      	str	r5, [sp, #4]
 8001972:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6323      	str	r3, [r4, #48]	@ 0x30
 800197a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001984:	f04f 0912 	mov.w	r9, #18
 8001988:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	f04f 0801 	mov.w	r8, #1
 8001990:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001992:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001996:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800199e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f002 f908 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019aa:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ae:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f002 f8fd 	bl	8003bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019ba:	9502      	str	r5, [sp, #8]
 80019bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019c2:	6423      	str	r3, [r4, #64]	@ 0x40
 80019c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 80019ce:	6a23      	ldr	r3, [r4, #32]
 80019d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019d4:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 80019d6:	6a23      	ldr	r3, [r4, #32]
 80019d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80019dc:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019de:	b009      	add	sp, #36	@ 0x24
 80019e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019e4:	40005c00 	.word	0x40005c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	b099      	sub	sp, #100	@ 0x64
 80019f8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	2214      	movs	r2, #20
 80019fc:	2100      	movs	r1, #0
 80019fe:	a807      	add	r0, sp, #28
 8001a00:	f00e fb59 	bl	80100b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a04:	2230      	movs	r2, #48	@ 0x30
 8001a06:	eb0d 0002 	add.w	r0, sp, r2
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f00e fb53 	bl	80100b6 <memset>
  if(hltdc->Instance==LTDC)
 8001a10:	6822      	ldr	r2, [r4, #0]
 8001a12:	4b5e      	ldr	r3, [pc, #376]	@ (8001b8c <HAL_LTDC_MspInit+0x198>)
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 80b7 	bne.w	8001b88 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a1e:	23c0      	movs	r3, #192	@ 0xc0
 8001a20:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001a22:	2304      	movs	r3, #4
 8001a24:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a26:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a2c:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2e:	f003 fa65 	bl	8004efc <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	b108      	cbz	r0, 8001a38 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001a34:	f7ff ff26 	bl	8001884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a38:	4b55      	ldr	r3, [pc, #340]	@ (8001b90 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3a:	4856      	ldr	r0, [pc, #344]	@ (8001b94 <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	9400      	str	r4, [sp, #0]
 8001a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a42:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a46:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a4a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001a4e:	9200      	str	r2, [sp, #0]
 8001a50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a52:	9401      	str	r4, [sp, #4]
 8001a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a56:	f042 0220 	orr.w	r2, r2, #32
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a5e:	f002 0220 	and.w	r2, r2, #32
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	9402      	str	r4, [sp, #8]
 8001a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a72:	f002 0201 	and.w	r2, r2, #1
 8001a76:	9202      	str	r2, [sp, #8]
 8001a78:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	9403      	str	r4, [sp, #12]
 8001a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a7e:	f042 0202 	orr.w	r2, r2, #2
 8001a82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a86:	f002 0202 	and.w	r2, r2, #2
 8001a8a:	9203      	str	r2, [sp, #12]
 8001a8c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a8e:	9404      	str	r4, [sp, #16]
 8001a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a9a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001a9e:	9204      	str	r2, [sp, #16]
 8001aa0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	9405      	str	r4, [sp, #20]
 8001aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aa6:	f042 0204 	orr.w	r2, r2, #4
 8001aaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aae:	f002 0204 	and.w	r2, r2, #4
 8001ab2:	9205      	str	r2, [sp, #20]
 8001ab4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	9406      	str	r4, [sp, #24]
 8001ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aba:	f042 0208 	orr.w	r2, r2, #8
 8001abe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aca:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001acc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ace:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ada:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ade:	f002 f869 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001ae2:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	482c      	ldr	r0, [pc, #176]	@ (8001b98 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ae8:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001af0:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af2:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f002 f85d 	bl	8003bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001afa:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	4827      	ldr	r0, [pc, #156]	@ (8001b9c <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001afe:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b06:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f002 f853 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001b0e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	4822      	ldr	r0, [pc, #136]	@ (8001b9c <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b14:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1c:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f002 f848 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001b24:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b28:	481d      	ldr	r0, [pc, #116]	@ (8001ba0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b2a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b32:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b36:	f002 f83d 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3c:	4819      	ldr	r0, [pc, #100]	@ (8001ba4 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b3e:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b40:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b46:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f002 f833 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b4e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b50:	4815      	ldr	r0, [pc, #84]	@ (8001ba8 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b52:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b54:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5e:	f002 f829 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001b62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b66:	480e      	ldr	r0, [pc, #56]	@ (8001ba0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b68:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b6a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b70:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b74:	f002 f81e 	bl	8003bb4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001b78:	2058      	movs	r0, #88	@ 0x58
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	f001 fecd 	bl	800391c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001b82:	2058      	movs	r0, #88	@ 0x58
 8001b84:	f001 fefc 	bl	8003980 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001b88:	b019      	add	sp, #100	@ 0x64
 8001b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8c:	40016800 	.word	0x40016800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020c00 	.word	0x40020c00

08001bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bac:	b510      	push	{r4, lr}
 8001bae:	4604      	mov	r4, r0
 8001bb0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	2214      	movs	r2, #20
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	a803      	add	r0, sp, #12
 8001bb8:	f00e fa7d 	bl	80100b6 <memset>
  if(hspi->Instance==SPI5)
 8001bbc:	6822      	ldr	r2, [r4, #0]
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <HAL_SPI_MspInit+0x64>)
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d123      	bne.n	8001c0c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001bc4:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001bc8:	2100      	movs	r1, #0
 8001bca:	9101      	str	r1, [sp, #4]
 8001bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bce:	4811      	ldr	r0, [pc, #68]	@ (8001c14 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001bd0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001bd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bd8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001bdc:	9201      	str	r2, [sp, #4]
 8001bde:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be0:	9102      	str	r1, [sp, #8]
 8001be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001be4:	f042 0220 	orr.w	r2, r2, #32
 8001be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001bf8:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001bfa:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c00:	2305      	movs	r3, #5
 8001c02:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c06:	a903      	add	r1, sp, #12
 8001c08:	f001 ffd4 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001c0c:	b008      	add	sp, #32
 8001c0e:	bd10      	pop	{r4, pc}
 8001c10:	40015000 	.word	0x40015000
 8001c14:	40021400 	.word	0x40021400

08001c18 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c1c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c1e:	2300      	movs	r3, #0
 8001c20:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001c22:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd0 <HAL_SDRAM_MspInit+0xb8>)
 8001c24:	681c      	ldr	r4, [r3, #0]
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	d14f      	bne.n	8001cca <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001c2a:	f04f 0801 	mov.w	r8, #1
 8001c2e:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c32:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <HAL_SDRAM_MspInit+0xbc>)
 8001c34:	9400      	str	r4, [sp, #0]
 8001c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c38:	4827      	ldr	r0, [pc, #156]	@ (8001cd8 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c3a:	ea42 0208 	orr.w	r2, r2, r8
 8001c3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c42:	ea03 0308 	and.w	r3, r3, r8
 8001c46:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c4a:	2603      	movs	r6, #3
 8001c4c:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c4e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c50:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001c56:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c5a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5e:	f001 ffa9 	bl	8003bb4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c62:	481e      	ldr	r0, [pc, #120]	@ (8001cdc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c64:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c66:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f001 ffa0 	bl	8003bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001c74:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c78:	4819      	ldr	r0, [pc, #100]	@ (8001ce0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c7a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c7c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c86:	f001 ff95 	bl	8003bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c8a:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c90:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c92:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9c:	f001 ff8a 	bl	8003bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001ca0:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca4:	4810      	ldr	r0, [pc, #64]	@ (8001ce8 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ca6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb2:	f001 ff7f 	bl	8003bb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cb6:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	480c      	ldr	r0, [pc, #48]	@ (8001cec <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cba:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f001 ff75 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001cca:	b006      	add	sp, #24
 8001ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd0:	200015c8 	.word	0x200015c8
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40020c00 	.word	0x40020c00
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b530      	push	{r4, r5, lr}
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2036      	movs	r0, #54	@ 0x36
 8001cfa:	f001 fe0f 	bl	800391c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cfe:	2036      	movs	r0, #54	@ 0x36
 8001d00:	f001 fe3e 	bl	8003980 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d04:	2500      	movs	r5, #0
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_InitTick+0x6c>)
 8001d08:	9502      	str	r5, [sp, #8]
 8001d0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d0c:	4c14      	ldr	r4, [pc, #80]	@ (8001d60 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d0e:	f042 0210 	orr.w	r2, r2, #16
 8001d12:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d1c:	a901      	add	r1, sp, #4
 8001d1e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d20:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d22:	f003 f8cd 	bl	8004ec0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d26:	f003 f8bb 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <HAL_InitTick+0x74>)
 8001d2c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d2e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001d32:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d34:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_InitTick+0x78>)
 8001d38:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d3c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d3e:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d40:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001d42:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d46:	f003 fee9 	bl	8005b1c <HAL_TIM_Base_Init>
 8001d4a:	b920      	cbnz	r0, 8001d56 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f003 fd9f 	bl	8005890 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001d52:	b009      	add	sp, #36	@ 0x24
 8001d54:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
 8001d58:	e7fb      	b.n	8001d52 <HAL_InitTick+0x62>
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	200015cc 	.word	0x200015cc
 8001d64:	40001000 	.word	0x40001000
 8001d68:	000f4240 	.word	0x000f4240

08001d6c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d6c:	4770      	bx	lr

08001d6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler>

08001d70 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <MemManage_Handler>

08001d72 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler>

08001d74 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler>

08001d76 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001d76:	4770      	bx	lr

08001d78 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d78:	4801      	ldr	r0, [pc, #4]	@ (8001d80 <TIM6_DAC_IRQHandler+0x8>)
 8001d7a:	f003 bdc7 	b.w	800590c <HAL_TIM_IRQHandler>
 8001d7e:	bf00      	nop
 8001d80:	200015cc 	.word	0x200015cc

08001d84 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001d84:	4801      	ldr	r0, [pc, #4]	@ (8001d8c <LTDC_IRQHandler+0x8>)
 8001d86:	f002 bd6d 	b.w	8004864 <HAL_LTDC_IRQHandler>
 8001d8a:	bf00      	nop
 8001d8c:	20001484 	.word	0x20001484

08001d90 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001d90:	4801      	ldr	r0, [pc, #4]	@ (8001d98 <DMA2D_IRQHandler+0x8>)
 8001d92:	f001 be41 	b.w	8003a18 <HAL_DMA2D_IRQHandler>
 8001d96:	bf00      	nop
 8001d98:	20001580 	.word	0x20001580

08001d9c <EXTI0_IRQHandler>:
  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001d9c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t count = osMessageQueueGetCount(Queue1Handle);
 8001d9e:	4c0b      	ldr	r4, [pc, #44]	@ (8001dcc <EXTI0_IRQHandler+0x30>)
 8001da0:	6820      	ldr	r0, [r4, #0]
 8001da2:	f004 f956 	bl	8006052 <osMessageQueueGetCount>
	if (count < 2)
 8001da6:	2801      	cmp	r0, #1
 8001da8:	d809      	bhi.n	8001dbe <EXTI0_IRQHandler+0x22>
	{
		uint8_t x = 'A';
 8001daa:	2341      	movs	r3, #65	@ 0x41
 8001dac:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 8001db0:	6820      	ldr	r0, [r4, #0]
 8001db2:	23c8      	movs	r3, #200	@ 0xc8
 8001db4:	2200      	movs	r2, #0
 8001db6:	f10d 0107 	add.w	r1, sp, #7
 8001dba:	f004 f8e9 	bl	8005f90 <osMessageQueuePut>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001dbe:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dc0:	b002      	add	sp, #8
 8001dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001dc6:	f001 bfef 	b.w	8003da8 <HAL_GPIO_EXTI_IRQHandler>
 8001dca:	bf00      	nop
 8001dcc:	200013ec 	.word	0x200013ec

08001dd0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	4770      	bx	lr

08001dd4 <_kill>:

int _kill(int pid, int sig)
{
 8001dd4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001dd6:	f00e fa11 	bl	80101fc <__errno>
 8001dda:	2316      	movs	r3, #22
 8001ddc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	bd08      	pop	{r3, pc}

08001de4 <_exit>:

void _exit (int status)
{
 8001de4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001de6:	f00e fa09 	bl	80101fc <__errno>
 8001dea:	2316      	movs	r3, #22
 8001dec:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001dee:	e7fe      	b.n	8001dee <_exit+0xa>

08001df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	460d      	mov	r5, r1
 8001df4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	460e      	mov	r6, r1
 8001df8:	1b73      	subs	r3, r6, r5
 8001dfa:	429c      	cmp	r4, r3
 8001dfc:	dc01      	bgt.n	8001e02 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001dfe:	4620      	mov	r0, r4
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001e02:	f3af 8000 	nop.w
 8001e06:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	e7f5      	b.n	8001df8 <_read+0x8>

08001e0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	460d      	mov	r5, r1
 8001e10:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	460e      	mov	r6, r1
 8001e14:	1b73      	subs	r3, r6, r5
 8001e16:	429c      	cmp	r4, r3
 8001e18:	dc01      	bgt.n	8001e1e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001e1e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001e22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	e7f5      	b.n	8001e14 <_write+0x8>

08001e28 <_close>:

int _close(int file)
{
	return -1;
}
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	4770      	bx	lr

08001e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e32:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001e34:	2000      	movs	r0, #0
 8001e36:	4770      	bx	lr

08001e38 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e38:	2001      	movs	r0, #1
 8001e3a:	4770      	bx	lr

08001e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	4770      	bx	lr

08001e40 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e40:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <_sbrk+0x2c>)
 8001e42:	6811      	ldr	r1, [r2, #0]
{
 8001e44:	b508      	push	{r3, lr}
 8001e46:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001e48:	b909      	cbnz	r1, 8001e4e <_sbrk+0xe>
		heap_end = &end;
 8001e4a:	4909      	ldr	r1, [pc, #36]	@ (8001e70 <_sbrk+0x30>)
 8001e4c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001e4e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001e50:	4669      	mov	r1, sp
 8001e52:	4403      	add	r3, r0
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d906      	bls.n	8001e66 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001e58:	f00e f9d0 	bl	80101fc <__errno>
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001e64:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001e66:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001e68:	e7fc      	b.n	8001e64 <_sbrk+0x24>
 8001e6a:	bf00      	nop
 8001e6c:	20001614 	.word	0x20001614
 8001e70:	200127a0 	.word	0x200127a0

08001e74 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001e74:	4770      	bx	lr

08001e76 <_ZN23ApplicationFontProviderD0Ev>:
 8001e76:	b510      	push	{r4, lr}
 8001e78:	2104      	movs	r1, #4
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	f00d fee6 	bl	800fc4c <_ZdlPvj>
 8001e80:	4620      	mov	r0, r4
 8001e82:	bd10      	pop	{r4, pc}

08001e84 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8001e84:	2901      	cmp	r1, #1
{
 8001e86:	b508      	push	{r3, lr}
    switch (typography)
 8001e88:	d006      	beq.n	8001e98 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8001e8a:	2902      	cmp	r1, #2
 8001e8c:	d008      	beq.n	8001ea0 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8001e8e:	b959      	cbnz	r1, 8001ea8 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8001e90:	f001 f924 	bl	80030dc <_ZN17TypedTextDatabase8getFontsEv>
 8001e94:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8001e96:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8001e98:	f001 f920 	bl	80030dc <_ZN17TypedTextDatabase8getFontsEv>
 8001e9c:	6840      	ldr	r0, [r0, #4]
 8001e9e:	e7fa      	b.n	8001e96 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8001ea0:	f001 f91c 	bl	80030dc <_ZN17TypedTextDatabase8getFontsEv>
 8001ea4:	6880      	ldr	r0, [r0, #8]
 8001ea6:	e7f6      	b.n	8001e96 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	e7f4      	b.n	8001e96 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08001eac <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8001eac:	4800      	ldr	r0, [pc, #0]	@ (8001eb0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8001eae:	4770      	bx	lr
 8001eb0:	08011388 	.word	0x08011388

08001eb4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8001eb4:	2009      	movs	r0, #9
 8001eb6:	4770      	bx	lr

08001eb8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001eb8:	b513      	push	{r0, r1, r4, lr}
 8001eba:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001ebc:	b151      	cbz	r1, 8001ed4 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001ebe:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8001ec0:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8001ec2:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001ec6:	aa01      	add	r2, sp, #4
 8001ec8:	689c      	ldr	r4, [r3, #8]
 8001eca:	f10d 0303 	add.w	r3, sp, #3
 8001ece:	47a0      	blx	r4
        return glyph;
    }
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd10      	pop	{r4, pc}
            return 0;
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	e7fb      	b.n	8001ed0 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001ed8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001ed8:	89c0      	ldrh	r0, [r0, #14]
 8001eda:	4770      	bx	lr

08001edc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001edc:	8a00      	ldrh	r0, [r0, #16]
 8001ede:	4770      	bx	lr

08001ee0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8001ee0:	88c0      	ldrh	r0, [r0, #6]
 8001ee2:	4770      	bx	lr

08001ee4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8001ee4:	8880      	ldrh	r0, [r0, #4]
 8001ee6:	4770      	bx	lr

08001ee8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001ee8:	7a80      	ldrb	r0, [r0, #10]
    }
 8001eea:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001eee:	4770      	bx	lr

08001ef0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001ef0:	7a80      	ldrb	r0, [r0, #10]
    }
 8001ef2:	09c0      	lsrs	r0, r0, #7
 8001ef4:	4770      	bx	lr

08001ef6 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	4770      	bx	lr
	...

08001efc <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8001efc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8001f04 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	00000000 	.word	0x00000000

08001f08 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4770      	bx	lr

08001f0c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8001f0c:	8081      	strh	r1, [r0, #4]
    }
 8001f0e:	4770      	bx	lr

08001f10 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8001f10:	80c1      	strh	r1, [r0, #6]
    }
 8001f12:	4770      	bx	lr

08001f14 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8001f14:	8101      	strh	r1, [r0, #8]
    }
 8001f16:	4770      	bx	lr

08001f18 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8001f18:	8141      	strh	r1, [r0, #10]
    }
 8001f1a:	4770      	bx	lr

08001f1c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8001f1c:	4770      	bx	lr

08001f1e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8001f1e:	4770      	bx	lr

08001f20 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8001f20:	4770      	bx	lr

08001f22 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8001f22:	4770      	bx	lr

08001f24 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8001f24:	4770      	bx	lr

08001f26 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8001f26:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8001f28:	88c4      	ldrh	r4, [r0, #6]
 8001f2a:	6803      	ldr	r3, [r0, #0]
 8001f2c:	1b12      	subs	r2, r2, r4
 8001f2e:	8884      	ldrh	r4, [r0, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f32:	1b09      	subs	r1, r1, r4
 8001f34:	b212      	sxth	r2, r2
    }
 8001f36:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8001f3a:	b209      	sxth	r1, r1
 8001f3c:	4718      	bx	r3

08001f3e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8001f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f42:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8001f4e:	6010      	str	r0, [r2, #0]
    }
 8001f50:	4770      	bx	lr

08001f52 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8001f52:	4770      	bx	lr

08001f54 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8001f54:	4770      	bx	lr

08001f56 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8001f56:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8001f5a:	6808      	ldr	r0, [r1, #0]
 8001f5c:	6849      	ldr	r1, [r1, #4]
 8001f5e:	c303      	stmia	r3!, {r0, r1}
    }
 8001f60:	4770      	bx	lr

08001f62 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8001f62:	4770      	bx	lr

08001f64 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8001f64:	4770      	bx	lr

08001f66 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8001f66:	6041      	str	r1, [r0, #4]
    }
 8001f68:	4770      	bx	lr

08001f6a <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 8001f6a:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001f6c:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 8001f6e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8001f72:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8001f76:	8002      	strh	r2, [r0, #0]
 8001f78:	8042      	strh	r2, [r0, #2]
 8001f7a:	8084      	strh	r4, [r0, #4]
 8001f7c:	80c1      	strh	r1, [r0, #6]
        }
 8001f7e:	bd10      	pop	{r4, pc}

08001f80 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 8001f80:	4770      	bx	lr

08001f82 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8001f82:	4770      	bx	lr

08001f84 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8001f86:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8001f90:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8001f94:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8001f98:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	0800223d 	.word	0x0800223d

08001fa4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	7203      	strb	r3, [r0, #8]
    }
 8001fa8:	4770      	bx	lr

08001faa <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 8001faa:	4770      	bx	lr

08001fac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 8001fac:	4770      	bx	lr

08001fae <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 8001fae:	4770      	bx	lr

08001fb0 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8001fb0:	4770      	bx	lr

08001fb2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8001fb2:	4770      	bx	lr

08001fb4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 8001fb4:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8001fb6:	6840      	ldr	r0, [r0, #4]
 8001fb8:	6803      	ldr	r3, [r0, #0]
 8001fba:	3110      	adds	r1, #16
 8001fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fbe:	4718      	bx	r3

08001fc0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 8001fc0:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8001fc2:	6840      	ldr	r0, [r0, #4]
 8001fc4:	6803      	ldr	r3, [r0, #0]
 8001fc6:	3110      	adds	r1, #16
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fca:	4718      	bx	r3

08001fcc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 8001fcc:	4770      	bx	lr

08001fce <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 8001fce:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8001fd0:	6840      	ldr	r0, [r0, #4]
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	3110      	adds	r1, #16
 8001fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fd8:	4718      	bx	r3

08001fda <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 8001fda:	b570      	push	{r4, r5, r6, lr}
 8001fdc:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8001fde:	6840      	ldr	r0, [r0, #4]
 8001fe0:	6803      	ldr	r3, [r0, #0]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	4798      	blx	r3
 8001fe6:	4604      	mov	r4, r0
        while (d)
 8001fe8:	b93c      	cbnz	r4, 8001ffa <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 8001fea:	6868      	ldr	r0, [r5, #4]
 8001fec:	6803      	ldr	r3, [r0, #0]
 8001fee:	f105 0110 	add.w	r1, r5, #16
 8001ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    }
 8001ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8001ff8:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8001ffa:	88a1      	ldrh	r1, [r4, #4]
 8001ffc:	89ab      	ldrh	r3, [r5, #12]
 8001ffe:	1ac9      	subs	r1, r1, r3
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	4620      	mov	r0, r4
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	b209      	sxth	r1, r1
 8002008:	4798      	blx	r3
        return nextSibling;
 800200a:	69a4      	ldr	r4, [r4, #24]
 800200c:	e7ec      	b.n	8001fe8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

0800200e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Cover transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 800200e:	4770      	bx	lr

08002010 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002010:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002012:	68c2      	ldr	r2, [r0, #12]
 8002014:	6841      	ldr	r1, [r0, #4]
 8002016:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8002018:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800201a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800201e:	07d2      	lsls	r2, r2, #31
 8002020:	bf48      	it	mi
 8002022:	590a      	ldrmi	r2, [r1, r4]
 8002024:	689b      	ldr	r3, [r3, #8]
    }
 8002026:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800202a:	bf48      	it	mi
 800202c:	58d3      	ldrmi	r3, [r2, r3]
 800202e:	4718      	bx	r3

08002030 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8002030:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8002032:	6840      	ldr	r0, [r0, #4]
 8002034:	b130      	cbz	r0, 8002044 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	b91a      	cbnz	r2, 8002042 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800203a:	68d8      	ldr	r0, [r3, #12]
 800203c:	f000 0001 	and.w	r0, r0, #1
 8002040:	4770      	bx	lr
 8002042:	2001      	movs	r0, #1
    }
 8002044:	4770      	bx	lr

08002046 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002046:	b510      	push	{r4, lr}
 8002048:	210c      	movs	r1, #12
 800204a:	4604      	mov	r4, r0
 800204c:	f00d fdfe 	bl	800fc4c <_ZdlPvj>
 8002050:	4620      	mov	r0, r4
 8002052:	bd10      	pop	{r4, pc}

08002054 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002054:	b510      	push	{r4, lr}
 8002056:	2110      	movs	r1, #16
 8002058:	4604      	mov	r4, r0
 800205a:	f00d fdf7 	bl	800fc4c <_ZdlPvj>
 800205e:	4620      	mov	r0, r4
 8002060:	bd10      	pop	{r4, pc}

08002062 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002062:	b510      	push	{r4, lr}
 8002064:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8002068:	4604      	mov	r4, r0
 800206a:	f00d fdef 	bl	800fc4c <_ZdlPvj>
 800206e:	4620      	mov	r0, r4
 8002070:	bd10      	pop	{r4, pc}

08002072 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 8002072:	b510      	push	{r4, lr}
 8002074:	2138      	movs	r1, #56	@ 0x38
 8002076:	4604      	mov	r4, r0
 8002078:	f00d fde8 	bl	800fc4c <_ZdlPvj>
 800207c:	4620      	mov	r0, r4
 800207e:	bd10      	pop	{r4, pc}

08002080 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8002080:	b510      	push	{r4, lr}
 8002082:	2128      	movs	r1, #40	@ 0x28
 8002084:	4604      	mov	r4, r0
 8002086:	f00d fde1 	bl	800fc4c <_ZdlPvj>
 800208a:	4620      	mov	r0, r4
 800208c:	bd10      	pop	{r4, pc}

0800208e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
class CoverTransition : public Transition
 800208e:	b510      	push	{r4, lr}
 8002090:	2138      	movs	r1, #56	@ 0x38
 8002092:	4604      	mov	r4, r0
 8002094:	f00d fdda 	bl	800fc4c <_ZdlPvj>
 8002098:	4620      	mov	r0, r4
 800209a:	bd10      	pop	{r4, pc}

0800209c <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800209c:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 800209e:	f008 fa81 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
 80020a2:	6803      	ldr	r3, [r0, #0]
    }
 80020a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	4718      	bx	r3

080020ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80020ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020ae:	4605      	mov	r5, r0
        animationCounter++;
 80020b0:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 80020b2:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 80020b4:	3001      	adds	r0, #1
 80020b6:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80020b8:	4298      	cmp	r0, r3
        animationCounter++;
 80020ba:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 80020bc:	d905      	bls.n	80020ca <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80020be:	2301      	movs	r3, #1
 80020c0:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	72ab      	strb	r3, [r5, #10]
    }
 80020c6:	b003      	add	sp, #12
 80020c8:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80020ca:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
        const int16_t oldValue = calculatedValue;
 80020ce:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80020d2:	2100      	movs	r1, #0
 80020d4:	f009 ff5e 	bl	800bf94 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80020d8:	07c3      	lsls	r3, r0, #31
 80020da:	d506      	bpl.n	80020ea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3e>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80020dc:	2800      	cmp	r0, #0
 80020de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020e2:	bfc8      	it	gt
 80020e4:	2301      	movgt	r3, #1
 80020e6:	4418      	add	r0, r3
 80020e8:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80020ea:	7aab      	ldrb	r3, [r5, #10]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80020ec:	81e8      	strh	r0, [r5, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 80020ee:	1b04      	subs	r4, r0, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80020f0:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80020f2:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80020f4:	d106      	bne.n	8002104 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa8>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b11b      	cbz	r3, 8002104 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80020fc:	f008 fa52 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
 8002100:	f008 fa56 	bl	800a5b0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
        : x(0), y(0), width(0), height(0)
 8002106:	2300      	movs	r3, #0
 8002108:	8812      	ldrh	r2, [r2, #0]
 800210a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800210e:	89eb      	ldrh	r3, [r5, #14]
 8002110:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 8002112:	425b      	negs	r3, r3
 8002114:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8002118:	4b10      	ldr	r3, [pc, #64]	@ (800215c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800211a:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8002124:	f008 fa3e 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
 8002128:	6803      	ldr	r3, [r0, #0]
 800212a:	aa02      	add	r2, sp, #8
 800212c:	e912 0006 	ldmdb	r2, {r1, r2}
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 8002134:	6868      	ldr	r0, [r5, #4]
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4798      	blx	r3
 800213c:	4605      	mov	r5, r0
        while (d)
 800213e:	2d00      	cmp	r5, #0
 8002140:	d0c1      	beq.n	80020c6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8002142:	88a9      	ldrh	r1, [r5, #4]
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	4421      	add	r1, r4
 8002148:	4628      	mov	r0, r5
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	b209      	sxth	r1, r1
 800214e:	4798      	blx	r3
 8002150:	69ad      	ldr	r5, [r5, #24]
 8002152:	e7f4      	b.n	800213e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x92>
 8002154:	2001242a 	.word	0x2001242a
 8002158:	20012420 	.word	0x20012420
 800215c:	20012422 	.word	0x20012422

08002160 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002160:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002164:	b112      	cbz	r2, 800216c <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002166:	6803      	ldr	r3, [r0, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	4718      	bx	r3
    }
 800216c:	4770      	bx	lr
	...

08002170 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002172:	4604      	mov	r4, r0
        animationCounter++;
 8002174:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 8002176:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8002178:	3001      	adds	r0, #1
 800217a:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 800217c:	4298      	cmp	r0, r3
        animationCounter++;
 800217e:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8002180:	d905      	bls.n	800218e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8002182:	2301      	movs	r3, #1
 8002184:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	72a3      	strb	r3, [r4, #10]
    }
 800218a:	b003      	add	sp, #12
 800218c:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800218e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002192:	2100      	movs	r1, #0
 8002194:	f009 fefe 	bl	800bf94 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8002198:	07c3      	lsls	r3, r0, #31
 800219a:	d506      	bpl.n	80021aa <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3a>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800219c:	2800      	cmp	r0, #0
 800219e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021a2:	bfc8      	it	gt
 80021a4:	2301      	movgt	r3, #1
 80021a6:	4418      	add	r0, r3
 80021a8:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80021aa:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8c>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80021ac:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80021ae:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 80021b0:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80021b2:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 80021b4:	4812      	ldr	r0, [pc, #72]	@ (8002200 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
 80021b6:	f9b0 0000 	ldrsh.w	r0, [r0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80021ba:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80021be:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 80021c0:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 80021c2:	442b      	add	r3, r5
 80021c4:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80021c6:	b212      	sxth	r2, r2
 80021c8:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 80021cc:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 80021ce:	8322      	strh	r2, [r4, #24]
 80021d0:	f8ad 2000 	strh.w	r2, [sp]
 80021d4:	2200      	movs	r2, #0
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f8ad 2002 	strh.w	r2, [sp, #2]
 80021dc:	4669      	mov	r1, sp
 80021de:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80021e0:	7aa3      	ldrb	r3, [r4, #10]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d1d1      	bne.n	800218a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0cd      	beq.n	800218a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80021ee:	f008 f9d9 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80021f2:	b003      	add	sp, #12
 80021f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80021f8:	f008 b9da 	b.w	800a5b0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80021fc:	20012420 	.word	0x20012420
 8002200:	20012422 	.word	0x20012422
 8002204:	2001242a 	.word	0x2001242a

08002208 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002208:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800220c:	b11a      	cbz	r2, 8002216 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800220e:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002212:	b102      	cbz	r2, 8002216 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002214:	6018      	str	r0, [r3, #0]
        }
    }
 8002216:	4770      	bx	lr

08002218 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002218:	b510      	push	{r4, lr}
 800221a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800221c:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8002220:	b158      	cbz	r0, 800223a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4798      	blx	r3
 8002228:	b138      	cbz	r0, 800223a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800222a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 800222e:	6803      	ldr	r3, [r0, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800223a:	bd10      	pop	{r4, pc}

0800223c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800223c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002240:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002244:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002246:	68b0      	ldr	r0, [r6, #8]
 8002248:	6803      	ldr	r3, [r0, #0]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4798      	blx	r3
 800224e:	28b3      	cmp	r0, #179	@ 0xb3
 8002250:	d805      	bhi.n	800225e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 8002252:	4b44      	ldr	r3, [pc, #272]	@ (8002364 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>)
 8002254:	4a44      	ldr	r2, [pc, #272]	@ (8002368 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002256:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002258:	4844      	ldr	r0, [pc, #272]	@ (800236c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800225a:	f00d fd25 	bl	800fca8 <__assert_func>
 800225e:	6870      	ldr	r0, [r6, #4]
 8002260:	6803      	ldr	r3, [r0, #0]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4798      	blx	r3
 8002266:	280f      	cmp	r0, #15
 8002268:	d803      	bhi.n	8002272 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 800226a:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800226c:	4a3e      	ldr	r2, [pc, #248]	@ (8002368 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800226e:	21a4      	movs	r1, #164	@ 0xa4
 8002270:	e7f2      	b.n	8002258 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002272:	68f0      	ldr	r0, [r6, #12]
 8002274:	6803      	ldr	r3, [r0, #0]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4798      	blx	r3
 800227a:	280b      	cmp	r0, #11
 800227c:	d803      	bhi.n	8002286 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 800227e:	4b3d      	ldr	r3, [pc, #244]	@ (8002374 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002280:	4a39      	ldr	r2, [pc, #228]	@ (8002368 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002282:	21a5      	movs	r1, #165	@ 0xa5
 8002284:	e7e8      	b.n	8002258 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    Application::getInstance()->clearAllTimerWidgets();
 8002286:	f008 f98d 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800228a:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 800237c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800228e:	3004      	adds	r0, #4
 8002290:	f008 f9d5 	bl	800a63e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002294:	f8d9 0000 	ldr.w	r0, [r9]
 8002298:	b110      	cbz	r0, 80022a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 800229a:	6803      	ldr	r3, [r0, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4798      	blx	r3
    if (*currentTrans)
 80022a0:	f8d9 0000 	ldr.w	r0, [r9]
 80022a4:	b110      	cbz	r0, 80022ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80022a6:	6803      	ldr	r3, [r0, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4798      	blx	r3
    if (*currentScreen)
 80022ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8002380 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 80022b0:	f8d8 0000 	ldr.w	r0, [r8]
 80022b4:	b110      	cbz	r0, 80022bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80022b6:	6803      	ldr	r3, [r0, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4798      	blx	r3
    if (*currentPresenter)
 80022bc:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80022c0:	b110      	cbz	r0, 80022c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 80022c2:	6803      	ldr	r3, [r0, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4798      	blx	r3
    if (*currentScreen)
 80022c8:	f8d8 0000 	ldr.w	r0, [r8]
 80022cc:	b110      	cbz	r0, 80022d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80022ce:	6803      	ldr	r3, [r0, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4798      	blx	r3
    if (*currentPresenter)
 80022d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80022d8:	b110      	cbz	r0, 80022e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80022da:	6803      	ldr	r3, [r0, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80022e0:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80022e2:	6803      	ldr	r3, [r0, #0]
 80022e4:	2100      	movs	r1, #0
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	4798      	blx	r3
        : screenContainer(0), done(false)
 80022ea:	f04f 0b00 	mov.w	fp, #0
 80022ee:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80022f0:	f8c0 b004 	str.w	fp, [r0, #4]
 80022f4:	4604      	mov	r4, r0
 80022f6:	f880 b008 	strb.w	fp, [r0, #8]
 80022fa:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80022fc:	68b0      	ldr	r0, [r6, #8]
 80022fe:	6803      	ldr	r3, [r0, #0]
 8002300:	4659      	mov	r1, fp
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	4798      	blx	r3
 8002306:	4605      	mov	r5, r0
 8002308:	f000 ff5c 	bl	80031c4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800230c:	6870      	ldr	r0, [r6, #4]
 800230e:	6803      	ldr	r3, [r0, #0]
 8002310:	4659      	mov	r1, fp
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	4798      	blx	r3
 8002316:	4629      	mov	r1, r5
 8002318:	4606      	mov	r6, r0
 800231a:	f000 ff2d 	bl	8003178 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 800231e:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002320:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002324:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002328:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800232a:	f8c6 a008 	str.w	sl, [r6, #8]
 800232e:	4628      	mov	r0, r5
 8002330:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002332:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002336:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800233a:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 800233c:	4798      	blx	r3
    newPresenter->activate();
 800233e:	6833      	ldr	r3, [r6, #0]
 8002340:	4630      	mov	r0, r6
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002346:	4621      	mov	r1, r4
 8002348:	4628      	mov	r0, r5
 800234a:	f009 fe1d 	bl	800bf88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	4620      	mov	r0, r4
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	4798      	blx	r3
    newTransition->invalidate();
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4620      	mov	r0, r4
}
 800235c:	b001      	add	sp, #4
 800235e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002362:	4718      	bx	r3
 8002364:	0801143c 	.word	0x0801143c
 8002368:	080114ca 	.word	0x080114ca
 800236c:	0801159c 	.word	0x0801159c
 8002370:	080115e3 	.word	0x080115e3
 8002374:	08011686 	.word	0x08011686
 8002378:	080119d0 	.word	0x080119d0
 800237c:	2001246c 	.word	0x2001246c
 8002380:	20012468 	.word	0x20012468

08002384 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002388:	461d      	mov	r5, r3
        setX(x);
 800238a:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800238c:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002392:	4604      	mov	r4, r0
 8002394:	4616      	mov	r6, r2
        setX(x);
 8002396:	4798      	blx	r3
        setY(y);
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	4631      	mov	r1, r6
 800239c:	4620      	mov	r0, r4
 800239e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a0:	4798      	blx	r3
        setWidth(width);
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	4629      	mov	r1, r5
 80023a6:	4620      	mov	r0, r4
 80023a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023aa:	4798      	blx	r3
        setHeight(height);
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	4639      	mov	r1, r7
 80023b0:	4620      	mov	r0, r4
 80023b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80023b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 80023b8:	4718      	bx	r3
	...

080023bc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl()
{
 80023bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80023c0:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 80023c4:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80023c6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80023ca:	6803      	ldr	r3, [r0, #0]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4798      	blx	r3
 80023d0:	28b3      	cmp	r0, #179	@ 0xb3
 80023d2:	d805      	bhi.n	80023e0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x24>
 80023d4:	4b54      	ldr	r3, [pc, #336]	@ (8002528 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x16c>)
 80023d6:	4a55      	ldr	r2, [pc, #340]	@ (800252c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 80023d8:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80023da:	4855      	ldr	r0, [pc, #340]	@ (8002530 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 80023dc:	f00d fc64 	bl	800fca8 <__assert_func>
 80023e0:	f8db 0004 	ldr.w	r0, [fp, #4]
 80023e4:	6803      	ldr	r3, [r0, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4798      	blx	r3
 80023ea:	280f      	cmp	r0, #15
 80023ec:	d803      	bhi.n	80023f6 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3a>
 80023ee:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 80023f0:	4a4e      	ldr	r2, [pc, #312]	@ (800252c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 80023f2:	21a4      	movs	r1, #164	@ 0xa4
 80023f4:	e7f1      	b.n	80023da <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80023f6:	f8db 000c 	ldr.w	r0, [fp, #12]
 80023fa:	6803      	ldr	r3, [r0, #0]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4798      	blx	r3
 8002400:	2837      	cmp	r0, #55	@ 0x37
 8002402:	d803      	bhi.n	800240c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x50>
 8002404:	4b4c      	ldr	r3, [pc, #304]	@ (8002538 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 8002406:	4a49      	ldr	r2, [pc, #292]	@ (800252c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002408:	21a5      	movs	r1, #165	@ 0xa5
 800240a:	e7e6      	b.n	80023da <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 800240c:	f008 f8ca 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002410:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800254c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>
 8002414:	3004      	adds	r0, #4
 8002416:	f008 f912 	bl	800a63e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800241a:	f8d9 0000 	ldr.w	r0, [r9]
 800241e:	b110      	cbz	r0, 8002426 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6a>
        (*currentTrans)->tearDown();
 8002420:	6803      	ldr	r3, [r0, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4798      	blx	r3
    if (*currentTrans)
 8002426:	f8d9 0000 	ldr.w	r0, [r9]
 800242a:	b110      	cbz	r0, 8002432 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x76>
        (*currentTrans)->~Transition();
 800242c:	6803      	ldr	r3, [r0, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4798      	blx	r3
    if (*currentScreen)
 8002432:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8002550 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 8002436:	f8d8 0000 	ldr.w	r0, [r8]
 800243a:	b110      	cbz	r0, 8002442 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x86>
        (*currentScreen)->tearDownScreen();
 800243c:	6803      	ldr	r3, [r0, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	4798      	blx	r3
    if (*currentPresenter)
 8002442:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002446:	b110      	cbz	r0, 800244e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x92>
        (*currentPresenter)->deactivate();
 8002448:	6803      	ldr	r3, [r0, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4798      	blx	r3
    if (*currentScreen)
 800244e:	f8d8 0000 	ldr.w	r0, [r8]
 8002452:	b110      	cbz	r0, 800245a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x9e>
        (*currentScreen)->~Screen();
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4798      	blx	r3
    if (*currentPresenter)
 800245a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800245e:	b110      	cbz	r0, 8002466 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xaa>
        (*currentPresenter)->~Presenter();
 8002460:	6803      	ldr	r3, [r0, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002466:	f8db 000c 	ldr.w	r0, [fp, #12]
 800246a:	6803      	ldr	r3, [r0, #0]
 800246c:	2100      	movs	r1, #0
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	4798      	blx	r3
          solid()
 8002472:	4b32      	ldr	r3, [pc, #200]	@ (800253c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 8002474:	6003      	str	r3, [r0, #0]
 8002476:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800247a:	8103      	strh	r3, [r0, #8]
 800247c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002480:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002482:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 8002484:	6103      	str	r3, [r0, #16]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002486:	4a2f      	ldr	r2, [pc, #188]	@ (8002544 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
            targetValue = HAL::DISPLAY_WIDTH;
 8002488:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800248a:	f9b2 2000 	ldrsh.w	r2, [r2]
            targetValue = HAL::DISPLAY_WIDTH;
 800248e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002492:	8183      	strh	r3, [r0, #12]
        : screenContainer(0), done(false)
 8002494:	2500      	movs	r5, #0
 8002496:	4604      	mov	r4, r0
 8002498:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 800249a:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 800249c:	81c5      	strh	r5, [r0, #14]
          solid()
 800249e:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80024a2:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80024a6:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 80024aa:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80024ae:	4629      	mov	r1, r5
 80024b0:	9200      	str	r2, [sp, #0]
 80024b2:	3010      	adds	r0, #16
 80024b4:	462a      	mov	r2, r5
 80024b6:	f7ff ff65 	bl	8002384 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80024ba:	f8db 0008 	ldr.w	r0, [fp, #8]
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	4629      	mov	r1, r5
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	4798      	blx	r3
 80024c6:	4606      	mov	r6, r0
 80024c8:	f000 fe7c 	bl	80031c4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80024cc:	f8db 0004 	ldr.w	r0, [fp, #4]
 80024d0:	6803      	ldr	r3, [r0, #0]
 80024d2:	4629      	mov	r1, r5
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	4798      	blx	r3
 80024d8:	4631      	mov	r1, r6
 80024da:	4605      	mov	r5, r0
 80024dc:	f000 fe4c 	bl	8003178 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 80024e0:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 80024e2:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 80024e6:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 80024ea:	6833      	ldr	r3, [r6, #0]
 80024ec:	f8c5 a008 	str.w	sl, [r5, #8]
 80024f0:	4630      	mov	r0, r6
 80024f2:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 80024f4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80024f8:	f8c8 6000 	str.w	r6, [r8]
 80024fc:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 80024fe:	4798      	blx	r3
    newPresenter->activate();
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	4628      	mov	r0, r5
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002508:	4621      	mov	r1, r4
 800250a:	4630      	mov	r0, r6
 800250c:	f009 fd3c 	bl	800bf88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	4620      	mov	r0, r4
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	4798      	blx	r3
    newTransition->invalidate();
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	4620      	mov	r0, r4
}
 800251e:	b003      	add	sp, #12
 8002520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002524:	4718      	bx	r3
 8002526:	bf00      	nop
 8002528:	0801143c 	.word	0x0801143c
 800252c:	08011729 	.word	0x08011729
 8002530:	0801159c 	.word	0x0801159c
 8002534:	080115e3 	.word	0x080115e3
 8002538:	08011686 	.word	0x08011686
 800253c:	08011a18 	.word	0x08011a18
 8002540:	080118fc 	.word	0x080118fc
 8002544:	20012422 	.word	0x20012422
 8002548:	20012420 	.word	0x20012420
 800254c:	2001246c 	.word	0x2001246c
 8002550:	20012468 	.word	0x20012468

08002554 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8002554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002558:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 800255c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800255e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002562:	6803      	ldr	r3, [r0, #0]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4798      	blx	r3
 8002568:	f5b0 7f07 	cmp.w	r0, #540	@ 0x21c
 800256c:	d205      	bcs.n	800257a <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x26>
 800256e:	4b55      	ldr	r3, [pc, #340]	@ (80026c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 8002570:	4a55      	ldr	r2, [pc, #340]	@ (80026c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002572:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002574:	4855      	ldr	r0, [pc, #340]	@ (80026cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 8002576:	f00d fb97 	bl	800fca8 <__assert_func>
 800257a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800257e:	6803      	ldr	r3, [r0, #0]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4798      	blx	r3
 8002584:	280f      	cmp	r0, #15
 8002586:	d803      	bhi.n	8002590 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3c>
 8002588:	4b51      	ldr	r3, [pc, #324]	@ (80026d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 800258a:	4a4f      	ldr	r2, [pc, #316]	@ (80026c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 800258c:	21a4      	movs	r1, #164	@ 0xa4
 800258e:	e7f1      	b.n	8002574 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002590:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002594:	6803      	ldr	r3, [r0, #0]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4798      	blx	r3
 800259a:	2837      	cmp	r0, #55	@ 0x37
 800259c:	d803      	bhi.n	80025a6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x52>
 800259e:	4b4d      	ldr	r3, [pc, #308]	@ (80026d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 80025a0:	4a49      	ldr	r2, [pc, #292]	@ (80026c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 80025a2:	21a5      	movs	r1, #165	@ 0xa5
 80025a4:	e7e6      	b.n	8002574 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 80025a6:	f007 fffd 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80025aa:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80026e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
 80025ae:	3004      	adds	r0, #4
 80025b0:	f008 f845 	bl	800a63e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80025b4:	f8d9 0000 	ldr.w	r0, [r9]
 80025b8:	b110      	cbz	r0, 80025c0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 80025ba:	6803      	ldr	r3, [r0, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	4798      	blx	r3
    if (*currentTrans)
 80025c0:	f8d9 0000 	ldr.w	r0, [r9]
 80025c4:	b110      	cbz	r0, 80025cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 80025c6:	6803      	ldr	r3, [r0, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4798      	blx	r3
    if (*currentScreen)
 80025cc:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 80026ec <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 80025d0:	f8d8 0000 	ldr.w	r0, [r8]
 80025d4:	b110      	cbz	r0, 80025dc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 80025d6:	6803      	ldr	r3, [r0, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4798      	blx	r3
    if (*currentPresenter)
 80025dc:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80025e0:	b110      	cbz	r0, 80025e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 80025e2:	6803      	ldr	r3, [r0, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4798      	blx	r3
    if (*currentScreen)
 80025e8:	f8d8 0000 	ldr.w	r0, [r8]
 80025ec:	b110      	cbz	r0, 80025f4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 80025ee:	6803      	ldr	r3, [r0, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4798      	blx	r3
    if (*currentPresenter)
 80025f4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80025f8:	b110      	cbz	r0, 8002600 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 80025fa:	6803      	ldr	r3, [r0, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002600:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002604:	6803      	ldr	r3, [r0, #0]
 8002606:	2100      	movs	r1, #0
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	4798      	blx	r3
          solid()
 800260c:	4b32      	ldr	r3, [pc, #200]	@ (80026d8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 800260e:	6003      	str	r3, [r0, #0]
 8002610:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002614:	8103      	strh	r3, [r0, #8]
 8002616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800261a:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 800261c:	4b2f      	ldr	r3, [pc, #188]	@ (80026dc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 800261e:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8002620:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	425a      	negs	r2, r3
 8002626:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002628:	4a2e      	ldr	r2, [pc, #184]	@ (80026e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
        : screenContainer(0), done(false)
 800262a:	2500      	movs	r5, #0
 800262c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002630:	6045      	str	r5, [r0, #4]
 8002632:	4604      	mov	r4, r0
          animationCounter(0),
 8002634:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002636:	81c5      	strh	r5, [r0, #14]
          solid()
 8002638:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800263c:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002640:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002644:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002648:	4629      	mov	r1, r5
 800264a:	9200      	str	r2, [sp, #0]
 800264c:	b21b      	sxth	r3, r3
 800264e:	462a      	mov	r2, r5
 8002650:	3010      	adds	r0, #16
 8002652:	f7ff fe97 	bl	8002384 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002656:	f8db 0008 	ldr.w	r0, [fp, #8]
 800265a:	6803      	ldr	r3, [r0, #0]
 800265c:	4629      	mov	r1, r5
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	4798      	blx	r3
 8002662:	4606      	mov	r6, r0
 8002664:	f000 fdf8 	bl	8003258 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002668:	f8db 0004 	ldr.w	r0, [fp, #4]
 800266c:	6803      	ldr	r3, [r0, #0]
 800266e:	4629      	mov	r1, r5
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	4798      	blx	r3
 8002674:	4631      	mov	r1, r6
 8002676:	4605      	mov	r5, r0
 8002678:	f000 fdc2 	bl	8003200 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 800267c:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 800267e:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002682:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002686:	6833      	ldr	r3, [r6, #0]
 8002688:	f8c5 a008 	str.w	sl, [r5, #8]
 800268c:	4630      	mov	r0, r6
 800268e:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002690:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002694:	f8c8 6000 	str.w	r6, [r8]
 8002698:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 800269a:	4798      	blx	r3
    newPresenter->activate();
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	4628      	mov	r0, r5
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80026a4:	4621      	mov	r1, r4
 80026a6:	4630      	mov	r0, r6
 80026a8:	f009 fc6e 	bl	800bf88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	4620      	mov	r0, r4
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	4798      	blx	r3
    newTransition->invalidate();
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4620      	mov	r0, r4
}
 80026ba:	b003      	add	sp, #12
 80026bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c0:	4718      	bx	r3
 80026c2:	bf00      	nop
 80026c4:	0801143c 	.word	0x0801143c
 80026c8:	0801180d 	.word	0x0801180d
 80026cc:	0801159c 	.word	0x0801159c
 80026d0:	080115e3 	.word	0x080115e3
 80026d4:	08011686 	.word	0x08011686
 80026d8:	080119f4 	.word	0x080119f4
 80026dc:	080118fc 	.word	0x080118fc
 80026e0:	20012420 	.word	0x20012420
 80026e4:	20012422 	.word	0x20012422
 80026e8:	2001246c 	.word	0x2001246c
 80026ec:	20012468 	.word	0x20012468

080026f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	4604      	mov	r4, r0
 80026f4:	460d      	mov	r5, r1
 80026f6:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 80026f8:	f008 f83e 	bl	800a778 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80026fc:	4a0f      	ldr	r2, [pc, #60]	@ (800273c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
        : currentPresenter(0),
 80026fe:	2300      	movs	r3, #0
      model(m)
 8002700:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
        return instance;
 8002704:	4d0e      	ldr	r5, [pc, #56]	@ (8002740 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        instance = this;
 8002706:	6014      	str	r4, [r2, #0]
        : pobject(0), pmemfun(0)
 8002708:	e9c4 3353 	strd	r3, r3, [r4, #332]	@ 0x14c
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800270e:	6022      	str	r2, [r4, #0]
 8002710:	6828      	ldr	r0, [r5, #0]
 8002712:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
          pendingScreenTransitionCallback(0)
 8002714:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
 8002718:	e9c4 2351 	strd	r2, r3, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800271c:	6803      	ldr	r3, [r0, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800272a:	b10a      	cbz	r2, 8002730 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>
 800272c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800272e:	b900      	cbnz	r0, 8002732 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x42>
        return instance->lcdRef;
 8002730:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 8002732:	f00c fd3f 	bl	800f1b4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 8002736:	4620      	mov	r0, r4
 8002738:	bd70      	pop	{r4, r5, r6, pc}
 800273a:	bf00      	nop
 800273c:	20012478 	.word	0x20012478
 8002740:	2001242c 	.word	0x2001242c
 8002744:	0801197c 	.word	0x0801197c
 8002748:	08011964 	.word	0x08011964

0800274c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800274e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002752:	2300      	movs	r3, #0
 8002754:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002758:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800275c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002760:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	0800223d 	.word	0x0800223d

0800276c <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 800276e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002772:	2300      	movs	r3, #0
 8002774:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002778:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800277c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002780:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	080023bd 	.word	0x080023bd

0800278c <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 800278e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002792:	2300      	movs	r3, #0
 8002794:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002798:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800279c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027a0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	08002555 	.word	0x08002555

080027ac <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80027ac:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80027ae:	4770      	bx	lr

080027b0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80027b0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80027b2:	4770      	bx	lr

080027b4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80027b4:	4770      	bx	lr

080027b6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80027b6:	888b      	ldrh	r3, [r1, #4]
 80027b8:	69c0      	ldr	r0, [r0, #28]
 80027ba:	680a      	ldr	r2, [r1, #0]
 80027bc:	0adb      	lsrs	r3, r3, #11
 80027be:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80027c2:	4410      	add	r0, r2
 80027c4:	4770      	bx	lr

080027c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80027c6:	b510      	push	{r4, lr}
 80027c8:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80027ca:	b1ba      	cbz	r2, 80027fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80027cc:	7b10      	ldrb	r0, [r2, #12]
 80027ce:	b168      	cbz	r0, 80027ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80027d0:	7b53      	ldrb	r3, [r2, #13]
 80027d2:	7ad2      	ldrb	r2, [r2, #11]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80027da:	431a      	orrs	r2, r3
 80027dc:	6a23      	ldr	r3, [r4, #32]
 80027de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80027e2:	881a      	ldrh	r2, [r3, #0]
 80027e4:	428a      	cmp	r2, r1
 80027e6:	d102      	bne.n	80027ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80027e8:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80027ec:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80027ee:	d805      	bhi.n	80027fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80027f0:	3801      	subs	r0, #1
 80027f2:	b280      	uxth	r0, r0
 80027f4:	3304      	adds	r3, #4
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d1f3      	bne.n	80027e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80027fa:	e7f7      	b.n	80027ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80027fc:	2000      	movs	r0, #0
 80027fe:	e7f5      	b.n	80027ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002800 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002800:	b510      	push	{r4, lr}
 8002802:	212c      	movs	r1, #44	@ 0x2c
 8002804:	4604      	mov	r4, r0
 8002806:	f00d fa21 	bl	800fc4c <_ZdlPvj>
 800280a:	4620      	mov	r0, r4
 800280c:	bd10      	pop	{r4, pc}
	...

08002810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002810:	b530      	push	{r4, r5, lr}
 8002812:	b08b      	sub	sp, #44	@ 0x2c
 8002814:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002816:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800281a:	9508      	str	r5, [sp, #32]
 800281c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8002820:	9507      	str	r5, [sp, #28]
 8002822:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8002826:	9506      	str	r5, [sp, #24]
 8002828:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 800282c:	9505      	str	r5, [sp, #20]
 800282e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8002832:	9504      	str	r5, [sp, #16]
 8002834:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8002838:	9503      	str	r5, [sp, #12]
 800283a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800283e:	9502      	str	r5, [sp, #8]
 8002840:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8002844:	9501      	str	r5, [sp, #4]
 8002846:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800284a:	9500      	str	r5, [sp, #0]
 800284c:	f008 fff6 	bl	800b83c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8002852:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8002854:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002856:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8002858:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800285a:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800285c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800285e:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8002860:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8002862:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002864:	4620      	mov	r0, r4
 8002866:	b00b      	add	sp, #44	@ 0x2c
 8002868:	bd30      	pop	{r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	08011a3c 	.word	0x08011a3c

08002870 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002870:	4770      	bx	lr

08002872 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002872:	4770      	bx	lr

08002874 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002874:	4770      	bx	lr

08002876 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002876:	4770      	bx	lr

08002878 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002878:	4770      	bx	lr

0800287a <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800287a:	4770      	bx	lr

0800287c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800287c:	4770      	bx	lr

0800287e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800287e:	4770      	bx	lr

08002880 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002880:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002882:	68c2      	ldr	r2, [r0, #12]
 8002884:	6844      	ldr	r4, [r0, #4]
 8002886:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002888:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800288a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800288e:	07d2      	lsls	r2, r2, #31
 8002890:	bf48      	it	mi
 8002892:	5962      	ldrmi	r2, [r4, r5]
 8002894:	689b      	ldr	r3, [r3, #8]
    }
 8002896:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002898:	bf48      	it	mi
 800289a:	58d3      	ldrmi	r3, [r2, r3]
 800289c:	4718      	bx	r3

0800289e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800289e:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80028a0:	6840      	ldr	r0, [r0, #4]
 80028a2:	b130      	cbz	r0, 80028b2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	b91a      	cbnz	r2, 80028b0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80028a8:	68d8      	ldr	r0, [r3, #12]
 80028aa:	f000 0001 	and.w	r0, r0, #1
 80028ae:	4770      	bx	lr
 80028b0:	2001      	movs	r0, #1
    }
 80028b2:	4770      	bx	lr

080028b4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80028b4:	b510      	push	{r4, lr}
 80028b6:	2110      	movs	r1, #16
 80028b8:	4604      	mov	r4, r0
 80028ba:	f00d f9c7 	bl	800fc4c <_ZdlPvj>
 80028be:	4620      	mov	r0, r4
 80028c0:	bd10      	pop	{r4, pc}

080028c2 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80028c2:	b510      	push	{r4, lr}
}
 80028c4:	21b0      	movs	r1, #176	@ 0xb0
Screen1ViewBase::~Screen1ViewBase()
 80028c6:	4604      	mov	r4, r0
}
 80028c8:	f00d f9c0 	bl	800fc4c <_ZdlPvj>
 80028cc:	4620      	mov	r0, r4
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 80028d0:	306c      	adds	r0, #108	@ 0x6c
 80028d2:	4288      	cmp	r0, r1
{
 80028d4:	b508      	push	{r3, lr}
    if (&src == &button1)
 80028d6:	d105      	bne.n	80028e4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80028d8:	f007 fe64 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 80028dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 80028e0:	f7ff bf54 	b.w	800278c <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 80028e4:	bd08      	pop	{r3, pc}

080028e6 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 80028e6:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 80028e8:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80028ea:	4604      	mov	r4, r0
        setX(x);
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80028ee:	4615      	mov	r5, r2
        setX(x);
 80028f0:	4798      	blx	r3
        setY(y);
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	4629      	mov	r1, r5
 80028f6:	4620      	mov	r0, r4
 80028f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80028fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80028fe:	4718      	bx	r3

08002900 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002902:	4604      	mov	r4, r0
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002904:	4625      	mov	r5, r4
        : presenter(0)
 8002906:	f009 f993 	bl	800bc30 <_ZN8touchgfx6ScreenC1Ev>
 800290a:	2200      	movs	r2, #0
 800290c:	4b33      	ldr	r3, [pc, #204]	@ (80029dc <_ZN15Screen1ViewBaseC1Ev+0xdc>)
 800290e:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8002910:	f845 3b40 	str.w	r3, [r5], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002914:	4b32      	ldr	r3, [pc, #200]	@ (80029e0 <_ZN15Screen1ViewBaseC1Ev+0xe0>)
          cachedAbsX(0),
 8002916:	6622      	str	r2, [r4, #96]	@ 0x60
        : x(0), y(0), width(0), height(0)
 8002918:	e9c4 3210 	strd	r3, r2, [r4, #64]	@ 0x40
          touchable(false),
 800291c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002920:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8002924:	23ff      	movs	r3, #255	@ 0xff
 8002926:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        touchable = touch;
 800292a:	f240 1301 	movw	r3, #257	@ 0x101
 800292e:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8002932:	4b2c      	ldr	r3, [pc, #176]	@ (80029e4 <_ZN15Screen1ViewBaseC1Ev+0xe4>)
 8002934:	66e3      	str	r3, [r4, #108]	@ 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800293a:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800293e:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8002942:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
        : pobject(pObject), pmemfun(pmemfun_1)
 8002946:	4b28      	ldr	r3, [pc, #160]	@ (80029e8 <_ZN15Screen1ViewBaseC1Ev+0xe8>)
        : color(col)
 8002948:	66a2      	str	r2, [r4, #104]	@ 0x68
 800294a:	e9c4 3428 	strd	r3, r4, [r4, #160]	@ 0xa0
 800294e:	4b27      	ldr	r3, [pc, #156]	@ (80029ec <_ZN15Screen1ViewBaseC1Ev+0xec>)
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002950:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
        setXY(x, y);
 8002954:	4611      	mov	r1, r2
 8002956:	4628      	mov	r0, r5
        : x(0), y(0), width(0), height(0)
 8002958:	e9c4 2212 	strd	r2, r2, [r4, #72]	@ 0x48
          parent(0),
 800295c:	e9c4 2214 	strd	r2, r2, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 8002960:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
 8002964:	e9c4 221c 	strd	r2, r2, [r4, #112]	@ 0x70
 8002968:	e9c4 221e 	strd	r2, r2, [r4, #120]	@ 0x78
          nextSibling(0),
 800296c:	e9c4 2220 	strd	r2, r2, [r4, #128]	@ 0x80
          cachedAbsX(0),
 8002970:	e9c4 2222 	strd	r2, r2, [r4, #136]	@ 0x88
 8002974:	f884 2098 	strb.w	r2, [r4, #152]	@ 0x98
 8002978:	e9c4 322a 	strd	r3, r2, [r4, #168]	@ 0xa8
        setXY(x, y);
 800297c:	f7ff ffb3 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002980:	4628      	mov	r0, r5
 8002982:	21f0      	movs	r1, #240	@ 0xf0
 8002984:	f7ff fac6 	bl	8001f14 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002988:	4628      	mov	r0, r5
 800298a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800298e:	f7ff fac3 	bl	8001f18 <_ZN8touchgfx8Drawable9setHeightEs>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002992:	1d27      	adds	r7, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002994:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002998:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 800299c:	66a3      	str	r3, [r4, #104]	@ 0x68
 800299e:	4629      	mov	r1, r5
 80029a0:	4638      	mov	r0, r7
 80029a2:	f005 fab5 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 199);
 80029a6:	4630      	mov	r0, r6
 80029a8:	22c7      	movs	r2, #199	@ 0xc7
 80029aa:	2114      	movs	r1, #20
 80029ac:	f7ff ff9b 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 80029b0:	2303      	movs	r3, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 80029b2:	aa01      	add	r2, sp, #4
 80029b4:	4669      	mov	r1, sp
 80029b6:	4630      	mov	r0, r6
 80029b8:	f8ad 3000 	strh.w	r3, [sp]
 80029bc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80029c0:	f006 fc6c 	bl	800929c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80029c4:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 80029c8:	4638      	mov	r0, r7
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80029ca:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 80029ce:	4631      	mov	r1, r6
 80029d0:	f005 fa9e 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80029d4:	4620      	mov	r0, r4
 80029d6:	b003      	add	sp, #12
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029da:	bf00      	nop
 80029dc:	08011abc 	.word	0x08011abc
 80029e0:	08011ff0 	.word	0x08011ff0
 80029e4:	08012058 	.word	0x08012058
 80029e8:	08011aa4 	.word	0x08011aa4
 80029ec:	080028d1 	.word	0x080028d1

080029f0 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80029f0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80029f2:	4770      	bx	lr

080029f4 <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 80029f4:	4770      	bx	lr

080029f6 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 80029f6:	4770      	bx	lr

080029f8 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 80029f8:	4770      	bx	lr

080029fa <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80029fa:	4770      	bx	lr

080029fc <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 80029fc:	4770      	bx	lr

080029fe <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80029fe:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002a00:	68c2      	ldr	r2, [r0, #12]
 8002a02:	6844      	ldr	r4, [r0, #4]
 8002a04:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002a06:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002a08:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002a0c:	07d2      	lsls	r2, r2, #31
 8002a0e:	bf48      	it	mi
 8002a10:	5962      	ldrmi	r2, [r4, r5]
 8002a12:	689b      	ldr	r3, [r3, #8]
    }
 8002a14:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002a16:	bf48      	it	mi
 8002a18:	58d3      	ldrmi	r3, [r2, r3]
 8002a1a:	4718      	bx	r3

08002a1c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8002a1c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8002a1e:	6840      	ldr	r0, [r0, #4]
 8002a20:	b130      	cbz	r0, 8002a30 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	b91a      	cbnz	r2, 8002a2e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8002a26:	68d8      	ldr	r0, [r3, #12]
 8002a28:	f000 0001 	and.w	r0, r0, #1
 8002a2c:	4770      	bx	lr
 8002a2e:	2001      	movs	r0, #1
    }
 8002a30:	4770      	bx	lr

08002a32 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002a32:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8002a36:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8002a3a:	4770      	bx	lr

08002a3c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8002a3c:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8002a3e:	3038      	adds	r0, #56	@ 0x38
 8002a40:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8002a44:	b113      	cbz	r3, 8002a4c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8002a46:	3136      	adds	r1, #54	@ 0x36
 8002a48:	f006 bcf5 	b.w	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002a4c:	3134      	adds	r1, #52	@ 0x34
 8002a4e:	e7fb      	b.n	8002a48 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08002a50 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8002a50:	b510      	push	{r4, lr}
 8002a52:	2164      	movs	r1, #100	@ 0x64
 8002a54:	4604      	mov	r4, r0
 8002a56:	f00d f8f9 	bl	800fc4c <_ZdlPvj>
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	bd10      	pop	{r4, pc}

08002a5e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002a5e:	b510      	push	{r4, lr}
 8002a60:	2110      	movs	r1, #16
 8002a62:	4604      	mov	r4, r0
 8002a64:	f00d f8f2 	bl	800fc4c <_ZdlPvj>
 8002a68:	4620      	mov	r0, r4
 8002a6a:	bd10      	pop	{r4, pc}

08002a6c <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8002a6c:	b510      	push	{r4, lr}
}
 8002a6e:	f44f 7105 	mov.w	r1, #532	@ 0x214
Screen2ViewBase::~Screen2ViewBase()
 8002a72:	4604      	mov	r4, r0
}
 8002a74:	f00d f8ea 	bl	800fc4c <_ZdlPvj>
 8002a78:	4620      	mov	r0, r4
 8002a7a:	bd10      	pop	{r4, pc}

08002a7c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8002a80:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002a82:	b150      	cbz	r0, 8002a9a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8002a84:	6803      	ldr	r3, [r0, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4798      	blx	r3
 8002a8a:	b130      	cbz	r0, 8002a9a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8002a8c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	4621      	mov	r1, r4
 8002a92:	689b      	ldr	r3, [r3, #8]
        }
    }
 8002a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8002a98:	4718      	bx	r3
    }
 8002a9a:	bd10      	pop	{r4, pc}

08002a9c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8002a9c:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002a9e:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8002aa0:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002aa8:	b90b      	cbnz	r3, 8002aae <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8002aaa:	b116      	cbz	r6, 8002ab2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002aae:	2e00      	cmp	r6, #0
 8002ab0:	d0fc      	beq.n	8002aac <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac4:	4798      	blx	r3
            invalidate();
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	4620      	mov	r0, r4
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8002ace:	2e00      	cmp	r6, #0
 8002ad0:	d0ec      	beq.n	8002aac <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8002ad2:	792b      	ldrb	r3, [r5, #4]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d1e9      	bne.n	8002aac <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	4620      	mov	r0, r4
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8002ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8002ae4:	4718      	bx	r3

08002ae6 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002ae6:	f500 73ba 	add.w	r3, r0, #372	@ 0x174
 8002aea:	428b      	cmp	r3, r1
{
 8002aec:	b510      	push	{r4, lr}
 8002aee:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8002af0:	d109      	bne.n	8002b06 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002af2:	f007 fd57 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 8002af6:	f7ff fe39 	bl	800276c <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	4620      	mov	r0, r4
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8002b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 8002b04:	4718      	bx	r3
}
 8002b06:	bd10      	pop	{r4, pc}

08002b08 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8002b08:	4a07      	ldr	r2, [pc, #28]	@ (8002b28 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8002b0a:	6002      	str	r2, [r0, #0]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002b12:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8002b16:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8002b1a:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8002b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b22:	8482      	strh	r2, [r0, #36]	@ 0x24
    }
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	0801218c 	.word	0x0801218c

08002b2c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 8002b2c:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8002b32:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8002b34:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002b36:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 8002b3a:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002b3c:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002b3e:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002b40:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002b42:	f00a fa05 	bl	800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8002b46:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8002b4a:	4607      	mov	r7, r0
 8002b4c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002b50:	4640      	mov	r0, r8
 8002b52:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8002b56:	f00a fa2f 	bl	800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8002b5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b5e:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8002b62:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002b66:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8002b6a:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8002b6e:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 8002b72:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002b76:	b212      	sxth	r2, r2
 8002b78:	b209      	sxth	r1, r1
 8002b7a:	f7ff feb4 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	4620      	mov	r0, r4
 8002b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8002b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8002b8a:	4718      	bx	r3

08002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8002b8c:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8002b8e:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8002b90:	4604      	mov	r4, r0
 8002b92:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8002b94:	2100      	movs	r1, #0
 8002b96:	f00d fa8e 	bl	80100b6 <memset>
class Widget : public Drawable
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff ffb4 	bl	8002b08 <_ZN8touchgfx8DrawableC1Ev>
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8002ba2:	6023      	str	r3, [r4, #0]
 8002ba4:	882b      	ldrh	r3, [r5, #0]
 8002ba6:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002ba8:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 8002baa:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8002bac:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f006 fc40 	bl	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	bd38      	pop	{r3, r4, r5, pc}
 8002bba:	bf00      	nop
 8002bbc:	080120cc 	.word	0x080120cc

08002bc0 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8002bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	b089      	sub	sp, #36	@ 0x24
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8002bc8:	4627      	mov	r7, r4
 8002bca:	2500      	movs	r5, #0
 8002bcc:	f009 f830 	bl	800bc30 <_ZN8touchgfx6ScreenC1Ev>
 8002bd0:	4b92      	ldr	r3, [pc, #584]	@ (8002e1c <_ZN15Screen2ViewBaseC1Ev+0x25c>)
 8002bd2:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002bd4:	f847 3b40 	str.w	r3, [r7], #64
        : Widget(), alpha(255), color(0)
 8002bd8:	2226      	movs	r2, #38	@ 0x26
 8002bda:	4629      	mov	r1, r5
 8002bdc:	4638      	mov	r0, r7
 8002bde:	f00d fa6a 	bl	80100b6 <memset>
 8002be2:	4638      	mov	r0, r7
 8002be4:	f7ff ff90 	bl	8002b08 <_ZN8touchgfx8DrawableC1Ev>
 8002be8:	4b8d      	ldr	r3, [pc, #564]	@ (8002e20 <_ZN15Screen2ViewBaseC1Ev+0x260>)
 8002bea:	6423      	str	r3, [r4, #64]	@ 0x40
 8002bec:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8002bf0:	23ff      	movs	r3, #255	@ 0xff
 8002bf2:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8002bf6:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8002bfa:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8002bfe:	a907      	add	r1, sp, #28
        : color(col)
 8002c00:	66a5      	str	r5, [r4, #104]	@ 0x68
 8002c02:	4658      	mov	r0, fp
 8002c04:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c08:	f7ff ffc0 	bl	8002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c0c:	a907      	add	r1, sp, #28
 8002c0e:	4650      	mov	r0, sl
 8002c10:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c14:	f7ff ffba 	bl	8002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c18:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8002c1c:	a907      	add	r1, sp, #28
 8002c1e:	4618      	mov	r0, r3
 8002c20:	9302      	str	r3, [sp, #8]
 8002c22:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c26:	f7ff ffb1 	bl	8002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c2a:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8002c2e:	a907      	add	r1, sp, #28
 8002c30:	4618      	mov	r0, r3
 8002c32:	9303      	str	r3, [sp, #12]
 8002c34:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c38:	f7ff ffa8 	bl	8002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c3c:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8002c40:	a907      	add	r1, sp, #28
 8002c42:	4618      	mov	r0, r3
 8002c44:	9304      	str	r3, [sp, #16]
 8002c46:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c4a:	f7ff ff9f 	bl	8002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c4e:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8002c52:	f504 78ba 	add.w	r8, r4, #372	@ 0x174
 8002c56:	a907      	add	r1, sp, #28
 8002c58:	4618      	mov	r0, r3
 8002c5a:	9305      	str	r3, [sp, #20]
 8002c5c:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c60:	f7ff ff94 	bl	8002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
          firstChild(0)
 8002c64:	4640      	mov	r0, r8
 8002c66:	f7ff ff4f 	bl	8002b08 <_ZN8touchgfx8DrawableC1Ev>
        : pressed(false), alpha(255), action(0)
 8002c6a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002c6e:	f8a4 31a0 	strh.w	r3, [r4, #416]	@ 0x1a0
        touchable = touch;
 8002c72:	f04f 0301 	mov.w	r3, #1
 8002c76:	f884 3198 	strb.w	r3, [r4, #408]	@ 0x198
        : T()
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e24 <_ZN15Screen2ViewBaseC1Ev+0x264>)
 8002c7c:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 8002c80:	f504 79d6 	add.w	r9, r4, #428	@ 0x1ac
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
 8002c8c:	a907      	add	r1, sp, #28
 8002c8e:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
 8002c92:	f8c4 51a4 	str.w	r5, [r4, #420]	@ 0x1a4
 8002c96:	4648      	mov	r0, r9
 8002c98:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002c9c:	f7ff ff76 	bl	8002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	f504 79ec 	add.w	r9, r4, #472	@ 0x1d8
 8002ca8:	f005 f932 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002cac:	a907      	add	r1, sp, #28
 8002cae:	4648      	mov	r0, r9
 8002cb0:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002cb4:	f7ff ff6a 	bl	8002b8c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 8002cb8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e28 <_ZN15Screen2ViewBaseC1Ev+0x268>)
 8002cba:	e9c4 3481 	strd	r3, r4, [r4, #516]	@ 0x204
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <_ZN15Screen2ViewBaseC1Ev+0x26c>)
 8002cc0:	e9c4 3583 	strd	r3, r5, [r4, #524]	@ 0x20c
    __background.setPosition(0, 0, 240, 320);
 8002cc4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002cc8:	462a      	mov	r2, r5
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	4629      	mov	r1, r5
 8002cce:	4638      	mov	r0, r7
 8002cd0:	23f0      	movs	r3, #240	@ 0xf0
 8002cd2:	1d26      	adds	r6, r4, #4
 8002cd4:	f7ff fb56 	bl	8002384 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8002cd8:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002cdc:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002cde:	4639      	mov	r1, r7
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f005 f915 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track4.setXY(0, 0);
 8002ce6:	462a      	mov	r2, r5
 8002ce8:	4629      	mov	r1, r5
 8002cea:	4658      	mov	r0, fp
 8002cec:	f7ff fdfb 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 8002cf0:	2308      	movs	r3, #8
    track4.setBitmap(touchgfx::Bitmap(BITMAP_TRACK4_ID));
 8002cf2:	a907      	add	r1, sp, #28
 8002cf4:	4658      	mov	r0, fp
 8002cf6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002cfa:	f006 fb9c 	bl	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002cfe:	4659      	mov	r1, fp
 8002d00:	4630      	mov	r0, r6
        visible = vis;
 8002d02:	f884 5091 	strb.w	r5, [r4, #145]	@ 0x91
 8002d06:	f005 f903 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track3.setXY(0, 0);
 8002d0a:	462a      	mov	r2, r5
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	4650      	mov	r0, sl
 8002d10:	f7ff fde9 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 8002d14:	2307      	movs	r3, #7
    track3.setBitmap(touchgfx::Bitmap(BITMAP_TRACK3_ID));
 8002d16:	a907      	add	r1, sp, #28
 8002d18:	4650      	mov	r0, sl
 8002d1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d1e:	f006 fb8a 	bl	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d22:	4651      	mov	r1, sl
 8002d24:	4630      	mov	r0, r6
 8002d26:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8002d2a:	f005 f8f1 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track2.setXY(0, 0);
 8002d2e:	462a      	mov	r2, r5
 8002d30:	9802      	ldr	r0, [sp, #8]
 8002d32:	4629      	mov	r1, r5
 8002d34:	f7ff fdd7 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 8002d38:	2306      	movs	r3, #6
    track2.setBitmap(touchgfx::Bitmap(BITMAP_TRACK2_ID));
 8002d3a:	9802      	ldr	r0, [sp, #8]
 8002d3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d40:	a907      	add	r1, sp, #28
 8002d42:	f006 fb78 	bl	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d46:	9902      	ldr	r1, [sp, #8]
 8002d48:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 8002d4c:	4630      	mov	r0, r6
 8002d4e:	f005 f8df 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 0);
 8002d52:	462a      	mov	r2, r5
 8002d54:	9803      	ldr	r0, [sp, #12]
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7ff fdc5 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 8002d5c:	2305      	movs	r3, #5
    track1.setBitmap(touchgfx::Bitmap(BITMAP_TRACK1_ID));
 8002d5e:	9803      	ldr	r0, [sp, #12]
 8002d60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d64:	a907      	add	r1, sp, #28
 8002d66:	f006 fb66 	bl	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d6a:	9903      	ldr	r1, [sp, #12]
 8002d6c:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
 8002d70:	4630      	mov	r0, r6
 8002d72:	f005 f8cd 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 8002d76:	462a      	mov	r2, r5
 8002d78:	9804      	ldr	r0, [sp, #16]
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7ff fdb3 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 8002d80:	2304      	movs	r3, #4
    track0.setBitmap(touchgfx::Bitmap(BITMAP_TRACK0_ID));
 8002d82:	9804      	ldr	r0, [sp, #16]
 8002d84:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d88:	a907      	add	r1, sp, #28
 8002d8a:	f006 fb54 	bl	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d8e:	9904      	ldr	r1, [sp, #16]
 8002d90:	f884 5141 	strb.w	r5, [r4, #321]	@ 0x141
 8002d94:	4630      	mov	r0, r6
 8002d96:	f005 f8bb 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(95, 160);
 8002d9a:	22a0      	movs	r2, #160	@ 0xa0
 8002d9c:	9805      	ldr	r0, [sp, #20]
 8002d9e:	215f      	movs	r1, #95	@ 0x5f
 8002da0:	f7ff fda1 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 8002da4:	2302      	movs	r3, #2
    image1.setBitmap(touchgfx::Bitmap(BITMAP_REDCAR_ID));
 8002da6:	9805      	ldr	r0, [sp, #20]
 8002da8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002dac:	a907      	add	r1, sp, #28
 8002dae:	f006 fb42 	bl	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002db2:	9905      	ldr	r1, [sp, #20]
 8002db4:	4630      	mov	r0, r6
 8002db6:	f005 f8ab 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 8002dba:	aa07      	add	r2, sp, #28
 8002dbc:	a906      	add	r1, sp, #24
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	f8ad 5018 	strh.w	r5, [sp, #24]
 8002dc4:	f8ad 501c 	strh.w	r5, [sp, #28]
 8002dc8:	f7ff feb0 	bl	8002b2c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 8002dcc:	f504 7301 	add.w	r3, r4, #516	@ 0x204
        action = &callback;
 8002dd0:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
    flexButton1.setPosition(204, 282, 32, 32);
 8002dd4:	2320      	movs	r3, #32
        rect.x = x;
 8002dd6:	f8c4 51b0 	str.w	r5, [r4, #432]	@ 0x1b0
 8002dda:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4640      	mov	r0, r8
 8002de2:	21cc      	movs	r1, #204	@ 0xcc
 8002de4:	f7ff face 	bl	8002384 <_ZN8touchgfx8Drawable11setPositionEssss>
 8002de8:	4641      	mov	r1, r8
 8002dea:	4630      	mov	r0, r6
 8002dec:	f005 f890 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lamb.setXY(63, 20);
 8002df0:	2214      	movs	r2, #20
 8002df2:	4648      	mov	r0, r9
 8002df4:	213f      	movs	r1, #63	@ 0x3f
 8002df6:	f7ff fd76 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 8002dfa:	f04f 0301 	mov.w	r3, #1
    lamb.setBitmap(touchgfx::Bitmap(BITMAP_LAMB_ID));
 8002dfe:	a907      	add	r1, sp, #28
 8002e00:	4648      	mov	r0, r9
 8002e02:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002e06:	f006 fb16 	bl	8009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	f005 f87f 	bl	8007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002e12:	4620      	mov	r0, r4
 8002e14:	b009      	add	sp, #36	@ 0x24
 8002e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1a:	bf00      	nop
 8002e1c:	08011ba8 	.word	0x08011ba8
 8002e20:	08011ff0 	.word	0x08011ff0
 8002e24:	08011af0 	.word	0x08011af0
 8002e28:	08011b90 	.word	0x08011b90
 8002e2c:	08002ae7 	.word	0x08002ae7

08002e30 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002e30:	4770      	bx	lr
	...

08002e34 <_Z23getFont_verdana_10_4bppv>:
{
 8002e34:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002e36:	4d16      	ldr	r5, [pc, #88]	@ (8002e90 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8002e38:	682c      	ldr	r4, [r5, #0]
 8002e3a:	f3bf 8f5b 	dmb	ish
 8002e3e:	f014 0401 	ands.w	r4, r4, #1
{
 8002e42:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002e44:	d120      	bne.n	8002e88 <_Z23getFont_verdana_10_4bppv+0x54>
 8002e46:	4628      	mov	r0, r5
 8002e48:	f00c ff02 	bl	800fc50 <__cxa_guard_acquire>
 8002e4c:	b1e0      	cbz	r0, 8002e88 <_Z23getFont_verdana_10_4bppv+0x54>
 8002e4e:	233f      	movs	r3, #63	@ 0x3f
 8002e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e52:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002e54:	9308      	str	r3, [sp, #32]
 8002e56:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002e58:	4910      	ldr	r1, [pc, #64]	@ (8002e9c <_Z23getFont_verdana_10_4bppv+0x68>)
 8002e5a:	4811      	ldr	r0, [pc, #68]	@ (8002ea0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002e5c:	940a      	str	r4, [sp, #40]	@ 0x28
 8002e5e:	2201      	movs	r2, #1
 8002e60:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002e64:	2304      	movs	r3, #4
 8002e66:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002e6a:	230a      	movs	r3, #10
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8002e72:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002e76:	9405      	str	r4, [sp, #20]
 8002e78:	f7ff fcca 	bl	8002810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002e7c:	4809      	ldr	r0, [pc, #36]	@ (8002ea4 <_Z23getFont_verdana_10_4bppv+0x70>)
 8002e7e:	f00c ff31 	bl	800fce4 <atexit>
 8002e82:	4628      	mov	r0, r5
 8002e84:	f00c fef0 	bl	800fc68 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8002e88:	4805      	ldr	r0, [pc, #20]	@ (8002ea0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002e8a:	b00f      	add	sp, #60	@ 0x3c
 8002e8c:	bd30      	pop	{r4, r5, pc}
 8002e8e:	bf00      	nop
 8002e90:	20001618 	.word	0x20001618
 8002e94:	08012554 	.word	0x08012554
 8002e98:	08012560 	.word	0x08012560
 8002e9c:	08012524 	.word	0x08012524
 8002ea0:	2000161c 	.word	0x2000161c
 8002ea4:	08002e31 	.word	0x08002e31

08002ea8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002ea8:	4770      	bx	lr
	...

08002eac <_Z23getFont_verdana_20_4bppv>:
{
 8002eac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002eae:	4d16      	ldr	r5, [pc, #88]	@ (8002f08 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8002eb0:	682c      	ldr	r4, [r5, #0]
 8002eb2:	f3bf 8f5b 	dmb	ish
 8002eb6:	f014 0401 	ands.w	r4, r4, #1
{
 8002eba:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002ebc:	d120      	bne.n	8002f00 <_Z23getFont_verdana_20_4bppv+0x54>
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f00c fec6 	bl	800fc50 <__cxa_guard_acquire>
 8002ec4:	b1e0      	cbz	r0, 8002f00 <_Z23getFont_verdana_20_4bppv+0x54>
 8002ec6:	233f      	movs	r3, #63	@ 0x3f
 8002ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eca:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <_Z23getFont_verdana_20_4bppv+0x60>)
 8002ecc:	9308      	str	r3, [sp, #32]
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002ed0:	4910      	ldr	r1, [pc, #64]	@ (8002f14 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002ed2:	4811      	ldr	r0, [pc, #68]	@ (8002f18 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002ed4:	940a      	str	r4, [sp, #40]	@ 0x28
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002edc:	2304      	movs	r3, #4
 8002ede:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002ee2:	2314      	movs	r3, #20
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8002eea:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002eee:	9405      	str	r4, [sp, #20]
 8002ef0:	f7ff fc8e 	bl	8002810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002ef4:	4809      	ldr	r0, [pc, #36]	@ (8002f1c <_Z23getFont_verdana_20_4bppv+0x70>)
 8002ef6:	f00c fef5 	bl	800fce4 <atexit>
 8002efa:	4628      	mov	r0, r5
 8002efc:	f00c feb4 	bl	800fc68 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8002f00:	4805      	ldr	r0, [pc, #20]	@ (8002f18 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002f02:	b00f      	add	sp, #60	@ 0x3c
 8002f04:	bd30      	pop	{r4, r5, pc}
 8002f06:	bf00      	nop
 8002f08:	20001648 	.word	0x20001648
 8002f0c:	08012558 	.word	0x08012558
 8002f10:	08012564 	.word	0x08012564
 8002f14:	08012534 	.word	0x08012534
 8002f18:	2000164c 	.word	0x2000164c
 8002f1c:	08002ea9 	.word	0x08002ea9

08002f20 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002f20:	4770      	bx	lr
	...

08002f24 <_Z23getFont_verdana_40_4bppv>:
{
 8002f24:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002f26:	4d16      	ldr	r5, [pc, #88]	@ (8002f80 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8002f28:	682c      	ldr	r4, [r5, #0]
 8002f2a:	f3bf 8f5b 	dmb	ish
 8002f2e:	f014 0401 	ands.w	r4, r4, #1
{
 8002f32:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002f34:	d120      	bne.n	8002f78 <_Z23getFont_verdana_40_4bppv+0x54>
 8002f36:	4628      	mov	r0, r5
 8002f38:	f00c fe8a 	bl	800fc50 <__cxa_guard_acquire>
 8002f3c:	b1e0      	cbz	r0, 8002f78 <_Z23getFont_verdana_40_4bppv+0x54>
 8002f3e:	233f      	movs	r3, #63	@ 0x3f
 8002f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002f44:	9308      	str	r3, [sp, #32]
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002f48:	4910      	ldr	r1, [pc, #64]	@ (8002f8c <_Z23getFont_verdana_40_4bppv+0x68>)
 8002f4a:	4811      	ldr	r0, [pc, #68]	@ (8002f90 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002f4c:	940a      	str	r4, [sp, #40]	@ 0x28
 8002f4e:	2201      	movs	r2, #1
 8002f50:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002f54:	2304      	movs	r3, #4
 8002f56:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002f5a:	2328      	movs	r3, #40	@ 0x28
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8002f62:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002f66:	9405      	str	r4, [sp, #20]
 8002f68:	f7ff fc52 	bl	8002810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002f6c:	4809      	ldr	r0, [pc, #36]	@ (8002f94 <_Z23getFont_verdana_40_4bppv+0x70>)
 8002f6e:	f00c feb9 	bl	800fce4 <atexit>
 8002f72:	4628      	mov	r0, r5
 8002f74:	f00c fe78 	bl	800fc68 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8002f78:	4805      	ldr	r0, [pc, #20]	@ (8002f90 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002f7a:	b00f      	add	sp, #60	@ 0x3c
 8002f7c:	bd30      	pop	{r4, r5, pc}
 8002f7e:	bf00      	nop
 8002f80:	20001678 	.word	0x20001678
 8002f84:	0801255c 	.word	0x0801255c
 8002f88:	08012568 	.word	0x08012568
 8002f8c:	08012544 	.word	0x08012544
 8002f90:	2000167c 	.word	0x2000167c
 8002f94:	08002f21 	.word	0x08002f21

08002f98 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8002f98:	2000      	movs	r0, #0
 8002f9a:	4770      	bx	lr

08002f9c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	4770      	bx	lr

08002fa0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002fa0:	b40e      	push	{r1, r2, r3}
 8002fa2:	b503      	push	{r0, r1, lr}
 8002fa4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002fa6:	2100      	movs	r1, #0
{
 8002fa8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002fac:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002fae:	f008 fa6d 	bl	800b48c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002fb2:	b002      	add	sp, #8
 8002fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fb8:	b003      	add	sp, #12
 8002fba:	4770      	bx	lr

08002fbc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002fbc:	b40c      	push	{r2, r3}
 8002fbe:	b507      	push	{r0, r1, r2, lr}
 8002fc0:	ab04      	add	r3, sp, #16
 8002fc2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002fc6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002fc8:	f008 fa60 	bl	800b48c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002fcc:	b003      	add	sp, #12
 8002fce:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fd2:	b002      	add	sp, #8
 8002fd4:	4770      	bx	lr
	...

08002fd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8002fd8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8002fda:	b510      	push	{r4, lr}
 8002fdc:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002fde:	b373      	cbz	r3, 800303e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002fe0:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8002fe2:	b92b      	cbnz	r3, 8002ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002fe4:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8002fe6:	4a19      	ldr	r2, [pc, #100]	@ (800304c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 8002fe8:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002fea:	4819      	ldr	r0, [pc, #100]	@ (8003050 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002fec:	f00c fe5c 	bl	800fca8 <__assert_func>
            return buffer[pos];
 8002ff0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8002ff2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ff6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002ff8:	b30b      	cbz	r3, 800303e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8002ffa:	f009 fcc2 	bl	800c982 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002ffe:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003000:	2b01      	cmp	r3, #1
 8003002:	d803      	bhi.n	800300c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003004:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003006:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003008:	21cb      	movs	r1, #203	@ 0xcb
 800300a:	e7ee      	b.n	8002fea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800300c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800300e:	1c53      	adds	r3, r2, #1
 8003010:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003012:	2b09      	cmp	r3, #9
 8003014:	4619      	mov	r1, r3
 8003016:	bf88      	it	hi
 8003018:	f1a3 010a 	subhi.w	r1, r3, #10
 800301c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003020:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003024:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003026:	4281      	cmp	r1, r0
 8003028:	d109      	bne.n	800303e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800302a:	2b0a      	cmp	r3, #10
 800302c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003030:	bf28      	it	cs
 8003032:	2300      	movcs	r3, #0

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003034:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003038:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 800303a:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 800303c:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800303e:	4620      	mov	r0, r4
}
 8003040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003044:	f009 bba0 	b.w	800c788 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003048:	08011bd8 	.word	0x08011bd8
 800304c:	08011be1 	.word	0x08011be1
 8003050:	08011c8c 	.word	0x08011c8c
 8003054:	08011cd6 	.word	0x08011cd6
 8003058:	08011ce4 	.word	0x08011ce4

0800305c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 800305c:	f009 bb5b 	b.w	800c716 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003060 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003060:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003062:	bb18      	cbnz	r0, 80030ac <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003064:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003066:	4813      	ldr	r0, [pc, #76]	@ (80030b4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003068:	681c      	ldr	r4, [r3, #0]
 800306a:	4913      	ldr	r1, [pc, #76]	@ (80030b8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800306c:	b1b4      	cbz	r4, 800309c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	4422      	add	r2, r4
 8003072:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003074:	6862      	ldr	r2, [r4, #4]
 8003076:	4422      	add	r2, r4
 8003078:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800307a:	68a2      	ldr	r2, [r4, #8]
 800307c:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800307e:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003080:	2200      	movs	r2, #0
 8003082:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003084:	f000 f82a 	bl	80030dc <_ZN17TypedTextDatabase8getFontsEv>
 8003088:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800308a:	f000 f825 	bl	80030d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800308e:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003090:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003092:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003094:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003096:	4b0c      	ldr	r3, [pc, #48]	@ (80030c8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003098:	8018      	strh	r0, [r3, #0]
    }
}
 800309a:	e007      	b.n	80030ac <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800309e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80030a2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80030a6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80030a8:	2c00      	cmp	r4, #0
 80030aa:	d1e8      	bne.n	800307e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80030ac:	bd38      	pop	{r3, r4, r5, pc}
 80030ae:	bf00      	nop
 80030b0:	200016b4 	.word	0x200016b4
 80030b4:	200016ac 	.word	0x200016ac
 80030b8:	200016a8 	.word	0x200016a8
 80030bc:	200016b0 	.word	0x200016b0
 80030c0:	2001247c 	.word	0x2001247c
 80030c4:	20012484 	.word	0x20012484
 80030c8:	20012480 	.word	0x20012480
 80030cc:	08012570 	.word	0x08012570
 80030d0:	0801256c 	.word	0x0801256c
 80030d4:	08012574 	.word	0x08012574

080030d8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 80030d8:	2000      	movs	r0, #0
 80030da:	4770      	bx	lr

080030dc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80030dc:	4800      	ldr	r0, [pc, #0]	@ (80030e0 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80030de:	4770      	bx	lr
 80030e0:	200016b8 	.word	0x200016b8

080030e4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80030e4:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80030e6:	f7ff fee1 	bl	8002eac <_Z23getFont_verdana_20_4bppv>
};
 80030ea:	4c04      	ldr	r4, [pc, #16]	@ (80030fc <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 80030ec:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80030ee:	f7ff ff19 	bl	8002f24 <_Z23getFont_verdana_40_4bppv>
};
 80030f2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80030f4:	f7ff fe9e 	bl	8002e34 <_Z23getFont_verdana_10_4bppv>
};
 80030f8:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	200016b8 	.word	0x200016b8

08003100 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003100:	4770      	bx	lr

08003102 <_ZN19FrontendApplicationD0Ev>:
 8003102:	b510      	push	{r4, lr}
 8003104:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003108:	4604      	mov	r4, r0
 800310a:	f00c fd9f 	bl	800fc4c <_ZdlPvj>
 800310e:	4620      	mov	r0, r4
 8003110:	bd10      	pop	{r4, pc}

08003112 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003112:	b510      	push	{r4, lr}
 8003114:	4604      	mov	r4, r0
    {
        model.tick();
 8003116:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800311a:	f000 f815 	bl	8003148 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800311e:	4620      	mov	r0, r4
    }
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003124:	f007 bae8 	b.w	800a6f8 <_ZN8touchgfx11Application15handleTickEventEv>

08003128 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003128:	b510      	push	{r4, lr}
 800312a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800312c:	f7ff fae0 	bl	80026f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003130:	4b01      	ldr	r3, [pc, #4]	@ (8003138 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8003132:	6023      	str	r3, [r4, #0]
{

}
 8003134:	4620      	mov	r0, r4
 8003136:	bd10      	pop	{r4, pc}
 8003138:	08011dc0 	.word	0x08011dc0

0800313c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95), modelListener(0)
 800313c:	2200      	movs	r2, #0
 800313e:	215f      	movs	r1, #95	@ 0x5f
 8003140:	6002      	str	r2, [r0, #0]
 8003142:	8081      	strh	r1, [r0, #4]
 8003144:	6082      	str	r2, [r0, #8]
{
	modelTickCount = 0;
}
 8003146:	4770      	bx	lr

08003148 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8003148:	6803      	ldr	r3, [r0, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	6003      	str	r3, [r0, #0]
}
 800314e:	4770      	bx	lr

08003150 <_ZN5Model6updateEs>:

void Model::update(int16_t x)
{
	ImageX = x;
 8003150:	8081      	strh	r1, [r0, #4]
}
 8003152:	4770      	bx	lr

08003154 <_ZN5Model9GetImageXEv>:

int16_t Model::GetImageX()
{
	return ImageX;
}
 8003154:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8003158:	4770      	bx	lr

0800315a <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800315a:	4770      	bx	lr

0800315c <_ZThn4_N16Screen1PresenterD1Ev>:
 800315c:	3804      	subs	r0, #4
 800315e:	4770      	bx	lr

08003160 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003160:	4770      	bx	lr

08003162 <_ZN16Screen1PresenterD0Ev>:
 8003162:	b510      	push	{r4, lr}
 8003164:	2110      	movs	r1, #16
 8003166:	4604      	mov	r4, r0
 8003168:	f00c fd70 	bl	800fc4c <_ZdlPvj>
 800316c:	4620      	mov	r0, r4
 800316e:	bd10      	pop	{r4, pc}

08003170 <_ZThn4_N16Screen1PresenterD0Ev>:
 8003170:	f1a0 0004 	sub.w	r0, r0, #4
 8003174:	e7f5      	b.n	8003162 <_ZN16Screen1PresenterD0Ev>
	...

08003178 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003178:	2200      	movs	r2, #0
 800317a:	6082      	str	r2, [r0, #8]
    : view(v)
 800317c:	4a02      	ldr	r2, [pc, #8]	@ (8003188 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 800317e:	6002      	str	r2, [r0, #0]
 8003180:	3218      	adds	r2, #24
 8003182:	6042      	str	r2, [r0, #4]
 8003184:	60c1      	str	r1, [r0, #12]
}
 8003186:	4770      	bx	lr
 8003188:	08011e14 	.word	0x08011e14

0800318c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800318c:	4770      	bx	lr

0800318e <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 800318e:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 8003192:	3301      	adds	r3, #1
 8003194:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0

}
 8003198:	4770      	bx	lr
	...

0800319c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800319c:	b510      	push	{r4, lr}
 800319e:	4b03      	ldr	r3, [pc, #12]	@ (80031ac <_ZN11Screen1ViewD1Ev+0x10>)
 80031a0:	6003      	str	r3, [r0, #0]
 80031a2:	4604      	mov	r4, r0
 80031a4:	f7ff fb69 	bl	800287a <_ZN15Screen1ViewBaseD1Ev>
 80031a8:	4620      	mov	r0, r4
 80031aa:	bd10      	pop	{r4, pc}
 80031ac:	08011e3c 	.word	0x08011e3c

080031b0 <_ZN11Screen1ViewD0Ev>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4604      	mov	r4, r0
 80031b4:	f7ff fff2 	bl	800319c <_ZN11Screen1ViewD1Ev>
 80031b8:	4620      	mov	r0, r4
 80031ba:	21b4      	movs	r1, #180	@ 0xb4
 80031bc:	f00c fd46 	bl	800fc4c <_ZdlPvj>
 80031c0:	4620      	mov	r0, r4
 80031c2:	bd10      	pop	{r4, pc}

080031c4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80031c4:	b510      	push	{r4, lr}
 80031c6:	4604      	mov	r4, r0
 80031c8:	f7ff fb9a 	bl	8002900 <_ZN15Screen1ViewBaseC1Ev>
 80031cc:	4b03      	ldr	r3, [pc, #12]	@ (80031dc <_ZN11Screen1ViewC1Ev+0x18>)
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	2300      	movs	r3, #0
 80031d2:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
}
 80031d6:	4620      	mov	r0, r4
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	bf00      	nop
 80031dc:	08011e3c 	.word	0x08011e3c

080031e0 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80031e0:	f7ff bb4c 	b.w	800287c <_ZN15Screen1ViewBase11setupScreenEv>

080031e4 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80031e4:	4770      	bx	lr

080031e6 <_ZThn4_N16Screen2PresenterD1Ev>:
 80031e6:	3804      	subs	r0, #4
 80031e8:	4770      	bx	lr

080031ea <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 80031ea:	4770      	bx	lr

080031ec <_ZN16Screen2PresenterD0Ev>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	2110      	movs	r1, #16
 80031f0:	4604      	mov	r4, r0
 80031f2:	f00c fd2b 	bl	800fc4c <_ZdlPvj>
 80031f6:	4620      	mov	r0, r4
 80031f8:	bd10      	pop	{r4, pc}

080031fa <_ZThn4_N16Screen2PresenterD0Ev>:
 80031fa:	f1a0 0004 	sub.w	r0, r0, #4
 80031fe:	e7f5      	b.n	80031ec <_ZN16Screen2PresenterD0Ev>

08003200 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003200:	2200      	movs	r2, #0
 8003202:	6082      	str	r2, [r0, #8]
    : view(v)
 8003204:	4a02      	ldr	r2, [pc, #8]	@ (8003210 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003206:	6002      	str	r2, [r0, #0]
 8003208:	3218      	adds	r2, #24
 800320a:	6042      	str	r2, [r0, #4]
 800320c:	60c1      	str	r1, [r0, #12]
}
 800320e:	4770      	bx	lr
 8003210:	08011e70 	.word	0x08011e70

08003214 <_ZN16Screen2Presenter12UpdateImageXEs>:

}

void Screen2Presenter::UpdateImageX(int16_t x)
{
	model->update(x);
 8003214:	6880      	ldr	r0, [r0, #8]
 8003216:	f7ff bf9b 	b.w	8003150 <_ZN5Model6updateEs>

0800321a <_ZN16Screen2Presenter9GetImageXEv>:
}

int16_t Screen2Presenter::GetImageX()
{
	return model->GetImageX();
 800321a:	6880      	ldr	r0, [r0, #8]
 800321c:	f7ff bf9a 	b.w	8003154 <_ZN5Model9GetImageXEv>

08003220 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
    presenter->UpdateImageX(localImageX);
 8003220:	f9b0 1214 	ldrsh.w	r1, [r0, #532]	@ 0x214
 8003224:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003226:	f7ff bff5 	b.w	8003214 <_ZN16Screen2Presenter12UpdateImageXEs>
	...

0800322c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800322c:	b510      	push	{r4, lr}
 800322e:	4b03      	ldr	r3, [pc, #12]	@ (800323c <_ZN11Screen2ViewD1Ev+0x10>)
 8003230:	6003      	str	r3, [r0, #0]
 8003232:	4604      	mov	r4, r0
 8003234:	f7ff fbdf 	bl	80029f6 <_ZN15Screen2ViewBaseD1Ev>
 8003238:	4620      	mov	r0, r4
 800323a:	bd10      	pop	{r4, pc}
 800323c:	08011e98 	.word	0x08011e98

08003240 <_ZN11Screen2ViewD0Ev>:
 8003240:	b510      	push	{r4, lr}
 8003242:	4604      	mov	r4, r0
 8003244:	f7ff fff2 	bl	800322c <_ZN11Screen2ViewD1Ev>
 8003248:	4620      	mov	r0, r4
 800324a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800324e:	f00c fcfd 	bl	800fc4c <_ZdlPvj>
 8003252:	4620      	mov	r0, r4
 8003254:	bd10      	pop	{r4, pc}
	...

08003258 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8003258:	b510      	push	{r4, lr}
 800325a:	4604      	mov	r4, r0
 800325c:	f7ff fcb0 	bl	8002bc0 <_ZN15Screen2ViewBaseC1Ev>
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <_ZN11Screen2ViewC1Ev+0x18>)
 8003262:	6023      	str	r3, [r4, #0]
	tickCount = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	f8c4 3218 	str.w	r3, [r4, #536]	@ 0x218
}
 800326a:	4620      	mov	r0, r4
 800326c:	bd10      	pop	{r4, pc}
 800326e:	bf00      	nop
 8003270:	08011e98 	.word	0x08011e98

08003274 <_ZN11Screen2View11setupScreenEv>:
{
 8003274:	b510      	push	{r4, lr}
 8003276:	4604      	mov	r4, r0
	localImageX = presenter->GetImageX();
 8003278:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800327a:	f7ff ffce 	bl	800321a <_ZN16Screen2Presenter9GetImageXEv>
 800327e:	f8a4 0214 	strh.w	r0, [r4, #532]	@ 0x214
    Screen2ViewBase::setupScreen();
 8003282:	4620      	mov	r0, r4
 8003284:	f7ff fbb8 	bl	80029f8 <_ZN15Screen2ViewBase11setupScreenEv>
 8003288:	f8b4 3214 	ldrh.w	r3, [r4, #532]	@ 0x214
 800328c:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 8003290:	230e      	movs	r3, #14
 8003292:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
}
 8003296:	bd10      	pop	{r4, pc}

08003298 <_ZN11Screen2View15handleTickEventEv>:

void Screen2View::handleTickEvent()
{
	Screen2ViewBase::handleTickEvent();

	tickCount++;
 8003298:	f8d0 3218 	ldr.w	r3, [r0, #536]	@ 0x218
	switch (tickCount % 5)
 800329c:	2205      	movs	r2, #5
	tickCount++;
 800329e:	3301      	adds	r3, #1
	switch (tickCount % 5)
 80032a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80032a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80032a8:	1a9a      	subs	r2, r3, r2
 80032aa:	3a01      	subs	r2, #1
{
 80032ac:	b430      	push	{r4, r5}
 80032ae:	2100      	movs	r1, #0
	tickCount++;
 80032b0:	f8c0 3218 	str.w	r3, [r0, #536]	@ 0x218
	switch (tickCount % 5)
 80032b4:	2401      	movs	r4, #1
 80032b6:	2a03      	cmp	r2, #3
 80032b8:	d803      	bhi.n	80032c2 <_ZN11Screen2View15handleTickEventEv+0x2a>
 80032ba:	e8df f002 	tbb	[pc, r2]
 80032be:	201b      	.short	0x201b
 80032c0:	2a25      	.short	0x2a25
        visible = vis;
 80032c2:	f880 4141 	strb.w	r4, [r0, #321]	@ 0x141
 80032c6:	f880 1091 	strb.w	r1, [r0, #145]	@ 0x91
		break;
	default:
		break;
	}

	lamb.setY(tickCount*2%320);
 80032ca:	005a      	lsls	r2, r3, #1
 80032cc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80032d0:	fbb2 f3f1 	udiv	r3, r2, r1
 80032d4:	fb01 2213 	mls	r2, r1, r3, r2
	lamb.setX(tickCount*2/320%4*60+15);
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	330f      	adds	r3, #15
	lamb.setY(tickCount*2%320);
 80032e4:	f8a0 21de 	strh.w	r2, [r0, #478]	@ 0x1de
        rect.x = x;
 80032e8:	f8a0 31dc 	strh.w	r3, [r0, #476]	@ 0x1dc

	invalidate();
}
 80032ec:	bc30      	pop	{r4, r5}
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 80032ee:	3004      	adds	r0, #4
 80032f0:	f008 b9f6 	b.w	800b6e0 <_ZNK8touchgfx8Drawable10invalidateEv>
        visible = vis;
 80032f4:	f880 4115 	strb.w	r4, [r0, #277]	@ 0x115
 80032f8:	f880 1141 	strb.w	r1, [r0, #321]	@ 0x141
    }
 80032fc:	e7e5      	b.n	80032ca <_ZN11Screen2View15handleTickEventEv+0x32>
        visible = vis;
 80032fe:	f880 40e9 	strb.w	r4, [r0, #233]	@ 0xe9
 8003302:	f880 1115 	strb.w	r1, [r0, #277]	@ 0x115
    }
 8003306:	e7e0      	b.n	80032ca <_ZN11Screen2View15handleTickEventEv+0x32>
        visible = vis;
 8003308:	f880 40bd 	strb.w	r4, [r0, #189]	@ 0xbd
 800330c:	f880 10e9 	strb.w	r1, [r0, #233]	@ 0xe9
    }
 8003310:	e7db      	b.n	80032ca <_ZN11Screen2View15handleTickEventEv+0x32>
        visible = vis;
 8003312:	f880 4091 	strb.w	r4, [r0, #145]	@ 0x91
 8003316:	f880 10bd 	strb.w	r1, [r0, #189]	@ 0xbd
    }
 800331a:	e7d6      	b.n	80032ca <_ZN11Screen2View15handleTickEventEv+0x32>

0800331c <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 800331c:	20f0      	movs	r0, #240	@ 0xf0
 800331e:	4770      	bx	lr

08003320 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8003320:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8003324:	4770      	bx	lr

08003326 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8003326:	2029      	movs	r0, #41	@ 0x29
 8003328:	f7fe ba52 	b.w	80017d0 <LCD_IO_WriteReg>

0800332c <ili9341_DisplayOff>:
 800332c:	2028      	movs	r0, #40	@ 0x28
 800332e:	f7fe ba4f 	b.w	80017d0 <LCD_IO_WriteReg>

08003332 <ili9341_Init>:
{
 8003332:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003334:	f7fe fa20 	bl	8001778 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8003338:	20ca      	movs	r0, #202	@ 0xca
 800333a:	f7fe fa49 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800333e:	20c3      	movs	r0, #195	@ 0xc3
 8003340:	f7fe fa2a 	bl	8001798 <LCD_IO_WriteData>
 8003344:	2008      	movs	r0, #8
 8003346:	f7fe fa27 	bl	8001798 <LCD_IO_WriteData>
 800334a:	2050      	movs	r0, #80	@ 0x50
 800334c:	f7fe fa24 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003350:	20cf      	movs	r0, #207	@ 0xcf
 8003352:	f7fe fa3d 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003356:	2000      	movs	r0, #0
 8003358:	f7fe fa1e 	bl	8001798 <LCD_IO_WriteData>
 800335c:	20c1      	movs	r0, #193	@ 0xc1
 800335e:	f7fe fa1b 	bl	8001798 <LCD_IO_WriteData>
 8003362:	2030      	movs	r0, #48	@ 0x30
 8003364:	f7fe fa18 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003368:	20ed      	movs	r0, #237	@ 0xed
 800336a:	f7fe fa31 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800336e:	2064      	movs	r0, #100	@ 0x64
 8003370:	f7fe fa12 	bl	8001798 <LCD_IO_WriteData>
 8003374:	2003      	movs	r0, #3
 8003376:	f7fe fa0f 	bl	8001798 <LCD_IO_WriteData>
 800337a:	2012      	movs	r0, #18
 800337c:	f7fe fa0c 	bl	8001798 <LCD_IO_WriteData>
 8003380:	2081      	movs	r0, #129	@ 0x81
 8003382:	f7fe fa09 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003386:	20e8      	movs	r0, #232	@ 0xe8
 8003388:	f7fe fa22 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800338c:	2085      	movs	r0, #133	@ 0x85
 800338e:	f7fe fa03 	bl	8001798 <LCD_IO_WriteData>
 8003392:	2000      	movs	r0, #0
 8003394:	f7fe fa00 	bl	8001798 <LCD_IO_WriteData>
 8003398:	2078      	movs	r0, #120	@ 0x78
 800339a:	f7fe f9fd 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800339e:	20cb      	movs	r0, #203	@ 0xcb
 80033a0:	f7fe fa16 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80033a4:	2039      	movs	r0, #57	@ 0x39
 80033a6:	f7fe f9f7 	bl	8001798 <LCD_IO_WriteData>
 80033aa:	202c      	movs	r0, #44	@ 0x2c
 80033ac:	f7fe f9f4 	bl	8001798 <LCD_IO_WriteData>
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fe f9f1 	bl	8001798 <LCD_IO_WriteData>
 80033b6:	2034      	movs	r0, #52	@ 0x34
 80033b8:	f7fe f9ee 	bl	8001798 <LCD_IO_WriteData>
 80033bc:	2002      	movs	r0, #2
 80033be:	f7fe f9eb 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80033c2:	20f7      	movs	r0, #247	@ 0xf7
 80033c4:	f7fe fa04 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80033c8:	2020      	movs	r0, #32
 80033ca:	f7fe f9e5 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80033ce:	20ea      	movs	r0, #234	@ 0xea
 80033d0:	f7fe f9fe 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7fe f9df 	bl	8001798 <LCD_IO_WriteData>
 80033da:	2000      	movs	r0, #0
 80033dc:	f7fe f9dc 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80033e0:	20b1      	movs	r0, #177	@ 0xb1
 80033e2:	f7fe f9f5 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7fe f9d6 	bl	8001798 <LCD_IO_WriteData>
 80033ec:	201b      	movs	r0, #27
 80033ee:	f7fe f9d3 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80033f2:	20b6      	movs	r0, #182	@ 0xb6
 80033f4:	f7fe f9ec 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80033f8:	200a      	movs	r0, #10
 80033fa:	f7fe f9cd 	bl	8001798 <LCD_IO_WriteData>
 80033fe:	20a2      	movs	r0, #162	@ 0xa2
 8003400:	f7fe f9ca 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003404:	20c0      	movs	r0, #192	@ 0xc0
 8003406:	f7fe f9e3 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800340a:	2010      	movs	r0, #16
 800340c:	f7fe f9c4 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003410:	20c1      	movs	r0, #193	@ 0xc1
 8003412:	f7fe f9dd 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003416:	2010      	movs	r0, #16
 8003418:	f7fe f9be 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800341c:	20c5      	movs	r0, #197	@ 0xc5
 800341e:	f7fe f9d7 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003422:	2045      	movs	r0, #69	@ 0x45
 8003424:	f7fe f9b8 	bl	8001798 <LCD_IO_WriteData>
 8003428:	2015      	movs	r0, #21
 800342a:	f7fe f9b5 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800342e:	20c7      	movs	r0, #199	@ 0xc7
 8003430:	f7fe f9ce 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003434:	2090      	movs	r0, #144	@ 0x90
 8003436:	f7fe f9af 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800343a:	2036      	movs	r0, #54	@ 0x36
 800343c:	f7fe f9c8 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003440:	20c8      	movs	r0, #200	@ 0xc8
 8003442:	f7fe f9a9 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003446:	20f2      	movs	r0, #242	@ 0xf2
 8003448:	f7fe f9c2 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800344c:	2000      	movs	r0, #0
 800344e:	f7fe f9a3 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003452:	20b0      	movs	r0, #176	@ 0xb0
 8003454:	f7fe f9bc 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003458:	20c2      	movs	r0, #194	@ 0xc2
 800345a:	f7fe f99d 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800345e:	20b6      	movs	r0, #182	@ 0xb6
 8003460:	f7fe f9b6 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003464:	200a      	movs	r0, #10
 8003466:	f7fe f997 	bl	8001798 <LCD_IO_WriteData>
 800346a:	20a7      	movs	r0, #167	@ 0xa7
 800346c:	f7fe f994 	bl	8001798 <LCD_IO_WriteData>
 8003470:	2027      	movs	r0, #39	@ 0x27
 8003472:	f7fe f991 	bl	8001798 <LCD_IO_WriteData>
 8003476:	2004      	movs	r0, #4
 8003478:	f7fe f98e 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800347c:	202a      	movs	r0, #42	@ 0x2a
 800347e:	f7fe f9a7 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003482:	2000      	movs	r0, #0
 8003484:	f7fe f988 	bl	8001798 <LCD_IO_WriteData>
 8003488:	2000      	movs	r0, #0
 800348a:	f7fe f985 	bl	8001798 <LCD_IO_WriteData>
 800348e:	2000      	movs	r0, #0
 8003490:	f7fe f982 	bl	8001798 <LCD_IO_WriteData>
 8003494:	20ef      	movs	r0, #239	@ 0xef
 8003496:	f7fe f97f 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800349a:	202b      	movs	r0, #43	@ 0x2b
 800349c:	f7fe f998 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7fe f979 	bl	8001798 <LCD_IO_WriteData>
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fe f976 	bl	8001798 <LCD_IO_WriteData>
 80034ac:	2001      	movs	r0, #1
 80034ae:	f7fe f973 	bl	8001798 <LCD_IO_WriteData>
 80034b2:	203f      	movs	r0, #63	@ 0x3f
 80034b4:	f7fe f970 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034b8:	20f6      	movs	r0, #246	@ 0xf6
 80034ba:	f7fe f989 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034be:	2001      	movs	r0, #1
 80034c0:	f7fe f96a 	bl	8001798 <LCD_IO_WriteData>
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7fe f967 	bl	8001798 <LCD_IO_WriteData>
 80034ca:	2006      	movs	r0, #6
 80034cc:	f7fe f964 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034d0:	202c      	movs	r0, #44	@ 0x2c
 80034d2:	f7fe f97d 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80034d6:	20c8      	movs	r0, #200	@ 0xc8
 80034d8:	f7fe f9c8 	bl	800186c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80034dc:	2026      	movs	r0, #38	@ 0x26
 80034de:	f7fe f977 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f7fe f958 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034e8:	20e0      	movs	r0, #224	@ 0xe0
 80034ea:	f7fe f971 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034ee:	200f      	movs	r0, #15
 80034f0:	f7fe f952 	bl	8001798 <LCD_IO_WriteData>
 80034f4:	2029      	movs	r0, #41	@ 0x29
 80034f6:	f7fe f94f 	bl	8001798 <LCD_IO_WriteData>
 80034fa:	2024      	movs	r0, #36	@ 0x24
 80034fc:	f7fe f94c 	bl	8001798 <LCD_IO_WriteData>
 8003500:	200c      	movs	r0, #12
 8003502:	f7fe f949 	bl	8001798 <LCD_IO_WriteData>
 8003506:	200e      	movs	r0, #14
 8003508:	f7fe f946 	bl	8001798 <LCD_IO_WriteData>
 800350c:	2009      	movs	r0, #9
 800350e:	f7fe f943 	bl	8001798 <LCD_IO_WriteData>
 8003512:	204e      	movs	r0, #78	@ 0x4e
 8003514:	f7fe f940 	bl	8001798 <LCD_IO_WriteData>
 8003518:	2078      	movs	r0, #120	@ 0x78
 800351a:	f7fe f93d 	bl	8001798 <LCD_IO_WriteData>
 800351e:	203c      	movs	r0, #60	@ 0x3c
 8003520:	f7fe f93a 	bl	8001798 <LCD_IO_WriteData>
 8003524:	2009      	movs	r0, #9
 8003526:	f7fe f937 	bl	8001798 <LCD_IO_WriteData>
 800352a:	2013      	movs	r0, #19
 800352c:	f7fe f934 	bl	8001798 <LCD_IO_WriteData>
 8003530:	2005      	movs	r0, #5
 8003532:	f7fe f931 	bl	8001798 <LCD_IO_WriteData>
 8003536:	2017      	movs	r0, #23
 8003538:	f7fe f92e 	bl	8001798 <LCD_IO_WriteData>
 800353c:	2011      	movs	r0, #17
 800353e:	f7fe f92b 	bl	8001798 <LCD_IO_WriteData>
 8003542:	2000      	movs	r0, #0
 8003544:	f7fe f928 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003548:	20e1      	movs	r0, #225	@ 0xe1
 800354a:	f7fe f941 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800354e:	2000      	movs	r0, #0
 8003550:	f7fe f922 	bl	8001798 <LCD_IO_WriteData>
 8003554:	2016      	movs	r0, #22
 8003556:	f7fe f91f 	bl	8001798 <LCD_IO_WriteData>
 800355a:	201b      	movs	r0, #27
 800355c:	f7fe f91c 	bl	8001798 <LCD_IO_WriteData>
 8003560:	2004      	movs	r0, #4
 8003562:	f7fe f919 	bl	8001798 <LCD_IO_WriteData>
 8003566:	2011      	movs	r0, #17
 8003568:	f7fe f916 	bl	8001798 <LCD_IO_WriteData>
 800356c:	2007      	movs	r0, #7
 800356e:	f7fe f913 	bl	8001798 <LCD_IO_WriteData>
 8003572:	2031      	movs	r0, #49	@ 0x31
 8003574:	f7fe f910 	bl	8001798 <LCD_IO_WriteData>
 8003578:	2033      	movs	r0, #51	@ 0x33
 800357a:	f7fe f90d 	bl	8001798 <LCD_IO_WriteData>
 800357e:	2042      	movs	r0, #66	@ 0x42
 8003580:	f7fe f90a 	bl	8001798 <LCD_IO_WriteData>
 8003584:	2005      	movs	r0, #5
 8003586:	f7fe f907 	bl	8001798 <LCD_IO_WriteData>
 800358a:	200c      	movs	r0, #12
 800358c:	f7fe f904 	bl	8001798 <LCD_IO_WriteData>
 8003590:	200a      	movs	r0, #10
 8003592:	f7fe f901 	bl	8001798 <LCD_IO_WriteData>
 8003596:	2028      	movs	r0, #40	@ 0x28
 8003598:	f7fe f8fe 	bl	8001798 <LCD_IO_WriteData>
 800359c:	202f      	movs	r0, #47	@ 0x2f
 800359e:	f7fe f8fb 	bl	8001798 <LCD_IO_WriteData>
 80035a2:	200f      	movs	r0, #15
 80035a4:	f7fe f8f8 	bl	8001798 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035a8:	2011      	movs	r0, #17
 80035aa:	f7fe f911 	bl	80017d0 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80035ae:	20c8      	movs	r0, #200	@ 0xc8
 80035b0:	f7fe f95c 	bl	800186c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80035b4:	2029      	movs	r0, #41	@ 0x29
 80035b6:	f7fe f90b 	bl	80017d0 <LCD_IO_WriteReg>
}
 80035ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 80035be:	202c      	movs	r0, #44	@ 0x2c
 80035c0:	f7fe b906 	b.w	80017d0 <LCD_IO_WriteReg>

080035c4 <ili9341_ReadID>:
{
 80035c4:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80035c6:	f7fe f8d7 	bl	8001778 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80035ca:	2103      	movs	r1, #3
 80035cc:	20d3      	movs	r0, #211	@ 0xd3
 80035ce:	f7fe f91b 	bl	8001808 <LCD_IO_ReadData>
}
 80035d2:	b280      	uxth	r0, r0
 80035d4:	bd08      	pop	{r3, pc}

080035d6 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80035d6:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80035d8:	b2c4      	uxtb	r4, r0
 80035da:	2202      	movs	r2, #2
 80035dc:	2103      	movs	r1, #3
 80035de:	4620      	mov	r0, r4
 80035e0:	f7fe f880 	bl	80016e4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80035e4:	200a      	movs	r0, #10
 80035e6:	f7fe f8c5 	bl	8001774 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80035ea:	4620      	mov	r0, r4
 80035ec:	2200      	movs	r2, #0
 80035ee:	2103      	movs	r1, #3
 80035f0:	f7fe f878 	bl	80016e4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 80035f8:	2002      	movs	r0, #2
 80035fa:	f7fe b8bb 	b.w	8001774 <IOE_Delay>

080035fe <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80035fe:	b538      	push	{r3, r4, r5, lr}
 8003600:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003602:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8003604:	f7fe f86c 	bl	80016e0 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003608:	2100      	movs	r1, #0
 800360a:	4620      	mov	r0, r4
 800360c:	f7fe f882 	bl	8001714 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003610:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003612:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003614:	4620      	mov	r0, r4
 8003616:	f7fe f87d 	bl	8001714 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800361a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 800361e:	b280      	uxth	r0, r0
 8003620:	bd38      	pop	{r3, r4, r5, pc}

08003622 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003622:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8003624:	b2c4      	uxtb	r4, r0
 8003626:	2140      	movs	r1, #64	@ 0x40
 8003628:	4620      	mov	r0, r4
 800362a:	f7fe f873 	bl	8001714 <IOE_Read>
  
  if(state > 0)
 800362e:	0603      	lsls	r3, r0, #24
 8003630:	d507      	bpl.n	8003642 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003632:	214c      	movs	r1, #76	@ 0x4c
 8003634:	4620      	mov	r0, r4
 8003636:	f7fe f86d 	bl	8001714 <IOE_Read>
 800363a:	3800      	subs	r0, #0
 800363c:	bf18      	it	ne
 800363e:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8003640:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003642:	2201      	movs	r2, #1
 8003644:	214b      	movs	r1, #75	@ 0x4b
 8003646:	4620      	mov	r0, r4
 8003648:	f7fe f84c 	bl	80016e4 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800364c:	4620      	mov	r0, r4
 800364e:	2200      	movs	r2, #0
 8003650:	214b      	movs	r1, #75	@ 0x4b
 8003652:	f7fe f847 	bl	80016e4 <IOE_Write>
  uint8_t ret = 0;
 8003656:	2000      	movs	r0, #0
 8003658:	e7f2      	b.n	8003640 <stmpe811_TS_DetectTouch+0x1e>

0800365a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800365a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800365c:	2304      	movs	r3, #4
 800365e:	b2c4      	uxtb	r4, r0
{
 8003660:	460e      	mov	r6, r1
 8003662:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003664:	21d7      	movs	r1, #215	@ 0xd7
 8003666:	eb0d 0203 	add.w	r2, sp, r3
 800366a:	4620      	mov	r0, r4
 800366c:	f7fe f86c 	bl	8001748 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003670:	9b01      	ldr	r3, [sp, #4]
 8003672:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003674:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003676:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800367a:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800367c:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800367e:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003680:	2201      	movs	r2, #1
 8003682:	214b      	movs	r1, #75	@ 0x4b
 8003684:	f7fe f82e 	bl	80016e4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003688:	2200      	movs	r2, #0
 800368a:	214b      	movs	r1, #75	@ 0x4b
 800368c:	4620      	mov	r0, r4
 800368e:	f7fe f829 	bl	80016e4 <IOE_Write>
}
 8003692:	b002      	add	sp, #8
 8003694:	bd70      	pop	{r4, r5, r6, pc}
	...

08003698 <stmpe811_Init>:
{
 8003698:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 800369a:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <stmpe811_Init+0x2c>)
 800369c:	7813      	ldrb	r3, [r2, #0]
 800369e:	4298      	cmp	r0, r3
{
 80036a0:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 80036a2:	d00d      	beq.n	80036c0 <stmpe811_Init+0x28>
 80036a4:	7851      	ldrb	r1, [r2, #1]
 80036a6:	4288      	cmp	r0, r1
 80036a8:	d00a      	beq.n	80036c0 <stmpe811_Init+0x28>
 80036aa:	b10b      	cbz	r3, 80036b0 <stmpe811_Init+0x18>
 80036ac:	b941      	cbnz	r1, 80036c0 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80036ae:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 80036b0:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 80036b2:	f7fe f815 	bl	80016e0 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 80036b6:	4620      	mov	r0, r4
}
 80036b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 80036bc:	f7ff bf8b 	b.w	80035d6 <stmpe811_Reset>
}
 80036c0:	bd10      	pop	{r4, pc}
 80036c2:	bf00      	nop
 80036c4:	200016c4 	.word	0x200016c4

080036c8 <stmpe811_EnableGlobalIT>:
{
 80036c8:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80036ca:	b2c4      	uxtb	r4, r0
 80036cc:	2109      	movs	r1, #9
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7fe f820 	bl	8001714 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80036d4:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	4620      	mov	r0, r4
 80036dc:	2109      	movs	r1, #9
}
 80036de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80036e2:	f7fd bfff 	b.w	80016e4 <IOE_Write>

080036e6 <stmpe811_DisableGlobalIT>:
{
 80036e6:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80036e8:	b2c4      	uxtb	r4, r0
 80036ea:	2109      	movs	r1, #9
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7fe f811 	bl	8001714 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80036f2:	2109      	movs	r1, #9
 80036f4:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 80036f8:	4620      	mov	r0, r4
}
 80036fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80036fe:	f7fd bff1 	b.w	80016e4 <IOE_Write>

08003702 <stmpe811_EnableITSource>:
{
 8003702:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003704:	b2c4      	uxtb	r4, r0
{
 8003706:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003708:	4620      	mov	r0, r4
 800370a:	210a      	movs	r1, #10
 800370c:	f7fe f802 	bl	8001714 <IOE_Read>
  tmp |= Source; 
 8003710:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	4620      	mov	r0, r4
 8003718:	210a      	movs	r1, #10
}
 800371a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800371e:	f7fd bfe1 	b.w	80016e4 <IOE_Write>

08003722 <stmpe811_TS_EnableIT>:
{
 8003722:	b510      	push	{r4, lr}
 8003724:	4604      	mov	r4, r0
  IOE_ITConfig();
 8003726:	f7fd ffdc 	bl	80016e2 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800372a:	4620      	mov	r0, r4
 800372c:	211f      	movs	r1, #31
 800372e:	f7ff ffe8 	bl	8003702 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003732:	4620      	mov	r0, r4
}
 8003734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003738:	f7ff bfc6 	b.w	80036c8 <stmpe811_EnableGlobalIT>

0800373c <stmpe811_DisableITSource>:
{
 800373c:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800373e:	b2c4      	uxtb	r4, r0
{
 8003740:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003742:	4620      	mov	r0, r4
 8003744:	210a      	movs	r1, #10
 8003746:	f7fd ffe5 	bl	8001714 <IOE_Read>
  tmp &= ~Source; 
 800374a:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	4620      	mov	r0, r4
 8003752:	210a      	movs	r1, #10
}
 8003754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003758:	f7fd bfc4 	b.w	80016e4 <IOE_Write>

0800375c <stmpe811_TS_DisableIT>:
{
 800375c:	b510      	push	{r4, lr}
 800375e:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8003760:	f7ff ffc1 	bl	80036e6 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003764:	4620      	mov	r0, r4
 8003766:	211f      	movs	r1, #31
}
 8003768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800376c:	f7ff bfe6 	b.w	800373c <stmpe811_DisableITSource>

08003770 <stmpe811_ReadGITStatus>:
{
 8003770:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003772:	b2c0      	uxtb	r0, r0
{
 8003774:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003776:	210b      	movs	r1, #11
 8003778:	f7fd ffcc 	bl	8001714 <IOE_Read>
}
 800377c:	4020      	ands	r0, r4
 800377e:	bd10      	pop	{r4, pc}

08003780 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003780:	211f      	movs	r1, #31
 8003782:	f7ff bff5 	b.w	8003770 <stmpe811_ReadGITStatus>

08003786 <stmpe811_ClearGlobalIT>:
{
 8003786:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003788:	b2c0      	uxtb	r0, r0
 800378a:	210b      	movs	r1, #11
 800378c:	f7fd bfaa 	b.w	80016e4 <IOE_Write>

08003790 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003790:	211f      	movs	r1, #31
 8003792:	f7ff bff8 	b.w	8003786 <stmpe811_ClearGlobalIT>

08003796 <stmpe811_IO_EnableAF>:
{
 8003796:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003798:	b2c4      	uxtb	r4, r0
{
 800379a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800379c:	4620      	mov	r0, r4
 800379e:	2117      	movs	r1, #23
 80037a0:	f7fd ffb8 	bl	8001714 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 80037a4:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	4620      	mov	r0, r4
 80037ac:	2117      	movs	r1, #23
}
 80037ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80037b2:	f7fd bf97 	b.w	80016e4 <IOE_Write>

080037b6 <stmpe811_TS_Start>:
{
 80037b6:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80037b8:	b2c4      	uxtb	r4, r0
{
 80037ba:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80037bc:	2104      	movs	r1, #4
 80037be:	4620      	mov	r0, r4
 80037c0:	f7fd ffa8 	bl	8001714 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80037c4:	2104      	movs	r1, #4
 80037c6:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80037ca:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80037cc:	4620      	mov	r0, r4
 80037ce:	f7fd ff89 	bl	80016e4 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80037d2:	4630      	mov	r0, r6
 80037d4:	21f0      	movs	r1, #240	@ 0xf0
 80037d6:	f7ff ffde 	bl	8003796 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80037da:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 80037de:	4620      	mov	r0, r4
 80037e0:	2104      	movs	r1, #4
 80037e2:	f7fd ff7f 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80037e6:	2249      	movs	r2, #73	@ 0x49
 80037e8:	2120      	movs	r1, #32
 80037ea:	4620      	mov	r0, r4
 80037ec:	f7fd ff7a 	bl	80016e4 <IOE_Write>
  IOE_Delay(2); 
 80037f0:	2002      	movs	r0, #2
 80037f2:	f7fd ffbf 	bl	8001774 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80037f6:	4620      	mov	r0, r4
 80037f8:	2201      	movs	r2, #1
 80037fa:	2121      	movs	r1, #33	@ 0x21
 80037fc:	f7fd ff72 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003800:	4620      	mov	r0, r4
 8003802:	229a      	movs	r2, #154	@ 0x9a
 8003804:	2141      	movs	r1, #65	@ 0x41
 8003806:	f7fd ff6d 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800380a:	4620      	mov	r0, r4
 800380c:	2201      	movs	r2, #1
 800380e:	214a      	movs	r1, #74	@ 0x4a
 8003810:	f7fd ff68 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003814:	4620      	mov	r0, r4
 8003816:	2201      	movs	r2, #1
 8003818:	214b      	movs	r1, #75	@ 0x4b
 800381a:	f7fd ff63 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800381e:	4620      	mov	r0, r4
 8003820:	2200      	movs	r2, #0
 8003822:	214b      	movs	r1, #75	@ 0x4b
 8003824:	f7fd ff5e 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003828:	4620      	mov	r0, r4
 800382a:	2201      	movs	r2, #1
 800382c:	2156      	movs	r1, #86	@ 0x56
 800382e:	f7fd ff59 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003832:	4620      	mov	r0, r4
 8003834:	2201      	movs	r2, #1
 8003836:	2158      	movs	r1, #88	@ 0x58
 8003838:	f7fd ff54 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800383c:	4620      	mov	r0, r4
 800383e:	2201      	movs	r2, #1
 8003840:	2140      	movs	r1, #64	@ 0x40
 8003842:	f7fd ff4f 	bl	80016e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003846:	4620      	mov	r0, r4
 8003848:	22ff      	movs	r2, #255	@ 0xff
 800384a:	210b      	movs	r1, #11
 800384c:	f7fd ff4a 	bl	80016e4 <IOE_Write>
}
 8003850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8003854:	2002      	movs	r0, #2
 8003856:	f7fd bf8d 	b.w	8001774 <IOE_Delay>
	...

0800385c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <SystemInit+0x18>)
 800385e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003862:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8003866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800386a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800386e:	609a      	str	r2, [r3, #8]
#endif
}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003878:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_Init+0x30>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003882:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800388a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003892:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003894:	2003      	movs	r0, #3
 8003896:	f000 f82f 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800389a:	2000      	movs	r0, #0
 800389c:	f7fe fa28 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038a0:	f7fd fff2 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80038a4:	2000      	movs	r0, #0
 80038a6:	bd08      	pop	{r3, pc}
 80038a8:	40023c00 	.word	0x40023c00

080038ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80038ac:	4a03      	ldr	r2, [pc, #12]	@ (80038bc <HAL_IncTick+0x10>)
 80038ae:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <HAL_IncTick+0x14>)
 80038b0:	6811      	ldr	r1, [r2, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	440b      	add	r3, r1
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	200016c8 	.word	0x200016c8
 80038c0:	20000078 	.word	0x20000078

080038c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80038c4:	4b01      	ldr	r3, [pc, #4]	@ (80038cc <HAL_GetTick+0x8>)
 80038c6:	6818      	ldr	r0, [r3, #0]
}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	200016c8 	.word	0x200016c8

080038d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80038d4:	f7ff fff6 	bl	80038c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	bf1c      	itt	ne
 80038dc:	4b05      	ldrne	r3, [pc, #20]	@ (80038f4 <HAL_Delay+0x24>)
 80038de:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80038e2:	bf18      	it	ne
 80038e4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038e6:	f7ff ffed 	bl	80038c4 <HAL_GetTick>
 80038ea:	1b43      	subs	r3, r0, r5
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d3fa      	bcc.n	80038e6 <HAL_Delay+0x16>
  {
  }
}
 80038f0:	bd38      	pop	{r3, r4, r5, pc}
 80038f2:	bf00      	nop
 80038f4:	20000078 	.word	0x20000078

080038f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f8:	4907      	ldr	r1, [pc, #28]	@ (8003918 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80038fa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003900:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003902:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003904:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003908:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800390a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800390c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003914:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800391e:	b530      	push	{r4, r5, lr}
 8003920:	68dc      	ldr	r4, [r3, #12]
 8003922:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003926:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	2b04      	cmp	r3, #4
 800392e:	bf28      	it	cs
 8003930:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003932:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003938:	bf8c      	ite	hi
 800393a:	3c03      	subhi	r4, #3
 800393c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393e:	fa05 f303 	lsl.w	r3, r5, r3
 8003942:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003946:	40a5      	lsls	r5, r4
 8003948:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800394e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003954:	bfac      	ite	ge
 8003956:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395a:	4a08      	ldrlt	r2, [pc, #32]	@ (800397c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003960:	bfb8      	it	lt
 8003962:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003966:	b2db      	uxtb	r3, r3
 8003968:	bfaa      	itet	ge
 800396a:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003974:	bd30      	pop	{r4, r5, pc}
 8003976:	bf00      	nop
 8003978:	e000ed00 	.word	0xe000ed00
 800397c:	e000ed14 	.word	0xe000ed14

08003980 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003980:	2800      	cmp	r0, #0
 8003982:	db07      	blt.n	8003994 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003984:	0941      	lsrs	r1, r0, #5
 8003986:	4a04      	ldr	r2, [pc, #16]	@ (8003998 <HAL_NVIC_EnableIRQ+0x18>)
 8003988:	f000 001f 	and.w	r0, r0, #31
 800398c:	2301      	movs	r3, #1
 800398e:	4083      	lsls	r3, r0
 8003990:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800399c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800399e:	4604      	mov	r4, r0
 80039a0:	b150      	cbz	r0, 80039b8 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80039a2:	7943      	ldrb	r3, [r0, #5]
 80039a4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80039a8:	b913      	cbnz	r3, 80039b0 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80039aa:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80039ac:	f7fd ff8c 	bl	80018c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039b0:	2301      	movs	r3, #1
 80039b2:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80039b4:	2000      	movs	r0, #0
}
 80039b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80039b8:	2001      	movs	r0, #1
 80039ba:	e7fc      	b.n	80039b6 <HAL_CRC_Init+0x1a>

080039bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039bc:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80039be:	4604      	mov	r4, r0
 80039c0:	b330      	cbz	r0, 8003a10 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039c2:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80039c6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80039ca:	b91b      	cbnz	r3, 80039d4 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039cc:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039d0:	f7fd ff92 	bl	80018f8 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80039e8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80039ea:	68a1      	ldr	r1, [r4, #8]
 80039ec:	f023 0307 	bic.w	r3, r3, #7
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6353      	str	r3, [r2, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80039f4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80039f6:	68e1      	ldr	r1, [r4, #12]
 80039f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80039fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a04:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a06:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a08:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a0a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8003a0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a10:	2001      	movs	r0, #1
 8003a12:	e7fc      	b.n	8003a0e <HAL_DMA2D_Init+0x52>

08003a14 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8003a14:	4770      	bx	lr

08003a16 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8003a16:	4770      	bx	lr

08003a18 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a18:	6803      	ldr	r3, [r0, #0]
{
 8003a1a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a1c:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003a1e:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a20:	07f2      	lsls	r2, r6, #31
{
 8003a22:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a24:	d514      	bpl.n	8003a50 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003a26:	05e9      	lsls	r1, r5, #23
 8003a28:	d512      	bpl.n	8003a50 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a30:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a3e:	2304      	movs	r3, #4
 8003a40:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003a44:	2300      	movs	r3, #0
 8003a46:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003a4a:	6943      	ldr	r3, [r0, #20]
 8003a4c:	b103      	cbz	r3, 8003a50 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8003a4e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a50:	06b2      	lsls	r2, r6, #26
 8003a52:	d516      	bpl.n	8003a82 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a54:	04ab      	lsls	r3, r5, #18
 8003a56:	d514      	bpl.n	8003a82 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a60:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a62:	2220      	movs	r2, #32
 8003a64:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a66:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a6e:	2304      	movs	r3, #4
 8003a70:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003a74:	2300      	movs	r3, #0
 8003a76:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003a7a:	6963      	ldr	r3, [r4, #20]
 8003a7c:	b10b      	cbz	r3, 8003a82 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8003a7e:	4620      	mov	r0, r4
 8003a80:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a82:	0730      	lsls	r0, r6, #28
 8003a84:	d516      	bpl.n	8003ab4 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003a86:	0529      	lsls	r1, r5, #20
 8003a88:	d514      	bpl.n	8003ab4 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a92:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003a94:	2208      	movs	r2, #8
 8003a96:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a98:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003aac:	6963      	ldr	r3, [r4, #20]
 8003aae:	b10b      	cbz	r3, 8003ab4 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003ab4:	0772      	lsls	r2, r6, #29
 8003ab6:	d50b      	bpl.n	8003ad0 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003ab8:	056b      	lsls	r3, r5, #21
 8003aba:	d509      	bpl.n	8003ad0 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7ff ffa2 	bl	8003a14 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003ad0:	07b0      	lsls	r0, r6, #30
 8003ad2:	d514      	bpl.n	8003afe <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003ad4:	05a9      	lsls	r1, r5, #22
 8003ad6:	d512      	bpl.n	8003afe <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ae0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003ae6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003ae8:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003af0:	2300      	movs	r3, #0
 8003af2:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	b10b      	cbz	r3, 8003afe <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8003afa:	4620      	mov	r0, r4
 8003afc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003afe:	06f2      	lsls	r2, r6, #27
 8003b00:	d513      	bpl.n	8003b2a <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003b02:	04eb      	lsls	r3, r5, #19
 8003b04:	d511      	bpl.n	8003b2a <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003b10:	2210      	movs	r2, #16
 8003b12:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003b16:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7ff ff76 	bl	8003a16 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}

08003b2c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b2e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8003b32:	2a01      	cmp	r2, #1
{
 8003b34:	4603      	mov	r3, r0
 8003b36:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8003b3a:	d02b      	beq.n	8003b94 <HAL_DMA2D_ConfigLayer+0x68>
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b42:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b46:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8003b4a:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8003b4e:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8003b50:	4f17      	ldr	r7, [pc, #92]	@ (8003bb0 <HAL_DMA2D_ConfigLayer+0x84>)
 8003b52:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b56:	3c09      	subs	r4, #9
 8003b58:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b5a:	bf9c      	itt	ls
 8003b5c:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8003b60:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b62:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b66:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b68:	bf88      	it	hi
 8003b6a:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b6e:	b991      	cbnz	r1, 8003b96 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b70:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8003b72:	4039      	ands	r1, r7
 8003b74:	4301      	orrs	r1, r0
 8003b76:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b78:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b7a:	6999      	ldr	r1, [r3, #24]
 8003b7c:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b7e:	d803      	bhi.n	8003b88 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8003b86:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b88:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b8a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8003b90:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8003b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b96:	69d1      	ldr	r1, [r2, #28]
 8003b98:	4039      	ands	r1, r7
 8003b9a:	4301      	orrs	r1, r0
 8003b9c:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b9e:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ba0:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003ba2:	6989      	ldr	r1, [r1, #24]
 8003ba4:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ba6:	bf9c      	itt	ls
 8003ba8:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 8003bac:	6215      	strls	r5, [r2, #32]
 8003bae:	e7eb      	b.n	8003b88 <HAL_DMA2D_ConfigLayer+0x5c>
 8003bb0:	00fcfff0 	.word	0x00fcfff0

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb8:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8003d78 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bbc:	4a6c      	ldr	r2, [pc, #432]	@ (8003d70 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bbe:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc0:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8003bc2:	2401      	movs	r4, #1
 8003bc4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bc6:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8003bca:	43ac      	bics	r4, r5
 8003bcc:	f040 80b7 	bne.w	8003d3e <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bd0:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bd2:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bd4:	f005 0403 	and.w	r4, r5, #3
 8003bd8:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bdc:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be0:	1e67      	subs	r7, r4, #1
 8003be2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003be4:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be8:	d834      	bhi.n	8003c54 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8003bea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bec:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bf0:	68cf      	ldr	r7, [r1, #12]
 8003bf2:	fa07 f708 	lsl.w	r7, r7, r8
 8003bf6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003bfa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003bfc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bfe:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c02:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003c06:	409f      	lsls	r7, r3
 8003c08:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003c0c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003c0e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c10:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c14:	688f      	ldr	r7, [r1, #8]
 8003c16:	fa07 f708 	lsl.w	r7, r7, r8
 8003c1a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8003c20:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c22:	d119      	bne.n	8003c58 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8003c24:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003c28:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c2c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003c30:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c34:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003c38:	f04f 0e0f 	mov.w	lr, #15
 8003c3c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003c40:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c44:	690f      	ldr	r7, [r1, #16]
 8003c46:	fa07 f70b 	lsl.w	r7, r7, fp
 8003c4a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003c4e:	f8ca 7020 	str.w	r7, [sl, #32]
 8003c52:	e001      	b.n	8003c58 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c54:	2c03      	cmp	r4, #3
 8003c56:	d1da      	bne.n	8003c0e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8003c58:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c5a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c5e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c62:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c64:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003c68:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c6a:	d068      	beq.n	8003d3e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6c:	2400      	movs	r4, #0
 8003c6e:	9401      	str	r4, [sp, #4]
 8003c70:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8003c74:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8003c78:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8003c7c:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8003c80:	f023 0703 	bic.w	r7, r3, #3
 8003c84:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003c88:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8003c8c:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8003c90:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c92:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003c98:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c9c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003ca0:	240f      	movs	r4, #15
 8003ca2:	fa04 f40c 	lsl.w	r4, r4, ip
 8003ca6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003caa:	4c32      	ldr	r4, [pc, #200]	@ (8003d74 <HAL_GPIO_Init+0x1c0>)
 8003cac:	42a0      	cmp	r0, r4
 8003cae:	d04d      	beq.n	8003d4c <HAL_GPIO_Init+0x198>
 8003cb0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003cb4:	42a0      	cmp	r0, r4
 8003cb6:	d04b      	beq.n	8003d50 <HAL_GPIO_Init+0x19c>
 8003cb8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003cbc:	42a0      	cmp	r0, r4
 8003cbe:	d049      	beq.n	8003d54 <HAL_GPIO_Init+0x1a0>
 8003cc0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d047      	beq.n	8003d58 <HAL_GPIO_Init+0x1a4>
 8003cc8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d045      	beq.n	8003d5c <HAL_GPIO_Init+0x1a8>
 8003cd0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003cd4:	42a0      	cmp	r0, r4
 8003cd6:	d043      	beq.n	8003d60 <HAL_GPIO_Init+0x1ac>
 8003cd8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003cdc:	42a0      	cmp	r0, r4
 8003cde:	d041      	beq.n	8003d64 <HAL_GPIO_Init+0x1b0>
 8003ce0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003ce4:	42a0      	cmp	r0, r4
 8003ce6:	d03f      	beq.n	8003d68 <HAL_GPIO_Init+0x1b4>
 8003ce8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003cec:	42a0      	cmp	r0, r4
 8003cee:	d03d      	beq.n	8003d6c <HAL_GPIO_Init+0x1b8>
 8003cf0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003cf4:	42a0      	cmp	r0, r4
 8003cf6:	bf14      	ite	ne
 8003cf8:	240a      	movne	r4, #10
 8003cfa:	2409      	moveq	r4, #9
 8003cfc:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d00:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d04:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8003d06:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d0a:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	bf0c      	ite	eq
 8003d10:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003d12:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8003d14:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8003d16:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d18:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	bf0c      	ite	eq
 8003d1e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003d20:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8003d22:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8003d24:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d26:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	bf0c      	ite	eq
 8003d2c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003d2e:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8003d30:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d32:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d34:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8003d36:	bf54      	ite	pl
 8003d38:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003d3a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8003d3c:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3e:	3301      	adds	r3, #1
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	f47f af3d 	bne.w	8003bc0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003d46:	b003      	add	sp, #12
 8003d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d4c:	2400      	movs	r4, #0
 8003d4e:	e7d5      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d50:	2401      	movs	r4, #1
 8003d52:	e7d3      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d54:	2402      	movs	r4, #2
 8003d56:	e7d1      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d58:	2403      	movs	r4, #3
 8003d5a:	e7cf      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d5c:	2404      	movs	r4, #4
 8003d5e:	e7cd      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d60:	2405      	movs	r4, #5
 8003d62:	e7cb      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d64:	2406      	movs	r4, #6
 8003d66:	e7c9      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d68:	2407      	movs	r4, #7
 8003d6a:	e7c7      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d6c:	2408      	movs	r4, #8
 8003d6e:	e7c5      	b.n	8003cfc <HAL_GPIO_Init+0x148>
 8003d70:	40013c00 	.word	0x40013c00
 8003d74:	40020000 	.word	0x40020000
 8003d78:	40023800 	.word	0x40023800

08003d7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d7c:	6903      	ldr	r3, [r0, #16]
 8003d7e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003d80:	bf14      	ite	ne
 8003d82:	2001      	movne	r0, #1
 8003d84:	2000      	moveq	r0, #0
 8003d86:	4770      	bx	lr

08003d88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d88:	b10a      	cbz	r2, 8003d8e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d8a:	6181      	str	r1, [r0, #24]
  }
}
 8003d8c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d8e:	0409      	lsls	r1, r1, #16
 8003d90:	e7fb      	b.n	8003d8a <HAL_GPIO_WritePin+0x2>

08003d92 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d92:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d94:	ea01 0203 	and.w	r2, r1, r3
 8003d98:	ea21 0103 	bic.w	r1, r1, r3
 8003d9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003da0:	6181      	str	r1, [r0, #24]
}
 8003da2:	4770      	bx	lr

08003da4 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003da8:	4a04      	ldr	r2, [pc, #16]	@ (8003dbc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003daa:	6951      	ldr	r1, [r2, #20]
 8003dac:	4201      	tst	r1, r0
{
 8003dae:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003db0:	d002      	beq.n	8003db8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003db2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003db4:	f7ff fff6 	bl	8003da4 <HAL_GPIO_EXTI_Callback>
}
 8003db8:	bd08      	pop	{r3, pc}
 8003dba:	bf00      	nop
 8003dbc:	40013c00 	.word	0x40013c00

08003dc0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc0:	6801      	ldr	r1, [r0, #0]
 8003dc2:	694b      	ldr	r3, [r1, #20]
 8003dc4:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	d010      	beq.n	8003df0 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dce:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003dd2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dd4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dd8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ddc:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de0:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8003dec:	2001      	movs	r0, #1
 8003dee:	4770      	bx	lr
  }
  return HAL_OK;
 8003df0:	4618      	mov	r0, r3
}
 8003df2:	4770      	bx	lr

08003df4 <I2C_WaitOnFlagUntilTimeout>:
{
 8003df4:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8003df8:	4606      	mov	r6, r0
 8003dfa:	460f      	mov	r7, r1
 8003dfc:	4691      	mov	r9, r2
 8003dfe:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003e04:	6833      	ldr	r3, [r6, #0]
 8003e06:	f1ba 0f01 	cmp.w	sl, #1
 8003e0a:	bf0c      	ite	eq
 8003e0c:	695c      	ldreq	r4, [r3, #20]
 8003e0e:	699c      	ldrne	r4, [r3, #24]
 8003e10:	ea27 0404 	bic.w	r4, r7, r4
 8003e14:	b2a4      	uxth	r4, r4
 8003e16:	fab4 f484 	clz	r4, r4
 8003e1a:	0964      	lsrs	r4, r4, #5
 8003e1c:	45a1      	cmp	r9, r4
 8003e1e:	d001      	beq.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003e20:	2000      	movs	r0, #0
 8003e22:	e017      	b.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	1c6a      	adds	r2, r5, #1
 8003e26:	d0ee      	beq.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e28:	f7ff fd4c 	bl	80038c4 <HAL_GetTick>
 8003e2c:	9b08      	ldr	r3, [sp, #32]
 8003e2e:	1ac0      	subs	r0, r0, r3
 8003e30:	42a8      	cmp	r0, r5
 8003e32:	d801      	bhi.n	8003e38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003e34:	2d00      	cmp	r5, #0
 8003e36:	d1e5      	bne.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e38:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e3a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e3c:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e3e:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e42:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e46:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003e48:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	f042 0220 	orr.w	r2, r2, #32
 8003e50:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8003e52:	2001      	movs	r0, #1
}
 8003e54:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	460f      	mov	r7, r1
 8003e60:	4616      	mov	r6, r2
 8003e62:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e64:	6825      	ldr	r5, [r4, #0]
 8003e66:	6968      	ldr	r0, [r5, #20]
 8003e68:	ea27 0000 	bic.w	r0, r7, r0
 8003e6c:	b280      	uxth	r0, r0
 8003e6e:	b1c0      	cbz	r0, 8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e70:	696b      	ldr	r3, [r5, #20]
 8003e72:	055a      	lsls	r2, r3, #21
 8003e74:	d517      	bpl.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e7c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7e:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003e82:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e84:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e8a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e94:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8003ea0:	2001      	movs	r0, #1
}
 8003ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	1c73      	adds	r3, r6, #1
 8003ea8:	d0dd      	beq.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eaa:	f7ff fd0b 	bl	80038c4 <HAL_GetTick>
 8003eae:	eba0 0008 	sub.w	r0, r0, r8
 8003eb2:	42b0      	cmp	r0, r6
 8003eb4:	d801      	bhi.n	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8003eb6:	2e00      	cmp	r6, #0
 8003eb8:	d1d4      	bne.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eba:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ebc:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebe:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ec0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	e7e4      	b.n	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003ece <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003ece:	b570      	push	{r4, r5, r6, lr}
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	460d      	mov	r5, r1
 8003ed4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	d501      	bpl.n	8003ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e01a      	b.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f7ff ff6c 	bl	8003dc0 <I2C_IsAcknowledgeFailed>
 8003ee8:	b9a8      	cbnz	r0, 8003f16 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003eea:	1c6a      	adds	r2, r5, #1
 8003eec:	d0f3      	beq.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7ff fce9 	bl	80038c4 <HAL_GetTick>
 8003ef2:	1b80      	subs	r0, r0, r6
 8003ef4:	42a8      	cmp	r0, r5
 8003ef6:	d801      	bhi.n	8003efc <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	d1ec      	bne.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003efc:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003efe:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f00:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f02:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f06:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003f0c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f10:	f042 0220 	orr.w	r2, r2, #32
 8003f14:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003f16:	2001      	movs	r0, #1
}
 8003f18:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f1c <I2C_RequestMemoryWrite>:
{
 8003f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f20:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f22:	6802      	ldr	r2, [r0, #0]
{
 8003f24:	b085      	sub	sp, #20
 8003f26:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8003f2a:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2c:	6813      	ldr	r3, [r2, #0]
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f32:	6013      	str	r3, [r2, #0]
{
 8003f34:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f36:	463b      	mov	r3, r7
 8003f38:	f8cd 8000 	str.w	r8, [sp]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8003f42:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f44:	f7ff ff56 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	b138      	cbz	r0, 8003f5c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	05db      	lsls	r3, r3, #23
 8003f50:	d502      	bpl.n	8003f58 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f56:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8003f58:	2603      	movs	r6, #3
 8003f5a:	e020      	b.n	8003f9e <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5c:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8003f60:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f62:	491a      	ldr	r1, [pc, #104]	@ (8003fcc <I2C_RequestMemoryWrite+0xb0>)
 8003f64:	4643      	mov	r3, r8
 8003f66:	463a      	mov	r2, r7
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f7ff ff75 	bl	8003e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6e:	b9a8      	cbnz	r0, 8003f9c <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	9003      	str	r0, [sp, #12]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	9203      	str	r2, [sp, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	4639      	mov	r1, r7
 8003f80:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f82:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f84:	f7ff ffa3 	bl	8003ece <I2C_WaitOnTXEFlagUntilTimeout>
 8003f88:	4606      	mov	r6, r0
 8003f8a:	b160      	cbz	r0, 8003fa6 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f8e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	bf01      	itttt	eq
 8003f92:	6822      	ldreq	r2, [r4, #0]
 8003f94:	6813      	ldreq	r3, [r2, #0]
 8003f96:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8003f9a:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8003f9c:	2601      	movs	r6, #1
}
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	b005      	add	sp, #20
 8003fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fa6:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fac:	d102      	bne.n	8003fb4 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fae:	b2ed      	uxtb	r5, r5
 8003fb0:	611d      	str	r5, [r3, #16]
 8003fb2:	e7f4      	b.n	8003f9e <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb4:	0a2a      	lsrs	r2, r5, #8
 8003fb6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb8:	4639      	mov	r1, r7
 8003fba:	4642      	mov	r2, r8
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f7ff ff86 	bl	8003ece <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d1e2      	bne.n	8003f8c <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	e7f1      	b.n	8003fae <I2C_RequestMemoryWrite+0x92>
 8003fca:	bf00      	nop
 8003fcc:	00010002 	.word	0x00010002

08003fd0 <I2C_RequestMemoryRead>:
{
 8003fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd6:	6803      	ldr	r3, [r0, #0]
{
 8003fd8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fe0:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	681a      	ldr	r2, [r3, #0]
{
 8003fe4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fec:	601a      	str	r2, [r3, #0]
{
 8003fee:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	463b      	mov	r3, r7
 8003ff2:	f8cd 8000 	str.w	r8, [sp]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8003ffc:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ffe:	f7ff fef9 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	b138      	cbz	r0, 8004016 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004006:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004008:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800400a:	bf44      	itt	mi
 800400c:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8004010:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004012:	2003      	movs	r0, #3
 8004014:	e021      	b.n	800405a <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004016:	fa5f f986 	uxtb.w	r9, r6
 800401a:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800401e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004020:	492b      	ldr	r1, [pc, #172]	@ (80040d0 <I2C_RequestMemoryRead+0x100>)
 8004022:	4643      	mov	r3, r8
 8004024:	463a      	mov	r2, r7
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff ff16 	bl	8003e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402c:	b9a0      	cbnz	r0, 8004058 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	9003      	str	r0, [sp, #12]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	9203      	str	r2, [sp, #12]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403a:	4642      	mov	r2, r8
 800403c:	4639      	mov	r1, r7
 800403e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004040:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004042:	f7ff ff44 	bl	8003ece <I2C_WaitOnTXEFlagUntilTimeout>
 8004046:	b158      	cbz	r0, 8004060 <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800404a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	bf01      	itttt	eq
 800404e:	6822      	ldreq	r2, [r4, #0]
 8004050:	6813      	ldreq	r3, [r2, #0]
 8004052:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004056:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004058:	2001      	movs	r0, #1
}
 800405a:	b004      	add	sp, #16
 800405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004060:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004066:	d11a      	bne.n	800409e <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004068:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406a:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800406c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406e:	4639      	mov	r1, r7
 8004070:	4620      	mov	r0, r4
 8004072:	f7ff ff2c 	bl	8003ece <I2C_WaitOnTXEFlagUntilTimeout>
 8004076:	4602      	mov	r2, r0
 8004078:	2800      	cmp	r0, #0
 800407a:	d1e5      	bne.n	8004048 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407c:	6821      	ldr	r1, [r4, #0]
 800407e:	680b      	ldr	r3, [r1, #0]
 8004080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004084:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004086:	4620      	mov	r0, r4
 8004088:	f8cd 8000 	str.w	r8, [sp]
 800408c:	463b      	mov	r3, r7
 800408e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004092:	f7ff feaf 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	b160      	cbz	r0, 80040b4 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800409a:	6813      	ldr	r3, [r2, #0]
 800409c:	e7b4      	b.n	8004008 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800409e:	0a2a      	lsrs	r2, r5, #8
 80040a0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a2:	4639      	mov	r1, r7
 80040a4:	4642      	mov	r2, r8
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7ff ff11 	bl	8003ece <I2C_WaitOnTXEFlagUntilTimeout>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d1cb      	bne.n	8004048 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	e7d9      	b.n	8004068 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040b4:	f049 0301 	orr.w	r3, r9, #1
 80040b8:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ba:	4905      	ldr	r1, [pc, #20]	@ (80040d0 <I2C_RequestMemoryRead+0x100>)
 80040bc:	4643      	mov	r3, r8
 80040be:	463a      	mov	r2, r7
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff fec9 	bl	8003e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c6:	3800      	subs	r0, #0
 80040c8:	bf18      	it	ne
 80040ca:	2001      	movne	r0, #1
 80040cc:	e7c5      	b.n	800405a <I2C_RequestMemoryRead+0x8a>
 80040ce:	bf00      	nop
 80040d0:	00010002 	.word	0x00010002

080040d4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	4604      	mov	r4, r0
 80040d8:	460d      	mov	r5, r1
 80040da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	075b      	lsls	r3, r3, #29
 80040e2:	d501      	bpl.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80040e4:	2000      	movs	r0, #0
 80040e6:	e01a      	b.n	800411e <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7ff fe69 	bl	8003dc0 <I2C_IsAcknowledgeFailed>
 80040ee:	b9a8      	cbnz	r0, 800411c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80040f0:	1c6a      	adds	r2, r5, #1
 80040f2:	d0f3      	beq.n	80040dc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f4:	f7ff fbe6 	bl	80038c4 <HAL_GetTick>
 80040f8:	1b80      	subs	r0, r0, r6
 80040fa:	42a8      	cmp	r0, r5
 80040fc:	d801      	bhi.n	8004102 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80040fe:	2d00      	cmp	r5, #0
 8004100:	d1ec      	bne.n	80040dc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004106:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004110:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004112:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004116:	f042 0220 	orr.w	r2, r2, #32
 800411a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800411c:	2001      	movs	r0, #1
}
 800411e:	bd70      	pop	{r4, r5, r6, pc}

08004120 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	4604      	mov	r4, r0
 8004124:	460d      	mov	r5, r1
 8004126:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004128:	6821      	ldr	r1, [r4, #0]
 800412a:	694b      	ldr	r3, [r1, #20]
 800412c:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8004130:	d001      	beq.n	8004136 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8004132:	2000      	movs	r0, #0
 8004134:	e011      	b.n	800415a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004136:	694a      	ldr	r2, [r1, #20]
 8004138:	06d2      	lsls	r2, r2, #27
 800413a:	d50f      	bpl.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413c:	f06f 0210 	mvn.w	r2, #16
 8004140:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004142:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004144:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004146:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800414e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004150:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004158:	2001      	movs	r0, #1
}
 800415a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415c:	f7ff fbb2 	bl	80038c4 <HAL_GetTick>
 8004160:	1b80      	subs	r0, r0, r6
 8004162:	42a8      	cmp	r0, r5
 8004164:	d801      	bhi.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004166:	2d00      	cmp	r5, #0
 8004168:	d1de      	bne.n	8004128 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800416c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800416e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004174:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800417a:	4313      	orrs	r3, r2
 800417c:	e7e8      	b.n	8004150 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08004180 <HAL_I2C_Init>:
{
 8004180:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8004182:	4604      	mov	r4, r0
 8004184:	b908      	cbnz	r0, 800418a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8004186:	2001      	movs	r0, #1
}
 8004188:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800418a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800418e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004192:	b91b      	cbnz	r3, 800419c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8004194:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004198:	f7fd fbd0 	bl	800193c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800419c:	2324      	movs	r3, #36	@ 0x24
 800419e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ba:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041bc:	f000 fe70 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041c0:	4b3f      	ldr	r3, [pc, #252]	@ (80042c0 <HAL_I2C_Init+0x140>)
 80041c2:	6865      	ldr	r5, [r4, #4]
 80041c4:	429d      	cmp	r5, r3
 80041c6:	bf94      	ite	ls
 80041c8:	4b3e      	ldrls	r3, [pc, #248]	@ (80042c4 <HAL_I2C_Init+0x144>)
 80041ca:	4b3f      	ldrhi	r3, [pc, #252]	@ (80042c8 <HAL_I2C_Init+0x148>)
 80041cc:	4298      	cmp	r0, r3
 80041ce:	bf8c      	ite	hi
 80041d0:	2300      	movhi	r3, #0
 80041d2:	2301      	movls	r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1d6      	bne.n	8004186 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041d8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041da:	4e39      	ldr	r6, [pc, #228]	@ (80042c0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041dc:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80041de:	4b3b      	ldr	r3, [pc, #236]	@ (80042cc <HAL_I2C_Init+0x14c>)
 80041e0:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041e4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80041e8:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ea:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ec:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ee:	bf88      	it	hi
 80041f0:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 80041f4:	6a11      	ldr	r1, [r2, #32]
 80041f6:	bf88      	it	hi
 80041f8:	4373      	mulhi	r3, r6
 80041fa:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80041fe:	bf84      	itt	hi
 8004200:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8004204:	fbb3 f3f6 	udivhi	r3, r3, r6
 8004208:	3301      	adds	r3, #1
 800420a:	430b      	orrs	r3, r1
 800420c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800420e:	69d1      	ldr	r1, [r2, #28]
 8004210:	1e43      	subs	r3, r0, #1
 8004212:	482b      	ldr	r0, [pc, #172]	@ (80042c0 <HAL_I2C_Init+0x140>)
 8004214:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8004218:	4285      	cmp	r5, r0
 800421a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800421e:	d832      	bhi.n	8004286 <HAL_I2C_Init+0x106>
 8004220:	006d      	lsls	r5, r5, #1
 8004222:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004226:	fbb3 f3f5 	udiv	r3, r3, r5
 800422a:	3301      	adds	r3, #1
 800422c:	4203      	tst	r3, r0
 800422e:	d042      	beq.n	80042b6 <HAL_I2C_Init+0x136>
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	4319      	orrs	r1, r3
 8004236:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004238:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800423c:	6811      	ldr	r1, [r2, #0]
 800423e:	4303      	orrs	r3, r0
 8004240:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8004244:	430b      	orrs	r3, r1
 8004246:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004248:	6891      	ldr	r1, [r2, #8]
 800424a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800424e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8004252:	4303      	orrs	r3, r0
 8004254:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004258:	430b      	orrs	r3, r1
 800425a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800425c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004260:	68d1      	ldr	r1, [r2, #12]
 8004262:	4303      	orrs	r3, r0
 8004264:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004268:	430b      	orrs	r3, r1
 800426a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800426c:	6813      	ldr	r3, [r2, #0]
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004274:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004276:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004278:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800427a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8004284:	e780      	b.n	8004188 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004286:	68a0      	ldr	r0, [r4, #8]
 8004288:	b950      	cbnz	r0, 80042a0 <HAL_I2C_Init+0x120>
 800428a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800428e:	fbb3 f3f5 	udiv	r3, r3, r5
 8004292:	3301      	adds	r3, #1
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	b17b      	cbz	r3, 80042ba <HAL_I2C_Init+0x13a>
 800429a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800429e:	e7c9      	b.n	8004234 <HAL_I2C_Init+0xb4>
 80042a0:	2019      	movs	r0, #25
 80042a2:	4368      	muls	r0, r5
 80042a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80042a8:	3301      	adds	r3, #1
 80042aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ae:	b123      	cbz	r3, 80042ba <HAL_I2C_Init+0x13a>
 80042b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042b4:	e7be      	b.n	8004234 <HAL_I2C_Init+0xb4>
 80042b6:	2304      	movs	r3, #4
 80042b8:	e7bc      	b.n	8004234 <HAL_I2C_Init+0xb4>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e7ba      	b.n	8004234 <HAL_I2C_Init+0xb4>
 80042be:	bf00      	nop
 80042c0:	000186a0 	.word	0x000186a0
 80042c4:	001e847f 	.word	0x001e847f
 80042c8:	003d08ff 	.word	0x003d08ff
 80042cc:	000f4240 	.word	0x000f4240

080042d0 <HAL_I2C_Mem_Write>:
{
 80042d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042d4:	4604      	mov	r4, r0
 80042d6:	4699      	mov	r9, r3
 80042d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042da:	460f      	mov	r7, r1
 80042dc:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80042de:	f7ff faf1 	bl	80038c4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80042e6:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80042e8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ea:	d003      	beq.n	80042f4 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80042ec:	2002      	movs	r0, #2
}
 80042ee:	b003      	add	sp, #12
 80042f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f4:	9000      	str	r0, [sp, #0]
 80042f6:	493c      	ldr	r1, [pc, #240]	@ (80043e8 <HAL_I2C_Mem_Write+0x118>)
 80042f8:	2319      	movs	r3, #25
 80042fa:	2201      	movs	r2, #1
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7ff fd79 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8004302:	2800      	cmp	r0, #0
 8004304:	d1f2      	bne.n	80042ec <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8004306:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800430a:	2b01      	cmp	r3, #1
 800430c:	d0ee      	beq.n	80042ec <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004310:	2301      	movs	r3, #1
 8004312:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004316:	6803      	ldr	r3, [r0, #0]
 8004318:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800431a:	bf5e      	ittt	pl
 800431c:	6803      	ldrpl	r3, [r0, #0]
 800431e:	f043 0301 	orrpl.w	r3, r3, #1
 8004322:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004324:	6803      	ldr	r3, [r0, #0]
 8004326:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800432a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800432c:	2321      	movs	r3, #33	@ 0x21
 800432e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004332:	2340      	movs	r3, #64	@ 0x40
 8004334:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004338:	2300      	movs	r3, #0
 800433a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800433c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800433e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004340:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8004344:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004346:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004348:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800434a:	4b28      	ldr	r3, [pc, #160]	@ (80043ec <HAL_I2C_Mem_Write+0x11c>)
 800434c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800434e:	4642      	mov	r2, r8
 8004350:	e9cd 6500 	strd	r6, r5, [sp]
 8004354:	464b      	mov	r3, r9
 8004356:	4639      	mov	r1, r7
 8004358:	4620      	mov	r0, r4
 800435a:	f7ff fddf 	bl	8003f1c <I2C_RequestMemoryWrite>
 800435e:	2800      	cmp	r0, #0
 8004360:	d02a      	beq.n	80043b8 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8004362:	2001      	movs	r0, #1
 8004364:	e7c3      	b.n	80042ee <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004366:	f7ff fdb2 	bl	8003ece <I2C_WaitOnTXEFlagUntilTimeout>
 800436a:	b140      	cbz	r0, 800437e <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800436c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800436e:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004370:	bf01      	itttt	eq
 8004372:	6822      	ldreq	r2, [r4, #0]
 8004374:	6813      	ldreq	r3, [r2, #0]
 8004376:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800437a:	6013      	streq	r3, [r2, #0]
 800437c:	e7f1      	b.n	8004362 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004380:	6827      	ldr	r7, [r4, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004388:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800438a:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800438c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800438e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004390:	3a01      	subs	r2, #1
 8004392:	b292      	uxth	r2, r2
 8004394:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004396:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8004398:	1e48      	subs	r0, r1, #1
 800439a:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800439c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800439e:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043a0:	d50a      	bpl.n	80043b8 <HAL_I2C_Mem_Write+0xe8>
 80043a2:	b148      	cbz	r0, 80043b8 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a4:	785a      	ldrb	r2, [r3, #1]
 80043a6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80043a8:	3302      	adds	r3, #2
 80043aa:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80043ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80043ae:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80043b0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80043b2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80043b4:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80043b6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043b8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ba:	462a      	mov	r2, r5
 80043bc:	4631      	mov	r1, r6
 80043be:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1d0      	bne.n	8004366 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c4:	f7ff fe86 	bl	80040d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d1cf      	bne.n	800436c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	6822      	ldr	r2, [r4, #0]
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043d4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	2320      	movs	r3, #32
 80043d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80043dc:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80043e4:	e783      	b.n	80042ee <HAL_I2C_Mem_Write+0x1e>
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000

080043f0 <HAL_I2C_Mem_Read>:
{
 80043f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043f4:	4604      	mov	r4, r0
 80043f6:	b087      	sub	sp, #28
 80043f8:	4699      	mov	r9, r3
 80043fa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80043fc:	460d      	mov	r5, r1
 80043fe:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004400:	f7ff fa60 	bl	80038c4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004404:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8004408:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800440a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800440c:	d004      	beq.n	8004418 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 800440e:	2502      	movs	r5, #2
}
 8004410:	4628      	mov	r0, r5
 8004412:	b007      	add	sp, #28
 8004414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004418:	9000      	str	r0, [sp, #0]
 800441a:	4976      	ldr	r1, [pc, #472]	@ (80045f4 <HAL_I2C_Mem_Read+0x204>)
 800441c:	2319      	movs	r3, #25
 800441e:	2201      	movs	r2, #1
 8004420:	4620      	mov	r0, r4
 8004422:	f7ff fce7 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8004426:	2800      	cmp	r0, #0
 8004428:	d1f1      	bne.n	800440e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800442a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d0ed      	beq.n	800440e <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004432:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004434:	2301      	movs	r3, #1
 8004436:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800443a:	6803      	ldr	r3, [r0, #0]
 800443c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800443e:	bf5e      	ittt	pl
 8004440:	6803      	ldrpl	r3, [r0, #0]
 8004442:	f043 0301 	orrpl.w	r3, r3, #1
 8004446:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004448:	6803      	ldr	r3, [r0, #0]
 800444a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800444e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004450:	2322      	movs	r3, #34	@ 0x22
 8004452:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004456:	2340      	movs	r3, #64	@ 0x40
 8004458:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800445c:	2300      	movs	r3, #0
 800445e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8004460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004462:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004464:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8004468:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800446a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800446c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800446e:	4b62      	ldr	r3, [pc, #392]	@ (80045f8 <HAL_I2C_Mem_Read+0x208>)
 8004470:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004472:	4629      	mov	r1, r5
 8004474:	e9cd 7600 	strd	r7, r6, [sp]
 8004478:	464b      	mov	r3, r9
 800447a:	4642      	mov	r2, r8
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff fda7 	bl	8003fd0 <I2C_RequestMemoryRead>
 8004482:	4605      	mov	r5, r0
 8004484:	b108      	cbz	r0, 800448a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8004486:	2501      	movs	r5, #1
 8004488:	e7c2      	b.n	8004410 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800448a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800448e:	b9b2      	cbnz	r2, 80044be <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004490:	9002      	str	r0, [sp, #8]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	9202      	str	r2, [sp, #8]
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	9202      	str	r2, [sp, #8]
 800449a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a2:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a4:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 80045fc <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80044a8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d12c      	bne.n	8004508 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	2220      	movs	r2, #32
 80044b0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80044b4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80044bc:	e7a8      	b.n	8004410 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80044be:	2a01      	cmp	r2, #1
 80044c0:	d10a      	bne.n	80044d8 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	9003      	str	r0, [sp, #12]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	9203      	str	r2, [sp, #12]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	9203      	str	r2, [sp, #12]
 80044d4:	9a03      	ldr	r2, [sp, #12]
 80044d6:	e7e1      	b.n	800449c <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80044d8:	2a02      	cmp	r2, #2
 80044da:	d10e      	bne.n	80044fa <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ea:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ec:	9004      	str	r0, [sp, #16]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	9204      	str	r2, [sp, #16]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	9304      	str	r3, [sp, #16]
 80044f6:	9b04      	ldr	r3, [sp, #16]
 80044f8:	e7d4      	b.n	80044a4 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fa:	9005      	str	r0, [sp, #20]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	9205      	str	r2, [sp, #20]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	9305      	str	r3, [sp, #20]
 8004504:	9b05      	ldr	r3, [sp, #20]
 8004506:	e7cd      	b.n	80044a4 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8004508:	2b03      	cmp	r3, #3
 800450a:	d856      	bhi.n	80045ba <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 800450c:	2b01      	cmp	r3, #1
 800450e:	d115      	bne.n	800453c <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004510:	4632      	mov	r2, r6
 8004512:	4639      	mov	r1, r7
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff fe03 	bl	8004120 <I2C_WaitOnRXNEFlagUntilTimeout>
 800451a:	2800      	cmp	r0, #0
 800451c:	d1b3      	bne.n	8004486 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004524:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004526:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004528:	3301      	adds	r3, #1
 800452a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800452c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004532:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004534:	3b01      	subs	r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800453a:	e7b5      	b.n	80044a8 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 800453c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800453e:	9600      	str	r6, [sp, #0]
 8004540:	463b      	mov	r3, r7
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	4641      	mov	r1, r8
 8004548:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800454a:	d119      	bne.n	8004580 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800454c:	f7ff fc52 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8004550:	2800      	cmp	r0, #0
 8004552:	d198      	bne.n	8004486 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004562:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004564:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004566:	1c53      	adds	r3, r2, #1
 8004568:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800456a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004570:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004572:	3b01      	subs	r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004578:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	7053      	strb	r3, [r2, #1]
 800457e:	e7d2      	b.n	8004526 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004580:	f7ff fc38 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8004584:	4602      	mov	r2, r0
 8004586:	2800      	cmp	r0, #0
 8004588:	f47f af7d 	bne.w	8004486 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004594:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004596:	6919      	ldr	r1, [r3, #16]
 8004598:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800459a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800459c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800459e:	3301      	adds	r3, #1
 80045a0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80045a2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80045a4:	3b01      	subs	r3, #1
 80045a6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80045a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b0:	4641      	mov	r1, r8
 80045b2:	9600      	str	r6, [sp, #0]
 80045b4:	463b      	mov	r3, r7
 80045b6:	4620      	mov	r0, r4
 80045b8:	e7c8      	b.n	800454c <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ba:	4632      	mov	r2, r6
 80045bc:	4639      	mov	r1, r7
 80045be:	4620      	mov	r0, r4
 80045c0:	f7ff fdae 	bl	8004120 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f47f af5e 	bne.w	8004486 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80045d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80045d4:	1c53      	adds	r3, r2, #1
 80045d6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80045d8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80045da:	3b01      	subs	r3, #1
 80045dc:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80045de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	6959      	ldr	r1, [r3, #20]
 80045ea:	0749      	lsls	r1, r1, #29
 80045ec:	f57f af5c 	bpl.w	80044a8 <HAL_I2C_Mem_Read+0xb8>
 80045f0:	e7c3      	b.n	800457a <HAL_I2C_Mem_Read+0x18a>
 80045f2:	bf00      	nop
 80045f4:	00100002 	.word	0x00100002
 80045f8:	ffff0000 	.word	0xffff0000
 80045fc:	00010004 	.word	0x00010004

08004600 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004600:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004602:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004606:	2b20      	cmp	r3, #32
 8004608:	b2dc      	uxtb	r4, r3
 800460a:	d116      	bne.n	800463a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800460c:	2324      	movs	r3, #36	@ 0x24
 800460e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004612:	6803      	ldr	r3, [r0, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800461c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800461e:	f022 0210 	bic.w	r2, r2, #16
 8004622:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004626:	4311      	orrs	r1, r2
 8004628:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004632:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8004636:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004638:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800463a:	2002      	movs	r0, #2
 800463c:	e7fc      	b.n	8004638 <HAL_I2CEx_ConfigAnalogFilter+0x38>

0800463e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800463e:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004640:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004644:	2b20      	cmp	r3, #32
 8004646:	b2dc      	uxtb	r4, r3
 8004648:	d116      	bne.n	8004678 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800464c:	2324      	movs	r3, #36	@ 0x24
 800464e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800465a:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800465c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8004660:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004662:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004664:	b29b      	uxth	r3, r3
 8004666:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004668:	6813      	ldr	r3, [r2, #0]
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004670:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8004674:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004676:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8004678:	2002      	movs	r0, #2
 800467a:	e7fc      	b.n	8004676 <HAL_I2CEx_ConfigDigitalFilter+0x38>

0800467c <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800467c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800467e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004682:	01d2      	lsls	r2, r2, #7
 8004684:	3284      	adds	r2, #132	@ 0x84
 8004686:	1883      	adds	r3, r0, r2
{
 8004688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800468c:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800468e:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004690:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004692:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004696:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800469a:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800469c:	68c5      	ldr	r5, [r0, #12]
 800469e:	f10c 0701 	add.w	r7, ip, #1
 80046a2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046a6:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046aa:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046ac:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046ae:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80046b2:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80046b4:	68c6      	ldr	r6, [r0, #12]
 80046b6:	68cd      	ldr	r5, [r1, #12]
 80046b8:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80046bc:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80046be:	689d      	ldr	r5, [r3, #8]
 80046c0:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80046c4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046c6:	68c7      	ldr	r7, [r0, #12]
 80046c8:	688d      	ldr	r5, [r1, #8]
 80046ca:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80046ce:	3501      	adds	r5, #1
 80046d0:	443d      	add	r5, r7
 80046d2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80046d6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046d8:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046da:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046dc:	f025 0507 	bic.w	r5, r5, #7
 80046e0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80046e2:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046e6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80046e8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80046ea:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80046ee:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80046f2:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046f6:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80046fa:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80046fe:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004702:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004706:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004708:	695d      	ldr	r5, [r3, #20]
 800470a:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800470e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004710:	694d      	ldr	r5, [r1, #20]
 8004712:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004714:	69dd      	ldr	r5, [r3, #28]
 8004716:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800471a:	f025 0507 	bic.w	r5, r5, #7
 800471e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004720:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004724:	433d      	orrs	r5, r7
 8004726:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004728:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800472a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800472c:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004730:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004732:	b31e      	cbz	r6, 800477c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004734:	2e01      	cmp	r6, #1
 8004736:	d023      	beq.n	8004780 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004738:	1eb5      	subs	r5, r6, #2
 800473a:	2d02      	cmp	r5, #2
 800473c:	d922      	bls.n	8004784 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800473e:	2e07      	cmp	r6, #7
 8004740:	bf14      	ite	ne
 8004742:	2501      	movne	r5, #1
 8004744:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004746:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8004748:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
 800474c:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800474e:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004752:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004754:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004756:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004758:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800475a:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800475c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004760:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004762:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004764:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8004768:	f024 0407 	bic.w	r4, r4, #7
 800476c:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800476e:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004770:	5883      	ldr	r3, [r0, r2]
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	5083      	str	r3, [r0, r2]
}
 8004778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800477c:	2504      	movs	r5, #4
 800477e:	e7e2      	b.n	8004746 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8004780:	2503      	movs	r5, #3
 8004782:	e7e0      	b.n	8004746 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8004784:	2502      	movs	r5, #2
 8004786:	e7de      	b.n	8004746 <LTDC_SetConfig+0xca>

08004788 <HAL_LTDC_Init>:
{
 8004788:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800478a:	4604      	mov	r4, r0
 800478c:	2800      	cmp	r0, #0
 800478e:	d063      	beq.n	8004858 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004790:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8004794:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004798:	b91b      	cbnz	r3, 80047a2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800479a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800479e:	f7fd f929 	bl	80019f4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047a2:	2302      	movs	r3, #2
 80047a4:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80047b0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047b2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80047b6:	4302      	orrs	r2, r0
 80047b8:	68e0      	ldr	r0, [r4, #12]
 80047ba:	6999      	ldr	r1, [r3, #24]
 80047bc:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80047be:	6920      	ldr	r0, [r4, #16]
 80047c0:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047c2:	430a      	orrs	r2, r1
 80047c4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	4924      	ldr	r1, [pc, #144]	@ (800485c <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80047ca:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80047cc:	400a      	ands	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80047d6:	69a0      	ldr	r0, [r4, #24]
 80047d8:	4302      	orrs	r2, r0
 80047da:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80047dc:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80047de:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80047e0:	400a      	ands	r2, r1
 80047e2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80047ea:	6a20      	ldr	r0, [r4, #32]
 80047ec:	4302      	orrs	r2, r0
 80047ee:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047f0:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80047f2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047f4:	400a      	ands	r2, r1
 80047f6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80047fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004800:	4302      	orrs	r2, r0
 8004802:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	400a      	ands	r2, r1
 8004808:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800480a:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800480c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800480e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004812:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004814:	430a      	orrs	r2, r1
 8004816:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800481a:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800481e:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004822:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004828:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800482a:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800482e:	432a      	orrs	r2, r5
 8004830:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004834:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004838:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800483a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800483c:	f042 0206 	orr.w	r2, r2, #6
 8004840:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800484a:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800484c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800484e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004852:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8004856:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004858:	2001      	movs	r0, #1
 800485a:	e7fc      	b.n	8004856 <HAL_LTDC_Init+0xce>
 800485c:	f000f800 	.word	0xf000f800

08004860 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8004860:	4770      	bx	lr

08004862 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8004862:	4770      	bx	lr

08004864 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004864:	6803      	ldr	r3, [r0, #0]
{
 8004866:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004868:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800486a:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800486c:	0772      	lsls	r2, r6, #29
{
 800486e:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004870:	d514      	bpl.n	800489c <HAL_LTDC_IRQHandler+0x38>
 8004872:	0769      	lsls	r1, r5, #29
 8004874:	d512      	bpl.n	800489c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004878:	f022 0204 	bic.w	r2, r2, #4
 800487c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800487e:	2204      	movs	r2, #4
 8004880:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004882:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800488e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004890:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004894:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004898:	f7ff ffe2 	bl	8004860 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800489c:	07b2      	lsls	r2, r6, #30
 800489e:	d516      	bpl.n	80048ce <HAL_LTDC_IRQHandler+0x6a>
 80048a0:	07ab      	lsls	r3, r5, #30
 80048a2:	d514      	bpl.n	80048ce <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048a8:	f022 0202 	bic.w	r2, r2, #2
 80048ac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80048ae:	2202      	movs	r2, #2
 80048b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80048b2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80048bc:	2304      	movs	r3, #4
 80048be:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80048c2:	2300      	movs	r3, #0
 80048c4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80048c8:	4620      	mov	r0, r4
 80048ca:	f7ff ffc9 	bl	8004860 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80048ce:	07f0      	lsls	r0, r6, #31
 80048d0:	d510      	bpl.n	80048f4 <HAL_LTDC_IRQHandler+0x90>
 80048d2:	07e9      	lsls	r1, r5, #31
 80048d4:	d50e      	bpl.n	80048f4 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80048e0:	2201      	movs	r2, #1
 80048e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 80048e4:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80048e6:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80048ea:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80048ee:	4620      	mov	r0, r4
 80048f0:	f7fc fc82 	bl	80011f8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80048f4:	0732      	lsls	r2, r6, #28
 80048f6:	d511      	bpl.n	800491c <HAL_LTDC_IRQHandler+0xb8>
 80048f8:	072b      	lsls	r3, r5, #28
 80048fa:	d50f      	bpl.n	800491c <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004900:	f022 0208 	bic.w	r2, r2, #8
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004906:	2208      	movs	r2, #8
 8004908:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800490a:	2301      	movs	r3, #1
 800490c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004910:	2300      	movs	r3, #0
 8004912:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004916:	4620      	mov	r0, r4
 8004918:	f7ff ffa3 	bl	8004862 <HAL_LTDC_ReloadEventCallback>
}
 800491c:	bd70      	pop	{r4, r5, r6, pc}

0800491e <HAL_LTDC_ConfigLayer>:
{
 800491e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004922:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8004926:	2b01      	cmp	r3, #1
{
 8004928:	4606      	mov	r6, r0
 800492a:	460f      	mov	r7, r1
 800492c:	4694      	mov	ip, r2
 800492e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004932:	d01f      	beq.n	8004974 <HAL_LTDC_ConfigLayer+0x56>
 8004934:	f04f 0801 	mov.w	r8, #1
 8004938:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800493c:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004940:	2434      	movs	r4, #52	@ 0x34
 8004942:	460d      	mov	r5, r1
 8004944:	fb04 6402 	mla	r4, r4, r2, r6
 8004948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800494a:	3438      	adds	r4, #56	@ 0x38
 800494c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800494e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800495a:	4630      	mov	r0, r6
 800495c:	4662      	mov	r2, ip
 800495e:	4639      	mov	r1, r7
 8004960:	f7ff fe8c 	bl	800467c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004964:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004966:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004968:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800496c:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004970:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8004974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004978 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8004978:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 800497c:	2a01      	cmp	r2, #1
{
 800497e:	4603      	mov	r3, r0
 8004980:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004984:	d012      	beq.n	80049ac <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004986:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004988:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800498c:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800498e:	f020 0001 	bic.w	r0, r0, #1
 8004992:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8004994:	4806      	ldr	r0, [pc, #24]	@ (80049b0 <HAL_LTDC_ProgramLineEvent+0x38>)
 8004996:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004998:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800499a:	f041 0101 	orr.w	r1, r1, #1
 800499e:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 80049a0:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80049a8:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40016800 	.word	0x40016800

080049b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049b8:	4604      	mov	r4, r0
 80049ba:	b340      	cbz	r0, 8004a0e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049bc:	6803      	ldr	r3, [r0, #0]
 80049be:	07de      	lsls	r6, r3, #31
 80049c0:	d410      	bmi.n	80049e4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	079d      	lsls	r5, r3, #30
 80049c6:	d45b      	bmi.n	8004a80 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	0719      	lsls	r1, r3, #28
 80049cc:	f100 809d 	bmi.w	8004b0a <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	075a      	lsls	r2, r3, #29
 80049d4:	f100 80bd 	bmi.w	8004b52 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d8:	69a3      	ldr	r3, [r4, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 8124 	bne.w	8004c28 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80049e0:	2000      	movs	r0, #0
 80049e2:	e02c      	b.n	8004a3e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e4:	4b8d      	ldr	r3, [pc, #564]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	f002 020c 	and.w	r2, r2, #12
 80049ec:	2a04      	cmp	r2, #4
 80049ee:	d007      	beq.n	8004a00 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049f6:	2a08      	cmp	r2, #8
 80049f8:	d10b      	bne.n	8004a12 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	0259      	lsls	r1, r3, #9
 80049fe:	d508      	bpl.n	8004a12 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a00:	4b86      	ldr	r3, [pc, #536]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	039a      	lsls	r2, r3, #14
 8004a06:	d5dc      	bpl.n	80049c2 <HAL_RCC_OscConfig+0xe>
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1d9      	bne.n	80049c2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004a0e:	2001      	movs	r0, #1
 8004a10:	e015      	b.n	8004a3e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a12:	6863      	ldr	r3, [r4, #4]
 8004a14:	4d81      	ldr	r5, [pc, #516]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
 8004a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a1a:	d113      	bne.n	8004a44 <HAL_RCC_OscConfig+0x90>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a22:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a24:	f7fe ff4e 	bl	80038c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a28:	4e7c      	ldr	r6, [pc, #496]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004a2a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	039b      	lsls	r3, r3, #14
 8004a30:	d4c7      	bmi.n	80049c2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a32:	f7fe ff47 	bl	80038c4 <HAL_GetTick>
 8004a36:	1b40      	subs	r0, r0, r5
 8004a38:	2864      	cmp	r0, #100	@ 0x64
 8004a3a:	d9f7      	bls.n	8004a2c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8004a3c:	2003      	movs	r0, #3
}
 8004a3e:	b002      	add	sp, #8
 8004a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a48:	d104      	bne.n	8004a54 <HAL_RCC_OscConfig+0xa0>
 8004a4a:	682b      	ldr	r3, [r5, #0]
 8004a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a50:	602b      	str	r3, [r5, #0]
 8004a52:	e7e3      	b.n	8004a1c <HAL_RCC_OscConfig+0x68>
 8004a54:	682a      	ldr	r2, [r5, #0]
 8004a56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a5a:	602a      	str	r2, [r5, #0]
 8004a5c:	682a      	ldr	r2, [r5, #0]
 8004a5e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a62:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1dd      	bne.n	8004a24 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8004a68:	f7fe ff2c 	bl	80038c4 <HAL_GetTick>
 8004a6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	039f      	lsls	r7, r3, #14
 8004a72:	d5a6      	bpl.n	80049c2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fe ff26 	bl	80038c4 <HAL_GetTick>
 8004a78:	1b80      	subs	r0, r0, r6
 8004a7a:	2864      	cmp	r0, #100	@ 0x64
 8004a7c:	d9f7      	bls.n	8004a6e <HAL_RCC_OscConfig+0xba>
 8004a7e:	e7dd      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a80:	4b66      	ldr	r3, [pc, #408]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	f012 0f0c 	tst.w	r2, #12
 8004a88:	d007      	beq.n	8004a9a <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a90:	2a08      	cmp	r2, #8
 8004a92:	d111      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	025d      	lsls	r5, r3, #9
 8004a98:	d40e      	bmi.n	8004ab8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a9a:	4a60      	ldr	r2, [pc, #384]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	0799      	lsls	r1, r3, #30
 8004aa0:	d502      	bpl.n	8004aa8 <HAL_RCC_OscConfig+0xf4>
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d1b2      	bne.n	8004a0e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	6921      	ldr	r1, [r4, #16]
 8004aac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004ab0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ab4:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab6:	e787      	b.n	80049c8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ab8:	68e2      	ldr	r2, [r4, #12]
 8004aba:	4b59      	ldr	r3, [pc, #356]	@ (8004c20 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	b1b2      	cbz	r2, 8004aec <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ac2:	f7fe feff 	bl	80038c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac6:	4d55      	ldr	r5, [pc, #340]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004ac8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	079b      	lsls	r3, r3, #30
 8004ace:	d507      	bpl.n	8004ae0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	6922      	ldr	r2, [r4, #16]
 8004ad4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004ad8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	e773      	b.n	80049c8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae0:	f7fe fef0 	bl	80038c4 <HAL_GetTick>
 8004ae4:	1b80      	subs	r0, r0, r6
 8004ae6:	2802      	cmp	r0, #2
 8004ae8:	d9ef      	bls.n	8004aca <HAL_RCC_OscConfig+0x116>
 8004aea:	e7a7      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8004aec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004aee:	f7fe fee9 	bl	80038c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af2:	4e4a      	ldr	r6, [pc, #296]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004af4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af6:	6833      	ldr	r3, [r6, #0]
 8004af8:	079f      	lsls	r7, r3, #30
 8004afa:	f57f af65 	bpl.w	80049c8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004afe:	f7fe fee1 	bl	80038c4 <HAL_GetTick>
 8004b02:	1b40      	subs	r0, r0, r5
 8004b04:	2802      	cmp	r0, #2
 8004b06:	d9f6      	bls.n	8004af6 <HAL_RCC_OscConfig+0x142>
 8004b08:	e798      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b0a:	6962      	ldr	r2, [r4, #20]
 8004b0c:	4b44      	ldr	r3, [pc, #272]	@ (8004c20 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	b182      	cbz	r2, 8004b32 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8004b10:	2201      	movs	r2, #1
 8004b12:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004b16:	f7fe fed5 	bl	80038c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1a:	4e40      	ldr	r6, [pc, #256]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8004b1c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004b20:	079b      	lsls	r3, r3, #30
 8004b22:	f53f af55 	bmi.w	80049d0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b26:	f7fe fecd 	bl	80038c4 <HAL_GetTick>
 8004b2a:	1b40      	subs	r0, r0, r5
 8004b2c:	2802      	cmp	r0, #2
 8004b2e:	d9f6      	bls.n	8004b1e <HAL_RCC_OscConfig+0x16a>
 8004b30:	e784      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8004b32:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004b36:	f7fe fec5 	bl	80038c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3a:	4e38      	ldr	r6, [pc, #224]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8004b3c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004b40:	079f      	lsls	r7, r3, #30
 8004b42:	f57f af45 	bpl.w	80049d0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b46:	f7fe febd 	bl	80038c4 <HAL_GetTick>
 8004b4a:	1b40      	subs	r0, r0, r5
 8004b4c:	2802      	cmp	r0, #2
 8004b4e:	d9f6      	bls.n	8004b3e <HAL_RCC_OscConfig+0x18a>
 8004b50:	e774      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b52:	4b32      	ldr	r3, [pc, #200]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
 8004b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b56:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8004b5a:	d128      	bne.n	8004bae <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5c:	9201      	str	r2, [sp, #4]
 8004b5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b60:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004b64:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004b70:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b72:	4d2c      	ldr	r5, [pc, #176]	@ (8004c24 <HAL_RCC_OscConfig+0x270>)
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	05d8      	lsls	r0, r3, #23
 8004b78:	d51b      	bpl.n	8004bb2 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	4d27      	ldr	r5, [pc, #156]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d127      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x21e>
 8004b82:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004b8a:	f7fe fe9b 	bl	80038c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8e:	4e23      	ldr	r6, [pc, #140]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8004b90:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b96:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004b98:	079a      	lsls	r2, r3, #30
 8004b9a:	d539      	bpl.n	8004c10 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8004b9c:	2f00      	cmp	r7, #0
 8004b9e:	f43f af1b 	beq.w	80049d8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c1c <HAL_RCC_OscConfig+0x268>)
 8004ba4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bac:	e714      	b.n	80049d8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004bae:	2700      	movs	r7, #0
 8004bb0:	e7df      	b.n	8004b72 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb2:	682b      	ldr	r3, [r5, #0]
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004bba:	f7fe fe83 	bl	80038c4 <HAL_GetTick>
 8004bbe:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	05d9      	lsls	r1, r3, #23
 8004bc4:	d4d9      	bmi.n	8004b7a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc6:	f7fe fe7d 	bl	80038c4 <HAL_GetTick>
 8004bca:	1b80      	subs	r0, r0, r6
 8004bcc:	2802      	cmp	r0, #2
 8004bce:	d9f7      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x20c>
 8004bd0:	e734      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d104      	bne.n	8004be0 <HAL_RCC_OscConfig+0x22c>
 8004bd6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004bd8:	f043 0304 	orr.w	r3, r3, #4
 8004bdc:	672b      	str	r3, [r5, #112]	@ 0x70
 8004bde:	e7d0      	b.n	8004b82 <HAL_RCC_OscConfig+0x1ce>
 8004be0:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	672a      	str	r2, [r5, #112]	@ 0x70
 8004be8:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8004bea:	f022 0204 	bic.w	r2, r2, #4
 8004bee:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ca      	bne.n	8004b8a <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8004bf4:	f7fe fe66 	bl	80038c4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004bfc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfe:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004c00:	079b      	lsls	r3, r3, #30
 8004c02:	d5cb      	bpl.n	8004b9c <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c04:	f7fe fe5e 	bl	80038c4 <HAL_GetTick>
 8004c08:	1b80      	subs	r0, r0, r6
 8004c0a:	4540      	cmp	r0, r8
 8004c0c:	d9f7      	bls.n	8004bfe <HAL_RCC_OscConfig+0x24a>
 8004c0e:	e715      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fe fe58 	bl	80038c4 <HAL_GetTick>
 8004c14:	1b40      	subs	r0, r0, r5
 8004c16:	4540      	cmp	r0, r8
 8004c18:	d9bd      	bls.n	8004b96 <HAL_RCC_OscConfig+0x1e2>
 8004c1a:	e70f      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	42470000 	.word	0x42470000
 8004c24:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c28:	4d37      	ldr	r5, [pc, #220]	@ (8004d08 <HAL_RCC_OscConfig+0x354>)
 8004c2a:	68aa      	ldr	r2, [r5, #8]
 8004c2c:	f002 020c 	and.w	r2, r2, #12
 8004c30:	2a08      	cmp	r2, #8
 8004c32:	d03e      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	4b35      	ldr	r3, [pc, #212]	@ (8004d0c <HAL_RCC_OscConfig+0x358>)
 8004c38:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8004c3c:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c3e:	d12b      	bne.n	8004c98 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8004c40:	f7fe fe40 	bl	80038c4 <HAL_GetTick>
 8004c44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	0199      	lsls	r1, r3, #6
 8004c4a:	d41f      	bmi.n	8004c8c <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c4c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004c54:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004c58:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004c5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c5e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004c60:	0852      	lsrs	r2, r2, #1
 8004c62:	3a01      	subs	r2, #1
 8004c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c68:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004c6a:	4b28      	ldr	r3, [pc, #160]	@ (8004d0c <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6c:	4d26      	ldr	r5, [pc, #152]	@ (8004d08 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8004c6e:	2201      	movs	r2, #1
 8004c70:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004c72:	f7fe fe27 	bl	80038c4 <HAL_GetTick>
 8004c76:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	019a      	lsls	r2, r3, #6
 8004c7c:	f53f aeb0 	bmi.w	80049e0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fe fe20 	bl	80038c4 <HAL_GetTick>
 8004c84:	1b00      	subs	r0, r0, r4
 8004c86:	2802      	cmp	r0, #2
 8004c88:	d9f6      	bls.n	8004c78 <HAL_RCC_OscConfig+0x2c4>
 8004c8a:	e6d7      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fe fe1a 	bl	80038c4 <HAL_GetTick>
 8004c90:	1b80      	subs	r0, r0, r6
 8004c92:	2802      	cmp	r0, #2
 8004c94:	d9d7      	bls.n	8004c46 <HAL_RCC_OscConfig+0x292>
 8004c96:	e6d1      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8004c98:	f7fe fe14 	bl	80038c4 <HAL_GetTick>
 8004c9c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	f57f ae9d 	bpl.w	80049e0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca6:	f7fe fe0d 	bl	80038c4 <HAL_GetTick>
 8004caa:	1b00      	subs	r0, r0, r4
 8004cac:	2802      	cmp	r0, #2
 8004cae:	d9f6      	bls.n	8004c9e <HAL_RCC_OscConfig+0x2ea>
 8004cb0:	e6c4      	b.n	8004a3c <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	f43f aeab 	beq.w	8004a0e <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8004cb8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cba:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc0:	4291      	cmp	r1, r2
 8004cc2:	f47f aea4 	bne.w	8004a0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ccc:	428a      	cmp	r2, r1
 8004cce:	f47f ae9e 	bne.w	8004a0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd4:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004cd8:	401a      	ands	r2, r3
 8004cda:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004cde:	f47f ae96 	bne.w	8004a0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004ce4:	0852      	lsrs	r2, r2, #1
 8004ce6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8004cea:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cec:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004cf0:	f47f ae8d 	bne.w	8004a0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cf4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004cf6:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cfa:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004cfe:	bf14      	ite	ne
 8004d00:	2001      	movne	r0, #1
 8004d02:	2000      	moveq	r0, #0
 8004d04:	e69b      	b.n	8004a3e <HAL_RCC_OscConfig+0x8a>
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	42470000 	.word	0x42470000

08004d10 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d10:	4913      	ldr	r1, [pc, #76]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004d12:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d14:	688b      	ldr	r3, [r1, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d01c      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x48>
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d11c      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d22:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d24:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d26:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d28:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2c:	bf14      	ite	ne
 8004d2e:	480d      	ldrne	r0, [pc, #52]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d30:	480d      	ldreq	r0, [pc, #52]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d32:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004d36:	bf18      	it	ne
 8004d38:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d3a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3e:	fba1 0100 	umull	r0, r1, r1, r0
 8004d42:	f7fb faa5 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x50>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004d4e:	3301      	adds	r3, #1
 8004d50:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004d52:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004d56:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d58:	4802      	ldr	r0, [pc, #8]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x54>)
 8004d5a:	e7fc      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004d5c:	4802      	ldr	r0, [pc, #8]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004d5e:	e7fa      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x46>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	007a1200 	.word	0x007a1200
 8004d68:	00f42400 	.word	0x00f42400

08004d6c <HAL_RCC_ClockConfig>:
{
 8004d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d70:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004d72:	4604      	mov	r4, r0
 8004d74:	b910      	cbnz	r0, 8004d7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004d76:	2001      	movs	r0, #1
}
 8004d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b43      	ldr	r3, [pc, #268]	@ (8004e8c <HAL_RCC_ClockConfig+0x120>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	f002 020f 	and.w	r2, r2, #15
 8004d84:	428a      	cmp	r2, r1
 8004d86:	d328      	bcc.n	8004dda <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d88:	6821      	ldr	r1, [r4, #0]
 8004d8a:	078f      	lsls	r7, r1, #30
 8004d8c:	d42d      	bmi.n	8004dea <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8e:	07c8      	lsls	r0, r1, #31
 8004d90:	d440      	bmi.n	8004e14 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d92:	4b3e      	ldr	r3, [pc, #248]	@ (8004e8c <HAL_RCC_ClockConfig+0x120>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	f002 020f 	and.w	r2, r2, #15
 8004d9a:	42aa      	cmp	r2, r5
 8004d9c:	d865      	bhi.n	8004e6a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	0751      	lsls	r1, r2, #29
 8004da2:	d46b      	bmi.n	8004e7c <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da4:	0713      	lsls	r3, r2, #28
 8004da6:	d507      	bpl.n	8004db8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004da8:	4a39      	ldr	r2, [pc, #228]	@ (8004e90 <HAL_RCC_ClockConfig+0x124>)
 8004daa:	6921      	ldr	r1, [r4, #16]
 8004dac:	6893      	ldr	r3, [r2, #8]
 8004dae:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004db2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004db6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004db8:	f7ff ffaa 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004dbc:	4b34      	ldr	r3, [pc, #208]	@ (8004e90 <HAL_RCC_ClockConfig+0x124>)
 8004dbe:	4a35      	ldr	r2, [pc, #212]	@ (8004e94 <HAL_RCC_ClockConfig+0x128>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004dc6:	5cd3      	ldrb	r3, [r2, r3]
 8004dc8:	40d8      	lsrs	r0, r3
 8004dca:	4b33      	ldr	r3, [pc, #204]	@ (8004e98 <HAL_RCC_ClockConfig+0x12c>)
 8004dcc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004dce:	4b33      	ldr	r3, [pc, #204]	@ (8004e9c <HAL_RCC_ClockConfig+0x130>)
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	f7fc ff8d 	bl	8001cf0 <HAL_InitTick>
  return HAL_OK;
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e7ce      	b.n	8004d78 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	b2ca      	uxtb	r2, r1
 8004ddc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	428b      	cmp	r3, r1
 8004de6:	d1c6      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xa>
 8004de8:	e7ce      	b.n	8004d88 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dea:	4b29      	ldr	r3, [pc, #164]	@ (8004e90 <HAL_RCC_ClockConfig+0x124>)
 8004dec:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df0:	bf1e      	ittt	ne
 8004df2:	689a      	ldrne	r2, [r3, #8]
 8004df4:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8004df8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfa:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dfc:	bf42      	ittt	mi
 8004dfe:	689a      	ldrmi	r2, [r3, #8]
 8004e00:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8004e04:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	68a0      	ldr	r0, [r4, #8]
 8004e0a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004e0e:	4302      	orrs	r2, r0
 8004e10:	609a      	str	r2, [r3, #8]
 8004e12:	e7bc      	b.n	8004d8e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e14:	6862      	ldr	r2, [r4, #4]
 8004e16:	4b1e      	ldr	r3, [pc, #120]	@ (8004e90 <HAL_RCC_ClockConfig+0x124>)
 8004e18:	2a01      	cmp	r2, #1
 8004e1a:	d11c      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	d0a8      	beq.n	8004d76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e24:	4e1a      	ldr	r6, [pc, #104]	@ (8004e90 <HAL_RCC_ClockConfig+0x124>)
 8004e26:	68b3      	ldr	r3, [r6, #8]
 8004e28:	f023 0303 	bic.w	r3, r3, #3
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004e30:	f7fe fd48 	bl	80038c4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e34:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004e38:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	68b3      	ldr	r3, [r6, #8]
 8004e3c:	6862      	ldr	r2, [r4, #4]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e46:	d0a4      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e48:	f7fe fd3c 	bl	80038c4 <HAL_GetTick>
 8004e4c:	1bc0      	subs	r0, r0, r7
 8004e4e:	4540      	cmp	r0, r8
 8004e50:	d9f3      	bls.n	8004e3a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8004e52:	2003      	movs	r0, #3
 8004e54:	e790      	b.n	8004d78 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e56:	1e91      	subs	r1, r2, #2
 8004e58:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5c:	d802      	bhi.n	8004e64 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004e62:	e7de      	b.n	8004e22 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e64:	f013 0f02 	tst.w	r3, #2
 8004e68:	e7db      	b.n	8004e22 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	b2ea      	uxtb	r2, r5
 8004e6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	42ab      	cmp	r3, r5
 8004e76:	f47f af7e 	bne.w	8004d76 <HAL_RCC_ClockConfig+0xa>
 8004e7a:	e790      	b.n	8004d9e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e7c:	4904      	ldr	r1, [pc, #16]	@ (8004e90 <HAL_RCC_ClockConfig+0x124>)
 8004e7e:	68e0      	ldr	r0, [r4, #12]
 8004e80:	688b      	ldr	r3, [r1, #8]
 8004e82:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004e86:	4303      	orrs	r3, r0
 8004e88:	608b      	str	r3, [r1, #8]
 8004e8a:	e78b      	b.n	8004da4 <HAL_RCC_ClockConfig+0x38>
 8004e8c:	40023c00 	.word	0x40023c00
 8004e90:	40023800 	.word	0x40023800
 8004e94:	08011ed0 	.word	0x08011ed0
 8004e98:	20000074 	.word	0x20000074
 8004e9c:	2000007c 	.word	0x2000007c

08004ea0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ea0:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004ea2:	4a05      	ldr	r2, [pc, #20]	@ (8004eb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004eaa:	5cd3      	ldrb	r3, [r2, r3]
 8004eac:	4a03      	ldr	r2, [pc, #12]	@ (8004ebc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004eae:	6810      	ldr	r0, [r2, #0]
}
 8004eb0:	40d8      	lsrs	r0, r3
 8004eb2:	4770      	bx	lr
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	08011ec8 	.word	0x08011ec8
 8004ebc:	20000074 	.word	0x20000074

08004ec0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <HAL_RCC_GetClockConfig+0x34>)
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	f002 0203 	and.w	r2, r2, #3
 8004ecc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8004ed4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8004edc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004ee6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <HAL_RCC_GetClockConfig+0x38>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	600b      	str	r3, [r1, #0]
}
 8004ef2:	4770      	bx	lr
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40023c00 	.word	0x40023c00

08004efc <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004efc:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004efe:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8004f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f04:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f06:	f040 8088 	bne.w	800501a <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	f013 0f0c 	tst.w	r3, #12
 8004f10:	d045      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f12:	4b8c      	ldr	r3, [pc, #560]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f14:	4d8c      	ldr	r5, [pc, #560]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8004f16:	2200      	movs	r2, #0
 8004f18:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8004f1a:	f7fe fcd3 	bl	80038c4 <HAL_GetTick>
 8004f1e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	0099      	lsls	r1, r3, #2
 8004f24:	f100 80cb 	bmi.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f28:	6821      	ldr	r1, [r4, #0]
 8004f2a:	074a      	lsls	r2, r1, #29
 8004f2c:	d515      	bpl.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f2e:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f32:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f36:	061b      	lsls	r3, r3, #24
 8004f38:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8004f3c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f46:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8004f4a:	6a22      	ldr	r2, [r4, #32]
 8004f4c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004f50:	3a01      	subs	r2, #1
 8004f52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f56:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f5a:	070b      	lsls	r3, r1, #28
 8004f5c:	d514      	bpl.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f5e:	4a7a      	ldr	r2, [pc, #488]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f60:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f62:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f66:	6920      	ldr	r0, [r4, #16]
 8004f68:	071b      	lsls	r3, r3, #28
 8004f6a:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8004f6e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f72:	430b      	orrs	r3, r1
 8004f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f78:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004f7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004f7e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004f82:	430b      	orrs	r3, r1
 8004f84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f88:	4b6e      	ldr	r3, [pc, #440]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f8a:	4e6f      	ldr	r6, [pc, #444]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8004f90:	f7fe fc98 	bl	80038c4 <HAL_GetTick>
 8004f94:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f96:	6833      	ldr	r3, [r6, #0]
 8004f98:	009f      	lsls	r7, r3, #2
 8004f9a:	f140 8097 	bpl.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	0698      	lsls	r0, r3, #26
 8004fa2:	d534      	bpl.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	4b67      	ldr	r3, [pc, #412]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004faa:	4d68      	ldr	r5, [pc, #416]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004fbe:	682b      	ldr	r3, [r5, #0]
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc4:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc6:	f7fe fc7d 	bl	80038c4 <HAL_GetTick>
 8004fca:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	05d8      	lsls	r0, r3, #23
 8004fd0:	f140 8083 	bpl.w	80050da <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fd4:	4d5c      	ldr	r5, [pc, #368]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fd6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fd8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fda:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004fde:	f040 8083 	bne.w	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004fe4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004fe8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004fec:	4a56      	ldr	r2, [pc, #344]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004fee:	f040 809e 	bne.w	800512e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004ff2:	6891      	ldr	r1, [r2, #8]
 8004ff4:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8004ff8:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8004ffc:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005000:	4301      	orrs	r1, r0
 8005002:	6091      	str	r1, [r2, #8]
 8005004:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500a:	430b      	orrs	r3, r1
 800500c:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	06db      	lsls	r3, r3, #27
 8005012:	f100 8090 	bmi.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 8005016:	2000      	movs	r0, #0
 8005018:	e04f      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 800501a:	4b4a      	ldr	r3, [pc, #296]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800501c:	4e4a      	ldr	r6, [pc, #296]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 800501e:	2200      	movs	r2, #0
 8005020:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005022:	f7fe fc4f 	bl	80038c4 <HAL_GetTick>
 8005026:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005028:	6833      	ldr	r3, [r6, #0]
 800502a:	011f      	lsls	r7, r3, #4
 800502c:	d43f      	bmi.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800502e:	6821      	ldr	r1, [r4, #0]
 8005030:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005032:	bf41      	itttt	mi
 8005034:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8005038:	071b      	lslmi	r3, r3, #28
 800503a:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 800503e:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005042:	078a      	lsls	r2, r1, #30
 8005044:	d515      	bpl.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005046:	4a40      	ldr	r2, [pc, #256]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005048:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800504a:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800504e:	6865      	ldr	r5, [r4, #4]
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005056:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800505a:	4303      	orrs	r3, r0
 800505c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005060:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8005064:	69e3      	ldr	r3, [r4, #28]
 8005066:	f020 001f 	bic.w	r0, r0, #31
 800506a:	3b01      	subs	r3, #1
 800506c:	4303      	orrs	r3, r0
 800506e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005072:	064b      	lsls	r3, r1, #25
 8005074:	d50a      	bpl.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005076:	68e3      	ldr	r3, [r4, #12]
 8005078:	6862      	ldr	r2, [r4, #4]
 800507a:	061b      	lsls	r3, r3, #24
 800507c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005080:	68a2      	ldr	r2, [r4, #8]
 8005082:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005086:	4a30      	ldr	r2, [pc, #192]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005088:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800508c:	4b2d      	ldr	r3, [pc, #180]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800508e:	4e2e      	ldr	r6, [pc, #184]	@ (8005148 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 8005090:	2201      	movs	r2, #1
 8005092:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005094:	f7fe fc16 	bl	80038c4 <HAL_GetTick>
 8005098:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800509a:	6833      	ldr	r3, [r6, #0]
 800509c:	011f      	lsls	r7, r3, #4
 800509e:	f53f af34 	bmi.w	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050a2:	f7fe fc0f 	bl	80038c4 <HAL_GetTick>
 80050a6:	1b40      	subs	r0, r0, r5
 80050a8:	2802      	cmp	r0, #2
 80050aa:	d9f6      	bls.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80050ac:	e004      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050ae:	f7fe fc09 	bl	80038c4 <HAL_GetTick>
 80050b2:	1b40      	subs	r0, r0, r5
 80050b4:	2802      	cmp	r0, #2
 80050b6:	d9b7      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 80050b8:	2003      	movs	r0, #3
}
 80050ba:	b003      	add	sp, #12
 80050bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050be:	f7fe fc01 	bl	80038c4 <HAL_GetTick>
 80050c2:	1b80      	subs	r0, r0, r6
 80050c4:	2802      	cmp	r0, #2
 80050c6:	f67f af2b 	bls.w	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80050ca:	e7f5      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050cc:	f7fe fbfa 	bl	80038c4 <HAL_GetTick>
 80050d0:	1b40      	subs	r0, r0, r5
 80050d2:	2802      	cmp	r0, #2
 80050d4:	f67f af5f 	bls.w	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80050d8:	e7ee      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050da:	f7fe fbf3 	bl	80038c4 <HAL_GetTick>
 80050de:	1b80      	subs	r0, r0, r6
 80050e0:	2802      	cmp	r0, #2
 80050e2:	f67f af73 	bls.w	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80050e6:	e7e7      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050e8:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80050ec:	4293      	cmp	r3, r2
 80050ee:	f43f af78 	beq.w	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050f2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f4:	4a13      	ldr	r2, [pc, #76]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80050f6:	2101      	movs	r1, #1
 80050f8:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005100:	2100      	movs	r1, #0
 8005102:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8005106:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005108:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800510a:	07d9      	lsls	r1, r3, #31
 800510c:	f57f af69 	bpl.w	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8005110:	f7fe fbd8 	bl	80038c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005114:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005118:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800511c:	079a      	lsls	r2, r3, #30
 800511e:	f53f af60 	bmi.w	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7fe fbcf 	bl	80038c4 <HAL_GetTick>
 8005126:	1b80      	subs	r0, r0, r6
 8005128:	42b8      	cmp	r0, r7
 800512a:	d9f6      	bls.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800512c:	e7c4      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800512e:	6891      	ldr	r1, [r2, #8]
 8005130:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005134:	e765      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005138:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800513c:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8005140:	e769      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8005142:	bf00      	nop
 8005144:	42470000 	.word	0x42470000
 8005148:	40023800 	.word	0x40023800
 800514c:	40007000 	.word	0x40007000
 8005150:	42471000 	.word	0x42471000

08005154 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005158:	4604      	mov	r4, r0
 800515a:	b1c8      	cbz	r0, 8005190 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800515c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005160:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005164:	b91b      	cbnz	r3, 800516e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005166:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800516a:	f7fc fd55 	bl	8001c18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800516e:	2302      	movs	r3, #2
 8005170:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005174:	1d21      	adds	r1, r4, #4
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	f000 fcfe 	bl	8005b78 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800517c:	6862      	ldr	r2, [r4, #4]
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	4629      	mov	r1, r5
 8005182:	f000 fd31 	bl	8005be8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005186:	2301      	movs	r3, #1
 8005188:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 800518c:	2000      	movs	r0, #0
}
 800518e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005190:	2001      	movs	r0, #1
 8005192:	e7fc      	b.n	800518e <HAL_SDRAM_Init+0x3a>

08005194 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005194:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005196:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800519a:	2b02      	cmp	r3, #2
{
 800519c:	4605      	mov	r5, r0
 800519e:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80051a0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80051a2:	d012      	beq.n	80051ca <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80051a4:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80051a8:	2c01      	cmp	r4, #1
 80051aa:	d10f      	bne.n	80051cc <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051ac:	2302      	movs	r3, #2
 80051ae:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80051b2:	6828      	ldr	r0, [r5, #0]
 80051b4:	f000 fd4e 	bl	8005c54 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80051bc:	bf06      	itte	eq
 80051be:	2305      	moveq	r3, #5
 80051c0:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80051c4:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80051c8:	2000      	movs	r0, #0
}
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80051cc:	2001      	movs	r0, #1
 80051ce:	e7fc      	b.n	80051ca <HAL_SDRAM_SendCommand+0x36>

080051d0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80051d0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80051d2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80051d6:	2b02      	cmp	r3, #2
{
 80051d8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80051da:	b2d8      	uxtb	r0, r3
 80051dc:	d00d      	beq.n	80051fa <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80051de:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	b2dd      	uxtb	r5, r3
 80051e6:	d109      	bne.n	80051fc <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051e8:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80051ea:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051ec:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80051f0:	f000 fd54 	bl	8005c9c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80051f4:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80051f8:	2000      	movs	r0, #0
}
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80051fc:	2001      	movs	r0, #1
 80051fe:	e7fc      	b.n	80051fa <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005200 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005204:	461c      	mov	r4, r3
 8005206:	4616      	mov	r6, r2
 8005208:	460f      	mov	r7, r1
 800520a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800520c:	f7fe fb5a 	bl	80038c4 <HAL_GetTick>
 8005210:	4434      	add	r4, r6
 8005212:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005214:	f7fe fb56 	bl	80038c4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005218:	4b24      	ldr	r3, [pc, #144]	@ (80052ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005220:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8005222:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005224:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005226:	682a      	ldr	r2, [r5, #0]
 8005228:	6893      	ldr	r3, [r2, #8]
 800522a:	ea37 0303 	bics.w	r3, r7, r3
 800522e:	d001      	beq.n	8005234 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 8005230:	2000      	movs	r0, #0
 8005232:	e02e      	b.n	8005292 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8005234:	1c73      	adds	r3, r6, #1
 8005236:	d0f7      	beq.n	8005228 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005238:	f7fe fb44 	bl	80038c4 <HAL_GetTick>
 800523c:	eba0 0008 	sub.w	r0, r0, r8
 8005240:	42a0      	cmp	r0, r4
 8005242:	d329      	bcc.n	8005298 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800524c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800524e:	686a      	ldr	r2, [r5, #4]
 8005250:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005254:	d10a      	bne.n	800526c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8005256:	68aa      	ldr	r2, [r5, #8]
 8005258:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800525c:	d002      	beq.n	8005264 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800525e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005262:	d103      	bne.n	800526c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800526a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800526c:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800526e:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005272:	d107      	bne.n	8005284 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005282:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005284:	2301      	movs	r3, #1
 8005286:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800528a:	2300      	movs	r3, #0
 800528c:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005290:	2003      	movs	r0, #3
}
 8005292:	b002      	add	sp, #8
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8005298:	9a01      	ldr	r2, [sp, #4]
      count--;
 800529a:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800529c:	2a00      	cmp	r2, #0
      count--;
 800529e:	f103 33ff 	add.w	r3, r3, #4294967295
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	bf08      	it	eq
 80052a6:	4614      	moveq	r4, r2
 80052a8:	e7bd      	b.n	8005226 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 80052aa:	bf00      	nop
 80052ac:	20000074 	.word	0x20000074

080052b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b4:	6842      	ldr	r2, [r0, #4]
 80052b6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 80052ba:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052bc:	d006      	beq.n	80052cc <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052be:	460a      	mov	r2, r1
 80052c0:	2101      	movs	r1, #1
 80052c2:	f7ff ff9d 	bl	8005200 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80052c6:	b9b8      	cbnz	r0, 80052f8 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80052c8:	2000      	movs	r0, #0
}
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052cc:	6882      	ldr	r2, [r0, #8]
 80052ce:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80052d2:	d002      	beq.n	80052da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052d4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80052d8:	d107      	bne.n	80052ea <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 80052da:	6825      	ldr	r5, [r4, #0]
 80052dc:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052de:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 80052e2:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80052e6:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052e8:	d003      	beq.n	80052f2 <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	460a      	mov	r2, r1
 80052ec:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052ee:	4620      	mov	r0, r4
 80052f0:	e7e7      	b.n	80052c2 <SPI_EndRxTransaction+0x12>
 80052f2:	460a      	mov	r2, r1
 80052f4:	2101      	movs	r1, #1
 80052f6:	e7fa      	b.n	80052ee <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80052fa:	f043 0320 	orr.w	r3, r3, #32
 80052fe:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005300:	2003      	movs	r0, #3
 8005302:	e7e2      	b.n	80052ca <SPI_EndRxTransaction+0x1a>

08005304 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005306:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005308:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <SPI_EndRxTxTransaction+0x50>)
 800530a:	6815      	ldr	r5, [r2, #0]
 800530c:	4a12      	ldr	r2, [pc, #72]	@ (8005358 <SPI_EndRxTxTransaction+0x54>)
 800530e:	fbb5 f5f2 	udiv	r5, r5, r2
 8005312:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005316:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005318:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800531a:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800531c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8005320:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005322:	d10b      	bne.n	800533c <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005324:	460a      	mov	r2, r1
 8005326:	2180      	movs	r1, #128	@ 0x80
 8005328:	f7ff ff6a 	bl	8005200 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800532c:	b178      	cbz	r0, 800534e <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005330:	f043 0320 	orr.w	r3, r3, #32
 8005334:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005336:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8005338:	b003      	add	sp, #12
 800533a:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	b133      	cbz	r3, 800534e <SPI_EndRxTxTransaction+0x4a>
      count--;
 8005340:	9b01      	ldr	r3, [sp, #4]
 8005342:	3b01      	subs	r3, #1
 8005344:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	061b      	lsls	r3, r3, #24
 800534c:	d4f6      	bmi.n	800533c <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 800534e:	2000      	movs	r0, #0
 8005350:	e7f2      	b.n	8005338 <SPI_EndRxTxTransaction+0x34>
 8005352:	bf00      	nop
 8005354:	20000074 	.word	0x20000074
 8005358:	016e3600 	.word	0x016e3600

0800535c <HAL_SPI_Init>:
{
 800535c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800535e:	4604      	mov	r4, r0
 8005360:	2800      	cmp	r0, #0
 8005362:	d055      	beq.n	8005410 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005364:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d14e      	bne.n	8005408 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800536a:	6842      	ldr	r2, [r0, #4]
 800536c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005370:	d000      	beq.n	8005374 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005372:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005374:	2300      	movs	r3, #0
 8005376:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005378:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800537c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005380:	b923      	cbnz	r3, 800538c <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8005382:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8005386:	4620      	mov	r0, r4
 8005388:	f7fc fc10 	bl	8001bac <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800538c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800538e:	68a0      	ldr	r0, [r4, #8]
 8005390:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8005398:	680b      	ldr	r3, [r1, #0]
 800539a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80053a6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80053aa:	4303      	orrs	r3, r0
 80053ac:	68e0      	ldr	r0, [r4, #12]
 80053ae:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 80053b2:	4303      	orrs	r3, r0
 80053b4:	6920      	ldr	r0, [r4, #16]
 80053b6:	f000 0002 	and.w	r0, r0, #2
 80053ba:	4303      	orrs	r3, r0
 80053bc:	6960      	ldr	r0, [r4, #20]
 80053be:	f000 0001 	and.w	r0, r0, #1
 80053c2:	4303      	orrs	r3, r0
 80053c4:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 80053c8:	4303      	orrs	r3, r0
 80053ca:	69e0      	ldr	r0, [r4, #28]
 80053cc:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80053d0:	4303      	orrs	r3, r0
 80053d2:	6a20      	ldr	r0, [r4, #32]
 80053d4:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80053d8:	4303      	orrs	r3, r0
 80053da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80053dc:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80053e0:	4303      	orrs	r3, r0
 80053e2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80053e6:	0c12      	lsrs	r2, r2, #16
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	f002 0204 	and.w	r2, r2, #4
 80053f0:	431a      	orrs	r2, r3
 80053f2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053f4:	69cb      	ldr	r3, [r1, #28]
 80053f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053fa:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053fc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80053fe:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005400:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005402:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8005406:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005408:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800540a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800540e:	e7b1      	b.n	8005374 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005410:	2001      	movs	r0, #1
 8005412:	e7f8      	b.n	8005406 <HAL_SPI_Init+0xaa>

08005414 <HAL_SPI_Transmit>:
{
 8005414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005418:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800541a:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800541e:	2b01      	cmp	r3, #1
{
 8005420:	4604      	mov	r4, r0
 8005422:	460d      	mov	r5, r1
 8005424:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8005426:	f000 80a0 	beq.w	800556a <HAL_SPI_Transmit+0x156>
 800542a:	2301      	movs	r3, #1
 800542c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005430:	f7fe fa48 	bl	80038c4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005434:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005438:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800543a:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800543c:	b2d8      	uxtb	r0, r3
 800543e:	f040 8092 	bne.w	8005566 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8005442:	2d00      	cmp	r5, #0
 8005444:	d061      	beq.n	800550a <HAL_SPI_Transmit+0xf6>
 8005446:	f1b8 0f00 	cmp.w	r8, #0
 800544a:	d05e      	beq.n	800550a <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800544c:	2303      	movs	r3, #3
 800544e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005452:	2300      	movs	r3, #0
 8005454:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8005456:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 800545a:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800545e:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005460:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005462:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005464:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8005466:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005468:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800546a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 800546e:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005472:	d107      	bne.n	8005484 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8005474:	6833      	ldr	r3, [r6, #0]
 8005476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800547a:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800547c:	6833      	ldr	r3, [r6, #0]
 800547e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005482:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005484:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005486:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005488:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800548a:	bf5e      	ittt	pl
 800548c:	6833      	ldrpl	r3, [r6, #0]
 800548e:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8005492:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005494:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005498:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800549a:	d13f      	bne.n	800551c <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800549c:	b113      	cbz	r3, 80054a4 <HAL_SPI_Transmit+0x90>
 800549e:	f1b8 0f01 	cmp.w	r8, #1
 80054a2:	d107      	bne.n	80054b4 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80054a8:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054aa:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80054ac:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80054b4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	b9a3      	cbnz	r3, 80054e4 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054ba:	464a      	mov	r2, r9
 80054bc:	4639      	mov	r1, r7
 80054be:	4620      	mov	r0, r4
 80054c0:	f7ff ff20 	bl	8005304 <SPI_EndRxTxTransaction>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d14b      	bne.n	8005560 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054c8:	68a3      	ldr	r3, [r4, #8]
 80054ca:	b933      	cbnz	r3, 80054da <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	9201      	str	r2, [sp, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054da:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80054dc:	3800      	subs	r0, #0
 80054de:	bf18      	it	ne
 80054e0:	2001      	movne	r0, #1
error:
 80054e2:	e012      	b.n	800550a <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	6893      	ldr	r3, [r2, #8]
 80054e8:	0798      	lsls	r0, r3, #30
 80054ea:	d505      	bpl.n	80054f8 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80054ee:	f833 1b02 	ldrh.w	r1, [r3], #2
 80054f2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80054f6:	e7d9      	b.n	80054ac <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f8:	f7fe f9e4 	bl	80038c4 <HAL_GetTick>
 80054fc:	eba0 0009 	sub.w	r0, r0, r9
 8005500:	42b8      	cmp	r0, r7
 8005502:	d3d7      	bcc.n	80054b4 <HAL_SPI_Transmit+0xa0>
 8005504:	1c79      	adds	r1, r7, #1
 8005506:	d0d5      	beq.n	80054b4 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8005508:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800550a:	2301      	movs	r3, #1
 800550c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005510:	2300      	movs	r3, #0
 8005512:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005516:	b003      	add	sp, #12
 8005518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800551c:	b113      	cbz	r3, 8005524 <HAL_SPI_Transmit+0x110>
 800551e:	f1b8 0f01 	cmp.w	r8, #1
 8005522:	d108      	bne.n	8005536 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005524:	782b      	ldrb	r3, [r5, #0]
 8005526:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005528:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800552a:	3301      	adds	r3, #1
 800552c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800552e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005530:	3b01      	subs	r3, #1
 8005532:	b29b      	uxth	r3, r3
 8005534:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005536:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0bd      	beq.n	80054ba <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	0792      	lsls	r2, r2, #30
 8005544:	d503      	bpl.n	800554e <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005546:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005548:	7812      	ldrb	r2, [r2, #0]
 800554a:	731a      	strb	r2, [r3, #12]
 800554c:	e7ec      	b.n	8005528 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800554e:	f7fe f9b9 	bl	80038c4 <HAL_GetTick>
 8005552:	eba0 0009 	sub.w	r0, r0, r9
 8005556:	42b8      	cmp	r0, r7
 8005558:	d3ed      	bcc.n	8005536 <HAL_SPI_Transmit+0x122>
 800555a:	1c7b      	adds	r3, r7, #1
 800555c:	d0eb      	beq.n	8005536 <HAL_SPI_Transmit+0x122>
 800555e:	e7d3      	b.n	8005508 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005560:	2320      	movs	r3, #32
 8005562:	6563      	str	r3, [r4, #84]	@ 0x54
 8005564:	e7b0      	b.n	80054c8 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8005566:	2002      	movs	r0, #2
 8005568:	e7cf      	b.n	800550a <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 800556a:	2002      	movs	r0, #2
 800556c:	e7d3      	b.n	8005516 <HAL_SPI_Transmit+0x102>

0800556e <HAL_SPI_TransmitReceive>:
{
 800556e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005572:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005574:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8005578:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 800557c:	2b01      	cmp	r3, #1
{
 800557e:	4604      	mov	r4, r0
 8005580:	460d      	mov	r5, r1
 8005582:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8005584:	f000 80e3 	beq.w	800574e <HAL_SPI_TransmitReceive+0x1e0>
 8005588:	2301      	movs	r3, #1
 800558a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800558e:	f7fe f999 	bl	80038c4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005592:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8005596:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005598:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800559a:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800559c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800559e:	d00a      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0x48>
 80055a0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80055a4:	f040 80d1 	bne.w	800574a <HAL_SPI_TransmitReceive+0x1dc>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055a8:	68a3      	ldr	r3, [r4, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 80cd 	bne.w	800574a <HAL_SPI_TransmitReceive+0x1dc>
 80055b0:	2904      	cmp	r1, #4
 80055b2:	f040 80ca 	bne.w	800574a <HAL_SPI_TransmitReceive+0x1dc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055b6:	b115      	cbz	r5, 80055be <HAL_SPI_TransmitReceive+0x50>
 80055b8:	f1b9 0f00 	cmp.w	r9, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 80055be:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80055c6:	2300      	movs	r3, #0
 80055c8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80055cc:	b003      	add	sp, #12
 80055ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	d0f3      	beq.n	80055be <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055d6:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055da:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055de:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055e0:	bf1c      	itt	ne
 80055e2:	2305      	movne	r3, #5
 80055e4:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 80055ec:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80055f2:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 80055f4:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f6:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80055f8:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055fa:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80055fc:	bf58      	it	pl
 80055fe:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005600:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8005602:	bf58      	it	pl
 8005604:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8005608:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 800560a:	bf58      	it	pl
 800560c:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800560e:	68e1      	ldr	r1, [r4, #12]
 8005610:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005614:	d148      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005616:	b10a      	cbz	r2, 800561c <HAL_SPI_TransmitReceive+0xae>
 8005618:	2e01      	cmp	r6, #1
 800561a:	d107      	bne.n	800562c <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005620:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005622:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005624:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005626:	3b01      	subs	r3, #1
 8005628:	b29b      	uxth	r3, r3
 800562a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800562c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800562e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005630:	b29b      	uxth	r3, r3
 8005632:	b963      	cbnz	r3, 800564e <HAL_SPI_TransmitReceive+0xe0>
 8005634:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	b94b      	cbnz	r3, 800564e <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800563a:	463a      	mov	r2, r7
 800563c:	4641      	mov	r1, r8
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff fe60 	bl	8005304 <SPI_EndRxTxTransaction>
 8005644:	2800      	cmp	r0, #0
 8005646:	d074      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005648:	2320      	movs	r3, #32
 800564a:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 800564c:	e7b7      	b.n	80055be <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800564e:	6821      	ldr	r1, [r4, #0]
 8005650:	688b      	ldr	r3, [r1, #8]
 8005652:	079a      	lsls	r2, r3, #30
 8005654:	d50d      	bpl.n	8005672 <HAL_SPI_TransmitReceive+0x104>
 8005656:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005658:	b29b      	uxth	r3, r3
 800565a:	b153      	cbz	r3, 8005672 <HAL_SPI_TransmitReceive+0x104>
 800565c:	b145      	cbz	r5, 8005670 <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005660:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005664:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005666:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005668:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800566a:	3b01      	subs	r3, #1
 800566c:	b29b      	uxth	r3, r3
 800566e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8005670:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005672:	688a      	ldr	r2, [r1, #8]
 8005674:	f012 0201 	ands.w	r2, r2, #1
 8005678:	d00c      	beq.n	8005694 <HAL_SPI_TransmitReceive+0x126>
 800567a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	b14b      	cbz	r3, 8005694 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005680:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005682:	68c9      	ldr	r1, [r1, #12]
 8005684:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005688:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800568a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800568c:	3b01      	subs	r3, #1
 800568e:	b29b      	uxth	r3, r3
 8005690:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005692:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005694:	f7fe f916 	bl	80038c4 <HAL_GetTick>
 8005698:	1bc0      	subs	r0, r0, r7
 800569a:	4540      	cmp	r0, r8
 800569c:	d3c7      	bcc.n	800562e <HAL_SPI_TransmitReceive+0xc0>
 800569e:	f1b8 3fff 	cmp.w	r8, #4294967295
 80056a2:	d0c4      	beq.n	800562e <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 80056a4:	2003      	movs	r0, #3
 80056a6:	e78b      	b.n	80055c0 <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a8:	b10a      	cbz	r2, 80056ae <HAL_SPI_TransmitReceive+0x140>
 80056aa:	2e01      	cmp	r6, #1
 80056ac:	d108      	bne.n	80056c0 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ae:	782a      	ldrb	r2, [r5, #0]
 80056b0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80056b4:	3301      	adds	r3, #1
 80056b6:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80056b8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29b      	uxth	r3, r3
 80056be:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80056c0:	2501      	movs	r5, #1
 80056c2:	e02d      	b.n	8005720 <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	6893      	ldr	r3, [r2, #8]
 80056c8:	079b      	lsls	r3, r3, #30
 80056ca:	d50e      	bpl.n	80056ea <HAL_SPI_TransmitReceive+0x17c>
 80056cc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	b15b      	cbz	r3, 80056ea <HAL_SPI_TransmitReceive+0x17c>
 80056d2:	b14d      	cbz	r5, 80056e8 <HAL_SPI_TransmitReceive+0x17a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80056da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80056dc:	3301      	adds	r3, #1
 80056de:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80056e0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80056e8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	6891      	ldr	r1, [r2, #8]
 80056ee:	f011 0101 	ands.w	r1, r1, #1
 80056f2:	d00d      	beq.n	8005710 <HAL_SPI_TransmitReceive+0x1a2>
 80056f4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	b153      	cbz	r3, 8005710 <HAL_SPI_TransmitReceive+0x1a2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80056fc:	68d2      	ldr	r2, [r2, #12]
 80056fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005700:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005702:	3301      	adds	r3, #1
 8005704:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005706:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005708:	3b01      	subs	r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800570e:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005710:	f7fe f8d8 	bl	80038c4 <HAL_GetTick>
 8005714:	1bc0      	subs	r0, r0, r7
 8005716:	4540      	cmp	r0, r8
 8005718:	d302      	bcc.n	8005720 <HAL_SPI_TransmitReceive+0x1b2>
 800571a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800571e:	d1c1      	bne.n	80056a4 <HAL_SPI_TransmitReceive+0x136>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005720:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1cd      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x156>
 8005728:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1c9      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x156>
 8005730:	e783      	b.n	800563a <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005732:	68a3      	ldr	r3, [r4, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f47f af43 	bne.w	80055c0 <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	9001      	str	r0, [sp, #4]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	9201      	str	r2, [sp, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	9b01      	ldr	r3, [sp, #4]
 8005748:	e73a      	b.n	80055c0 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 800574a:	2002      	movs	r0, #2
 800574c:	e738      	b.n	80055c0 <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 800574e:	2002      	movs	r0, #2
 8005750:	e73c      	b.n	80055cc <HAL_SPI_TransmitReceive+0x5e>

08005752 <HAL_SPI_Receive>:
{
 8005752:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005756:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005758:	6843      	ldr	r3, [r0, #4]
 800575a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 800575e:	4604      	mov	r4, r0
 8005760:	4689      	mov	r9, r1
 8005762:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005764:	d10c      	bne.n	8005780 <HAL_SPI_Receive+0x2e>
 8005766:	6883      	ldr	r3, [r0, #8]
 8005768:	b953      	cbnz	r3, 8005780 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800576a:	2304      	movs	r3, #4
 800576c:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005770:	4613      	mov	r3, r2
 8005772:	9500      	str	r5, [sp, #0]
 8005774:	460a      	mov	r2, r1
 8005776:	f7ff fefa 	bl	800556e <HAL_SPI_TransmitReceive>
}
 800577a:	b003      	add	sp, #12
 800577c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005780:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005784:	2b01      	cmp	r3, #1
 8005786:	d07f      	beq.n	8005888 <HAL_SPI_Receive+0x136>
 8005788:	2301      	movs	r3, #1
 800578a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800578e:	f7fe f899 	bl	80038c4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005792:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005796:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005798:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800579a:	b2d8      	uxtb	r0, r3
 800579c:	d172      	bne.n	8005884 <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 800579e:	f1b9 0f00 	cmp.w	r9, #0
 80057a2:	d05c      	beq.n	800585e <HAL_SPI_Receive+0x10c>
 80057a4:	2f00      	cmp	r7, #0
 80057a6:	d05a      	beq.n	800585e <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a8:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057aa:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ae:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057b0:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057b6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 80057ba:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057be:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 80057c0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80057c2:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057c4:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057c6:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80057c8:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80057ca:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057cc:	d107      	bne.n	80057de <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057dc:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80057e2:	bf5e      	ittt	pl
 80057e4:	681a      	ldrpl	r2, [r3, #0]
 80057e6:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80057ea:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80057ec:	68e3      	ldr	r3, [r4, #12]
 80057ee:	b1f3      	cbz	r3, 800582e <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 80057f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	b1fb      	cbz	r3, 8005836 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	07d2      	lsls	r2, r2, #31
 80057fc:	d536      	bpl.n	800586c <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005802:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005806:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005808:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800580a:	3b01      	subs	r3, #1
 800580c:	b29b      	uxth	r3, r3
 800580e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005810:	e7ee      	b.n	80057f0 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	07d0      	lsls	r0, r2, #31
 8005818:	d518      	bpl.n	800584c <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800581a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800581c:	7b1b      	ldrb	r3, [r3, #12]
 800581e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005820:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005822:	3301      	adds	r3, #1
 8005824:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005826:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005828:	3b01      	subs	r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800582e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1ed      	bne.n	8005812 <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005836:	4642      	mov	r2, r8
 8005838:	4629      	mov	r1, r5
 800583a:	4620      	mov	r0, r4
 800583c:	f7ff fd38 	bl	80052b0 <SPI_EndRxTransaction>
 8005840:	b9e8      	cbnz	r0, 800587e <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005842:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005844:	3800      	subs	r0, #0
 8005846:	bf18      	it	ne
 8005848:	2001      	movne	r0, #1
error :
 800584a:	e008      	b.n	800585e <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800584c:	f7fe f83a 	bl	80038c4 <HAL_GetTick>
 8005850:	eba0 0008 	sub.w	r0, r0, r8
 8005854:	42a8      	cmp	r0, r5
 8005856:	d3ea      	bcc.n	800582e <HAL_SPI_Receive+0xdc>
 8005858:	1c69      	adds	r1, r5, #1
 800585a:	d0e8      	beq.n	800582e <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 800585c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800585e:	2301      	movs	r3, #1
 8005860:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005864:	2300      	movs	r3, #0
 8005866:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 800586a:	e786      	b.n	800577a <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586c:	f7fe f82a 	bl	80038c4 <HAL_GetTick>
 8005870:	eba0 0008 	sub.w	r0, r0, r8
 8005874:	42a8      	cmp	r0, r5
 8005876:	d3bb      	bcc.n	80057f0 <HAL_SPI_Receive+0x9e>
 8005878:	1c6b      	adds	r3, r5, #1
 800587a:	d0b9      	beq.n	80057f0 <HAL_SPI_Receive+0x9e>
 800587c:	e7ee      	b.n	800585c <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800587e:	2320      	movs	r3, #32
 8005880:	6563      	str	r3, [r4, #84]	@ 0x54
 8005882:	e7de      	b.n	8005842 <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8005884:	2002      	movs	r0, #2
 8005886:	e7ea      	b.n	800585e <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8005888:	2002      	movs	r0, #2
 800588a:	e776      	b.n	800577a <HAL_SPI_Receive+0x28>

0800588c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800588c:	4770      	bx	lr
	...

08005890 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005890:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005894:	2b01      	cmp	r3, #1
 8005896:	d130      	bne.n	80058fa <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	2302      	movs	r3, #2
 800589a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800589e:	6803      	ldr	r3, [r0, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a8:	4a15      	ldr	r2, [pc, #84]	@ (8005900 <HAL_TIM_Base_Start_IT+0x70>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01a      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x54>
 80058ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b2:	d017      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x54>
 80058b4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x54>
 80058bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00f      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x54>
 80058c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x54>
 80058cc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x54>
 80058d4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x54>
 80058dc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ea:	2a06      	cmp	r2, #6
 80058ec:	d003      	beq.n	80058f6 <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80058f6:	2000      	movs	r0, #0
 80058f8:	4770      	bx	lr
    return HAL_ERROR;
 80058fa:	2001      	movs	r0, #1
}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40010000 	.word	0x40010000

08005904 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005904:	4770      	bx	lr

08005906 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005906:	4770      	bx	lr

08005908 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005908:	4770      	bx	lr

0800590a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800590c:	6803      	ldr	r3, [r0, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	0791      	lsls	r1, r2, #30
{
 8005912:	b510      	push	{r4, lr}
 8005914:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005916:	d50e      	bpl.n	8005936 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	0792      	lsls	r2, r2, #30
 800591c:	d50b      	bpl.n	8005936 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800591e:	f06f 0202 	mvn.w	r2, #2
 8005922:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005924:	2201      	movs	r2, #1
 8005926:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	079b      	lsls	r3, r3, #30
 800592c:	d077      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800592e:	f7ff ffea 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	2300      	movs	r3, #0
 8005934:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	0750      	lsls	r0, r2, #29
 800593c:	d510      	bpl.n	8005960 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	0751      	lsls	r1, r2, #29
 8005942:	d50d      	bpl.n	8005960 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005944:	f06f 0204 	mvn.w	r2, #4
 8005948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800594a:	2202      	movs	r2, #2
 800594c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005954:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005956:	d068      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005958:	f7ff ffd5 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595c:	2300      	movs	r3, #0
 800595e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	0712      	lsls	r2, r2, #28
 8005966:	d50f      	bpl.n	8005988 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	0710      	lsls	r0, r2, #28
 800596c:	d50c      	bpl.n	8005988 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800596e:	f06f 0208 	mvn.w	r2, #8
 8005972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005974:	2204      	movs	r2, #4
 8005976:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800597c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800597e:	d05a      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005980:	f7ff ffc1 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005984:	2300      	movs	r3, #0
 8005986:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	06d2      	lsls	r2, r2, #27
 800598e:	d510      	bpl.n	80059b2 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	06d0      	lsls	r0, r2, #27
 8005994:	d50d      	bpl.n	80059b2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005996:	f06f 0210 	mvn.w	r2, #16
 800599a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800599c:	2208      	movs	r2, #8
 800599e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80059a6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a8:	d04b      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	f7ff ffac 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	2300      	movs	r3, #0
 80059b0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	07d1      	lsls	r1, r2, #31
 80059b8:	d508      	bpl.n	80059cc <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	07d2      	lsls	r2, r2, #31
 80059be:	d505      	bpl.n	80059cc <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c0:	f06f 0201 	mvn.w	r2, #1
 80059c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7fb ff52 	bl	8001870 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	0610      	lsls	r0, r2, #24
 80059d2:	d508      	bpl.n	80059e6 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	0611      	lsls	r1, r2, #24
 80059d8:	d505      	bpl.n	80059e6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059da:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80059de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 f8c8 	bl	8005b76 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	0652      	lsls	r2, r2, #25
 80059ec:	d508      	bpl.n	8005a00 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	0650      	lsls	r0, r2, #25
 80059f2:	d505      	bpl.n	8005a00 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80059fa:	4620      	mov	r0, r4
 80059fc:	f7ff ff85 	bl	800590a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	0691      	lsls	r1, r2, #26
 8005a06:	d522      	bpl.n	8005a4e <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	0692      	lsls	r2, r2, #26
 8005a0c:	d51f      	bpl.n	8005a4e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a0e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005a12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a14:	611a      	str	r2, [r3, #16]
}
 8005a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005a1a:	f000 b8ab 	b.w	8005b74 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1e:	f7ff ff71 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7ff ff70 	bl	8005908 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a28:	e783      	b.n	8005932 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	f7ff ff6b 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7ff ff6a 	bl	8005908 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a34:	e792      	b.n	800595c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	f7ff ff65 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f7ff ff64 	bl	8005908 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a40:	e7a0      	b.n	8005984 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a42:	f7ff ff5f 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a46:	4620      	mov	r0, r4
 8005a48:	f7ff ff5e 	bl	8005908 <HAL_TIM_PWM_PulseFinishedCallback>
 8005a4c:	e7af      	b.n	80059ae <HAL_TIM_IRQHandler+0xa2>
}
 8005a4e:	bd10      	pop	{r4, pc}

08005a50 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	4a30      	ldr	r2, [pc, #192]	@ (8005b14 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005a52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a54:	4290      	cmp	r0, r2
 8005a56:	d012      	beq.n	8005a7e <TIM_Base_SetConfig+0x2e>
 8005a58:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005a5c:	d00f      	beq.n	8005a7e <TIM_Base_SetConfig+0x2e>
 8005a5e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005a62:	4290      	cmp	r0, r2
 8005a64:	d00b      	beq.n	8005a7e <TIM_Base_SetConfig+0x2e>
 8005a66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a6a:	4290      	cmp	r0, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_Base_SetConfig+0x2e>
 8005a6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a72:	4290      	cmp	r0, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_Base_SetConfig+0x2e>
 8005a76:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005a7a:	4290      	cmp	r0, r2
 8005a7c:	d119      	bne.n	8005ab2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005a7e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a84:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a86:	4a23      	ldr	r2, [pc, #140]	@ (8005b14 <TIM_Base_SetConfig+0xc4>)
 8005a88:	4290      	cmp	r0, r2
 8005a8a:	d029      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005a8c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005a90:	d026      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005a92:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005a96:	4290      	cmp	r0, r2
 8005a98:	d022      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005a9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a9e:	4290      	cmp	r0, r2
 8005aa0:	d01e      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005aa2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005aa6:	4290      	cmp	r0, r2
 8005aa8:	d01a      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005aaa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005aae:	4290      	cmp	r0, r2
 8005ab0:	d016      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005ab2:	4a19      	ldr	r2, [pc, #100]	@ (8005b18 <TIM_Base_SetConfig+0xc8>)
 8005ab4:	4290      	cmp	r0, r2
 8005ab6:	d013      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005ab8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005abc:	4290      	cmp	r0, r2
 8005abe:	d00f      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005ac0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ac4:	4290      	cmp	r0, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005ac8:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8005acc:	4290      	cmp	r0, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005ad0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ad4:	4290      	cmp	r0, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0x90>
 8005ad8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005adc:	4290      	cmp	r0, r2
 8005ade:	d103      	bne.n	8005ae8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae8:	694a      	ldr	r2, [r1, #20]
 8005aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aee:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005af0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af2:	688b      	ldr	r3, [r1, #8]
 8005af4:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af6:	680b      	ldr	r3, [r1, #0]
 8005af8:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <TIM_Base_SetConfig+0xc4>)
 8005afc:	4298      	cmp	r0, r3
 8005afe:	d003      	beq.n	8005b08 <TIM_Base_SetConfig+0xb8>
 8005b00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b04:	4298      	cmp	r0, r3
 8005b06:	d101      	bne.n	8005b0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b08:	690b      	ldr	r3, [r1, #16]
 8005b0a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	6143      	str	r3, [r0, #20]
}
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40014000 	.word	0x40014000

08005b1c <HAL_TIM_Base_Init>:
{
 8005b1c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005b1e:	4604      	mov	r4, r0
 8005b20:	b330      	cbz	r0, 8005b70 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005b22:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005b26:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005b2a:	b91b      	cbnz	r3, 8005b34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005b2c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005b30:	f7ff feac 	bl	800588c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b36:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3c:	1d21      	adds	r1, r4, #4
 8005b3e:	f7ff ff87 	bl	8005a50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8005b48:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005b4e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005b52:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005b56:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b62:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005b66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005b6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005b6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005b70:	2001      	movs	r0, #1
 8005b72:	e7fc      	b.n	8005b6e <HAL_TIM_Base_Init+0x52>

08005b74 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005b74:	4770      	bx	lr

08005b76 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005b76:	4770      	bx	lr

08005b78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005b7c:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8005b80:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8005b84:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8005b88:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 8005b8c:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005b90:	6809      	ldr	r1, [r1, #0]
 8005b92:	ea43 0308 	orr.w	r3, r3, r8
 8005b96:	b991      	cbnz	r1, 8005bbe <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005b98:	ea43 030e 	orr.w	r3, r3, lr
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	ea43 030c 	orr.w	r3, r3, ip
 8005ba2:	6801      	ldr	r1, [r0, #0]
 8005ba4:	433b      	orrs	r3, r7
 8005ba6:	4333      	orrs	r3, r6
 8005ba8:	432b      	orrs	r3, r5
 8005baa:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8005bae:	4323      	orrs	r3, r4
 8005bb0:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005bbe:	6801      	ldr	r1, [r0, #0]
 8005bc0:	ea43 030e 	orr.w	r3, r3, lr
 8005bc4:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005bcc:	ea42 030c 	orr.w	r3, r2, ip
 8005bd0:	6841      	ldr	r1, [r0, #4]
 8005bd2:	433b      	orrs	r3, r7
 8005bd4:	4333      	orrs	r3, r6
 8005bd6:	432b      	orrs	r3, r5
 8005bd8:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8005bdc:	4323      	orrs	r3, r4
 8005bde:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8005be2:	4313      	orrs	r3, r2
 8005be4:	6043      	str	r3, [r0, #4]
 8005be6:	e7e7      	b.n	8005bb8 <FMC_SDRAM_Init+0x40>

08005be8 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005be8:	68cb      	ldr	r3, [r1, #12]
 8005bea:	f103 3cff 	add.w	ip, r3, #4294967295
 8005bee:	694b      	ldr	r3, [r1, #20]
{
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005bf2:	680f      	ldr	r7, [r1, #0]
 8005bf4:	684c      	ldr	r4, [r1, #4]
 8005bf6:	688e      	ldr	r6, [r1, #8]
 8005bf8:	690d      	ldr	r5, [r1, #16]
 8005bfa:	6989      	ldr	r1, [r1, #24]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	051b      	lsls	r3, r3, #20
 8005c00:	3c01      	subs	r4, #1
 8005c02:	3e01      	subs	r6, #1
 8005c04:	3d01      	subs	r5, #1
 8005c06:	3901      	subs	r1, #1
 8005c08:	3f01      	subs	r7, #1
 8005c0a:	0124      	lsls	r4, r4, #4
 8005c0c:	0236      	lsls	r6, r6, #8
 8005c0e:	042d      	lsls	r5, r5, #16
 8005c10:	0609      	lsls	r1, r1, #24
 8005c12:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8005c16:	b95a      	cbnz	r2, 8005c30 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005c18:	433b      	orrs	r3, r7
 8005c1a:	4323      	orrs	r3, r4
 8005c1c:	6882      	ldr	r2, [r0, #8]
 8005c1e:	4333      	orrs	r3, r6
 8005c20:	432b      	orrs	r3, r5
 8005c22:	430b      	orrs	r3, r1
 8005c24:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005c30:	6882      	ldr	r2, [r0, #8]
 8005c32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005c36:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005c3e:	ea44 0306 	orr.w	r3, r4, r6
 8005c42:	68c2      	ldr	r2, [r0, #12]
 8005c44:	433b      	orrs	r3, r7
 8005c46:	432b      	orrs	r3, r5
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60c3      	str	r3, [r0, #12]
 8005c52:	e7eb      	b.n	8005c2c <FMC_SDRAM_Timing_Init+0x44>

08005c54 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	4604      	mov	r4, r0
 8005c58:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005c5a:	6902      	ldr	r2, [r0, #16]
 8005c5c:	e9d1 3000 	ldrd	r3, r0, [r1]
 8005c60:	4303      	orrs	r3, r0
 8005c62:	68c8      	ldr	r0, [r1, #12]
 8005c64:	0d92      	lsrs	r2, r2, #22
 8005c66:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8005c6a:	0592      	lsls	r2, r2, #22
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	688a      	ldr	r2, [r1, #8]
 8005c70:	3a01      	subs	r2, #1
 8005c72:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005c76:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8005c78:	f7fd fe24 	bl	80038c4 <HAL_GetTick>
 8005c7c:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005c7e:	69a0      	ldr	r0, [r4, #24]
 8005c80:	f010 0020 	ands.w	r0, r0, #32
 8005c84:	d003      	beq.n	8005c8e <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c86:	1c6b      	adds	r3, r5, #1
 8005c88:	d0f9      	beq.n	8005c7e <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005c8a:	b90d      	cbnz	r5, 8005c90 <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8005c8c:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005c90:	f7fd fe18 	bl	80038c4 <HAL_GetTick>
 8005c94:	1b80      	subs	r0, r0, r6
 8005c96:	42a8      	cmp	r0, r5
 8005c98:	d9f1      	bls.n	8005c7e <FMC_SDRAM_SendCommand+0x2a>
 8005c9a:	e7f7      	b.n	8005c8c <FMC_SDRAM_SendCommand+0x38>

08005c9c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005c9c:	6943      	ldr	r3, [r0, #20]
 8005c9e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005ca2:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8005ca6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005caa:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8005cac:	2000      	movs	r0, #0
 8005cae:	4770      	bx	lr

08005cb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005cb0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8005cb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005cb6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005cb8:	f001 fe22 	bl	8007900 <xTaskGetSchedulerState>
 8005cbc:	2801      	cmp	r0, #1
 8005cbe:	d003      	beq.n	8005cc8 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8005cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005cc4:	f000 bbee 	b.w	80064a4 <xPortSysTickHandler>
}
 8005cc8:	bd08      	pop	{r3, pc}
	...

08005ccc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ccc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cd0:	b92b      	cbnz	r3, 8005cde <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cd2:	4b06      	ldr	r3, [pc, #24]	@ (8005cec <osKernelInitialize+0x20>)
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	b928      	cbnz	r0, 8005ce4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cd8:	2201      	movs	r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cdc:	4770      	bx	lr
    stat = osErrorISR;
 8005cde:	f06f 0005 	mvn.w	r0, #5
 8005ce2:	4770      	bx	lr
    } else {
      stat = osError;
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20001d8c 	.word	0x20001d8c

08005cf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cf6:	b95c      	cbnz	r4, 8005d10 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005cf8:	4b08      	ldr	r3, [pc, #32]	@ (8005d1c <osKernelStart+0x2c>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	2a01      	cmp	r2, #1
 8005cfe:	d10a      	bne.n	8005d16 <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d00:	4a07      	ldr	r2, [pc, #28]	@ (8005d20 <osKernelStart+0x30>)
 8005d02:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d04:	2202      	movs	r2, #2
 8005d06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d08:	f001 fb78 	bl	80073fc <vTaskStartScheduler>
      stat = osOK;
 8005d0c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8005d0e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8005d10:	f06f 0005 	mvn.w	r0, #5
 8005d14:	e7fb      	b.n	8005d0e <osKernelStart+0x1e>
      stat = osError;
 8005d16:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005d1a:	e7f8      	b.n	8005d0e <osKernelStart+0x1e>
 8005d1c:	20001d8c 	.word	0x20001d8c
 8005d20:	e000ed00 	.word	0xe000ed00

08005d24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d26:	b087      	sub	sp, #28
 8005d28:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d2a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d2c:	460b      	mov	r3, r1
  hTask = NULL;
 8005d2e:	9205      	str	r2, [sp, #20]
 8005d30:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005d34:	b9ca      	cbnz	r2, 8005d6a <osThreadNew+0x46>
 8005d36:	b1c0      	cbz	r0, 8005d6a <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8005d38:	b36c      	cbz	r4, 8005d96 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005d3a:	69a5      	ldr	r5, [r4, #24]
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	bf08      	it	eq
 8005d40:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d42:	1e69      	subs	r1, r5, #1
 8005d44:	2937      	cmp	r1, #55	@ 0x37
 8005d46:	46ac      	mov	ip, r5
 8005d48:	d82a      	bhi.n	8005da0 <osThreadNew+0x7c>
 8005d4a:	6861      	ldr	r1, [r4, #4]
 8005d4c:	07c9      	lsls	r1, r1, #31
 8005d4e:	d427      	bmi.n	8005da0 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005d50:	6966      	ldr	r6, [r4, #20]
 8005d52:	b16e      	cbz	r6, 8005d70 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d54:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d56:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
      if (attr->name != NULL) {
 8005d5a:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d5c:	b157      	cbz	r7, 8005d74 <osThreadNew+0x50>
 8005d5e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8005d62:	d902      	bls.n	8005d6a <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d64:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d66:	b104      	cbz	r4, 8005d6a <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d68:	b9e6      	cbnz	r6, 8005da4 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d6a:	9805      	ldr	r0, [sp, #20]
}
 8005d6c:	b007      	add	sp, #28
 8005d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8005d70:	2280      	movs	r2, #128	@ 0x80
 8005d72:	e7f0      	b.n	8005d56 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d74:	f1be 0f00 	cmp.w	lr, #0
 8005d78:	d1f7      	bne.n	8005d6a <osThreadNew+0x46>
      if (mem == 0) {
 8005d7a:	6924      	ldr	r4, [r4, #16]
 8005d7c:	2c00      	cmp	r4, #0
 8005d7e:	d1f4      	bne.n	8005d6a <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d80:	ac05      	add	r4, sp, #20
 8005d82:	e9cd c400 	strd	ip, r4, [sp]
 8005d86:	b292      	uxth	r2, r2
 8005d88:	f001 fb09 	bl	800739e <xTaskCreate>
 8005d8c:	2801      	cmp	r0, #1
            hTask = NULL;
 8005d8e:	bf1c      	itt	ne
 8005d90:	2300      	movne	r3, #0
 8005d92:	9305      	strne	r3, [sp, #20]
 8005d94:	e7e9      	b.n	8005d6a <osThreadNew+0x46>
    name = NULL;
 8005d96:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8005d98:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8005d9c:	2280      	movs	r2, #128	@ 0x80
 8005d9e:	e7ef      	b.n	8005d80 <osThreadNew+0x5c>
        return (NULL);
 8005da0:	4610      	mov	r0, r2
 8005da2:	e7e3      	b.n	8005d6c <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005da4:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005da8:	9500      	str	r5, [sp, #0]
 8005daa:	f001 fac0 	bl	800732e <xTaskCreateStatic>
 8005dae:	9005      	str	r0, [sp, #20]
 8005db0:	e7db      	b.n	8005d6a <osThreadNew+0x46>

08005db2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005db2:	b508      	push	{r3, lr}
 8005db4:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005db8:	b922      	cbnz	r2, 8005dc4 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8005dba:	b108      	cbz	r0, 8005dc0 <osDelay+0xe>
      vTaskDelay(ticks);
 8005dbc:	f001 fc7c 	bl	80076b8 <vTaskDelay>
    stat = osOK;
 8005dc0:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8005dc2:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8005dc4:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8005dc8:	e7fb      	b.n	8005dc2 <osDelay+0x10>

08005dca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dcc:	4604      	mov	r4, r0
 8005dce:	460e      	mov	r6, r1
 8005dd0:	4615      	mov	r5, r2
 8005dd2:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005dd6:	b942      	cbnz	r2, 8005dea <osSemaphoreNew+0x20>
 8005dd8:	b138      	cbz	r0, 8005dea <osSemaphoreNew+0x20>
 8005dda:	4288      	cmp	r0, r1
 8005ddc:	d305      	bcc.n	8005dea <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8005dde:	b155      	cbz	r5, 8005df6 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005de0:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8005de4:	b12b      	cbz	r3, 8005df2 <osSemaphoreNew+0x28>
 8005de6:	2f4f      	cmp	r7, #79	@ 0x4f
 8005de8:	d822      	bhi.n	8005e30 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8005dea:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8005dec:	4620      	mov	r0, r4
 8005dee:	b003      	add	sp, #12
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005df2:	2f00      	cmp	r7, #0
 8005df4:	d1f9      	bne.n	8005dea <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8005df6:	2c01      	cmp	r4, #1
 8005df8:	d00c      	beq.n	8005e14 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	f000 fd8b 	bl	8006918 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8005e02:	4604      	mov	r4, r0
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d0f0      	beq.n	8005dea <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8005e08:	b985      	cbnz	r5, 8005e2c <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f001 f8c9 	bl	8006fa4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8005e12:	e7eb      	b.n	8005dec <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8005e14:	2203      	movs	r2, #3
 8005e16:	2100      	movs	r1, #0
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f000 fd34 	bl	8006886 <xQueueGenericCreate>
 8005e1e:	e00e      	b.n	8005e3e <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e20:	461a      	mov	r2, r3
 8005e22:	f000 fd57 	bl	80068d4 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8005e26:	4604      	mov	r4, r0
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d0de      	beq.n	8005dea <osSemaphoreNew+0x20>
          name = attr->name;
 8005e2c:	682d      	ldr	r5, [r5, #0]
 8005e2e:	e7ec      	b.n	8005e0a <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8005e30:	2801      	cmp	r0, #1
 8005e32:	d1f5      	bne.n	8005e20 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e34:	2103      	movs	r1, #3
 8005e36:	9100      	str	r1, [sp, #0]
 8005e38:	4611      	mov	r1, r2
 8005e3a:	f000 fcd6 	bl	80067ea <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8005e3e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d0d2      	beq.n	8005dea <osSemaphoreNew+0x20>
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	d0df      	beq.n	8005e08 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e48:	2300      	movs	r3, #0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	f000 fd81 	bl	8006954 <xQueueGenericSend>
 8005e52:	2801      	cmp	r0, #1
 8005e54:	d0d8      	beq.n	8005e08 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8005e56:	4620      	mov	r0, r4
 8005e58:	f001 f8ce 	bl	8006ff8 <vQueueDelete>
      if (hSemaphore != NULL) {
 8005e5c:	e7c5      	b.n	8005dea <osSemaphoreNew+0x20>

08005e5e <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005e5e:	b513      	push	{r0, r1, r4, lr}
 8005e60:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005e62:	b328      	cbz	r0, 8005eb0 <osSemaphoreAcquire+0x52>
 8005e64:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005e68:	b1cb      	cbz	r3, 8005e9e <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8005e6a:	bb09      	cbnz	r1, 8005eb0 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005e6c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8005e6e:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005e70:	f001 f82b 	bl	8006eca <xQueueReceiveFromISR>
 8005e74:	2801      	cmp	r0, #1
 8005e76:	d003      	beq.n	8005e80 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8005e78:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	b90b      	cbnz	r3, 8005e88 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7f9      	b.n	8005e7c <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8005e88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e90:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	e7f2      	b.n	8005e84 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005e9e:	f000 ff57 	bl	8006d50 <xQueueSemaphoreTake>
 8005ea2:	2801      	cmp	r0, #1
 8005ea4:	d0ee      	beq.n	8005e84 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8005ea6:	2c00      	cmp	r4, #0
 8005ea8:	d0e6      	beq.n	8005e78 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8005eaa:	f06f 0001 	mvn.w	r0, #1
 8005eae:	e7e5      	b.n	8005e7c <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8005eb0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8005eb4:	e7e2      	b.n	8005e7c <osSemaphoreAcquire+0x1e>

08005eb6 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005eb6:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005eb8:	b318      	cbz	r0, 8005f02 <osSemaphoreRelease+0x4c>
 8005eba:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005ebe:	b1cb      	cbz	r3, 8005ef4 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8005ec0:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005ec2:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8005ec4:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005ec6:	f000 fe54 	bl	8006b72 <xQueueGiveFromISR>
 8005eca:	2801      	cmp	r0, #1
 8005ecc:	d004      	beq.n	8005ed8 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8005ece:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8005ed2:	b003      	add	sp, #12
 8005ed4:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8005ed8:	9b01      	ldr	r3, [sp, #4]
 8005eda:	b14b      	cbz	r3, 8005ef0 <osSemaphoreRelease+0x3a>
 8005edc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e7ee      	b.n	8005ed2 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	f000 fd2c 	bl	8006954 <xQueueGenericSend>
 8005efc:	2801      	cmp	r0, #1
 8005efe:	d0f7      	beq.n	8005ef0 <osSemaphoreRelease+0x3a>
 8005f00:	e7e5      	b.n	8005ece <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8005f02:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8005f06:	e7e4      	b.n	8005ed2 <osSemaphoreRelease+0x1c>

08005f08 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8005f08:	b130      	cbz	r0, 8005f18 <osSemaphoreGetCount+0x10>
 8005f0a:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8005f0e:	b10b      	cbz	r3, 8005f14 <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8005f10:	f001 b83b 	b.w	8006f8a <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8005f14:	f001 b826 	b.w	8006f64 <uxQueueMessagesWaiting>
  }

  return (count);
}
 8005f18:	4770      	bx	lr

08005f1a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	460e      	mov	r6, r1
 8005f20:	4614      	mov	r4, r2
 8005f22:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005f26:	b11f      	cbz	r7, 8005f30 <osMessageQueueNew+0x16>
  hQueue = NULL;
 8005f28:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	b003      	add	sp, #12
 8005f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d0f9      	beq.n	8005f28 <osMessageQueueNew+0xe>
 8005f34:	2900      	cmp	r1, #0
 8005f36:	d0f7      	beq.n	8005f28 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8005f38:	b1da      	cbz	r2, 8005f72 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005f3a:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8005f3e:	b183      	cbz	r3, 8005f62 <osMessageQueueNew+0x48>
 8005f40:	2a4f      	cmp	r2, #79	@ 0x4f
 8005f42:	d9f1      	bls.n	8005f28 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005f44:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	d0ee      	beq.n	8005f28 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005f4a:	6966      	ldr	r6, [r4, #20]
 8005f4c:	434d      	muls	r5, r1
 8005f4e:	42ae      	cmp	r6, r5
 8005f50:	d3ea      	bcc.n	8005f28 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f52:	9700      	str	r7, [sp, #0]
 8005f54:	f000 fc49 	bl	80067ea <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8005f58:	4605      	mov	r5, r0
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d0e4      	beq.n	8005f28 <osMessageQueueNew+0xe>
        name = attr->name;
 8005f5e:	6824      	ldr	r4, [r4, #0]
 8005f60:	e011      	b.n	8005f86 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	d1e0      	bne.n	8005f28 <osMessageQueueNew+0xe>
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1dd      	bne.n	8005f28 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f6c:	6963      	ldr	r3, [r4, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1da      	bne.n	8005f28 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8005f72:	4628      	mov	r0, r5
 8005f74:	2200      	movs	r2, #0
 8005f76:	4631      	mov	r1, r6
 8005f78:	f000 fc85 	bl	8006886 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d0d2      	beq.n	8005f28 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	d1eb      	bne.n	8005f5e <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8005f86:	4621      	mov	r1, r4
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f001 f80b 	bl	8006fa4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8005f8e:	e7cc      	b.n	8005f2a <osMessageQueueNew+0x10>

08005f90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f92:	461c      	mov	r4, r3
 8005f94:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005f98:	b1de      	cbz	r6, 8005fd2 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f9a:	b338      	cbz	r0, 8005fec <osMessageQueuePut+0x5c>
 8005f9c:	b331      	cbz	r1, 8005fec <osMessageQueuePut+0x5c>
 8005f9e:	bb2b      	cbnz	r3, 8005fec <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005fa0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8005fa2:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005fa4:	f000 fd88 	bl	8006ab8 <xQueueGenericSendFromISR>
 8005fa8:	2801      	cmp	r0, #1
 8005faa:	d003      	beq.n	8005fb4 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8005fac:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	b90b      	cbnz	r3, 8005fbc <osMessageQueuePut+0x2c>
  stat = osOK;
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e7f9      	b.n	8005fb0 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8005fbc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	e7f2      	b.n	8005fb8 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fd2:	b158      	cbz	r0, 8005fec <osMessageQueuePut+0x5c>
 8005fd4:	b151      	cbz	r1, 8005fec <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fd6:	4633      	mov	r3, r6
 8005fd8:	4622      	mov	r2, r4
 8005fda:	f000 fcbb 	bl	8006954 <xQueueGenericSend>
 8005fde:	2801      	cmp	r0, #1
 8005fe0:	d0ea      	beq.n	8005fb8 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8005fe2:	2c00      	cmp	r4, #0
 8005fe4:	d0e2      	beq.n	8005fac <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8005fe6:	f06f 0001 	mvn.w	r0, #1
 8005fea:	e7e1      	b.n	8005fb0 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8005fec:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8005ff0:	e7de      	b.n	8005fb0 <osMessageQueuePut+0x20>

08005ff2 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005ff2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ff4:	461c      	mov	r4, r3
 8005ff6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005ffa:	b1db      	cbz	r3, 8006034 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ffc:	b330      	cbz	r0, 800604c <osMessageQueueGet+0x5a>
 8005ffe:	b329      	cbz	r1, 800604c <osMessageQueueGet+0x5a>
 8006000:	bb24      	cbnz	r4, 800604c <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006002:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006004:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006006:	f000 ff60 	bl	8006eca <xQueueReceiveFromISR>
 800600a:	2801      	cmp	r0, #1
 800600c:	d003      	beq.n	8006016 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800600e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006012:	b003      	add	sp, #12
 8006014:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	b90b      	cbnz	r3, 800601e <osMessageQueueGet+0x2c>
  stat = osOK;
 800601a:	2000      	movs	r0, #0
 800601c:	e7f9      	b.n	8006012 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800601e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006026:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	e7f2      	b.n	800601a <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006034:	b150      	cbz	r0, 800604c <osMessageQueueGet+0x5a>
 8006036:	b149      	cbz	r1, 800604c <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006038:	4622      	mov	r2, r4
 800603a:	f000 fdeb 	bl	8006c14 <xQueueReceive>
 800603e:	2801      	cmp	r0, #1
 8006040:	d0eb      	beq.n	800601a <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8006042:	2c00      	cmp	r4, #0
 8006044:	d0e3      	beq.n	800600e <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8006046:	f06f 0001 	mvn.w	r0, #1
 800604a:	e7e2      	b.n	8006012 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800604c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006050:	e7df      	b.n	8006012 <osMessageQueueGet+0x20>

08006052 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006052:	f7ff bf59 	b.w	8005f08 <osSemaphoreGetCount>
	...

08006058 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006058:	4b03      	ldr	r3, [pc, #12]	@ (8006068 <vApplicationGetIdleTaskMemory+0x10>)
 800605a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800605c:	4b03      	ldr	r3, [pc, #12]	@ (800606c <vApplicationGetIdleTaskMemory+0x14>)
 800605e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006060:	2380      	movs	r3, #128	@ 0x80
 8006062:	6013      	str	r3, [r2, #0]
}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20001d2c 	.word	0x20001d2c
 800606c:	20001b2c 	.word	0x20001b2c

08006070 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006070:	4b03      	ldr	r3, [pc, #12]	@ (8006080 <vApplicationGetTimerTaskMemory+0x10>)
 8006072:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006074:	4b03      	ldr	r3, [pc, #12]	@ (8006084 <vApplicationGetTimerTaskMemory+0x14>)
 8006076:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006078:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800607c:	6013      	str	r3, [r2, #0]
}
 800607e:	4770      	bx	lr
 8006080:	20001acc 	.word	0x20001acc
 8006084:	200016cc 	.word	0x200016cc

08006088 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006088:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800608a:	4b10      	ldr	r3, [pc, #64]	@ (80060cc <prvInsertBlockIntoFreeList+0x44>)
 800608c:	461a      	mov	r2, r3
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4283      	cmp	r3, r0
 8006092:	d3fb      	bcc.n	800608c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006094:	6854      	ldr	r4, [r2, #4]
 8006096:	1911      	adds	r1, r2, r4
 8006098:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800609a:	bf01      	itttt	eq
 800609c:	6841      	ldreq	r1, [r0, #4]
 800609e:	4610      	moveq	r0, r2
 80060a0:	1909      	addeq	r1, r1, r4
 80060a2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060a4:	6844      	ldr	r4, [r0, #4]
 80060a6:	1901      	adds	r1, r0, r4
 80060a8:	428b      	cmp	r3, r1
 80060aa:	d10c      	bne.n	80060c6 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ac:	4908      	ldr	r1, [pc, #32]	@ (80060d0 <prvInsertBlockIntoFreeList+0x48>)
 80060ae:	6809      	ldr	r1, [r1, #0]
 80060b0:	428b      	cmp	r3, r1
 80060b2:	d003      	beq.n	80060bc <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060b4:	6859      	ldr	r1, [r3, #4]
 80060b6:	4421      	add	r1, r4
 80060b8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060ba:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060bc:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060be:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060c0:	bf18      	it	ne
 80060c2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060c4:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060c6:	4619      	mov	r1, r3
 80060c8:	e7f8      	b.n	80060bc <prvInsertBlockIntoFreeList+0x34>
 80060ca:	bf00      	nop
 80060cc:	20001da8 	.word	0x20001da8
 80060d0:	20001da4 	.word	0x20001da4

080060d4 <pvPortMalloc>:
{
 80060d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80060da:	f001 f9d5 	bl	8007488 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80060de:	4942      	ldr	r1, [pc, #264]	@ (80061e8 <pvPortMalloc+0x114>)
 80060e0:	4d42      	ldr	r5, [pc, #264]	@ (80061ec <pvPortMalloc+0x118>)
 80060e2:	680b      	ldr	r3, [r1, #0]
 80060e4:	bb0b      	cbnz	r3, 800612a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80060e6:	4a42      	ldr	r2, [pc, #264]	@ (80061f0 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060e8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ea:	bf1f      	itttt	ne
 80060ec:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060ee:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060f2:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 80060f6:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060f8:	bf0c      	ite	eq
 80060fa:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060fe:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006100:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006102:	4e3c      	ldr	r6, [pc, #240]	@ (80061f4 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8006104:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006106:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800610a:	2000      	movs	r0, #0
 800610c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800610e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006110:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006114:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006116:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 800611a:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800611c:	4b36      	ldr	r3, [pc, #216]	@ (80061f8 <pvPortMalloc+0x124>)
 800611e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006120:	4b36      	ldr	r3, [pc, #216]	@ (80061fc <pvPortMalloc+0x128>)
 8006122:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006124:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006128:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800612a:	682e      	ldr	r6, [r5, #0]
 800612c:	4226      	tst	r6, r4
 800612e:	d155      	bne.n	80061dc <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8006130:	2c00      	cmp	r4, #0
 8006132:	d046      	beq.n	80061c2 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8006134:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006138:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800613a:	bf1c      	itt	ne
 800613c:	f023 0307 	bicne.w	r3, r3, #7
 8006140:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006142:	2b00      	cmp	r3, #0
 8006144:	d04a      	beq.n	80061dc <pvPortMalloc+0x108>
 8006146:	4f2d      	ldr	r7, [pc, #180]	@ (80061fc <pvPortMalloc+0x128>)
 8006148:	683c      	ldr	r4, [r7, #0]
 800614a:	429c      	cmp	r4, r3
 800614c:	d346      	bcc.n	80061dc <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800614e:	4a29      	ldr	r2, [pc, #164]	@ (80061f4 <pvPortMalloc+0x120>)
 8006150:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006152:	6868      	ldr	r0, [r5, #4]
 8006154:	4298      	cmp	r0, r3
 8006156:	d204      	bcs.n	8006162 <pvPortMalloc+0x8e>
 8006158:	f8d5 c000 	ldr.w	ip, [r5]
 800615c:	f1bc 0f00 	cmp.w	ip, #0
 8006160:	d115      	bne.n	800618e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8006162:	6809      	ldr	r1, [r1, #0]
 8006164:	42a9      	cmp	r1, r5
 8006166:	d039      	beq.n	80061dc <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006168:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800616a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800616e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006170:	1ac2      	subs	r2, r0, r3
 8006172:	2a10      	cmp	r2, #16
 8006174:	d912      	bls.n	800619c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006176:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006178:	0741      	lsls	r1, r0, #29
 800617a:	d00b      	beq.n	8006194 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	e7fe      	b.n	800618c <pvPortMalloc+0xb8>
 800618e:	462a      	mov	r2, r5
 8006190:	4665      	mov	r5, ip
 8006192:	e7de      	b.n	8006152 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006194:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006196:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006198:	f7ff ff76 	bl	8006088 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800619c:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800619e:	4916      	ldr	r1, [pc, #88]	@ (80061f8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061a0:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061a2:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 80061a4:	4a16      	ldr	r2, [pc, #88]	@ (8006200 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061a6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061a8:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80061ae:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061b0:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061b2:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 80061b4:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061b8:	bf38      	it	cc
 80061ba:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80061bc:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061be:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 80061c2:	f001 fa05 	bl	80075d0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061c6:	0763      	lsls	r3, r4, #29
 80061c8:	d00a      	beq.n	80061e0 <pvPortMalloc+0x10c>
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	e7fe      	b.n	80061da <pvPortMalloc+0x106>
void *pvReturn = NULL;
 80061dc:	2400      	movs	r4, #0
 80061de:	e7f0      	b.n	80061c2 <pvPortMalloc+0xee>
}
 80061e0:	4620      	mov	r0, r4
 80061e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e6:	bf00      	nop
 80061e8:	20001da4 	.word	0x20001da4
 80061ec:	20001d90 	.word	0x20001d90
 80061f0:	20001db0 	.word	0x20001db0
 80061f4:	20001da8 	.word	0x20001da8
 80061f8:	20001d9c 	.word	0x20001d9c
 80061fc:	20001da0 	.word	0x20001da0
 8006200:	20001d98 	.word	0x20001d98

08006204 <vPortFree>:
{
 8006204:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006206:	4604      	mov	r4, r0
 8006208:	b390      	cbz	r0, 8006270 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800620a:	4a1a      	ldr	r2, [pc, #104]	@ (8006274 <vPortFree+0x70>)
 800620c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	4213      	tst	r3, r2
 8006214:	d108      	bne.n	8006228 <vPortFree+0x24>
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	e7fe      	b.n	8006226 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006228:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800622c:	b141      	cbz	r1, 8006240 <vPortFree+0x3c>
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	e7fe      	b.n	800623e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006240:	ea23 0302 	bic.w	r3, r3, r2
 8006244:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006248:	f001 f91e 	bl	8007488 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800624c:	4a0a      	ldr	r2, [pc, #40]	@ (8006278 <vPortFree+0x74>)
 800624e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006252:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006254:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006258:	440b      	add	r3, r1
 800625a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800625c:	f7ff ff14 	bl	8006088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006260:	4a06      	ldr	r2, [pc, #24]	@ (800627c <vPortFree+0x78>)
 8006262:	6813      	ldr	r3, [r2, #0]
}
 8006264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8006268:	3301      	adds	r3, #1
 800626a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800626c:	f001 b9b0 	b.w	80075d0 <xTaskResumeAll>
}
 8006270:	bd10      	pop	{r4, pc}
 8006272:	bf00      	nop
 8006274:	20001d90 	.word	0x20001d90
 8006278:	20001da0 	.word	0x20001da0
 800627c:	20001d94 	.word	0x20001d94

08006280 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006280:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006284:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006288:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800628c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800628e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006294:	4770      	bx	lr

08006296 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800629a:	4770      	bx	lr

0800629c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800629c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800629e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062a4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80062a8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80062aa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80062ac:	3301      	adds	r3, #1
 80062ae:	6003      	str	r3, [r0, #0]
}
 80062b0:	4770      	bx	lr

080062b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062b2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062b4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062b6:	1c63      	adds	r3, r4, #1
 80062b8:	d10a      	bne.n	80062d0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062ba:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062c0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062c2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80062c4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80062c6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80062c8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80062ca:	3301      	adds	r3, #1
 80062cc:	6003      	str	r3, [r0, #0]
}
 80062ce:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062d0:	f100 0208 	add.w	r2, r0, #8
 80062d4:	4613      	mov	r3, r2
 80062d6:	6852      	ldr	r2, [r2, #4]
 80062d8:	6815      	ldr	r5, [r2, #0]
 80062da:	42a5      	cmp	r5, r4
 80062dc:	d9fa      	bls.n	80062d4 <vListInsert+0x22>
 80062de:	e7ed      	b.n	80062bc <vListInsert+0xa>

080062e0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062e0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 80062e4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062e6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062e8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062ee:	bf08      	it	eq
 80062f0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062f2:	2200      	movs	r2, #0
 80062f4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	3a01      	subs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062fc:	6818      	ldr	r0, [r3, #0]
}
 80062fe:	4770      	bx	lr

08006300 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006300:	4808      	ldr	r0, [pc, #32]	@ (8006324 <prvPortStartFirstTask+0x24>)
 8006302:	6800      	ldr	r0, [r0, #0]
 8006304:	6800      	ldr	r0, [r0, #0]
 8006306:	f380 8808 	msr	MSP, r0
 800630a:	f04f 0000 	mov.w	r0, #0
 800630e:	f380 8814 	msr	CONTROL, r0
 8006312:	b662      	cpsie	i
 8006314:	b661      	cpsie	f
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	df00      	svc	0
 8006320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006322:	0000      	.short	0x0000
 8006324:	e000ed08 	.word	0xe000ed08

08006328 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006328:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006338 <vPortEnableVFP+0x10>
 800632c:	6801      	ldr	r1, [r0, #0]
 800632e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006332:	6001      	str	r1, [r0, #0]
 8006334:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006336:	0000      	.short	0x0000
 8006338:	e000ed88 	.word	0xe000ed88

0800633c <prvTaskExitError>:
{
 800633c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006342:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <prvTaskExitError+0x3c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	d008      	beq.n	800635c <prvTaskExitError+0x20>
 800634a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	e7fe      	b.n	800635a <prvTaskExitError+0x1e>
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800636c:	9b01      	ldr	r3, [sp, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0fc      	beq.n	800636c <prvTaskExitError+0x30>
}
 8006372:	b002      	add	sp, #8
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000080 	.word	0x20000080

0800637c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800637c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006380:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006384:	4b07      	ldr	r3, [pc, #28]	@ (80063a4 <pxPortInitialiseStack+0x28>)
 8006386:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800638a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800638e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006392:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006396:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800639a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800639e:	3844      	subs	r0, #68	@ 0x44
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	0800633d 	.word	0x0800633d
	...

080063b0 <SVC_Handler>:
	__asm volatile (
 80063b0:	4b07      	ldr	r3, [pc, #28]	@ (80063d0 <pxCurrentTCBConst2>)
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	6808      	ldr	r0, [r1, #0]
 80063b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ba:	f380 8809 	msr	PSP, r0
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8811 	msr	BASEPRI, r0
 80063ca:	4770      	bx	lr
 80063cc:	f3af 8000 	nop.w

080063d0 <pxCurrentTCBConst2>:
 80063d0:	200122f0 	.word	0x200122f0

080063d4 <vPortEnterCritical>:
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80063e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006410 <vPortEnterCritical+0x3c>)
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80063ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80063ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80063ee:	d10e      	bne.n	800640e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80063f4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	b143      	cbz	r3, 800640e <vPortEnterCritical+0x3a>
 80063fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	e7fe      	b.n	800640c <vPortEnterCritical+0x38>
}
 800640e:	4770      	bx	lr
 8006410:	20000080 	.word	0x20000080

08006414 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006414:	4a08      	ldr	r2, [pc, #32]	@ (8006438 <vPortExitCritical+0x24>)
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	b943      	cbnz	r3, 800642c <vPortExitCritical+0x18>
 800641a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	e7fe      	b.n	800642a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800642c:	3b01      	subs	r3, #1
 800642e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006430:	b90b      	cbnz	r3, 8006436 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006432:	f383 8811 	msr	BASEPRI, r3
}
 8006436:	4770      	bx	lr
 8006438:	20000080 	.word	0x20000080
 800643c:	00000000 	.word	0x00000000

08006440 <PendSV_Handler>:
	__asm volatile
 8006440:	f3ef 8009 	mrs	r0, PSP
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	4b15      	ldr	r3, [pc, #84]	@ (80064a0 <pxCurrentTCBConst>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f01e 0f10 	tst.w	lr, #16
 8006450:	bf08      	it	eq
 8006452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	6010      	str	r0, [r2, #0]
 800645c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006464:	f380 8811 	msr	BASEPRI, r0
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f001 f946 	bl	8007700 <vTaskSwitchContext>
 8006474:	f04f 0000 	mov.w	r0, #0
 8006478:	f380 8811 	msr	BASEPRI, r0
 800647c:	bc09      	pop	{r0, r3}
 800647e:	6819      	ldr	r1, [r3, #0]
 8006480:	6808      	ldr	r0, [r1, #0]
 8006482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006486:	f01e 0f10 	tst.w	lr, #16
 800648a:	bf08      	it	eq
 800648c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006490:	f380 8809 	msr	PSP, r0
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	f3af 8000 	nop.w

080064a0 <pxCurrentTCBConst>:
 80064a0:	200122f0 	.word	0x200122f0

080064a4 <xPortSysTickHandler>:
{
 80064a4:	b508      	push	{r3, lr}
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80064b6:	f000 fff5 	bl	80074a4 <xTaskIncrementTick>
 80064ba:	b128      	cbz	r0, 80064c8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80064c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80064c8:	2300      	movs	r3, #0
 80064ca:	f383 8811 	msr	BASEPRI, r3
}
 80064ce:	bd08      	pop	{r3, pc}

080064d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80064d4:	2300      	movs	r3, #0
 80064d6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064d8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064da:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <vPortSetupTimerInterrupt+0x20>)
 80064dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064e6:	3b01      	subs	r3, #1
 80064e8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ea:	2307      	movs	r3, #7
 80064ec:	6113      	str	r3, [r2, #16]
}
 80064ee:	4770      	bx	lr
 80064f0:	20000074 	.word	0x20000074

080064f4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80064f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064fa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80064fe:	4a38      	ldr	r2, [pc, #224]	@ (80065e0 <xPortStartScheduler+0xec>)
 8006500:	4291      	cmp	r1, r2
 8006502:	d108      	bne.n	8006516 <xPortStartScheduler+0x22>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	e7fe      	b.n	8006514 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006516:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800651a:	4b32      	ldr	r3, [pc, #200]	@ (80065e4 <xPortStartScheduler+0xf0>)
 800651c:	429a      	cmp	r2, r3
 800651e:	d108      	bne.n	8006532 <xPortStartScheduler+0x3e>
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	e7fe      	b.n	8006530 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006532:	4b2d      	ldr	r3, [pc, #180]	@ (80065e8 <xPortStartScheduler+0xf4>)
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800653a:	22ff      	movs	r2, #255	@ 0xff
 800653c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800653e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006540:	4a2a      	ldr	r2, [pc, #168]	@ (80065ec <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006548:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800654c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006550:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006552:	4a27      	ldr	r2, [pc, #156]	@ (80065f0 <xPortStartScheduler+0xfc>)
 8006554:	2307      	movs	r3, #7
 8006556:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006558:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800655c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800655e:	0609      	lsls	r1, r1, #24
 8006560:	d40a      	bmi.n	8006578 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006562:	2b03      	cmp	r3, #3
 8006564:	d011      	beq.n	800658a <xPortStartScheduler+0x96>
 8006566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	e7fe      	b.n	8006576 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8006578:	3b01      	subs	r3, #1
 800657a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800657c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f88d 3003 	strb.w	r3, [sp, #3]
 8006588:	e7e6      	b.n	8006558 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800658a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800658e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006590:	9b01      	ldr	r3, [sp, #4]
 8006592:	4a15      	ldr	r2, [pc, #84]	@ (80065e8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006594:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006598:	b2db      	uxtb	r3, r3
 800659a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800659c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80065a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065a4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065a8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80065ac:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80065b0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80065b4:	f7ff ff8c 	bl	80064d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80065b8:	4b0e      	ldr	r3, [pc, #56]	@ (80065f4 <xPortStartScheduler+0x100>)
 80065ba:	2500      	movs	r5, #0
 80065bc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80065be:	f7ff feb3 	bl	8006328 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065c2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80065c6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80065ca:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80065ce:	f7ff fe97 	bl	8006300 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80065d2:	f001 f895 	bl	8007700 <vTaskSwitchContext>
	prvTaskExitError();
 80065d6:	f7ff feb1 	bl	800633c <prvTaskExitError>
}
 80065da:	4628      	mov	r0, r5
 80065dc:	b003      	add	sp, #12
 80065de:	bd30      	pop	{r4, r5, pc}
 80065e0:	410fc271 	.word	0x410fc271
 80065e4:	410fc270 	.word	0x410fc270
 80065e8:	e000e400 	.word	0xe000e400
 80065ec:	20011db4 	.word	0x20011db4
 80065f0:	20011db0 	.word	0x20011db0
 80065f4:	20000080 	.word	0x20000080

080065f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065fc:	2b0f      	cmp	r3, #15
 80065fe:	d90e      	bls.n	800661e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006600:	4a11      	ldr	r2, [pc, #68]	@ (8006648 <vPortValidateInterruptPriority+0x50>)
 8006602:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006604:	4a11      	ldr	r2, [pc, #68]	@ (800664c <vPortValidateInterruptPriority+0x54>)
 8006606:	7812      	ldrb	r2, [r2, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d908      	bls.n	800661e <vPortValidateInterruptPriority+0x26>
 800660c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	e7fe      	b.n	800661c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800661e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006622:	4a0b      	ldr	r2, [pc, #44]	@ (8006650 <vPortValidateInterruptPriority+0x58>)
 8006624:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800662e:	4293      	cmp	r3, r2
 8006630:	d908      	bls.n	8006644 <vPortValidateInterruptPriority+0x4c>
 8006632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	e7fe      	b.n	8006642 <vPortValidateInterruptPriority+0x4a>
	}
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	e000e3f0 	.word	0xe000e3f0
 800664c:	20011db4 	.word	0x20011db4
 8006650:	20011db0 	.word	0x20011db0

08006654 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006654:	b510      	push	{r4, lr}
 8006656:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006658:	f7ff febc 	bl	80063d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800665c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800665e:	f7ff fed9 	bl	8006414 <vPortExitCritical>

	return xReturn;
}
 8006662:	fab4 f084 	clz	r0, r4
 8006666:	0940      	lsrs	r0, r0, #5
 8006668:	bd10      	pop	{r4, pc}

0800666a <prvCopyDataToQueue>:
{
 800666a:	b570      	push	{r4, r5, r6, lr}
 800666c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800666e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006670:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8006672:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006674:	b942      	cbnz	r2, 8006688 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006676:	6806      	ldr	r6, [r0, #0]
 8006678:	b99e      	cbnz	r6, 80066a2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800667a:	6880      	ldr	r0, [r0, #8]
 800667c:	f001 f98e 	bl	800799c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006680:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006682:	3501      	adds	r5, #1
 8006684:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006686:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006688:	b96e      	cbnz	r6, 80066a6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800668a:	6840      	ldr	r0, [r0, #4]
 800668c:	f009 fde3 	bl	8010256 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006694:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006696:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006698:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800669a:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800669c:	bf24      	itt	cs
 800669e:	6823      	ldrcs	r3, [r4, #0]
 80066a0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80066a2:	2000      	movs	r0, #0
 80066a4:	e7ed      	b.n	8006682 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066a6:	68c0      	ldr	r0, [r0, #12]
 80066a8:	f009 fdd5 	bl	8010256 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80066ae:	68e3      	ldr	r3, [r4, #12]
 80066b0:	4251      	negs	r1, r2
 80066b2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066b4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066b6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066b8:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066ba:	bf3e      	ittt	cc
 80066bc:	68a3      	ldrcc	r3, [r4, #8]
 80066be:	185b      	addcc	r3, r3, r1
 80066c0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80066c2:	2e02      	cmp	r6, #2
 80066c4:	d1ed      	bne.n	80066a2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066c6:	b10d      	cbz	r5, 80066cc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80066c8:	3d01      	subs	r5, #1
 80066ca:	e7ea      	b.n	80066a2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80066cc:	4628      	mov	r0, r5
 80066ce:	e7d8      	b.n	8006682 <prvCopyDataToQueue+0x18>

080066d0 <prvCopyDataFromQueue>:
{
 80066d0:	4603      	mov	r3, r0
 80066d2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80066d6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066d8:	b16a      	cbz	r2, 80066f6 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066da:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066dc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066de:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066e0:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066e2:	bf28      	it	cs
 80066e4:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066e6:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066e8:	bf28      	it	cs
 80066ea:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066ec:	68d9      	ldr	r1, [r3, #12]
}
 80066ee:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066f2:	f009 bdb0 	b.w	8010256 <memcpy>
}
 80066f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <prvUnlockQueue>:
{
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006700:	f7ff fe68 	bl	80063d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006704:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006708:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800670c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800670e:	2d00      	cmp	r5, #0
 8006710:	dc14      	bgt.n	800673c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8006712:	23ff      	movs	r3, #255	@ 0xff
 8006714:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006718:	f7ff fe7c 	bl	8006414 <vPortExitCritical>
	taskENTER_CRITICAL();
 800671c:	f7ff fe5a 	bl	80063d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006720:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006724:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8006728:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800672a:	2d00      	cmp	r5, #0
 800672c:	dc12      	bgt.n	8006754 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800672e:	23ff      	movs	r3, #255	@ 0xff
 8006730:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8006734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006738:	f7ff be6c 	b.w	8006414 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800673c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0e7      	beq.n	8006712 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006742:	4630      	mov	r0, r6
 8006744:	f001 f84e 	bl	80077e4 <xTaskRemoveFromEventList>
 8006748:	b108      	cbz	r0, 800674e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800674a:	f001 f8d3 	bl	80078f4 <vTaskMissedYield>
			--cTxLock;
 800674e:	3d01      	subs	r5, #1
 8006750:	b26d      	sxtb	r5, r5
 8006752:	e7dc      	b.n	800670e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006754:	6923      	ldr	r3, [r4, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0e9      	beq.n	800672e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675a:	4630      	mov	r0, r6
 800675c:	f001 f842 	bl	80077e4 <xTaskRemoveFromEventList>
 8006760:	b108      	cbz	r0, 8006766 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006762:	f001 f8c7 	bl	80078f4 <vTaskMissedYield>
				--cRxLock;
 8006766:	3d01      	subs	r5, #1
 8006768:	b26d      	sxtb	r5, r5
 800676a:	e7de      	b.n	800672a <prvUnlockQueue+0x2e>

0800676c <xQueueGenericReset>:
{
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006770:	4604      	mov	r4, r0
 8006772:	b940      	cbnz	r0, 8006786 <xQueueGenericReset+0x1a>
 8006774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	e7fe      	b.n	8006784 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006786:	f7ff fe25 	bl	80063d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800678a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800678e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006790:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006792:	434b      	muls	r3, r1
 8006794:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006796:	1a5b      	subs	r3, r3, r1
 8006798:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800679a:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800679c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800679e:	2000      	movs	r0, #0
 80067a0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067a2:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067a4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80067ac:	b9a5      	cbnz	r5, 80067d8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	b173      	cbz	r3, 80067d0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b2:	f104 0010 	add.w	r0, r4, #16
 80067b6:	f001 f815 	bl	80077e4 <xTaskRemoveFromEventList>
 80067ba:	b148      	cbz	r0, 80067d0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80067bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80067d0:	f7ff fe20 	bl	8006414 <vPortExitCritical>
}
 80067d4:	2001      	movs	r0, #1
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067d8:	f104 0010 	add.w	r0, r4, #16
 80067dc:	f7ff fd50 	bl	8006280 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80067e4:	f7ff fd4c 	bl	8006280 <vListInitialise>
 80067e8:	e7f2      	b.n	80067d0 <xQueueGenericReset+0x64>

080067ea <xQueueGenericCreateStatic>:
	{
 80067ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ec:	460d      	mov	r5, r1
 80067ee:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067f0:	b940      	cbnz	r0, 8006804 <xQueueGenericCreateStatic+0x1a>
 80067f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	e7fe      	b.n	8006802 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8006804:	b943      	cbnz	r3, 8006818 <xQueueGenericCreateStatic+0x2e>
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	e7fe      	b.n	8006816 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006818:	b14a      	cbz	r2, 800682e <xQueueGenericCreateStatic+0x44>
 800681a:	b991      	cbnz	r1, 8006842 <xQueueGenericCreateStatic+0x58>
 800681c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	e7fe      	b.n	800682c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800682e:	b141      	cbz	r1, 8006842 <xQueueGenericCreateStatic+0x58>
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	e7fe      	b.n	8006840 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006842:	2350      	movs	r3, #80	@ 0x50
 8006844:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	2b50      	cmp	r3, #80	@ 0x50
 800684a:	d008      	beq.n	800685e <xQueueGenericCreateStatic+0x74>
 800684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	e7fe      	b.n	800685c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800685e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006860:	2d00      	cmp	r5, #0
 8006862:	bf08      	it	eq
 8006864:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8006866:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800686a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 800686e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006870:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006872:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006874:	f7ff ff7a 	bl	800676c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006878:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800687c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8006880:	4620      	mov	r0, r4
 8006882:	b003      	add	sp, #12
 8006884:	bd30      	pop	{r4, r5, pc}

08006886 <xQueueGenericCreate>:
	{
 8006886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006888:	460d      	mov	r5, r1
 800688a:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800688c:	4606      	mov	r6, r0
 800688e:	b940      	cbnz	r0, 80068a2 <xQueueGenericCreate+0x1c>
 8006890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	e7fe      	b.n	80068a0 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068a4:	3050      	adds	r0, #80	@ 0x50
 80068a6:	f7ff fc15 	bl	80060d4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80068aa:	4604      	mov	r4, r0
 80068ac:	b170      	cbz	r0, 80068cc <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80068b4:	b165      	cbz	r5, 80068d0 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068b6:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 80068ba:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80068be:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068c0:	2101      	movs	r1, #1
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff ff52 	bl	800676c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80068c8:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80068cc:	4620      	mov	r0, r4
 80068ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068d0:	4603      	mov	r3, r0
 80068d2:	e7f2      	b.n	80068ba <xQueueGenericCreate+0x34>

080068d4 <xQueueCreateCountingSemaphoreStatic>:
	{
 80068d4:	b513      	push	{r0, r1, r4, lr}
 80068d6:	4613      	mov	r3, r2
 80068d8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80068da:	b940      	cbnz	r0, 80068ee <xQueueCreateCountingSemaphoreStatic+0x1a>
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	e7fe      	b.n	80068ec <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 80068ee:	4288      	cmp	r0, r1
 80068f0:	d208      	bcs.n	8006904 <xQueueCreateCountingSemaphoreStatic+0x30>
 80068f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	e7fe      	b.n	8006902 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006904:	2202      	movs	r2, #2
 8006906:	9200      	str	r2, [sp, #0]
 8006908:	2200      	movs	r2, #0
 800690a:	4611      	mov	r1, r2
 800690c:	f7ff ff6d 	bl	80067ea <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8006910:	b100      	cbz	r0, 8006914 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006912:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006914:	b002      	add	sp, #8
 8006916:	bd10      	pop	{r4, pc}

08006918 <xQueueCreateCountingSemaphore>:
	{
 8006918:	b510      	push	{r4, lr}
 800691a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800691c:	b940      	cbnz	r0, 8006930 <xQueueCreateCountingSemaphore+0x18>
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	e7fe      	b.n	800692e <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006930:	4288      	cmp	r0, r1
 8006932:	d208      	bcs.n	8006946 <xQueueCreateCountingSemaphore+0x2e>
 8006934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	e7fe      	b.n	8006944 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006946:	2202      	movs	r2, #2
 8006948:	2100      	movs	r1, #0
 800694a:	f7ff ff9c 	bl	8006886 <xQueueGenericCreate>
		if( xHandle != NULL )
 800694e:	b100      	cbz	r0, 8006952 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006950:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006952:	bd10      	pop	{r4, pc}

08006954 <xQueueGenericSend>:
{
 8006954:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006958:	460f      	mov	r7, r1
 800695a:	9201      	str	r2, [sp, #4]
 800695c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800695e:	4604      	mov	r4, r0
 8006960:	b940      	cbnz	r0, 8006974 <xQueueGenericSend+0x20>
 8006962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	e7fe      	b.n	8006972 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006974:	b951      	cbnz	r1, 800698c <xQueueGenericSend+0x38>
 8006976:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006978:	b143      	cbz	r3, 800698c <xQueueGenericSend+0x38>
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	e7fe      	b.n	800698a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800698c:	2e02      	cmp	r6, #2
 800698e:	d10b      	bne.n	80069a8 <xQueueGenericSend+0x54>
 8006990:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d008      	beq.n	80069a8 <xQueueGenericSend+0x54>
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	e7fe      	b.n	80069a6 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069a8:	f000 ffaa 	bl	8007900 <xTaskGetSchedulerState>
 80069ac:	4605      	mov	r5, r0
 80069ae:	b330      	cbz	r0, 80069fe <xQueueGenericSend+0xaa>
 80069b0:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80069b2:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80069b6:	f7ff fd0d 	bl	80063d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ba:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80069bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80069be:	429a      	cmp	r2, r3
 80069c0:	d301      	bcc.n	80069c6 <xQueueGenericSend+0x72>
 80069c2:	2e02      	cmp	r6, #2
 80069c4:	d127      	bne.n	8006a16 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069c6:	4632      	mov	r2, r6
 80069c8:	4639      	mov	r1, r7
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7ff fe4d 	bl	800666a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80069d2:	b11b      	cbz	r3, 80069dc <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80069d8:	f000 ff04 	bl	80077e4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80069dc:	b148      	cbz	r0, 80069f2 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80069de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80069e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80069f2:	f7ff fd0f 	bl	8006414 <vPortExitCritical>
				return pdPASS;
 80069f6:	2001      	movs	r0, #1
}
 80069f8:	b004      	add	sp, #16
 80069fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0d6      	beq.n	80069b2 <xQueueGenericSend+0x5e>
 8006a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	e7fe      	b.n	8006a14 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	b91b      	cbnz	r3, 8006a22 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8006a1a:	f7ff fcfb 	bl	8006414 <vPortExitCritical>
					return errQUEUE_FULL;
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e7ea      	b.n	80069f8 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8006a22:	b915      	cbnz	r5, 8006a2a <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a24:	a802      	add	r0, sp, #8
 8006a26:	f000 ff1d 	bl	8007864 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006a2a:	f7ff fcf3 	bl	8006414 <vPortExitCritical>
		vTaskSuspendAll();
 8006a2e:	f000 fd2b 	bl	8007488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a32:	f7ff fccf 	bl	80063d4 <vPortEnterCritical>
 8006a36:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006a3a:	2bff      	cmp	r3, #255	@ 0xff
 8006a3c:	bf08      	it	eq
 8006a3e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006a42:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006a46:	2bff      	cmp	r3, #255	@ 0xff
 8006a48:	bf08      	it	eq
 8006a4a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006a4e:	f7ff fce1 	bl	8006414 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a52:	a901      	add	r1, sp, #4
 8006a54:	a802      	add	r0, sp, #8
 8006a56:	f000 ff11 	bl	800787c <xTaskCheckForTimeOut>
 8006a5a:	bb38      	cbnz	r0, 8006aac <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a5c:	f7ff fcba 	bl	80063d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a60:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006a62:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d10e      	bne.n	8006a86 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006a68:	f7ff fcd4 	bl	8006414 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a6c:	9901      	ldr	r1, [sp, #4]
 8006a6e:	f104 0010 	add.w	r0, r4, #16
 8006a72:	f000 fe7f 	bl	8007774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a76:	4620      	mov	r0, r4
 8006a78:	f7ff fe40 	bl	80066fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a7c:	f000 fda8 	bl	80075d0 <xTaskResumeAll>
 8006a80:	b148      	cbz	r0, 8006a96 <xQueueGenericSend+0x142>
 8006a82:	2501      	movs	r5, #1
 8006a84:	e797      	b.n	80069b6 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8006a86:	f7ff fcc5 	bl	8006414 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff fe36 	bl	80066fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a90:	f000 fd9e 	bl	80075d0 <xTaskResumeAll>
 8006a94:	e7f5      	b.n	8006a82 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8006a96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	e7ea      	b.n	8006a82 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8006aac:	4620      	mov	r0, r4
 8006aae:	f7ff fe25 	bl	80066fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ab2:	f000 fd8d 	bl	80075d0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006ab6:	e7b2      	b.n	8006a1e <xQueueGenericSend+0xca>

08006ab8 <xQueueGenericSendFromISR>:
{
 8006ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006abc:	4689      	mov	r9, r1
 8006abe:	4617      	mov	r7, r2
 8006ac0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	b940      	cbnz	r0, 8006ad8 <xQueueGenericSendFromISR+0x20>
 8006ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	e7fe      	b.n	8006ad6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad8:	b951      	cbnz	r1, 8006af0 <xQueueGenericSendFromISR+0x38>
 8006ada:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006adc:	b143      	cbz	r3, 8006af0 <xQueueGenericSendFromISR+0x38>
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	e7fe      	b.n	8006aee <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006af0:	2e02      	cmp	r6, #2
 8006af2:	d10b      	bne.n	8006b0c <xQueueGenericSendFromISR+0x54>
 8006af4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d008      	beq.n	8006b0c <xQueueGenericSendFromISR+0x54>
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	e7fe      	b.n	8006b0a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b0c:	f7ff fd74 	bl	80065f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006b10:	f3ef 8811 	mrs	r8, BASEPRI
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b24:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006b26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d301      	bcc.n	8006b30 <xQueueGenericSendFromISR+0x78>
 8006b2c:	2e02      	cmp	r6, #2
 8006b2e:	d11e      	bne.n	8006b6e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b30:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b34:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b36:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff fd94 	bl	800666a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006b42:	1c6b      	adds	r3, r5, #1
 8006b44:	d10e      	bne.n	8006b64 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006b48:	b13b      	cbz	r3, 8006b5a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b4a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006b4e:	f000 fe49 	bl	80077e4 <xTaskRemoveFromEventList>
 8006b52:	b110      	cbz	r0, 8006b5a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8006b54:	b10f      	cbz	r7, 8006b5a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8006b5a:	2001      	movs	r0, #1
	__asm volatile
 8006b5c:	f388 8811 	msr	BASEPRI, r8
}
 8006b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b64:	3501      	adds	r5, #1
 8006b66:	b26d      	sxtb	r5, r5
 8006b68:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8006b6c:	e7f5      	b.n	8006b5a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8006b6e:	2000      	movs	r0, #0
 8006b70:	e7f4      	b.n	8006b5c <xQueueGenericSendFromISR+0xa4>

08006b72 <xQueueGiveFromISR>:
{
 8006b72:	b570      	push	{r4, r5, r6, lr}
 8006b74:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006b76:	4604      	mov	r4, r0
 8006b78:	b940      	cbnz	r0, 8006b8c <xQueueGiveFromISR+0x1a>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	e7fe      	b.n	8006b8a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b8c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006b8e:	b143      	cbz	r3, 8006ba2 <xQueueGiveFromISR+0x30>
 8006b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ba2:	6803      	ldr	r3, [r0, #0]
 8006ba4:	b953      	cbnz	r3, 8006bbc <xQueueGiveFromISR+0x4a>
 8006ba6:	6883      	ldr	r3, [r0, #8]
 8006ba8:	b143      	cbz	r3, 8006bbc <xQueueGiveFromISR+0x4a>
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	e7fe      	b.n	8006bba <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bbc:	f7ff fd1c 	bl	80065f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006bc0:	f3ef 8611 	mrs	r6, BASEPRI
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006bd6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d919      	bls.n	8006c10 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006be0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8006be2:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8006be4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006be6:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8006be8:	d10d      	bne.n	8006c06 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006bec:	b13b      	cbz	r3, 8006bfe <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006bf2:	f000 fdf7 	bl	80077e4 <xTaskRemoveFromEventList>
 8006bf6:	b110      	cbz	r0, 8006bfe <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8006bf8:	b10d      	cbz	r5, 8006bfe <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8006bfe:	2001      	movs	r0, #1
	__asm volatile
 8006c00:	f386 8811 	msr	BASEPRI, r6
}
 8006c04:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c06:	3301      	adds	r3, #1
 8006c08:	b25b      	sxtb	r3, r3
 8006c0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006c0e:	e7f6      	b.n	8006bfe <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8006c10:	2000      	movs	r0, #0
 8006c12:	e7f5      	b.n	8006c00 <xQueueGiveFromISR+0x8e>

08006c14 <xQueueReceive>:
{
 8006c14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006c18:	460e      	mov	r6, r1
 8006c1a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	b940      	cbnz	r0, 8006c32 <xQueueReceive+0x1e>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	e7fe      	b.n	8006c30 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c32:	b951      	cbnz	r1, 8006c4a <xQueueReceive+0x36>
 8006c34:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006c36:	b143      	cbz	r3, 8006c4a <xQueueReceive+0x36>
 8006c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	e7fe      	b.n	8006c48 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c4a:	f000 fe59 	bl	8007900 <xTaskGetSchedulerState>
 8006c4e:	4605      	mov	r5, r0
 8006c50:	b318      	cbz	r0, 8006c9a <xQueueReceive+0x86>
 8006c52:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006c54:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006c58:	f7ff fbbc 	bl	80063d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c5c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c5e:	b347      	cbz	r7, 8006cb2 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c60:	4631      	mov	r1, r6
 8006c62:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c64:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c66:	f7ff fd33 	bl	80066d0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c6a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	b173      	cbz	r3, 8006c8e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c70:	f104 0010 	add.w	r0, r4, #16
 8006c74:	f000 fdb6 	bl	80077e4 <xTaskRemoveFromEventList>
 8006c78:	b148      	cbz	r0, 8006c8e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8006c7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006c8e:	f7ff fbc1 	bl	8006414 <vPortExitCritical>
				return pdPASS;
 8006c92:	2001      	movs	r0, #1
}
 8006c94:	b004      	add	sp, #16
 8006c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c9a:	9b01      	ldr	r3, [sp, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0d9      	beq.n	8006c54 <xQueueReceive+0x40>
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	e7fe      	b.n	8006cb0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cb2:	9b01      	ldr	r3, [sp, #4]
 8006cb4:	b91b      	cbnz	r3, 8006cbe <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8006cb6:	f7ff fbad 	bl	8006414 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e7ea      	b.n	8006c94 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8006cbe:	b915      	cbnz	r5, 8006cc6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cc0:	a802      	add	r0, sp, #8
 8006cc2:	f000 fdcf 	bl	8007864 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006cc6:	f7ff fba5 	bl	8006414 <vPortExitCritical>
		vTaskSuspendAll();
 8006cca:	f000 fbdd 	bl	8007488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cce:	f7ff fb81 	bl	80063d4 <vPortEnterCritical>
 8006cd2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006cd6:	2bff      	cmp	r3, #255	@ 0xff
 8006cd8:	bf08      	it	eq
 8006cda:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006cde:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006ce2:	2bff      	cmp	r3, #255	@ 0xff
 8006ce4:	bf08      	it	eq
 8006ce6:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006cea:	f7ff fb93 	bl	8006414 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cee:	a901      	add	r1, sp, #4
 8006cf0:	a802      	add	r0, sp, #8
 8006cf2:	f000 fdc3 	bl	800787c <xTaskCheckForTimeOut>
 8006cf6:	bb00      	cbnz	r0, 8006d3a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff fcab 	bl	8006654 <prvIsQueueEmpty>
 8006cfe:	b1b0      	cbz	r0, 8006d2e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d00:	9901      	ldr	r1, [sp, #4]
 8006d02:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006d06:	f000 fd35 	bl	8007774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff fcf6 	bl	80066fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d10:	f000 fc5e 	bl	80075d0 <xTaskResumeAll>
 8006d14:	b948      	cbnz	r0, 8006d2a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8006d16:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	2501      	movs	r5, #1
 8006d2c:	e794      	b.n	8006c58 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff fce4 	bl	80066fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d34:	f000 fc4c 	bl	80075d0 <xTaskResumeAll>
 8006d38:	e7f7      	b.n	8006d2a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f7ff fcde 	bl	80066fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d40:	f000 fc46 	bl	80075d0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d44:	4620      	mov	r0, r4
 8006d46:	f7ff fc85 	bl	8006654 <prvIsQueueEmpty>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d0ed      	beq.n	8006d2a <xQueueReceive+0x116>
 8006d4e:	e7b4      	b.n	8006cba <xQueueReceive+0xa6>

08006d50 <xQueueSemaphoreTake>:
{
 8006d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d52:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8006d54:	4604      	mov	r4, r0
{
 8006d56:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006d58:	b940      	cbnz	r0, 8006d6c <xQueueSemaphoreTake+0x1c>
 8006d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	e7fe      	b.n	8006d6a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d6c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8006d6e:	b145      	cbz	r5, 8006d82 <xQueueSemaphoreTake+0x32>
 8006d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	e7fe      	b.n	8006d80 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d82:	f000 fdbd 	bl	8007900 <xTaskGetSchedulerState>
 8006d86:	4606      	mov	r6, r0
 8006d88:	b320      	cbz	r0, 8006dd4 <xQueueSemaphoreTake+0x84>
 8006d8a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006d8c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8006d8e:	f7ff fb21 	bl	80063d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d94:	b353      	cbz	r3, 8006dec <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d96:	3b01      	subs	r3, #1
 8006d98:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	b913      	cbnz	r3, 8006da4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006d9e:	f000 fe8d 	bl	8007abc <pvTaskIncrementMutexHeldCount>
 8006da2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	b173      	cbz	r3, 8006dc6 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da8:	f104 0010 	add.w	r0, r4, #16
 8006dac:	f000 fd1a 	bl	80077e4 <xTaskRemoveFromEventList>
 8006db0:	b148      	cbz	r0, 8006dc6 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8006db2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006dc6:	f7ff fb25 	bl	8006414 <vPortExitCritical>
				return pdPASS;
 8006dca:	2001      	movs	r0, #1
}
 8006dcc:	b005      	add	sp, #20
 8006dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd0:	4635      	mov	r5, r6
 8006dd2:	e7db      	b.n	8006d8c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dd4:	9b01      	ldr	r3, [sp, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0fa      	beq.n	8006dd0 <xQueueSemaphoreTake+0x80>
 8006dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	e7fe      	b.n	8006dea <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	b953      	cbnz	r3, 8006e06 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	d066      	beq.n	8006ec2 <xQueueSemaphoreTake+0x172>
 8006df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	e7fe      	b.n	8006e04 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8006e06:	b916      	cbnz	r6, 8006e0e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e08:	a802      	add	r0, sp, #8
 8006e0a:	f000 fd2b 	bl	8007864 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006e0e:	f7ff fb01 	bl	8006414 <vPortExitCritical>
		vTaskSuspendAll();
 8006e12:	f000 fb39 	bl	8007488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e16:	f7ff fadd 	bl	80063d4 <vPortEnterCritical>
 8006e1a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006e1e:	2bff      	cmp	r3, #255	@ 0xff
 8006e20:	bf08      	it	eq
 8006e22:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8006e26:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006e2a:	2bff      	cmp	r3, #255	@ 0xff
 8006e2c:	bf08      	it	eq
 8006e2e:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8006e32:	f7ff faef 	bl	8006414 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e36:	a901      	add	r1, sp, #4
 8006e38:	a802      	add	r0, sp, #8
 8006e3a:	f000 fd1f 	bl	800787c <xTaskCheckForTimeOut>
 8006e3e:	bb50      	cbnz	r0, 8006e96 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7ff fc07 	bl	8006654 <prvIsQueueEmpty>
 8006e46:	b300      	cbz	r0, 8006e8a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	b93b      	cbnz	r3, 8006e5c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8006e4c:	f7ff fac2 	bl	80063d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e50:	68a0      	ldr	r0, [r4, #8]
 8006e52:	f000 fd65 	bl	8007920 <xTaskPriorityInherit>
 8006e56:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8006e58:	f7ff fadc 	bl	8006414 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e5c:	9901      	ldr	r1, [sp, #4]
 8006e5e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006e62:	f000 fc87 	bl	8007774 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7ff fc48 	bl	80066fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e6c:	f000 fbb0 	bl	80075d0 <xTaskResumeAll>
 8006e70:	b948      	cbnz	r0, 8006e86 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8006e72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	2601      	movs	r6, #1
 8006e88:	e781      	b.n	8006d8e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f7ff fc36 	bl	80066fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e90:	f000 fb9e 	bl	80075d0 <xTaskResumeAll>
 8006e94:	e7f7      	b.n	8006e86 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7ff fc30 	bl	80066fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e9c:	f000 fb98 	bl	80075d0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7ff fbd7 	bl	8006654 <prvIsQueueEmpty>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d0ed      	beq.n	8006e86 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8006eaa:	b165      	cbz	r5, 8006ec6 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8006eac:	f7ff fa92 	bl	80063d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006eb0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006eb2:	b119      	cbz	r1, 8006ebc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006eb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006eb6:	6819      	ldr	r1, [r3, #0]
 8006eb8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ebc:	68a0      	ldr	r0, [r4, #8]
 8006ebe:	f000 fdaf 	bl	8007a20 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006ec2:	f7ff faa7 	bl	8006414 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e780      	b.n	8006dcc <xQueueSemaphoreTake+0x7c>

08006eca <xQueueReceiveFromISR>:
{
 8006eca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ece:	4689      	mov	r9, r1
 8006ed0:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	b940      	cbnz	r0, 8006ee8 <xQueueReceiveFromISR+0x1e>
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	e7fe      	b.n	8006ee6 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ee8:	b951      	cbnz	r1, 8006f00 <xQueueReceiveFromISR+0x36>
 8006eea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006eec:	b143      	cbz	r3, 8006f00 <xQueueReceiveFromISR+0x36>
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	e7fe      	b.n	8006efe <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f00:	f7ff fb7a 	bl	80065f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006f04:	f3ef 8711 	mrs	r7, BASEPRI
 8006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f18:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f1a:	b30d      	cbz	r5, 8006f60 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f1c:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f20:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f22:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7ff fbd3 	bl	80066d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f2a:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8006f2c:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f2e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8006f30:	d111      	bne.n	8006f56 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	b153      	cbz	r3, 8006f4c <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f36:	f104 0010 	add.w	r0, r4, #16
 8006f3a:	f000 fc53 	bl	80077e4 <xTaskRemoveFromEventList>
 8006f3e:	b128      	cbz	r0, 8006f4c <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8006f40:	f1b8 0f00 	cmp.w	r8, #0
 8006f44:	d002      	beq.n	8006f4c <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8006f4c:	2001      	movs	r0, #1
	__asm volatile
 8006f4e:	f387 8811 	msr	BASEPRI, r7
}
 8006f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f56:	3601      	adds	r6, #1
 8006f58:	b276      	sxtb	r6, r6
 8006f5a:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8006f5e:	e7f5      	b.n	8006f4c <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8006f60:	4628      	mov	r0, r5
 8006f62:	e7f4      	b.n	8006f4e <xQueueReceiveFromISR+0x84>

08006f64 <uxQueueMessagesWaiting>:
{
 8006f64:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8006f66:	4604      	mov	r4, r0
 8006f68:	b940      	cbnz	r0, 8006f7c <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	e7fe      	b.n	8006f7a <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8006f7c:	f7ff fa2a 	bl	80063d4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006f80:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8006f82:	f7ff fa47 	bl	8006414 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006f86:	4620      	mov	r0, r4
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8006f8a:	b940      	cbnz	r0, 8006f9e <uxQueueMessagesWaitingFromISR+0x14>
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	e7fe      	b.n	8006f9c <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006f9e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006fa0:	4770      	bx	lr
	...

08006fa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fa4:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fa6:	4a07      	ldr	r2, [pc, #28]	@ (8006fc4 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fa8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006faa:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8006fae:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8006fb2:	b91d      	cbnz	r5, 8006fbc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fb8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fba:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	d1f3      	bne.n	8006faa <vQueueAddToRegistry+0x6>
 8006fc2:	e7fa      	b.n	8006fba <vQueueAddToRegistry+0x16>
 8006fc4:	20011db8 	.word	0x20011db8

08006fc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006fc8:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fca:	4a09      	ldr	r2, [pc, #36]	@ (8006ff0 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fcc:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fce:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8006fd2:	4281      	cmp	r1, r0
 8006fd4:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8006fd8:	d106      	bne.n	8006fe8 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006fda:	4a06      	ldr	r2, [pc, #24]	@ (8006ff4 <vQueueUnregisterQueue+0x2c>)
 8006fdc:	2100      	movs	r1, #0
 8006fde:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006fe2:	4422      	add	r2, r4
 8006fe4:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006fe6:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fe8:	3301      	adds	r3, #1
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d1ef      	bne.n	8006fce <vQueueUnregisterQueue+0x6>
 8006fee:	e7fa      	b.n	8006fe6 <vQueueUnregisterQueue+0x1e>
 8006ff0:	20011dbc 	.word	0x20011dbc
 8006ff4:	20011db8 	.word	0x20011db8

08006ff8 <vQueueDelete>:
{
 8006ff8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8006ffa:	b940      	cbnz	r0, 800700e <vQueueDelete+0x16>
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	e7fe      	b.n	800700c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800700e:	f7ff ffdb 	bl	8006fc8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007012:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007016:	b91b      	cbnz	r3, 8007020 <vQueueDelete+0x28>
}
 8007018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800701c:	f7ff b8f2 	b.w	8006204 <vPortFree>
}
 8007020:	bd10      	pop	{r4, pc}

08007022 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007022:	b570      	push	{r4, r5, r6, lr}
 8007024:	4604      	mov	r4, r0
 8007026:	460d      	mov	r5, r1
 8007028:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800702a:	f7ff f9d3 	bl	80063d4 <vPortEnterCritical>
 800702e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007032:	2bff      	cmp	r3, #255	@ 0xff
 8007034:	bf04      	itt	eq
 8007036:	2300      	moveq	r3, #0
 8007038:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 800703c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007040:	2bff      	cmp	r3, #255	@ 0xff
 8007042:	bf04      	itt	eq
 8007044:	2300      	moveq	r3, #0
 8007046:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 800704a:	f7ff f9e3 	bl	8006414 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800704e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007050:	b92b      	cbnz	r3, 800705e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007052:	4632      	mov	r2, r6
 8007054:	4629      	mov	r1, r5
 8007056:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800705a:	f000 fba5 	bl	80077a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800705e:	4620      	mov	r0, r4
	}
 8007060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007064:	f7ff bb4a 	b.w	80066fc <prvUnlockQueue>

08007068 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800706e:	f7ff f9b1 	bl	80063d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007072:	4b30      	ldr	r3, [pc, #192]	@ (8007134 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8007074:	4e30      	ldr	r6, [pc, #192]	@ (8007138 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	4f30      	ldr	r7, [pc, #192]	@ (800713c <prvAddNewTaskToReadyList+0xd4>)
 800707a:	3201      	adds	r2, #1
 800707c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800707e:	6835      	ldr	r5, [r6, #0]
 8007080:	2d00      	cmp	r5, #0
 8007082:	d14b      	bne.n	800711c <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007084:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d11f      	bne.n	80070cc <prvAddNewTaskToReadyList+0x64>
 800708c:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800708e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007090:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007092:	f7ff f8f5 	bl	8006280 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007096:	2d38      	cmp	r5, #56	@ 0x38
 8007098:	f108 0814 	add.w	r8, r8, #20
 800709c:	d1f7      	bne.n	800708e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800709e:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8007164 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 80070a2:	4d27      	ldr	r5, [pc, #156]	@ (8007140 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80070a4:	4640      	mov	r0, r8
 80070a6:	f7ff f8eb 	bl	8006280 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070aa:	4628      	mov	r0, r5
 80070ac:	f7ff f8e8 	bl	8006280 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070b0:	4824      	ldr	r0, [pc, #144]	@ (8007144 <prvAddNewTaskToReadyList+0xdc>)
 80070b2:	f7ff f8e5 	bl	8006280 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070b6:	4824      	ldr	r0, [pc, #144]	@ (8007148 <prvAddNewTaskToReadyList+0xe0>)
 80070b8:	f7ff f8e2 	bl	8006280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070bc:	4823      	ldr	r0, [pc, #140]	@ (800714c <prvAddNewTaskToReadyList+0xe4>)
 80070be:	f7ff f8df 	bl	8006280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070c2:	4b23      	ldr	r3, [pc, #140]	@ (8007150 <prvAddNewTaskToReadyList+0xe8>)
 80070c4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070c8:	4b22      	ldr	r3, [pc, #136]	@ (8007154 <prvAddNewTaskToReadyList+0xec>)
 80070ca:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80070cc:	4a22      	ldr	r2, [pc, #136]	@ (8007158 <prvAddNewTaskToReadyList+0xf0>)
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	3301      	adds	r3, #1
 80070d2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80070d4:	4a21      	ldr	r2, [pc, #132]	@ (800715c <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80070d6:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80070d8:	6811      	ldr	r1, [r2, #0]
 80070da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80070dc:	2014      	movs	r0, #20
 80070de:	428b      	cmp	r3, r1
 80070e0:	fb00 7003 	mla	r0, r0, r3, r7
 80070e4:	f104 0104 	add.w	r1, r4, #4
 80070e8:	bf88      	it	hi
 80070ea:	6013      	strhi	r3, [r2, #0]
 80070ec:	f7ff f8d6 	bl	800629c <vListInsertEnd>
	taskEXIT_CRITICAL();
 80070f0:	f7ff f990 	bl	8006414 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80070f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007160 <prvAddNewTaskToReadyList+0xf8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	b173      	cbz	r3, 8007118 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070fa:	6833      	ldr	r3, [r6, #0]
 80070fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007100:	429a      	cmp	r2, r3
 8007102:	d209      	bcs.n	8007118 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8007104:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800710c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	f3bf 8f6f 	isb	sy
}
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800711c:	4b10      	ldr	r3, [pc, #64]	@ (8007160 <prvAddNewTaskToReadyList+0xf8>)
 800711e:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007120:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007122:	2a00      	cmp	r2, #0
 8007124:	d1d2      	bne.n	80070cc <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007126:	6832      	ldr	r2, [r6, #0]
 8007128:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800712a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800712c:	bf98      	it	ls
 800712e:	6034      	strls	r4, [r6, #0]
 8007130:	e7cc      	b.n	80070cc <prvAddNewTaskToReadyList+0x64>
 8007132:	bf00      	nop
 8007134:	20011e1c 	.word	0x20011e1c
 8007138:	200122f0 	.word	0x200122f0
 800713c:	20011e90 	.word	0x20011e90
 8007140:	20011e68 	.word	0x20011e68
 8007144:	20011e4c 	.word	0x20011e4c
 8007148:	20011e38 	.word	0x20011e38
 800714c:	20011e20 	.word	0x20011e20
 8007150:	20011e64 	.word	0x20011e64
 8007154:	20011e60 	.word	0x20011e60
 8007158:	20011e00 	.word	0x20011e00
 800715c:	20011e14 	.word	0x20011e14
 8007160:	20011e10 	.word	0x20011e10
 8007164:	20011e7c 	.word	0x20011e7c

08007168 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800716a:	4b15      	ldr	r3, [pc, #84]	@ (80071c0 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800716c:	4d15      	ldr	r5, [pc, #84]	@ (80071c4 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800716e:	681c      	ldr	r4, [r3, #0]
{
 8007170:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007172:	6828      	ldr	r0, [r5, #0]
 8007174:	3004      	adds	r0, #4
{
 8007176:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007178:	f7ff f8b2 	bl	80062e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800717c:	1c73      	adds	r3, r6, #1
 800717e:	d107      	bne.n	8007190 <prvAddCurrentTaskToDelayedList+0x28>
 8007180:	b137      	cbz	r7, 8007190 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007182:	6829      	ldr	r1, [r5, #0]
 8007184:	4810      	ldr	r0, [pc, #64]	@ (80071c8 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007186:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800718a:	3104      	adds	r1, #4
 800718c:	f7ff b886 	b.w	800629c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	19a4      	adds	r4, r4, r6
 8007194:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007196:	d307      	bcc.n	80071a8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007198:	4b0c      	ldr	r3, [pc, #48]	@ (80071cc <prvAddCurrentTaskToDelayedList+0x64>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	6829      	ldr	r1, [r5, #0]
}
 800719e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071a2:	3104      	adds	r1, #4
 80071a4:	f7ff b885 	b.w	80062b2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071a8:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	6829      	ldr	r1, [r5, #0]
 80071ae:	3104      	adds	r1, #4
 80071b0:	f7ff f87f 	bl	80062b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071b4:	4b07      	ldr	r3, [pc, #28]	@ (80071d4 <prvAddCurrentTaskToDelayedList+0x6c>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80071ba:	bf88      	it	hi
 80071bc:	601c      	strhi	r4, [r3, #0]
}
 80071be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c0:	20011e18 	.word	0x20011e18
 80071c4:	200122f0 	.word	0x200122f0
 80071c8:	20011e20 	.word	0x20011e20
 80071cc:	20011e60 	.word	0x20011e60
 80071d0:	20011e64 	.word	0x20011e64
 80071d4:	20011dfc 	.word	0x20011dfc

080071d8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d8:	4a06      	ldr	r2, [pc, #24]	@ (80071f4 <prvResetNextTaskUnblockTime+0x1c>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	6819      	ldr	r1, [r3, #0]
 80071de:	4b06      	ldr	r3, [pc, #24]	@ (80071f8 <prvResetNextTaskUnblockTime+0x20>)
 80071e0:	b919      	cbnz	r1, 80071ea <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071e6:	601a      	str	r2, [r3, #0]
}
 80071e8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071ee:	68d2      	ldr	r2, [r2, #12]
 80071f0:	6852      	ldr	r2, [r2, #4]
 80071f2:	e7f8      	b.n	80071e6 <prvResetNextTaskUnblockTime+0xe>
 80071f4:	20011e64 	.word	0x20011e64
 80071f8:	20011dfc 	.word	0x20011dfc

080071fc <prvDeleteTCB>:
	{
 80071fc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071fe:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8007202:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007204:	b93b      	cbnz	r3, 8007216 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007206:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007208:	f7fe fffc 	bl	8006204 <vPortFree>
				vPortFree( pxTCB );
 800720c:	4620      	mov	r0, r4
	}
 800720e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007212:	f7fe bff7 	b.w	8006204 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007216:	2b01      	cmp	r3, #1
 8007218:	d0f9      	beq.n	800720e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800721a:	2b02      	cmp	r3, #2
 800721c:	d008      	beq.n	8007230 <prvDeleteTCB+0x34>
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	e7fe      	b.n	800722e <prvDeleteTCB+0x32>
	}
 8007230:	bd10      	pop	{r4, pc}
	...

08007234 <prvIdleTask>:
{
 8007234:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007236:	4c13      	ldr	r4, [pc, #76]	@ (8007284 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007238:	4f13      	ldr	r7, [pc, #76]	@ (8007288 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800723a:	4d14      	ldr	r5, [pc, #80]	@ (800728c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	b973      	cbnz	r3, 800725e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007240:	4b13      	ldr	r3, [pc, #76]	@ (8007290 <prvIdleTask+0x5c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d9f8      	bls.n	800723a <prvIdleTask+0x6>
				taskYIELD();
 8007248:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800724c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007250:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	e7ed      	b.n	800723a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800725e:	f7ff f8b9 	bl	80063d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007266:	1d30      	adds	r0, r6, #4
 8007268:	f7ff f83a 	bl	80062e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	3b01      	subs	r3, #1
 8007270:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	3b01      	subs	r3, #1
 8007276:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007278:	f7ff f8cc 	bl	8006414 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff ffbd 	bl	80071fc <prvDeleteTCB>
 8007282:	e7db      	b.n	800723c <prvIdleTask+0x8>
 8007284:	20011e34 	.word	0x20011e34
 8007288:	20011e38 	.word	0x20011e38
 800728c:	20011e1c 	.word	0x20011e1c
 8007290:	20011e90 	.word	0x20011e90

08007294 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800729c:	0096      	lsls	r6, r2, #2
 800729e:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80072a0:	4607      	mov	r7, r0
 80072a2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072a4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80072a6:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80072a8:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072aa:	f008 ff04 	bl	80100b6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80072b0:	3e04      	subs	r6, #4
 80072b2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072b4:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80072b8:	b3b5      	cbz	r5, 8007328 <prvInitialiseNewTask.constprop.0+0x94>
 80072ba:	1e6b      	subs	r3, r5, #1
 80072bc:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80072c0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072c2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80072c6:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80072ca:	b109      	cbz	r1, 80072d0 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072cc:	42ab      	cmp	r3, r5
 80072ce:	d1f8      	bne.n	80072c2 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072d0:	2300      	movs	r3, #0
 80072d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072d6:	9d08      	ldr	r5, [sp, #32]
 80072d8:	2d37      	cmp	r5, #55	@ 0x37
 80072da:	bf28      	it	cs
 80072dc:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80072de:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80072e2:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80072e4:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072e6:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80072e8:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072ec:	f7fe ffd3 	bl	8006296 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f0:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072f4:	f104 0018 	add.w	r0, r4, #24
 80072f8:	f7fe ffcd 	bl	8006296 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80072fc:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007300:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007302:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007304:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8007306:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800730a:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800730e:	4642      	mov	r2, r8
 8007310:	4639      	mov	r1, r7
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff f832 	bl	800637c <pxPortInitialiseStack>
 8007318:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	d001      	beq.n	8007324 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007320:	f8c9 4000 	str.w	r4, [r9]
}
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007328:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800732c:	e7d3      	b.n	80072d6 <prvInitialiseNewTask.constprop.0+0x42>

0800732e <xTaskCreateStatic>:
	{
 800732e:	b570      	push	{r4, r5, r6, lr}
 8007330:	b086      	sub	sp, #24
 8007332:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007336:	b945      	cbnz	r5, 800734a <xTaskCreateStatic+0x1c>
 8007338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	e7fe      	b.n	8007348 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800734a:	b944      	cbnz	r4, 800735e <xTaskCreateStatic+0x30>
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	e7fe      	b.n	800735c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800735e:	2660      	movs	r6, #96	@ 0x60
 8007360:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007362:	9e05      	ldr	r6, [sp, #20]
 8007364:	2e60      	cmp	r6, #96	@ 0x60
 8007366:	d008      	beq.n	800737a <xTaskCreateStatic+0x4c>
 8007368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	e7fe      	b.n	8007378 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800737a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800737c:	2502      	movs	r5, #2
 800737e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007382:	ad04      	add	r5, sp, #16
 8007384:	9501      	str	r5, [sp, #4]
 8007386:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007388:	9402      	str	r4, [sp, #8]
 800738a:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800738c:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800738e:	f7ff ff81 	bl	8007294 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007392:	4620      	mov	r0, r4
 8007394:	f7ff fe68 	bl	8007068 <prvAddNewTaskToReadyList>
	}
 8007398:	9804      	ldr	r0, [sp, #16]
 800739a:	b006      	add	sp, #24
 800739c:	bd70      	pop	{r4, r5, r6, pc}

0800739e <xTaskCreate>:
	{
 800739e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073a2:	4607      	mov	r7, r0
 80073a4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073a6:	0090      	lsls	r0, r2, #2
	{
 80073a8:	4688      	mov	r8, r1
 80073aa:	4616      	mov	r6, r2
 80073ac:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073ae:	f7fe fe91 	bl	80060d4 <pvPortMalloc>
			if( pxStack != NULL )
 80073b2:	4605      	mov	r5, r0
 80073b4:	b920      	cbnz	r0, 80073c0 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073b6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80073ba:	b005      	add	sp, #20
 80073bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073c0:	2060      	movs	r0, #96	@ 0x60
 80073c2:	f7fe fe87 	bl	80060d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80073c6:	4604      	mov	r4, r0
 80073c8:	b198      	cbz	r0, 80073f2 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073ca:	2300      	movs	r3, #0
 80073cc:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80073d2:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073d8:	9002      	str	r0, [sp, #8]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	4632      	mov	r2, r6
 80073de:	464b      	mov	r3, r9
 80073e0:	4641      	mov	r1, r8
 80073e2:	4638      	mov	r0, r7
 80073e4:	f7ff ff56 	bl	8007294 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073e8:	4620      	mov	r0, r4
 80073ea:	f7ff fe3d 	bl	8007068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7e3      	b.n	80073ba <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7fe ff06 	bl	8006204 <vPortFree>
		if( pxNewTCB != NULL )
 80073f8:	e7dd      	b.n	80073b6 <xTaskCreate+0x18>
	...

080073fc <vTaskStartScheduler>:
{
 80073fc:	b510      	push	{r4, lr}
 80073fe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007400:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007402:	aa07      	add	r2, sp, #28
 8007404:	a906      	add	r1, sp, #24
 8007406:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007408:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800740c:	f7fe fe24 	bl	8006058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007410:	9b05      	ldr	r3, [sp, #20]
 8007412:	9302      	str	r3, [sp, #8]
 8007414:	9b06      	ldr	r3, [sp, #24]
 8007416:	9a07      	ldr	r2, [sp, #28]
 8007418:	4916      	ldr	r1, [pc, #88]	@ (8007474 <vTaskStartScheduler+0x78>)
 800741a:	4817      	ldr	r0, [pc, #92]	@ (8007478 <vTaskStartScheduler+0x7c>)
 800741c:	e9cd 4300 	strd	r4, r3, [sp]
 8007420:	4623      	mov	r3, r4
 8007422:	f7ff ff84 	bl	800732e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007426:	b318      	cbz	r0, 8007470 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8007428:	f000 fba6 	bl	8007b78 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800742c:	2801      	cmp	r0, #1
 800742e:	d114      	bne.n	800745a <vTaskStartScheduler+0x5e>
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007440:	4b0e      	ldr	r3, [pc, #56]	@ (800747c <vTaskStartScheduler+0x80>)
 8007442:	f04f 32ff 	mov.w	r2, #4294967295
 8007446:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007448:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <vTaskStartScheduler+0x84>)
 800744a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800744c:	4b0d      	ldr	r3, [pc, #52]	@ (8007484 <vTaskStartScheduler+0x88>)
 800744e:	601c      	str	r4, [r3, #0]
}
 8007450:	b008      	add	sp, #32
 8007452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007456:	f7ff b84d 	b.w	80064f4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800745a:	3001      	adds	r0, #1
 800745c:	d108      	bne.n	8007470 <vTaskStartScheduler+0x74>
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	e7fe      	b.n	800746e <vTaskStartScheduler+0x72>
}
 8007470:	b008      	add	sp, #32
 8007472:	bd10      	pop	{r4, pc}
 8007474:	08011ee0 	.word	0x08011ee0
 8007478:	08007235 	.word	0x08007235
 800747c:	20011dfc 	.word	0x20011dfc
 8007480:	20011e10 	.word	0x20011e10
 8007484:	20011e18 	.word	0x20011e18

08007488 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007488:	4a02      	ldr	r2, [pc, #8]	@ (8007494 <vTaskSuspendAll+0xc>)
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	3301      	adds	r3, #1
 800748e:	6013      	str	r3, [r2, #0]
}
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20011df8 	.word	0x20011df8

08007498 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007498:	4b01      	ldr	r3, [pc, #4]	@ (80074a0 <xTaskGetTickCount+0x8>)
 800749a:	6818      	ldr	r0, [r3, #0]
}
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	20011e18 	.word	0x20011e18

080074a4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074a4:	4b3f      	ldr	r3, [pc, #252]	@ (80075a4 <xTaskIncrementTick+0x100>)
 80074a6:	681b      	ldr	r3, [r3, #0]
{
 80074a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d172      	bne.n	8007596 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074b0:	4b3d      	ldr	r3, [pc, #244]	@ (80075a8 <xTaskIncrementTick+0x104>)
 80074b2:	681c      	ldr	r4, [r3, #0]
 80074b4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80074b6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074b8:	b9bc      	cbnz	r4, 80074ea <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80074ba:	4b3c      	ldr	r3, [pc, #240]	@ (80075ac <xTaskIncrementTick+0x108>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	b142      	cbz	r2, 80074d4 <xTaskIncrementTick+0x30>
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	e7fe      	b.n	80074d2 <xTaskIncrementTick+0x2e>
 80074d4:	4a36      	ldr	r2, [pc, #216]	@ (80075b0 <xTaskIncrementTick+0x10c>)
 80074d6:	6819      	ldr	r1, [r3, #0]
 80074d8:	6810      	ldr	r0, [r2, #0]
 80074da:	6018      	str	r0, [r3, #0]
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	4a35      	ldr	r2, [pc, #212]	@ (80075b4 <xTaskIncrementTick+0x110>)
 80074e0:	6813      	ldr	r3, [r2, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	f7ff fe77 	bl	80071d8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074ea:	4d33      	ldr	r5, [pc, #204]	@ (80075b8 <xTaskIncrementTick+0x114>)
 80074ec:	4e33      	ldr	r6, [pc, #204]	@ (80075bc <xTaskIncrementTick+0x118>)
 80074ee:	682b      	ldr	r3, [r5, #0]
 80074f0:	4f33      	ldr	r7, [pc, #204]	@ (80075c0 <xTaskIncrementTick+0x11c>)
 80074f2:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 80074f4:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074f8:	d212      	bcs.n	8007520 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074fe:	2114      	movs	r1, #20
 8007500:	434a      	muls	r2, r1
 8007502:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8007504:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8007506:	4a2f      	ldr	r2, [pc, #188]	@ (80075c4 <xTaskIncrementTick+0x120>)
 8007508:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800750a:	bf28      	it	cs
 800750c:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8007510:	2a00      	cmp	r2, #0
 8007512:	bf18      	it	ne
 8007514:	f04f 0b01 	movne.w	fp, #1
}
 8007518:	4658      	mov	r0, fp
 800751a:	b003      	add	sp, #12
 800751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007520:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80075ac <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8007524:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 80075cc <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007528:	f8d9 2000 	ldr.w	r2, [r9]
 800752c:	6812      	ldr	r2, [r2, #0]
 800752e:	b91a      	cbnz	r2, 8007538 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	602a      	str	r2, [r5, #0]
					break;
 8007536:	e7e0      	b.n	80074fa <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007538:	f8d9 2000 	ldr.w	r2, [r9]
 800753c:	68d2      	ldr	r2, [r2, #12]
 800753e:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007542:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8007546:	428c      	cmp	r4, r1
 8007548:	d201      	bcs.n	800754e <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800754a:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800754c:	e7d5      	b.n	80074fa <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800754e:	f108 0304 	add.w	r3, r8, #4
 8007552:	4618      	mov	r0, r3
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	f7fe fec3 	bl	80062e0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800755a:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800755e:	b119      	cbz	r1, 8007568 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007560:	f108 0018 	add.w	r0, r8, #24
 8007564:	f7fe febc 	bl	80062e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007568:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800756c:	f8da 1000 	ldr.w	r1, [sl]
 8007570:	2314      	movs	r3, #20
 8007572:	4288      	cmp	r0, r1
 8007574:	bf88      	it	hi
 8007576:	f8ca 0000 	strhi.w	r0, [sl]
 800757a:	9901      	ldr	r1, [sp, #4]
 800757c:	fb03 6000 	mla	r0, r3, r0, r6
 8007580:	f7fe fe8c 	bl	800629c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007584:	6838      	ldr	r0, [r7, #0]
 8007586:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800758a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800758c:	4291      	cmp	r1, r2
 800758e:	bf28      	it	cs
 8007590:	f04f 0b01 	movcs.w	fp, #1
 8007594:	e7c8      	b.n	8007528 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8007596:	4a0c      	ldr	r2, [pc, #48]	@ (80075c8 <xTaskIncrementTick+0x124>)
 8007598:	6813      	ldr	r3, [r2, #0]
 800759a:	3301      	adds	r3, #1
 800759c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800759e:	f04f 0b00 	mov.w	fp, #0
 80075a2:	e7b9      	b.n	8007518 <xTaskIncrementTick+0x74>
 80075a4:	20011df8 	.word	0x20011df8
 80075a8:	20011e18 	.word	0x20011e18
 80075ac:	20011e64 	.word	0x20011e64
 80075b0:	20011e60 	.word	0x20011e60
 80075b4:	20011e04 	.word	0x20011e04
 80075b8:	20011dfc 	.word	0x20011dfc
 80075bc:	20011e90 	.word	0x20011e90
 80075c0:	200122f0 	.word	0x200122f0
 80075c4:	20011e08 	.word	0x20011e08
 80075c8:	20011e0c 	.word	0x20011e0c
 80075cc:	20011e14 	.word	0x20011e14

080075d0 <xTaskResumeAll>:
{
 80075d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80075d4:	4c30      	ldr	r4, [pc, #192]	@ (8007698 <xTaskResumeAll+0xc8>)
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	b943      	cbnz	r3, 80075ec <xTaskResumeAll+0x1c>
 80075da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	e7fe      	b.n	80075ea <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80075ec:	f7fe fef2 	bl	80063d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f6:	6824      	ldr	r4, [r4, #0]
 80075f8:	b12c      	cbz	r4, 8007606 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80075fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80075fc:	f7fe ff0a 	bl	8006414 <vPortExitCritical>
}
 8007600:	4620      	mov	r0, r4
 8007602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007606:	4b25      	ldr	r3, [pc, #148]	@ (800769c <xTaskResumeAll+0xcc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0f5      	beq.n	80075fa <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800760e:	4d24      	ldr	r5, [pc, #144]	@ (80076a0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8007610:	4e24      	ldr	r6, [pc, #144]	@ (80076a4 <xTaskResumeAll+0xd4>)
 8007612:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80076b4 <xTaskResumeAll+0xe4>
 8007616:	e01d      	b.n	8007654 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007618:	68eb      	ldr	r3, [r5, #12]
 800761a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800761c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800761e:	f104 0018 	add.w	r0, r4, #24
 8007622:	f7fe fe5d 	bl	80062e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007626:	4638      	mov	r0, r7
 8007628:	f7fe fe5a 	bl	80062e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800762c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800762e:	6832      	ldr	r2, [r6, #0]
 8007630:	2014      	movs	r0, #20
 8007632:	4293      	cmp	r3, r2
 8007634:	fb00 8003 	mla	r0, r0, r3, r8
 8007638:	4639      	mov	r1, r7
 800763a:	bf88      	it	hi
 800763c:	6033      	strhi	r3, [r6, #0]
 800763e:	f7fe fe2d 	bl	800629c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007642:	4b19      	ldr	r3, [pc, #100]	@ (80076a8 <xTaskResumeAll+0xd8>)
 8007644:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764a:	429a      	cmp	r2, r3
 800764c:	d302      	bcc.n	8007654 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800764e:	4b17      	ldr	r3, [pc, #92]	@ (80076ac <xTaskResumeAll+0xdc>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1de      	bne.n	8007618 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800765a:	b10c      	cbz	r4, 8007660 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800765c:	f7ff fdbc 	bl	80071d8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007660:	4d13      	ldr	r5, [pc, #76]	@ (80076b0 <xTaskResumeAll+0xe0>)
 8007662:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007664:	b144      	cbz	r4, 8007678 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8007666:	4e11      	ldr	r6, [pc, #68]	@ (80076ac <xTaskResumeAll+0xdc>)
 8007668:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800766a:	f7ff ff1b 	bl	80074a4 <xTaskIncrementTick>
 800766e:	b100      	cbz	r0, 8007672 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8007670:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007672:	3c01      	subs	r4, #1
 8007674:	d1f9      	bne.n	800766a <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8007676:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007678:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <xTaskResumeAll+0xdc>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0bc      	beq.n	80075fa <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8007680:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007688:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007694:	2401      	movs	r4, #1
 8007696:	e7b1      	b.n	80075fc <xTaskResumeAll+0x2c>
 8007698:	20011df8 	.word	0x20011df8
 800769c:	20011e1c 	.word	0x20011e1c
 80076a0:	20011e4c 	.word	0x20011e4c
 80076a4:	20011e14 	.word	0x20011e14
 80076a8:	200122f0 	.word	0x200122f0
 80076ac:	20011e08 	.word	0x20011e08
 80076b0:	20011e0c 	.word	0x20011e0c
 80076b4:	20011e90 	.word	0x20011e90

080076b8 <vTaskDelay>:
	{
 80076b8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076ba:	b950      	cbnz	r0, 80076d2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80076bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80076c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
	}
 80076d0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80076d2:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <vTaskDelay+0x44>)
 80076d4:	6819      	ldr	r1, [r3, #0]
 80076d6:	b141      	cbz	r1, 80076ea <vTaskDelay+0x32>
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	e7fe      	b.n	80076e8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80076ea:	f7ff fecd 	bl	8007488 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076ee:	f7ff fd3b 	bl	8007168 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80076f2:	f7ff ff6d 	bl	80075d0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d0e0      	beq.n	80076bc <vTaskDelay+0x4>
 80076fa:	e7e9      	b.n	80076d0 <vTaskDelay+0x18>
 80076fc:	20011df8 	.word	0x20011df8

08007700 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007700:	4b17      	ldr	r3, [pc, #92]	@ (8007760 <vTaskSwitchContext+0x60>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4b17      	ldr	r3, [pc, #92]	@ (8007764 <vTaskSwitchContext+0x64>)
{
 8007706:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007708:	b112      	cbz	r2, 8007710 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
}
 800770e:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007710:	4d15      	ldr	r5, [pc, #84]	@ (8007768 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8007712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007714:	682a      	ldr	r2, [r5, #0]
 8007716:	4915      	ldr	r1, [pc, #84]	@ (800776c <vTaskSwitchContext+0x6c>)
 8007718:	2614      	movs	r6, #20
 800771a:	fb06 f302 	mul.w	r3, r6, r2
 800771e:	18c8      	adds	r0, r1, r3
 8007720:	58cc      	ldr	r4, [r1, r3]
 8007722:	b18c      	cbz	r4, 8007748 <vTaskSwitchContext+0x48>
 8007724:	6844      	ldr	r4, [r0, #4]
 8007726:	3308      	adds	r3, #8
 8007728:	6864      	ldr	r4, [r4, #4]
 800772a:	6044      	str	r4, [r0, #4]
 800772c:	440b      	add	r3, r1
 800772e:	429c      	cmp	r4, r3
 8007730:	bf04      	itt	eq
 8007732:	6863      	ldreq	r3, [r4, #4]
 8007734:	6043      	streq	r3, [r0, #4]
 8007736:	2314      	movs	r3, #20
 8007738:	fb03 1102 	mla	r1, r3, r2, r1
 800773c:	684b      	ldr	r3, [r1, #4]
 800773e:	68d9      	ldr	r1, [r3, #12]
 8007740:	4b0b      	ldr	r3, [pc, #44]	@ (8007770 <vTaskSwitchContext+0x70>)
 8007742:	6019      	str	r1, [r3, #0]
 8007744:	602a      	str	r2, [r5, #0]
}
 8007746:	e7e2      	b.n	800770e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007748:	b942      	cbnz	r2, 800775c <vTaskSwitchContext+0x5c>
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	e7fe      	b.n	800775a <vTaskSwitchContext+0x5a>
 800775c:	3a01      	subs	r2, #1
 800775e:	e7dc      	b.n	800771a <vTaskSwitchContext+0x1a>
 8007760:	20011df8 	.word	0x20011df8
 8007764:	20011e08 	.word	0x20011e08
 8007768:	20011e14 	.word	0x20011e14
 800776c:	20011e90 	.word	0x20011e90
 8007770:	200122f0 	.word	0x200122f0

08007774 <vTaskPlaceOnEventList>:
{
 8007774:	b510      	push	{r4, lr}
 8007776:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007778:	b940      	cbnz	r0, 800778c <vTaskPlaceOnEventList+0x18>
 800777a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	e7fe      	b.n	800778a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800778c:	4b05      	ldr	r3, [pc, #20]	@ (80077a4 <vTaskPlaceOnEventList+0x30>)
 800778e:	6819      	ldr	r1, [r3, #0]
 8007790:	3118      	adds	r1, #24
 8007792:	f7fe fd8e 	bl	80062b2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007796:	4620      	mov	r0, r4
 8007798:	2101      	movs	r1, #1
}
 800779a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800779e:	f7ff bce3 	b.w	8007168 <prvAddCurrentTaskToDelayedList>
 80077a2:	bf00      	nop
 80077a4:	200122f0 	.word	0x200122f0

080077a8 <vTaskPlaceOnEventListRestricted>:
	{
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	460d      	mov	r5, r1
 80077ac:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80077ae:	b940      	cbnz	r0, 80077c2 <vTaskPlaceOnEventListRestricted+0x1a>
 80077b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	e7fe      	b.n	80077c0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077c2:	4b07      	ldr	r3, [pc, #28]	@ (80077e0 <vTaskPlaceOnEventListRestricted+0x38>)
 80077c4:	6819      	ldr	r1, [r3, #0]
 80077c6:	3118      	adds	r1, #24
 80077c8:	f7fe fd68 	bl	800629c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80077cc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077ce:	4621      	mov	r1, r4
 80077d0:	bf0c      	ite	eq
 80077d2:	4628      	moveq	r0, r5
 80077d4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80077d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077dc:	f7ff bcc4 	b.w	8007168 <prvAddCurrentTaskToDelayedList>
 80077e0:	200122f0 	.word	0x200122f0

080077e4 <xTaskRemoveFromEventList>:
{
 80077e4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e6:	68c3      	ldr	r3, [r0, #12]
 80077e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80077ea:	b944      	cbnz	r4, 80077fe <xTaskRemoveFromEventList+0x1a>
 80077ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	e7fe      	b.n	80077fc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077fe:	f104 0518 	add.w	r5, r4, #24
 8007802:	4628      	mov	r0, r5
 8007804:	f7fe fd6c 	bl	80062e0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007808:	4b10      	ldr	r3, [pc, #64]	@ (800784c <xTaskRemoveFromEventList+0x68>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	b9db      	cbnz	r3, 8007846 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800780e:	1d25      	adds	r5, r4, #4
 8007810:	4628      	mov	r0, r5
 8007812:	f7fe fd65 	bl	80062e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007816:	4a0e      	ldr	r2, [pc, #56]	@ (8007850 <xTaskRemoveFromEventList+0x6c>)
 8007818:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800781a:	6811      	ldr	r1, [r2, #0]
 800781c:	428b      	cmp	r3, r1
 800781e:	bf88      	it	hi
 8007820:	6013      	strhi	r3, [r2, #0]
 8007822:	4a0c      	ldr	r2, [pc, #48]	@ (8007854 <xTaskRemoveFromEventList+0x70>)
 8007824:	2014      	movs	r0, #20
 8007826:	4629      	mov	r1, r5
 8007828:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800782c:	f7fe fd36 	bl	800629c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007830:	4b09      	ldr	r3, [pc, #36]	@ (8007858 <xTaskRemoveFromEventList+0x74>)
 8007832:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007838:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800783a:	bf83      	ittte	hi
 800783c:	4b07      	ldrhi	r3, [pc, #28]	@ (800785c <xTaskRemoveFromEventList+0x78>)
 800783e:	2001      	movhi	r0, #1
 8007840:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8007842:	2000      	movls	r0, #0
}
 8007844:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007846:	4806      	ldr	r0, [pc, #24]	@ (8007860 <xTaskRemoveFromEventList+0x7c>)
 8007848:	4629      	mov	r1, r5
 800784a:	e7ef      	b.n	800782c <xTaskRemoveFromEventList+0x48>
 800784c:	20011df8 	.word	0x20011df8
 8007850:	20011e14 	.word	0x20011e14
 8007854:	20011e90 	.word	0x20011e90
 8007858:	200122f0 	.word	0x200122f0
 800785c:	20011e08 	.word	0x20011e08
 8007860:	20011e4c 	.word	0x20011e4c

08007864 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007864:	4b03      	ldr	r3, [pc, #12]	@ (8007874 <vTaskInternalSetTimeOutState+0x10>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800786a:	4b03      	ldr	r3, [pc, #12]	@ (8007878 <vTaskInternalSetTimeOutState+0x14>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6043      	str	r3, [r0, #4]
}
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20011e04 	.word	0x20011e04
 8007878:	20011e18 	.word	0x20011e18

0800787c <xTaskCheckForTimeOut>:
{
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007880:	4605      	mov	r5, r0
 8007882:	b940      	cbnz	r0, 8007896 <xTaskCheckForTimeOut+0x1a>
 8007884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	e7fe      	b.n	8007894 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8007896:	b941      	cbnz	r1, 80078aa <xTaskCheckForTimeOut+0x2e>
 8007898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	e7fe      	b.n	80078a8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80078aa:	f7fe fd93 	bl	80063d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80078ae:	4b0f      	ldr	r3, [pc, #60]	@ (80078ec <xTaskCheckForTimeOut+0x70>)
 80078b0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	d010      	beq.n	80078da <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078b8:	480d      	ldr	r0, [pc, #52]	@ (80078f0 <xTaskCheckForTimeOut+0x74>)
 80078ba:	682e      	ldr	r6, [r5, #0]
 80078bc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078be:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078c0:	4286      	cmp	r6, r0
 80078c2:	d001      	beq.n	80078c8 <xTaskCheckForTimeOut+0x4c>
 80078c4:	428a      	cmp	r2, r1
 80078c6:	d90f      	bls.n	80078e8 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80078c8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078ca:	4283      	cmp	r3, r0
 80078cc:	d90a      	bls.n	80078e4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80078ce:	1a5b      	subs	r3, r3, r1
 80078d0:	4413      	add	r3, r2
 80078d2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078d4:	4628      	mov	r0, r5
 80078d6:	f7ff ffc5 	bl	8007864 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80078da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80078dc:	f7fe fd9a 	bl	8006414 <vPortExitCritical>
}
 80078e0:	4620      	mov	r0, r4
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80078e8:	2401      	movs	r4, #1
 80078ea:	e7f7      	b.n	80078dc <xTaskCheckForTimeOut+0x60>
 80078ec:	20011e18 	.word	0x20011e18
 80078f0:	20011e04 	.word	0x20011e04

080078f4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80078f4:	4b01      	ldr	r3, [pc, #4]	@ (80078fc <vTaskMissedYield+0x8>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
}
 80078fa:	4770      	bx	lr
 80078fc:	20011e08 	.word	0x20011e08

08007900 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <xTaskGetSchedulerState+0x18>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	b133      	cbz	r3, 8007914 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007906:	4b05      	ldr	r3, [pc, #20]	@ (800791c <xTaskGetSchedulerState+0x1c>)
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	fab0 f080 	clz	r0, r0
 800790e:	0940      	lsrs	r0, r0, #5
 8007910:	0040      	lsls	r0, r0, #1
 8007912:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007914:	2001      	movs	r0, #1
	}
 8007916:	4770      	bx	lr
 8007918:	20011e10 	.word	0x20011e10
 800791c:	20011df8 	.word	0x20011df8

08007920 <xTaskPriorityInherit>:
	{
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007922:	4604      	mov	r4, r0
 8007924:	b338      	cbz	r0, 8007976 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007926:	4d1a      	ldr	r5, [pc, #104]	@ (8007990 <xTaskPriorityInherit+0x70>)
 8007928:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800792a:	682a      	ldr	r2, [r5, #0]
 800792c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800792e:	4293      	cmp	r3, r2
 8007930:	d226      	bcs.n	8007980 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007932:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007934:	4e17      	ldr	r6, [pc, #92]	@ (8007994 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007936:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007938:	bfa1      	itttt	ge
 800793a:	682a      	ldrge	r2, [r5, #0]
 800793c:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 800793e:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8007942:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007944:	2214      	movs	r2, #20
 8007946:	fb02 6303 	mla	r3, r2, r3, r6
 800794a:	6942      	ldr	r2, [r0, #20]
 800794c:	429a      	cmp	r2, r3
 800794e:	d113      	bne.n	8007978 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007950:	1d07      	adds	r7, r0, #4
 8007952:	4638      	mov	r0, r7
 8007954:	f7fe fcc4 	bl	80062e0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007958:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800795a:	4a0f      	ldr	r2, [pc, #60]	@ (8007998 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800795e:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007960:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007962:	2014      	movs	r0, #20
 8007964:	428b      	cmp	r3, r1
 8007966:	fb00 6003 	mla	r0, r0, r3, r6
 800796a:	4639      	mov	r1, r7
 800796c:	bf88      	it	hi
 800796e:	6013      	strhi	r3, [r2, #0]
 8007970:	f7fe fc94 	bl	800629c <vListInsertEnd>
				xReturn = pdTRUE;
 8007974:	2001      	movs	r0, #1
	}
 8007976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800797e:	e7f9      	b.n	8007974 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8007984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007986:	4298      	cmp	r0, r3
 8007988:	bf2c      	ite	cs
 800798a:	2000      	movcs	r0, #0
 800798c:	2001      	movcc	r0, #1
 800798e:	e7f2      	b.n	8007976 <xTaskPriorityInherit+0x56>
 8007990:	200122f0 	.word	0x200122f0
 8007994:	20011e90 	.word	0x20011e90
 8007998:	20011e14 	.word	0x20011e14

0800799c <xTaskPriorityDisinherit>:
	{
 800799c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800799e:	b908      	cbnz	r0, 80079a4 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 80079a0:	2000      	movs	r0, #0
	}
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80079a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a14 <xTaskPriorityDisinherit+0x78>)
 80079a6:	681c      	ldr	r4, [r3, #0]
 80079a8:	4284      	cmp	r4, r0
 80079aa:	d008      	beq.n	80079be <xTaskPriorityDisinherit+0x22>
 80079ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	e7fe      	b.n	80079bc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80079be:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80079c0:	b943      	cbnz	r3, 80079d4 <xTaskPriorityDisinherit+0x38>
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	e7fe      	b.n	80079d2 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80079d6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80079d8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079da:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80079dc:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079de:	d0df      	beq.n	80079a0 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1dd      	bne.n	80079a0 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079e4:	1d25      	adds	r5, r4, #4
 80079e6:	4628      	mov	r0, r5
 80079e8:	f7fe fc7a 	bl	80062e0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80079ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079f4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80079f6:	4a08      	ldr	r2, [pc, #32]	@ (8007a18 <xTaskPriorityDisinherit+0x7c>)
 80079f8:	6811      	ldr	r1, [r2, #0]
 80079fa:	428b      	cmp	r3, r1
 80079fc:	bf88      	it	hi
 80079fe:	6013      	strhi	r3, [r2, #0]
 8007a00:	4a06      	ldr	r2, [pc, #24]	@ (8007a1c <xTaskPriorityDisinherit+0x80>)
 8007a02:	2014      	movs	r0, #20
 8007a04:	fb00 2003 	mla	r0, r0, r3, r2
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f7fe fc47 	bl	800629c <vListInsertEnd>
					xReturn = pdTRUE;
 8007a0e:	2001      	movs	r0, #1
		return xReturn;
 8007a10:	e7c7      	b.n	80079a2 <xTaskPriorityDisinherit+0x6>
 8007a12:	bf00      	nop
 8007a14:	200122f0 	.word	0x200122f0
 8007a18:	20011e14 	.word	0x20011e14
 8007a1c:	20011e90 	.word	0x20011e90

08007a20 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8007a20:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8007a22:	4604      	mov	r4, r0
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d041      	beq.n	8007aac <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a28:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007a2a:	b942      	cbnz	r2, 8007a3e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8007a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	e7fe      	b.n	8007a3c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a3e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007a40:	4299      	cmp	r1, r3
 8007a42:	bf38      	it	cc
 8007a44:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a46:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007a48:	428b      	cmp	r3, r1
 8007a4a:	d02f      	beq.n	8007aac <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a4c:	2a01      	cmp	r2, #1
 8007a4e:	d12d      	bne.n	8007aac <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8007a50:	4a17      	ldr	r2, [pc, #92]	@ (8007ab0 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	4282      	cmp	r2, r0
 8007a56:	d108      	bne.n	8007a6a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8007a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	e7fe      	b.n	8007a68 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a6a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a6c:	4d11      	ldr	r5, [pc, #68]	@ (8007ab4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 8007a6e:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a70:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a72:	f04f 0214 	mov.w	r2, #20
 8007a76:	fb02 5303 	mla	r3, r2, r3, r5
 8007a7a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a7c:	bfa4      	itt	ge
 8007a7e:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 8007a82:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d111      	bne.n	8007aac <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a88:	1d06      	adds	r6, r0, #4
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f7fe fc28 	bl	80062e0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007a90:	4a09      	ldr	r2, [pc, #36]	@ (8007ab8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007a92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007a94:	6811      	ldr	r1, [r2, #0]
 8007a96:	2014      	movs	r0, #20
 8007a98:	428b      	cmp	r3, r1
 8007a9a:	fb00 5003 	mla	r0, r0, r3, r5
 8007a9e:	4631      	mov	r1, r6
	}
 8007aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8007aa4:	bf88      	it	hi
 8007aa6:	6013      	strhi	r3, [r2, #0]
 8007aa8:	f7fe bbf8 	b.w	800629c <vListInsertEnd>
	}
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
 8007aae:	bf00      	nop
 8007ab0:	200122f0 	.word	0x200122f0
 8007ab4:	20011e90 	.word	0x20011e90
 8007ab8:	20011e14 	.word	0x20011e14

08007abc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007abc:	4b04      	ldr	r3, [pc, #16]	@ (8007ad0 <pvTaskIncrementMutexHeldCount+0x14>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	b11a      	cbz	r2, 8007aca <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ac2:	6819      	ldr	r1, [r3, #0]
 8007ac4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8007ac6:	3201      	adds	r2, #1
 8007ac8:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8007aca:	6818      	ldr	r0, [r3, #0]
	}
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	200122f0 	.word	0x200122f0

08007ad4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8007ad4:	4291      	cmp	r1, r2
{
 8007ad6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ad8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ada:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8007adc:	d80a      	bhi.n	8007af4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	6983      	ldr	r3, [r0, #24]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d20d      	bcs.n	8007b02 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ae6:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <prvInsertTimerInActiveList+0x34>)
 8007ae8:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	f7fe fbe1 	bl	80062b2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007af0:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8007af2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d201      	bcs.n	8007afc <prvInsertTimerInActiveList+0x28>
 8007af8:	4299      	cmp	r1, r3
 8007afa:	d202      	bcs.n	8007b02 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007afc:	4b03      	ldr	r3, [pc, #12]	@ (8007b0c <prvInsertTimerInActiveList+0x38>)
 8007afe:	1d01      	adds	r1, r0, #4
 8007b00:	e7f3      	b.n	8007aea <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8007b02:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007b04:	e7f5      	b.n	8007af2 <prvInsertTimerInActiveList+0x1e>
 8007b06:	bf00      	nop
 8007b08:	200123f0 	.word	0x200123f0
 8007b0c:	200123f4 	.word	0x200123f4

08007b10 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007b12:	4c11      	ldr	r4, [pc, #68]	@ (8007b58 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8007b14:	f7fe fc5e 	bl	80063d4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007b18:	6825      	ldr	r5, [r4, #0]
 8007b1a:	b9bd      	cbnz	r5, 8007b4c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b1c:	4f0f      	ldr	r7, [pc, #60]	@ (8007b5c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8007b1e:	4e10      	ldr	r6, [pc, #64]	@ (8007b60 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8007b20:	4638      	mov	r0, r7
 8007b22:	f7fe fbad 	bl	8006280 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7fe fbaa 	bl	8006280 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8007b68 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007b30:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b32:	4b0e      	ldr	r3, [pc, #56]	@ (8007b6c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b34:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8007b36:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b38:	200a      	movs	r0, #10
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b70 <prvCheckForValidListAndQueue+0x60>)
 8007b3c:	9500      	str	r5, [sp, #0]
 8007b3e:	f7fe fe54 	bl	80067ea <xQueueGenericCreateStatic>
 8007b42:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b44:	b110      	cbz	r0, 8007b4c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b46:	490b      	ldr	r1, [pc, #44]	@ (8007b74 <prvCheckForValidListAndQueue+0x64>)
 8007b48:	f7ff fa2c 	bl	8006fa4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8007b4c:	b003      	add	sp, #12
 8007b4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007b52:	f7fe bc5f 	b.w	8006414 <vPortExitCritical>
 8007b56:	bf00      	nop
 8007b58:	200123ec 	.word	0x200123ec
 8007b5c:	2001240c 	.word	0x2001240c
 8007b60:	200123f8 	.word	0x200123f8
 8007b64:	200123f4 	.word	0x200123f4
 8007b68:	20012344 	.word	0x20012344
 8007b6c:	200123f0 	.word	0x200123f0
 8007b70:	200122f4 	.word	0x200122f4
 8007b74:	08011ee5 	.word	0x08011ee5

08007b78 <xTimerCreateTimerTask>:
{
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007b7c:	f7ff ffc8 	bl	8007b10 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007b80:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <xTimerCreateTimerTask+0x54>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	b1b3      	cbz	r3, 8007bb4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b86:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b88:	aa07      	add	r2, sp, #28
 8007b8a:	a906      	add	r1, sp, #24
 8007b8c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b8e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b92:	f7fe fa6d 	bl	8006070 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b96:	9b05      	ldr	r3, [sp, #20]
 8007b98:	9302      	str	r3, [sp, #8]
 8007b9a:	9b06      	ldr	r3, [sp, #24]
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	9a07      	ldr	r2, [sp, #28]
 8007ba4:	490a      	ldr	r1, [pc, #40]	@ (8007bd0 <xTimerCreateTimerTask+0x58>)
 8007ba6:	480b      	ldr	r0, [pc, #44]	@ (8007bd4 <xTimerCreateTimerTask+0x5c>)
 8007ba8:	4623      	mov	r3, r4
 8007baa:	f7ff fbc0 	bl	800732e <xTaskCreateStatic>
 8007bae:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd8 <xTimerCreateTimerTask+0x60>)
 8007bb0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007bb2:	b940      	cbnz	r0, 8007bc6 <xTimerCreateTimerTask+0x4e>
 8007bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007bc4:	e7fe      	b.n	8007bc4 <xTimerCreateTimerTask+0x4c>
}
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	b008      	add	sp, #32
 8007bca:	bd10      	pop	{r4, pc}
 8007bcc:	200123ec 	.word	0x200123ec
 8007bd0:	08011eea 	.word	0x08011eea
 8007bd4:	08007cd9 	.word	0x08007cd9
 8007bd8:	200123e8 	.word	0x200123e8

08007bdc <xTimerGenericCommand>:
{
 8007bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007bde:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8007be0:	4604      	mov	r4, r0
{
 8007be2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8007be4:	b940      	cbnz	r0, 8007bf8 <xTimerGenericCommand+0x1c>
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	e7fe      	b.n	8007bf6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8007bf8:	4d0d      	ldr	r5, [pc, #52]	@ (8007c30 <xTimerGenericCommand+0x54>)
 8007bfa:	6828      	ldr	r0, [r5, #0]
 8007bfc:	b180      	cbz	r0, 8007c20 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bfe:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c00:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c04:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c06:	dc0d      	bgt.n	8007c24 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c08:	f7ff fe7a 	bl	8007900 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c0c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c0e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c10:	bf08      	it	eq
 8007c12:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c14:	6828      	ldr	r0, [r5, #0]
 8007c16:	bf18      	it	ne
 8007c18:	461a      	movne	r2, r3
 8007c1a:	4669      	mov	r1, sp
 8007c1c:	f7fe fe9a 	bl	8006954 <xQueueGenericSend>
}
 8007c20:	b004      	add	sp, #16
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c24:	2300      	movs	r3, #0
 8007c26:	4669      	mov	r1, sp
 8007c28:	f7fe ff46 	bl	8006ab8 <xQueueGenericSendFromISR>
 8007c2c:	e7f8      	b.n	8007c20 <xTimerGenericCommand+0x44>
 8007c2e:	bf00      	nop
 8007c30:	200123ec 	.word	0x200123ec

08007c34 <prvSampleTimeNow>:
{
 8007c34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8007c38:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007cd4 <prvSampleTimeNow+0xa0>
{
 8007c3c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8007c3e:	f7ff fc2b 	bl	8007498 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007c42:	f8d8 3000 	ldr.w	r3, [r8]
 8007c46:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8007c48:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8007c4a:	d909      	bls.n	8007c60 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c4c:	4f1f      	ldr	r7, [pc, #124]	@ (8007ccc <prvSampleTimeNow+0x98>)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	b96a      	cbnz	r2, 8007c70 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8007c54:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd0 <prvSampleTimeNow+0x9c>)
 8007c56:	6811      	ldr	r1, [r2, #0]
 8007c58:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8007c5a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e000      	b.n	8007c62 <prvSampleTimeNow+0x2e>
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8007c64:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8007c66:	f8c8 5000 	str.w	r5, [r8]
}
 8007c6a:	b002      	add	sp, #8
 8007c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c70:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c72:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c74:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c78:	f104 0a04 	add.w	sl, r4, #4
 8007c7c:	4650      	mov	r0, sl
 8007c7e:	f7fe fb2f 	bl	80062e0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c82:	6a23      	ldr	r3, [r4, #32]
 8007c84:	4620      	mov	r0, r4
 8007c86:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c88:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007c8c:	075b      	lsls	r3, r3, #29
 8007c8e:	d5de      	bpl.n	8007c4e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c90:	69a3      	ldr	r3, [r4, #24]
 8007c92:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8007c94:	4599      	cmp	r9, r3
 8007c96:	d206      	bcs.n	8007ca6 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c98:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c9a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c9c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c9e:	4651      	mov	r1, sl
 8007ca0:	f7fe fb07 	bl	80062b2 <vListInsert>
 8007ca4:	e7d3      	b.n	8007c4e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	464a      	mov	r2, r9
 8007cac:	4619      	mov	r1, r3
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7ff ff94 	bl	8007bdc <xTimerGenericCommand>
				configASSERT( xResult );
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d1ca      	bne.n	8007c4e <prvSampleTimeNow+0x1a>
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	e7fe      	b.n	8007cc8 <prvSampleTimeNow+0x94>
 8007cca:	bf00      	nop
 8007ccc:	200123f4 	.word	0x200123f4
 8007cd0:	200123f0 	.word	0x200123f0
 8007cd4:	200123e4 	.word	0x200123e4

08007cd8 <prvTimerTask>:
{
 8007cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cdc:	4d6e      	ldr	r5, [pc, #440]	@ (8007e98 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007cde:	4e6f      	ldr	r6, [pc, #444]	@ (8007e9c <prvTimerTask+0x1c4>)
{
 8007ce0:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ce2:	682b      	ldr	r3, [r5, #0]
 8007ce4:	f8d3 8000 	ldr.w	r8, [r3]
 8007ce8:	f1b8 0f00 	cmp.w	r8, #0
 8007cec:	d035      	beq.n	8007d5a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cf4:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8007cf6:	f7ff fbc7 	bl	8007488 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cfa:	a804      	add	r0, sp, #16
 8007cfc:	f7ff ff9a 	bl	8007c34 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8007d00:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d02:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d169      	bne.n	8007ddc <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d08:	2c00      	cmp	r4, #0
 8007d0a:	d14c      	bne.n	8007da6 <prvTimerTask+0xce>
 8007d0c:	4540      	cmp	r0, r8
 8007d0e:	d350      	bcc.n	8007db2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8007d10:	f7ff fc5e 	bl	80075d0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d1a:	1d38      	adds	r0, r7, #4
 8007d1c:	f7fe fae0 	bl	80062e0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d24:	0758      	lsls	r0, r3, #29
 8007d26:	d51a      	bpl.n	8007d5e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d28:	69b9      	ldr	r1, [r7, #24]
 8007d2a:	4643      	mov	r3, r8
 8007d2c:	464a      	mov	r2, r9
 8007d2e:	4441      	add	r1, r8
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff fecf 	bl	8007ad4 <prvInsertTimerInActiveList>
 8007d36:	b1b0      	cbz	r0, 8007d66 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d38:	9400      	str	r4, [sp, #0]
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ff4b 	bl	8007bdc <xTimerGenericCommand>
			configASSERT( xResult );
 8007d46:	b970      	cbnz	r0, 8007d66 <prvTimerTask+0x8e>
 8007d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	e7fe      	b.n	8007d58 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d5a:	2401      	movs	r4, #1
 8007d5c:	e7cb      	b.n	8007cf6 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d5e:	f023 0301 	bic.w	r3, r3, #1
 8007d62:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	4638      	mov	r0, r7
 8007d6a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d6c:	6830      	ldr	r0, [r6, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	a904      	add	r1, sp, #16
 8007d72:	f7fe ff4f 	bl	8006c14 <xQueueReceive>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d0b3      	beq.n	8007ce2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d7a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d7c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	db2f      	blt.n	8007de2 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d82:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d84:	6963      	ldr	r3, [r4, #20]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d132      	bne.n	8007df0 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d8a:	a803      	add	r0, sp, #12
 8007d8c:	f7ff ff52 	bl	8007c34 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007d90:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d92:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8007d94:	2b09      	cmp	r3, #9
 8007d96:	d8e9      	bhi.n	8007d6c <prvTimerTask+0x94>
 8007d98:	e8df f003 	tbb	[pc, r3]
 8007d9c:	572e2e2e 	.word	0x572e2e2e
 8007da0:	2e2e765e 	.word	0x2e2e765e
 8007da4:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007da6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ea0 <prvTimerTask+0x1c8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681c      	ldr	r4, [r3, #0]
 8007dac:	fab4 f484 	clz	r4, r4
 8007db0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007db2:	6830      	ldr	r0, [r6, #0]
 8007db4:	4622      	mov	r2, r4
 8007db6:	eba8 0109 	sub.w	r1, r8, r9
 8007dba:	f7ff f932 	bl	8007022 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dbe:	f7ff fc07 	bl	80075d0 <xTaskResumeAll>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d1d2      	bne.n	8007d6c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8007dc6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	e7c7      	b.n	8007d6c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8007ddc:	f7ff fbf8 	bl	80075d0 <xTaskResumeAll>
}
 8007de0:	e7c4      	b.n	8007d6c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	9907      	ldr	r1, [sp, #28]
 8007de6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007de8:	9b04      	ldr	r3, [sp, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	dbbe      	blt.n	8007d6c <prvTimerTask+0x94>
 8007dee:	e7c8      	b.n	8007d82 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007df0:	1d20      	adds	r0, r4, #4
 8007df2:	f7fe fa75 	bl	80062e0 <uxListRemove>
 8007df6:	e7c8      	b.n	8007d8a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007df8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007dfc:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e06:	9b05      	ldr	r3, [sp, #20]
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4419      	add	r1, r3
 8007e0c:	f7ff fe62 	bl	8007ad4 <prvInsertTimerInActiveList>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d0ab      	beq.n	8007d6c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e14:	6a23      	ldr	r3, [r4, #32]
 8007e16:	4620      	mov	r0, r4
 8007e18:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e1a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007e1e:	0759      	lsls	r1, r3, #29
 8007e20:	d5a4      	bpl.n	8007d6c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e22:	69a2      	ldr	r2, [r4, #24]
 8007e24:	9905      	ldr	r1, [sp, #20]
 8007e26:	2300      	movs	r3, #0
 8007e28:	440a      	add	r2, r1
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f7ff fed4 	bl	8007bdc <xTimerGenericCommand>
							configASSERT( xResult );
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d199      	bne.n	8007d6c <prvTimerTask+0x94>
 8007e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	e7fe      	b.n	8007e48 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e4e:	f023 0301 	bic.w	r3, r3, #1
 8007e52:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8007e56:	e789      	b.n	8007d6c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e58:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e64:	9905      	ldr	r1, [sp, #20]
 8007e66:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e68:	b941      	cbnz	r1, 8007e7c <prvTimerTask+0x1a4>
 8007e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	e7fe      	b.n	8007e7a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4401      	add	r1, r0
 8007e80:	4620      	mov	r0, r4
 8007e82:	f7ff fe27 	bl	8007ad4 <prvInsertTimerInActiveList>
					break;
 8007e86:	e771      	b.n	8007d6c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e88:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007e8c:	079a      	lsls	r2, r3, #30
 8007e8e:	d4de      	bmi.n	8007e4e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7fe f9b7 	bl	8006204 <vPortFree>
 8007e96:	e769      	b.n	8007d6c <prvTimerTask+0x94>
 8007e98:	200123f4 	.word	0x200123f4
 8007e9c:	200123ec 	.word	0x200123ec
 8007ea0:	200123f0 	.word	0x200123f0

08007ea4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8007ea4:	8880      	ldrh	r0, [r0, #4]
 8007ea6:	4770      	bx	lr

08007ea8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	6803      	ldr	r3, [r0, #0]
 8007eac:	4605      	mov	r5, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4798      	blx	r3
 8007eb6:	682b      	ldr	r3, [r5, #0]
 8007eb8:	4606      	mov	r6, r0
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	4798      	blx	r3
 8007ec0:	1ba4      	subs	r4, r4, r6
 8007ec2:	b2a4      	uxth	r4, r4
 8007ec4:	fbb4 f0f0 	udiv	r0, r4, r0
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}

08007eca <_ZN8touchgfx17AbstractPartition5clearEv>:
 8007eca:	2300      	movs	r3, #0
 8007ecc:	8083      	strh	r3, [r0, #4]
 8007ece:	4770      	bx	lr

08007ed0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	6803      	ldr	r3, [r0, #0]
 8007ed4:	8881      	ldrh	r1, [r0, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	4604      	mov	r4, r0
 8007eda:	4798      	blx	r3
 8007edc:	88a3      	ldrh	r3, [r4, #4]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	80a3      	strh	r3, [r4, #4]
 8007ee2:	bd10      	pop	{r4, pc}

08007ee4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8007ee4:	6803      	ldr	r3, [r0, #0]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee8:	4718      	bx	r3

08007eea <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8007eea:	4770      	bx	lr

08007eec <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8007eec:	4a02      	ldr	r2, [pc, #8]	@ (8007ef8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8007eee:	6002      	str	r2, [r0, #0]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	8082      	strh	r2, [r0, #4]
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	08011efc 	.word	0x08011efc

08007efc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8007efc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007efe:	2000      	movs	r0, #0
 8007f00:	b12b      	cbz	r3, 8007f0e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8007f02:	b920      	cbnz	r0, 8007f0e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8007f04:	1a5a      	subs	r2, r3, r1
 8007f06:	4250      	negs	r0, r2
 8007f08:	4150      	adcs	r0, r2
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	e7f8      	b.n	8007f00 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8007f0e:	4770      	bx	lr

08007f10 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8007f10:	2300      	movs	r3, #0
 8007f12:	6148      	str	r0, [r1, #20]
 8007f14:	618b      	str	r3, [r1, #24]
 8007f16:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f18:	b913      	cbnz	r3, 8007f20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8007f1a:	6281      	str	r1, [r0, #40]	@ 0x28
 8007f1c:	4770      	bx	lr
 8007f1e:	4613      	mov	r3, r2
 8007f20:	699a      	ldr	r2, [r3, #24]
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	d1fb      	bne.n	8007f1e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8007f26:	6199      	str	r1, [r3, #24]
 8007f28:	4770      	bx	lr

08007f2a <_ZN8touchgfx9Container9removeAllEv>:
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f2e:	b123      	cbz	r3, 8007f3a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8007f30:	6999      	ldr	r1, [r3, #24]
 8007f32:	6281      	str	r1, [r0, #40]	@ 0x28
 8007f34:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8007f38:	e7f8      	b.n	8007f2c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8007f3a:	4770      	bx	lr

08007f3c <_ZN8touchgfx9Container6unlinkEv>:
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6283      	str	r3, [r0, #40]	@ 0x28
 8007f40:	4770      	bx	lr

08007f42 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8007f42:	2200      	movs	r2, #0
 8007f44:	8002      	strh	r2, [r0, #0]
 8007f46:	8042      	strh	r2, [r0, #2]
 8007f48:	8082      	strh	r2, [r0, #4]
 8007f4a:	80c2      	strh	r2, [r0, #6]
 8007f4c:	4770      	bx	lr

08007f4e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8007f4e:	b570      	push	{r4, r5, r6, lr}
 8007f50:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8007f52:	460d      	mov	r5, r1
 8007f54:	4616      	mov	r6, r2
 8007f56:	b13c      	cbz	r4, 8007f68 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f5e:	4632      	mov	r2, r6
 8007f60:	4629      	mov	r1, r5
 8007f62:	4798      	blx	r3
 8007f64:	69a4      	ldr	r4, [r4, #24]
 8007f66:	e7f6      	b.n	8007f56 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8007f68:	bd70      	pop	{r4, r5, r6, pc}

08007f6a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8007f6a:	b538      	push	{r3, r4, r5, lr}
 8007f6c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8007f6e:	460d      	mov	r5, r1
 8007f70:	b134      	cbz	r4, 8007f80 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	4621      	mov	r1, r4
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	4628      	mov	r0, r5
 8007f7a:	4798      	blx	r3
 8007f7c:	69a4      	ldr	r4, [r4, #24]
 8007f7e:	e7f7      	b.n	8007f70 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8007f80:	bd38      	pop	{r3, r4, r5, pc}

08007f82 <_ZN8touchgfx9ContainerD1Ev>:
 8007f82:	4770      	bx	lr

08007f84 <_ZN8touchgfx9ContainerD0Ev>:
 8007f84:	b510      	push	{r4, lr}
 8007f86:	212c      	movs	r1, #44	@ 0x2c
 8007f88:	4604      	mov	r4, r0
 8007f8a:	f007 fe5f 	bl	800fc4c <_ZdlPvj>
 8007f8e:	4620      	mov	r0, r4
 8007f90:	bd10      	pop	{r4, pc}

08007f92 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8007f92:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007f94:	b19b      	cbz	r3, 8007fbe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8007f96:	428b      	cmp	r3, r1
 8007f98:	d109      	bne.n	8007fae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8007f9a:	699a      	ldr	r2, [r3, #24]
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6159      	str	r1, [r3, #20]
 8007fa0:	6282      	str	r2, [r0, #40]	@ 0x28
 8007fa2:	b902      	cbnz	r2, 8007fa6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8007fa4:	4770      	bx	lr
 8007fa6:	6199      	str	r1, [r3, #24]
 8007fa8:	4770      	bx	lr
 8007faa:	4613      	mov	r3, r2
 8007fac:	b13a      	cbz	r2, 8007fbe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	428a      	cmp	r2, r1
 8007fb2:	d1fa      	bne.n	8007faa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8007fb4:	698a      	ldr	r2, [r1, #24]
 8007fb6:	619a      	str	r2, [r3, #24]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8007fbe:	4770      	bx	lr

08007fc0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8007fc0:	b410      	push	{r4}
 8007fc2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	b92b      	cbnz	r3, 8007fd4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8007fc8:	6803      	ldr	r3, [r0, #0]
 8007fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4718      	bx	r3
 8007fd4:	b941      	cbnz	r1, 8007fe8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8007fd6:	6193      	str	r3, [r2, #24]
 8007fd8:	6282      	str	r2, [r0, #40]	@ 0x28
 8007fda:	6154      	str	r4, [r2, #20]
 8007fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d0f9      	beq.n	8007fdc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8007fe8:	4299      	cmp	r1, r3
 8007fea:	6998      	ldr	r0, [r3, #24]
 8007fec:	d1f9      	bne.n	8007fe2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8007fee:	6190      	str	r0, [r2, #24]
 8007ff0:	618a      	str	r2, [r1, #24]
 8007ff2:	e7f2      	b.n	8007fda <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08007ff4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	461f      	mov	r7, r3
 8007ffa:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8007ffe:	460d      	mov	r5, r1
 8008000:	4616      	mov	r6, r2
 8008002:	b103      	cbz	r3, 8008006 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8008004:	6038      	str	r0, [r7, #0]
 8008006:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008008:	b314      	cbz	r4, 8008050 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800800a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800800e:	b1eb      	cbz	r3, 800804c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008010:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8008014:	428d      	cmp	r5, r1
 8008016:	db19      	blt.n	800804c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008018:	8923      	ldrh	r3, [r4, #8]
 800801a:	b289      	uxth	r1, r1
 800801c:	440b      	add	r3, r1
 800801e:	b21b      	sxth	r3, r3
 8008020:	429d      	cmp	r5, r3
 8008022:	da13      	bge.n	800804c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008024:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008028:	4296      	cmp	r6, r2
 800802a:	db0f      	blt.n	800804c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800802c:	8963      	ldrh	r3, [r4, #10]
 800802e:	b292      	uxth	r2, r2
 8008030:	4413      	add	r3, r2
 8008032:	b21b      	sxth	r3, r3
 8008034:	429e      	cmp	r6, r3
 8008036:	da09      	bge.n	800804c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	1ab2      	subs	r2, r6, r2
 800803c:	1a69      	subs	r1, r5, r1
 800803e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8008042:	b212      	sxth	r2, r2
 8008044:	463b      	mov	r3, r7
 8008046:	b209      	sxth	r1, r1
 8008048:	4620      	mov	r0, r4
 800804a:	47c0      	blx	r8
 800804c:	69a4      	ldr	r4, [r4, #24]
 800804e:	e7db      	b.n	8008008 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8008050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008054 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	4c6e      	ldr	r4, [pc, #440]	@ (8008214 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800805a:	b0a1      	sub	sp, #132	@ 0x84
 800805c:	6824      	ldr	r4, [r4, #0]
 800805e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8008060:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	2400      	movs	r4, #0
 8008068:	802c      	strh	r4, [r5, #0]
 800806a:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800806c:	802c      	strh	r4, [r5, #0]
 800806e:	601c      	str	r4, [r3, #0]
 8008070:	4606      	mov	r6, r0
 8008072:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8008076:	f7ff ffbd 	bl	8007ff4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800807a:	f1b9 0f03 	cmp.w	r9, #3
 800807e:	f340 80c2 	ble.w	8008206 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8008082:	4631      	mov	r1, r6
 8008084:	a80c      	add	r0, sp, #48	@ 0x30
 8008086:	f003 fbc7 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800808a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800808e:	9306      	str	r3, [sp, #24]
 8008090:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8008094:	9307      	str	r3, [sp, #28]
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	f8d3 a000 	ldr.w	sl, [r3]
 800809c:	f1ba 0f00 	cmp.w	sl, #0
 80080a0:	f000 80b4 	beq.w	800820c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 80080a4:	4651      	mov	r1, sl
 80080a6:	a810      	add	r0, sp, #64	@ 0x40
 80080a8:	f003 fbb6 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80080ac:	9b01      	ldr	r3, [sp, #4]
 80080ae:	9a06      	ldr	r2, [sp, #24]
 80080b0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80080b4:	189d      	adds	r5, r3, r2
 80080b6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80080ba:	9a07      	ldr	r2, [sp, #28]
 80080bc:	2002      	movs	r0, #2
 80080be:	fb91 f1f0 	sdiv	r1, r1, r0
 80080c2:	4419      	add	r1, r3
 80080c4:	1a6d      	subs	r5, r5, r1
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80080cc:	4413      	add	r3, r2
 80080ce:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80080d2:	fb92 f2f0 	sdiv	r2, r2, r0
 80080d6:	440a      	add	r2, r1
 80080d8:	1a9b      	subs	r3, r3, r2
 80080da:	435b      	muls	r3, r3
 80080dc:	fb05 3505 	mla	r5, r5, r5, r3
 80080e0:	4f4d      	ldr	r7, [pc, #308]	@ (8008218 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 80080e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80080e4:	ac10      	add	r4, sp, #64	@ 0x40
 80080e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80080ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80080ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080f0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80080f4:	f1b9 0f0c 	cmp.w	r9, #12
 80080f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80080fc:	f04f 0303 	mov.w	r3, #3
 8008100:	bfc8      	it	gt
 8008102:	4698      	movgt	r8, r3
 8008104:	f8cd 9000 	str.w	r9, [sp]
 8008108:	f04f 0400 	mov.w	r4, #0
 800810c:	bfdc      	itt	le
 800810e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8008112:	fb92 f8f3 	sdivle	r8, r2, r3
 8008116:	1c63      	adds	r3, r4, #1
 8008118:	aa10      	add	r2, sp, #64	@ 0x40
 800811a:	f004 0401 	and.w	r4, r4, #1
 800811e:	9308      	str	r3, [sp, #32]
 8008120:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	fb93 f3f8 	sdiv	r3, r3, r8
 800812a:	b29b      	uxth	r3, r3
 800812c:	3404      	adds	r4, #4
 800812e:	f04f 0b00 	mov.w	fp, #0
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800813a:	fb13 f302 	smulbb	r3, r3, r2
 800813e:	9a01      	ldr	r2, [sp, #4]
 8008140:	b29b      	uxth	r3, r3
 8008142:	1899      	adds	r1, r3, r2
 8008144:	9305      	str	r3, [sp, #20]
 8008146:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800814a:	b209      	sxth	r1, r1
 800814c:	4299      	cmp	r1, r3
 800814e:	db4d      	blt.n	80081ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008150:	8932      	ldrh	r2, [r6, #8]
 8008152:	4413      	add	r3, r2
 8008154:	b21b      	sxth	r3, r3
 8008156:	4299      	cmp	r1, r3
 8008158:	da48      	bge.n	80081ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800815a:	9b04      	ldr	r3, [sp, #16]
 800815c:	6827      	ldr	r7, [r4, #0]
 800815e:	fb17 f703 	smulbb	r7, r7, r3
 8008162:	9b02      	ldr	r3, [sp, #8]
 8008164:	b2bf      	uxth	r7, r7
 8008166:	18fa      	adds	r2, r7, r3
 8008168:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800816c:	b212      	sxth	r2, r2
 800816e:	429a      	cmp	r2, r3
 8008170:	db3c      	blt.n	80081ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008172:	8970      	ldrh	r0, [r6, #10]
 8008174:	4403      	add	r3, r0
 8008176:	b21b      	sxth	r3, r3
 8008178:	429a      	cmp	r2, r3
 800817a:	da37      	bge.n	80081ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800817c:	2300      	movs	r3, #0
 800817e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008180:	4630      	mov	r0, r6
 8008182:	ab0b      	add	r3, sp, #44	@ 0x2c
 8008184:	f7ff ff36 	bl	8007ff4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008188:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800818a:	b37a      	cbz	r2, 80081ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800818c:	4552      	cmp	r2, sl
 800818e:	d02d      	beq.n	80081ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008190:	4611      	mov	r1, r2
 8008192:	a80e      	add	r0, sp, #56	@ 0x38
 8008194:	9209      	str	r2, [sp, #36]	@ 0x24
 8008196:	f003 fb3f 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800819a:	9a06      	ldr	r2, [sp, #24]
 800819c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80081a0:	9b01      	ldr	r3, [sp, #4]
 80081a2:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80081a6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80081aa:	4413      	add	r3, r2
 80081ac:	f04f 0e02 	mov.w	lr, #2
 80081b0:	fb91 f1fe 	sdiv	r1, r1, lr
 80081b4:	4401      	add	r1, r0
 80081b6:	1a58      	subs	r0, r3, r1
 80081b8:	9a07      	ldr	r2, [sp, #28]
 80081ba:	9b02      	ldr	r3, [sp, #8]
 80081bc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80081c0:	fb9c fcfe 	sdiv	ip, ip, lr
 80081c4:	4413      	add	r3, r2
 80081c6:	448c      	add	ip, r1
 80081c8:	eba3 030c 	sub.w	r3, r3, ip
 80081cc:	435b      	muls	r3, r3
 80081ce:	fb00 3300 	mla	r3, r0, r0, r3
 80081d2:	42ab      	cmp	r3, r5
 80081d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081d6:	d208      	bcs.n	80081ea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80081d8:	9803      	ldr	r0, [sp, #12]
 80081da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081dc:	6001      	str	r1, [r0, #0]
 80081de:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80081e0:	9805      	ldr	r0, [sp, #20]
 80081e2:	8008      	strh	r0, [r1, #0]
 80081e4:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80081e6:	461d      	mov	r5, r3
 80081e8:	800f      	strh	r7, [r1, #0]
 80081ea:	4692      	mov	sl, r2
 80081ec:	f10b 0b01 	add.w	fp, fp, #1
 80081f0:	f1bb 0f04 	cmp.w	fp, #4
 80081f4:	f104 0408 	add.w	r4, r4, #8
 80081f8:	d19c      	bne.n	8008134 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	9c08      	ldr	r4, [sp, #32]
 80081fe:	444b      	add	r3, r9
 8008200:	4544      	cmp	r4, r8
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	d187      	bne.n	8008116 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8008206:	b021      	add	sp, #132	@ 0x84
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	f04f 35ff 	mov.w	r5, #4294967295
 8008210:	e766      	b.n	80080e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8008212:	bf00      	nop
 8008214:	2001242c 	.word	0x2001242c
 8008218:	08010d00 	.word	0x08010d00

0800821c <_ZN8touchgfx4RectaNERKS0_>:
 800821c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008220:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008224:	888c      	ldrh	r4, [r1, #4]
 8008226:	f9b0 9000 	ldrsh.w	r9, [r0]
 800822a:	443c      	add	r4, r7
 800822c:	b2a4      	uxth	r4, r4
 800822e:	fa0f f884 	sxth.w	r8, r4
 8008232:	45c1      	cmp	r9, r8
 8008234:	da2f      	bge.n	8008296 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008236:	8882      	ldrh	r2, [r0, #4]
 8008238:	444a      	add	r2, r9
 800823a:	b292      	uxth	r2, r2
 800823c:	fa0f fe82 	sxth.w	lr, r2
 8008240:	4577      	cmp	r7, lr
 8008242:	da28      	bge.n	8008296 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008244:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008248:	88cb      	ldrh	r3, [r1, #6]
 800824a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800824e:	442b      	add	r3, r5
 8008250:	b21b      	sxth	r3, r3
 8008252:	429e      	cmp	r6, r3
 8008254:	da1f      	bge.n	8008296 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008256:	88c3      	ldrh	r3, [r0, #6]
 8008258:	4433      	add	r3, r6
 800825a:	b29b      	uxth	r3, r3
 800825c:	fa0f fc83 	sxth.w	ip, r3
 8008260:	4565      	cmp	r5, ip
 8008262:	da18      	bge.n	8008296 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008264:	454f      	cmp	r7, r9
 8008266:	bfb8      	it	lt
 8008268:	464f      	movlt	r7, r9
 800826a:	42b5      	cmp	r5, r6
 800826c:	bfb8      	it	lt
 800826e:	4635      	movlt	r5, r6
 8008270:	45f0      	cmp	r8, lr
 8008272:	bfd8      	it	le
 8008274:	4622      	movle	r2, r4
 8008276:	1bd2      	subs	r2, r2, r7
 8008278:	8082      	strh	r2, [r0, #4]
 800827a:	884a      	ldrh	r2, [r1, #2]
 800827c:	88c9      	ldrh	r1, [r1, #6]
 800827e:	8007      	strh	r7, [r0, #0]
 8008280:	440a      	add	r2, r1
 8008282:	b292      	uxth	r2, r2
 8008284:	b211      	sxth	r1, r2
 8008286:	458c      	cmp	ip, r1
 8008288:	bfa8      	it	ge
 800828a:	4613      	movge	r3, r2
 800828c:	1b5b      	subs	r3, r3, r5
 800828e:	80c3      	strh	r3, [r0, #6]
 8008290:	8045      	strh	r5, [r0, #2]
 8008292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008296:	2300      	movs	r3, #0
 8008298:	8003      	strh	r3, [r0, #0]
 800829a:	8043      	strh	r3, [r0, #2]
 800829c:	8083      	strh	r3, [r0, #4]
 800829e:	80c3      	strh	r3, [r0, #6]
 80082a0:	e7f7      	b.n	8008292 <_ZN8touchgfx4RectaNERKS0_+0x76>

080082a2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80082a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	dd06      	ble.n	80082b8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80082aa:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80082ae:	2800      	cmp	r0, #0
 80082b0:	bfcc      	ite	gt
 80082b2:	2000      	movgt	r0, #0
 80082b4:	2001      	movle	r0, #1
 80082b6:	4770      	bx	lr
 80082b8:	2001      	movs	r0, #1
 80082ba:	4770      	bx	lr

080082bc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80082bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c0:	2300      	movs	r3, #0
 80082c2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80082c4:	8003      	strh	r3, [r0, #0]
 80082c6:	4604      	mov	r4, r0
 80082c8:	8043      	strh	r3, [r0, #2]
 80082ca:	8083      	strh	r3, [r0, #4]
 80082cc:	80c3      	strh	r3, [r0, #6]
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	d040      	beq.n	8008354 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80082d2:	1d28      	adds	r0, r5, #4
 80082d4:	f7ff ffe5 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80082d8:	b988      	cbnz	r0, 80082fe <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff ffe1 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80082e0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80082e4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80082e8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80082ec:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80082f0:	b138      	cbz	r0, 8008302 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80082f2:	8022      	strh	r2, [r4, #0]
 80082f4:	8063      	strh	r3, [r4, #2]
 80082f6:	f8a4 e004 	strh.w	lr, [r4, #4]
 80082fa:	f8a4 c006 	strh.w	ip, [r4, #6]
 80082fe:	69ad      	ldr	r5, [r5, #24]
 8008300:	e7e5      	b.n	80082ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8008302:	f9b4 0000 	ldrsh.w	r0, [r4]
 8008306:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800830a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800830e:	4290      	cmp	r0, r2
 8008310:	4607      	mov	r7, r0
 8008312:	bfa8      	it	ge
 8008314:	4617      	movge	r7, r2
 8008316:	4472      	add	r2, lr
 8008318:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800831c:	8027      	strh	r7, [r4, #0]
 800831e:	4299      	cmp	r1, r3
 8008320:	460e      	mov	r6, r1
 8008322:	4440      	add	r0, r8
 8008324:	bfa8      	it	ge
 8008326:	461e      	movge	r6, r3
 8008328:	4471      	add	r1, lr
 800832a:	4463      	add	r3, ip
 800832c:	b200      	sxth	r0, r0
 800832e:	b212      	sxth	r2, r2
 8008330:	b209      	sxth	r1, r1
 8008332:	b21b      	sxth	r3, r3
 8008334:	4290      	cmp	r0, r2
 8008336:	bfac      	ite	ge
 8008338:	ebc7 0200 	rsbge	r2, r7, r0
 800833c:	ebc7 0202 	rsblt	r2, r7, r2
 8008340:	4299      	cmp	r1, r3
 8008342:	bfac      	ite	ge
 8008344:	ebc6 0301 	rsbge	r3, r6, r1
 8008348:	ebc6 0303 	rsblt	r3, r6, r3
 800834c:	8066      	strh	r6, [r4, #2]
 800834e:	80a2      	strh	r2, [r4, #4]
 8008350:	80e3      	strh	r3, [r4, #6]
 8008352:	e7d4      	b.n	80082fe <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8008354:	4620      	mov	r0, r4
 8008356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800835a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800835a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800835e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8008362:	b383      	cbz	r3, 80083c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8008364:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008366:	b374      	cbz	r4, 80083c6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8008368:	f9b1 5000 	ldrsh.w	r5, [r1]
 800836c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8008370:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8008374:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8008378:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800837c:	b303      	cbz	r3, 80083c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800837e:	4668      	mov	r0, sp
 8008380:	1d21      	adds	r1, r4, #4
 8008382:	f8ad 5000 	strh.w	r5, [sp]
 8008386:	f8ad 6002 	strh.w	r6, [sp, #2]
 800838a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800838e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8008392:	f7ff ff43 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 8008396:	4668      	mov	r0, sp
 8008398:	f7ff ff83 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800839c:	b980      	cbnz	r0, 80083c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800839e:	f8bd 3000 	ldrh.w	r3, [sp]
 80083a2:	88a2      	ldrh	r2, [r4, #4]
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	f8ad 3000 	strh.w	r3, [sp]
 80083aa:	88e2      	ldrh	r2, [r4, #6]
 80083ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80083b0:	1a9b      	subs	r3, r3, r2
 80083b2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	4669      	mov	r1, sp
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	4620      	mov	r0, r4
 80083be:	4798      	blx	r3
 80083c0:	69a4      	ldr	r4, [r4, #24]
 80083c2:	2c00      	cmp	r4, #0
 80083c4:	d1d8      	bne.n	8008378 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80083c6:	b002      	add	sp, #8
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083cc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80083cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ce:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80083d2:	460d      	mov	r5, r1
 80083d4:	4616      	mov	r6, r2
 80083d6:	b323      	cbz	r3, 8008422 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80083d8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80083da:	b314      	cbz	r4, 8008422 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80083dc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80083e0:	b1eb      	cbz	r3, 800841e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80083e2:	6828      	ldr	r0, [r5, #0]
 80083e4:	6869      	ldr	r1, [r5, #4]
 80083e6:	466b      	mov	r3, sp
 80083e8:	c303      	stmia	r3!, {r0, r1}
 80083ea:	4668      	mov	r0, sp
 80083ec:	1d21      	adds	r1, r4, #4
 80083ee:	f7ff ff15 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 80083f2:	4668      	mov	r0, sp
 80083f4:	f7ff ff55 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80083f8:	b988      	cbnz	r0, 800841e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80083fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80083fe:	88a2      	ldrh	r2, [r4, #4]
 8008400:	1a9b      	subs	r3, r3, r2
 8008402:	f8ad 3000 	strh.w	r3, [sp]
 8008406:	88e2      	ldrh	r2, [r4, #6]
 8008408:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	4632      	mov	r2, r6
 8008416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008418:	4669      	mov	r1, sp
 800841a:	4620      	mov	r0, r4
 800841c:	4798      	blx	r3
 800841e:	69a4      	ldr	r4, [r4, #24]
 8008420:	e7db      	b.n	80083da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8008422:	b002      	add	sp, #8
 8008424:	bd70      	pop	{r4, r5, r6, pc}

08008426 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8008426:	b513      	push	{r0, r1, r4, lr}
 8008428:	6803      	ldr	r3, [r0, #0]
 800842a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800842e:	2300      	movs	r3, #0
 8008430:	e9cd 3300 	strd	r3, r3, [sp]
 8008434:	466b      	mov	r3, sp
 8008436:	47a0      	blx	r4
 8008438:	b002      	add	sp, #8
 800843a:	bd10      	pop	{r4, pc}

0800843c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800843c:	2301      	movs	r3, #1
 800843e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8008442:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8008446:	4770      	bx	lr

08008448 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8008448:	2301      	movs	r3, #1
 800844a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800844e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8008452:	4770      	bx	lr

08008454 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8008454:	6843      	ldr	r3, [r0, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	725a      	strb	r2, [r3, #9]
 800845a:	6840      	ldr	r0, [r0, #4]
 800845c:	6803      	ldr	r3, [r0, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	4718      	bx	r3

08008462 <_ZN8touchgfx3HAL8flushDMAEv>:
 8008462:	6840      	ldr	r0, [r0, #4]
 8008464:	6803      	ldr	r3, [r0, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	4718      	bx	r3

0800846a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800846a:	b530      	push	{r4, r5, lr}
 800846c:	b08b      	sub	sp, #44	@ 0x2c
 800846e:	6804      	ldr	r4, [r0, #0]
 8008470:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8008474:	9509      	str	r5, [sp, #36]	@ 0x24
 8008476:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800847a:	9508      	str	r5, [sp, #32]
 800847c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8008480:	9507      	str	r5, [sp, #28]
 8008482:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8008486:	9506      	str	r5, [sp, #24]
 8008488:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800848c:	9505      	str	r5, [sp, #20]
 800848e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8008492:	9504      	str	r5, [sp, #16]
 8008494:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8008498:	9503      	str	r5, [sp, #12]
 800849a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800849e:	9502      	str	r5, [sp, #8]
 80084a0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80084a4:	e9cd 3500 	strd	r3, r5, [sp]
 80084a8:	4613      	mov	r3, r2
 80084aa:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80084ac:	2200      	movs	r2, #0
 80084ae:	47a0      	blx	r4
 80084b0:	b00b      	add	sp, #44	@ 0x2c
 80084b2:	bd30      	pop	{r4, r5, pc}

080084b4 <_ZN8touchgfx3HAL10beginFrameEv>:
 80084b4:	4b04      	ldr	r3, [pc, #16]	@ (80084c8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	b123      	cbz	r3, 80084c4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80084ba:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80084be:	f080 0001 	eor.w	r0, r0, #1
 80084c2:	4770      	bx	lr
 80084c4:	2001      	movs	r0, #1
 80084c6:	4770      	bx	lr
 80084c8:	2001242a 	.word	0x2001242a

080084cc <_ZN8touchgfx3HAL8endFrameEv>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	6840      	ldr	r0, [r0, #4]
 80084d2:	6803      	ldr	r3, [r0, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4798      	blx	r3
 80084d8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80084dc:	b113      	cbz	r3, 80084e4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80084de:	2301      	movs	r3, #1
 80084e0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80084e4:	bd10      	pop	{r4, pc}

080084e6 <_ZN8touchgfx3HAL10initializeEv>:
 80084e6:	b510      	push	{r4, lr}
 80084e8:	4604      	mov	r4, r0
 80084ea:	f7f8 faa3 	bl	8000a34 <_ZN8touchgfx10OSWrappers10initializeEv>
 80084ee:	f7f8 f9ab 	bl	8000848 <_ZN8touchgfx4GPIO4initEv>
 80084f2:	6860      	ldr	r0, [r4, #4]
 80084f4:	6803      	ldr	r3, [r0, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4798      	blx	r3
 80084fa:	68e0      	ldr	r0, [r4, #12]
 80084fc:	6803      	ldr	r3, [r0, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	4798      	blx	r3
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	4620      	mov	r0, r4
 8008506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800850c:	4718      	bx	r3
	...

08008510 <_ZN8touchgfx3HAL4tickEv>:
 8008510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008512:	6803      	ldr	r3, [r0, #0]
 8008514:	4d5b      	ldr	r5, [pc, #364]	@ (8008684 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8008516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800851a:	4604      	mov	r4, r0
 800851c:	4798      	blx	r3
 800851e:	2800      	cmp	r0, #0
 8008520:	f000 8095 	beq.w	800864e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8008524:	2001      	movs	r0, #1
 8008526:	f7f8 f90d 	bl	8000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800852a:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800852e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8008532:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8008536:	2600      	movs	r6, #0
 8008538:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800853c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8008540:	b133      	cbz	r3, 8008550 <_ZN8touchgfx3HAL4tickEv+0x40>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	4620      	mov	r0, r4
 8008546:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800854a:	4798      	blx	r3
 800854c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8008550:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8008554:	6862      	ldr	r2, [r4, #4]
 8008556:	f083 0301 	eor.w	r3, r3, #1
 800855a:	7253      	strb	r3, [r2, #9]
 800855c:	2601      	movs	r6, #1
 800855e:	702e      	strb	r6, [r5, #0]
 8008560:	f002 f820 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
 8008564:	6803      	ldr	r3, [r0, #0]
 8008566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008568:	4798      	blx	r3
 800856a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800856e:	b90b      	cbnz	r3, 8008574 <_ZN8touchgfx3HAL4tickEv+0x64>
 8008570:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8008574:	f002 f816 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
 8008578:	6803      	ldr	r3, [r0, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	4798      	blx	r3
 800857e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008580:	6803      	ldr	r3, [r0, #0]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	4798      	blx	r3
 8008586:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800858a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800858e:	3b01      	subs	r3, #1
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8008596:	b10a      	cbz	r2, 800859c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1eb      	bne.n	8008574 <_ZN8touchgfx3HAL4tickEv+0x64>
 800859c:	4a3a      	ldr	r2, [pc, #232]	@ (8008688 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800859e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 80085a2:	7813      	ldrb	r3, [r2, #0]
 80085a4:	3301      	adds	r3, #1
 80085a6:	b25b      	sxtb	r3, r3
 80085a8:	4299      	cmp	r1, r3
 80085aa:	7013      	strb	r3, [r2, #0]
 80085ac:	dc10      	bgt.n	80085d0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80085ae:	68e0      	ldr	r0, [r4, #12]
 80085b0:	2300      	movs	r3, #0
 80085b2:	7013      	strb	r3, [r2, #0]
 80085b4:	6803      	ldr	r3, [r0, #0]
 80085b6:	aa03      	add	r2, sp, #12
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	a902      	add	r1, sp, #8
 80085bc:	4798      	blx	r3
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d050      	beq.n	8008666 <_ZN8touchgfx3HAL4tickEv+0x156>
 80085c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80085c8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80085cc:	4620      	mov	r0, r4
 80085ce:	4798      	blx	r3
 80085d0:	6960      	ldr	r0, [r4, #20]
 80085d2:	2300      	movs	r3, #0
 80085d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80085d8:	b158      	cbz	r0, 80085f2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80085da:	6803      	ldr	r3, [r0, #0]
 80085dc:	f10d 0107 	add.w	r1, sp, #7
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	4798      	blx	r3
 80085e4:	b128      	cbz	r0, 80085f2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80085e6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80085e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80085ec:	6803      	ldr	r3, [r0, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	4798      	blx	r3
 80085f2:	f104 001c 	add.w	r0, r4, #28
 80085f6:	f007 fa55 	bl	800faa4 <_ZN8touchgfx8Gestures4tickEv>
 80085fa:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80085fe:	b30b      	cbz	r3, 8008644 <_ZN8touchgfx3HAL4tickEv+0x134>
 8008600:	6920      	ldr	r0, [r4, #16]
 8008602:	6803      	ldr	r3, [r0, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	4798      	blx	r3
 8008608:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800860a:	4606      	mov	r6, r0
 800860c:	b903      	cbnz	r3, 8008610 <_ZN8touchgfx3HAL4tickEv+0x100>
 800860e:	6760      	str	r0, [r4, #116]	@ 0x74
 8008610:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008612:	4a1e      	ldr	r2, [pc, #120]	@ (800868c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8008614:	1af3      	subs	r3, r6, r3
 8008616:	4293      	cmp	r3, r2
 8008618:	d914      	bls.n	8008644 <_ZN8touchgfx3HAL4tickEv+0x134>
 800861a:	6920      	ldr	r0, [r4, #16]
 800861c:	6803      	ldr	r3, [r0, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	4798      	blx	r3
 8008622:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008624:	2264      	movs	r2, #100	@ 0x64
 8008626:	1af3      	subs	r3, r6, r3
 8008628:	fbb3 f3f2 	udiv	r3, r3, r2
 800862c:	fbb0 f0f3 	udiv	r0, r0, r3
 8008630:	2800      	cmp	r0, #0
 8008632:	dc1d      	bgt.n	8008670 <_ZN8touchgfx3HAL4tickEv+0x160>
 8008634:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8008638:	6920      	ldr	r0, [r4, #16]
 800863a:	6803      	ldr	r3, [r0, #0]
 800863c:	2100      	movs	r1, #0
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	4798      	blx	r3
 8008642:	6766      	str	r6, [r4, #116]	@ 0x74
 8008644:	f001 ffae 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
 8008648:	6803      	ldr	r3, [r0, #0]
 800864a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864c:	4798      	blx	r3
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	4620      	mov	r0, r4
 8008652:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008656:	4798      	blx	r3
 8008658:	2001      	movs	r0, #1
 800865a:	f7f8 f89d 	bl	8000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800865e:	2300      	movs	r3, #0
 8008660:	702b      	strb	r3, [r5, #0]
 8008662:	b004      	add	sp, #16
 8008664:	bd70      	pop	{r4, r5, r6, pc}
 8008666:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800866a:	4620      	mov	r0, r4
 800866c:	4798      	blx	r3
 800866e:	e7af      	b.n	80085d0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8008670:	2863      	cmp	r0, #99	@ 0x63
 8008672:	bfcb      	itete	gt
 8008674:	2300      	movgt	r3, #0
 8008676:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800867a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800867e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8008682:	e7d9      	b.n	8008638 <_ZN8touchgfx3HAL4tickEv+0x128>
 8008684:	20012430 	.word	0x20012430
 8008688:	20012431 	.word	0x20012431
 800868c:	05f5e100 	.word	0x05f5e100

08008690 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8008690:	b510      	push	{r4, lr}
 8008692:	4604      	mov	r4, r0
 8008694:	f7f8 f9fe 	bl	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8008698:	6863      	ldr	r3, [r4, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	729a      	strb	r2, [r3, #10]
 800869e:	bd10      	pop	{r4, pc}

080086a0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80086a0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80086a2:	301c      	adds	r0, #28
 80086a4:	f007 b9fc 	b.w	800faa0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080086a8 <_ZN8touchgfx3HAL5touchEll>:
 80086a8:	b530      	push	{r4, r5, lr}
 80086aa:	b087      	sub	sp, #28
 80086ac:	4604      	mov	r4, r0
 80086ae:	a804      	add	r0, sp, #16
 80086b0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80086b4:	f001 fd5e 	bl	800a174 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80086b8:	9b04      	ldr	r3, [sp, #16]
 80086ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80086be:	a906      	add	r1, sp, #24
 80086c0:	9b05      	ldr	r3, [sp, #20]
 80086c2:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80086c6:	a803      	add	r0, sp, #12
 80086c8:	f001 fda6 	bl	800a218 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80086cc:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80086d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80086d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80086d8:	f104 001c 	add.w	r0, r4, #28
 80086dc:	b189      	cbz	r1, 8008702 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80086de:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80086e8:	4613      	mov	r3, r2
 80086ea:	462a      	mov	r2, r5
 80086ec:	f007 f9e8 	bl	800fac0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80086f0:	b128      	cbz	r0, 80086fe <_ZN8touchgfx3HAL5touchEll+0x56>
 80086f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80086f6:	6623      	str	r3, [r4, #96]	@ 0x60
 80086f8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80086fc:	6663      	str	r3, [r4, #100]	@ 0x64
 80086fe:	b007      	add	sp, #28
 8008700:	bd30      	pop	{r4, r5, pc}
 8008702:	f007 fa1d 	bl	800fb40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008706:	2301      	movs	r3, #1
 8008708:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800870c:	e7f1      	b.n	80086f2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800870e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800870e:	b510      	push	{r4, lr}
 8008710:	2b00      	cmp	r3, #0
 8008712:	d046      	beq.n	80087a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008714:	ea81 0002 	eor.w	r0, r1, r2
 8008718:	07c4      	lsls	r4, r0, #31
 800871a:	d508      	bpl.n	800872e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800871c:	440b      	add	r3, r1
 800871e:	3a01      	subs	r2, #1
 8008720:	428b      	cmp	r3, r1
 8008722:	d93e      	bls.n	80087a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008724:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008728:	f801 0b01 	strb.w	r0, [r1], #1
 800872c:	e7f8      	b.n	8008720 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800872e:	07d0      	lsls	r0, r2, #31
 8008730:	bf42      	ittt	mi
 8008732:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8008736:	f801 0b01 	strbmi.w	r0, [r1], #1
 800873a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800873e:	2b01      	cmp	r3, #1
 8008740:	d911      	bls.n	8008766 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008742:	ea81 0402 	eor.w	r4, r1, r2
 8008746:	07a4      	lsls	r4, r4, #30
 8008748:	4610      	mov	r0, r2
 800874a:	d022      	beq.n	8008792 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800874c:	f023 0401 	bic.w	r4, r3, #1
 8008750:	440c      	add	r4, r1
 8008752:	428c      	cmp	r4, r1
 8008754:	4602      	mov	r2, r0
 8008756:	d904      	bls.n	8008762 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8008758:	8812      	ldrh	r2, [r2, #0]
 800875a:	f821 2b02 	strh.w	r2, [r1], #2
 800875e:	3002      	adds	r0, #2
 8008760:	e7f7      	b.n	8008752 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	f023 0003 	bic.w	r0, r3, #3
 800876a:	4408      	add	r0, r1
 800876c:	4288      	cmp	r0, r1
 800876e:	4614      	mov	r4, r2
 8008770:	d904      	bls.n	800877c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8008772:	6824      	ldr	r4, [r4, #0]
 8008774:	f841 4b04 	str.w	r4, [r1], #4
 8008778:	3204      	adds	r2, #4
 800877a:	e7f7      	b.n	800876c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	440b      	add	r3, r1
 8008782:	3a01      	subs	r2, #1
 8008784:	428b      	cmp	r3, r1
 8008786:	d90c      	bls.n	80087a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008788:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800878c:	f801 0b01 	strb.w	r0, [r1], #1
 8008790:	e7f8      	b.n	8008784 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8008792:	0790      	lsls	r0, r2, #30
 8008794:	d0e7      	beq.n	8008766 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008796:	f832 0b02 	ldrh.w	r0, [r2], #2
 800879a:	f821 0b02 	strh.w	r0, [r1], #2
 800879e:	3b02      	subs	r3, #2
 80087a0:	e7e1      	b.n	8008766 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80087a2:	2001      	movs	r0, #1
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <_ZN8touchgfx3HAL7noTouchEv>:
 80087a6:	b510      	push	{r4, lr}
 80087a8:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80087ac:	4604      	mov	r4, r0
 80087ae:	b153      	cbz	r3, 80087c6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80087b0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80087b4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80087b8:	2101      	movs	r1, #1
 80087ba:	301c      	adds	r0, #28
 80087bc:	f007 f9c0 	bl	800fb40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80087c0:	2300      	movs	r3, #0
 80087c2:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80087c6:	bd10      	pop	{r4, pc}

080087c8 <_ZN8touchgfx3HAL3lcdEv>:
 80087c8:	4b04      	ldr	r3, [pc, #16]	@ (80087dc <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80087d0:	b10a      	cbz	r2, 80087d6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80087d2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80087d4:	b900      	cbnz	r0, 80087d8 <_ZN8touchgfx3HAL3lcdEv+0x10>
 80087d6:	6898      	ldr	r0, [r3, #8]
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	2001242c 	.word	0x2001242c

080087e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80087e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087e4:	b085      	sub	sp, #20
 80087e6:	ad04      	add	r5, sp, #16
 80087e8:	4604      	mov	r4, r0
 80087ea:	2000      	movs	r0, #0
 80087ec:	f845 0d04 	str.w	r0, [r5, #-4]!
 80087f0:	69a0      	ldr	r0, [r4, #24]
 80087f2:	6806      	ldr	r6, [r0, #0]
 80087f4:	9501      	str	r5, [sp, #4]
 80087f6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80087fa:	9500      	str	r5, [sp, #0]
 80087fc:	6835      	ldr	r5, [r6, #0]
 80087fe:	4699      	mov	r9, r3
 8008800:	460f      	mov	r7, r1
 8008802:	4690      	mov	r8, r2
 8008804:	47a8      	blx	r5
 8008806:	4d10      	ldr	r5, [pc, #64]	@ (8008848 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8008808:	4606      	mov	r6, r0
 800880a:	f8a5 9000 	strh.w	r9, [r5]
 800880e:	f7ff ffdb 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 8008812:	6803      	ldr	r3, [r0, #0]
 8008814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008816:	4798      	blx	r3
 8008818:	b128      	cbz	r0, 8008826 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800881a:	2801      	cmp	r0, #1
 800881c:	d00b      	beq.n	8008836 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800881e:	4630      	mov	r0, r6
 8008820:	b005      	add	sp, #20
 8008822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008826:	882b      	ldrh	r3, [r5, #0]
 8008828:	fb08 7203 	mla	r2, r8, r3, r7
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8008832:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008834:	e7f3      	b.n	800881e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008836:	882a      	ldrh	r2, [r5, #0]
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	fb08 7202 	mla	r2, r8, r2, r7
 800883e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008842:	1a9a      	subs	r2, r3, r2
 8008844:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8008846:	e7ea      	b.n	800881e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008848:	20012426 	.word	0x20012426

0800884c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800884c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800884e:	b08b      	sub	sp, #44	@ 0x2c
 8008850:	4617      	mov	r7, r2
 8008852:	4604      	mov	r4, r0
 8008854:	460e      	mov	r6, r1
 8008856:	461d      	mov	r5, r3
 8008858:	f7ff ffb6 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 800885c:	6803      	ldr	r3, [r0, #0]
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	4798      	blx	r3
 8008862:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8008866:	9007      	str	r0, [sp, #28]
 8008868:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800886c:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800886e:	6822      	ldr	r2, [r4, #0]
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	9306      	str	r3, [sp, #24]
 8008874:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8008878:	9305      	str	r3, [sp, #20]
 800887a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008884:	9303      	str	r3, [sp, #12]
 8008886:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800888a:	9302      	str	r3, [sp, #8]
 800888c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8008890:	e9cd 5300 	strd	r5, r3, [sp]
 8008894:	4631      	mov	r1, r6
 8008896:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8008898:	463b      	mov	r3, r7
 800889a:	2200      	movs	r2, #0
 800889c:	4620      	mov	r0, r4
 800889e:	47a8      	blx	r5
 80088a0:	b00b      	add	sp, #44	@ 0x2c
 80088a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088a4:	20012426 	.word	0x20012426

080088a8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80088a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088ac:	4698      	mov	r8, r3
 80088ae:	6803      	ldr	r3, [r0, #0]
 80088b0:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80088b2:	4b15      	ldr	r3, [pc, #84]	@ (8008908 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80088b4:	b08b      	sub	sp, #44	@ 0x2c
 80088b6:	4617      	mov	r7, r2
 80088b8:	f8b3 9000 	ldrh.w	r9, [r3]
 80088bc:	460e      	mov	r6, r1
 80088be:	4604      	mov	r4, r0
 80088c0:	f7ff ff82 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 80088c4:	6803      	ldr	r3, [r0, #0]
 80088c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c8:	4798      	blx	r3
 80088ca:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80088ce:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80088d2:	2302      	movs	r3, #2
 80088d4:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80088d8:	2301      	movs	r3, #1
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80088e6:	9303      	str	r3, [sp, #12]
 80088e8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80088ec:	9302      	str	r3, [sp, #8]
 80088ee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80088f2:	2200      	movs	r2, #0
 80088f4:	e9cd 8300 	strd	r8, r3, [sp]
 80088f8:	4631      	mov	r1, r6
 80088fa:	463b      	mov	r3, r7
 80088fc:	4620      	mov	r0, r4
 80088fe:	47a8      	blx	r5
 8008900:	b00b      	add	sp, #44	@ 0x2c
 8008902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008906:	bf00      	nop
 8008908:	20012426 	.word	0x20012426

0800890c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800890c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008910:	4698      	mov	r8, r3
 8008912:	6803      	ldr	r3, [r0, #0]
 8008914:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8008916:	4b11      	ldr	r3, [pc, #68]	@ (800895c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8008918:	b087      	sub	sp, #28
 800891a:	f8b3 9000 	ldrh.w	r9, [r3]
 800891e:	460e      	mov	r6, r1
 8008920:	4617      	mov	r7, r2
 8008922:	4604      	mov	r4, r0
 8008924:	f7ff ff50 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 8008928:	6803      	ldr	r3, [r0, #0]
 800892a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892c:	4798      	blx	r3
 800892e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8008932:	f8cd 900c 	str.w	r9, [sp, #12]
 8008936:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800893a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800893e:	9302      	str	r3, [sp, #8]
 8008940:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8008944:	9301      	str	r3, [sp, #4]
 8008946:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	463a      	mov	r2, r7
 800894e:	4643      	mov	r3, r8
 8008950:	4631      	mov	r1, r6
 8008952:	4620      	mov	r0, r4
 8008954:	47a8      	blx	r5
 8008956:	b007      	add	sp, #28
 8008958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895c:	20012426 	.word	0x20012426

08008960 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	4604      	mov	r4, r0
 8008966:	b08f      	sub	sp, #60	@ 0x3c
 8008968:	4610      	mov	r0, r2
 800896a:	460d      	mov	r5, r1
 800896c:	4691      	mov	r9, r2
 800896e:	461e      	mov	r6, r3
 8008970:	f004 fa5a 	bl	800ce28 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f000 809d 	beq.w	8008ab4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8008b18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8008980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008982:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8008b1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8008986:	4f61      	ldr	r7, [pc, #388]	@ (8008b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008988:	4620      	mov	r0, r4
 800898a:	4798      	blx	r3
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	4620      	mov	r0, r4
 8008990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008992:	4798      	blx	r3
 8008994:	f8bb 3000 	ldrh.w	r3, [fp]
 8008998:	9301      	str	r3, [sp, #4]
 800899a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800899e:	f8ba 3000 	ldrh.w	r3, [sl]
 80089a2:	9302      	str	r3, [sp, #8]
 80089a4:	883b      	ldrh	r3, [r7, #0]
 80089a6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80089aa:	9303      	str	r3, [sp, #12]
 80089ac:	4b58      	ldr	r3, [pc, #352]	@ (8008b10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80089ae:	9305      	str	r3, [sp, #20]
 80089b0:	881a      	ldrh	r2, [r3, #0]
 80089b2:	9204      	str	r2, [sp, #16]
 80089b4:	4640      	mov	r0, r8
 80089b6:	f004 facb 	bl	800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80089ba:	8038      	strh	r0, [r7, #0]
 80089bc:	4640      	mov	r0, r8
 80089be:	f004 fafb 	bl	800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80089c2:	9b05      	ldr	r3, [sp, #20]
 80089c4:	b280      	uxth	r0, r0
 80089c6:	8018      	strh	r0, [r3, #0]
 80089c8:	4b52      	ldr	r3, [pc, #328]	@ (8008b14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d174      	bne.n	8008aba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80089d0:	883b      	ldrh	r3, [r7, #0]
 80089d2:	f8ab 3000 	strh.w	r3, [fp]
 80089d6:	f8aa 0000 	strh.w	r0, [sl]
 80089da:	4648      	mov	r0, r9
 80089dc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80089e0:	f004 fa22 	bl	800ce28 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80089e4:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80089e8:	2200      	movs	r2, #0
 80089ea:	4611      	mov	r1, r2
 80089ec:	4628      	mov	r0, r5
 80089ee:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80089f2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80089f6:	f7f9 ff76 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 80089fa:	2301      	movs	r3, #1
 80089fc:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8008a00:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8008a04:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dd5c      	ble.n	8008ac6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8008a0c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dd58      	ble.n	8008ac6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8008a14:	462a      	mov	r2, r5
 8008a16:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a18:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008a1c:	6851      	ldr	r1, [r2, #4]
 8008a1e:	c303      	stmia	r3!, {r0, r1}
 8008a20:	4631      	mov	r1, r6
 8008a22:	a80a      	add	r0, sp, #40	@ 0x28
 8008a24:	f7ff fbfa 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 8008a28:	4b38      	ldr	r3, [pc, #224]	@ (8008b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008a2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008a2e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8008a32:	2100      	movs	r1, #0
 8008a34:	aa0a      	add	r2, sp, #40	@ 0x28
 8008a36:	4b36      	ldr	r3, [pc, #216]	@ (8008b10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008a38:	910c      	str	r1, [sp, #48]	@ 0x30
 8008a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a42:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8008a46:	ab08      	add	r3, sp, #32
 8008a48:	e883 0003 	stmia.w	r3, {r0, r1}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	a90c      	add	r1, sp, #48	@ 0x30
 8008a50:	f7ff fbe4 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 8008a54:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d13c      	bne.n	8008ad4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8008a60:	2600      	movs	r6, #0
 8008a62:	682a      	ldr	r2, [r5, #0]
 8008a64:	696b      	ldr	r3, [r5, #20]
 8008a66:	616e      	str	r6, [r5, #20]
 8008a68:	9305      	str	r3, [sp, #20]
 8008a6a:	6892      	ldr	r2, [r2, #8]
 8008a6c:	a908      	add	r1, sp, #32
 8008a6e:	4628      	mov	r0, r5
 8008a70:	4790      	blx	r2
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	616b      	str	r3, [r5, #20]
 8008a76:	4652      	mov	r2, sl
 8008a78:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8008a84:	f7f9 ff2f 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 8008a88:	4b23      	ldr	r3, [pc, #140]	@ (8008b18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8008a8a:	9a01      	ldr	r2, [sp, #4]
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	4b23      	ldr	r3, [pc, #140]	@ (8008b1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8008a90:	9a02      	ldr	r2, [sp, #8]
 8008a92:	801a      	strh	r2, [r3, #0]
 8008a94:	4b1d      	ldr	r3, [pc, #116]	@ (8008b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008a96:	9a03      	ldr	r2, [sp, #12]
 8008a98:	801a      	strh	r2, [r3, #0]
 8008a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008a9c:	9a04      	ldr	r2, [sp, #16]
 8008a9e:	801a      	strh	r2, [r3, #0]
 8008aa0:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aaa:	4798      	blx	r3
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab2:	4798      	blx	r3
 8008ab4:	b00f      	add	sp, #60	@ 0x3c
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	883b      	ldrh	r3, [r7, #0]
 8008abc:	f8ab 0000 	strh.w	r0, [fp]
 8008ac0:	f8aa 3000 	strh.w	r3, [sl]
 8008ac4:	e789      	b.n	80089da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	ab0a      	add	r3, sp, #40	@ 0x28
 8008aca:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008ace:	6851      	ldr	r1, [r2, #4]
 8008ad0:	c303      	stmia	r3!, {r0, r1}
 8008ad2:	e7a9      	b.n	8008a28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8008ad4:	a807      	add	r0, sp, #28
 8008ad6:	f004 fbb1 	bl	800d23c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008ada:	4606      	mov	r6, r0
 8008adc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008ade:	6803      	ldr	r3, [r0, #0]
 8008ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae2:	4798      	blx	r3
 8008ae4:	4286      	cmp	r6, r0
 8008ae6:	d1b8      	bne.n	8008a5a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8008ae8:	f7ff fe6e 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 8008aec:	6803      	ldr	r3, [r0, #0]
 8008aee:	4606      	mov	r6, r0
 8008af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	a807      	add	r0, sp, #28
 8008af6:	f004 fba1 	bl	800d23c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008afa:	9b05      	ldr	r3, [sp, #20]
 8008afc:	4601      	mov	r1, r0
 8008afe:	4630      	mov	r0, r6
 8008b00:	4798      	blx	r3
 8008b02:	f080 0001 	eor.w	r0, r0, #1
 8008b06:	b2c0      	uxtb	r0, r0
 8008b08:	e7a8      	b.n	8008a5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8008b0a:	bf00      	nop
 8008b0c:	20012420 	.word	0x20012420
 8008b10:	20012422 	.word	0x20012422
 8008b14:	20012424 	.word	0x20012424
 8008b18:	20012426 	.word	0x20012426
 8008b1c:	20012428 	.word	0x20012428

08008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	4b07      	ldr	r3, [pc, #28]	@ (8008b40 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	4604      	mov	r4, r0
 8008b28:	b13b      	cbz	r3, 8008b3a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8008b2a:	6803      	ldr	r3, [r0, #0]
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2e:	4798      	blx	r3
 8008b30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b32:	4283      	cmp	r3, r0
 8008b34:	d101      	bne.n	8008b3a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8008b36:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008b3c:	e7fc      	b.n	8008b38 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8008b3e:	bf00      	nop
 8008b40:	2001242a 	.word	0x2001242a

08008b44 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8008b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	b08a      	sub	sp, #40	@ 0x28
 8008b4a:	461d      	mov	r5, r3
 8008b4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b50:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008b54:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8008b58:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008b5c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008b60:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008b64:	2400      	movs	r4, #0
 8008b66:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008b6a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8008b6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008b72:	4690      	mov	r8, r2
 8008b74:	4607      	mov	r7, r0
 8008b76:	9404      	str	r4, [sp, #16]
 8008b78:	f88d 4020 	strb.w	r4, [sp, #32]
 8008b7c:	f7ff ffd0 	bl	8008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008b80:	fb06 8505 	mla	r5, r6, r5, r8
 8008b84:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	9505      	str	r5, [sp, #20]
 8008b8c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8008b90:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8008b94:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8008b98:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8008b9c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8008ba0:	6803      	ldr	r3, [r0, #0]
 8008ba2:	a901      	add	r1, sp, #4
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	4798      	blx	r3
 8008ba8:	b00a      	add	sp, #40	@ 0x28
 8008baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008bae <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8008bae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bb2:	b08b      	sub	sp, #44	@ 0x2c
 8008bb4:	2400      	movs	r4, #0
 8008bb6:	461d      	mov	r5, r3
 8008bb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008bbc:	4688      	mov	r8, r1
 8008bbe:	4691      	mov	r9, r2
 8008bc0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8008bc4:	9404      	str	r4, [sp, #16]
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bcc:	f7ff ffa8 	bl	8008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008bd0:	fb06 9505 	mla	r5, r6, r5, r9
 8008bd4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008bd8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008bdc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008be0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	9505      	str	r5, [sp, #20]
 8008be8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008bec:	f8ad 401c 	strh.w	r4, [sp, #28]
 8008bf0:	f8ad 601e 	strh.w	r6, [sp, #30]
 8008bf4:	f8cd 8010 	str.w	r8, [sp, #16]
 8008bf8:	f8ad 4020 	strh.w	r4, [sp, #32]
 8008bfc:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8008c00:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8008c04:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8008c08:	6803      	ldr	r3, [r0, #0]
 8008c0a:	a901      	add	r1, sp, #4
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	4798      	blx	r3
 8008c10:	b00b      	add	sp, #44	@ 0x2c
 8008c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08008c18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8008c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1c:	b08a      	sub	sp, #40	@ 0x28
 8008c1e:	4698      	mov	r8, r3
 8008c20:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8008c24:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8008c28:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8008c2c:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8008c30:	2300      	movs	r3, #0
 8008c32:	2d0b      	cmp	r5, #11
 8008c34:	4606      	mov	r6, r0
 8008c36:	9304      	str	r3, [sp, #16]
 8008c38:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8008c3c:	d138      	bne.n	8008cb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8008c3e:	2380      	movs	r3, #128	@ 0x80
 8008c40:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008c44:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008c48:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008c4c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008c50:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008c54:	f88d 0020 	strb.w	r0, [sp, #32]
 8008c58:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8008c5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008c60:	4630      	mov	r0, r6
 8008c62:	9203      	str	r2, [sp, #12]
 8008c64:	f7ff ff5c 	bl	8008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008c68:	2c0b      	cmp	r4, #11
 8008c6a:	bf98      	it	ls
 8008c6c:	4b1b      	ldrls	r3, [pc, #108]	@ (8008cdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8008c6e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8008c72:	bf98      	it	ls
 8008c74:	5d19      	ldrbls	r1, [r3, r4]
 8008c76:	f8ad 701e 	strh.w	r7, [sp, #30]
 8008c7a:	bf88      	it	hi
 8008c7c:	2100      	movhi	r1, #0
 8008c7e:	fb02 8307 	mla	r3, r2, r7, r8
 8008c82:	10c9      	asrs	r1, r1, #3
 8008c84:	fb01 0003 	mla	r0, r1, r3, r0
 8008c88:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8008c8c:	9005      	str	r0, [sp, #20]
 8008c8e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8008c92:	6870      	ldr	r0, [r6, #4]
 8008c94:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8008c9e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8008ca2:	6803      	ldr	r3, [r0, #0]
 8008ca4:	a901      	add	r1, sp, #4
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	4798      	blx	r3
 8008caa:	b00a      	add	sp, #40	@ 0x28
 8008cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb0:	2d02      	cmp	r5, #2
 8008cb2:	d109      	bne.n	8008cc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8008cb4:	28ff      	cmp	r0, #255	@ 0xff
 8008cb6:	d105      	bne.n	8008cc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8008cb8:	f1bc 0f00 	cmp.w	ip, #0
 8008cbc:	bf14      	ite	ne
 8008cbe:	2340      	movne	r3, #64	@ 0x40
 8008cc0:	2320      	moveq	r3, #32
 8008cc2:	e7bd      	b.n	8008c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008cc4:	2340      	movs	r3, #64	@ 0x40
 8008cc6:	e7bb      	b.n	8008c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008cc8:	28ff      	cmp	r0, #255	@ 0xff
 8008cca:	d105      	bne.n	8008cd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8008ccc:	f1bc 0f00 	cmp.w	ip, #0
 8008cd0:	bf14      	ite	ne
 8008cd2:	2304      	movne	r3, #4
 8008cd4:	2301      	moveq	r3, #1
 8008cd6:	e7b3      	b.n	8008c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	e7b1      	b.n	8008c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008cdc:	08011fb8 	.word	0x08011fb8

08008ce0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	b08b      	sub	sp, #44	@ 0x2c
 8008ce6:	461d      	mov	r5, r3
 8008ce8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8008cec:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8008cf0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8008cf4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8008cf8:	bf14      	ite	ne
 8008cfa:	2308      	movne	r3, #8
 8008cfc:	2302      	moveq	r3, #2
 8008cfe:	2400      	movs	r4, #0
 8008d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d04:	4688      	mov	r8, r1
 8008d06:	4693      	mov	fp, r2
 8008d08:	9404      	str	r4, [sp, #16]
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	f7ff ff08 	bl	8008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008d10:	2e0b      	cmp	r6, #11
 8008d12:	bf98      	it	ls
 8008d14:	4b15      	ldrls	r3, [pc, #84]	@ (8008d6c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8008d16:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8008d1a:	bf98      	it	ls
 8008d1c:	5d9c      	ldrbls	r4, [r3, r6]
 8008d1e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8008d22:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008d26:	fb05 b50a 	mla	r5, r5, sl, fp
 8008d2a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8008d2e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008d32:	10e4      	asrs	r4, r4, #3
 8008d34:	fb04 0405 	mla	r4, r4, r5, r0
 8008d38:	2300      	movs	r3, #0
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	9405      	str	r4, [sp, #20]
 8008d3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008d42:	f8ad a01e 	strh.w	sl, [sp, #30]
 8008d46:	f8cd 8010 	str.w	r8, [sp, #16]
 8008d4a:	f88d 9020 	strb.w	r9, [sp, #32]
 8008d4e:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8008d52:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8008d56:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8008d5a:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8008d5e:	6803      	ldr	r3, [r0, #0]
 8008d60:	a901      	add	r1, sp, #4
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4798      	blx	r3
 8008d66:	b00b      	add	sp, #44	@ 0x2c
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	08011fb8 	.word	0x08011fb8

08008d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	461e      	mov	r6, r3
 8008d76:	4b0a      	ldr	r3, [pc, #40]	@ (8008da0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8008d78:	460f      	mov	r7, r1
 8008d7a:	881d      	ldrh	r5, [r3, #0]
 8008d7c:	4690      	mov	r8, r2
 8008d7e:	f7ff fd23 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 8008d82:	6803      	ldr	r3, [r0, #0]
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	4798      	blx	r3
 8008d88:	280b      	cmp	r0, #11
 8008d8a:	bf9a      	itte	ls
 8008d8c:	4b05      	ldrls	r3, [pc, #20]	@ (8008da4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8008d8e:	5c1c      	ldrbls	r4, [r3, r0]
 8008d90:	2400      	movhi	r4, #0
 8008d92:	fb08 7005 	mla	r0, r8, r5, r7
 8008d96:	10e4      	asrs	r4, r4, #3
 8008d98:	fb04 6000 	mla	r0, r4, r0, r6
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	20012426 	.word	0x20012426
 8008da4:	08011fb8 	.word	0x08011fb8

08008da8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8008da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008daa:	b08b      	sub	sp, #44	@ 0x2c
 8008dac:	461f      	mov	r7, r3
 8008dae:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8008db2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008db6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8008dba:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008dbe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008dc2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008dc6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008dca:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008dce:	2500      	movs	r5, #0
 8008dd0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8008dd4:	f88d 3020 	strb.w	r3, [sp, #32]
 8008dd8:	4604      	mov	r4, r0
 8008dda:	4616      	mov	r6, r2
 8008ddc:	9504      	str	r5, [sp, #16]
 8008dde:	f7ff fe9f 	bl	8008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008de2:	463a      	mov	r2, r7
 8008de4:	4631      	mov	r1, r6
 8008de6:	4603      	mov	r3, r0
 8008de8:	4620      	mov	r0, r4
 8008dea:	f7ff ffc1 	bl	8008d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008dee:	4b0e      	ldr	r3, [pc, #56]	@ (8008e28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8008df0:	9005      	str	r0, [sp, #20]
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008df8:	f7ff fce6 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 8008dfc:	6803      	ldr	r3, [r0, #0]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e00:	4798      	blx	r3
 8008e02:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e04:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8008e08:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	6860      	ldr	r0, [r4, #4]
 8008e10:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8008e14:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8008e18:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8008e1c:	6803      	ldr	r3, [r0, #0]
 8008e1e:	a901      	add	r1, sp, #4
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	4798      	blx	r3
 8008e24:	b00b      	add	sp, #44	@ 0x2c
 8008e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e28:	20012426 	.word	0x20012426

08008e2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8008e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e2e:	b08d      	sub	sp, #52	@ 0x34
 8008e30:	466b      	mov	r3, sp
 8008e32:	e883 0006 	stmia.w	r3, {r1, r2}
 8008e36:	2300      	movs	r3, #0
 8008e38:	9306      	str	r3, [sp, #24]
 8008e3a:	6803      	ldr	r3, [r0, #0]
 8008e3c:	f8bd 6000 	ldrh.w	r6, [sp]
 8008e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e42:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8008e46:	2501      	movs	r5, #1
 8008e48:	9503      	str	r5, [sp, #12]
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4798      	blx	r3
 8008e4e:	463a      	mov	r2, r7
 8008e50:	4631      	mov	r1, r6
 8008e52:	4603      	mov	r3, r0
 8008e54:	4620      	mov	r0, r4
 8008e56:	f7ff ff8b 	bl	8008d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008e5a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008e5c:	9307      	str	r3, [sp, #28]
 8008e5e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008e62:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008e66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008e6a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008eac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8008e70:	9004      	str	r0, [sp, #16]
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8008e78:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8008e7c:	f7ff fca4 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 8008e80:	6803      	ldr	r3, [r0, #0]
 8008e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e84:	4798      	blx	r3
 8008e86:	23ff      	movs	r3, #255	@ 0xff
 8008e88:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8008e8c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8008e90:	6860      	ldr	r0, [r4, #4]
 8008e92:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8008e96:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8008e9a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8008e9e:	6803      	ldr	r3, [r0, #0]
 8008ea0:	a903      	add	r1, sp, #12
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	4798      	blx	r3
 8008ea6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8008ea8:	b00d      	add	sp, #52	@ 0x34
 8008eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eac:	20012426 	.word	0x20012426

08008eb0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8008eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	b08c      	sub	sp, #48	@ 0x30
 8008eb6:	461e      	mov	r6, r3
 8008eb8:	466d      	mov	r5, sp
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e885 0006 	stmia.w	r5, {r1, r2}
 8008ec0:	9306      	str	r3, [sp, #24]
 8008ec2:	6803      	ldr	r3, [r0, #0]
 8008ec4:	f8bd 7000 	ldrh.w	r7, [sp]
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eca:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8008ece:	2501      	movs	r5, #1
 8008ed0:	9503      	str	r5, [sp, #12]
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4798      	blx	r3
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	4639      	mov	r1, r7
 8008eda:	4603      	mov	r3, r0
 8008edc:	4620      	mov	r0, r4
 8008ede:	f7ff ff47 	bl	8008d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008ee2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008ee6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008eea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008eee:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8008ef2:	4b11      	ldr	r3, [pc, #68]	@ (8008f38 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8008ef4:	9004      	str	r0, [sp, #16]
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8008efc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008efe:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8008f02:	9607      	str	r6, [sp, #28]
 8008f04:	f7ff fc60 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 8008f08:	6803      	ldr	r3, [r0, #0]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	4798      	blx	r3
 8008f0e:	23ff      	movs	r3, #255	@ 0xff
 8008f10:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8008f14:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8008f18:	6860      	ldr	r0, [r4, #4]
 8008f1a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8008f1e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8008f22:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8008f26:	6803      	ldr	r3, [r0, #0]
 8008f28:	a903      	add	r1, sp, #12
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	4798      	blx	r3
 8008f2e:	4630      	mov	r0, r6
 8008f30:	b00c      	add	sp, #48	@ 0x30
 8008f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f36:	bf00      	nop
 8008f38:	20012426 	.word	0x20012426

08008f3c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8008f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	ac02      	add	r4, sp, #8
 8008f42:	e884 0006 	stmia.w	r4, {r1, r2}
 8008f46:	4605      	mov	r5, r0
 8008f48:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8008f4c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8008f50:	f7ff fde6 	bl	8008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008f54:	463a      	mov	r2, r7
 8008f56:	4603      	mov	r3, r0
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f7ff ff08 	bl	8008d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008f60:	4a05      	ldr	r2, [pc, #20]	@ (8008f78 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8008f62:	682b      	ldr	r3, [r5, #0]
 8008f64:	8812      	ldrh	r2, [r2, #0]
 8008f66:	9200      	str	r2, [sp, #0]
 8008f68:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8008f6a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b0      	blx	r6
 8008f74:	b005      	add	sp, #20
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f78:	20012426 	.word	0x20012426

08008f7c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8008f82:	4604      	mov	r4, r0
 8008f84:	b19b      	cbz	r3, 8008fae <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8008f86:	2002      	movs	r0, #2
 8008f88:	f7f7 fc30 	bl	80007ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8008f92:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8008f9e:	f7ff fdbf 	bl	8008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008fa2:	462b      	mov	r3, r5
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fac:	4718      	bx	r3
 8008fae:	bd70      	pop	{r4, r5, r6, pc}

08008fb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8008fb6:	428b      	cmp	r3, r1
 8008fb8:	4604      	mov	r4, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	d006      	beq.n	8008fcc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8008fbe:	6803      	ldr	r3, [r0, #0]
 8008fc0:	b929      	cbnz	r1, 8008fce <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8008fc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008fc6:	4798      	blx	r3
 8008fc8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
 8008fce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008fd2:	e7f8      	b.n	8008fc6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08008fd4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800900c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	4604      	mov	r4, r0
 8008fdc:	b95b      	cbnz	r3, 8008ff6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8008fde:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d007      	beq.n	8008ff6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8008fe6:	6840      	ldr	r0, [r0, #4]
 8008fe8:	f000 f912 	bl	8009210 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8008fec:	b118      	cbz	r0, 8008ff6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8008fee:	6862      	ldr	r2, [r4, #4]
 8008ff0:	7a53      	ldrb	r3, [r2, #9]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0fc      	beq.n	8008ff0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8008ff6:	f7f7 fd45 	bl	8000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f7ff ffd7 	bl	8008fb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009002:	4620      	mov	r0, r4
 8009004:	f7ff fd8c 	bl	8008b20 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009008:	bd10      	pop	{r4, pc}
 800900a:	bf00      	nop
 800900c:	2001242a 	.word	0x2001242a

08009010 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8009010:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8009014:	1a13      	subs	r3, r2, r0
 8009016:	4258      	negs	r0, r3
 8009018:	4158      	adcs	r0, r3
 800901a:	4770      	bx	lr

0800901c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800901c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009020:	1a9b      	subs	r3, r3, r2
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfdc      	itt	le
 8009026:	6882      	ldrle	r2, [r0, #8]
 8009028:	189b      	addle	r3, r3, r2
 800902a:	2b01      	cmp	r3, #1
 800902c:	bfcc      	ite	gt
 800902e:	2000      	movgt	r0, #0
 8009030:	2001      	movle	r0, #1
 8009032:	4770      	bx	lr

08009034 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8009034:	6902      	ldr	r2, [r0, #16]
 8009036:	6843      	ldr	r3, [r0, #4]
 8009038:	2024      	movs	r0, #36	@ 0x24
 800903a:	fb00 3002 	mla	r0, r0, r2, r3
 800903e:	4770      	bx	lr

08009040 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8009040:	6803      	ldr	r3, [r0, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	4718      	bx	r3

08009046 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8009046:	b570      	push	{r4, r5, r6, lr}
 8009048:	2301      	movs	r3, #1
 800904a:	7203      	strb	r3, [r0, #8]
 800904c:	4604      	mov	r4, r0
 800904e:	6840      	ldr	r0, [r0, #4]
 8009050:	6803      	ldr	r3, [r0, #0]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	4798      	blx	r3
 8009056:	6803      	ldr	r3, [r0, #0]
 8009058:	2b40      	cmp	r3, #64	@ 0x40
 800905a:	4605      	mov	r5, r0
 800905c:	d00c      	beq.n	8009078 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800905e:	d810      	bhi.n	8009082 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8009060:	2b04      	cmp	r3, #4
 8009062:	d01d      	beq.n	80090a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8009064:	d804      	bhi.n	8009070 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8009066:	2b01      	cmp	r3, #1
 8009068:	d006      	beq.n	8009078 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800906a:	2b02      	cmp	r3, #2
 800906c:	d02c      	beq.n	80090c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	2b08      	cmp	r3, #8
 8009072:	d01d      	beq.n	80090b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8009074:	2b20      	cmp	r3, #32
 8009076:	d1fa      	bne.n	800906e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	4620      	mov	r0, r4
 800907c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800907e:	4798      	blx	r3
 8009080:	e013      	b.n	80090aa <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8009082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009086:	d0f7      	beq.n	8009078 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009088:	d804      	bhi.n	8009094 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800908a:	2b80      	cmp	r3, #128	@ 0x80
 800908c:	d0f4      	beq.n	8009078 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800908e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009092:	e7f0      	b.n	8009076 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8009094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009098:	d0ee      	beq.n	8009078 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800909a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800909e:	e7e5      	b.n	800906c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	7f01      	ldrb	r1, [r0, #28]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a6:	4620      	mov	r0, r4
 80090a8:	4798      	blx	r3
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ae:	e006      	b.n	80090be <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	7f01      	ldrb	r1, [r0, #28]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b6:	4620      	mov	r0, r4
 80090b8:	4798      	blx	r3
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090be:	4629      	mov	r1, r5
 80090c0:	4620      	mov	r0, r4
 80090c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090c6:	4718      	bx	r3
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	4620      	mov	r0, r4
 80090cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ce:	4798      	blx	r3
 80090d0:	e7f3      	b.n	80090ba <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080090d2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80090d2:	4770      	bx	lr

080090d4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80090d4:	4770      	bx	lr

080090d6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80090d6:	4770      	bx	lr

080090d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80090d8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80090dc:	1ad2      	subs	r2, r2, r3
 80090de:	2a00      	cmp	r2, #0
 80090e0:	b510      	push	{r4, lr}
 80090e2:	bfdc      	itt	le
 80090e4:	6884      	ldrle	r4, [r0, #8]
 80090e6:	1912      	addle	r2, r2, r4
 80090e8:	2a01      	cmp	r2, #1
 80090ea:	dd16      	ble.n	800911a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80090ec:	6842      	ldr	r2, [r0, #4]
 80090ee:	2424      	movs	r4, #36	@ 0x24
 80090f0:	fb04 2303 	mla	r3, r4, r3, r2
 80090f4:	f101 0220 	add.w	r2, r1, #32
 80090f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80090fc:	f843 4b04 	str.w	r4, [r3], #4
 8009100:	4291      	cmp	r1, r2
 8009102:	d1f9      	bne.n	80090f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8009104:	780a      	ldrb	r2, [r1, #0]
 8009106:	701a      	strb	r2, [r3, #0]
 8009108:	68c3      	ldr	r3, [r0, #12]
 800910a:	6882      	ldr	r2, [r0, #8]
 800910c:	f3bf 8f5b 	dmb	ish
 8009110:	3301      	adds	r3, #1
 8009112:	429a      	cmp	r2, r3
 8009114:	bfd8      	it	le
 8009116:	1a9b      	suble	r3, r3, r2
 8009118:	60c3      	str	r3, [r0, #12]
 800911a:	bd10      	pop	{r4, pc}

0800911c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800911c:	6903      	ldr	r3, [r0, #16]
 800911e:	6882      	ldr	r2, [r0, #8]
 8009120:	f3bf 8f5b 	dmb	ish
 8009124:	3301      	adds	r3, #1
 8009126:	429a      	cmp	r2, r3
 8009128:	bfd8      	it	le
 800912a:	1a9b      	suble	r3, r3, r2
 800912c:	6103      	str	r3, [r0, #16]
 800912e:	4770      	bx	lr

08009130 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	4604      	mov	r4, r0
 8009134:	460e      	mov	r6, r1
 8009136:	6860      	ldr	r0, [r4, #4]
 8009138:	6803      	ldr	r3, [r0, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	4798      	blx	r3
 800913e:	2800      	cmp	r0, #0
 8009140:	d1f9      	bne.n	8009136 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8009142:	4d0d      	ldr	r5, [pc, #52]	@ (8009178 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8009144:	6828      	ldr	r0, [r5, #0]
 8009146:	6803      	ldr	r3, [r0, #0]
 8009148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800914a:	4798      	blx	r3
 800914c:	f7f7 fca8 	bl	8000aa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8009150:	6828      	ldr	r0, [r5, #0]
 8009152:	2101      	movs	r1, #1
 8009154:	f7ff ff2c 	bl	8008fb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009158:	6860      	ldr	r0, [r4, #4]
 800915a:	6803      	ldr	r3, [r0, #0]
 800915c:	4631      	mov	r1, r6
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	4798      	blx	r3
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	4620      	mov	r0, r4
 8009166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009168:	4798      	blx	r3
 800916a:	6828      	ldr	r0, [r5, #0]
 800916c:	6803      	ldr	r3, [r0, #0]
 800916e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009172:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009174:	4718      	bx	r3
 8009176:	bf00      	nop
 8009178:	2001242c 	.word	0x2001242c

0800917c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800917c:	b508      	push	{r3, lr}
 800917e:	f7f7 fc81 	bl	8000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009186:	f7f7 bc85 	b.w	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800918a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800918a:	b510      	push	{r4, lr}
 800918c:	2114      	movs	r1, #20
 800918e:	4604      	mov	r4, r0
 8009190:	f006 fd5c 	bl	800fc4c <_ZdlPvj>
 8009194:	4620      	mov	r0, r4
 8009196:	bd10      	pop	{r4, pc}

08009198 <_ZN8touchgfx13DMA_Interface5startEv>:
 8009198:	b510      	push	{r4, lr}
 800919a:	4604      	mov	r4, r0
 800919c:	6840      	ldr	r0, [r0, #4]
 800919e:	6803      	ldr	r3, [r0, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4798      	blx	r3
 80091a4:	b948      	cbnz	r0, 80091ba <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80091a6:	7a63      	ldrb	r3, [r4, #9]
 80091a8:	b13b      	cbz	r3, 80091ba <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80091aa:	7a23      	ldrb	r3, [r4, #8]
 80091ac:	b92b      	cbnz	r3, 80091ba <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	4620      	mov	r0, r4
 80091b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b8:	4718      	bx	r3
 80091ba:	bd10      	pop	{r4, pc}

080091bc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	4604      	mov	r4, r0
 80091c0:	6840      	ldr	r0, [r0, #4]
 80091c2:	6803      	ldr	r3, [r0, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4798      	blx	r3
 80091c8:	4605      	mov	r5, r0
 80091ca:	b930      	cbnz	r0, 80091da <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80091cc:	7a23      	ldrb	r3, [r4, #8]
 80091ce:	b123      	cbz	r3, 80091da <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80091d0:	6860      	ldr	r0, [r4, #4]
 80091d2:	6803      	ldr	r3, [r0, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	4798      	blx	r3
 80091d8:	7225      	strb	r5, [r4, #8]
 80091da:	6860      	ldr	r0, [r4, #4]
 80091dc:	6803      	ldr	r3, [r0, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4798      	blx	r3
 80091e2:	b928      	cbnz	r0, 80091f0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	4620      	mov	r0, r4
 80091e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091ee:	4718      	bx	r3
 80091f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091f4:	f7f7 bc5c 	b.w	8000ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080091f8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	4c04      	ldr	r4, [pc, #16]	@ (800920c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80091fc:	6082      	str	r2, [r0, #8]
 80091fe:	2200      	movs	r2, #0
 8009200:	e9c0 4100 	strd	r4, r1, [r0]
 8009204:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8009208:	bd10      	pop	{r4, pc}
 800920a:	bf00      	nop
 800920c:	08011fcc 	.word	0x08011fcc

08009210 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8009210:	6840      	ldr	r0, [r0, #4]
 8009212:	6803      	ldr	r3, [r0, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4718      	bx	r3

08009218 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8009218:	2300      	movs	r3, #0
 800921a:	8083      	strh	r3, [r0, #4]
 800921c:	80c3      	strh	r3, [r0, #6]
 800921e:	8003      	strh	r3, [r0, #0]
 8009220:	8043      	strh	r3, [r0, #2]
 8009222:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8009226:	2bff      	cmp	r3, #255	@ 0xff
 8009228:	bf01      	itttt	eq
 800922a:	890b      	ldrheq	r3, [r1, #8]
 800922c:	8083      	strheq	r3, [r0, #4]
 800922e:	894b      	ldrheq	r3, [r1, #10]
 8009230:	80c3      	strheq	r3, [r0, #6]
 8009232:	4770      	bx	lr

08009234 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8009234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009236:	4604      	mov	r4, r0
 8009238:	6808      	ldr	r0, [r1, #0]
 800923a:	6849      	ldr	r1, [r1, #4]
 800923c:	466b      	mov	r3, sp
 800923e:	c303      	stmia	r3!, {r0, r1}
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	4669      	mov	r1, sp
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	4620      	mov	r0, r4
 8009248:	4798      	blx	r3
 800924a:	4b08      	ldr	r3, [pc, #32]	@ (800926c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009252:	b10a      	cbz	r2, 8009258 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8009254:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009256:	b900      	cbnz	r0, 800925a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8009258:	6898      	ldr	r0, [r3, #8]
 800925a:	6803      	ldr	r3, [r0, #0]
 800925c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800925e:	6a1d      	ldr	r5, [r3, #32]
 8009260:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009264:	4669      	mov	r1, sp
 8009266:	47a8      	blx	r5
 8009268:	b003      	add	sp, #12
 800926a:	bd30      	pop	{r4, r5, pc}
 800926c:	2001242c 	.word	0x2001242c

08009270 <_ZN8touchgfx3BoxD1Ev>:
 8009270:	4770      	bx	lr

08009272 <_ZN8touchgfx3BoxD0Ev>:
 8009272:	b510      	push	{r4, lr}
 8009274:	212c      	movs	r1, #44	@ 0x2c
 8009276:	4604      	mov	r4, r0
 8009278:	f006 fce8 	bl	800fc4c <_ZdlPvj>
 800927c:	4620      	mov	r0, r4
 800927e:	bd10      	pop	{r4, pc}

08009280 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8009280:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8009284:	b12a      	cbz	r2, 8009292 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8009286:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800928a:	b112      	cbz	r2, 8009292 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800928c:	6803      	ldr	r3, [r0, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	4718      	bx	r3
 8009292:	4770      	bx	lr

08009294 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8009294:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8009298:	4770      	bx	lr

0800929a <_ZN8touchgfx6ButtonD1Ev>:
 800929a:	4770      	bx	lr

0800929c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	880b      	ldrh	r3, [r1, #0]
 80092a0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80092a2:	4605      	mov	r5, r0
 80092a4:	8813      	ldrh	r3, [r2, #0]
 80092a6:	f825 3f30 	strh.w	r3, [r5, #48]!
 80092aa:	4604      	mov	r4, r0
 80092ac:	4628      	mov	r0, r5
 80092ae:	f003 fe4f 	bl	800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80092b2:	4606      	mov	r6, r0
 80092b4:	4628      	mov	r0, r5
 80092b6:	f003 fe7f 	bl	800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	4605      	mov	r5, r0
 80092be:	4631      	mov	r1, r6
 80092c0:	4620      	mov	r0, r4
 80092c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c4:	4798      	blx	r3
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	4629      	mov	r1, r5
 80092ca:	4620      	mov	r0, r4
 80092cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092d2:	4718      	bx	r3

080092d4 <_ZN8touchgfx6ButtonD0Ev>:
 80092d4:	b510      	push	{r4, lr}
 80092d6:	2134      	movs	r1, #52	@ 0x34
 80092d8:	4604      	mov	r4, r0
 80092da:	f006 fcb7 	bl	800fc4c <_ZdlPvj>
 80092de:	4620      	mov	r0, r4
 80092e0:	bd10      	pop	{r4, pc}

080092e2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80092e2:	b510      	push	{r4, lr}
 80092e4:	4604      	mov	r4, r0
 80092e6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80092e8:	b150      	cbz	r0, 8009300 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80092ea:	6803      	ldr	r3, [r0, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	4798      	blx	r3
 80092f0:	b130      	cbz	r0, 8009300 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80092f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80092f4:	6803      	ldr	r3, [r0, #0]
 80092f6:	4621      	mov	r1, r4
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092fe:	4718      	bx	r3
 8009300:	bd10      	pop	{r4, pc}

08009302 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8009302:	b510      	push	{r4, lr}
 8009304:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8009308:	2bff      	cmp	r3, #255	@ 0xff
 800930a:	4604      	mov	r4, r0
 800930c:	d006      	beq.n	800931c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800930e:	2300      	movs	r3, #0
 8009310:	8003      	strh	r3, [r0, #0]
 8009312:	8043      	strh	r3, [r0, #2]
 8009314:	8083      	strh	r3, [r0, #4]
 8009316:	80c3      	strh	r3, [r0, #6]
 8009318:	4620      	mov	r0, r4
 800931a:	bd10      	pop	{r4, pc}
 800931c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8009320:	b11b      	cbz	r3, 800932a <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8009322:	3130      	adds	r1, #48	@ 0x30
 8009324:	f003 fe7c 	bl	800d020 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8009328:	e7f6      	b.n	8009318 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800932a:	312e      	adds	r1, #46	@ 0x2e
 800932c:	e7fa      	b.n	8009324 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08009330 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8009330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009334:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8009338:	b08a      	sub	sp, #40	@ 0x28
 800933a:	4604      	mov	r4, r0
 800933c:	4688      	mov	r8, r1
 800933e:	2b00      	cmp	r3, #0
 8009340:	d066      	beq.n	8009410 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8009342:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009344:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009348:	a805      	add	r0, sp, #20
 800934a:	f003 fe01 	bl	800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800934e:	4607      	mov	r7, r0
 8009350:	a805      	add	r0, sp, #20
 8009352:	f003 fe31 	bl	800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009356:	f9b8 6000 	ldrsh.w	r6, [r8]
 800935a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800935e:	4432      	add	r2, r6
 8009360:	b292      	uxth	r2, r2
 8009362:	2300      	movs	r3, #0
 8009364:	fa0f fc82 	sxth.w	ip, r2
 8009368:	459c      	cmp	ip, r3
 800936a:	9306      	str	r3, [sp, #24]
 800936c:	dd52      	ble.n	8009414 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800936e:	42b7      	cmp	r7, r6
 8009370:	dd50      	ble.n	8009414 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8009372:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8009376:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800937a:	442b      	add	r3, r5
 800937c:	b29b      	uxth	r3, r3
 800937e:	b219      	sxth	r1, r3
 8009380:	2900      	cmp	r1, #0
 8009382:	dd47      	ble.n	8009414 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8009384:	42a8      	cmp	r0, r5
 8009386:	dd45      	ble.n	8009414 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8009388:	4567      	cmp	r7, ip
 800938a:	bfb8      	it	lt
 800938c:	b2ba      	uxthlt	r2, r7
 800938e:	4288      	cmp	r0, r1
 8009390:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8009394:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8009398:	bfb8      	it	lt
 800939a:	b283      	uxthlt	r3, r0
 800939c:	1b92      	subs	r2, r2, r6
 800939e:	1b5b      	subs	r3, r3, r5
 80093a0:	f8ad 201c 	strh.w	r2, [sp, #28]
 80093a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80093a8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80093ac:	f8ad 501a 	strh.w	r5, [sp, #26]
 80093b0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80093b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d026      	beq.n	800940a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80093bc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dd22      	ble.n	800940a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80093c4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dd1e      	ble.n	800940a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80093cc:	2300      	movs	r3, #0
 80093ce:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	a908      	add	r1, sp, #32
 80093d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d8:	4620      	mov	r0, r4
 80093da:	4798      	blx	r3
 80093dc:	4b0f      	ldr	r3, [pc, #60]	@ (800941c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80093e4:	b10a      	cbz	r2, 80093ea <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80093e6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80093e8:	b900      	cbnz	r0, 80093ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80093ea:	6898      	ldr	r0, [r3, #8]
 80093ec:	6801      	ldr	r1, [r0, #0]
 80093ee:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80093f2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80093f6:	2501      	movs	r5, #1
 80093f8:	9502      	str	r5, [sp, #8]
 80093fa:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 80093fe:	9401      	str	r4, [sp, #4]
 8009400:	ac06      	add	r4, sp, #24
 8009402:	9400      	str	r4, [sp, #0]
 8009404:	688c      	ldr	r4, [r1, #8]
 8009406:	a905      	add	r1, sp, #20
 8009408:	47a0      	blx	r4
 800940a:	b00a      	add	sp, #40	@ 0x28
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8009412:	e797      	b.n	8009344 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8009414:	2300      	movs	r3, #0
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	e7ca      	b.n	80093b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800941a:	bf00      	nop
 800941c:	2001242c 	.word	0x2001242c

08009420 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8009420:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8009424:	b12a      	cbz	r2, 8009432 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8009426:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800942a:	b112      	cbz	r2, 8009432 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800942c:	6803      	ldr	r3, [r0, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	4718      	bx	r3
 8009432:	4770      	bx	lr

08009434 <_ZN8touchgfx5ImageD1Ev>:
 8009434:	4770      	bx	lr

08009436 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8009436:	b570      	push	{r4, r5, r6, lr}
 8009438:	880b      	ldrh	r3, [r1, #0]
 800943a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800943c:	4604      	mov	r4, r0
 800943e:	4608      	mov	r0, r1
 8009440:	460d      	mov	r5, r1
 8009442:	f003 fd85 	bl	800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8009446:	4606      	mov	r6, r0
 8009448:	4628      	mov	r0, r5
 800944a:	f003 fdb5 	bl	800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	4605      	mov	r5, r0
 8009452:	4631      	mov	r1, r6
 8009454:	4620      	mov	r0, r4
 8009456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009458:	4798      	blx	r3
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	4629      	mov	r1, r5
 800945e:	4620      	mov	r0, r4
 8009460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009466:	4718      	bx	r3

08009468 <_ZN8touchgfx5ImageD0Ev>:
 8009468:	b510      	push	{r4, lr}
 800946a:	212c      	movs	r1, #44	@ 0x2c
 800946c:	4604      	mov	r4, r0
 800946e:	f006 fbed 	bl	800fc4c <_ZdlPvj>
 8009472:	4620      	mov	r0, r4
 8009474:	bd10      	pop	{r4, pc}

08009476 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8009476:	b510      	push	{r4, lr}
 8009478:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800947c:	2bff      	cmp	r3, #255	@ 0xff
 800947e:	4604      	mov	r4, r0
 8009480:	d006      	beq.n	8009490 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8009482:	2300      	movs	r3, #0
 8009484:	8003      	strh	r3, [r0, #0]
 8009486:	8043      	strh	r3, [r0, #2]
 8009488:	8083      	strh	r3, [r0, #4]
 800948a:	80c3      	strh	r3, [r0, #6]
 800948c:	4620      	mov	r0, r4
 800948e:	bd10      	pop	{r4, pc}
 8009490:	3126      	adds	r1, #38	@ 0x26
 8009492:	f003 fdc5 	bl	800d020 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8009496:	e7f9      	b.n	800948c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08009498 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8009498:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800949c:	b12a      	cbz	r2, 80094aa <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800949e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80094a2:	b112      	cbz	r2, 80094aa <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80094a4:	6803      	ldr	r3, [r0, #0]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	4718      	bx	r3
 80094aa:	4770      	bx	lr

080094ac <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80094ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b0:	4604      	mov	r4, r0
 80094b2:	b088      	sub	sp, #32
 80094b4:	f854 3b26 	ldr.w	r3, [r4], #38
 80094b8:	2500      	movs	r5, #0
 80094ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094bc:	460f      	mov	r7, r1
 80094be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094c2:	a904      	add	r1, sp, #16
 80094c4:	4606      	mov	r6, r0
 80094c6:	4798      	blx	r3
 80094c8:	4620      	mov	r0, r4
 80094ca:	f003 fd41 	bl	800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80094ce:	4680      	mov	r8, r0
 80094d0:	4620      	mov	r0, r4
 80094d2:	f003 fd71 	bl	800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80094d6:	9506      	str	r5, [sp, #24]
 80094d8:	ad06      	add	r5, sp, #24
 80094da:	f8ad 001e 	strh.w	r0, [sp, #30]
 80094de:	4639      	mov	r1, r7
 80094e0:	4628      	mov	r0, r5
 80094e2:	f8ad 801c 	strh.w	r8, [sp, #28]
 80094e6:	f7fe fe99 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 80094ea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dd19      	ble.n	8009526 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80094f2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	dd15      	ble.n	8009526 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80094fa:	4b0c      	ldr	r3, [pc, #48]	@ (800952c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009502:	b10a      	cbz	r2, 8009508 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8009504:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009506:	b900      	cbnz	r0, 800950a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8009508:	6898      	ldr	r0, [r3, #8]
 800950a:	6801      	ldr	r1, [r0, #0]
 800950c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8009510:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8009514:	2701      	movs	r7, #1
 8009516:	9702      	str	r7, [sp, #8]
 8009518:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800951c:	e9cd 5600 	strd	r5, r6, [sp]
 8009520:	688d      	ldr	r5, [r1, #8]
 8009522:	4621      	mov	r1, r4
 8009524:	47a8      	blx	r5
 8009526:	b008      	add	sp, #32
 8009528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952c:	2001242c 	.word	0x2001242c

08009530 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8009530:	b510      	push	{r4, lr}
 8009532:	6803      	ldr	r3, [r0, #0]
 8009534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009536:	460c      	mov	r4, r1
 8009538:	4798      	blx	r3
 800953a:	1b03      	subs	r3, r0, r4
 800953c:	4258      	negs	r0, r3
 800953e:	4158      	adcs	r0, r3
 8009540:	bd10      	pop	{r4, pc}
	...

08009544 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8009544:	4b01      	ldr	r3, [pc, #4]	@ (800954c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8009546:	6019      	str	r1, [r3, #0]
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20012434 	.word	0x20012434

08009550 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	4696      	mov	lr, r2
 8009556:	4605      	mov	r5, r0
 8009558:	4614      	mov	r4, r2
 800955a:	460e      	mov	r6, r1
 800955c:	461f      	mov	r7, r3
 800955e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009562:	b097      	sub	sp, #92	@ 0x5c
 8009564:	f10d 0c1c 	add.w	ip, sp, #28
 8009568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800956c:	f8de 3000 	ldr.w	r3, [lr]
 8009570:	f8cc 3000 	str.w	r3, [ip]
 8009574:	f104 0e14 	add.w	lr, r4, #20
 8009578:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800957c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009584:	f8de 3000 	ldr.w	r3, [lr]
 8009588:	f8cc 3000 	str.w	r3, [ip]
 800958c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8009590:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009594:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8009598:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800959c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80095a0:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80095a4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80095a8:	f8de 3000 	ldr.w	r3, [lr]
 80095ac:	f8cc 3000 	str.w	r3, [ip]
 80095b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	9201      	str	r2, [sp, #4]
 80095b6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80095ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80095bc:	9200      	str	r2, [sp, #0]
 80095be:	f8cd 8008 	str.w	r8, [sp, #8]
 80095c2:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80095c6:	aa07      	add	r2, sp, #28
 80095c8:	463b      	mov	r3, r7
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47d8      	blx	fp
 80095d0:	46a6      	mov	lr, r4
 80095d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095d6:	f10d 0c1c 	add.w	ip, sp, #28
 80095da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095de:	f8de 3000 	ldr.w	r3, [lr]
 80095e2:	f8cc 3000 	str.w	r3, [ip]
 80095e6:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80095ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095ee:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80095f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095f6:	343c      	adds	r4, #60	@ 0x3c
 80095f8:	f8de 3000 	ldr.w	r3, [lr]
 80095fc:	f8cc 3000 	str.w	r3, [ip]
 8009600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009602:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8009606:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	f8cc 3000 	str.w	r3, [ip]
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8009616:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009618:	9201      	str	r2, [sp, #4]
 800961a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800961c:	9200      	str	r2, [sp, #0]
 800961e:	f8cd 8008 	str.w	r8, [sp, #8]
 8009622:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8009624:	aa07      	add	r2, sp, #28
 8009626:	463b      	mov	r3, r7
 8009628:	4631      	mov	r1, r6
 800962a:	4628      	mov	r0, r5
 800962c:	47a0      	blx	r4
 800962e:	b017      	add	sp, #92	@ 0x5c
 8009630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009634 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8009634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	b08d      	sub	sp, #52	@ 0x34
 800963a:	4688      	mov	r8, r1
 800963c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800963e:	f8d3 c000 	ldr.w	ip, [r3]
 8009642:	680f      	ldr	r7, [r1, #0]
 8009644:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8009648:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800964c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8009650:	edd3 6a07 	vldr	s13, [r3, #28]
 8009654:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8009656:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800965a:	f9b1 9000 	ldrsh.w	r9, [r1]
 800965e:	f9ba 1000 	ldrsh.w	r1, [sl]
 8009662:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8009666:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800966a:	eba7 070c 	sub.w	r7, r7, ip
 800966e:	42bc      	cmp	r4, r7
 8009670:	bfa8      	it	ge
 8009672:	463c      	movge	r4, r7
 8009674:	ee07 4a90 	vmov	s15, r4
 8009678:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800967c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8009680:	ee25 4a04 	vmul.f32	s8, s10, s8
 8009684:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009688:	ee25 5a27 	vmul.f32	s10, s10, s15
 800968c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009690:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009694:	eb09 0e0c 	add.w	lr, r9, ip
 8009698:	4571      	cmp	r1, lr
 800969a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800969e:	ee32 1a05 	vadd.f32	s2, s4, s10
 80096a2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80096a6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80096aa:	ee22 2a07 	vmul.f32	s4, s4, s14
 80096ae:	f340 808d 	ble.w	80097cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 80096b2:	eba1 060e 	sub.w	r6, r1, lr
 80096b6:	fb96 f5f4 	sdiv	r5, r6, r4
 80096ba:	ee07 5a10 	vmov	s14, r5
 80096be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80096c2:	2d00      	cmp	r5, #0
 80096c4:	fb04 6615 	mls	r6, r4, r5, r6
 80096c8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80096cc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80096d0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80096d4:	dd13      	ble.n	80096fe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 80096d6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80096da:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80096de:	eef5 6a40 	vcmp.f32	s13, #0.0
 80096e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e6:	bf18      	it	ne
 80096e8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80096ec:	ee31 2a45 	vsub.f32	s4, s2, s10
 80096f0:	bf08      	it	eq
 80096f2:	eeb0 7a67 	vmoveq.f32	s14, s15
 80096f6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80096fa:	ee22 2a07 	vmul.f32	s4, s4, s14
 80096fe:	fb05 f204 	mul.w	r2, r5, r4
 8009702:	1abf      	subs	r7, r7, r2
 8009704:	4494      	add	ip, r2
 8009706:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800970a:	4411      	add	r1, r2
 800970c:	eb09 020c 	add.w	r2, r9, ip
 8009710:	443a      	add	r2, r7
 8009712:	b209      	sxth	r1, r1
 8009714:	428a      	cmp	r2, r1
 8009716:	bfc4      	itt	gt
 8009718:	eba1 0209 	subgt.w	r2, r1, r9
 800971c:	eba2 070c 	subgt.w	r7, r2, ip
 8009720:	2f00      	cmp	r7, #0
 8009722:	dd50      	ble.n	80097c6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8009724:	fb97 f1f4 	sdiv	r1, r7, r4
 8009728:	fb04 7211 	mls	r2, r4, r1, r7
 800972c:	b90a      	cbnz	r2, 8009732 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800972e:	3901      	subs	r1, #1
 8009730:	4622      	mov	r2, r4
 8009732:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8009736:	6840      	ldr	r0, [r0, #4]
 8009738:	900b      	str	r0, [sp, #44]	@ 0x2c
 800973a:	f8d0 a000 	ldr.w	sl, [r0]
 800973e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8009740:	9008      	str	r0, [sp, #32]
 8009742:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8009746:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8009748:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800974c:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009754:	445b      	add	r3, fp
 8009756:	eef0 6a42 	vmov.f32	s13, s4
 800975a:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800975e:	ee21 3a23 	vmul.f32	s6, s2, s7
 8009762:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8009766:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800976a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	ee17 7a90 	vmov	r7, s15
 8009774:	ee73 7a42 	vsub.f32	s15, s6, s4
 8009778:	eeb0 7a61 	vmov.f32	s14, s3
 800977c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8009780:	ee16 3a90 	vmov	r3, s13
 8009784:	fb97 f7f4 	sdiv	r7, r7, r4
 8009788:	ee17 ca90 	vmov	ip, s15
 800978c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8009790:	fb9c fcf4 	sdiv	ip, ip, r4
 8009794:	fb0c 3306 	mla	r3, ip, r6, r3
 8009798:	9302      	str	r3, [sp, #8]
 800979a:	ee17 3a10 	vmov	r3, s14
 800979e:	44b6      	add	lr, r6
 80097a0:	fb04 e505 	mla	r5, r4, r5, lr
 80097a4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80097a8:	fb07 3706 	mla	r7, r7, r6, r3
 80097ac:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80097b0:	e9cd 4700 	strd	r4, r7, [sp]
 80097b4:	2900      	cmp	r1, #0
 80097b6:	bfcc      	ite	gt
 80097b8:	46a1      	movgt	r9, r4
 80097ba:	4691      	movle	r9, r2
 80097bc:	eba9 0306 	sub.w	r3, r9, r6
 80097c0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80097c4:	47a0      	blx	r4
 80097c6:	b00d      	add	sp, #52	@ 0x34
 80097c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097cc:	2500      	movs	r5, #0
 80097ce:	462e      	mov	r6, r5
 80097d0:	e799      	b.n	8009706 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

080097d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	b0db      	sub	sp, #364	@ 0x16c
 80097da:	461d      	mov	r5, r3
 80097dc:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80097e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80097e2:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80097e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097e8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80097ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80097ee:	6803      	ldr	r3, [r0, #0]
 80097f0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80097f2:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80097f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80097f6:	4614      	mov	r4, r2
 80097f8:	4629      	mov	r1, r5
 80097fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80097fe:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8009802:	47b8      	blx	r7
 8009804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009806:	6058      	str	r0, [r3, #4]
 8009808:	2800      	cmp	r0, #0
 800980a:	f000 83a1 	beq.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800980e:	682b      	ldr	r3, [r5, #0]
 8009810:	9314      	str	r3, [sp, #80]	@ 0x50
 8009812:	686b      	ldr	r3, [r5, #4]
 8009814:	9315      	str	r3, [sp, #84]	@ 0x54
 8009816:	4bc4      	ldr	r3, [pc, #784]	@ (8009b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8009818:	ed94 7a02 	vldr	s14, [r4, #8]
 800981c:	7819      	ldrb	r1, [r3, #0]
 800981e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009822:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8009826:	2900      	cmp	r1, #0
 8009828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800982c:	bf16      	itet	ne
 800982e:	4619      	movne	r1, r3
 8009830:	4611      	moveq	r1, r2
 8009832:	4613      	movne	r3, r2
 8009834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009838:	9116      	str	r1, [sp, #88]	@ 0x58
 800983a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800983e:	f240 8387 	bls.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009842:	ed94 7a07 	vldr	s14, [r4, #28]
 8009846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800984a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800984e:	f240 837f 	bls.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009852:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8009856:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985e:	f240 8377 	bls.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009862:	6822      	ldr	r2, [r4, #0]
 8009864:	4bb1      	ldr	r3, [pc, #708]	@ (8009b2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8009866:	429a      	cmp	r2, r3
 8009868:	f2c0 8372 	blt.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800986c:	49b0      	ldr	r1, [pc, #704]	@ (8009b30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800986e:	6963      	ldr	r3, [r4, #20]
 8009870:	428a      	cmp	r2, r1
 8009872:	f300 836d 	bgt.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009876:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800987a:	48ae      	ldr	r0, [pc, #696]	@ (8009b34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800987c:	33ff      	adds	r3, #255	@ 0xff
 800987e:	4283      	cmp	r3, r0
 8009880:	f200 8366 	bhi.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009884:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009886:	4dac      	ldr	r5, [pc, #688]	@ (8009b38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8009888:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800988c:	33ff      	adds	r3, #255	@ 0xff
 800988e:	42ab      	cmp	r3, r5
 8009890:	f200 835e 	bhi.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009894:	6862      	ldr	r2, [r4, #4]
 8009896:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800989a:	33ff      	adds	r3, #255	@ 0xff
 800989c:	4283      	cmp	r3, r0
 800989e:	f200 8357 	bhi.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80098a2:	69a1      	ldr	r1, [r4, #24]
 80098a4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80098a8:	33ff      	adds	r3, #255	@ 0xff
 80098aa:	4283      	cmp	r3, r0
 80098ac:	f200 8350 	bhi.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80098b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80098b2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80098b6:	30ff      	adds	r0, #255	@ 0xff
 80098b8:	42a8      	cmp	r0, r5
 80098ba:	f200 8349 	bhi.w	8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80098be:	428a      	cmp	r2, r1
 80098c0:	f280 8110 	bge.w	8009ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80098c4:	429a      	cmp	r2, r3
 80098c6:	f300 8119 	bgt.w	8009afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80098ca:	4299      	cmp	r1, r3
 80098cc:	f280 811d 	bge.w	8009b0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80098d0:	2502      	movs	r5, #2
 80098d2:	2701      	movs	r7, #1
 80098d4:	46a9      	mov	r9, r5
 80098d6:	46b8      	mov	r8, r7
 80098d8:	f04f 0a00 	mov.w	sl, #0
 80098dc:	4621      	mov	r1, r4
 80098de:	a849      	add	r0, sp, #292	@ 0x124
 80098e0:	f003 f86e 	bl	800c9c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80098e4:	4622      	mov	r2, r4
 80098e6:	4653      	mov	r3, sl
 80098e8:	a949      	add	r1, sp, #292	@ 0x124
 80098ea:	f8cd 9000 	str.w	r9, [sp]
 80098ee:	a819      	add	r0, sp, #100	@ 0x64
 80098f0:	f003 f996 	bl	800cc20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80098f4:	4622      	mov	r2, r4
 80098f6:	4653      	mov	r3, sl
 80098f8:	a949      	add	r1, sp, #292	@ 0x124
 80098fa:	f8cd 8000 	str.w	r8, [sp]
 80098fe:	a829      	add	r0, sp, #164	@ 0xa4
 8009900:	f003 f98e 	bl	800cc20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009904:	4643      	mov	r3, r8
 8009906:	4622      	mov	r2, r4
 8009908:	a949      	add	r1, sp, #292	@ 0x124
 800990a:	f8cd 9000 	str.w	r9, [sp]
 800990e:	a839      	add	r0, sp, #228	@ 0xe4
 8009910:	f003 f986 	bl	800cc20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009914:	42af      	cmp	r7, r5
 8009916:	bfb5      	itete	lt
 8009918:	2300      	movlt	r3, #0
 800991a:	2301      	movge	r3, #1
 800991c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800991e:	930e      	strge	r3, [sp, #56]	@ 0x38
 8009920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009922:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009926:	af12      	add	r7, sp, #72	@ 0x48
 8009928:	bfb9      	ittee	lt
 800992a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800992c:	ac19      	addlt	r4, sp, #100	@ 0x64
 800992e:	ad19      	addge	r5, sp, #100	@ 0x64
 8009930:	ac29      	addge	r4, sp, #164	@ 0xa4
 8009932:	e887 0003 	stmia.w	r7, {r0, r1}
 8009936:	b928      	cbnz	r0, 8009944 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8009938:	4b80      	ldr	r3, [pc, #512]	@ (8009b3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800993a:	6818      	ldr	r0, [r3, #0]
 800993c:	6803      	ldr	r3, [r0, #0]
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	4798      	blx	r3
 8009942:	6038      	str	r0, [r7, #0]
 8009944:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009946:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800994a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800994e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009950:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009952:	6963      	ldr	r3, [r4, #20]
 8009954:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8009956:	440b      	add	r3, r1
 8009958:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800995c:	4408      	add	r0, r1
 800995e:	b200      	sxth	r0, r0
 8009960:	4283      	cmp	r3, r0
 8009962:	900d      	str	r0, [sp, #52]	@ 0x34
 8009964:	f280 80dd 	bge.w	8009b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8009968:	428b      	cmp	r3, r1
 800996a:	da08      	bge.n	800997e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800996c:	2a00      	cmp	r2, #0
 800996e:	dd06      	ble.n	800997e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009970:	1acb      	subs	r3, r1, r3
 8009972:	429a      	cmp	r2, r3
 8009974:	f2c0 80e4 	blt.w	8009b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8009978:	2b00      	cmp	r3, #0
 800997a:	f300 80e2 	bgt.w	8009b42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800997e:	6967      	ldr	r7, [r4, #20]
 8009980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009982:	443b      	add	r3, r7
 8009984:	461f      	mov	r7, r3
 8009986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009988:	1bdf      	subs	r7, r3, r7
 800998a:	4297      	cmp	r7, r2
 800998c:	bfa8      	it	ge
 800998e:	4617      	movge	r7, r2
 8009990:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8009994:	2f00      	cmp	r7, #0
 8009996:	f340 8166 	ble.w	8009c66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800999a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800999c:	6829      	ldr	r1, [r5, #0]
 800999e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099a2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80099a6:	6820      	ldr	r0, [r4, #0]
 80099a8:	4411      	add	r1, r2
 80099aa:	4299      	cmp	r1, r3
 80099ac:	dd1a      	ble.n	80099e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80099ae:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80099b2:	440b      	add	r3, r1
 80099b4:	4402      	add	r2, r0
 80099b6:	b21b      	sxth	r3, r3
 80099b8:	429a      	cmp	r2, r3
 80099ba:	dc13      	bgt.n	80099e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80099bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	9206      	str	r2, [sp, #24]
 80099c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80099c6:	9205      	str	r2, [sp, #20]
 80099c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099ca:	9500      	str	r5, [sp, #0]
 80099cc:	e9cd b203 	strd	fp, r2, [sp, #12]
 80099d0:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80099d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099d4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80099d8:	a912      	add	r1, sp, #72	@ 0x48
 80099da:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80099de:	aa49      	add	r2, sp, #292	@ 0x124
 80099e0:	4623      	mov	r3, r4
 80099e2:	47c8      	blx	r9
 80099e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099e8:	441a      	add	r2, r3
 80099ea:	6963      	ldr	r3, [r4, #20]
 80099ec:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80099f0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80099f4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80099f8:	68a1      	ldr	r1, [r4, #8]
 80099fa:	ed94 6a08 	vldr	s12, [r4, #32]
 80099fe:	6022      	str	r2, [r4, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	6163      	str	r3, [r4, #20]
 8009a04:	69a3      	ldr	r3, [r4, #24]
 8009a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8009a10:	61a3      	str	r3, [r4, #24]
 8009a12:	6923      	ldr	r3, [r4, #16]
 8009a14:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8009a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1c:	edd4 6a07 	vldr	s13, [r4, #28]
 8009a20:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8009a24:	440b      	add	r3, r1
 8009a26:	68e1      	ldr	r1, [r4, #12]
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009a2e:	428b      	cmp	r3, r1
 8009a30:	edc4 6a07 	vstr	s13, [r4, #28]
 8009a34:	db15      	blt.n	8009a62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8009a36:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8009a3a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009a3e:	3201      	adds	r2, #1
 8009a40:	edc4 6a07 	vstr	s13, [r4, #28]
 8009a44:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8009a48:	6022      	str	r2, [r4, #0]
 8009a4a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009a4e:	1a5b      	subs	r3, r3, r1
 8009a50:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8009a54:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8009a58:	6123      	str	r3, [r4, #16]
 8009a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a5e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8009a62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a66:	441a      	add	r2, r3
 8009a68:	696b      	ldr	r3, [r5, #20]
 8009a6a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8009a6e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8009a72:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8009a76:	68a9      	ldr	r1, [r5, #8]
 8009a78:	ed95 6a08 	vldr	s12, [r5, #32]
 8009a7c:	602a      	str	r2, [r5, #0]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	616b      	str	r3, [r5, #20]
 8009a82:	69ab      	ldr	r3, [r5, #24]
 8009a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8009a8e:	61ab      	str	r3, [r5, #24]
 8009a90:	692b      	ldr	r3, [r5, #16]
 8009a92:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8009a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9a:	edd5 6a07 	vldr	s13, [r5, #28]
 8009a9e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8009aa2:	440b      	add	r3, r1
 8009aa4:	68e9      	ldr	r1, [r5, #12]
 8009aa6:	612b      	str	r3, [r5, #16]
 8009aa8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009aac:	428b      	cmp	r3, r1
 8009aae:	edc5 6a07 	vstr	s13, [r5, #28]
 8009ab2:	db15      	blt.n	8009ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8009ab4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8009ab8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009abc:	3201      	adds	r2, #1
 8009abe:	edc5 6a07 	vstr	s13, [r5, #28]
 8009ac2:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8009ac6:	602a      	str	r2, [r5, #0]
 8009ac8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009acc:	1a5b      	subs	r3, r3, r1
 8009ace:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8009ad2:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8009ad6:	612b      	str	r3, [r5, #16]
 8009ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009adc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8009ae0:	3f01      	subs	r7, #1
 8009ae2:	e757      	b.n	8009994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	dc13      	bgt.n	8009b10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	da14      	bge.n	8009b16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8009aec:	2502      	movs	r5, #2
 8009aee:	2703      	movs	r7, #3
 8009af0:	46a9      	mov	r9, r5
 8009af2:	f04f 0800 	mov.w	r8, #0
 8009af6:	f04f 0a01 	mov.w	sl, #1
 8009afa:	e6ef      	b.n	80098dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8009afc:	2501      	movs	r5, #1
 8009afe:	2700      	movs	r7, #0
 8009b00:	46a9      	mov	r9, r5
 8009b02:	46b8      	mov	r8, r7
 8009b04:	f04f 0a02 	mov.w	sl, #2
 8009b08:	e6e8      	b.n	80098dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8009b0a:	2501      	movs	r5, #1
 8009b0c:	2702      	movs	r7, #2
 8009b0e:	e6e1      	b.n	80098d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8009b10:	2500      	movs	r5, #0
 8009b12:	2701      	movs	r7, #1
 8009b14:	e7f4      	b.n	8009b00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8009b16:	2702      	movs	r7, #2
 8009b18:	2503      	movs	r5, #3
 8009b1a:	f04f 0900 	mov.w	r9, #0
 8009b1e:	46b8      	mov	r8, r7
 8009b20:	e7e9      	b.n	8009af6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8009b22:	4613      	mov	r3, r2
 8009b24:	e728      	b.n	8009978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8009b26:	bf00      	nop
 8009b28:	20012424 	.word	0x20012424
 8009b2c:	fffd8f01 	.word	0xfffd8f01
 8009b30:	00027100 	.word	0x00027100
 8009b34:	0004e1ff 	.word	0x0004e1ff
 8009b38:	0004e1fe 	.word	0x0004e1fe
 8009b3c:	2001242c 	.word	0x2001242c
 8009b40:	4613      	mov	r3, r2
 8009b42:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8009b44:	9111      	str	r1, [sp, #68]	@ 0x44
 8009b46:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8009b4a:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8009b4e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8009b50:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8009b54:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8009b58:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8009b5c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8009b60:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8009b64:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009b68:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8009b6c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8009b70:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8009b74:	469e      	mov	lr, r3
 8009b76:	469c      	mov	ip, r3
 8009b78:	f04f 0900 	mov.w	r9, #0
 8009b7c:	f1bc 0f00 	cmp.w	ip, #0
 8009b80:	d147      	bne.n	8009c12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8009b82:	eb03 0c07 	add.w	ip, r3, r7
 8009b86:	1ad7      	subs	r7, r2, r3
 8009b88:	f1b9 0f00 	cmp.w	r9, #0
 8009b8c:	d009      	beq.n	8009ba2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8009b8e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8009b92:	9029      	str	r0, [sp, #164]	@ 0xa4
 8009b94:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8009b98:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8009b9c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8009ba0:	912d      	str	r1, [sp, #180]	@ 0xb4
 8009ba2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8009ba4:	9111      	str	r1, [sp, #68]	@ 0x44
 8009ba6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8009baa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8009bae:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8009bb2:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8009bb6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8009bba:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8009bbe:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8009bc2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8009bc6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8009bca:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8009bce:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8009bd2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	f1be 0f00 	cmp.w	lr, #0
 8009bde:	d031      	beq.n	8009c44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8009be0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009be2:	4431      	add	r1, r6
 8009be4:	4549      	cmp	r1, r9
 8009be6:	4450      	add	r0, sl
 8009be8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009bec:	ee37 7a04 	vadd.f32	s14, s14, s8
 8009bf0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009bf4:	db08      	blt.n	8009c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8009bf6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009bfa:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009bfe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009c02:	3001      	adds	r0, #1
 8009c04:	eba1 0109 	sub.w	r1, r1, r9
 8009c08:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009c0c:	f04f 0801 	mov.w	r8, #1
 8009c10:	e7e3      	b.n	8009bda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8009c12:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009c14:	4431      	add	r1, r6
 8009c16:	4541      	cmp	r1, r8
 8009c18:	4450      	add	r0, sl
 8009c1a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8009c1e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009c22:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8009c26:	db08      	blt.n	8009c3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8009c28:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009c2c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009c30:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009c34:	3001      	adds	r0, #1
 8009c36:	eba1 0108 	sub.w	r1, r1, r8
 8009c3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c3e:	f04f 0901 	mov.w	r9, #1
 8009c42:	e79b      	b.n	8009b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8009c44:	449c      	add	ip, r3
 8009c46:	1aff      	subs	r7, r7, r3
 8009c48:	f1b8 0f00 	cmp.w	r8, #0
 8009c4c:	d009      	beq.n	8009c62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8009c4e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8009c52:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c54:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8009c58:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8009c5c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8009c60:	911d      	str	r1, [sp, #116]	@ 0x74
 8009c62:	1ad2      	subs	r2, r2, r3
 8009c64:	e68b      	b.n	800997e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009c66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c68:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 80d1 	beq.w	8009e12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8009c70:	ad19      	add	r5, sp, #100	@ 0x64
 8009c72:	ac39      	add	r4, sp, #228	@ 0xe4
 8009c74:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009c76:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8009c7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009c7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009c82:	6963      	ldr	r3, [r4, #20]
 8009c84:	440b      	add	r3, r1
 8009c86:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8009c8a:	4408      	add	r0, r1
 8009c8c:	b200      	sxth	r0, r0
 8009c8e:	4283      	cmp	r3, r0
 8009c90:	900d      	str	r0, [sp, #52]	@ 0x34
 8009c92:	f280 80c1 	bge.w	8009e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8009c96:	428b      	cmp	r3, r1
 8009c98:	da08      	bge.n	8009cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8009c9a:	2a00      	cmp	r2, #0
 8009c9c:	dd06      	ble.n	8009cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8009c9e:	1acb      	subs	r3, r1, r3
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	f2c0 80bb 	blt.w	8009e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f300 80b9 	bgt.w	8009e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8009cac:	6967      	ldr	r7, [r4, #20]
 8009cae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cb0:	443b      	add	r3, r7
 8009cb2:	461f      	mov	r7, r3
 8009cb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cb6:	1bdf      	subs	r7, r3, r7
 8009cb8:	4297      	cmp	r7, r2
 8009cba:	bfa8      	it	ge
 8009cbc:	4617      	movge	r7, r2
 8009cbe:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8009cc2:	2f00      	cmp	r7, #0
 8009cc4:	f340 813c 	ble.w	8009f40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8009cc8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009cca:	6829      	ldr	r1, [r5, #0]
 8009ccc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009cd0:	f9bb 3000 	ldrsh.w	r3, [fp]
 8009cd4:	6820      	ldr	r0, [r4, #0]
 8009cd6:	4411      	add	r1, r2
 8009cd8:	4299      	cmp	r1, r3
 8009cda:	dd1a      	ble.n	8009d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8009cdc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8009ce0:	440b      	add	r3, r1
 8009ce2:	4402      	add	r2, r0
 8009ce4:	b21b      	sxth	r3, r3
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	dc13      	bgt.n	8009d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8009cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	9206      	str	r2, [sp, #24]
 8009cf2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009cf4:	9205      	str	r2, [sp, #20]
 8009cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cf8:	9500      	str	r5, [sp, #0]
 8009cfa:	e9cd b203 	strd	fp, r2, [sp, #12]
 8009cfe:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8009d00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d02:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8009d06:	a912      	add	r1, sp, #72	@ 0x48
 8009d08:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8009d0c:	aa49      	add	r2, sp, #292	@ 0x124
 8009d0e:	4623      	mov	r3, r4
 8009d10:	47c8      	blx	r9
 8009d12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d16:	441a      	add	r2, r3
 8009d18:	6963      	ldr	r3, [r4, #20]
 8009d1a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8009d1e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8009d22:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8009d26:	68a1      	ldr	r1, [r4, #8]
 8009d28:	ed94 6a08 	vldr	s12, [r4, #32]
 8009d2c:	6022      	str	r2, [r4, #0]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	6163      	str	r3, [r4, #20]
 8009d32:	69a3      	ldr	r3, [r4, #24]
 8009d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8009d3e:	61a3      	str	r3, [r4, #24]
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8009d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d4a:	edd4 6a07 	vldr	s13, [r4, #28]
 8009d4e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8009d52:	440b      	add	r3, r1
 8009d54:	68e1      	ldr	r1, [r4, #12]
 8009d56:	6123      	str	r3, [r4, #16]
 8009d58:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	edc4 6a07 	vstr	s13, [r4, #28]
 8009d62:	db15      	blt.n	8009d90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8009d64:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8009d68:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009d6c:	3201      	adds	r2, #1
 8009d6e:	edc4 6a07 	vstr	s13, [r4, #28]
 8009d72:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8009d76:	6022      	str	r2, [r4, #0]
 8009d78:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009d7c:	1a5b      	subs	r3, r3, r1
 8009d7e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8009d82:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8009d86:	6123      	str	r3, [r4, #16]
 8009d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d8c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8009d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d94:	441a      	add	r2, r3
 8009d96:	696b      	ldr	r3, [r5, #20]
 8009d98:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8009d9c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8009da0:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8009da4:	68a9      	ldr	r1, [r5, #8]
 8009da6:	ed95 6a08 	vldr	s12, [r5, #32]
 8009daa:	602a      	str	r2, [r5, #0]
 8009dac:	3301      	adds	r3, #1
 8009dae:	616b      	str	r3, [r5, #20]
 8009db0:	69ab      	ldr	r3, [r5, #24]
 8009db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009db6:	3b01      	subs	r3, #1
 8009db8:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8009dbc:	61ab      	str	r3, [r5, #24]
 8009dbe:	692b      	ldr	r3, [r5, #16]
 8009dc0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8009dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dc8:	edd5 6a07 	vldr	s13, [r5, #28]
 8009dcc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8009dd0:	440b      	add	r3, r1
 8009dd2:	68e9      	ldr	r1, [r5, #12]
 8009dd4:	612b      	str	r3, [r5, #16]
 8009dd6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009dda:	428b      	cmp	r3, r1
 8009ddc:	edc5 6a07 	vstr	s13, [r5, #28]
 8009de0:	db15      	blt.n	8009e0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8009de2:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8009de6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009dea:	3201      	adds	r2, #1
 8009dec:	edc5 6a07 	vstr	s13, [r5, #28]
 8009df0:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8009df4:	602a      	str	r2, [r5, #0]
 8009df6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009dfa:	1a5b      	subs	r3, r3, r1
 8009dfc:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8009e00:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8009e04:	612b      	str	r3, [r5, #16]
 8009e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e0a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8009e0e:	3f01      	subs	r7, #1
 8009e10:	e757      	b.n	8009cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8009e12:	ad39      	add	r5, sp, #228	@ 0xe4
 8009e14:	ac19      	add	r4, sp, #100	@ 0x64
 8009e16:	e72d      	b.n	8009c74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8009e18:	4613      	mov	r3, r2
 8009e1a:	e744      	b.n	8009ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8009e22:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8009e24:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8009e28:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8009e2c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8009e30:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8009e34:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8009e38:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8009e3c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8009e40:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8009e42:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8009e46:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8009e4a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8009e4e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8009e52:	960e      	str	r6, [sp, #56]	@ 0x38
 8009e54:	469e      	mov	lr, r3
 8009e56:	461f      	mov	r7, r3
 8009e58:	f04f 0900 	mov.w	r9, #0
 8009e5c:	2f00      	cmp	r7, #0
 8009e5e:	d146      	bne.n	8009eee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8009e60:	449c      	add	ip, r3
 8009e62:	1ad7      	subs	r7, r2, r3
 8009e64:	f1b9 0f00 	cmp.w	r9, #0
 8009e68:	d009      	beq.n	8009e7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8009e6a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8009e6e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8009e70:	913d      	str	r1, [sp, #244]	@ 0xf4
 8009e72:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8009e76:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8009e7a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8009e7e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8009e80:	910e      	str	r1, [sp, #56]	@ 0x38
 8009e82:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8009e86:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8009e8a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8009e8e:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8009e92:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8009e96:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8009e9a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8009e9e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8009ea2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8009ea6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8009eaa:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8009eae:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8009eb2:	f04f 0800 	mov.w	r8, #0
 8009eb6:	f1be 0f00 	cmp.w	lr, #0
 8009eba:	d030      	beq.n	8009f1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8009ebc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8009ebe:	4431      	add	r1, r6
 8009ec0:	4549      	cmp	r1, r9
 8009ec2:	4450      	add	r0, sl
 8009ec4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009ec8:	ee37 7a04 	vadd.f32	s14, s14, s8
 8009ecc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009ed0:	db08      	blt.n	8009ee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8009ed2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009ed6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009eda:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009ede:	3001      	adds	r0, #1
 8009ee0:	eba1 0109 	sub.w	r1, r1, r9
 8009ee4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009ee8:	f04f 0801 	mov.w	r8, #1
 8009eec:	e7e3      	b.n	8009eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8009eee:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8009ef0:	4431      	add	r1, r6
 8009ef2:	4541      	cmp	r1, r8
 8009ef4:	4450      	add	r0, sl
 8009ef6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8009efa:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009efe:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8009f02:	db08      	blt.n	8009f16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8009f04:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009f08:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009f0c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009f10:	3001      	adds	r0, #1
 8009f12:	eba1 0108 	sub.w	r1, r1, r8
 8009f16:	3f01      	subs	r7, #1
 8009f18:	f04f 0901 	mov.w	r9, #1
 8009f1c:	e79e      	b.n	8009e5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8009f1e:	449c      	add	ip, r3
 8009f20:	1aff      	subs	r7, r7, r3
 8009f22:	f1b8 0f00 	cmp.w	r8, #0
 8009f26:	d009      	beq.n	8009f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8009f28:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8009f2c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f2e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8009f32:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8009f36:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8009f3a:	911d      	str	r1, [sp, #116]	@ 0x74
 8009f3c:	1ad2      	subs	r2, r2, r3
 8009f3e:	e6b5      	b.n	8009cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8009f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	b923      	cbnz	r3, 8009f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009f46:	4b04      	ldr	r3, [pc, #16]	@ (8009f58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	6803      	ldr	r3, [r0, #0]
 8009f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4e:	4798      	blx	r3
 8009f50:	b05b      	add	sp, #364	@ 0x16c
 8009f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f56:	bf00      	nop
 8009f58:	2001242c 	.word	0x2001242c

08009f5c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d818      	bhi.n	8009f92 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8009f60:	e8df f003 	tbb	[pc, r3]
 8009f64:	130d0602 	.word	0x130d0602
 8009f68:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009f6c:	1850      	adds	r0, r2, r1
 8009f6e:	4770      	bx	lr
 8009f70:	8803      	ldrh	r3, [r0, #0]
 8009f72:	8880      	ldrh	r0, [r0, #4]
 8009f74:	4418      	add	r0, r3
 8009f76:	b200      	sxth	r0, r0
 8009f78:	1a80      	subs	r0, r0, r2
 8009f7a:	3801      	subs	r0, #1
 8009f7c:	4770      	bx	lr
 8009f7e:	8803      	ldrh	r3, [r0, #0]
 8009f80:	8880      	ldrh	r0, [r0, #4]
 8009f82:	4418      	add	r0, r3
 8009f84:	b200      	sxth	r0, r0
 8009f86:	1a40      	subs	r0, r0, r1
 8009f88:	e7f7      	b.n	8009f7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8009f8a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8009f8e:	4410      	add	r0, r2
 8009f90:	4770      	bx	lr
 8009f92:	2000      	movs	r0, #0
 8009f94:	4770      	bx	lr

08009f96 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d817      	bhi.n	8009fca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8009f9a:	e8df f003 	tbb	[pc, r3]
 8009f9e:	0602      	.short	0x0602
 8009fa0:	1009      	.short	0x1009
 8009fa2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8009fa6:	1850      	adds	r0, r2, r1
 8009fa8:	4770      	bx	lr
 8009faa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009fae:	e7fa      	b.n	8009fa6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8009fb0:	8843      	ldrh	r3, [r0, #2]
 8009fb2:	88c0      	ldrh	r0, [r0, #6]
 8009fb4:	4418      	add	r0, r3
 8009fb6:	b200      	sxth	r0, r0
 8009fb8:	1a80      	subs	r0, r0, r2
 8009fba:	3801      	subs	r0, #1
 8009fbc:	4770      	bx	lr
 8009fbe:	8843      	ldrh	r3, [r0, #2]
 8009fc0:	88c0      	ldrh	r0, [r0, #6]
 8009fc2:	4418      	add	r0, r3
 8009fc4:	b200      	sxth	r0, r0
 8009fc6:	1a40      	subs	r0, r0, r1
 8009fc8:	e7f7      	b.n	8009fba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8009fca:	2000      	movs	r0, #0
 8009fcc:	4770      	bx	lr
	...

08009fd0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8009fd0:	4b01      	ldr	r3, [pc, #4]	@ (8009fd8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	4770      	bx	lr
 8009fd8:	20012434 	.word	0x20012434

08009fdc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8009fdc:	4603      	mov	r3, r0
 8009fde:	b1c8      	cbz	r0, 800a014 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8009fe0:	0c02      	lsrs	r2, r0, #16
 8009fe2:	0412      	lsls	r2, r2, #16
 8009fe4:	b9a2      	cbnz	r2, 800a010 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8009fe6:	0403      	lsls	r3, r0, #16
 8009fe8:	2010      	movs	r0, #16
 8009fea:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8009fee:	bf04      	itt	eq
 8009ff0:	021b      	lsleq	r3, r3, #8
 8009ff2:	3008      	addeq	r0, #8
 8009ff4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8009ff8:	bf04      	itt	eq
 8009ffa:	011b      	lsleq	r3, r3, #4
 8009ffc:	3004      	addeq	r0, #4
 8009ffe:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800a002:	bf04      	itt	eq
 800a004:	009b      	lsleq	r3, r3, #2
 800a006:	3002      	addeq	r0, #2
 800a008:	2b00      	cmp	r3, #0
 800a00a:	db04      	blt.n	800a016 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800a00c:	3001      	adds	r0, #1
 800a00e:	4770      	bx	lr
 800a010:	2000      	movs	r0, #0
 800a012:	e7ea      	b.n	8009fea <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800a014:	2020      	movs	r0, #32
 800a016:	4770      	bx	lr

0800a018 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	b087      	sub	sp, #28
 800a01e:	460d      	mov	r5, r1
 800a020:	4616      	mov	r6, r2
 800a022:	4698      	mov	r8, r3
 800a024:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800a028:	4601      	mov	r1, r0
 800a02a:	b120      	cbz	r0, 800a036 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a02c:	b11a      	cbz	r2, 800a036 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a02e:	2d1f      	cmp	r5, #31
 800a030:	d801      	bhi.n	800a036 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a032:	2b1f      	cmp	r3, #31
 800a034:	d904      	bls.n	800a040 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800a036:	2000      	movs	r0, #0
 800a038:	6038      	str	r0, [r7, #0]
 800a03a:	b007      	add	sp, #28
 800a03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a040:	b97d      	cbnz	r5, 800a062 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800a042:	b143      	cbz	r3, 800a056 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800a044:	4602      	mov	r2, r0
 800a046:	e9cd 4700 	strd	r4, r7, [sp]
 800a04a:	462b      	mov	r3, r5
 800a04c:	4641      	mov	r1, r8
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ffe2 	bl	800a018 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a054:	e7f1      	b.n	800a03a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a056:	f04f 33ff 	mov.w	r3, #4294967295
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800a060:	e7eb      	b.n	800a03a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a062:	fa32 fa05 	lsrs.w	sl, r2, r5
 800a066:	d106      	bne.n	800a076 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800a068:	4346      	muls	r6, r0
 800a06a:	fbb6 f0f4 	udiv	r0, r6, r4
 800a06e:	fb04 6610 	mls	r6, r4, r0, r6
 800a072:	603e      	str	r6, [r7, #0]
 800a074:	e7e1      	b.n	800a03a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a076:	2201      	movs	r2, #1
 800a078:	40aa      	lsls	r2, r5
 800a07a:	3a01      	subs	r2, #1
 800a07c:	4016      	ands	r6, r2
 800a07e:	fa00 fb05 	lsl.w	fp, r0, r5
 800a082:	4630      	mov	r0, r6
 800a084:	fbbb f9f4 	udiv	r9, fp, r4
 800a088:	fb0a f309 	mul.w	r3, sl, r9
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	f7ff ffa5 	bl	8009fdc <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a092:	462b      	mov	r3, r5
 800a094:	460a      	mov	r2, r1
 800a096:	e9cd 4700 	strd	r4, r7, [sp]
 800a09a:	4601      	mov	r1, r0
 800a09c:	4630      	mov	r0, r6
 800a09e:	f7ff ffbb 	bl	800a018 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a0a2:	fb04 b919 	mls	r9, r4, r9, fp
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	4648      	mov	r0, r9
 800a0aa:	eb05 0108 	add.w	r1, r5, r8
 800a0ae:	f7ff ff95 	bl	8009fdc <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a0b2:	ab05      	add	r3, sp, #20
 800a0b4:	e9cd 4300 	strd	r4, r3, [sp]
 800a0b8:	464a      	mov	r2, r9
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4650      	mov	r0, sl
 800a0be:	f7ff ffab 	bl	800a018 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	9a05      	ldr	r2, [sp, #20]
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	4411      	add	r1, r2
 800a0ca:	fbb1 f2f4 	udiv	r2, r1, r4
 800a0ce:	18d3      	adds	r3, r2, r3
 800a0d0:	441e      	add	r6, r3
 800a0d2:	fb04 1412 	mls	r4, r4, r2, r1
 800a0d6:	4430      	add	r0, r6
 800a0d8:	603c      	str	r4, [r7, #0]
 800a0da:	e7ae      	b.n	800a03a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800a0dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800a0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	f1b0 0900 	subs.w	r9, r0, #0
 800a0e6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a0e8:	461d      	mov	r5, r3
 800a0ea:	bfbf      	itttt	lt
 800a0ec:	6823      	ldrlt	r3, [r4, #0]
 800a0ee:	425b      	neglt	r3, r3
 800a0f0:	f1c9 0900 	rsblt	r9, r9, #0
 800a0f4:	6023      	strlt	r3, [r4, #0]
 800a0f6:	bfb4      	ite	lt
 800a0f8:	f04f 36ff 	movlt.w	r6, #4294967295
 800a0fc:	2601      	movge	r6, #1
 800a0fe:	2a00      	cmp	r2, #0
 800a100:	4617      	mov	r7, r2
 800a102:	da04      	bge.n	800a10e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	425b      	negs	r3, r3
 800a108:	4257      	negs	r7, r2
 800a10a:	4276      	negs	r6, r6
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	2d00      	cmp	r5, #0
 800a110:	4638      	mov	r0, r7
 800a112:	bfba      	itte	lt
 800a114:	426d      	neglt	r5, r5
 800a116:	f04f 38ff 	movlt.w	r8, #4294967295
 800a11a:	f04f 0801 	movge.w	r8, #1
 800a11e:	f7ff ff5d 	bl	8009fdc <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a122:	ab03      	add	r3, sp, #12
 800a124:	e9cd 5300 	strd	r5, r3, [sp]
 800a128:	463a      	mov	r2, r7
 800a12a:	4603      	mov	r3, r0
 800a12c:	4648      	mov	r0, r9
 800a12e:	f7ff ff73 	bl	800a018 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	9a03      	ldr	r2, [sp, #12]
 800a136:	4546      	cmp	r6, r8
 800a138:	441a      	add	r2, r3
 800a13a:	fb92 f3f5 	sdiv	r3, r2, r5
 800a13e:	4418      	add	r0, r3
 800a140:	bf18      	it	ne
 800a142:	4240      	negne	r0, r0
 800a144:	fb05 2313 	mls	r3, r5, r3, r2
 800a148:	1c72      	adds	r2, r6, #1
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	d105      	bne.n	800a15a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f1c3 0200 	rsb	r2, r3, #0
 800a154:	db0b      	blt.n	800a16e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800a156:	6022      	str	r2, [r4, #0]
 800a158:	e006      	b.n	800a168 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a15a:	2e01      	cmp	r6, #1
 800a15c:	d104      	bne.n	800a168 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	da02      	bge.n	800a168 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a162:	442b      	add	r3, r5
 800a164:	3801      	subs	r0, #1
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	b005      	add	sp, #20
 800a16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a16e:	3801      	subs	r0, #1
 800a170:	1b52      	subs	r2, r2, r5
 800a172:	e7f0      	b.n	800a156 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800a174 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800a174:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a178:	4c1c      	ldr	r4, [pc, #112]	@ (800a1ec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800a17a:	6807      	ldr	r7, [r0, #0]
 800a17c:	69a3      	ldr	r3, [r4, #24]
 800a17e:	4605      	mov	r5, r0
 800a180:	b92b      	cbnz	r3, 800a18e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800a182:	6840      	ldr	r0, [r0, #4]
 800a184:	e9c5 7000 	strd	r7, r0, [r5]
 800a188:	b004      	add	sp, #16
 800a18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a18e:	68a2      	ldr	r2, [r4, #8]
 800a190:	6820      	ldr	r0, [r4, #0]
 800a192:	ae04      	add	r6, sp, #16
 800a194:	f04f 0802 	mov.w	r8, #2
 800a198:	fb93 f1f8 	sdiv	r1, r3, r8
 800a19c:	440a      	add	r2, r1
 800a19e:	f846 2d04 	str.w	r2, [r6, #-4]!
 800a1a2:	69e1      	ldr	r1, [r4, #28]
 800a1a4:	9600      	str	r6, [sp, #0]
 800a1a6:	463a      	mov	r2, r7
 800a1a8:	f7ff ff98 	bl	800a0dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a1ac:	69a3      	ldr	r3, [r4, #24]
 800a1ae:	686a      	ldr	r2, [r5, #4]
 800a1b0:	6a21      	ldr	r1, [r4, #32]
 800a1b2:	9600      	str	r6, [sp, #0]
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	6860      	ldr	r0, [r4, #4]
 800a1b8:	f7ff ff90 	bl	800a0dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a1bc:	6962      	ldr	r2, [r4, #20]
 800a1be:	69a3      	ldr	r3, [r4, #24]
 800a1c0:	fb93 f8f8 	sdiv	r8, r3, r8
 800a1c4:	4442      	add	r2, r8
 800a1c6:	9203      	str	r2, [sp, #12]
 800a1c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a1ca:	682a      	ldr	r2, [r5, #0]
 800a1cc:	9600      	str	r6, [sp, #0]
 800a1ce:	4407      	add	r7, r0
 800a1d0:	68e0      	ldr	r0, [r4, #12]
 800a1d2:	f7ff ff83 	bl	800a0dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a1d6:	9600      	str	r6, [sp, #0]
 800a1d8:	4680      	mov	r8, r0
 800a1da:	69a3      	ldr	r3, [r4, #24]
 800a1dc:	686a      	ldr	r2, [r5, #4]
 800a1de:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a1e0:	6920      	ldr	r0, [r4, #16]
 800a1e2:	f7ff ff7b 	bl	800a0dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a1e6:	4440      	add	r0, r8
 800a1e8:	e7cc      	b.n	800a184 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800a1ea:	bf00      	nop
 800a1ec:	20012438 	.word	0x20012438

0800a1f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800a1f0:	4b07      	ldr	r3, [pc, #28]	@ (800a210 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d109      	bne.n	800a20c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800a1f8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a1fc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a200:	8003      	strh	r3, [r0, #0]
 800a202:	4b04      	ldr	r3, [pc, #16]	@ (800a214 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	3b01      	subs	r3, #1
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	800b      	strh	r3, [r1, #0]
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20012424 	.word	0x20012424
 800a214:	20012420 	.word	0x20012420

0800a218 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	4b07      	ldr	r3, [pc, #28]	@ (800a238 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d108      	bne.n	800a234 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800a222:	4b06      	ldr	r3, [pc, #24]	@ (800a23c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800a224:	880c      	ldrh	r4, [r1, #0]
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	1b1b      	subs	r3, r3, r4
 800a230:	8003      	strh	r3, [r0, #0]
 800a232:	800a      	strh	r2, [r1, #0]
 800a234:	bd10      	pop	{r4, pc}
 800a236:	bf00      	nop
 800a238:	20012424 	.word	0x20012424
 800a23c:	20012420 	.word	0x20012420

0800a240 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800a240:	b510      	push	{r4, lr}
 800a242:	4b0a      	ldr	r3, [pc, #40]	@ (800a26c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d10e      	bne.n	800a268 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800a24a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800a24e:	8843      	ldrh	r3, [r0, #2]
 800a250:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a254:	8044      	strh	r4, [r0, #2]
 800a256:	18ca      	adds	r2, r1, r3
 800a258:	4b05      	ldr	r3, [pc, #20]	@ (800a270 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	8003      	strh	r3, [r0, #0]
 800a260:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a264:	80c3      	strh	r3, [r0, #6]
 800a266:	8081      	strh	r1, [r0, #4]
 800a268:	bd10      	pop	{r4, pc}
 800a26a:	bf00      	nop
 800a26c:	20012424 	.word	0x20012424
 800a270:	20012420 	.word	0x20012420

0800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800a274:	4b08      	ldr	r3, [pc, #32]	@ (800a298 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d10c      	bne.n	800a296 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800a27c:	8803      	ldrh	r3, [r0, #0]
 800a27e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800a282:	8842      	ldrh	r2, [r0, #2]
 800a284:	8002      	strh	r2, [r0, #0]
 800a286:	185a      	adds	r2, r3, r1
 800a288:	4b04      	ldr	r3, [pc, #16]	@ (800a29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	1a9b      	subs	r3, r3, r2
 800a28e:	8043      	strh	r3, [r0, #2]
 800a290:	88c3      	ldrh	r3, [r0, #6]
 800a292:	8083      	strh	r3, [r0, #4]
 800a294:	80c1      	strh	r1, [r0, #6]
 800a296:	4770      	bx	lr
 800a298:	20012424 	.word	0x20012424
 800a29c:	20012420 	.word	0x20012420

0800a2a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	4b07      	ldr	r3, [pc, #28]	@ (800a2c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d108      	bne.n	800a2bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800a2aa:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a2ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a2b2:	8003      	strh	r3, [r0, #0]
 800a2b4:	8893      	ldrh	r3, [r2, #4]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	1b1b      	subs	r3, r3, r4
 800a2ba:	800b      	strh	r3, [r1, #0]
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	bf00      	nop
 800a2c0:	20012424 	.word	0x20012424

0800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	460a      	mov	r2, r1
 800a2ce:	d10d      	bne.n	800a2ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800a2d0:	8881      	ldrh	r1, [r0, #4]
 800a2d2:	8803      	ldrh	r3, [r0, #0]
 800a2d4:	440b      	add	r3, r1
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	f821 3b02 	strh.w	r3, [r1], #2
 800a2de:	f7ff ffdf 	bl	800a2a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800a2e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a2e6:	88c2      	ldrh	r2, [r0, #6]
 800a2e8:	8082      	strh	r2, [r0, #4]
 800a2ea:	80c3      	strh	r3, [r0, #6]
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20012424 	.word	0x20012424

0800a2f4 <_ZN8touchgfx11Application13requestRedrawEv>:
 800a2f4:	4b06      	ldr	r3, [pc, #24]	@ (800a310 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800a2f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a2fa:	4b06      	ldr	r3, [pc, #24]	@ (800a314 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800a2fc:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800a300:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a304:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800a308:	2100      	movs	r1, #0
 800a30a:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800a30e:	4770      	bx	lr
 800a310:	20012420 	.word	0x20012420
 800a314:	20012422 	.word	0x20012422

0800a318 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800a318:	4b03      	ldr	r3, [pc, #12]	@ (800a328 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800a31a:	6818      	ldr	r0, [r3, #0]
 800a31c:	b110      	cbz	r0, 800a324 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800a31e:	6803      	ldr	r3, [r0, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	4718      	bx	r3
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20012468 	.word	0x20012468

0800a32c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800a32c:	4770      	bx	lr
	...

0800a330 <_ZN8touchgfx11Application4drawEv>:
 800a330:	b507      	push	{r0, r1, r2, lr}
 800a332:	4b09      	ldr	r3, [pc, #36]	@ (800a358 <_ZN8touchgfx11Application4drawEv+0x28>)
 800a334:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a338:	4b08      	ldr	r3, [pc, #32]	@ (800a35c <_ZN8touchgfx11Application4drawEv+0x2c>)
 800a33a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a33e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a342:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a346:	6803      	ldr	r3, [r0, #0]
 800a348:	2100      	movs	r1, #0
 800a34a:	9100      	str	r1, [sp, #0]
 800a34c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a34e:	4669      	mov	r1, sp
 800a350:	4798      	blx	r3
 800a352:	b003      	add	sp, #12
 800a354:	f85d fb04 	ldr.w	pc, [sp], #4
 800a358:	20012420 	.word	0x20012420
 800a35c:	20012422 	.word	0x20012422

0800a360 <_ZN8touchgfx11Application10invalidateEv>:
 800a360:	4b09      	ldr	r3, [pc, #36]	@ (800a388 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800a362:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a366:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800a368:	b082      	sub	sp, #8
 800a36a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a36e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a372:	2100      	movs	r1, #0
 800a374:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a378:	9100      	str	r1, [sp, #0]
 800a37a:	6803      	ldr	r3, [r0, #0]
 800a37c:	aa02      	add	r2, sp, #8
 800a37e:	e912 0006 	ldmdb	r2, {r1, r2}
 800a382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a384:	b002      	add	sp, #8
 800a386:	4718      	bx	r3
 800a388:	20012420 	.word	0x20012420
 800a38c:	20012422 	.word	0x20012422

0800a390 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800a390:	4b03      	ldr	r3, [pc, #12]	@ (800a3a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	b110      	cbz	r0, 800a39c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800a396:	6803      	ldr	r3, [r0, #0]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	4718      	bx	r3
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20012468 	.word	0x20012468

0800a3a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800a3a4:	4b03      	ldr	r3, [pc, #12]	@ (800a3b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800a3a6:	6818      	ldr	r0, [r3, #0]
 800a3a8:	b110      	cbz	r0, 800a3b0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800a3aa:	6803      	ldr	r3, [r0, #0]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	4718      	bx	r3
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	20012468 	.word	0x20012468

0800a3b8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800a3be:	4770      	bx	lr

0800a3c0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800a3c0:	4b03      	ldr	r3, [pc, #12]	@ (800a3d0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	b110      	cbz	r0, 800a3cc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800a3c6:	6803      	ldr	r3, [r0, #0]
 800a3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ca:	4718      	bx	r3
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	20012468 	.word	0x20012468

0800a3d4 <_ZN8touchgfx11ApplicationD1Ev>:
 800a3d4:	4770      	bx	lr

0800a3d6 <_ZN8touchgfx11ApplicationD0Ev>:
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800a3dc:	4604      	mov	r4, r0
 800a3de:	f005 fc35 	bl	800fc4c <_ZdlPvj>
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	bd10      	pop	{r4, pc}

0800a3e6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800a3e6:	b510      	push	{r4, lr}
 800a3e8:	f9b1 4000 	ldrsh.w	r4, [r1]
 800a3ec:	888a      	ldrh	r2, [r1, #4]
 800a3ee:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a3f2:	4422      	add	r2, r4
 800a3f4:	b212      	sxth	r2, r2
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	da15      	bge.n	800a426 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800a3fa:	8882      	ldrh	r2, [r0, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	b21b      	sxth	r3, r3
 800a400:	429c      	cmp	r4, r3
 800a402:	da10      	bge.n	800a426 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800a404:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800a408:	88c9      	ldrh	r1, [r1, #6]
 800a40a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a40e:	4419      	add	r1, r3
 800a410:	b209      	sxth	r1, r1
 800a412:	428a      	cmp	r2, r1
 800a414:	da07      	bge.n	800a426 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800a416:	88c0      	ldrh	r0, [r0, #6]
 800a418:	4410      	add	r0, r2
 800a41a:	b200      	sxth	r0, r0
 800a41c:	4283      	cmp	r3, r0
 800a41e:	bfac      	ite	ge
 800a420:	2000      	movge	r0, #0
 800a422:	2001      	movlt	r0, #1
 800a424:	bd10      	pop	{r4, pc}
 800a426:	2000      	movs	r0, #0
 800a428:	e7fc      	b.n	800a424 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800a42a <_ZN8touchgfx4Rect10restrictToEss>:
 800a42a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	b510      	push	{r4, lr}
 800a432:	da04      	bge.n	800a43e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800a434:	8884      	ldrh	r4, [r0, #4]
 800a436:	4423      	add	r3, r4
 800a438:	8083      	strh	r3, [r0, #4]
 800a43a:	2300      	movs	r3, #0
 800a43c:	8003      	strh	r3, [r0, #0]
 800a43e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a442:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a446:	1b09      	subs	r1, r1, r4
 800a448:	428b      	cmp	r3, r1
 800a44a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a44e:	bfc8      	it	gt
 800a450:	8081      	strhgt	r1, [r0, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	da04      	bge.n	800a460 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800a456:	88c1      	ldrh	r1, [r0, #6]
 800a458:	440b      	add	r3, r1
 800a45a:	80c3      	strh	r3, [r0, #6]
 800a45c:	2300      	movs	r3, #0
 800a45e:	8043      	strh	r3, [r0, #2]
 800a460:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800a464:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a468:	1a52      	subs	r2, r2, r1
 800a46a:	4293      	cmp	r3, r2
 800a46c:	bfc8      	it	gt
 800a46e:	80c2      	strhgt	r2, [r0, #6]
 800a470:	bd10      	pop	{r4, pc}
	...

0800a474 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800a474:	b510      	push	{r4, lr}
 800a476:	4b10      	ldr	r3, [pc, #64]	@ (800a4b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800a478:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a47c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800a47e:	460c      	mov	r4, r1
 800a480:	4620      	mov	r0, r4
 800a482:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a486:	f7ff ffd0 	bl	800a42a <_ZN8touchgfx4Rect10restrictToEss>
 800a48a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800a48c:	6818      	ldr	r0, [r3, #0]
 800a48e:	b190      	cbz	r0, 800a4b6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800a490:	6803      	ldr	r3, [r0, #0]
 800a492:	4621      	mov	r1, r4
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	4798      	blx	r3
 800a498:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	b118      	cbz	r0, 800a4a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800a49e:	6803      	ldr	r3, [r0, #0]
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	4798      	blx	r3
 800a4a6:	4b08      	ldr	r3, [pc, #32]	@ (800a4c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	69db      	ldr	r3, [r3, #28]
 800a4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b4:	4718      	bx	r3
 800a4b6:	bd10      	pop	{r4, pc}
 800a4b8:	20012422 	.word	0x20012422
 800a4bc:	20012420 	.word	0x20012420
 800a4c0:	20012468 	.word	0x20012468
 800a4c4:	20012464 	.word	0x20012464
 800a4c8:	2001242c 	.word	0x2001242c

0800a4cc <_ZNK8touchgfx4Rect8includesERKS0_>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	460f      	mov	r7, r1
 800a4d4:	f7fd fee5 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a4d8:	b9e8      	cbnz	r0, 800a516 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800a4da:	f9b7 5000 	ldrsh.w	r5, [r7]
 800a4de:	f9b6 4000 	ldrsh.w	r4, [r6]
 800a4e2:	42a5      	cmp	r5, r4
 800a4e4:	db17      	blt.n	800a516 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800a4e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a4ea:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	db11      	blt.n	800a516 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800a4f2:	88b9      	ldrh	r1, [r7, #4]
 800a4f4:	440d      	add	r5, r1
 800a4f6:	88b1      	ldrh	r1, [r6, #4]
 800a4f8:	440c      	add	r4, r1
 800a4fa:	b22d      	sxth	r5, r5
 800a4fc:	b224      	sxth	r4, r4
 800a4fe:	42a5      	cmp	r5, r4
 800a500:	dc09      	bgt.n	800a516 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800a502:	88f8      	ldrh	r0, [r7, #6]
 800a504:	4410      	add	r0, r2
 800a506:	88f2      	ldrh	r2, [r6, #6]
 800a508:	4413      	add	r3, r2
 800a50a:	b200      	sxth	r0, r0
 800a50c:	b21b      	sxth	r3, r3
 800a50e:	4298      	cmp	r0, r3
 800a510:	bfcc      	ite	gt
 800a512:	2000      	movgt	r0, #0
 800a514:	2001      	movle	r0, #1
 800a516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a518 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	460d      	mov	r5, r1
 800a520:	f7fd febf 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a524:	b978      	cbnz	r0, 800a546 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800a526:	4620      	mov	r0, r4
 800a528:	f7fd febb 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a52c:	f9b5 6000 	ldrsh.w	r6, [r5]
 800a530:	b150      	cbz	r0, 800a548 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800a532:	8026      	strh	r6, [r4, #0]
 800a534:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800a538:	8063      	strh	r3, [r4, #2]
 800a53a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800a53e:	80a3      	strh	r3, [r4, #4]
 800a540:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800a544:	80e3      	strh	r3, [r4, #6]
 800a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a548:	f9b4 1000 	ldrsh.w	r1, [r4]
 800a54c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800a550:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800a554:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800a558:	88ed      	ldrh	r5, [r5, #6]
 800a55a:	42b1      	cmp	r1, r6
 800a55c:	460f      	mov	r7, r1
 800a55e:	bfa8      	it	ge
 800a560:	4637      	movge	r7, r6
 800a562:	4293      	cmp	r3, r2
 800a564:	4618      	mov	r0, r3
 800a566:	4466      	add	r6, ip
 800a568:	bfa8      	it	ge
 800a56a:	4610      	movge	r0, r2
 800a56c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800a570:	8027      	strh	r7, [r4, #0]
 800a572:	442a      	add	r2, r5
 800a574:	88e5      	ldrh	r5, [r4, #6]
 800a576:	8060      	strh	r0, [r4, #2]
 800a578:	4461      	add	r1, ip
 800a57a:	442b      	add	r3, r5
 800a57c:	b236      	sxth	r6, r6
 800a57e:	b209      	sxth	r1, r1
 800a580:	b212      	sxth	r2, r2
 800a582:	b21b      	sxth	r3, r3
 800a584:	428e      	cmp	r6, r1
 800a586:	bfac      	ite	ge
 800a588:	ebc7 0106 	rsbge	r1, r7, r6
 800a58c:	ebc7 0101 	rsblt	r1, r7, r1
 800a590:	429a      	cmp	r2, r3
 800a592:	bfac      	ite	ge
 800a594:	ebc0 0202 	rsbge	r2, r0, r2
 800a598:	ebc0 0203 	rsblt	r2, r0, r3
 800a59c:	80a1      	strh	r1, [r4, #4]
 800a59e:	80e2      	strh	r2, [r4, #6]
 800a5a0:	e7d1      	b.n	800a546 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800a5a4 <_ZN8touchgfx11Application11getInstanceEv>:
 800a5a4:	4b01      	ldr	r3, [pc, #4]	@ (800a5ac <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	20012478 	.word	0x20012478

0800a5b0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	4b10      	ldr	r3, [pc, #64]	@ (800a5f4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	b1d3      	cbz	r3, 800a5f0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800a5ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800a5bc:	4f0f      	ldr	r7, [pc, #60]	@ (800a5fc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800a5be:	881c      	ldrh	r4, [r3, #0]
 800a5c0:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800a5c4:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	d90e      	bls.n	800a5ea <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a5d2:	b10a      	cbz	r2, 800a5d8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800a5d4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a5d6:	b900      	cbnz	r0, 800a5da <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800a5d8:	6898      	ldr	r0, [r3, #8]
 800a5da:	6803      	ldr	r3, [r0, #0]
 800a5dc:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	3401      	adds	r4, #1
 800a5e4:	4798      	blx	r3
 800a5e6:	b2a4      	uxth	r4, r4
 800a5e8:	e7ec      	b.n	800a5c4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800a5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	2001242a 	.word	0x2001242a
 800a5f8:	20000084 	.word	0x20000084
 800a5fc:	2001242c 	.word	0x2001242c

0800a600 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800a600:	b510      	push	{r4, lr}
 800a602:	2300      	movs	r3, #0
 800a604:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800a608:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800a60c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800a610:	4604      	mov	r4, r0
 800a612:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800a616:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d90e      	bls.n	800a63c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800a61e:	18e2      	adds	r2, r4, r3
 800a620:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800a624:	b122      	cbz	r2, 800a630 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800a626:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800a62a:	6803      	ldr	r3, [r0, #0]
 800a62c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a62e:	4798      	blx	r3
 800a630:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800a634:	3301      	adds	r3, #1
 800a636:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800a63a:	e7ea      	b.n	800a612 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800a63c:	bd10      	pop	{r4, pc}

0800a63e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800a63e:	2300      	movs	r3, #0
 800a640:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800a644:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800a648:	30a4      	adds	r0, #164	@ 0xa4
 800a64a:	f802 3b01 	strb.w	r3, [r2], #1
 800a64e:	4282      	cmp	r2, r0
 800a650:	d1fb      	bne.n	800a64a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800a652:	4770      	bx	lr

0800a654 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4c0b      	ldr	r4, [pc, #44]	@ (800a684 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800a658:	4605      	mov	r5, r0
 800a65a:	6820      	ldr	r0, [r4, #0]
 800a65c:	460e      	mov	r6, r1
 800a65e:	b110      	cbz	r0, 800a666 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800a660:	6803      	ldr	r3, [r0, #0]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	4798      	blx	r3
 800a666:	1d28      	adds	r0, r5, #4
 800a668:	f7ff ffe9 	bl	800a63e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800a66c:	6026      	str	r6, [r4, #0]
 800a66e:	6833      	ldr	r3, [r6, #0]
 800a670:	4630      	mov	r0, r6
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	4798      	blx	r3
 800a676:	682b      	ldr	r3, [r5, #0]
 800a678:	4628      	mov	r0, r5
 800a67a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a67c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a680:	4718      	bx	r3
 800a682:	bf00      	nop
 800a684:	20012468 	.word	0x20012468

0800a688 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800a688:	2300      	movs	r3, #0
 800a68a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800a68e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800a692:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a694:	461a      	mov	r2, r3
 800a696:	461c      	mov	r4, r3
 800a698:	461d      	mov	r5, r3
 800a69a:	459c      	cmp	ip, r3
 800a69c:	dd1a      	ble.n	800a6d4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800a69e:	18c6      	adds	r6, r0, r3
 800a6a0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800a6a4:	b16e      	cbz	r6, 800a6c2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d008      	beq.n	800a6bc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800a6aa:	fa1f fe82 	uxth.w	lr, r2
 800a6ae:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800a6b2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800a6b6:	1887      	adds	r7, r0, r2
 800a6b8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800a6bc:	3201      	adds	r2, #1
 800a6be:	3301      	adds	r3, #1
 800a6c0:	e7eb      	b.n	800a69a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800a6c2:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800a6c6:	4299      	cmp	r1, r3
 800a6c8:	bfa8      	it	ge
 800a6ca:	3501      	addge	r5, #1
 800a6cc:	429e      	cmp	r6, r3
 800a6ce:	bfc8      	it	gt
 800a6d0:	3401      	addgt	r4, #1
 800a6d2:	e7f4      	b.n	800a6be <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800a6d4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800a6d8:	1b49      	subs	r1, r1, r5
 800a6da:	1b1b      	subs	r3, r3, r4
 800a6dc:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800a6e0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800a6e4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	dd03      	ble.n	800a6f4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800a6f2:	e7f7      	b.n	800a6e4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800a6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a6f8 <_ZN8touchgfx11Application15handleTickEventEv>:
 800a6f8:	b570      	push	{r4, r5, r6, lr}
 800a6fa:	4d16      	ldr	r5, [pc, #88]	@ (800a754 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	6828      	ldr	r0, [r5, #0]
 800a700:	b140      	cbz	r0, 800a714 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800a702:	7a03      	ldrb	r3, [r0, #8]
 800a704:	b933      	cbnz	r3, 800a714 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800a706:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800a70a:	6803      	ldr	r3, [r0, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a712:	4718      	bx	r3
 800a714:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800a718:	4e0f      	ldr	r6, [pc, #60]	@ (800a758 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800a71a:	b973      	cbnz	r3, 800a73a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800a71c:	b168      	cbz	r0, 800a73a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800a71e:	7a03      	ldrb	r3, [r0, #8]
 800a720:	b15b      	cbz	r3, 800a73a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800a722:	6830      	ldr	r0, [r6, #0]
 800a724:	b110      	cbz	r0, 800a72c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800a726:	6803      	ldr	r3, [r0, #0]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	4798      	blx	r3
 800a72c:	6828      	ldr	r0, [r5, #0]
 800a72e:	6803      	ldr	r3, [r0, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	4798      	blx	r3
 800a734:	2301      	movs	r3, #1
 800a736:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800a73a:	3404      	adds	r4, #4
 800a73c:	4620      	mov	r0, r4
 800a73e:	f7ff ff5f 	bl	800a600 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800a742:	4620      	mov	r0, r4
 800a744:	f7ff ffa0 	bl	800a688 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800a748:	6830      	ldr	r0, [r6, #0]
 800a74a:	b110      	cbz	r0, 800a752 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800a74c:	6803      	ldr	r3, [r0, #0]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a750:	e7dd      	b.n	800a70e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800a752:	bd70      	pop	{r4, r5, r6, pc}
 800a754:	2001246c 	.word	0x2001246c
 800a758:	20012468 	.word	0x20012468

0800a75c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800a75c:	4603      	mov	r3, r0
 800a75e:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800a762:	2200      	movs	r2, #0
 800a764:	801a      	strh	r2, [r3, #0]
 800a766:	805a      	strh	r2, [r3, #2]
 800a768:	809a      	strh	r2, [r3, #4]
 800a76a:	80da      	strh	r2, [r3, #6]
 800a76c:	3308      	adds	r3, #8
 800a76e:	428b      	cmp	r3, r1
 800a770:	d1f8      	bne.n	800a764 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800a772:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800a776:	4770      	bx	lr

0800a778 <_ZN8touchgfx11ApplicationC1Ev>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	4606      	mov	r6, r0
 800a77c:	4b1c      	ldr	r3, [pc, #112]	@ (800a7f0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800a77e:	f846 3b04 	str.w	r3, [r6], #4
 800a782:	4604      	mov	r4, r0
 800a784:	2500      	movs	r5, #0
 800a786:	22a8      	movs	r2, #168	@ 0xa8
 800a788:	2100      	movs	r1, #0
 800a78a:	4630      	mov	r0, r6
 800a78c:	f005 fc93 	bl	80100b6 <memset>
 800a790:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800a794:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800a798:	f7ff ffe0 	bl	800a75c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800a79c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800a7a0:	f7ff ffdc 	bl	800a75c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800a7a4:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800a7a8:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800a7ac:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800a7b0:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800a7b4:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800a7b8:	490e      	ldr	r1, [pc, #56]	@ (800a7f4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800a7ba:	480f      	ldr	r0, [pc, #60]	@ (800a7f8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800a7bc:	4f0f      	ldr	r7, [pc, #60]	@ (800a7fc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800a7be:	f005 f8fd 	bl	800f9bc <CRC_Lock>
 800a7c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a800 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800a7c4:	b158      	cbz	r0, 800a7de <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800a7c6:	801d      	strh	r5, [r3, #0]
 800a7c8:	4a0e      	ldr	r2, [pc, #56]	@ (800a804 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	4a0e      	ldr	r2, [pc, #56]	@ (800a808 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800a7d0:	603b      	str	r3, [r7, #0]
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	f7ff ff32 	bl	800a63e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800a7da:	4620      	mov	r0, r4
 800a7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a7e2:	2002      	movs	r0, #2
 800a7e4:	801a      	strh	r2, [r3, #0]
 800a7e6:	6038      	str	r0, [r7, #0]
 800a7e8:	f001 fa5a 	bl	800bca0 <_ZN8touchgfx6Screen4drawEv>
 800a7ec:	e7ec      	b.n	800a7c8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800a7ee:	bf00      	nop
 800a7f0:	08012138 	.word	0x08012138
 800a7f4:	b5e8b5cd 	.word	0xb5e8b5cd
 800a7f8:	f407a5c2 	.word	0xf407a5c2
 800a7fc:	20012468 	.word	0x20012468
 800a800:	20000084 	.word	0x20000084
 800a804:	20012478 	.word	0x20012478
 800a808:	2001246c 	.word	0x2001246c

0800a80c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800a80c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800a810:	3b01      	subs	r3, #1
 800a812:	b29b      	uxth	r3, r3
 800a814:	428b      	cmp	r3, r1
 800a816:	b510      	push	{r4, lr}
 800a818:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800a81c:	d908      	bls.n	800a830 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800a81e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a822:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	6062      	str	r2, [r4, #4]
 800a830:	bd10      	pop	{r4, pc}
	...

0800a834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	4b8f      	ldr	r3, [pc, #572]	@ (800aa78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800a83a:	b08f      	sub	sp, #60	@ 0x3c
 800a83c:	ac0a      	add	r4, sp, #40	@ 0x28
 800a83e:	e884 0006 	stmia.w	r4, {r1, r2}
 800a842:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a846:	4b8d      	ldr	r3, [pc, #564]	@ (800aa7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800a848:	4683      	mov	fp, r0
 800a84a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a84e:	4620      	mov	r0, r4
 800a850:	f7ff fdeb 	bl	800a42a <_ZN8touchgfx4Rect10restrictToEss>
 800a854:	4620      	mov	r0, r4
 800a856:	f7fd fd24 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d16a      	bne.n	800a934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800a85e:	9403      	str	r4, [sp, #12]
 800a860:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800a864:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800a868:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800a86c:	35a4      	adds	r5, #164	@ 0xa4
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	b15c      	cbz	r4, 800a88a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800a872:	4629      	mov	r1, r5
 800a874:	9803      	ldr	r0, [sp, #12]
 800a876:	f7ff fe29 	bl	800a4cc <_ZNK8touchgfx4Rect8includesERKS0_>
 800a87a:	3c01      	subs	r4, #1
 800a87c:	b118      	cbz	r0, 800a886 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800a87e:	b2a1      	uxth	r1, r4
 800a880:	9801      	ldr	r0, [sp, #4]
 800a882:	f7ff ffc3 	bl	800a80c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800a886:	3d08      	subs	r5, #8
 800a888:	e7f2      	b.n	800a870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800a88a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800a88e:	f8cd a010 	str.w	sl, [sp, #16]
 800a892:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a896:	9302      	str	r3, [sp, #8]
 800a898:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a89c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800a8a0:	9306      	str	r3, [sp, #24]
 800a8a2:	445c      	add	r4, fp
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	4626      	mov	r6, r4
 800a8a8:	f8cd a014 	str.w	sl, [sp, #20]
 800a8ac:	462f      	mov	r7, r5
 800a8ae:	9b05      	ldr	r3, [sp, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d073      	beq.n	800a99c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800a8b4:	9903      	ldr	r1, [sp, #12]
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f7ff fd95 	bl	800a3e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800a8bc:	b350      	cbz	r0, 800a914 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800a8be:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800a8c2:	f9b6 c000 	ldrsh.w	ip, [r6]
 800a8c6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800a8ca:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800a8ce:	45e6      	cmp	lr, ip
 800a8d0:	db33      	blt.n	800a93a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800a8d2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800a8d6:	88b3      	ldrh	r3, [r6, #4]
 800a8d8:	4472      	add	r2, lr
 800a8da:	4463      	add	r3, ip
 800a8dc:	b212      	sxth	r2, r2
 800a8de:	b21b      	sxth	r3, r3
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	dc2a      	bgt.n	800a93a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800a8e4:	88f3      	ldrh	r3, [r6, #6]
 800a8e6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800a8ea:	fa1f f289 	uxth.w	r2, r9
 800a8ee:	4413      	add	r3, r2
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	45c8      	cmp	r8, r9
 800a8f4:	fa1f fc88 	uxth.w	ip, r8
 800a8f8:	fa0f fe83 	sxth.w	lr, r3
 800a8fc:	db0f      	blt.n	800a91e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800a8fe:	eba3 030c 	sub.w	r3, r3, ip
 800a902:	1ac9      	subs	r1, r1, r3
 800a904:	b209      	sxth	r1, r1
 800a906:	2900      	cmp	r1, #0
 800a908:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800a90c:	dd12      	ble.n	800a934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800a90e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800a912:	4605      	mov	r5, r0
 800a914:	9b05      	ldr	r3, [sp, #20]
 800a916:	3b01      	subs	r3, #1
 800a918:	9305      	str	r3, [sp, #20]
 800a91a:	3e08      	subs	r6, #8
 800a91c:	e7c7      	b.n	800a8ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800a91e:	4461      	add	r1, ip
 800a920:	b209      	sxth	r1, r1
 800a922:	4571      	cmp	r1, lr
 800a924:	dc38      	bgt.n	800a998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800a926:	eba2 020c 	sub.w	r2, r2, ip
 800a92a:	b212      	sxth	r2, r2
 800a92c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800a930:	2a00      	cmp	r2, #0
 800a932:	dcee      	bgt.n	800a912 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800a934:	b00f      	add	sp, #60	@ 0x3c
 800a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93a:	45c8      	cmp	r8, r9
 800a93c:	db2c      	blt.n	800a998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800a93e:	88f3      	ldrh	r3, [r6, #6]
 800a940:	4499      	add	r9, r3
 800a942:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800a946:	4498      	add	r8, r3
 800a948:	fa0f f989 	sxth.w	r9, r9
 800a94c:	fa0f f888 	sxth.w	r8, r8
 800a950:	45c1      	cmp	r9, r8
 800a952:	db21      	blt.n	800a998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800a954:	88b3      	ldrh	r3, [r6, #4]
 800a956:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800a95a:	fa1f f28c 	uxth.w	r2, ip
 800a95e:	4413      	add	r3, r2
 800a960:	b29b      	uxth	r3, r3
 800a962:	45e6      	cmp	lr, ip
 800a964:	fa1f f88e 	uxth.w	r8, lr
 800a968:	fa0f f983 	sxth.w	r9, r3
 800a96c:	db0a      	blt.n	800a984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800a96e:	eba3 0308 	sub.w	r3, r3, r8
 800a972:	1ac9      	subs	r1, r1, r3
 800a974:	b209      	sxth	r1, r1
 800a976:	2900      	cmp	r1, #0
 800a978:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800a97c:	ddda      	ble.n	800a934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800a97e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800a982:	e7c6      	b.n	800a912 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800a984:	4441      	add	r1, r8
 800a986:	b209      	sxth	r1, r1
 800a988:	4549      	cmp	r1, r9
 800a98a:	dc05      	bgt.n	800a998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800a98c:	eba2 0208 	sub.w	r2, r2, r8
 800a990:	b212      	sxth	r2, r2
 800a992:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800a996:	e7cb      	b.n	800a930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800a998:	4607      	mov	r7, r0
 800a99a:	e7bb      	b.n	800a914 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800a99c:	2d00      	cmp	r5, #0
 800a99e:	d181      	bne.n	800a8a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800a9a0:	2f00      	cmp	r7, #0
 800a9a2:	f000 81dd 	beq.w	800ad60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800a9a6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800a9aa:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800a9ae:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800a9b2:	b2b3      	uxth	r3, r6
 800a9b4:	9305      	str	r3, [sp, #20]
 800a9b6:	9a05      	ldr	r2, [sp, #20]
 800a9b8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800a9bc:	4413      	add	r3, r2
 800a9be:	b2ba      	uxth	r2, r7
 800a9c0:	4492      	add	sl, r2
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	fa1f fa8a 	uxth.w	sl, sl
 800a9c8:	fa0f f883 	sxth.w	r8, r3
 800a9cc:	fa0f f98a 	sxth.w	r9, sl
 800a9d0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800a9d4:	9b04      	ldr	r3, [sp, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d052      	beq.n	800aa80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800a9da:	9903      	ldr	r1, [sp, #12]
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f7ff fd02 	bl	800a3e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800a9e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a9e6:	b1c0      	cbz	r0, 800aa1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800a9e8:	f9b4 e000 	ldrsh.w	lr, [r4]
 800a9ec:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800a9f0:	4576      	cmp	r6, lr
 800a9f2:	dc22      	bgt.n	800aa3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800a9f4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800a9f8:	44f4      	add	ip, lr
 800a9fa:	fa0f fc8c 	sxth.w	ip, ip
 800a9fe:	45e0      	cmp	r8, ip
 800aa00:	db1b      	blt.n	800aa3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800aa02:	428f      	cmp	r7, r1
 800aa04:	fa1f fc81 	uxth.w	ip, r1
 800aa08:	88e1      	ldrh	r1, [r4, #6]
 800aa0a:	dc0d      	bgt.n	800aa28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800aa0c:	ebaa 0c0c 	sub.w	ip, sl, ip
 800aa10:	eba1 010c 	sub.w	r1, r1, ip
 800aa14:	f8a4 9002 	strh.w	r9, [r4, #2]
 800aa18:	80e1      	strh	r1, [r4, #6]
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	9904      	ldr	r1, [sp, #16]
 800aa1e:	3901      	subs	r1, #1
 800aa20:	9104      	str	r1, [sp, #16]
 800aa22:	3c08      	subs	r4, #8
 800aa24:	4605      	mov	r5, r0
 800aa26:	e7d3      	b.n	800a9d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800aa28:	4461      	add	r1, ip
 800aa2a:	b209      	sxth	r1, r1
 800aa2c:	4549      	cmp	r1, r9
 800aa2e:	dcf5      	bgt.n	800aa1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800aa30:	eba2 0c0c 	sub.w	ip, r2, ip
 800aa34:	f8a4 c006 	strh.w	ip, [r4, #6]
 800aa38:	e7ef      	b.n	800aa1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800aa3a:	428f      	cmp	r7, r1
 800aa3c:	dcee      	bgt.n	800aa1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800aa3e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800aa42:	4461      	add	r1, ip
 800aa44:	b209      	sxth	r1, r1
 800aa46:	4589      	cmp	r9, r1
 800aa48:	dbe8      	blt.n	800aa1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800aa4a:	4576      	cmp	r6, lr
 800aa4c:	fa1f fc8e 	uxth.w	ip, lr
 800aa50:	88a1      	ldrh	r1, [r4, #4]
 800aa52:	dc07      	bgt.n	800aa64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800aa54:	eba3 0c0c 	sub.w	ip, r3, ip
 800aa58:	eba1 010c 	sub.w	r1, r1, ip
 800aa5c:	f8a4 8000 	strh.w	r8, [r4]
 800aa60:	80a1      	strh	r1, [r4, #4]
 800aa62:	e7da      	b.n	800aa1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800aa64:	4461      	add	r1, ip
 800aa66:	b209      	sxth	r1, r1
 800aa68:	4588      	cmp	r8, r1
 800aa6a:	dbd7      	blt.n	800aa1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800aa6c:	9905      	ldr	r1, [sp, #20]
 800aa6e:	eba1 0c0c 	sub.w	ip, r1, ip
 800aa72:	f8a4 c004 	strh.w	ip, [r4, #4]
 800aa76:	e7d0      	b.n	800aa1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800aa78:	20012422 	.word	0x20012422
 800aa7c:	20012420 	.word	0x20012420
 800aa80:	2d00      	cmp	r5, #0
 800aa82:	f000 816d 	beq.w	800ad60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800aa86:	9b06      	ldr	r3, [sp, #24]
 800aa88:	445b      	add	r3, fp
 800aa8a:	461c      	mov	r4, r3
 800aa8c:	9b02      	ldr	r3, [sp, #8]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	f000 8166 	beq.w	800ad60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800aa94:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800aa98:	4629      	mov	r1, r5
 800aa9a:	9803      	ldr	r0, [sp, #12]
 800aa9c:	f7ff fd16 	bl	800a4cc <_ZNK8touchgfx4Rect8includesERKS0_>
 800aaa0:	b120      	cbz	r0, 800aaac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800aaa2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800aaa6:	9801      	ldr	r0, [sp, #4]
 800aaa8:	f7ff feb0 	bl	800a80c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800aaac:	9903      	ldr	r1, [sp, #12]
 800aaae:	4628      	mov	r0, r5
 800aab0:	f7ff fc99 	bl	800a3e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f000 809c 	beq.w	800abf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800aaba:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800aabe:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800aac2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800aac6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aac8:	fa1f f189 	uxth.w	r1, r9
 800aacc:	eb01 0c03 	add.w	ip, r1, r3
 800aad0:	fa1f fa8c 	uxth.w	sl, ip
 800aad4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800aad8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800aadc:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800aae0:	b283      	uxth	r3, r0
 800aae2:	eb03 050c 	add.w	r5, r3, ip
 800aae6:	b2ad      	uxth	r5, r5
 800aae8:	9505      	str	r5, [sp, #20]
 800aaea:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800aaee:	9504      	str	r5, [sp, #16]
 800aaf0:	4548      	cmp	r0, r9
 800aaf2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800aaf6:	f340 8099 	ble.w	800ac2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800aafa:	1a5b      	subs	r3, r3, r1
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	4596      	cmp	lr, r2
 800ab00:	fa0f f08a 	sxth.w	r0, sl
 800ab04:	b21e      	sxth	r6, r3
 800ab06:	dd2e      	ble.n	800ab66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800ab08:	9f02      	ldr	r7, [sp, #8]
 800ab0a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800ab0e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800ab12:	9f04      	ldr	r7, [sp, #16]
 800ab14:	1a3f      	subs	r7, r7, r0
 800ab16:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800ab1a:	fa1f fe8e 	uxth.w	lr, lr
 800ab1e:	b292      	uxth	r2, r2
 800ab20:	ebae 0102 	sub.w	r1, lr, r2
 800ab24:	44a6      	add	lr, r4
 800ab26:	4402      	add	r2, r0
 800ab28:	b289      	uxth	r1, r1
 800ab2a:	fa0f fe8e 	sxth.w	lr, lr
 800ab2e:	b212      	sxth	r2, r2
 800ab30:	b20d      	sxth	r5, r1
 800ab32:	ebae 0202 	sub.w	r2, lr, r2
 800ab36:	436f      	muls	r7, r5
 800ab38:	4372      	muls	r2, r6
 800ab3a:	4297      	cmp	r7, r2
 800ab3c:	db09      	blt.n	800ab52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800ab3e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800ab42:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800ab46:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800ab4a:	449c      	add	ip, r3
 800ab4c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800ab50:	e686      	b.n	800a860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ab52:	4421      	add	r1, r4
 800ab54:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800ab58:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800ab5c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800ab60:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800ab64:	e67c      	b.n	800a860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ab66:	9f04      	ldr	r7, [sp, #16]
 800ab68:	42b8      	cmp	r0, r7
 800ab6a:	da27      	bge.n	800abbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800ab6c:	9902      	ldr	r1, [sp, #8]
 800ab6e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800ab72:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800ab76:	eb05 010e 	add.w	r1, r5, lr
 800ab7a:	fa1f f881 	uxth.w	r8, r1
 800ab7e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800ab82:	4411      	add	r1, r2
 800ab84:	eba1 0108 	sub.w	r1, r1, r8
 800ab88:	b289      	uxth	r1, r1
 800ab8a:	fa0f f988 	sxth.w	r9, r8
 800ab8e:	eba2 020e 	sub.w	r2, r2, lr
 800ab92:	fa0f f881 	sxth.w	r8, r1
 800ab96:	1a3f      	subs	r7, r7, r0
 800ab98:	4372      	muls	r2, r6
 800ab9a:	fb08 f707 	mul.w	r7, r8, r7
 800ab9e:	42ba      	cmp	r2, r7
 800aba0:	dc06      	bgt.n	800abb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800aba2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800aba6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800abaa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800abae:	e7ca      	b.n	800ab46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800abb0:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800abb4:	4429      	add	r1, r5
 800abb6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800abba:	e651      	b.n	800a860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800abbc:	9805      	ldr	r0, [sp, #20]
 800abbe:	ebaa 0000 	sub.w	r0, sl, r0
 800abc2:	b280      	uxth	r0, r0
 800abc4:	2d06      	cmp	r5, #6
 800abc6:	fa0f fe80 	sxth.w	lr, r0
 800abca:	d817      	bhi.n	800abfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800abcc:	9b04      	ldr	r3, [sp, #16]
 800abce:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800abd2:	1c6b      	adds	r3, r5, #1
 800abd4:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800abd8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800abdc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800abe0:	9b01      	ldr	r3, [sp, #4]
 800abe2:	9801      	ldr	r0, [sp, #4]
 800abe4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800abe8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800abec:	805a      	strh	r2, [r3, #2]
 800abee:	809e      	strh	r6, [r3, #4]
 800abf0:	80d9      	strh	r1, [r3, #6]
 800abf2:	9b02      	ldr	r3, [sp, #8]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	9302      	str	r3, [sp, #8]
 800abf8:	3c08      	subs	r4, #8
 800abfa:	e747      	b.n	800aa8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800abfc:	9a02      	ldr	r2, [sp, #8]
 800abfe:	45b6      	cmp	lr, r6
 800ac00:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ac04:	db0d      	blt.n	800ac22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800ac06:	449c      	add	ip, r3
 800ac08:	fa1f fc8c 	uxth.w	ip, ip
 800ac0c:	445a      	add	r2, fp
 800ac0e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800ac12:	448c      	add	ip, r1
 800ac14:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800ac18:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800ac1c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800ac20:	e61e      	b.n	800a860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ac22:	445a      	add	r2, fp
 800ac24:	4484      	add	ip, r0
 800ac26:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800ac2a:	e78f      	b.n	800ab4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800ac2c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800ac30:	fa1f f18e 	uxth.w	r1, lr
 800ac34:	eb01 0806 	add.w	r8, r1, r6
 800ac38:	b293      	uxth	r3, r2
 800ac3a:	fa1f f888 	uxth.w	r8, r8
 800ac3e:	9306      	str	r3, [sp, #24]
 800ac40:	fa0f f388 	sxth.w	r3, r8
 800ac44:	9307      	str	r3, [sp, #28]
 800ac46:	9f06      	ldr	r7, [sp, #24]
 800ac48:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800ac4c:	443b      	add	r3, r7
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	4596      	cmp	lr, r2
 800ac52:	9308      	str	r3, [sp, #32]
 800ac54:	da24      	bge.n	800aca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800ac56:	9905      	ldr	r1, [sp, #20]
 800ac58:	eba3 0308 	sub.w	r3, r3, r8
 800ac5c:	ebaa 0401 	sub.w	r4, sl, r1
 800ac60:	b2a4      	uxth	r4, r4
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	b225      	sxth	r5, r4
 800ac66:	b219      	sxth	r1, r3
 800ac68:	eba2 020e 	sub.w	r2, r2, lr
 800ac6c:	eba9 0000 	sub.w	r0, r9, r0
 800ac70:	436a      	muls	r2, r5
 800ac72:	4348      	muls	r0, r1
 800ac74:	4282      	cmp	r2, r0
 800ac76:	9a02      	ldr	r2, [sp, #8]
 800ac78:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ac7c:	445a      	add	r2, fp
 800ac7e:	dc06      	bgt.n	800ac8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800ac80:	9b07      	ldr	r3, [sp, #28]
 800ac82:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800ac86:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800ac8a:	44a4      	add	ip, r4
 800ac8c:	e75e      	b.n	800ab4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800ac8e:	9904      	ldr	r1, [sp, #16]
 800ac90:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800ac94:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800ac98:	4433      	add	r3, r6
 800ac9a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800ac9e:	e5df      	b.n	800a860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800aca0:	9f06      	ldr	r7, [sp, #24]
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	1bc9      	subs	r1, r1, r7
 800aca6:	fa0f f78a 	sxth.w	r7, sl
 800acaa:	b289      	uxth	r1, r1
 800acac:	429f      	cmp	r7, r3
 800acae:	fa0f fe81 	sxth.w	lr, r1
 800acb2:	dd23      	ble.n	800acfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800acb4:	9a05      	ldr	r2, [sp, #20]
 800acb6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800acba:	9d07      	ldr	r5, [sp, #28]
 800acbc:	ebaa 0202 	sub.w	r2, sl, r2
 800acc0:	b292      	uxth	r2, r2
 800acc2:	eba5 0a03 	sub.w	sl, r5, r3
 800acc6:	b214      	sxth	r4, r2
 800acc8:	eba9 0000 	sub.w	r0, r9, r0
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	fb0e f000 	mul.w	r0, lr, r0
 800acd2:	fb04 fa0a 	mul.w	sl, r4, sl
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	4550      	cmp	r0, sl
 800acda:	445b      	add	r3, fp
 800acdc:	db03      	blt.n	800ace6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800acde:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800ace2:	4494      	add	ip, r2
 800ace4:	e732      	b.n	800ab4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800ace6:	9a04      	ldr	r2, [sp, #16]
 800ace8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800acec:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800acf0:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800acf4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800acf8:	4431      	add	r1, r6
 800acfa:	e75c      	b.n	800abb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800acfc:	9b08      	ldr	r3, [sp, #32]
 800acfe:	eba3 0308 	sub.w	r3, r3, r8
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2d06      	cmp	r5, #6
 800ad06:	b218      	sxth	r0, r3
 800ad08:	d813      	bhi.n	800ad32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800ad0a:	9b07      	ldr	r3, [sp, #28]
 800ad0c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800ad10:	1c6b      	adds	r3, r5, #1
 800ad12:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800ad16:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800ad1a:	9b01      	ldr	r3, [sp, #4]
 800ad1c:	9901      	ldr	r1, [sp, #4]
 800ad1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ad22:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800ad26:	805a      	strh	r2, [r3, #2]
 800ad28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad2a:	809a      	strh	r2, [r3, #4]
 800ad2c:	f8a3 e006 	strh.w	lr, [r3, #6]
 800ad30:	e75f      	b.n	800abf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800ad32:	9c02      	ldr	r4, [sp, #8]
 800ad34:	4570      	cmp	r0, lr
 800ad36:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800ad3a:	db0d      	blt.n	800ad58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800ad3c:	4431      	add	r1, r6
 800ad3e:	9b06      	ldr	r3, [sp, #24]
 800ad40:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800ad44:	b289      	uxth	r1, r1
 800ad46:	445c      	add	r4, fp
 800ad48:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800ad4c:	4419      	add	r1, r3
 800ad4e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800ad52:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800ad56:	e583      	b.n	800a860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ad58:	445c      	add	r4, fp
 800ad5a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800ad5e:	e79b      	b.n	800ac98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800ad60:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800ad64:	1e65      	subs	r5, r4, #1
 800ad66:	b2ad      	uxth	r5, r5
 800ad68:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800ad6c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800ad70:	42b5      	cmp	r5, r6
 800ad72:	d044      	beq.n	800adfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800ad74:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800ad78:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800ad7c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800ad80:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800ad84:	4282      	cmp	r2, r0
 800ad86:	d11f      	bne.n	800adc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800ad88:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800ad8c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800ad90:	459c      	cmp	ip, r3
 800ad92:	d119      	bne.n	800adc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800ad94:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800ad98:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800ad9c:	19d8      	adds	r0, r3, r7
 800ad9e:	b200      	sxth	r0, r0
 800ada0:	4288      	cmp	r0, r1
 800ada2:	d109      	bne.n	800adb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800ada4:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800ada8:	4413      	add	r3, r2
 800adaa:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800adae:	4629      	mov	r1, r5
 800adb0:	9801      	ldr	r0, [sp, #4]
 800adb2:	f7ff fd2b 	bl	800a80c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800adb6:	e003      	b.n	800adc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800adb8:	4411      	add	r1, r2
 800adba:	b209      	sxth	r1, r1
 800adbc:	42b9      	cmp	r1, r7
 800adbe:	d0f3      	beq.n	800ada8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800adc0:	3d01      	subs	r5, #1
 800adc2:	b2ad      	uxth	r5, r5
 800adc4:	3c08      	subs	r4, #8
 800adc6:	e7d3      	b.n	800ad70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800adc8:	42b9      	cmp	r1, r7
 800adca:	d1f9      	bne.n	800adc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800adcc:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800add0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800add4:	4299      	cmp	r1, r3
 800add6:	d1f3      	bne.n	800adc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800add8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800addc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800ade0:	181f      	adds	r7, r3, r0
 800ade2:	b23f      	sxth	r7, r7
 800ade4:	42ba      	cmp	r2, r7
 800ade6:	d105      	bne.n	800adf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800ade8:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800adec:	440b      	add	r3, r1
 800adee:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800adf2:	e7dc      	b.n	800adae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800adf4:	440a      	add	r2, r1
 800adf6:	b212      	sxth	r2, r2
 800adf8:	4290      	cmp	r0, r2
 800adfa:	d1e1      	bne.n	800adc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800adfc:	e7f6      	b.n	800adec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800adfe:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800ae02:	2e07      	cmp	r6, #7
 800ae04:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800ae08:	d812      	bhi.n	800ae30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800ae0a:	1c75      	adds	r5, r6, #1
 800ae0c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800ae10:	9d01      	ldr	r5, [sp, #4]
 800ae12:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800ae16:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800ae1a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800ae1e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800ae22:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800ae26:	442c      	add	r4, r5
 800ae28:	8061      	strh	r1, [r4, #2]
 800ae2a:	80a2      	strh	r2, [r4, #4]
 800ae2c:	80e3      	strh	r3, [r4, #6]
 800ae2e:	e581      	b.n	800a934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ae30:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800ae34:	3e01      	subs	r6, #1
 800ae36:	445c      	add	r4, fp
 800ae38:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800ae3c:	f04f 37ff 	mov.w	r7, #4294967295
 800ae40:	2500      	movs	r5, #0
 800ae42:	9305      	str	r3, [sp, #20]
 800ae44:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800ae48:	9302      	str	r3, [sp, #8]
 800ae4a:	1e72      	subs	r2, r6, #1
 800ae4c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	4691      	mov	r9, r2
 800ae54:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800ae58:	f1b9 3fff 	cmp.w	r9, #4294967295
 800ae5c:	bf14      	ite	ne
 800ae5e:	9905      	ldrne	r1, [sp, #20]
 800ae60:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800ae64:	6818      	ldr	r0, [r3, #0]
 800ae66:	9207      	str	r2, [sp, #28]
 800ae68:	bf18      	it	ne
 800ae6a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800ae6e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ae72:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800ae76:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800ae7a:	9306      	str	r3, [sp, #24]
 800ae7c:	fb18 f801 	smulbb	r8, r8, r1
 800ae80:	6859      	ldr	r1, [r3, #4]
 800ae82:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800ae86:	4671      	mov	r1, lr
 800ae88:	a80c      	add	r0, sp, #48	@ 0x30
 800ae8a:	f7ff fb45 	bl	800a518 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800ae8e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800ae92:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800ae96:	9b04      	ldr	r3, [sp, #16]
 800ae98:	9a02      	ldr	r2, [sp, #8]
 800ae9a:	fb10 f001 	smulbb	r0, r0, r1
 800ae9e:	fb02 8803 	mla	r8, r2, r3, r8
 800aea2:	eba0 0108 	sub.w	r1, r0, r8
 800aea6:	f04f 0c08 	mov.w	ip, #8
 800aeaa:	fb90 f0fc 	sdiv	r0, r0, ip
 800aeae:	4288      	cmp	r0, r1
 800aeb0:	dc20      	bgt.n	800aef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800aeb2:	4551      	cmp	r1, sl
 800aeb4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aeb8:	da03      	bge.n	800aec2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800aeba:	b1d9      	cbz	r1, 800aef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800aebc:	468a      	mov	sl, r1
 800aebe:	464f      	mov	r7, r9
 800aec0:	4635      	mov	r5, r6
 800aec2:	f109 39ff 	add.w	r9, r9, #4294967295
 800aec6:	f119 0f02 	cmn.w	r9, #2
 800aeca:	d1c5      	bne.n	800ae58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800aecc:	4616      	mov	r6, r2
 800aece:	3201      	adds	r2, #1
 800aed0:	f1a4 0408 	sub.w	r4, r4, #8
 800aed4:	d1b6      	bne.n	800ae44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800aed6:	9b01      	ldr	r3, [sp, #4]
 800aed8:	b2ac      	uxth	r4, r5
 800aeda:	00ed      	lsls	r5, r5, #3
 800aedc:	1958      	adds	r0, r3, r5
 800aede:	1c7b      	adds	r3, r7, #1
 800aee0:	d10b      	bne.n	800aefa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800aee2:	4601      	mov	r1, r0
 800aee4:	9803      	ldr	r0, [sp, #12]
 800aee6:	f7ff fb17 	bl	800a518 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800aeea:	4621      	mov	r1, r4
 800aeec:	9801      	ldr	r0, [sp, #4]
 800aeee:	f7ff fc8d 	bl	800a80c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800aef2:	e4b5      	b.n	800a860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800aef4:	464f      	mov	r7, r9
 800aef6:	4635      	mov	r5, r6
 800aef8:	e7ed      	b.n	800aed6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	00ff      	lsls	r7, r7, #3
 800aefe:	19d9      	adds	r1, r3, r7
 800af00:	f7ff fb0a 	bl	800a518 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800af04:	9b03      	ldr	r3, [sp, #12]
 800af06:	cb03      	ldmia	r3!, {r0, r1}
 800af08:	445f      	add	r7, fp
 800af0a:	445d      	add	r5, fp
 800af0c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800af10:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800af14:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	6869      	ldr	r1, [r5, #4]
 800af1c:	c303      	stmia	r3!, {r0, r1}
 800af1e:	e7e4      	b.n	800aeea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800af20 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800af28:	b09b      	sub	sp, #108	@ 0x6c
 800af2a:	4604      	mov	r4, r0
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7fd f9b8 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800af32:	4605      	mov	r5, r0
 800af34:	b948      	cbnz	r0, 800af4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	e896 0006 	ldmia.w	r6, {r1, r2}
 800af3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3e:	4620      	mov	r0, r4
 800af40:	4798      	blx	r3
 800af42:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800af46:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800af4a:	4bc6      	ldr	r3, [pc, #792]	@ (800b264 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d03f      	beq.n	800afd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800af52:	4dc5      	ldr	r5, [pc, #788]	@ (800b268 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800af54:	4628      	mov	r0, r5
 800af56:	f7fd f9a4 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800af5a:	4606      	mov	r6, r0
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d138      	bne.n	800afd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800af60:	4628      	mov	r0, r5
 800af62:	f7ff f96d 	bl	800a240 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	6829      	ldr	r1, [r5, #0]
 800af6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6c:	686a      	ldr	r2, [r5, #4]
 800af6e:	4620      	mov	r0, r4
 800af70:	4798      	blx	r3
 800af72:	802e      	strh	r6, [r5, #0]
 800af74:	806e      	strh	r6, [r5, #2]
 800af76:	80ae      	strh	r6, [r5, #4]
 800af78:	80ee      	strh	r6, [r5, #6]
 800af7a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800af7e:	4dbb      	ldr	r5, [pc, #748]	@ (800b26c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800af80:	4640      	mov	r0, r8
 800af82:	f7ff fbeb 	bl	800a75c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800af86:	882e      	ldrh	r6, [r5, #0]
 800af88:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800af8c:	4633      	mov	r3, r6
 800af8e:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800af92:	42bb      	cmp	r3, r7
 800af94:	d224      	bcs.n	800afe0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800af96:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800af9a:	2907      	cmp	r1, #7
 800af9c:	d816      	bhi.n	800afcc <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800af9e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800afa2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800afa6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800afaa:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800afae:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800afb2:	1c4a      	adds	r2, r1, #1
 800afb4:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800afb8:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800afbc:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800afc0:	f8a2 a002 	strh.w	sl, [r2, #2]
 800afc4:	f8a2 e004 	strh.w	lr, [r2, #4]
 800afc8:	f8a2 c006 	strh.w	ip, [r2, #6]
 800afcc:	3301      	adds	r3, #1
 800afce:	b29b      	uxth	r3, r3
 800afd0:	e7df      	b.n	800af92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800afd2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1cf      	bne.n	800af7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800afda:	b01b      	add	sp, #108	@ 0x6c
 800afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800afe4:	42b3      	cmp	r3, r6
 800afe6:	d90c      	bls.n	800b002 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800afe8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800afec:	6822      	ldr	r2, [r4, #0]
 800afee:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800aff2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800aff4:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800aff8:	4620      	mov	r0, r4
 800affa:	3601      	adds	r6, #1
 800affc:	47b8      	blx	r7
 800affe:	b2b6      	uxth	r6, r6
 800b000:	e7ee      	b.n	800afe0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800b002:	4a9b      	ldr	r2, [pc, #620]	@ (800b270 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800b004:	6813      	ldr	r3, [r2, #0]
 800b006:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	4691      	mov	r9, r2
 800b00e:	f040 80e2 	bne.w	800b1d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800b012:	8829      	ldrh	r1, [r5, #0]
 800b014:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800b018:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800b01c:	33ae      	adds	r3, #174	@ 0xae
 800b01e:	2600      	movs	r6, #0
 800b020:	428f      	cmp	r7, r1
 800b022:	f103 0308 	add.w	r3, r3, #8
 800b026:	dd0a      	ble.n	800b03e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800b028:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800b02c:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800b030:	4402      	add	r2, r0
 800b032:	b212      	sxth	r2, r2
 800b034:	4296      	cmp	r6, r2
 800b036:	bfb8      	it	lt
 800b038:	4616      	movlt	r6, r2
 800b03a:	3101      	adds	r1, #1
 800b03c:	e7f0      	b.n	800b020 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800b03e:	4b8d      	ldr	r3, [pc, #564]	@ (800b274 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800b040:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800b270 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	2b0f      	cmp	r3, #15
 800b048:	bf88      	it	hi
 800b04a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800b04e:	f04f 0300 	mov.w	r3, #0
 800b052:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b056:	bf98      	it	ls
 800b058:	f04f 0b01 	movls.w	fp, #1
 800b05c:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800b060:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800b064:	4b82      	ldr	r3, [pc, #520]	@ (800b270 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800b066:	4438      	add	r0, r7
 800b068:	b207      	sxth	r7, r0
 800b06a:	6818      	ldr	r0, [r3, #0]
 800b06c:	42b7      	cmp	r7, r6
 800b06e:	6803      	ldr	r3, [r0, #0]
 800b070:	f280 8083 	bge.w	800b17a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800b074:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b078:	4798      	blx	r3
 800b07a:	eb07 030b 	add.w	r3, r7, fp
 800b07e:	4298      	cmp	r0, r3
 800b080:	da07      	bge.n	800b092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800b082:	42b0      	cmp	r0, r6
 800b084:	da05      	bge.n	800b092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800b086:	4287      	cmp	r7, r0
 800b088:	dd6c      	ble.n	800b164 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800b08a:	2f00      	cmp	r7, #0
 800b08c:	dd6a      	ble.n	800b164 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800b08e:	4630      	mov	r0, r6
 800b090:	e004      	b.n	800b09c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800b092:	4287      	cmp	r7, r0
 800b094:	dcfb      	bgt.n	800b08e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800b096:	42b0      	cmp	r0, r6
 800b098:	bfa8      	it	ge
 800b09a:	4630      	movge	r0, r6
 800b09c:	4b76      	ldr	r3, [pc, #472]	@ (800b278 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800b09e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800b0a2:	1bc0      	subs	r0, r0, r7
 800b0a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0a8:	882f      	ldrh	r7, [r5, #0]
 800b0aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b0b4:	f8ad 001a 	strh.w	r0, [sp, #26]
 800b0b8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800b0bc:	42bb      	cmp	r3, r7
 800b0be:	d9cd      	bls.n	800b05c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800b0c0:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800b0c4:	ab07      	add	r3, sp, #28
 800b0c6:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800b0ca:	6851      	ldr	r1, [r2, #4]
 800b0cc:	c303      	stmia	r3!, {r0, r1}
 800b0ce:	a905      	add	r1, sp, #20
 800b0d0:	a807      	add	r0, sp, #28
 800b0d2:	f7ff f988 	bl	800a3e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d04c      	beq.n	800b174 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800b0da:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800b0de:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800b0e2:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800b0e6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800b0ea:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	4686      	mov	lr, r0
 800b0f2:	4290      	cmp	r0, r2
 800b0f4:	4450      	add	r0, sl
 800b0f6:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800b0fa:	bfb8      	it	lt
 800b0fc:	4696      	movlt	lr, r2
 800b0fe:	4452      	add	r2, sl
 800b100:	4299      	cmp	r1, r3
 800b102:	b280      	uxth	r0, r0
 800b104:	b292      	uxth	r2, r2
 800b106:	468c      	mov	ip, r1
 800b108:	fa0f fa82 	sxth.w	sl, r2
 800b10c:	bfb8      	it	lt
 800b10e:	469c      	movlt	ip, r3
 800b110:	b203      	sxth	r3, r0
 800b112:	4553      	cmp	r3, sl
 800b114:	bfb8      	it	lt
 800b116:	4602      	movlt	r2, r0
 800b118:	eba2 020e 	sub.w	r2, r2, lr
 800b11c:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b120:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	f8ad e01c 	strh.w	lr, [sp, #28]
 800b12a:	4411      	add	r1, r2
 800b12c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800b130:	f8ad c01e 	strh.w	ip, [sp, #30]
 800b134:	4413      	add	r3, r2
 800b136:	b289      	uxth	r1, r1
 800b138:	b29b      	uxth	r3, r3
 800b13a:	b208      	sxth	r0, r1
 800b13c:	b21a      	sxth	r2, r3
 800b13e:	4290      	cmp	r0, r2
 800b140:	bfb8      	it	lt
 800b142:	460b      	movlt	r3, r1
 800b144:	eba3 030c 	sub.w	r3, r3, ip
 800b148:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800b14c:	a807      	add	r0, sp, #28
 800b14e:	f7fd f8a8 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b152:	b920      	cbnz	r0, 800b15e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	a907      	add	r1, sp, #28
 800b158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b15a:	4620      	mov	r0, r4
 800b15c:	4798      	blx	r3
 800b15e:	3701      	adds	r7, #1
 800b160:	b2bf      	uxth	r7, r7
 800b162:	e7a9      	b.n	800b0b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800b164:	f8d9 0000 	ldr.w	r0, [r9]
 800b168:	6803      	ldr	r3, [r0, #0]
 800b16a:	2101      	movs	r1, #1
 800b16c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b170:	4798      	blx	r3
 800b172:	e773      	b.n	800b05c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800b174:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800b178:	e7e8      	b.n	800b14c <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800b17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b17c:	4798      	blx	r3
 800b17e:	4b3f      	ldr	r3, [pc, #252]	@ (800b27c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	f43f af29 	beq.w	800afda <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800b188:	2300      	movs	r3, #0
 800b18a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800b18e:	882b      	ldrh	r3, [r5, #0]
 800b190:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800b194:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800b198:	42ab      	cmp	r3, r5
 800b19a:	f4bf af1e 	bcs.w	800afda <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800b19e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800b1a2:	2907      	cmp	r1, #7
 800b1a4:	d814      	bhi.n	800b1d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800b1a6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800b1aa:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800b1ae:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800b1b2:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800b1b6:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800b1ba:	1c4a      	adds	r2, r1, #1
 800b1bc:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800b1c0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800b1c4:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800b1c8:	f8a2 c002 	strh.w	ip, [r2, #2]
 800b1cc:	8097      	strh	r7, [r2, #4]
 800b1ce:	80d6      	strh	r6, [r2, #6]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	e7e0      	b.n	800b198 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	f040 8133 	bne.w	800b442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800b1dc:	4b28      	ldr	r3, [pc, #160]	@ (800b280 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800b1e6:	f000 8098 	beq.w	800b31a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b1ea:	882a      	ldrh	r2, [r5, #0]
 800b1ec:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800b1f0:	3201      	adds	r2, #1
 800b1f2:	b292      	uxth	r2, r2
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	d0c2      	beq.n	800b17e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800b1f8:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800b1fc:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800b200:	441e      	add	r6, r3
 800b202:	b236      	sxth	r6, r6
 800b204:	4694      	mov	ip, r2
 800b206:	f04f 0900 	mov.w	r9, #0
 800b20a:	fa1f f38c 	uxth.w	r3, ip
 800b20e:	4299      	cmp	r1, r3
 800b210:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800b214:	f240 80bf 	bls.w	800b396 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800b218:	4427      	add	r7, r4
 800b21a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800b21e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800b222:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800b226:	4283      	cmp	r3, r0
 800b228:	f340 80a1 	ble.w	800b36e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800b22c:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800b230:	4406      	add	r6, r0
 800b232:	b236      	sxth	r6, r6
 800b234:	429e      	cmp	r6, r3
 800b236:	bfa8      	it	ge
 800b238:	461e      	movge	r6, r3
 800b23a:	46e1      	mov	r9, ip
 800b23c:	f10c 0c01 	add.w	ip, ip, #1
 800b240:	e7e3      	b.n	800b20a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800b242:	d10a      	bne.n	800b25a <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800b244:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800b248:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800b24c:	4562      	cmp	r2, ip
 800b24e:	bfb8      	it	lt
 800b250:	4662      	movlt	r2, ip
 800b252:	4288      	cmp	r0, r1
 800b254:	bfb8      	it	lt
 800b256:	461f      	movlt	r7, r3
 800b258:	e087      	b.n	800b36a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800b25a:	428a      	cmp	r2, r1
 800b25c:	bfb8      	it	lt
 800b25e:	460a      	movlt	r2, r1
 800b260:	e083      	b.n	800b36a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800b262:	bf00      	nop
 800b264:	20012464 	.word	0x20012464
 800b268:	20012470 	.word	0x20012470
 800b26c:	20000084 	.word	0x20000084
 800b270:	2001242c 	.word	0x2001242c
 800b274:	20012422 	.word	0x20012422
 800b278:	20012420 	.word	0x20012420
 800b27c:	2001242a 	.word	0x2001242a
 800b280:	20012424 	.word	0x20012424
 800b284:	19a1      	adds	r1, r4, r6
 800b286:	ab07      	add	r3, sp, #28
 800b288:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800b28c:	6849      	ldr	r1, [r1, #4]
 800b28e:	c303      	stmia	r3!, {r0, r1}
 800b290:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800b294:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800b298:	2b13      	cmp	r3, #19
 800b29a:	bfd8      	it	le
 800b29c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800b2a0:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b2a4:	440b      	add	r3, r1
 800b2a6:	1a9b      	subs	r3, r3, r2
 800b2a8:	a807      	add	r0, sp, #28
 800b2aa:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b2ae:	f7fe ffe1 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800b2b2:	a807      	add	r0, sp, #28
 800b2b4:	f7fc fff5 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b2b8:	bb78      	cbnz	r0, 800b31a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b2ba:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800b2be:	f8d9 0000 	ldr.w	r0, [r9]
 800b2c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b2c6:	f8d0 e000 	ldr.w	lr, [r0]
 800b2ca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b2ce:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800b2d2:	f1bc 0f14 	cmp.w	ip, #20
 800b2d6:	bfa8      	it	ge
 800b2d8:	f04f 0c14 	movge.w	ip, #20
 800b2dc:	fa1f fc8c 	uxth.w	ip, ip
 800b2e0:	f8cd c000 	str.w	ip, [sp]
 800b2e4:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800b2e8:	47d8      	blx	fp
 800b2ea:	4683      	mov	fp, r0
 800b2ec:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800b2f0:	a807      	add	r0, sp, #28
 800b2f2:	f7fe ffa5 	bl	800a240 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	4426      	add	r6, r4
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2fe:	a907      	add	r1, sp, #28
 800b300:	4798      	blx	r3
 800b302:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800b306:	eba0 000b 	sub.w	r0, r0, fp
 800b30a:	b200      	sxth	r0, r0
 800b30c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800b310:	b918      	cbnz	r0, 800b31a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b312:	b2b9      	uxth	r1, r7
 800b314:	4650      	mov	r0, sl
 800b316:	f7ff fa79 	bl	800a80c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b31a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800b31e:	f1bb 0f00 	cmp.w	fp, #0
 800b322:	f43f af2c 	beq.w	800b17e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800b326:	882b      	ldrh	r3, [r5, #0]
 800b328:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800b32c:	3301      	adds	r3, #1
 800b32e:	b29b      	uxth	r3, r3
 800b330:	2700      	movs	r7, #0
 800b332:	b299      	uxth	r1, r3
 800b334:	458b      	cmp	fp, r1
 800b336:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800b33a:	d9a3      	bls.n	800b284 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800b33c:	4426      	add	r6, r4
 800b33e:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800b342:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800b346:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800b34a:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800b34e:	4408      	add	r0, r1
 800b350:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800b354:	4461      	add	r1, ip
 800b356:	b200      	sxth	r0, r0
 800b358:	b209      	sxth	r1, r1
 800b35a:	4288      	cmp	r0, r1
 800b35c:	f6bf af71 	bge.w	800b242 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800b360:	4584      	cmp	ip, r0
 800b362:	4662      	mov	r2, ip
 800b364:	461f      	mov	r7, r3
 800b366:	bfb8      	it	lt
 800b368:	4602      	movlt	r2, r0
 800b36a:	3301      	adds	r3, #1
 800b36c:	e7e1      	b.n	800b332 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800b36e:	d10e      	bne.n	800b38e <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800b370:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800b374:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800b378:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800b37c:	4473      	add	r3, lr
 800b37e:	b21b      	sxth	r3, r3
 800b380:	429e      	cmp	r6, r3
 800b382:	bfa8      	it	ge
 800b384:	461e      	movge	r6, r3
 800b386:	4287      	cmp	r7, r0
 800b388:	bfb8      	it	lt
 800b38a:	46e1      	movlt	r9, ip
 800b38c:	e756      	b.n	800b23c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800b38e:	4286      	cmp	r6, r0
 800b390:	bfa8      	it	ge
 800b392:	4606      	movge	r6, r0
 800b394:	e752      	b.n	800b23c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800b396:	eb0a 0007 	add.w	r0, sl, r7
 800b39a:	4427      	add	r7, r4
 800b39c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b3a0:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800b3a4:	f1bb 0f13 	cmp.w	fp, #19
 800b3a8:	bfde      	ittt	le
 800b3aa:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800b3ae:	445e      	addle	r6, fp
 800b3b0:	b236      	sxthle	r6, r6
 800b3b2:	f7fc ff76 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b3b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	f47f af1a 	bne.w	800b1f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800b3c0:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800b3c4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800b3c8:	482a      	ldr	r0, [pc, #168]	@ (800b474 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800b3ca:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800b3ce:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800b3d2:	6800      	ldr	r0, [r0, #0]
 800b3d4:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b3d8:	1ab6      	subs	r6, r6, r2
 800b3da:	2e14      	cmp	r6, #20
 800b3dc:	f8ad 201e 	strh.w	r2, [sp, #30]
 800b3e0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b3e4:	bfa8      	it	ge
 800b3e6:	2614      	movge	r6, #20
 800b3e8:	f8d0 c000 	ldr.w	ip, [r0]
 800b3ec:	b2b6      	uxth	r6, r6
 800b3ee:	fa1f fb8b 	uxth.w	fp, fp
 800b3f2:	455e      	cmp	r6, fp
 800b3f4:	bf94      	ite	ls
 800b3f6:	9600      	strls	r6, [sp, #0]
 800b3f8:	f8cd b000 	strhi.w	fp, [sp]
 800b3fc:	b292      	uxth	r2, r2
 800b3fe:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800b402:	b29b      	uxth	r3, r3
 800b404:	b289      	uxth	r1, r1
 800b406:	47b0      	blx	r6
 800b408:	6823      	ldr	r3, [r4, #0]
 800b40a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800b40e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b410:	a907      	add	r1, sp, #28
 800b412:	4620      	mov	r0, r4
 800b414:	4798      	blx	r3
 800b416:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b41a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b41e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800b422:	1a5b      	subs	r3, r3, r1
 800b424:	440a      	add	r2, r1
 800b426:	b21b      	sxth	r3, r3
 800b428:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800b42c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800b430:	2b00      	cmp	r3, #0
 800b432:	f47f aeda 	bne.w	800b1ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800b436:	fa1f f189 	uxth.w	r1, r9
 800b43a:	4650      	mov	r0, sl
 800b43c:	f7ff f9e6 	bl	800a80c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b440:	e6d3      	b.n	800b1ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800b442:	882e      	ldrh	r6, [r5, #0]
 800b444:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800b448:	42b3      	cmp	r3, r6
 800b44a:	f67f ae98 	bls.w	800b17e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800b44e:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800b452:	ab07      	add	r3, sp, #28
 800b454:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800b458:	6851      	ldr	r1, [r2, #4]
 800b45a:	c303      	stmia	r3!, {r0, r1}
 800b45c:	a807      	add	r0, sp, #28
 800b45e:	f7fc ff20 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b462:	b920      	cbnz	r0, 800b46e <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	a907      	add	r1, sp, #28
 800b468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b46a:	4620      	mov	r0, r4
 800b46c:	4798      	blx	r3
 800b46e:	3601      	adds	r6, #1
 800b470:	b2b6      	uxth	r6, r6
 800b472:	e7e7      	b.n	800b444 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800b474:	2001242c 	.word	0x2001242c

0800b478 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800b478:	4b03      	ldr	r3, [pc, #12]	@ (800b488 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	801a      	strh	r2, [r3, #0]
 800b47e:	805a      	strh	r2, [r3, #2]
 800b480:	809a      	strh	r2, [r3, #4]
 800b482:	80da      	strh	r2, [r3, #6]
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20012470 	.word	0x20012470

0800b48c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	4606      	mov	r6, r0
 800b492:	b09d      	sub	sp, #116	@ 0x74
 800b494:	a803      	add	r0, sp, #12
 800b496:	4614      	mov	r4, r2
 800b498:	468a      	mov	sl, r1
 800b49a:	461d      	mov	r5, r3
 800b49c:	f000 fdad 	bl	800bffa <_ZN8touchgfx12TextProviderC1Ev>
 800b4a0:	6833      	ldr	r3, [r6, #0]
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4a6:	4798      	blx	r3
 800b4a8:	6833      	ldr	r3, [r6, #0]
 800b4aa:	4607      	mov	r7, r0
 800b4ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	4798      	blx	r3
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	9000      	str	r0, [sp, #0]
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	a803      	add	r0, sp, #12
 800b4bc:	f000 fdf0 	bl	800c0a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b4c0:	2500      	movs	r5, #0
 800b4c2:	462c      	mov	r4, r5
 800b4c4:	46a9      	mov	r9, r5
 800b4c6:	46a8      	mov	r8, r5
 800b4c8:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9302      	str	r3, [sp, #8]
 800b4d0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	d002      	beq.n	800b4de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800b4d8:	455c      	cmp	r4, fp
 800b4da:	bf18      	it	ne
 800b4dc:	4625      	movne	r5, r4
 800b4de:	ab02      	add	r3, sp, #8
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	4651      	mov	r1, sl
 800b4e4:	a803      	add	r0, sp, #12
 800b4e6:	f001 f8cd 	bl	800c684 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	b108      	cbz	r0, 800b4f2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800b4ee:	280a      	cmp	r0, #10
 800b4f0:	d10a      	bne.n	800b508 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800b4f2:	45c1      	cmp	r9, r8
 800b4f4:	bf38      	it	cc
 800b4f6:	46c1      	movcc	r9, r8
 800b4f8:	f04f 0800 	mov.w	r8, #0
 800b4fc:	2c00      	cmp	r4, #0
 800b4fe:	d1e5      	bne.n	800b4cc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800b500:	4648      	mov	r0, r9
 800b502:	b01d      	add	sp, #116	@ 0x74
 800b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b508:	9a02      	ldr	r2, [sp, #8]
 800b50a:	2a00      	cmp	r2, #0
 800b50c:	d0de      	beq.n	800b4cc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800b50e:	7b57      	ldrb	r7, [r2, #13]
 800b510:	6833      	ldr	r3, [r6, #0]
 800b512:	8894      	ldrh	r4, [r2, #4]
 800b514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b516:	007f      	lsls	r7, r7, #1
 800b518:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800b51c:	7a97      	ldrb	r7, [r2, #10]
 800b51e:	4629      	mov	r1, r5
 800b520:	4307      	orrs	r7, r0
 800b522:	4630      	mov	r0, r6
 800b524:	4798      	blx	r3
 800b526:	4438      	add	r0, r7
 800b528:	4480      	add	r8, r0
 800b52a:	fa1f f888 	uxth.w	r8, r8
 800b52e:	e7e5      	b.n	800b4fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800b530 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800b530:	b508      	push	{r3, lr}
 800b532:	6803      	ldr	r3, [r0, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	4798      	blx	r3
 800b538:	b128      	cbz	r0, 800b546 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800b53a:	7b43      	ldrb	r3, [r0, #13]
 800b53c:	7a80      	ldrb	r0, [r0, #10]
 800b53e:	005b      	lsls	r3, r3, #1
 800b540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b544:	4318      	orrs	r0, r3
 800b546:	bd08      	pop	{r3, pc}

0800b548 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800b548:	b40e      	push	{r1, r2, r3}
 800b54a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b54c:	b09e      	sub	sp, #120	@ 0x78
 800b54e:	ab23      	add	r3, sp, #140	@ 0x8c
 800b550:	4605      	mov	r5, r0
 800b552:	f853 4b04 	ldr.w	r4, [r3], #4
 800b556:	9303      	str	r3, [sp, #12]
 800b558:	a805      	add	r0, sp, #20
 800b55a:	f000 fd4e 	bl	800bffa <_ZN8touchgfx12TextProviderC1Ev>
 800b55e:	682b      	ldr	r3, [r5, #0]
 800b560:	4628      	mov	r0, r5
 800b562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b564:	4798      	blx	r3
 800b566:	682b      	ldr	r3, [r5, #0]
 800b568:	4606      	mov	r6, r0
 800b56a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b56c:	4628      	mov	r0, r5
 800b56e:	4798      	blx	r3
 800b570:	4633      	mov	r3, r6
 800b572:	ae1e      	add	r6, sp, #120	@ 0x78
 800b574:	4621      	mov	r1, r4
 800b576:	9000      	str	r0, [sp, #0]
 800b578:	9a03      	ldr	r2, [sp, #12]
 800b57a:	2400      	movs	r4, #0
 800b57c:	a805      	add	r0, sp, #20
 800b57e:	f000 fd8f 	bl	800c0a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b582:	f846 4d68 	str.w	r4, [r6, #-104]!
 800b586:	462a      	mov	r2, r5
 800b588:	4633      	mov	r3, r6
 800b58a:	4621      	mov	r1, r4
 800b58c:	a805      	add	r0, sp, #20
 800b58e:	f001 f879 	bl	800c684 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b592:	b1f0      	cbz	r0, 800b5d2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800b594:	280a      	cmp	r0, #10
 800b596:	d018      	beq.n	800b5ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800b598:	9f04      	ldr	r7, [sp, #16]
 800b59a:	b1b7      	cbz	r7, 800b5ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800b59c:	7b78      	ldrb	r0, [r7, #13]
 800b59e:	7a3b      	ldrb	r3, [r7, #8]
 800b5a0:	88ea      	ldrh	r2, [r5, #6]
 800b5a2:	00c1      	lsls	r1, r0, #3
 800b5a4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800b5a8:	4319      	orrs	r1, r3
 800b5aa:	0643      	lsls	r3, r0, #25
 800b5ac:	bf44      	itt	mi
 800b5ae:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800b5b2:	b219      	sxthmi	r1, r3
 800b5b4:	0100      	lsls	r0, r0, #4
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800b5bc:	4303      	orrs	r3, r0
 800b5be:	4413      	add	r3, r2
 800b5c0:	1a5b      	subs	r3, r3, r1
 800b5c2:	b21b      	sxth	r3, r3
 800b5c4:	429c      	cmp	r4, r3
 800b5c6:	bfb8      	it	lt
 800b5c8:	461c      	movlt	r4, r3
 800b5ca:	4633      	mov	r3, r6
 800b5cc:	462a      	mov	r2, r5
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	e7dc      	b.n	800b58c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800b5d2:	b2a0      	uxth	r0, r4
 800b5d4:	b01e      	add	sp, #120	@ 0x78
 800b5d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b5da:	b003      	add	sp, #12
 800b5dc:	4770      	bx	lr

0800b5de <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800b5de:	7a43      	ldrb	r3, [r0, #9]
 800b5e0:	8880      	ldrh	r0, [r0, #4]
 800b5e2:	4418      	add	r0, r3
 800b5e4:	b280      	uxth	r0, r0
 800b5e6:	4770      	bx	lr

0800b5e8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800b5e8:	6803      	ldr	r3, [r0, #0]
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ec:	4718      	bx	r3

0800b5ee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800b5ee:	b40e      	push	{r1, r2, r3}
 800b5f0:	b570      	push	{r4, r5, r6, lr}
 800b5f2:	b09d      	sub	sp, #116	@ 0x74
 800b5f4:	ab21      	add	r3, sp, #132	@ 0x84
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5fc:	9302      	str	r3, [sp, #8]
 800b5fe:	a803      	add	r0, sp, #12
 800b600:	f000 fcfb 	bl	800bffa <_ZN8touchgfx12TextProviderC1Ev>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	4620      	mov	r0, r4
 800b608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b60a:	4798      	blx	r3
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	4606      	mov	r6, r0
 800b610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b612:	4620      	mov	r0, r4
 800b614:	4798      	blx	r3
 800b616:	4633      	mov	r3, r6
 800b618:	9000      	str	r0, [sp, #0]
 800b61a:	9a02      	ldr	r2, [sp, #8]
 800b61c:	4629      	mov	r1, r5
 800b61e:	a803      	add	r0, sp, #12
 800b620:	f000 fd3e 	bl	800c0a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b624:	a803      	add	r0, sp, #12
 800b626:	f001 f8af 	bl	800c788 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b62a:	2401      	movs	r4, #1
 800b62c:	b2a3      	uxth	r3, r4
 800b62e:	b140      	cbz	r0, 800b642 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800b630:	280a      	cmp	r0, #10
 800b632:	bf08      	it	eq
 800b634:	3301      	addeq	r3, #1
 800b636:	a803      	add	r0, sp, #12
 800b638:	bf08      	it	eq
 800b63a:	b21c      	sxtheq	r4, r3
 800b63c:	f001 f8a4 	bl	800c788 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b640:	e7f4      	b.n	800b62c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800b642:	4618      	mov	r0, r3
 800b644:	b01d      	add	sp, #116	@ 0x74
 800b646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b64a:	b003      	add	sp, #12
 800b64c:	4770      	bx	lr

0800b64e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800b64e:	b40e      	push	{r1, r2, r3}
 800b650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b652:	b09e      	sub	sp, #120	@ 0x78
 800b654:	ab23      	add	r3, sp, #140	@ 0x8c
 800b656:	4604      	mov	r4, r0
 800b658:	f853 5b04 	ldr.w	r5, [r3], #4
 800b65c:	9303      	str	r3, [sp, #12]
 800b65e:	a805      	add	r0, sp, #20
 800b660:	f000 fccb 	bl	800bffa <_ZN8touchgfx12TextProviderC1Ev>
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	4620      	mov	r0, r4
 800b668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b66a:	4798      	blx	r3
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	4606      	mov	r6, r0
 800b670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b672:	4620      	mov	r0, r4
 800b674:	4798      	blx	r3
 800b676:	4633      	mov	r3, r6
 800b678:	4629      	mov	r1, r5
 800b67a:	9000      	str	r0, [sp, #0]
 800b67c:	9a03      	ldr	r2, [sp, #12]
 800b67e:	a805      	add	r0, sp, #20
 800b680:	ad1e      	add	r5, sp, #120	@ 0x78
 800b682:	f000 fd0d 	bl	800c0a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b686:	2100      	movs	r1, #0
 800b688:	f845 1d68 	str.w	r1, [r5, #-104]!
 800b68c:	4622      	mov	r2, r4
 800b68e:	462b      	mov	r3, r5
 800b690:	a805      	add	r0, sp, #20
 800b692:	f000 fff7 	bl	800c684 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b696:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800b69a:	b1d8      	cbz	r0, 800b6d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800b69c:	280a      	cmp	r0, #10
 800b69e:	d012      	beq.n	800b6c6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800b6a0:	9804      	ldr	r0, [sp, #16]
 800b6a2:	b180      	cbz	r0, 800b6c6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800b6a4:	7b47      	ldrb	r7, [r0, #13]
 800b6a6:	88e2      	ldrh	r2, [r4, #6]
 800b6a8:	00fb      	lsls	r3, r7, #3
 800b6aa:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800b6ae:	7a03      	ldrb	r3, [r0, #8]
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	0679      	lsls	r1, r7, #25
 800b6b4:	bf44      	itt	mi
 800b6b6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800b6ba:	b21b      	sxthmi	r3, r3
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	b21b      	sxth	r3, r3
 800b6c0:	429e      	cmp	r6, r3
 800b6c2:	bfa8      	it	ge
 800b6c4:	461e      	movge	r6, r3
 800b6c6:	462b      	mov	r3, r5
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	a805      	add	r0, sp, #20
 800b6ce:	f000 ffd9 	bl	800c684 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b6d2:	e7e2      	b.n	800b69a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	b01e      	add	sp, #120	@ 0x78
 800b6d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b6dc:	b003      	add	sp, #12
 800b6de:	4770      	bx	lr

0800b6e0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800b6e0:	b513      	push	{r0, r1, r4, lr}
 800b6e2:	6803      	ldr	r3, [r0, #0]
 800b6e4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800b6e8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b6ec:	f8ad 1004 	strh.w	r1, [sp, #4]
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	9400      	str	r4, [sp, #0]
 800b6f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	4669      	mov	r1, sp
 800b6fc:	4798      	blx	r3
 800b6fe:	b002      	add	sp, #8
 800b700:	bd10      	pop	{r4, pc}

0800b702 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800b702:	b538      	push	{r3, r4, r5, lr}
 800b704:	680b      	ldr	r3, [r1, #0]
 800b706:	460c      	mov	r4, r1
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	4605      	mov	r5, r0
 800b70c:	4798      	blx	r3
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	4620      	mov	r0, r4
 800b712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b714:	4629      	mov	r1, r5
 800b716:	4798      	blx	r3
 800b718:	4628      	mov	r0, r5
 800b71a:	bd38      	pop	{r3, r4, r5, pc}

0800b71c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800b71c:	b410      	push	{r4}
 800b71e:	880a      	ldrh	r2, [r1, #0]
 800b720:	8884      	ldrh	r4, [r0, #4]
 800b722:	4422      	add	r2, r4
 800b724:	800a      	strh	r2, [r1, #0]
 800b726:	88c4      	ldrh	r4, [r0, #6]
 800b728:	884a      	ldrh	r2, [r1, #2]
 800b72a:	4422      	add	r2, r4
 800b72c:	804a      	strh	r2, [r1, #2]
 800b72e:	6940      	ldr	r0, [r0, #20]
 800b730:	b120      	cbz	r0, 800b73c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800b732:	6803      	ldr	r3, [r0, #0]
 800b734:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73a:	4718      	bx	r3
 800b73c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800b742:	b570      	push	{r4, r5, r6, lr}
 800b744:	8882      	ldrh	r2, [r0, #4]
 800b746:	880b      	ldrh	r3, [r1, #0]
 800b748:	4413      	add	r3, r2
 800b74a:	800b      	strh	r3, [r1, #0]
 800b74c:	88c2      	ldrh	r2, [r0, #6]
 800b74e:	884b      	ldrh	r3, [r1, #2]
 800b750:	460c      	mov	r4, r1
 800b752:	4413      	add	r3, r2
 800b754:	804b      	strh	r3, [r1, #2]
 800b756:	4605      	mov	r5, r0
 800b758:	1d01      	adds	r1, r0, #4
 800b75a:	4620      	mov	r0, r4
 800b75c:	f7fc fd5e 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800b760:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	dd0b      	ble.n	800b780 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800b768:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dd07      	ble.n	800b780 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800b770:	6968      	ldr	r0, [r5, #20]
 800b772:	b128      	cbz	r0, 800b780 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800b774:	6803      	ldr	r3, [r0, #0]
 800b776:	4621      	mov	r1, r4
 800b778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b77e:	4718      	bx	r3
 800b780:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b784 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	8882      	ldrh	r2, [r0, #4]
 800b788:	880b      	ldrh	r3, [r1, #0]
 800b78a:	4413      	add	r3, r2
 800b78c:	800b      	strh	r3, [r1, #0]
 800b78e:	88c2      	ldrh	r2, [r0, #6]
 800b790:	884b      	ldrh	r3, [r1, #2]
 800b792:	460c      	mov	r4, r1
 800b794:	4413      	add	r3, r2
 800b796:	804b      	strh	r3, [r1, #2]
 800b798:	4605      	mov	r5, r0
 800b79a:	1d01      	adds	r1, r0, #4
 800b79c:	4620      	mov	r0, r4
 800b79e:	f7fc fd3d 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800b7a2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	dd19      	ble.n	800b7de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800b7aa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	dd15      	ble.n	800b7de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800b7b2:	6968      	ldr	r0, [r5, #20]
 800b7b4:	b128      	cbz	r0, 800b7c2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800b7b6:	6803      	ldr	r3, [r0, #0]
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7c0:	4718      	bx	r3
 800b7c2:	4b07      	ldr	r3, [pc, #28]	@ (800b7e0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3304      	adds	r3, #4
 800b7c8:	429d      	cmp	r5, r3
 800b7ca:	d108      	bne.n	800b7de <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800b7cc:	f7fe feea 	bl	800a5a4 <_ZN8touchgfx11Application11getInstanceEv>
 800b7d0:	6803      	ldr	r3, [r0, #0]
 800b7d2:	6821      	ldr	r1, [r4, #0]
 800b7d4:	6862      	ldr	r2, [r4, #4]
 800b7d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7dc:	4718      	bx	r3
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
 800b7e0:	20012468 	.word	0x20012468

0800b7e4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800b7e4:	b570      	push	{r4, r5, r6, lr}
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	4616      	mov	r6, r2
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	b901      	cbnz	r1, 800b7f0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800b7ee:	b192      	cbz	r2, 800b816 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	4798      	blx	r3
 800b7f8:	88e2      	ldrh	r2, [r4, #6]
 800b7fa:	88a1      	ldrh	r1, [r4, #4]
 800b7fc:	4432      	add	r2, r6
 800b7fe:	4429      	add	r1, r5
 800b800:	4620      	mov	r0, r4
 800b802:	b212      	sxth	r2, r2
 800b804:	b209      	sxth	r1, r1
 800b806:	f7f7 f86e 	bl	80028e6 <_ZN8touchgfx8Drawable5setXYEss>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	4620      	mov	r0, r4
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b814:	4718      	bx	r3
 800b816:	bd70      	pop	{r4, r5, r6, pc}

0800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800b818:	b510      	push	{r4, lr}
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	2300      	movs	r3, #0
 800b820:	8023      	strh	r3, [r4, #0]
 800b822:	8063      	strh	r3, [r4, #2]
 800b824:	6803      	ldr	r3, [r0, #0]
 800b826:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b82a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800b82e:	80a1      	strh	r1, [r4, #4]
 800b830:	80e2      	strh	r2, [r4, #6]
 800b832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b834:	4621      	mov	r1, r4
 800b836:	4798      	blx	r3
 800b838:	4620      	mov	r0, r4
 800b83a:	bd10      	pop	{r4, pc}

0800b83c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800b83c:	b530      	push	{r4, r5, lr}
 800b83e:	8083      	strh	r3, [r0, #4]
 800b840:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b844:	80c3      	strh	r3, [r0, #6]
 800b846:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b84a:	7203      	strb	r3, [r0, #8]
 800b84c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b850:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800b854:	7243      	strb	r3, [r0, #9]
 800b856:	7a83      	ldrb	r3, [r0, #10]
 800b858:	6141      	str	r1, [r0, #20]
 800b85a:	f365 0306 	bfi	r3, r5, #0, #7
 800b85e:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800b862:	8302      	strh	r2, [r0, #24]
 800b864:	f365 13c7 	bfi	r3, r5, #7, #1
 800b868:	7283      	strb	r3, [r0, #10]
 800b86a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800b86e:	72c3      	strb	r3, [r0, #11]
 800b870:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800b874:	7303      	strb	r3, [r0, #12]
 800b876:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800b87a:	81c3      	strh	r3, [r0, #14]
 800b87c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800b880:	8203      	strh	r3, [r0, #16]
 800b882:	4b01      	ldr	r3, [pc, #4]	@ (800b888 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800b884:	6003      	str	r3, [r0, #0]
 800b886:	bd30      	pop	{r4, r5, pc}
 800b888:	080121f4 	.word	0x080121f4

0800b88c <_ZNK8touchgfx9ConstFont4findEt>:
 800b88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b88e:	6944      	ldr	r4, [r0, #20]
 800b890:	b3bc      	cbz	r4, 800b902 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800b892:	88a3      	ldrh	r3, [r4, #4]
 800b894:	8b02      	ldrh	r2, [r0, #24]
 800b896:	1acb      	subs	r3, r1, r3
 800b898:	f102 32ff 	add.w	r2, r2, #4294967295
 800b89c:	d431      	bmi.n	800b902 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	dd0c      	ble.n	800b8bc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800b8a2:	230e      	movs	r3, #14
 800b8a4:	fb03 4302 	mla	r3, r3, r2, r4
 800b8a8:	889b      	ldrh	r3, [r3, #4]
 800b8aa:	1a5b      	subs	r3, r3, r1
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	db27      	blt.n	800b902 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	bfbc      	itt	lt
 800b8b6:	2302      	movlt	r3, #2
 800b8b8:	fb92 f3f3 	sdivlt	r3, r2, r3
 800b8bc:	2500      	movs	r5, #0
 800b8be:	260e      	movs	r6, #14
 800b8c0:	4295      	cmp	r5, r2
 800b8c2:	dc1e      	bgt.n	800b902 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800b8c4:	fb06 4003 	mla	r0, r6, r3, r4
 800b8c8:	8887      	ldrh	r7, [r0, #4]
 800b8ca:	42b9      	cmp	r1, r7
 800b8cc:	d01a      	beq.n	800b904 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800b8ce:	d20d      	bcs.n	800b8ec <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800b8d0:	1e5a      	subs	r2, r3, #1
 800b8d2:	4295      	cmp	r5, r2
 800b8d4:	dc15      	bgt.n	800b902 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800b8d6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800b8da:	1a5b      	subs	r3, r3, r1
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	db0f      	blt.n	800b902 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800b8e2:	429d      	cmp	r5, r3
 800b8e4:	ddec      	ble.n	800b8c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800b8e6:	1953      	adds	r3, r2, r5
 800b8e8:	105b      	asrs	r3, r3, #1
 800b8ea:	e7e9      	b.n	800b8c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800b8ec:	1c5d      	adds	r5, r3, #1
 800b8ee:	42aa      	cmp	r2, r5
 800b8f0:	db07      	blt.n	800b902 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800b8f2:	8a43      	ldrh	r3, [r0, #18]
 800b8f4:	1acb      	subs	r3, r1, r3
 800b8f6:	442b      	add	r3, r5
 800b8f8:	429d      	cmp	r5, r3
 800b8fa:	dc02      	bgt.n	800b902 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	dadf      	bge.n	800b8c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800b900:	e7f1      	b.n	800b8e6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800b902:	2000      	movs	r0, #0
 800b904:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b906 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800b906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b908:	4604      	mov	r4, r0
 800b90a:	4617      	mov	r7, r2
 800b90c:	461e      	mov	r6, r3
 800b90e:	b911      	cbnz	r1, 800b916 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800b910:	2500      	movs	r5, #0
 800b912:	4628      	mov	r0, r5
 800b914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b916:	290a      	cmp	r1, #10
 800b918:	d0fa      	beq.n	800b910 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800b91a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800b91e:	4291      	cmp	r1, r2
 800b920:	d0f6      	beq.n	800b910 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800b922:	f242 020b 	movw	r2, #8203	@ 0x200b
 800b926:	4291      	cmp	r1, r2
 800b928:	d0f2      	beq.n	800b910 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800b92a:	f7ff ffaf 	bl	800b88c <_ZNK8touchgfx9ConstFont4findEt>
 800b92e:	4605      	mov	r5, r0
 800b930:	b950      	cbnz	r0, 800b948 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	4620      	mov	r0, r4
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	4798      	blx	r3
 800b93a:	4601      	mov	r1, r0
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7ff ffa5 	bl	800b88c <_ZNK8touchgfx9ConstFont4findEt>
 800b942:	4605      	mov	r5, r0
 800b944:	2800      	cmp	r0, #0
 800b946:	d0e3      	beq.n	800b910 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	4629      	mov	r1, r5
 800b94c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b94e:	4620      	mov	r0, r4
 800b950:	4798      	blx	r3
 800b952:	6038      	str	r0, [r7, #0]
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	4620      	mov	r0, r4
 800b958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b95a:	4798      	blx	r3
 800b95c:	7030      	strb	r0, [r6, #0]
 800b95e:	e7d8      	b.n	800b912 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800b960 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800b960:	2000      	movs	r0, #0
 800b962:	4770      	bx	lr

0800b964 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800b964:	2001      	movs	r0, #1
 800b966:	4770      	bx	lr

0800b968 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800b968:	2002      	movs	r0, #2
 800b96a:	4770      	bx	lr

0800b96c <_ZN8touchgfx6ScreenD1Ev>:
 800b96c:	4770      	bx	lr

0800b96e <_ZN8touchgfx12GestureEventD1Ev>:
 800b96e:	4770      	bx	lr

0800b970 <_ZN8touchgfx9DragEventD1Ev>:
 800b970:	4770      	bx	lr

0800b972 <_ZN8touchgfx10ClickEventD1Ev>:
 800b972:	4770      	bx	lr

0800b974 <_ZN8touchgfx10ClickEventD0Ev>:
 800b974:	b510      	push	{r4, lr}
 800b976:	210c      	movs	r1, #12
 800b978:	4604      	mov	r4, r0
 800b97a:	f004 f967 	bl	800fc4c <_ZdlPvj>
 800b97e:	4620      	mov	r0, r4
 800b980:	bd10      	pop	{r4, pc}

0800b982 <_ZN8touchgfx9DragEventD0Ev>:
 800b982:	b510      	push	{r4, lr}
 800b984:	2110      	movs	r1, #16
 800b986:	4604      	mov	r4, r0
 800b988:	f004 f960 	bl	800fc4c <_ZdlPvj>
 800b98c:	4620      	mov	r0, r4
 800b98e:	bd10      	pop	{r4, pc}

0800b990 <_ZN8touchgfx12GestureEventD0Ev>:
 800b990:	b510      	push	{r4, lr}
 800b992:	210c      	movs	r1, #12
 800b994:	4604      	mov	r4, r0
 800b996:	f004 f959 	bl	800fc4c <_ZdlPvj>
 800b99a:	4620      	mov	r0, r4
 800b99c:	bd10      	pop	{r4, pc}

0800b99e <_ZN8touchgfx6ScreenD0Ev>:
 800b99e:	b510      	push	{r4, lr}
 800b9a0:	213c      	movs	r1, #60	@ 0x3c
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	f004 f952 	bl	800fc4c <_ZdlPvj>
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	bd10      	pop	{r4, pc}

0800b9ac <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800b9ac:	b530      	push	{r4, r5, lr}
 800b9ae:	460d      	mov	r5, r1
 800b9b0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	b301      	cbz	r1, 800b9fa <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800b9b8:	a801      	add	r0, sp, #4
 800b9ba:	f7ff ff2d 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b9be:	892a      	ldrh	r2, [r5, #8]
 800b9c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b9c4:	7928      	ldrb	r0, [r5, #4]
 800b9c6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800b9ca:	f88d 0010 	strb.w	r0, [sp, #16]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800b9d2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800b9d4:	f8ad 1012 	strh.w	r1, [sp, #18]
 800b9d8:	441a      	add	r2, r3
 800b9da:	896b      	ldrh	r3, [r5, #10]
 800b9dc:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800b9e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b9e4:	1b5b      	subs	r3, r3, r5
 800b9e6:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800b9e8:	442b      	add	r3, r5
 800b9ea:	4d05      	ldr	r5, [pc, #20]	@ (800ba00 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800b9ec:	9503      	str	r5, [sp, #12]
 800b9ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b9f2:	6803      	ldr	r3, [r0, #0]
 800b9f4:	a903      	add	r1, sp, #12
 800b9f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9f8:	4798      	blx	r3
 800b9fa:	b007      	add	sp, #28
 800b9fc:	bd30      	pop	{r4, r5, pc}
 800b9fe:	bf00      	nop
 800ba00:	08012284 	.word	0x08012284

0800ba04 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800ba04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba08:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ba0a:	b08a      	sub	sp, #40	@ 0x28
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	b113      	cbz	r3, 800ba18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800ba12:	790b      	ldrb	r3, [r1, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d044      	beq.n	800baa2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800ba18:	f104 0804 	add.w	r8, r4, #4
 800ba1c:	4641      	mov	r1, r8
 800ba1e:	a803      	add	r0, sp, #12
 800ba20:	f7ff fefa 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ba24:	792b      	ldrb	r3, [r5, #4]
 800ba26:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800ba2a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800ba2e:	b983      	cbnz	r3, 800ba52 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800ba30:	892a      	ldrh	r2, [r5, #8]
 800ba32:	88e9      	ldrh	r1, [r5, #6]
 800ba34:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800ba38:	1b92      	subs	r2, r2, r6
 800ba3a:	1bc9      	subs	r1, r1, r7
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	b212      	sxth	r2, r2
 800ba46:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800ba4a:	b209      	sxth	r1, r1
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	f7fc fb01 	bl	8008054 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800ba52:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ba54:	b329      	cbz	r1, 800baa2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800ba56:	a805      	add	r0, sp, #20
 800ba58:	f7ff fede 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ba5c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800ba60:	792b      	ldrb	r3, [r5, #4]
 800ba62:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ba64:	f88d 3020 	strb.w	r3, [sp, #32]
 800ba68:	1abf      	subs	r7, r7, r2
 800ba6a:	88ea      	ldrh	r2, [r5, #6]
 800ba6c:	4417      	add	r7, r2
 800ba6e:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800ba70:	4417      	add	r7, r2
 800ba72:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800ba76:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800ba7a:	1ab6      	subs	r6, r6, r2
 800ba7c:	892a      	ldrh	r2, [r5, #8]
 800ba7e:	4416      	add	r6, r2
 800ba80:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ba82:	4416      	add	r6, r2
 800ba84:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800ba88:	4a07      	ldr	r2, [pc, #28]	@ (800baa8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800ba8a:	9207      	str	r2, [sp, #28]
 800ba8c:	2600      	movs	r6, #0
 800ba8e:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800ba92:	6803      	ldr	r3, [r0, #0]
 800ba94:	a907      	add	r1, sp, #28
 800ba96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba98:	4798      	blx	r3
 800ba9a:	792b      	ldrb	r3, [r5, #4]
 800ba9c:	b10b      	cbz	r3, 800baa2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800ba9e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800baa2:	b00a      	add	sp, #40	@ 0x28
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	0801225c 	.word	0x0801225c

0800baac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800baac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab0:	460c      	mov	r4, r1
 800bab2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800bab4:	b088      	sub	sp, #32
 800bab6:	4605      	mov	r5, r0
 800bab8:	2900      	cmp	r1, #0
 800baba:	d06d      	beq.n	800bb98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800babc:	4668      	mov	r0, sp
 800babe:	f7ff feab 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bac2:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800bac4:	88e3      	ldrh	r3, [r4, #6]
 800bac6:	f9bd 8000 	ldrsh.w	r8, [sp]
 800baca:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800bace:	440b      	add	r3, r1
 800bad0:	b21b      	sxth	r3, r3
 800bad2:	4543      	cmp	r3, r8
 800bad4:	db31      	blt.n	800bb3a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bad6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800bada:	44c4      	add	ip, r8
 800badc:	fa0f fc8c 	sxth.w	ip, ip
 800bae0:	4563      	cmp	r3, ip
 800bae2:	da2a      	bge.n	800bb3a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bae4:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800bae6:	8926      	ldrh	r6, [r4, #8]
 800bae8:	4416      	add	r6, r2
 800baea:	b236      	sxth	r6, r6
 800baec:	42be      	cmp	r6, r7
 800baee:	db24      	blt.n	800bb3a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800baf0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800baf4:	4438      	add	r0, r7
 800baf6:	b200      	sxth	r0, r0
 800baf8:	4286      	cmp	r6, r0
 800bafa:	da1e      	bge.n	800bb3a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bafc:	8963      	ldrh	r3, [r4, #10]
 800bafe:	4419      	add	r1, r3
 800bb00:	b209      	sxth	r1, r1
 800bb02:	4541      	cmp	r1, r8
 800bb04:	db08      	blt.n	800bb18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800bb06:	4561      	cmp	r1, ip
 800bb08:	da06      	bge.n	800bb18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	441a      	add	r2, r3
 800bb0e:	b212      	sxth	r2, r2
 800bb10:	42ba      	cmp	r2, r7
 800bb12:	db01      	blt.n	800bb18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800bb14:	4282      	cmp	r2, r0
 800bb16:	db10      	blt.n	800bb3a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bb18:	4b21      	ldr	r3, [pc, #132]	@ (800bba0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	f88d 3014 	strb.w	r3, [sp, #20]
 800bb22:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800bb24:	2300      	movs	r3, #0
 800bb26:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb2a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800bb2e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800bb32:	6803      	ldr	r3, [r0, #0]
 800bb34:	a904      	add	r1, sp, #16
 800bb36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb38:	4798      	blx	r3
 800bb3a:	1d29      	adds	r1, r5, #4
 800bb3c:	a802      	add	r0, sp, #8
 800bb3e:	f7ff fe6b 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bb42:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800bb46:	88e0      	ldrh	r0, [r4, #6]
 800bb48:	7921      	ldrb	r1, [r4, #4]
 800bb4a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800bb4e:	8922      	ldrh	r2, [r4, #8]
 800bb50:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800bb52:	f88d 1014 	strb.w	r1, [sp, #20]
 800bb56:	eba3 0808 	sub.w	r8, r3, r8
 800bb5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800bb5e:	1bdf      	subs	r7, r3, r7
 800bb60:	b2bb      	uxth	r3, r7
 800bb62:	fa1f f888 	uxth.w	r8, r8
 800bb66:	8967      	ldrh	r7, [r4, #10]
 800bb68:	89a4      	ldrh	r4, [r4, #12]
 800bb6a:	4440      	add	r0, r8
 800bb6c:	4460      	add	r0, ip
 800bb6e:	441a      	add	r2, r3
 800bb70:	44b8      	add	r8, r7
 800bb72:	4423      	add	r3, r4
 800bb74:	f8ad 0016 	strh.w	r0, [sp, #22]
 800bb78:	4433      	add	r3, r6
 800bb7a:	4432      	add	r2, r6
 800bb7c:	44e0      	add	r8, ip
 800bb7e:	4c09      	ldr	r4, [pc, #36]	@ (800bba4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800bb80:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800bb82:	9404      	str	r4, [sp, #16]
 800bb84:	f8ad 2018 	strh.w	r2, [sp, #24]
 800bb88:	f8ad 801a 	strh.w	r8, [sp, #26]
 800bb8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800bb90:	6803      	ldr	r3, [r0, #0]
 800bb92:	a904      	add	r1, sp, #16
 800bb94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb96:	4798      	blx	r3
 800bb98:	b008      	add	sp, #32
 800bb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb9e:	bf00      	nop
 800bba0:	0801225c 	.word	0x0801225c
 800bba4:	08012270 	.word	0x08012270

0800bba8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800bba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbaa:	4604      	mov	r4, r0
 800bbac:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800bbb0:	3201      	adds	r2, #1
 800bbb2:	d112      	bne.n	800bbda <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800bbb4:	6803      	ldr	r3, [r0, #0]
 800bbb6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800bbba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800bbbe:	f8ad 1004 	strh.w	r1, [sp, #4]
 800bbc2:	2500      	movs	r5, #0
 800bbc4:	9500      	str	r5, [sp, #0]
 800bbc6:	466d      	mov	r5, sp
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd0:	4798      	blx	r3
 800bbd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bbd6:	e884 0003 	stmia.w	r4, {r0, r1}
 800bbda:	4620      	mov	r0, r4
 800bbdc:	b003      	add	sp, #12
 800bbde:	bd30      	pop	{r4, r5, pc}

0800bbe0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800bbe0:	b513      	push	{r0, r1, r4, lr}
 800bbe2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	4604      	mov	r4, r0
 800bbea:	d109      	bne.n	800bc00 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800bbec:	4601      	mov	r1, r0
 800bbee:	4668      	mov	r0, sp
 800bbf0:	f7ff fe12 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bbf4:	f8bd 3000 	ldrh.w	r3, [sp]
 800bbf8:	8423      	strh	r3, [r4, #32]
 800bbfa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800bbfe:	8463      	strh	r3, [r4, #34]	@ 0x22
 800bc00:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800bc04:	b002      	add	sp, #8
 800bc06:	bd10      	pop	{r4, pc}

0800bc08 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800bc08:	b513      	push	{r0, r1, r4, lr}
 800bc0a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800bc0e:	3301      	adds	r3, #1
 800bc10:	4604      	mov	r4, r0
 800bc12:	d109      	bne.n	800bc28 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800bc14:	4601      	mov	r1, r0
 800bc16:	4668      	mov	r0, sp
 800bc18:	f7ff fdfe 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bc1c:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc20:	8423      	strh	r3, [r4, #32]
 800bc22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800bc26:	8463      	strh	r3, [r4, #34]	@ 0x22
 800bc28:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800bc2c:	b002      	add	sp, #8
 800bc2e:	bd10      	pop	{r4, pc}

0800bc30 <_ZN8touchgfx6ScreenC1Ev>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	4605      	mov	r5, r0
 800bc34:	4b16      	ldr	r3, [pc, #88]	@ (800bc90 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800bc36:	f845 3b04 	str.w	r3, [r5], #4
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	8103      	strh	r3, [r0, #8]
 800bc3e:	8143      	strh	r3, [r0, #10]
 800bc40:	8183      	strh	r3, [r0, #12]
 800bc42:	81c3      	strh	r3, [r0, #14]
 800bc44:	8203      	strh	r3, [r0, #16]
 800bc46:	8243      	strh	r3, [r0, #18]
 800bc48:	8283      	strh	r3, [r0, #20]
 800bc4a:	82c3      	strh	r3, [r0, #22]
 800bc4c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800bc50:	6203      	str	r3, [r0, #32]
 800bc52:	8483      	strh	r3, [r0, #36]	@ 0x24
 800bc54:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800bc56:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800bc5a:	4a0e      	ldr	r2, [pc, #56]	@ (800bc94 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800bc5c:	6343      	str	r3, [r0, #52]	@ 0x34
 800bc5e:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800bc62:	4b0d      	ldr	r3, [pc, #52]	@ (800bc98 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800bc64:	6042      	str	r2, [r0, #4]
 800bc66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bc6a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800bc6c:	4a0b      	ldr	r2, [pc, #44]	@ (800bc9c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800bc6e:	4604      	mov	r4, r0
 800bc70:	2101      	movs	r1, #1
 800bc72:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800bc76:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800bc7a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800bc7e:	4628      	mov	r0, r5
 800bc80:	4798      	blx	r3
 800bc82:	6863      	ldr	r3, [r4, #4]
 800bc84:	4628      	mov	r0, r5
 800bc86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4798      	blx	r3
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}
 800bc90:	08012298 	.word	0x08012298
 800bc94:	08011f30 	.word	0x08011f30
 800bc98:	20012422 	.word	0x20012422
 800bc9c:	20012420 	.word	0x20012420

0800bca0 <_ZN8touchgfx6Screen4drawEv>:
 800bca0:	b507      	push	{r0, r1, r2, lr}
 800bca2:	4b09      	ldr	r3, [pc, #36]	@ (800bcc8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800bca4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bca8:	4b08      	ldr	r3, [pc, #32]	@ (800bccc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800bcaa:	f8ad 2004 	strh.w	r2, [sp, #4]
 800bcae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcb2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bcb6:	6803      	ldr	r3, [r0, #0]
 800bcb8:	2100      	movs	r1, #0
 800bcba:	9100      	str	r1, [sp, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	4669      	mov	r1, sp
 800bcc0:	4798      	blx	r3
 800bcc2:	b003      	add	sp, #12
 800bcc4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcc8:	20012420 	.word	0x20012420
 800bccc:	20012422 	.word	0x20012422

0800bcd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	b089      	sub	sp, #36	@ 0x24
 800bcdc:	4680      	mov	r8, r0
 800bcde:	460c      	mov	r4, r1
 800bce0:	4615      	mov	r5, r2
 800bce2:	dd0e      	ble.n	800bd02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800bce4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	dd0a      	ble.n	800bd02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800bcec:	4628      	mov	r0, r5
 800bcee:	f7ff ff5b 	bl	800bba8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	f7fe fb77 	bl	800a3e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800bcf8:	69eb      	ldr	r3, [r5, #28]
 800bcfa:	b928      	cbnz	r0, 800bd08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800bcfc:	461d      	mov	r5, r3
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1f4      	bne.n	800bcec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800bd02:	b009      	add	sp, #36	@ 0x24
 800bd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd08:	ae04      	add	r6, sp, #16
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 80b5 	beq.w	800be7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	4629      	mov	r1, r5
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	a802      	add	r0, sp, #8
 800bd18:	4798      	blx	r3
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f7ff ff60 	bl	800bbe0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800bd20:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800bd24:	4407      	add	r7, r0
 800bd26:	4628      	mov	r0, r5
 800bd28:	f7ff ff6e 	bl	800bc08 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800bd2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800bd30:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800bd34:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bd38:	4418      	add	r0, r3
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800bd40:	f8ad 0012 	strh.w	r0, [sp, #18]
 800bd44:	b23f      	sxth	r7, r7
 800bd46:	4630      	mov	r0, r6
 800bd48:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd4c:	f8ad 7010 	strh.w	r7, [sp, #16]
 800bd50:	f7fc fa64 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800bd54:	4628      	mov	r0, r5
 800bd56:	f7ff ff27 	bl	800bba8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bd60:	ab06      	add	r3, sp, #24
 800bd62:	e883 0003 	stmia.w	r3, {r0, r1}
 800bd66:	4611      	mov	r1, r2
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fc fa57 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800bd6e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800bd72:	f9b4 1000 	ldrsh.w	r1, [r4]
 800bd76:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800bd7a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800bd7e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800bd82:	4299      	cmp	r1, r3
 800bd84:	d10b      	bne.n	800bd9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800bd86:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800bd8a:	4552      	cmp	r2, sl
 800bd8c:	d107      	bne.n	800bd9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800bd8e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800bd92:	455a      	cmp	r2, fp
 800bd94:	d103      	bne.n	800bd9e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800bd96:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800bd9a:	454a      	cmp	r2, r9
 800bd9c:	d06d      	beq.n	800be7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800bd9e:	f1bb 0f00 	cmp.w	fp, #0
 800bda2:	dd65      	ble.n	800be70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800bda4:	f1b9 0f00 	cmp.w	r9, #0
 800bda8:	dd62      	ble.n	800be70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800bdaa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800bdae:	fa1f f08a 	uxth.w	r0, sl
 800bdb2:	4552      	cmp	r2, sl
 800bdb4:	9000      	str	r0, [sp, #0]
 800bdb6:	da12      	bge.n	800bdde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	9b00      	ldr	r3, [sp, #0]
 800bdbc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800bdc0:	f8ad 2012 	strh.w	r2, [sp, #18]
 800bdc4:	1a9a      	subs	r2, r3, r2
 800bdc6:	f8ad 1010 	strh.w	r1, [sp, #16]
 800bdca:	f8ad 0014 	strh.w	r0, [sp, #20]
 800bdce:	f8ad 2016 	strh.w	r2, [sp, #22]
 800bdd2:	69ea      	ldr	r2, [r5, #28]
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	f7ff ff7a 	bl	800bcd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800bddc:	9b01      	ldr	r3, [sp, #4]
 800bdde:	f9b4 2000 	ldrsh.w	r2, [r4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	b29f      	uxth	r7, r3
 800bde6:	da0d      	bge.n	800be04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800bde8:	f8ad 2010 	strh.w	r2, [sp, #16]
 800bdec:	1aba      	subs	r2, r7, r2
 800bdee:	f8ad a012 	strh.w	sl, [sp, #18]
 800bdf2:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bdf6:	f8ad 9016 	strh.w	r9, [sp, #22]
 800bdfa:	69ea      	ldr	r2, [r5, #28]
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4640      	mov	r0, r8
 800be00:	f7ff ff66 	bl	800bcd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800be04:	8822      	ldrh	r2, [r4, #0]
 800be06:	88a3      	ldrh	r3, [r4, #4]
 800be08:	445f      	add	r7, fp
 800be0a:	4413      	add	r3, r2
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	b2bf      	uxth	r7, r7
 800be10:	b23a      	sxth	r2, r7
 800be12:	b219      	sxth	r1, r3
 800be14:	4291      	cmp	r1, r2
 800be16:	dd0d      	ble.n	800be34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800be18:	1bdb      	subs	r3, r3, r7
 800be1a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800be1e:	f8ad a012 	strh.w	sl, [sp, #18]
 800be22:	f8ad 3014 	strh.w	r3, [sp, #20]
 800be26:	f8ad 9016 	strh.w	r9, [sp, #22]
 800be2a:	69ea      	ldr	r2, [r5, #28]
 800be2c:	4631      	mov	r1, r6
 800be2e:	4640      	mov	r0, r8
 800be30:	f7ff ff4e 	bl	800bcd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800be34:	88e2      	ldrh	r2, [r4, #6]
 800be36:	8863      	ldrh	r3, [r4, #2]
 800be38:	4413      	add	r3, r2
 800be3a:	9a00      	ldr	r2, [sp, #0]
 800be3c:	444a      	add	r2, r9
 800be3e:	b29b      	uxth	r3, r3
 800be40:	fa1f f982 	uxth.w	r9, r2
 800be44:	fa0f f289 	sxth.w	r2, r9
 800be48:	b219      	sxth	r1, r3
 800be4a:	428a      	cmp	r2, r1
 800be4c:	da15      	bge.n	800be7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800be4e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800be52:	f9b4 0000 	ldrsh.w	r0, [r4]
 800be56:	f8ad 1014 	strh.w	r1, [sp, #20]
 800be5a:	eba3 0309 	sub.w	r3, r3, r9
 800be5e:	f8ad 0010 	strh.w	r0, [sp, #16]
 800be62:	f8ad 2012 	strh.w	r2, [sp, #18]
 800be66:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be6a:	69ea      	ldr	r2, [r5, #28]
 800be6c:	4631      	mov	r1, r6
 800be6e:	e001      	b.n	800be74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800be70:	69ea      	ldr	r2, [r5, #28]
 800be72:	4621      	mov	r1, r4
 800be74:	4640      	mov	r0, r8
 800be76:	f7ff ff2b 	bl	800bcd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800be7a:	4628      	mov	r0, r5
 800be7c:	f7ff fe94 	bl	800bba8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800be80:	6861      	ldr	r1, [r4, #4]
 800be82:	4602      	mov	r2, r0
 800be84:	6820      	ldr	r0, [r4, #0]
 800be86:	4633      	mov	r3, r6
 800be88:	c303      	stmia	r3!, {r0, r1}
 800be8a:	4611      	mov	r1, r2
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7fc f9c5 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800be92:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f77f af33 	ble.w	800bd02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800be9c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f77f af2e 	ble.w	800bd02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800bea6:	4628      	mov	r0, r5
 800bea8:	f7ff fe9a 	bl	800bbe0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800beac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800beb0:	1a18      	subs	r0, r3, r0
 800beb2:	f8ad 0010 	strh.w	r0, [sp, #16]
 800beb6:	4628      	mov	r0, r5
 800beb8:	f7ff fea6 	bl	800bc08 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800bebc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800bec0:	1a18      	subs	r0, r3, r0
 800bec2:	f8ad 0012 	strh.w	r0, [sp, #18]
 800bec6:	682b      	ldr	r3, [r5, #0]
 800bec8:	4631      	mov	r1, r6
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	4628      	mov	r0, r5
 800bece:	4798      	blx	r3
 800bed0:	e717      	b.n	800bd02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800bed2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800bed2:	b570      	push	{r4, r5, r6, lr}
 800bed4:	460c      	mov	r4, r1
 800bed6:	b086      	sub	sp, #24
 800bed8:	1d06      	adds	r6, r0, #4
 800beda:	2300      	movs	r3, #0
 800bedc:	4631      	mov	r1, r6
 800bede:	4605      	mov	r5, r0
 800bee0:	a802      	add	r0, sp, #8
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	f7ff fc98 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bee8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800beec:	8822      	ldrh	r2, [r4, #0]
 800beee:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800bef2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800bef6:	f8ad 0014 	strh.w	r0, [sp, #20]
 800befa:	1ad2      	subs	r2, r2, r3
 800befc:	8863      	ldrh	r3, [r4, #2]
 800befe:	f8ad 2010 	strh.w	r2, [sp, #16]
 800bf02:	1a5b      	subs	r3, r3, r1
 800bf04:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800bf08:	f8ad 1016 	strh.w	r1, [sp, #22]
 800bf0c:	aa01      	add	r2, sp, #4
 800bf0e:	a904      	add	r1, sp, #16
 800bf10:	4630      	mov	r0, r6
 800bf12:	f8ad 3012 	strh.w	r3, [sp, #18]
 800bf16:	f7fc fa59 	bl	80083cc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800bf1a:	9a01      	ldr	r2, [sp, #4]
 800bf1c:	b11a      	cbz	r2, 800bf26 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4628      	mov	r0, r5
 800bf22:	f7ff fed5 	bl	800bcd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800bf26:	b006      	add	sp, #24
 800bf28:	bd70      	pop	{r4, r5, r6, pc}

0800bf2a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800bf2a:	b530      	push	{r4, r5, lr}
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	4604      	mov	r4, r0
 800bf30:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800bf34:	b085      	sub	sp, #20
 800bf36:	460d      	mov	r5, r1
 800bf38:	6851      	ldr	r1, [r2, #4]
 800bf3a:	466b      	mov	r3, sp
 800bf3c:	c303      	stmia	r3!, {r0, r1}
 800bf3e:	4629      	mov	r1, r5
 800bf40:	4668      	mov	r0, sp
 800bf42:	f7fc f96b 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800bf46:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800bf4a:	b12b      	cbz	r3, 800bf58 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800bf4c:	4669      	mov	r1, sp
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f7ff ffbf 	bl	800bed2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800bf54:	b005      	add	sp, #20
 800bf56:	bd30      	pop	{r4, r5, pc}
 800bf58:	3404      	adds	r4, #4
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	a802      	add	r0, sp, #8
 800bf5e:	f7ff fc5b 	bl	800b818 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bf62:	f8bd 3000 	ldrh.w	r3, [sp]
 800bf66:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800bf6a:	1a9b      	subs	r3, r3, r2
 800bf6c:	f8ad 3000 	strh.w	r3, [sp]
 800bf70:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800bf74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800bf78:	4669      	mov	r1, sp
 800bf7a:	1a9b      	subs	r3, r3, r2
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800bf82:	f7fc f9ea 	bl	800835a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800bf86:	e7e5      	b.n	800bf54 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800bf88 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800bf88:	680a      	ldr	r2, [r1, #0]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	6992      	ldr	r2, [r2, #24]
 800bf8e:	1d01      	adds	r1, r0, #4
 800bf90:	4618      	mov	r0, r3
 800bf92:	4710      	bx	r2

0800bf94 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800bf94:	4298      	cmp	r0, r3
 800bf96:	d200      	bcs.n	800bf9a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800bf98:	b913      	cbnz	r3, 800bfa0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800bf9a:	440a      	add	r2, r1
 800bf9c:	b210      	sxth	r0, r2
 800bf9e:	4770      	bx	lr
 800bfa0:	ee07 0a90 	vmov	s15, r0
 800bfa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa8:	ee07 3a90 	vmov	s15, r3
 800bfac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfb8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bfbc:	ee07 2a90 	vmov	s15, r2
 800bfc0:	ee67 5a07 	vmul.f32	s11, s14, s14
 800bfc4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800bfc8:	eee5 6a87 	vfma.f32	s13, s11, s14
 800bfcc:	ee07 1a90 	vmov	s15, r1
 800bfd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bfd8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bfdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bfe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe4:	bfcc      	ite	gt
 800bfe6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800bfea:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800bfee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bff2:	ee17 3a90 	vmov	r3, s15
 800bff6:	b218      	sxth	r0, r3
 800bff8:	4770      	bx	lr

0800bffa <_ZN8touchgfx12TextProviderC1Ev>:
 800bffa:	b538      	push	{r3, r4, r5, lr}
 800bffc:	2500      	movs	r5, #0
 800bffe:	2302      	movs	r3, #2
 800c000:	4604      	mov	r4, r0
 800c002:	e9c0 5500 	strd	r5, r5, [r0]
 800c006:	7403      	strb	r3, [r0, #16]
 800c008:	6145      	str	r5, [r0, #20]
 800c00a:	7605      	strb	r5, [r0, #24]
 800c00c:	83c5      	strh	r5, [r0, #30]
 800c00e:	8405      	strh	r5, [r0, #32]
 800c010:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800c012:	8705      	strh	r5, [r0, #56]	@ 0x38
 800c014:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800c016:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800c01a:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800c01e:	220e      	movs	r2, #14
 800c020:	4629      	mov	r1, r5
 800c022:	304c      	adds	r0, #76	@ 0x4c
 800c024:	f004 f847 	bl	80100b6 <memset>
 800c028:	2301      	movs	r3, #1
 800c02a:	4620      	mov	r0, r4
 800c02c:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800c030:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c034:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800c038:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800c03c:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800c040:	f7f7 f80c 	bl	800305c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800c044:	4620      	mov	r0, r4
 800c046:	bd38      	pop	{r3, r4, r5, pc}

0800c048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800c048:	b530      	push	{r4, r5, lr}
 800c04a:	2500      	movs	r5, #0
 800c04c:	2401      	movs	r4, #1
 800c04e:	6843      	ldr	r3, [r0, #4]
 800c050:	b913      	cbnz	r3, 800c058 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800c052:	6803      	ldr	r3, [r0, #0]
 800c054:	b313      	cbz	r3, 800c09c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800c056:	6043      	str	r3, [r0, #4]
 800c058:	7e03      	ldrb	r3, [r0, #24]
 800c05a:	b143      	cbz	r3, 800c06e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800c05c:	6943      	ldr	r3, [r0, #20]
 800c05e:	b12b      	cbz	r3, 800c06c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800c060:	881a      	ldrh	r2, [r3, #0]
 800c062:	b11a      	cbz	r2, 800c06c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800c064:	1c9a      	adds	r2, r3, #2
 800c066:	6142      	str	r2, [r0, #20]
 800c068:	8818      	ldrh	r0, [r3, #0]
 800c06a:	bd30      	pop	{r4, r5, pc}
 800c06c:	7605      	strb	r5, [r0, #24]
 800c06e:	6843      	ldr	r3, [r0, #4]
 800c070:	8819      	ldrh	r1, [r3, #0]
 800c072:	b199      	cbz	r1, 800c09c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800c074:	1c9a      	adds	r2, r3, #2
 800c076:	2902      	cmp	r1, #2
 800c078:	6042      	str	r2, [r0, #4]
 800c07a:	d1f5      	bne.n	800c068 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800c07c:	7c03      	ldrb	r3, [r0, #16]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d8e5      	bhi.n	800c04e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	3302      	adds	r3, #2
 800c086:	7402      	strb	r2, [r0, #16]
 800c088:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c08c:	6143      	str	r3, [r0, #20]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d0dd      	beq.n	800c04e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d0da      	beq.n	800c04e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c098:	7604      	strb	r4, [r0, #24]
 800c09a:	e7d8      	b.n	800c04e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c09c:	2000      	movs	r0, #0
 800c09e:	e7e4      	b.n	800c06a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800c0a0 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800c0a0:	b430      	push	{r4, r5}
 800c0a2:	6001      	str	r1, [r0, #0]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	6041      	str	r1, [r0, #4]
 800c0a8:	6815      	ldr	r5, [r2, #0]
 800c0aa:	6085      	str	r5, [r0, #8]
 800c0ac:	6852      	ldr	r2, [r2, #4]
 800c0ae:	6443      	str	r3, [r0, #68]	@ 0x44
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	60c2      	str	r2, [r0, #12]
 800c0b4:	7401      	strb	r1, [r0, #16]
 800c0b6:	6141      	str	r1, [r0, #20]
 800c0b8:	7601      	strb	r1, [r0, #24]
 800c0ba:	8701      	strh	r1, [r0, #56]	@ 0x38
 800c0bc:	8401      	strh	r1, [r0, #32]
 800c0be:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800c0c2:	6483      	str	r3, [r0, #72]	@ 0x48
 800c0c4:	bc30      	pop	{r4, r5}
 800c0c6:	f7f6 bfc9 	b.w	800305c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800c0ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800c0ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	4608      	mov	r0, r1
 800c0d0:	b1e9      	cbz	r1, 800c10e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800c0d2:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	f101 0708 	add.w	r7, r1, #8
 800c0dc:	4622      	mov	r2, r4
 800c0de:	6818      	ldr	r0, [r3, #0]
 800c0e0:	6859      	ldr	r1, [r3, #4]
 800c0e2:	4626      	mov	r6, r4
 800c0e4:	c603      	stmia	r6!, {r0, r1}
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	42bb      	cmp	r3, r7
 800c0ea:	4634      	mov	r4, r6
 800c0ec:	d1f7      	bne.n	800c0de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800c0ee:	6818      	ldr	r0, [r3, #0]
 800c0f0:	6030      	str	r0, [r6, #0]
 800c0f2:	889b      	ldrh	r3, [r3, #4]
 800c0f4:	80b3      	strh	r3, [r6, #4]
 800c0f6:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800c0fa:	015b      	lsls	r3, r3, #5
 800c0fc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800c100:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800c104:	430b      	orrs	r3, r1
 800c106:	425b      	negs	r3, r3
 800c108:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800c10c:	4610      	mov	r0, r2
 800c10e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c110 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	460c      	mov	r4, r1
 800c114:	6811      	ldr	r1, [r2, #0]
 800c116:	4610      	mov	r0, r2
 800c118:	68cd      	ldr	r5, [r1, #12]
 800c11a:	4619      	mov	r1, r3
 800c11c:	47a8      	blx	r5
 800c11e:	2800      	cmp	r0, #0
 800c120:	bf08      	it	eq
 800c122:	4620      	moveq	r0, r4
 800c124:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c128 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800c128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c12c:	468c      	mov	ip, r1
 800c12e:	4604      	mov	r4, r0
 800c130:	4615      	mov	r5, r2
 800c132:	b942      	cbnz	r2, 800c146 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800c134:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800c138:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800c13c:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800c140:	4628      	mov	r0, r5
 800c142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c146:	7b50      	ldrb	r0, [r2, #13]
 800c148:	8893      	ldrh	r3, [r2, #4]
 800c14a:	0106      	lsls	r6, r0, #4
 800c14c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800c150:	79ee      	ldrb	r6, [r5, #7]
 800c152:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800c156:	4316      	orrs	r6, r2
 800c158:	185a      	adds	r2, r3, r1
 800c15a:	b291      	uxth	r1, r2
 800c15c:	291d      	cmp	r1, #29
 800c15e:	b2b7      	uxth	r7, r6
 800c160:	d87e      	bhi.n	800c260 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800c162:	2201      	movs	r2, #1
 800c164:	408a      	lsls	r2, r1
 800c166:	4975      	ldr	r1, [pc, #468]	@ (800c33c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800c168:	420a      	tst	r2, r1
 800c16a:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800c16e:	d12d      	bne.n	800c1cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800c170:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800c174:	d074      	beq.n	800c260 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800c176:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800c17a:	462b      	mov	r3, r5
 800c17c:	f105 0e08 	add.w	lr, r5, #8
 800c180:	4615      	mov	r5, r2
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	6859      	ldr	r1, [r3, #4]
 800c186:	4694      	mov	ip, r2
 800c188:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800c18c:	3308      	adds	r3, #8
 800c18e:	4573      	cmp	r3, lr
 800c190:	4662      	mov	r2, ip
 800c192:	d1f6      	bne.n	800c182 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	f8cc 0000 	str.w	r0, [ip]
 800c19a:	889b      	ldrh	r3, [r3, #4]
 800c19c:	f8ac 3004 	strh.w	r3, [ip, #4]
 800c1a0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800c1a4:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 800c1a8:	b2b3      	uxth	r3, r6
 800c1aa:	1aca      	subs	r2, r1, r3
 800c1ac:	b292      	uxth	r2, r2
 800c1ae:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800c1b2:	10d2      	asrs	r2, r2, #3
 800c1b4:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800c1b8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800c1bc:	4302      	orrs	r2, r0
 800c1be:	1bcf      	subs	r7, r1, r7
 800c1c0:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800c1c4:	1afb      	subs	r3, r7, r3
 800c1c6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800c1ca:	e7b9      	b.n	800c140 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800c1cc:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800c1d0:	462b      	mov	r3, r5
 800c1d2:	f105 0808 	add.w	r8, r5, #8
 800c1d6:	4615      	mov	r5, r2
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	6859      	ldr	r1, [r3, #4]
 800c1dc:	4696      	mov	lr, r2
 800c1de:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	4543      	cmp	r3, r8
 800c1e6:	4672      	mov	r2, lr
 800c1e8:	d1f6      	bne.n	800c1d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800c1ea:	6818      	ldr	r0, [r3, #0]
 800c1ec:	f8ce 0000 	str.w	r0, [lr]
 800c1f0:	889b      	ldrh	r3, [r3, #4]
 800c1f2:	f8ae 3004 	strh.w	r3, [lr, #4]
 800c1f6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800c1f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c1fc:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800c1fe:	f640 6333 	movw	r3, #3635	@ 0xe33
 800c202:	4299      	cmp	r1, r3
 800c204:	d111      	bne.n	800c22a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800c206:	f8dc 3000 	ldr.w	r3, [ip]
 800c20a:	4660      	mov	r0, ip
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	4798      	blx	r3
 800c210:	7b41      	ldrb	r1, [r0, #13]
 800c212:	00cb      	lsls	r3, r1, #3
 800c214:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c218:	7a03      	ldrb	r3, [r0, #8]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	064a      	lsls	r2, r1, #25
 800c21e:	bf44      	itt	mi
 800c220:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c224:	b21b      	sxthmi	r3, r3
 800c226:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c22a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800c22e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800c232:	443b      	add	r3, r7
 800c234:	4433      	add	r3, r6
 800c236:	b29b      	uxth	r3, r3
 800c238:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c23c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800c240:	10db      	asrs	r3, r3, #3
 800c242:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800c246:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c24a:	4313      	orrs	r3, r2
 800c24c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800c250:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 800c254:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800c258:	1a9b      	subs	r3, r3, r2
 800c25a:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 800c25e:	e76f      	b.n	800c140 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800c260:	f023 0204 	bic.w	r2, r3, #4
 800c264:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800c268:	428a      	cmp	r2, r1
 800c26a:	d003      	beq.n	800c274 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800c26c:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800c270:	4293      	cmp	r3, r2
 800c272:	d120      	bne.n	800c2b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18e>
 800c274:	3b01      	subs	r3, #1
 800c276:	b29b      	uxth	r3, r3
 800c278:	4662      	mov	r2, ip
 800c27a:	4629      	mov	r1, r5
 800c27c:	4620      	mov	r0, r4
 800c27e:	f7ff ff47 	bl	800c110 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800c282:	7b41      	ldrb	r1, [r0, #13]
 800c284:	00cb      	lsls	r3, r1, #3
 800c286:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c28a:	7a03      	ldrb	r3, [r0, #8]
 800c28c:	0648      	lsls	r0, r1, #25
 800c28e:	ea43 0302 	orr.w	r3, r3, r2
 800c292:	bf44      	itt	mi
 800c294:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c298:	b21b      	sxthmi	r3, r3
 800c29a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c29e:	7b6b      	ldrb	r3, [r5, #13]
 800c2a0:	7aaa      	ldrb	r2, [r5, #10]
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	115a      	asrs	r2, r3, #5
 800c2ac:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800c2b0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800c2b4:	e032      	b.n	800c31c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800c2b6:	00c2      	lsls	r2, r0, #3
 800c2b8:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800c2bc:	7a2a      	ldrb	r2, [r5, #8]
 800c2be:	430a      	orrs	r2, r1
 800c2c0:	0641      	lsls	r1, r0, #25
 800c2c2:	bf44      	itt	mi
 800c2c4:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800c2c8:	b212      	sxthmi	r2, r2
 800c2ca:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800c2ce:	f640 6109 	movw	r1, #3593	@ 0xe09
 800c2d2:	f023 0210 	bic.w	r2, r3, #16
 800c2d6:	428a      	cmp	r2, r1
 800c2d8:	d003      	beq.n	800c2e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800c2da:	f640 6213 	movw	r2, #3603	@ 0xe13
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d129      	bne.n	800c336 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800c2e2:	7b6e      	ldrb	r6, [r5, #13]
 800c2e4:	0076      	lsls	r6, r6, #1
 800c2e6:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800c2ea:	7aae      	ldrb	r6, [r5, #10]
 800c2ec:	4316      	orrs	r6, r2
 800c2ee:	f640 6213 	movw	r2, #3603	@ 0xe13
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	bf1a      	itte	ne
 800c2f6:	f103 33ff 	addne.w	r3, r3, #4294967295
 800c2fa:	b29b      	uxthne	r3, r3
 800c2fc:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800c300:	4662      	mov	r2, ip
 800c302:	4629      	mov	r1, r5
 800c304:	4620      	mov	r0, r4
 800c306:	f7ff ff03 	bl	800c110 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800c30a:	7b43      	ldrb	r3, [r0, #13]
 800c30c:	7a82      	ldrb	r2, [r0, #10]
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c314:	4313      	orrs	r3, r2
 800c316:	1af6      	subs	r6, r6, r3
 800c318:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 800c31c:	7b69      	ldrb	r1, [r5, #13]
 800c31e:	00cb      	lsls	r3, r1, #3
 800c320:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c324:	7a2b      	ldrb	r3, [r5, #8]
 800c326:	4313      	orrs	r3, r2
 800c328:	064a      	lsls	r2, r1, #25
 800c32a:	bf44      	itt	mi
 800c32c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c330:	b21b      	sxthmi	r3, r3
 800c332:	1bdb      	subs	r3, r3, r7
 800c334:	e747      	b.n	800c1c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800c336:	2300      	movs	r3, #0
 800c338:	e7ba      	b.n	800c2b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800c33a:	bf00      	nop
 800c33c:	3fc00079 	.word	0x3fc00079

0800c340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800c340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c344:	4604      	mov	r4, r0
 800c346:	b942      	cbnz	r2, 800c35a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800c348:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c34c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800c350:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800c354:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800c358:	e047      	b.n	800c3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800c35a:	7b51      	ldrb	r1, [r2, #13]
 800c35c:	8893      	ldrh	r3, [r2, #4]
 800c35e:	010d      	lsls	r5, r1, #4
 800c360:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800c364:	79d5      	ldrb	r5, [r2, #7]
 800c366:	4305      	orrs	r5, r0
 800c368:	2d04      	cmp	r5, #4
 800c36a:	bfcc      	ite	gt
 800c36c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800c370:	f04f 0e01 	movle.w	lr, #1
 800c374:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800c378:	f200 80ab 	bhi.w	800c4d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800c37c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800c380:	4283      	cmp	r3, r0
 800c382:	d216      	bcs.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c384:	f240 605b 	movw	r0, #1627	@ 0x65b
 800c388:	4283      	cmp	r3, r0
 800c38a:	d859      	bhi.n	800c440 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800c38c:	f240 6057 	movw	r0, #1623	@ 0x657
 800c390:	4283      	cmp	r3, r0
 800c392:	d20e      	bcs.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c394:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800c398:	d24a      	bcs.n	800c430 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800c39a:	f240 604e 	movw	r0, #1614	@ 0x64e
 800c39e:	4283      	cmp	r3, r0
 800c3a0:	d207      	bcs.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c3a2:	f240 601a 	movw	r0, #1562	@ 0x61a
 800c3a6:	4283      	cmp	r3, r0
 800c3a8:	d02a      	beq.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c3aa:	d821      	bhi.n	800c3f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800c3ac:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800c3b0:	d35b      	bcc.n	800c46a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c3b2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800c3b6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c3ba:	f040 80d0 	bne.w	800c55e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800c3be:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800c3c2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c3c6:	f040 80ca 	bne.w	800c55e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800c3ca:	00cb      	lsls	r3, r1, #3
 800c3cc:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800c3d0:	7a13      	ldrb	r3, [r2, #8]
 800c3d2:	0649      	lsls	r1, r1, #25
 800c3d4:	ea43 0300 	orr.w	r3, r3, r0
 800c3d8:	bf44      	itt	mi
 800c3da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c3de:	b21b      	sxthmi	r3, r3
 800c3e0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c3e4:	1b5d      	subs	r5, r3, r5
 800c3e6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3f0:	f240 604b 	movw	r0, #1611	@ 0x64b
 800c3f4:	4283      	cmp	r3, r0
 800c3f6:	d338      	bcc.n	800c46a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c3f8:	f240 604c 	movw	r0, #1612	@ 0x64c
 800c3fc:	4283      	cmp	r3, r0
 800c3fe:	d9d8      	bls.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c400:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800c404:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800c408:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c40c:	f040 80f2 	bne.w	800c5f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800c410:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c414:	f040 80ee 	bne.w	800c5f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800c418:	00cb      	lsls	r3, r1, #3
 800c41a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800c41e:	7a13      	ldrb	r3, [r2, #8]
 800c420:	064e      	lsls	r6, r1, #25
 800c422:	ea43 0300 	orr.w	r3, r3, r0
 800c426:	bf44      	itt	mi
 800c428:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c42c:	b21b      	sxthmi	r3, r3
 800c42e:	e7d9      	b.n	800c3e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800c430:	f240 6054 	movw	r0, #1620	@ 0x654
 800c434:	4283      	cmp	r3, r0
 800c436:	d8e3      	bhi.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c438:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800c43c:	d9e0      	bls.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c43e:	e7b8      	b.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c440:	f240 6074 	movw	r0, #1652	@ 0x674
 800c444:	4283      	cmp	r3, r0
 800c446:	d0b4      	beq.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c448:	d82d      	bhi.n	800c4a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800c44a:	f240 605e 	movw	r0, #1630	@ 0x65e
 800c44e:	4283      	cmp	r3, r0
 800c450:	d804      	bhi.n	800c45c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800c452:	f240 605d 	movw	r0, #1629	@ 0x65d
 800c456:	4283      	cmp	r3, r0
 800c458:	d3d2      	bcc.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c45a:	e7aa      	b.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c45c:	f240 605f 	movw	r0, #1631	@ 0x65f
 800c460:	4283      	cmp	r3, r0
 800c462:	d0cd      	beq.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c464:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800c468:	d0a3      	beq.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c46a:	00cb      	lsls	r3, r1, #3
 800c46c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800c470:	7a13      	ldrb	r3, [r2, #8]
 800c472:	0649      	lsls	r1, r1, #25
 800c474:	ea43 0300 	orr.w	r3, r3, r0
 800c478:	bf44      	itt	mi
 800c47a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c47e:	b21b      	sxthmi	r3, r3
 800c480:	1b5d      	subs	r5, r3, r5
 800c482:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c486:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c48a:	7b53      	ldrb	r3, [r2, #13]
 800c48c:	015b      	lsls	r3, r3, #5
 800c48e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800c492:	7993      	ldrb	r3, [r2, #6]
 800c494:	430b      	orrs	r3, r1
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	2105      	movs	r1, #5
 800c49a:	fb93 f3f1 	sdiv	r3, r3, r1
 800c49e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800c4a2:	440b      	add	r3, r1
 800c4a4:	e756      	b.n	800c354 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800c4a6:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800c4aa:	4283      	cmp	r3, r0
 800c4ac:	d809      	bhi.n	800c4c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800c4ae:	f240 60df 	movw	r0, #1759	@ 0x6df
 800c4b2:	4283      	cmp	r3, r0
 800c4b4:	f4bf af7d 	bcs.w	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c4b8:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800c4bc:	2b05      	cmp	r3, #5
 800c4be:	d8d4      	bhi.n	800c46a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c4c0:	e777      	b.n	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c4c2:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800c4c6:	4283      	cmp	r3, r0
 800c4c8:	d09a      	beq.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c4ca:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800c4ce:	4283      	cmp	r3, r0
 800c4d0:	e7ca      	b.n	800c468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800c4d2:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800c4d6:	d22b      	bcs.n	800c530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800c4d8:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800c4dc:	4283      	cmp	r3, r0
 800c4de:	d28f      	bcs.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c4e0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800c4e4:	4283      	cmp	r3, r0
 800c4e6:	d816      	bhi.n	800c516 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800c4e8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800c4ec:	4283      	cmp	r3, r0
 800c4ee:	f4bf af60 	bcs.w	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c4f2:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800c4f6:	4283      	cmp	r3, r0
 800c4f8:	d80a      	bhi.n	800c510 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800c4fa:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800c4fe:	4283      	cmp	r3, r0
 800c500:	f4bf af57 	bcs.w	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c504:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800c508:	4283      	cmp	r3, r0
 800c50a:	f43f af79 	beq.w	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c50e:	e7ac      	b.n	800c46a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c510:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800c514:	e7f8      	b.n	800c508 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800c516:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800c51a:	4283      	cmp	r3, r0
 800c51c:	d802      	bhi.n	800c524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800c51e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800c522:	e798      	b.n	800c456 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800c524:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800c528:	4283      	cmp	r3, r0
 800c52a:	f47f af42 	bne.w	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c52e:	e767      	b.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c530:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800c534:	4283      	cmp	r3, r0
 800c536:	f43f af63 	beq.w	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c53a:	d802      	bhi.n	800c542 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800c53c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800c540:	e7f2      	b.n	800c528 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800c542:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800c546:	4283      	cmp	r3, r0
 800c548:	d805      	bhi.n	800c556 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800c54a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800c54e:	4283      	cmp	r3, r0
 800c550:	f4ff af2f 	bcc.w	800c3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c554:	e754      	b.n	800c400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c556:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800c55a:	4283      	cmp	r3, r0
 800c55c:	e7af      	b.n	800c4be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800c55e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800c562:	4617      	mov	r7, r2
 800c564:	f102 0808 	add.w	r8, r2, #8
 800c568:	4666      	mov	r6, ip
 800c56a:	6838      	ldr	r0, [r7, #0]
 800c56c:	6879      	ldr	r1, [r7, #4]
 800c56e:	46e6      	mov	lr, ip
 800c570:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800c574:	3708      	adds	r7, #8
 800c576:	4547      	cmp	r7, r8
 800c578:	46f4      	mov	ip, lr
 800c57a:	d1f6      	bne.n	800c56a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800c57c:	6838      	ldr	r0, [r7, #0]
 800c57e:	f8ce 0000 	str.w	r0, [lr]
 800c582:	88b9      	ldrh	r1, [r7, #4]
 800c584:	f8ae 1004 	strh.w	r1, [lr, #4]
 800c588:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800c58c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c590:	d009      	beq.n	800c5a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800c592:	7b51      	ldrb	r1, [r2, #13]
 800c594:	7992      	ldrb	r2, [r2, #6]
 800c596:	0149      	lsls	r1, r1, #5
 800c598:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800c59c:	4311      	orrs	r1, r2
 800c59e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800c5a2:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800c5a6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c5aa:	b2ad      	uxth	r5, r5
 800c5ac:	d00d      	beq.n	800c5ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800c5ae:	442b      	add	r3, r5
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800c5b6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800c5ba:	10db      	asrs	r3, r3, #3
 800c5bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800c5c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800c5ca:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800c5ce:	00cb      	lsls	r3, r1, #3
 800c5d0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c5d4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800c5d8:	064f      	lsls	r7, r1, #25
 800c5da:	ea43 0302 	orr.w	r3, r3, r2
 800c5de:	bf44      	itt	mi
 800c5e0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c5e4:	b21b      	sxthmi	r3, r3
 800c5e6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c5ea:	1b5b      	subs	r3, r3, r5
 800c5ec:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800c5f0:	4632      	mov	r2, r6
 800c5f2:	e6fa      	b.n	800c3ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800c5f4:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800c5f8:	4617      	mov	r7, r2
 800c5fa:	f102 0908 	add.w	r9, r2, #8
 800c5fe:	4666      	mov	r6, ip
 800c600:	6838      	ldr	r0, [r7, #0]
 800c602:	6879      	ldr	r1, [r7, #4]
 800c604:	46e0      	mov	r8, ip
 800c606:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800c60a:	3708      	adds	r7, #8
 800c60c:	454f      	cmp	r7, r9
 800c60e:	46c4      	mov	ip, r8
 800c610:	d1f6      	bne.n	800c600 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800c612:	6838      	ldr	r0, [r7, #0]
 800c614:	f8c8 0000 	str.w	r0, [r8]
 800c618:	88b9      	ldrh	r1, [r7, #4]
 800c61a:	f8a8 1004 	strh.w	r1, [r8, #4]
 800c61e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800c622:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c626:	d009      	beq.n	800c63c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800c628:	7b51      	ldrb	r1, [r2, #13]
 800c62a:	7992      	ldrb	r2, [r2, #6]
 800c62c:	0149      	lsls	r1, r1, #5
 800c62e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800c632:	4311      	orrs	r1, r2
 800c634:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800c638:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800c63c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c640:	d00e      	beq.n	800c660 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800c642:	eba3 030e 	sub.w	r3, r3, lr
 800c646:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800c650:	10db      	asrs	r3, r3, #3
 800c652:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c656:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800c65a:	4313      	orrs	r3, r2
 800c65c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800c660:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800c664:	00cb      	lsls	r3, r1, #3
 800c666:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c66a:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800c66e:	0648      	lsls	r0, r1, #25
 800c670:	ea43 0302 	orr.w	r3, r3, r2
 800c674:	bf44      	itt	mi
 800c676:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c67a:	b21b      	sxthmi	r3, r3
 800c67c:	1b5d      	subs	r5, r3, r5
 800c67e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c682:	e7b5      	b.n	800c5f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800c684 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800c684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c688:	461e      	mov	r6, r3
 800c68a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800c68c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c690:	4604      	mov	r4, r0
 800c692:	4617      	mov	r7, r2
 800c694:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800c698:	f7f6 fc9e 	bl	8002fd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c69c:	4605      	mov	r5, r0
 800c69e:	b918      	cbnz	r0, 800c6a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800c6a0:	6030      	str	r0, [r6, #0]
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	4601      	mov	r1, r0
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	4798      	blx	r3
 800c6b2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800c6b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	6030      	str	r0, [r6, #0]
 800c6be:	d213      	bcs.n	800c6e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800c6c0:	4643      	mov	r3, r8
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f7ff fe3b 	bl	800c340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800c6ca:	6030      	str	r0, [r6, #0]
 800c6cc:	6833      	ldr	r3, [r6, #0]
 800c6ce:	b143      	cbz	r3, 800c6e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800c6d0:	7b5a      	ldrb	r2, [r3, #13]
 800c6d2:	7a9b      	ldrb	r3, [r3, #10]
 800c6d4:	0052      	lsls	r2, r2, #1
 800c6d6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	bf0c      	ite	eq
 800c6de:	2301      	moveq	r3, #1
 800c6e0:	2300      	movne	r3, #0
 800c6e2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800c6e6:	e7dc      	b.n	800c6a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800c6e8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6f0:	d804      	bhi.n	800c6fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f7ff fd17 	bl	800c128 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800c6fa:	e7e6      	b.n	800c6ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800c6fc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800c700:	2b00      	cmp	r3, #0
 800c702:	d0e3      	beq.n	800c6cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800c704:	f640 1302 	movw	r3, #2306	@ 0x902
 800c708:	429d      	cmp	r5, r3
 800c70a:	d1df      	bne.n	800c6cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800c70c:	4601      	mov	r1, r0
 800c70e:	4620      	mov	r0, r4
 800c710:	f7ff fcdb 	bl	800c0ca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800c714:	e7d9      	b.n	800c6ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800c716 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800c716:	b510      	push	{r4, lr}
 800c718:	4604      	mov	r4, r0
 800c71a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800c71e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800c720:	b1f1      	cbz	r1, 800c760 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800c722:	2b0a      	cmp	r3, #10
 800c724:	d02f      	beq.n	800c786 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800c726:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800c728:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800c72c:	3901      	subs	r1, #1
 800c72e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800c730:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800c734:	1c51      	adds	r1, r2, #1
 800c736:	b289      	uxth	r1, r1
 800c738:	2901      	cmp	r1, #1
 800c73a:	bf84      	itt	hi
 800c73c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c740:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800c742:	f103 0201 	add.w	r2, r3, #1
 800c746:	8722      	strh	r2, [r4, #56]	@ 0x38
 800c748:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800c74a:	bf98      	it	ls
 800c74c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800c74e:	4413      	add	r3, r2
 800c750:	b29b      	uxth	r3, r3
 800c752:	2b09      	cmp	r3, #9
 800c754:	bf88      	it	hi
 800c756:	3b0a      	subhi	r3, #10
 800c758:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c75c:	8458      	strh	r0, [r3, #34]	@ 0x22
 800c75e:	e7dc      	b.n	800c71a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800c760:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800c762:	2b0a      	cmp	r3, #10
 800c764:	d00f      	beq.n	800c786 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800c766:	4620      	mov	r0, r4
 800c768:	f7ff fc6e 	bl	800c048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800c76c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	8722      	strh	r2, [r4, #56]	@ 0x38
 800c772:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800c774:	4413      	add	r3, r2
 800c776:	b29b      	uxth	r3, r3
 800c778:	2b09      	cmp	r3, #9
 800c77a:	bf88      	it	hi
 800c77c:	3b0a      	subhi	r3, #10
 800c77e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c782:	8458      	strh	r0, [r3, #34]	@ 0x22
 800c784:	e7ec      	b.n	800c760 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800c786:	bd10      	pop	{r4, pc}

0800c788 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800c78c:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800c790:	4604      	mov	r4, r0
 800c792:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800c794:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800c796:	3a01      	subs	r2, #1
 800c798:	8702      	strh	r2, [r0, #56]	@ 0x38
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	b292      	uxth	r2, r2
 800c79e:	2a09      	cmp	r2, #9
 800c7a0:	bf86      	itte	hi
 800c7a2:	3b09      	subhi	r3, #9
 800c7a4:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800c7a6:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800c7a8:	f7ff ffb5 	bl	800c716 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800c7ac:	8c23      	ldrh	r3, [r4, #32]
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	bf9c      	itt	ls
 800c7b2:	3301      	addls	r3, #1
 800c7b4:	8423      	strhls	r3, [r4, #32]
 800c7b6:	8be3      	ldrh	r3, [r4, #30]
 800c7b8:	b90b      	cbnz	r3, 800c7be <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	83e3      	strh	r3, [r4, #30]
 800c7be:	8be3      	ldrh	r3, [r4, #30]
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	83e3      	strh	r3, [r4, #30]
 800c7c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	8365      	strh	r5, [r4, #26]
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}

0800c7d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800c7d0:	428a      	cmp	r2, r1
 800c7d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800c7d8:	d931      	bls.n	800c83e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800c7da:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800c7dc:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800c7e0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800c7e4:	19ee      	adds	r6, r5, r7
 800c7e6:	1a54      	subs	r4, r2, r1
 800c7e8:	3e01      	subs	r6, #1
 800c7ea:	fa1f fe84 	uxth.w	lr, r4
 800c7ee:	b2b4      	uxth	r4, r6
 800c7f0:	eba4 090e 	sub.w	r9, r4, lr
 800c7f4:	fa1f f989 	uxth.w	r9, r9
 800c7f8:	2c09      	cmp	r4, #9
 800c7fa:	4626      	mov	r6, r4
 800c7fc:	bf88      	it	hi
 800c7fe:	f1a4 060a 	subhi.w	r6, r4, #10
 800c802:	f1bc 0f00 	cmp.w	ip, #0
 800c806:	bf08      	it	eq
 800c808:	f04f 0c02 	moveq.w	ip, #2
 800c80c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800c810:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c814:	fa1f fc8c 	uxth.w	ip, ip
 800c818:	3c01      	subs	r4, #1
 800c81a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800c81e:	b2a4      	uxth	r4, r4
 800c820:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800c824:	454c      	cmp	r4, r9
 800c826:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800c82a:	d1e5      	bne.n	800c7f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800c82c:	eba5 050e 	sub.w	r5, r5, lr
 800c830:	eb0e 0408 	add.w	r4, lr, r8
 800c834:	8705      	strh	r5, [r0, #56]	@ 0x38
 800c836:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800c83a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800c83e:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800c840:	1a64      	subs	r4, r4, r1
 800c842:	4439      	add	r1, r7
 800c844:	b289      	uxth	r1, r1
 800c846:	2909      	cmp	r1, #9
 800c848:	bf88      	it	hi
 800c84a:	390a      	subhi	r1, #10
 800c84c:	8704      	strh	r4, [r0, #56]	@ 0x38
 800c84e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800c850:	250a      	movs	r5, #10
 800c852:	b18a      	cbz	r2, 800c878 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800c854:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800c856:	3a01      	subs	r2, #1
 800c858:	b292      	uxth	r2, r2
 800c85a:	3101      	adds	r1, #1
 800c85c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800c860:	8701      	strh	r1, [r0, #56]	@ 0x38
 800c862:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800c864:	b901      	cbnz	r1, 800c868 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800c866:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800c868:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800c86a:	3901      	subs	r1, #1
 800c86c:	b289      	uxth	r1, r1
 800c86e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800c870:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800c874:	844c      	strh	r4, [r1, #34]	@ 0x22
 800c876:	e7ec      	b.n	800c852 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800c878:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	f7ff bf4b 	b.w	800c716 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800c880 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800c880:	b570      	push	{r4, r5, r6, lr}
 800c882:	2500      	movs	r5, #0
 800c884:	4295      	cmp	r5, r2
 800c886:	d011      	beq.n	800c8ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800c888:	8bc4      	ldrh	r4, [r0, #30]
 800c88a:	f831 6b02 	ldrh.w	r6, [r1], #2
 800c88e:	4414      	add	r4, r2
 800c890:	3c01      	subs	r4, #1
 800c892:	1b64      	subs	r4, r4, r5
 800c894:	b2a4      	uxth	r4, r4
 800c896:	2c01      	cmp	r4, #1
 800c898:	bf88      	it	hi
 800c89a:	3c02      	subhi	r4, #2
 800c89c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800c8a0:	8b64      	ldrh	r4, [r4, #26]
 800c8a2:	42b4      	cmp	r4, r6
 800c8a4:	d117      	bne.n	800c8d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800c8a6:	3501      	adds	r5, #1
 800c8a8:	b2ad      	uxth	r5, r5
 800c8aa:	e7eb      	b.n	800c884 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800c8ac:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800c8b0:	2400      	movs	r4, #0
 800c8b2:	4413      	add	r3, r2
 800c8b4:	b2a2      	uxth	r2, r4
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	da0f      	bge.n	800c8da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800c8ba:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800c8bc:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800c8c0:	4432      	add	r2, r6
 800c8c2:	b292      	uxth	r2, r2
 800c8c4:	2a09      	cmp	r2, #9
 800c8c6:	bf88      	it	hi
 800c8c8:	3a0a      	subhi	r2, #10
 800c8ca:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800c8ce:	3401      	adds	r4, #1
 800c8d0:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800c8d2:	42aa      	cmp	r2, r5
 800c8d4:	d0ee      	beq.n	800c8b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	bd70      	pop	{r4, r5, r6, pc}
 800c8da:	2001      	movs	r0, #1
 800c8dc:	e7fc      	b.n	800c8d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800c8de <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800c8de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	4616      	mov	r6, r2
 800c8e6:	1c8c      	adds	r4, r1, #2
 800c8e8:	8809      	ldrh	r1, [r1, #0]
 800c8ea:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800c8ee:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800c8f2:	42b3      	cmp	r3, r6
 800c8f4:	d124      	bne.n	800c940 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800c8f6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800c8fa:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800c8fe:	f001 070f 	and.w	r7, r1, #15
 800c902:	f8cd 8000 	str.w	r8, [sp]
 800c906:	464b      	mov	r3, r9
 800c908:	4652      	mov	r2, sl
 800c90a:	4621      	mov	r1, r4
 800c90c:	4628      	mov	r0, r5
 800c90e:	f7ff ffb7 	bl	800c880 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800c912:	4683      	mov	fp, r0
 800c914:	b168      	cbz	r0, 800c932 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800c916:	eb0a 0109 	add.w	r1, sl, r9
 800c91a:	4441      	add	r1, r8
 800c91c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800c920:	463a      	mov	r2, r7
 800c922:	4649      	mov	r1, r9
 800c924:	4628      	mov	r0, r5
 800c926:	f7ff ff53 	bl	800c7d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800c92a:	4658      	mov	r0, fp
 800c92c:	b003      	add	sp, #12
 800c92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c932:	eb07 010a 	add.w	r1, r7, sl
 800c936:	4449      	add	r1, r9
 800c938:	4441      	add	r1, r8
 800c93a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800c93e:	e7d2      	b.n	800c8e6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800c940:	f04f 0b00 	mov.w	fp, #0
 800c944:	e7f1      	b.n	800c92a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800c946 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800c946:	b570      	push	{r4, r5, r6, lr}
 800c948:	8810      	ldrh	r0, [r2, #0]
 800c94a:	4298      	cmp	r0, r3
 800c94c:	d817      	bhi.n	800c97e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800c94e:	1e48      	subs	r0, r1, #1
 800c950:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800c954:	4298      	cmp	r0, r3
 800c956:	d312      	bcc.n	800c97e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800c958:	2400      	movs	r4, #0
 800c95a:	428c      	cmp	r4, r1
 800c95c:	d20f      	bcs.n	800c97e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800c95e:	1860      	adds	r0, r4, r1
 800c960:	1040      	asrs	r0, r0, #1
 800c962:	0085      	lsls	r5, r0, #2
 800c964:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800c968:	42b3      	cmp	r3, r6
 800c96a:	d902      	bls.n	800c972 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800c96c:	3001      	adds	r0, #1
 800c96e:	b284      	uxth	r4, r0
 800c970:	e7f3      	b.n	800c95a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800c972:	d201      	bcs.n	800c978 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800c974:	b281      	uxth	r1, r0
 800c976:	e7f0      	b.n	800c95a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800c978:	442a      	add	r2, r5
 800c97a:	8850      	ldrh	r0, [r2, #2]
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
 800c97e:	2000      	movs	r0, #0
 800c980:	e7fc      	b.n	800c97c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800c982 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800c982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c986:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800c988:	886f      	ldrh	r7, [r5, #2]
 800c98a:	4604      	mov	r4, r0
 800c98c:	087f      	lsrs	r7, r7, #1
 800c98e:	260b      	movs	r6, #11
 800c990:	3e01      	subs	r6, #1
 800c992:	d013      	beq.n	800c9bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800c994:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800c996:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c99a:	462a      	mov	r2, r5
 800c99c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	4643      	mov	r3, r8
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f7ff ffce 	bl	800c946 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800c9aa:	b138      	cbz	r0, 800c9bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800c9ac:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800c9b0:	4642      	mov	r2, r8
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f7ff ff93 	bl	800c8de <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d1e9      	bne.n	800c990 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800c9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c9c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	694a      	ldr	r2, [r1, #20]
 800c9c4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800c9c6:	684b      	ldr	r3, [r1, #4]
 800c9c8:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800c9ca:	1b54      	subs	r4, r2, r5
 800c9cc:	f000 8106 	beq.w	800cbdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800c9d0:	1b9b      	subs	r3, r3, r6
 800c9d2:	d003      	beq.n	800c9dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800c9d4:	4363      	muls	r3, r4
 800c9d6:	2210      	movs	r2, #16
 800c9d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9dc:	680c      	ldr	r4, [r1, #0]
 800c9de:	698a      	ldr	r2, [r1, #24]
 800c9e0:	1b65      	subs	r5, r4, r5
 800c9e2:	f000 80fd 	beq.w	800cbe0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800c9e6:	1b92      	subs	r2, r2, r6
 800c9e8:	d003      	beq.n	800c9f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800c9ea:	436a      	muls	r2, r5
 800c9ec:	2410      	movs	r4, #16
 800c9ee:	fb92 f2f4 	sdiv	r2, r2, r4
 800c9f2:	1a9b      	subs	r3, r3, r2
 800c9f4:	ee07 3a90 	vmov	s15, r3
 800c9f8:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800cc1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800c9fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca04:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ca08:	460a      	mov	r2, r1
 800ca0a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800ca0e:	4603      	mov	r3, r0
 800ca10:	f100 040c 	add.w	r4, r0, #12
 800ca14:	eeb1 6a43 	vneg.f32	s12, s6
 800ca18:	edd2 7a02 	vldr	s15, [r2, #8]
 800ca1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ca20:	3214      	adds	r2, #20
 800ca22:	ece3 6a01 	vstmia	r3!, {s13}
 800ca26:	ed52 7a02 	vldr	s15, [r2, #-8]
 800ca2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca2e:	429c      	cmp	r4, r3
 800ca30:	edc3 7a02 	vstr	s15, [r3, #8]
 800ca34:	ed52 7a01 	vldr	s15, [r2, #-4]
 800ca38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca3c:	edc3 7a05 	vstr	s15, [r3, #20]
 800ca40:	d1ea      	bne.n	800ca18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800ca42:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800ca44:	698b      	ldr	r3, [r1, #24]
 800ca46:	edd0 4a02 	vldr	s9, [r0, #8]
 800ca4a:	edd0 3a00 	vldr	s7, [r0]
 800ca4e:	edd0 6a01 	vldr	s13, [r0, #4]
 800ca52:	ed90 5a05 	vldr	s10, [r0, #20]
 800ca56:	ed90 2a03 	vldr	s4, [r0, #12]
 800ca5a:	edd0 5a04 	vldr	s11, [r0, #16]
 800ca5e:	ed90 1a07 	vldr	s2, [r0, #28]
 800ca62:	edd0 2a06 	vldr	s5, [r0, #24]
 800ca66:	1a9b      	subs	r3, r3, r2
 800ca68:	ee07 3a90 	vmov	s15, r3
 800ca6c:	684b      	ldr	r3, [r1, #4]
 800ca6e:	1a9b      	subs	r3, r3, r2
 800ca70:	ee07 3a10 	vmov	s14, r3
 800ca74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca78:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800ca7c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ca80:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800ca84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca88:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800ca8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ca90:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800ca94:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ca98:	ee32 5a45 	vsub.f32	s10, s4, s10
 800ca9c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800caa0:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800caa4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800caa6:	694a      	ldr	r2, [r1, #20]
 800caa8:	1b13      	subs	r3, r2, r4
 800caaa:	ee07 3a10 	vmov	s14, r3
 800caae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cab2:	680b      	ldr	r3, [r1, #0]
 800cab4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cab8:	1b1b      	subs	r3, r3, r4
 800caba:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800cabe:	ee07 3a10 	vmov	s14, r3
 800cac2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cac6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800caca:	eee6 4a87 	vfma.f32	s9, s13, s14
 800cace:	ee64 4a86 	vmul.f32	s9, s9, s12
 800cad2:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800cad6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800cad8:	698b      	ldr	r3, [r1, #24]
 800cada:	1a9b      	subs	r3, r3, r2
 800cadc:	ee06 3a90 	vmov	s13, r3
 800cae0:	684b      	ldr	r3, [r1, #4]
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	ee07 3a10 	vmov	s14, r3
 800cae8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800caec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800caf0:	ee66 6a84 	vmul.f32	s13, s13, s8
 800caf4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800caf8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800cafc:	eee5 6a87 	vfma.f32	s13, s11, s14
 800cb00:	ee66 6a83 	vmul.f32	s13, s13, s6
 800cb04:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800cb08:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800cb0a:	694a      	ldr	r2, [r1, #20]
 800cb0c:	1b13      	subs	r3, r2, r4
 800cb0e:	ee07 3a10 	vmov	s14, r3
 800cb12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb16:	680b      	ldr	r3, [r1, #0]
 800cb18:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cb1c:	1b1b      	subs	r3, r3, r4
 800cb1e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800cb22:	ee07 3a10 	vmov	s14, r3
 800cb26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cb2e:	eea5 5a87 	vfma.f32	s10, s11, s14
 800cb32:	edd0 5a08 	vldr	s11, [r0, #32]
 800cb36:	ee25 5a06 	vmul.f32	s10, s10, s12
 800cb3a:	ee31 1a65 	vsub.f32	s2, s2, s11
 800cb3e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800cb42:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800cb44:	698b      	ldr	r3, [r1, #24]
 800cb46:	1a9b      	subs	r3, r3, r2
 800cb48:	ee07 3a10 	vmov	s14, r3
 800cb4c:	684b      	ldr	r3, [r1, #4]
 800cb4e:	1a9b      	subs	r3, r3, r2
 800cb50:	ee01 3a90 	vmov	s3, r3
 800cb54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb58:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800cb5c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cb60:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800cb64:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800cb68:	ee61 1a84 	vmul.f32	s3, s3, s8
 800cb6c:	eea1 7a21 	vfma.f32	s14, s2, s3
 800cb70:	ee27 7a03 	vmul.f32	s14, s14, s6
 800cb74:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800cb78:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800cb7a:	694a      	ldr	r2, [r1, #20]
 800cb7c:	1b13      	subs	r3, r2, r4
 800cb7e:	ee03 3a10 	vmov	s6, r3
 800cb82:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800cb86:	680b      	ldr	r3, [r1, #0]
 800cb88:	ee23 3a04 	vmul.f32	s6, s6, s8
 800cb8c:	1b1b      	subs	r3, r3, r4
 800cb8e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800cb92:	ee03 3a10 	vmov	s6, r3
 800cb96:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800cb9a:	ee23 4a04 	vmul.f32	s8, s6, s8
 800cb9e:	eee1 5a04 	vfma.f32	s11, s2, s8
 800cba2:	ee25 6a86 	vmul.f32	s12, s11, s12
 800cba6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800cbaa:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800cbae:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800cbb2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbba:	dd13      	ble.n	800cbe4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800cbbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbc0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800cbc4:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800cbc6:	eee3 7a87 	vfma.f32	s15, s7, s14
 800cbca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd2:	dd15      	ble.n	800cc00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800cbd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbd8:	6403      	str	r3, [r0, #64]	@ 0x40
 800cbda:	bd70      	pop	{r4, r5, r6, pc}
 800cbdc:	4623      	mov	r3, r4
 800cbde:	e6fd      	b.n	800c9dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	e706      	b.n	800c9f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800cbe4:	d502      	bpl.n	800cbec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800cbe6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800cbea:	e7e9      	b.n	800cbc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800cbec:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800cbf0:	eea3 2a85 	vfma.f32	s4, s7, s10
 800cbf4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800cbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbfc:	dade      	bge.n	800cbbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800cbfe:	e7f2      	b.n	800cbe6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800cc00:	d502      	bpl.n	800cc08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800cc02:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800cc06:	e7e7      	b.n	800cbd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800cc08:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800cc0c:	eee3 4a86 	vfma.f32	s9, s7, s12
 800cc10:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc18:	dadc      	bge.n	800cbd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800cc1a:	e7f2      	b.n	800cc02 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800cc1c:	3d800000 	.word	0x3d800000

0800cc20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800cc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc24:	2714      	movs	r7, #20
 800cc26:	435f      	muls	r7, r3
 800cc28:	eb02 0c07 	add.w	ip, r2, r7
 800cc2c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800cc30:	f115 0e0f 	adds.w	lr, r5, #15
 800cc34:	f100 80a2 	bmi.w	800cd7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800cc38:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800cc3c:	9c08      	ldr	r4, [sp, #32]
 800cc3e:	f8c0 e014 	str.w	lr, [r0, #20]
 800cc42:	2614      	movs	r6, #20
 800cc44:	4366      	muls	r6, r4
 800cc46:	eb02 0806 	add.w	r8, r2, r6
 800cc4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc4e:	f115 040f 	adds.w	r4, r5, #15
 800cc52:	f100 809f 	bmi.w	800cd94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800cc56:	1124      	asrs	r4, r4, #4
 800cc58:	eba4 040e 	sub.w	r4, r4, lr
 800cc5c:	6184      	str	r4, [r0, #24]
 800cc5e:	2c00      	cmp	r4, #0
 800cc60:	f000 808a 	beq.w	800cd78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800cc64:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800cc68:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cc6c:	5995      	ldr	r5, [r2, r6]
 800cc6e:	eba4 0809 	sub.w	r8, r4, r9
 800cc72:	59d4      	ldr	r4, [r2, r7]
 800cc74:	eba5 0a04 	sub.w	sl, r5, r4
 800cc78:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800cc7c:	fb0e fe05 	mul.w	lr, lr, r5
 800cc80:	fb0a ee19 	mls	lr, sl, r9, lr
 800cc84:	fb08 e404 	mla	r4, r8, r4, lr
 800cc88:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800cc8c:	3c01      	subs	r4, #1
 800cc8e:	19a4      	adds	r4, r4, r6
 800cc90:	f100 808c 	bmi.w	800cdac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800cc94:	fb94 fef6 	sdiv	lr, r4, r6
 800cc98:	f8c0 e000 	str.w	lr, [r0]
 800cc9c:	fb06 441e 	mls	r4, r6, lr, r4
 800cca0:	6104      	str	r4, [r0, #16]
 800cca2:	2d00      	cmp	r5, #0
 800cca4:	f2c0 8095 	blt.w	800cdd2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800cca8:	fb95 f4f6 	sdiv	r4, r5, r6
 800ccac:	6044      	str	r4, [r0, #4]
 800ccae:	fb06 5514 	mls	r5, r6, r4, r5
 800ccb2:	6085      	str	r5, [r0, #8]
 800ccb4:	60c6      	str	r6, [r0, #12]
 800ccb6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800ccba:	6945      	ldr	r5, [r0, #20]
 800ccbc:	59d2      	ldr	r2, [r2, r7]
 800ccbe:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800cdf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800ccc2:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800ccc6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800ccca:	ee07 4a10 	vmov	s14, r4
 800ccce:	6804      	ldr	r4, [r0, #0]
 800ccd0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800ccd4:	ee07 2a90 	vmov	s15, r2
 800ccd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ccdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cce0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cce4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cce8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ccec:	edd3 6a00 	vldr	s13, [r3]
 800ccf0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ccf4:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800ccf8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ccfc:	edc0 6a07 	vstr	s13, [r0, #28]
 800cd00:	edd0 6a01 	vldr	s13, [r0, #4]
 800cd04:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800cd08:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800cd0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cd10:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800cd14:	ed80 6a08 	vstr	s12, [r0, #32]
 800cd18:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800cd1a:	6242      	str	r2, [r0, #36]	@ 0x24
 800cd1c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800cd20:	ed93 6a03 	vldr	s12, [r3, #12]
 800cd24:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cd28:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800cd2c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800cd30:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800cd34:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800cd38:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800cd3c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800cd40:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800cd44:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800cd46:	6302      	str	r2, [r0, #48]	@ 0x30
 800cd48:	ed93 6a06 	vldr	s12, [r3, #24]
 800cd4c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800cd50:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cd54:	eeb0 7a46 	vmov.f32	s14, s12
 800cd58:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800cd5c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cd60:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800cd64:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800cd68:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800cd6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cd70:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800cd74:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800cd76:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800cd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7c:	f1c5 0501 	rsb	r5, r5, #1
 800cd80:	f015 050f 	ands.w	r5, r5, #15
 800cd84:	bf18      	it	ne
 800cd86:	2501      	movne	r5, #1
 800cd88:	2410      	movs	r4, #16
 800cd8a:	fb9e fef4 	sdiv	lr, lr, r4
 800cd8e:	ebae 0e05 	sub.w	lr, lr, r5
 800cd92:	e753      	b.n	800cc3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800cd94:	f1c5 0501 	rsb	r5, r5, #1
 800cd98:	f015 050f 	ands.w	r5, r5, #15
 800cd9c:	bf18      	it	ne
 800cd9e:	2501      	movne	r5, #1
 800cda0:	f04f 0910 	mov.w	r9, #16
 800cda4:	fb94 f4f9 	sdiv	r4, r4, r9
 800cda8:	1b64      	subs	r4, r4, r5
 800cdaa:	e755      	b.n	800cc58 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800cdac:	4264      	negs	r4, r4
 800cdae:	fb94 fef6 	sdiv	lr, r4, r6
 800cdb2:	f1ce 0800 	rsb	r8, lr, #0
 800cdb6:	fb06 441e 	mls	r4, r6, lr, r4
 800cdba:	f8c0 8000 	str.w	r8, [r0]
 800cdbe:	6104      	str	r4, [r0, #16]
 800cdc0:	2c00      	cmp	r4, #0
 800cdc2:	f43f af6e 	beq.w	800cca2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800cdc6:	ea6f 0e0e 	mvn.w	lr, lr
 800cdca:	f8c0 e000 	str.w	lr, [r0]
 800cdce:	1b34      	subs	r4, r6, r4
 800cdd0:	e766      	b.n	800cca0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800cdd2:	426d      	negs	r5, r5
 800cdd4:	fb95 f4f6 	sdiv	r4, r5, r6
 800cdd8:	f1c4 0e00 	rsb	lr, r4, #0
 800cddc:	fb06 5514 	mls	r5, r6, r4, r5
 800cde0:	f8c0 e004 	str.w	lr, [r0, #4]
 800cde4:	6085      	str	r5, [r0, #8]
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	f43f af64 	beq.w	800ccb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800cdec:	43e4      	mvns	r4, r4
 800cdee:	6044      	str	r4, [r0, #4]
 800cdf0:	1b75      	subs	r5, r6, r5
 800cdf2:	e75e      	b.n	800ccb2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800cdf4:	3d800000 	.word	0x3d800000

0800cdf8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800cdf8:	4b01      	ldr	r3, [pc, #4]	@ (800ce00 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800cdfa:	6018      	str	r0, [r3, #0]
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	2001248c 	.word	0x2001248c

0800ce04 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800ce04:	4b06      	ldr	r3, [pc, #24]	@ (800ce20 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800ce06:	881a      	ldrh	r2, [r3, #0]
 800ce08:	4282      	cmp	r2, r0
 800ce0a:	d807      	bhi.n	800ce1c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800ce0c:	4b05      	ldr	r3, [pc, #20]	@ (800ce24 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800ce0e:	881b      	ldrh	r3, [r3, #0]
 800ce10:	4413      	add	r3, r2
 800ce12:	4298      	cmp	r0, r3
 800ce14:	bfac      	ite	ge
 800ce16:	2000      	movge	r0, #0
 800ce18:	2001      	movlt	r0, #1
 800ce1a:	4770      	bx	lr
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	4770      	bx	lr
 800ce20:	200124ac 	.word	0x200124ac
 800ce24:	200124b0 	.word	0x200124b0

0800ce28 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800ce28:	b508      	push	{r3, lr}
 800ce2a:	4601      	mov	r1, r0
 800ce2c:	f7ff ffea 	bl	800ce04 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800ce30:	b118      	cbz	r0, 800ce3a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800ce32:	4b02      	ldr	r3, [pc, #8]	@ (800ce3c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800ce3a:	bd08      	pop	{r3, pc}
 800ce3c:	20012490 	.word	0x20012490

0800ce40 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce42:	4c24      	ldr	r4, [pc, #144]	@ (800ced4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800ce44:	6823      	ldr	r3, [r4, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d042      	beq.n	800ced0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800ce4a:	4a23      	ldr	r2, [pc, #140]	@ (800ced8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800ce4c:	4d23      	ldr	r5, [pc, #140]	@ (800cedc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800ce4e:	8811      	ldrh	r1, [r2, #0]
 800ce50:	f8b5 c000 	ldrh.w	ip, [r5]
 800ce54:	4822      	ldr	r0, [pc, #136]	@ (800cee0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800ce56:	4461      	add	r1, ip
 800ce58:	1c4a      	adds	r2, r1, #1
 800ce5a:	f022 0201 	bic.w	r2, r2, #1
 800ce5e:	008f      	lsls	r7, r1, #2
 800ce60:	0412      	lsls	r2, r2, #16
 800ce62:	19de      	adds	r6, r3, r7
 800ce64:	0c12      	lsrs	r2, r2, #16
 800ce66:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800ce6a:	6006      	str	r6, [r0, #0]
 800ce6c:	4e1d      	ldr	r6, [pc, #116]	@ (800cee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800ce6e:	19da      	adds	r2, r3, r7
 800ce70:	6032      	str	r2, [r6, #0]
 800ce72:	220e      	movs	r2, #14
 800ce74:	fb02 f20c 	mul.w	r2, r2, ip
 800ce78:	3203      	adds	r2, #3
 800ce7a:	f022 0203 	bic.w	r2, r2, #3
 800ce7e:	443a      	add	r2, r7
 800ce80:	4f19      	ldr	r7, [pc, #100]	@ (800cee8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800ce82:	4413      	add	r3, r2
 800ce84:	603b      	str	r3, [r7, #0]
 800ce86:	4f19      	ldr	r7, [pc, #100]	@ (800ceec <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800ce88:	2300      	movs	r3, #0
 800ce8a:	803b      	strh	r3, [r7, #0]
 800ce8c:	4f18      	ldr	r7, [pc, #96]	@ (800cef0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800ce8e:	683f      	ldr	r7, [r7, #0]
 800ce90:	1aba      	subs	r2, r7, r2
 800ce92:	4f18      	ldr	r7, [pc, #96]	@ (800cef4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800ce94:	603a      	str	r2, [r7, #0]
 800ce96:	4a18      	ldr	r2, [pc, #96]	@ (800cef8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800ce98:	469c      	mov	ip, r3
 800ce9a:	8013      	strh	r3, [r2, #0]
 800ce9c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800cea0:	428b      	cmp	r3, r1
 800cea2:	d10d      	bne.n	800cec0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800cea4:	882d      	ldrh	r5, [r5, #0]
 800cea6:	6830      	ldr	r0, [r6, #0]
 800cea8:	2300      	movs	r3, #0
 800ceaa:	240e      	movs	r4, #14
 800ceac:	429d      	cmp	r5, r3
 800ceae:	d90f      	bls.n	800ced0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800ceb0:	fb04 0203 	mla	r2, r4, r3, r0
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	7b11      	ldrb	r1, [r2, #12]
 800ceb8:	f36f 1145 	bfc	r1, #5, #1
 800cebc:	7311      	strb	r1, [r2, #12]
 800cebe:	e7f5      	b.n	800ceac <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800cec0:	6822      	ldr	r2, [r4, #0]
 800cec2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800cec6:	6802      	ldr	r2, [r0, #0]
 800cec8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800cecc:	3301      	adds	r3, #1
 800cece:	e7e7      	b.n	800cea0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800ced0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced2:	bf00      	nop
 800ced4:	20012490 	.word	0x20012490
 800ced8:	200124ac 	.word	0x200124ac
 800cedc:	200124b0 	.word	0x200124b0
 800cee0:	200124a4 	.word	0x200124a4
 800cee4:	20012494 	.word	0x20012494
 800cee8:	2001249c 	.word	0x2001249c
 800ceec:	200124ae 	.word	0x200124ae
 800cef0:	20012498 	.word	0x20012498
 800cef4:	200124a8 	.word	0x200124a8
 800cef8:	200124a0 	.word	0x200124a0

0800cefc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800cefc:	4b06      	ldr	r3, [pc, #24]	@ (800cf18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	b943      	cbnz	r3, 800cf14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800cf02:	b139      	cbz	r1, 800cf14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800cf04:	4b05      	ldr	r3, [pc, #20]	@ (800cf1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800cf06:	801a      	strh	r2, [r3, #0]
 800cf08:	4b05      	ldr	r3, [pc, #20]	@ (800cf20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800cf0a:	6019      	str	r1, [r3, #0]
 800cf0c:	4b05      	ldr	r3, [pc, #20]	@ (800cf24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800cf0e:	6018      	str	r0, [r3, #0]
 800cf10:	f7ff bf96 	b.w	800ce40 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	2001249c 	.word	0x2001249c
 800cf1c:	200124b0 	.word	0x200124b0
 800cf20:	20012498 	.word	0x20012498
 800cf24:	20012490 	.word	0x20012490

0800cf28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800cf28:	b470      	push	{r4, r5, r6}
 800cf2a:	4c07      	ldr	r4, [pc, #28]	@ (800cf48 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800cf2c:	6826      	ldr	r6, [r4, #0]
 800cf2e:	4605      	mov	r5, r0
 800cf30:	4610      	mov	r0, r2
 800cf32:	9a03      	ldr	r2, [sp, #12]
 800cf34:	b936      	cbnz	r6, 800cf44 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800cf36:	6025      	str	r5, [r4, #0]
 800cf38:	4c04      	ldr	r4, [pc, #16]	@ (800cf4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800cf3a:	8021      	strh	r1, [r4, #0]
 800cf3c:	bc70      	pop	{r4, r5, r6}
 800cf3e:	4619      	mov	r1, r3
 800cf40:	f7ff bfdc 	b.w	800cefc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800cf44:	bc70      	pop	{r4, r5, r6}
 800cf46:	4770      	bx	lr
 800cf48:	200124b4 	.word	0x200124b4
 800cf4c:	200124ac 	.word	0x200124ac

0800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800cf50:	4a12      	ldr	r2, [pc, #72]	@ (800cf9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800cf52:	8803      	ldrh	r3, [r0, #0]
 800cf54:	8812      	ldrh	r2, [r2, #0]
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d207      	bcs.n	800cf6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800cf5a:	4a11      	ldr	r2, [pc, #68]	@ (800cfa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800cf5c:	6812      	ldr	r2, [r2, #0]
 800cf5e:	2114      	movs	r1, #20
 800cf60:	fb01 2303 	mla	r3, r1, r3, r2
 800cf64:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800cf68:	4770      	bx	lr
 800cf6a:	490e      	ldr	r1, [pc, #56]	@ (800cfa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800cf6c:	8809      	ldrh	r1, [r1, #0]
 800cf6e:	4411      	add	r1, r2
 800cf70:	428b      	cmp	r3, r1
 800cf72:	da04      	bge.n	800cf7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800cf74:	1a9b      	subs	r3, r3, r2
 800cf76:	4a0c      	ldr	r2, [pc, #48]	@ (800cfa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800cf78:	210e      	movs	r1, #14
 800cf7a:	6812      	ldr	r2, [r2, #0]
 800cf7c:	e7f0      	b.n	800cf60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800cf7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d108      	bne.n	800cf98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800cf86:	4b09      	ldr	r3, [pc, #36]	@ (800cfac <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	b91b      	cbnz	r3, 800cf94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800cf8c:	4b08      	ldr	r3, [pc, #32]	@ (800cfb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800cf8e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800cf92:	4770      	bx	lr
 800cf94:	4b07      	ldr	r3, [pc, #28]	@ (800cfb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800cf96:	e7fa      	b.n	800cf8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800cf98:	2000      	movs	r0, #0
 800cf9a:	4770      	bx	lr
 800cf9c:	200124ac 	.word	0x200124ac
 800cfa0:	200124b4 	.word	0x200124b4
 800cfa4:	200124b0 	.word	0x200124b0
 800cfa8:	20012494 	.word	0x20012494
 800cfac:	20012424 	.word	0x20012424
 800cfb0:	20012426 	.word	0x20012426
 800cfb4:	20012428 	.word	0x20012428

0800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800cfb8:	4a12      	ldr	r2, [pc, #72]	@ (800d004 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800cfba:	8803      	ldrh	r3, [r0, #0]
 800cfbc:	8812      	ldrh	r2, [r2, #0]
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d207      	bcs.n	800cfd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800cfc2:	4a11      	ldr	r2, [pc, #68]	@ (800d008 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800cfc4:	6812      	ldr	r2, [r2, #0]
 800cfc6:	2114      	movs	r1, #20
 800cfc8:	fb01 2303 	mla	r3, r1, r3, r2
 800cfcc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800cfd0:	4770      	bx	lr
 800cfd2:	490e      	ldr	r1, [pc, #56]	@ (800d00c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800cfd4:	8809      	ldrh	r1, [r1, #0]
 800cfd6:	4411      	add	r1, r2
 800cfd8:	428b      	cmp	r3, r1
 800cfda:	da04      	bge.n	800cfe6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800cfdc:	1a9b      	subs	r3, r3, r2
 800cfde:	4a0c      	ldr	r2, [pc, #48]	@ (800d010 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800cfe0:	210e      	movs	r1, #14
 800cfe2:	6812      	ldr	r2, [r2, #0]
 800cfe4:	e7f0      	b.n	800cfc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800cfe6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d108      	bne.n	800d000 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800cfee:	4b09      	ldr	r3, [pc, #36]	@ (800d014 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	b91b      	cbnz	r3, 800cffc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800cff4:	4b08      	ldr	r3, [pc, #32]	@ (800d018 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800cff6:	f9b3 0000 	ldrsh.w	r0, [r3]
 800cffa:	4770      	bx	lr
 800cffc:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800cffe:	e7fa      	b.n	800cff6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800d000:	2000      	movs	r0, #0
 800d002:	4770      	bx	lr
 800d004:	200124ac 	.word	0x200124ac
 800d008:	200124b4 	.word	0x200124b4
 800d00c:	200124b0 	.word	0x200124b0
 800d010:	20012494 	.word	0x20012494
 800d014:	20012424 	.word	0x20012424
 800d018:	20012428 	.word	0x20012428
 800d01c:	20012426 	.word	0x20012426

0800d020 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800d020:	b530      	push	{r4, r5, lr}
 800d022:	4a22      	ldr	r2, [pc, #136]	@ (800d0ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800d024:	880b      	ldrh	r3, [r1, #0]
 800d026:	8812      	ldrh	r2, [r2, #0]
 800d028:	4293      	cmp	r3, r2
 800d02a:	d213      	bcs.n	800d054 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800d02c:	4a20      	ldr	r2, [pc, #128]	@ (800d0b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800d02e:	6812      	ldr	r2, [r2, #0]
 800d030:	2114      	movs	r1, #20
 800d032:	fb01 2303 	mla	r3, r1, r3, r2
 800d036:	8a1a      	ldrh	r2, [r3, #16]
 800d038:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800d03c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800d040:	8a5b      	ldrh	r3, [r3, #18]
 800d042:	8004      	strh	r4, [r0, #0]
 800d044:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800d048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d04c:	8041      	strh	r1, [r0, #2]
 800d04e:	8082      	strh	r2, [r0, #4]
 800d050:	80c3      	strh	r3, [r0, #6]
 800d052:	e024      	b.n	800d09e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 800d054:	4917      	ldr	r1, [pc, #92]	@ (800d0b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800d056:	8809      	ldrh	r1, [r1, #0]
 800d058:	4411      	add	r1, r2
 800d05a:	428b      	cmp	r3, r1
 800d05c:	da10      	bge.n	800d080 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 800d05e:	1a9b      	subs	r3, r3, r2
 800d060:	220e      	movs	r2, #14
 800d062:	4353      	muls	r3, r2
 800d064:	4a14      	ldr	r2, [pc, #80]	@ (800d0b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 800d066:	6811      	ldr	r1, [r2, #0]
 800d068:	18ca      	adds	r2, r1, r3
 800d06a:	5ecd      	ldrsh	r5, [r1, r3]
 800d06c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800d070:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800d074:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800d078:	8005      	strh	r5, [r0, #0]
 800d07a:	8044      	strh	r4, [r0, #2]
 800d07c:	8081      	strh	r1, [r0, #4]
 800d07e:	e7e7      	b.n	800d050 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800d080:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d084:	4293      	cmp	r3, r2
 800d086:	d10b      	bne.n	800d0a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 800d088:	4b0c      	ldr	r3, [pc, #48]	@ (800d0bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 800d08a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d08e:	4b0c      	ldr	r3, [pc, #48]	@ (800d0c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 800d090:	8081      	strh	r1, [r0, #4]
 800d092:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d096:	80c2      	strh	r2, [r0, #6]
 800d098:	2300      	movs	r3, #0
 800d09a:	8003      	strh	r3, [r0, #0]
 800d09c:	8043      	strh	r3, [r0, #2]
 800d09e:	bd30      	pop	{r4, r5, pc}
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	8003      	strh	r3, [r0, #0]
 800d0a4:	8043      	strh	r3, [r0, #2]
 800d0a6:	8083      	strh	r3, [r0, #4]
 800d0a8:	e7d2      	b.n	800d050 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800d0aa:	bf00      	nop
 800d0ac:	200124ac 	.word	0x200124ac
 800d0b0:	200124b4 	.word	0x200124b4
 800d0b4:	200124b0 	.word	0x200124b0
 800d0b8:	20012494 	.word	0x20012494
 800d0bc:	20012420 	.word	0x20012420
 800d0c0:	20012422 	.word	0x20012422

0800d0c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 800d0c4:	4a17      	ldr	r2, [pc, #92]	@ (800d124 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 800d0c6:	8803      	ldrh	r3, [r0, #0]
 800d0c8:	8812      	ldrh	r2, [r2, #0]
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d213      	bcs.n	800d0f6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 800d0ce:	4a16      	ldr	r2, [pc, #88]	@ (800d128 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800d0d0:	6812      	ldr	r2, [r2, #0]
 800d0d2:	2114      	movs	r1, #20
 800d0d4:	fb01 2303 	mla	r3, r1, r3, r2
 800d0d8:	8a1a      	ldrh	r2, [r3, #16]
 800d0da:	8919      	ldrh	r1, [r3, #8]
 800d0dc:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800d0e0:	428a      	cmp	r2, r1
 800d0e2:	db1d      	blt.n	800d120 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800d0e4:	8a58      	ldrh	r0, [r3, #18]
 800d0e6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d0ea:	895b      	ldrh	r3, [r3, #10]
 800d0ec:	4298      	cmp	r0, r3
 800d0ee:	bfac      	ite	ge
 800d0f0:	2000      	movge	r0, #0
 800d0f2:	2001      	movlt	r0, #1
 800d0f4:	4770      	bx	lr
 800d0f6:	490d      	ldr	r1, [pc, #52]	@ (800d12c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 800d0f8:	8809      	ldrh	r1, [r1, #0]
 800d0fa:	4411      	add	r1, r2
 800d0fc:	428b      	cmp	r3, r1
 800d0fe:	da0d      	bge.n	800d11c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 800d100:	1a9b      	subs	r3, r3, r2
 800d102:	4a0b      	ldr	r2, [pc, #44]	@ (800d130 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 800d104:	6812      	ldr	r2, [r2, #0]
 800d106:	210e      	movs	r1, #14
 800d108:	fb01 2303 	mla	r3, r1, r3, r2
 800d10c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d110:	891a      	ldrh	r2, [r3, #8]
 800d112:	4291      	cmp	r1, r2
 800d114:	db04      	blt.n	800d120 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800d116:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800d11a:	e7e6      	b.n	800d0ea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 800d11c:	2000      	movs	r0, #0
 800d11e:	4770      	bx	lr
 800d120:	2001      	movs	r0, #1
 800d122:	4770      	bx	lr
 800d124:	200124ac 	.word	0x200124ac
 800d128:	200124b4 	.word	0x200124b4
 800d12c:	200124b0 	.word	0x200124b0
 800d130:	20012494 	.word	0x20012494

0800d134 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800d134:	4a12      	ldr	r2, [pc, #72]	@ (800d180 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800d136:	8803      	ldrh	r3, [r0, #0]
 800d138:	8811      	ldrh	r1, [r2, #0]
 800d13a:	428b      	cmp	r3, r1
 800d13c:	d20b      	bcs.n	800d156 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800d13e:	4a11      	ldr	r2, [pc, #68]	@ (800d184 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800d140:	6812      	ldr	r2, [r2, #0]
 800d142:	b112      	cbz	r2, 800d14a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800d144:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d148:	b9c0      	cbnz	r0, 800d17c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800d14a:	4a0f      	ldr	r2, [pc, #60]	@ (800d188 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800d14c:	6811      	ldr	r1, [r2, #0]
 800d14e:	2214      	movs	r2, #20
 800d150:	4353      	muls	r3, r2
 800d152:	58c8      	ldr	r0, [r1, r3]
 800d154:	4770      	bx	lr
 800d156:	4a0d      	ldr	r2, [pc, #52]	@ (800d18c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800d158:	8812      	ldrh	r2, [r2, #0]
 800d15a:	440a      	add	r2, r1
 800d15c:	4293      	cmp	r3, r2
 800d15e:	da04      	bge.n	800d16a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800d160:	4a08      	ldr	r2, [pc, #32]	@ (800d184 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800d162:	6812      	ldr	r2, [r2, #0]
 800d164:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d168:	4770      	bx	lr
 800d16a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d16e:	4293      	cmp	r3, r2
 800d170:	d103      	bne.n	800d17a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800d172:	4b07      	ldr	r3, [pc, #28]	@ (800d190 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d178:	4770      	bx	lr
 800d17a:	2000      	movs	r0, #0
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	200124ac 	.word	0x200124ac
 800d184:	20012490 	.word	0x20012490
 800d188:	200124b4 	.word	0x200124b4
 800d18c:	200124b0 	.word	0x200124b0
 800d190:	2001242c 	.word	0x2001242c

0800d194 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800d194:	4b24      	ldr	r3, [pc, #144]	@ (800d228 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800d196:	8802      	ldrh	r2, [r0, #0]
 800d198:	8818      	ldrh	r0, [r3, #0]
 800d19a:	4282      	cmp	r2, r0
 800d19c:	d221      	bcs.n	800d1e2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800d19e:	4b23      	ldr	r3, [pc, #140]	@ (800d22c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800d1a0:	6819      	ldr	r1, [r3, #0]
 800d1a2:	2314      	movs	r3, #20
 800d1a4:	fb03 1302 	mla	r3, r3, r2, r1
 800d1a8:	6858      	ldr	r0, [r3, #4]
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d03a      	beq.n	800d224 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d1ae:	4920      	ldr	r1, [pc, #128]	@ (800d230 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800d1b0:	6809      	ldr	r1, [r1, #0]
 800d1b2:	2900      	cmp	r1, #0
 800d1b4:	d036      	beq.n	800d224 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d1b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d1ba:	2900      	cmp	r1, #0
 800d1bc:	d032      	beq.n	800d224 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d1be:	891a      	ldrh	r2, [r3, #8]
 800d1c0:	8958      	ldrh	r0, [r3, #10]
 800d1c2:	4350      	muls	r0, r2
 800d1c4:	7c5a      	ldrb	r2, [r3, #17]
 800d1c6:	7cdb      	ldrb	r3, [r3, #19]
 800d1c8:	0952      	lsrs	r2, r2, #5
 800d1ca:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d1ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d1d2:	2b0b      	cmp	r3, #11
 800d1d4:	bf18      	it	ne
 800d1d6:	0040      	lslne	r0, r0, #1
 800d1d8:	3003      	adds	r0, #3
 800d1da:	f020 0003 	bic.w	r0, r0, #3
 800d1de:	4408      	add	r0, r1
 800d1e0:	4770      	bx	lr
 800d1e2:	4b14      	ldr	r3, [pc, #80]	@ (800d234 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800d1e4:	881b      	ldrh	r3, [r3, #0]
 800d1e6:	4403      	add	r3, r0
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	da1a      	bge.n	800d222 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800d1ec:	4b12      	ldr	r3, [pc, #72]	@ (800d238 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	1a10      	subs	r0, r2, r0
 800d1f2:	210e      	movs	r1, #14
 800d1f4:	fb01 3000 	mla	r0, r1, r0, r3
 800d1f8:	7b03      	ldrb	r3, [r0, #12]
 800d1fa:	f003 031f 	and.w	r3, r3, #31
 800d1fe:	2b0b      	cmp	r3, #11
 800d200:	d10b      	bne.n	800d21a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800d202:	8903      	ldrh	r3, [r0, #8]
 800d204:	8940      	ldrh	r0, [r0, #10]
 800d206:	4358      	muls	r0, r3
 800d208:	4b09      	ldr	r3, [pc, #36]	@ (800d230 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800d20a:	6819      	ldr	r1, [r3, #0]
 800d20c:	3003      	adds	r0, #3
 800d20e:	f020 0303 	bic.w	r3, r0, #3
 800d212:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800d216:	4418      	add	r0, r3
 800d218:	4770      	bx	lr
 800d21a:	2b0d      	cmp	r3, #13
 800d21c:	d101      	bne.n	800d222 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800d21e:	300d      	adds	r0, #13
 800d220:	4770      	bx	lr
 800d222:	2000      	movs	r0, #0
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	200124ac 	.word	0x200124ac
 800d22c:	200124b4 	.word	0x200124b4
 800d230:	20012490 	.word	0x20012490
 800d234:	200124b0 	.word	0x200124b0
 800d238:	20012494 	.word	0x20012494

0800d23c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800d23c:	b510      	push	{r4, lr}
 800d23e:	4b1f      	ldr	r3, [pc, #124]	@ (800d2bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 800d240:	8802      	ldrh	r2, [r0, #0]
 800d242:	881b      	ldrh	r3, [r3, #0]
 800d244:	429a      	cmp	r2, r3
 800d246:	d21a      	bcs.n	800d27e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 800d248:	4b1d      	ldr	r3, [pc, #116]	@ (800d2c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2114      	movs	r1, #20
 800d24e:	fb01 3102 	mla	r1, r1, r2, r3
 800d252:	7c4b      	ldrb	r3, [r1, #17]
 800d254:	0958      	lsrs	r0, r3, #5
 800d256:	7ccb      	ldrb	r3, [r1, #19]
 800d258:	491a      	ldr	r1, [pc, #104]	@ (800d2c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 800d25a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d25e:	6809      	ldr	r1, [r1, #0]
 800d260:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 800d264:	b2d8      	uxtb	r0, r3
 800d266:	b149      	cbz	r1, 800d27c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d268:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d26c:	b132      	cbz	r2, 800d27c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d26e:	2b0e      	cmp	r3, #14
 800d270:	d021      	beq.n	800d2b6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800d272:	280f      	cmp	r0, #15
 800d274:	d01d      	beq.n	800d2b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 800d276:	2810      	cmp	r0, #16
 800d278:	bf08      	it	eq
 800d27a:	2002      	moveq	r0, #2
 800d27c:	bd10      	pop	{r4, pc}
 800d27e:	4912      	ldr	r1, [pc, #72]	@ (800d2c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 800d280:	8809      	ldrh	r1, [r1, #0]
 800d282:	4419      	add	r1, r3
 800d284:	428a      	cmp	r2, r1
 800d286:	da09      	bge.n	800d29c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	4a10      	ldr	r2, [pc, #64]	@ (800d2cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 800d28c:	6812      	ldr	r2, [r2, #0]
 800d28e:	210e      	movs	r1, #14
 800d290:	fb01 2303 	mla	r3, r1, r3, r2
 800d294:	7b18      	ldrb	r0, [r3, #12]
 800d296:	f000 001f 	and.w	r0, r0, #31
 800d29a:	e7ef      	b.n	800d27c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d29c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d108      	bne.n	800d2b6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800d2a4:	f7fb fa90 	bl	80087c8 <_ZN8touchgfx3HAL3lcdEv>
 800d2a8:	6803      	ldr	r3, [r0, #0]
 800d2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2b0:	4718      	bx	r3
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	e7e2      	b.n	800d27c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	e7e0      	b.n	800d27c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d2ba:	bf00      	nop
 800d2bc:	200124ac 	.word	0x200124ac
 800d2c0:	200124b4 	.word	0x200124b4
 800d2c4:	20012490 	.word	0x20012490
 800d2c8:	200124b0 	.word	0x200124b0
 800d2cc:	20012494 	.word	0x20012494

0800d2d0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 800d2d0:	2010      	movs	r0, #16
 800d2d2:	4770      	bx	lr

0800d2d4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	4770      	bx	lr

0800d2d8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 800d2d8:	4b02      	ldr	r3, [pc, #8]	@ (800d2e4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 800d2da:	8818      	ldrh	r0, [r3, #0]
 800d2dc:	0040      	lsls	r0, r0, #1
 800d2de:	b280      	uxth	r0, r0
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	20012426 	.word	0x20012426

0800d2e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800d2e8:	2bff      	cmp	r3, #255	@ 0xff
 800d2ea:	d05e      	beq.n	800d3aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 800d2ec:	2a0b      	cmp	r2, #11
 800d2ee:	d058      	beq.n	800d3a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800d2f0:	d80e      	bhi.n	800d310 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 800d2f2:	2a03      	cmp	r2, #3
 800d2f4:	d04d      	beq.n	800d392 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 800d2f6:	d804      	bhi.n	800d302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 800d2f8:	2a01      	cmp	r2, #1
 800d2fa:	d04c      	beq.n	800d396 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 800d2fc:	d94d      	bls.n	800d39a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 800d2fe:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d300:	e031      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d302:	2a09      	cmp	r2, #9
 800d304:	d04d      	beq.n	800d3a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800d306:	d84a      	bhi.n	800d39e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800d308:	2a08      	cmp	r2, #8
 800d30a:	d048      	beq.n	800d39e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800d30c:	2300      	movs	r3, #0
 800d30e:	e02a      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d310:	2a2f      	cmp	r2, #47	@ 0x2f
 800d312:	d02c      	beq.n	800d36e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800d314:	d811      	bhi.n	800d33a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 800d316:	2a2d      	cmp	r2, #45	@ 0x2d
 800d318:	d018      	beq.n	800d34c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 800d31a:	d831      	bhi.n	800d380 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 800d31c:	2a2c      	cmp	r2, #44	@ 0x2c
 800d31e:	d1f5      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d320:	684a      	ldr	r2, [r1, #4]
 800d322:	7813      	ldrb	r3, [r2, #0]
 800d324:	7852      	ldrb	r2, [r2, #1]
 800d326:	2a00      	cmp	r2, #0
 800d328:	d1f0      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d01d      	beq.n	800d36a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d02d      	beq.n	800d38e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 800d332:	2b02      	cmp	r3, #2
 800d334:	d1ea      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d336:	68c3      	ldr	r3, [r0, #12]
 800d338:	e015      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d33a:	2a31      	cmp	r2, #49	@ 0x31
 800d33c:	d004      	beq.n	800d348 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 800d33e:	d332      	bcc.n	800d3a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800d340:	2a32      	cmp	r2, #50	@ 0x32
 800d342:	d030      	beq.n	800d3a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800d344:	2a33      	cmp	r2, #51	@ 0x33
 800d346:	d1e1      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d348:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800d34a:	e00c      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d34c:	684a      	ldr	r2, [r1, #4]
 800d34e:	7813      	ldrb	r3, [r2, #0]
 800d350:	7852      	ldrb	r2, [r2, #1]
 800d352:	2a00      	cmp	r2, #0
 800d354:	d1da      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d356:	2b01      	cmp	r3, #1
 800d358:	d004      	beq.n	800d364 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 800d35a:	d30f      	bcc.n	800d37c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d1d5      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d360:	6943      	ldr	r3, [r0, #20]
 800d362:	e000      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d364:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d366:	4618      	mov	r0, r3
 800d368:	4770      	bx	lr
 800d36a:	69c3      	ldr	r3, [r0, #28]
 800d36c:	e7fb      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d36e:	684b      	ldr	r3, [r1, #4]
 800d370:	781a      	ldrb	r2, [r3, #0]
 800d372:	785b      	ldrb	r3, [r3, #1]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1c9      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d378:	2a00      	cmp	r2, #0
 800d37a:	d1f4      	bne.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d37c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d37e:	e7f2      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d380:	684b      	ldr	r3, [r1, #4]
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	785b      	ldrb	r3, [r3, #1]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1c0      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d38a:	2a00      	cmp	r2, #0
 800d38c:	d1eb      	bne.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d38e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d390:	e7e9      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d392:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d394:	e7e7      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d396:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d398:	e7e5      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d39a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800d39c:	e7e3      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d39e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800d3a0:	e7e1      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d3a2:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800d3a4:	e7df      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d3a6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800d3a8:	e7dd      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d3aa:	2a0b      	cmp	r2, #11
 800d3ac:	d059      	beq.n	800d462 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 800d3ae:	d80e      	bhi.n	800d3ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 800d3b0:	2a03      	cmp	r2, #3
 800d3b2:	d050      	beq.n	800d456 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 800d3b4:	d804      	bhi.n	800d3c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 800d3b6:	2a01      	cmp	r2, #1
 800d3b8:	d04f      	beq.n	800d45a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 800d3ba:	d950      	bls.n	800d45e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 800d3bc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d3be:	e7d2      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d3c0:	2a09      	cmp	r2, #9
 800d3c2:	d04e      	beq.n	800d462 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 800d3c4:	d801      	bhi.n	800d3ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 800d3c6:	2a08      	cmp	r2, #8
 800d3c8:	d1a0      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d3ca:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800d3cc:	e7cb      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d3ce:	2a2f      	cmp	r2, #47	@ 0x2f
 800d3d0:	d02d      	beq.n	800d42e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 800d3d2:	d811      	bhi.n	800d3f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 800d3d4:	2a2d      	cmp	r2, #45	@ 0x2d
 800d3d6:	d018      	beq.n	800d40a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 800d3d8:	d833      	bhi.n	800d442 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 800d3da:	2a2c      	cmp	r2, #44	@ 0x2c
 800d3dc:	d196      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d3de:	684a      	ldr	r2, [r1, #4]
 800d3e0:	7813      	ldrb	r3, [r2, #0]
 800d3e2:	7852      	ldrb	r2, [r2, #1]
 800d3e4:	2a00      	cmp	r2, #0
 800d3e6:	d191      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d01e      	beq.n	800d42a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d030      	beq.n	800d452 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d18b      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d3f4:	6903      	ldr	r3, [r0, #16]
 800d3f6:	e7b6      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d3f8:	2a31      	cmp	r2, #49	@ 0x31
 800d3fa:	d004      	beq.n	800d406 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 800d3fc:	d333      	bcc.n	800d466 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 800d3fe:	2a32      	cmp	r2, #50	@ 0x32
 800d400:	d031      	beq.n	800d466 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 800d402:	2a33      	cmp	r2, #51	@ 0x33
 800d404:	d182      	bne.n	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d406:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800d408:	e7ad      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d40a:	684a      	ldr	r2, [r1, #4]
 800d40c:	7813      	ldrb	r3, [r2, #0]
 800d40e:	7852      	ldrb	r2, [r2, #1]
 800d410:	2a00      	cmp	r2, #0
 800d412:	f47f af7b 	bne.w	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d416:	2b01      	cmp	r3, #1
 800d418:	d005      	beq.n	800d426 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800d41a:	d310      	bcc.n	800d43e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	f47f af75 	bne.w	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d422:	6983      	ldr	r3, [r0, #24]
 800d424:	e79f      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d426:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d428:	e79d      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d42a:	6a03      	ldr	r3, [r0, #32]
 800d42c:	e79b      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d42e:	684b      	ldr	r3, [r1, #4]
 800d430:	781a      	ldrb	r2, [r3, #0]
 800d432:	785b      	ldrb	r3, [r3, #1]
 800d434:	2b00      	cmp	r3, #0
 800d436:	f47f af69 	bne.w	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d43a:	2a00      	cmp	r2, #0
 800d43c:	d193      	bne.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d43e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d440:	e791      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d442:	684b      	ldr	r3, [r1, #4]
 800d444:	781a      	ldrb	r2, [r3, #0]
 800d446:	785b      	ldrb	r3, [r3, #1]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f47f af5f 	bne.w	800d30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d44e:	2a00      	cmp	r2, #0
 800d450:	d189      	bne.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d452:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d454:	e787      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d456:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d458:	e785      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d45a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800d45c:	e783      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d45e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800d460:	e781      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d462:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800d464:	e77f      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d466:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800d468:	e77d      	b.n	800d366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0800d46a <_ZN8touchgfx8LCD16bppD1Ev>:
 800d46a:	4770      	bx	lr

0800d46c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 800d46c:	4770      	bx	lr

0800d46e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 800d46e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	ac08      	add	r4, sp, #32
 800d476:	4606      	mov	r6, r0
 800d478:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 800d47c:	4620      	mov	r0, r4
 800d47e:	4688      	mov	r8, r1
 800d480:	4691      	mov	r9, r2
 800d482:	f7ff fe57 	bl	800d134 <_ZNK8touchgfx6Bitmap7getDataEv>
 800d486:	6833      	ldr	r3, [r6, #0]
 800d488:	4605      	mov	r5, r0
 800d48a:	4620      	mov	r0, r4
 800d48c:	699f      	ldr	r7, [r3, #24]
 800d48e:	f7ff fd5f 	bl	800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d492:	4682      	mov	sl, r0
 800d494:	4620      	mov	r0, r4
 800d496:	f7ff fd8f 	bl	800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d49a:	9500      	str	r5, [sp, #0]
 800d49c:	e9cd a001 	strd	sl, r0, [sp, #4]
 800d4a0:	464b      	mov	r3, r9
 800d4a2:	a806      	add	r0, sp, #24
 800d4a4:	4642      	mov	r2, r8
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	47b8      	blx	r7
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	b008      	add	sp, #32
 800d4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800d4b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 800d4b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	4b3d      	ldr	r3, [pc, #244]	@ (800d5b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d137      	bne.n	800d534 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 800d4c4:	4a3c      	ldr	r2, [pc, #240]	@ (800d5b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800d4c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d4ca:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d132      	bne.n	800d538 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 800d4d2:	4b3a      	ldr	r3, [pc, #232]	@ (800d5bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800d4d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4d8:	6808      	ldr	r0, [r1, #0]
 800d4da:	6849      	ldr	r1, [r1, #4]
 800d4dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d4e0:	ac02      	add	r4, sp, #8
 800d4e2:	ab02      	add	r3, sp, #8
 800d4e4:	c303      	stmia	r3!, {r0, r1}
 800d4e6:	4669      	mov	r1, sp
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f7fc feeb 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800d4ee:	4668      	mov	r0, sp
 800d4f0:	f7fc fec0 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d4f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d4f8:	f8bd 2000 	ldrh.w	r2, [sp]
 800d4fc:	4d30      	ldr	r5, [pc, #192]	@ (800d5c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 800d4fe:	4413      	add	r3, r2
 800d500:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d504:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d508:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d50c:	6828      	ldr	r0, [r5, #0]
 800d50e:	4413      	add	r3, r2
 800d510:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d514:	6803      	ldr	r3, [r0, #0]
 800d516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d518:	4798      	blx	r3
 800d51a:	f010 0f01 	tst.w	r0, #1
 800d51e:	462f      	mov	r7, r5
 800d520:	d00c      	beq.n	800d53c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 800d522:	6828      	ldr	r0, [r5, #0]
 800d524:	6803      	ldr	r3, [r0, #0]
 800d526:	e894 0006 	ldmia.w	r4, {r1, r2}
 800d52a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d52c:	4798      	blx	r3
 800d52e:	b004      	add	sp, #16
 800d530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d534:	4a21      	ldr	r2, [pc, #132]	@ (800d5bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800d536:	e7c6      	b.n	800d4c6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 800d538:	4b1f      	ldr	r3, [pc, #124]	@ (800d5b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800d53a:	e7cb      	b.n	800d4d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 800d53c:	6838      	ldr	r0, [r7, #0]
 800d53e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 800d542:	6803      	ldr	r3, [r0, #0]
 800d544:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 800d548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d54a:	4798      	blx	r3
 800d54c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800d550:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d554:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 800d558:	fb16 3602 	smlabb	r6, r6, r2, r3
 800d55c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800d560:	6838      	ldr	r0, [r7, #0]
 800d562:	6803      	ldr	r3, [r0, #0]
 800d564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d566:	4798      	blx	r3
 800d568:	4a13      	ldr	r2, [pc, #76]	@ (800d5b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800d56a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 800d56e:	8813      	ldrh	r3, [r2, #0]
 800d570:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800d574:	fb03 1404 	mla	r4, r3, r4, r1
 800d578:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800d57c:	435d      	muls	r5, r3
 800d57e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800d582:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d586:	4691      	mov	r9, r2
 800d588:	6838      	ldr	r0, [r7, #0]
 800d58a:	42ac      	cmp	r4, r5
 800d58c:	6803      	ldr	r3, [r0, #0]
 800d58e:	d20e      	bcs.n	800d5ae <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 800d590:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 800d594:	4632      	mov	r2, r6
 800d596:	4643      	mov	r3, r8
 800d598:	4621      	mov	r1, r4
 800d59a:	47d0      	blx	sl
 800d59c:	f8b9 3000 	ldrh.w	r3, [r9]
 800d5a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d5a4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800d5a8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800d5ac:	e7ec      	b.n	800d588 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 800d5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5b0:	4798      	blx	r3
 800d5b2:	e7bc      	b.n	800d52e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 800d5b4:	20012424 	.word	0x20012424
 800d5b8:	20012426 	.word	0x20012426
 800d5bc:	20012428 	.word	0x20012428
 800d5c0:	2001242c 	.word	0x2001242c

0800d5c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 800d5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c8:	b08b      	sub	sp, #44	@ 0x2c
 800d5ca:	460f      	mov	r7, r1
 800d5cc:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 800d5d0:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 800d5d4:	4616      	mov	r6, r2
 800d5d6:	f1bb 0f00 	cmp.w	fp, #0
 800d5da:	d04a      	beq.n	800d672 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800d5dc:	6810      	ldr	r0, [r2, #0]
 800d5de:	6851      	ldr	r1, [r2, #4]
 800d5e0:	ad06      	add	r5, sp, #24
 800d5e2:	c503      	stmia	r5!, {r0, r1}
 800d5e4:	6818      	ldr	r0, [r3, #0]
 800d5e6:	6859      	ldr	r1, [r3, #4]
 800d5e8:	ad08      	add	r5, sp, #32
 800d5ea:	c503      	stmia	r5!, {r0, r1}
 800d5ec:	a806      	add	r0, sp, #24
 800d5ee:	f7fc fe41 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	a808      	add	r0, sp, #32
 800d5f6:	f7fc fe65 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800d5fa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800d5fe:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800d602:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 800d606:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 800d60a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 800d60e:	fb16 2103 	smlabb	r1, r6, r3, r2
 800d612:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 800d616:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800d61a:	4f5f      	ldr	r7, [pc, #380]	@ (800d798 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800d61c:	440a      	add	r2, r1
 800d61e:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d622:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d626:	6838      	ldr	r0, [r7, #0]
 800d628:	4413      	add	r3, r2
 800d62a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800d62e:	6803      	ldr	r3, [r0, #0]
 800d630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d632:	4798      	blx	r3
 800d634:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800d638:	46b9      	mov	r9, r7
 800d63a:	d11d      	bne.n	800d678 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 800d63c:	b9fc      	cbnz	r4, 800d67e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800d63e:	f010 0f01 	tst.w	r0, #1
 800d642:	d01c      	beq.n	800d67e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800d644:	f8d9 0000 	ldr.w	r0, [r9]
 800d648:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800d64c:	6801      	ldr	r1, [r0, #0]
 800d64e:	f8cd b00c 	str.w	fp, [sp, #12]
 800d652:	2700      	movs	r7, #0
 800d654:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800d658:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800d65c:	9402      	str	r4, [sp, #8]
 800d65e:	b2ad      	uxth	r5, r5
 800d660:	fa1f f488 	uxth.w	r4, r8
 800d664:	9501      	str	r5, [sp, #4]
 800d666:	9400      	str	r4, [sp, #0]
 800d668:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 800d66a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d66e:	4631      	mov	r1, r6
 800d670:	47a0      	blx	r4
 800d672:	b00b      	add	sp, #44	@ 0x2c
 800d674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d678:	f010 0f04 	tst.w	r0, #4
 800d67c:	e7e1      	b.n	800d642 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 800d67e:	f8d9 0000 	ldr.w	r0, [r9]
 800d682:	6803      	ldr	r3, [r0, #0]
 800d684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d686:	4798      	blx	r3
 800d688:	4b44      	ldr	r3, [pc, #272]	@ (800d79c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 800d68a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 800d68e:	881a      	ldrh	r2, [r3, #0]
 800d690:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800d694:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800d698:	fb02 1404 	mla	r4, r2, r4, r1
 800d69c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800d6a0:	469a      	mov	sl, r3
 800d6a2:	fb05 f502 	mul.w	r5, r5, r2
 800d6a6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800d6aa:	d059      	beq.n	800d760 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 800d6ac:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 800d6b0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800d6b4:	fa1f f28b 	uxth.w	r2, fp
 800d6b8:	fa1f f989 	uxth.w	r9, r9
 800d6bc:	469e      	mov	lr, r3
 800d6be:	42ac      	cmp	r4, r5
 800d6c0:	d264      	bcs.n	800d78c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800d6c2:	eb04 0a07 	add.w	sl, r4, r7
 800d6c6:	4554      	cmp	r4, sl
 800d6c8:	d23d      	bcs.n	800d746 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 800d6ca:	8821      	ldrh	r1, [r4, #0]
 800d6cc:	f836 3b02 	ldrh.w	r3, [r6], #2
 800d6d0:	1208      	asrs	r0, r1, #8
 800d6d2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800d6d6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800d6da:	fb10 f009 	smulbb	r0, r0, r9
 800d6de:	ea4f 0be1 	mov.w	fp, r1, asr #3
 800d6e2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800d6e6:	00c9      	lsls	r1, r1, #3
 800d6e8:	fb0c 0c02 	mla	ip, ip, r2, r0
 800d6ec:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 800d6f0:	10d8      	asrs	r0, r3, #3
 800d6f2:	b2c9      	uxtb	r1, r1
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	fa1f fc8c 	uxth.w	ip, ip
 800d6fa:	fb1b fb09 	smulbb	fp, fp, r9
 800d6fe:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 800d702:	b2db      	uxtb	r3, r3
 800d704:	fb11 f109 	smulbb	r1, r1, r9
 800d708:	fb00 b002 	mla	r0, r0, r2, fp
 800d70c:	fb03 1302 	mla	r3, r3, r2, r1
 800d710:	f10c 0b01 	add.w	fp, ip, #1
 800d714:	b29b      	uxth	r3, r3
 800d716:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 800d71a:	b280      	uxth	r0, r0
 800d71c:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 800d720:	f103 0c01 	add.w	ip, r3, #1
 800d724:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800d72e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800d732:	0940      	lsrs	r0, r0, #5
 800d734:	ea4c 0c0b 	orr.w	ip, ip, fp
 800d738:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800d73c:	ea4c 0c00 	orr.w	ip, ip, r0
 800d740:	f824 cb02 	strh.w	ip, [r4], #2
 800d744:	e7bf      	b.n	800d6c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 800d746:	f8be 3000 	ldrh.w	r3, [lr]
 800d74a:	eba3 0308 	sub.w	r3, r3, r8
 800d74e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d752:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d756:	eba3 0308 	sub.w	r3, r3, r8
 800d75a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800d75e:	e7ae      	b.n	800d6be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 800d760:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800d764:	f8d9 0000 	ldr.w	r0, [r9]
 800d768:	42ac      	cmp	r4, r5
 800d76a:	6803      	ldr	r3, [r0, #0]
 800d76c:	d20e      	bcs.n	800d78c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800d76e:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 800d772:	4632      	mov	r2, r6
 800d774:	463b      	mov	r3, r7
 800d776:	4621      	mov	r1, r4
 800d778:	47c0      	blx	r8
 800d77a:	f8ba 3000 	ldrh.w	r3, [sl]
 800d77e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d782:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d786:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800d78a:	e7eb      	b.n	800d764 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 800d78c:	4b02      	ldr	r3, [pc, #8]	@ (800d798 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800d78e:	6818      	ldr	r0, [r3, #0]
 800d790:	6803      	ldr	r3, [r0, #0]
 800d792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d794:	4798      	blx	r3
 800d796:	e76c      	b.n	800d672 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800d798:	2001242c 	.word	0x2001242c
 800d79c:	20012426 	.word	0x20012426

0800d7a0 <_ZN8touchgfx8LCD16bppD0Ev>:
 800d7a0:	b510      	push	{r4, lr}
 800d7a2:	218c      	movs	r1, #140	@ 0x8c
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	f002 fa51 	bl	800fc4c <_ZdlPvj>
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	bd10      	pop	{r4, pc}

0800d7ae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 800d7ae:	b510      	push	{r4, lr}
 800d7b0:	2104      	movs	r1, #4
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	f002 fa4a 	bl	800fc4c <_ZdlPvj>
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	bd10      	pop	{r4, pc}

0800d7bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 800d7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c0:	b091      	sub	sp, #68	@ 0x44
 800d7c2:	469b      	mov	fp, r3
 800d7c4:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800d7c8:	4616      	mov	r6, r2
 800d7ca:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 800d7ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d7d2:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 800d7d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d7da:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d7de:	4604      	mov	r4, r0
 800d7e0:	460d      	mov	r5, r1
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	4659      	mov	r1, fp
 800d7e6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d7ea:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 800d7ee:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 800d7f2:	f7fa fd13 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	f7fa fd0f 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800d7fe:	4b74      	ldr	r3, [pc, #464]	@ (800d9d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 800d800:	8818      	ldrh	r0, [r3, #0]
 800d802:	4b74      	ldr	r3, [pc, #464]	@ (800d9d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 800d804:	8819      	ldrh	r1, [r3, #0]
 800d806:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	b202      	sxth	r2, r0
 800d80e:	b20e      	sxth	r6, r1
 800d810:	da07      	bge.n	800d822 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 800d812:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800d816:	4463      	add	r3, ip
 800d818:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d81c:	2300      	movs	r3, #0
 800d81e:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800d822:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800d826:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800d82a:	1ad2      	subs	r2, r2, r3
 800d82c:	4594      	cmp	ip, r2
 800d82e:	bfc4      	itt	gt
 800d830:	1ac2      	subgt	r2, r0, r3
 800d832:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 800d836:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d83a:	2a00      	cmp	r2, #0
 800d83c:	da07      	bge.n	800d84e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 800d83e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 800d842:	4462      	add	r2, ip
 800d844:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800d848:	2200      	movs	r2, #0
 800d84a:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d84e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 800d852:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800d856:	eba6 060a 	sub.w	r6, r6, sl
 800d85a:	42b2      	cmp	r2, r6
 800d85c:	bfc4      	itt	gt
 800d85e:	eba1 020a 	subgt.w	r2, r1, sl
 800d862:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 800d866:	4a5c      	ldr	r2, [pc, #368]	@ (800d9d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 800d868:	7812      	ldrb	r2, [r2, #0]
 800d86a:	b9a2      	cbnz	r2, 800d896 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 800d86c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 800d870:	4286      	cmp	r6, r0
 800d872:	4640      	mov	r0, r8
 800d874:	9303      	str	r3, [sp, #12]
 800d876:	bf14      	ite	ne
 800d878:	2600      	movne	r6, #0
 800d87a:	2601      	moveq	r6, #1
 800d87c:	f7fa fd11 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d880:	9b03      	ldr	r3, [sp, #12]
 800d882:	b160      	cbz	r0, 800d89e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 800d884:	2300      	movs	r3, #0
 800d886:	8023      	strh	r3, [r4, #0]
 800d888:	8063      	strh	r3, [r4, #2]
 800d88a:	80a3      	strh	r3, [r4, #4]
 800d88c:	4620      	mov	r0, r4
 800d88e:	80e3      	strh	r3, [r4, #6]
 800d890:	b011      	add	sp, #68	@ 0x44
 800d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d896:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 800d89a:	428e      	cmp	r6, r1
 800d89c:	e7e9      	b.n	800d872 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 800d89e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800d8a2:	9205      	str	r2, [sp, #20]
 800d8a4:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800d8a8:	9206      	str	r2, [sp, #24]
 800d8aa:	f8bb 2000 	ldrh.w	r2, [fp]
 800d8ae:	900e      	str	r0, [sp, #56]	@ 0x38
 800d8b0:	1a9b      	subs	r3, r3, r2
 800d8b2:	b21b      	sxth	r3, r3
 800d8b4:	9303      	str	r3, [sp, #12]
 800d8b6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800d8ba:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 800d8be:	ebaa 0a03 	sub.w	sl, sl, r3
 800d8c2:	fa0f f38a 	sxth.w	r3, sl
 800d8c6:	9304      	str	r3, [sp, #16]
 800d8c8:	9b03      	ldr	r3, [sp, #12]
 800d8ca:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800d8ce:	9b04      	ldr	r3, [sp, #16]
 800d8d0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800d8d4:	9b05      	ldr	r3, [sp, #20]
 800d8d6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800d8da:	a90e      	add	r1, sp, #56	@ 0x38
 800d8dc:	9b06      	ldr	r3, [sp, #24]
 800d8de:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800d8e2:	a80c      	add	r0, sp, #48	@ 0x30
 800d8e4:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 800d8e8:	f7fc fcec 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800d8ec:	4640      	mov	r0, r8
 800d8ee:	f7fc fcc1 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d8f2:	a80e      	add	r0, sp, #56	@ 0x38
 800d8f4:	f7fc fcbe 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d8f8:	4b38      	ldr	r3, [pc, #224]	@ (800d9dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 800d8fa:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	9307      	str	r3, [sp, #28]
 800d902:	682b      	ldr	r3, [r5, #0]
 800d904:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 800d9e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800d908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d90a:	4628      	mov	r0, r5
 800d90c:	4798      	blx	r3
 800d90e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 800d912:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d916:	4681      	mov	r9, r0
 800d918:	fb1a 3305 	smlabb	r3, sl, r5, r3
 800d91c:	f8db 0000 	ldr.w	r0, [fp]
 800d920:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800d922:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800d926:	6803      	ldr	r3, [r0, #0]
 800d928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d92a:	4798      	blx	r3
 800d92c:	4607      	mov	r7, r0
 800d92e:	f8db 0000 	ldr.w	r0, [fp]
 800d932:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800d936:	6803      	ldr	r3, [r0, #0]
 800d938:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d93c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d93e:	9208      	str	r2, [sp, #32]
 800d940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d942:	4798      	blx	r3
 800d944:	f010 0f01 	tst.w	r0, #1
 800d948:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800d94c:	d012      	beq.n	800d974 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 800d94e:	f8db 0000 	ldr.w	r0, [fp]
 800d952:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 800d956:	6803      	ldr	r3, [r0, #0]
 800d958:	9200      	str	r2, [sp, #0]
 800d95a:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800d95c:	e898 0006 	ldmia.w	r8, {r1, r2}
 800d960:	462b      	mov	r3, r5
 800d962:	47b0      	blx	r6
 800d964:	9b03      	ldr	r3, [sp, #12]
 800d966:	8023      	strh	r3, [r4, #0]
 800d968:	9b04      	ldr	r3, [sp, #16]
 800d96a:	8063      	strh	r3, [r4, #2]
 800d96c:	9b05      	ldr	r3, [sp, #20]
 800d96e:	80a3      	strh	r3, [r4, #4]
 800d970:	9b06      	ldr	r3, [sp, #24]
 800d972:	e78b      	b.n	800d88c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 800d974:	fb09 f202 	mul.w	r2, r9, r2
 800d978:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d97c:	440f      	add	r7, r1
 800d97e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 800d982:	b166      	cbz	r6, 800d99e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800d984:	9a07      	ldr	r2, [sp, #28]
 800d986:	4592      	cmp	sl, r2
 800d988:	d109      	bne.n	800d99e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800d98a:	f8db 0000 	ldr.w	r0, [fp]
 800d98e:	6802      	ldr	r2, [r0, #0]
 800d990:	fb09 f303 	mul.w	r3, r9, r3
 800d994:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 800d996:	4629      	mov	r1, r5
 800d998:	463a      	mov	r2, r7
 800d99a:	47b0      	blx	r6
 800d99c:	e7e2      	b.n	800d964 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800d99e:	fb0a f303 	mul.w	r3, sl, r3
 800d9a2:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 800d9e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800d9a6:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 800d9aa:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800d9ae:	4545      	cmp	r5, r8
 800d9b0:	d2d8      	bcs.n	800d964 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800d9b2:	f8db 0000 	ldr.w	r0, [fp]
 800d9b6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800d9ba:	6802      	ldr	r2, [r0, #0]
 800d9bc:	4629      	mov	r1, r5
 800d9be:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	463a      	mov	r2, r7
 800d9c6:	47d0      	blx	sl
 800d9c8:	444f      	add	r7, r9
 800d9ca:	4435      	add	r5, r6
 800d9cc:	e7ef      	b.n	800d9ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 800d9ce:	bf00      	nop
 800d9d0:	20012420 	.word	0x20012420
 800d9d4:	20012422 	.word	0x20012422
 800d9d8:	20012424 	.word	0x20012424
 800d9dc:	20012426 	.word	0x20012426
 800d9e0:	2001242c 	.word	0x2001242c

0800d9e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 800d9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	b087      	sub	sp, #28
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	4617      	mov	r7, r2
 800d9ee:	461d      	mov	r5, r3
 800d9f0:	b333      	cbz	r3, 800da40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800d9f2:	4608      	mov	r0, r1
 800d9f4:	f7fa fc55 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9f8:	bb10      	cbnz	r0, 800da40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800d9fa:	6820      	ldr	r0, [r4, #0]
 800d9fc:	6861      	ldr	r1, [r4, #4]
 800d9fe:	4c1c      	ldr	r4, [pc, #112]	@ (800da70 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 800da00:	ab04      	add	r3, sp, #16
 800da02:	c303      	stmia	r3!, {r0, r1}
 800da04:	a804      	add	r0, sp, #16
 800da06:	f7fc fc35 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800da0a:	6820      	ldr	r0, [r4, #0]
 800da0c:	6803      	ldr	r3, [r0, #0]
 800da0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da10:	4798      	blx	r3
 800da12:	2dff      	cmp	r5, #255	@ 0xff
 800da14:	d016      	beq.n	800da44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 800da16:	f010 0f08 	tst.w	r0, #8
 800da1a:	6820      	ldr	r0, [r4, #0]
 800da1c:	d015      	beq.n	800da4a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 800da1e:	2400      	movs	r4, #0
 800da20:	6801      	ldr	r1, [r0, #0]
 800da22:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800da26:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800da2a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800da2e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 800da32:	9401      	str	r4, [sp, #4]
 800da34:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800da38:	9400      	str	r4, [sp, #0]
 800da3a:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 800da3c:	4639      	mov	r1, r7
 800da3e:	47a0      	blx	r4
 800da40:	b007      	add	sp, #28
 800da42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da44:	f010 0f02 	tst.w	r0, #2
 800da48:	e7e7      	b.n	800da1a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 800da4a:	6803      	ldr	r3, [r0, #0]
 800da4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da4e:	4798      	blx	r3
 800da50:	4b08      	ldr	r3, [pc, #32]	@ (800da74 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 800da52:	881a      	ldrh	r2, [r3, #0]
 800da54:	6833      	ldr	r3, [r6, #0]
 800da56:	e9cd 7500 	strd	r7, r5, [sp]
 800da5a:	4601      	mov	r1, r0
 800da5c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800da5e:	4630      	mov	r0, r6
 800da60:	ab04      	add	r3, sp, #16
 800da62:	47a8      	blx	r5
 800da64:	6820      	ldr	r0, [r4, #0]
 800da66:	6803      	ldr	r3, [r0, #0]
 800da68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da6a:	4798      	blx	r3
 800da6c:	e7e8      	b.n	800da40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800da6e:	bf00      	nop
 800da70:	2001242c 	.word	0x2001242c
 800da74:	20012426 	.word	0x20012426

0800da78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 800da78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da7c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 800da80:	9e08      	ldr	r6, [sp, #32]
 800da82:	4688      	mov	r8, r1
 800da84:	4614      	mov	r4, r2
 800da86:	461d      	mov	r5, r3
 800da88:	2f00      	cmp	r7, #0
 800da8a:	f000 80a9 	beq.w	800dbe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fa fc07 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800da94:	2800      	cmp	r0, #0
 800da96:	f040 80a3 	bne.w	800dbe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800da9a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800da9e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800daa2:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800daa6:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800daaa:	fb04 1303 	mla	r3, r4, r3, r1
 800daae:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 800dab2:	4365      	muls	r5, r4
 800dab4:	2fff      	cmp	r7, #255	@ 0xff
 800dab6:	eba4 0200 	sub.w	r2, r4, r0
 800daba:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800dabe:	ea4f 2816 	mov.w	r8, r6, lsr #8
 800dac2:	d04a      	beq.n	800db5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 800dac4:	b2bc      	uxth	r4, r7
 800dac6:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 800daca:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800dace:	fa5f f788 	uxtb.w	r7, r8
 800dad2:	b2f3      	uxtb	r3, r6
 800dad4:	0040      	lsls	r0, r0, #1
 800dad6:	fb0e fe04 	mul.w	lr, lr, r4
 800dada:	4367      	muls	r7, r4
 800dadc:	4363      	muls	r3, r4
 800dade:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800dae2:	fa1f fc8c 	uxth.w	ip, ip
 800dae6:	42a9      	cmp	r1, r5
 800dae8:	d27a      	bcs.n	800dbe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800daea:	eb01 0900 	add.w	r9, r1, r0
 800daee:	4549      	cmp	r1, r9
 800daf0:	d231      	bcs.n	800db56 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 800daf2:	880a      	ldrh	r2, [r1, #0]
 800daf4:	1214      	asrs	r4, r2, #8
 800daf6:	10d6      	asrs	r6, r2, #3
 800daf8:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800dafc:	00d2      	lsls	r2, r2, #3
 800dafe:	b2d2      	uxtb	r2, r2
 800db00:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800db04:	fb14 f40c 	smulbb	r4, r4, ip
 800db08:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800db0c:	4474      	add	r4, lr
 800db0e:	fb12 f20c 	smulbb	r2, r2, ip
 800db12:	b2a4      	uxth	r4, r4
 800db14:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800db18:	441a      	add	r2, r3
 800db1a:	b292      	uxth	r2, r2
 800db1c:	f104 0a01 	add.w	sl, r4, #1
 800db20:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 800db24:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 800db28:	fb16 f60c 	smulbb	r6, r6, ip
 800db2c:	f102 0a01 	add.w	sl, r2, #1
 800db30:	443e      	add	r6, r7
 800db32:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 800db36:	b2b6      	uxth	r6, r6
 800db38:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 800db3c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800db40:	4322      	orrs	r2, r4
 800db42:	1c74      	adds	r4, r6, #1
 800db44:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 800db48:	0976      	lsrs	r6, r6, #5
 800db4a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800db4e:	4332      	orrs	r2, r6
 800db50:	f821 2b02 	strh.w	r2, [r1], #2
 800db54:	e7cb      	b.n	800daee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 800db56:	4441      	add	r1, r8
 800db58:	e7c5      	b.n	800dae6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 800db5a:	4f22      	ldr	r7, [pc, #136]	@ (800dbe4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 800db5c:	0973      	lsrs	r3, r6, #5
 800db5e:	ea08 0707 	and.w	r7, r8, r7
 800db62:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800db66:	433b      	orrs	r3, r7
 800db68:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800db6c:	4333      	orrs	r3, r6
 800db6e:	07e7      	lsls	r7, r4, #31
 800db70:	b29b      	uxth	r3, r3
 800db72:	d50b      	bpl.n	800db8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 800db74:	0040      	lsls	r0, r0, #1
 800db76:	0052      	lsls	r2, r2, #1
 800db78:	42a9      	cmp	r1, r5
 800db7a:	d231      	bcs.n	800dbe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800db7c:	180c      	adds	r4, r1, r0
 800db7e:	42a1      	cmp	r1, r4
 800db80:	d202      	bcs.n	800db88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 800db82:	f821 3b02 	strh.w	r3, [r1], #2
 800db86:	e7fa      	b.n	800db7e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 800db88:	4411      	add	r1, r2
 800db8a:	e7f5      	b.n	800db78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 800db8c:	078e      	lsls	r6, r1, #30
 800db8e:	d008      	beq.n	800dba2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 800db90:	0066      	lsls	r6, r4, #1
 800db92:	460a      	mov	r2, r1
 800db94:	42aa      	cmp	r2, r5
 800db96:	d202      	bcs.n	800db9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 800db98:	8013      	strh	r3, [r2, #0]
 800db9a:	4432      	add	r2, r6
 800db9c:	e7fa      	b.n	800db94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 800db9e:	3102      	adds	r1, #2
 800dba0:	3801      	subs	r0, #1
 800dba2:	07c2      	lsls	r2, r0, #31
 800dba4:	d50b      	bpl.n	800dbbe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800dba6:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 800dbaa:	3a01      	subs	r2, #1
 800dbac:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800dbb0:	0066      	lsls	r6, r4, #1
 800dbb2:	42aa      	cmp	r2, r5
 800dbb4:	d202      	bcs.n	800dbbc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 800dbb6:	8013      	strh	r3, [r2, #0]
 800dbb8:	4432      	add	r2, r6
 800dbba:	e7fa      	b.n	800dbb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 800dbbc:	3801      	subs	r0, #1
 800dbbe:	b178      	cbz	r0, 800dbe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800dbc0:	1040      	asrs	r0, r0, #1
 800dbc2:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 800dbc6:	0080      	lsls	r0, r0, #2
 800dbc8:	0064      	lsls	r4, r4, #1
 800dbca:	42a9      	cmp	r1, r5
 800dbcc:	d208      	bcs.n	800dbe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800dbce:	180e      	adds	r6, r1, r0
 800dbd0:	460a      	mov	r2, r1
 800dbd2:	42b2      	cmp	r2, r6
 800dbd4:	d202      	bcs.n	800dbdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 800dbd6:	f842 3b04 	str.w	r3, [r2], #4
 800dbda:	e7fa      	b.n	800dbd2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 800dbdc:	4421      	add	r1, r4
 800dbde:	e7f4      	b.n	800dbca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 800dbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe4:	00fff800 	.word	0x00fff800

0800dbe8 <_ZN8touchgfx8LCD16bppC1Ev>:
 800dbe8:	2200      	movs	r2, #0
 800dbea:	4912      	ldr	r1, [pc, #72]	@ (800dc34 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 800dbec:	6001      	str	r1, [r0, #0]
 800dbee:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800dbf2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800dbf6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800dbfa:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800dbfe:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 800dc02:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800dc06:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 800dc0a:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 800dc0e:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 800dc12:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 800dc16:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 800dc1a:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 800dc1e:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 800dc22:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 800dc26:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 800dc2a:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 800dc2e:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 800dc32:	4770      	bx	lr
 800dc34:	080122e8 	.word	0x080122e8

0800dc38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 800dc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	b08d      	sub	sp, #52	@ 0x34
 800dc40:	4604      	mov	r4, r0
 800dc42:	6808      	ldr	r0, [r1, #0]
 800dc44:	6849      	ldr	r1, [r1, #4]
 800dc46:	4699      	mov	r9, r3
 800dc48:	ab08      	add	r3, sp, #32
 800dc4a:	c303      	stmia	r3!, {r0, r1}
 800dc4c:	6810      	ldr	r0, [r2, #0]
 800dc4e:	6851      	ldr	r1, [r2, #4]
 800dc50:	ab0a      	add	r3, sp, #40	@ 0x28
 800dc52:	c303      	stmia	r3!, {r0, r1}
 800dc54:	a808      	add	r0, sp, #32
 800dc56:	f7fc fb0d 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	a80a      	add	r0, sp, #40	@ 0x28
 800dc5e:	f7fc fb31 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800dc62:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 800dc66:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 800dc6a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800dc6e:	4d63      	ldr	r5, [pc, #396]	@ (800ddfc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800dc70:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 800dc74:	6828      	ldr	r0, [r5, #0]
 800dc76:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 800dc7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 800dc7e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800dc82:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800dc86:	440a      	add	r2, r1
 800dc88:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800dc8c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800dc90:	4413      	add	r3, r2
 800dc92:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800dc96:	6803      	ldr	r3, [r0, #0]
 800dc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc9a:	4798      	blx	r3
 800dc9c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800dca0:	d119      	bne.n	800dcd6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 800dca2:	f010 0f20 	tst.w	r0, #32
 800dca6:	6828      	ldr	r0, [r5, #0]
 800dca8:	d018      	beq.n	800dcdc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 800dcaa:	2500      	movs	r5, #0
 800dcac:	6801      	ldr	r1, [r0, #0]
 800dcae:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800dcb2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800dcb6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 800dcba:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 800dcbe:	9502      	str	r5, [sp, #8]
 800dcc0:	b2b6      	uxth	r6, r6
 800dcc2:	fa1f f588 	uxth.w	r5, r8
 800dcc6:	9601      	str	r6, [sp, #4]
 800dcc8:	9500      	str	r5, [sp, #0]
 800dcca:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 800dccc:	4621      	mov	r1, r4
 800dcce:	47a8      	blx	r5
 800dcd0:	b00d      	add	sp, #52	@ 0x34
 800dcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd6:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800dcda:	e7e4      	b.n	800dca6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 800dcdc:	6803      	ldr	r3, [r0, #0]
 800dcde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dce0:	4798      	blx	r3
 800dce2:	4947      	ldr	r1, [pc, #284]	@ (800de00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 800dce4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800dce8:	880b      	ldrh	r3, [r1, #0]
 800dcea:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 800dcee:	fb03 5202 	mla	r2, r3, r2, r5
 800dcf2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800dcf6:	4373      	muls	r3, r6
 800dcf8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800dcfc:	9307      	str	r3, [sp, #28]
 800dcfe:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800dd02:	9306      	str	r3, [sp, #24]
 800dd04:	468a      	mov	sl, r1
 800dd06:	9b07      	ldr	r3, [sp, #28]
 800dd08:	4298      	cmp	r0, r3
 800dd0a:	d270      	bcs.n	800ddee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 800dd0c:	9b06      	ldr	r3, [sp, #24]
 800dd0e:	4621      	mov	r1, r4
 800dd10:	eb00 0b03 	add.w	fp, r0, r3
 800dd14:	4558      	cmp	r0, fp
 800dd16:	d25d      	bcs.n	800ddd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 800dd18:	f851 4b04 	ldr.w	r4, [r1], #4
 800dd1c:	0e23      	lsrs	r3, r4, #24
 800dd1e:	d014      	beq.n	800dd4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800dd20:	2bff      	cmp	r3, #255	@ 0xff
 800dd22:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800dd26:	d112      	bne.n	800dd4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800dd28:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800dd2c:	d10f      	bne.n	800dd4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800dd2e:	0963      	lsrs	r3, r4, #5
 800dd30:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 800dd34:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800dd38:	f02c 0c07 	bic.w	ip, ip, #7
 800dd3c:	ea43 0c0c 	orr.w	ip, r3, ip
 800dd40:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 800dd44:	ea4c 0404 	orr.w	r4, ip, r4
 800dd48:	8004      	strh	r4, [r0, #0]
 800dd4a:	3002      	adds	r0, #2
 800dd4c:	e7e2      	b.n	800dd14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 800dd4e:	fb09 f303 	mul.w	r3, r9, r3
 800dd52:	8807      	ldrh	r7, [r0, #0]
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	eb02 2223 	add.w	r2, r2, r3, asr #8
 800dd5a:	1212      	asrs	r2, r2, #8
 800dd5c:	123e      	asrs	r6, r7, #8
 800dd5e:	b293      	uxth	r3, r2
 800dd60:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 800dd64:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 800dd68:	43d2      	mvns	r2, r2
 800dd6a:	b2d2      	uxtb	r2, r2
 800dd6c:	10fd      	asrs	r5, r7, #3
 800dd6e:	fb1e fe03 	smulbb	lr, lr, r3
 800dd72:	00ff      	lsls	r7, r7, #3
 800dd74:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 800dd78:	fb06 e602 	mla	r6, r6, r2, lr
 800dd7c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800dd80:	b2ff      	uxtb	r7, r7
 800dd82:	fa5f fc8c 	uxtb.w	ip, ip
 800dd86:	b2e4      	uxtb	r4, r4
 800dd88:	b2b6      	uxth	r6, r6
 800dd8a:	fb1c fc03 	smulbb	ip, ip, r3
 800dd8e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 800dd92:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 800dd96:	fb14 f403 	smulbb	r4, r4, r3
 800dd9a:	fb05 c502 	mla	r5, r5, r2, ip
 800dd9e:	f106 0e01 	add.w	lr, r6, #1
 800dda2:	fb07 4702 	mla	r7, r7, r2, r4
 800dda6:	b2ad      	uxth	r5, r5
 800dda8:	b2bf      	uxth	r7, r7
 800ddaa:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 800ddae:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 800ddb2:	f105 0c01 	add.w	ip, r5, #1
 800ddb6:	1c7e      	adds	r6, r7, #1
 800ddb8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 800ddbc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 800ddc0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 800ddc4:	096d      	lsrs	r5, r5, #5
 800ddc6:	ea46 060e 	orr.w	r6, r6, lr
 800ddca:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800ddce:	432e      	orrs	r6, r5
 800ddd0:	8006      	strh	r6, [r0, #0]
 800ddd2:	e7ba      	b.n	800dd4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800ddd4:	f8ba 3000 	ldrh.w	r3, [sl]
 800ddd8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 800dddc:	eba3 0308 	sub.w	r3, r3, r8
 800dde0:	eba4 0408 	sub.w	r4, r4, r8
 800dde4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800dde8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800ddec:	e78b      	b.n	800dd06 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 800ddee:	4b03      	ldr	r3, [pc, #12]	@ (800ddfc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800ddf0:	6818      	ldr	r0, [r3, #0]
 800ddf2:	6803      	ldr	r3, [r0, #0]
 800ddf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddf6:	4798      	blx	r3
 800ddf8:	e76a      	b.n	800dcd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 800ddfa:	bf00      	nop
 800ddfc:	2001242c 	.word	0x2001242c
 800de00:	20012426 	.word	0x20012426

0800de04 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 800de04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de08:	460c      	mov	r4, r1
 800de0a:	b085      	sub	sp, #20
 800de0c:	6810      	ldr	r0, [r2, #0]
 800de0e:	6851      	ldr	r1, [r2, #4]
 800de10:	466d      	mov	r5, sp
 800de12:	c503      	stmia	r5!, {r0, r1}
 800de14:	6818      	ldr	r0, [r3, #0]
 800de16:	6859      	ldr	r1, [r3, #4]
 800de18:	4616      	mov	r6, r2
 800de1a:	c503      	stmia	r5!, {r0, r1}
 800de1c:	4668      	mov	r0, sp
 800de1e:	f7fc fa29 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800de22:	4631      	mov	r1, r6
 800de24:	a802      	add	r0, sp, #8
 800de26:	f7fc fa4d 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800de2a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800de2e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800de32:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800de36:	4d28      	ldr	r5, [pc, #160]	@ (800ded8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 800de38:	4e28      	ldr	r6, [pc, #160]	@ (800dedc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 800de3a:	6828      	ldr	r0, [r5, #0]
 800de3c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800de40:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 800de44:	fb11 2103 	smlabb	r1, r1, r3, r2
 800de48:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800de4c:	f8bd 1000 	ldrh.w	r1, [sp]
 800de50:	440a      	add	r2, r1
 800de52:	f8ad 2008 	strh.w	r2, [sp, #8]
 800de56:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800de5a:	4413      	add	r3, r2
 800de5c:	f8ad 300a 	strh.w	r3, [sp, #10]
 800de60:	6803      	ldr	r3, [r0, #0]
 800de62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de64:	4798      	blx	r3
 800de66:	8833      	ldrh	r3, [r6, #0]
 800de68:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800de6c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800de70:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 800dee0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 800de74:	fb03 1202 	mla	r2, r3, r2, r1
 800de78:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800de7c:	fb08 f303 	mul.w	r3, r8, r3
 800de80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800de84:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 800de88:	4298      	cmp	r0, r3
 800de8a:	d21d      	bcs.n	800dec8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 800de8c:	eb00 080c 	add.w	r8, r0, ip
 800de90:	4540      	cmp	r0, r8
 800de92:	d20f      	bcs.n	800deb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 800de94:	f854 1b04 	ldr.w	r1, [r4], #4
 800de98:	ea4f 1951 	mov.w	r9, r1, lsr #5
 800de9c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 800dea0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 800dea4:	ea42 0209 	orr.w	r2, r2, r9
 800dea8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800deac:	430a      	orrs	r2, r1
 800deae:	f820 2b02 	strh.w	r2, [r0], #2
 800deb2:	e7ed      	b.n	800de90 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 800deb4:	8832      	ldrh	r2, [r6, #0]
 800deb6:	1bd2      	subs	r2, r2, r7
 800deb8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800debc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800dec0:	1bd2      	subs	r2, r2, r7
 800dec2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800dec6:	e7df      	b.n	800de88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 800dec8:	6828      	ldr	r0, [r5, #0]
 800deca:	6803      	ldr	r3, [r0, #0]
 800decc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dece:	4798      	blx	r3
 800ded0:	b005      	add	sp, #20
 800ded2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ded6:	bf00      	nop
 800ded8:	2001242c 	.word	0x2001242c
 800dedc:	20012426 	.word	0x20012426
 800dee0:	fffff800 	.word	0xfffff800

0800dee4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 800dee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee8:	460e      	mov	r6, r1
 800deea:	b08e      	sub	sp, #56	@ 0x38
 800deec:	4604      	mov	r4, r0
 800deee:	6808      	ldr	r0, [r1, #0]
 800def0:	6849      	ldr	r1, [r1, #4]
 800def2:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 800e0cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 800def6:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 800e0d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 800defa:	461d      	mov	r5, r3
 800defc:	ab0a      	add	r3, sp, #40	@ 0x28
 800defe:	c303      	stmia	r3!, {r0, r1}
 800df00:	6810      	ldr	r0, [r2, #0]
 800df02:	6851      	ldr	r1, [r2, #4]
 800df04:	ab0c      	add	r3, sp, #48	@ 0x30
 800df06:	c303      	stmia	r3!, {r0, r1}
 800df08:	a80a      	add	r0, sp, #40	@ 0x28
 800df0a:	f7fc f9b3 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800df0e:	4631      	mov	r1, r6
 800df10:	a80c      	add	r0, sp, #48	@ 0x30
 800df12:	f7fc f9d7 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800df16:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800df1a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800df1e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800df22:	f8d8 0000 	ldr.w	r0, [r8]
 800df26:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 800df2a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 800df2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 800df32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800df36:	440c      	add	r4, r1
 800df38:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 800df3c:	440a      	add	r2, r1
 800df3e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800df42:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 800df46:	4413      	add	r3, r2
 800df48:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800df4c:	6803      	ldr	r3, [r0, #0]
 800df4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df50:	4798      	blx	r3
 800df52:	2dff      	cmp	r5, #255	@ 0xff
 800df54:	d124      	bne.n	800dfa0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 800df56:	f010 0f01 	tst.w	r0, #1
 800df5a:	f8d8 0000 	ldr.w	r0, [r8]
 800df5e:	d022      	beq.n	800dfa6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 800df60:	2100      	movs	r1, #0
 800df62:	f8d0 c000 	ldr.w	ip, [r0]
 800df66:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800df6a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800df6e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800df72:	f04f 0e01 	mov.w	lr, #1
 800df76:	f8cd e018 	str.w	lr, [sp, #24]
 800df7a:	f8b9 e000 	ldrh.w	lr, [r9]
 800df7e:	9503      	str	r5, [sp, #12]
 800df80:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 800df84:	b2b6      	uxth	r6, r6
 800df86:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800df8a:	9102      	str	r1, [sp, #8]
 800df8c:	b2bf      	uxth	r7, r7
 800df8e:	9601      	str	r6, [sp, #4]
 800df90:	9700      	str	r7, [sp, #0]
 800df92:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 800df96:	4621      	mov	r1, r4
 800df98:	47a8      	blx	r5
 800df9a:	b00e      	add	sp, #56	@ 0x38
 800df9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfa0:	f010 0f04 	tst.w	r0, #4
 800dfa4:	e7d9      	b.n	800df5a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 800dfa6:	6803      	ldr	r3, [r0, #0]
 800dfa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfaa:	4798      	blx	r3
 800dfac:	f8b9 3000 	ldrh.w	r3, [r9]
 800dfb0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 800dfb4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 800dfb8:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800dfbc:	fb03 1202 	mla	r2, r3, r2, r1
 800dfc0:	ebac 0c07 	sub.w	ip, ip, r7
 800dfc4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800dfc8:	435e      	muls	r6, r3
 800dfca:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 800dfce:	2dff      	cmp	r5, #255	@ 0xff
 800dfd0:	eba3 0707 	sub.w	r7, r3, r7
 800dfd4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800dfd8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800dfdc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 800dfe0:	d049      	beq.n	800e076 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 800dfe2:	43eb      	mvns	r3, r5
 800dfe4:	fa1f f985 	uxth.w	r9, r5
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	42b0      	cmp	r0, r6
 800dfec:	d266      	bcs.n	800e0bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 800dfee:	eb00 0a0e 	add.w	sl, r0, lr
 800dff2:	4550      	cmp	r0, sl
 800dff4:	4621      	mov	r1, r4
 800dff6:	f104 0403 	add.w	r4, r4, #3
 800dffa:	d25b      	bcs.n	800e0b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 800dffc:	8802      	ldrh	r2, [r0, #0]
 800dffe:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e002:	ea4f 2822 	mov.w	r8, r2, asr #8
 800e006:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 800e00a:	fb11 f109 	smulbb	r1, r1, r9
 800e00e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 800e012:	10d5      	asrs	r5, r2, #3
 800e014:	fb08 1803 	mla	r8, r8, r3, r1
 800e018:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800e01c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800e020:	fb11 f109 	smulbb	r1, r1, r9
 800e024:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 800e028:	fb05 1503 	mla	r5, r5, r3, r1
 800e02c:	00d2      	lsls	r2, r2, #3
 800e02e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e032:	b2d2      	uxtb	r2, r2
 800e034:	fb11 f109 	smulbb	r1, r1, r9
 800e038:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800e03c:	fa1f f888 	uxth.w	r8, r8
 800e040:	fb02 1203 	mla	r2, r2, r3, r1
 800e044:	b292      	uxth	r2, r2
 800e046:	f108 0101 	add.w	r1, r8, #1
 800e04a:	b2ad      	uxth	r5, r5
 800e04c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 800e050:	1c51      	adds	r1, r2, #1
 800e052:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800e056:	1c69      	adds	r1, r5, #1
 800e058:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 800e05c:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 800e060:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800e064:	096d      	lsrs	r5, r5, #5
 800e066:	ea42 0208 	orr.w	r2, r2, r8
 800e06a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800e06e:	432a      	orrs	r2, r5
 800e070:	f820 2b02 	strh.w	r2, [r0], #2
 800e074:	e7bd      	b.n	800dff2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 800e076:	4a14      	ldr	r2, [pc, #80]	@ (800e0c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 800e078:	42b0      	cmp	r0, r6
 800e07a:	d21f      	bcs.n	800e0bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 800e07c:	eb00 050e 	add.w	r5, r0, lr
 800e080:	42a8      	cmp	r0, r5
 800e082:	4621      	mov	r1, r4
 800e084:	f104 0403 	add.w	r4, r4, #3
 800e088:	d210      	bcs.n	800e0ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 800e08a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800e08e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e092:	00db      	lsls	r3, r3, #3
 800e094:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 800e098:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800e09c:	430b      	orrs	r3, r1
 800e09e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e0a2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 800e0a6:	f820 3b02 	strh.w	r3, [r0], #2
 800e0aa:	e7e9      	b.n	800e080 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 800e0ac:	4438      	add	r0, r7
 800e0ae:	eb01 040c 	add.w	r4, r1, ip
 800e0b2:	e7e1      	b.n	800e078 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 800e0b4:	4438      	add	r0, r7
 800e0b6:	eb01 040c 	add.w	r4, r1, ip
 800e0ba:	e796      	b.n	800dfea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 800e0bc:	4b03      	ldr	r3, [pc, #12]	@ (800e0cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 800e0be:	6818      	ldr	r0, [r3, #0]
 800e0c0:	6803      	ldr	r3, [r0, #0]
 800e0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c4:	4798      	blx	r3
 800e0c6:	e768      	b.n	800df9a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 800e0c8:	fffff800 	.word	0xfffff800
 800e0cc:	2001242c 	.word	0x2001242c
 800e0d0:	20012426 	.word	0x20012426

0800e0d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 800e0d4:	b4f0      	push	{r4, r5, r6, r7}
 800e0d6:	4616      	mov	r6, r2
 800e0d8:	2e01      	cmp	r6, #1
 800e0da:	461c      	mov	r4, r3
 800e0dc:	460d      	mov	r5, r1
 800e0de:	9a04      	ldr	r2, [sp, #16]
 800e0e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e0e4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e0e8:	d012      	beq.n	800e110 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 800e0ea:	d303      	bcc.n	800e0f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 800e0ec:	2e02      	cmp	r6, #2
 800e0ee:	d00a      	beq.n	800e106 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 800e0f0:	bcf0      	pop	{r4, r5, r6, r7}
 800e0f2:	4770      	bx	lr
 800e0f4:	6805      	ldr	r5, [r0, #0]
 800e0f6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 800e0fa:	68ed      	ldr	r5, [r5, #12]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	46ac      	mov	ip, r5
 800e100:	4622      	mov	r2, r4
 800e102:	bcf0      	pop	{r4, r5, r6, r7}
 800e104:	4760      	bx	ip
 800e106:	4621      	mov	r1, r4
 800e108:	4628      	mov	r0, r5
 800e10a:	bcf0      	pop	{r4, r5, r6, r7}
 800e10c:	f7ff bd94 	b.w	800dc38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800e110:	4621      	mov	r1, r4
 800e112:	4628      	mov	r0, r5
 800e114:	bcf0      	pop	{r4, r5, r6, r7}
 800e116:	f7ff bee5 	b.w	800dee4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0800e11c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 800e11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e120:	4681      	mov	r9, r0
 800e122:	b093      	sub	sp, #76	@ 0x4c
 800e124:	6810      	ldr	r0, [r2, #0]
 800e126:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 800e12a:	4f6d      	ldr	r7, [pc, #436]	@ (800e2e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 800e12c:	4688      	mov	r8, r1
 800e12e:	6851      	ldr	r1, [r2, #4]
 800e130:	ac0e      	add	r4, sp, #56	@ 0x38
 800e132:	c403      	stmia	r4!, {r0, r1}
 800e134:	6818      	ldr	r0, [r3, #0]
 800e136:	6859      	ldr	r1, [r3, #4]
 800e138:	ac10      	add	r4, sp, #64	@ 0x40
 800e13a:	4616      	mov	r6, r2
 800e13c:	c403      	stmia	r4!, {r0, r1}
 800e13e:	a80e      	add	r0, sp, #56	@ 0x38
 800e140:	f7fc f898 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e144:	4631      	mov	r1, r6
 800e146:	a810      	add	r0, sp, #64	@ 0x40
 800e148:	f7fc f8bc 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e14c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 800e150:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 800e154:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 800e158:	4e62      	ldr	r6, [pc, #392]	@ (800e2e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800e15a:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 800e15e:	6830      	ldr	r0, [r6, #0]
 800e160:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 800e164:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e168:	4489      	add	r9, r1
 800e16a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 800e16e:	440a      	add	r2, r1
 800e170:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e174:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 800e178:	4413      	add	r3, r2
 800e17a:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 800e17e:	6803      	ldr	r3, [r0, #0]
 800e180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e182:	4798      	blx	r3
 800e184:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800e188:	6830      	ldr	r0, [r6, #0]
 800e18a:	d01d      	beq.n	800e1c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 800e18c:	2200      	movs	r2, #0
 800e18e:	6801      	ldr	r1, [r0, #0]
 800e190:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e194:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800e198:	220b      	movs	r2, #11
 800e19a:	9207      	str	r2, [sp, #28]
 800e19c:	883a      	ldrh	r2, [r7, #0]
 800e19e:	9206      	str	r2, [sp, #24]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	e9cd a204 	strd	sl, r2, [sp, #16]
 800e1a6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 800e1aa:	9203      	str	r2, [sp, #12]
 800e1ac:	b2a4      	uxth	r4, r4
 800e1ae:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e1b2:	9200      	str	r2, [sp, #0]
 800e1b4:	b2ad      	uxth	r5, r5
 800e1b6:	9502      	str	r5, [sp, #8]
 800e1b8:	9401      	str	r4, [sp, #4]
 800e1ba:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 800e1bc:	4642      	mov	r2, r8
 800e1be:	4649      	mov	r1, r9
 800e1c0:	47a0      	blx	r4
 800e1c2:	b013      	add	sp, #76	@ 0x4c
 800e1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c8:	6803      	ldr	r3, [r0, #0]
 800e1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1cc:	4798      	blx	r3
 800e1ce:	883b      	ldrh	r3, [r7, #0]
 800e1d0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 800e1d4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 800e1d8:	fb03 1202 	mla	r2, r3, r2, r1
 800e1dc:	435d      	muls	r5, r3
 800e1de:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e1e2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 800e1e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e1e8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 800e1ec:	1b12      	subs	r2, r2, r4
 800e1ee:	920d      	str	r2, [sp, #52]	@ 0x34
 800e1f0:	0062      	lsls	r2, r4, #1
 800e1f2:	1b1c      	subs	r4, r3, r4
 800e1f4:	0063      	lsls	r3, r4, #1
 800e1f6:	920a      	str	r2, [sp, #40]	@ 0x28
 800e1f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1fa:	f04f 0e04 	mov.w	lr, #4
 800e1fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e200:	4298      	cmp	r0, r3
 800e202:	d266      	bcs.n	800e2d2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 800e204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e206:	eb00 0b03 	add.w	fp, r0, r3
 800e20a:	4558      	cmp	r0, fp
 800e20c:	d25c      	bcs.n	800e2c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 800e20e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e212:	fb1e e303 	smlabb	r3, lr, r3, lr
 800e216:	f858 2003 	ldr.w	r2, [r8, r3]
 800e21a:	0e11      	lsrs	r1, r2, #24
 800e21c:	d012      	beq.n	800e244 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800e21e:	29ff      	cmp	r1, #255	@ 0xff
 800e220:	ea4f 2712 	mov.w	r7, r2, lsr #8
 800e224:	d110      	bne.n	800e248 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 800e226:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800e22a:	d10d      	bne.n	800e248 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 800e22c:	0953      	lsrs	r3, r2, #5
 800e22e:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 800e232:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800e236:	f027 0707 	bic.w	r7, r7, #7
 800e23a:	431f      	orrs	r7, r3
 800e23c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800e240:	433a      	orrs	r2, r7
 800e242:	8002      	strh	r2, [r0, #0]
 800e244:	3002      	adds	r0, #2
 800e246:	e7e0      	b.n	800e20a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 800e248:	fb0a f101 	mul.w	r1, sl, r1
 800e24c:	8806      	ldrh	r6, [r0, #0]
 800e24e:	1c4b      	adds	r3, r1, #1
 800e250:	eb03 2321 	add.w	r3, r3, r1, asr #8
 800e254:	1235      	asrs	r5, r6, #8
 800e256:	10f4      	asrs	r4, r6, #3
 800e258:	121b      	asrs	r3, r3, #8
 800e25a:	00f6      	lsls	r6, r6, #3
 800e25c:	b299      	uxth	r1, r3
 800e25e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e262:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 800e266:	b2f6      	uxtb	r6, r6
 800e268:	43db      	mvns	r3, r3
 800e26a:	b2d2      	uxtb	r2, r2
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	fb1c fc01 	smulbb	ip, ip, r1
 800e272:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 800e276:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 800e27a:	fb12 f201 	smulbb	r2, r2, r1
 800e27e:	fb05 c503 	mla	r5, r5, r3, ip
 800e282:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 800e286:	b2ff      	uxtb	r7, r7
 800e288:	fb06 2203 	mla	r2, r6, r3, r2
 800e28c:	b2ad      	uxth	r5, r5
 800e28e:	fb17 f701 	smulbb	r7, r7, r1
 800e292:	b292      	uxth	r2, r2
 800e294:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 800e298:	fb04 7403 	mla	r4, r4, r3, r7
 800e29c:	f105 0c01 	add.w	ip, r5, #1
 800e2a0:	1c57      	adds	r7, r2, #1
 800e2a2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 800e2a6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 800e2aa:	b2a4      	uxth	r4, r4
 800e2ac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800e2b0:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800e2b4:	433d      	orrs	r5, r7
 800e2b6:	1c67      	adds	r7, r4, #1
 800e2b8:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 800e2bc:	0964      	lsrs	r4, r4, #5
 800e2be:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800e2c2:	4325      	orrs	r5, r4
 800e2c4:	8005      	strh	r5, [r0, #0]
 800e2c6:	e7bd      	b.n	800e244 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800e2c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2ca:	4418      	add	r0, r3
 800e2cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2ce:	4499      	add	r9, r3
 800e2d0:	e795      	b.n	800e1fe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 800e2d2:	4b04      	ldr	r3, [pc, #16]	@ (800e2e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800e2d4:	6818      	ldr	r0, [r3, #0]
 800e2d6:	6803      	ldr	r3, [r0, #0]
 800e2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2da:	4798      	blx	r3
 800e2dc:	e771      	b.n	800e1c2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 800e2de:	bf00      	nop
 800e2e0:	20012426 	.word	0x20012426
 800e2e4:	2001242c 	.word	0x2001242c

0800e2e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	b087      	sub	sp, #28
 800e2ee:	4680      	mov	r8, r0
 800e2f0:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 800e2f4:	460d      	mov	r5, r1
 800e2f6:	4614      	mov	r4, r2
 800e2f8:	2e00      	cmp	r6, #0
 800e2fa:	f000 80b9 	beq.w	800e470 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 800e2fe:	6810      	ldr	r0, [r2, #0]
 800e300:	6851      	ldr	r1, [r2, #4]
 800e302:	af02      	add	r7, sp, #8
 800e304:	c703      	stmia	r7!, {r0, r1}
 800e306:	6818      	ldr	r0, [r3, #0]
 800e308:	6859      	ldr	r1, [r3, #4]
 800e30a:	af04      	add	r7, sp, #16
 800e30c:	c703      	stmia	r7!, {r0, r1}
 800e30e:	a802      	add	r0, sp, #8
 800e310:	f7fb ffb0 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e314:	4621      	mov	r1, r4
 800e316:	a804      	add	r0, sp, #16
 800e318:	f7fb ffd4 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e31c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e320:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e324:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 800e328:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 800e32c:	fb14 2103 	smlabb	r1, r4, r3, r2
 800e330:	eb08 0401 	add.w	r4, r8, r1
 800e334:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800e338:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800e33c:	440a      	add	r2, r1
 800e33e:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e342:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e346:	4413      	add	r3, r2
 800e348:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e34c:	4b4a      	ldr	r3, [pc, #296]	@ (800e478 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800e34e:	6818      	ldr	r0, [r3, #0]
 800e350:	6803      	ldr	r3, [r0, #0]
 800e352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e354:	4798      	blx	r3
 800e356:	4b49      	ldr	r3, [pc, #292]	@ (800e47c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 800e358:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800e35c:	881a      	ldrh	r2, [r3, #0]
 800e35e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800e362:	2eff      	cmp	r6, #255	@ 0xff
 800e364:	fb02 c101 	mla	r1, r2, r1, ip
 800e368:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800e36c:	fb02 f207 	mul.w	r2, r2, r7
 800e370:	f105 0104 	add.w	r1, r5, #4
 800e374:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800e378:	461d      	mov	r5, r3
 800e37a:	d05a      	beq.n	800e432 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 800e37c:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 800e380:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e384:	b2b6      	uxth	r6, r6
 800e386:	fa1f fe8e 	uxth.w	lr, lr
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	4282      	cmp	r2, r0
 800e38e:	d96a      	bls.n	800e466 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800e390:	eb00 0b0a 	add.w	fp, r0, sl
 800e394:	4583      	cmp	fp, r0
 800e396:	d940      	bls.n	800e41a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 800e398:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e39c:	8805      	ldrh	r5, [r0, #0]
 800e39e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e3a2:	122f      	asrs	r7, r5, #8
 800e3a4:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800e3a8:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 800e3ac:	fb17 f70e 	smulbb	r7, r7, lr
 800e3b0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 800e3b4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800e3b8:	00ed      	lsls	r5, r5, #3
 800e3ba:	fb0c 7c06 	mla	ip, ip, r6, r7
 800e3be:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 800e3c2:	10df      	asrs	r7, r3, #3
 800e3c4:	b2ed      	uxtb	r5, r5
 800e3c6:	00db      	lsls	r3, r3, #3
 800e3c8:	fa1f fc8c 	uxth.w	ip, ip
 800e3cc:	fb19 f90e 	smulbb	r9, r9, lr
 800e3d0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	fb15 f50e 	smulbb	r5, r5, lr
 800e3da:	fb07 9706 	mla	r7, r7, r6, r9
 800e3de:	fb03 5306 	mla	r3, r3, r6, r5
 800e3e2:	f10c 0901 	add.w	r9, ip, #1
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 800e3ec:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 800e3f0:	f103 0c01 	add.w	ip, r3, #1
 800e3f4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800e3f8:	b2bf      	uxth	r7, r7
 800e3fa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800e3fe:	ea4c 0c09 	orr.w	ip, ip, r9
 800e402:	f107 0901 	add.w	r9, r7, #1
 800e406:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800e40a:	097f      	lsrs	r7, r7, #5
 800e40c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 800e410:	ea4c 0c07 	orr.w	ip, ip, r7
 800e414:	f820 cb02 	strh.w	ip, [r0], #2
 800e418:	e7bc      	b.n	800e394 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 800e41a:	9b01      	ldr	r3, [sp, #4]
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	eba3 0308 	sub.w	r3, r3, r8
 800e422:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e426:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e42a:	eba3 0308 	sub.w	r3, r3, r8
 800e42e:	441c      	add	r4, r3
 800e430:	e7ac      	b.n	800e38c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 800e432:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e436:	4282      	cmp	r2, r0
 800e438:	d915      	bls.n	800e466 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800e43a:	eb00 060a 	add.w	r6, r0, sl
 800e43e:	4286      	cmp	r6, r0
 800e440:	d906      	bls.n	800e450 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 800e442:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e446:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e44a:	f820 3b02 	strh.w	r3, [r0], #2
 800e44e:	e7f6      	b.n	800e43e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 800e450:	882b      	ldrh	r3, [r5, #0]
 800e452:	eba3 0308 	sub.w	r3, r3, r8
 800e456:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e45a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e45e:	eba3 0308 	sub.w	r3, r3, r8
 800e462:	441c      	add	r4, r3
 800e464:	e7e7      	b.n	800e436 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 800e466:	4b04      	ldr	r3, [pc, #16]	@ (800e478 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800e468:	6818      	ldr	r0, [r3, #0]
 800e46a:	6803      	ldr	r3, [r0, #0]
 800e46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e46e:	4798      	blx	r3
 800e470:	b007      	add	sp, #28
 800e472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e476:	bf00      	nop
 800e478:	2001242c 	.word	0x2001242c
 800e47c:	20012426 	.word	0x20012426

0800e480 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 800e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e484:	b091      	sub	sp, #68	@ 0x44
 800e486:	4680      	mov	r8, r0
 800e488:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 800e48c:	460f      	mov	r7, r1
 800e48e:	4614      	mov	r4, r2
 800e490:	2d00      	cmp	r5, #0
 800e492:	d051      	beq.n	800e538 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800e494:	6810      	ldr	r0, [r2, #0]
 800e496:	6851      	ldr	r1, [r2, #4]
 800e498:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 800e69c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 800e49c:	ae0c      	add	r6, sp, #48	@ 0x30
 800e49e:	c603      	stmia	r6!, {r0, r1}
 800e4a0:	6818      	ldr	r0, [r3, #0]
 800e4a2:	6859      	ldr	r1, [r3, #4]
 800e4a4:	ae0e      	add	r6, sp, #56	@ 0x38
 800e4a6:	c603      	stmia	r6!, {r0, r1}
 800e4a8:	a80c      	add	r0, sp, #48	@ 0x30
 800e4aa:	f7fb fee3 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	a80e      	add	r0, sp, #56	@ 0x38
 800e4b2:	f7fb ff07 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e4b6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 800e4ba:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800e4be:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800e4c2:	f8d9 0000 	ldr.w	r0, [r9]
 800e4c6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 800e4ca:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 800e4ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e4d2:	eb08 0401 	add.w	r4, r8, r1
 800e4d6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 800e4da:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800e6a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 800e4de:	440a      	add	r2, r1
 800e4e0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 800e4e4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 800e4ee:	6803      	ldr	r3, [r0, #0]
 800e4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4f2:	4798      	blx	r3
 800e4f4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800e4f8:	f8d9 0000 	ldr.w	r0, [r9]
 800e4fc:	d01f      	beq.n	800e53e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 800e4fe:	2200      	movs	r2, #0
 800e500:	6801      	ldr	r1, [r0, #0]
 800e502:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800e506:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800e50a:	220b      	movs	r2, #11
 800e50c:	9207      	str	r2, [sp, #28]
 800e50e:	f8b8 2000 	ldrh.w	r2, [r8]
 800e512:	9206      	str	r2, [sp, #24]
 800e514:	2201      	movs	r2, #1
 800e516:	e9cd 5204 	strd	r5, r2, [sp, #16]
 800e51a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800e51e:	9203      	str	r2, [sp, #12]
 800e520:	fa1f f28a 	uxth.w	r2, sl
 800e524:	9202      	str	r2, [sp, #8]
 800e526:	b2b6      	uxth	r6, r6
 800e528:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 800e52c:	9200      	str	r2, [sp, #0]
 800e52e:	9601      	str	r6, [sp, #4]
 800e530:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 800e532:	463a      	mov	r2, r7
 800e534:	4621      	mov	r1, r4
 800e536:	47a8      	blx	r5
 800e538:	b011      	add	sp, #68	@ 0x44
 800e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53e:	6803      	ldr	r3, [r0, #0]
 800e540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e542:	4798      	blx	r3
 800e544:	f8b8 2000 	ldrh.w	r2, [r8]
 800e548:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800e54c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 800e550:	2dff      	cmp	r5, #255	@ 0xff
 800e552:	fb02 1303 	mla	r3, r2, r3, r1
 800e556:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e55a:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800e55e:	fb0a fa02 	mul.w	sl, sl, r2
 800e562:	d062      	beq.n	800e62a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 800e564:	ea6f 0c05 	mvn.w	ip, r5
 800e568:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 800e56c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e56e:	b2ad      	uxth	r5, r5
 800e570:	fa5f fc8c 	uxtb.w	ip, ip
 800e574:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800e578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e57a:	4298      	cmp	r0, r3
 800e57c:	f080 8085 	bcs.w	800e68a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800e580:	eb00 0b09 	add.w	fp, r0, r9
 800e584:	4558      	cmp	r0, fp
 800e586:	d246      	bcs.n	800e616 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 800e588:	f814 eb01 	ldrb.w	lr, [r4], #1
 800e58c:	2303      	movs	r3, #3
 800e58e:	2204      	movs	r2, #4
 800e590:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 800e594:	eb07 0a0e 	add.w	sl, r7, lr
 800e598:	8803      	ldrh	r3, [r0, #0]
 800e59a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 800e59e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800e5a2:	1219      	asrs	r1, r3, #8
 800e5a4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 800e5a8:	fb18 f805 	smulbb	r8, r8, r5
 800e5ac:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 800e5b0:	10da      	asrs	r2, r3, #3
 800e5b2:	fb01 810c 	mla	r1, r1, ip, r8
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 800e5bc:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	fb18 f805 	smulbb	r8, r8, r5
 800e5c6:	fb1e fe05 	smulbb	lr, lr, r5
 800e5ca:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 800e5ce:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 800e5d2:	b289      	uxth	r1, r1
 800e5d4:	fb02 820c 	mla	r2, r2, ip, r8
 800e5d8:	fb03 e30c 	mla	r3, r3, ip, lr
 800e5dc:	b292      	uxth	r2, r2
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	f101 0801 	add.w	r8, r1, #1
 800e5e4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 800e5e8:	f103 0e01 	add.w	lr, r3, #1
 800e5ec:	f102 0801 	add.w	r8, r2, #1
 800e5f0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 800e5f4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 800e5f8:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 800e5fc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 800e600:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800e604:	ea4e 0101 	orr.w	r1, lr, r1
 800e608:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 800e60c:	ea41 0108 	orr.w	r1, r1, r8
 800e610:	f820 1b02 	strh.w	r1, [r0], #2
 800e614:	e7b6      	b.n	800e584 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 800e616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e618:	881b      	ldrh	r3, [r3, #0]
 800e61a:	1b9b      	subs	r3, r3, r6
 800e61c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e620:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800e624:	1b9b      	subs	r3, r3, r6
 800e626:	441c      	add	r4, r3
 800e628:	e7a6      	b.n	800e578 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 800e62a:	491b      	ldr	r1, [pc, #108]	@ (800e698 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 800e62c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 800e630:	2203      	movs	r2, #3
 800e632:	2504      	movs	r5, #4
 800e634:	4550      	cmp	r0, sl
 800e636:	d228      	bcs.n	800e68a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800e638:	eb00 0c09 	add.w	ip, r0, r9
 800e63c:	4560      	cmp	r0, ip
 800e63e:	4623      	mov	r3, r4
 800e640:	d219      	bcs.n	800e676 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 800e642:	f893 e000 	ldrb.w	lr, [r3]
 800e646:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 800e64a:	eb07 0b0e 	add.w	fp, r7, lr
 800e64e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800e652:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800e656:	f89b b001 	ldrb.w	fp, [fp, #1]
 800e65a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800e65e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 800e662:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 800e666:	ea43 030b 	orr.w	r3, r3, fp
 800e66a:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 800e66e:	3401      	adds	r4, #1
 800e670:	f820 3b02 	strh.w	r3, [r0], #2
 800e674:	e7e2      	b.n	800e63c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 800e676:	f8b8 3000 	ldrh.w	r3, [r8]
 800e67a:	1b9b      	subs	r3, r3, r6
 800e67c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e680:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800e684:	1b9b      	subs	r3, r3, r6
 800e686:	441c      	add	r4, r3
 800e688:	e7d4      	b.n	800e634 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 800e68a:	4b04      	ldr	r3, [pc, #16]	@ (800e69c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 800e68c:	6818      	ldr	r0, [r3, #0]
 800e68e:	6803      	ldr	r3, [r0, #0]
 800e690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e692:	4798      	blx	r3
 800e694:	e750      	b.n	800e538 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800e696:	bf00      	nop
 800e698:	fffff800 	.word	0xfffff800
 800e69c:	2001242c 	.word	0x2001242c
 800e6a0:	20012426 	.word	0x20012426

0800e6a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 800e6a4:	b4f0      	push	{r4, r5, r6, r7}
 800e6a6:	460c      	mov	r4, r1
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800e6ae:	780f      	ldrb	r7, [r1, #0]
 800e6b0:	784e      	ldrb	r6, [r1, #1]
 800e6b2:	2f01      	cmp	r7, #1
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	9b04      	ldr	r3, [sp, #16]
 800e6b8:	d038      	beq.n	800e72c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 800e6ba:	d31f      	bcc.n	800e6fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 800e6bc:	2f02      	cmp	r7, #2
 800e6be:	d14d      	bne.n	800e75c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e6c0:	2e03      	cmp	r6, #3
 800e6c2:	d84b      	bhi.n	800e75c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e6c4:	e8df f006 	tbb	[pc, r6]
 800e6c8:	17140702 	.word	0x17140702
 800e6cc:	9504      	str	r5, [sp, #16]
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	bcf0      	pop	{r4, r5, r6, r7}
 800e6d2:	f7ff be09 	b.w	800e2e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 800e6d6:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d03f      	beq.n	800e75c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e6dc:	6806      	ldr	r6, [r0, #0]
 800e6de:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800e6e2:	68b5      	ldr	r5, [r6, #8]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	46ac      	mov	ip, r5
 800e6e8:	460a      	mov	r2, r1
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	bcf0      	pop	{r4, r5, r6, r7}
 800e6ee:	4760      	bx	ip
 800e6f0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800e6f4:	e7f0      	b.n	800e6d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800e6f6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800e6fa:	e7ed      	b.n	800e6d8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800e6fc:	2e03      	cmp	r6, #3
 800e6fe:	d82d      	bhi.n	800e75c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e700:	e8df f006 	tbb	[pc, r6]
 800e704:	110e0702 	.word	0x110e0702
 800e708:	9504      	str	r5, [sp, #16]
 800e70a:	4620      	mov	r0, r4
 800e70c:	bcf0      	pop	{r4, r5, r6, r7}
 800e70e:	f7ff bd05 	b.w	800e11c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 800e712:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800e714:	b310      	cbz	r0, 800e75c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e716:	6806      	ldr	r6, [r0, #0]
 800e718:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800e71c:	68f5      	ldr	r5, [r6, #12]
 800e71e:	e7e1      	b.n	800e6e4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800e720:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800e724:	e7f6      	b.n	800e714 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 800e726:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800e72a:	e7f3      	b.n	800e714 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 800e72c:	2e03      	cmp	r6, #3
 800e72e:	d815      	bhi.n	800e75c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e730:	e8df f006 	tbb	[pc, r6]
 800e734:	110e0702 	.word	0x110e0702
 800e738:	9504      	str	r5, [sp, #16]
 800e73a:	4620      	mov	r0, r4
 800e73c:	bcf0      	pop	{r4, r5, r6, r7}
 800e73e:	f7ff be9f 	b.w	800e480 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 800e742:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800e744:	b150      	cbz	r0, 800e75c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e746:	6806      	ldr	r6, [r0, #0]
 800e748:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800e74c:	6935      	ldr	r5, [r6, #16]
 800e74e:	e7c9      	b.n	800e6e4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800e750:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800e754:	e7f6      	b.n	800e744 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 800e756:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800e75a:	e7f3      	b.n	800e744 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 800e75c:	bcf0      	pop	{r4, r5, r6, r7}
 800e75e:	4770      	bx	lr

0800e760 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 800e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	4604      	mov	r4, r0
 800e766:	b087      	sub	sp, #28
 800e768:	6810      	ldr	r0, [r2, #0]
 800e76a:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 800e76e:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 800e9a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 800e772:	460e      	mov	r6, r1
 800e774:	6851      	ldr	r1, [r2, #4]
 800e776:	ad02      	add	r5, sp, #8
 800e778:	c503      	stmia	r5!, {r0, r1}
 800e77a:	6818      	ldr	r0, [r3, #0]
 800e77c:	6859      	ldr	r1, [r3, #4]
 800e77e:	ad04      	add	r5, sp, #16
 800e780:	4617      	mov	r7, r2
 800e782:	c503      	stmia	r5!, {r0, r1}
 800e784:	a802      	add	r0, sp, #8
 800e786:	f7fb fd75 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e78a:	4639      	mov	r1, r7
 800e78c:	a804      	add	r0, sp, #16
 800e78e:	f7fb fd99 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e792:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e796:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e79a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e79e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800e7a2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800e7a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e7aa:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 800e7ae:	440e      	add	r6, r1
 800e7b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800e7b4:	440a      	add	r2, r1
 800e7b6:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e7ba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e7be:	4413      	add	r3, r2
 800e7c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e7c4:	4b77      	ldr	r3, [pc, #476]	@ (800e9a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	6803      	ldr	r3, [r0, #0]
 800e7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7cc:	4798      	blx	r3
 800e7ce:	f8b9 b000 	ldrh.w	fp, [r9]
 800e7d2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e7d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e7da:	fb0b 2303 	mla	r3, fp, r3, r2
 800e7de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e7e2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800e7e6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800e7ea:	fb05 f50b 	mul.w	r5, r5, fp
 800e7ee:	9300      	str	r3, [sp, #0]
 800e7f0:	d069      	beq.n	800e8c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 800e7f2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 800e7f6:	4558      	cmp	r0, fp
 800e7f8:	f080 80cc 	bcs.w	800e994 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800e7fc:	9b00      	ldr	r3, [sp, #0]
 800e7fe:	18c3      	adds	r3, r0, r3
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	4631      	mov	r1, r6
 800e804:	9b01      	ldr	r3, [sp, #4]
 800e806:	4298      	cmp	r0, r3
 800e808:	d24f      	bcs.n	800e8aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 800e80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e80e:	2a00      	cmp	r2, #0
 800e810:	d048      	beq.n	800e8a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800e812:	fb0a f202 	mul.w	r2, sl, r2
 800e816:	1c53      	adds	r3, r2, #1
 800e818:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800e81c:	121b      	asrs	r3, r3, #8
 800e81e:	d041      	beq.n	800e8a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800e820:	8802      	ldrh	r2, [r0, #0]
 800e822:	f8b4 c000 	ldrh.w	ip, [r4]
 800e826:	b29e      	uxth	r6, r3
 800e828:	1215      	asrs	r5, r2, #8
 800e82a:	43db      	mvns	r3, r3
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	ea4f 272c 	mov.w	r7, ip, asr #8
 800e832:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 800e836:	fb15 f503 	smulbb	r5, r5, r3
 800e83a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 800e83e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 800e842:	00d2      	lsls	r2, r2, #3
 800e844:	fb07 5706 	mla	r7, r7, r6, r5
 800e848:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 800e84c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 800e850:	b2d2      	uxtb	r2, r2
 800e852:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800e856:	b2bf      	uxth	r7, r7
 800e858:	fb1e fe03 	smulbb	lr, lr, r3
 800e85c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800e860:	fa5f fc8c 	uxtb.w	ip, ip
 800e864:	fb12 f203 	smulbb	r2, r2, r3
 800e868:	fb05 e506 	mla	r5, r5, r6, lr
 800e86c:	fb0c 2c06 	mla	ip, ip, r6, r2
 800e870:	f107 0e01 	add.w	lr, r7, #1
 800e874:	fa1f fc8c 	uxth.w	ip, ip
 800e878:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 800e87c:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 800e880:	f10c 0701 	add.w	r7, ip, #1
 800e884:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 800e888:	b2ad      	uxth	r5, r5
 800e88a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800e88e:	ea47 070e 	orr.w	r7, r7, lr
 800e892:	f105 0e01 	add.w	lr, r5, #1
 800e896:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 800e89a:	096d      	lsrs	r5, r5, #5
 800e89c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800e8a0:	432f      	orrs	r7, r5
 800e8a2:	8007      	strh	r7, [r0, #0]
 800e8a4:	3002      	adds	r0, #2
 800e8a6:	3402      	adds	r4, #2
 800e8a8:	e7ac      	b.n	800e804 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 800e8aa:	f8b9 3000 	ldrh.w	r3, [r9]
 800e8ae:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800e8b2:	eba3 0308 	sub.w	r3, r3, r8
 800e8b6:	eba6 0608 	sub.w	r6, r6, r8
 800e8ba:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800e8be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e8c2:	440e      	add	r6, r1
 800e8c4:	e797      	b.n	800e7f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 800e8c6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e8ca:	42a8      	cmp	r0, r5
 800e8cc:	d262      	bcs.n	800e994 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800e8ce:	9b00      	ldr	r3, [sp, #0]
 800e8d0:	4631      	mov	r1, r6
 800e8d2:	eb00 0b03 	add.w	fp, r0, r3
 800e8d6:	4558      	cmp	r0, fp
 800e8d8:	d24e      	bcs.n	800e978 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 800e8da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8de:	b12b      	cbz	r3, 800e8ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800e8e0:	2bff      	cmp	r3, #255	@ 0xff
 800e8e2:	f8b4 e000 	ldrh.w	lr, [r4]
 800e8e6:	d104      	bne.n	800e8f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 800e8e8:	f8a0 e000 	strh.w	lr, [r0]
 800e8ec:	3002      	adds	r0, #2
 800e8ee:	3402      	adds	r4, #2
 800e8f0:	e7f1      	b.n	800e8d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 800e8f2:	8802      	ldrh	r2, [r0, #0]
 800e8f4:	b29f      	uxth	r7, r3
 800e8f6:	1216      	asrs	r6, r2, #8
 800e8f8:	43db      	mvns	r3, r3
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 800e900:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 800e904:	fb16 f603 	smulbb	r6, r6, r3
 800e908:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 800e90c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800e910:	00d2      	lsls	r2, r2, #3
 800e912:	fb0c 6c07 	mla	ip, ip, r7, r6
 800e916:	b2d2      	uxtb	r2, r2
 800e918:	ea4f 06ee 	mov.w	r6, lr, asr #3
 800e91c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 800e920:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800e924:	fb1a fa03 	smulbb	sl, sl, r3
 800e928:	fa1f fc8c 	uxth.w	ip, ip
 800e92c:	fb12 f303 	smulbb	r3, r2, r3
 800e930:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800e934:	fa5f fe8e 	uxtb.w	lr, lr
 800e938:	fb06 a607 	mla	r6, r6, r7, sl
 800e93c:	f10c 0201 	add.w	r2, ip, #1
 800e940:	fb0e 3307 	mla	r3, lr, r7, r3
 800e944:	b2b6      	uxth	r6, r6
 800e946:	b29b      	uxth	r3, r3
 800e948:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 800e94c:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 800e950:	f106 0a01 	add.w	sl, r6, #1
 800e954:	f103 0c01 	add.w	ip, r3, #1
 800e958:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800e95c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 800e960:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800e964:	0976      	lsrs	r6, r6, #5
 800e966:	ea4c 0c02 	orr.w	ip, ip, r2
 800e96a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800e96e:	ea4c 0c06 	orr.w	ip, ip, r6
 800e972:	f8a0 c000 	strh.w	ip, [r0]
 800e976:	e7b9      	b.n	800e8ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800e978:	f8b9 3000 	ldrh.w	r3, [r9]
 800e97c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800e980:	eba3 0308 	sub.w	r3, r3, r8
 800e984:	eba6 0608 	sub.w	r6, r6, r8
 800e988:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800e98c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e990:	440e      	add	r6, r1
 800e992:	e79a      	b.n	800e8ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 800e994:	4b03      	ldr	r3, [pc, #12]	@ (800e9a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800e996:	6818      	ldr	r0, [r3, #0]
 800e998:	6803      	ldr	r3, [r0, #0]
 800e99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e99c:	4798      	blx	r3
 800e99e:	b007      	add	sp, #28
 800e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a4:	2001242c 	.word	0x2001242c
 800e9a8:	20012426 	.word	0x20012426

0800e9ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 800e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b0:	b089      	sub	sp, #36	@ 0x24
 800e9b2:	4607      	mov	r7, r0
 800e9b4:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 800e9b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800e9ba:	4688      	mov	r8, r1
 800e9bc:	4692      	mov	sl, r2
 800e9be:	4699      	mov	r9, r3
 800e9c0:	2e00      	cmp	r6, #0
 800e9c2:	d048      	beq.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	f7fe fac3 	bl	800cf50 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e9ca:	4605      	mov	r5, r0
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	f7fe faf3 	bl	800cfb8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e9d2:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	f8ad a008 	strh.w	sl, [sp, #8]
 800e9dc:	f8ad 500c 	strh.w	r5, [sp, #12]
 800e9e0:	f8ad 900a 	strh.w	r9, [sp, #10]
 800e9e4:	f7fe fba6 	bl	800d134 <_ZNK8touchgfx6Bitmap7getDataEv>
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	f7fe fbd2 	bl	800d194 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800e9f0:	4682      	mov	sl, r0
 800e9f2:	4640      	mov	r0, r8
 800e9f4:	f7fe fc22 	bl	800d23c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e9f8:	2810      	cmp	r0, #16
 800e9fa:	d82c      	bhi.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800e9fc:	e8df f010 	tbh	[pc, r0, lsl #1]
 800ea00:	00ba00ca 	.word	0x00ba00ca
 800ea04:	002b0011 	.word	0x002b0011
 800ea08:	002b002b 	.word	0x002b002b
 800ea0c:	002b002b 	.word	0x002b002b
 800ea10:	002b002b 	.word	0x002b002b
 800ea14:	00c1002b 	.word	0x00c1002b
 800ea18:	002b002b 	.word	0x002b002b
 800ea1c:	002b0180 	.word	0x002b0180
 800ea20:	0173      	.short	0x0173
 800ea22:	4bbc      	ldr	r3, [pc, #752]	@ (800ed14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 800ea24:	6818      	ldr	r0, [r3, #0]
 800ea26:	6803      	ldr	r3, [r0, #0]
 800ea28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea2a:	4798      	blx	r3
 800ea2c:	2eff      	cmp	r6, #255	@ 0xff
 800ea2e:	d101      	bne.n	800ea34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800ea30:	0683      	lsls	r3, r0, #26
 800ea32:	d506      	bpl.n	800ea42 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 800ea34:	4633      	mov	r3, r6
 800ea36:	4622      	mov	r2, r4
 800ea38:	a902      	add	r1, sp, #8
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f7ff f8fc 	bl	800dc38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800ea40:	e009      	b.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ea42:	4640      	mov	r0, r8
 800ea44:	f7fe fb3e 	bl	800d0c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800ea48:	b940      	cbnz	r0, 800ea5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 800ea4a:	4623      	mov	r3, r4
 800ea4c:	aa02      	add	r2, sp, #8
 800ea4e:	4629      	mov	r1, r5
 800ea50:	4638      	mov	r0, r7
 800ea52:	f7ff f9d7 	bl	800de04 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800ea56:	b009      	add	sp, #36	@ 0x24
 800ea58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea5c:	f10d 0918 	add.w	r9, sp, #24
 800ea60:	4641      	mov	r1, r8
 800ea62:	4648      	mov	r0, r9
 800ea64:	f7fe fadc 	bl	800d020 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ea68:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ea6c:	f10d 0810 	add.w	r8, sp, #16
 800ea70:	e888 0003 	stmia.w	r8, {r0, r1}
 800ea74:	4640      	mov	r0, r8
 800ea76:	4621      	mov	r1, r4
 800ea78:	f7f9 fbd0 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800ea7c:	4640      	mov	r0, r8
 800ea7e:	f7f9 fc10 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d1d6      	bne.n	800ea34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800ea86:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800ea8a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	dd12      	ble.n	800eab8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 800ea92:	1a9b      	subs	r3, r3, r2
 800ea94:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ea98:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ea9c:	f8ad 0018 	strh.w	r0, [sp, #24]
 800eaa0:	f8ad 201a 	strh.w	r2, [sp, #26]
 800eaa4:	f8ad 101c 	strh.w	r1, [sp, #28]
 800eaa8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eaac:	464a      	mov	r2, r9
 800eaae:	4633      	mov	r3, r6
 800eab0:	a902      	add	r1, sp, #8
 800eab2:	4628      	mov	r0, r5
 800eab4:	f7ff f8c0 	bl	800dc38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800eab8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800eabc:	f9b4 2000 	ldrsh.w	r2, [r4]
 800eac0:	4293      	cmp	r3, r2
 800eac2:	dd12      	ble.n	800eaea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 800eac4:	1a9b      	subs	r3, r3, r2
 800eac6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800eaca:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800eace:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ead2:	f8ad 001a 	strh.w	r0, [sp, #26]
 800ead6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eada:	f8ad 101e 	strh.w	r1, [sp, #30]
 800eade:	23ff      	movs	r3, #255	@ 0xff
 800eae0:	464a      	mov	r2, r9
 800eae2:	a902      	add	r1, sp, #8
 800eae4:	4628      	mov	r0, r5
 800eae6:	f7ff f8a7 	bl	800dc38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800eaea:	4643      	mov	r3, r8
 800eaec:	aa02      	add	r2, sp, #8
 800eaee:	4629      	mov	r1, r5
 800eaf0:	4638      	mov	r0, r7
 800eaf2:	f7ff f987 	bl	800de04 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800eaf6:	88a2      	ldrh	r2, [r4, #4]
 800eaf8:	8823      	ldrh	r3, [r4, #0]
 800eafa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800eafe:	4413      	add	r3, r2
 800eb00:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800eb04:	440a      	add	r2, r1
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	b292      	uxth	r2, r2
 800eb0a:	b211      	sxth	r1, r2
 800eb0c:	b218      	sxth	r0, r3
 800eb0e:	4288      	cmp	r0, r1
 800eb10:	dd12      	ble.n	800eb38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 800eb12:	1a9b      	subs	r3, r3, r2
 800eb14:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800eb18:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800eb1c:	f8ad 1018 	strh.w	r1, [sp, #24]
 800eb20:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb24:	f8ad 001e 	strh.w	r0, [sp, #30]
 800eb28:	23ff      	movs	r3, #255	@ 0xff
 800eb2a:	464a      	mov	r2, r9
 800eb2c:	a902      	add	r1, sp, #8
 800eb2e:	4628      	mov	r0, r5
 800eb30:	f8ad 601a 	strh.w	r6, [sp, #26]
 800eb34:	f7ff f880 	bl	800dc38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800eb38:	88e2      	ldrh	r2, [r4, #6]
 800eb3a:	8863      	ldrh	r3, [r4, #2]
 800eb3c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800eb40:	4413      	add	r3, r2
 800eb42:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800eb46:	440a      	add	r2, r1
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	b292      	uxth	r2, r2
 800eb4c:	b211      	sxth	r1, r2
 800eb4e:	b218      	sxth	r0, r3
 800eb50:	4288      	cmp	r0, r1
 800eb52:	dd80      	ble.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800eb54:	1a9b      	subs	r3, r3, r2
 800eb56:	f9b4 6000 	ldrsh.w	r6, [r4]
 800eb5a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800eb5e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eb62:	f8ad 6018 	strh.w	r6, [sp, #24]
 800eb66:	f8ad 101a 	strh.w	r1, [sp, #26]
 800eb6a:	f8ad 001c 	strh.w	r0, [sp, #28]
 800eb6e:	23ff      	movs	r3, #255	@ 0xff
 800eb70:	464a      	mov	r2, r9
 800eb72:	e761      	b.n	800ea38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 800eb74:	4633      	mov	r3, r6
 800eb76:	4622      	mov	r2, r4
 800eb78:	a902      	add	r1, sp, #8
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f7ff f9b2 	bl	800dee4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 800eb80:	e769      	b.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800eb82:	e9cd 4600 	strd	r4, r6, [sp]
 800eb86:	ab02      	add	r3, sp, #8
 800eb88:	4652      	mov	r2, sl
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	4638      	mov	r0, r7
 800eb8e:	f7ff fd89 	bl	800e6a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 800eb92:	e760      	b.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800eb94:	4640      	mov	r0, r8
 800eb96:	f7fe fa95 	bl	800d0c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800eb9a:	b948      	cbnz	r0, 800ebb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	e9cd 6000 	strd	r6, r0, [sp]
 800eba2:	aa02      	add	r2, sp, #8
 800eba4:	68de      	ldr	r6, [r3, #12]
 800eba6:	4629      	mov	r1, r5
 800eba8:	4623      	mov	r3, r4
 800ebaa:	4638      	mov	r0, r7
 800ebac:	47b0      	blx	r6
 800ebae:	e752      	b.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ebb0:	f10d 0918 	add.w	r9, sp, #24
 800ebb4:	4641      	mov	r1, r8
 800ebb6:	4648      	mov	r0, r9
 800ebb8:	f7fe fa32 	bl	800d020 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ebbc:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ebc0:	f10d 0810 	add.w	r8, sp, #16
 800ebc4:	e888 0003 	stmia.w	r8, {r0, r1}
 800ebc8:	4640      	mov	r0, r8
 800ebca:	4621      	mov	r1, r4
 800ebcc:	f7f9 fb26 	bl	800821c <_ZN8touchgfx4RectaNERKS0_>
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	f7f9 fb66 	bl	80082a2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ebd6:	b138      	cbz	r0, 800ebe8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 800ebd8:	9600      	str	r6, [sp, #0]
 800ebda:	4623      	mov	r3, r4
 800ebdc:	aa02      	add	r2, sp, #8
 800ebde:	4651      	mov	r1, sl
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	f7ff fdbd 	bl	800e760 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ebe6:	e736      	b.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	e9cd 6000 	strd	r6, r0, [sp]
 800ebee:	aa02      	add	r2, sp, #8
 800ebf0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	4643      	mov	r3, r8
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	47d8      	blx	fp
 800ebfc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800ec00:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800ec04:	4293      	cmp	r3, r2
 800ec06:	dd13      	ble.n	800ec30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 800ec08:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ec0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ec10:	f8ad 0018 	strh.w	r0, [sp, #24]
 800ec14:	1a9b      	subs	r3, r3, r2
 800ec16:	f8ad 201a 	strh.w	r2, [sp, #26]
 800ec1a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ec1e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ec22:	9600      	str	r6, [sp, #0]
 800ec24:	464b      	mov	r3, r9
 800ec26:	aa02      	add	r2, sp, #8
 800ec28:	4651      	mov	r1, sl
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f7ff fd98 	bl	800e760 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ec30:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800ec34:	f9b4 2000 	ldrsh.w	r2, [r4]
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	dd13      	ble.n	800ec64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 800ec3c:	1a9b      	subs	r3, r3, r2
 800ec3e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800ec42:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800ec46:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ec4a:	f8ad 001a 	strh.w	r0, [sp, #26]
 800ec4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec52:	f8ad 101e 	strh.w	r1, [sp, #30]
 800ec56:	9600      	str	r6, [sp, #0]
 800ec58:	464b      	mov	r3, r9
 800ec5a:	aa02      	add	r2, sp, #8
 800ec5c:	4651      	mov	r1, sl
 800ec5e:	4628      	mov	r0, r5
 800ec60:	f7ff fd7e 	bl	800e760 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ec64:	88a2      	ldrh	r2, [r4, #4]
 800ec66:	8823      	ldrh	r3, [r4, #0]
 800ec68:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ec72:	440a      	add	r2, r1
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	b292      	uxth	r2, r2
 800ec78:	b211      	sxth	r1, r2
 800ec7a:	b218      	sxth	r0, r3
 800ec7c:	4288      	cmp	r0, r1
 800ec7e:	dd13      	ble.n	800eca8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 800ec80:	1a9b      	subs	r3, r3, r2
 800ec82:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800ec86:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 800ec8a:	f8ad 1018 	strh.w	r1, [sp, #24]
 800ec8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec92:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ec96:	9600      	str	r6, [sp, #0]
 800ec98:	464b      	mov	r3, r9
 800ec9a:	aa02      	add	r2, sp, #8
 800ec9c:	4651      	mov	r1, sl
 800ec9e:	4628      	mov	r0, r5
 800eca0:	f8ad 701a 	strh.w	r7, [sp, #26]
 800eca4:	f7ff fd5c 	bl	800e760 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800eca8:	88e2      	ldrh	r2, [r4, #6]
 800ecaa:	8863      	ldrh	r3, [r4, #2]
 800ecac:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ecb6:	440a      	add	r2, r1
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	b292      	uxth	r2, r2
 800ecbc:	b211      	sxth	r1, r2
 800ecbe:	b218      	sxth	r0, r3
 800ecc0:	4288      	cmp	r0, r1
 800ecc2:	f77f aec8 	ble.w	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ecc6:	f9b4 7000 	ldrsh.w	r7, [r4]
 800ecca:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ecce:	f8ad 7018 	strh.w	r7, [sp, #24]
 800ecd2:	1a9b      	subs	r3, r3, r2
 800ecd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ecd8:	f8ad 101a 	strh.w	r1, [sp, #26]
 800ecdc:	f8ad 001c 	strh.w	r0, [sp, #28]
 800ece0:	9600      	str	r6, [sp, #0]
 800ece2:	464b      	mov	r3, r9
 800ece4:	e77a      	b.n	800ebdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 800ece6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800ecea:	2800      	cmp	r0, #0
 800ecec:	f43f aeb3 	beq.w	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ecf0:	6803      	ldr	r3, [r0, #0]
 800ecf2:	9600      	str	r6, [sp, #0]
 800ecf4:	68de      	ldr	r6, [r3, #12]
 800ecf6:	4623      	mov	r3, r4
 800ecf8:	aa02      	add	r2, sp, #8
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	47b0      	blx	r6
 800ecfe:	e6aa      	b.n	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ed00:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800ed04:	2800      	cmp	r0, #0
 800ed06:	f43f aea6 	beq.w	800ea56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ed0a:	6803      	ldr	r3, [r0, #0]
 800ed0c:	9600      	str	r6, [sp, #0]
 800ed0e:	689e      	ldr	r6, [r3, #8]
 800ed10:	e7f1      	b.n	800ecf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 800ed12:	bf00      	nop
 800ed14:	2001242c 	.word	0x2001242c

0800ed18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 800ed18:	b180      	cbz	r0, 800ed3c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 800ed1a:	2903      	cmp	r1, #3
 800ed1c:	d81c      	bhi.n	800ed58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800ed1e:	e8df f001 	tbb	[pc, r1]
 800ed22:	1d02      	.short	0x1d02
 800ed24:	1f08      	.short	0x1f08
 800ed26:	4b10      	ldr	r3, [pc, #64]	@ (800ed68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800ed28:	8818      	ldrh	r0, [r3, #0]
 800ed2a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800ed2e:	4240      	negs	r0, r0
 800ed30:	4770      	bx	lr
 800ed32:	4b0d      	ldr	r3, [pc, #52]	@ (800ed68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800ed34:	8818      	ldrh	r0, [r3, #0]
 800ed36:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800ed3a:	4770      	bx	lr
 800ed3c:	2903      	cmp	r1, #3
 800ed3e:	d80b      	bhi.n	800ed58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800ed40:	a301      	add	r3, pc, #4	@ (adr r3, 800ed48 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 800ed42:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800ed46:	bf00      	nop
 800ed48:	0800ed5d 	.word	0x0800ed5d
 800ed4c:	0800ed33 	.word	0x0800ed33
 800ed50:	0800ed61 	.word	0x0800ed61
 800ed54:	0800ed27 	.word	0x0800ed27
 800ed58:	2000      	movs	r0, #0
 800ed5a:	4770      	bx	lr
 800ed5c:	2001      	movs	r0, #1
 800ed5e:	4770      	bx	lr
 800ed60:	f04f 30ff 	mov.w	r0, #4294967295
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	20012426 	.word	0x20012426

0800ed6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 800ed6c:	b180      	cbz	r0, 800ed90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 800ed6e:	2903      	cmp	r1, #3
 800ed70:	d81c      	bhi.n	800edac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800ed72:	e8df f001 	tbb	[pc, r1]
 800ed76:	021d      	.short	0x021d
 800ed78:	071f      	.short	0x071f
 800ed7a:	4b10      	ldr	r3, [pc, #64]	@ (800edbc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800ed7c:	8818      	ldrh	r0, [r3, #0]
 800ed7e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800ed82:	4770      	bx	lr
 800ed84:	4b0d      	ldr	r3, [pc, #52]	@ (800edbc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800ed86:	8818      	ldrh	r0, [r3, #0]
 800ed88:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800ed8c:	4240      	negs	r0, r0
 800ed8e:	4770      	bx	lr
 800ed90:	2903      	cmp	r1, #3
 800ed92:	d80b      	bhi.n	800edac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800ed94:	a301      	add	r3, pc, #4	@ (adr r3, 800ed9c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 800ed96:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800ed9a:	bf00      	nop
 800ed9c:	0800ed7b 	.word	0x0800ed7b
 800eda0:	0800edb5 	.word	0x0800edb5
 800eda4:	0800ed85 	.word	0x0800ed85
 800eda8:	0800edb1 	.word	0x0800edb1
 800edac:	2000      	movs	r0, #0
 800edae:	4770      	bx	lr
 800edb0:	2001      	movs	r0, #1
 800edb2:	4770      	bx	lr
 800edb4:	f04f 30ff 	mov.w	r0, #4294967295
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	20012426 	.word	0x20012426

0800edc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 800edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc4:	b099      	sub	sp, #100	@ 0x64
 800edc6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800edc8:	a914      	add	r1, sp, #80	@ 0x50
 800edca:	e881 000c 	stmia.w	r1, {r2, r3}
 800edce:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 800edd2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800edd6:	f891 900d 	ldrb.w	r9, [r1, #13]
 800edda:	9309      	str	r3, [sp, #36]	@ 0x24
 800eddc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 800ede0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ede2:	ea4f 1749 	mov.w	r7, r9, lsl #5
 800ede6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 800edea:	930c      	str	r3, [sp, #48]	@ 0x30
 800edec:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 800edf0:	798f      	ldrb	r7, [r1, #6]
 800edf2:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 800edf6:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 800edfa:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 800edfe:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 800ee02:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 800ee06:	431f      	orrs	r7, r3
 800ee08:	f000 8195 	beq.w	800f136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800ee0c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800ee10:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800ee14:	f891 9007 	ldrb.w	r9, [r1, #7]
 800ee18:	ea59 0903 	orrs.w	r9, r9, r3
 800ee1c:	f000 818b 	beq.w	800f136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800ee20:	f991 3009 	ldrsb.w	r3, [r1, #9]
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	2d00      	cmp	r5, #0
 800ee28:	f000 812e 	beq.w	800f088 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 800ee2c:	1aed      	subs	r5, r5, r3
 800ee2e:	b2ad      	uxth	r5, r5
 800ee30:	042b      	lsls	r3, r5, #16
 800ee32:	d502      	bpl.n	800ee3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800ee34:	1b64      	subs	r4, r4, r5
 800ee36:	b224      	sxth	r4, r4
 800ee38:	2500      	movs	r5, #0
 800ee3a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800ee3e:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 800ee42:	428c      	cmp	r4, r1
 800ee44:	b28b      	uxth	r3, r1
 800ee46:	bfbf      	itttt	lt
 800ee48:	18ed      	addlt	r5, r5, r3
 800ee4a:	1b2c      	sublt	r4, r5, r4
 800ee4c:	b2a5      	uxthlt	r5, r4
 800ee4e:	460c      	movlt	r4, r1
 800ee50:	8891      	ldrh	r1, [r2, #4]
 800ee52:	440b      	add	r3, r1
 800ee54:	b21b      	sxth	r3, r3
 800ee56:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee58:	88d3      	ldrh	r3, [r2, #6]
 800ee5a:	8852      	ldrh	r2, [r2, #2]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	b21b      	sxth	r3, r3
 800ee60:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee62:	4bbe      	ldr	r3, [pc, #760]	@ (800f15c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 800ee64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee66:	f893 b000 	ldrb.w	fp, [r3]
 800ee6a:	f10b 3cff 	add.w	ip, fp, #4294967295
 800ee6e:	f1dc 0300 	rsbs	r3, ip, #0
 800ee72:	eb43 030c 	adc.w	r3, r3, ip
 800ee76:	930e      	str	r3, [sp, #56]	@ 0x38
 800ee78:	4621      	mov	r1, r4
 800ee7a:	4653      	mov	r3, sl
 800ee7c:	a814      	add	r0, sp, #80	@ 0x50
 800ee7e:	f7fb f86d 	bl	8009f5c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 800ee82:	4621      	mov	r1, r4
 800ee84:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 800ee88:	4653      	mov	r3, sl
 800ee8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee8c:	a814      	add	r0, sp, #80	@ 0x50
 800ee8e:	f7fb f882 	bl	8009f96 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 800ee92:	a918      	add	r1, sp, #96	@ 0x60
 800ee94:	f821 0d02 	strh.w	r0, [r1, #-2]!
 800ee98:	a817      	add	r0, sp, #92	@ 0x5c
 800ee9a:	f7fb f9a9 	bl	800a1f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 800ee9e:	f1ba 0f00 	cmp.w	sl, #0
 800eea2:	f040 80f4 	bne.w	800f08e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 800eea6:	f1bb 0f01 	cmp.w	fp, #1
 800eeaa:	f040 80f8 	bne.w	800f09e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 800eeae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	f040 8145 	bne.w	800f140 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 800eeb6:	b2ba      	uxth	r2, r7
 800eeb8:	b905      	cbnz	r5, 800eebc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 800eeba:	b16e      	cbz	r6, 800eed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 800eebc:	fb06 5302 	mla	r3, r6, r2, r5
 800eec0:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 800eec2:	fb08 f303 	mul.w	r3, r8, r3
 800eec6:	4631      	mov	r1, r6
 800eec8:	f003 0607 	and.w	r6, r3, #7
 800eecc:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 800eed0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800eed2:	eba9 0301 	sub.w	r3, r9, r1
 800eed6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eed8:	4651      	mov	r1, sl
 800eeda:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800eedc:	f7ff ff1c 	bl	800ed18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 800eee0:	4681      	mov	r9, r0
 800eee2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800eee4:	f7ff ff42 	bl	800ed6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 800eee8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eeea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eeec:	eba3 0a01 	sub.w	sl, r3, r1
 800eef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eef2:	459a      	cmp	sl, r3
 800eef4:	bfa8      	it	ge
 800eef6:	469a      	movge	sl, r3
 800eef8:	f1ba 0f00 	cmp.w	sl, #0
 800eefc:	4683      	mov	fp, r0
 800eefe:	f340 811a 	ble.w	800f136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800ef02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef04:	1b64      	subs	r4, r4, r5
 800ef06:	1b1c      	subs	r4, r3, r4
 800ef08:	42bc      	cmp	r4, r7
 800ef0a:	bfd4      	ite	le
 800ef0c:	ebc5 0504 	rsble	r5, r5, r4
 800ef10:	ebc5 0507 	rsbgt	r5, r5, r7
 800ef14:	2d00      	cmp	r5, #0
 800ef16:	f340 810e 	ble.w	800f136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800ef1a:	1b52      	subs	r2, r2, r5
 800ef1c:	fb08 f302 	mul.w	r3, r8, r2
 800ef20:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f040 8116 	bne.w	800f156 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 800ef2a:	4b8d      	ldr	r3, [pc, #564]	@ (800f160 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 800ef2c:	6818      	ldr	r0, [r3, #0]
 800ef2e:	6803      	ldr	r3, [r0, #0]
 800ef30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef32:	4798      	blx	r3
 800ef34:	2301      	movs	r3, #1
 800ef36:	fa03 f308 	lsl.w	r3, r3, r8
 800ef3a:	4a8a      	ldr	r2, [pc, #552]	@ (800f164 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	8811      	ldrh	r1, [r2, #0]
 800ef42:	930e      	str	r3, [sp, #56]	@ 0x38
 800ef44:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 800ef48:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 800ef4c:	fb01 2303 	mla	r3, r1, r3, r2
 800ef50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ef54:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef56:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ef58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800ef5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef5e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ef60:	0a19      	lsrs	r1, r3, #8
 800ef62:	b2cb      	uxtb	r3, r1
 800ef64:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef66:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	9311      	str	r3, [sp, #68]	@ 0x44
 800ef6c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ef6e:	095a      	lsrs	r2, r3, #5
 800ef70:	4b7d      	ldr	r3, [pc, #500]	@ (800f168 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 800ef72:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800ef76:	400b      	ands	r3, r1
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 800ef7c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800ef80:	4313      	orrs	r3, r2
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef86:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ef88:	781a      	ldrb	r2, [r3, #0]
 800ef8a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800ef8e:	4132      	asrs	r2, r6
 800ef90:	fb05 b919 	mls	r9, r5, r9, fp
 800ef94:	fb03 fb05 	mul.w	fp, r3, r5
 800ef98:	b2d2      	uxtb	r2, r2
 800ef9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef9c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 800efa0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 800efa4:	f0c0 80f5 	bcc.w	800f192 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 800efa8:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 800efac:	46ae      	mov	lr, r5
 800efae:	f11e 3eff 	adds.w	lr, lr, #4294967295
 800efb2:	f0c0 80dd 	bcc.w	800f170 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 800efb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efb8:	4013      	ands	r3, r2
 800efba:	d055      	beq.n	800f068 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 800efbc:	20ff      	movs	r0, #255	@ 0xff
 800efbe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800efc0:	fb90 f1f1 	sdiv	r1, r0, r1
 800efc4:	434b      	muls	r3, r1
 800efc6:	2bfe      	cmp	r3, #254	@ 0xfe
 800efc8:	dd03      	ble.n	800efd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 800efca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800efcc:	4281      	cmp	r1, r0
 800efce:	f000 80cd 	beq.w	800f16c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 800efd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800efd4:	f8bc 4000 	ldrh.w	r4, [ip]
 800efd8:	fb11 f303 	smulbb	r3, r1, r3
 800efdc:	b29b      	uxth	r3, r3
 800efde:	1c59      	adds	r1, r3, #1
 800efe0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800efe4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800efe8:	b29f      	uxth	r7, r3
 800efea:	43db      	mvns	r3, r3
 800efec:	b2db      	uxtb	r3, r3
 800efee:	9309      	str	r3, [sp, #36]	@ 0x24
 800eff0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eff2:	1220      	asrs	r0, r4, #8
 800eff4:	fb13 f907 	smulbb	r9, r3, r7
 800eff8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800effc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800effe:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 800f002:	fb00 9003 	mla	r0, r0, r3, r9
 800f006:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f008:	10e1      	asrs	r1, r4, #3
 800f00a:	fb13 f907 	smulbb	r9, r3, r7
 800f00e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 800f012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f014:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 800f018:	fb01 9103 	mla	r1, r1, r3, r9
 800f01c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f01e:	00e4      	lsls	r4, r4, #3
 800f020:	fb13 f707 	smulbb	r7, r3, r7
 800f024:	b2e4      	uxtb	r4, r4
 800f026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f028:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800f02c:	fb04 7403 	mla	r4, r4, r3, r7
 800f030:	b280      	uxth	r0, r0
 800f032:	b2a4      	uxth	r4, r4
 800f034:	1c43      	adds	r3, r0, #1
 800f036:	f104 0901 	add.w	r9, r4, #1
 800f03a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800f03e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 800f042:	b289      	uxth	r1, r1
 800f044:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 800f048:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 800f04c:	ea49 0000 	orr.w	r0, r9, r0
 800f050:	f101 0901 	add.w	r9, r1, #1
 800f054:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 800f058:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800f05c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 800f060:	ea40 0009 	orr.w	r0, r0, r9
 800f064:	f8ac 0000 	strh.w	r0, [ip]
 800f068:	4446      	add	r6, r8
 800f06a:	b2b6      	uxth	r6, r6
 800f06c:	2e07      	cmp	r6, #7
 800f06e:	bf81      	itttt	hi
 800f070:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 800f072:	785a      	ldrbhi	r2, [r3, #1]
 800f074:	3301      	addhi	r3, #1
 800f076:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 800f078:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f07a:	bf9a      	itte	ls
 800f07c:	fa42 f208 	asrls.w	r2, r2, r8
 800f080:	b2d2      	uxtbls	r2, r2
 800f082:	2600      	movhi	r6, #0
 800f084:	449c      	add	ip, r3
 800f086:	e792      	b.n	800efae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 800f088:	441c      	add	r4, r3
 800f08a:	b224      	sxth	r4, r4
 800f08c:	e6d5      	b.n	800ee3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800f08e:	f1ba 0f01 	cmp.w	sl, #1
 800f092:	f47f af0c 	bne.w	800eeae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f096:	f1bb 0f01 	cmp.w	fp, #1
 800f09a:	f47f af08 	bne.w	800eeae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f09e:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800f160 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 800f0a2:	f8db 0000 	ldr.w	r0, [fp]
 800f0a6:	6803      	ldr	r3, [r0, #0]
 800f0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0aa:	4798      	blx	r3
 800f0ac:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 800f0b0:	465a      	mov	r2, fp
 800f0b2:	d006      	beq.n	800f0c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 800f0b4:	f1b8 0f04 	cmp.w	r8, #4
 800f0b8:	d140      	bne.n	800f13c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 800f0ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f0bc:	3300      	adds	r3, #0
 800f0be:	bf18      	it	ne
 800f0c0:	2301      	movne	r3, #1
 800f0c2:	0580      	lsls	r0, r0, #22
 800f0c4:	d56e      	bpl.n	800f1a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 800f0c6:	f1b8 0f08 	cmp.w	r8, #8
 800f0ca:	d16b      	bne.n	800f1a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	bf0c      	ite	eq
 800f0d0:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 800f0d4:	f44f 7180 	movne.w	r1, #256	@ 0x100
 800f0d8:	2d00      	cmp	r5, #0
 800f0da:	f47f aee8 	bne.w	800eeae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f0de:	2e00      	cmp	r6, #0
 800f0e0:	f47f aee5 	bne.w	800eeae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f0e4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800f0e6:	19e3      	adds	r3, r4, r7
 800f0e8:	4283      	cmp	r3, r0
 800f0ea:	f73f aee0 	bgt.w	800eeae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0f0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f0f2:	444b      	add	r3, r9
 800f0f4:	4283      	cmp	r3, r0
 800f0f6:	f73f aeda 	bgt.w	800eeae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f0fa:	6810      	ldr	r0, [r2, #0]
 800f0fc:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 800f100:	6804      	ldr	r4, [r0, #0]
 800f102:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 800f106:	b2bf      	uxth	r7, r7
 800f108:	f1b8 0f08 	cmp.w	r8, #8
 800f10c:	f04f 0500 	mov.w	r5, #0
 800f110:	bf18      	it	ne
 800f112:	3701      	addne	r7, #1
 800f114:	e9cd 1505 	strd	r1, r5, [sp, #20]
 800f118:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f11a:	9104      	str	r1, [sp, #16]
 800f11c:	bf18      	it	ne
 800f11e:	f027 0701 	bicne.w	r7, r7, #1
 800f122:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800f124:	bf18      	it	ne
 800f126:	b2bf      	uxthne	r7, r7
 800f128:	e9cd 7102 	strd	r7, r1, [sp, #8]
 800f12c:	e9cd 7900 	strd	r7, r9, [sp]
 800f130:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800f132:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 800f134:	47a0      	blx	r4
 800f136:	b019      	add	sp, #100	@ 0x64
 800f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13c:	2300      	movs	r3, #0
 800f13e:	e7c0      	b.n	800f0c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 800f140:	2208      	movs	r2, #8
 800f142:	fb92 f3f8 	sdiv	r3, r2, r8
 800f146:	1e5a      	subs	r2, r3, #1
 800f148:	443a      	add	r2, r7
 800f14a:	fb92 f2f3 	sdiv	r2, r2, r3
 800f14e:	fb12 f203 	smulbb	r2, r2, r3
 800f152:	b292      	uxth	r2, r2
 800f154:	e6b0      	b.n	800eeb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 800f156:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f158:	e6ec      	b.n	800ef34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 800f15a:	bf00      	nop
 800f15c:	20012424 	.word	0x20012424
 800f160:	2001242c 	.word	0x2001242c
 800f164:	20012426 	.word	0x20012426
 800f168:	00fff800 	.word	0x00fff800
 800f16c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f16e:	e779      	b.n	800f064 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 800f170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f172:	b153      	cbz	r3, 800f18a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 800f174:	441e      	add	r6, r3
 800f176:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f178:	b2b6      	uxth	r6, r6
 800f17a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 800f17e:	f006 0607 	and.w	r6, r6, #7
 800f182:	781a      	ldrb	r2, [r3, #0]
 800f184:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f186:	4132      	asrs	r2, r6
 800f188:	b2d2      	uxtb	r2, r2
 800f18a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f18c:	445b      	add	r3, fp
 800f18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f190:	e706      	b.n	800efa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 800f192:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1ce      	bne.n	800f136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f198:	4b05      	ldr	r3, [pc, #20]	@ (800f1b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 800f19a:	6818      	ldr	r0, [r3, #0]
 800f19c:	6803      	ldr	r3, [r0, #0]
 800f19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1a0:	4798      	blx	r3
 800f1a2:	e7c8      	b.n	800f136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	f43f ae82 	beq.w	800eeae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f1aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f1ae:	e793      	b.n	800f0d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 800f1b0:	2001242c 	.word	0x2001242c

0800f1b4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4c0b      	ldr	r4, [pc, #44]	@ (800f1e4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 800f1b8:	7823      	ldrb	r3, [r4, #0]
 800f1ba:	f3bf 8f5b 	dmb	ish
 800f1be:	07db      	lsls	r3, r3, #31
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	d40b      	bmi.n	800f1dc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f000 fd43 	bl	800fc50 <__cxa_guard_acquire>
 800f1ca:	b138      	cbz	r0, 800f1dc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f000 fd4b 	bl	800fc68 <__cxa_guard_release>
 800f1d2:	4a05      	ldr	r2, [pc, #20]	@ (800f1e8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 800f1d4:	4905      	ldr	r1, [pc, #20]	@ (800f1ec <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 800f1d6:	4806      	ldr	r0, [pc, #24]	@ (800f1f0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 800f1d8:	f000 fd33 	bl	800fc42 <__aeabi_atexit>
 800f1dc:	4b04      	ldr	r3, [pc, #16]	@ (800f1f0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 800f1de:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800f1e0:	bd38      	pop	{r3, r4, r5, pc}
 800f1e2:	bf00      	nop
 800f1e4:	200124b8 	.word	0x200124b8
 800f1e8:	20000000 	.word	0x20000000
 800f1ec:	0800d46d 	.word	0x0800d46d
 800f1f0:	20000088 	.word	0x20000088

0800f1f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	1208      	asrs	r0, r1, #8
 800f1f8:	b29e      	uxth	r6, r3
 800f1fa:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f1fe:	1213      	asrs	r3, r2, #8
 800f200:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800f204:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800f208:	fb13 f305 	smulbb	r3, r3, r5
 800f20c:	fb10 f006 	smulbb	r0, r0, r6
 800f210:	4418      	add	r0, r3
 800f212:	10cc      	asrs	r4, r1, #3
 800f214:	10d3      	asrs	r3, r2, #3
 800f216:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 800f21a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 800f21e:	fb13 f305 	smulbb	r3, r3, r5
 800f222:	fb14 f406 	smulbb	r4, r4, r6
 800f226:	00c9      	lsls	r1, r1, #3
 800f228:	00d2      	lsls	r2, r2, #3
 800f22a:	441c      	add	r4, r3
 800f22c:	b2d2      	uxtb	r2, r2
 800f22e:	b2cb      	uxtb	r3, r1
 800f230:	fb12 f205 	smulbb	r2, r2, r5
 800f234:	b280      	uxth	r0, r0
 800f236:	fb13 f306 	smulbb	r3, r3, r6
 800f23a:	4413      	add	r3, r2
 800f23c:	1c42      	adds	r2, r0, #1
 800f23e:	b29b      	uxth	r3, r3
 800f240:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 800f244:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 800f248:	1c58      	adds	r0, r3, #1
 800f24a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800f24e:	b2a4      	uxth	r4, r4
 800f250:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800f254:	4310      	orrs	r0, r2
 800f256:	1c62      	adds	r2, r4, #1
 800f258:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 800f25c:	0964      	lsrs	r4, r4, #5
 800f25e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800f262:	4320      	orrs	r0, r4
 800f264:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f268 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 800f268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26c:	b08f      	sub	sp, #60	@ 0x3c
 800f26e:	461c      	mov	r4, r3
 800f270:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 800f274:	9004      	str	r0, [sp, #16]
 800f276:	460d      	mov	r5, r1
 800f278:	4616      	mov	r6, r2
 800f27a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f27c:	2f00      	cmp	r7, #0
 800f27e:	f000 80f6 	beq.w	800f46e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 800f282:	6820      	ldr	r0, [r4, #0]
 800f284:	6861      	ldr	r1, [r4, #4]
 800f286:	aa0a      	add	r2, sp, #40	@ 0x28
 800f288:	c203      	stmia	r2!, {r0, r1}
 800f28a:	6818      	ldr	r0, [r3, #0]
 800f28c:	6859      	ldr	r1, [r3, #4]
 800f28e:	aa0c      	add	r2, sp, #48	@ 0x30
 800f290:	c203      	stmia	r2!, {r0, r1}
 800f292:	a80a      	add	r0, sp, #40	@ 0x28
 800f294:	f7fa ffee 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f298:	4621      	mov	r1, r4
 800f29a:	a80c      	add	r0, sp, #48	@ 0x30
 800f29c:	f7fb f812 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f2a0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800f2a4:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 800f2a8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 800f2ac:	f002 0301 	and.w	r3, r2, #1
 800f2b0:	9306      	str	r3, [sp, #24]
 800f2b2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f2b6:	f003 0101 	and.w	r1, r3, #1
 800f2ba:	9105      	str	r1, [sp, #20]
 800f2bc:	9805      	ldr	r0, [sp, #20]
 800f2be:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 800f2c2:	4403      	add	r3, r0
 800f2c4:	fb01 2303 	mla	r3, r1, r3, r2
 800f2c8:	f04f 0802 	mov.w	r8, #2
 800f2cc:	fb93 f3f8 	sdiv	r3, r3, r8
 800f2d0:	441d      	add	r5, r3
 800f2d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800f2d6:	441a      	add	r2, r3
 800f2d8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800f2dc:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800f2e0:	4419      	add	r1, r3
 800f2e2:	4b64      	ldr	r3, [pc, #400]	@ (800f474 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 800f2e4:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 800f2e8:	6818      	ldr	r0, [r3, #0]
 800f2ea:	6803      	ldr	r3, [r0, #0]
 800f2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ee:	4798      	blx	r3
 800f2f0:	4a61      	ldr	r2, [pc, #388]	@ (800f478 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 800f2f2:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 800f2f6:	8813      	ldrh	r3, [r2, #0]
 800f2f8:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 800f2fc:	2fff      	cmp	r7, #255	@ 0xff
 800f2fe:	fb03 a404 	mla	r4, r3, r4, sl
 800f302:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f306:	f106 0604 	add.w	r6, r6, #4
 800f30a:	4611      	mov	r1, r2
 800f30c:	fb03 fb0b 	mul.w	fp, r3, fp
 800f310:	d06b      	beq.n	800f3ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 800f312:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 800f316:	9303      	str	r3, [sp, #12]
 800f318:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 800f31c:	e9cd 3207 	strd	r3, r2, [sp, #28]
 800f320:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800f324:	9b07      	ldr	r3, [sp, #28]
 800f326:	42a3      	cmp	r3, r4
 800f328:	f240 809c 	bls.w	800f464 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 800f32c:	9b06      	ldr	r3, [sp, #24]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d039      	beq.n	800f3a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 800f332:	782b      	ldrb	r3, [r5, #0]
 800f334:	8822      	ldrh	r2, [r4, #0]
 800f336:	9804      	ldr	r0, [sp, #16]
 800f338:	f003 030f 	and.w	r3, r3, #15
 800f33c:	f105 0801 	add.w	r8, r5, #1
 800f340:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f344:	9b03      	ldr	r3, [sp, #12]
 800f346:	9300      	str	r3, [sp, #0]
 800f348:	463b      	mov	r3, r7
 800f34a:	f7ff ff53 	bl	800f1f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f34e:	f824 0b02 	strh.w	r0, [r4], #2
 800f352:	f109 3bff 	add.w	fp, r9, #4294967295
 800f356:	f1bb 0f01 	cmp.w	fp, #1
 800f35a:	46a2      	mov	sl, r4
 800f35c:	f104 0404 	add.w	r4, r4, #4
 800f360:	dd24      	ble.n	800f3ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 800f362:	f898 3000 	ldrb.w	r3, [r8]
 800f366:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800f36a:	9804      	ldr	r0, [sp, #16]
 800f36c:	091b      	lsrs	r3, r3, #4
 800f36e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f372:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f376:	9b03      	ldr	r3, [sp, #12]
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	463b      	mov	r3, r7
 800f37c:	f7ff ff3a 	bl	800f1f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f380:	f824 0c04 	strh.w	r0, [r4, #-4]
 800f384:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f388:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 800f38c:	9804      	ldr	r0, [sp, #16]
 800f38e:	f003 030f 	and.w	r3, r3, #15
 800f392:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f396:	9b03      	ldr	r3, [sp, #12]
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	463b      	mov	r3, r7
 800f39c:	f7ff ff2a 	bl	800f1f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f3a0:	f824 0c02 	strh.w	r0, [r4, #-2]
 800f3a4:	e7d7      	b.n	800f356 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 800f3a6:	46a8      	mov	r8, r5
 800f3a8:	46cb      	mov	fp, r9
 800f3aa:	e7d4      	b.n	800f356 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 800f3ac:	d10e      	bne.n	800f3cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 800f3ae:	f898 3000 	ldrb.w	r3, [r8]
 800f3b2:	f8ba 2000 	ldrh.w	r2, [sl]
 800f3b6:	9804      	ldr	r0, [sp, #16]
 800f3b8:	091b      	lsrs	r3, r3, #4
 800f3ba:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f3be:	9b03      	ldr	r3, [sp, #12]
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	463b      	mov	r3, r7
 800f3c4:	f7ff ff16 	bl	800f1f4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f3c8:	f82a 0b02 	strh.w	r0, [sl], #2
 800f3cc:	9b08      	ldr	r3, [sp, #32]
 800f3ce:	9a05      	ldr	r2, [sp, #20]
 800f3d0:	881c      	ldrh	r4, [r3, #0]
 800f3d2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f3d6:	eba4 0409 	sub.w	r4, r4, r9
 800f3da:	4413      	add	r3, r2
 800f3dc:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 800f3e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3e6:	441d      	add	r5, r3
 800f3e8:	e79c      	b.n	800f324 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 800f3ea:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 800f3ee:	45a3      	cmp	fp, r4
 800f3f0:	d938      	bls.n	800f464 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 800f3f2:	9b06      	ldr	r3, [sp, #24]
 800f3f4:	b1f3      	cbz	r3, 800f434 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 800f3f6:	782b      	ldrb	r3, [r5, #0]
 800f3f8:	f003 030f 	and.w	r3, r3, #15
 800f3fc:	1c6a      	adds	r2, r5, #1
 800f3fe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800f402:	8023      	strh	r3, [r4, #0]
 800f404:	f109 30ff 	add.w	r0, r9, #4294967295
 800f408:	3402      	adds	r4, #2
 800f40a:	2801      	cmp	r0, #1
 800f40c:	4623      	mov	r3, r4
 800f40e:	f104 0404 	add.w	r4, r4, #4
 800f412:	dd12      	ble.n	800f43a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 800f414:	7813      	ldrb	r3, [r2, #0]
 800f416:	091b      	lsrs	r3, r3, #4
 800f418:	3802      	subs	r0, #2
 800f41a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800f41e:	f824 3c04 	strh.w	r3, [r4, #-4]
 800f422:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f426:	f003 030f 	and.w	r3, r3, #15
 800f42a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800f42e:	f824 3c02 	strh.w	r3, [r4, #-2]
 800f432:	e7ea      	b.n	800f40a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 800f434:	462a      	mov	r2, r5
 800f436:	4648      	mov	r0, r9
 800f438:	e7e7      	b.n	800f40a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 800f43a:	d106      	bne.n	800f44a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 800f43c:	7812      	ldrb	r2, [r2, #0]
 800f43e:	0912      	lsrs	r2, r2, #4
 800f440:	3302      	adds	r3, #2
 800f442:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800f446:	f823 2c02 	strh.w	r2, [r3, #-2]
 800f44a:	880c      	ldrh	r4, [r1, #0]
 800f44c:	9a05      	ldr	r2, [sp, #20]
 800f44e:	eba4 0409 	sub.w	r4, r4, r9
 800f452:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800f456:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f45a:	4413      	add	r3, r2
 800f45c:	fb93 f3f8 	sdiv	r3, r3, r8
 800f460:	441d      	add	r5, r3
 800f462:	e7c4      	b.n	800f3ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 800f464:	4b03      	ldr	r3, [pc, #12]	@ (800f474 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 800f466:	6818      	ldr	r0, [r3, #0]
 800f468:	6803      	ldr	r3, [r0, #0]
 800f46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f46c:	4798      	blx	r3
 800f46e:	b00f      	add	sp, #60	@ 0x3c
 800f470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f474:	2001242c 	.word	0x2001242c
 800f478:	20012426 	.word	0x20012426

0800f47c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 800f47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800f482:	2dff      	cmp	r5, #255	@ 0xff
 800f484:	ea4f 2711 	mov.w	r7, r1, lsr #8
 800f488:	d10c      	bne.n	800f4a4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 800f48a:	2bff      	cmp	r3, #255	@ 0xff
 800f48c:	d10a      	bne.n	800f4a4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 800f48e:	4b25      	ldr	r3, [pc, #148]	@ (800f524 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 800f490:	0948      	lsrs	r0, r1, #5
 800f492:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800f496:	403b      	ands	r3, r7
 800f498:	4318      	orrs	r0, r3
 800f49a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800f49e:	4308      	orrs	r0, r1
 800f4a0:	b280      	uxth	r0, r0
 800f4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4a4:	fb15 f503 	smulbb	r5, r5, r3
 800f4a8:	b2ab      	uxth	r3, r5
 800f4aa:	1c5d      	adds	r5, r3, #1
 800f4ac:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 800f4b0:	1214      	asrs	r4, r2, #8
 800f4b2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800f4b6:	fa1f fc85 	uxth.w	ip, r5
 800f4ba:	10d6      	asrs	r6, r2, #3
 800f4bc:	00d0      	lsls	r0, r2, #3
 800f4be:	43ed      	mvns	r5, r5
 800f4c0:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800f4c4:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800f4c8:	b2eb      	uxtb	r3, r5
 800f4ca:	b2c0      	uxtb	r0, r0
 800f4cc:	fb12 f20c 	smulbb	r2, r2, ip
 800f4d0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800f4d4:	fb04 2403 	mla	r4, r4, r3, r2
 800f4d8:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 800f4dc:	b2c8      	uxtb	r0, r1
 800f4de:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800f4e2:	b2fd      	uxtb	r5, r7
 800f4e4:	fb10 f00c 	smulbb	r0, r0, ip
 800f4e8:	b2a4      	uxth	r4, r4
 800f4ea:	fb02 0003 	mla	r0, r2, r3, r0
 800f4ee:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 800f4f2:	fb15 f50c 	smulbb	r5, r5, ip
 800f4f6:	fb06 5503 	mla	r5, r6, r3, r5
 800f4fa:	b283      	uxth	r3, r0
 800f4fc:	1c60      	adds	r0, r4, #1
 800f4fe:	b2ad      	uxth	r5, r5
 800f500:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 800f504:	1c58      	adds	r0, r3, #1
 800f506:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800f50a:	1c6b      	adds	r3, r5, #1
 800f50c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 800f510:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 800f514:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800f518:	096d      	lsrs	r5, r5, #5
 800f51a:	4320      	orrs	r0, r4
 800f51c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800f520:	4328      	orrs	r0, r5
 800f522:	e7be      	b.n	800f4a2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 800f524:	00fff800 	.word	0x00fff800

0800f528 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	461c      	mov	r4, r3
 800f52e:	b08d      	sub	sp, #52	@ 0x34
 800f530:	460d      	mov	r5, r1
 800f532:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f534:	6861      	ldr	r1, [r4, #4]
 800f536:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 800f53a:	4680      	mov	r8, r0
 800f53c:	6820      	ldr	r0, [r4, #0]
 800f53e:	4616      	mov	r6, r2
 800f540:	aa08      	add	r2, sp, #32
 800f542:	c203      	stmia	r2!, {r0, r1}
 800f544:	6818      	ldr	r0, [r3, #0]
 800f546:	6859      	ldr	r1, [r3, #4]
 800f548:	aa0a      	add	r2, sp, #40	@ 0x28
 800f54a:	c203      	stmia	r2!, {r0, r1}
 800f54c:	a808      	add	r0, sp, #32
 800f54e:	f7fa fe91 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f552:	4621      	mov	r1, r4
 800f554:	a80a      	add	r0, sp, #40	@ 0x28
 800f556:	f7fa feb5 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f55a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 800f55e:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 800f562:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 800f566:	f002 0301 	and.w	r3, r2, #1
 800f56a:	9303      	str	r3, [sp, #12]
 800f56c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 800f570:	f003 0101 	and.w	r1, r3, #1
 800f574:	9102      	str	r1, [sp, #8]
 800f576:	9802      	ldr	r0, [sp, #8]
 800f578:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800f57c:	4403      	add	r3, r0
 800f57e:	fb01 2303 	mla	r3, r1, r3, r2
 800f582:	f04f 0a02 	mov.w	sl, #2
 800f586:	fb93 f3fa 	sdiv	r3, r3, sl
 800f58a:	441d      	add	r5, r3
 800f58c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f590:	441a      	add	r2, r3
 800f592:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f596:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800f59a:	4a3f      	ldr	r2, [pc, #252]	@ (800f698 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 800f59c:	9205      	str	r2, [sp, #20]
 800f59e:	4419      	add	r1, r3
 800f5a0:	6810      	ldr	r0, [r2, #0]
 800f5a2:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 800f5a6:	6803      	ldr	r3, [r0, #0]
 800f5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5aa:	4798      	blx	r3
 800f5ac:	4b3b      	ldr	r3, [pc, #236]	@ (800f69c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 800f5ae:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 800f5b2:	8819      	ldrh	r1, [r3, #0]
 800f5b4:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 800f5b8:	fb01 c404 	mla	r4, r1, r4, ip
 800f5bc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f5c0:	434f      	muls	r7, r1
 800f5c2:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 800f5c6:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 800f5ca:	3604      	adds	r6, #4
 800f5cc:	9204      	str	r2, [sp, #16]
 800f5ce:	9b04      	ldr	r3, [sp, #16]
 800f5d0:	429c      	cmp	r4, r3
 800f5d2:	d258      	bcs.n	800f686 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 800f5d4:	9b03      	ldr	r3, [sp, #12]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d034      	beq.n	800f644 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 800f5da:	782b      	ldrb	r3, [r5, #0]
 800f5dc:	f003 030f 	and.w	r3, r3, #15
 800f5e0:	1c6f      	adds	r7, r5, #1
 800f5e2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f5e6:	0e0b      	lsrs	r3, r1, #24
 800f5e8:	d006      	beq.n	800f5f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 800f5ea:	8822      	ldrh	r2, [r4, #0]
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	4640      	mov	r0, r8
 800f5f0:	464b      	mov	r3, r9
 800f5f2:	f7ff ff43 	bl	800f47c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800f5f6:	8020      	strh	r0, [r4, #0]
 800f5f8:	3402      	adds	r4, #2
 800f5fa:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f5fe:	f1ba 0f01 	cmp.w	sl, #1
 800f602:	dd22      	ble.n	800f64a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 800f604:	783b      	ldrb	r3, [r7, #0]
 800f606:	091b      	lsrs	r3, r3, #4
 800f608:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f60c:	0e0b      	lsrs	r3, r1, #24
 800f60e:	d006      	beq.n	800f61e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 800f610:	8822      	ldrh	r2, [r4, #0]
 800f612:	9300      	str	r3, [sp, #0]
 800f614:	4640      	mov	r0, r8
 800f616:	464b      	mov	r3, r9
 800f618:	f7ff ff30 	bl	800f47c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800f61c:	8020      	strh	r0, [r4, #0]
 800f61e:	f817 3b01 	ldrb.w	r3, [r7], #1
 800f622:	f003 030f 	and.w	r3, r3, #15
 800f626:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f62a:	0e0b      	lsrs	r3, r1, #24
 800f62c:	d006      	beq.n	800f63c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 800f62e:	8862      	ldrh	r2, [r4, #2]
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	4640      	mov	r0, r8
 800f634:	464b      	mov	r3, r9
 800f636:	f7ff ff21 	bl	800f47c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800f63a:	8060      	strh	r0, [r4, #2]
 800f63c:	3404      	adds	r4, #4
 800f63e:	f1aa 0a02 	sub.w	sl, sl, #2
 800f642:	e7dc      	b.n	800f5fe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 800f644:	462f      	mov	r7, r5
 800f646:	46da      	mov	sl, fp
 800f648:	e7d9      	b.n	800f5fe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 800f64a:	d10d      	bne.n	800f668 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 800f64c:	783b      	ldrb	r3, [r7, #0]
 800f64e:	091b      	lsrs	r3, r3, #4
 800f650:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f654:	0e0b      	lsrs	r3, r1, #24
 800f656:	d006      	beq.n	800f666 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 800f658:	8822      	ldrh	r2, [r4, #0]
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	4640      	mov	r0, r8
 800f65e:	464b      	mov	r3, r9
 800f660:	f7ff ff0c 	bl	800f47c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800f664:	8020      	strh	r0, [r4, #0]
 800f666:	3402      	adds	r4, #2
 800f668:	9b06      	ldr	r3, [sp, #24]
 800f66a:	9a02      	ldr	r2, [sp, #8]
 800f66c:	881b      	ldrh	r3, [r3, #0]
 800f66e:	eba3 030b 	sub.w	r3, r3, fp
 800f672:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f676:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 800f67a:	4413      	add	r3, r2
 800f67c:	9a07      	ldr	r2, [sp, #28]
 800f67e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f682:	441d      	add	r5, r3
 800f684:	e7a3      	b.n	800f5ce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 800f686:	9b05      	ldr	r3, [sp, #20]
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	6803      	ldr	r3, [r0, #0]
 800f68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f68e:	4798      	blx	r3
 800f690:	b00d      	add	sp, #52	@ 0x34
 800f692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f696:	bf00      	nop
 800f698:	2001242c 	.word	0x2001242c
 800f69c:	20012426 	.word	0x20012426

0800f6a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 800f6a0:	b570      	push	{r4, r5, r6, lr}
 800f6a2:	1214      	asrs	r4, r2, #8
 800f6a4:	788d      	ldrb	r5, [r1, #2]
 800f6a6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800f6aa:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800f6ae:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800f6b2:	fb15 f503 	smulbb	r5, r5, r3
 800f6b6:	fb04 5506 	mla	r5, r4, r6, r5
 800f6ba:	10d0      	asrs	r0, r2, #3
 800f6bc:	784c      	ldrb	r4, [r1, #1]
 800f6be:	7809      	ldrb	r1, [r1, #0]
 800f6c0:	00d2      	lsls	r2, r2, #3
 800f6c2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 800f6c6:	b2d2      	uxtb	r2, r2
 800f6c8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 800f6cc:	fb14 f403 	smulbb	r4, r4, r3
 800f6d0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800f6d4:	fb11 f303 	smulbb	r3, r1, r3
 800f6d8:	fb00 4406 	mla	r4, r0, r6, r4
 800f6dc:	fb02 3306 	mla	r3, r2, r6, r3
 800f6e0:	b2ad      	uxth	r5, r5
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	b2a4      	uxth	r4, r4
 800f6e6:	1c68      	adds	r0, r5, #1
 800f6e8:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 800f6ec:	1c62      	adds	r2, r4, #1
 800f6ee:	1c58      	adds	r0, r3, #1
 800f6f0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800f6f4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 800f6f8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800f6fc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800f700:	0964      	lsrs	r4, r4, #5
 800f702:	4328      	orrs	r0, r5
 800f704:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800f708:	4320      	orrs	r0, r4
 800f70a:	bd70      	pop	{r4, r5, r6, pc}

0800f70c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 800f70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f710:	b08f      	sub	sp, #60	@ 0x3c
 800f712:	461c      	mov	r4, r3
 800f714:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 800f718:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f71a:	4682      	mov	sl, r0
 800f71c:	460e      	mov	r6, r1
 800f71e:	4615      	mov	r5, r2
 800f720:	2f00      	cmp	r7, #0
 800f722:	f000 8142 	beq.w	800f9aa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 800f726:	6820      	ldr	r0, [r4, #0]
 800f728:	6861      	ldr	r1, [r4, #4]
 800f72a:	aa0a      	add	r2, sp, #40	@ 0x28
 800f72c:	c203      	stmia	r2!, {r0, r1}
 800f72e:	6818      	ldr	r0, [r3, #0]
 800f730:	6859      	ldr	r1, [r3, #4]
 800f732:	aa0c      	add	r2, sp, #48	@ 0x30
 800f734:	c203      	stmia	r2!, {r0, r1}
 800f736:	a80a      	add	r0, sp, #40	@ 0x28
 800f738:	f7fa fd9c 	bl	800a274 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f73c:	4621      	mov	r1, r4
 800f73e:	a80c      	add	r0, sp, #48	@ 0x30
 800f740:	f7fa fdc0 	bl	800a2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f744:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800f748:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 800f74c:	f002 0301 	and.w	r3, r2, #1
 800f750:	9306      	str	r3, [sp, #24]
 800f752:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f756:	f003 0101 	and.w	r1, r3, #1
 800f75a:	9105      	str	r1, [sp, #20]
 800f75c:	9805      	ldr	r0, [sp, #20]
 800f75e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 800f762:	4403      	add	r3, r0
 800f764:	fb01 2303 	mla	r3, r1, r3, r2
 800f768:	f04f 0802 	mov.w	r8, #2
 800f76c:	fb93 f3f8 	sdiv	r3, r3, r8
 800f770:	441e      	add	r6, r3
 800f772:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800f776:	441a      	add	r2, r3
 800f778:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800f77c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800f780:	4419      	add	r1, r3
 800f782:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800f786:	9303      	str	r3, [sp, #12]
 800f788:	4b89      	ldr	r3, [pc, #548]	@ (800f9b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 800f78a:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 800f78e:	6818      	ldr	r0, [r3, #0]
 800f790:	6803      	ldr	r3, [r0, #0]
 800f792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f794:	4798      	blx	r3
 800f796:	4a87      	ldr	r2, [pc, #540]	@ (800f9b4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 800f798:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 800f79c:	8813      	ldrh	r3, [r2, #0]
 800f79e:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 800f7a2:	2fff      	cmp	r7, #255	@ 0xff
 800f7a4:	fb03 9404 	mla	r4, r3, r4, r9
 800f7a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f7ac:	f105 0504 	add.w	r5, r5, #4
 800f7b0:	4694      	mov	ip, r2
 800f7b2:	fb03 f30b 	mul.w	r3, r3, fp
 800f7b6:	d071      	beq.n	800f89c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 800f7b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f7bc:	43f9      	mvns	r1, r7
 800f7be:	e9cd 3207 	strd	r3, r2, [sp, #28]
 800f7c2:	b2c9      	uxtb	r1, r1
 800f7c4:	9104      	str	r1, [sp, #16]
 800f7c6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800f7ca:	9b07      	ldr	r3, [sp, #28]
 800f7cc:	42a3      	cmp	r3, r4
 800f7ce:	f240 80e7 	bls.w	800f9a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 800f7d2:	9b06      	ldr	r3, [sp, #24]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d03d      	beq.n	800f854 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 800f7d8:	7831      	ldrb	r1, [r6, #0]
 800f7da:	9b04      	ldr	r3, [sp, #16]
 800f7dc:	8822      	ldrh	r2, [r4, #0]
 800f7de:	9300      	str	r3, [sp, #0]
 800f7e0:	f001 010f 	and.w	r1, r1, #15
 800f7e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f7e8:	463b      	mov	r3, r7
 800f7ea:	4429      	add	r1, r5
 800f7ec:	4650      	mov	r0, sl
 800f7ee:	f7ff ff57 	bl	800f6a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800f7f2:	9b03      	ldr	r3, [sp, #12]
 800f7f4:	f824 0b02 	strh.w	r0, [r4], #2
 800f7f8:	f106 0801 	add.w	r8, r6, #1
 800f7fc:	f103 3bff 	add.w	fp, r3, #4294967295
 800f800:	f1bb 0f01 	cmp.w	fp, #1
 800f804:	46a1      	mov	r9, r4
 800f806:	f104 0404 	add.w	r4, r4, #4
 800f80a:	dd27      	ble.n	800f85c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 800f80c:	f898 1000 	ldrb.w	r1, [r8]
 800f810:	9b04      	ldr	r3, [sp, #16]
 800f812:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	0909      	lsrs	r1, r1, #4
 800f81a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f81e:	463b      	mov	r3, r7
 800f820:	4429      	add	r1, r5
 800f822:	4650      	mov	r0, sl
 800f824:	f7ff ff3c 	bl	800f6a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800f828:	f824 0c04 	strh.w	r0, [r4, #-4]
 800f82c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f830:	9b04      	ldr	r3, [sp, #16]
 800f832:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	f001 010f 	and.w	r1, r1, #15
 800f83c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f840:	463b      	mov	r3, r7
 800f842:	4429      	add	r1, r5
 800f844:	4650      	mov	r0, sl
 800f846:	f7ff ff2b 	bl	800f6a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800f84a:	f1ab 0b02 	sub.w	fp, fp, #2
 800f84e:	f824 0c02 	strh.w	r0, [r4, #-2]
 800f852:	e7d5      	b.n	800f800 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 800f854:	46b0      	mov	r8, r6
 800f856:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f85a:	e7d1      	b.n	800f800 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 800f85c:	d10f      	bne.n	800f87e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 800f85e:	f898 1000 	ldrb.w	r1, [r8]
 800f862:	9b04      	ldr	r3, [sp, #16]
 800f864:	f8b9 2000 	ldrh.w	r2, [r9]
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	0909      	lsrs	r1, r1, #4
 800f86c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f870:	463b      	mov	r3, r7
 800f872:	4429      	add	r1, r5
 800f874:	4650      	mov	r0, sl
 800f876:	f7ff ff13 	bl	800f6a0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800f87a:	f829 0b02 	strh.w	r0, [r9], #2
 800f87e:	9b08      	ldr	r3, [sp, #32]
 800f880:	9a05      	ldr	r2, [sp, #20]
 800f882:	881c      	ldrh	r4, [r3, #0]
 800f884:	9b03      	ldr	r3, [sp, #12]
 800f886:	1ae4      	subs	r4, r4, r3
 800f888:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f88c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 800f890:	4413      	add	r3, r2
 800f892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f894:	fb93 f3f2 	sdiv	r3, r3, r2
 800f898:	441e      	add	r6, r3
 800f89a:	e796      	b.n	800f7ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 800f89c:	4f46      	ldr	r7, [pc, #280]	@ (800f9b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 800f89e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f8a2:	42a3      	cmp	r3, r4
 800f8a4:	d97c      	bls.n	800f9a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 800f8a6:	9a06      	ldr	r2, [sp, #24]
 800f8a8:	2a00      	cmp	r2, #0
 800f8aa:	d054      	beq.n	800f956 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 800f8ac:	7830      	ldrb	r0, [r6, #0]
 800f8ae:	f000 000f 	and.w	r0, r0, #15
 800f8b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800f8b6:	eb05 0e00 	add.w	lr, r5, r0
 800f8ba:	5c28      	ldrb	r0, [r5, r0]
 800f8bc:	f89e 2002 	ldrb.w	r2, [lr, #2]
 800f8c0:	f89e e001 	ldrb.w	lr, [lr, #1]
 800f8c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800f8c8:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 800f8cc:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 800f8d0:	ea42 020e 	orr.w	r2, r2, lr
 800f8d4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 800f8d8:	f824 2b02 	strh.w	r2, [r4], #2
 800f8dc:	9a03      	ldr	r2, [sp, #12]
 800f8de:	1c71      	adds	r1, r6, #1
 800f8e0:	f102 3eff 	add.w	lr, r2, #4294967295
 800f8e4:	f1be 0f01 	cmp.w	lr, #1
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f104 0404 	add.w	r4, r4, #4
 800f8ee:	dd36      	ble.n	800f95e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 800f8f0:	7808      	ldrb	r0, [r1, #0]
 800f8f2:	0900      	lsrs	r0, r0, #4
 800f8f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800f8f8:	eb05 0a00 	add.w	sl, r5, r0
 800f8fc:	f1ae 0e02 	sub.w	lr, lr, #2
 800f900:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800f904:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800f908:	00d2      	lsls	r2, r2, #3
 800f90a:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 800f90e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800f912:	ea49 0202 	orr.w	r2, r9, r2
 800f916:	f815 9000 	ldrb.w	r9, [r5, r0]
 800f91a:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 800f91e:	f824 2c04 	strh.w	r2, [r4, #-4]
 800f922:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f926:	f000 000f 	and.w	r0, r0, #15
 800f92a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800f92e:	eb05 0a00 	add.w	sl, r5, r0
 800f932:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800f936:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800f93a:	00d2      	lsls	r2, r2, #3
 800f93c:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 800f940:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800f944:	ea49 0202 	orr.w	r2, r9, r2
 800f948:	f815 9000 	ldrb.w	r9, [r5, r0]
 800f94c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 800f950:	f824 2c02 	strh.w	r2, [r4, #-2]
 800f954:	e7c6      	b.n	800f8e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 800f956:	4631      	mov	r1, r6
 800f958:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800f95c:	e7c2      	b.n	800f8e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 800f95e:	d111      	bne.n	800f984 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 800f960:	7809      	ldrb	r1, [r1, #0]
 800f962:	0909      	lsrs	r1, r1, #4
 800f964:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f968:	186c      	adds	r4, r5, r1
 800f96a:	5c69      	ldrb	r1, [r5, r1]
 800f96c:	78a2      	ldrb	r2, [r4, #2]
 800f96e:	7864      	ldrb	r4, [r4, #1]
 800f970:	00e4      	lsls	r4, r4, #3
 800f972:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 800f976:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800f97a:	4322      	orrs	r2, r4
 800f97c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 800f980:	f820 2b02 	strh.w	r2, [r0], #2
 800f984:	9a03      	ldr	r2, [sp, #12]
 800f986:	f8bc 4000 	ldrh.w	r4, [ip]
 800f98a:	9905      	ldr	r1, [sp, #20]
 800f98c:	1aa4      	subs	r4, r4, r2
 800f98e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800f992:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f996:	440a      	add	r2, r1
 800f998:	fb92 f2f8 	sdiv	r2, r2, r8
 800f99c:	4416      	add	r6, r2
 800f99e:	e780      	b.n	800f8a2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 800f9a0:	4b03      	ldr	r3, [pc, #12]	@ (800f9b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 800f9a2:	6818      	ldr	r0, [r3, #0]
 800f9a4:	6803      	ldr	r3, [r0, #0]
 800f9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9a8:	4798      	blx	r3
 800f9aa:	b00f      	add	sp, #60	@ 0x3c
 800f9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b0:	2001242c 	.word	0x2001242c
 800f9b4:	20012426 	.word	0x20012426
 800f9b8:	fffff800 	.word	0xfffff800

0800f9bc <CRC_Lock>:
 800f9bc:	b530      	push	{r4, r5, lr}
 800f9be:	4a2d      	ldr	r2, [pc, #180]	@ (800fa74 <CRC_Lock+0xb8>)
 800f9c0:	6813      	ldr	r3, [r2, #0]
 800f9c2:	f023 0301 	bic.w	r3, r3, #1
 800f9c6:	6013      	str	r3, [r2, #0]
 800f9c8:	4b2b      	ldr	r3, [pc, #172]	@ (800fa78 <CRC_Lock+0xbc>)
 800f9ca:	681c      	ldr	r4, [r3, #0]
 800f9cc:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800f9d0:	4014      	ands	r4, r2
 800f9d2:	f24c 2540 	movw	r5, #49728	@ 0xc240
 800f9d6:	42ac      	cmp	r4, r5
 800f9d8:	d005      	beq.n	800f9e6 <CRC_Lock+0x2a>
 800f9da:	681c      	ldr	r4, [r3, #0]
 800f9dc:	f24c 2570 	movw	r5, #49776	@ 0xc270
 800f9e0:	4014      	ands	r4, r2
 800f9e2:	42ac      	cmp	r4, r5
 800f9e4:	d125      	bne.n	800fa32 <CRC_Lock+0x76>
 800f9e6:	4b25      	ldr	r3, [pc, #148]	@ (800fa7c <CRC_Lock+0xc0>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d139      	bne.n	800fa62 <CRC_Lock+0xa6>
 800f9ee:	4b24      	ldr	r3, [pc, #144]	@ (800fa80 <CRC_Lock+0xc4>)
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800f9f6:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 800f9fa:	d00d      	beq.n	800fa18 <CRC_Lock+0x5c>
 800f9fc:	681a      	ldr	r2, [r3, #0]
 800f9fe:	f240 4483 	movw	r4, #1155	@ 0x483
 800fa02:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800fa06:	42a2      	cmp	r2, r4
 800fa08:	d006      	beq.n	800fa18 <CRC_Lock+0x5c>
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f240 4285 	movw	r2, #1157	@ 0x485
 800fa10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d124      	bne.n	800fa62 <CRC_Lock+0xa6>
 800fa18:	4b1a      	ldr	r3, [pc, #104]	@ (800fa84 <CRC_Lock+0xc8>)
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	601a      	str	r2, [r3, #0]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	2a00      	cmp	r2, #0
 800fa22:	d1fc      	bne.n	800fa1e <CRC_Lock+0x62>
 800fa24:	4b18      	ldr	r3, [pc, #96]	@ (800fa88 <CRC_Lock+0xcc>)
 800fa26:	6018      	str	r0, [r3, #0]
 800fa28:	6818      	ldr	r0, [r3, #0]
 800fa2a:	1a43      	subs	r3, r0, r1
 800fa2c:	4258      	negs	r0, r3
 800fa2e:	4158      	adcs	r0, r3
 800fa30:	e00e      	b.n	800fa50 <CRC_Lock+0x94>
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4013      	ands	r3, r2
 800fa36:	f24d 2220 	movw	r2, #53792	@ 0xd220
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d111      	bne.n	800fa62 <CRC_Lock+0xa6>
 800fa3e:	4b13      	ldr	r3, [pc, #76]	@ (800fa8c <CRC_Lock+0xd0>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f240 4286 	movw	r2, #1158	@ 0x486
 800fa46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d001      	beq.n	800fa52 <CRC_Lock+0x96>
 800fa4e:	2000      	movs	r0, #0
 800fa50:	bd30      	pop	{r4, r5, pc}
 800fa52:	4b0f      	ldr	r3, [pc, #60]	@ (800fa90 <CRC_Lock+0xd4>)
 800fa54:	2201      	movs	r2, #1
 800fa56:	601a      	str	r2, [r3, #0]
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	2a00      	cmp	r2, #0
 800fa5c:	d1fc      	bne.n	800fa58 <CRC_Lock+0x9c>
 800fa5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa94 <CRC_Lock+0xd8>)
 800fa60:	e7e1      	b.n	800fa26 <CRC_Lock+0x6a>
 800fa62:	4b0d      	ldr	r3, [pc, #52]	@ (800fa98 <CRC_Lock+0xdc>)
 800fa64:	2201      	movs	r2, #1
 800fa66:	601a      	str	r2, [r3, #0]
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	2a00      	cmp	r2, #0
 800fa6c:	d1fc      	bne.n	800fa68 <CRC_Lock+0xac>
 800fa6e:	4b0b      	ldr	r3, [pc, #44]	@ (800fa9c <CRC_Lock+0xe0>)
 800fa70:	e7d9      	b.n	800fa26 <CRC_Lock+0x6a>
 800fa72:	bf00      	nop
 800fa74:	e0002000 	.word	0xe0002000
 800fa78:	e000ed00 	.word	0xe000ed00
 800fa7c:	e0042000 	.word	0xe0042000
 800fa80:	5c001000 	.word	0x5c001000
 800fa84:	58024c08 	.word	0x58024c08
 800fa88:	58024c00 	.word	0x58024c00
 800fa8c:	46008ff0 	.word	0x46008ff0
 800fa90:	46024c08 	.word	0x46024c08
 800fa94:	46024c00 	.word	0x46024c00
 800fa98:	40023008 	.word	0x40023008
 800fa9c:	40023000 	.word	0x40023000

0800faa0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 800faa0:	6101      	str	r1, [r0, #16]
 800faa2:	4770      	bx	lr

0800faa4 <_ZN8touchgfx8Gestures4tickEv>:
 800faa4:	7b83      	ldrb	r3, [r0, #14]
 800faa6:	b14b      	cbz	r3, 800fabc <_ZN8touchgfx8Gestures4tickEv+0x18>
 800faa8:	8903      	ldrh	r3, [r0, #8]
 800faaa:	3301      	adds	r3, #1
 800faac:	b29b      	uxth	r3, r3
 800faae:	2b07      	cmp	r3, #7
 800fab0:	8103      	strh	r3, [r0, #8]
 800fab2:	bf81      	itttt	hi
 800fab4:	2300      	movhi	r3, #0
 800fab6:	8143      	strhhi	r3, [r0, #10]
 800fab8:	8183      	strhhi	r3, [r0, #12]
 800faba:	7383      	strbhi	r3, [r0, #14]
 800fabc:	4770      	bx	lr
	...

0800fac0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 800fac0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fac4:	4698      	mov	r8, r3
 800fac6:	8883      	ldrh	r3, [r0, #4]
 800fac8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800facc:	eba8 0303 	sub.w	r3, r8, r3
 800fad0:	b21b      	sxth	r3, r3
 800fad2:	4604      	mov	r4, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	4617      	mov	r7, r2
 800fad8:	4a18      	ldr	r2, [pc, #96]	@ (800fb3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 800fada:	9200      	str	r2, [sp, #0]
 800fadc:	bfb8      	it	lt
 800fade:	425b      	neglt	r3, r3
 800fae0:	8aa2      	ldrh	r2, [r4, #20]
 800fae2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 800fae6:	f8ad 800a 	strh.w	r8, [sp, #10]
 800faea:	b21b      	sxth	r3, r3
 800faec:	460e      	mov	r6, r1
 800faee:	4293      	cmp	r3, r2
 800faf0:	88c1      	ldrh	r1, [r0, #6]
 800faf2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800faf6:	f04f 0000 	mov.w	r0, #0
 800fafa:	f88d 0004 	strb.w	r0, [sp, #4]
 800fafe:	f8ad 500c 	strh.w	r5, [sp, #12]
 800fb02:	dc07      	bgt.n	800fb14 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 800fb04:	1a69      	subs	r1, r5, r1
 800fb06:	b209      	sxth	r1, r1
 800fb08:	2900      	cmp	r1, #0
 800fb0a:	bfb8      	it	lt
 800fb0c:	4249      	neglt	r1, r1
 800fb0e:	b209      	sxth	r1, r1
 800fb10:	428a      	cmp	r2, r1
 800fb12:	da10      	bge.n	800fb36 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 800fb14:	6920      	ldr	r0, [r4, #16]
 800fb16:	6803      	ldr	r3, [r0, #0]
 800fb18:	4669      	mov	r1, sp
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	4798      	blx	r3
 800fb1e:	eba8 0606 	sub.w	r6, r8, r6
 800fb22:	2300      	movs	r3, #0
 800fb24:	1bef      	subs	r7, r5, r7
 800fb26:	2001      	movs	r0, #1
 800fb28:	8123      	strh	r3, [r4, #8]
 800fb2a:	8166      	strh	r6, [r4, #10]
 800fb2c:	81a7      	strh	r7, [r4, #12]
 800fb2e:	f8a4 8004 	strh.w	r8, [r4, #4]
 800fb32:	80e5      	strh	r5, [r4, #6]
 800fb34:	73a0      	strb	r0, [r4, #14]
 800fb36:	b004      	add	sp, #16
 800fb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb3c:	08012270 	.word	0x08012270

0800fb40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 800fb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb42:	461e      	mov	r6, r3
 800fb44:	1e4b      	subs	r3, r1, #1
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	b085      	sub	sp, #20
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	460d      	mov	r5, r1
 800fb4e:	4617      	mov	r7, r2
 800fb50:	d84b      	bhi.n	800fbea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 800fb52:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800fb56:	1cd3      	adds	r3, r2, #3
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	2b06      	cmp	r3, #6
 800fb5c:	d916      	bls.n	800fb8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 800fb5e:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 800fc00 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800fb62:	f8cd c004 	str.w	ip, [sp, #4]
 800fb66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fb6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800fb6e:	6900      	ldr	r0, [r0, #16]
 800fb70:	f8ad 100c 	strh.w	r1, [sp, #12]
 800fb74:	f04f 0c00 	mov.w	ip, #0
 800fb78:	f88d c008 	strb.w	ip, [sp, #8]
 800fb7c:	f8ad 200a 	strh.w	r2, [sp, #10]
 800fb80:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fb84:	6803      	ldr	r3, [r0, #0]
 800fb86:	a901      	add	r1, sp, #4
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	4798      	blx	r3
 800fb8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb90:	1cd3      	adds	r3, r2, #3
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	2b06      	cmp	r3, #6
 800fb96:	d916      	bls.n	800fbc6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800fb98:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800fc00 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800fb9c:	f8cd c004 	str.w	ip, [sp, #4]
 800fba0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fba4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800fba8:	6920      	ldr	r0, [r4, #16]
 800fbaa:	f8ad 100c 	strh.w	r1, [sp, #12]
 800fbae:	f04f 0c01 	mov.w	ip, #1
 800fbb2:	f88d c008 	strb.w	ip, [sp, #8]
 800fbb6:	f8ad 200a 	strh.w	r2, [sp, #10]
 800fbba:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fbbe:	6803      	ldr	r3, [r0, #0]
 800fbc0:	a901      	add	r1, sp, #4
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	4798      	blx	r3
 800fbc6:	4b0d      	ldr	r3, [pc, #52]	@ (800fbfc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 800fbc8:	9301      	str	r3, [sp, #4]
 800fbca:	6920      	ldr	r0, [r4, #16]
 800fbcc:	f88d 5008 	strb.w	r5, [sp, #8]
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	f8ad 700a 	strh.w	r7, [sp, #10]
 800fbd6:	f8ad 600c 	strh.w	r6, [sp, #12]
 800fbda:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fbde:	6803      	ldr	r3, [r0, #0]
 800fbe0:	a901      	add	r1, sp, #4
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4798      	blx	r3
 800fbe6:	b005      	add	sp, #20
 800fbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbea:	2900      	cmp	r1, #0
 800fbec:	d1eb      	bne.n	800fbc6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800fbee:	80a2      	strh	r2, [r4, #4]
 800fbf0:	80c6      	strh	r6, [r0, #6]
 800fbf2:	60a1      	str	r1, [r4, #8]
 800fbf4:	81a1      	strh	r1, [r4, #12]
 800fbf6:	73a1      	strb	r1, [r4, #14]
 800fbf8:	e7e5      	b.n	800fbc6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800fbfa:	bf00      	nop
 800fbfc:	0801225c 	.word	0x0801225c
 800fc00:	08012284 	.word	0x08012284

0800fc04 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800fc04:	b570      	push	{r4, r5, r6, lr}
 800fc06:	790b      	ldrb	r3, [r1, #4]
 800fc08:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	bf0c      	ite	eq
 800fc10:	2301      	moveq	r3, #1
 800fc12:	2300      	movne	r3, #0
 800fc14:	4604      	mov	r4, r0
 800fc16:	460e      	mov	r6, r1
 800fc18:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 800fc1c:	d109      	bne.n	800fc32 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 800fc1e:	b14d      	cbz	r5, 800fc34 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 800fc20:	7933      	ldrb	r3, [r6, #4]
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d10c      	bne.n	800fc40 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800fc26:	6823      	ldr	r3, [r4, #0]
 800fc28:	4620      	mov	r0, r4
 800fc2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fc2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc30:	4718      	bx	r3
 800fc32:	b12d      	cbz	r5, 800fc40 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	4620      	mov	r0, r4
 800fc38:	695b      	ldr	r3, [r3, #20]
 800fc3a:	4798      	blx	r3
 800fc3c:	2d00      	cmp	r5, #0
 800fc3e:	d1ef      	bne.n	800fc20 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800fc40:	bd70      	pop	{r4, r5, r6, pc}

0800fc42 <__aeabi_atexit>:
 800fc42:	460b      	mov	r3, r1
 800fc44:	4601      	mov	r1, r0
 800fc46:	4618      	mov	r0, r3
 800fc48:	f000 b910 	b.w	800fe6c <__cxa_atexit>

0800fc4c <_ZdlPvj>:
 800fc4c:	f000 b812 	b.w	800fc74 <_ZdlPv>

0800fc50 <__cxa_guard_acquire>:
 800fc50:	6802      	ldr	r2, [r0, #0]
 800fc52:	07d2      	lsls	r2, r2, #31
 800fc54:	4603      	mov	r3, r0
 800fc56:	d405      	bmi.n	800fc64 <__cxa_guard_acquire+0x14>
 800fc58:	7842      	ldrb	r2, [r0, #1]
 800fc5a:	b102      	cbz	r2, 800fc5e <__cxa_guard_acquire+0xe>
 800fc5c:	deff      	udf	#255	@ 0xff
 800fc5e:	2001      	movs	r0, #1
 800fc60:	7058      	strb	r0, [r3, #1]
 800fc62:	4770      	bx	lr
 800fc64:	2000      	movs	r0, #0
 800fc66:	4770      	bx	lr

0800fc68 <__cxa_guard_release>:
 800fc68:	2301      	movs	r3, #1
 800fc6a:	6003      	str	r3, [r0, #0]
 800fc6c:	4770      	bx	lr

0800fc6e <__cxa_pure_virtual>:
 800fc6e:	b508      	push	{r3, lr}
 800fc70:	f000 f80e 	bl	800fc90 <_ZSt9terminatev>

0800fc74 <_ZdlPv>:
 800fc74:	f000 b844 	b.w	800fd00 <free>

0800fc78 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800fc78:	b508      	push	{r3, lr}
 800fc7a:	4780      	blx	r0
 800fc7c:	f000 f80d 	bl	800fc9a <abort>

0800fc80 <_ZSt13get_terminatev>:
 800fc80:	4b02      	ldr	r3, [pc, #8]	@ (800fc8c <_ZSt13get_terminatev+0xc>)
 800fc82:	6818      	ldr	r0, [r3, #0]
 800fc84:	f3bf 8f5b 	dmb	ish
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop
 800fc8c:	2000008c 	.word	0x2000008c

0800fc90 <_ZSt9terminatev>:
 800fc90:	b508      	push	{r3, lr}
 800fc92:	f7ff fff5 	bl	800fc80 <_ZSt13get_terminatev>
 800fc96:	f7ff ffef 	bl	800fc78 <_ZN10__cxxabiv111__terminateEPFvvE>

0800fc9a <abort>:
 800fc9a:	b508      	push	{r3, lr}
 800fc9c:	2006      	movs	r0, #6
 800fc9e:	f000 fa3b 	bl	8010118 <raise>
 800fca2:	2001      	movs	r0, #1
 800fca4:	f7f2 f89e 	bl	8001de4 <_exit>

0800fca8 <__assert_func>:
 800fca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcaa:	4614      	mov	r4, r2
 800fcac:	461a      	mov	r2, r3
 800fcae:	4b09      	ldr	r3, [pc, #36]	@ (800fcd4 <__assert_func+0x2c>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4605      	mov	r5, r0
 800fcb4:	68d8      	ldr	r0, [r3, #12]
 800fcb6:	b954      	cbnz	r4, 800fcce <__assert_func+0x26>
 800fcb8:	4b07      	ldr	r3, [pc, #28]	@ (800fcd8 <__assert_func+0x30>)
 800fcba:	461c      	mov	r4, r3
 800fcbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fcc0:	9100      	str	r1, [sp, #0]
 800fcc2:	462b      	mov	r3, r5
 800fcc4:	4905      	ldr	r1, [pc, #20]	@ (800fcdc <__assert_func+0x34>)
 800fcc6:	f000 f983 	bl	800ffd0 <fiprintf>
 800fcca:	f7ff ffe6 	bl	800fc9a <abort>
 800fcce:	4b04      	ldr	r3, [pc, #16]	@ (800fce0 <__assert_func+0x38>)
 800fcd0:	e7f4      	b.n	800fcbc <__assert_func+0x14>
 800fcd2:	bf00      	nop
 800fcd4:	2000009c 	.word	0x2000009c
 800fcd8:	08012373 	.word	0x08012373
 800fcdc:	08012345 	.word	0x08012345
 800fce0:	08012338 	.word	0x08012338

0800fce4 <atexit>:
 800fce4:	2300      	movs	r3, #0
 800fce6:	4601      	mov	r1, r0
 800fce8:	461a      	mov	r2, r3
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 bac2 	b.w	8010274 <__register_exitproc>

0800fcf0 <malloc>:
 800fcf0:	4b02      	ldr	r3, [pc, #8]	@ (800fcfc <malloc+0xc>)
 800fcf2:	4601      	mov	r1, r0
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	f000 b82d 	b.w	800fd54 <_malloc_r>
 800fcfa:	bf00      	nop
 800fcfc:	2000009c 	.word	0x2000009c

0800fd00 <free>:
 800fd00:	4b02      	ldr	r3, [pc, #8]	@ (800fd0c <free+0xc>)
 800fd02:	4601      	mov	r1, r0
 800fd04:	6818      	ldr	r0, [r3, #0]
 800fd06:	f000 bb11 	b.w	801032c <_free_r>
 800fd0a:	bf00      	nop
 800fd0c:	2000009c 	.word	0x2000009c

0800fd10 <sbrk_aligned>:
 800fd10:	b570      	push	{r4, r5, r6, lr}
 800fd12:	4e0f      	ldr	r6, [pc, #60]	@ (800fd50 <sbrk_aligned+0x40>)
 800fd14:	460c      	mov	r4, r1
 800fd16:	6831      	ldr	r1, [r6, #0]
 800fd18:	4605      	mov	r5, r0
 800fd1a:	b911      	cbnz	r1, 800fd22 <sbrk_aligned+0x12>
 800fd1c:	f000 fa4c 	bl	80101b8 <_sbrk_r>
 800fd20:	6030      	str	r0, [r6, #0]
 800fd22:	4621      	mov	r1, r4
 800fd24:	4628      	mov	r0, r5
 800fd26:	f000 fa47 	bl	80101b8 <_sbrk_r>
 800fd2a:	1c43      	adds	r3, r0, #1
 800fd2c:	d103      	bne.n	800fd36 <sbrk_aligned+0x26>
 800fd2e:	f04f 34ff 	mov.w	r4, #4294967295
 800fd32:	4620      	mov	r0, r4
 800fd34:	bd70      	pop	{r4, r5, r6, pc}
 800fd36:	1cc4      	adds	r4, r0, #3
 800fd38:	f024 0403 	bic.w	r4, r4, #3
 800fd3c:	42a0      	cmp	r0, r4
 800fd3e:	d0f8      	beq.n	800fd32 <sbrk_aligned+0x22>
 800fd40:	1a21      	subs	r1, r4, r0
 800fd42:	4628      	mov	r0, r5
 800fd44:	f000 fa38 	bl	80101b8 <_sbrk_r>
 800fd48:	3001      	adds	r0, #1
 800fd4a:	d1f2      	bne.n	800fd32 <sbrk_aligned+0x22>
 800fd4c:	e7ef      	b.n	800fd2e <sbrk_aligned+0x1e>
 800fd4e:	bf00      	nop
 800fd50:	200124bc 	.word	0x200124bc

0800fd54 <_malloc_r>:
 800fd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd58:	1ccd      	adds	r5, r1, #3
 800fd5a:	f025 0503 	bic.w	r5, r5, #3
 800fd5e:	3508      	adds	r5, #8
 800fd60:	2d0c      	cmp	r5, #12
 800fd62:	bf38      	it	cc
 800fd64:	250c      	movcc	r5, #12
 800fd66:	2d00      	cmp	r5, #0
 800fd68:	4606      	mov	r6, r0
 800fd6a:	db01      	blt.n	800fd70 <_malloc_r+0x1c>
 800fd6c:	42a9      	cmp	r1, r5
 800fd6e:	d904      	bls.n	800fd7a <_malloc_r+0x26>
 800fd70:	230c      	movs	r3, #12
 800fd72:	6033      	str	r3, [r6, #0]
 800fd74:	2000      	movs	r0, #0
 800fd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fe50 <_malloc_r+0xfc>
 800fd7e:	f000 f869 	bl	800fe54 <__malloc_lock>
 800fd82:	f8d8 3000 	ldr.w	r3, [r8]
 800fd86:	461c      	mov	r4, r3
 800fd88:	bb44      	cbnz	r4, 800fddc <_malloc_r+0x88>
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	f7ff ffbf 	bl	800fd10 <sbrk_aligned>
 800fd92:	1c43      	adds	r3, r0, #1
 800fd94:	4604      	mov	r4, r0
 800fd96:	d158      	bne.n	800fe4a <_malloc_r+0xf6>
 800fd98:	f8d8 4000 	ldr.w	r4, [r8]
 800fd9c:	4627      	mov	r7, r4
 800fd9e:	2f00      	cmp	r7, #0
 800fda0:	d143      	bne.n	800fe2a <_malloc_r+0xd6>
 800fda2:	2c00      	cmp	r4, #0
 800fda4:	d04b      	beq.n	800fe3e <_malloc_r+0xea>
 800fda6:	6823      	ldr	r3, [r4, #0]
 800fda8:	4639      	mov	r1, r7
 800fdaa:	4630      	mov	r0, r6
 800fdac:	eb04 0903 	add.w	r9, r4, r3
 800fdb0:	f000 fa02 	bl	80101b8 <_sbrk_r>
 800fdb4:	4581      	cmp	r9, r0
 800fdb6:	d142      	bne.n	800fe3e <_malloc_r+0xea>
 800fdb8:	6821      	ldr	r1, [r4, #0]
 800fdba:	1a6d      	subs	r5, r5, r1
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	f7ff ffa6 	bl	800fd10 <sbrk_aligned>
 800fdc4:	3001      	adds	r0, #1
 800fdc6:	d03a      	beq.n	800fe3e <_malloc_r+0xea>
 800fdc8:	6823      	ldr	r3, [r4, #0]
 800fdca:	442b      	add	r3, r5
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	f8d8 3000 	ldr.w	r3, [r8]
 800fdd2:	685a      	ldr	r2, [r3, #4]
 800fdd4:	bb62      	cbnz	r2, 800fe30 <_malloc_r+0xdc>
 800fdd6:	f8c8 7000 	str.w	r7, [r8]
 800fdda:	e00f      	b.n	800fdfc <_malloc_r+0xa8>
 800fddc:	6822      	ldr	r2, [r4, #0]
 800fdde:	1b52      	subs	r2, r2, r5
 800fde0:	d420      	bmi.n	800fe24 <_malloc_r+0xd0>
 800fde2:	2a0b      	cmp	r2, #11
 800fde4:	d917      	bls.n	800fe16 <_malloc_r+0xc2>
 800fde6:	1961      	adds	r1, r4, r5
 800fde8:	42a3      	cmp	r3, r4
 800fdea:	6025      	str	r5, [r4, #0]
 800fdec:	bf18      	it	ne
 800fdee:	6059      	strne	r1, [r3, #4]
 800fdf0:	6863      	ldr	r3, [r4, #4]
 800fdf2:	bf08      	it	eq
 800fdf4:	f8c8 1000 	streq.w	r1, [r8]
 800fdf8:	5162      	str	r2, [r4, r5]
 800fdfa:	604b      	str	r3, [r1, #4]
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	f000 f82f 	bl	800fe60 <__malloc_unlock>
 800fe02:	f104 000b 	add.w	r0, r4, #11
 800fe06:	1d23      	adds	r3, r4, #4
 800fe08:	f020 0007 	bic.w	r0, r0, #7
 800fe0c:	1ac2      	subs	r2, r0, r3
 800fe0e:	bf1c      	itt	ne
 800fe10:	1a1b      	subne	r3, r3, r0
 800fe12:	50a3      	strne	r3, [r4, r2]
 800fe14:	e7af      	b.n	800fd76 <_malloc_r+0x22>
 800fe16:	6862      	ldr	r2, [r4, #4]
 800fe18:	42a3      	cmp	r3, r4
 800fe1a:	bf0c      	ite	eq
 800fe1c:	f8c8 2000 	streq.w	r2, [r8]
 800fe20:	605a      	strne	r2, [r3, #4]
 800fe22:	e7eb      	b.n	800fdfc <_malloc_r+0xa8>
 800fe24:	4623      	mov	r3, r4
 800fe26:	6864      	ldr	r4, [r4, #4]
 800fe28:	e7ae      	b.n	800fd88 <_malloc_r+0x34>
 800fe2a:	463c      	mov	r4, r7
 800fe2c:	687f      	ldr	r7, [r7, #4]
 800fe2e:	e7b6      	b.n	800fd9e <_malloc_r+0x4a>
 800fe30:	461a      	mov	r2, r3
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	42a3      	cmp	r3, r4
 800fe36:	d1fb      	bne.n	800fe30 <_malloc_r+0xdc>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	6053      	str	r3, [r2, #4]
 800fe3c:	e7de      	b.n	800fdfc <_malloc_r+0xa8>
 800fe3e:	230c      	movs	r3, #12
 800fe40:	6033      	str	r3, [r6, #0]
 800fe42:	4630      	mov	r0, r6
 800fe44:	f000 f80c 	bl	800fe60 <__malloc_unlock>
 800fe48:	e794      	b.n	800fd74 <_malloc_r+0x20>
 800fe4a:	6005      	str	r5, [r0, #0]
 800fe4c:	e7d6      	b.n	800fdfc <_malloc_r+0xa8>
 800fe4e:	bf00      	nop
 800fe50:	200124c0 	.word	0x200124c0

0800fe54 <__malloc_lock>:
 800fe54:	4801      	ldr	r0, [pc, #4]	@ (800fe5c <__malloc_lock+0x8>)
 800fe56:	f000 b9fc 	b.w	8010252 <__retarget_lock_acquire_recursive>
 800fe5a:	bf00      	nop
 800fe5c:	20012604 	.word	0x20012604

0800fe60 <__malloc_unlock>:
 800fe60:	4801      	ldr	r0, [pc, #4]	@ (800fe68 <__malloc_unlock+0x8>)
 800fe62:	f000 b9f7 	b.w	8010254 <__retarget_lock_release_recursive>
 800fe66:	bf00      	nop
 800fe68:	20012604 	.word	0x20012604

0800fe6c <__cxa_atexit>:
 800fe6c:	b510      	push	{r4, lr}
 800fe6e:	4604      	mov	r4, r0
 800fe70:	4804      	ldr	r0, [pc, #16]	@ (800fe84 <__cxa_atexit+0x18>)
 800fe72:	4613      	mov	r3, r2
 800fe74:	b120      	cbz	r0, 800fe80 <__cxa_atexit+0x14>
 800fe76:	460a      	mov	r2, r1
 800fe78:	2002      	movs	r0, #2
 800fe7a:	4621      	mov	r1, r4
 800fe7c:	f000 f9fa 	bl	8010274 <__register_exitproc>
 800fe80:	bd10      	pop	{r4, pc}
 800fe82:	bf00      	nop
 800fe84:	08010275 	.word	0x08010275

0800fe88 <std>:
 800fe88:	2300      	movs	r3, #0
 800fe8a:	b510      	push	{r4, lr}
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	e9c0 3300 	strd	r3, r3, [r0]
 800fe92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe96:	6083      	str	r3, [r0, #8]
 800fe98:	8181      	strh	r1, [r0, #12]
 800fe9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe9c:	81c2      	strh	r2, [r0, #14]
 800fe9e:	6183      	str	r3, [r0, #24]
 800fea0:	4619      	mov	r1, r3
 800fea2:	2208      	movs	r2, #8
 800fea4:	305c      	adds	r0, #92	@ 0x5c
 800fea6:	f000 f906 	bl	80100b6 <memset>
 800feaa:	4b0d      	ldr	r3, [pc, #52]	@ (800fee0 <std+0x58>)
 800feac:	6263      	str	r3, [r4, #36]	@ 0x24
 800feae:	4b0d      	ldr	r3, [pc, #52]	@ (800fee4 <std+0x5c>)
 800feb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800feb2:	4b0d      	ldr	r3, [pc, #52]	@ (800fee8 <std+0x60>)
 800feb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800feb6:	4b0d      	ldr	r3, [pc, #52]	@ (800feec <std+0x64>)
 800feb8:	6323      	str	r3, [r4, #48]	@ 0x30
 800feba:	4b0d      	ldr	r3, [pc, #52]	@ (800fef0 <std+0x68>)
 800febc:	6224      	str	r4, [r4, #32]
 800febe:	429c      	cmp	r4, r3
 800fec0:	d006      	beq.n	800fed0 <std+0x48>
 800fec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fec6:	4294      	cmp	r4, r2
 800fec8:	d002      	beq.n	800fed0 <std+0x48>
 800feca:	33d0      	adds	r3, #208	@ 0xd0
 800fecc:	429c      	cmp	r4, r3
 800fece:	d105      	bne.n	800fedc <std+0x54>
 800fed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fed8:	f000 b9ba 	b.w	8010250 <__retarget_lock_init_recursive>
 800fedc:	bd10      	pop	{r4, pc}
 800fede:	bf00      	nop
 800fee0:	08010031 	.word	0x08010031
 800fee4:	08010053 	.word	0x08010053
 800fee8:	0801008b 	.word	0x0801008b
 800feec:	080100af 	.word	0x080100af
 800fef0:	200124c4 	.word	0x200124c4

0800fef4 <stdio_exit_handler>:
 800fef4:	4a02      	ldr	r2, [pc, #8]	@ (800ff00 <stdio_exit_handler+0xc>)
 800fef6:	4903      	ldr	r1, [pc, #12]	@ (800ff04 <stdio_exit_handler+0x10>)
 800fef8:	4803      	ldr	r0, [pc, #12]	@ (800ff08 <stdio_exit_handler+0x14>)
 800fefa:	f000 b87b 	b.w	800fff4 <_fwalk_sglue>
 800fefe:	bf00      	nop
 800ff00:	20000090 	.word	0x20000090
 800ff04:	08010a69 	.word	0x08010a69
 800ff08:	200000a0 	.word	0x200000a0

0800ff0c <cleanup_stdio>:
 800ff0c:	6841      	ldr	r1, [r0, #4]
 800ff0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ff40 <cleanup_stdio+0x34>)
 800ff10:	4299      	cmp	r1, r3
 800ff12:	b510      	push	{r4, lr}
 800ff14:	4604      	mov	r4, r0
 800ff16:	d001      	beq.n	800ff1c <cleanup_stdio+0x10>
 800ff18:	f000 fda6 	bl	8010a68 <_fflush_r>
 800ff1c:	68a1      	ldr	r1, [r4, #8]
 800ff1e:	4b09      	ldr	r3, [pc, #36]	@ (800ff44 <cleanup_stdio+0x38>)
 800ff20:	4299      	cmp	r1, r3
 800ff22:	d002      	beq.n	800ff2a <cleanup_stdio+0x1e>
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 fd9f 	bl	8010a68 <_fflush_r>
 800ff2a:	68e1      	ldr	r1, [r4, #12]
 800ff2c:	4b06      	ldr	r3, [pc, #24]	@ (800ff48 <cleanup_stdio+0x3c>)
 800ff2e:	4299      	cmp	r1, r3
 800ff30:	d004      	beq.n	800ff3c <cleanup_stdio+0x30>
 800ff32:	4620      	mov	r0, r4
 800ff34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff38:	f000 bd96 	b.w	8010a68 <_fflush_r>
 800ff3c:	bd10      	pop	{r4, pc}
 800ff3e:	bf00      	nop
 800ff40:	200124c4 	.word	0x200124c4
 800ff44:	2001252c 	.word	0x2001252c
 800ff48:	20012594 	.word	0x20012594

0800ff4c <global_stdio_init.part.0>:
 800ff4c:	b510      	push	{r4, lr}
 800ff4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ff7c <global_stdio_init.part.0+0x30>)
 800ff50:	4c0b      	ldr	r4, [pc, #44]	@ (800ff80 <global_stdio_init.part.0+0x34>)
 800ff52:	4a0c      	ldr	r2, [pc, #48]	@ (800ff84 <global_stdio_init.part.0+0x38>)
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	4620      	mov	r0, r4
 800ff58:	2200      	movs	r2, #0
 800ff5a:	2104      	movs	r1, #4
 800ff5c:	f7ff ff94 	bl	800fe88 <std>
 800ff60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ff64:	2201      	movs	r2, #1
 800ff66:	2109      	movs	r1, #9
 800ff68:	f7ff ff8e 	bl	800fe88 <std>
 800ff6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ff70:	2202      	movs	r2, #2
 800ff72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff76:	2112      	movs	r1, #18
 800ff78:	f7ff bf86 	b.w	800fe88 <std>
 800ff7c:	200125fc 	.word	0x200125fc
 800ff80:	200124c4 	.word	0x200124c4
 800ff84:	0800fef5 	.word	0x0800fef5

0800ff88 <__sfp_lock_acquire>:
 800ff88:	4801      	ldr	r0, [pc, #4]	@ (800ff90 <__sfp_lock_acquire+0x8>)
 800ff8a:	f000 b962 	b.w	8010252 <__retarget_lock_acquire_recursive>
 800ff8e:	bf00      	nop
 800ff90:	20012606 	.word	0x20012606

0800ff94 <__sfp_lock_release>:
 800ff94:	4801      	ldr	r0, [pc, #4]	@ (800ff9c <__sfp_lock_release+0x8>)
 800ff96:	f000 b95d 	b.w	8010254 <__retarget_lock_release_recursive>
 800ff9a:	bf00      	nop
 800ff9c:	20012606 	.word	0x20012606

0800ffa0 <__sinit>:
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	f7ff fff0 	bl	800ff88 <__sfp_lock_acquire>
 800ffa8:	6a23      	ldr	r3, [r4, #32]
 800ffaa:	b11b      	cbz	r3, 800ffb4 <__sinit+0x14>
 800ffac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffb0:	f7ff bff0 	b.w	800ff94 <__sfp_lock_release>
 800ffb4:	4b04      	ldr	r3, [pc, #16]	@ (800ffc8 <__sinit+0x28>)
 800ffb6:	6223      	str	r3, [r4, #32]
 800ffb8:	4b04      	ldr	r3, [pc, #16]	@ (800ffcc <__sinit+0x2c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1f5      	bne.n	800ffac <__sinit+0xc>
 800ffc0:	f7ff ffc4 	bl	800ff4c <global_stdio_init.part.0>
 800ffc4:	e7f2      	b.n	800ffac <__sinit+0xc>
 800ffc6:	bf00      	nop
 800ffc8:	0800ff0d 	.word	0x0800ff0d
 800ffcc:	200125fc 	.word	0x200125fc

0800ffd0 <fiprintf>:
 800ffd0:	b40e      	push	{r1, r2, r3}
 800ffd2:	b503      	push	{r0, r1, lr}
 800ffd4:	4601      	mov	r1, r0
 800ffd6:	ab03      	add	r3, sp, #12
 800ffd8:	4805      	ldr	r0, [pc, #20]	@ (800fff0 <fiprintf+0x20>)
 800ffda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffde:	6800      	ldr	r0, [r0, #0]
 800ffe0:	9301      	str	r3, [sp, #4]
 800ffe2:	f000 fa17 	bl	8010414 <_vfiprintf_r>
 800ffe6:	b002      	add	sp, #8
 800ffe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffec:	b003      	add	sp, #12
 800ffee:	4770      	bx	lr
 800fff0:	2000009c 	.word	0x2000009c

0800fff4 <_fwalk_sglue>:
 800fff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff8:	4607      	mov	r7, r0
 800fffa:	4688      	mov	r8, r1
 800fffc:	4614      	mov	r4, r2
 800fffe:	2600      	movs	r6, #0
 8010000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010004:	f1b9 0901 	subs.w	r9, r9, #1
 8010008:	d505      	bpl.n	8010016 <_fwalk_sglue+0x22>
 801000a:	6824      	ldr	r4, [r4, #0]
 801000c:	2c00      	cmp	r4, #0
 801000e:	d1f7      	bne.n	8010000 <_fwalk_sglue+0xc>
 8010010:	4630      	mov	r0, r6
 8010012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010016:	89ab      	ldrh	r3, [r5, #12]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d907      	bls.n	801002c <_fwalk_sglue+0x38>
 801001c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010020:	3301      	adds	r3, #1
 8010022:	d003      	beq.n	801002c <_fwalk_sglue+0x38>
 8010024:	4629      	mov	r1, r5
 8010026:	4638      	mov	r0, r7
 8010028:	47c0      	blx	r8
 801002a:	4306      	orrs	r6, r0
 801002c:	3568      	adds	r5, #104	@ 0x68
 801002e:	e7e9      	b.n	8010004 <_fwalk_sglue+0x10>

08010030 <__sread>:
 8010030:	b510      	push	{r4, lr}
 8010032:	460c      	mov	r4, r1
 8010034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010038:	f000 f898 	bl	801016c <_read_r>
 801003c:	2800      	cmp	r0, #0
 801003e:	bfab      	itete	ge
 8010040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010042:	89a3      	ldrhlt	r3, [r4, #12]
 8010044:	181b      	addge	r3, r3, r0
 8010046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801004a:	bfac      	ite	ge
 801004c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801004e:	81a3      	strhlt	r3, [r4, #12]
 8010050:	bd10      	pop	{r4, pc}

08010052 <__swrite>:
 8010052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010056:	461f      	mov	r7, r3
 8010058:	898b      	ldrh	r3, [r1, #12]
 801005a:	05db      	lsls	r3, r3, #23
 801005c:	4605      	mov	r5, r0
 801005e:	460c      	mov	r4, r1
 8010060:	4616      	mov	r6, r2
 8010062:	d505      	bpl.n	8010070 <__swrite+0x1e>
 8010064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010068:	2302      	movs	r3, #2
 801006a:	2200      	movs	r2, #0
 801006c:	f000 f86c 	bl	8010148 <_lseek_r>
 8010070:	89a3      	ldrh	r3, [r4, #12]
 8010072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801007a:	81a3      	strh	r3, [r4, #12]
 801007c:	4632      	mov	r2, r6
 801007e:	463b      	mov	r3, r7
 8010080:	4628      	mov	r0, r5
 8010082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010086:	f000 b8a7 	b.w	80101d8 <_write_r>

0801008a <__sseek>:
 801008a:	b510      	push	{r4, lr}
 801008c:	460c      	mov	r4, r1
 801008e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010092:	f000 f859 	bl	8010148 <_lseek_r>
 8010096:	1c43      	adds	r3, r0, #1
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	bf15      	itete	ne
 801009c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801009e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80100a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80100a6:	81a3      	strheq	r3, [r4, #12]
 80100a8:	bf18      	it	ne
 80100aa:	81a3      	strhne	r3, [r4, #12]
 80100ac:	bd10      	pop	{r4, pc}

080100ae <__sclose>:
 80100ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b2:	f000 b839 	b.w	8010128 <_close_r>

080100b6 <memset>:
 80100b6:	4402      	add	r2, r0
 80100b8:	4603      	mov	r3, r0
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d100      	bne.n	80100c0 <memset+0xa>
 80100be:	4770      	bx	lr
 80100c0:	f803 1b01 	strb.w	r1, [r3], #1
 80100c4:	e7f9      	b.n	80100ba <memset+0x4>

080100c6 <_raise_r>:
 80100c6:	291f      	cmp	r1, #31
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	4605      	mov	r5, r0
 80100cc:	460c      	mov	r4, r1
 80100ce:	d904      	bls.n	80100da <_raise_r+0x14>
 80100d0:	2316      	movs	r3, #22
 80100d2:	6003      	str	r3, [r0, #0]
 80100d4:	f04f 30ff 	mov.w	r0, #4294967295
 80100d8:	bd38      	pop	{r3, r4, r5, pc}
 80100da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80100dc:	b112      	cbz	r2, 80100e4 <_raise_r+0x1e>
 80100de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100e2:	b94b      	cbnz	r3, 80100f8 <_raise_r+0x32>
 80100e4:	4628      	mov	r0, r5
 80100e6:	f000 f865 	bl	80101b4 <_getpid_r>
 80100ea:	4622      	mov	r2, r4
 80100ec:	4601      	mov	r1, r0
 80100ee:	4628      	mov	r0, r5
 80100f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100f4:	f000 b84c 	b.w	8010190 <_kill_r>
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d00a      	beq.n	8010112 <_raise_r+0x4c>
 80100fc:	1c59      	adds	r1, r3, #1
 80100fe:	d103      	bne.n	8010108 <_raise_r+0x42>
 8010100:	2316      	movs	r3, #22
 8010102:	6003      	str	r3, [r0, #0]
 8010104:	2001      	movs	r0, #1
 8010106:	e7e7      	b.n	80100d8 <_raise_r+0x12>
 8010108:	2100      	movs	r1, #0
 801010a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801010e:	4620      	mov	r0, r4
 8010110:	4798      	blx	r3
 8010112:	2000      	movs	r0, #0
 8010114:	e7e0      	b.n	80100d8 <_raise_r+0x12>
	...

08010118 <raise>:
 8010118:	4b02      	ldr	r3, [pc, #8]	@ (8010124 <raise+0xc>)
 801011a:	4601      	mov	r1, r0
 801011c:	6818      	ldr	r0, [r3, #0]
 801011e:	f7ff bfd2 	b.w	80100c6 <_raise_r>
 8010122:	bf00      	nop
 8010124:	2000009c 	.word	0x2000009c

08010128 <_close_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4d06      	ldr	r5, [pc, #24]	@ (8010144 <_close_r+0x1c>)
 801012c:	2300      	movs	r3, #0
 801012e:	4604      	mov	r4, r0
 8010130:	4608      	mov	r0, r1
 8010132:	602b      	str	r3, [r5, #0]
 8010134:	f7f1 fe78 	bl	8001e28 <_close>
 8010138:	1c43      	adds	r3, r0, #1
 801013a:	d102      	bne.n	8010142 <_close_r+0x1a>
 801013c:	682b      	ldr	r3, [r5, #0]
 801013e:	b103      	cbz	r3, 8010142 <_close_r+0x1a>
 8010140:	6023      	str	r3, [r4, #0]
 8010142:	bd38      	pop	{r3, r4, r5, pc}
 8010144:	20012600 	.word	0x20012600

08010148 <_lseek_r>:
 8010148:	b538      	push	{r3, r4, r5, lr}
 801014a:	4d07      	ldr	r5, [pc, #28]	@ (8010168 <_lseek_r+0x20>)
 801014c:	4604      	mov	r4, r0
 801014e:	4608      	mov	r0, r1
 8010150:	4611      	mov	r1, r2
 8010152:	2200      	movs	r2, #0
 8010154:	602a      	str	r2, [r5, #0]
 8010156:	461a      	mov	r2, r3
 8010158:	f7f1 fe70 	bl	8001e3c <_lseek>
 801015c:	1c43      	adds	r3, r0, #1
 801015e:	d102      	bne.n	8010166 <_lseek_r+0x1e>
 8010160:	682b      	ldr	r3, [r5, #0]
 8010162:	b103      	cbz	r3, 8010166 <_lseek_r+0x1e>
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	bd38      	pop	{r3, r4, r5, pc}
 8010168:	20012600 	.word	0x20012600

0801016c <_read_r>:
 801016c:	b538      	push	{r3, r4, r5, lr}
 801016e:	4d07      	ldr	r5, [pc, #28]	@ (801018c <_read_r+0x20>)
 8010170:	4604      	mov	r4, r0
 8010172:	4608      	mov	r0, r1
 8010174:	4611      	mov	r1, r2
 8010176:	2200      	movs	r2, #0
 8010178:	602a      	str	r2, [r5, #0]
 801017a:	461a      	mov	r2, r3
 801017c:	f7f1 fe38 	bl	8001df0 <_read>
 8010180:	1c43      	adds	r3, r0, #1
 8010182:	d102      	bne.n	801018a <_read_r+0x1e>
 8010184:	682b      	ldr	r3, [r5, #0]
 8010186:	b103      	cbz	r3, 801018a <_read_r+0x1e>
 8010188:	6023      	str	r3, [r4, #0]
 801018a:	bd38      	pop	{r3, r4, r5, pc}
 801018c:	20012600 	.word	0x20012600

08010190 <_kill_r>:
 8010190:	b538      	push	{r3, r4, r5, lr}
 8010192:	4d07      	ldr	r5, [pc, #28]	@ (80101b0 <_kill_r+0x20>)
 8010194:	2300      	movs	r3, #0
 8010196:	4604      	mov	r4, r0
 8010198:	4608      	mov	r0, r1
 801019a:	4611      	mov	r1, r2
 801019c:	602b      	str	r3, [r5, #0]
 801019e:	f7f1 fe19 	bl	8001dd4 <_kill>
 80101a2:	1c43      	adds	r3, r0, #1
 80101a4:	d102      	bne.n	80101ac <_kill_r+0x1c>
 80101a6:	682b      	ldr	r3, [r5, #0]
 80101a8:	b103      	cbz	r3, 80101ac <_kill_r+0x1c>
 80101aa:	6023      	str	r3, [r4, #0]
 80101ac:	bd38      	pop	{r3, r4, r5, pc}
 80101ae:	bf00      	nop
 80101b0:	20012600 	.word	0x20012600

080101b4 <_getpid_r>:
 80101b4:	f7f1 be0c 	b.w	8001dd0 <_getpid>

080101b8 <_sbrk_r>:
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	4d06      	ldr	r5, [pc, #24]	@ (80101d4 <_sbrk_r+0x1c>)
 80101bc:	2300      	movs	r3, #0
 80101be:	4604      	mov	r4, r0
 80101c0:	4608      	mov	r0, r1
 80101c2:	602b      	str	r3, [r5, #0]
 80101c4:	f7f1 fe3c 	bl	8001e40 <_sbrk>
 80101c8:	1c43      	adds	r3, r0, #1
 80101ca:	d102      	bne.n	80101d2 <_sbrk_r+0x1a>
 80101cc:	682b      	ldr	r3, [r5, #0]
 80101ce:	b103      	cbz	r3, 80101d2 <_sbrk_r+0x1a>
 80101d0:	6023      	str	r3, [r4, #0]
 80101d2:	bd38      	pop	{r3, r4, r5, pc}
 80101d4:	20012600 	.word	0x20012600

080101d8 <_write_r>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	4d07      	ldr	r5, [pc, #28]	@ (80101f8 <_write_r+0x20>)
 80101dc:	4604      	mov	r4, r0
 80101de:	4608      	mov	r0, r1
 80101e0:	4611      	mov	r1, r2
 80101e2:	2200      	movs	r2, #0
 80101e4:	602a      	str	r2, [r5, #0]
 80101e6:	461a      	mov	r2, r3
 80101e8:	f7f1 fe10 	bl	8001e0c <_write>
 80101ec:	1c43      	adds	r3, r0, #1
 80101ee:	d102      	bne.n	80101f6 <_write_r+0x1e>
 80101f0:	682b      	ldr	r3, [r5, #0]
 80101f2:	b103      	cbz	r3, 80101f6 <_write_r+0x1e>
 80101f4:	6023      	str	r3, [r4, #0]
 80101f6:	bd38      	pop	{r3, r4, r5, pc}
 80101f8:	20012600 	.word	0x20012600

080101fc <__errno>:
 80101fc:	4b01      	ldr	r3, [pc, #4]	@ (8010204 <__errno+0x8>)
 80101fe:	6818      	ldr	r0, [r3, #0]
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	2000009c 	.word	0x2000009c

08010208 <__libc_init_array>:
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	4d0d      	ldr	r5, [pc, #52]	@ (8010240 <__libc_init_array+0x38>)
 801020c:	4c0d      	ldr	r4, [pc, #52]	@ (8010244 <__libc_init_array+0x3c>)
 801020e:	1b64      	subs	r4, r4, r5
 8010210:	10a4      	asrs	r4, r4, #2
 8010212:	2600      	movs	r6, #0
 8010214:	42a6      	cmp	r6, r4
 8010216:	d109      	bne.n	801022c <__libc_init_array+0x24>
 8010218:	4d0b      	ldr	r5, [pc, #44]	@ (8010248 <__libc_init_array+0x40>)
 801021a:	4c0c      	ldr	r4, [pc, #48]	@ (801024c <__libc_init_array+0x44>)
 801021c:	f000 fd64 	bl	8010ce8 <_init>
 8010220:	1b64      	subs	r4, r4, r5
 8010222:	10a4      	asrs	r4, r4, #2
 8010224:	2600      	movs	r6, #0
 8010226:	42a6      	cmp	r6, r4
 8010228:	d105      	bne.n	8010236 <__libc_init_array+0x2e>
 801022a:	bd70      	pop	{r4, r5, r6, pc}
 801022c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010230:	4798      	blx	r3
 8010232:	3601      	adds	r6, #1
 8010234:	e7ee      	b.n	8010214 <__libc_init_array+0xc>
 8010236:	f855 3b04 	ldr.w	r3, [r5], #4
 801023a:	4798      	blx	r3
 801023c:	3601      	adds	r6, #1
 801023e:	e7f2      	b.n	8010226 <__libc_init_array+0x1e>
 8010240:	080e40e4 	.word	0x080e40e4
 8010244:	080e40e4 	.word	0x080e40e4
 8010248:	080e40e4 	.word	0x080e40e4
 801024c:	080e40f8 	.word	0x080e40f8

08010250 <__retarget_lock_init_recursive>:
 8010250:	4770      	bx	lr

08010252 <__retarget_lock_acquire_recursive>:
 8010252:	4770      	bx	lr

08010254 <__retarget_lock_release_recursive>:
 8010254:	4770      	bx	lr

08010256 <memcpy>:
 8010256:	440a      	add	r2, r1
 8010258:	4291      	cmp	r1, r2
 801025a:	f100 33ff 	add.w	r3, r0, #4294967295
 801025e:	d100      	bne.n	8010262 <memcpy+0xc>
 8010260:	4770      	bx	lr
 8010262:	b510      	push	{r4, lr}
 8010264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010268:	f803 4f01 	strb.w	r4, [r3, #1]!
 801026c:	4291      	cmp	r1, r2
 801026e:	d1f9      	bne.n	8010264 <memcpy+0xe>
 8010270:	bd10      	pop	{r4, pc}
	...

08010274 <__register_exitproc>:
 8010274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010278:	4d27      	ldr	r5, [pc, #156]	@ (8010318 <__register_exitproc+0xa4>)
 801027a:	4607      	mov	r7, r0
 801027c:	6828      	ldr	r0, [r5, #0]
 801027e:	4691      	mov	r9, r2
 8010280:	460e      	mov	r6, r1
 8010282:	4698      	mov	r8, r3
 8010284:	f7ff ffe5 	bl	8010252 <__retarget_lock_acquire_recursive>
 8010288:	4a24      	ldr	r2, [pc, #144]	@ (801031c <__register_exitproc+0xa8>)
 801028a:	6814      	ldr	r4, [r2, #0]
 801028c:	b93c      	cbnz	r4, 801029e <__register_exitproc+0x2a>
 801028e:	4b24      	ldr	r3, [pc, #144]	@ (8010320 <__register_exitproc+0xac>)
 8010290:	6013      	str	r3, [r2, #0]
 8010292:	4a24      	ldr	r2, [pc, #144]	@ (8010324 <__register_exitproc+0xb0>)
 8010294:	b112      	cbz	r2, 801029c <__register_exitproc+0x28>
 8010296:	6812      	ldr	r2, [r2, #0]
 8010298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801029c:	4c20      	ldr	r4, [pc, #128]	@ (8010320 <__register_exitproc+0xac>)
 801029e:	6863      	ldr	r3, [r4, #4]
 80102a0:	2b1f      	cmp	r3, #31
 80102a2:	dd06      	ble.n	80102b2 <__register_exitproc+0x3e>
 80102a4:	6828      	ldr	r0, [r5, #0]
 80102a6:	f7ff ffd5 	bl	8010254 <__retarget_lock_release_recursive>
 80102aa:	f04f 30ff 	mov.w	r0, #4294967295
 80102ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b2:	b32f      	cbz	r7, 8010300 <__register_exitproc+0x8c>
 80102b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80102b8:	b968      	cbnz	r0, 80102d6 <__register_exitproc+0x62>
 80102ba:	4b1b      	ldr	r3, [pc, #108]	@ (8010328 <__register_exitproc+0xb4>)
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d0f1      	beq.n	80102a4 <__register_exitproc+0x30>
 80102c0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80102c4:	f7ff fd14 	bl	800fcf0 <malloc>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d0eb      	beq.n	80102a4 <__register_exitproc+0x30>
 80102cc:	2300      	movs	r3, #0
 80102ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80102d2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80102d6:	6863      	ldr	r3, [r4, #4]
 80102d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80102dc:	2201      	movs	r2, #1
 80102de:	409a      	lsls	r2, r3
 80102e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80102e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80102e8:	4313      	orrs	r3, r2
 80102ea:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80102ee:	2f02      	cmp	r7, #2
 80102f0:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80102f4:	bf02      	ittt	eq
 80102f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80102fa:	4313      	orreq	r3, r2
 80102fc:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8010300:	6863      	ldr	r3, [r4, #4]
 8010302:	6828      	ldr	r0, [r5, #0]
 8010304:	1c5a      	adds	r2, r3, #1
 8010306:	3302      	adds	r3, #2
 8010308:	6062      	str	r2, [r4, #4]
 801030a:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801030e:	f7ff ffa1 	bl	8010254 <__retarget_lock_release_recursive>
 8010312:	2000      	movs	r0, #0
 8010314:	e7cb      	b.n	80102ae <__register_exitproc+0x3a>
 8010316:	bf00      	nop
 8010318:	200000ec 	.word	0x200000ec
 801031c:	20012694 	.word	0x20012694
 8010320:	20012608 	.word	0x20012608
 8010324:	08012374 	.word	0x08012374
 8010328:	0800fcf1 	.word	0x0800fcf1

0801032c <_free_r>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4605      	mov	r5, r0
 8010330:	2900      	cmp	r1, #0
 8010332:	d041      	beq.n	80103b8 <_free_r+0x8c>
 8010334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010338:	1f0c      	subs	r4, r1, #4
 801033a:	2b00      	cmp	r3, #0
 801033c:	bfb8      	it	lt
 801033e:	18e4      	addlt	r4, r4, r3
 8010340:	f7ff fd88 	bl	800fe54 <__malloc_lock>
 8010344:	4a1d      	ldr	r2, [pc, #116]	@ (80103bc <_free_r+0x90>)
 8010346:	6813      	ldr	r3, [r2, #0]
 8010348:	b933      	cbnz	r3, 8010358 <_free_r+0x2c>
 801034a:	6063      	str	r3, [r4, #4]
 801034c:	6014      	str	r4, [r2, #0]
 801034e:	4628      	mov	r0, r5
 8010350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010354:	f7ff bd84 	b.w	800fe60 <__malloc_unlock>
 8010358:	42a3      	cmp	r3, r4
 801035a:	d908      	bls.n	801036e <_free_r+0x42>
 801035c:	6820      	ldr	r0, [r4, #0]
 801035e:	1821      	adds	r1, r4, r0
 8010360:	428b      	cmp	r3, r1
 8010362:	bf01      	itttt	eq
 8010364:	6819      	ldreq	r1, [r3, #0]
 8010366:	685b      	ldreq	r3, [r3, #4]
 8010368:	1809      	addeq	r1, r1, r0
 801036a:	6021      	streq	r1, [r4, #0]
 801036c:	e7ed      	b.n	801034a <_free_r+0x1e>
 801036e:	461a      	mov	r2, r3
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	b10b      	cbz	r3, 8010378 <_free_r+0x4c>
 8010374:	42a3      	cmp	r3, r4
 8010376:	d9fa      	bls.n	801036e <_free_r+0x42>
 8010378:	6811      	ldr	r1, [r2, #0]
 801037a:	1850      	adds	r0, r2, r1
 801037c:	42a0      	cmp	r0, r4
 801037e:	d10b      	bne.n	8010398 <_free_r+0x6c>
 8010380:	6820      	ldr	r0, [r4, #0]
 8010382:	4401      	add	r1, r0
 8010384:	1850      	adds	r0, r2, r1
 8010386:	4283      	cmp	r3, r0
 8010388:	6011      	str	r1, [r2, #0]
 801038a:	d1e0      	bne.n	801034e <_free_r+0x22>
 801038c:	6818      	ldr	r0, [r3, #0]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	6053      	str	r3, [r2, #4]
 8010392:	4408      	add	r0, r1
 8010394:	6010      	str	r0, [r2, #0]
 8010396:	e7da      	b.n	801034e <_free_r+0x22>
 8010398:	d902      	bls.n	80103a0 <_free_r+0x74>
 801039a:	230c      	movs	r3, #12
 801039c:	602b      	str	r3, [r5, #0]
 801039e:	e7d6      	b.n	801034e <_free_r+0x22>
 80103a0:	6820      	ldr	r0, [r4, #0]
 80103a2:	1821      	adds	r1, r4, r0
 80103a4:	428b      	cmp	r3, r1
 80103a6:	bf04      	itt	eq
 80103a8:	6819      	ldreq	r1, [r3, #0]
 80103aa:	685b      	ldreq	r3, [r3, #4]
 80103ac:	6063      	str	r3, [r4, #4]
 80103ae:	bf04      	itt	eq
 80103b0:	1809      	addeq	r1, r1, r0
 80103b2:	6021      	streq	r1, [r4, #0]
 80103b4:	6054      	str	r4, [r2, #4]
 80103b6:	e7ca      	b.n	801034e <_free_r+0x22>
 80103b8:	bd38      	pop	{r3, r4, r5, pc}
 80103ba:	bf00      	nop
 80103bc:	200124c0 	.word	0x200124c0

080103c0 <__sfputc_r>:
 80103c0:	6893      	ldr	r3, [r2, #8]
 80103c2:	3b01      	subs	r3, #1
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	b410      	push	{r4}
 80103c8:	6093      	str	r3, [r2, #8]
 80103ca:	da08      	bge.n	80103de <__sfputc_r+0x1e>
 80103cc:	6994      	ldr	r4, [r2, #24]
 80103ce:	42a3      	cmp	r3, r4
 80103d0:	db01      	blt.n	80103d6 <__sfputc_r+0x16>
 80103d2:	290a      	cmp	r1, #10
 80103d4:	d103      	bne.n	80103de <__sfputc_r+0x1e>
 80103d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103da:	f000 bb6d 	b.w	8010ab8 <__swbuf_r>
 80103de:	6813      	ldr	r3, [r2, #0]
 80103e0:	1c58      	adds	r0, r3, #1
 80103e2:	6010      	str	r0, [r2, #0]
 80103e4:	7019      	strb	r1, [r3, #0]
 80103e6:	4608      	mov	r0, r1
 80103e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103ec:	4770      	bx	lr

080103ee <__sfputs_r>:
 80103ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f0:	4606      	mov	r6, r0
 80103f2:	460f      	mov	r7, r1
 80103f4:	4614      	mov	r4, r2
 80103f6:	18d5      	adds	r5, r2, r3
 80103f8:	42ac      	cmp	r4, r5
 80103fa:	d101      	bne.n	8010400 <__sfputs_r+0x12>
 80103fc:	2000      	movs	r0, #0
 80103fe:	e007      	b.n	8010410 <__sfputs_r+0x22>
 8010400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010404:	463a      	mov	r2, r7
 8010406:	4630      	mov	r0, r6
 8010408:	f7ff ffda 	bl	80103c0 <__sfputc_r>
 801040c:	1c43      	adds	r3, r0, #1
 801040e:	d1f3      	bne.n	80103f8 <__sfputs_r+0xa>
 8010410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010414 <_vfiprintf_r>:
 8010414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010418:	460d      	mov	r5, r1
 801041a:	b09d      	sub	sp, #116	@ 0x74
 801041c:	4614      	mov	r4, r2
 801041e:	4698      	mov	r8, r3
 8010420:	4606      	mov	r6, r0
 8010422:	b118      	cbz	r0, 801042c <_vfiprintf_r+0x18>
 8010424:	6a03      	ldr	r3, [r0, #32]
 8010426:	b90b      	cbnz	r3, 801042c <_vfiprintf_r+0x18>
 8010428:	f7ff fdba 	bl	800ffa0 <__sinit>
 801042c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801042e:	07d9      	lsls	r1, r3, #31
 8010430:	d405      	bmi.n	801043e <_vfiprintf_r+0x2a>
 8010432:	89ab      	ldrh	r3, [r5, #12]
 8010434:	059a      	lsls	r2, r3, #22
 8010436:	d402      	bmi.n	801043e <_vfiprintf_r+0x2a>
 8010438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801043a:	f7ff ff0a 	bl	8010252 <__retarget_lock_acquire_recursive>
 801043e:	89ab      	ldrh	r3, [r5, #12]
 8010440:	071b      	lsls	r3, r3, #28
 8010442:	d501      	bpl.n	8010448 <_vfiprintf_r+0x34>
 8010444:	692b      	ldr	r3, [r5, #16]
 8010446:	b99b      	cbnz	r3, 8010470 <_vfiprintf_r+0x5c>
 8010448:	4629      	mov	r1, r5
 801044a:	4630      	mov	r0, r6
 801044c:	f000 fb72 	bl	8010b34 <__swsetup_r>
 8010450:	b170      	cbz	r0, 8010470 <_vfiprintf_r+0x5c>
 8010452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010454:	07dc      	lsls	r4, r3, #31
 8010456:	d504      	bpl.n	8010462 <_vfiprintf_r+0x4e>
 8010458:	f04f 30ff 	mov.w	r0, #4294967295
 801045c:	b01d      	add	sp, #116	@ 0x74
 801045e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010462:	89ab      	ldrh	r3, [r5, #12]
 8010464:	0598      	lsls	r0, r3, #22
 8010466:	d4f7      	bmi.n	8010458 <_vfiprintf_r+0x44>
 8010468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801046a:	f7ff fef3 	bl	8010254 <__retarget_lock_release_recursive>
 801046e:	e7f3      	b.n	8010458 <_vfiprintf_r+0x44>
 8010470:	2300      	movs	r3, #0
 8010472:	9309      	str	r3, [sp, #36]	@ 0x24
 8010474:	2320      	movs	r3, #32
 8010476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801047a:	f8cd 800c 	str.w	r8, [sp, #12]
 801047e:	2330      	movs	r3, #48	@ 0x30
 8010480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010630 <_vfiprintf_r+0x21c>
 8010484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010488:	f04f 0901 	mov.w	r9, #1
 801048c:	4623      	mov	r3, r4
 801048e:	469a      	mov	sl, r3
 8010490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010494:	b10a      	cbz	r2, 801049a <_vfiprintf_r+0x86>
 8010496:	2a25      	cmp	r2, #37	@ 0x25
 8010498:	d1f9      	bne.n	801048e <_vfiprintf_r+0x7a>
 801049a:	ebba 0b04 	subs.w	fp, sl, r4
 801049e:	d00b      	beq.n	80104b8 <_vfiprintf_r+0xa4>
 80104a0:	465b      	mov	r3, fp
 80104a2:	4622      	mov	r2, r4
 80104a4:	4629      	mov	r1, r5
 80104a6:	4630      	mov	r0, r6
 80104a8:	f7ff ffa1 	bl	80103ee <__sfputs_r>
 80104ac:	3001      	adds	r0, #1
 80104ae:	f000 80a7 	beq.w	8010600 <_vfiprintf_r+0x1ec>
 80104b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104b4:	445a      	add	r2, fp
 80104b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80104b8:	f89a 3000 	ldrb.w	r3, [sl]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f000 809f 	beq.w	8010600 <_vfiprintf_r+0x1ec>
 80104c2:	2300      	movs	r3, #0
 80104c4:	f04f 32ff 	mov.w	r2, #4294967295
 80104c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104cc:	f10a 0a01 	add.w	sl, sl, #1
 80104d0:	9304      	str	r3, [sp, #16]
 80104d2:	9307      	str	r3, [sp, #28]
 80104d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80104da:	4654      	mov	r4, sl
 80104dc:	2205      	movs	r2, #5
 80104de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e2:	4853      	ldr	r0, [pc, #332]	@ (8010630 <_vfiprintf_r+0x21c>)
 80104e4:	f7ef fe84 	bl	80001f0 <memchr>
 80104e8:	9a04      	ldr	r2, [sp, #16]
 80104ea:	b9d8      	cbnz	r0, 8010524 <_vfiprintf_r+0x110>
 80104ec:	06d1      	lsls	r1, r2, #27
 80104ee:	bf44      	itt	mi
 80104f0:	2320      	movmi	r3, #32
 80104f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104f6:	0713      	lsls	r3, r2, #28
 80104f8:	bf44      	itt	mi
 80104fa:	232b      	movmi	r3, #43	@ 0x2b
 80104fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010500:	f89a 3000 	ldrb.w	r3, [sl]
 8010504:	2b2a      	cmp	r3, #42	@ 0x2a
 8010506:	d015      	beq.n	8010534 <_vfiprintf_r+0x120>
 8010508:	9a07      	ldr	r2, [sp, #28]
 801050a:	4654      	mov	r4, sl
 801050c:	2000      	movs	r0, #0
 801050e:	f04f 0c0a 	mov.w	ip, #10
 8010512:	4621      	mov	r1, r4
 8010514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010518:	3b30      	subs	r3, #48	@ 0x30
 801051a:	2b09      	cmp	r3, #9
 801051c:	d94b      	bls.n	80105b6 <_vfiprintf_r+0x1a2>
 801051e:	b1b0      	cbz	r0, 801054e <_vfiprintf_r+0x13a>
 8010520:	9207      	str	r2, [sp, #28]
 8010522:	e014      	b.n	801054e <_vfiprintf_r+0x13a>
 8010524:	eba0 0308 	sub.w	r3, r0, r8
 8010528:	fa09 f303 	lsl.w	r3, r9, r3
 801052c:	4313      	orrs	r3, r2
 801052e:	9304      	str	r3, [sp, #16]
 8010530:	46a2      	mov	sl, r4
 8010532:	e7d2      	b.n	80104da <_vfiprintf_r+0xc6>
 8010534:	9b03      	ldr	r3, [sp, #12]
 8010536:	1d19      	adds	r1, r3, #4
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	9103      	str	r1, [sp, #12]
 801053c:	2b00      	cmp	r3, #0
 801053e:	bfbb      	ittet	lt
 8010540:	425b      	neglt	r3, r3
 8010542:	f042 0202 	orrlt.w	r2, r2, #2
 8010546:	9307      	strge	r3, [sp, #28]
 8010548:	9307      	strlt	r3, [sp, #28]
 801054a:	bfb8      	it	lt
 801054c:	9204      	strlt	r2, [sp, #16]
 801054e:	7823      	ldrb	r3, [r4, #0]
 8010550:	2b2e      	cmp	r3, #46	@ 0x2e
 8010552:	d10a      	bne.n	801056a <_vfiprintf_r+0x156>
 8010554:	7863      	ldrb	r3, [r4, #1]
 8010556:	2b2a      	cmp	r3, #42	@ 0x2a
 8010558:	d132      	bne.n	80105c0 <_vfiprintf_r+0x1ac>
 801055a:	9b03      	ldr	r3, [sp, #12]
 801055c:	1d1a      	adds	r2, r3, #4
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	9203      	str	r2, [sp, #12]
 8010562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010566:	3402      	adds	r4, #2
 8010568:	9305      	str	r3, [sp, #20]
 801056a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010640 <_vfiprintf_r+0x22c>
 801056e:	7821      	ldrb	r1, [r4, #0]
 8010570:	2203      	movs	r2, #3
 8010572:	4650      	mov	r0, sl
 8010574:	f7ef fe3c 	bl	80001f0 <memchr>
 8010578:	b138      	cbz	r0, 801058a <_vfiprintf_r+0x176>
 801057a:	9b04      	ldr	r3, [sp, #16]
 801057c:	eba0 000a 	sub.w	r0, r0, sl
 8010580:	2240      	movs	r2, #64	@ 0x40
 8010582:	4082      	lsls	r2, r0
 8010584:	4313      	orrs	r3, r2
 8010586:	3401      	adds	r4, #1
 8010588:	9304      	str	r3, [sp, #16]
 801058a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801058e:	4829      	ldr	r0, [pc, #164]	@ (8010634 <_vfiprintf_r+0x220>)
 8010590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010594:	2206      	movs	r2, #6
 8010596:	f7ef fe2b 	bl	80001f0 <memchr>
 801059a:	2800      	cmp	r0, #0
 801059c:	d03f      	beq.n	801061e <_vfiprintf_r+0x20a>
 801059e:	4b26      	ldr	r3, [pc, #152]	@ (8010638 <_vfiprintf_r+0x224>)
 80105a0:	bb1b      	cbnz	r3, 80105ea <_vfiprintf_r+0x1d6>
 80105a2:	9b03      	ldr	r3, [sp, #12]
 80105a4:	3307      	adds	r3, #7
 80105a6:	f023 0307 	bic.w	r3, r3, #7
 80105aa:	3308      	adds	r3, #8
 80105ac:	9303      	str	r3, [sp, #12]
 80105ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b0:	443b      	add	r3, r7
 80105b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80105b4:	e76a      	b.n	801048c <_vfiprintf_r+0x78>
 80105b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80105ba:	460c      	mov	r4, r1
 80105bc:	2001      	movs	r0, #1
 80105be:	e7a8      	b.n	8010512 <_vfiprintf_r+0xfe>
 80105c0:	2300      	movs	r3, #0
 80105c2:	3401      	adds	r4, #1
 80105c4:	9305      	str	r3, [sp, #20]
 80105c6:	4619      	mov	r1, r3
 80105c8:	f04f 0c0a 	mov.w	ip, #10
 80105cc:	4620      	mov	r0, r4
 80105ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105d2:	3a30      	subs	r2, #48	@ 0x30
 80105d4:	2a09      	cmp	r2, #9
 80105d6:	d903      	bls.n	80105e0 <_vfiprintf_r+0x1cc>
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d0c6      	beq.n	801056a <_vfiprintf_r+0x156>
 80105dc:	9105      	str	r1, [sp, #20]
 80105de:	e7c4      	b.n	801056a <_vfiprintf_r+0x156>
 80105e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80105e4:	4604      	mov	r4, r0
 80105e6:	2301      	movs	r3, #1
 80105e8:	e7f0      	b.n	80105cc <_vfiprintf_r+0x1b8>
 80105ea:	ab03      	add	r3, sp, #12
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	462a      	mov	r2, r5
 80105f0:	4b12      	ldr	r3, [pc, #72]	@ (801063c <_vfiprintf_r+0x228>)
 80105f2:	a904      	add	r1, sp, #16
 80105f4:	4630      	mov	r0, r6
 80105f6:	f3af 8000 	nop.w
 80105fa:	4607      	mov	r7, r0
 80105fc:	1c78      	adds	r0, r7, #1
 80105fe:	d1d6      	bne.n	80105ae <_vfiprintf_r+0x19a>
 8010600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010602:	07d9      	lsls	r1, r3, #31
 8010604:	d405      	bmi.n	8010612 <_vfiprintf_r+0x1fe>
 8010606:	89ab      	ldrh	r3, [r5, #12]
 8010608:	059a      	lsls	r2, r3, #22
 801060a:	d402      	bmi.n	8010612 <_vfiprintf_r+0x1fe>
 801060c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801060e:	f7ff fe21 	bl	8010254 <__retarget_lock_release_recursive>
 8010612:	89ab      	ldrh	r3, [r5, #12]
 8010614:	065b      	lsls	r3, r3, #25
 8010616:	f53f af1f 	bmi.w	8010458 <_vfiprintf_r+0x44>
 801061a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801061c:	e71e      	b.n	801045c <_vfiprintf_r+0x48>
 801061e:	ab03      	add	r3, sp, #12
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	462a      	mov	r2, r5
 8010624:	4b05      	ldr	r3, [pc, #20]	@ (801063c <_vfiprintf_r+0x228>)
 8010626:	a904      	add	r1, sp, #16
 8010628:	4630      	mov	r0, r6
 801062a:	f000 f879 	bl	8010720 <_printf_i>
 801062e:	e7e4      	b.n	80105fa <_vfiprintf_r+0x1e6>
 8010630:	08012378 	.word	0x08012378
 8010634:	08012382 	.word	0x08012382
 8010638:	00000000 	.word	0x00000000
 801063c:	080103ef 	.word	0x080103ef
 8010640:	0801237e 	.word	0x0801237e

08010644 <_printf_common>:
 8010644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010648:	4616      	mov	r6, r2
 801064a:	4698      	mov	r8, r3
 801064c:	688a      	ldr	r2, [r1, #8]
 801064e:	690b      	ldr	r3, [r1, #16]
 8010650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010654:	4293      	cmp	r3, r2
 8010656:	bfb8      	it	lt
 8010658:	4613      	movlt	r3, r2
 801065a:	6033      	str	r3, [r6, #0]
 801065c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010660:	4607      	mov	r7, r0
 8010662:	460c      	mov	r4, r1
 8010664:	b10a      	cbz	r2, 801066a <_printf_common+0x26>
 8010666:	3301      	adds	r3, #1
 8010668:	6033      	str	r3, [r6, #0]
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	0699      	lsls	r1, r3, #26
 801066e:	bf42      	ittt	mi
 8010670:	6833      	ldrmi	r3, [r6, #0]
 8010672:	3302      	addmi	r3, #2
 8010674:	6033      	strmi	r3, [r6, #0]
 8010676:	6825      	ldr	r5, [r4, #0]
 8010678:	f015 0506 	ands.w	r5, r5, #6
 801067c:	d106      	bne.n	801068c <_printf_common+0x48>
 801067e:	f104 0a19 	add.w	sl, r4, #25
 8010682:	68e3      	ldr	r3, [r4, #12]
 8010684:	6832      	ldr	r2, [r6, #0]
 8010686:	1a9b      	subs	r3, r3, r2
 8010688:	42ab      	cmp	r3, r5
 801068a:	dc26      	bgt.n	80106da <_printf_common+0x96>
 801068c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010690:	6822      	ldr	r2, [r4, #0]
 8010692:	3b00      	subs	r3, #0
 8010694:	bf18      	it	ne
 8010696:	2301      	movne	r3, #1
 8010698:	0692      	lsls	r2, r2, #26
 801069a:	d42b      	bmi.n	80106f4 <_printf_common+0xb0>
 801069c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80106a0:	4641      	mov	r1, r8
 80106a2:	4638      	mov	r0, r7
 80106a4:	47c8      	blx	r9
 80106a6:	3001      	adds	r0, #1
 80106a8:	d01e      	beq.n	80106e8 <_printf_common+0xa4>
 80106aa:	6823      	ldr	r3, [r4, #0]
 80106ac:	6922      	ldr	r2, [r4, #16]
 80106ae:	f003 0306 	and.w	r3, r3, #6
 80106b2:	2b04      	cmp	r3, #4
 80106b4:	bf02      	ittt	eq
 80106b6:	68e5      	ldreq	r5, [r4, #12]
 80106b8:	6833      	ldreq	r3, [r6, #0]
 80106ba:	1aed      	subeq	r5, r5, r3
 80106bc:	68a3      	ldr	r3, [r4, #8]
 80106be:	bf0c      	ite	eq
 80106c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106c4:	2500      	movne	r5, #0
 80106c6:	4293      	cmp	r3, r2
 80106c8:	bfc4      	itt	gt
 80106ca:	1a9b      	subgt	r3, r3, r2
 80106cc:	18ed      	addgt	r5, r5, r3
 80106ce:	2600      	movs	r6, #0
 80106d0:	341a      	adds	r4, #26
 80106d2:	42b5      	cmp	r5, r6
 80106d4:	d11a      	bne.n	801070c <_printf_common+0xc8>
 80106d6:	2000      	movs	r0, #0
 80106d8:	e008      	b.n	80106ec <_printf_common+0xa8>
 80106da:	2301      	movs	r3, #1
 80106dc:	4652      	mov	r2, sl
 80106de:	4641      	mov	r1, r8
 80106e0:	4638      	mov	r0, r7
 80106e2:	47c8      	blx	r9
 80106e4:	3001      	adds	r0, #1
 80106e6:	d103      	bne.n	80106f0 <_printf_common+0xac>
 80106e8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106f0:	3501      	adds	r5, #1
 80106f2:	e7c6      	b.n	8010682 <_printf_common+0x3e>
 80106f4:	18e1      	adds	r1, r4, r3
 80106f6:	1c5a      	adds	r2, r3, #1
 80106f8:	2030      	movs	r0, #48	@ 0x30
 80106fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80106fe:	4422      	add	r2, r4
 8010700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010708:	3302      	adds	r3, #2
 801070a:	e7c7      	b.n	801069c <_printf_common+0x58>
 801070c:	2301      	movs	r3, #1
 801070e:	4622      	mov	r2, r4
 8010710:	4641      	mov	r1, r8
 8010712:	4638      	mov	r0, r7
 8010714:	47c8      	blx	r9
 8010716:	3001      	adds	r0, #1
 8010718:	d0e6      	beq.n	80106e8 <_printf_common+0xa4>
 801071a:	3601      	adds	r6, #1
 801071c:	e7d9      	b.n	80106d2 <_printf_common+0x8e>
	...

08010720 <_printf_i>:
 8010720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010724:	7e0f      	ldrb	r7, [r1, #24]
 8010726:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010728:	2f78      	cmp	r7, #120	@ 0x78
 801072a:	4691      	mov	r9, r2
 801072c:	4680      	mov	r8, r0
 801072e:	460c      	mov	r4, r1
 8010730:	469a      	mov	sl, r3
 8010732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010736:	d807      	bhi.n	8010748 <_printf_i+0x28>
 8010738:	2f62      	cmp	r7, #98	@ 0x62
 801073a:	d80a      	bhi.n	8010752 <_printf_i+0x32>
 801073c:	2f00      	cmp	r7, #0
 801073e:	f000 80d2 	beq.w	80108e6 <_printf_i+0x1c6>
 8010742:	2f58      	cmp	r7, #88	@ 0x58
 8010744:	f000 80b9 	beq.w	80108ba <_printf_i+0x19a>
 8010748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801074c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010750:	e03a      	b.n	80107c8 <_printf_i+0xa8>
 8010752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010756:	2b15      	cmp	r3, #21
 8010758:	d8f6      	bhi.n	8010748 <_printf_i+0x28>
 801075a:	a101      	add	r1, pc, #4	@ (adr r1, 8010760 <_printf_i+0x40>)
 801075c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010760:	080107b9 	.word	0x080107b9
 8010764:	080107cd 	.word	0x080107cd
 8010768:	08010749 	.word	0x08010749
 801076c:	08010749 	.word	0x08010749
 8010770:	08010749 	.word	0x08010749
 8010774:	08010749 	.word	0x08010749
 8010778:	080107cd 	.word	0x080107cd
 801077c:	08010749 	.word	0x08010749
 8010780:	08010749 	.word	0x08010749
 8010784:	08010749 	.word	0x08010749
 8010788:	08010749 	.word	0x08010749
 801078c:	080108cd 	.word	0x080108cd
 8010790:	080107f7 	.word	0x080107f7
 8010794:	08010887 	.word	0x08010887
 8010798:	08010749 	.word	0x08010749
 801079c:	08010749 	.word	0x08010749
 80107a0:	080108ef 	.word	0x080108ef
 80107a4:	08010749 	.word	0x08010749
 80107a8:	080107f7 	.word	0x080107f7
 80107ac:	08010749 	.word	0x08010749
 80107b0:	08010749 	.word	0x08010749
 80107b4:	0801088f 	.word	0x0801088f
 80107b8:	6833      	ldr	r3, [r6, #0]
 80107ba:	1d1a      	adds	r2, r3, #4
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	6032      	str	r2, [r6, #0]
 80107c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80107c8:	2301      	movs	r3, #1
 80107ca:	e09d      	b.n	8010908 <_printf_i+0x1e8>
 80107cc:	6833      	ldr	r3, [r6, #0]
 80107ce:	6820      	ldr	r0, [r4, #0]
 80107d0:	1d19      	adds	r1, r3, #4
 80107d2:	6031      	str	r1, [r6, #0]
 80107d4:	0606      	lsls	r6, r0, #24
 80107d6:	d501      	bpl.n	80107dc <_printf_i+0xbc>
 80107d8:	681d      	ldr	r5, [r3, #0]
 80107da:	e003      	b.n	80107e4 <_printf_i+0xc4>
 80107dc:	0645      	lsls	r5, r0, #25
 80107de:	d5fb      	bpl.n	80107d8 <_printf_i+0xb8>
 80107e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80107e4:	2d00      	cmp	r5, #0
 80107e6:	da03      	bge.n	80107f0 <_printf_i+0xd0>
 80107e8:	232d      	movs	r3, #45	@ 0x2d
 80107ea:	426d      	negs	r5, r5
 80107ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80107f0:	4859      	ldr	r0, [pc, #356]	@ (8010958 <_printf_i+0x238>)
 80107f2:	230a      	movs	r3, #10
 80107f4:	e011      	b.n	801081a <_printf_i+0xfa>
 80107f6:	6821      	ldr	r1, [r4, #0]
 80107f8:	6833      	ldr	r3, [r6, #0]
 80107fa:	0608      	lsls	r0, r1, #24
 80107fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8010800:	d402      	bmi.n	8010808 <_printf_i+0xe8>
 8010802:	0649      	lsls	r1, r1, #25
 8010804:	bf48      	it	mi
 8010806:	b2ad      	uxthmi	r5, r5
 8010808:	2f6f      	cmp	r7, #111	@ 0x6f
 801080a:	4853      	ldr	r0, [pc, #332]	@ (8010958 <_printf_i+0x238>)
 801080c:	6033      	str	r3, [r6, #0]
 801080e:	bf14      	ite	ne
 8010810:	230a      	movne	r3, #10
 8010812:	2308      	moveq	r3, #8
 8010814:	2100      	movs	r1, #0
 8010816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801081a:	6866      	ldr	r6, [r4, #4]
 801081c:	60a6      	str	r6, [r4, #8]
 801081e:	2e00      	cmp	r6, #0
 8010820:	bfa2      	ittt	ge
 8010822:	6821      	ldrge	r1, [r4, #0]
 8010824:	f021 0104 	bicge.w	r1, r1, #4
 8010828:	6021      	strge	r1, [r4, #0]
 801082a:	b90d      	cbnz	r5, 8010830 <_printf_i+0x110>
 801082c:	2e00      	cmp	r6, #0
 801082e:	d04b      	beq.n	80108c8 <_printf_i+0x1a8>
 8010830:	4616      	mov	r6, r2
 8010832:	fbb5 f1f3 	udiv	r1, r5, r3
 8010836:	fb03 5711 	mls	r7, r3, r1, r5
 801083a:	5dc7      	ldrb	r7, [r0, r7]
 801083c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010840:	462f      	mov	r7, r5
 8010842:	42bb      	cmp	r3, r7
 8010844:	460d      	mov	r5, r1
 8010846:	d9f4      	bls.n	8010832 <_printf_i+0x112>
 8010848:	2b08      	cmp	r3, #8
 801084a:	d10b      	bne.n	8010864 <_printf_i+0x144>
 801084c:	6823      	ldr	r3, [r4, #0]
 801084e:	07df      	lsls	r7, r3, #31
 8010850:	d508      	bpl.n	8010864 <_printf_i+0x144>
 8010852:	6923      	ldr	r3, [r4, #16]
 8010854:	6861      	ldr	r1, [r4, #4]
 8010856:	4299      	cmp	r1, r3
 8010858:	bfde      	ittt	le
 801085a:	2330      	movle	r3, #48	@ 0x30
 801085c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010860:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010864:	1b92      	subs	r2, r2, r6
 8010866:	6122      	str	r2, [r4, #16]
 8010868:	f8cd a000 	str.w	sl, [sp]
 801086c:	464b      	mov	r3, r9
 801086e:	aa03      	add	r2, sp, #12
 8010870:	4621      	mov	r1, r4
 8010872:	4640      	mov	r0, r8
 8010874:	f7ff fee6 	bl	8010644 <_printf_common>
 8010878:	3001      	adds	r0, #1
 801087a:	d14a      	bne.n	8010912 <_printf_i+0x1f2>
 801087c:	f04f 30ff 	mov.w	r0, #4294967295
 8010880:	b004      	add	sp, #16
 8010882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010886:	6823      	ldr	r3, [r4, #0]
 8010888:	f043 0320 	orr.w	r3, r3, #32
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	4833      	ldr	r0, [pc, #204]	@ (801095c <_printf_i+0x23c>)
 8010890:	2778      	movs	r7, #120	@ 0x78
 8010892:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010896:	6823      	ldr	r3, [r4, #0]
 8010898:	6831      	ldr	r1, [r6, #0]
 801089a:	061f      	lsls	r7, r3, #24
 801089c:	f851 5b04 	ldr.w	r5, [r1], #4
 80108a0:	d402      	bmi.n	80108a8 <_printf_i+0x188>
 80108a2:	065f      	lsls	r7, r3, #25
 80108a4:	bf48      	it	mi
 80108a6:	b2ad      	uxthmi	r5, r5
 80108a8:	6031      	str	r1, [r6, #0]
 80108aa:	07d9      	lsls	r1, r3, #31
 80108ac:	bf44      	itt	mi
 80108ae:	f043 0320 	orrmi.w	r3, r3, #32
 80108b2:	6023      	strmi	r3, [r4, #0]
 80108b4:	b11d      	cbz	r5, 80108be <_printf_i+0x19e>
 80108b6:	2310      	movs	r3, #16
 80108b8:	e7ac      	b.n	8010814 <_printf_i+0xf4>
 80108ba:	4827      	ldr	r0, [pc, #156]	@ (8010958 <_printf_i+0x238>)
 80108bc:	e7e9      	b.n	8010892 <_printf_i+0x172>
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	f023 0320 	bic.w	r3, r3, #32
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	e7f6      	b.n	80108b6 <_printf_i+0x196>
 80108c8:	4616      	mov	r6, r2
 80108ca:	e7bd      	b.n	8010848 <_printf_i+0x128>
 80108cc:	6833      	ldr	r3, [r6, #0]
 80108ce:	6825      	ldr	r5, [r4, #0]
 80108d0:	6961      	ldr	r1, [r4, #20]
 80108d2:	1d18      	adds	r0, r3, #4
 80108d4:	6030      	str	r0, [r6, #0]
 80108d6:	062e      	lsls	r6, r5, #24
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	d501      	bpl.n	80108e0 <_printf_i+0x1c0>
 80108dc:	6019      	str	r1, [r3, #0]
 80108de:	e002      	b.n	80108e6 <_printf_i+0x1c6>
 80108e0:	0668      	lsls	r0, r5, #25
 80108e2:	d5fb      	bpl.n	80108dc <_printf_i+0x1bc>
 80108e4:	8019      	strh	r1, [r3, #0]
 80108e6:	2300      	movs	r3, #0
 80108e8:	6123      	str	r3, [r4, #16]
 80108ea:	4616      	mov	r6, r2
 80108ec:	e7bc      	b.n	8010868 <_printf_i+0x148>
 80108ee:	6833      	ldr	r3, [r6, #0]
 80108f0:	1d1a      	adds	r2, r3, #4
 80108f2:	6032      	str	r2, [r6, #0]
 80108f4:	681e      	ldr	r6, [r3, #0]
 80108f6:	6862      	ldr	r2, [r4, #4]
 80108f8:	2100      	movs	r1, #0
 80108fa:	4630      	mov	r0, r6
 80108fc:	f7ef fc78 	bl	80001f0 <memchr>
 8010900:	b108      	cbz	r0, 8010906 <_printf_i+0x1e6>
 8010902:	1b80      	subs	r0, r0, r6
 8010904:	6060      	str	r0, [r4, #4]
 8010906:	6863      	ldr	r3, [r4, #4]
 8010908:	6123      	str	r3, [r4, #16]
 801090a:	2300      	movs	r3, #0
 801090c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010910:	e7aa      	b.n	8010868 <_printf_i+0x148>
 8010912:	6923      	ldr	r3, [r4, #16]
 8010914:	4632      	mov	r2, r6
 8010916:	4649      	mov	r1, r9
 8010918:	4640      	mov	r0, r8
 801091a:	47d0      	blx	sl
 801091c:	3001      	adds	r0, #1
 801091e:	d0ad      	beq.n	801087c <_printf_i+0x15c>
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	079b      	lsls	r3, r3, #30
 8010924:	d413      	bmi.n	801094e <_printf_i+0x22e>
 8010926:	68e0      	ldr	r0, [r4, #12]
 8010928:	9b03      	ldr	r3, [sp, #12]
 801092a:	4298      	cmp	r0, r3
 801092c:	bfb8      	it	lt
 801092e:	4618      	movlt	r0, r3
 8010930:	e7a6      	b.n	8010880 <_printf_i+0x160>
 8010932:	2301      	movs	r3, #1
 8010934:	4632      	mov	r2, r6
 8010936:	4649      	mov	r1, r9
 8010938:	4640      	mov	r0, r8
 801093a:	47d0      	blx	sl
 801093c:	3001      	adds	r0, #1
 801093e:	d09d      	beq.n	801087c <_printf_i+0x15c>
 8010940:	3501      	adds	r5, #1
 8010942:	68e3      	ldr	r3, [r4, #12]
 8010944:	9903      	ldr	r1, [sp, #12]
 8010946:	1a5b      	subs	r3, r3, r1
 8010948:	42ab      	cmp	r3, r5
 801094a:	dcf2      	bgt.n	8010932 <_printf_i+0x212>
 801094c:	e7eb      	b.n	8010926 <_printf_i+0x206>
 801094e:	2500      	movs	r5, #0
 8010950:	f104 0619 	add.w	r6, r4, #25
 8010954:	e7f5      	b.n	8010942 <_printf_i+0x222>
 8010956:	bf00      	nop
 8010958:	08012389 	.word	0x08012389
 801095c:	0801239a 	.word	0x0801239a

08010960 <__sflush_r>:
 8010960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010968:	0716      	lsls	r6, r2, #28
 801096a:	4605      	mov	r5, r0
 801096c:	460c      	mov	r4, r1
 801096e:	d454      	bmi.n	8010a1a <__sflush_r+0xba>
 8010970:	684b      	ldr	r3, [r1, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	dc02      	bgt.n	801097c <__sflush_r+0x1c>
 8010976:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010978:	2b00      	cmp	r3, #0
 801097a:	dd48      	ble.n	8010a0e <__sflush_r+0xae>
 801097c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801097e:	2e00      	cmp	r6, #0
 8010980:	d045      	beq.n	8010a0e <__sflush_r+0xae>
 8010982:	2300      	movs	r3, #0
 8010984:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010988:	682f      	ldr	r7, [r5, #0]
 801098a:	6a21      	ldr	r1, [r4, #32]
 801098c:	602b      	str	r3, [r5, #0]
 801098e:	d030      	beq.n	80109f2 <__sflush_r+0x92>
 8010990:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010992:	89a3      	ldrh	r3, [r4, #12]
 8010994:	0759      	lsls	r1, r3, #29
 8010996:	d505      	bpl.n	80109a4 <__sflush_r+0x44>
 8010998:	6863      	ldr	r3, [r4, #4]
 801099a:	1ad2      	subs	r2, r2, r3
 801099c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801099e:	b10b      	cbz	r3, 80109a4 <__sflush_r+0x44>
 80109a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109a2:	1ad2      	subs	r2, r2, r3
 80109a4:	2300      	movs	r3, #0
 80109a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109a8:	6a21      	ldr	r1, [r4, #32]
 80109aa:	4628      	mov	r0, r5
 80109ac:	47b0      	blx	r6
 80109ae:	1c43      	adds	r3, r0, #1
 80109b0:	89a3      	ldrh	r3, [r4, #12]
 80109b2:	d106      	bne.n	80109c2 <__sflush_r+0x62>
 80109b4:	6829      	ldr	r1, [r5, #0]
 80109b6:	291d      	cmp	r1, #29
 80109b8:	d82b      	bhi.n	8010a12 <__sflush_r+0xb2>
 80109ba:	4a2a      	ldr	r2, [pc, #168]	@ (8010a64 <__sflush_r+0x104>)
 80109bc:	410a      	asrs	r2, r1
 80109be:	07d6      	lsls	r6, r2, #31
 80109c0:	d427      	bmi.n	8010a12 <__sflush_r+0xb2>
 80109c2:	2200      	movs	r2, #0
 80109c4:	6062      	str	r2, [r4, #4]
 80109c6:	04d9      	lsls	r1, r3, #19
 80109c8:	6922      	ldr	r2, [r4, #16]
 80109ca:	6022      	str	r2, [r4, #0]
 80109cc:	d504      	bpl.n	80109d8 <__sflush_r+0x78>
 80109ce:	1c42      	adds	r2, r0, #1
 80109d0:	d101      	bne.n	80109d6 <__sflush_r+0x76>
 80109d2:	682b      	ldr	r3, [r5, #0]
 80109d4:	b903      	cbnz	r3, 80109d8 <__sflush_r+0x78>
 80109d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80109d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109da:	602f      	str	r7, [r5, #0]
 80109dc:	b1b9      	cbz	r1, 8010a0e <__sflush_r+0xae>
 80109de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109e2:	4299      	cmp	r1, r3
 80109e4:	d002      	beq.n	80109ec <__sflush_r+0x8c>
 80109e6:	4628      	mov	r0, r5
 80109e8:	f7ff fca0 	bl	801032c <_free_r>
 80109ec:	2300      	movs	r3, #0
 80109ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80109f0:	e00d      	b.n	8010a0e <__sflush_r+0xae>
 80109f2:	2301      	movs	r3, #1
 80109f4:	4628      	mov	r0, r5
 80109f6:	47b0      	blx	r6
 80109f8:	4602      	mov	r2, r0
 80109fa:	1c50      	adds	r0, r2, #1
 80109fc:	d1c9      	bne.n	8010992 <__sflush_r+0x32>
 80109fe:	682b      	ldr	r3, [r5, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d0c6      	beq.n	8010992 <__sflush_r+0x32>
 8010a04:	2b1d      	cmp	r3, #29
 8010a06:	d001      	beq.n	8010a0c <__sflush_r+0xac>
 8010a08:	2b16      	cmp	r3, #22
 8010a0a:	d11e      	bne.n	8010a4a <__sflush_r+0xea>
 8010a0c:	602f      	str	r7, [r5, #0]
 8010a0e:	2000      	movs	r0, #0
 8010a10:	e022      	b.n	8010a58 <__sflush_r+0xf8>
 8010a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a16:	b21b      	sxth	r3, r3
 8010a18:	e01b      	b.n	8010a52 <__sflush_r+0xf2>
 8010a1a:	690f      	ldr	r7, [r1, #16]
 8010a1c:	2f00      	cmp	r7, #0
 8010a1e:	d0f6      	beq.n	8010a0e <__sflush_r+0xae>
 8010a20:	0793      	lsls	r3, r2, #30
 8010a22:	680e      	ldr	r6, [r1, #0]
 8010a24:	bf08      	it	eq
 8010a26:	694b      	ldreq	r3, [r1, #20]
 8010a28:	600f      	str	r7, [r1, #0]
 8010a2a:	bf18      	it	ne
 8010a2c:	2300      	movne	r3, #0
 8010a2e:	eba6 0807 	sub.w	r8, r6, r7
 8010a32:	608b      	str	r3, [r1, #8]
 8010a34:	f1b8 0f00 	cmp.w	r8, #0
 8010a38:	dde9      	ble.n	8010a0e <__sflush_r+0xae>
 8010a3a:	6a21      	ldr	r1, [r4, #32]
 8010a3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a3e:	4643      	mov	r3, r8
 8010a40:	463a      	mov	r2, r7
 8010a42:	4628      	mov	r0, r5
 8010a44:	47b0      	blx	r6
 8010a46:	2800      	cmp	r0, #0
 8010a48:	dc08      	bgt.n	8010a5c <__sflush_r+0xfc>
 8010a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a52:	81a3      	strh	r3, [r4, #12]
 8010a54:	f04f 30ff 	mov.w	r0, #4294967295
 8010a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a5c:	4407      	add	r7, r0
 8010a5e:	eba8 0800 	sub.w	r8, r8, r0
 8010a62:	e7e7      	b.n	8010a34 <__sflush_r+0xd4>
 8010a64:	dfbffffe 	.word	0xdfbffffe

08010a68 <_fflush_r>:
 8010a68:	b538      	push	{r3, r4, r5, lr}
 8010a6a:	690b      	ldr	r3, [r1, #16]
 8010a6c:	4605      	mov	r5, r0
 8010a6e:	460c      	mov	r4, r1
 8010a70:	b913      	cbnz	r3, 8010a78 <_fflush_r+0x10>
 8010a72:	2500      	movs	r5, #0
 8010a74:	4628      	mov	r0, r5
 8010a76:	bd38      	pop	{r3, r4, r5, pc}
 8010a78:	b118      	cbz	r0, 8010a82 <_fflush_r+0x1a>
 8010a7a:	6a03      	ldr	r3, [r0, #32]
 8010a7c:	b90b      	cbnz	r3, 8010a82 <_fflush_r+0x1a>
 8010a7e:	f7ff fa8f 	bl	800ffa0 <__sinit>
 8010a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d0f3      	beq.n	8010a72 <_fflush_r+0xa>
 8010a8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010a8c:	07d0      	lsls	r0, r2, #31
 8010a8e:	d404      	bmi.n	8010a9a <_fflush_r+0x32>
 8010a90:	0599      	lsls	r1, r3, #22
 8010a92:	d402      	bmi.n	8010a9a <_fflush_r+0x32>
 8010a94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010a96:	f7ff fbdc 	bl	8010252 <__retarget_lock_acquire_recursive>
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	f7ff ff5f 	bl	8010960 <__sflush_r>
 8010aa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010aa4:	07da      	lsls	r2, r3, #31
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	d4e4      	bmi.n	8010a74 <_fflush_r+0xc>
 8010aaa:	89a3      	ldrh	r3, [r4, #12]
 8010aac:	059b      	lsls	r3, r3, #22
 8010aae:	d4e1      	bmi.n	8010a74 <_fflush_r+0xc>
 8010ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ab2:	f7ff fbcf 	bl	8010254 <__retarget_lock_release_recursive>
 8010ab6:	e7dd      	b.n	8010a74 <_fflush_r+0xc>

08010ab8 <__swbuf_r>:
 8010ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aba:	460e      	mov	r6, r1
 8010abc:	4614      	mov	r4, r2
 8010abe:	4605      	mov	r5, r0
 8010ac0:	b118      	cbz	r0, 8010aca <__swbuf_r+0x12>
 8010ac2:	6a03      	ldr	r3, [r0, #32]
 8010ac4:	b90b      	cbnz	r3, 8010aca <__swbuf_r+0x12>
 8010ac6:	f7ff fa6b 	bl	800ffa0 <__sinit>
 8010aca:	69a3      	ldr	r3, [r4, #24]
 8010acc:	60a3      	str	r3, [r4, #8]
 8010ace:	89a3      	ldrh	r3, [r4, #12]
 8010ad0:	071a      	lsls	r2, r3, #28
 8010ad2:	d501      	bpl.n	8010ad8 <__swbuf_r+0x20>
 8010ad4:	6923      	ldr	r3, [r4, #16]
 8010ad6:	b943      	cbnz	r3, 8010aea <__swbuf_r+0x32>
 8010ad8:	4621      	mov	r1, r4
 8010ada:	4628      	mov	r0, r5
 8010adc:	f000 f82a 	bl	8010b34 <__swsetup_r>
 8010ae0:	b118      	cbz	r0, 8010aea <__swbuf_r+0x32>
 8010ae2:	f04f 37ff 	mov.w	r7, #4294967295
 8010ae6:	4638      	mov	r0, r7
 8010ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	6922      	ldr	r2, [r4, #16]
 8010aee:	1a98      	subs	r0, r3, r2
 8010af0:	6963      	ldr	r3, [r4, #20]
 8010af2:	b2f6      	uxtb	r6, r6
 8010af4:	4283      	cmp	r3, r0
 8010af6:	4637      	mov	r7, r6
 8010af8:	dc05      	bgt.n	8010b06 <__swbuf_r+0x4e>
 8010afa:	4621      	mov	r1, r4
 8010afc:	4628      	mov	r0, r5
 8010afe:	f7ff ffb3 	bl	8010a68 <_fflush_r>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d1ed      	bne.n	8010ae2 <__swbuf_r+0x2a>
 8010b06:	68a3      	ldr	r3, [r4, #8]
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	60a3      	str	r3, [r4, #8]
 8010b0c:	6823      	ldr	r3, [r4, #0]
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	6022      	str	r2, [r4, #0]
 8010b12:	701e      	strb	r6, [r3, #0]
 8010b14:	6962      	ldr	r2, [r4, #20]
 8010b16:	1c43      	adds	r3, r0, #1
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d004      	beq.n	8010b26 <__swbuf_r+0x6e>
 8010b1c:	89a3      	ldrh	r3, [r4, #12]
 8010b1e:	07db      	lsls	r3, r3, #31
 8010b20:	d5e1      	bpl.n	8010ae6 <__swbuf_r+0x2e>
 8010b22:	2e0a      	cmp	r6, #10
 8010b24:	d1df      	bne.n	8010ae6 <__swbuf_r+0x2e>
 8010b26:	4621      	mov	r1, r4
 8010b28:	4628      	mov	r0, r5
 8010b2a:	f7ff ff9d 	bl	8010a68 <_fflush_r>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d0d9      	beq.n	8010ae6 <__swbuf_r+0x2e>
 8010b32:	e7d6      	b.n	8010ae2 <__swbuf_r+0x2a>

08010b34 <__swsetup_r>:
 8010b34:	b538      	push	{r3, r4, r5, lr}
 8010b36:	4b29      	ldr	r3, [pc, #164]	@ (8010bdc <__swsetup_r+0xa8>)
 8010b38:	4605      	mov	r5, r0
 8010b3a:	6818      	ldr	r0, [r3, #0]
 8010b3c:	460c      	mov	r4, r1
 8010b3e:	b118      	cbz	r0, 8010b48 <__swsetup_r+0x14>
 8010b40:	6a03      	ldr	r3, [r0, #32]
 8010b42:	b90b      	cbnz	r3, 8010b48 <__swsetup_r+0x14>
 8010b44:	f7ff fa2c 	bl	800ffa0 <__sinit>
 8010b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b4c:	0719      	lsls	r1, r3, #28
 8010b4e:	d422      	bmi.n	8010b96 <__swsetup_r+0x62>
 8010b50:	06da      	lsls	r2, r3, #27
 8010b52:	d407      	bmi.n	8010b64 <__swsetup_r+0x30>
 8010b54:	2209      	movs	r2, #9
 8010b56:	602a      	str	r2, [r5, #0]
 8010b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b5c:	81a3      	strh	r3, [r4, #12]
 8010b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b62:	e033      	b.n	8010bcc <__swsetup_r+0x98>
 8010b64:	0758      	lsls	r0, r3, #29
 8010b66:	d512      	bpl.n	8010b8e <__swsetup_r+0x5a>
 8010b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b6a:	b141      	cbz	r1, 8010b7e <__swsetup_r+0x4a>
 8010b6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b70:	4299      	cmp	r1, r3
 8010b72:	d002      	beq.n	8010b7a <__swsetup_r+0x46>
 8010b74:	4628      	mov	r0, r5
 8010b76:	f7ff fbd9 	bl	801032c <_free_r>
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b7e:	89a3      	ldrh	r3, [r4, #12]
 8010b80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010b84:	81a3      	strh	r3, [r4, #12]
 8010b86:	2300      	movs	r3, #0
 8010b88:	6063      	str	r3, [r4, #4]
 8010b8a:	6923      	ldr	r3, [r4, #16]
 8010b8c:	6023      	str	r3, [r4, #0]
 8010b8e:	89a3      	ldrh	r3, [r4, #12]
 8010b90:	f043 0308 	orr.w	r3, r3, #8
 8010b94:	81a3      	strh	r3, [r4, #12]
 8010b96:	6923      	ldr	r3, [r4, #16]
 8010b98:	b94b      	cbnz	r3, 8010bae <__swsetup_r+0x7a>
 8010b9a:	89a3      	ldrh	r3, [r4, #12]
 8010b9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ba4:	d003      	beq.n	8010bae <__swsetup_r+0x7a>
 8010ba6:	4621      	mov	r1, r4
 8010ba8:	4628      	mov	r0, r5
 8010baa:	f000 f83f 	bl	8010c2c <__smakebuf_r>
 8010bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bb2:	f013 0201 	ands.w	r2, r3, #1
 8010bb6:	d00a      	beq.n	8010bce <__swsetup_r+0x9a>
 8010bb8:	2200      	movs	r2, #0
 8010bba:	60a2      	str	r2, [r4, #8]
 8010bbc:	6962      	ldr	r2, [r4, #20]
 8010bbe:	4252      	negs	r2, r2
 8010bc0:	61a2      	str	r2, [r4, #24]
 8010bc2:	6922      	ldr	r2, [r4, #16]
 8010bc4:	b942      	cbnz	r2, 8010bd8 <__swsetup_r+0xa4>
 8010bc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010bca:	d1c5      	bne.n	8010b58 <__swsetup_r+0x24>
 8010bcc:	bd38      	pop	{r3, r4, r5, pc}
 8010bce:	0799      	lsls	r1, r3, #30
 8010bd0:	bf58      	it	pl
 8010bd2:	6962      	ldrpl	r2, [r4, #20]
 8010bd4:	60a2      	str	r2, [r4, #8]
 8010bd6:	e7f4      	b.n	8010bc2 <__swsetup_r+0x8e>
 8010bd8:	2000      	movs	r0, #0
 8010bda:	e7f7      	b.n	8010bcc <__swsetup_r+0x98>
 8010bdc:	2000009c 	.word	0x2000009c

08010be0 <__swhatbuf_r>:
 8010be0:	b570      	push	{r4, r5, r6, lr}
 8010be2:	460c      	mov	r4, r1
 8010be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010be8:	2900      	cmp	r1, #0
 8010bea:	b096      	sub	sp, #88	@ 0x58
 8010bec:	4615      	mov	r5, r2
 8010bee:	461e      	mov	r6, r3
 8010bf0:	da0d      	bge.n	8010c0e <__swhatbuf_r+0x2e>
 8010bf2:	89a3      	ldrh	r3, [r4, #12]
 8010bf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010bf8:	f04f 0100 	mov.w	r1, #0
 8010bfc:	bf14      	ite	ne
 8010bfe:	2340      	movne	r3, #64	@ 0x40
 8010c00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c04:	2000      	movs	r0, #0
 8010c06:	6031      	str	r1, [r6, #0]
 8010c08:	602b      	str	r3, [r5, #0]
 8010c0a:	b016      	add	sp, #88	@ 0x58
 8010c0c:	bd70      	pop	{r4, r5, r6, pc}
 8010c0e:	466a      	mov	r2, sp
 8010c10:	f000 f848 	bl	8010ca4 <_fstat_r>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	dbec      	blt.n	8010bf2 <__swhatbuf_r+0x12>
 8010c18:	9901      	ldr	r1, [sp, #4]
 8010c1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c22:	4259      	negs	r1, r3
 8010c24:	4159      	adcs	r1, r3
 8010c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c2a:	e7eb      	b.n	8010c04 <__swhatbuf_r+0x24>

08010c2c <__smakebuf_r>:
 8010c2c:	898b      	ldrh	r3, [r1, #12]
 8010c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c30:	079d      	lsls	r5, r3, #30
 8010c32:	4606      	mov	r6, r0
 8010c34:	460c      	mov	r4, r1
 8010c36:	d507      	bpl.n	8010c48 <__smakebuf_r+0x1c>
 8010c38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c3c:	6023      	str	r3, [r4, #0]
 8010c3e:	6123      	str	r3, [r4, #16]
 8010c40:	2301      	movs	r3, #1
 8010c42:	6163      	str	r3, [r4, #20]
 8010c44:	b003      	add	sp, #12
 8010c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c48:	ab01      	add	r3, sp, #4
 8010c4a:	466a      	mov	r2, sp
 8010c4c:	f7ff ffc8 	bl	8010be0 <__swhatbuf_r>
 8010c50:	9f00      	ldr	r7, [sp, #0]
 8010c52:	4605      	mov	r5, r0
 8010c54:	4639      	mov	r1, r7
 8010c56:	4630      	mov	r0, r6
 8010c58:	f7ff f87c 	bl	800fd54 <_malloc_r>
 8010c5c:	b948      	cbnz	r0, 8010c72 <__smakebuf_r+0x46>
 8010c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c62:	059a      	lsls	r2, r3, #22
 8010c64:	d4ee      	bmi.n	8010c44 <__smakebuf_r+0x18>
 8010c66:	f023 0303 	bic.w	r3, r3, #3
 8010c6a:	f043 0302 	orr.w	r3, r3, #2
 8010c6e:	81a3      	strh	r3, [r4, #12]
 8010c70:	e7e2      	b.n	8010c38 <__smakebuf_r+0xc>
 8010c72:	89a3      	ldrh	r3, [r4, #12]
 8010c74:	6020      	str	r0, [r4, #0]
 8010c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c7a:	81a3      	strh	r3, [r4, #12]
 8010c7c:	9b01      	ldr	r3, [sp, #4]
 8010c7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c82:	b15b      	cbz	r3, 8010c9c <__smakebuf_r+0x70>
 8010c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c88:	4630      	mov	r0, r6
 8010c8a:	f000 f81d 	bl	8010cc8 <_isatty_r>
 8010c8e:	b128      	cbz	r0, 8010c9c <__smakebuf_r+0x70>
 8010c90:	89a3      	ldrh	r3, [r4, #12]
 8010c92:	f023 0303 	bic.w	r3, r3, #3
 8010c96:	f043 0301 	orr.w	r3, r3, #1
 8010c9a:	81a3      	strh	r3, [r4, #12]
 8010c9c:	89a3      	ldrh	r3, [r4, #12]
 8010c9e:	431d      	orrs	r5, r3
 8010ca0:	81a5      	strh	r5, [r4, #12]
 8010ca2:	e7cf      	b.n	8010c44 <__smakebuf_r+0x18>

08010ca4 <_fstat_r>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	4d07      	ldr	r5, [pc, #28]	@ (8010cc4 <_fstat_r+0x20>)
 8010ca8:	2300      	movs	r3, #0
 8010caa:	4604      	mov	r4, r0
 8010cac:	4608      	mov	r0, r1
 8010cae:	4611      	mov	r1, r2
 8010cb0:	602b      	str	r3, [r5, #0]
 8010cb2:	f7f1 f8bc 	bl	8001e2e <_fstat>
 8010cb6:	1c43      	adds	r3, r0, #1
 8010cb8:	d102      	bne.n	8010cc0 <_fstat_r+0x1c>
 8010cba:	682b      	ldr	r3, [r5, #0]
 8010cbc:	b103      	cbz	r3, 8010cc0 <_fstat_r+0x1c>
 8010cbe:	6023      	str	r3, [r4, #0]
 8010cc0:	bd38      	pop	{r3, r4, r5, pc}
 8010cc2:	bf00      	nop
 8010cc4:	20012600 	.word	0x20012600

08010cc8 <_isatty_r>:
 8010cc8:	b538      	push	{r3, r4, r5, lr}
 8010cca:	4d06      	ldr	r5, [pc, #24]	@ (8010ce4 <_isatty_r+0x1c>)
 8010ccc:	2300      	movs	r3, #0
 8010cce:	4604      	mov	r4, r0
 8010cd0:	4608      	mov	r0, r1
 8010cd2:	602b      	str	r3, [r5, #0]
 8010cd4:	f7f1 f8b0 	bl	8001e38 <_isatty>
 8010cd8:	1c43      	adds	r3, r0, #1
 8010cda:	d102      	bne.n	8010ce2 <_isatty_r+0x1a>
 8010cdc:	682b      	ldr	r3, [r5, #0]
 8010cde:	b103      	cbz	r3, 8010ce2 <_isatty_r+0x1a>
 8010ce0:	6023      	str	r3, [r4, #0]
 8010ce2:	bd38      	pop	{r3, r4, r5, pc}
 8010ce4:	20012600 	.word	0x20012600

08010ce8 <_init>:
 8010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cea:	bf00      	nop
 8010cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cee:	bc08      	pop	{r3}
 8010cf0:	469e      	mov	lr, r3
 8010cf2:	4770      	bx	lr

08010cf4 <_fini>:
 8010cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cf6:	bf00      	nop
 8010cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cfa:	bc08      	pop	{r3}
 8010cfc:	469e      	mov	lr, r3
 8010cfe:	4770      	bx	lr
